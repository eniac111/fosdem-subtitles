1
0:00:00.000 --> 0:00:13.080
Okay, hi. My name is Thomas. I'm an engineer at ARM. I'm also a contributor to the project

2
0:00:13.080 --> 0:00:20.040
Verizon. This presentation is about Verizon and wants to give you an idea of what the

3
0:00:20.040 --> 0:00:28.720
project is about and how it fits in the wider attestation slash confidential computing picture.

4
0:00:28.720 --> 0:00:34.280
I hope that after listening to this, you'll be motivated to at least have a look at the

5
0:00:34.280 --> 0:00:40.640
project and maybe become an early adopter or even a contributor in the future. Who knows?

6
0:00:40.640 --> 0:00:45.600
So without further ado, let me go through what I've put together here, starting with

7
0:00:45.600 --> 0:00:53.400
a bunch of trees via about the project. So we have a logo and the colorful ovals there

8
0:00:53.400 --> 0:01:01.560
are supposed to represent grapes. In fact, Verizon is a term used in winemaking and is

9
0:01:01.560 --> 0:01:06.520
the moment when grapes start frightening, at which point they can be of different colors.

10
0:01:06.520 --> 0:01:12.960
In fact, the word means change of color. And this is sort of visual metaphor of the blurry

11
0:01:12.960 --> 0:01:17.760
nature of trust, which can be yes, can be no green grape, red grape, or really anything

12
0:01:17.760 --> 0:01:25.920
in between. Now there is some debate around the way the word is pronounced. The French

13
0:01:25.920 --> 0:01:34.560
say Verizon or Verizon. The English say Verizon or Verasion. So you have a choice. You have

14
0:01:34.560 --> 0:01:38.080
multiple choices. In fact, please do not spell it like the American technical company because

15
0:01:38.080 --> 0:01:46.640
that would be really confusing. And it's also a acronym for verification of attestation.

16
0:01:46.640 --> 0:01:51.800
And the project started within ARM in the architecture and technology group, which belong

17
0:01:51.800 --> 0:01:59.800
together with my colleagues at the team as well. It's been adopted by the confidential

18
0:01:59.800 --> 0:02:09.040
computing consortium in June 2022. It's currently in incubation stage, meaning it's in the early

19
0:02:09.040 --> 0:02:15.480
phases of adoption. And we're looking at growing it across a few different metrics.

20
0:02:15.480 --> 0:02:24.280
Most obvious being code and documentation maturity, but also we are also trying to grow

21
0:02:24.280 --> 0:02:30.920
the community a bit. And being here is part of that effort. But yeah, the headline here

22
0:02:30.920 --> 0:02:37.320
is that we've moved from being in our project to be under the Linux foundation umbrella.

23
0:02:37.320 --> 0:02:44.480
Therefore we are completely open governance and of course open source. Before we dive

24
0:02:44.480 --> 0:02:49.320
into the core of the presentation, though, let me give you a bunch of pointers, possibly

25
0:02:49.320 --> 0:02:56.320
useful. The code base, GitHub, the chat, the Zulip chat, the mailing list hosted by the

26
0:02:56.320 --> 0:03:02.920
Confidential Computing Consortium, and these confusing URL, which is one for our regular

27
0:03:02.920 --> 0:03:08.840
weekly calls, which I'm not expecting you to memorize. In fact, you could just follow

28
0:03:08.840 --> 0:03:17.280
the first link in the list, the GitHub org and the splash page should have all of these

29
0:03:17.280 --> 0:03:25.080
other links. But, you know, generally feel free to join any of these channels, pop up

30
0:03:25.080 --> 0:03:32.840
at our calls, ask questions, whatever. You will be always very much welcome.

31
0:03:32.840 --> 0:03:38.640
So now we do a quick recap on remote attestation, starting with the problem. So you suppose

32
0:03:38.640 --> 0:03:42.520
you have these two guys, a testor and a relying party that needs to engage in some sort of

33
0:03:42.520 --> 0:03:48.160
distributed computation. Suppose also that initially they don't trust each other, they

34
0:03:48.160 --> 0:03:53.360
are mutually distrusting. And then you can't make progress in the computation until a trust

35
0:03:53.360 --> 0:03:59.120
relationship can be established between the two. And instances of this kind of situation

36
0:03:59.120 --> 0:04:04.480
abound, for example, in Confidential Computing, the tester is typically the guy that executes

37
0:04:04.480 --> 0:04:09.080
the workload, the Confidential workload, and the relying party needs to know that this

38
0:04:09.080 --> 0:04:14.560
guy is trusted before he shares some input with it. Say, for example, you need to ship

39
0:04:14.560 --> 0:04:27.040
an ML model or some privacy sensitive data or both. And there's obviously the dual problem

40
0:04:27.040 --> 0:04:31.440
where the relying party is the consumer of the output of the computation. Say you are

41
0:04:31.440 --> 0:04:37.200
an actuator of some sort that acts upon signals that are coming from the tester and you want

42
0:04:37.200 --> 0:04:45.200
to trust the tester before making a mess. So you stuff in critical infrastructure especially.

43
0:04:45.200 --> 0:04:50.000
So to break this impasse, the natural thing to do is for one party to convince the other

44
0:04:50.000 --> 0:04:59.800
that they can be trust. And here's where attestation comes in the frame. So what is attestation?

45
0:04:59.800 --> 0:05:07.080
It's a technique that uses specialized components, which is rooted in hardware called the root

46
0:05:07.080 --> 0:05:13.040
of trust that the attestation can use to do basically two things. The sampling the current

47
0:05:13.040 --> 0:05:21.040
state of its TCP, of its trusted computing base, and put together a report and be signed

48
0:05:21.040 --> 0:05:28.500
this report with secret identity keys that are securely stashed inside the root of trust

49
0:05:28.500 --> 0:05:34.120
in hardware. All of that in a trustworthy way. Now that is in such a way that no one

50
0:05:34.120 --> 0:05:40.760
even co-located software or firmware can subvert these sequence of actions. And this signed

51
0:05:40.760 --> 0:05:46.880
report is called attestation evidence or evidence. And the evidence, which is basically a very,

52
0:05:46.880 --> 0:05:54.320
very strong authentication signal can be sent to the RP, which once it receives it, needs

53
0:05:54.320 --> 0:06:04.360
to verify by checking that the signature of the report is correct and that the identity

54
0:06:04.360 --> 0:06:10.800
of the signer is known and trusted. And also to check that the reported TCP state is acceptable

55
0:06:10.800 --> 0:06:18.440
slash good for some local policy defined interpretation of what good means. And the process of verification

56
0:06:18.440 --> 0:06:28.740
of evidence is the process that covers at least these two checks that we just discussed.

57
0:06:28.740 --> 0:06:35.960
And in the remote attestation architecture, which is RFC 9334, freshly published, this

58
0:06:35.960 --> 0:06:40.640
process of verification of evidence is taken care of by the verifier role, which basically

59
0:06:40.640 --> 0:06:51.120
mediates between attesters and relying parties. Note that the lines in this picture are not

60
0:06:51.120 --> 0:06:56.160
real channels between real devices. They are logical channels between architectural roles.

61
0:06:56.160 --> 0:07:02.800
So they can be recomposed and put together in a very different way, depending on the

62
0:07:02.800 --> 0:07:09.320
protocol. Logically, these are the relationships between the various architectural roles.

63
0:07:09.320 --> 0:07:17.840
And in order to do to its function, the verifier needs to know a few things, a few very important

64
0:07:17.840 --> 0:07:24.040
things. First, how to verify the identity of A of the attester. Typically, that is done

65
0:07:24.040 --> 0:07:31.120
by knowing a public key associated with the secret signing key of the attester and knowing

66
0:07:31.120 --> 0:07:44.480
that in a reliable way. And B, what is the expected state of the attester's DCB, of course.

67
0:07:44.480 --> 0:07:49.720
And this can become pretty messy, depending on how complex the attester is. On one hand

68
0:07:49.720 --> 0:07:55.200
of the spectrum, you have very simple attesters that can be described with a single measurement,

69
0:07:55.200 --> 0:08:01.760
but it does not change or changes glacially. And on the other hand, there are composite

70
0:08:01.760 --> 0:08:08.480
detectors that are made of more than one attester, each attester sporting its own DCB, each DCB

71
0:08:08.480 --> 0:08:14.320
made of multiple separate independently moving parts, software components, configuration,

72
0:08:14.320 --> 0:08:20.160
whatnot. With multiple different supply chain actors involved, things can become really

73
0:08:20.160 --> 0:08:28.000
hairy. So if the complexity is very low, it makes sense to co-locate a simple verifier

74
0:08:28.000 --> 0:08:34.840
with the line party. But if that's not the case, it might be a reasonable choice to design

75
0:08:34.840 --> 0:08:41.320
a system where the verification function is effectively offloaded to a separate architectural

76
0:08:41.320 --> 0:08:49.640
component. These options are not, aggregation, desegregation, they are not mutually exclusive.

77
0:08:49.640 --> 0:08:54.440
For example, the case where the tester is composite and its evidence can be clearly

78
0:08:54.440 --> 0:09:04.160
split along a platform slash workload access. So in that case, one might want to call an

79
0:09:04.160 --> 0:09:08.600
external platform verifier. And if everything is okay, then move to a local verifier for

80
0:09:08.600 --> 0:09:16.600
the verification of the workload. As I said, the things are logical, they can be reassembled

81
0:09:16.600 --> 0:09:21.280
and put together in very, very different way. But in general, whatever the system architecture

82
0:09:21.280 --> 0:09:27.840
you come up with, the verifier role needs a bunch of trusted links to the supply chain

83
0:09:27.840 --> 0:09:37.560
that is involved in the verification. Because the supply chain endorses the attester, right?

84
0:09:37.560 --> 0:09:46.200
And so it's critical that the link between the supply chain and the verifier is a trusted

85
0:09:46.200 --> 0:09:53.800
one and that endorsements are genuine. And these are the green boxes in this picture.

86
0:09:53.800 --> 0:10:01.560
But if I could also have an owner, I typically have an owner, that can provide the verification

87
0:10:01.560 --> 0:10:08.720
policies for evidence to it, save for, to customize the process of appraisal or in special

88
0:10:08.720 --> 0:10:17.420
situations to maybe provide out batching. And to complete the rats architectural picture

89
0:10:17.420 --> 0:10:24.600
is the RP owner, or link RP owner that can feed the policy for how to act on the attestation

90
0:10:24.600 --> 0:10:29.760
results coming from the verifier, right? To extract the right party to make decisions

91
0:10:29.760 --> 0:10:38.200
based on the appraisal done by the verifier regarding the attester. So this finishes the

92
0:10:38.200 --> 0:10:46.200
rat three cup. And the question now is, is where is the reason this picture? And as you

93
0:10:46.200 --> 0:10:52.280
may have guessed, is the blue box at the center. But it's not just that it's also all the lines

94
0:10:52.280 --> 0:10:55.960
that are attached to the blue box. That is all the verifier interfaces, which are quite

95
0:10:55.960 --> 0:11:07.880
a few. So from the bottom left and then move. But why? So evidence, we built a bunch of

96
0:11:07.880 --> 0:11:13.320
libraries for manipulating various evidence formats, both from point of view of the verifier,

97
0:11:13.320 --> 0:11:18.720
so the coding and verification, but also from the attester point of view, which means encoding

98
0:11:18.720 --> 0:11:22.680
and signing. This way, if one needs to put together an end to end flow, say for integration

99
0:11:22.680 --> 0:11:27.760
testing or for the demo, it's quite easy to build this, you know, test emulator. You don't

100
0:11:27.760 --> 0:11:31.400
need to deal with the real horror, which can be tricky, especially if you're dealing with

101
0:11:31.400 --> 0:11:39.680
CI environments. The current list of supported evidence includes two EAT profiles, PSA for

102
0:11:39.680 --> 0:11:47.560
Cortex-M, so IoT, Gizmo, and NCCA for the new ARM V9 confidential computing architecture.

103
0:11:47.560 --> 0:11:51.560
We also have a TPM profile, and this came from an integration project we did with our

104
0:11:51.560 --> 0:11:56.840
friends at Enact Trust, who have a product for monitoring device health that can use

105
0:11:56.840 --> 0:12:08.280
Verizon as a back end. We have a bare bones implementation of DICE, TCG, but Open is okay,

106
0:12:08.280 --> 0:12:18.440
I think. And then we have AWS Nitro, contributed by our friends at Veracruz. Veracruz is another

107
0:12:18.440 --> 0:12:24.480
triplacy project that's, so a confidential computing project that uses Verizon as the

108
0:12:24.480 --> 0:12:39.560
back end for their proxy CA. On the endorsement, ref value front, we have implementation for

109
0:12:39.560 --> 0:12:44.000
Quorum, which is a format we co-designed with Intel and from HOFA in the DICE working group

110
0:12:44.000 --> 0:12:52.200
in TCG, and has now been adopted in the ATF rats working group as a, you know, on the

111
0:12:52.200 --> 0:12:58.880
standards track. It's basically a specialized format for describing the, how the attester

112
0:12:58.880 --> 0:13:10.160
looks like to the verifier, which aggregates different sub formats for specifying a bunch

113
0:13:10.160 --> 0:13:18.520
of orthogonal but cool existing dimensions of the platform, so software firmware, trust

114
0:13:18.520 --> 0:13:25.680
anchors, other things. For policy, we have integrated open policy agent, which is an

115
0:13:25.680 --> 0:13:34.280
existing successful general purpose policy engine. So we found something that existed

116
0:13:34.280 --> 0:13:40.800
that was fit for purpose, so we didn't feel the need for invent this specific bit. And

117
0:13:40.800 --> 0:13:45.280
for attestation results, there's an info model that's being standardized in the ATF

118
0:13:45.280 --> 0:13:56.080
which allows to normalize the appraisal output so that the line party policies can be simplified

119
0:13:56.080 --> 0:14:04.240
greatly because now they're fully decoupled from the specifics of the attester. But because

120
0:14:04.240 --> 0:14:08.120
our force is just an info model, we had to create a serialization for it, which we based

121
0:14:08.120 --> 0:14:17.520
on it, we call EER. EER is a good candidate for standardization because there's, you know,

122
0:14:17.520 --> 0:14:24.000
there's nothing at this point in time. And so we're trying to push this through the

123
0:14:24.000 --> 0:14:30.280
rats working group in the ATF as well. And it's the only output form of support for now.

124
0:14:30.280 --> 0:14:37.120
As far as decision result policies, we do nothing because this is completely out of

125
0:14:37.120 --> 0:14:46.880
scope. This is entirely on the underlying party. So yeah, now I wanted to give you the

126
0:14:46.880 --> 0:14:55.560
map of what we just discussed with what exists in the Verizon campaign. And note that nearly

127
0:14:55.560 --> 0:15:01.480
the entirety of what follows is Golang packages and also command line tools and services slash

128
0:15:01.480 --> 0:15:12.000
demons in good old Unix patterns. And this was a conscious choice. We choose to go with

129
0:15:12.000 --> 0:15:17.160
Golang because, you know, one of the main goals of the project is to provide a bunch

130
0:15:17.160 --> 0:15:21.400
of component fleet to assemble system that provide verification as a service. Right.

131
0:15:21.400 --> 0:15:29.880
So and Golang is a very good language in terms of library support, native library support,

132
0:15:29.880 --> 0:15:43.480
system and also the in terms of business, you know, the learning curve is very, is very

133
0:15:43.480 --> 0:15:50.000
non-steep, I would say. So it's trivial to learn and therefore, you know, we hope that

134
0:15:50.000 --> 0:15:59.360
more people can be more contributors could be, could come by lowering the barrier here.

135
0:15:59.360 --> 0:16:06.800
So let's start with a couple of layers zero packages. It is the entity decision token.

136
0:16:06.800 --> 0:16:12.400
It's the main format for attestation messages, either evidence or attestation results that

137
0:16:12.400 --> 0:16:21.600
have been put forward by the ATF. It's basically a framework that extends caught and jot by

138
0:16:21.600 --> 0:16:28.040
adding a number of claims with attestation specific semantics and also a way to instantiate

139
0:16:28.040 --> 0:16:37.840
the framework through so-called profiles and PSA and CCA being just two such examples.

140
0:16:37.840 --> 0:16:41.920
The eat package is the reason the package is not tracking the most recent version of

141
0:16:41.920 --> 0:16:48.640
the draft. We decided to wait for the draft to become out of sea before doing a final

142
0:16:48.640 --> 0:16:55.800
alignment pass because it has all the claims that we need, you know, for independent packages

143
0:16:55.800 --> 0:17:06.520
and so for the moment is as good as it is. But we will need to make it up to date, you

144
0:17:06.520 --> 0:17:13.160
know, as soon as the document goes through the standardization process, final stages

145
0:17:13.160 --> 0:17:20.720
of the standardization process. And it builds on COT, which in turn uses COSY sign and sign

146
0:17:20.720 --> 0:17:27.400
one. So early on we realized that we needed a COSY implementation in Go and the only thing

147
0:17:27.400 --> 0:17:32.800
could find at the point in time was COSY, which was originally developed by Mozilla

148
0:17:32.800 --> 0:17:40.600
for their autograph service. But it supported only COSY sign. So we forked it and extended

149
0:17:40.600 --> 0:17:49.280
to support sign one. But then Mozilla discontinued it. At the point in time we wanted to contribute

150
0:17:49.280 --> 0:17:54.920
it back to the main line. They discontinued the project. So we took responsibility of

151
0:17:54.920 --> 0:18:00.840
it alongside Microsoft. And together with Microsoft we did a fair amount of work, including

152
0:18:00.840 --> 0:18:06.440
improving the ergonomics of the interfaces, you know, and also making implementation generally

153
0:18:06.440 --> 0:18:12.800
more robust. And to that respect, we went through a couple of external security reviews

154
0:18:12.800 --> 0:18:18.960
and addressed all their comments. So we're fairly confident in that this package has,

155
0:18:18.960 --> 0:18:28.160
you know, production quality. And we shipped one zero zero just a couple of weeks ago. And

156
0:18:28.160 --> 0:18:35.760
this is the first ever released bit of a reason. So we're particularly excited by that. It's

157
0:18:35.760 --> 0:18:41.560
an interesting package among the lot also because it's used not just by Verizon, but

158
0:18:41.560 --> 0:18:51.720
also by other quite big projects. Notary in CNCF and SIGStore open as a self. So it's

159
0:18:51.720 --> 0:19:01.560
a nice, it's come out as a nice, useful building block that has relevance in the community.

160
0:19:01.560 --> 0:19:07.200
Now moving on to the evidence, you know, these are the evidence base, the red, the orange

161
0:19:07.200 --> 0:19:18.200
things. We have the two profiles for CNCA and PSA, the dice thingy and the sort of house

162
0:19:18.200 --> 0:19:25.080
like shape is the command line interface called AVCLI, which is an attester emulator that

163
0:19:25.080 --> 0:19:30.320
also talks of Verizon verification API client side. And so can be used to play with the

164
0:19:30.320 --> 0:19:37.520
services quite easily on a command line. The yellow things are the attestation results

165
0:19:37.520 --> 0:19:44.080
packages. So here is only one package, basically, it's Verizon here. And there's an associated

166
0:19:44.080 --> 0:19:51.800
CLI arc that can be used to verify and pretty print results. So one can pipe EVCLI output

167
0:19:51.800 --> 0:19:57.980
into arc to see what's what happened during appraisal. And the green thing is the bunch

168
0:19:57.980 --> 0:20:04.640
of endorsement, rev file related packages, including the top level manifest format coding

169
0:20:04.640 --> 0:20:12.480
core M and the dependent bits for for verification keys and software and so on. So, coding commit

170
0:20:12.480 --> 0:20:18.640
coding quads and suite respectively. And also COCI, which is a common line interface for

171
0:20:18.640 --> 0:20:25.600
assembling core M's from from a bunch of JSON templates. You assign them and then you can

172
0:20:25.600 --> 0:20:31.520
submit them to the Verizon services using the provisioning API, which is linked into

173
0:20:31.520 --> 0:20:40.240
cochlea. And finally, the blue box, including microservices, which I will talk about in

174
0:20:40.240 --> 0:20:47.760
the next slide, and the client side interface of the Verizon API, which exists also in Rust

175
0:20:47.760 --> 0:20:54.040
with C bindings. And I think a pure C implementation has been contributed as well. I don't know

176
0:20:54.040 --> 0:21:03.240
if it's been merged fully or is still an open PR, but anyway. So yeah, well, let's have

177
0:21:03.240 --> 0:21:10.640
a look, a quick look at the service architecture. Basically, there are two pipelines, one for

178
0:21:10.640 --> 0:21:15.840
verification, the bottom one, and one for provision, they did the top one that converge

179
0:21:15.840 --> 0:21:25.920
on to the core services service, VITIS, which connects to the data and the plugin stores.

180
0:21:25.920 --> 0:21:35.720
It's called VITIS. VITIS is another wine making point. And it's basically Verizon's services

181
0:21:35.720 --> 0:21:45.880
transfer computing base. It has a whole the security related computation in it. The interesting

182
0:21:45.880 --> 0:21:55.760
thing is that the processing in both pipelines is in stages and with very precise hook points

183
0:21:55.760 --> 0:22:01.600
where plugin code can be supplied by the user in order to customize certain aspects of the

184
0:22:01.600 --> 0:22:12.080
processing. So basically, what you do is as a user that wants to add their own format,

185
0:22:12.080 --> 0:22:20.000
either of evidence or for endorsements and ref values, you build your plugin code so

186
0:22:20.000 --> 0:22:33.880
that you basically you adapt your formats to the standardized processing pipeline. Right.

187
0:22:33.880 --> 0:22:43.160
So next steps. We have a few exciting new things in the pipeline. Adding new formats,

188
0:22:43.160 --> 0:22:50.200
of course, opportunistically, though, depending on contributions, integrations, etc. We want

189
0:22:50.200 --> 0:22:55.400
to improve documentation, not a very exciting bit, but a necessary step in making the project

190
0:22:55.400 --> 0:23:02.080
useful and usable. And this is a big one. We want to work on the identity and access

191
0:23:02.080 --> 0:23:11.400
management to support the, you know, the more the more generic multi-tenant service. And

192
0:23:11.400 --> 0:23:15.720
this is the single missing bit that prevents the reason from being used in a production

193
0:23:15.720 --> 0:23:24.760
context at this point in time. And finally, we want to allow a static plugin-less build

194
0:23:24.760 --> 0:23:36.800
in order to reduce the potential attack surface on the surfaces. Yeah. This is what the next

195
0:23:36.800 --> 0:23:42.960
months will bring us. So questions. Thank you very much, by the way, for listening.

196
0:24:06.800 --> 0:24:07.800
Thank you.


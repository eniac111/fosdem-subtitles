WEBVTT

00:00.000 --> 00:11.060
Hello everyone. It's good to be back. It's been a while. This is my first time giving

00:11.060 --> 00:18.920
a talk here. I'm really pleased to be here. My name is Joe. I am a coder. I work in London

00:18.920 --> 00:26.720
for local government. I work a lot with geospatial data and I am a Python programmer. Have we

00:26.720 --> 00:38.360
got any Python coders in today? Anyone using Jupyter? Cool. Right, so let's go. So in lockdown

00:38.360 --> 00:46.720
in 21, we had a census in England and Wales and the data is coming now. Most of the data,

00:46.720 --> 00:52.960
all of the data, sorry, is spatial data. So we want to look at this on a map. Why? Most

00:52.960 --> 00:58.960
of the data is geospatial. In local government, everything that we do generally happens somewhere,

00:58.960 --> 01:04.480
whether it's collecting a bin, looking after young people, looking after old people, cleaning

01:04.480 --> 01:11.480
the streets. We always have to think about where this is happening. Apparently, 60% of

01:11.480 --> 01:18.960
all data is geospatial data. So I spend a lot of my time making maps in terms of data

01:18.960 --> 01:26.160
for this. Now, I'm going to be focusing on one part of the census data set today and

01:26.160 --> 01:33.280
that's the east end of London in an area called Tower Hamlets. This may be familiar to some

01:33.280 --> 01:43.320
people if you've ever seen places like Columbia Road, Bethnal Green, Canary Wharf. These are

01:43.320 --> 01:50.440
all parts of the east end of London and this is the main area I'm going to be talking about.

01:50.440 --> 01:57.640
So where is Tower Hamlets in London? So what you can see here is a very small area. It's

01:57.640 --> 02:04.040
20 square kilometres. But this is quite a special area because in the whole of England

02:04.040 --> 02:10.040
and Wales, it has the highest population density. It has the most people packed into a small

02:10.040 --> 02:16.960
area. It also has the fastest growing population. So it's becoming more and more dense. So in

02:16.960 --> 02:23.320
terms of providing services for residents, we need to have a big think about where all

02:23.320 --> 02:31.080
the people are and how they fit in. Now, when we make maps, the first thing we usually do

02:31.080 --> 02:40.200
is we make a Coropleth map. However, the data set for population density in our area, and

02:40.200 --> 02:47.400
I do apologise, I couldn't fit it all on screen, it doesn't appear very well as a Coropleth.

02:47.400 --> 02:53.320
The reason is because the data set is not very evenly distributed. There is, as we will

02:53.320 --> 03:02.080
see, some areas with extremely high population density. So over here you've got Whitechapel.

03:02.080 --> 03:07.580
We have very high population density in Whitechapel. Over here we have a new development which

03:07.580 --> 03:13.400
used to be industrial land. Again, very, very high density developments, big towers full

03:13.400 --> 03:19.640
of people. And then we also have, just to the south of the financial sector, some areas

03:19.640 --> 03:25.160
with a very high population density with a lot of people packed into a small place. But

03:25.160 --> 03:30.480
in terms of the data viz, this map doesn't really help very much. So the Coropleth data

03:30.480 --> 03:36.040
viz didn't work for us. So we began to think, what else can we try? And we checked the data

03:36.040 --> 03:41.520
distribution and sure enough, we've got some serious outliers. This is why the Coropleth

03:41.520 --> 03:48.240
map didn't work very well for us. So what did we do next? We tried to log transform

03:48.240 --> 03:55.880
the data. And yeah, you can see this area here. You can begin to see the density there.

03:55.880 --> 04:01.320
There's quite a few large developments with a lot of people squeezed in. Whitechapel,

04:01.320 --> 04:06.160
you don't see so much happening there. But you do see just to the south of the financial

04:06.160 --> 04:13.240
sector, high density of population. The areas with low density, this is where all the banks

04:13.240 --> 04:19.480
are. So obviously there's no people living in there. This is an old dock near to the

04:19.480 --> 04:23.800
Tower of London. There's no people living there. There's some very nice pubs though,

04:23.800 --> 04:29.600
if you ever find yourself in that area. The Dickens Inn is excellent. I can recommend

04:29.600 --> 04:36.320
that to everybody. And then up here in the north, we have Victoria Park, which is where

04:36.320 --> 04:43.160
the east end borders with Hackney. And obviously there's no people there, at least having their

04:43.160 --> 04:49.080
address registered there. Log transform data looks better on a corrupt

04:49.080 --> 04:55.040
left map. However, you can see the legend. You lose the data. So you can try to fix the

04:55.040 --> 05:01.000
legend. But we want to write as little code as we possibly can. We don't want to keep

05:01.000 --> 05:05.920
fixing legends and things like that. So we began to think about other ways to visualize

05:05.920 --> 05:14.160
our data set. So what did we do? I am a Python coder, but there's a really nice package in

05:14.160 --> 05:24.520
R called Cartogram. And this is a technique called a density equalization algorithm that

05:24.520 --> 05:31.880
basically turns your data set into a Voronoi first, and then it rescales the polygons from

05:31.880 --> 05:42.400
the Voronoi relative to an attribute of the data. This technique is quite popular. There's

05:42.400 --> 05:48.560
a wonderful geographer called Danny Darling, who has an amazing website called World Mapper,

05:48.560 --> 05:54.640
which I strongly recommend you have a look at. And they do things like showing poverty,

05:54.640 --> 06:02.440
inequality, food pressure all around the world. And they size the geographies relative to

06:02.440 --> 06:09.000
the attributes of the geospatial data. So this is a great technique. There is one issue

06:09.000 --> 06:14.800
here though, is that if you want to overlay different layers, then it becomes difficult.

06:14.800 --> 06:21.520
And also the map does look a little bit unfamiliar as well. But it does show particularly where

06:21.520 --> 06:28.200
you have clustering, where you have a number of census areas, and I'm going to say a little

06:28.200 --> 06:34.200
bit more about census areas, where you have a few together that have high data attribute

06:34.200 --> 06:39.680
value, then they all get bigger together. So what we can see here is just to the south

06:39.680 --> 06:44.720
of the financial sector, you can see there's a lot of worker bees all crammed into this

06:44.720 --> 06:50.320
place, and then it increases the volume on the map. So it's a nice database, but still

06:50.320 --> 06:56.400
we have a small challenge if we want to add more data over the top. And also it's a bit

06:56.400 --> 07:06.600
unfamiliar for people that don't use cartograms. So this is a map made using Data Racker. It's

07:06.600 --> 07:13.960
a very nice website. And they have something called a symbol plot. And what this does is

07:13.960 --> 07:21.200
it just basically shows little mountains, little peaks that show the value of the data

07:21.200 --> 07:27.360
attribute that you're interested in at the place where that data is happening. And so

07:27.360 --> 07:34.880
again we can see over here you've got Whitechapel, lots of people packed in there, just to the

07:34.880 --> 07:41.240
south of the financial sector, lots of people packed in there, the new developments here

07:41.240 --> 07:47.000
by the river in Blackwall and here by the river in the old industrial zone. So this

07:47.000 --> 07:53.680
is quite interesting. It gives us some context and it gives us the data. I really like this

07:53.680 --> 08:01.200
database, but it's Data Rapper, so it's not FOSS and it's not Python, and I like to use

08:01.200 --> 08:08.200
Python. So it was great, but it helped, but it didn't do everything that we needed it

08:08.200 --> 08:15.560
to do. The other thing that you will notice, and I'll try to explain this briefly, is that

08:15.560 --> 08:22.360
we have one really high value here. And there's a reason for this. It's an outlier because

08:22.360 --> 08:31.400
actually it's this value here. It's an outlier because, and the reason why it's an outlier

08:31.400 --> 08:37.400
is because the actual census area is really, really small. And the thing about the people

08:37.400 --> 08:44.160
who produce the census data is that they have to create census areas using roughly 100 to

08:44.160 --> 08:49.160
600 people. Generally speaking, it's about 300 people, but they have to make it all fit

08:49.160 --> 08:54.880
together like a big jigsaw puzzle. So sometimes it's hard for them to make it work really

08:54.880 --> 09:04.360
well. So in this case, this census area with really high density is actually just one building.

09:04.360 --> 09:08.600
And so it's not a particularly big building, but everyone's squeezed in there. So yeah,

09:08.600 --> 09:15.600
so the data is quite hard to work with, but it is interesting. So when I was working with

09:15.600 --> 09:20.400
Data Wrapper, I really liked it. And it did remind me of when I was young and I was reading

09:20.400 --> 09:25.920
Lord of the Rings books, I used to really like the map at the front of all these mountains,

09:25.920 --> 09:36.400
showing the Misty Mountains in those books. And so I was thinking I could probably make

09:36.400 --> 09:44.320
a mountain with Python. How hard can it be? It turns out it's really easy. This is the

09:44.320 --> 09:51.720
essence of the library. It's just one function. You take a point on a map, you turn that point

09:51.720 --> 09:58.680
into a line. The line has a start point, which is just a couple of points of longitude, a

09:58.680 --> 10:05.760
tiny little bit of longitude to the west of your point. Then you convert your point to

10:05.760 --> 10:11.200
a latitude, which is kind of like a proxy for the height of the mountain using some

10:11.200 --> 10:19.800
kind of algorithm that you choose. In my case, I'm just like using a range. So I take the

10:19.800 --> 10:27.600
minimum and maximum value of the input range, which is a separate function here. And range

10:27.600 --> 10:34.360
one is essentially the minimum population density and the maximum. And then I convert

10:34.360 --> 10:41.960
that to latitude values. And then the third point on the line is just a little bit of

10:41.960 --> 10:48.040
longitude to the east of my point. And then you use that to create a small triangle. Really

10:48.040 --> 10:57.440
easy, really easy, and a lot of fun as well. So this is what I made with Python. And it's

10:57.440 --> 11:02.360
very similar to the data wrapper map. But I was going for like a kind of hand-drawn kind

11:02.360 --> 11:09.280
of a look to make it look like something from Lord of the Rings. And it's the same thing.

11:09.280 --> 11:15.440
You've got Whitechapel here. You've got the financial sector here. And so on and so on.

11:15.440 --> 11:21.400
So that was fun. But population density, we were just talking about the reasons why it's

11:21.400 --> 11:28.800
a messy data set. There's one place in Chelsea which has a population density of 2 million

11:28.800 --> 11:35.200
people per square kilometre. So this is a very difficult data set to represent using

11:35.200 --> 11:42.300
any tools available. So it's interesting. The other thing about Kensington in Chelsea

11:42.300 --> 11:51.600
is this is where Grenfell Tower is, if anybody knows about that story. This is where it happened.

11:51.600 --> 11:56.560
So let's try some other data sets to see if they're really messy. This is people that

11:56.560 --> 12:03.520
live in one-bedroom homes. So this is tiny little flats filled with people. And so you

12:03.520 --> 12:08.000
can see all the worker bees for the financial sector. A lot of those are living in one-bedroom

12:08.000 --> 12:13.920
flats. And actually the new build. This is a very new development here. And this is a

12:13.920 --> 12:18.400
very new development here. So it looks like people who are building homes now are building

12:18.400 --> 12:24.840
a lot of one-bedroom homes. Two-bedroom homes. Generally everything is kind of the same.

12:24.840 --> 12:32.440
Nothing really jumps out here. Three-bedroom homes. What you can start to see with three-bedroom

12:32.440 --> 12:40.280
homes is that it's generally even. But actually in this area here, which is Bowe, which is

12:40.280 --> 12:45.600
near the Bowe Bales Church, which is used to decide if someone's a traditional East

12:45.600 --> 12:51.040
End Cockney or not, that's kind of this area really. So the Cockneys seem to have three-bedroom

12:51.040 --> 12:58.600
homes generally. And then four or more. And what you see here is in the areas where the

12:58.600 --> 13:02.600
financial workers live, there's still quite a lot of four-bedroom homes. But in some of

13:02.600 --> 13:10.080
these new build areas, there's very, very few relative to the rest of the area. So let's

13:10.080 --> 13:16.360
look at another slightly more famous area. This is Westminster in central London. And

13:16.360 --> 13:22.400
so you can see this is where Hyde Park is. There's no one living there. Again, this is

13:22.400 --> 13:29.760
the population density data set. And then you've got an open street map, base map, just

13:29.760 --> 13:36.260
to help with orientation. And then in a future version of the module, I think I might do

13:36.260 --> 13:42.080
some more stuff with open street map. And then if you look at some of the outer London

13:42.080 --> 13:50.560
areas, and this is where I live, you can see areas of urban density. But you can also see

13:50.560 --> 13:55.280
some very suburban areas where the population density is lower. This is like where most

13:55.280 --> 14:01.080
people are living in houses, basically. And you can also see green space. So we're nearly

14:01.080 --> 14:08.600
finished. I just want to give a massive shout to nbdev. It's really good if you use Jupyter.

14:08.600 --> 14:15.920
Just check it out. Number one, if you're trying to do version control on Jupyter notebooks,

14:15.920 --> 14:21.440
it helps you with any clashes and any merge conflicts because it removes the metadata

14:21.440 --> 14:26.160
in the JSON that sometimes causes conflicts. If you have a team of people working on the

14:26.160 --> 14:32.560
same notebook, this is a real lifesaver. And also it just bakes in good practice. So it

14:32.560 --> 14:38.840
means that your code gets shared on GitHub really easily. It helps you or encourages

14:38.840 --> 14:45.040
you at least to write good documentation for your team and the community. It also encourages

14:45.040 --> 14:54.480
you to write good tests. And it enables you to publish modules. So big shout to them.

14:54.480 --> 15:02.040
I'd also like to thank Jaric, who has produced a wonderful PWA for Fostem called Sir John

15:02.040 --> 15:08.200
O'Rocks. Do check it out. It's a really good way of looking at the schedule for Fostem

15:08.200 --> 15:13.520
and you can watch the videos with Sir John O'Rocks. And also Ed, who's going to be giving

15:13.520 --> 15:20.240
a really cool talk on OSM and Wikidata. And finally, I'd like to thank all the council

15:20.240 --> 15:43.920
coders everywhere. Thanks for having me.

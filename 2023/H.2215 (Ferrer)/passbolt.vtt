WEBVTT

00:00.000 --> 00:13.440
Please welcome to the stage, Remy Berto.

00:13.440 --> 00:16.000
Hi everyone.

00:16.000 --> 00:25.800
I just wanted to say thank you to the first them for inviting us again this year.

00:25.800 --> 00:31.400
And maybe we can acknowledge the fact that it's been two years without first them in

00:31.400 --> 00:33.440
real life and it's really nice to see you.

00:33.440 --> 00:38.280
And thanks a lot for the volunteers and the organizer of the founders of the first them.

00:38.280 --> 00:42.040
Maybe we can give them a quick round of applause because they are doing an amazing job.

00:42.040 --> 00:43.040
Thank you guys.

00:43.040 --> 00:51.640
So this is the original PassBolt team in 2017 when we just after the first launch of PassBolt

00:51.640 --> 00:54.680
and the team have grown quite a bit since.

00:54.680 --> 00:57.120
And it's nice to see you all.

00:57.120 --> 01:00.680
So who's using a password manager in the room?

01:00.680 --> 01:01.680
Wow.

01:01.680 --> 01:02.680
Amazing.

01:02.680 --> 01:06.160
Who's using key pass?

01:06.160 --> 01:07.400
Quite a bit.

01:07.400 --> 01:10.120
And volt warden, bit warden.

01:10.120 --> 01:12.960
Nobody's perfect.

01:12.960 --> 01:14.960
PassBolt.

01:14.960 --> 01:21.360
I'm glad to see the PassBolt developers raising their hands.

01:21.360 --> 01:23.200
So you're like, okay, wait.

01:23.200 --> 01:26.920
What is our password manager or is PassBolt different from...

01:26.920 --> 01:30.800
Well, to assess the difference, we will start first with the security.

01:30.800 --> 01:35.400
I will tell you a little bit what are the difference in terms of security between PassBolt

01:35.400 --> 01:38.400
and other more classic password managers.

01:38.400 --> 01:43.400
So one of the main aspect of PassBolt is it is based on openPGP.

01:43.400 --> 01:45.160
So it's based on public key cryptography.

01:45.160 --> 01:47.760
Who knows a little bit about openPGP?

01:47.760 --> 01:50.080
Well, okay, quite a bit.

01:50.080 --> 01:51.800
So I don't need to explain so much.

01:51.800 --> 02:00.200
But traditional password manager use master password, the master key that is generated

02:00.200 --> 02:02.440
from the user password.

02:02.440 --> 02:03.840
And then you have a derivation.

02:03.840 --> 02:10.360
They use a key derivation function, so argon2 or something less strong.

02:10.360 --> 02:16.400
So for example, key pass use argon2 and last pass use pbkf2.

02:16.400 --> 02:22.080
And I think Bitwarden and Volkwarden are going to support argon2 very soon.

02:22.080 --> 02:28.400
But historically, these algorithms, they depend on the amount of rounds that you do, especially

02:28.400 --> 02:30.840
the pbkf2.

02:30.840 --> 02:35.160
They depend on the number of rounds that you do on the user password.

02:35.160 --> 02:40.000
And if the user password is weak, also the encryption strength is affected.

02:40.000 --> 02:45.640
So when you use a private key that is truly random, like in PassBolt, and some other password

02:45.640 --> 02:53.040
managers, like one password is doing that as well, they pad with a random private key,

02:53.040 --> 02:55.920
the user password.

02:55.920 --> 03:00.080
You have some interesting security property on top.

03:00.080 --> 03:04.800
So it's a little bit stronger, because it's not depending on the user password strength.

03:04.800 --> 03:11.400
And you also have, thanks to the openPGP being interoperable standards, you have the ability

03:11.400 --> 03:13.980
to choose which algorithm you want to use.

03:13.980 --> 03:20.240
So for example, you could choose the size of the RSA key that you're using, or you could

03:20.240 --> 03:29.000
opt for elliptical cryptography, newer algorithm that are part of the, almost part of the openPGP

03:29.000 --> 03:35.520
standard, and reduce the size of the messages so you can play a little bit with the algorithm,

03:35.520 --> 03:37.120
depending on your requirements.

03:37.120 --> 03:44.960
So the way it works in PassBolt is we encrypt every secret, which is at its baseline a JSON

03:44.960 --> 03:48.120
component.

03:48.120 --> 03:51.480
We encrypt it once per users.

03:51.480 --> 03:57.440
So it means that, for example, when you want to revoke the access of somebody, for example,

03:57.440 --> 04:02.600
this person leave the organization, and you want to make sure that their access is completely

04:02.600 --> 04:07.000
revoked, we just have to delete the entry for that particular user.

04:07.000 --> 04:11.120
How it works with other password managers, it depends.

04:11.120 --> 04:16.920
But some of them, what they do is that they create what they call a vault or a collection,

04:16.920 --> 04:25.760
and they encrypt a bit like in openPGP a session key with the public key of the users.

04:25.760 --> 04:30.220
So when the user leave, they are not able to actually revoke the access.

04:30.220 --> 04:36.400
So if the user, for example, managed to get a copy of the session key, they can still

04:36.400 --> 04:42.320
access later the archive, even though they don't have the logical rights.

04:42.320 --> 04:49.080
So having a private key is not that great when it comes to usability, because you need

04:49.080 --> 04:51.440
to transfer that key to other devices.

04:51.440 --> 04:55.800
So it makes the interaction with the system a little bit more complicated.

04:55.800 --> 05:01.520
So for example, when you use a mobile phone to transfer from your browser to the mobile

05:01.520 --> 05:05.560
phone, we will have a succession of QR code to make sure that we are not sending the key

05:05.560 --> 05:07.020
server side and all that.

05:07.020 --> 05:11.240
So it makes the interactions a little bit more complicated than just the user typing

05:11.240 --> 05:14.440
their passwords.

05:14.440 --> 05:22.520
The advantage of having public key cryptography available is that we can also change the authentication

05:22.520 --> 05:23.520
system.

05:23.520 --> 05:29.960
So we have a challenge-based authentication system where the user needs to encrypt for

05:29.960 --> 05:37.960
the server a random generated token, the server will verify the signature, and will send back

05:37.960 --> 05:39.320
that token.

05:39.320 --> 05:45.760
And at the same time, encrypt with the user public key another random token that will

05:45.760 --> 05:49.360
be used by the user to authenticate later.

05:49.360 --> 05:55.040
So it's in practice much stronger than just sending, for example, the password or hash

05:55.040 --> 06:00.720
version of the password, because each authentication attempt is unique.

06:00.720 --> 06:07.280
And you also have the advantages of checking the authority of the server at the same time.

06:07.280 --> 06:10.160
So it's not prone to credential stuffing.

06:10.160 --> 06:15.160
So you cannot, for example, try multiple passwords and try to authenticate with that.

06:15.160 --> 06:21.080
You need to prove that you have the possession of the private key twice.

06:21.080 --> 06:27.720
Another big difference with the other password managers, especially the ones that are online,

06:27.720 --> 06:32.080
is that we force the usage of a browser extension.

06:32.080 --> 06:39.160
So these have the advantages of if the server is compromised, an attacker cannot modify

06:39.160 --> 06:41.600
the JavaScript that is running the application.

06:41.600 --> 06:47.040
They cannot, for example, write a customization that takes the passphrase and set it somewhere

06:47.040 --> 06:48.040
else.

06:48.040 --> 06:53.120
So if the server is compromised, they cannot change the code of the application that is

06:53.120 --> 06:54.960
run on the client.

06:54.960 --> 07:00.880
One of the advantages of this is that you can also roll out updates automatically.

07:00.880 --> 07:08.080
So for example, if you're using passwords in your organization, if there is a flaw in

07:08.080 --> 07:10.960
the client, you will get automatically the updates.

07:10.960 --> 07:15.740
You don't need to update your server to get a fix on the client.

07:15.740 --> 07:20.800
So these have the disadvantage that you need to trust us with the update.

07:20.800 --> 07:25.360
At least you need to trust the web store, or you need to basically set up the web store

07:25.360 --> 07:27.160
yourself.

07:27.160 --> 07:33.960
And also, it's not specific to Passball, but when you run a browser extension, typically

07:33.960 --> 07:39.800
the website can find out if you have this extension installed or not, or at least find

07:39.800 --> 07:42.680
out if you have an extension installed.

07:42.680 --> 07:47.440
So one of the advantages of having a browser extension is you can do form interactions.

07:47.440 --> 07:53.220
So for example, you can suggest things in a form, or that sort of things.

07:53.220 --> 07:59.560
So when you see the application of Passball, when you visit a website, it's actually not

07:59.560 --> 08:01.440
the website serving this application.

08:01.440 --> 08:09.400
Everything is in one iframe, and the website that is serving you basically just a white

08:09.400 --> 08:14.920
page and the browser extension is injecting an iframe, and the website cannot enter inside

08:14.920 --> 08:23.080
that iframe thanks to browser behaviors, how they sandbox iframes of browser extension

08:23.080 --> 08:28.840
because they consider this from the point of view of being on a different domain.

08:28.840 --> 08:32.640
We have also anti-phishing mechanism available by default.

08:32.640 --> 08:37.560
You've seen maybe with one password or B2R then there are campaigns going on at the moment

08:37.560 --> 08:41.880
where they try to trick the users to enter their passwords.

08:41.880 --> 08:46.080
In the case of Passball, we have a mechanism built in by default.

08:46.080 --> 08:54.560
So as you can see, we are very transparent about the risk and the residual risk and the

08:54.560 --> 08:56.840
strengths of Passball.

08:56.840 --> 08:58.800
So we are 100% open source.

08:58.800 --> 09:04.720
We are audited at least I think it was 10 times in 18 months, and we have one audit

09:04.720 --> 09:09.840
going on right now, and we have another audit at the end of February.

09:09.840 --> 09:11.760
We work mostly with Q53.

09:11.760 --> 09:16.600
We are based in Germany, and they do a lot of auditing for password managers.

09:16.600 --> 09:21.720
So every time we release a big feature, they audit the changes.

09:21.720 --> 09:24.600
Of course, it doesn't mean that it's perfect.

09:24.600 --> 09:28.520
We are human, so it's possible that there are some mistakes in the libraries that we

09:28.520 --> 09:33.680
use or in what we are doing, but at least we are trying to be transparent about what

09:33.680 --> 09:40.360
are the efforts that we make to report this vulnerability, if any, and fix them in a timely

09:40.360 --> 09:41.360
manner.

09:41.360 --> 09:43.840
So openPGP is not perfect.

09:43.840 --> 09:48.200
You have all the algorithms that you don't want to run, so we need to also make sure

09:48.200 --> 09:53.400
that we are not letting you use bad algorithms.

09:53.400 --> 09:55.800
It's not quantum resistant.

09:55.800 --> 10:03.480
We have still a lot of metadata that are not encrypted, but we don't offer user key rotations.

10:03.480 --> 10:06.160
So all these risks are explained to the end user.

10:06.160 --> 10:09.760
Of course, not everybody can understand this, but if you're an administrator running this,

10:09.760 --> 10:12.320
then you have access to this information.

10:12.320 --> 10:17.800
One thing I didn't mention is we are made in Luxembourg, so if you're into digital sovereignty,

10:17.800 --> 10:19.760
it might be interesting for you.

10:19.760 --> 10:25.880
So okay, the security, that was 2-3 of the talks, but how does it look like?

10:25.880 --> 10:29.240
So it's mostly a web application.

10:29.240 --> 10:33.480
You can have it on most of the browsers except Safari.

10:33.480 --> 10:39.600
We have a desktop app coming soon, and Android and iOS native application.

10:39.600 --> 10:46.180
One of the strengths of Passport is that you can assign permission in a granular fashion.

10:46.180 --> 10:54.680
So since the secret is encrypted once per person, per entry, we are able to do interesting

10:54.680 --> 10:57.000
user experience when it comes to share.

10:57.000 --> 11:02.320
So for example, we can share with group, we can assign rights to folders, and we can,

11:02.320 --> 11:06.640
instead of having rights at the collection level where you have everybody that have access

11:06.640 --> 11:10.000
to the collection that have the same right for all the entry in the connection, we are

11:10.000 --> 11:14.920
able to do things a little bit more fine grained.

11:14.920 --> 11:19.520
Since you're all developers, might interest you as well, that if you have curl and GPG

11:19.520 --> 11:24.360
on the system, you can pretty much interact with Passport because it doesn't require any

11:24.360 --> 11:30.160
fancy technology to be able to retrieve the secret, decrypt it, or even basically push

11:30.160 --> 11:32.160
an update.

11:32.160 --> 11:34.320
So you can do some interesting things.

11:34.320 --> 11:41.120
For example, if you want to inject secrets in your pipelines or even build something

11:41.120 --> 11:46.440
within Siebel, you can integrate with Passport quite easily.

11:46.440 --> 11:53.000
So as I mentioned before, we also have the quick access, which is interaction in the

11:53.000 --> 11:59.440
page that allows you and your user, especially the non-advanced user, to be prompted to

11:59.440 --> 12:01.800
use a Passport manager.

12:01.800 --> 12:03.600
We have iOS and Android app.

12:03.600 --> 12:09.160
There are native apps, and you can use biometrics to liberate the passphrase, so you don't have

12:09.160 --> 12:11.760
to type your passphrase all the time.

12:11.760 --> 12:14.360
You can host it yourself.

12:14.360 --> 12:16.120
There is no phoning home.

12:16.120 --> 12:22.560
Basically, it works offline if you want, and some of organizations that are using Passport

12:22.560 --> 12:25.880
are working in an air gap environment, and it works fine.

12:25.880 --> 12:31.360
We have basically packages for all distributions, but we are trying to keep up with all the

12:31.360 --> 12:32.360
versions.

12:32.360 --> 12:35.600
It's kind of complicated, so we might not have precisely the version that you want,

12:35.600 --> 12:39.320
but there is a good chance that you will find something that interests you.

12:39.320 --> 12:44.160
And we have a one-click install with AWS AMI and DigitalOcean if you are into that kind

12:44.160 --> 12:46.040
of things.

12:46.040 --> 12:48.160
What's cooking for 2023?

12:48.160 --> 12:51.040
So we are doing mobile-to-mobile key transfer.

12:51.040 --> 12:55.280
So we have desktop-to-mobile, and we want to do mobile-to-mobile and then mobile-to-desktop

12:55.280 --> 12:59.240
so that basically people can start their journey on Passport from any device and transfer their

12:59.240 --> 13:03.280
key easily, but it's not completely there yet.

13:03.280 --> 13:06.640
We want to allow administrators to enforce MFA.

13:06.640 --> 13:13.360
Even though the authentication in Passport is quite strong, still people want to tick

13:13.360 --> 13:17.720
that MFA box, and we want to give them the tools to do that.

13:17.720 --> 13:21.720
We will support Paski's WebO 10 for 2FA as well.

13:21.720 --> 13:28.600
There is a new help site, some more great configuration stuff coming, user self-registration,

13:28.600 --> 13:34.120
desktop app, and then later on we are going to work on Passport expiry, manifest v3.

13:34.120 --> 13:37.560
It's the new format that is pushed by Google for browser extension.

13:37.560 --> 13:43.400
It brings zero value for the end user, but Google say we have to do it.

13:43.400 --> 13:47.920
And then custom fields and more content types and the ability to choose what is encrypted

13:47.920 --> 13:52.840
or not so that maybe your organization wants to search on certain fields, some other organization

13:52.840 --> 13:57.440
wants to have it encrypted, so we will give you flexibility to create your own custom

13:57.440 --> 14:01.280
types and define what is searchable, what is not.

14:01.280 --> 14:06.120
So I had a lot of slides on how it's made of, obviously I run out of time, but if you

14:06.120 --> 14:13.520
are interested and you want to have a chat with us on how it's made, we will be at the

14:13.520 --> 14:20.560
bar behind at 6 o'clock, and we will be giving out some swag so we have like a little fortune

14:20.560 --> 14:28.440
wheel that you can spin and have that you can even win a car.

14:28.440 --> 14:40.960
Okay that's all for me, thanks a lot.

14:40.960 --> 14:43.400
Any questions for Remy?

14:43.400 --> 14:44.800
We have like 42 seconds.

14:44.800 --> 14:46.800
That would be a quick one.

14:46.800 --> 14:59.320
Are you thinking about a user that has many clients like CLI, code, browser extension

14:59.320 --> 15:06.160
and one client, are you thinking about something like this?

15:06.160 --> 15:12.480
He's asking if it would be possible to have like one key per device instead of having

15:12.480 --> 15:19.040
one key to hold them all, and we've talked about this and it's an interesting idea, but

15:19.040 --> 15:21.040
that would mean like a breaking change.

15:21.040 --> 15:26.600
But that's an interesting idea and like as I mentioned there is no key revocation at

15:26.600 --> 15:30.600
the moment, but this is also something that we want to do to allow people to rotate their

15:30.600 --> 15:34.760
keys and that sort of things.

15:34.760 --> 15:36.000
Thank you, Remy.

15:36.000 --> 15:37.000
Thank you very much.

15:37.000 --> 15:46.360
And I Very Excited forbell looking now.

15:46.360 --> 15:47.480
IANPerd.

15:47.480 --> 15:48.920
Okay.

15:48.920 --> 15:52.480
developing heck.

15:52.480 --> 16:06.460
Okay now one activity that we are going to do is Fit Allied rightfully,reason and

WEBVTT

00:00.000 --> 00:15.480
Let's entire talk is inspired by a single remark by a former co-worker of mine who just

00:15.480 --> 00:20.800
casually dropped the line that Yama was so simple that nobody could ever attain master

00:20.800 --> 00:21.800
ship in it.

00:21.800 --> 00:26.800
So a question towards the audience, also slight audience participation, sorry, who would tend

00:26.800 --> 00:27.800
to agree?

00:27.800 --> 00:33.680
That is almost nobody.

00:33.680 --> 00:37.480
That's a shame because you would be in good company.

00:37.480 --> 00:45.280
This is in the goat section of every speck of Yama there is.

00:45.280 --> 00:48.440
So let's get a bit into detail.

00:48.440 --> 00:57.560
And the very cool Yama exists to provide printable text presentation of structured data.

00:57.560 --> 01:02.000
And in that regard it is a rival to things like JSON, XML and other formats.

01:02.000 --> 01:03.960
It's been around for quite a while.

01:03.960 --> 01:08.920
We're almost looking into 20 years of Yama now.

01:08.920 --> 01:15.440
It is somewhat interwoven with JSON since version 1.2.

01:15.440 --> 01:19.800
Actually all of JSON is also valid Yama.

01:19.800 --> 01:27.520
That is, they're just introducing an interesting relation because now since I think 2018 JSON

01:27.520 --> 01:35.600
is a strict subset of JavaScript, there's an intersection of Yama and JavaScript now

01:35.600 --> 01:40.200
that is precisely JSON.

01:40.200 --> 01:44.760
Let's not get into the argument if that's good or not.

01:44.760 --> 01:47.360
It's a thing.

01:47.360 --> 01:55.400
If you write a lot of Yama, all of the examples, most of the examples, most of the real life

01:55.400 --> 02:01.120
specimens they will let you believe that there are no real types in Yama.

02:01.120 --> 02:04.560
Actually the opposite is true.

02:04.560 --> 02:06.960
Yama is heavily typed.

02:06.960 --> 02:10.600
Almost everything in a Yama document has a type.

02:10.600 --> 02:11.920
Here's a selection.

02:11.920 --> 02:15.360
They're nothing surprising.

02:15.360 --> 02:19.520
All of the times you see here they are also present in JSON.

02:19.520 --> 02:22.440
That's also inspiring an interesting question.

02:22.440 --> 02:26.200
Let's say you have a Yama document.

02:26.200 --> 02:33.320
Could you just change the syntax to JSON and have a valid presentation?

02:33.320 --> 02:34.320
Would that work?

02:34.320 --> 02:37.320
Oh, you're too good.

02:37.320 --> 02:44.760
I see I affected the wrong audience because no, that doesn't work.

02:44.760 --> 02:48.840
Actually it falls apart with the map type.

02:48.840 --> 02:52.320
The map type in Yama is really, really wide.

02:52.320 --> 02:58.680
It does allow for such things as composite keys to its entries.

02:58.680 --> 03:05.880
If you're really interested, they're introduced by your, what's the token, Crested Mark Space.

03:05.880 --> 03:08.400
So that's a thing.

03:08.400 --> 03:12.200
There are not so basic types.

03:12.200 --> 03:14.640
OMAP is an audit map.

03:14.640 --> 03:18.680
The regular mapping is not ordered.

03:18.680 --> 03:22.760
That is somewhat special.

03:22.760 --> 03:25.240
There's not a complete list, by the way.

03:25.240 --> 03:28.400
There's a way to have Yama inside Yama.

03:28.400 --> 03:29.960
That's nice.

03:29.960 --> 03:35.560
Then there's a type specifically for binary data.

03:35.560 --> 03:42.920
This one is really, really useful provided it actually works.

03:42.920 --> 03:46.160
Try it.

03:46.160 --> 03:53.760
The problem really is in JSON, XML, also in Yama is you can't have certain bytemarks.

03:53.760 --> 03:58.440
So the first 16, I believe, character points, they are off limits.

03:58.440 --> 04:00.600
They are controlled signals.

04:00.600 --> 04:03.880
They can't be part of the stream.

04:03.880 --> 04:07.920
With this type, you can just base 64 everything.

04:07.920 --> 04:14.640
Once your Yama is being passed, that is being expanded into the raw binary.

04:14.640 --> 04:30.600
First example, this is not minimal Yama, but it does help to illustrate a few points.

04:30.600 --> 04:36.720
I suppose a lot of you got a lot to do with say OpenShift, Kubernetes, something like.

04:36.720 --> 04:40.960
You've seen three hyphens a lot, haven't you?

04:40.960 --> 04:41.960
Okay.

04:41.960 --> 04:44.120
Who knows what that does?

04:44.120 --> 04:48.880
It's not the beginning of the document.

04:48.880 --> 04:49.880
Come again.

04:49.880 --> 04:50.880
Not quite, no.

04:50.880 --> 04:52.920
It's not the beginning of the document.

04:52.920 --> 04:57.240
What this is is a document separator.

04:57.240 --> 05:01.040
So what you see here is not actually a Yama document.

05:01.040 --> 05:02.520
It's a Yama stream.

05:02.520 --> 05:07.600
Yama is meant to be streamed, possibly.

05:07.600 --> 05:13.680
Don't do that unless you have a solid message framing because our truncated Yama tends also

05:13.680 --> 05:15.400
to be earlier to Yama.

05:15.400 --> 05:18.360
So I think twice before you do that.

05:18.360 --> 05:25.960
Thing is, most of the tools that you have with Yama will assume there's only one document

05:25.960 --> 05:26.960
ever.

05:26.960 --> 05:32.320
You need to do some convincing to get all the documents out of a stream.

05:32.320 --> 05:39.880
By the way, do you know what happens if you omit those three hyphens?

05:39.880 --> 05:42.000
You do.

05:42.000 --> 05:44.360
Okay.

05:44.360 --> 05:48.000
Pretty much everything you see here, if it's missing, it's implied.

05:48.000 --> 05:49.240
Great, eh?

05:49.240 --> 05:53.600
It's a folder version number.

05:53.600 --> 05:58.240
There's also a bit of homework for you.

05:58.240 --> 06:02.680
There's a chance this is going to break your tools because they do not understand version

06:02.680 --> 06:05.680
1.2.

06:05.680 --> 06:09.440
The majority of the tools are still stuck at 1.1.

06:09.440 --> 06:15.280
Ah, yeah.

06:15.280 --> 06:17.080
Let's get into time a bit.

06:17.080 --> 06:19.080
This is something you see quite common.

06:19.080 --> 06:20.160
What do we have here?

06:20.160 --> 06:28.120
It's a mapping with a single entry, which shares the key variables.

06:28.120 --> 06:32.080
Inside is another mapping for the key app version.

06:32.080 --> 06:34.080
We've got something in it.

06:34.080 --> 06:38.040
Now there's no indication to what data type that is.

06:38.040 --> 06:40.040
It's an integer, right?

06:40.040 --> 06:41.400
You agree?

06:41.400 --> 06:43.320
Depends on your schema.

06:43.320 --> 06:47.760
It depends on your schema.

06:47.760 --> 06:52.080
We're not quite there yet.

06:52.080 --> 06:55.680
This is for most pure YAML.

06:55.680 --> 07:01.440
This is an integer, we agree for the time being.

07:01.440 --> 07:04.200
This is a float, right?

07:04.200 --> 07:06.840
This is a string.

07:06.840 --> 07:10.600
This is still a string.

07:10.600 --> 07:12.720
You may have noticed I omitted a few things.

07:12.720 --> 07:14.720
What's three points?

07:14.720 --> 07:19.280
It depends on your schema.

07:19.280 --> 07:21.280
No.

07:21.280 --> 07:23.000
Yes, it does.

07:23.000 --> 07:29.720
The regular expression for float says three point is a float.

07:29.720 --> 07:33.720
What is point one then?

07:33.720 --> 07:36.160
It's also a float.

07:36.160 --> 07:42.360
If you want to make sure this is really always a string, you may be tempted to do something

07:42.360 --> 07:44.360
like this.

07:44.360 --> 07:46.960
Quota strings are a thing, also in YAML.

07:46.960 --> 07:47.960
Big supplies.

07:47.960 --> 07:50.160
Single quoted also.

07:50.160 --> 07:56.480
The professional may do something like this.

07:56.480 --> 07:58.120
This is a tag.

07:58.120 --> 08:02.680
The two exclamation marks means it's a global tag.

08:02.680 --> 08:03.680
There's global meaning.

08:03.680 --> 08:08.080
I'm running out of time.

08:08.080 --> 08:09.080
It's a string.

08:09.080 --> 08:10.960
I have my word for it.

08:10.960 --> 08:16.320
The true professional who lost a plot made to something like this.

08:16.320 --> 08:20.280
Tags are identified by URNs.

08:20.280 --> 08:24.080
Also there's a name spacing mechanism in YAML.

08:24.080 --> 08:31.360
That's the part where you go, yay, name spaces.

08:31.360 --> 08:36.000
Most features, this is something you do not commonly see.

08:36.000 --> 08:39.240
Most users of YAML are probably unaware this exists.

08:39.240 --> 08:47.000
But you have some tools to reduce duplication, redundancy within your structures.

08:47.000 --> 08:48.000
One is anchors.

08:48.000 --> 08:51.040
They're basically marker.

08:51.040 --> 08:56.480
One are alliances that do invoke those anchors.

08:56.480 --> 08:58.320
Pretty nifty.

08:58.320 --> 09:06.800
So these do give way for an attack known as one brilliant loss.

09:06.800 --> 09:17.320
It's basically you can set an anchor to an array or list of alliances who themselves

09:17.320 --> 09:21.520
contain a lot of anchors.

09:21.520 --> 09:27.600
This allows for a very complex presentation of a very complex structure that quickly expands

09:27.600 --> 09:31.400
plenty of code.

09:31.400 --> 09:41.960
So if you happen to consume YAML from untrusted sources, this is something you should know.

09:41.960 --> 09:45.720
Magic operator, this is another really nifty tool.

09:45.720 --> 09:48.520
It's only valid in 1.1 of YAML.

09:48.520 --> 09:51.520
It got immediately deprecated in 1.2.

09:51.520 --> 09:57.280
And also it's a data type.

09:57.280 --> 10:03.960
It's there to basically merge mappings into other mappings.

10:03.960 --> 10:05.880
Great stuff.

10:05.880 --> 10:09.640
So these are examples that really happened.

10:09.640 --> 10:13.200
Do you see, I should explain this.

10:13.200 --> 10:17.680
This is part of the GitLab setup as a script.

10:17.680 --> 10:24.000
This is expected to be a sequence of strings to be executed on the shell.

10:24.000 --> 10:25.000
That's not what it is.

10:25.000 --> 10:28.000
Who sees the issue?

10:28.000 --> 10:29.000
No?

10:29.000 --> 10:32.000
Oh, very good, yes.

10:32.000 --> 10:38.760
That's not a string.

10:38.760 --> 10:40.680
It's a mapping.

10:40.680 --> 10:46.440
Because of the single pass design of YAML, the algorithm is very, very greedy.

10:46.440 --> 10:50.080
So it sees that colon there and says, oh, great.

10:50.080 --> 10:52.320
This is a mapping.

10:52.320 --> 10:57.200
And completely ignores the cretations.

10:57.200 --> 10:59.680
So how do you fix this?

10:59.680 --> 11:03.400
There's a bunch of ways.

11:03.400 --> 11:09.520
Yes, I think the third one is my favorite.

11:09.520 --> 11:13.320
The fourth is really unsafe because once again, raw binary data.

11:13.320 --> 11:17.160
I'm sorry to know that.

11:17.160 --> 11:18.720
This is another favorite.

11:18.720 --> 11:23.080
So again, GitLab CI, we have a mapping.

11:23.080 --> 11:27.480
We tried to set some variables for GitLab to expand.

11:27.480 --> 11:33.080
What is the content of bar?

11:33.080 --> 11:35.840
I must remind you, mappings don't have order.

11:35.840 --> 11:37.840
Oh, who knows?

11:37.840 --> 11:41.640
I thought the answer was fast.

11:41.640 --> 11:42.640
Oh, no.

11:42.640 --> 11:45.240
It's going to be empty.

11:45.240 --> 11:46.240
It's going to be empty.

11:46.240 --> 11:50.640
The mapping doesn't have an order.

11:50.640 --> 11:54.280
The YAML implementation in GitLab has other ideas.

11:54.280 --> 11:57.840
So it takes that mapping and applies an order on it.

11:57.840 --> 12:02.880
So bar goes top because of the order.

12:02.880 --> 12:06.320
And then there's a single round of interpolations.

12:06.320 --> 12:10.320
And foo at that point is empty as a variable.

12:10.320 --> 12:12.320
So how do you fix that?

12:12.320 --> 12:21.680
Either way out is you rename your variables or this.

12:21.680 --> 12:25.680
Thank you.

12:25.680 --> 12:29.080
Thank you.

12:29.080 --> 12:37.240
Oh, this never happened to me, but it's been too good to pass.

12:37.240 --> 12:38.520
What do we have here?

12:38.520 --> 12:40.080
What does languages contain?

12:40.080 --> 12:47.160
It's a sequence of?

12:47.160 --> 12:50.640
We all need to drink.

12:50.640 --> 12:53.800
It's one string and one Boolean.

12:53.800 --> 13:01.760
Because no, which is supposed to present Norwegian here, is accepted as a Boolean.

13:01.760 --> 13:05.120
So you need to tag that or quote it.

13:05.120 --> 13:08.320
How are you, you wish?

13:08.320 --> 13:17.240
So my observations, because of the cases of the hidden complexity, there's huge disparity

13:17.240 --> 13:21.160
in features that various tools actually support.

13:21.160 --> 13:24.040
They also show different behavior.

13:24.040 --> 13:25.400
It's one hot mess.

13:25.400 --> 13:29.000
I can't put it in other words.

13:29.000 --> 13:35.420
Also if you're writing YAML, it is admittedly really a pleasure.

13:35.420 --> 13:39.680
It's easy to type, but you can never let your guard down.

13:39.680 --> 13:45.960
YAML would try to do a lot of lag for you, being very accommodating in sometimes the

13:45.960 --> 13:52.040
worst way possible.

13:52.040 --> 13:57.840
Some proposals I have, because with the versions of YAML really do different behavior, you

13:57.840 --> 14:02.760
should start to tag your streams accordingly.

14:02.760 --> 14:07.520
You should see that the tools you use for consuming YAML are properly configured.

14:07.520 --> 14:11.560
Things like language specific extensions.

14:11.560 --> 14:18.480
Part of the YAML streams could be evaluated in the process, read, execute it.

14:18.480 --> 14:21.800
That's a bit scary.

14:21.800 --> 14:30.480
As most of YAML is relatively simple, the complexity is mostly because it's deeply nested

14:30.480 --> 14:34.040
and you can't properly edit it.

14:34.040 --> 14:36.520
Strict YAML may be a solution.

14:36.520 --> 14:42.600
It's a strict subset of YAML with a lot of the ambiguity removed.

14:42.600 --> 14:46.720
Way easier, safer, way easier.

14:46.720 --> 14:49.720
Turning support is so-so.

14:49.720 --> 14:52.800
I teased a question with this talk.

14:52.800 --> 14:59.280
The question could be, YAML is exactly then the answer if all you wanted was JSON with

14:59.280 --> 15:03.400
comments.

15:03.400 --> 15:07.800
Some other niceties as well, but that's pretty much it.

15:07.800 --> 15:08.800
This concludes my talk.

15:08.800 --> 15:09.800
Thank you very much.

15:09.800 --> 15:10.800
You've been terrific.

15:10.800 --> 15:11.800
Is there any questions?

15:11.800 --> 15:12.800
Please repeat the questions.

15:12.800 --> 15:13.800
We've got four seconds.

15:13.800 --> 15:14.800
Is JSON any better?

15:14.800 --> 15:15.800
There you have it.

15:15.800 --> 15:31.960
It depends on what your use case is really.

15:31.960 --> 15:34.960
Repeat the question please.

15:34.960 --> 15:39.280
Oh yes, the question was, was JSON any better?

15:39.280 --> 15:41.280
So yes.

15:41.280 --> 15:49.160
Thank you very much again.

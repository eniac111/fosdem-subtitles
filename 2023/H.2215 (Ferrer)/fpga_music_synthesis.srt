1
0:00:00.000 --> 0:00:12.000
So welcome Sebastian Holzapfel. The stage is yours.

2
0:00:12.000 --> 0:00:14.000
Okay, thank you.

3
0:00:19.000 --> 0:00:28.000
Hi everybody, my name is Sebastian. I'm an embedded systems engineer, usually in kind of the automotive, functional safety, autonomous vehicle space.

4
0:00:28.000 --> 0:00:36.000
But today I want to talk about one of my side projects that's completely unrelated to what I do at work, and I hope you guys enjoy it.

5
0:00:36.000 --> 0:00:44.000
So, just kind of because I'm curious, who actually knows what EuroRack is?

6
0:00:44.000 --> 0:00:49.000
Oh, that's amazing. Okay, I wasn't really sure what to expect. Okay, that makes me really happy.

7
0:00:49.000 --> 0:00:53.000
Who actually has a EuroRack system at home and plays with it?

8
0:00:53.000 --> 0:01:03.000
Okay, four or five. Okay, actually after this talk, if you have a EuroRack system and you like playing with FPGAs, I have a couple of these boards, so please talk to me.

9
0:01:03.000 --> 0:01:07.000
I'm willing to give them away if you have cool ideas, but we can get back to that at the end.

10
0:01:07.000 --> 0:01:19.000
So, basically EuroRack is a modular system for building your own kind of hardware electronic music synthesizers, and it was kind of created in the 90s and standardized by Dokfar.

11
0:01:19.000 --> 0:01:24.000
It's a little bit of a rough standard because it's a little bit rough around the edges and imprecise.

12
0:01:24.000 --> 0:01:37.000
But basically what the EuroRack standard is, it's a description for what the dimensions of these modules should look like and kind of roughly what the signals look like that flow between these modules.

13
0:01:37.000 --> 0:01:46.000
And so, there are a whole bunch of different manufacturers, thousands of manufacturers, tens of thousands of different modules that you can buy from all sorts of boutique, small and big manufacturers.

14
0:01:46.000 --> 0:01:56.000
And you can kind of buy these things, put them together into a system like this, and then use this to create music. That's kind of what a EuroRack system is.

15
0:01:56.000 --> 0:02:05.000
And just to give you like a small idea of what a typical module looks like, here is kind of the input and output jacks on a mutable instruments module.

16
0:02:05.000 --> 0:02:22.000
It's basically an oscillator module, and you can see there is an output jack where basically audio frequency signals come out of the oscillator, and then you can kind of change the properties of these signals by plugging in different kinds of input signals.

17
0:02:22.000 --> 0:02:30.000
That for example, the V-opt input jack you can see there, that actually changes the pitch of the output signal, so you can choose which note the oscillator is playing.

18
0:02:30.000 --> 0:02:36.000
If you want to change the volume of the oscillator, then you would send signals into the level input, for example.

19
0:02:36.000 --> 0:02:42.000
But that's kind of what the input and output jacks on one of these individual modules actually looks like.

20
0:02:42.000 --> 0:02:45.000
But where did this project actually come from?

21
0:02:45.000 --> 0:02:54.000
So, I had a crazy idea for a weird high-performance granular sampling device that I wanted to make using FPGAs.

22
0:02:54.000 --> 0:03:13.000
And I didn't really know where to start in terms of, okay, you can buy an FPGA development platform, you can buy development boards for audio codec ICs, you can put it together, but then you need to do some conditioning on the signal to make it work with URAAC, and potentially you also need to calibrate it as well.

23
0:03:13.000 --> 0:03:32.000
And I couldn't find examples for this kind of thing, so that's why I started playing in this world, because I couldn't find anything that really combined the hardware synthesizer world of URAAC, and this PMOD interface, and PMOD is basically, I think it was something that was originally standardized by Digilent,

24
0:03:32.000 --> 0:03:53.000
and there's a whole bunch of FPGA development boards that you can buy that have this interface. So, basically, if you have the URAAC PMOD hardware that you can see above there, you can plug it into an FPGA development board, you can synthesize one of the example designs, you can use that in your URAAC system and start making weird music.

25
0:03:53.000 --> 0:04:11.000
So, this project is a hardware design, so this board designed in KiCad that you can find in the GitHub repository, it's a bunch of system very long that implements kind of drivers for the codec and the calibration, online calibration, some example DSP cores,

26
0:04:11.000 --> 0:04:28.000
and a bunch of simulation infrastructure, that's not just test benches for the FPGA gateway, but also allows you to simulate an entire modular system on your machine with like this little bit of FPGA code that you wrote for your module, and I'll show you what that looks like in a bit.

27
0:04:28.000 --> 0:04:44.000
So, just to give you a look at what this looks like, so the Icebreaker is a fantastic FPGA development board that I highly recommend, supports all the open source tool chains, you can purchase it from 1-bit squared, and this is what it looks like plugged into the hardware here,

28
0:04:44.000 --> 0:04:57.000
I wouldn't necessarily recommend that you plug it in this way, because most URAAC cases won't actually fit something this deep, so I would actually recommend that you use a ribbon cable to connect the FPGA board to this kind of expansion module here.

29
0:04:57.000 --> 0:05:01.000
But it doesn't have to be this development board, it could be a different one.

30
0:05:01.000 --> 0:05:11.000
Just to give you an idea, the Icebreaker I think right now is 70 or 80 US dollars, I think, or so.

31
0:05:11.000 --> 0:05:28.000
And what I actually wanted to show was a demo video, but I don't have any audio, so if you're curious to see this thing in action, then I encourage you to go to the GitHub repository for these slides, and in the GitHub repository are two movie files, maybe go and look at these after the talk,

32
0:05:28.000 --> 0:05:35.000
that includes like a video example of a couple of examples running and what audio sounds like.

33
0:05:35.000 --> 0:05:39.000
So yeah, I'll just leave that there for a second.

34
0:05:39.000 --> 0:05:54.000
So why might you want to play with URAAC Pmod? Well, maybe you want to start playing with DSP, maybe you want to try doing things that are difficult on an MCU based platform.

35
0:05:54.000 --> 0:06:06.000
And what do I mean by that? So if you want to do like super low latency operations on like a microcontroller based platform, and there are a few microcontroller based development platforms for URAAC,

36
0:06:06.000 --> 0:06:18.000
you very quickly, if you want very low latency, you have to start dealing with DMA, you have to start dealing with some pretty sophisticated real-time operating system concepts, for example.

37
0:06:18.000 --> 0:06:25.000
And actually, there are quite a few things that are easier to do in the FPGA world, especially when it comes to DSP than in the MCU based world.

38
0:06:25.000 --> 0:06:38.000
But even if that wasn't the case, it's still kind of cool, in my opinion, to it's a cool learning platform to play with FPGAs. If you have kind of this world where you can just play with sound, plug arbitrary things in,

39
0:06:38.000 --> 0:06:45.000
make a module that implements a tiny little piece of functionality and see how it is affected by all different effect modules and different oscillators they have in your system,

40
0:06:45.000 --> 0:07:00.000
and it makes it very easy to discover things. So in the GitHub repository for this project, you can find a whole bunch of examples for different DSP cores,

41
0:07:00.000 --> 0:07:11.000
and you can load these onto your FPGA development platform, you can try them out and see how they sound. And that's just to give you a picture. There's going to be more coming.

42
0:07:11.000 --> 0:07:23.000
But just to give you a very simple example of what one of these cores looks like, and to be clear, this is just the DSP core, there's a whole bunch of driver code that is kind of, you don't see, that you don't have to worry about if you're making a design like this.

43
0:07:23.000 --> 0:07:35.000
This is Verilog, and this is implementing something called a voltage control amplifier. What does that mean? We're just multiplying one channel by another channel and sending that to an output channel.

44
0:07:35.000 --> 0:07:47.000
That's basically what a voltage controlled amplifier is. And in Verilog that looks like this. We take the, basically the output is input zero multiplied by input one.

45
0:07:47.000 --> 0:07:59.000
Okay, we have to shift it otherwise, because basically this is, in this case it's a 16 bit sample, 16 bit sample, then we have a 32 bit result. This is to convert it back into a 16 bit sample so that we can send it to the output.

46
0:07:59.000 --> 0:08:10.000
But why is this cool? Okay, this is very simple. But what's cool is with this very, very simple piece of code in Verilog, you achieve something that is ridiculously low latency.

47
0:08:10.000 --> 0:08:24.000
So here, we're achieving, just with that example, like basically 120 microseconds of latency. If you're sampling at 192 kilohertz, that's 24 samples of latency from the input to the output, just with this small bit of code.

48
0:08:24.000 --> 0:08:38.000
If you were going to try and do that on a microcontroller, not easy, you can do it, but it's not easy. And so, in this case, I actually think that the latency on an FPGA based system should have been a bit lower.

49
0:08:38.000 --> 0:08:46.000
But what's actually going on here? Why are we getting 24 samples of latency from the input to the output with a simple implementation like this?

50
0:08:46.000 --> 0:09:02.000
It's because the audio codec on this piece of hardware itself has a bunch of internal filters that kind of pipeline the input. It uses this for like, I think some kind of pre emphasis function or something that you can partially disable but not entirely disabled.

51
0:09:02.000 --> 0:09:16.000
But that's kind of where this is coming from. And in this plot up here, you can see kind of in red, a signal coming into both the Euroac P mod and another MCU based module, the disting.

52
0:09:16.000 --> 0:09:24.000
And then the yellow trace is what's coming out of the Euroac P mod, and then the blue trace is what's coming out of the microcontroller based module. So you can kind of see kind of the difference in latency there.

53
0:09:24.000 --> 0:09:30.000
And both of them are both acting as the same thing in this case.

54
0:09:30.000 --> 0:09:39.000
So, the hardware, I went through a few different revisions, I made some mistakes in revision one and two, as you can see here by the bodge wires.

55
0:09:39.000 --> 0:09:51.000
But as of right now, if you were to go and go ahead and download the Kaikai design files for revision 2.2, which is this one on the right here which I have in front of me here.

56
0:09:51.000 --> 0:10:01.000
It works without any modification, so you can just build it. But there is a revision 3 coming and I'll talk about that in a second.

57
0:10:01.000 --> 0:10:13.000
So, what does this hardware design actually look like? Basically there are 8 channels, we have 4 input channels, 4 output channels, a bunch of LED indicators so you can see what's going on.

58
0:10:13.000 --> 0:10:25.000
But then the heart of this whole system is the audio codec. And what's interesting about this audio codec is it's a chip that's kind of intended for the automotive industry.

59
0:10:25.000 --> 0:10:37.000
And some other Euroac modules for this kind of purpose will not use kind of a normal audio codec. They'll use instrumentation amplifiers or some other type of ADC or DAC.

60
0:10:37.000 --> 0:10:47.000
And the reason for that is because in Euroac we're not just dealing with audio frequency AC coupled signals.

61
0:10:47.000 --> 0:10:52.000
In Euroac we're also dealing with sometimes extremely fast DC signals that need to be accurate.

62
0:10:52.000 --> 0:11:06.000
For example, if you are controlling an oscillator and you need to control the pitch very precisely, the absolute DC accuracy is important because if you shift by a few millivolts, then suddenly your song is not in tune anymore.

63
0:11:06.000 --> 0:11:18.000
And that's why DC accuracy is important. And basically audio codec ICs are often not designed for DC accuracy, but the benefit in an audio codec IC is that it's cheap.

64
0:11:18.000 --> 0:11:27.000
So you might pay 3 or 4 Euros per unit instead of, I don't know, for an instrumentation quality converter you're paying tens of Euros perhaps.

65
0:11:27.000 --> 0:11:44.000
But the cool thing is, the main difference here, and at least in the case of this codec that I was playing with in this hardware, there is kind of a fixed DC bias in the codec input and output when you get it from the factory.

66
0:11:44.000 --> 0:12:01.000
And you can calibrate this out just using a simple, like you can basically calibrate it out using a simple linear regression, kind of feed 5 volts into the codec, measure what it gives you, send minus 5 volts in, measure what it gives you, do that for the inputs as well as the outputs,

67
0:12:01.000 --> 0:12:23.000
and then on the FPGA itself, account for this DC bias that's present in the codec after it's manufactured. And after going through this calibration process, and there are scripts to do this calibration in the GitHub repository, you can actually achieve kind of sub 5 millivolt level absolute DC accuracy between minus 10 volts using an audio codec chip,

68
0:12:23.000 --> 0:12:45.000
which is awesome because it brings manufacturing costs down if you decide to kind of create your own FPGA based instrument, and it means that this thing doesn't cost so much, and it also means you can use I2S, which is kind of a standardish audio interface protocol, embedded audio interface protocol instead of some other interface protocol.

69
0:12:45.000 --> 0:12:57.000
So basically the data sheet strongly recommend, well it does not suggest that you do this, but if you do it, it works really well.

70
0:12:57.000 --> 0:13:14.000
So like explicitly ignoring what it says to do in the recommended external circuits, and I've tested the crap out of this even over temperature and so on, it seems to work. And I mean, fortunately we're not dealing with automotive and functional safety so no one's going to complain if we don't do things the way the data sheet suggests that we do them.

71
0:13:14.000 --> 0:13:35.000
Okay, so this is kind of just a simplified overview of what the FPGA gateway looks like for the example project here. And basically, the part that you write yourself is this user defined DSP core.

72
0:13:35.000 --> 0:13:51.000
And then between that and the rest of the world is a driver for the codec I see, a driver for the I2C interface that initializes the codec I see calibration routine that basically does this online calibration of the codec that I was mentioning before.

73
0:13:51.000 --> 0:14:15.000
And yeah, I mean that's what it looks like. So that's kind of the hardware and I also described a bit about how the gateway works but if you have no hardware at all, you can still play with this stuff, because I actually wrote a plugin for a VCV rack which is an open source simulator for modular synthesis system basically your rack.

74
0:14:15.000 --> 0:14:25.000
And what this plugin does is it actually simulates with Verilator, like here I can show you.

75
0:14:25.000 --> 0:14:41.000
So here's a Verilog implementation of a clock divider. And this is sitting inside a plugin for VCV rack, and it's compiled with Verilator to C++ so that you can run it inside a entire modular synthesis system simulation.

76
0:14:41.000 --> 0:15:07.000
And so now we have basically this simulation of the hardware with the Verilog that would be running on your FPGA actually running through Verilator in translated C++ linked to the VCV rack binary so that you can actually run your FPGA code inside a modular synthesis system, which is kind of crazy.

77
0:15:07.000 --> 0:15:14.000
And it makes me happy that you clapped in but that was actually the easiest thing to do out of everything that I described before.

78
0:15:14.000 --> 0:15:22.000
Literally that was about four hours of work. I was surprised that it was so easy. But yeah, I encourage you to play with this stuff if you're interested in it.

79
0:15:22.000 --> 0:15:28.000
So, oh, okay, that's time for me.

80
0:15:28.000 --> 0:15:35.000
I was almost done. Thank you for listening.

81
0:15:35.000 --> 0:15:39.000
So what do you think two things I would like to I would like to know.

82
0:15:39.000 --> 0:15:51.000
I am thinking of going through with a manufacturing run for the revision three of these boards. So if you're interested in the hardware here if this is your niche, please start a GitHub repository so I know how many people will be interested.

83
0:15:51.000 --> 0:16:05.000
That's my only request because if I manufacture 100 of these things and they just hang around in my apartment then I don't know what to do with them. So thank you.


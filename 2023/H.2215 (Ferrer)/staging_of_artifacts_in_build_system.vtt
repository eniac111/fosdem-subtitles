WEBVTT

00:00.000 --> 00:09.160
So, good evening, everyone, and welcome to the last talk in this session.

00:09.160 --> 00:12.320
I hope you still have some energy left.

00:12.320 --> 00:13.680
So my name is Sasha Roloff.

00:13.680 --> 00:19.480
I'm working at the Huawei technology, intelligent cloud technology lab of the Huawei Munich

00:19.480 --> 00:21.240
Research Center.

00:21.240 --> 00:26.780
And today we are going to take a look under the hood of build systems and what common

00:26.780 --> 00:33.760
practices are currently used in basically all of the build systems and why many of them

00:33.760 --> 00:42.440
are suboptimal in certain regards and how they can be improved by a concept called staging.

00:42.440 --> 00:47.760
So in order to explain you the issues with current build systems, I directly jump into

00:47.760 --> 00:49.600
an example.

00:49.600 --> 00:56.040
And I guess many of you have used make once or twice in your open source developments.

00:56.040 --> 00:58.720
So let's start with this classic build system.

00:58.720 --> 01:04.680
So we want to create a build description for a very simple hello world application composed

01:04.680 --> 01:09.360
of a hello binary and a greet library.

01:09.360 --> 01:14.440
And the greeting phrase is hard coded inside the hello binary.

01:14.440 --> 01:20.480
And a greetie can be injected at compile time at the greet library.

01:20.480 --> 01:22.920
So this is a make file.

01:22.920 --> 01:31.160
We have our rules which describe which artifacts are generated by actions based on a set of

01:31.160 --> 01:33.680
input artifacts.

01:33.680 --> 01:40.000
And yeah, so we have different actions actually involved to generate the final binary.

01:40.000 --> 01:45.000
And for example, we have compile actions to generate the object files like the hello.o

01:45.000 --> 01:46.000
or the greet.o.

01:46.000 --> 01:52.840
We have archive action for the greet library and the final linking action to actually generate

01:52.840 --> 01:53.840
the binary.

01:53.840 --> 01:57.720
At the end, we also want to create some sample output.

01:57.720 --> 02:03.680
So we just take the output of the hello world and store it in a text file.

02:03.680 --> 02:07.220
So nothing spectacular right now.

02:07.220 --> 02:12.700
Each artifact is associated with a file on the file system so the actions can directly

02:12.700 --> 02:14.380
operate on it.

02:14.380 --> 02:20.000
If we execute the build, we just see all the actions are executed, everything fine, and

02:20.000 --> 02:23.120
the output is generated.

02:23.120 --> 02:30.120
And yes, now the boss comes into our office and he's unhappy with our result.

02:30.120 --> 02:34.160
He wants to put it basically on a poster and it should be more readable.

02:34.160 --> 02:40.040
Okay, so yeah, then let's add some post processing to the task.

02:40.040 --> 02:45.960
And we just take the output of the hello binary, store it in the intermediate file, and put

02:45.960 --> 02:52.960
this intermediate file into the post processing and translate all letters into, capitalize

02:52.960 --> 02:57.400
all letters basically, and store it into post processed text.

02:57.400 --> 03:02.680
And then finally, put this text into the target sample output.

03:02.680 --> 03:09.640
When we execute this, we see new actions are executed and the result is fine.

03:09.640 --> 03:10.940
Looks much better now.

03:10.940 --> 03:13.880
Hello world and capital letters, great.

03:13.880 --> 03:16.200
But the boss is still unhappy.

03:16.200 --> 03:17.600
He wants to have some localization.

03:17.600 --> 03:20.120
He doesn't want to greet the whole world.

03:20.120 --> 03:23.560
He just wants to greet Munich and Brussels.

03:23.560 --> 03:26.480
And he wants to have it both in a single make file.

03:26.480 --> 03:28.600
So what do we have to do now?

03:28.600 --> 03:33.560
Okay, we have to basically we have two program variants now.

03:33.560 --> 03:39.120
And what should we do in order to reuse most of our rules that we already have?

03:39.120 --> 03:47.200
We can use a for loop over the location dependent targets and interpolate the city name into

03:47.200 --> 03:49.840
the artifact names, as you can see here.

03:49.840 --> 03:56.200
So we have now not only a single hello binary, but two hello binaries with a dot and the

03:56.200 --> 03:58.260
name of the city.

03:58.260 --> 04:03.520
And these are our two program variants.

04:03.520 --> 04:11.080
And as you can see, there is a lot of string interpolation coming into our make file.

04:11.080 --> 04:14.240
And it doesn't make it really readable.

04:14.240 --> 04:19.960
But we have to do it because each artifact is associated with a file on the file system.

04:19.960 --> 04:22.040
And this needs to be a unique name.

04:22.040 --> 04:25.280
So we have to do it basically.

04:25.280 --> 04:30.520
And when we execute it, okay, now we get a bit more actions.

04:30.520 --> 04:32.760
But it's working.

04:32.760 --> 04:37.560
And we see now, okay, the output is as required.

04:37.560 --> 04:40.800
And we greet Munich and Brussels.

04:40.800 --> 04:44.620
But the boss is still, I mean, he's happy now with our output.

04:44.620 --> 04:47.920
But now he's unhappy with our implementation.

04:47.920 --> 04:51.240
He says, ah, that's not maintainable.

04:51.240 --> 04:53.480
Why do we use a build system from the 70s?

04:53.480 --> 04:54.480
Use a modern one.

04:54.480 --> 04:56.440
They are supposed to do much better now.

04:56.440 --> 04:58.300
Well, okay.

04:58.300 --> 05:00.880
Then let's use Bazel.

05:00.880 --> 05:03.920
And this is what it looks like in Bazel.

05:03.920 --> 05:05.760
So the same application.

05:05.760 --> 05:09.080
And as it turns out, they are better.

05:09.080 --> 05:10.760
But not in all regards.

05:10.760 --> 05:16.600
So they introduce high-level concepts like the cc binary and cc library.

05:16.600 --> 05:21.580
We don't have to manually write object file creation and linking.

05:21.580 --> 05:27.960
But everything is wrapped now inside these high-level concept calls.

05:27.960 --> 05:35.560
And also our bash calls are wrapped in these general targets.

05:35.560 --> 05:38.600
But I mean, it looks a bit more readable now.

05:38.600 --> 05:43.280
But still, we have this string interpolation here.

05:43.280 --> 05:46.720
And the for loops over the city names.

05:46.720 --> 05:48.840
And yeah, why is it actually like that?

05:48.840 --> 05:49.840
Why do we need this?

05:49.840 --> 05:51.680
I mean, it's a modern build system.

05:51.680 --> 05:57.920
And the reason is because Bazel also associates each artifact with a file on the file system.

05:57.920 --> 06:07.080
And, yeah, so that's why this basically brings us to an important observation.

06:07.080 --> 06:13.320
And this means even modern build systems, it's required that you have unique names for

06:13.320 --> 06:18.560
your artifacts.

06:18.560 --> 06:24.400
And because they basically follow a design decision implemented by make in the 70s.

06:24.400 --> 06:29.440
And the design decision by make was that each artifact needs to have a fixed location in

06:29.440 --> 06:31.080
the file system.

06:31.080 --> 06:36.280
Well, for make, it was perfectly fine at that time.

06:36.280 --> 06:42.340
Because there was nothing else or not much different to do in order to determine which

06:42.340 --> 06:46.400
part of a program needs to be recomputed.

06:46.400 --> 06:48.640
Basically to compare timestamps.

06:48.640 --> 06:50.680
And for this you need files.

06:50.680 --> 06:52.920
So for make, this was totally fine.

06:52.920 --> 06:57.400
But there is actually no reason anymore to do this in modern build systems.

06:57.400 --> 07:05.400
Because they anyway isolate their actions in order to avoid getting unwanted dependencies

07:05.400 --> 07:07.000
into their builds.

07:07.000 --> 07:13.000
So their actions are executed either in a separate directory or in a container in order

07:13.000 --> 07:16.120
to better control the dependencies.

07:16.120 --> 07:23.000
So when they anyway execute their actions, why don't we allow the targets to specify

07:23.000 --> 07:26.400
where to put the artifacts?

07:26.400 --> 07:29.060
And this is exactly the idea of staging.

07:29.060 --> 07:34.600
So basically there is no technical reason for modern build systems for restriction of

07:34.600 --> 07:38.560
to associate each artifact with a file.

07:38.560 --> 07:45.280
And instead we propose that we should stop following this common practice and apply staging

07:45.280 --> 07:47.280
instead.

07:47.280 --> 07:53.280
And the idea of staging is that an action can freely select the location of input and

07:53.280 --> 07:57.960
output artifacts within its working directory.

07:57.960 --> 08:04.600
And this basically introduces a separation between physical and logical paths.

08:04.600 --> 08:12.240
Inside an action you only work on the logical path and the action can freely decide where

08:12.240 --> 08:19.920
to put a generated artifact or where it wants to read an input artifact.

08:19.920 --> 08:25.600
And so this is basically our proposal to apply staging.

08:25.600 --> 08:29.400
And how could it be looked like if it's implemented in a build system?

08:29.400 --> 08:31.520
So this is basically our project.

08:31.520 --> 08:33.080
It's called Just Build.

08:33.080 --> 08:37.800
And this is a build description that we propose.

08:37.800 --> 08:43.640
So we also have the definitions of our targets here.

08:43.640 --> 08:48.240
We also use the high-level concepts like binaries and libraries.

08:48.240 --> 08:54.600
And in this JSON syntax the type just selects which kind of artifact or which kind of target

08:54.600 --> 08:56.760
it basically is.

08:56.760 --> 09:04.720
And what we can see inside the target definitions, our artifacts are named without string interpolation.

09:04.720 --> 09:09.560
So we don't need to artificially invent unique names for our artifacts.

09:09.560 --> 09:11.800
They are just like they are.

09:11.800 --> 09:19.160
And also, for example, here this use target, we just access the hello binary even though

09:19.160 --> 09:24.200
we will have two of these binaries, but we just write hello.

09:24.200 --> 09:25.200
And we don't care.

09:25.200 --> 09:26.560
I mean, it's staged.

09:26.560 --> 09:36.200
And what is created from the dependency, it's just staging the final result at that location

09:36.200 --> 09:39.880
where we need it.

09:39.880 --> 09:42.040
But still we have the for loop.

09:42.040 --> 09:48.640
This is something that we of course still need to, which basically creates two configurations

09:48.640 --> 09:51.000
which is then propagated.

09:51.000 --> 09:57.080
I mean, this variable that is created here is propagated to all the depending targets.

09:57.080 --> 10:02.520
And it propagates until the grid library which then reads this configuration variable and

10:02.520 --> 10:07.320
injects it into the compile command.

10:07.320 --> 10:12.520
So this is how a description could look like with staging.

10:12.520 --> 10:18.920
And from this description we can also generate a so-called target graph which shows the dependencies

10:18.920 --> 10:20.440
of the targets.

10:20.440 --> 10:22.800
So main depends on all.

10:22.800 --> 10:29.360
All depends on two post process because we have two configure targets.

10:29.360 --> 10:34.440
So the grid library basically is duplicated and this propagates until the post process

10:34.440 --> 10:36.880
target.

10:36.880 --> 10:42.460
And these target graph or targets are basically high level concepts.

10:42.460 --> 10:48.080
If you want to take a look into which actions are actually executed, you can also generate

10:48.080 --> 10:51.800
an action graph which shows a data flow.

10:51.800 --> 10:55.080
That's why the errors are inverted.

10:55.080 --> 10:59.280
And it's a bipartite graph which means so.

10:59.280 --> 11:04.160
The ellipses are the artifacts and the rectangles are the actions.

11:04.160 --> 11:10.360
And yeah, so you can really see the artifact names are basically the same.

11:10.360 --> 11:16.540
So post process dot txt and post process dot txt are the same names in both branches.

11:16.540 --> 11:20.480
But since they are staged in logical paths, there is no problem.

11:20.480 --> 11:22.600
There is no conflict actually.

11:22.600 --> 11:24.160
This would not work in make.

11:24.160 --> 11:27.360
You would have to use unique names.

11:27.360 --> 11:31.480
Okay, so and what happens when we execute it?

11:31.480 --> 11:36.600
So we just select the target that we want to build and there is some output coming here

11:36.600 --> 11:40.320
and it says okay, we have 12 actions, zero cache hits.

11:40.320 --> 11:43.320
Of course we execute, build it the first time.

11:43.320 --> 11:44.320
So you can count it.

11:44.320 --> 11:46.040
12 actions.

11:46.040 --> 11:47.600
And it's just build.

11:47.600 --> 11:49.960
The artifact is somewhere.

11:49.960 --> 11:55.320
I mean it could be in a remote execution and then it's just existing in a remote cache.

11:55.320 --> 12:01.440
If you want to have the artifact in your local folder, then you have to install it.

12:01.440 --> 12:08.240
And when we execute the installation, we now see okay, again 12 actions and also 12 cache

12:08.240 --> 12:11.560
hits because everything is known already.

12:11.560 --> 12:14.920
And then the file is in your local directory actually.

12:14.920 --> 12:18.820
And we see the content is fine.

12:18.820 --> 12:22.200
And we even don't need to store it into our local directory.

12:22.200 --> 12:27.120
We can just print the content of an artifact by the minus P auction.

12:27.120 --> 12:33.880
If we take staging seriously, we have also very nice implications.

12:33.880 --> 12:39.200
And one is for example, assume that you have an external source code that you want to use

12:39.200 --> 12:41.000
in your project.

12:41.000 --> 12:43.800
And you want to apply some patches on it.

12:43.800 --> 12:45.600
And how do you do it?

12:45.600 --> 12:49.040
Normally you would copy it, apply the patch because you don't want to modify the original

12:49.040 --> 12:50.880
source code.

12:50.880 --> 12:56.040
And this results in a lot of maintenance problems.

12:56.040 --> 13:00.000
But with staging, this can be done much easier with logical in-place patching.

13:00.000 --> 13:05.560
You just apply the patch at the logical path.

13:05.560 --> 13:09.620
And then let's take a look how this could look like.

13:09.620 --> 13:16.060
So we have now put our example files in a third-party directory outside of our project.

13:16.060 --> 13:21.180
And a directory with the patches.

13:21.180 --> 13:27.500
And the patch just modifies the hello greeting phrase with a bonjour greeting phrase.

13:27.500 --> 13:35.000
And we just have to add a single block into our build description which points to our

13:35.000 --> 13:37.740
patch and to the file that needs to be patched.

13:37.740 --> 13:40.200
And that's it.

13:40.200 --> 13:46.000
And the resulting target graph just shows, okay, we have now one more target here, the

13:46.000 --> 13:48.480
hello CPP source target.

13:48.480 --> 13:53.520
And the other, the binaries are depending on this extra target now.

13:53.520 --> 13:59.760
And also in the action graph, you can see that there is just a single new action actually

13:59.760 --> 14:05.920
added here to the action graph where earlier was hello CPP is now the patched version of

14:05.920 --> 14:09.480
hello CPP and it's just another input.

14:09.480 --> 14:15.240
And if something is changed in the patch, all dependent targets are executed.

14:15.240 --> 14:22.720
Okay, if we execute it, we see bonjour, Munich, bonjour, Brussels, works well.

14:22.720 --> 14:28.480
Okay, so quickly to summarize my talk, as we have seen, there are some inconvenient habits

14:28.480 --> 14:30.040
in modern build systems.

14:30.040 --> 14:35.020
And we propose to apply staging instead to make build systems better.

14:35.020 --> 14:42.080
And you will have a couple of advantages if you apply staging, which are written here.

14:42.080 --> 14:45.860
And this is not only a concept, it's already implemented.

14:45.860 --> 14:51.920
So if you want to take a look into our project, please come by.

14:51.920 --> 14:54.000
And now the stage is yours.

14:54.000 --> 14:57.000
Thanks for your attention.

14:57.000 --> 15:10.320
So, the question is, are there any questions?

15:10.320 --> 15:11.320
There is a question.

15:11.320 --> 15:14.320
No, I think he will repeat the question.

15:14.320 --> 15:17.320
You had the question?

15:17.320 --> 15:27.000
Yeah, in order to determine what artifact you need to save, you need to connect it to

15:27.000 --> 15:29.000
the correct version of the source code.

15:29.000 --> 15:31.480
Do you do hashing on the source code?

15:31.480 --> 15:32.480
Yeah, exactly.

15:32.480 --> 15:34.280
We do actually content addressable storage.

15:34.280 --> 15:35.840
Repeat that question.

15:35.840 --> 15:36.840
Yes.

15:36.840 --> 15:42.640
Okay, the question was how do we identify which source code we actually need for the

15:42.640 --> 15:43.640
staging.

15:43.640 --> 15:49.520
And we apply content addressable storage, so we determine a hash basically from all

15:49.520 --> 15:56.440
of our source codes and then also we know what has been changed or not.

15:56.440 --> 15:57.440
Any other questions?

15:57.440 --> 15:58.440
Yeah.

15:58.440 --> 16:07.240
So, you are going to use the JSON syntax for the build service?

16:07.240 --> 16:11.800
Yeah, so the question was whether we use the JSON syntax?

16:11.800 --> 16:23.800
Yeah, we decided for JSON and JSON is used as our build description syntax.

16:23.800 --> 16:24.800
Anyone else?

16:24.800 --> 16:27.000
We have time for one last.

16:27.000 --> 16:31.800
How many developers and is it widely used yet?

16:31.800 --> 16:35.080
So how many developers are working on it and is it widely used?

16:35.080 --> 16:36.960
A very good question.

16:36.960 --> 16:43.760
We recently got open sourced and we are in total five developers currently working on

16:43.760 --> 16:45.960
it.

16:45.960 --> 16:52.520
But we really try to implement the new concepts into this build system and make it a really

16:52.520 --> 16:57.440
sound build system compared to other modern build systems.

16:57.440 --> 17:02.680
And yeah, so please just take a look at our project and there is a nice tutorial also

17:02.680 --> 17:07.760
which well, everything explains nicely and hope to see you there.

17:07.760 --> 17:10.640
Okay, thank you for the talk.

17:10.640 --> 17:11.640
Thank you.

17:11.640 --> 17:12.640
Bye bye.

17:12.640 --> 17:13.640
Thank you for the help.

17:13.640 --> 17:14.640
Thank you.

17:14.640 --> 17:38.240
Bye-bye.

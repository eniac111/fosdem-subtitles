WEBVTT

00:00.000 --> 00:10.800
Hello, everybody. Today I'm going to talk about something I've been hacking on for quite

00:10.800 --> 00:17.160
some time now. It is called Galia and it is an extendable pen testing framework mainly

00:17.160 --> 00:24.840
in the automotive domain. My talk is structured like this. It is divided into four parts.

00:24.840 --> 00:29.400
I will start with some metadata about me and the project. Then I will give you an overview

00:29.400 --> 00:35.040
of the status quo. I will conclude with an outlook and I hope we have some time for a

00:35.040 --> 00:41.760
little short demo. So that's me. On the left-hand side you see my avatar and you might have

00:41.760 --> 00:48.680
spotted me on GitHub. I'm Stefan and I'm a security researcher and I'm the maintainer

00:48.680 --> 00:57.600
of Galia. So what is Galia? Galia stems from the SAC4COS project. It was a research project

00:57.600 --> 01:02.640
and we received some funding. On the YouTube link you can see a little demo we prepared

01:02.640 --> 01:10.400
last year. Galia is implemented in the Python programming language and we support the latest

01:10.400 --> 01:17.440
version minus one that is currently the 3.10 release. It is free software and it is available

01:17.440 --> 01:25.440
on GitHub. It is licensed under Apache 2. And we have two maintainers. The second maintainer

01:25.440 --> 01:32.200
hides in the audience. If you have questions we have been around here for some time. And

01:32.200 --> 01:37.800
it aims to be a modular tool for automotive penetration tests. So what is this? According

01:37.800 --> 01:45.760
to Wikipedia, a penetration test is an authorized simulated cyber attack on a computer system

01:45.760 --> 01:52.200
performed to evaluate the security of the system. And that basically means we connect

01:52.200 --> 01:58.560
our computer to a car or an automotive ECU and we send some data. And we keep on sending

01:58.560 --> 02:05.320
data until it breaks. And hopefully it breaks and then we try to figure out what we did

02:05.320 --> 02:16.360
in order to break it. And after such tests the lab usually looks like this. What are

02:16.360 --> 02:24.120
the challenges to actually achieve this? The reason why Galia exists is that we were doing

02:24.120 --> 02:30.000
some penetration testing and we needed a protocol stack for this. And in the automotive domain

02:30.000 --> 02:37.280
there is usually the UDS protocol that stands for unified diagnostic services. And you can

02:37.280 --> 02:44.240
think of it as the HTTP of automotive with the difference that UDS is stateful in contrast

02:44.240 --> 02:50.760
to a stateless protocol. Of course we need post processing which means machine readable

02:50.760 --> 02:58.040
logs in order to analyze data. Everything needs to be reproducible. We solve this by

02:58.040 --> 03:04.360
a defined directory structure for artifacts. And of course the automotive guys are very

03:04.360 --> 03:13.720
very creative in implementing network protocols. That means if you do expect an answer, the

03:13.720 --> 03:19.400
ECU doesn't answer. If you expect no answer, the ECU does answer. And that's quite a challenge

03:19.400 --> 03:28.160
and that's why we decided to write our own protocol stack. Since the automotive industry

03:28.160 --> 03:35.000
loves proprietary software and we do want to release the core of Galia, we created a

03:35.000 --> 03:40.920
plugin interface where we maintain our own proprietary plugins in our own infrastructure

03:40.920 --> 03:47.360
which plugs nicely into the GitHub code. And of course we need the whole software stack

03:47.360 --> 03:58.760
to achieve these goals. So we did write a whole implementation of the UDS stack and

03:58.760 --> 04:06.440
the status quo is like this. Usually you plug it in into the OBD port of your vehicle. OBD

04:06.440 --> 04:12.440
stands for onboard diagnosis and several ECUs might be exposed on that port and you can

04:12.440 --> 04:19.720
use Galia to discover this whole tree. For example, there might be three ECUs available

04:19.720 --> 04:27.160
and each ECU has different modes of operation. These are called UDS sessions. Galia can also

04:27.160 --> 04:36.080
discover these. And each session might also provide different UDS services. And what a

04:36.080 --> 04:43.600
UDS service does is up to the manufacturer of the ECU. It can be getting parameters.

04:43.600 --> 04:51.920
It might be setting parameters. It might even be software updating. The UDS standard defines

04:51.920 --> 04:59.880
just some basic facts what this actually is. And it could be everything basically.

04:59.880 --> 05:09.000
Galia came as a CLI tool and you can think of it as the nmap for cars. We provide some

05:09.000 --> 05:17.360
ready to use scanning modules. For example, the discovery I already showed and there are

05:17.360 --> 05:25.080
also modules to investigate these modules further. We have an UDS stack including DYP

05:25.080 --> 05:34.000
or ISOTP. These are little transport protocols beneath UDS since UDS is on the application

05:34.000 --> 05:43.240
layer. DYP, for example, is on top of TCP. ISOTP is on top of the CAN bus. You can use

05:43.240 --> 05:51.520
all these setups. The next one is that we are able to do some automation. If you're

05:51.520 --> 05:59.600
testing some ECU on its own, you can power cycle it during a scan. We power cycle the

05:59.600 --> 06:05.540
whole setup before each scan and so on. And of course, we have machine readable logging

06:05.540 --> 06:14.220
which comes as JSON logging and SQL logging. The SQL module is quite interesting since

06:14.220 --> 06:22.280
it can be used to query logging information across different or multiple ECUs. And for

06:22.280 --> 06:30.040
development we offer a virtual ECU module. The core concept of Galia is a test run. It

06:30.040 --> 06:36.880
is basically the invocation on the command line until it finishes. And it always creates

06:36.880 --> 06:41.960
a directory structure which is always the same and which contains some artifacts which

06:41.960 --> 06:50.240
can be used for scripting or similar. And the artifacts still always contains log files,

06:50.240 --> 06:59.600
always contains PCAP files and it might contain something else. The software is basically

06:59.600 --> 07:06.600
structured like this. There's a core module which can be extended via plug-ins. And you

07:06.600 --> 07:15.920
can build standalone modules or you can integrate into the CLI system. Basically, the architecture

07:15.920 --> 07:21.280
is like this. The main entry point is the scanner on top which contains a module for

07:21.280 --> 07:28.200
optionally controlling power supplies and it contains an abstraction module for an ECU

07:28.200 --> 07:33.520
which uses the whole UDS protocol stack. And the protocol stack also can be extended via

07:33.520 --> 07:41.120
plug-ins. And these plug-ins might look like this. This is a Hello Work module. Basically,

07:41.120 --> 07:47.160
you create a class in Python. You need to implement the main method which could be basically

07:47.160 --> 07:56.320
anything and then you plug it in into an entry point and that's basically it. Some random

07:56.320 --> 08:03.560
facts. We use poetry for dependency management and in order to maintain a modern Python code

08:03.560 --> 08:12.320
base, async.io, and async. await is used everywhere. It is fully typed. It passes my py strict.

08:12.320 --> 08:19.800
It is extendable as mentioned via the Python entry point API. And for configuring the protocol

08:19.800 --> 08:27.920
stack, we use some URL strings which are verified by the Pythonic module. Yesterday, there was

08:27.920 --> 08:35.720
a great talk about the Pythonic module if you're interested in this. So, let's give

08:35.720 --> 08:43.600
us some little outlook. Of course, we need more power supplies. We need more transport

08:43.600 --> 08:49.920
modules. We need also more scanner modules. And also, we need extending the scope. We

08:49.920 --> 08:54.320
need more plug-ins, scanning techniques, and so on. And of course, more breakage and more

08:54.320 --> 09:02.000
memes and more testing. And we need more packages. Currently, there is a package for the Arch Linux

09:02.000 --> 09:08.880
distribution. We have a UAR package and it is included in the Nix OS distribution in

09:08.880 --> 09:15.400
the unstable branch. And if you're a package maintainer and interested in this, just create

09:15.400 --> 09:22.880
a package file ticket on GitHub and we will include this in the file. I will conclude

09:22.880 --> 09:29.120
with a short demo. It can be downloaded on this link, but I brought it here and I will

09:29.120 --> 09:56.580
play it. Sorry. Okay. What we can see here is a Team

09:56.580 --> 10:04.120
Manager. And on the second tab, we have the command line invocation. Here we have the

10:04.120 --> 10:09.920
configuration of the network stack. We have a transport module called TCP lines, which

10:09.920 --> 10:18.240
basically sends ASCII strings as TCP. On top of TCP. We use this for debugging and testing.

10:18.240 --> 10:24.720
We have an artifact here where all the logging is placed. And we try to discover what actual

10:24.720 --> 10:35.960
UDS services this ECU exposes. When you start it, it starts dump cap, which records all

10:35.960 --> 10:42.360
the network traffic. Then it synchronizes with the ECU, which means it sends a present

10:42.360 --> 10:48.160
packet that's something like a ping message. And when the pong arrives, the scanner starts

10:48.160 --> 10:56.040
and it iterates over the ECU. And in this example, we have found a mode of operation.

10:56.040 --> 11:08.680
This session, hex 52. And several services are exposed in this session, which can be

11:08.680 --> 11:18.840
scanned further with other scanning modules. Now I have finished with my talk. Thank you

11:18.840 --> 11:25.280
very much for your attention. And if there are any questions, I will help you to answer

11:25.280 --> 11:26.280
them.

11:26.280 --> 11:47.000
Yes, thank you, Stefan. So we have sometimes four questions here.

11:47.000 --> 11:52.440
Hi, thank you for your talk. Can you say anything about fuzzing or memory scan? What you did

11:52.440 --> 12:02.160
there? We have some very basic fuzzer. It is included in the GitHub code. It is PDU

12:02.160 --> 12:09.960
fuzzing. But it just generates random data. And you don't have any feedback loop for this

12:09.960 --> 12:16.840
since this is quite complicated to implement for a car in a generic manner. Internally,

12:16.840 --> 12:22.920
we have some more sophisticated fuzzing modules, but we are not allowed to publish them because

12:22.920 --> 12:33.520
of the NDA stuff, unfortunately. For the memory scan, there are a few services, blah, blah,

12:33.520 --> 12:38.960
blah, by memory address. We have discovery modules for this published on GitHub. But

12:38.960 --> 12:46.680
they actually discover endpoints. And that's basically it.

12:46.680 --> 12:52.640
So I have done a lot of testing and reverse engineering. And you need a matrix of tests

12:52.640 --> 13:00.320
of what you are testing against. And I was just wondering, for fits and giggles, is this

13:00.320 --> 13:06.520
virtual CPU sufficient to actually plug it into the bus and actually run the car?

13:06.520 --> 13:08.520
Maybe not.

13:08.520 --> 13:16.640
Maybe not. Because then it would be accurate enough to be able to be tested as a real world

13:16.640 --> 13:20.080
MCU.

13:20.080 --> 13:27.560
I hope I did understand the question correctly. But our virtual ECU module offers a possibility

13:27.560 --> 13:36.840
to clone ECUs so we can just record traffic and store this in the database. And it just

13:36.840 --> 13:44.320
answers what it has seen recently. But it does not cover any state.

13:44.320 --> 13:53.720
The idea was that the virtual CPU is actually sufficient to replace the ECU in the car and

13:53.720 --> 14:01.920
run drive the car. And that would give the enough accuracy of the ECU to be able to be

14:01.920 --> 14:02.920
tested.

14:02.920 --> 14:07.440
Maybe it's a bit too much.

14:07.440 --> 14:10.800
That's not in the scope of the data I feel.

14:10.800 --> 14:20.240
Okay. Thank you, Stefan. Thank you for listening. And feel free to ask questions outside. Full

14:20.240 --> 14:21.240
speaker there.

14:21.240 --> 14:22.240
Thank you.

14:22.240 --> 14:23.240
Thank you.

14:23.240 --> 14:37.680
Thank you.

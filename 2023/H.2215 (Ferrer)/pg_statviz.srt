1
0:00:00.000 --> 0:00:12.960
Hello. So, Pgstatviz, from the name, I think you can understand that it's probably something

2
0:00:12.960 --> 0:00:20.960
to do with Postgres. And it is. It is a new Postgres extension and utility pair. So, it

3
0:00:20.960 --> 0:00:29.840
comes with its own tool that you use outside of Postgres. It's minimalist. We'll get into

4
0:00:29.840 --> 0:00:37.120
that in a moment. It only does the thing it's supposed to do, and it doesn't touch anything

5
0:00:37.120 --> 0:00:43.520
else on the system that it's not supposed to. And the purpose of Pgstatviz is time series

6
0:00:43.520 --> 0:00:50.280
analysis and visualization. That's the vis part of Postgres internal statistics. That's

7
0:00:50.280 --> 0:01:02.000
the stat part. So, Postgres internally keeps its own statistics. They are cumulative and

8
0:01:02.000 --> 0:01:08.200
dynamic statistics, right? So, you get, like, number of buffers written is a cumulative

9
0:01:08.200 --> 0:01:15.520
statistic that keeps going up. You also have dynamic statistics like Pgstat activity that

10
0:01:15.520 --> 0:01:21.280
tells you what's happening inside your Postgres server at that moment in time. So, if you

11
0:01:21.280 --> 0:01:27.960
take snapshots of these statistics internally from within Postgres and you perform time

12
0:01:27.960 --> 0:01:35.320
series analysis on them, you can gain insights into how your server is behaving. So, this

13
0:01:35.320 --> 0:01:41.600
utility that comes with Pgstatviz extension can produce visualizations for selected time

14
0:01:41.600 --> 0:01:50.320
ranges on the stored snapshots that are inside the database. So, you can, for example, take

15
0:01:50.320 --> 0:01:57.720
snapshots of your server every 15 minutes during the course of the day and then analyze

16
0:01:57.720 --> 0:02:03.000
it over 24 hours to see what your peak times were and what was happening inside the server

17
0:02:03.000 --> 0:02:12.920
at that time. I wouldn't recommend taking snapshots more frequently than a minute. And

18
0:02:12.920 --> 0:02:20.320
it's easy to see why. You have too many snapshots. It's harder to see the bigger picture, maybe.

19
0:02:20.320 --> 0:02:28.380
So, the reason for all of this is you want to track your performance over time and potentially

20
0:02:28.380 --> 0:02:33.120
you can perform troubleshooting on why your server is not behaving the way you expect

21
0:02:33.120 --> 0:02:45.520
it to and additional tuning. So, minimalist. This is a tiny package that is based on the

22
0:02:45.520 --> 0:02:55.920
KISS and Unix philosophies. So, keep it simple and sweet, right? And the Unix philosophy

23
0:02:55.920 --> 0:03:01.280
is that it comes with a tool that you can run as a normal Postgres command line tool

24
0:03:01.280 --> 0:03:09.040
like P SQL with the same parameters and everything else. And it allows you very simply to create

25
0:03:09.040 --> 0:03:15.920
snapshots of the statistics and visualize them. So, it's modular. We'll get into the

26
0:03:15.920 --> 0:03:23.040
modules in a minute. It's minimal. It's the least amount of code I could write to make

27
0:03:23.040 --> 0:03:31.000
this thing work. And it's unobtrusive. So, you can take snapshots without affecting any

28
0:03:31.000 --> 0:03:35.520
other activity running on your system. And I think that's very important for being able

29
0:03:35.520 --> 0:03:42.560
to monitor and analyze in production. So, the components are Postgres extension, as

30
0:03:42.560 --> 0:03:49.240
we said, and the Python utility that retrieves the stored snapshots from the database and

31
0:03:49.240 --> 0:03:56.920
creates simple visualizations with them using matplotlib. There is the extension is written

32
0:03:56.920 --> 0:04:04.880
in plain SQL and PLPG SQL. So, there's nothing to put in shared preload libraries. So, this

33
0:04:04.880 --> 0:04:10.000
means that you can just type create extension and you can start using it without even restarting

34
0:04:10.000 --> 0:04:17.720
your server. So, create extension PG status is all you need to do. We're working on the

35
0:04:17.720 --> 0:04:27.160
packaging now to get it distributed through the PGDG repos, Postgres global development

36
0:04:27.160 --> 0:04:32.280
group repositories, and by extension it will find its way into distributions hopefully

37
0:04:32.280 --> 0:04:40.120
soon. The way you install the utility is very simple. You just type pip install PG status.

38
0:04:40.120 --> 0:04:43.640
If you tried that this morning, it wouldn't work, but I just uploaded the file so you

39
0:04:43.640 --> 0:04:51.440
can try it out. As I said, this is a last minute talk. It's very new. The code is pre-production

40
0:04:51.440 --> 0:04:58.800
quality. I would call it alpha code, but you can give it a try for yourself and offer any

41
0:04:58.800 --> 0:05:06.920
suggestions or fixes or tell me what I'm doing wrong. Now, the extension can be used by super

42
0:05:06.920 --> 0:05:13.040
users, but you don't have to. The only thing that the extension needs is PG monitor role

43
0:05:13.040 --> 0:05:19.240
privileges in order to be able to select from the internal Postgres statistics tables. The

44
0:05:19.240 --> 0:05:26.840
usage is dead simple. To take a snapshot, you just type from within a client select PG

45
0:05:26.840 --> 0:05:33.640
status.snapshot. Why is there no underscore there? It's because Postgres doesn't like

46
0:05:33.640 --> 0:05:40.640
us naming schemas PG underscore something. That's reserved only for core Postgres. Extensions

47
0:05:40.640 --> 0:05:49.000
are not allowed to do it. What does the command line look like? You just pip install PG status

48
0:05:49.000 --> 0:05:56.880
and you have the utility. The utility, when you ask for help, is a normal Postgres utility.

49
0:05:56.880 --> 0:06:02.560
You get your database selection, user name, host name, port, et cetera, the same way you

50
0:06:02.560 --> 0:06:10.560
would connect with any Postgres client. You've got modules like buff that shows you statistics

51
0:06:10.560 --> 0:06:18.920
on the background writer and buffers written to disk, cache hit ratio, checkpoint rate,

52
0:06:18.920 --> 0:06:26.160
connections, number of tuples, weights that are found in the server during the snapshot,

53
0:06:26.160 --> 0:06:31.920
world generation and so on. You can either run analyze, which runs all of the modules

54
0:06:31.920 --> 0:06:38.360
at once and generates visualizations, or you can run just one module if you're only interested

55
0:06:38.360 --> 0:06:48.760
in buffers. You can only say run buff. Most importantly, there's a capital D option that

56
0:06:48.760 --> 0:06:55.680
you can use to specify the date range in order to visualize only the time range you're interested

57
0:06:55.680 --> 0:07:03.320
in. So like the last 24 hours only. And these are specified, of course, in ISO 8601 format.

58
0:07:03.320 --> 0:07:10.280
So there's no ambiguity in how to type in dates. And it works something like this. You

59
0:07:10.280 --> 0:07:17.080
connect to database FOF. As user Postgres, you give it a date range and it just generates

60
0:07:17.080 --> 0:07:27.320
the snapshots and writes the visualizations as PNG to disk. And yes, it has a logo. So

61
0:07:27.320 --> 0:07:33.240
it's complete. The visualizations look something like this. I apologize if the points are

62
0:07:33.240 --> 0:07:39.440
a bit too small for you to see. So as we said, buffers written to disk is a line that keeps

63
0:07:39.440 --> 0:07:47.020
going up until stats reset. When the stats get reset, it starts from zero again. So perhaps

64
0:07:47.020 --> 0:07:54.280
this is more useful. This is the buffer write rate in megabytes per second. So you can see

65
0:07:54.280 --> 0:07:59.360
exactly how many buffers your Postgres server was writing to disk at any moment in time.

66
0:07:59.360 --> 0:08:10.520
And also you can analyze what was happening because of the background writer.

67
0:08:10.520 --> 0:08:25.080
No? Yes. Thank you. So you can see here that because this was a test I ran on my laptop

68
0:08:25.080 --> 0:08:32.760
with a script that was just inserting rows into the same table, the checkpoint line,

69
0:08:32.760 --> 0:08:38.480
which is the orange line, didn't do much because it wasn't scheduled activity taken care of

70
0:08:38.480 --> 0:08:44.880
by checkpoints. But you can see the back ends were doing most of the work. And also you

71
0:08:44.880 --> 0:08:51.620
can see that the background writer, which is the green line, didn't get the chance to

72
0:08:51.620 --> 0:08:57.240
write in all this buffer writing because from what we can see from the very low line, its

73
0:08:57.240 --> 0:09:04.840
limits were set too low for production. So you can gain insights into the behavior of

74
0:09:04.840 --> 0:09:12.040
your Postgres server like this. Or you can look at connection versus status count. So

75
0:09:12.040 --> 0:09:16.800
you can see how many connections you had coming into your server from clients, how many of

76
0:09:16.800 --> 0:09:21.680
them were active, how many of them were idle, how many were idle in transaction, and so

77
0:09:21.680 --> 0:09:29.000
on. But you can also see which users were taking up those connections. And I think that's

78
0:09:29.000 --> 0:09:33.880
really interesting when you have like an environment that's used by multiple applications so you

79
0:09:33.880 --> 0:09:38.440
can know which developers to blame when it all goes south.

80
0:09:38.440 --> 0:09:45.160
Weight events. As I was testing this on my laptop and was overflowing it with IO because

81
0:09:45.160 --> 0:09:54.440
I was inserting millions of rows into a table, I generated an IO data file read, sorry for

82
0:09:54.440 --> 0:10:00.320
the small letters, weight condition. And that was captured by the snapshot that was being

83
0:10:00.320 --> 0:10:09.080
taken every 10 seconds or so for this example. So thank you for listening. The project is

84
0:10:09.080 --> 0:10:17.040
going to be live at github.com slash virus slash pgstatvez in a few moments. You can

85
0:10:17.040 --> 0:10:28.760
find me on Mastodon and what the hell, I'll do it right now. So as we said, this is alpha

86
0:10:28.760 --> 0:10:36.080
quality code. Oh, I forgot to say that it doesn't do any scheduling or any maintenance

87
0:10:36.080 --> 0:10:43.120
or any partitioning of those internal tables where it keeps the snapshots. So you can delete

88
0:10:43.120 --> 0:10:53.280
them by hand. You can schedule the snapshots very easily with any tool you like, like cron

89
0:10:53.280 --> 0:10:59.120
or pgcron, but I didn't want to make this a dependency on the extension. So you can

90
0:10:59.120 --> 0:11:17.240
just configure it yourself. And I can just go to settings and make it public right now.

91
0:11:17.240 --> 0:11:37.200
Thank you.

92
0:11:37.200 --> 0:11:46.160
Any questions? No, okay.

93
0:11:46.160 --> 0:11:50.240
Thanks anyway. Thanks. Thanks for, um, Demi.


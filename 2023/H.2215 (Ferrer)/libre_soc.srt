1
0:00:00.000 --> 0:00:02.000
Okay.

2
0:00:02.000 --> 0:00:14.000
A Libri-Saw project is creating free and open source ship design for a family of system

3
0:00:14.000 --> 0:00:20.640
and ship products for powering routers, cell phones, laptops, your laptop maybe in the

4
0:00:20.640 --> 0:00:22.080
future.

5
0:00:22.080 --> 0:00:34.000
So it uses the power source set, augmented with 3D upcodes, 3D graphics and also video

6
0:00:34.000 --> 0:00:38.320
acceleration upcodes and audio decoders and encoders.

7
0:00:38.320 --> 0:00:48.520
So we need it for avoiding proprietary binary blobs and drivers and no reverse engineering

8
0:00:48.520 --> 0:00:53.200
needed for supporting our hardware.

9
0:00:53.200 --> 0:00:59.400
And well, it is hard to do so we do it by grants and donations.

10
0:00:59.400 --> 0:01:09.120
We use a pool of community experts on Usenet, IRC, academia and also commercial partners

11
0:01:09.120 --> 0:01:13.600
which will produce our ship as you see later.

12
0:01:13.600 --> 0:01:21.320
So it is architecture is a traditional fetch the code issue and execute pipeline but to

13
0:01:21.320 --> 0:01:28.080
increase performance use parallel decoders to decode instructions in advance, a vector

14
0:01:28.080 --> 0:01:29.480
issue.

15
0:01:29.480 --> 0:01:43.480
So one instruction can generate many results at one time utilizing the functions units

16
0:01:43.480 --> 0:01:54.400
of the ship with the parallel execution units and managing all things scoreboard, dependency

17
0:01:54.400 --> 0:01:57.880
tracking design.

18
0:01:57.880 --> 0:02:07.400
Well we started from zero from the Power Inza instruction set specification as published

19
0:02:07.400 --> 0:02:15.200
by the OpenPower Foundation which is open standard.

20
0:02:15.200 --> 0:02:22.720
You can submit extensions to it and that is one of the reasons we chose the Power Architecture.

21
0:02:22.720 --> 0:02:30.960
So the Power has this big manual with all the assembly instructions and all these formats

22
0:02:30.960 --> 0:02:37.920
and we take these formats, these tables and auto generate from by Python, a Python decoder

23
0:02:37.920 --> 0:02:42.080
from these specifications.

24
0:02:42.080 --> 0:02:50.640
And the specification of the Power Architecture also has a pseudo code and with this pseudo

25
0:02:50.640 --> 0:02:58.400
code which is for humans but we use it for auto translation to a simulator, Python simulator.

26
0:02:58.400 --> 0:03:06.960
And we start from the beginning just simulating instructions in software then you use the

27
0:03:06.960 --> 0:03:14.000
simulator to test against this one, the last one and the harder simulator will verify against

28
0:03:14.000 --> 0:03:22.200
the software simulator and finally FPGA and even an ASIC.

29
0:03:22.200 --> 0:03:23.440
Let's jump here.

30
0:03:23.440 --> 0:03:30.600
So this is like an, imagine you have an adding instruction coming in and the LU has to process

31
0:03:30.600 --> 0:03:36.080
it but before processing it, it has to receive operands like add what?

32
0:03:36.080 --> 0:03:42.400
A and B. But A and B can be the result of a previous instruction which is still being

33
0:03:42.400 --> 0:03:43.400
processed.

34
0:03:43.400 --> 0:03:45.400
So it has to wait, wait where?

35
0:03:45.400 --> 0:03:53.040
In here and here and here and when it has to have a read the transaction, read the transaction,

36
0:03:53.040 --> 0:03:59.960
and it will fill the buffers then the adding instructions can proceed and it will generate

37
0:03:59.960 --> 0:04:06.960
a result and condition codes but maybe you cannot write them right now because you'll

38
0:04:06.960 --> 0:04:14.000
overwrite another instruction so we wait here and here also and this has to be managed.

39
0:04:14.000 --> 0:04:21.280
So one of my tasks is to simulate this to see if it works well and do what?

40
0:04:21.280 --> 0:04:27.520
Formal verification which is so, so good, so, so interesting.

41
0:04:27.520 --> 0:04:34.960
With normal simulation you just throw random inputs maybe on some test cases but how do

42
0:04:34.960 --> 0:04:39.720
you know that you didn't hit a corner case?

43
0:04:39.720 --> 0:04:45.480
Well informal verification is like it's try everything at once.

44
0:04:45.480 --> 0:04:53.240
Usually it starts from a bad result that you don't want to have and it shows you the input

45
0:04:53.240 --> 0:04:56.280
which reaches that bad result.

46
0:04:56.280 --> 0:04:57.800
Yes.

47
0:04:57.800 --> 0:05:03.200
So that's the beauty of the thing.

48
0:05:03.200 --> 0:05:06.240
We get a simple core.

49
0:05:06.240 --> 0:05:09.960
First we do not do these function units all in parallel.

50
0:05:09.960 --> 0:05:13.920
We just use one to test all of this is working.

51
0:05:13.920 --> 0:05:22.840
Put it here and then we read the instruction, decode the instruction and then run the instruction.

52
0:05:22.840 --> 0:05:30.160
Terribly slowly but we validate the function units and the decoder.

53
0:05:30.160 --> 0:05:36.240
Next step which we did already is we vectorize it.

54
0:05:36.240 --> 0:05:42.200
So we put a read 64 because there are 32 instructions.

55
0:05:42.200 --> 0:05:49.720
You add a vector prefix to them and this vector prefix will tell you to read a predicate so

56
0:05:49.720 --> 0:05:52.600
from the vector you say no I don't want all of them.

57
0:05:52.600 --> 0:05:59.400
I want the even ones or the odd ones or the ones with pass the test like if then else

58
0:05:59.400 --> 0:06:02.160
but vectorized.

59
0:06:02.160 --> 0:06:05.000
And then you run the vector loop.

60
0:06:05.000 --> 0:06:13.640
So one instruction again can generate many can take the place of many many instructions.

61
0:06:13.640 --> 0:06:18.360
And well now we go to the next steps.

62
0:06:18.360 --> 0:06:22.160
We have these working now we have to do it in parallel.

63
0:06:22.160 --> 0:06:24.240
We want to have performance.

64
0:06:24.240 --> 0:06:26.920
It is working now performance.

65
0:06:26.920 --> 0:06:33.560
So to be performant we need to while we execute in one instruction you are decoding the next

66
0:06:33.560 --> 0:06:37.720
one and you are fetching the next next one.

67
0:06:37.720 --> 0:06:45.000
And there is a jump instruction by chance and it doesn't match what you are fetching

68
0:06:45.000 --> 0:06:47.960
you have to reset the pipeline.

69
0:06:47.960 --> 0:06:49.960
Yes.

70
0:06:49.960 --> 0:06:58.720
Test well where you are right now we have a development environment that any of you

71
0:06:58.720 --> 0:07:06.880
can download and test in your computer you can do it is run in a shoot and you can do

72
0:07:06.880 --> 0:07:13.680
make test to run the tests and if you have an FPGA board you can compile the bit stream

73
0:07:13.680 --> 0:07:20.160
and put it to a supported board and we even did a execute.

74
0:07:20.160 --> 0:07:28.000
Well for the execute we need the PDK which is a process development kit that the factories

75
0:07:28.000 --> 0:07:39.320
don't give it to you freely so that part is done by a third party we don't touch property

76
0:07:39.320 --> 0:07:47.200
stuff but while it was done yes and we hope in the future to have a FPGA with it.

77
0:07:47.200 --> 0:07:57.960
So the FPGA is booted we have a bare metal like Arduino like FPGA running Zephyr quite

78
0:07:57.960 --> 0:08:05.400
fast was ported with network so networking was proved and the Linux with a serial console.

79
0:08:05.400 --> 0:08:06.400
Yes.

80
0:08:06.400 --> 0:08:15.040
We have the test silicon with that little simple core and it is being carefully tested

81
0:08:15.040 --> 0:08:22.400
because you have few chips produced not to burn them so they are tested in our app.

82
0:08:22.400 --> 0:08:30.200
Yes the new tools part is on the way with the new instructions vector instructions already

83
0:08:30.200 --> 0:08:35.200
and the new instructions been submitted to the open power foundation for standardization

84
0:08:35.200 --> 0:08:45.200
and we are being are parting algorithms cryptographic algorithms and multimedia etc.

85
0:08:45.200 --> 0:08:52.200
So what you aim you aim to port and boot a Linux distro in the future eventually we want

86
0:08:52.200 --> 0:08:58.400
to have a filter change this is seen in the new tools with vectorization they find these

87
0:08:58.400 --> 0:09:06.080
stations to include the text your app codes for 3D acceleration so you notice there will

88
0:09:06.080 --> 0:09:14.160
not be a GPU the instructions the CPU will be the GPU and well we need the hardware and

89
0:09:14.160 --> 0:09:23.000
software developers and testers and also well documentation optional no OK.

90
0:09:23.000 --> 0:09:29.520
So who will build the chips well you just have research money right.

91
0:09:29.520 --> 0:09:33.600
Well we'll produce thousands of chips for the market.

92
0:09:33.600 --> 0:09:39.640
Well we are partner with red semiconductor which is have the mission of producing these

93
0:09:39.640 --> 0:09:46.480
chips producing a powerful power efficient chip with our car.

94
0:09:46.480 --> 0:09:54.360
So if you see some of them and some of us some of them with this logo on the shirts

95
0:09:54.360 --> 0:09:57.200
you can talk to them here.

96
0:09:57.200 --> 0:10:00.720
Hello David hello people.

97
0:10:00.720 --> 0:10:16.080
So that's it thank you very much.

98
0:10:16.080 --> 0:10:18.480
Thank you for the stone.

99
0:10:18.480 --> 0:10:24.000
Thank you very much for the presentation there's a few minutes left for questions.

100
0:10:24.000 --> 0:10:38.080
So in the back of the room I see someone waving just a moment.

101
0:10:38.080 --> 0:10:39.720
Thanks for your presentation.

102
0:10:39.720 --> 0:10:43.080
You said that you had some test chips going on.

103
0:10:43.080 --> 0:10:49.000
What's the status of the bring up like how far did you get in the bring up process.

104
0:10:49.000 --> 0:10:58.160
OK we know the clock is working it has well the ASEQ it's not only for Libri-SOC but for

105
0:10:58.160 --> 0:11:05.240
the academic institution to test their design so they are testing this clock generation

106
0:11:05.240 --> 0:11:09.920
and well we know the clock generation works.

107
0:11:09.920 --> 0:11:17.760
Just that.

108
0:11:17.760 --> 0:11:21.920
So maybe anyone else with a question.

109
0:11:21.920 --> 0:11:48.600
OK thank you for your attention.


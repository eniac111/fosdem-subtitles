1
0:00:00.000 --> 0:00:15.720
Now is the time for the Yoshimalize.

2
0:00:15.720 --> 0:00:28.760
And he speaks about breaking the code of inclusion, the designing micro materials based on principles

3
0:00:28.760 --> 0:00:31.360
for accessible programming education.

4
0:00:31.360 --> 0:00:33.760
Very difficult title.

5
0:00:33.760 --> 0:00:37.400
So, okay, the stage is yours.

6
0:00:37.400 --> 0:00:38.400
Thank you.

7
0:00:38.400 --> 0:00:39.400
Thank you.

8
0:00:39.400 --> 0:00:41.400
So, my name is Yoshie.

9
0:00:41.400 --> 0:00:43.400
My name is Yoshie.

10
0:00:43.400 --> 0:00:49.000
I'm a PhD student at the Ray University at Bristol.

11
0:00:49.000 --> 0:00:53.080
And today I'll be giving a talk about how we can design more open.

12
0:00:53.080 --> 0:00:55.080
Sorry for that.

13
0:00:55.080 --> 0:01:02.080
Okay, okay, okay, good.

14
0:01:02.080 --> 0:01:08.000
Just, all right.

15
0:01:08.000 --> 0:01:22.080
So, I'm Yoshie and I'll be giving a talk about how we can design more open and inclusive

16
0:01:22.080 --> 0:01:25.840
pedagogical material to teach programming.

17
0:01:25.840 --> 0:01:29.920
I'll first like to start a bit with a small introduction to tell you why we think this

18
0:01:29.920 --> 0:01:31.280
talk is important.

19
0:01:31.280 --> 0:01:36.360
So, I've always been passionate both by programming but also by education.

20
0:01:36.360 --> 0:01:41.640
I joined CoderDojo from a very young age helping kids to learn how to code.

21
0:01:41.640 --> 0:01:46.600
And I also went for an internship abroad in Kenya to build software for schools in less

22
0:01:46.600 --> 0:01:52.040
fortunate areas where I could firsthand experience what technology can do to help education.

23
0:01:52.040 --> 0:01:58.800
Upon graduating, I joined Hack Your Future Belgium for those of you that don't know.

24
0:01:58.800 --> 0:02:04.640
It's a small nonprofit organization in Brussels that organizes coding boot camps for refugees

25
0:02:04.640 --> 0:02:09.000
that are trying to find a job in the tech sector here.

26
0:02:09.000 --> 0:02:15.200
So, before we go on to the meat of the presentation, let's take a look at some of the background

27
0:02:15.200 --> 0:02:17.240
information we need.

28
0:02:17.240 --> 0:02:21.320
I'm pretty sure most of you remember your first programming classes where you had to

29
0:02:21.320 --> 0:02:25.240
install a weird-looking editor with hundreds of buttons.

30
0:02:25.240 --> 0:02:26.960
You had to type in some text.

31
0:02:26.960 --> 0:02:32.680
You tried to press the play button or a compile button, and you would see a weird error message

32
0:02:32.680 --> 0:02:34.960
that you didn't really understand.

33
0:02:34.960 --> 0:02:38.000
This can be very demotivating.

34
0:02:38.000 --> 0:02:43.920
And it's actually even worse when it happens to people from already underrepresented groups

35
0:02:43.920 --> 0:02:48.840
because if they encounter these types of errors, they internalize it, and they feel like it's

36
0:02:48.840 --> 0:02:54.280
a confirmation that, yes, maybe they do not belong in such a classroom, which is, of course,

37
0:02:54.280 --> 0:02:56.880
not the message they want to send.

38
0:02:56.880 --> 0:03:03.840
Now, in the past years, there has been a new methodology of teaching programming that tries

39
0:03:03.840 --> 0:03:07.480
to limit this issue, and it's based called the PRIM principles.

40
0:03:07.480 --> 0:03:12.760
Now, the idea is instead of starting to write your program from scratch from day one, you

41
0:03:12.760 --> 0:03:16.280
basically start with a simple exercise predict.

42
0:03:16.280 --> 0:03:21.200
In this stage, you look at some existing code, you download it, and you're going to try to

43
0:03:21.200 --> 0:03:25.960
predict what will the result be if I run this piece of code.

44
0:03:25.960 --> 0:03:30.800
Then in the next stage, you're actually going to download the code and execute it, and going

45
0:03:30.800 --> 0:03:35.080
to verify whether your prediction is correct or not.

46
0:03:35.080 --> 0:03:40.320
Then in the third stage, we're going to ask you to actually make exercises on the problem.

47
0:03:40.320 --> 0:03:46.040
This can be label all the variables, or can you tell me which variables are updated at

48
0:03:46.040 --> 0:03:47.520
some point in the code.

49
0:03:47.520 --> 0:03:52.640
Now, up until this point, the learner hasn't changed anything about that code itself, and

50
0:03:52.640 --> 0:03:57.600
as such, he also doesn't feel like it's a personal failure if something goes wrong in

51
0:03:57.600 --> 0:03:58.600
the process.

52
0:03:58.600 --> 0:04:03.320
We're going to try to change this in the fourth step, modify, where we're still not going

53
0:04:03.320 --> 0:04:07.320
to ask the student to write code from scratch, but we're going to give them a functioning

54
0:04:07.320 --> 0:04:12.040
program, and we're going to ask them, hey, can you make some small modifications?

55
0:04:12.040 --> 0:04:15.920
Like instead of running this loop three times, run it six times.

56
0:04:15.920 --> 0:04:19.920
It's only in the last stage where we're going to ask them to actually write a new program

57
0:04:19.920 --> 0:04:23.520
from scratch using the same principles he developed earlier.

58
0:04:23.520 --> 0:04:28.520
Now, this is a new methodology in teaching and programming education, but it's based

59
0:04:28.520 --> 0:04:33.480
on a very well-known pedagogical concept called the zone of proximal development, where the

60
0:04:33.480 --> 0:04:34.960
idea is quite simple.

61
0:04:34.960 --> 0:04:39.520
If you're only doing tasks you can do by yourself, you're not actually learning anything, you're

62
0:04:39.520 --> 0:04:41.720
just repeating stuff.

63
0:04:41.720 --> 0:04:47.640
But if I give you a task that you cannot do yourself, even with some help, you're actually

64
0:04:47.640 --> 0:04:52.160
just going to get demotivated and lose all motivation to continue learning.

65
0:04:52.160 --> 0:04:53.520
So that's also not good.

66
0:04:53.520 --> 0:04:58.680
So we should always strive to give exercises in this yellow zone, where the student cannot

67
0:04:58.680 --> 0:05:04.840
easily do it on their own, but with some proper guidance they can get there.

68
0:05:04.840 --> 0:05:06.760
Which brings us to micromaterials.

69
0:05:06.760 --> 0:05:13.640
Now a micromaterial is an open education resource, so anybody can easily include it in their

70
0:05:13.640 --> 0:05:18.760
curriculum, but it should also provide some sort of automated feedback so that even though

71
0:05:18.760 --> 0:05:22.960
the teacher is not there directly to guide the student, they can still get something

72
0:05:22.960 --> 0:05:24.160
away from it.

73
0:05:24.160 --> 0:05:28.880
Ideally, you also want some kind of automatically generated content, because managing all the

74
0:05:28.880 --> 0:05:34.320
content for exercises can be a very time-consuming exercise for teachers.

75
0:05:34.320 --> 0:05:39.000
So now we'll discuss some small examples that we within our lab have built to experiment

76
0:05:39.000 --> 0:05:40.600
with these ideas.

77
0:05:40.600 --> 0:05:47.920
So the first sample we'd like to discuss is an online environment to practice the use

78
0:05:47.920 --> 0:05:48.920
of HTML.

79
0:05:48.920 --> 0:05:53.360
It is designed for engineering students, where we do not really expect to be able to develop

80
0:05:53.360 --> 0:05:58.480
HTML websites on their own, but they should be able to grasp the core concepts of what

81
0:05:58.480 --> 0:06:00.360
the elements are about.

82
0:06:00.360 --> 0:06:06.040
So we have a stepwise progress that they can follow level by level, and we always start

83
0:06:06.040 --> 0:06:11.240
with a small presentation of the core HTML concepts that they need to know.

84
0:06:11.240 --> 0:06:17.360
Now once it's time to actually practice their HTML, we do not just give them an editor,

85
0:06:17.360 --> 0:06:22.200
but instead we make use of Google's Blockly library to show this kind of HTML blocks that

86
0:06:22.200 --> 0:06:26.760
already contain the syntax so they can focus on what the text represents and not on the

87
0:06:26.760 --> 0:06:28.880
syntax itself.

88
0:06:28.880 --> 0:06:35.520
And here we analyze sample HTML code to generate the blocks, so adding new levels is as simple

89
0:06:35.520 --> 0:06:40.000
as providing a new website we want them to recreate.

90
0:06:40.000 --> 0:06:46.200
We also dynamically create links for every element, like hints for every element that

91
0:06:46.200 --> 0:06:49.240
they will need to use in the page.

92
0:06:49.240 --> 0:06:54.880
We have a similar environment for the practice of databases for the same engineering students.

93
0:06:54.880 --> 0:06:59.480
We used to have a lot of problems where they had to install databases locally, database

94
0:06:59.480 --> 0:07:04.080
files could get corrupt and they could turn into issues, so we developed a fully online

95
0:07:04.080 --> 0:07:10.240
environment with the use of SQL.js, which is an open source project based on SQLite

96
0:07:10.240 --> 0:07:13.200
compiled to WebAssembly using Enscriptum.

97
0:07:13.200 --> 0:07:19.280
So in this simple application they would get to see a description of a database, and on

98
0:07:19.280 --> 0:07:22.240
this database they would get to run queries.

99
0:07:22.240 --> 0:07:29.320
The queries would be typed into an online code editor based on atom, so they get syntax

100
0:07:29.320 --> 0:07:33.900
highlighting, they get code completion, and whenever they were to execute the queries

101
0:07:33.900 --> 0:07:38.160
they could see the results directly in their browsers, and this they would use to answer

102
0:07:38.160 --> 0:07:42.080
questions about the data.

103
0:07:42.080 --> 0:07:46.560
Similarly if it was more about inserting or updating the data, we could no longer do with

104
0:07:46.560 --> 0:07:50.920
simply having a simple fill-in-the-answer type of question.

105
0:07:50.920 --> 0:07:56.400
So instead we're going to run checks to see at which step did they fail, so they can stepwise

106
0:07:56.400 --> 0:08:02.680
go back and modify the code until they get it right for all the constraints.

107
0:08:02.680 --> 0:08:06.160
Similarly as well if they want to create new tickets we would also generate test cases

108
0:08:06.160 --> 0:08:08.840
for those.

109
0:08:08.840 --> 0:08:14.240
Another problem that's very often looked at is can the students interpret codes, and

110
0:08:14.240 --> 0:08:17.040
a common tool for these are trace tables.

111
0:08:17.040 --> 0:08:21.520
Now for those of you that don't know, a trace table is just away for example here where

112
0:08:21.520 --> 0:08:27.520
you can look through your program line by line and note down what happens at each line.

113
0:08:27.520 --> 0:08:32.640
For example this trace table is designed to look at which variables are declared or initialized

114
0:08:32.640 --> 0:08:37.440
or updated at certain moments in time.

115
0:08:37.440 --> 0:08:41.440
Different type of trace tables would be the operators trace table which gives the student

116
0:08:41.440 --> 0:08:47.800
a view of which operators are used at which points in the program.

117
0:08:47.800 --> 0:08:53.520
A third one would be these variable values which is basically a way to see which variables

118
0:08:53.520 --> 0:08:58.880
are updated at which point in time, which is a way that we can know is the student actually

119
0:08:58.880 --> 0:09:02.760
reasoning about this code correctly.

120
0:09:02.760 --> 0:09:06.780
Lastly we have a very basic trace table for advanced users where they can just keep track

121
0:09:06.780 --> 0:09:09.240
of the latest state of the program.

122
0:09:09.240 --> 0:09:15.320
Now to this trace table application we added some export functionality so teachers could

123
0:09:15.320 --> 0:09:20.240
import the JSON from the student so we could run some diagnostics to see if students were

124
0:09:20.240 --> 0:09:23.600
understanding the codes correctly.

125
0:09:23.600 --> 0:09:27.720
Then we add more of a social game, a coding card conundrum.

126
0:09:27.720 --> 0:09:31.520
It's basically a kind of card game where there are three types of cards.

127
0:09:31.520 --> 0:09:35.860
We have goal cards that say in a certain condition that needs to be true.

128
0:09:35.860 --> 0:09:40.920
We have environment cards that initialize five variables and we have code cards that

129
0:09:40.920 --> 0:09:48.760
would execute some codes to update the global state of the program.

130
0:09:48.760 --> 0:09:50.560
It's a multiplayer game.

131
0:09:50.560 --> 0:09:54.840
It can be played from one to four people.

132
0:09:54.840 --> 0:10:01.440
We get this field where each player gets a handful of cards and there will be three heaps

133
0:10:01.440 --> 0:10:03.800
in the center.

134
0:10:03.800 --> 0:10:08.040
During their turn students could select a card from their hand and place it on one of

135
0:10:08.040 --> 0:10:09.040
the environments.

136
0:10:09.040 --> 0:10:14.160
If they were doing so they would have to update this state table to reflect the new latest

137
0:10:14.160 --> 0:10:18.160
state after executing the code on their card.

138
0:10:18.160 --> 0:10:21.960
And if they manage to achieve the goal on their goal card they will get awarded some

139
0:10:21.960 --> 0:10:22.960
points for it.

140
0:10:22.960 --> 0:10:26.960
So it's a social game where they can still practice their trace tables.

141
0:10:26.960 --> 0:10:30.600
Then the final one we're going to discuss is King scroll.

142
0:10:30.600 --> 0:10:35.400
Even here we tried to make it a bit more silly, we added like a fantasy theme where the idea

143
0:10:35.400 --> 0:10:40.020
was that we live in a kingdom but the kingdom is going to be attacked by an evil dragon

144
0:10:40.020 --> 0:10:45.440
and it's up to us to find out which of the heroes will be able to stop the dragon.

145
0:10:45.440 --> 0:10:52.000
Now there are 16 heroes randomly generated based on four essential variables of the equipment

146
0:10:52.000 --> 0:10:59.360
they are wearing and two extra variables to increase the inclusiveness of our application.

147
0:10:59.360 --> 0:11:05.680
Students would be shown a scroll that would be randomly generated based on essential JavaScript

148
0:11:05.680 --> 0:11:10.680
features that would update the state of those four variables and it's up to the students

149
0:11:10.680 --> 0:11:16.240
to predict after the program has run which of the heroes matches the final description.

150
0:11:16.240 --> 0:11:21.360
Students were able to automatically select which elements of JavaScript they know or

151
0:11:21.360 --> 0:11:27.680
didn't know so they could always participate even though they hadn't seen everything.

152
0:11:27.680 --> 0:11:31.680
Then we gave them a state table to of course keep track of the state changes as they went

153
0:11:31.680 --> 0:11:34.600
through the scroll.

154
0:11:34.600 --> 0:11:40.480
So those were some of the examples that we developed but now we'd like to take a step

155
0:11:40.480 --> 0:11:44.660
back and look at what did we learn from it and what kind of guidelines can we give you

156
0:11:44.660 --> 0:11:48.520
if you were to try to implement something on your own.

157
0:11:48.520 --> 0:11:53.840
So the first piece of advice we'd like to give you is embrace the themes.

158
0:11:53.840 --> 0:11:59.680
I know it might look silly at first but just having a silly team takes a lot of the stress

159
0:11:59.680 --> 0:12:04.240
away from students and they no longer feel like they can fail doing an exercise because

160
0:12:04.240 --> 0:12:09.680
they're just playing a game in this kind of team world.

161
0:12:09.680 --> 0:12:15.000
But when we want to design those themes we also shouldn't forget the principle of skill

162
0:12:15.000 --> 0:12:20.840
transfer which basically states that the context in which you learn something becomes an important

163
0:12:20.840 --> 0:12:25.400
part of how you will be able to apply those skills in different contexts.

164
0:12:25.400 --> 0:12:31.840
So the closer your environment is to a realistic use case the more useful their skills will

165
0:12:31.840 --> 0:12:36.480
directly be when they need to apply them to a realistic environment.

166
0:12:36.480 --> 0:12:44.760
So it's still good that in your silly team world there is a real life kind of application.

167
0:12:44.760 --> 0:12:47.320
Also definitely invite a social aspect.

168
0:12:47.320 --> 0:12:51.360
One of the main reasons people stop learning how to code is because they don't really feel

169
0:12:51.360 --> 0:12:55.600
like they belong in the world or they feel discouraged and just having this kind of social

170
0:12:55.600 --> 0:13:00.560
aspect it can be slightly competitive but also collaborative really takes away this

171
0:13:00.560 --> 0:13:07.280
barrier and pushes people to continue learning in a welcoming environment.

172
0:13:07.280 --> 0:13:11.360
Also you should strive to keep the setup minimal as possible and I know this sounds really

173
0:13:11.360 --> 0:13:15.400
straightforward but when you're designing an application that needs to be installed

174
0:13:15.400 --> 0:13:20.920
on a desktop and even two out of twenty students are facing issues that takes away at least

175
0:13:20.920 --> 0:13:26.160
five minutes of the teacher's time that they cannot be helping students.

176
0:13:26.160 --> 0:13:33.960
So if at all possible try to make it work just within the browser.

177
0:13:33.960 --> 0:13:39.440
Now we should also make sure that our micro materials only focus on one specific learning

178
0:13:39.440 --> 0:13:40.440
goal.

179
0:13:40.440 --> 0:13:44.720
A lot of content is created like for example the Heidi programming language which there

180
0:13:44.720 --> 0:13:50.440
is a great talk tomorrow and these are all like great tools but they kind of expect you

181
0:13:50.440 --> 0:13:53.040
to focus on them for your whole semester.

182
0:13:53.040 --> 0:13:57.040
A lot of teachers already have a curriculum they need to follow so they do not have the

183
0:13:57.040 --> 0:13:59.940
flexibility to really go with something else.

184
0:13:59.940 --> 0:14:04.640
Your tools should really be something they can introduce and use in one or two of their

185
0:14:04.640 --> 0:14:08.840
lessons without needing to change their overall curriculum.

186
0:14:08.840 --> 0:14:13.720
Otherwise it will just not be adapted.

187
0:14:13.720 --> 0:14:17.560
We also have the expertise reversal principle.

188
0:14:17.560 --> 0:14:22.640
Now the idea here is if you're new to something you really like to be guided and get a lot

189
0:14:22.640 --> 0:14:29.480
of hints on what can I do, what shouldn't I do but as you gain more experience if you

190
0:14:29.480 --> 0:14:34.200
keep having to go to the same guidance it actually becomes a hindrance.

191
0:14:34.200 --> 0:14:39.520
So ideally your application should be designed in such a way that they contain multiple layers

192
0:14:39.520 --> 0:14:44.680
where first at the outer layer there is a lot of help available for your students but

193
0:14:44.680 --> 0:14:50.280
as they move on and become more experienced and become more experts they can take away

194
0:14:50.280 --> 0:14:55.080
those layers and start operating the tool without getting all that extra help that's

195
0:14:55.080 --> 0:14:57.240
getting in the way of learning.

196
0:14:57.240 --> 0:15:03.360
Then also of course try to do something with automatic content generation.

197
0:15:03.360 --> 0:15:08.820
Whenever you try to develop a tool on your own you'll quickly discover that having to

198
0:15:08.820 --> 0:15:13.960
update the content yourself or even asking teachers to create the content themselves

199
0:15:13.960 --> 0:15:16.960
it takes a very long time and they will not do it.

200
0:15:16.960 --> 0:15:22.900
Our idea is to make it easier for teachers to use those tools not to give them more work.

201
0:15:22.900 --> 0:15:29.360
So the final principle is if at all possible try to make things mobile compatible especially

202
0:15:29.360 --> 0:15:31.640
with the adults I've been teaching.

203
0:15:31.640 --> 0:15:33.280
They are very busy work lives.

204
0:15:33.280 --> 0:15:37.140
They're trying to learn programming while still taking care of the families.

205
0:15:37.140 --> 0:15:41.600
If they have a simple tool they can use for example while on public transport that's a

206
0:15:41.600 --> 0:15:44.200
huge quality of life improvement for them.

207
0:15:44.200 --> 0:15:50.660
So let me finish this presentation by telling you all like I know you're all a community

208
0:15:50.660 --> 0:15:55.560
of builders if you think like hey these kind of tools you discussed I can build those feel

209
0:15:55.560 --> 0:16:01.560
free to reach out to any learning environment close to you and try to ask how you can contribute.

210
0:16:01.560 --> 0:16:02.560
Thank you all for listening.

211
0:16:02.560 --> 0:16:10.400
Thank you.


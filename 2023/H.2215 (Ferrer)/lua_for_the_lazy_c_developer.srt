1
0:00:00.000 --> 0:00:02.000
Thank you.

2
0:00:30.000 --> 0:00:32.000
I hope you enjoy it.

3
0:00:34.000 --> 0:00:35.000
Thank you.

4
0:00:35.000 --> 0:00:45.000
So, hi, I'm Frank van Beevre, and I'm here to talk to you today about Lua programming language and specifically for lazy C developers.

5
0:00:45.000 --> 0:00:47.000
So, first of all, who am I?

6
0:00:47.000 --> 0:00:52.000
Frank, I work for a company called Mind, free and open source.

7
0:00:52.000 --> 0:00:58.000
Well, there's consultancy specialized in free and open source software for embedded systems.

8
0:00:58.000 --> 0:01:07.000
If you're the kind of person who enjoys the referencing pointers and you're looking for a job, check out our website or come to talk to me in the hallway after the presentation.

9
0:01:07.000 --> 0:01:12.000
So, with that out of the way, why am I here?

10
0:01:12.000 --> 0:01:17.000
I am here to talk to you about being a virtuous software developer.

11
0:01:17.000 --> 0:01:20.000
So, the man on the photo is Larry Wall.

12
0:01:20.000 --> 0:01:25.000
He's mostly known for being the creator of the Perl programming language.

13
0:01:25.000 --> 0:01:31.000
But he also coined these three virtues of a great software developer.

14
0:01:31.000 --> 0:01:36.000
These virtues are laziness, impatience and hubris.

15
0:01:36.000 --> 0:01:41.000
I want to focus on the laziness virtue specifically today.

16
0:01:41.000 --> 0:01:48.000
And so he defines laziness as the quality that makes you go to great efforts to reduce overall energy expenditure.

17
0:01:48.000 --> 0:01:59.000
It makes you write labor saving programs that other people will find useful and document what you wrote so that you don't have to answer so many questions about it.

18
0:01:59.000 --> 0:02:10.000
Now, in my day job, I'm mostly a C developer and, well, if you have any experience with that, you know that there can be quite some energy expenditure involved in doing that.

19
0:02:10.000 --> 0:02:18.000
So, introducing the Lua programming language, quick introduction.

20
0:02:18.000 --> 0:02:25.000
It's a programming language. It's multi-paradigm. You can program in both an object-oriented style. It uses prototype inheritance.

21
0:02:25.000 --> 0:02:35.000
So, for people used to Java or C++, it might seem a bit strange. It has the same inheritance model as JavaScript.

22
0:02:35.000 --> 0:02:43.000
So, it actually has quite a bit of resemblance to JavaScript in some ways. They were both created around the same time.

23
0:02:43.000 --> 0:02:53.000
Big change from C is that Lua is dynamically typed compared to C's static weak typing.

24
0:02:53.000 --> 0:03:00.000
So, you can just declare a variable. You don't have to specify the type. You don't need to care about it.

25
0:03:00.000 --> 0:03:09.000
Lua is small. That can be interpreted in many ways. Lua installation that I have on my machine is about 250 kilobytes.

26
0:03:09.000 --> 0:03:15.000
So, it's really perfect for embedded systems where often you're constrained.

27
0:03:15.000 --> 0:03:26.000
But it's also small in the sense that it has, like, language itself is like a small set of meta features that you can use to then build whatever it is that you need.

28
0:03:26.000 --> 0:03:36.000
And one example of that, for example, is that there's only one data structure, a table, which is like a map or a Python dictionary.

29
0:03:36.000 --> 0:03:47.000
And by basically constraining the behavior of this table, you can get all kinds of data structures.

30
0:03:47.000 --> 0:03:52.000
So, yeah, basically it being a small language, C developers should feel right at home.

31
0:03:52.000 --> 0:04:02.000
Another big difference is Lua is garbage collected compared to having to do manual management in C.

32
0:04:02.000 --> 0:04:06.000
Lua will basically take care of that for you.

33
0:04:06.000 --> 0:04:13.000
And most importantly for a C developer, Lua is actually also a C library.

34
0:04:13.000 --> 0:04:15.000
What does that mean?

35
0:04:15.000 --> 0:04:30.000
Well, on the left you have Hello World in Lua syntax. And this program can just as well be expressed using Lua C API, which you can see, well, yeah, my left, left, right.

36
0:04:30.000 --> 0:04:38.000
So, for you, also on the left side, the Lua C API, these two are equivalent.

37
0:04:38.000 --> 0:04:54.000
So, how does this work? Well, Lua has a stated design goal that it should be both an extension language, meaning that you can call Lua from C, so extend your C application by using Lua,

38
0:04:54.000 --> 0:05:02.000
as well as an extensible language, meaning that you can call into your C code from your Lua application.

39
0:05:02.000 --> 0:05:08.000
And the way it does this is by using a stack.

40
0:05:08.000 --> 0:05:16.000
So, the stack nearly, so the C API, everything it does is manipulate this specific stack.

41
0:05:16.000 --> 0:05:26.000
And this fixes two important impedance mismatches. So, like I mentioned before, first thing that it fixes for you is the static typing versus the dynamic typing.

42
0:05:26.000 --> 0:05:38.000
If we had to map the internal state of these Lua, well, the internal Lua types to C types, well, a knee-jerk reaction would be union types, structs,

43
0:05:38.000 --> 0:05:53.000
but that's a rule that quickly leads to insanity. By using this stack as like a clear boundary line between the two, it's easy to translate your Lua variables into, well, your Lua variables into C variables and vice versa.

44
0:05:53.000 --> 0:06:03.000
Second thing that it fixes for you, the second impedance mismatch, is this manual memory management that you need to do in C, while Lua is garbage collected.

45
0:06:03.000 --> 0:06:18.000
By pushing and popping from the stack, it is clear when the handover happens of memory from one side to the, well, from the C side to Lua and vice versa.

46
0:06:18.000 --> 0:06:35.000
So, where might it make sense to use Lua? So, well, as you can imagine, using dynamically typed scripting languages of this garbage collection comes with a performance hit.

47
0:06:35.000 --> 0:06:46.000
So, you need to keep that in mind. But so, for some cases where it might be useful is taking care of tedious stuff that runs sporadically.

48
0:06:46.000 --> 0:07:01.000
So, especially, yeah. There's no better way to get me to run to the coffee machine in a grumpy mood than having to do a lot of string manipulations in C, like an edible.

49
0:07:01.000 --> 0:07:12.000
And so, stuff like that, especially config files, for example, it makes, it can make sense to say, okay, you know what, we're going to call out to Lua.

50
0:07:12.000 --> 0:07:20.000
We get our config, we put it in a C struct, and then from there we can go on with our application.

51
0:07:20.000 --> 0:07:35.000
Prototyping is another place where I found that Lua really shines. So, sometimes you need to, you have some software that you need to build and you only get some vague requirements communicated to you.

52
0:07:35.000 --> 0:07:47.000
It actually helps to have the agility of this dynamic type garbage collected language, but still have the flexibility of calling maybe into C dependencies that you will need later on.

53
0:07:47.000 --> 0:07:52.000
And then just, as you go, switch out C from Lua and Lua from C.

54
0:07:52.000 --> 0:08:00.000
And the third thing, and really this is, in my opinion, this is where Lua shines the most, is plugins and extensibility.

55
0:08:00.000 --> 0:08:14.000
If you want to make your C application extensible, so if you just do it with C, you would say, okay, you need to build a shared object using this specific API, and then we'll do a deal open.

56
0:08:14.000 --> 0:08:22.000
Pretty annoying sometimes if you have to explain to some people what a compiler is, then it already goes beep in their head.

57
0:08:22.000 --> 0:08:36.000
So, Lua, you just define a simple API and makes your application almost immediately extensible so that a third party can inject their logic into your application.

58
0:08:36.000 --> 0:08:45.000
It means that you don't have to implement all the features that people need, they can do it for themselves very easily.

59
0:08:45.000 --> 0:08:56.000
So, how hard is it to do this? Well, so, bit of a risky move to have only code on the slide, but let's do this.

60
0:08:56.000 --> 0:09:05.000
Imagine you have a Lua file that contains a trivial function that returns a sum of two integers, a and b.

61
0:09:05.000 --> 0:09:11.000
You want to call this from your C code. You initialize your Lua state. You load this file.

62
0:09:11.000 --> 0:09:21.000
This file gets executed. Well, this file gets put on the stack. You need to execute this through a Lua call.

63
0:09:21.000 --> 0:09:28.000
This will register everything that is in the file into the global scope.

64
0:09:28.000 --> 0:09:36.000
And at this point, this add function becomes available to your Lua. You can get it, you can retrieve it from the global scope.

65
0:09:36.000 --> 0:09:47.000
It gets put back on the stack. You push both arguments onto the stack. You do another call, this time specifying that there are two arguments, one return value,

66
0:09:47.000 --> 0:09:55.000
and the final argument is basically that, well, it's for error handling that's beyond the scope of this presentation.

67
0:09:55.000 --> 0:10:03.000
Your Lua function will be executed and then it puts the return value onto the stack and then using this Lua2 integer call,

68
0:10:03.000 --> 0:10:08.000
you can retrieve it from the stack. You're back in C land. Your Lua has finished running.

69
0:10:08.000 --> 0:10:20.000
And so eight function calls and you unlock a whole new world of possibilities in your C application.

70
0:10:20.000 --> 0:10:27.000
Of course, this is, well, secure return values that's submitted for the slide, of course.

71
0:10:27.000 --> 0:10:43.000
Make sure that check for errors is important. So the other way around, you can have a, so we just covered the calling Lua from C.

72
0:10:43.000 --> 0:10:48.000
Another, the other option is, of course, that you call your C code from Lua.

73
0:10:48.000 --> 0:10:55.000
The way to do that is by creating these Lua C functions. They always have the same signature.

74
0:10:55.000 --> 0:11:01.000
They take a single argument, this Lua context, Lua state, and they return an integer,

75
0:11:01.000 --> 0:11:07.000
which is the number of variables that they put on the stack as return values.

76
0:11:07.000 --> 0:11:12.000
Functions will always look the same. Pop the arguments from the stack, do some useful work,

77
0:11:12.000 --> 0:11:19.000
push the results back onto, push the results back onto the stack.

78
0:11:19.000 --> 0:11:27.000
You create an array of this Lua registry functions where you have a name plus a pointer to the function,

79
0:11:27.000 --> 0:11:32.000
sentinel value to mark the end of the array, and then you have a Lua open underscore,

80
0:11:32.000 --> 0:11:39.000
and then the name of your module, which returns a new lib.

81
0:11:39.000 --> 0:11:46.000
So this will put your module that you just created onto the stack and return one for a single return value.

82
0:11:46.000 --> 0:11:54.000
And by doing this, you can then load the module in your Lua code

83
0:11:54.000 --> 0:12:04.000
and then call into the C code without any, well, call into the C code and get the result back.

84
0:12:04.000 --> 0:12:12.000
Of course, having to do, well, having to build a shared object might be a bit annoying.

85
0:12:12.000 --> 0:12:18.000
You have to convince your build system to create a shared object for you.

86
0:12:18.000 --> 0:12:24.000
And there's no way to share them between a C application and your Lua code.

87
0:12:24.000 --> 0:12:32.000
So there's a fix for that, actually. You can publish internal functions in your Lua application.

88
0:12:32.000 --> 0:12:44.000
So functions that exist within your C application and make them available to a Lua context that is created in that application.

89
0:12:44.000 --> 0:12:49.000
By combining basically the previous two approaches, so same thing here.

90
0:12:49.000 --> 0:12:57.000
Subtract function defined as a Lua C function returns the result of a minus b.

91
0:12:57.000 --> 0:13:05.000
You register it and then in your code you can just say, you can just push this Lua new lib.

92
0:13:05.000 --> 0:13:14.000
So the module that will be created, it's actually a table with function pointers because everything is a table in Lua.

93
0:13:14.000 --> 0:13:23.000
And then instead of it being a shared object and being registered, you can just say, okay, the thing that I just put on top of the stack,

94
0:13:23.000 --> 0:13:29.000
make it global and have it be and make it global under the following name.

95
0:13:29.000 --> 0:13:31.000
So in this case, C arithmetic.

96
0:13:31.000 --> 0:13:38.000
And in that case, any other Lua script that you use doesn't even have to load the module.

97
0:13:38.000 --> 0:13:41.000
It will automatically be loaded. It's already in the context.

98
0:13:41.000 --> 0:13:50.000
And so wherever you're doing this, you can just call this C arithmetic module and then the functions that exist within there.

99
0:13:50.000 --> 0:14:09.000
So in short, Lua can, well, you could say Lua can help you get more done quicker, but keeping this being a virtuous program reminds,

100
0:14:09.000 --> 0:14:16.000
I think that Lua can definitely help you embody this virtue of laziness.

101
0:14:16.000 --> 0:14:20.000
And so there's some time left even.

102
0:14:20.000 --> 0:14:34.000
I, all the code that was in the presentation, I basically have some executable examples for that up on GitLab if you want to check it out.

103
0:14:34.000 --> 0:14:37.000
And that's it.

104
0:14:37.000 --> 0:14:40.000
So thank you for your attention.

105
0:14:40.000 --> 0:14:48.000
If you have any questions or you want to tell me I'm wrong or you want to talk to me about something, I'll be in the hallway after your presentation.

106
0:14:48.000 --> 0:14:57.000
So thank you.

107
0:14:57.000 --> 0:14:58.000
Thank you.

108
0:14:58.000 --> 0:15:01.000
We have 20 seconds if we have one question, maybe.

109
0:15:01.000 --> 0:15:30.000
Very quick one.


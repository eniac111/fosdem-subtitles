WEBVTT

00:00.000 --> 00:01.000
We're all good.

00:01.000 --> 00:02.000
Sorry.

00:02.000 --> 00:03.000
Yeah, I remember.

00:03.000 --> 00:04.000
Hit the button when you're ready.

00:04.000 --> 00:05.000
Yeah.

00:05.000 --> 00:06.000
And help yourself to water as well.

00:06.000 --> 00:07.000
Yeah, sure.

00:07.000 --> 00:08.000
Check, check, check.

00:08.000 --> 00:09.000
All right, all right, all right.

00:09.000 --> 00:10.000
Hello, everyone.

00:10.000 --> 00:15.000
First time actually I'm talking about this project on a conference.

00:15.000 --> 00:18.000
So, FOSDAM here is it first.

00:18.000 --> 00:21.000
The images are generated with Mid-Journey.

00:21.000 --> 00:32.000
So I'm going to talk about this self-hosting for non-crowders.

00:32.000 --> 00:38.000
Somewhat of a click-by title, but we'll get there.

00:38.000 --> 00:40.000
I have a question for you all.

00:40.000 --> 00:41.000
Did anyone try?

00:41.000 --> 00:45.000
Raise your hand if you tried hosting Mastodon on your own.

00:45.000 --> 00:47.000
A Mastodon server.

00:47.000 --> 00:49.000
All right, all right.

00:49.000 --> 00:50.000
We have a couple of hands.

00:50.000 --> 00:53.000
Now, keep your hand up.

00:53.000 --> 01:03.000
Only lower your hand if you think the process was easy or simple or enjoyable.

01:03.000 --> 01:04.000
Okay.

01:04.000 --> 01:07.000
All right.

01:07.000 --> 01:15.000
So, this is the Mastodon docs on how to host it.

01:15.000 --> 01:16.000
This is just one page.

01:16.000 --> 01:19.000
This is actually not even the hosting part.

01:19.000 --> 01:22.000
This is just preparing the machine.

01:22.000 --> 01:27.000
So, out of this room here, I guess three or four people tried that,

01:27.000 --> 01:32.000
and I can understand them.

01:32.000 --> 01:34.000
It's not easy.

01:34.000 --> 01:37.000
And this doesn't just apply to Mastodon.

01:37.000 --> 01:41.000
It applies to many apps, actually, that you would want to self-host,

01:41.000 --> 01:47.000
many open source apps, because apps are getting complex.

01:47.000 --> 01:49.000
Does this not work?

01:49.000 --> 01:51.000
Yeah, you're working for the sex.

01:51.000 --> 01:52.000
I'm sorry.

01:52.000 --> 01:53.000
The other one is much better.

01:53.000 --> 01:54.000
Oh, really?

01:54.000 --> 01:55.000
Should that try it?

01:55.000 --> 01:58.000
Will there be...

01:58.000 --> 01:59.000
Thank you.

01:59.000 --> 02:00.000
Does this work better?

02:00.000 --> 02:02.000
Yes, it works better.

02:02.000 --> 02:04.000
Okay, all right.

02:04.000 --> 02:07.000
So, yeah, so you saw the huge instruction.

02:07.000 --> 02:10.000
You know, what we want is everyone to be able to host Mastodon,

02:10.000 --> 02:12.000
because that's kind of the point of Mastodon, right?

02:12.000 --> 02:15.000
It's decentralized.

02:15.000 --> 02:20.000
There's Docker out there that many, many projects use to simplify

02:20.000 --> 02:24.000
this process of hosting something.

02:24.000 --> 02:29.000
Maybe we could host Mastodon with Docker.

02:29.000 --> 02:32.000
So this would be the Docker setup.

02:32.000 --> 02:36.000
I guess it doesn't look that much easier.

02:36.000 --> 02:39.000
And I mean, imagine...

02:39.000 --> 02:42.000
I assume that most of us here are technical people,

02:42.000 --> 02:45.000
but imagine if you don't know how to use a command line.

02:45.000 --> 02:47.000
That would just be impossible.

02:47.000 --> 02:48.000
You can forget about it.

02:48.000 --> 02:53.000
You would use someone else's Mastodon server.

02:53.000 --> 02:56.000
So what if I tell you there is a way, actually,

02:56.000 --> 02:59.000
for people who don't even know how to use a command line

02:59.000 --> 03:03.000
to spin up a Mastodon instance?

03:03.000 --> 03:05.000
And this is how it would look like.

03:05.000 --> 03:07.000
This GIF is a bit sped up,

03:07.000 --> 03:11.000
but it actually is close to the normal speed.

03:11.000 --> 03:15.000
What's happening here is I'm entering a couple config values.

03:15.000 --> 03:19.000
The Mastodon is deployed on my machine anywhere I want,

03:19.000 --> 03:21.000
where I have this garden set.

03:21.000 --> 03:23.000
Mastodon is deployed.

03:23.000 --> 03:25.000
Streaming service is deployed.

03:25.000 --> 03:26.000
Configured.

03:26.000 --> 03:27.000
Sitekick service is deployed.

03:27.000 --> 03:28.000
Configured.

03:28.000 --> 03:30.000
Postgres database is deployed.

03:30.000 --> 03:31.000
Configured.

03:31.000 --> 03:33.000
Redis service is deployed.

03:33.000 --> 03:35.000
Configured.

03:35.000 --> 03:39.000
As you see, Mastodon has a lot of services.

03:39.000 --> 03:41.000
And we're done.

03:41.000 --> 03:44.000
We have a Mastodon instance now.

03:44.000 --> 03:45.000
This would be the...

03:45.000 --> 03:47.000
It's actually open on the Internet.

03:47.000 --> 03:51.000
I host a couple of those myself with this method.

03:51.000 --> 03:57.000
And this would be the URL that I end up having.

03:57.000 --> 04:00.000
And of course, you can have it on your own domain.

04:00.000 --> 04:04.000
If you own a domain, you would have it in Mastodon,

04:04.000 --> 04:05.000
let's say, on your domain.

04:05.000 --> 04:10.000
So the process, without regard to me speeding out the GIF,

04:10.000 --> 04:12.000
took one minute and 44 seconds.

04:12.000 --> 04:14.000
I counted.

04:14.000 --> 04:17.000
And you can do this locally on your own machine.

04:17.000 --> 04:21.000
If you want, you can do this in the cloud.

04:21.000 --> 04:26.000
If you do this in the cloud, that would be even a bit easier,

04:26.000 --> 04:27.000
but we'll talk about it.

04:27.000 --> 04:29.000
So this is called Gardens.

04:29.000 --> 04:30.000
It's an app.

04:30.000 --> 04:33.000
It's a platform that I'm making.

04:33.000 --> 04:36.000
It's open source under AGPL.3.

04:36.000 --> 04:40.000
And it's not the only one.

04:40.000 --> 04:43.000
Not the only self-hosting platform out there

04:43.000 --> 04:46.000
that really simplifies deployments.

04:46.000 --> 04:49.000
Actually, this project is based on another one called CapRower.

04:49.000 --> 04:52.000
I don't know if anyone in the room knows it.

04:52.000 --> 04:53.000
Okay.

04:53.000 --> 04:55.000
It has 100 million plus Docker pools.

04:55.000 --> 04:57.000
So a very established project.

04:57.000 --> 05:00.000
It's out there for many years already.

05:00.000 --> 05:04.000
It was called Captain Duck Duck previously.

05:04.000 --> 05:07.000
But CapRower was meant for hobbyists

05:07.000 --> 05:09.000
and kind of for testing.

05:09.000 --> 05:13.000
Our aim with Gardens is to bring it more to the organizations.

05:13.000 --> 05:16.000
So get it to a level where it's actually the stuff that you deploy,

05:16.000 --> 05:18.000
like Mastodon or anything,

05:18.000 --> 05:23.000
is you can use it instead of a SaaS service, for example,

05:23.000 --> 05:25.000
in an organizational setting.

05:25.000 --> 05:29.000
So the technical part of this is roughly this.

05:29.000 --> 05:32.000
It's a web app.

05:32.000 --> 05:35.000
The web app, actually, you deploy on your own server.

05:35.000 --> 05:38.000
So even the web app is on your own server.

05:38.000 --> 05:41.000
We have a website for non-technical people

05:41.000 --> 05:43.000
where they can connect their cloud account

05:43.000 --> 05:45.000
to deploy to their server.

05:45.000 --> 05:50.000
But after they do that, everything else happens on their machine.

05:50.000 --> 05:53.000
This web app talks to Docker API.

05:53.000 --> 05:57.000
It uses Docker Compose, which actually you cannot use via API.

05:57.000 --> 06:03.000
So there is some processing there to deploy containers for these apps.

06:03.000 --> 06:05.000
So, for example, like I was showing,

06:05.000 --> 06:07.000
these various services that Mastodon spins up,

06:07.000 --> 06:10.000
they're all in separate containers.

06:10.000 --> 06:13.000
And, of course, you can not just have Mastodon deployed like this.

06:13.000 --> 06:15.000
You can deploy Gitsy Meet.

06:15.000 --> 06:16.000
You can deploy WordPress.

06:16.000 --> 06:19.000
I'm going to show a couple more examples.

06:19.000 --> 06:24.000
And then we use Nginx to show these apps on the web

06:24.000 --> 06:31.000
and allow the actual end user to interact with them.

06:31.000 --> 06:34.000
Now, what I mentioned, for non-technical users,

06:34.000 --> 06:37.000
right now we support DigitalOcean.

06:37.000 --> 06:40.000
If, let's say, you don't know how to use a command line,

06:40.000 --> 06:46.000
but you want to have gardens on your, let's say, VPS or your machine,

06:46.000 --> 06:48.000
you just, there's an old flow.

06:48.000 --> 06:49.000
You connect to DigitalOcean,

06:49.000 --> 06:52.000
and then there's a no-code process where you spin up gardens,

06:52.000 --> 06:55.000
and then from gardens you can use it.

06:55.000 --> 07:01.000
But there's also a local process where you just run one line in the CLI.

07:01.000 --> 07:04.000
You pull basically the gardens container,

07:04.000 --> 07:07.000
and then gardens does everything from there.

07:07.000 --> 07:09.000
It doesn't actually, yeah.

07:09.000 --> 07:15.000
I mean, it talks back to us to get the list of apps available,

07:15.000 --> 07:19.000
but our end goal is for it not even to talk back,

07:19.000 --> 07:23.000
to kind of really be isolated in your environment.

07:23.000 --> 07:29.000
So these are just some examples of the apps we have in gardens.

07:29.000 --> 07:33.000
There's really a lot of good open source products that are coming out recently.

07:33.000 --> 07:38.000
Of course, there are established players like WordPress.

07:38.000 --> 07:43.000
There is stuff to replace social media, like PeerTube.

07:43.000 --> 07:46.000
Here are just some examples of what those replace.

07:46.000 --> 07:49.000
Of course, with Mastodon you can replace something like Twitter.

07:49.000 --> 07:52.000
Penpot here at the bottom left, you can replace Figma.

07:52.000 --> 07:55.000
They actually had to talk previously at the conference.

07:55.000 --> 08:00.000
Bizro or No-code DB can replace Airtable.

08:00.000 --> 08:02.000
GtMute can replace Zoom.

08:02.000 --> 08:03.000
Outline and replace Confluence.

08:03.000 --> 08:06.000
And there's actually other alternatives there.

08:06.000 --> 08:10.000
So you can choose whatever open source product you want to host.

08:10.000 --> 08:14.000
We have about 130 apps, a bit more, available right now

08:14.000 --> 08:16.000
that you can self-host with one click.

08:16.000 --> 08:19.000
But there is also an option to deploy your own apps

08:19.000 --> 08:24.000
or even connect to GitLab, let's say, have a bit of CI CD going,

08:24.000 --> 08:27.000
if you're more technical.

08:27.000 --> 08:30.000
As I mentioned, the process of spinning up those apps

08:30.000 --> 08:34.000
is based on Docker Compose mostly.

08:34.000 --> 08:38.000
There are options to even spin up from Tar Archive and so on,

08:38.000 --> 08:41.000
but this is like the main method.

08:41.000 --> 08:45.000
Yeah, we do some processing of Docker Compose files

08:45.000 --> 08:49.000
that are taken from official repositories of these app developers

08:49.000 --> 08:52.000
and then we just spin this up for you.

08:52.000 --> 08:56.000
So, Gardens is just one example.

08:56.000 --> 08:59.000
I'm talking about it because I'm making it.

08:59.000 --> 09:03.000
Capraour is what we forked because it's very reliable,

09:03.000 --> 09:05.000
very nice service.

09:05.000 --> 09:08.000
Coolify is a newer service, similar to that.

09:08.000 --> 09:11.000
The main difference, I'd say, is for the proxy,

09:11.000 --> 09:14.000
we use Nginx, they use traffic.

09:14.000 --> 09:17.000
And Unihost is a bit different,

09:17.000 --> 09:20.000
but it covers the same use case to self-host stuff.

09:20.000 --> 09:22.000
It's a bit different because it's a Debian distribution,

09:22.000 --> 09:26.000
so you have that on kind of replace your operating system,

09:26.000 --> 09:28.000
whereas Gardens, Capraour, and Caulify,

09:28.000 --> 09:34.000
they are all apps that you can put right now on Ubuntu, Debian,

09:34.000 --> 09:36.000
I think on CentOS, it works as well.

09:36.000 --> 09:39.000
I actually got it working on macOS,

09:39.000 --> 09:42.000
but that's more experimental.

09:42.000 --> 09:44.000
So why do we even want to self-host?

09:44.000 --> 09:47.000
Let's go back to that.

09:47.000 --> 09:52.000
I'd say actually, if we want software freedom,

09:52.000 --> 09:58.000
which is, I guess, the point of open source in a lot of ways,

09:58.000 --> 10:01.000
you have to be able to self-host.

10:01.000 --> 10:03.000
But as we can see from here, you know,

10:03.000 --> 10:05.000
just several people hosted Mastodon, let's say.

10:05.000 --> 10:09.000
I imagine many more here use Mastodon.

10:09.000 --> 10:12.000
It's kind of like if you're not using this freedom

10:12.000 --> 10:17.000
or if you're not able to because you can't handle the technical side

10:17.000 --> 10:22.000
because it's too difficult, that kind of defeats the purpose, right?

10:22.000 --> 10:26.000
So if you cannot host, you don't really have freedom

10:26.000 --> 10:31.000
if you have it technically or formally, let's say.

10:31.000 --> 10:35.000
So I'd argue that this not having freedom is bad,

10:35.000 --> 10:40.000
but also bad not just in a kind of ideological way,

10:40.000 --> 10:42.000
but also in a competitive way.

10:42.000 --> 10:48.000
If open source wants to be able to compete with all these SaaS apps out there,

10:48.000 --> 10:51.000
because this is like something that open source has

10:51.000 --> 10:54.000
that proprietary apps just don't have,

10:54.000 --> 10:56.000
and it's an unfair advantage.

10:56.000 --> 11:02.000
I think, I believe that right now, organizations,

11:02.000 --> 11:07.000
how they use it is they use proprietary SaaS by default.

11:07.000 --> 11:11.000
They self-host when they are really worried about privacy

11:11.000 --> 11:15.000
or there's some kind of sovereignty concerns or something.

11:15.000 --> 11:18.000
They don't care about open source.

11:18.000 --> 11:23.000
And how it should be is you self-host instead of SaaS by default,

11:23.000 --> 11:28.000
but then you choose a SaaS where it's too complex

11:28.000 --> 11:32.000
or you want the scale or there's some specific requirements

11:32.000 --> 11:37.000
or if you want to support developers because that's one way they earn

11:37.000 --> 11:41.000
and they can financially support the development.

11:41.000 --> 11:44.000
So to bring some numbers in there,

11:44.000 --> 11:48.000
I've been hanging out on Reddit self-hosted, sub-Reddit,

11:48.000 --> 11:50.000
and I found the statistics.

11:50.000 --> 11:53.000
So for the past like seven years,

11:53.000 --> 11:56.000
the number of people there skyrocketed

11:56.000 --> 12:00.000
to more than 200,000 people on the sub-Reddit.

12:00.000 --> 12:04.000
So it looks like people are interested actually in hosting their stuff.

12:04.000 --> 12:10.000
But I also run a poll with 1,250 participants about that number

12:10.000 --> 12:13.000
where I found out that people on that sub-Reddit,

12:13.000 --> 12:18.000
they don't really self-host, you know, anything business critical, so to say,

12:18.000 --> 12:21.000
or anything for their organization, anything for productive use,

12:21.000 --> 12:23.000
or at least not a lot of them.

12:23.000 --> 12:28.000
So about only 100 people self-host, let's say, Nextcloud or something,

12:28.000 --> 12:31.000
but most of them self-host for media,

12:31.000 --> 12:35.000
so let's say for movies or something, or for personal use.

12:35.000 --> 12:38.000
So maybe something for their smart home.

12:38.000 --> 12:41.000
So that I think is a pity,

12:41.000 --> 12:44.000
but I cannot understand that, why people are not self-hosting.

12:44.000 --> 12:48.000
Because it's complex, like we discussed, for organizations.

12:48.000 --> 12:51.000
Because it's complex, but also because of these issues.

12:51.000 --> 12:54.000
You don't just want to spin up an app.

12:54.000 --> 12:57.000
There's also a part that comes after you deploy,

12:57.000 --> 12:59.000
which is about maintenance,

12:59.000 --> 13:02.000
which is about making sure that your instance is secure,

13:02.000 --> 13:07.000
and if you get a lot of users, you also want to scale.

13:07.000 --> 13:10.000
You want to have an option to scale.

13:10.000 --> 13:14.000
So how we deal with that is for maintenance,

13:14.000 --> 13:17.000
for each app, for each service that I was showing you,

13:17.000 --> 13:20.000
let's say for Macedon, you can view logs in the graphical interface,

13:20.000 --> 13:25.000
so you don't have to accession to your instance to view logs.

13:25.000 --> 13:29.000
We keep a version history.

13:29.000 --> 13:34.000
We track analytics for instance with net data,

13:34.000 --> 13:38.000
so you can see, let's say, how much CPU is utilized,

13:38.000 --> 13:42.000
how much RAM is utilized, so you can kind of check the health,

13:42.000 --> 13:45.000
and net data actually provides nice notifications,

13:45.000 --> 13:48.000
so you can even get notifications where you want,

13:48.000 --> 13:50.000
or have a webhook to get updated when, let's say,

13:50.000 --> 13:55.000
you're running out of CPU or RAM.

13:55.000 --> 14:01.000
For security, we covered that with automatic SSL for all apps.

14:01.000 --> 14:05.000
You can force it. You can force HTTPS.

14:05.000 --> 14:11.000
We have basic auth, so that we do with Let's Encrypt.

14:11.000 --> 14:15.000
For scalability, actually, that's the part I love the most.

14:15.000 --> 14:18.000
If you have a lot of users, you can scale,

14:18.000 --> 14:21.000
either by adding more instances of the same app on the same machine,

14:21.000 --> 14:26.000
and Nardance will redistribute automatically the load,

14:26.000 --> 14:30.000
or you can scale by adding more machines into a Docker Swarm.

14:30.000 --> 14:34.000
So we support Docker Swarm. This is the same for Caprover.

14:34.000 --> 14:38.000
So I'd say people want to self-host, but it's hard,

14:38.000 --> 14:40.000
and we need to help them.

14:40.000 --> 14:44.000
So otherwise, they just use SaaS, like currently,

14:44.000 --> 14:46.000
and this is one way to do it.

14:46.000 --> 14:52.000
You can help this effort by, if you're a developer,

14:52.000 --> 14:56.000
maintaining Docker Compose files, or documentation,

14:56.000 --> 15:01.000
just a way to self-host for your application.

15:01.000 --> 15:05.000
If you're a sysadmin or a DevOps, you can think about providing

15:05.000 --> 15:07.000
a platform like this to your organization,

15:07.000 --> 15:10.000
so that people in your organization can spin something up

15:10.000 --> 15:13.000
without having to bother you.

15:13.000 --> 15:18.000
And you can, everyone here, of course,

15:18.000 --> 15:20.000
should use open source instead of SaaS,

15:20.000 --> 15:22.000
and you should try self-hosting.

15:22.000 --> 15:25.000
If you find self-hosting hard,

15:25.000 --> 15:28.000
you can check out some of those self-hosting platforms.

15:28.000 --> 15:32.000
You can, of course, host not on AWS or something,

15:32.000 --> 15:34.000
but you can use some of those hosters.

15:34.000 --> 15:38.000
Cloud68 had been giving a talk here a bit earlier.

15:38.000 --> 15:42.000
Chateauans is a French network of good hosters.

15:42.000 --> 15:44.000
Librehost is another one.

15:44.000 --> 15:47.000
So look at other hosting solutions.

15:47.000 --> 15:52.000
Thank you, and yeah, have a good rest of the conference.

15:52.000 --> 15:59.000
Thank you.

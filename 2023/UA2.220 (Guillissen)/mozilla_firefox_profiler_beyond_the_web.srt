1
0:00:00.000 --> 0:00:13.120
Hello, everyone.

2
0:00:13.120 --> 0:00:19.080
And now we have a talk by Johannes Bergberg.

3
0:00:19.080 --> 0:00:21.080
I hope he pronounced that right.

4
0:00:21.080 --> 0:00:26.960
He's a JBM developer working on profiles and the underlying technology.

5
0:00:26.960 --> 0:00:34.480
He currently works on a JAP, profiling, documentation, smaller utilities and the Firefox profiler.

6
0:00:34.480 --> 0:00:40.880
He's going to have a talk on Firefox profilers beyond the web using Firefox profiler to view

7
0:00:40.880 --> 0:00:43.120
Java profiling data.

8
0:00:43.120 --> 0:00:44.960
And yes?

9
0:00:44.960 --> 0:00:45.960
Yeah.

10
0:00:45.960 --> 0:00:48.960
Thanks for the kind introduction.

11
0:00:48.960 --> 0:00:54.480
Yes, I'm Johannes Bergberg, working at the submachine team at SAP.

12
0:00:54.480 --> 0:00:58.480
We create the best JDKs, so just download it.

13
0:00:58.480 --> 0:01:04.400
But I'm here because I worked on the Firefox profiler in the recent months.

14
0:01:04.400 --> 0:01:08.600
And yeah, I'm going to start now.

15
0:01:08.600 --> 0:01:14.680
Because when I'm telling people that I'm like working at SAP at Firefox profiler, they first

16
0:01:14.680 --> 0:01:16.440
ask me two questions.

17
0:01:16.440 --> 0:01:19.120
Like, first, wait, SAP does open source?

18
0:01:19.120 --> 0:01:20.860
Yes, SAP does open source.

19
0:01:20.860 --> 0:01:28.160
And quite a lot, for example, here at submachine, my team, we're working on the open JDK.

20
0:01:28.160 --> 0:01:35.360
For example, if you've ever used JDK 17, we have the JDK 17 maintainer in our team.

21
0:01:35.360 --> 0:01:39.880
So we do many nice projects in this field.

22
0:01:39.880 --> 0:01:44.920
SAP also works with the Eclipse foundation or other parts.

23
0:01:44.920 --> 0:01:48.540
So yeah, we're doing quite a bit of open source.

24
0:01:48.540 --> 0:01:56.400
But how did I end up here talking to you in this Marcel Daffrom as a JDK developer, which

25
0:01:56.400 --> 0:01:59.160
normally doesn't happen?

26
0:01:59.160 --> 0:02:00.160
So I had a problem.

27
0:02:00.160 --> 0:02:04.320
I had a project on debugging last year.

28
0:02:04.320 --> 0:02:09.360
So what I wanted to do essentially is that I had on the one hand my IDE and on the other

29
0:02:09.360 --> 0:02:11.000
hand the JVM.

30
0:02:11.000 --> 0:02:15.040
They wanted to improve the protocol in between.

31
0:02:15.040 --> 0:02:20.240
So I had some test cases and some of these did some integration testings.

32
0:02:20.240 --> 0:02:25.920
For example, here they parsed some program and I did something with it and they wanted

33
0:02:25.920 --> 0:02:28.760
to see why it was slower than I expected.

34
0:02:28.760 --> 0:02:35.000
And so what I wanted to do is just write a plug on my IDE, tell it that, hey, profile

35
0:02:35.000 --> 0:02:38.640
it and show me the profile and it's off.

36
0:02:38.640 --> 0:02:40.960
And I wanted to do it with open source.

37
0:02:40.960 --> 0:02:44.960
Because I like open source and that our team open source is really key.

38
0:02:44.960 --> 0:02:53.560
So I didn't find anything, but I found some tools that got into this direction.

39
0:02:53.560 --> 0:02:59.720
So essentially there were tools that produced some flame crafts and as the UI.

40
0:02:59.720 --> 0:03:03.800
And Mario Fusco said a few days back, allow frame crafts.

41
0:03:03.800 --> 0:03:09.480
When you do something stupid, it punches you in your face and it's impossible not to see

42
0:03:09.480 --> 0:03:10.480
it.

43
0:03:10.480 --> 0:03:11.480
So that's great.

44
0:03:11.480 --> 0:03:16.680
You can use flame crafts for things, but sometimes they are not enough.

45
0:03:16.680 --> 0:03:21.920
So when you regard visualizations, you have the easy tools that are easy to use but don't

46
0:03:21.920 --> 0:03:23.120
have that many features.

47
0:03:23.120 --> 0:03:25.000
And on the other hand, you have the big tool.

48
0:03:25.000 --> 0:03:26.000
It's called JMC.

49
0:03:26.000 --> 0:03:31.200
There's lots of features but has a quite steep learning curve.

50
0:03:31.200 --> 0:03:36.200
So I had to write my own because I wanted to have something with more visualizations

51
0:03:36.200 --> 0:03:37.600
than just flame crafts.

52
0:03:37.600 --> 0:03:41.600
That was usable, also usable to the end user.

53
0:03:41.600 --> 0:03:47.320
And not just open JDK developer like James Z is.

54
0:03:47.320 --> 0:03:54.400
And I wanted to just right click on a method, on a test method and just tell my IDE hey,

55
0:03:54.400 --> 0:03:56.400
run the thing.

56
0:03:56.400 --> 0:04:00.760
So I don't end up writing so much code.

57
0:04:00.760 --> 0:04:07.480
And so writing your own intelligent plugin, and that's the IDE I'm targeting.

58
0:04:07.480 --> 0:04:12.040
But it's quite the same for other IDE tools like Visual Studio Code.

59
0:04:12.040 --> 0:04:13.040
It's quite simple.

60
0:04:13.040 --> 0:04:17.200
You can just download some templates and work on them.

61
0:04:17.200 --> 0:04:22.320
So this I did in August in like half a week.

62
0:04:22.320 --> 0:04:25.400
But then it came to visualization options.

63
0:04:25.400 --> 0:04:30.120
So I looked around and thought maybe creating my own visualizations like flame crafts and

64
0:04:30.120 --> 0:04:31.120
so on.

65
0:04:31.120 --> 0:04:33.800
But this turned out to be cumbersome.

66
0:04:33.800 --> 0:04:37.280
And really would take a lot of work.

67
0:04:37.280 --> 0:04:45.560
So I looked around for web based visualizations because you can just embed a web based profile

68
0:04:45.560 --> 0:04:47.680
and view into your IDE.

69
0:04:47.680 --> 0:04:52.240
Because for example in Telstra you have a chromium and embedded chromium and in VS code

70
0:04:52.240 --> 0:04:54.120
it's essentially a browser anyway.

71
0:04:54.120 --> 0:04:55.120
So that's no problem.

72
0:04:55.120 --> 0:04:57.680
iPhone speed scope, which is quite nice.

73
0:04:57.680 --> 0:05:03.400
But the problem is it doesn't show anything other than stack traces and some profile timing

74
0:05:03.400 --> 0:05:05.640
information and I wanted to show more.

75
0:05:05.640 --> 0:05:11.800
There is kind of an existing plugin for IntelliJ but that only shows flame graphs and so we're

76
0:05:11.800 --> 0:05:14.080
back to step on.

77
0:05:14.080 --> 0:05:17.080
And then I found Firefox profile and this is how I ended up here.

78
0:05:17.080 --> 0:05:23.480
So essentially Firefox profile is this large application that you've probably seen in some

79
0:05:23.480 --> 0:05:25.720
other talks today too.

80
0:05:25.720 --> 0:05:33.880
This is actually taken from a previous talk because I was too lazy to run Firefox profile.

81
0:05:33.880 --> 0:05:40.160
And you see here it's like it does everything and it's quite cool.

82
0:05:40.160 --> 0:05:46.920
One of the many advantages is that it's developed by a small team that answer even stupid questions

83
0:05:46.920 --> 0:05:48.160
in a matrix channel.

84
0:05:48.160 --> 0:05:51.920
So check it out if you have some questions.

85
0:05:51.920 --> 0:05:56.480
And they were working with me on my project.

86
0:05:56.480 --> 0:05:59.880
And also it's backed by cooperation.

87
0:05:59.880 --> 0:06:05.840
It's backed by Mozilla which is quite cool because it's not a one man project like other

88
0:06:05.840 --> 0:06:07.080
tools are.

89
0:06:07.080 --> 0:06:14.960
And so what did I do to integrate it and what might you do if you want to also use Firefox

90
0:06:14.960 --> 0:06:15.960
profile?

91
0:06:15.960 --> 0:06:22.400
It essentially points down to creating a tool converter that my data format, it's a JFR

92
0:06:22.400 --> 0:06:25.640
file format to the Firefox profile format.

93
0:06:25.640 --> 0:06:30.600
And then you put it in the server because Firefox profile likes it when you can just

94
0:06:30.600 --> 0:06:36.520
say take this file from a URL so you put it in the server.

95
0:06:36.520 --> 0:06:37.520
That's fine.

96
0:06:37.520 --> 0:06:39.720
For me I created the travel in server.

97
0:06:39.720 --> 0:06:46.640
Then you can just wrap it in IntelliJ plugin or with code plugin or so on.

98
0:06:46.640 --> 0:06:51.360
And then I took the Firefox profile.

99
0:06:51.360 --> 0:06:57.440
You can use profile.Firefox.com but you would typically just host it your own because Daniel

100
0:06:57.440 --> 0:07:04.880
Burks and Demos like Bully today when they have time and you can control all the changes

101
0:07:04.880 --> 0:07:11.640
that come into your Firefox profile UI and also you can use a modified version which

102
0:07:11.640 --> 0:07:16.880
I did to put all my progress that is still out there and not merged into one version.

103
0:07:16.880 --> 0:07:24.400
So the things you'll later see that are in my tool are sometimes not yet in the mainstream

104
0:07:24.400 --> 0:07:26.120
Firefox profile.

105
0:07:26.120 --> 0:07:29.200
So shortly to the file format.

106
0:07:29.200 --> 0:07:30.600
So file format is quite simple.

107
0:07:30.600 --> 0:07:38.040
It's just a JSON file and this is zipped and it has some metadata information like

108
0:07:38.040 --> 0:07:43.400
the name, the interval, some settings and then you have to fetch information.

109
0:07:43.400 --> 0:07:50.080
So for every fetch you have a separate section in the profile and you have a list of samples

110
0:07:50.080 --> 0:07:55.880
there and this list contains essentially the time of when the sample is taken, the stack

111
0:07:55.880 --> 0:08:03.120
and the CPU delta that's the elapsed CPU time since the last sample so it can be used to

112
0:08:03.120 --> 0:08:05.480
show the CPU usage data.

113
0:08:05.480 --> 0:08:11.440
Then the stack is not all the stack but it's an index into the stack array and this contains

114
0:08:11.440 --> 0:08:20.200
like the list of stacks and where the stack is just the frame, a pointer to the previous

115
0:08:20.200 --> 0:08:25.840
stack like the top frame and then the previous stack so it points back and then the category

116
0:08:25.840 --> 0:08:31.560
and of course the frame is an index into the frame area and that contains the function

117
0:08:31.560 --> 0:08:38.040
align so what you need for a frame and then of course function is not really the function

118
0:08:38.040 --> 0:08:41.280
but it's an index into the functions.

119
0:08:41.280 --> 0:08:46.040
Everyone you get the point here because name and file are of course not strings but they

120
0:08:46.040 --> 0:08:49.960
are indexes into the string table.

121
0:08:49.960 --> 0:08:56.480
That's quite hard to debug sometimes and I had many struggles with it but it's quite

122
0:08:56.480 --> 0:08:59.440
performant and it's easy for the front end to see.

123
0:08:59.440 --> 0:09:05.160
So after I explained you how I did it, here's the plugin.

124
0:09:05.160 --> 0:09:09.520
I call the Java JFR Profi- plugin.

125
0:09:09.520 --> 0:09:16.640
You can find it in the track frames marketplace and on GitHub it's open source, it's MIT license

126
0:09:16.640 --> 0:09:26.480
I believe and it works because JFR was open source with JDK 11 so it's all open source.

127
0:09:26.480 --> 0:09:28.440
Just try it out.

128
0:09:28.440 --> 0:09:37.760
So how can you get it, just open your IDE and go into the plugin install, view and type

129
0:09:37.760 --> 0:09:41.440
in Java JFR profile and you get it.

130
0:09:41.440 --> 0:09:50.520
Then you get some nice buttons when you right click and you can just click on the button

131
0:09:50.520 --> 0:09:57.960
profile with JFR then you profile it and then here's a simple example application that just

132
0:09:57.960 --> 0:10:06.920
computes complicated or something like that and then you can see that it executes the

133
0:10:06.920 --> 0:10:14.520
program with some JFR related options to profile it and then it opens automatically the profile

134
0:10:14.520 --> 0:10:17.920
of JFR file, you get the call tree.

135
0:10:17.920 --> 0:10:25.880
You can also look at how every frame is executed whether it's in interpretive mode or in JIT

136
0:10:25.880 --> 0:10:34.200
compiles then you can double click and jump back to the IDE so it has basic IDE integrations

137
0:10:34.200 --> 0:10:39.800
and you can shift double click and see the source view that was presented in the previous

138
0:10:39.800 --> 0:10:45.960
talk shortly so you can see here that in this code the recursive call is called the most

139
0:10:45.960 --> 0:10:52.520
and is found the most time in the static calls and then you can have a function table which

140
0:10:52.520 --> 0:11:00.080
lists all the methods combined so from all the stack traces and you see what method is

141
0:11:00.080 --> 0:11:01.520
used the most.

142
0:11:01.520 --> 0:11:06.680
That's not yet in the main line Firefox profileer.

143
0:11:06.680 --> 0:11:16.920
You can have some plain proofs and you can have some nice tool tips and you can get some

144
0:11:16.920 --> 0:11:23.280
information on the profile you can even upload it like a normal Firefox profile so you can

145
0:11:23.280 --> 0:11:28.960
use these so you can share these profiles and view them in a normal profile.5.

146
0:11:28.960 --> 0:11:39.440
So come just with some few features and then we can also any JFR file like the default

147
0:11:39.440 --> 0:11:45.960
like the de facto standard for profiling files in Java and you can see here that we get also

148
0:11:45.960 --> 0:11:52.440
some crafts that show us the CPU load and give us some summary on GC like how much memory

149
0:11:52.440 --> 0:11:59.560
requested and what's also cool we can not only see timing but we can also see a call

150
0:11:59.560 --> 0:12:04.360
tree for other things like for Java error for thread starts where did they happen or

151
0:12:04.360 --> 0:12:12.840
for object allocation and when you get to Java error you see that this code uses error

152
0:12:12.840 --> 0:12:22.040
to create error every time like probably the parsing files so we can also see as the last

153
0:12:22.040 --> 0:12:29.320
part the marker chart so we can get all the events that the JVM emits so for example we

154
0:12:29.320 --> 0:12:42.840
see here at the top that we had to drop in the memory that the heap was large and we

155
0:12:42.840 --> 0:12:48.560
investigated we could zoom in and see okay that's probably because here GC happened and

156
0:12:48.560 --> 0:12:54.600
this GC took like 10 milliseconds this is quite nice because you can then investigate

157
0:12:54.600 --> 0:13:02.520
have the call tree as a simple thing and then later drop in and go deep dive into the data

158
0:13:02.520 --> 0:13:08.640
and if you know async profile it also supports async profile and also when you want to create

159
0:13:08.640 --> 0:13:17.080
a profile you can decide where you want JFR the built in for the JDK or async profile

160
0:13:17.080 --> 0:13:26.400
and that's all but I think I still have some time so I hope this works because I can tell

161
0:13:26.400 --> 0:13:32.720
you a lot that it might work and control you some screens but here is the actual working

162
0:13:32.720 --> 0:13:38.920
hopefully working prototype so just right click on the main method tell it profile with

163
0:13:38.920 --> 0:13:46.920
JFR and then it tells me hey I profile it then it opens the profile and then you can

164
0:13:46.920 --> 0:13:59.720
just look at it zoom around zoom around and see that you have to select the main the main

165
0:13:59.720 --> 0:14:06.200
tray thread you can jump back to the source code you can shift double click and everything

166
0:14:06.200 --> 0:14:12.880
and the cool thing is you can even open as I showed you arbitrary JFRs they shouldn't

167
0:14:12.880 --> 0:14:19.920
be too large because then my program runs out of memory sometimes it's still a prototype

168
0:14:19.920 --> 0:14:30.280
so try it if you want I would be happy to have any feedback go to the GitHub issue pages

169
0:14:30.280 --> 0:14:37.080
and eventually you find this plugin as I said in the chat brain marketplace you find me

170
0:14:37.080 --> 0:14:43.840
on Mastodon on Twitter and on GitHub where you also find the sub project so you can use

171
0:14:43.840 --> 0:14:53.680
parts of this project like only the converter and only the JFR to Firefox profile server

172
0:14:53.680 --> 0:15:00.920
you find more information on my tool and also a background information to this talk into

173
0:15:00.920 --> 0:15:06.680
blog posts on my blog and you can find the sub machine team at the sweet sub machine

174
0:15:06.680 --> 0:15:12.960
at Twitter and find out about our great projects at sub machine AO that's for me thanks.

175
0:15:12.960 --> 0:15:36.000
Thank you very much and we have quite a bit of time for questions so thank you have you

176
0:15:36.000 --> 0:15:43.680
received any feedback from users about this tool like some colleagues or yes good questions

177
0:15:43.680 --> 0:15:52.080
yeah I received quite some feedback on Twitter they were quite happy I did some internal

178
0:15:52.080 --> 0:15:57.840
I showed it internally at SAP to some colleagues and they were quite happy I also showed it

179
0:15:57.840 --> 0:16:05.240
to friends of mine and also it was quite great it still has of course problems because it's

180
0:16:05.240 --> 0:16:10.840
a prototype it might not everything might work but yeah I'm looking forward so just

181
0:16:10.840 --> 0:16:18.640
give it a try it's free open source open some issues on GitHub if you like so yeah I will

182
0:16:18.640 --> 0:16:25.080
steal the mic did you add to forward some patches upstream to make it work in the first

183
0:16:25.080 --> 0:16:40.520
time so for example this feature here is like not yet in master but for example what I added

184
0:16:40.520 --> 0:16:48.400
was you saw this here this listing of the categories this is something that I added

185
0:16:48.400 --> 0:16:55.400
and I added pull requests for the function table which is not yet in because it's far

186
0:16:55.400 --> 0:17:03.840
more work added some resizing and searching that's yet that's I think in so I added some

187
0:17:03.840 --> 0:17:10.480
pull requests that are in but not all of them but I hope I get it in the next few months

188
0:17:10.480 --> 0:17:16.120
you can give beers to the upstream developers are here to get the patch yeah but but I fixed

189
0:17:16.120 --> 0:17:21.640
all the bugs that they wanted to be fixed so I think we're working more like colleagues

190
0:17:21.640 --> 0:17:26.960
I will ask a follow-up question quickly do you have to do anything Java specific in that

191
0:17:26.960 --> 0:17:37.000
case there's nothing that is real and Java specific so the only the converters like Java

192
0:17:37.000 --> 0:17:43.680
specific because it takes Java data and processes it but anything else in the UI is generic

193
0:17:43.680 --> 0:17:59.640
yeah I was wondering if this could be useful to profile like a big Java applications that

194
0:17:59.640 --> 0:18:05.080
run native code and the other way around and how would that work thinking of like for example

195
0:18:05.080 --> 0:18:12.640
Firefox for Android I don't think we have a lot of like insight into the performance

196
0:18:12.640 --> 0:18:19.240
of our Java code and that would be useful to have so so it's a summarize it where they

197
0:18:19.240 --> 0:18:23.880
can like work with chain I or something like that I think asking profile is a quite nice

198
0:18:23.880 --> 0:18:33.480
profile that I also support and this gives you information on native on native traces

199
0:18:33.480 --> 0:18:41.000
and I'm working on getting a profiling a pain to open JDK that improves this lots but if

200
0:18:41.000 --> 0:18:48.360
you want to know more about the struggles come tomorrow to my talk in the food a room

201
0:18:48.360 --> 0:18:57.960
they hear enough about this topic hi yeah thanks for the presentation very impressive

202
0:18:57.960 --> 0:19:03.240
the question I had actually I have two questions the first one is and what is about Firefox

203
0:19:03.240 --> 0:19:10.920
profiler that made you choose it I suppose and then the second question is could you

204
0:19:10.920 --> 0:19:17.920
see the potential for maybe a tool like this to sort of like actually have a web-based

205
0:19:17.920 --> 0:19:25.240
editor yes the first thing why did I choose it because it's a nice project and I didn't

206
0:19:25.240 --> 0:19:29.880
want to write everything on my own and it contained lots of the features that I already

207
0:19:29.880 --> 0:19:35.080
wanted so yeah and they could ask questions because when you're working like alone on

208
0:19:35.080 --> 0:19:41.800
such a prototype is that you don't get any feedback here got a lot of feedback on progress

209
0:19:41.800 --> 0:19:48.240
and it was a quite good learning experience and the other thing is yeah as I said the

210
0:19:48.240 --> 0:19:54.700
project consists only of a tiny intelligent wrapper around the other code and this can

211
0:19:54.700 --> 0:20:02.120
be used to just integrate it into your spring web app to directly show it in the web I'm

212
0:20:02.120 --> 0:20:10.680
I have some ideas on this just follow my blog to know more about this on my photo almost

213
0:20:10.680 --> 0:20:24.160
in what do you think about the upload local profile is this an important feature in Europe

214
0:20:24.160 --> 0:20:31.680
is it something that you'll is it part of the features that made you choose Firefox

215
0:20:31.680 --> 0:20:37.240
profile it's quite a great feature because you can essentially know those you could later

216
0:20:37.240 --> 0:20:45.360
than trust tell other people I have some performance issue here for example for four issues essentially

217
0:20:45.360 --> 0:20:52.440
the same thing most all of us and I hope I can like open it to use it in a corporate

218
0:20:52.440 --> 0:21:01.920
setting for example adding features to to use Microsoft tries for it so it's more safe

219
0:21:01.920 --> 0:21:06.240
because currently you're applying it in into the web and that's not that great when you're

220
0:21:06.240 --> 0:21:11.920
doing like internal company stuff but this feature then could really make it easy for

221
0:21:11.920 --> 0:21:18.320
people to just say hey here I have some problem give me your sector is just uploaded and you're

222
0:21:18.320 --> 0:21:28.360
fine so maybe next feature could be a server and no not the promise it's it's just me currently

223
0:21:28.360 --> 0:21:36.440
working on it and so it's just a prototype I have to see what could be implemented in the future

224
0:21:36.440 --> 0:21:49.520
any other questions we still have three minutes so if you have questions we can take them no well

225
0:21:49.520 --> 0:21:56.160
then thank you very much do you want to add anything else yeah just try it out I would like

226
0:21:56.160 --> 0:22:02.240
to have some users because I want to know what features are important to you and also where you

227
0:22:02.240 --> 0:22:09.240
find some problems for example someone found that the Microsoft support wasn't there so on Microsoft

228
0:22:09.240 --> 0:22:16.360
to trust first on Windows so if you find any issues please drop by and come to the matrix

229
0:22:16.360 --> 0:22:24.600
channel for the of the Firefox profile there you can find me sitting around all day and can also

230
0:22:24.600 --> 0:22:32.440
answer questions you may clear on it thank you very much


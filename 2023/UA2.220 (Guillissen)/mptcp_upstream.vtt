WEBVTT

00:00.000 --> 00:08.520
We're ready for our next talk.

00:08.520 --> 00:12.440
Mathieu is going to talk about MPTCP in the upstream kernel.

00:12.440 --> 00:13.440
Thanks.

00:13.440 --> 00:18.720
Yes, so hello everybody.

00:18.720 --> 00:24.280
So welcome to this short presentation about MPTCP in the Linux kernel.

00:24.280 --> 00:28.020
So it was a long road that started almost 15 years ago.

00:28.020 --> 00:33.480
So I'm indeed Mathieu Barthes, working at Tesserys in Louvannan, so it's 30 kilometers

00:33.480 --> 00:34.980
from here.

00:34.980 --> 00:39.460
And let's start by a quick overview of the agenda.

00:39.460 --> 00:45.560
So today I suggest to begin with a short introduction of multiparse TCP and its main use cases.

00:45.560 --> 00:51.040
I will try to be quick for those who already know about that, but still trying to make

00:51.040 --> 00:55.440
the concepts clear for everybody, hopefully.

00:55.440 --> 01:00.120
Then I will explain what we can do today and what's expected for later.

01:00.120 --> 01:05.760
I will finish by giving some explanation about why it took so long to have it included in

01:05.760 --> 01:08.120
the official versions.

01:08.120 --> 01:10.960
So MPTCP is short for multiparse TCP.

01:10.960 --> 01:15.960
This is an extension to TCP that breaks the assumption that a connection is linked to

01:15.960 --> 01:19.660
a fixed pair of IP addresses and ports.

01:19.660 --> 01:24.520
In one sentence, it allows to exchange data for a single connection over different paths,

01:24.520 --> 01:26.600
similar to mostly.

01:26.600 --> 01:32.240
Now that you can have multiple paths for the same connection, you can then have more redundancy,

01:32.240 --> 01:34.820
more bandwidth, and many more things.

01:34.820 --> 01:39.400
But enough with the nice definitions, let's have a look at a typical use case.

01:39.400 --> 01:45.380
Here is a classical MPTCP use case with smartphones.

01:45.380 --> 01:49.920
So a smartphone can typically connect to both Wi-Fi and cellular networks.

01:49.920 --> 01:55.640
That's a completely different view from the 70s, when TCP was designed and where everything

01:55.640 --> 02:00.080
was fixed and clearly not transportable.

02:00.080 --> 02:02.080
Let's take a typical scenario.

02:02.080 --> 02:07.280
So you are here in the room connected to the Wi-Fi access point.

02:07.280 --> 02:12.600
Quickly you realize that A, you have enough and don't want to listen to me anymore, and

02:12.600 --> 02:16.160
B, you got called by the smell of the fries outside.

02:16.160 --> 02:21.160
You then decide to watch the video stream about the history of fries, why not, on your

02:21.160 --> 02:26.240
smartphone and leave the building to get real ones, much better.

02:26.240 --> 02:32.600
Slowly the Wi-Fi signal will become weaker and weaker and likely the video will stop.

02:32.600 --> 02:40.080
It will only restart when the system detected the issue and each app will then have to handle

02:40.080 --> 02:44.960
that by reconnecting to the server and then continue where it was if it can.

02:44.960 --> 02:51.120
It's clearly not a smooth experience for both devs and end users, of course.

02:51.120 --> 02:56.560
In other words, do not leave the building if you don't have MPTCP on your phone.

02:56.560 --> 02:59.480
Of course, there are fries for everybody.

02:59.480 --> 03:04.560
So I guess you already got that MPTCP is going to improve this situation.

03:04.560 --> 03:09.600
And yes, it will because it helps supporting seamless handover scenarios.

03:09.600 --> 03:14.800
MPTCP allows to create multiple paths for the same connection.

03:14.800 --> 03:20.680
So these paths are called subflows and they look like TCP connection when you look at

03:20.680 --> 03:23.880
packet traces.

03:23.880 --> 03:29.600
Except that these packets contain additional TCP options to let the client and server attach

03:29.600 --> 03:30.600
new subflows.

03:30.600 --> 03:33.960
They can also announce available IP address.

03:33.960 --> 03:41.160
Of course, they need to have some numbers to reassemble the data and more things.

03:41.160 --> 03:46.440
Multiple paths can be used at the same time like here on the slide.

03:46.440 --> 03:52.120
So with the same workout scenario, the frustration of being disconnected from one network goes

03:52.120 --> 03:53.120
away.

03:53.120 --> 03:59.280
Indeed, MPTCP can quickly take the decision to continue the communication on another path

03:59.280 --> 04:08.080
and even use multiple paths at the same time when one can no longer cope with the demand.

04:08.080 --> 04:14.560
This kind of use case is already supported by Apple with apps like Siri, Maps, Music

04:14.560 --> 04:21.720
and others, but also by Samsung and LG in some countries like South Korea and Turkey.

04:21.720 --> 04:27.240
Another use case which is one that kept us busy for a bit of time at my company is the

04:27.240 --> 04:30.760
hybrid access network case.

04:30.760 --> 04:35.400
Many people are stuck at home with a not so great internet connection.

04:35.400 --> 04:41.040
That's usually because they are using a copper line and are far away from the street cabinet.

04:41.040 --> 04:46.040
Improving the situation is costly, but also takes time, especially if it is needed to

04:46.040 --> 04:52.000
dig new and long trenches to bring fiber to home.

04:52.000 --> 04:58.240
On the other hand, different assets of the network operator can be used, like the available

04:58.240 --> 05:02.880
capacity on the mobile network, so I mean 4G and 5G.

05:02.880 --> 05:09.040
With the help of a transplant proxy installed in the residential gateways for the client

05:09.040 --> 05:15.280
side and the telco cloud of the operator for the server side, Multipass TCP is used

05:15.280 --> 05:20.640
in the middle to offer more bandwidth to the end users.

05:20.640 --> 05:26.440
One last use case that can be quite interesting is that MPTCP can also play a key role in

05:26.440 --> 05:34.200
managing data between cellular networks like 5G and fix one like Wi-Fi.

05:34.200 --> 05:40.520
The 3GPP, which is the organization in charge of defining the 5G technologies, suggests

05:40.520 --> 05:45.760
operator to set up an ATSSS core function.

05:45.760 --> 05:52.000
The goal is to use MPTCP to have a seamless handover between networks, so 4G, 5G and

05:52.000 --> 05:58.200
Wi-Fi, not to break connection when you go from one to another, but also to reduce the

05:58.200 --> 06:03.760
utilization of the mobile network and avoid the situation of this mobile network in the

06:03.760 --> 06:04.760
future.

06:04.760 --> 06:13.000
MPTCP is then part of 5G, but I cannot tell you if this is the same 5G as the one they

06:13.000 --> 06:15.280
put in the COVID vaccine.

06:15.280 --> 06:24.200
Anyway, enough with the theory, how do we use it and what can we do with it today?

06:24.200 --> 06:27.200
So MPTCP in the upstream kernel is fairly new.

06:27.200 --> 06:31.200
A recent ten of kernel is required.

06:31.200 --> 06:37.880
An application can create an MPTCP circuit and use it like it would do with a TCP circuit.

06:37.880 --> 06:42.000
So it's just one line change.

06:42.000 --> 06:48.280
You can see on the slide that IP proto MPTCP is used instead of TCP.

06:48.280 --> 06:55.080
So yes, the application needs to explicitly pick MPTCP, but it is also possible to change

06:55.080 --> 07:01.660
the behaviour of existing applications by forcing them to create an MPTCP circuit thanks

07:01.660 --> 07:05.420
to LD preload.

07:05.420 --> 07:11.280
It is also required to configure the network side to tell the kernel that multiple interfaces

07:11.280 --> 07:12.280
can be used.

07:12.280 --> 07:19.440
So tools like Network Manager and MPTCP can help doing that automatically, but it is also

07:19.440 --> 07:25.040
possible to do it manually with the IP tool.

07:25.040 --> 07:27.820
So it's probably better with an example.

07:27.820 --> 07:34.520
So just install a recent GNU Linux distribution, so a Fedora, Ubuntu, you name it, then you

07:34.520 --> 07:36.800
set up the network configuration.

07:36.800 --> 07:43.040
So here in this example, you can see that we need to declare which other IP addresses

07:43.040 --> 07:46.840
can be used to create new subflows.

07:46.840 --> 07:52.920
That's for the client side on the top and also to signal the IP addresses to the other

07:52.920 --> 07:56.040
side.

07:56.040 --> 08:01.280
It is also needed to tell the kernel that traffic generated from one IP should go through

08:01.280 --> 08:03.000
the right interface.

08:03.000 --> 08:10.440
So here we do that manually, but this can be done of course by Network Manager and others.

08:10.440 --> 08:16.680
Finally at the end you can see that we need to run the application and here we use IP

08:16.680 --> 08:25.320
Iperf3 and we use it with MPTCP IH just to force it to create an MPTCP circuit.

08:25.320 --> 08:29.800
So the last table Linux kernel supports most of the protocol features.

08:29.800 --> 08:35.720
So using multiple subflows, announcing IP addresses, priority fast-close, which is the

08:35.720 --> 08:39.840
equivalent of TCP reset and many other things.

08:39.840 --> 08:44.080
It also supports many circuit options used by many apps.

08:44.080 --> 08:49.080
So for example TCP fast-open can be used with MPTCP for those who know what it is.

08:49.080 --> 08:54.660
And it's also important to support these options because some existing applications depends

08:54.660 --> 08:58.780
on them and would fail if they are not supported.

08:58.780 --> 09:04.960
It is also possible to retrieve information from the user space thanks to MIP counters,

09:04.960 --> 09:14.760
so also an INET-DAG interface and MPTCP circuit option, which is the equivalent of TCP info.

09:14.760 --> 09:20.400
It's also important to mention that two pass managers are available and one packet scheduler,

09:20.400 --> 09:23.600
but maybe better if I explain what it is.

09:23.600 --> 09:32.440
So quickly just about the MPTCP pass manager, so it's a component that is in charge of creating

09:32.440 --> 09:40.120
additional subflows, removing them if needed, announcing addresses, priority, etc.

09:40.120 --> 09:43.720
It is needed on both hands but serves different purposes.

09:43.720 --> 09:48.800
So for example here it is traditionally the client who creates new pass and the server

09:48.800 --> 09:53.760
which announce additional addresses.

09:53.760 --> 09:56.640
There are two pass managers available.

09:56.640 --> 10:02.440
One where the user can define global settings to get the same behavior for all the MPTCP

10:02.440 --> 10:09.520
connection, that's per net namespace, and also another one where the KNL notifies MPTCP

10:09.520 --> 10:14.360
events to user space via Netlink and accepts commands to create, for example, new subflow

10:14.360 --> 10:16.840
and announce IP addresses, etc.

10:16.840 --> 10:23.960
So ensure the user space can control the pass manager and take decision per connection.

10:23.960 --> 10:29.720
The other important component that I mentioned before is the MPTCP packet scheduler.

10:29.720 --> 10:36.920
Its role is to decide on which available pass the next packet will be sent to.

10:36.920 --> 10:42.240
So it can also decide to retransmit one packet to another pass if needed, and that's what

10:42.240 --> 10:44.960
we call a reinjection.

10:44.960 --> 10:51.640
The packet scheduler relies on the TCP congestion control algorithm used on each subflow to

10:51.640 --> 10:55.320
know if more data can be pushed.

10:55.320 --> 11:02.920
But additionally to better use all available resources and sometimes limited buffers, it

11:02.920 --> 11:07.880
has also to send packets in a way to reduce packet reordering on one side, but also on

11:07.880 --> 11:14.280
top of that it might decide to penalize some subflow that could impact the MPTCP connection

11:14.280 --> 11:20.000
because some networks are quite bad with losses, buffer bloat and others.

11:20.000 --> 11:26.640
So the packet scheduler in this case might also be able to trigger a reinjection of data

11:26.640 --> 11:33.640
from one subflow to another, like if a failure has been detected.

11:33.640 --> 11:39.760
So there is an internal packet scheduler for the moment, and only one, but other ones will

11:39.760 --> 11:43.840
be able to be built with eBPF.

11:43.840 --> 11:49.160
So yes, we need eBPF for the packet scheduler, and not just to look cool or to be accepted

11:49.160 --> 11:51.160
to conferences.

11:51.160 --> 11:58.000
So in fact, eBPF here will avoid us to maintain all sorts of different packet scheduler in

11:58.000 --> 11:59.000
the kernel.

11:59.000 --> 12:02.240
It's a bit similar to TCP congestion control.

12:02.240 --> 12:07.240
There are a few in the kernel, but sometimes no longer maintained.

12:07.240 --> 12:12.800
So quite a bit of work has already been done, and it is already possible to do some experimentation

12:12.800 --> 12:16.840
if you use a development version in OGetTree.

12:16.840 --> 12:21.160
But this work is currently on hold because we ended up discussing the behavior of the

12:21.160 --> 12:28.960
current internal scheduler and its API, and yes, some work is still needed here.

12:28.960 --> 12:36.040
But there are also some circuit options that need to be supported, but most likely they

12:36.040 --> 12:40.880
are specific to some very specific use cases.

12:40.880 --> 12:45.840
So it should be fine, but feel free to report them if some are missing.

12:45.840 --> 12:50.040
And one last thing that is worth mentioning is the support of Golang.

12:50.040 --> 12:57.360
As you may know, Golang does not depend on a C runtime library or libc, and it is then

12:57.360 --> 13:04.280
not possible to use the LD preload technique with MPTCPIs to use MPTCP.

13:04.280 --> 13:09.920
Also the default net package doesn't allow application to create MPTCP circuit on UDP

13:09.920 --> 13:18.440
or TCP, and a feature request has been sent to let apps easily create MPTCP circuit.

13:18.440 --> 13:25.000
But quickly the question Golang developers asked was, then why not using MPTCP by default

13:25.000 --> 13:27.080
when a stream connection is requested?

13:27.080 --> 13:30.240
So when asking for TCP.

13:30.240 --> 13:35.800
And the proposition has been accepted, so we hope that some application using the net

13:35.800 --> 13:42.480
package will be able to create MPTCP connection, and maybe later that will become the new default

13:42.480 --> 13:45.080
behavior.

13:45.080 --> 13:49.480
So I will now finish this presentation with a bit of history.

13:49.480 --> 13:55.600
I think it is worth telling you that because it was not easy to get MPTCP in the official

13:55.600 --> 14:00.240
Linux kernel, it could be good to say a few words about that.

14:00.240 --> 14:05.600
So still it was not as long an intense as having the full real-time support, and I see

14:05.600 --> 14:11.920
that some people here really know what I'm talking about.

14:11.920 --> 14:17.960
The development of MPTCP in the Linux kernel started in Belgium, at the university in Louvain

14:17.960 --> 14:21.080
and Eve, something like 15 years ago.

14:21.080 --> 14:23.760
Surprisingly, it didn't involve bees.

14:23.760 --> 14:25.720
No, of course it did.

14:25.720 --> 14:31.520
The legend says that the ID popped up when the young authors were drinking bees at a

14:31.520 --> 14:37.160
crowd pub where the bartender was able to cope with the high demand by using multiple

14:37.160 --> 14:42.680
bee pumps at the same time.

14:42.680 --> 14:47.960
More seriously, it started as a fork, but more to do some experimentation and to validate

14:47.960 --> 14:49.520
the concept.

14:49.520 --> 14:54.600
So at the beginning of his PhD, Sebastian just wanted to prove it could work.

14:54.600 --> 14:58.400
He started to modify TCP by adding more condition.

14:58.400 --> 15:03.680
So just if it is multi-pass TCP, do that, if not do something else.

15:03.680 --> 15:10.560
Later, more people, mostly Christophe and Gregory, joined the project to help Sebastian.

15:10.560 --> 15:16.480
They then took over his work to make it, let's call it, production ready, but also to be

15:16.480 --> 15:19.560
able to reach high performances.

15:19.560 --> 15:25.600
In other words, to get the modification in the Linux kernel were consequent and optimized

15:25.600 --> 15:29.640
for the MPTCP use case.

15:29.640 --> 15:36.480
In parallel, MPTCP v0 RFC has been published in 2013.

15:36.480 --> 15:42.320
The same year, a big company with a logo looking like an apple, if you see, announced its support

15:42.320 --> 15:44.520
for the client side.

15:44.520 --> 15:48.920
Of course they needed to have the support for the backend side, and I will let you imagine

15:48.920 --> 15:51.200
what they used.

15:51.200 --> 15:56.480
So if we concentrate on the very beginning of the project, we can say that it was easy

15:56.480 --> 16:00.680
to fork, but you will pay for it.

16:00.680 --> 16:05.480
Please don't read the two lines out of the context.

16:05.480 --> 16:09.720
But anyway, there are different utilization of a fork.

16:09.720 --> 16:11.960
You can pick your level.

16:11.960 --> 16:19.920
So I let you guess which one has been picked here, probably ultra-violence.

16:19.920 --> 16:22.160
Only because the Linux kernel is big.

16:22.160 --> 16:25.600
It's also complex, and the development is very active.

16:25.600 --> 16:31.520
So small modifications should not be difficult to maintain in a fork, but here we are talking

16:31.520 --> 16:39.040
about quite a lot of code, and an important part is modifying the network stack, which

16:39.040 --> 16:44.080
still has many adaptations specific to MPTCP.

16:44.080 --> 16:51.040
And in fact, from those that are even duplicated functions that were adapted for MPTCP case.

16:51.040 --> 16:56.200
So imagine that the code is modified on TCP side.

16:56.200 --> 17:00.880
We don't see it directly, and then we need to adapt it later to MPTCP.

17:00.880 --> 17:04.120
But still that was not the nightmare level.

17:04.120 --> 17:05.920
This is the nightmare level.

17:05.920 --> 17:12.560
So imagine that you have to deploy it on various embedded systems with different LTS kernels

17:12.560 --> 17:17.240
from very old version, like 3.4.

17:17.240 --> 17:22.320
So that's what we had to do at TESRS, and I explain why some of my colleagues here look

17:22.320 --> 17:28.240
like the avatar just by mentioning kernel backports.

17:28.240 --> 17:33.520
In the meantime, very old version have been deprecated, but thanks to the embedded system

17:33.520 --> 17:36.220
wall, this took time.

17:36.220 --> 17:43.960
So of course, this backboard job brought the drought of having to deal with many conflicts,

17:43.960 --> 17:49.240
but good tools like git re-re-re and top-git help a lot for that.

17:49.240 --> 17:55.400
So also add to that a bunch of batch script, and it was possible to automate most of this

17:55.400 --> 17:58.400
laborious task.

17:58.400 --> 18:01.600
Top-git allows us to create a tree with dependency.

18:01.600 --> 18:09.000
That's what we can not really clearly see on the side, but it's also very handy if a

18:09.000 --> 18:14.560
fork has to be maintained by a team where regular sync with the upstream have to be

18:14.560 --> 18:16.320
done as well.

18:16.320 --> 18:22.280
So at the end for us, what we were doing is that we were applying the patch at the bottom

18:22.280 --> 18:30.960
and then propagate it to all the kernel versions, and then we had to resolve a few conflicts.

18:30.960 --> 18:36.920
But likely we're not doing that too much.

18:36.920 --> 18:42.320
At the end, the fork is still quite well used today despite all the work that has been done

18:42.320 --> 18:44.960
on the upstream code.

18:44.960 --> 18:51.840
I even published new releases last Friday and probably one of the last one.

18:51.840 --> 18:57.760
But on the bright side, the migration process has started with just take time.

18:57.760 --> 19:03.160
The MPTCP support in the upstream kernel has started in 2020.

19:03.160 --> 19:05.000
Why a so long delay?

19:05.000 --> 19:10.400
Was it an homage to the Belgium Rideway company?

19:10.400 --> 19:13.120
It was not, in fact, a new idea.

19:13.120 --> 19:20.360
A few discussion and attempts have been made in the past, but were not successful.

19:20.360 --> 19:24.960
In our case, it was not an easy task to upstream MPTCP.

19:24.960 --> 19:32.200
First, because the Linux TCP stack is highly optimized, but also because the NetDev maintainers

19:32.200 --> 19:34.040
have been clear on that topic.

19:34.040 --> 19:39.200
It is okay to include MPTCP in the official Linux kernel, but the new implementation cannot

19:39.200 --> 19:45.720
affect the existing TCP stack, which means no performance regression, maintainable and

19:45.720 --> 19:52.400
possible to disable it, can be extended via user space.

19:52.400 --> 19:56.720
You know it's what I said earlier, you might already understand that we are not allowed

19:56.720 --> 19:59.640
to take the initial fork as it was.

19:59.640 --> 20:06.360
So it was built to support experiments and rapid changes, but not generic enough.

20:06.360 --> 20:12.600
Also at the end, it was and still used on environment where the majority of the connection

20:12.600 --> 20:16.920
are using MPTCP and not the opposite.

20:16.920 --> 20:19.000
So what were the solutions?

20:19.000 --> 20:22.080
A rewrite almost from scratch was needed.

20:22.080 --> 20:26.440
That's probably why it took so long to say, okay, we need to do it.

20:26.440 --> 20:32.340
A key difference with the upstream kernel is that a new circuit type is used.

20:32.340 --> 20:34.560
So there is no clean separation.

20:34.560 --> 20:41.520
The user space interacts with the MPTCP circuit, which controls the different TCP subfruits.

20:41.520 --> 20:51.160
Thanks to the TCP upper layer protocol, ULP, that was introduced in 2017 for KTLS, it was

20:51.160 --> 20:58.400
possible to minimize the modification in TCP code while still avoiding duplicating code.

20:58.400 --> 21:06.400
An SKB extension mechanism has also been initially developed for MPTCP, not to include the socket

21:06.400 --> 21:09.000
buffer side for the generic case.

21:09.000 --> 21:13.440
This is also used now by other components today.

21:13.440 --> 21:17.700
Also we had to be very careful when modifying the TCP stacks.

21:17.700 --> 21:22.480
So any ID to avoid that, we're good to take.

21:22.480 --> 21:27.660
One last point is that the APIs have been defined to have to maintain multiple versions

21:27.660 --> 21:34.280
of pass manager and packet scheduler in the kernel, even if the last one is still ongoing.

21:34.280 --> 21:38.920
But also one thing is that we needed to do a lot of work.

21:38.920 --> 21:44.560
Here I just want to say a special thanks to our ex-maintenor, Matt Martino and other fellows

21:44.560 --> 21:49.040
and Intel who had to step out very recently.

21:49.040 --> 21:53.320
In conclusion, it was a long road and it's not over.

21:53.320 --> 22:02.640
Thank you.

22:02.640 --> 22:03.640
Thank you.

22:03.640 --> 22:10.680
We have time for a couple of questions.

22:10.680 --> 22:17.040
Thank you.

22:17.040 --> 22:18.920
Just two quick questions.

22:18.920 --> 22:24.080
One, when you have multiple connections, can you kind of do it raid one sort of style,

22:24.080 --> 22:29.720
like where traffic goes on both simultaneously so that you don't have to resend something

22:29.720 --> 22:31.920
if something gets dropped?

22:31.920 --> 22:38.160
And can you speak also about SCTP and what's going on if it's dead or if you know?

22:38.160 --> 22:44.240
Because it's sort of in a similar space and I never understood why people focus more on

22:44.240 --> 22:46.280
MPTCP than SCTP.

22:46.280 --> 22:49.040
Thank you.

22:49.040 --> 22:57.000
I will maybe start just with the SCTP aspect because I don't know much about it.

22:57.000 --> 23:02.840
From what I remember is that here with multi-pass TCP, we do an extension to TCP.

23:02.840 --> 23:08.400
So most likely where TCP was working before, MPTCP can work.

23:08.400 --> 23:12.840
There are some exceptions with some nasty middle boxes, but I think that's the main

23:12.840 --> 23:18.360
reason why we can see multi-pass TCP in the field and maybe not SCTP.

23:18.360 --> 23:25.840
I think it is not dead and still used for data centers, but I don't know exactly about

23:25.840 --> 23:26.840
that.

23:26.840 --> 23:34.040
For the other question, I have not understood everything, you said that you wanted to aggregate

23:34.040 --> 23:35.040
multiple pass.

23:35.040 --> 23:40.040
I mean you have your two pass, can you send the same data simultaneously?

23:40.040 --> 23:41.040
Yes you can.

23:41.040 --> 23:47.160
So there is even a packet scheduler called redundant packet scheduler.

23:47.160 --> 23:55.760
There is one small bit that is important to mention is that each pass is still a TCP connection,

23:55.760 --> 23:59.920
which means that if you have some losses on one pass, you still need to retransmit it

23:59.920 --> 24:01.240
on the same pass.

24:01.240 --> 24:05.880
So at some point it might be okay to say that, okay, the other side received it via the other

24:05.880 --> 24:08.560
side, via the other pass.

24:08.560 --> 24:11.720
So if you got a loss on one pass.

24:11.720 --> 24:19.720
So the end host doesn't need it, but because there are middle boxes and others on the pass,

24:19.720 --> 24:23.400
you need to retransmit it at the TCP level.

24:23.400 --> 24:28.760
I don't know if it's clear, but you can do reinjection, but you need to continue retransmit

24:28.760 --> 24:29.760
on the same pass.

24:29.760 --> 24:34.560
You can't just, when you find it received that request, just drop it.

24:34.560 --> 24:37.360
If you want to do that, the best is probably to stop the connection.

24:37.360 --> 24:42.000
Like if you want to have a low latency thing, or if you want a low latency, maybe don't

24:42.000 --> 24:46.320
use TCP, but that's another question, not the topic.

24:46.320 --> 24:50.520
But if you want to do that, it's probably best to stop the pass and recreate it.

24:50.520 --> 24:54.320
Thank you.

24:54.320 --> 25:00.600
So I looked at the CCTLs for MPTCP, and I found one called DSS checksum.

25:00.600 --> 25:05.400
And reading the patch notes, it's something to do with middle boxes.

25:05.400 --> 25:08.080
So is that giving you issues?

25:08.080 --> 25:13.200
And why is it, and last question, pending that, why is it not on by default?

25:13.200 --> 25:15.080
Yes, no, good question.

25:15.080 --> 25:19.880
So in short, middle boxes are not nasty.

25:19.880 --> 25:24.360
They like to modify everything, and I will not comment too much about that because at

25:24.360 --> 25:30.160
my company, we do a transplant proxy, so we are kind of middle box.

25:30.160 --> 25:35.960
But what can happen is that middle boxes can change a lot of things in TCP.

25:35.960 --> 25:45.440
For example, you have all protocols, like FTP, where the IP address is sent on the by

25:45.440 --> 25:47.800
screen, but like in clear text.

25:47.800 --> 25:53.200
Which means that if you have a NAT, you probably have a NAT that starts to look at the connection,

25:53.200 --> 26:00.160
identify it is FTP, and modify the text in the by stream, like the IP addresses.

26:00.160 --> 26:02.960
But because it does that, the size can change.

26:02.960 --> 26:08.720
And if they don't update MPTCP header, because we need to add some information to be able

26:08.720 --> 26:16.120
to reassemble the data on the other hand, they can mess up with MPTCP.

26:16.120 --> 26:23.680
So there is this checksum mechanism, but there is one big inconvenience, is that for the

26:23.680 --> 26:28.400
moment, there is no hardware acceleration, so it's quite costly.

26:28.400 --> 26:35.240
And the other thing is that at the end, it's quite rare that you have some middle boxes

26:35.240 --> 26:37.480
modifying the by stream like that.

26:37.480 --> 26:42.520
I know that in the past, you had some, if you were going on some website, for example,

26:42.520 --> 26:48.000
with 480 without HTTPS, it's possible that some by stream were injected.

26:48.000 --> 26:52.720
And probably when they do the injection, they don't modify MPTCP.

26:52.720 --> 26:55.680
Sorry, we need to move on.

26:55.680 --> 26:56.680
Yeah, sorry.

26:56.680 --> 26:57.680
Otherwise we won't be on schedule.

26:57.680 --> 26:59.920
So that's why we don't have checksum, but thank you.

26:59.920 --> 27:00.920
Thank you so much for the talk.

27:00.920 --> 27:01.920
Thank you for the questions.

27:01.920 --> 27:13.080
Thank you very much.

27:13.080 --> 27:16.040
Thank you.

27:16.040 --> 27:24.400
Do you have a question?

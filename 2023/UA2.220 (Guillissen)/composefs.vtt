WEBVTT

00:00.000 --> 00:07.320
So, we're ready for our next talk.

00:07.320 --> 00:11.340
Alex is going to talk about the new file system that they're proposing, Composivest, and opportunistically

00:11.340 --> 00:13.160
sharing verified image file system.

00:13.160 --> 00:14.160
Thank you.

00:14.160 --> 00:15.160
All right, thank you.

00:15.160 --> 00:16.160
Can you hear me?

00:16.160 --> 00:17.160
Yeah?

00:17.160 --> 00:18.160
All right.

00:18.160 --> 00:19.160
All right, I'm Alex.

00:19.160 --> 00:24.740
You may also know me from hits such as Flatpak, Flathub, GNOME, GTK, all such stuff.

00:24.740 --> 00:31.360
But this here is my first kernel file system, which I proposed on the list a couple of months

00:31.360 --> 00:33.000
ago.

00:33.000 --> 00:36.120
It's not actually like a file system, a real file system.

00:36.120 --> 00:41.040
It's more targeted for read-only images such that you would typically have many of them

00:41.040 --> 00:48.000
running on the system, maybe on a container host or in my case, my primary concern is

00:48.000 --> 00:52.160
the OSTree verified boot use case.

00:52.160 --> 00:58.640
So rather than talking about composeFS first, I'm going to talk about OSTree because it

00:58.640 --> 01:01.800
kind of explains where this comes from.

01:01.800 --> 01:06.880
So in OSTree, we have images.

01:06.880 --> 01:10.240
Normally the images are not simple like this, but actually the full-root file system for

01:10.240 --> 01:12.760
your system that you want to boot.

01:12.760 --> 01:16.440
But they're used in a bunch of files, and they have metadata and permissions and names

01:16.440 --> 01:17.800
and whatnot.

01:17.800 --> 01:20.080
So they're basically images.

01:20.080 --> 01:26.480
And we have this repository format, which is the core format of OSTree.

01:26.480 --> 01:31.960
And what we do is we take all the files, like the regular files, in the image and we hash

01:31.960 --> 01:33.120
them.

01:33.120 --> 01:38.280
And we store them by the hash name in this repository format.

01:38.280 --> 01:42.320
So if you look at any of those files, they're just the same file with the name of their

01:42.320 --> 01:44.400
own content.

01:44.400 --> 01:49.720
And then we take all the directories we have, such as the sub-derp thing, and we make a

01:49.720 --> 01:55.720
small descriptor of them, the names of the file in them, their permissions and whatnot,

01:55.720 --> 02:00.640
and a reference to the content of the file by the checksum.

02:00.640 --> 02:04.560
And we do the same for the root directory.

02:04.560 --> 02:09.560
And this time we refer to the sub-directory by the checksum of the descriptor.

02:09.560 --> 02:16.440
And then we add a final commit description, which describes, well, it has a pointer, meaning

02:16.440 --> 02:21.560
the checksum of the root directory, and a parent doesn't have a parent because this

02:21.560 --> 02:25.320
is the first commit, some metadata.

02:25.320 --> 02:30.840
And then we add the refs file, which is basically just a file that says we have a branch called

02:30.840 --> 02:34.520
image, and this is the current head.

02:34.520 --> 02:40.120
So if anyone thinks this looks like the.get directory in any of your checkouts, that's

02:40.120 --> 02:41.120
true.

02:41.120 --> 02:44.240
It's basically Git for operating systems.

02:44.240 --> 02:49.520
There are some details in exactly how the object files are stored, but basically the

02:49.520 --> 02:51.120
entire structure is Git, right?

02:51.120 --> 02:53.000
It's just a copy of Git.

02:53.000 --> 02:57.280
And you can see even more clearly if you create a new commit, the new version, we added the

02:57.280 --> 02:58.780
readme.

02:58.780 --> 03:04.080
So all we have to do is add the file, the new root directory, and the new commit that

03:04.080 --> 03:10.360
points to the previous one, and then we update the ref to the latest head.

03:10.360 --> 03:16.680
So basically re-implementing Git for large binary trees.

03:16.680 --> 03:18.960
But you can't use this directly.

03:18.960 --> 03:21.720
Like you can't boot from a repository like this.

03:21.720 --> 03:29.120
So when you do deploy, we call it deploy when you run a new version of something.

03:29.120 --> 03:30.760
Typically you have a pre-existing version.

03:30.760 --> 03:35.480
So you download the new version of the thing you want to run, which is very simple because

03:35.480 --> 03:41.480
you can just iterate over these recursive descriptions of the image.

03:41.480 --> 03:47.120
And whenever you have a reference to an object you already have downloaded, you can just

03:47.120 --> 03:50.120
stop because recursively you know you have all the previous things.

03:50.120 --> 03:53.280
So it's very efficient to get the new version.

03:53.280 --> 04:01.080
And then we create a deploy directory, which is basically a hard-linked form that points

04:01.080 --> 04:07.720
back into the objects, like the regular file objects.

04:07.720 --> 04:12.120
So we create the directories with the right permissions and whatnot.

04:12.120 --> 04:18.040
Whenever there's a regular file, we just point it at the same file by using a hardlink to

04:18.040 --> 04:20.200
the one in the repository.

04:20.200 --> 04:25.520
And then we somehow set some boot configuration that points to this particular commit, which

04:25.520 --> 04:31.560
means this directory, and somewhere in the unit RDE we find this directory, bind-mounted,

04:31.560 --> 04:37.520
read-only on the root, on top of the root, and then we boot into that.

04:37.520 --> 04:43.800
And there are some clear advantages over this, over what would be the alternative, which

04:43.800 --> 04:47.120
is the traditional A, B, but block device.

04:47.120 --> 04:52.720
You have two block devices and you flash new image from B and then you boot into B.

04:52.720 --> 04:59.840
First of all, it's very easy to do efficient downloads and deltas are very small.

04:59.840 --> 05:05.000
You can easily store however many versions of things you want, whether they're related

05:05.000 --> 05:10.760
or not, like if it's multiple versions of the same branch.

05:10.760 --> 05:13.120
You can keep the last 10 or whatever.

05:13.120 --> 05:19.080
Plus you can also have completely unrelated, you can have both the Fedora and a rel or

05:19.080 --> 05:20.080
Debian or whatever.

05:20.080 --> 05:24.640
And you can easily switch between them atomically.

05:24.640 --> 05:30.240
And all the updates are atomic, we never modify an existing thing that you're running, we

05:30.240 --> 05:34.800
always create a new deploy directory and we boot into that.

05:34.800 --> 05:37.920
And also the format is very, it's very, very viable.

05:37.920 --> 05:43.680
Like it's recursively describing itself and all you need is the signature, and there's

05:43.680 --> 05:47.360
a GPG signature on the commit object.

05:47.360 --> 05:53.560
So if you trust the commit object, you trust the root hash, you trust the hash of the subdirectories

05:53.560 --> 05:56.680
and the files and whatnot.

05:56.680 --> 06:02.120
The problem that I want to address is that this doesn't do runtime verification.

06:02.120 --> 06:09.160
We verify when we download things, we can verify when we do the deploy or rather the

06:09.160 --> 06:13.920
fact that we're deploying is going to cause us to verify things.

06:13.920 --> 06:20.080
But if after some point after that something modifies, say we have a random bit flip on

06:20.080 --> 06:29.160
the disk or we have a malicious evil mate style attack, someone could easily just remove

06:29.160 --> 06:34.400
or modify a file in the deploy directory.

06:34.400 --> 06:39.560
And to protect against this, the kernel has two features, the invert and fsverity.

06:39.560 --> 06:45.640
The invertity is what you use in the typical AV image system because it's block based,

06:45.640 --> 06:48.480
but it's completely a read-only block device.

06:48.480 --> 06:52.400
There's no way we can do OSTRI like updates to its file system.

06:52.400 --> 06:55.060
You just cannot write to it.

06:55.060 --> 06:57.920
So the other thing is fsverity.

06:57.920 --> 07:04.720
And fsverity sort of matches very well with the OSTRI repository format because if you

07:04.720 --> 07:11.360
enable fsverity on a particular file, it essentially makes it immutable.

07:11.360 --> 07:15.840
And immutable is exactly what these content address files are.

07:15.840 --> 07:17.320
So it's good.

07:17.320 --> 07:22.080
But the problem is that fsverity doesn't go all the way, it only protects the content

07:22.080 --> 07:23.640
of the file.

07:23.640 --> 07:28.120
You can easily make it set UID or replace it with a different one that has a different

07:28.120 --> 07:33.520
fsverity or just add a new file or whatever.

07:33.520 --> 07:36.680
So it doesn't protect structure.

07:36.680 --> 07:44.840
So that's why composefs was created, to have another layer that does the structure.

07:44.840 --> 07:52.220
And now I'm sort of going away from the OSTRI use case and this is the native way to use

07:52.220 --> 07:55.480
composefs where you just have a directory with some data.

07:55.480 --> 08:00.240
This is the same kind of example that I had in the posterior format.

08:00.240 --> 08:07.320
And you just run mk-composefs on that directory and it creates this image file that contains

08:07.320 --> 08:10.160
all the metadata for the structure of the thing.

08:10.160 --> 08:20.360
And this object directory which is just copies of these files stored by fsverity-digest.

08:20.360 --> 08:24.280
And they obviously are just pure files, you can cat them and they're just regular files

08:24.280 --> 08:25.320
with the same contents.

08:25.320 --> 08:27.840
They're actually pure data files.

08:27.840 --> 08:32.720
You can see they don't have the executable rights or if you have some complex metadata

08:32.720 --> 08:34.440
or extended attributes or whatever.

08:34.440 --> 08:38.440
These are just regular files with content.

08:38.440 --> 08:45.160
And then you mount the thing using composefs, pointing it at this object directory and then

08:45.160 --> 08:49.600
you get a reproduction of the original image that you can look at.

08:49.600 --> 08:57.560
Whenever you cat this, it will just do overlayfs style stacking, read the backing file.

08:57.560 --> 08:59.080
So everything is always from the page cache.

08:59.080 --> 09:02.680
And also the actual mount is not a loopback mount.

09:02.680 --> 09:10.300
We just do stacking style, direct access of the file from the page cache.

09:10.300 --> 09:15.520
So that gives you the general ability to reproduce this image.

09:15.520 --> 09:22.440
But to get the fsverity or complete structural verification, you actually use fsverity on

09:22.440 --> 09:25.400
the descriptor itself.

09:25.400 --> 09:29.240
So if you enable fsverity on that, that makes it immutable.

09:29.240 --> 09:34.480
So the file system cannot change or the file can't change on the file system.

09:34.480 --> 09:42.400
At least the kernel API doesn't allow you and if it's somehow otherwise modified on

09:42.400 --> 09:45.920
disk or whatnot, it will detect it.

09:45.920 --> 09:51.720
And you can see I actually pass the digest, the expected digest, and whenever it mounts

09:51.720 --> 09:56.600
it it starts by verifying before it does any IO, does it actually have the expected fsverity

09:56.600 --> 09:57.840
digest?

09:57.840 --> 10:03.520
And if so, we can rely on the kernel to basically do all our verification from us.

10:03.520 --> 10:09.720
And if you replace something, we have in the metadata for all these backing files the expected

10:09.720 --> 10:11.760
verity digest.

10:11.760 --> 10:20.240
So if you replace something or if there's a random bit flip, it will detect it.

10:20.240 --> 10:24.120
And actually the descriptor itself is very simple.

10:24.120 --> 10:31.080
This is not a traditional file system where we have to update things at runtime.

10:31.080 --> 10:34.680
We can just compute a very simple descriptor of this.

10:34.680 --> 10:40.960
It's basically a fixed-size header followed by a table of fixed-size inode data.

10:40.960 --> 10:48.800
But if the file system has n n inodes, then there are n copies of that structure.

10:48.800 --> 10:56.280
And some of them point into the variable-size data at the end, which we found with the VData

10:56.280 --> 10:58.880
offset in the header.

10:58.880 --> 11:02.480
And that's basically all there is to it.

11:02.480 --> 11:06.160
Inode zero is the root file system, or is the root inode.

11:06.160 --> 11:12.480
You can look at that and if it's a type directory, then the variable data points to a table of

11:12.480 --> 11:17.840
darenths, which is basically a pre-sorted table of darenths plus names that you use binary

11:17.840 --> 11:18.840
search.

11:18.840 --> 11:21.440
You get a new I know, then you just look at that offset.

11:21.440 --> 11:25.760
And all this is just done by mapping the page cache directly.

11:25.760 --> 11:32.240
So it's very simple in terms of structure.

11:32.240 --> 11:35.400
If you want to use this actually with OSTree, it's slightly different.

11:35.400 --> 11:41.000
Like we can't just, we don't want to take the OSTree repository, create this directory,

11:41.000 --> 11:43.720
and then run mk-compose-fs on it.

11:43.720 --> 11:51.120
Where we ship a library, libcompose-fs, where you basically link OSTree with this library

11:51.120 --> 11:57.280
and it can generate these images directly from the metadata that exists in the repository.

11:57.280 --> 12:04.240
So we don't have to do any kind of expensive IO to create these images.

12:04.240 --> 12:05.840
Because it's just a metadata, right?

12:05.840 --> 12:06.840
It's not very large.

12:06.840 --> 12:12.200
You can put it into memory, generate these, optimize them, and just write a single file.

12:12.200 --> 12:17.560
And the way we can do it, it's very flexible so we can ensure that we can use the existing

12:17.560 --> 12:20.680
repository for the backing files.

12:20.680 --> 12:24.040
And it's also designed so that there's a standardized way.

12:24.040 --> 12:30.080
We put everything, so every time you create a new image based on the same OSTree commit,

12:30.080 --> 12:33.760
we will be creating the exact same binary file.

12:33.760 --> 12:35.160
Like bit by bit.

12:35.160 --> 12:40.880
So what you do is then when you create the commit on the server, you basically generate

12:40.880 --> 12:46.160
one of these, take the digest of it, like the Fs-varied to digest of it, put it in the

12:46.160 --> 12:53.840
same commit, and then whenever you recreate, there's no need to extend the OSTree format

12:53.840 --> 12:55.840
on the network or anything.

12:55.840 --> 13:01.720
What you do is when you deploy a commit, instead of making this hardling form, you recreate

13:01.720 --> 13:07.080
one of these and then you use the supply digest as the expected digest when you mount it.

13:07.080 --> 13:13.240
So if anything anywhere went wrong or was attacked or whatever, it will refuse to mount

13:13.240 --> 13:14.240
it.

13:14.240 --> 13:21.560
So obviously you have to put that trusted digest somewhere in your secure boot stack

13:21.560 --> 13:23.240
or whatever.

13:23.240 --> 13:27.960
Something would have to, it has to be trusted, but that's outside exactly of the scope of

13:27.960 --> 13:31.520
ComposeFS.

13:31.520 --> 13:38.400
And it's very similar to what you would do with the M-variety in a pure image-based system.

13:38.400 --> 13:40.880
But another interesting use case is the container use case.

13:40.880 --> 13:45.640
And Giuseppe, who is not here actually, but he is one of the other people behind the ComposeFS

13:45.640 --> 13:51.580
people, or developers, he is more, he's one of the part-man developers.

13:51.580 --> 13:58.880
So his use case is to use this for containers because containers are also used images, right?

13:58.880 --> 14:05.520
And it would be nice if we can get this very, what I call opportunistic sharing of files.

14:05.520 --> 14:11.920
Like if you use layers and stuff, you can sort of share stuff between different containers,

14:11.920 --> 14:17.040
but you have to manually ensure you do the right thing, whereas with this opportunistic

14:17.040 --> 14:22.360
style of sharing, whenever you happen to have a file that is identical, it just automatically

14:22.360 --> 14:23.360
gets shared.

14:23.360 --> 14:31.840
But like on disk and in page cache, because of the way these things work.

14:31.840 --> 14:37.160
So we also don't want to like change the container format.

14:37.160 --> 14:42.760
There was a talk yesterday about using the M-variety in SquashFS for, it's not sharing,

14:42.760 --> 14:46.400
but like the similar kind of way you can mount an image.

14:46.400 --> 14:53.560
But we don't want to, that forces all the users to create a new form of container.

14:53.560 --> 15:03.960
But we want to use, allow this for all existing tarball-based layered OCI images.

15:03.960 --> 15:11.040
So an image, in the OSI world, is a list of tarballs that you extract in order and then

15:11.040 --> 15:14.520
you mount it using OverlyFS.

15:14.520 --> 15:21.000
There is an extension of this called E-tar, E-star GC, which is some weird-ass hack where

15:21.000 --> 15:26.560
you put an index at the end of the G-zip and then you can use partial HTTP downloads to

15:26.560 --> 15:30.960
just get the index and you can see which part of the layer you already have and you can

15:30.960 --> 15:35.480
just range HTTP gets to only download those parts.

15:35.480 --> 15:41.480
So if you happen to have one of those archives in your layers, we can, in combination with

15:41.480 --> 15:48.440
the locally stored content storage, avoid downloading the parts that we don't need.

15:48.440 --> 15:55.040
If you don't have them, we have to download everything, which is what we do now, but we

15:55.040 --> 15:56.040
can do better.

15:56.040 --> 16:03.640
But even then, you can still hash them locally and get all the sharing and then you combine

16:03.640 --> 16:10.800
this with creating an OverlyFS, or a composite FS for the entire image.

16:10.800 --> 16:17.840
So you mount, this is for the local storage of images.

16:17.840 --> 16:27.120
You can use, instead of storing these layers, you store the repository, content stored repository

16:27.120 --> 16:33.480
plus these generated composed FS images and then whenever you run this, you just mount

16:33.480 --> 16:35.320
it and it goes.

16:35.320 --> 16:40.240
It's also nice, you can easily combine all the layers.

16:40.240 --> 16:46.160
So if you have a 10 layer container and you want to resolve libc, which is in the base

16:46.160 --> 16:51.680
layer, you have to do a negative denture lookup in every layer before you reach the bottom

16:51.680 --> 16:52.680
most.

16:52.680 --> 17:01.440
But since the image is just metadata, it's very cheap to create a completely squashed

17:01.440 --> 17:06.840
composed FS image for single layer lookups.

17:06.840 --> 17:11.520
And I don't know if anyone is following the list, but there are some discussions about

17:11.520 --> 17:12.520
this.

17:12.520 --> 17:14.960
I'm trying to get it merged upstream.

17:14.960 --> 17:22.320
And one alternative has appeared, that there's waste, you can actually use some of OverlyFS

17:22.320 --> 17:27.200
features to sort of get these features.

17:27.200 --> 17:33.320
If you use the not super well-known or documented features called Overlay redirect and Overlay

17:33.320 --> 17:42.360
metacopy, you can create an OverlayFS layer that does a similar style of here are the

17:42.360 --> 17:49.240
metadata for this attribute redirected to a different path, which would be the content

17:49.240 --> 17:52.040
address name in the lower layer.

17:52.040 --> 17:57.080
And then you can use some kind of read-only file system for the upper layer where you

17:57.080 --> 18:02.620
store all these extended attribute files that just contain this structure.

18:02.620 --> 18:13.080
So this combination of OverlayFS plus right now EROFS is probably the best approach for

18:13.080 --> 18:16.800
those, for the upper layer.

18:16.800 --> 18:18.760
You can sort of create this.

18:18.760 --> 18:21.800
Unfortunately, that doesn't do the verification.

18:21.800 --> 18:28.320
You can use DVRT on the Overlay, or I mean on the read-only file system itself.

18:28.320 --> 18:35.720
But you need some kind of extension to overlay itself to allow this recording of the expected

18:35.720 --> 18:37.760
Fs verity of the backing file.

18:37.760 --> 18:41.080
But that does seem like a trivial thing.

18:41.080 --> 18:47.680
The less trivial part, and this is where opinions on the list vary, is I think this kind of

18:47.680 --> 18:56.120
combination of things is way more complicated than the simple, like composeFS is, I think,

18:56.120 --> 18:58.560
100 lines of code.

18:58.560 --> 19:00.280
It's very direct.

19:00.280 --> 19:05.200
It doesn't use loopback devices, device buffer devices.

19:05.200 --> 19:12.960
When you do a lookup in this combined thing of a particular file, you would do a lookup

19:12.960 --> 19:22.600
in the Overlay layer in the read-only system and in all the backing layers.

19:22.600 --> 19:30.200
So there's just like four times more INODES around, there's four times more D-cache lookups,

19:30.200 --> 19:35.000
and it just uses more memory and performs worse.

19:35.000 --> 19:37.360
So I ran some simple lookups.

19:37.360 --> 19:40.720
These are just, some people complain about the measurements here.

19:40.720 --> 19:49.720
I'm just comparing like a recursive find or L-S-L-R, which is basically just measuring

19:49.720 --> 19:54.200
the performance of lookups and readers.

19:54.200 --> 19:58.160
But on the other hand, that's all that composeFS does.

19:58.160 --> 20:03.120
All the actual IO performance is left to the backing file system.

20:03.120 --> 20:07.280
So wherever you store your real files, that's where streaming performance and things like

20:07.280 --> 20:08.920
that would appear.

20:08.920 --> 20:17.280
So I'm personally in the automotive use case right now, so we have very harsh requirements

20:17.280 --> 20:24.880
on cool boot performance, so the cold cache numbers are very important to me.

20:24.880 --> 20:30.120
I mean, you might not, this is like listing recursively a large developer snapshot, like

20:30.120 --> 20:33.440
a three gigabyte CentroStream 9 image.

20:33.440 --> 20:39.760
So it's not an operation you might do, but just looking at the numbers, the recursive

20:39.760 --> 20:46.240
listing is more than like three times slower for the cold cache situation because it has

20:46.240 --> 20:50.120
to do multiple lookups.

20:50.120 --> 20:56.680
And even for the cached case, where most things should be from the decached anyway, that's,

20:56.680 --> 20:59.760
you know, I think I've seen better numbers than this.

20:59.760 --> 21:09.200
I think that, but there's at least 10% difference in the warm cache situation.

21:09.200 --> 21:12.360
I hope that was useful to someone.

21:12.360 --> 21:17.280
Yeah, we have some time for questions.

21:17.280 --> 21:22.760
So you said about halfway through that you're, one of the goals was to actually keep the,

21:22.760 --> 21:27.480
reading the OCI image format, but I think everybody pretty much agrees the OCI image

21:27.480 --> 21:33.680
format is crap for lazy pulling of container images.

21:33.680 --> 21:37.000
Basically because it has an end to end hash, so you can't do the hash until you pull the

21:37.000 --> 21:38.000
whole image.

21:38.000 --> 21:40.200
And that means signatures are completely rubbish anyway.

21:40.200 --> 21:44.360
In order to fix this, we have to do a Merkle tree or something else anyway.

21:44.360 --> 21:48.440
So the image format is going to have to change radically to something that will be much

21:48.440 --> 21:50.240
more suitable for your image.

21:50.240 --> 21:55.640
So I think trying to keep the image compatibility, which is partly what the argument over this

21:55.640 --> 22:02.080
versus the internal alternatives is not going to be a good argument for that.

22:02.080 --> 22:03.080
And I think you should consider.

22:03.080 --> 22:04.240
I agree and I don't agree.

22:04.240 --> 22:07.200
I mean, I think I'm not a fan of OCI.

22:07.200 --> 22:11.920
I've been part of the OCI specification team for a bit.

22:11.920 --> 22:15.800
I used to be one of the Docker maintainers a long time ago.

22:15.800 --> 22:21.560
It is not nice, but it is what we have and it's everywhere.

22:21.560 --> 22:26.280
It's so easy as a developer sitting around thinking this is bullshit, we should just

22:26.280 --> 22:28.340
fix it.

22:28.340 --> 22:32.400
But there are trillions of dollars invested in the existing containers.

22:32.400 --> 22:34.640
It's going to be a long time.

22:34.640 --> 22:37.960
Even when we replace it, this will still do the right thing.

22:37.960 --> 22:38.960
True.

22:38.960 --> 22:39.960
True.

22:39.960 --> 22:47.960
But like there are discussions of OCI v2.

22:47.960 --> 22:52.760
I don't follow them because the whole thing is bullshit.

22:52.760 --> 22:59.640
But even then, if we just had a better way to get partial updates for an image file,

22:59.640 --> 23:03.680
you could still use this to use it.

23:03.680 --> 23:10.240
Before taking the next question, I'm obliged to point out from the chat that these performance

23:10.240 --> 23:13.120
numbers are before optimizing overlay FS and E-ROVs.

23:13.120 --> 23:14.120
Yeah.

23:14.120 --> 23:15.120
So, yeah.

23:15.120 --> 23:19.760
There's been some work in that and optimizing.

23:19.760 --> 23:26.560
There's ideas to make the overlays stuff work better.

23:26.560 --> 23:27.560
Would that be possible?

23:27.560 --> 23:28.560
Sure.

23:28.560 --> 23:29.560
Maybe.

23:29.560 --> 23:34.640
Oh, hi.

23:34.640 --> 23:39.280
I actually still had a question.

23:39.280 --> 23:40.280
So here in the back.

23:40.280 --> 23:44.480
Well, it's not really a question, more a remark.

23:44.480 --> 23:48.480
I think there's sort of like one missing slide in your deck, namely one use case that you

23:48.480 --> 23:53.040
haven't considered at all but still really worth calling out.

23:53.040 --> 24:00.480
Many remote build systems, such as like GOMA, Bazel, et cetera, are all nowadays converging

24:00.480 --> 24:05.160
on the single remote execution protocol called RE v2.

24:05.160 --> 24:08.760
And that one is actually also using a CAS as a data store for storing both input files

24:08.760 --> 24:13.400
for like compiler binaries, source files, header files, but also output files, object

24:13.400 --> 24:15.720
files that are generated.

24:15.720 --> 24:18.160
I actually maintain one of the implementations.

24:18.160 --> 24:23.960
And one of the hard parts of implementing such a build cluster is instantiating the

24:23.960 --> 24:29.480
data that's stored in the CAS in the form of an input route on disk where you can just

24:29.480 --> 24:32.200
run a compiler against certain source files.

24:32.200 --> 24:35.360
And a tool like Composivest would also really help in such an implementation.

24:35.360 --> 24:36.720
That's just something I wanted to call out.

24:36.720 --> 24:39.960
And you should really also market it towards those kinds of use cases.

24:39.960 --> 24:41.960
It makes a lot of sense.

24:41.960 --> 24:42.960
Yeah.

24:42.960 --> 24:43.960
I'm sure.

24:43.960 --> 24:45.160
Images are used for all sorts of stuff.

24:45.160 --> 24:50.720
I'm sure there are many use cases other than the ones I've mainly focused on.

24:50.720 --> 24:52.360
Okay.

24:52.360 --> 25:00.400
Then since you already ended the Q&A a bit early, then the next talk is going to be recorded.

25:00.400 --> 25:02.680
This gives us a bit more time to prepare.

25:02.680 --> 25:03.920
Thank you very much for the talk.

25:03.920 --> 25:04.920
Thank you for all the questions and being here.

25:04.920 --> 25:30.420
Thank you very much.

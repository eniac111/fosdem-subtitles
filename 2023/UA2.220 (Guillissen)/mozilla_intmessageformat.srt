1
0:00:00.000 --> 0:00:11.480
So hello everyone and thank you very much for resisting this late in the evening.

2
0:00:11.480 --> 0:00:17.720
And we have our last talk and we have Emil Liharo.

3
0:00:17.720 --> 0:00:22.760
And you welcome Odyssejia on the localization system and tool chain management and he's

4
0:00:22.760 --> 0:00:27.560
going to have a talk on the road to Int message format.

5
0:00:27.560 --> 0:00:43.200
So the last talk by Matiasz if you were here was a lot about where we are now, what we

6
0:00:43.200 --> 0:00:49.320
can provide now already in pontoon and otherwise, how localization is now happening at Mozilla.

7
0:00:49.320 --> 0:00:55.520
What I'm going to be talking to you about is what's kind of coming up, what are some

8
0:00:55.520 --> 0:01:01.560
of the next things in localization that we're working on and that we think are really quite

9
0:01:01.560 --> 0:01:03.040
important.

10
0:01:03.040 --> 0:01:12.440
And so yeah, I'm on the same thing with Matiasz and my staff, software engineer, but I've

11
0:01:12.440 --> 0:01:18.000
been doing this sort of stuff kind of for fun, for ages it feels like now.

12
0:01:18.000 --> 0:01:23.320
So turns out that when you get really into localization in JavaScript in particular,

13
0:01:23.320 --> 0:01:28.520
there aren't too many other people who are that into it and then somehow you might end

14
0:01:28.520 --> 0:01:32.520
up hired by Mozilla to do the things you were doing for fun, for pay.

15
0:01:32.520 --> 0:01:33.520
So that's kind of nice.

16
0:01:33.520 --> 0:01:38.920
Hint, hint, you know, it's a good company.

17
0:01:38.920 --> 0:01:44.320
In addition to working just on code at Mozilla, I spent a lot of time in a bunch of different

18
0:01:44.320 --> 0:01:50.040
standards bodies working on the standards for localization in particular.

19
0:01:50.040 --> 0:01:55.360
And some of the work I'm presenting here is really the work that's going elsewhere than

20
0:01:55.360 --> 0:02:02.280
just at Mozilla because we want to have, we fundamentally want to make the world a better

21
0:02:02.280 --> 0:02:07.680
place, the internet a better place for everyone, not just Firefox users, but everyone's internet

22
0:02:07.680 --> 0:02:09.920
is better if they use Firefox.

23
0:02:09.920 --> 0:02:14.400
But you're here so you might have heard this one before.

24
0:02:14.400 --> 0:02:21.360
On localization, this is again covering a bit of what Matias was saying, that quite

25
0:02:21.360 --> 0:02:27.040
often localization is one of those aspects of how do you really build an application

26
0:02:27.040 --> 0:02:32.360
or a site or anything that comes up way too late.

27
0:02:32.360 --> 0:02:37.240
You end up making some choices early on and then you end up needing to live with those

28
0:02:37.240 --> 0:02:39.640
choices later.

29
0:02:39.640 --> 0:02:42.920
And they might not be the best stuff, best ones.

30
0:02:42.920 --> 0:02:47.960
And the need for localization comes after you've made the choices or you discover that,

31
0:02:47.960 --> 0:02:51.520
hey, this thing, oh, good grief, we need to support Arabic now.

32
0:02:51.520 --> 0:02:53.440
That will be interesting.

33
0:02:53.440 --> 0:03:00.400
And a lot of the sort of scope of localization is interesting because there isn't necessarily

34
0:03:00.400 --> 0:03:04.080
one right answer.

35
0:03:04.080 --> 0:03:08.720
So of course we're working on a new right answer and, you know, there's an XKCD comic

36
0:03:08.720 --> 0:03:09.720
on that.

37
0:03:09.720 --> 0:03:11.240
I don't have it on these slides.

38
0:03:11.240 --> 0:03:12.240
Don't worry.

39
0:03:12.240 --> 0:03:14.960
I'm not sure what I'm talking about.

40
0:03:14.960 --> 0:03:18.440
So things could definitely be better.

41
0:03:18.440 --> 0:03:25.240
So we're trying to make some of this improvement happen.

42
0:03:25.240 --> 0:03:28.760
It should be easier to localize content.

43
0:03:28.760 --> 0:03:38.080
And there should be a common way of doing this so that the experience and the benefits

44
0:03:38.080 --> 0:03:43.320
that you get from using software and libraries in one place can map to elsewhere.

45
0:03:43.320 --> 0:03:49.880
Right now there's a lot of differences in how localization ends up depending on the formats

46
0:03:49.880 --> 0:03:52.880
you use and the tool chains you use and all of this.

47
0:03:52.880 --> 0:03:56.560
And that is not optimal.

48
0:03:56.560 --> 0:04:03.480
And fundamentally a lot of actually when you start getting deep into it, UI and UX design

49
0:04:03.480 --> 0:04:09.640
ends up being limited to some extent by the fact that most of localization work is working

50
0:04:09.640 --> 0:04:18.880
around strings rather than the complex structures like HTML allows us to represent and other

51
0:04:18.880 --> 0:04:21.720
aspects that make life more complicated.

52
0:04:21.720 --> 0:04:24.000
So we want to improve all of that.

53
0:04:24.000 --> 0:04:28.240
So let's start with this.

54
0:04:28.240 --> 0:04:30.680
This is nominally something simple.

55
0:04:30.680 --> 0:04:35.400
Basically most of you can read HTML to figure out that here we have this small little span

56
0:04:35.400 --> 0:04:39.120
that says that Brussels is the capital of Belgium.

57
0:04:39.120 --> 0:04:40.120
I've lived here.

58
0:04:40.120 --> 0:04:42.520
I know it's more complicated than that.

59
0:04:42.520 --> 0:04:44.720
Let's just go on.

60
0:04:44.720 --> 0:04:46.440
And Brussels here happens to be a link.

61
0:04:46.440 --> 0:04:49.000
So how do we make this localizable?

62
0:04:49.000 --> 0:04:57.120
How do we actually localize this in a way that works really in the end for everyone?

63
0:04:57.120 --> 0:05:02.760
And one way that we're trying to sort of build towards is something a little bit like this

64
0:05:02.760 --> 0:05:09.080
that you could add an identifier to the element there where you say that this is the Brussels

65
0:05:09.080 --> 0:05:13.160
message that we're really dealing with and include in the HTML something like what we

66
0:05:13.160 --> 0:05:18.040
have for CSS now where you say that here's this resource that's attached.

67
0:05:18.040 --> 0:05:22.640
Here's a link to a resource that's necessary for figuring out what's really the content

68
0:05:22.640 --> 0:05:24.080
of this page.

69
0:05:24.080 --> 0:05:30.120
And then separately you have a message here in Finnish because I can and I could not pick

70
0:05:30.120 --> 0:05:33.080
between French and Flemish because it gets complicated.

71
0:05:33.080 --> 0:05:34.080
I've lived here.

72
0:05:34.080 --> 0:05:35.080
I know.

73
0:05:35.080 --> 0:05:39.920
Brussels is a very simple language.

74
0:05:39.920 --> 0:05:44.440
And here the format that we're using, I'm going to get to that later, but there's a

75
0:05:44.440 --> 0:05:46.080
couple of interesting things here.

76
0:05:46.080 --> 0:05:52.480
In particular the fact that we're marking up the Brussels text there as the contents

77
0:05:52.480 --> 0:05:59.440
of the text of a link so that we'll be able to map that to the link, the Ahref that we

78
0:05:59.440 --> 0:06:03.320
have in the source document there in English.

79
0:06:03.320 --> 0:06:08.960
And because it's, you know, of course a little bit more complicated than this, it happens

80
0:06:08.960 --> 0:06:10.160
to be a link to Wikipedia.

81
0:06:10.160 --> 0:06:16.440
So in this particular case, but not usually at all, we could allow the translator to say

82
0:06:16.440 --> 0:06:21.440
that hang on, this link in Finnish should really go to the Finnish Wikipedia page on

83
0:06:21.440 --> 0:06:25.120
Brussels rather than the English one.

84
0:06:25.120 --> 0:06:31.280
And this is like, I can present to you, you can see the screen, you can kind of get what

85
0:06:31.280 --> 0:06:35.840
you're looking at here, but honestly getting this to a state where you can get a translator

86
0:06:35.840 --> 0:06:41.800
who's not a developer to see this and understand what they're supposed to do and not screw

87
0:06:41.800 --> 0:06:47.580
it up and provide useful things, useful content in all the languages, well, the languages

88
0:06:47.580 --> 0:06:51.340
that this translator is working on, it gets kind of hard.

89
0:06:51.340 --> 0:06:55.280
So we're trying to, you know, make that a thing.

90
0:06:55.280 --> 0:07:01.400
And the rest of this presentation is really going to answer these three questions that

91
0:07:01.400 --> 0:07:05.400
I kind of would have hoped some of you would be asking, but you're not.

92
0:07:05.400 --> 0:07:08.600
They're really questions in my head I wish you would be asking, you might have as well.

93
0:07:08.600 --> 0:07:13.560
But these are the questions of the theoretical guy in my head might be asking, what's the

94
0:07:13.560 --> 0:07:15.680
format of this thing that we just saw?

95
0:07:15.680 --> 0:07:18.640
And is this really going to work like everywhere?

96
0:07:18.640 --> 0:07:22.080
And how's this going to make my life better now?

97
0:07:22.080 --> 0:07:25.480
Or do I need to start using this whole new thing?

98
0:07:25.480 --> 0:07:26.480
And that's going to be a pain.

99
0:07:26.480 --> 0:07:28.240
So I don't want to do that.

100
0:07:28.240 --> 0:07:36.640
To tackle the first one, the answer ultimately to all of that is to standardize everything.

101
0:07:36.640 --> 0:07:41.840
And the first thing we're going to talk about standardizing is the message there itself.

102
0:07:41.840 --> 0:07:45.920
And one particular thing that some of you might have noticed is that it had curly braces

103
0:07:45.920 --> 0:08:00.160
around the text there, around the Bruce cell on the back up.

104
0:08:00.160 --> 0:08:04.960
And this is because it turns out that when you're building a message formatting language

105
0:08:04.960 --> 0:08:09.320
like this, oh, good grief, all the corner cases.

106
0:08:09.320 --> 0:08:15.700
Oh, good grief, is it like hard, like proper hard because you're trying to write a formatting

107
0:08:15.700 --> 0:08:22.240
language that developers understand and then get the developers to write content in that

108
0:08:22.240 --> 0:08:27.520
language that translators understand without needing to have the developers necessarily

109
0:08:27.520 --> 0:08:29.880
understand how translators think.

110
0:08:29.880 --> 0:08:34.160
So you need to find an intermediate language for the communication to happen that explicitly

111
0:08:34.160 --> 0:08:39.720
limits and forces the communication to work in a way that works.

112
0:08:39.720 --> 0:08:44.500
And this is one of the reasons why some parts of this work have been in the active standards

113
0:08:44.500 --> 0:08:46.720
but for like three years so far.

114
0:08:46.720 --> 0:08:55.940
But one reason for those curly braces there is that quite often messages get complicated

115
0:08:55.940 --> 0:09:02.300
because you need to vary different parts of them depending on different variables.

116
0:09:02.300 --> 0:09:10.640
In English, for instance, it matters, is it a he or a she or a they who might have done

117
0:09:10.640 --> 0:09:14.200
the action here of sent an invite to a party.

118
0:09:14.200 --> 0:09:21.560
So we need to have a language message format two which I'm presenting to you here to enable

119
0:09:21.560 --> 0:09:24.320
this sort of a communication.

120
0:09:24.320 --> 0:09:26.440
And of course it gets more complicated than this.

121
0:09:26.440 --> 0:09:33.280
Because you can have stuff like here we have a need to include something more in the message

122
0:09:33.280 --> 0:09:40.360
of the relative time, like say three days ago that's included here.

123
0:09:40.360 --> 0:09:46.920
So the language needs to allow for internal variables for this message to be definable

124
0:09:46.920 --> 0:09:52.400
in a way that translators can kind of see what's going on and hopefully not touch it

125
0:09:52.400 --> 0:09:56.280
too much because hopefully they don't need to do that but still be able to do so if they

126
0:09:56.280 --> 0:09:59.520
really really need to.

127
0:09:59.520 --> 0:10:07.560
So this is about the space of what's possible in most current, no, in some of the current

128
0:10:07.560 --> 0:10:14.400
message formatting languages, at least Project Fluent which we maintain and work with and

129
0:10:14.400 --> 0:10:16.280
maybe one or two of those.

130
0:10:16.280 --> 0:10:23.240
But when it gets really more complicated than that, this gets on the edges of not really

131
0:10:23.240 --> 0:10:26.000
even supported anywhere.

132
0:10:26.000 --> 0:10:31.040
When you have here what we have are multiple different variables being defined and then

133
0:10:31.040 --> 0:10:36.400
the matching on which of these messages really the message we're building, it depends on

134
0:10:36.400 --> 0:10:41.840
how many people as well as the agenda of the host.

135
0:10:41.840 --> 0:10:48.720
So this isn't even a full listing of the whole set of possible when cases that could be selected

136
0:10:48.720 --> 0:10:50.840
here.

137
0:10:50.840 --> 0:10:53.880
But this is all possible.

138
0:10:53.880 --> 0:11:02.280
It quite often happens when you really want to formulate UX experience that is approaching

139
0:11:02.280 --> 0:11:05.040
natural language.

140
0:11:05.040 --> 0:11:08.080
And this is again referring to what I mentioned earlier.

141
0:11:08.080 --> 0:11:15.520
A lot of this stuff just isn't, is the choices that people are making now regarding message

142
0:11:15.520 --> 0:11:20.560
formatting, how do they formulate it, are driven by the limitations of the technologies

143
0:11:20.560 --> 0:11:22.400
that we have available for us.

144
0:11:22.400 --> 0:11:29.240
So UX itself is being driven in certain directions because message formatting is hard.

145
0:11:29.240 --> 0:11:35.360
You don't end up really having messages like this in your UI if you care about localization

146
0:11:35.360 --> 0:11:41.360
because whoever is filtering your messages before they go to the translators, the localizers,

147
0:11:41.360 --> 0:11:43.200
is going to tell you, yeah, no, you can't do that.

148
0:11:43.200 --> 0:11:45.460
They're not going to ever be able to work with it.

149
0:11:45.460 --> 0:11:46.720
So please fix.

150
0:11:46.720 --> 0:11:50.800
And then you end up even maybe building the UI differently in order to accommodate these

151
0:11:50.800 --> 0:11:52.240
needs.

152
0:11:52.240 --> 0:11:57.680
With message format two, which this is, I kind of hope we can get beyond that.

153
0:11:57.680 --> 0:12:05.840
Have the possibility and the options of having even richer content in everything that we're

154
0:12:05.840 --> 0:12:07.680
working with.

155
0:12:07.680 --> 0:12:13.640
But the second question there was about is this really going to work everywhere?

156
0:12:13.640 --> 0:12:14.640
And yes.

157
0:12:14.640 --> 0:12:21.240
And we're doing that by trying to make much of the work happen at the lowest possible

158
0:12:21.240 --> 0:12:23.240
appropriate level for the work.

159
0:12:23.240 --> 0:12:28.520
So a lot of this is happening in the Unicode Consortium, and then we've got work going

160
0:12:28.520 --> 0:12:32.440
on in TC39 for JavaScript.

161
0:12:32.440 --> 0:12:39.080
It's being added to the ICU libraries provided by Unicode as well.

162
0:12:39.080 --> 0:12:47.200
And eventually we're hoping to get probably in What We G, discussions ongoing about the

163
0:12:47.200 --> 0:12:53.560
structure of the HTML stuff that I was showing you earlier, because that doesn't exist either

164
0:12:53.560 --> 0:12:54.560
yet.

165
0:12:54.560 --> 0:13:02.040
And one particular part of this, my background is as a JavaScript developer, is that this

166
0:13:02.040 --> 0:13:07.400
is the first time we're really adding something to the JavaScript language itself at the level

167
0:13:07.400 --> 0:13:15.520
of JSON.parse where you have this string representation of a thing that's not JavaScript and you get

168
0:13:15.520 --> 0:13:17.400
an object or a thing out of it.

169
0:13:17.400 --> 0:13:19.080
I think that's really cool.

170
0:13:19.080 --> 0:13:21.280
But we're still working on that.

171
0:13:21.280 --> 0:13:32.600
And the part here that makes this extra interesting is that we're not just talking about a new

172
0:13:32.600 --> 0:13:33.720
syntax.

173
0:13:33.720 --> 0:13:41.280
But effectively through the work we've been doing, it's looking an awful lot like everything

174
0:13:41.280 --> 0:13:46.920
in every single message formatting language that currently exists and is in use somewhere

175
0:13:46.920 --> 0:13:52.520
that is, you know, that we can know about that is not like closed and proprietary is

176
0:13:52.520 --> 0:13:57.800
supported in the data model that we end up with for message format 2.

177
0:13:57.800 --> 0:14:03.360
So for example, to answer the earlier talks, questions about how do you get support for

178
0:14:03.360 --> 0:14:12.720
something like Fluent into software like Translate Toolkit, one quite probable answer for the

179
0:14:12.720 --> 0:14:18.480
general case of this is that what you'll be able to do is take messages that you have

180
0:14:18.480 --> 0:14:27.240
in.properties files, Fluent, get text, xlyph, pretty much anything, and parse that into

181
0:14:27.240 --> 0:14:33.720
a defined data model structure for message format 2, then be able to work with that using

182
0:14:33.720 --> 0:14:42.040
tools, runtime, whatever, and possibly from there get it out in a different format altogether

183
0:14:42.040 --> 0:14:44.880
that's then supported by other tooling.

184
0:14:44.880 --> 0:14:50.760
So it's a lot of this work is trying to figure out that, hang on, messages aren't really

185
0:14:50.760 --> 0:14:54.480
all that complicated as data structures in the end.

186
0:14:54.480 --> 0:15:00.040
However, we can at least express the level of that complexity.

187
0:15:00.040 --> 0:15:04.800
So we should enable.

188
0:15:04.800 --> 0:15:13.800
Hello again.

189
0:15:13.800 --> 0:15:18.680
So yeah.

190
0:15:18.680 --> 0:15:20.720
Think I was about done with this slide.

191
0:15:20.720 --> 0:15:24.320
Going on.

192
0:15:24.320 --> 0:15:30.760
One key part here is that all of this is already real.

193
0:15:30.760 --> 0:15:40.800
So what I showed you in HTML is not exactly what we use internally at Mozilla, but it's

194
0:15:40.800 --> 0:15:46.920
effectively the same as how Firefox is now already translated.

195
0:15:46.920 --> 0:15:52.200
We have by now literal years of experience of working with tooling like this and seeing

196
0:15:52.200 --> 0:16:00.000
how it empowers UI UX development of a relatively complicated piece of software like Firefox

197
0:16:00.000 --> 0:16:07.320
to improve itself and to enable easier and better communication between developers and

198
0:16:07.320 --> 0:16:09.440
translators.

199
0:16:09.440 --> 0:16:16.760
And so we're bringing a lot of that knowledge and experience into what we're doing in the

200
0:16:16.760 --> 0:16:23.720
Unicode Consortium when designing message format two, which is yes, taking inspiration,

201
0:16:23.720 --> 0:16:34.560
but also learnings from Fluent and many other systems that make it honestly a better, better

202
0:16:34.560 --> 0:16:39.360
than Fluent currently is, for instance, which is why we're not pitching that as the really

203
0:16:39.360 --> 0:16:40.920
cool sexy thing.

204
0:16:40.920 --> 0:16:44.360
Even though, I mean, if you're interested, there is the currently coolest thing around

205
0:16:44.360 --> 0:16:45.440
that's real.

206
0:16:45.440 --> 0:16:48.240
This is still in progress.

207
0:16:48.240 --> 0:16:52.920
So you could be interested in that.

208
0:16:52.920 --> 0:16:59.660
As I mentioned, the syntax itself for messages is getting defined under the Unicode Common

209
0:16:59.660 --> 0:17:03.720
Language Data Repository Technical Committee.

210
0:17:03.720 --> 0:17:07.000
There's a working, it gets complicated in these things.

211
0:17:07.000 --> 0:17:14.200
And there's an implementation available in ICU 72 for Java.

212
0:17:14.200 --> 0:17:20.120
And the JavaScript proposals, there's two of them at stage one currently for this, are

213
0:17:20.120 --> 0:17:26.140
progressing in TC39, which is the body that defines JavaScript effectively.

214
0:17:26.140 --> 0:17:31.880
And there's a polyfill package for JavaScript if you want to start playing around with what

215
0:17:31.880 --> 0:17:35.600
message format two looks like and how you can work with it.

216
0:17:35.600 --> 0:17:44.040
But yeah, all of this is, of course, completely public.

217
0:17:44.040 --> 0:17:49.080
All of the repositories, all of the work standards are being developed completely in the open.

218
0:17:49.080 --> 0:17:54.720
And I mean, honestly, localization is one of those weird places where we don't need

219
0:17:54.720 --> 0:17:58.960
to filter anyone on credentials for anything.

220
0:17:58.960 --> 0:18:05.800
Because in terms of who wants to actually participate in the standards actions and standards

221
0:18:05.800 --> 0:18:09.780
work, it's enough that you show up and you show some level of interest and we'll let

222
0:18:09.780 --> 0:18:17.920
you in in all the inside clubs because there aren't any.

223
0:18:17.920 --> 0:18:23.240
It's a community where really you can, if you're interested, you should not be afraid

224
0:18:23.240 --> 0:18:28.040
of someone saying, no, you don't belong here because you do.

225
0:18:28.040 --> 0:18:31.000
We need always more people participating.

226
0:18:31.000 --> 0:18:34.920
Yeah, there's links to me as well.

227
0:18:34.920 --> 0:18:38.840
And also this talk is available at the URL there at the bottom.

228
0:18:38.840 --> 0:18:43.560
It's also attached to the talk on Pentabarth.

229
0:18:43.560 --> 0:18:48.400
But yeah, that was me.

230
0:18:48.400 --> 0:18:58.400
Are there any questions?

231
0:18:58.400 --> 0:19:01.400
Are there any questions?

232
0:19:01.400 --> 0:19:22.000
Give me the mic and I'll repeat the question.

233
0:19:22.000 --> 0:19:28.600
The question is, was what really makes message format two better than fluent?

234
0:19:28.600 --> 0:19:37.320
And one particular example is when you get to complicated stuff like this, is having

235
0:19:37.320 --> 0:19:44.720
the effectively enforcing the data structure that you end up getting from this to be one

236
0:19:44.720 --> 0:19:54.040
that contains full messages that you end up representing to translators.

237
0:19:54.040 --> 0:19:59.120
Other than this, it gets into really nitty gritty details.

238
0:19:59.120 --> 0:20:06.640
The other big benefit of message format two over fluent is that message format two is

239
0:20:06.640 --> 0:20:15.720
becoming a Unicode standard rather than effectively a project built entirely from within Mozilla.

240
0:20:15.720 --> 0:20:24.360
I see you use some kind of typing in those iterations.

241
0:20:24.360 --> 0:20:31.880
Are those standard as well?

242
0:20:31.880 --> 0:20:37.800
So the question here is about seeing the sort of typing that you see, the colon number and

243
0:20:37.800 --> 0:20:44.680
the colon relative time and actually the colon gender is the same sort of thing here.

244
0:20:44.680 --> 0:20:49.400
What are those and are these custom or centrally defined?

245
0:20:49.400 --> 0:20:51.160
And the answer is kind of yes and no.

246
0:20:51.160 --> 0:20:54.200
And it's complicated.

247
0:20:54.200 --> 0:20:59.280
Because what you're looking at here are effectively functions that act a little bit like types,

248
0:20:59.280 --> 0:21:01.000
but they're not exactly like types.

249
0:21:01.000 --> 0:21:06.380
They're declaring, for example, that the count that we're getting, let's handle it as a number,

250
0:21:06.380 --> 0:21:11.640
but also let's in the value of it that we end up assigning to count other use an offset

251
0:21:11.640 --> 0:21:12.920
of one.

252
0:21:12.920 --> 0:21:16.960
So it's an operation happening on the input argument count.

253
0:21:16.960 --> 0:21:22.360
And on the third line in the match for the host's gender, we could imagine host being

254
0:21:22.360 --> 0:21:28.040
some complicated object that's defining a whole person and we're picking the gender

255
0:21:28.040 --> 0:21:31.640
information from that more complex thing.

256
0:21:31.640 --> 0:21:36.480
But yes, in many cases they work kind of like types.

257
0:21:36.480 --> 0:21:45.080
And these are the capital number, capital date time and capital platform functions that

258
0:21:45.080 --> 0:21:51.960
can be used in this sort of way as well.

259
0:21:51.960 --> 0:21:52.960
Just be loud.

260
0:21:52.960 --> 0:21:53.960
I'll repeat your question.

261
0:21:53.960 --> 0:22:07.160
So in the beginning you kind of talked about how translating is supposed to be no text,

262
0:22:07.160 --> 0:22:17.160
but it's more structured and you showed the example with the anchors.

263
0:22:17.160 --> 0:22:24.160
And then it sort of escalates to what's actually in this locale, this whole structure of the

264
0:22:24.160 --> 0:22:26.160
page doesn't make any sort of sense anymore.

265
0:22:26.160 --> 0:22:30.160
So we have to kind of like switch things around a lot based on the locale.

266
0:22:30.160 --> 0:22:37.160
And I'm wondering if you have any thoughts on like what's out of scope here perhaps and

267
0:22:37.160 --> 0:22:44.160
if there are any other tools in development that you know of that kind of like are supposed

268
0:22:44.160 --> 0:22:54.160
to encompass not just message forwarding on small sentences or whatever but also just

269
0:22:54.160 --> 0:22:58.480
restructuring pages based on different locales.

270
0:22:58.480 --> 0:23:05.480
So if I've understood the question is what happens when you have a complicated thing

271
0:23:05.480 --> 0:23:12.360
like a whole page that you're translating and in comparing the source locale and the

272
0:23:12.360 --> 0:23:20.040
target locale, the target locale ends up having very different structure that might go much

273
0:23:20.040 --> 0:23:25.920
deeper I suppose than just a simple link that I'm showing in this example of how does this

274
0:23:25.920 --> 0:23:27.360
really work.

275
0:23:27.360 --> 0:23:32.960
The answer is it's complicated and it depends on your use case.

276
0:23:32.960 --> 0:23:42.320
This work in particular is trying to build tools that could enable that sort of representation

277
0:23:42.320 --> 0:23:50.680
within message format 2 so you could end up somewhere really complicated but you probably

278
0:23:50.680 --> 0:23:52.520
don't want to.

279
0:23:52.520 --> 0:23:59.360
You're probably in that sort of a situation needing to build more tools that are more

280
0:23:59.360 --> 0:24:01.120
specific to the use case that you have.

281
0:24:01.120 --> 0:24:06.240
When you have, when you need to reformat a whole page in order to work with a specific

282
0:24:06.240 --> 0:24:11.360
locale it's, there is no universal answer to this.

283
0:24:11.360 --> 0:24:16.220
This is the closest thing but I don't know where it's really going to go.

284
0:24:16.220 --> 0:24:20.560
We have a question in the live stream.

285
0:24:20.560 --> 0:24:22.720
Translators often are not programmers.

286
0:24:22.720 --> 0:24:28.120
They already struggle with translating strings with HTML tags and other technical terms.

287
0:24:28.120 --> 0:24:34.560
The message format curly braces syntax might be difficult to understand and error prone.

288
0:24:34.560 --> 0:24:40.720
So here we're talking about something, let's take this example of if you put this in front

289
0:24:40.720 --> 0:24:42.520
of a translator.

290
0:24:42.520 --> 0:24:46.880
Yeah, you don't.

291
0:24:46.880 --> 0:24:49.640
This is not really what we want to do.

292
0:24:49.640 --> 0:24:57.800
What we want to do is create a format that enables a, like HTML, a representation of

293
0:24:57.800 --> 0:25:08.320
something like a message in a way that is relatively readable but is not necessarily

294
0:25:08.320 --> 0:25:13.400
easy to edit and modify for someone who doesn't exactly know what they're dealing with.

295
0:25:13.400 --> 0:25:19.040
A little bit like what happens if you take JSON and put it into a Word document and then

296
0:25:19.040 --> 0:25:24.640
you start editing it and then you have to figure out that, oh, there's a curly quote

297
0:25:24.640 --> 0:25:26.960
somewhere that ended up screwing that.

298
0:25:26.960 --> 0:25:32.320
This sort of thing can happen entirely well when you end up dealing with complicated messages

299
0:25:32.320 --> 0:25:33.680
like this.

300
0:25:33.680 --> 0:25:40.640
So the answer here is that you end up using tooling that gets this to not be presented

301
0:25:40.640 --> 0:25:49.680
as one thing to a translator but three, yeah, in this case, three or more different messages

302
0:25:49.680 --> 0:25:59.280
where you end up asking a translator wants to translate name, invited you to her party

303
0:25:59.280 --> 0:26:01.680
on relative date.

304
0:26:01.680 --> 0:26:09.280
And then second to ask them to translate name invited you to his party on relative date.

305
0:26:09.280 --> 0:26:15.040
And in Finnish, allow a translator because Finnish doesn't, he and she translated the

306
0:26:15.040 --> 0:26:16.200
same word.

307
0:26:16.200 --> 0:26:20.720
So in Finnish, the equivalent of this message would end up being effectively just the third

308
0:26:20.720 --> 0:26:25.340
case without the whole matching because the structure of the language works differently.

309
0:26:25.340 --> 0:26:31.280
So you do end up, when working with messages of this level of complexity, effectively needed

310
0:26:31.280 --> 0:26:33.080
to rely on tooling.

311
0:26:33.080 --> 0:26:39.920
But the wonderful thing about message format two is that we can transform this representation

312
0:26:39.920 --> 0:26:45.920
of this message into any other representation of this message that's hopefully going to

313
0:26:45.920 --> 0:26:50.200
work with whatever tooling is then available for the actual translation work to happen

314
0:26:50.200 --> 0:26:51.200
in.

315
0:26:51.200 --> 0:26:59.200
So, X-Lift two, for instance, or other targets that are commonly supported by software used

316
0:26:59.200 --> 0:27:08.120
for translation, or some really simple representation that can be mapped then back to this, but

317
0:27:08.120 --> 0:27:14.160
still allows a translator to just see a simpler thing at once rather than a really complicated

318
0:27:14.160 --> 0:27:16.160
thing.

319
0:27:16.160 --> 0:27:21.960
I think there's more questions, but are we out of time?

320
0:27:21.960 --> 0:27:24.280
Two minutes.

321
0:27:24.280 --> 0:27:25.280
Guy in front, yellow.

322
0:27:25.280 --> 0:27:32.280
Okay, so my question is, I can guess that you're targeting the new message format as

323
0:27:32.280 --> 0:27:39.280
a successor of all previous attempts at message format.

324
0:27:39.280 --> 0:27:48.280
Technically, it is relatively easy to make sure that everything representable in previous

325
0:27:48.280 --> 0:27:51.280
message format is representable in the new one.

326
0:27:51.280 --> 0:27:58.280
How are you solving the problem that you are really encompassing all the different languages

327
0:27:58.280 --> 0:28:00.280
in the world?

328
0:28:00.280 --> 0:28:06.280
Because like all the examples we saw were in English, perhaps some of the others might

329
0:28:06.280 --> 0:28:11.280
be like French or another European language.

330
0:28:11.280 --> 0:28:15.280
The case in here is just for female or male.

331
0:28:15.280 --> 0:28:22.280
So, in the same language, it's much more complicated than the noun system.

332
0:28:22.280 --> 0:28:29.280
In some languages, you might be writing a single message in several writing systems.

333
0:28:29.280 --> 0:28:41.280
So, how do you make sure that the new message format encompasses all these different strange

334
0:28:41.280 --> 0:28:44.280
cases for localization?

335
0:28:44.280 --> 0:28:48.280
If I understand the question right, you're asking how do you make sure that this isn't

336
0:28:48.280 --> 0:28:53.280
really what seems to work for English in a couple of languages around English, but hopefully

337
0:28:53.280 --> 0:28:55.280
all the languages?

338
0:28:55.280 --> 0:29:01.280
Or a sizable number of languages.

339
0:29:01.280 --> 0:29:07.280
The short answer here is that with Fluent, we're already doing exactly this using

340
0:29:07.280 --> 0:29:10.280
representation of messages that is very close to this.

341
0:29:10.280 --> 0:29:18.280
So, for instance, at Mozilla, from this experience, we can say that the simpler than this structure

342
0:29:18.280 --> 0:29:24.280
that we have for Fluent ends up working in all of the languages that we need to deal

343
0:29:24.280 --> 0:29:32.280
with through Fluent, which is about 100 for Firefox, 200 overall for all of the different

344
0:29:32.280 --> 0:29:36.280
projects that we are currently translating.

345
0:29:36.280 --> 0:29:46.280
Currently from this, the work being done for message format 2 is by no means done really

346
0:29:46.280 --> 0:29:52.280
from an English language point of view.

347
0:29:52.280 --> 0:29:59.280
After main contributors currently working on the specification, my background is Finnish.

348
0:29:59.280 --> 0:30:04.280
There's a Polish guy, then there's a Romanian, then there's a Sri Lankan.

349
0:30:04.280 --> 0:30:09.280
And there's a couple of others who are on the periphery of this who are from a much

350
0:30:09.280 --> 0:30:12.280
wider variety of backgrounds than this.

351
0:30:12.280 --> 0:30:19.280
So, we are bringing and ensuring that these sorts of considerations are actively being

352
0:30:19.280 --> 0:30:23.280
remembered to be taken care of.

353
0:30:23.280 --> 0:30:26.280
So, to some extent, we are relying on the expertise that we have.

354
0:30:26.280 --> 0:30:32.280
To some extent, we are relying on the experience we have with working with similar formats

355
0:30:32.280 --> 0:30:34.280
than what we're presenting here.

356
0:30:34.280 --> 0:30:43.280
But also, we're trying to build a core specification for message formatting that is sufficiently

357
0:30:43.280 --> 0:30:50.280
small but modular and powerful to then enable the support later on that is required by human

358
0:30:50.280 --> 0:30:51.280
languages.

359
0:30:51.280 --> 0:30:56.280
We're trying to limit to just being able to support human languages, but it might go a

360
0:30:56.280 --> 0:30:59.280
little bit beyond that, too.

361
0:30:59.280 --> 0:31:02.280
I think we're out of time.

362
0:31:02.280 --> 0:31:06.280
I'm very happy to have people come and ask me questions after.

363
0:31:06.280 --> 0:31:07.280
Thank you.

364
0:31:07.280 --> 0:31:35.280
Thank you.


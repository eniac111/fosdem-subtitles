1
0:00:00.000 --> 0:00:10.000
So the next talk is by Andrei on hacking the Linux kernel to get more FPS.

2
0:00:10.000 --> 0:00:11.000
Thank you.

3
0:00:11.000 --> 0:00:12.000
Can you hear me?

4
0:00:12.000 --> 0:00:13.000
It's working.

5
0:00:13.000 --> 0:00:14.000
Hello.

6
0:00:14.000 --> 0:00:15.000
Is it green?

7
0:00:15.000 --> 0:00:16.000
Yes.

8
0:00:16.000 --> 0:00:17.000
Yes.

9
0:00:17.000 --> 0:00:18.000
Okay.

10
0:00:18.000 --> 0:00:19.000
Hello.

11
0:00:19.000 --> 0:00:20.000
Hello.

12
0:00:20.000 --> 0:00:21.000
Hi everyone.

13
0:00:21.000 --> 0:00:27.000
I'm a kernel developer from Brazil and I work for the Open Source Consorteci Yale.

14
0:00:27.000 --> 0:00:30.000
Does anyone here play on Linux?

15
0:00:30.000 --> 0:00:31.000
Okay.

16
0:00:31.000 --> 0:00:32.000
Wow.

17
0:00:32.000 --> 0:00:33.000
Cool.

18
0:00:33.000 --> 0:00:35.720
And I hope it's been great.

19
0:00:35.720 --> 0:00:39.000
And in this talk it's not very, very technical.

20
0:00:39.000 --> 0:00:44.280
It's just collected some work that has been done by a ton of people to make game on Linux

21
0:00:44.280 --> 0:00:47.080
better on the kernel side.

22
0:00:47.080 --> 0:00:52.880
So as you probably know, Linux kernel has not really a roadmap.

23
0:00:52.880 --> 0:00:59.920
It's a lot like trying to implement, oh, we need 10 new file systems by the next year

24
0:00:59.920 --> 0:01:02.200
or any kind of this.

25
0:01:02.200 --> 0:01:05.760
It's all driven by use case.

26
0:01:05.760 --> 0:01:12.440
And I mean, if you don't have any real use case, it will be very hard to get your code

27
0:01:12.440 --> 0:01:14.040
in the kernel.

28
0:01:14.040 --> 0:01:16.320
So it's all about new use case.

29
0:01:16.320 --> 0:01:18.160
So for instance, some use of goals.

30
0:01:18.160 --> 0:01:23.120
We had the Android that pushed a lot of new kinds of kernel like VRM and then a container

31
0:01:23.120 --> 0:01:26.720
that helped us grow the C group's things.

32
0:01:26.720 --> 0:01:32.200
And then the cloud that mess up a little bit in the file system stack.

33
0:01:32.200 --> 0:01:43.000
So in the past before proton and this kind of stuff, games on Linux was not that easy.

34
0:01:43.000 --> 0:01:48.480
We had a lot of native things, but it was really on and off.

35
0:01:48.480 --> 0:01:53.400
And Jlib C has some API.

36
0:01:53.400 --> 0:01:59.160
It's not that stable on the long term.

37
0:01:59.160 --> 0:02:07.560
And to play online, wine wasn't so stable either back then.

38
0:02:07.560 --> 0:02:09.840
So we had some native ports along the way.

39
0:02:09.840 --> 0:02:14.680
And also the source engine was one of these native ports.

40
0:02:14.680 --> 0:02:20.840
And one very interesting example of how the native version is hard to get right.

41
0:02:20.840 --> 0:02:24.440
By tracking finish, it runs very, very bad on native.

42
0:02:24.440 --> 0:02:30.760
But if you run the Windows version for proton, it goes very great.

43
0:02:30.760 --> 0:02:32.880
So it was on and off.

44
0:02:32.880 --> 0:02:39.720
We had a very big financial interest on Game of Linux.

45
0:02:39.720 --> 0:02:42.280
Until things changed.

46
0:02:42.280 --> 0:02:46.080
So proton was announced some years ago.

47
0:02:46.080 --> 0:02:53.120
Is a big project from Valve to be able to run Windows games on Linux as good as possible.

48
0:02:53.120 --> 0:02:59.360
So Valve has been paying a lot of community developers and consultancies like Yagale to

49
0:02:59.360 --> 0:03:07.720
enhance the Linux gaming in all the stack from Wine, Mesa, and the kernel.

50
0:03:07.720 --> 0:03:11.960
And after that, things started really speeding up.

51
0:03:11.960 --> 0:03:15.280
And now we have the Steam Deck.

52
0:03:15.280 --> 0:03:21.160
And we can see on what was all this effort about now.

53
0:03:21.160 --> 0:03:27.640
Now we have the big picture why they are pushing so hard for the Linux gaming.

54
0:03:27.640 --> 0:03:32.040
And this is from the website Boiling Steam.

55
0:03:32.040 --> 0:03:33.840
And this is from two years ago.

56
0:03:33.840 --> 0:03:35.200
It's not really up to date.

57
0:03:35.200 --> 0:03:41.720
But you can see this is like the numbers of the red one is the reported games on the proton

58
0:03:41.720 --> 0:03:44.320
database.

59
0:03:44.320 --> 0:03:49.480
And the blue one is like games that are running very nice.

60
0:03:49.480 --> 0:03:56.400
So you can see that by time we are really increasing the number of games that we can

61
0:03:56.400 --> 0:03:58.640
run on Linux.

62
0:03:58.640 --> 0:04:02.600
And this is the Linux market share of the Steam users.

63
0:04:02.600 --> 0:04:05.080
And you can see that it's really, really small.

64
0:04:05.080 --> 0:04:09.920
But you can see that it's getting bigger in a...

65
0:04:09.920 --> 0:04:15.160
Well, it's getting bigger all of the time.

66
0:04:15.160 --> 0:04:20.880
If this line goes by infinity, you get all the market on one day.

67
0:04:20.880 --> 0:04:23.320
Okay.

68
0:04:23.320 --> 0:04:30.160
So now about the kernel features that have appeared just because people decide to play

69
0:04:30.160 --> 0:04:31.880
game of Linux.

70
0:04:31.880 --> 0:04:36.200
The first one is a very dramatic one.

71
0:04:36.200 --> 0:04:43.800
I don't know why people hate that so much, but you can now have a case-insensitive folder

72
0:04:43.800 --> 0:04:45.920
on your file system Linux.

73
0:04:45.920 --> 0:04:49.440
And people were very mad about that.

74
0:04:49.440 --> 0:04:54.320
But yeah, it's operational, so it doesn't matter if you don't want to use that.

75
0:04:54.320 --> 0:05:01.300
And to achieve that, it was needed to create a Unicode subsystem on the kernel.

76
0:05:01.300 --> 0:05:07.480
So now in the kernel, we have often emojis and etc.

77
0:05:07.480 --> 0:05:10.360
And this is one of the things that I want you...

78
0:05:10.360 --> 0:05:15.840
That I like about Linux kernel development is that this was developed for the Linux for

79
0:05:15.840 --> 0:05:18.040
gaming use case.

80
0:05:18.040 --> 0:05:22.960
But then I think the Google people was like, hey, this is very cool.

81
0:05:22.960 --> 0:05:28.080
And then they make it support for FQFS for Android.

82
0:05:28.080 --> 0:05:35.320
And yeah, so every part of the community can benefit from the effort from each other.

83
0:05:35.320 --> 0:05:39.160
So yeah, now we have case-insensitive for Linux due to games.

84
0:05:39.160 --> 0:05:45.200
And this is, of course, because NTFS is a case-insensitive file system.

85
0:05:45.200 --> 0:05:55.360
And it's very troublesome to do that, to do the file path lookup from the user space.

86
0:05:55.360 --> 0:06:00.840
If you need to emulate on user space the case-insensitive thing, it's very hard to do that, because you

87
0:06:00.840 --> 0:06:04.640
need to try all sorts of combinations.

88
0:06:04.640 --> 0:06:07.200
But on the kernel side, it's very easy to do.

89
0:06:07.200 --> 0:06:10.800
You kind of abstract all the things for the user space.

90
0:06:10.800 --> 0:06:18.840
Futex is what I'm most known for, is the work that I was involved with.

91
0:06:18.840 --> 0:06:23.980
So Futex is something that is exposed from the kernel.

92
0:06:23.980 --> 0:06:30.480
So user space can create mutex, semaphores, barriers, all kind of cool, synchronous sync

93
0:06:30.480 --> 0:06:32.760
prim chips.

94
0:06:32.760 --> 0:06:36.840
And on the Windows side, you have something similar.

95
0:06:36.840 --> 0:06:41.200
You have the sync API from the Windows kernel.

96
0:06:41.200 --> 0:06:45.680
And then you have this function from the Windows called wait for multiple objects.

97
0:06:45.680 --> 0:06:50.000
That for some reason, games really like to call that.

98
0:06:50.000 --> 0:06:52.960
They really rely on that.

99
0:06:52.960 --> 0:06:59.920
And on Linux, it was not that easy to emulate that, to try and emulate that.

100
0:06:59.920 --> 0:07:08.160
We tried with EventFudy, but EventFudy doesn't scale so well if you have so many waiters.

101
0:07:08.160 --> 0:07:10.460
So we moved to Futex.

102
0:07:10.460 --> 0:07:15.680
And then after some years, I finally managed to get it right.

103
0:07:15.680 --> 0:07:16.680
And it was merged.

104
0:07:16.680 --> 0:07:20.880
So nowadays, you can wait on multiple Futexes on Linux.

105
0:07:20.880 --> 0:07:28.080
And this was created for gaming, but I know that some distributed systems and databases

106
0:07:28.080 --> 0:07:31.560
also want you to have this operation.

107
0:07:31.560 --> 0:07:37.080
But yeah, I assume you need to expose that using patrons.

108
0:07:37.080 --> 0:07:44.280
And the Futex effort kind of created the Futex 2 project because I was there on the main

109
0:07:44.280 --> 0:07:45.280
list.

110
0:07:45.280 --> 0:07:47.200
Hey, hey, I need a new Futex operation.

111
0:07:47.200 --> 0:07:54.440
I was like, OK, but you need to solve all the other Futex stuff going on.

112
0:07:54.440 --> 0:08:01.560
And I spent some time collecting why were people so disappointed with Futex.

113
0:08:01.560 --> 0:08:04.800
And now we know what we need to improve for Futex.

114
0:08:04.800 --> 0:08:10.480
And I work on the Futex 2 thing to have a lot of cool Futex operations.

115
0:08:10.480 --> 0:08:17.480
Cisco user Dispatched is a feature from their Linux kernel that also was created for gaming

116
0:08:17.480 --> 0:08:24.680
because usually when you are developing a Windows game, you want to call Cisco, you

117
0:08:24.680 --> 0:08:27.260
just use the wrapper.

118
0:08:27.260 --> 0:08:36.640
But some games, because of the DRM thing, they use it to call the Cisco directly using

119
0:08:36.640 --> 0:08:39.600
the x86 instruction.

120
0:08:39.600 --> 0:08:45.640
But of course, on Linux, that Cisco number didn't match it, the Windows one.

121
0:08:45.640 --> 0:08:48.800
And it was very hard for a line to deal with that.

122
0:08:48.800 --> 0:08:58.320
So basically nowadays you can select a memory region and say that every time you have Cisco

123
0:08:58.320 --> 0:09:04.320
there, it will not go directly to the Cisco path.

124
0:09:04.320 --> 0:09:12.760
It will call another program to another backend to see if it really should be issued that

125
0:09:12.760 --> 0:09:15.320
Cisco number.

126
0:09:15.320 --> 0:09:21.800
So yeah, it calls the Cisco, but get back to user space, I think, like that.

127
0:09:21.800 --> 0:09:30.240
GPU driver, so on DRM we are working hard to make AMD GPU better.

128
0:09:30.240 --> 0:09:37.400
So in the past months, we have been, after the Cinec release, the AMD GPU was exposed

129
0:09:37.400 --> 0:09:41.160
to all sorts of gamers and user cases.

130
0:09:41.160 --> 0:09:47.360
And this has been popping a lot of bug reports, and we are trying to fix them.

131
0:09:47.360 --> 0:09:54.600
And also, as I said, this is like kind of pushing the limits of the driver and the hardware.

132
0:09:54.600 --> 0:10:00.960
We are working on new DRM features like a sync page flip in the atomic API, and also

133
0:10:00.960 --> 0:10:05.700
working to have a better GPU reset rendering.

134
0:10:05.700 --> 0:10:13.360
Because nowadays if your AMD GPU resets, you need to press the button because it won't

135
0:10:13.360 --> 0:10:14.360
work again.

136
0:10:14.360 --> 0:10:25.560
Also, we are trying to get HDR on Linux and also support 3D image on DRM.

137
0:10:25.560 --> 0:10:36.360
Also in this kind of error rendering area, we are trying to have a nice feedback for

138
0:10:36.360 --> 0:10:39.280
the user when the kernel crashes.

139
0:10:39.280 --> 0:10:45.960
Kind of a Windows blue screen with a link to figure out what is going on.

140
0:10:45.960 --> 0:10:52.240
Also we have enabled Pstore and Kdub on Cinec, so you can have the last D-mask in a safe

141
0:10:52.240 --> 0:10:56.360
place to check out what went wrong.

142
0:10:56.360 --> 0:11:01.520
And if everything goes right, you can submit that for, I don't know, for the Cine server

143
0:11:01.520 --> 0:11:08.360
so they can have a look and help you to figure out what is going on.

144
0:11:08.360 --> 0:11:18.400
So, hardware enabled, a lot of drivers for the Cine deck and some work on the GY6 to

145
0:11:18.400 --> 0:11:23.800
have a pattern on how GY6 exposes features to user space.

146
0:11:23.800 --> 0:11:24.800
Oops.

147
0:11:24.800 --> 0:11:33.440
Well, that is a lot of things, smaller things, smaller projects like the split-lock detector

148
0:11:33.440 --> 0:11:34.440
handling.

149
0:11:34.440 --> 0:11:42.600
So basically on x86 you have this feature that is the split-lock that you can do atomic

150
0:11:42.600 --> 0:11:49.160
operations on all in memory, but it seems that you shouldn't do that.

151
0:11:49.160 --> 0:11:56.200
And then if you do that nowadays, the kernel will penalize you and make your code run very

152
0:11:56.200 --> 0:11:57.200
slow.

153
0:11:57.200 --> 0:11:59.440
And of course games worth doing that.

154
0:11:59.440 --> 0:12:07.760
So we kind of added a button on the kernel so you can turn off, so you can play your

155
0:12:07.760 --> 0:12:08.760
games.

156
0:12:08.760 --> 0:12:09.760
HDI had the bottleneck.

157
0:12:09.760 --> 0:12:16.040
I mean, it was okay, but given that a lot of people start using VR, and VR has a lot

158
0:12:16.040 --> 0:12:22.840
of HDI devices, we kind of discovered that it has had a bottleneck and then we fixed

159
0:12:22.840 --> 0:12:23.840
that.

160
0:12:23.840 --> 0:12:33.400
So some semantics on Unix sockets, on timestamps, on the time counter, because Windows and Linux,

161
0:12:33.400 --> 0:12:37.440
they play very different on the timekeeping thing.

162
0:12:37.440 --> 0:12:47.040
And yeah, a lot of documentation that we are trying to improve along the Linux kernel.

163
0:12:47.040 --> 0:12:55.160
Out of three, this is very interesting because a lot of people do on the free time, they

164
0:12:55.160 --> 0:13:01.280
try to hack the Linux kernel to play faster games.

165
0:13:01.280 --> 0:13:08.520
And some people develop test schedulers, because on Linux, as you may know, we have the CFS,

166
0:13:08.520 --> 0:13:16.800
but people have cool ideas of how to test schedule could be better for desktop use case

167
0:13:16.800 --> 0:13:19.600
to reduce the latency, et cetera.

168
0:13:19.600 --> 0:13:24.840
And these people, some of the projects are not very committed to make this upstream.

169
0:13:24.840 --> 0:13:33.800
So yeah, they use the creativity and try a lot of different ideas.

170
0:13:33.800 --> 0:13:39.880
And another interesting thing is that there are some projects out there like Zen kernel,

171
0:13:39.880 --> 0:13:45.880
Shenmote kernel, Likorex kernel, that are basically a bunch of unofficial kernel releases

172
0:13:45.880 --> 0:13:51.160
made by the community to have a better Linux gaming kernel.

173
0:13:51.160 --> 0:13:59.920
And it's very fun because they grab a lot of out of patches, they grab working on progress

174
0:13:59.920 --> 0:14:03.920
patches and make it together and do a release.

175
0:14:03.920 --> 0:14:05.400
It's a very experimental kernel.

176
0:14:05.400 --> 0:14:11.440
Of course, it has some bugs, it has some problems, but I think it's cool to try out to see if

177
0:14:11.440 --> 0:14:15.720
your games run better on those kernels.

178
0:14:15.720 --> 0:14:21.280
And yeah, I also checked those kernels to see what they come with, to see if there are

179
0:14:21.280 --> 0:14:24.800
cool ideas going on there.

180
0:14:24.800 --> 0:14:33.400
And for the future, I think we are going to try to enhance the power management so the

181
0:14:33.400 --> 0:14:40.120
handheld devices can have better battery life.

182
0:14:40.120 --> 0:14:46.560
And there are so many layers of GPU abstraction nowadays with all the strong translation.

183
0:14:46.560 --> 0:14:48.520
And I think we are trying to...

184
0:14:48.520 --> 0:14:52.840
I think the bottleneck will be on VRM.

185
0:14:52.840 --> 0:14:58.080
And we will need to support that huge stack better.

186
0:14:58.080 --> 0:15:04.680
And here at the end, I have some lists of the patches that I set so we can have a look.

187
0:15:04.680 --> 0:15:05.680
And I think that's it.

188
0:15:05.680 --> 0:15:06.680
Thank you very much.

189
0:15:06.680 --> 0:15:16.320
Thank you.

190
0:15:16.320 --> 0:15:18.320
Time for questions.

191
0:15:18.320 --> 0:15:27.400
Please raise your hand.

192
0:15:27.400 --> 0:15:28.400
No question?

193
0:15:28.400 --> 0:15:30.400
I have a question.

194
0:15:30.400 --> 0:15:37.120
For the task scheduler, did you look into the upstream development that is going on

195
0:15:37.120 --> 0:15:42.000
right now where you can specify schedulers through eBPF, for example?

196
0:15:42.000 --> 0:15:43.000
Oh, yeah.

197
0:15:43.000 --> 0:15:45.200
I have heard about that.

198
0:15:45.200 --> 0:15:51.320
But I don't know if the people tried to replicate those schedulers using eBPF.

199
0:15:51.320 --> 0:15:52.920
But yeah, we'll have a look at that.

200
0:15:52.920 --> 0:15:53.920
Might be interesting.

201
0:15:53.920 --> 0:15:54.920
Yeah, sure.

202
0:15:54.920 --> 0:15:55.920
Cool.

203
0:15:55.920 --> 0:15:56.920
Thanks a lot.

204
0:15:56.920 --> 0:15:57.920
Oh, there's what...

205
0:15:57.920 --> 0:15:59.760
Sorry, sorry, sorry.

206
0:15:59.760 --> 0:16:02.440
One question.

207
0:16:02.440 --> 0:16:03.680
Thank you.

208
0:16:03.680 --> 0:16:12.400
I had a question about how hard is it to introduce new stuff into the kernel that only you need?

209
0:16:12.400 --> 0:16:18.000
Like, you told us, like, some things were just used by you for gaming.

210
0:16:18.000 --> 0:16:19.640
So it's pretty new.

211
0:16:19.640 --> 0:16:21.960
You just have to use it.

212
0:16:21.960 --> 0:16:22.960
How hard is it?

213
0:16:22.960 --> 0:16:23.960
Is it easy?

214
0:16:23.960 --> 0:16:24.960
Depends on.

215
0:16:24.960 --> 0:16:35.040
If you really... if you mess with a bunch of code, if you decrease the performance of

216
0:16:35.040 --> 0:16:39.000
something like on the server side, people will not be so happy about that.

217
0:16:39.000 --> 0:16:49.760
But if you don't mess with things that already exist, people will be okay with that.

218
0:16:49.760 --> 0:16:55.200
Thank you.


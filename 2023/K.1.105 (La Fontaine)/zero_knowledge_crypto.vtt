WEBVTT

00:00.000 --> 00:14.240
I'm going to talk about the new breakthroughs that are happening in cryptography, the opening

00:14.240 --> 00:19.200
doors to unexplored spaces.

00:19.200 --> 00:24.160
Yeah, let's raise the volume.

00:24.160 --> 00:30.120
Yeah, yeah, I don't know how to do it.

00:30.120 --> 00:31.120
I think the staff.

00:31.120 --> 00:35.040
But I will try to speak louder.

00:35.040 --> 00:45.680
So the free software movement and Linux at one time had power.

00:45.680 --> 00:49.560
It had vitality.

00:49.560 --> 00:55.280
And then somewhere along the way, we started to play catch up.

00:55.280 --> 01:03.120
We started to try and follow the competition.

01:03.120 --> 01:10.240
Linux on the desktop never happened.

01:10.240 --> 01:20.560
The once great browser, Firefox, its market share dwindled to zero.

01:20.560 --> 01:30.760
Even this conference, which has the best minds in free software community, is funded by surveillance

01:30.760 --> 01:35.840
capitalism, Google, Microsoft.

01:35.840 --> 01:45.120
In this talk, I want to talk about how we can escape the death trap and create the new

01:45.120 --> 02:07.960
paradigm of computing.

02:07.960 --> 02:31.240
It's strange.

02:31.240 --> 02:41.840
This talk is dedicated to Peter Hintiens.

02:41.840 --> 02:46.560
Peter Hintiens was from Brussels.

02:46.560 --> 02:56.440
He was a programmer who wasn't born in Brussels, but he lived and died in Brussels.

02:56.440 --> 03:04.120
He really embodied the ideas of what elegant abstraction means.

03:04.120 --> 03:11.880
Abstraction is something which creates complexity.

03:11.880 --> 03:15.000
Don Well empowers the software developer.

03:15.000 --> 03:22.080
But he was not just a good developer who he made, for example, zero MQ, which is really

03:22.080 --> 03:29.160
interesting conceptualization about how we could build distributed systems.

03:29.160 --> 03:36.640
He was also a theorist on creating free software, the social layer on creating free software

03:36.640 --> 03:37.640
communities.

03:37.640 --> 03:46.760
He taught us that free software is more than just having the code being accessible, but

03:46.760 --> 03:49.920
it's an entire philosophy.

03:49.920 --> 03:58.720
When we create the good, elegant abstractions, it enables us to create software that's composable

03:58.720 --> 04:00.920
while not contributing complexity.

04:00.920 --> 04:06.560
This is the basis of how the Linux architecture is created.

04:06.560 --> 04:09.160
There's components.

04:09.160 --> 04:15.520
Rather than a Windows system where there is a system 32 filled with hundreds of DLLs,

04:15.520 --> 04:20.000
there is a component which people can modify.

04:20.000 --> 04:23.440
In our project, we try to embody his ideals.

04:23.440 --> 04:29.840
We try to carry his philosophy.

04:29.840 --> 04:43.120
Also everything that we use today, the concept of the sockets, the processes, the file system,

04:43.120 --> 04:47.040
was invented in the 70s with Unix.

04:47.040 --> 04:55.880
Since then, nothing has fundamentally changed about computing.

04:55.880 --> 05:05.480
When they created Unix, their vision was something that would enable deep collaboration between

05:05.480 --> 05:06.760
communities.

05:06.760 --> 05:13.520
The infrastructure that they created, the software, ended up becoming the basis of the

05:13.520 --> 05:14.520
web.

05:14.520 --> 05:20.800
At the time, they couldn't take their vision to its full conclusion.

05:20.800 --> 05:28.000
They didn't have the algorithms that we have now, like around peer-to-peer and consensus

05:28.000 --> 05:32.240
and cryptography and so on.

05:32.240 --> 05:35.880
There wasn't huge network bandwidths.

05:35.880 --> 05:45.800
The resources in the hardware weren't as big.

05:45.800 --> 06:03.600
Since its invention, not much has changed.

06:03.600 --> 06:05.120
What is a zero knowledge proof?

06:05.120 --> 06:07.320
A zero knowledge proof is a zero knowledge proof.

06:07.320 --> 06:20.920
If I have a simple function, I call the function on a set of parameters or arguments and I

06:20.920 --> 06:26.320
produce a result, the return value of the function.

06:26.320 --> 06:36.080
If I want to show to you that this value that I've computed from the function is computed

06:36.080 --> 06:44.600
from some parameters that went into the function, then normally the way that you do that, logically,

06:44.600 --> 06:50.960
is I would have to give you those input parameters and you have the function and you would compute

06:50.960 --> 06:58.120
the function yourself and get that result at the end and then be able to verify that

06:58.120 --> 07:01.640
the result is what it claims it is.

07:01.640 --> 07:10.140
For example, in a Bitcoin blockchain, you're doing transactions and everybody verifies

07:10.140 --> 07:16.540
the transactions, that the computation is to advance the state machine so the next state

07:16.540 --> 07:29.120
is correctly done.

07:29.120 --> 07:33.040
There are two very interesting properties of ZK proofs.

07:33.040 --> 07:36.720
First, the ZK proof is succinct.

07:36.720 --> 07:42.000
What that means is the actual proof object that proves the computation that has been

07:42.000 --> 07:45.560
run on the values is very small.

07:45.560 --> 07:50.280
It's smaller than the input parameters that go into the function.

07:50.280 --> 07:58.440
You would expect that it would be some big proof, but actually, we save computation.

07:58.440 --> 08:07.040
When you want to verify that, you save computation compared to if you would compute the evaluation

08:07.040 --> 08:13.120
of the input values, what we call the witnesses yourself.

08:13.120 --> 08:18.920
The proof size is small and the time to verify the proof is very small compared to actually

08:18.920 --> 08:21.160
computing it.

08:21.160 --> 08:23.600
It can be anonymous.

08:23.600 --> 08:27.360
There are some values that you put into a function to get a result.

08:27.360 --> 08:30.080
You don't know what S, X, and Y are.

08:30.080 --> 08:34.440
You know Z, you know foo, but you don't know S, X, and Y.

08:34.440 --> 08:42.140
That enable us, that give us a very powerful technique in our arsenal, in our toolkit of

08:42.140 --> 08:45.720
anonymous engineering.

08:45.720 --> 08:53.060
This is the general schema of ZK proofing.

08:53.060 --> 08:55.000
You have a proof function.

08:55.000 --> 08:59.280
That means that's how we generate a ZK proof.

08:59.280 --> 09:06.080
You have some private values, the input values to your function foo, and you have the output

09:06.080 --> 09:09.800
of the function, which are your public values, and you create a proof.

09:09.800 --> 09:14.480
When I give to you the proof and you want to verify the proof, and you have the public

09:14.480 --> 09:21.880
values from the evaluation of that function, and you get true or false back.

09:21.880 --> 09:23.360
How does it work?

09:23.360 --> 09:31.600
This is obviously greatly simplified, but just observe this property.

09:31.600 --> 09:38.760
If I have polynomials and I add two polynomials and then I evaluate the polynomial, that is

09:38.760 --> 09:44.680
the same as evaluating the polynomials and adding them together.

09:44.680 --> 09:52.120
This is due to what is called mathematically the homomorphic property of the function that

09:52.120 --> 10:02.200
maps from the ring of the polynomials to the ring of the closure.

10:02.200 --> 10:06.320
It works as well for multiplication.

10:06.320 --> 10:11.960
Just remember that homomorphic property.

10:11.960 --> 10:19.440
Then what we do is that function foo, we do this step called arithmetization.

10:19.440 --> 10:26.840
Any code that you write, we turn that code into a set of polynomials.

10:26.840 --> 10:28.600
How do we do that?

10:28.600 --> 10:36.400
Imagine A and B are billion values, either one or zero, so how can we turn those into

10:36.400 --> 10:39.720
arithmetic expressions?

10:39.720 --> 10:46.600
If you notice with those formulas in the top left and these tables on the right, if you

10:46.600 --> 10:51.900
do the calculation, you will get the same thing.

10:51.900 --> 10:57.520
As long as A and B are zero or one, when you perform those formulas, they are the equivalent

10:57.520 --> 11:02.560
to those billion expressions.

11:02.560 --> 11:11.600
If you want to enforce, just as a side note, that a value S is in a certain range of values,

11:11.600 --> 11:18.760
for example, zero or one, it is the same as saying S minus zero multiplied by S minus

11:18.760 --> 11:25.840
one is equal to zero, which is the roots of the polynomial where it would evaluate to

11:25.840 --> 11:26.840
zero.

11:26.840 --> 11:36.040
That would be a degree two polynomial, there would be no other roots of zero there.

11:36.040 --> 11:44.200
We have that function foo, which if you remember, where was it?

11:44.200 --> 11:46.800
It was here, this one.

11:46.800 --> 11:52.400
If S return X times Y, else return X plus Y.

11:52.400 --> 11:54.160
How do we arithmetize that?

11:54.160 --> 12:02.120
You can see below that we have Z is equal to S, X, Y plus, open bracket, one minus S,

12:02.120 --> 12:03.120
X plus Y.

12:03.120 --> 12:05.440
Both of those are equivalent.

12:05.440 --> 12:16.720
We have taken a piece of code, we have arithmetized it as a mathematical expression.

12:16.720 --> 12:27.080
So then we can use this Schwad-Zippel lemma, which is rather than having to give you all

12:27.080 --> 12:42.440
of these huge degree polynomials, depending on the number of equations that you're checking,

12:42.440 --> 12:49.320
there is something that we can do where we can just evaluate a polynomial at one point.

12:49.320 --> 12:52.320
That relies on the Schwad-Zippel lemma.

12:52.320 --> 13:01.640
Let's pretend that we have two polynomials that we're trying to check a multiplication

13:01.640 --> 13:02.640
of.

13:02.640 --> 13:08.760
If you remember in the first slide, we had FG evaluated alpha is equal to F of alpha

13:08.760 --> 13:12.400
multiplied by G of alpha.

13:12.400 --> 13:22.360
These polynomials, if you notice, they're constructed so that they intersect through

13:22.360 --> 13:25.560
a certain number of points here.

13:25.560 --> 13:29.360
The red one goes through one.

13:29.360 --> 13:32.600
X equals zero, the red one goes through one.

13:32.600 --> 13:36.800
X equals one, the red one goes through two.

13:36.800 --> 13:38.920
X equals two, it goes through minus one.

13:38.920 --> 13:42.000
X equals three, goes through one, et cetera.

13:42.000 --> 13:48.600
That's a Lagrange interpolation of those points.

13:48.600 --> 13:56.320
The yellow one, likewise, does the same, but for zero, two, two, zero, two, one, three.

13:56.320 --> 14:03.920
You can imagine those are the lines of our kind of proof or program that we're trying

14:03.920 --> 14:05.640
to enforce.

14:05.640 --> 14:13.120
The first one might be that we want to check that zero times one is equal to zero and two

14:13.120 --> 14:18.840
times two is equal to four and two times minus one is equal to minus two.

14:18.840 --> 14:21.120
How do we construct that proof?

14:21.120 --> 14:29.400
If we multiply the points together like so, we get a new set of points.

14:29.400 --> 14:37.200
Use these polynomials at degree six to create the polynomial that comes from multiplying

14:37.200 --> 14:40.280
these two polynomials.

14:40.280 --> 14:48.520
We need 12 points which are multiplied from both of these, but I've only done six here.

14:48.520 --> 14:56.040
Then we have these points and we interpolate, we draw a polynomial interpolating those.

14:56.040 --> 15:03.680
This is the new polynomial we get, the pink one.

15:03.680 --> 15:15.160
If you remember this relation from earlier, we now have this polynomial fg.

15:15.160 --> 15:24.600
Therefore, if there is a protocol where a random point or a random x value is selected,

15:24.600 --> 15:38.760
then it's sufficient to prove that this evaluation at this combined polynomial fg of alpha is

15:38.760 --> 15:44.320
equal to evaluations of the other two polynomials multiplied together.

15:44.320 --> 15:50.600
Therefore, you can be sure that that pink one is the multiplication of all the individual

15:50.600 --> 15:58.960
points because a random point and the probability of you being able to preempt that is basically

15:58.960 --> 16:06.920
nearly zero.

16:06.920 --> 16:20.920
We can actually see here, if we look at any two points, the top two is the red and the

16:20.920 --> 16:28.600
yellow one and the white one is actually the multiplication of the two points and the purple

16:28.600 --> 16:31.080
one is the purple one.

16:31.080 --> 16:41.080
We've actually created the polynomial which have this property at all points along it.

16:41.080 --> 16:46.440
Because it has this property, it's sufficient just to pick a random point and check that

16:46.440 --> 16:57.960
that's true.

16:57.960 --> 17:05.280
There is another puzzle piece which is the polynomial commitment proof.

17:05.280 --> 17:12.800
Essentially you can create a commitment of a polynomial which is like hashing a polynomial

17:12.800 --> 17:15.400
and you don't know what the polynomial is.

17:15.400 --> 17:21.400
This is where the zero knowledge property come from.

17:21.400 --> 17:29.080
Then there's objects representing a polynomial in your system and anytime you can create

17:29.080 --> 17:41.640
a proof using the polynomial which has this statement on the right which says that F is

17:41.640 --> 17:54.000
a commitment or hash of this polynomial F and Z is equal to an evaluation of F at S.

17:54.000 --> 18:03.560
That's what that open does is it creates this proof on the right and then I can give you

18:03.560 --> 18:09.200
this proof and I can give you the commitment to the polynomial which is just a hash of

18:09.200 --> 18:15.880
the polynomial essentially and you can verify that whatever polynomial is inside of F is

18:15.880 --> 18:26.280
equal to F or evaluated at S. The same principle is true for addition.

18:26.280 --> 18:32.400
We have multiplication and we have addition which means we can construct any NP complete

18:32.400 --> 18:36.920
program inside of ZK proof.

18:36.920 --> 19:00.200
Another technique is multiparty computation.

19:00.200 --> 19:10.560
Using NPC, with zero knowledge proof, I can compute a value.

19:10.560 --> 19:19.000
I can prove a statement about some values that I hold but maybe sometimes we need to

19:19.000 --> 19:26.400
compute or other people need to be able to know certain facts about other actors in the

19:26.400 --> 19:32.960
system and maybe they don't have the incentive to create a ZK proof or to prove statements

19:32.960 --> 19:37.120
about values that they hold.

19:37.120 --> 19:42.960
That's where we use another technique that's called NPC.

19:42.960 --> 19:48.960
I will show how we can do addition of values with NPC.

19:48.960 --> 19:57.280
Alice has some secret number, 110.

19:57.280 --> 20:02.320
Bob has some other number, 777.

20:02.320 --> 20:11.840
Alice now splits her number randomly such that those numbers add up to 110.

20:11.840 --> 20:15.400
If you add them up, it will be 110.

20:15.400 --> 20:17.840
Then sends them to each other's servers.

20:17.840 --> 20:23.800
None of the servers know what Alice's number is but they know parts of it.

20:23.800 --> 20:28.800
They can reconstruct it if they collude but we're assuming they don't collude.

20:28.800 --> 20:31.960
Bob does the same thing.

20:31.960 --> 20:34.360
He sends his numbers.

20:34.360 --> 20:40.480
When we want to compute an addition of the values, each of the server will add the values

20:40.480 --> 20:42.120
together.

20:42.120 --> 20:44.900
Now they get these new values.

20:44.900 --> 20:56.060
If you look, those values added together when they reconstruct it is the answer of adding

20:56.060 --> 20:59.640
the two private values together.

20:59.640 --> 21:06.040
Multiplication is similar but slightly more involved but also it's possible.

21:06.040 --> 21:12.860
NPC is another powerful technique.

21:12.860 --> 21:15.960
We have homomorphic encryption.

21:15.960 --> 21:23.120
Very simple partial homomorphic encryption is simply this function which is elliptic

21:23.120 --> 21:25.160
curve multiplication.

21:25.160 --> 21:31.400
If I have two values and I add them together and I multiply them by the generator of an

21:31.400 --> 21:37.500
elliptic curve or just some point on the elliptic curve, that is the same as taking the value

21:37.500 --> 21:46.240
multiplying it by G and then adding it to the other value multiplied by G.

21:46.240 --> 21:54.440
Homomorphic encryption, the original idea in the 80s was there's a cloud and anybody

21:54.440 --> 22:02.600
can put values into this cloud but they're encrypted and then other people can compute

22:02.600 --> 22:06.520
answers encrypted for a certain public key.

22:06.520 --> 22:09.600
This is the case.

22:09.600 --> 22:18.920
You can use this to make computations on secret values.

22:18.920 --> 22:30.440
From a kind of abstract level, there is this new emerging field of anonymous engineering.

22:30.440 --> 22:33.320
We can compare it to other forms of engineering.

22:33.320 --> 22:44.520
For example, when we have software, we write these instructions that run on a CPU and execute.

22:44.520 --> 22:53.960
When we do cryptography, we try to use deep mathematical laws to try and create primitives

22:53.960 --> 22:59.160
or schemas but the anonymous engineering is actually using those different techniques

22:59.160 --> 23:07.200
like the ones I just showed or other ones like VDF or hash function, public key, asymmetric

23:07.200 --> 23:13.760
crypto, et cetera, to try and come up with schemas that enable certain forms of applications

23:13.760 --> 23:20.480
with invariants to hold.

23:20.480 --> 23:36.000
Let's give a first practical example which is I have a set of values and this set is

23:36.000 --> 23:44.640
just represented by a single hash and I want to prove that my value is in this set of objects.

23:44.640 --> 23:51.280
To do that, we have to construct something called a Merkle tree.

23:51.280 --> 24:00.000
Let's say we have eight values and what we do is we take two values at a time.

24:00.000 --> 24:06.000
We take the first two values and we hash them together.

24:06.000 --> 24:10.240
We get hash of them and let's represent that by a.

24:10.240 --> 24:18.920
Now, let's hash the next two values, we get another node B and then we hash them together

24:18.920 --> 24:21.760
and we get another node.

24:21.760 --> 24:30.360
We get this kind of tree which the root R represents the entire set of values.

24:30.360 --> 24:33.560
This is a simplified diagram.

24:33.560 --> 24:41.920
Basically these might be 32 layers, so two to the power of 32 values will be in the tree.

24:41.920 --> 24:50.160
For example, we had V1 and V2 and we hash them together and we get A. Likewise, we have

24:50.160 --> 24:52.920
V1, V3 and V4.

24:52.920 --> 25:03.280
We hash them together and we get B. Then we hash those together and we get AB and then

25:03.280 --> 25:09.440
we do the same on the right-hand side and eventually we get to R.

25:09.440 --> 25:18.400
If I have some value, any value, but let's say V5, this one.

25:18.400 --> 25:29.200
Let's say we also have R. How can I prove to you that V5 is in R?

25:29.200 --> 25:35.360
What I need is a pathway to be able to get to R. What does that pathway mean?

25:35.360 --> 25:49.240
For example, if I give you V6, then we can hash those together and we get C.

25:49.240 --> 26:00.000
Then if I give you D and we hash those together, then we get CD.

26:00.000 --> 26:07.080
If I give you AB and we hash that with CD, then we get R.

26:07.080 --> 26:14.400
Then I've proved to you that V5 is in R. Instead of needing to give you all of the items, I

26:14.400 --> 26:16.560
give you a logarithmic number of items.

26:16.560 --> 26:19.280
I give you a small number of items.

26:19.280 --> 26:20.280
It's faster.

26:20.280 --> 26:25.800
It's used as a technique, but it can also be used to create an anonymous inclusion proof.

26:25.800 --> 26:33.880
We can anonymously prove that there is some value in R and we can even encrypt that value

26:33.880 --> 26:37.040
or we can prove other statements on that value.

26:37.040 --> 26:41.400
I'll show you some code, how that looks like.

26:41.400 --> 26:48.400
Maybe I can put this mic somehow like this.

26:48.400 --> 27:04.600
That would be great.

27:04.600 --> 27:07.120
I need to speed up.

27:07.120 --> 27:12.320
Here is the proof, you see the Mercale root at the top.

27:12.320 --> 27:18.280
We're saying there's a pathway and we're proving some values in the root.

27:18.280 --> 27:27.920
Then we're re-encrypting the value and we're exporting it.

27:27.920 --> 27:31.480
To compile it, then I compile the proof like this.

27:31.480 --> 27:41.800
It's compiled.

27:41.800 --> 27:52.040
I have the code which actually computes the Mercale tree with the value, but then also

27:52.040 --> 28:05.800
you see it includes the ZK proof code and then creates the witnesses and then loads

28:05.800 --> 28:09.960
the circuit and then constructs the proof here.

28:09.960 --> 28:17.320
Now we get a proof and then for the verifier we do here, we verify the proof.

28:17.320 --> 28:31.680
We can just run that like so.

28:31.680 --> 28:32.680
No internet.

28:32.680 --> 28:43.680
Anyway, let's not worry about that.

28:43.680 --> 28:52.440
We can use that to create anonymous voting.

28:52.440 --> 28:55.200
How do we do that?

28:55.200 --> 29:04.400
When we create constructs the people who are going to vote, we create something like a

29:04.400 --> 29:10.820
coin and you generate a random serial number that's private and you just create this commitment

29:10.820 --> 29:12.160
to it.

29:12.160 --> 29:19.400
Then when you want to use up your vote, then you burn the coin and you make that public,

29:19.400 --> 29:24.760
that secret value S, which means you can't ever generate the same thing again because

29:24.760 --> 29:27.360
that value is deterministic.

29:27.360 --> 29:34.160
Then you prove that there is a C that's a hash of S and that C is in the tree using

29:34.160 --> 29:36.680
the previous inclusion proof.

29:36.680 --> 29:40.360
How do we change that to do anonymous payments?

29:40.360 --> 29:47.320
It's very similar except now this coin, not just being a hash of S, is also a hash of

29:47.320 --> 29:48.720
a value for the coin.

29:48.720 --> 29:56.440
So it's two and four which are owned by Alice.

29:56.440 --> 30:04.400
Then when we want to spend that coin that Alice has, then we reveal those serial numbers

30:04.400 --> 30:15.360
and we compute the partial homomorphic encryption of the two and the four.

30:15.360 --> 30:22.760
We create this transaction with two outputs and we create the two new coins like we showed

30:22.760 --> 30:24.480
before in the previous slide.

30:24.480 --> 30:28.400
But we also want to prove that the value that goes into the transaction is the same as the

30:28.400 --> 30:34.920
value that goes out and we do that using homomorphic encryption like we showed earlier.

30:34.920 --> 30:43.240
You see here, we've got the two plus the four is equal to the three plus the three.

30:43.240 --> 30:47.000
So there we go.

30:47.000 --> 30:50.680
Then we can do atomic swaps with different types of assets.

30:50.680 --> 30:59.520
So Alice constructs her input and one output sending to Bob, Bob takes the transaction,

30:59.520 --> 31:05.400
adds his input and one output sending to Alice, Bob also signs the transaction, Bob signs

31:05.400 --> 31:08.920
and sends the finalized transaction.

31:08.920 --> 31:15.080
We can also do something where you have a network with anonymous spam protection.

31:15.080 --> 31:26.760
So you have Shamir's secret sharing scheme and normally, so basically with this, you

31:26.760 --> 31:29.280
have this evaluation.

31:29.280 --> 31:32.640
I'm going to go fast now.

31:32.640 --> 31:38.680
When you want to send a message, you compute the message M, you compute this X and Y.

31:38.680 --> 31:48.360
If in one epoch, you again create another message, so you're spamming the network, then

31:48.360 --> 31:57.240
you get these values which using the equation on the first line, you can compute what A0

31:57.240 --> 31:58.240
is.

31:58.240 --> 32:00.360
A0 is actually your secret key.

32:00.360 --> 32:04.920
So then that means that whenever you try to send another message to the network in any

32:04.920 --> 32:09.040
other epoch, now you've lost your account, you can never send.

32:09.040 --> 32:12.280
But it also means that messages are unlinkable.

32:12.280 --> 32:17.320
So you have unlinkability.

32:17.320 --> 32:21.320
We can do anonymous auctions using MPC.

32:21.320 --> 32:32.600
So Alice has Bids $4, Bob Bids $6, they do a computation, they compute who's the winner.

32:32.600 --> 32:35.480
We can do anonymous WikiLeaks.

32:35.480 --> 32:47.120
So I have this thing,.jpg, and then there's a protocol where I've made some claim about

32:47.120 --> 32:53.080
what this file is, and it selects a random chunk from the file.

32:53.080 --> 32:56.360
And then we verify, yep, that file is what it claims it is.

32:56.360 --> 32:59.760
And then there's an auction on the remaining chunks.

32:59.760 --> 33:06.360
And the winners of those auctions decrypt the remaining parts, and then the file is

33:06.360 --> 33:14.400
decrypted.

33:14.400 --> 33:39.280
If you go to the Docs section, we have our own peer-to-peer anonymous chat.

33:39.280 --> 33:42.600
There's no concept of identities.

33:42.600 --> 33:47.440
So if you go to the Doc, there's a section called IRCD.

33:47.440 --> 33:50.720
And we have a weekly meeting every Monday.

33:50.720 --> 33:59.640
Also, there's a crypto section, Zcast section, testnet guide.

33:59.640 --> 34:07.760
We're looking for good devs as well.

34:07.760 --> 34:18.960
Also conclusion.

34:18.960 --> 34:22.920
We missed the mobile and the desktop.

34:22.920 --> 34:26.120
Will we also miss the crypto renaissance?

34:26.120 --> 34:32.560
This is like our best chance to capture value for development.

34:32.560 --> 34:36.560
Like this is the biggest problem with creative people is they create value.

34:36.560 --> 34:40.280
They don't necessarily have a way to capture some of that value back.

34:40.280 --> 34:44.240
We now have techniques to do that.

34:44.240 --> 34:52.560
We were promised this future of computing in the 90s, the interface is beep, beep, beep,

34:52.560 --> 34:55.320
whatever happened to that?

34:55.320 --> 34:56.920
Never got it.

34:56.920 --> 35:07.520
Right now, our phones, they're filled with all these dog shit, Electron apps.

35:07.520 --> 35:09.440
That's a failed paradigm.

35:09.440 --> 35:13.400
We're literally trying to copy Silicon Valley.

35:13.400 --> 35:19.080
I'm optimistic that now people are actually going, actually, no, Linux is different.

35:19.080 --> 35:20.080
We're distinct.

35:20.080 --> 35:21.560
We have our own energy.

35:21.560 --> 35:23.480
But we need to rediscover that.

35:23.480 --> 35:28.800
We need to create something that's new because their model is about capturing users under

35:28.800 --> 35:32.880
surveillance capitalism to extract value from them.

35:32.880 --> 35:35.340
Our model is we create infrastructure.

35:35.340 --> 35:40.800
We create economic value for our networks to become strong and as a movement grow powerful.

35:40.800 --> 35:43.840
It's a different way of thinking.

35:43.840 --> 35:48.360
Open source was a mistake.

35:48.360 --> 35:52.880
We discarded the beating heart of what gave us energy.

35:52.880 --> 35:57.240
We need to conceptualize the computing paradigm.

35:57.240 --> 36:00.600
Let's build something new, actually inventive.

36:00.600 --> 36:04.880
If I have a couple of minutes, I'm actually just going to show our website so I can show

36:04.880 --> 36:14.880
where to find docs.

36:14.880 --> 36:31.040
Okay.

36:31.040 --> 36:46.480
I guess there's no internet.

36:46.480 --> 36:53.160
Let's give a tour of our docs.

36:53.160 --> 36:57.680
Here is a book.

36:57.680 --> 37:02.600
I talked about peer to peer distributed IRCD.

37:02.600 --> 37:11.480
You see there, instructions.

37:11.480 --> 37:16.000
There's also crypto section.

37:16.000 --> 37:18.240
See here.

37:18.240 --> 37:22.720
And also implementations.

37:22.720 --> 37:31.520
There's a ZK explainer and also implementations of most of the ZK algos.

37:31.520 --> 37:38.200
Also probably more interesting for you guys, the Z cast stuff, like how anonymous voting

37:38.200 --> 37:44.960
works and also anonymous payments.

37:44.960 --> 37:49.040
I just showed the distributed chat.

37:49.040 --> 37:54.880
You just run a daemon like that.

37:54.880 --> 37:56.880
Open my WeChat.

37:56.880 --> 37:57.880
Bam.

37:57.880 --> 37:59.240
Here we are.

37:59.240 --> 38:01.840
There's encrypted channels as well.

38:01.840 --> 38:06.160
You just set in your config file and encrypted channel and then we have a chat.

38:06.160 --> 38:09.280
See if I can chat with other people.

38:09.280 --> 38:10.800
So yep, that's it.

38:10.800 --> 38:11.800
That's my talk.

38:11.800 --> 38:12.800
Thanks very much.

38:12.800 --> 38:19.640
Thank you.

1
0:00:00.000 --> 0:00:12.080
So, for this talk, we're going to be learning how to build a plant monitoring app with InfluxDB,

2
0:00:12.080 --> 0:00:17.920
Python, and Flask with edge to cloud replication being an option onto this project.

3
0:00:17.920 --> 0:00:20.720
So, first things first.

4
0:00:20.720 --> 0:00:21.920
My name is Zoe Steinkamp.

5
0:00:21.920 --> 0:00:27.200
I'm a developer advocate for Influx data, which means I have a large empathy for developers

6
0:00:27.200 --> 0:00:28.200
myself.

7
0:00:28.200 --> 0:00:33.960
I was a front-end software engineer for eight years before I decided I wanted to listen

8
0:00:33.960 --> 0:00:39.680
to people's issues and fix them instead of hear them come down from the product team.

9
0:00:39.680 --> 0:00:44.000
If you guys have any questions, I will be allowing some time for Q&A during this presentation

10
0:00:44.000 --> 0:00:45.000
at the end.

11
0:00:45.000 --> 0:00:49.280
But if you want to reach out at any point or you just like to be friends with people

12
0:00:49.280 --> 0:00:51.720
on LinkedIn, this is my QR code.

13
0:00:51.720 --> 0:00:53.080
My name is relatively unique.

14
0:00:53.080 --> 0:00:55.960
I'm easy to find.

15
0:00:55.960 --> 0:00:57.280
The overview.

16
0:00:57.280 --> 0:01:03.160
So, in this presentation, we're going to be walking through a few different pieces for

17
0:01:03.160 --> 0:01:05.200
this project.

18
0:01:05.200 --> 0:01:09.040
The first thing we're going to be walking through is the IoT hardware setup.

19
0:01:09.040 --> 0:01:14.200
So, if you guys are not super familiar with, like, IoT devices and stuff, not to worry,

20
0:01:14.200 --> 0:01:17.360
I'll break it down and then we can kind of figure it out.

21
0:01:17.360 --> 0:01:21.160
Also, all of this is available on GitHub, all this code examples.

22
0:01:21.160 --> 0:01:22.240
There's lots of instructions.

23
0:01:22.240 --> 0:01:24.280
This is a very well fleshed out project.

24
0:01:24.280 --> 0:01:27.780
So at the end, I'm going to be linking that as well so you can do it yourself at home

25
0:01:27.780 --> 0:01:29.600
very easily.

26
0:01:29.600 --> 0:01:33.240
We're going to go over the tools that we're going to be using for this project.

27
0:01:33.240 --> 0:01:39.880
We're going to go over a short overview of InfluxDB just so that people who don't understand

28
0:01:39.880 --> 0:01:43.160
how it works will understand how it works in this project.

29
0:01:43.160 --> 0:01:50.520
The data ingestion setup, flux and SQL, setting up edge data replication and data requests,

30
0:01:50.520 --> 0:01:52.920
which are kind of comboed together somewhat.

31
0:01:52.920 --> 0:01:58.360
And then finally at the end, the GitHub code base, links to other, like, community links

32
0:01:58.360 --> 0:02:03.520
and such, and then Q&A as well.

33
0:02:03.520 --> 0:02:07.860
So setting up your IoT devices.

34
0:02:07.860 --> 0:02:12.520
So this is a handy little diagram to show roughly how this is going to work in real

35
0:02:12.520 --> 0:02:13.520
life.

36
0:02:13.520 --> 0:02:16.900
But basically, you have a plant and you're going to be monitoring it.

37
0:02:16.900 --> 0:02:20.320
You're going to need some kind of microcontroller to receive this information.

38
0:02:20.320 --> 0:02:24.240
I'll show a haphazard photo in a second of how that's going to look.

39
0:02:24.240 --> 0:02:28.480
But basically from that plant, we're going to get data roughly about, I like to say,

40
0:02:28.480 --> 0:02:30.480
how the plant is feeling.

41
0:02:30.480 --> 0:02:36.120
You know, if it's thirsty or hot or just doesn't like you in particular, it'll let us know.

42
0:02:36.120 --> 0:02:41.440
From there, we put that data into our open source, our OSS instance.

43
0:02:41.440 --> 0:02:45.200
So InfluxDB is available open source so you can just easily download it off GitHub and

44
0:02:45.200 --> 0:02:47.080
get it running locally.

45
0:02:47.080 --> 0:02:50.200
So in that, we're going to go ahead and store our data.

46
0:02:50.200 --> 0:02:52.800
We're going to use a telegraph, that's what that little tiger is, we're going to use a

47
0:02:52.800 --> 0:02:55.820
telegraph agent to get the data inside.

48
0:02:55.820 --> 0:03:00.640
From there, if we want, we can go ahead and use our edge data replication feature to go

49
0:03:00.640 --> 0:03:02.760
ahead and push it to cloud.

50
0:03:02.760 --> 0:03:08.000
And then the idea here is that you can also host this locally, like you can host a little

51
0:03:08.000 --> 0:03:09.440
website with graphs and such.

52
0:03:09.440 --> 0:03:12.520
I'll be showing this as we go and the code is available.

53
0:03:12.520 --> 0:03:17.020
But basically the idea here is that you store your data locally, you use edge data replication

54
0:03:17.020 --> 0:03:22.040
to push it up into the cloud for longer term storage or just, you know, to have less data

55
0:03:22.040 --> 0:03:27.240
loss and then from there you can pull that data back out to actually start graphing and

56
0:03:27.240 --> 0:03:30.640
visualizing it.

57
0:03:30.640 --> 0:03:32.920
As promised, haphazard photo.

58
0:03:32.920 --> 0:03:37.960
So for this project, you need in no particular order a plant, preferably alive, those are

59
0:03:37.960 --> 0:03:42.860
the best to monitor, a particle boron microcontroller or another compatible one.

60
0:03:42.860 --> 0:03:48.840
We have the schematics and the details for an Arduino, that would be your preference.

61
0:03:48.840 --> 0:03:53.640
At least one IoT sensor for your plant and a breadboard with jump wires and terminal

62
0:03:53.640 --> 0:03:57.040
strips.

63
0:03:57.040 --> 0:04:00.520
As promised, this is what the schematics look like.

64
0:04:00.520 --> 0:04:04.240
So basically you can just kind of follow these schematics to the tee and that helps you just

65
0:04:04.240 --> 0:04:05.340
get everything set up.

66
0:04:05.340 --> 0:04:11.960
We especially had certain issues with some of our sensors interfering with other ones.

67
0:04:11.960 --> 0:04:15.840
From that, I have four sensors for my project, those are the four that I just happened to

68
0:04:15.840 --> 0:04:18.040
buy off Amazon, which we do list.

69
0:04:18.040 --> 0:04:22.800
So you can, depending on your country, it will change, but these sensors are like 25

70
0:04:22.800 --> 0:04:25.960
cents a pop, so they're really cheap and easy to get.

71
0:04:25.960 --> 0:04:31.980
I have temperature and humidity, I have light, I have soil moisture, and I have temperature.

72
0:04:31.980 --> 0:04:36.800
So with all four of these, I can go ahead and hook them up to my breadboard and my microcontroller

73
0:04:36.800 --> 0:04:42.120
and I can start getting some of that data.

74
0:04:42.120 --> 0:04:45.320
So the tools we're going to be using today.

75
0:04:45.320 --> 0:04:49.280
So we are going to be using Flask, which for those of you guys who are not aware is a micro

76
0:04:49.280 --> 0:04:51.360
web framework written in Python.

77
0:04:51.360 --> 0:04:55.000
It's going to be doing some of the heavy lifting for the project, specifically it's going to

78
0:04:55.000 --> 0:05:00.600
be running the local application and allowing us to have some built in routing.

79
0:05:00.600 --> 0:05:04.960
We're going to be using InfluxDB for actually storing the data that we get from our IoT

80
0:05:04.960 --> 0:05:06.560
sensors from our plant.

81
0:05:06.560 --> 0:05:10.520
It comes with an API and tool set that's going to be easy for ingesting and querying that

82
0:05:10.520 --> 0:05:12.120
data back out.

83
0:05:12.120 --> 0:05:15.440
It's highly performance, so we don't have to worry about it running up when it's open

84
0:05:15.440 --> 0:05:16.440
sourced.

85
0:05:16.440 --> 0:05:19.680
It doesn't cost us anything outside of the server we're running on locally, but in general

86
0:05:19.680 --> 0:05:22.640
we want our data to be stored efficiently.

87
0:05:22.640 --> 0:05:25.860
And then it also has obviously our community and ecosystem.

88
0:05:25.860 --> 0:05:29.760
People like me there to help answer questions and come up with these awesome little projects,

89
0:05:29.760 --> 0:05:32.840
like monitoring your plant at home.

90
0:05:32.840 --> 0:05:36.160
Telegraph is a completely open source ingestion agent.

91
0:05:36.160 --> 0:05:40.760
It has over 300 plus different plugins depending on what you need and desire.

92
0:05:40.760 --> 0:05:45.960
For this project we use the exact deprocessor plugin to get the data into our open source.

93
0:05:45.960 --> 0:05:50.240
I'm also going to be showing code for what I'll actually I'm going to explain that later.

94
0:05:50.240 --> 0:05:52.240
But basically this is super nice to use.

95
0:05:52.240 --> 0:05:58.120
It has a very wide range of open source plugins supported by sometimes companies, sometimes

96
0:05:58.120 --> 0:05:59.560
community members.

97
0:05:59.560 --> 0:06:04.720
You'll find serious ones like Azure monitoring or AWS monitoring to the more fun ones like

98
0:06:04.720 --> 0:06:08.920
Minecraft or CSGO.

99
0:06:08.920 --> 0:06:13.360
If for some reason you do not want to use telegraph, maybe it just doesn't have a configuration

100
0:06:13.360 --> 0:06:18.280
that works for your device or your project, a lot of people are just going to go to the

101
0:06:18.280 --> 0:06:22.760
client libraries, which I'll be showing a code example on how to use these as well.

102
0:06:22.760 --> 0:06:27.000
And this does live inside the project, so you don't have to worry about going and finding

103
0:06:27.000 --> 0:06:28.000
it.

104
0:06:28.000 --> 0:06:30.280
We just left it there just in case people want to use it.

105
0:06:30.280 --> 0:06:33.280
So obviously it's got a few different options here.

106
0:06:33.280 --> 0:06:37.680
We're going to be using the Python one because that's the one I work in and that's what the

107
0:06:37.680 --> 0:06:41.680
project is written in.

108
0:06:41.680 --> 0:06:45.240
Another thing that I used when I built up this project is the flux extension for VS

109
0:06:45.240 --> 0:06:46.240
code.

110
0:06:46.240 --> 0:06:50.560
It's really nice in that it allows me to write my flux queries and it kind of tells me if

111
0:06:50.560 --> 0:06:52.960
I'm misspelling or writing things wrong.

112
0:06:52.960 --> 0:06:55.400
It's just like any other extension that you're going to get in VS code.

113
0:06:55.400 --> 0:07:00.520
It highlights things and helps you realize when you're making mistakes.

114
0:07:00.520 --> 0:07:03.120
Finally we're going to be using Plotly for graphing.

115
0:07:03.120 --> 0:07:08.560
It is a completely free and open source graphing library, which is always our favorite.

116
0:07:08.560 --> 0:07:13.000
It's really nice and easy to work with and very colorful, which I appreciate.

117
0:07:13.000 --> 0:07:18.560
So, a really quick overview.

118
0:07:18.560 --> 0:07:24.160
For those of you guys who are not quite familiar with it, time series data is a very specific

119
0:07:24.160 --> 0:07:25.480
type of data.

120
0:07:25.480 --> 0:07:30.160
It's what we're going to be getting from our plant because IoT sensors tend to give you

121
0:07:30.160 --> 0:07:35.800
the time series data and the fact that it is metrics regularly intervolved at time.

122
0:07:35.800 --> 0:07:41.260
What that means is that you want to know at what point the plant got thirsty or you want

123
0:07:41.260 --> 0:07:44.680
to know how many hours a day did it get sunlight.

124
0:07:44.680 --> 0:07:45.800
That's all time series data.

125
0:07:45.800 --> 0:07:50.020
That's data that you want to know about on a time scale.

126
0:07:50.020 --> 0:07:53.280
We normally see these as metrics at regular time intervals.

127
0:07:53.280 --> 0:07:55.600
Occasionally we see things like events.

128
0:07:55.600 --> 0:07:59.360
You can think of things also like the stock exchange or weather conditions as other great

129
0:07:59.360 --> 0:08:02.120
examples of this type of data.

130
0:08:02.120 --> 0:08:06.840
We tend to find these in multiple different applications.

131
0:08:06.840 --> 0:08:10.360
The software infrastructure is probably the most common and most people here would understand

132
0:08:10.360 --> 0:08:12.160
where that comes from.

133
0:08:12.160 --> 0:08:16.400
Obviously for this one we're going to be using IoT data.

134
0:08:16.400 --> 0:08:21.180
One thing to note is if you had multiple plants at home, you might want to store that data.

135
0:08:21.180 --> 0:08:26.120
You might want to know that you have six orchids and seven aloe vera's.

136
0:08:26.120 --> 0:08:28.440
You'd store that kind of data in a relational.

137
0:08:28.440 --> 0:08:29.440
You'd name them.

138
0:08:29.440 --> 0:08:32.760
You'd say this is the one that lives in window on the north side of the house.

139
0:08:32.760 --> 0:08:35.320
This is the one that lives in the window on the south.

140
0:08:35.320 --> 0:08:37.780
By the way, one of my coworkers totally did this.

141
0:08:37.780 --> 0:08:40.680
He has like 100 plants in his house.

142
0:08:40.680 --> 0:08:46.040
He organized it in his SQL DB, his relational, because this was a lot of plant data.

143
0:08:46.040 --> 0:08:49.480
Then when he was actually monitoring all of these plants, which I really don't know how

144
0:08:49.480 --> 0:08:51.760
he set this, his house is just full of cords.

145
0:08:51.760 --> 0:08:53.760
It's just cords everywhere.

146
0:08:53.760 --> 0:08:58.160
When he set this up to actually start monitoring all of these, that would be time series data.

147
0:08:58.160 --> 0:09:03.680
That's going to be all of those timestamp metrics coming in.

148
0:09:03.680 --> 0:09:07.360
This is how the entire platform looks when it's all put together.

149
0:09:07.360 --> 0:09:12.200
As you can see, you have your data sources, then you have telegraph in the client libraries

150
0:09:12.200 --> 0:09:16.560
as well as things like native ecosystems, which we're not going to go into today.

151
0:09:16.560 --> 0:09:18.800
Those are the ways of getting the data in.

152
0:09:18.800 --> 0:09:25.320
From there, you can use InfluxDB to set up things like triggers and alerts, things like

153
0:09:25.320 --> 0:09:31.480
I have it set up to send me a text, if my plant needs some water.

154
0:09:31.480 --> 0:09:34.880
I use it quite often at my job and then promptly ignore the text.

155
0:09:34.880 --> 0:09:37.120
It doesn't work out very well for the plant or me.

156
0:09:37.120 --> 0:09:40.720
If I actually paid attention, this is very useful to use.

157
0:09:40.720 --> 0:09:46.800
Finally, obviously with these kind of data, what's the data stored once we have it being

158
0:09:46.800 --> 0:09:52.560
used, maybe downsampling it, we can actually start seeing some results.

159
0:09:52.560 --> 0:09:58.960
Usually infrastructure insights isn't quite what this is, but more like plant insights.

160
0:09:58.960 --> 0:10:05.760
When it comes to data ingestion setup, I'm not going to go super in depth on how to set

161
0:10:05.760 --> 0:10:09.320
up your microcontroller because depending on the one you're using, it's going to be

162
0:10:09.320 --> 0:10:10.320
different.

163
0:10:10.320 --> 0:10:12.280
They're all going to be very varied.

164
0:10:12.280 --> 0:10:14.720
You're just going to have to follow the instructions on that one.

165
0:10:14.720 --> 0:10:19.800
If you happen to have an Arduino or a Boron microcontroller, you could probably follow

166
0:10:19.800 --> 0:10:24.160
our directions anyways, but those are probably going to be pretty easy to set up because

167
0:10:24.160 --> 0:10:25.720
we talk about it.

168
0:10:25.720 --> 0:10:29.360
This is just an example of how the data tends to come in.

169
0:10:29.360 --> 0:10:33.960
As you can see, I've got my port set up and then I start to get these data results.

170
0:10:33.960 --> 0:10:40.080
For example, if I remember correctly, this one is the humidity one, this one is the temperature.

171
0:10:40.080 --> 0:10:44.640
As you can see, this is like the first, I'm going to call it the first flush.

172
0:10:44.640 --> 0:10:49.480
Sometimes the data comes in as zeros at first and then it starts to actually give you values.

173
0:10:49.480 --> 0:10:53.560
One thing to note, and I'm not going to go over it in this presentation, but you can

174
0:10:53.560 --> 0:10:57.320
see it in the GitHub, in the repository, in the code.

175
0:10:57.320 --> 0:11:00.520
We do tend to do a little bit of cleanup on these values.

176
0:11:00.520 --> 0:11:04.880
The data sensors are not exactly friendly in how they send you data, is how I'm going

177
0:11:04.880 --> 0:11:06.200
to put it.

178
0:11:06.200 --> 0:11:09.720
We did have to do a little bit of our own cleanup in Python, which luckily we supply

179
0:11:09.720 --> 0:11:10.720
to you.

180
0:11:10.720 --> 0:11:15.680
If you're using roughly the same ones, you can go ahead and just use what we have.

181
0:11:15.680 --> 0:11:19.460
For example, our temperature came in a little bit weird and we had to change it so it actually

182
0:11:19.460 --> 0:11:21.960
read in a more human readable way.

183
0:11:21.960 --> 0:11:27.400
We haven't yet fixed the light one, so it just looks really strange.

184
0:11:27.400 --> 0:11:31.280
Interesting.

185
0:11:31.280 --> 0:11:33.640
I expected my video to show up.

186
0:11:33.640 --> 0:11:37.440
Well, oh wait, it is up there.

187
0:11:37.440 --> 0:11:38.440
Aha.

188
0:11:38.440 --> 0:11:43.000
Let's see, can I get this to work?

189
0:11:43.000 --> 0:11:44.000
Not quite.

190
0:11:44.000 --> 0:11:46.520
Sorry, guys.

191
0:11:46.520 --> 0:11:47.520
Technical difficulties.

192
0:11:47.520 --> 0:11:54.480
Well, go figure.

193
0:11:54.480 --> 0:12:00.560
This was working on my own machine five minutes ago, but that means nothing.

194
0:12:00.560 --> 0:12:05.160
I'm going to try and press, is there a play button or something on here?

195
0:12:05.160 --> 0:12:07.080
I'm just going to give up.

196
0:12:07.080 --> 0:12:11.800
Basically what this shows is how to set up your bucket and token, which I can actually

197
0:12:11.800 --> 0:12:13.160
probably just pull up.

198
0:12:13.160 --> 0:12:14.840
I'll do it at the end of this presentation.

199
0:12:14.840 --> 0:12:16.240
We're going to do this on the fly.

200
0:12:16.240 --> 0:12:19.880
I'll show it at the end, but basically it just shows you in the UI how you set up your

201
0:12:19.880 --> 0:12:22.000
bucket, which is just your database.

202
0:12:22.000 --> 0:12:25.160
You can pick for how long it wants to have a retention policy.

203
0:12:25.160 --> 0:12:26.920
That's how long you want to store the data.

204
0:12:26.920 --> 0:12:28.800
Maybe you only want to store it for a day.

205
0:12:28.800 --> 0:12:30.060
Maybe you want to store it for 30 days.

206
0:12:30.060 --> 0:12:32.120
You pick that at the beginning.

207
0:12:32.120 --> 0:12:36.600
Then it also gives you the option to do a explicit or implicit schema.

208
0:12:36.600 --> 0:12:41.320
What that means is implicit just basically builds the schema off what you send us.

209
0:12:41.320 --> 0:12:44.560
If you start streaming in data, we'll build it for you.

210
0:12:44.560 --> 0:12:48.720
Explicit is you tell us exactly how you want your data to be formatted, and we will reject

211
0:12:48.720 --> 0:12:51.440
any data that doesn't meet that schema.

212
0:12:51.440 --> 0:12:55.400
Obviously in a project like this, which I like to call pretty low risk, like it's not

213
0:12:55.400 --> 0:13:00.280
a big deal if the data's not quite perfect, just do the implicit, make life easy for yourself.

214
0:13:00.280 --> 0:13:06.200
We give explicit as for more professional projects, I suppose you could say, where it

215
0:13:06.200 --> 0:13:09.680
really does matter that you reject that bad schema data.

216
0:13:09.680 --> 0:13:13.440
The other thing I showed is just how to make a quick token, because obviously you're going

217
0:13:13.440 --> 0:13:16.040
to need a token to actually get your data in and back out.

218
0:13:16.040 --> 0:13:18.320
You need those authentications.

219
0:13:18.320 --> 0:13:21.600
One thing to note, we do offer a all access token.

220
0:13:21.600 --> 0:13:22.760
We kind of warn against it.

221
0:13:22.760 --> 0:13:26.760
It even has a big warning on the screen saying please don't do this, because it allows you

222
0:13:26.760 --> 0:13:32.040
full access to all of your buckets, all your databases, and it allows you to delete them.

223
0:13:32.040 --> 0:13:36.920
So if that tech one ever falls into the wrong hands, or maybe you make a mistake, or your

224
0:13:36.920 --> 0:13:42.400
coworker makes a mistake, you know somebody else, that can obviously cause a lot of problems.

225
0:13:42.400 --> 0:13:45.520
We like to call it basically creating your own big red button.

226
0:13:45.520 --> 0:13:46.520
You don't need to do that.

227
0:13:46.520 --> 0:13:51.080
So we also give you the option to pick, write, and read tokens where you specify which buckets

228
0:13:51.080 --> 0:13:52.640
you want them to have access to.

229
0:13:52.640 --> 0:13:55.080
Again, I'll just show this a little bit later.

230
0:13:55.080 --> 0:13:58.800
And you can do it in the CLI as well, but normally when the video loads, the UI is a

231
0:13:58.800 --> 0:14:02.800
little bit more fun to visually see.

232
0:14:02.800 --> 0:14:04.360
So let's see if, there we go.

233
0:14:04.360 --> 0:14:10.960
So for this code example, it's pretty straightforward as to how to actually set this up.

234
0:14:10.960 --> 0:14:14.480
As you can see, we have the influx DB client.point.

235
0:14:14.480 --> 0:14:17.680
The influx DB client is already set up in this example.

236
0:14:17.680 --> 0:14:21.880
Basically all you give it is your bucket and your token.

237
0:14:21.880 --> 0:14:27.680
You just basically say, this is where I want my data to go, and I have the authority authorization

238
0:14:27.680 --> 0:14:28.880
to actually do it.

239
0:14:28.880 --> 0:14:31.200
It's very straightforward and easy to set up.

240
0:14:31.200 --> 0:14:32.880
It takes like a second.

241
0:14:32.880 --> 0:14:37.200
But basically once you have all your authentication going, you can actually start sending those

242
0:14:37.200 --> 0:14:39.000
points up to your database.

243
0:14:39.000 --> 0:14:42.440
So with this one, we're calling the point sensor data.

244
0:14:42.440 --> 0:14:43.880
We're setting the user.

245
0:14:43.880 --> 0:14:46.840
It says it's not visually here, but it says like Zoe.

246
0:14:46.840 --> 0:14:47.840
It just says my name.

247
0:14:47.840 --> 0:14:50.400
It's not very special.

248
0:14:50.400 --> 0:14:53.720
Then we have the tag, which is the device ID.

249
0:14:53.720 --> 0:14:56.320
And then finally the sensor name with the value.

250
0:14:56.320 --> 0:15:01.480
So that's going to be something like humidity value 30.

251
0:15:01.480 --> 0:15:06.000
And basically from this, this is running in a Python file script that just is pretty much

252
0:15:06.000 --> 0:15:12.240
running as long as we're getting data.

253
0:15:12.240 --> 0:15:14.960
But basically this is a straightforward way to get it in.

254
0:15:14.960 --> 0:15:19.220
And this is using the Python client library.

255
0:15:19.220 --> 0:15:22.080
This is part of the telegraph config file.

256
0:15:22.080 --> 0:15:27.060
This file has like, it's computer generated, so you don't need to write 200 lines of code,

257
0:15:27.060 --> 0:15:30.400
but the actual config file is like 200 lines of code.

258
0:15:30.400 --> 0:15:34.800
This is just a small snippet at the end of it that basically says that we're using the

259
0:15:34.800 --> 0:15:38.160
execd processor plugin.

260
0:15:38.160 --> 0:15:42.280
And from here we're just telling it what measurements and what tagged keys to accept.

261
0:15:42.280 --> 0:15:45.840
Again, inside of the GitHub project, we kind of go a little bit more in depth.

262
0:15:45.840 --> 0:15:50.000
But the big thing is that every telegraph config file and instructions are slightly

263
0:15:50.000 --> 0:15:51.040
different.

264
0:15:51.040 --> 0:15:55.320
So there's no necessary reason for me to show you the execd one when you could be using

265
0:15:55.320 --> 0:15:57.280
a different one for your own project.

266
0:15:57.280 --> 0:16:00.240
But basically just follow the documentations for this.

267
0:16:00.240 --> 0:16:01.560
It's super simple.

268
0:16:01.560 --> 0:16:02.560
And it's very well documented.

269
0:16:02.560 --> 0:16:05.320
Well, I guess I shouldn't say that since it's open source.

270
0:16:05.320 --> 0:16:09.600
So some of them are less well documented, but most of them are great.

271
0:16:09.600 --> 0:16:12.660
And this is a table example of the resulting data points.

272
0:16:12.660 --> 0:16:17.160
So as you can see, we have our sensor data with a field of this one.

273
0:16:17.160 --> 0:16:19.260
We have light and soil moisture.

274
0:16:19.260 --> 0:16:21.080
We have our value.

275
0:16:21.080 --> 0:16:25.080
And as I told you before, the values kind of come in a little bit weird.

276
0:16:25.080 --> 0:16:31.600
I don't know how soil moisture can be 1,372 point, many zeros and fives, but it can be.

277
0:16:31.600 --> 0:16:35.660
And then finally the actual timestamp value, which says that obviously this value was from

278
0:16:35.660 --> 0:16:44.640
last year in like I can't even think September, August, sometime in the early fall.

279
0:16:44.640 --> 0:16:46.080
So flux and SQL.

280
0:16:46.080 --> 0:16:49.480
So I've said this word before, and I haven't really explained it.

281
0:16:49.480 --> 0:16:54.000
But basically what flux is, is it is the querying language of MfluxDB.

282
0:16:54.000 --> 0:16:57.940
So basically what it allows you to do is query for your time series data.

283
0:16:57.940 --> 0:17:00.400
It can do a lot of really awesome things.

284
0:17:00.400 --> 0:17:03.520
It can do things like the alerts, the management.

285
0:17:03.520 --> 0:17:07.120
But for right now we're just going to focus on the querying because that's the most straightforward

286
0:17:07.120 --> 0:17:09.920
thing and that's the main thing that you're going to end up doing.

287
0:17:09.920 --> 0:17:15.720
So in this versioning right here, basically what it's saying is from bucket, which again

288
0:17:15.720 --> 0:17:19.320
is just from database, go ahead and give me smart city.

289
0:17:19.320 --> 0:17:20.320
Give me the range.

290
0:17:20.320 --> 0:17:21.320
This is a range of one day.

291
0:17:21.320 --> 0:17:23.400
It's got a start and a stop.

292
0:17:23.400 --> 0:17:24.800
You do not have to give it a range.

293
0:17:24.800 --> 0:17:27.780
You could literally just do from bucket, give me everything.

294
0:17:27.780 --> 0:17:32.000
We normally suggest you try to use a range because obviously, I mean if your bucket only

295
0:17:32.000 --> 0:17:34.280
has like one day of data, it's probably not a big deal.

296
0:17:34.280 --> 0:17:39.320
But if it has the past three years of data, that's going to be a while to come in.

297
0:17:39.320 --> 0:17:43.040
And that's going to probably crash a lot.

298
0:17:43.040 --> 0:17:44.560
And then you have your filters.

299
0:17:44.560 --> 0:17:50.280
So with this one, what they're saying in more human terms is they're saying give me all

300
0:17:50.280 --> 0:17:54.160
the bicycles that have come through with the neighborhood ID of three.

301
0:17:54.160 --> 0:17:58.080
And what they're doing down here at this aggregate window is they're saying give me the mean

302
0:17:58.080 --> 0:17:59.760
for every one hour.

303
0:17:59.760 --> 0:18:05.040
So because this is one day, this is a one day range, this will return 24 data points.

304
0:18:05.040 --> 0:18:09.760
It will give you the mean amount of bikes that came through every hour in this neighborhood

305
0:18:09.760 --> 0:18:11.640
with the ID of three.

306
0:18:11.640 --> 0:18:15.440
And the one below it is doing the exact same, but it's doing it for the ID neighborhood

307
0:18:15.440 --> 0:18:16.640
of four.

308
0:18:16.640 --> 0:18:22.440
And then finally at the end, it's comparing them and it's getting a difference value.

309
0:18:22.440 --> 0:18:26.440
It's saying how many more bikes go through neighborhood three versus neighborhood four

310
0:18:26.440 --> 0:18:28.400
or vice versa.

311
0:18:28.400 --> 0:18:32.000
And so that's just one of the quick queries that you can do.

312
0:18:32.000 --> 0:18:36.480
The aggregate window is super great, especially for a project like this where you maybe, although

313
0:18:36.480 --> 0:18:41.840
your IoT sensors will send you data every single nanosecond, let's get real here.

314
0:18:41.840 --> 0:18:45.040
Your plant, you don't need to know exactly what was happening to it.

315
0:18:45.040 --> 0:18:49.000
It's better to just get an average of how thirsty it is or average amount of light.

316
0:18:49.000 --> 0:18:51.200
You could bring it down even to five minutes.

317
0:18:51.200 --> 0:18:54.280
It does not need to be quite as in depth.

318
0:18:54.280 --> 0:18:57.480
And even for this one, they just wanted to know the mean amount of bikes that were coming

319
0:18:57.480 --> 0:19:02.200
through the city in these neighborhoods.

320
0:19:02.200 --> 0:19:04.360
This is how it actually looks like in our project.

321
0:19:04.360 --> 0:19:08.920
So the reason that you're seeing all these empty brackets is this is a reusable query.

322
0:19:08.920 --> 0:19:14.600
So we can say from different types of plant buddy buckets, or we can say different device

323
0:19:14.600 --> 0:19:16.880
IDs or different fields.

324
0:19:16.880 --> 0:19:24.400
So again, the field is going to be things like the humidity, the temperature, the moisture.

325
0:19:24.400 --> 0:19:28.260
And device ID, I actually, for my project at least, it's always the same because I only

326
0:19:28.260 --> 0:19:30.320
have one setup.

327
0:19:30.320 --> 0:19:34.560
But if I had multiple plants with multiple values, I would have the device ID basically

328
0:19:34.560 --> 0:19:40.600
being probably really the plant names, but I could say like Arduino one or Arduino two.

329
0:19:40.600 --> 0:19:48.400
But for this project, it's relatively smaller, so it's just easier.

330
0:19:48.400 --> 0:19:51.700
So change is here.

331
0:19:51.700 --> 0:19:56.080
So this doesn't really matter if you decide to do this project all in the open source.

332
0:19:56.080 --> 0:19:58.460
It won't matter really for you for a while.

333
0:19:58.460 --> 0:20:03.280
But one thing to note is if you do choose to do edge data replication, InfluxDB cloud

334
0:20:03.280 --> 0:20:05.760
is now going to be allowing SQL.

335
0:20:05.760 --> 0:20:10.320
So you're going to be able to query your data back out using SQL instead of flux.

336
0:20:10.320 --> 0:20:13.980
And we're also going to be supporting flight SQL plugins which will allow you to connect

337
0:20:13.980 --> 0:20:17.480
to things like Apache superset and Grafana.

338
0:20:17.480 --> 0:20:21.240
I'm obviously going to be showing plot leaf for this one, but these are going to be options

339
0:20:21.240 --> 0:20:22.480
for you in the future.

340
0:20:22.480 --> 0:20:26.080
So it's just something to keep in mind.

341
0:20:26.080 --> 0:20:29.160
So let's get into edge data replication.

342
0:20:29.160 --> 0:20:47.440
I'm going to leave this up for just one sec.

343
0:20:47.440 --> 0:20:53.160
So normally when I say edge data replication, people kind of think of varying things depending

344
0:20:53.160 --> 0:20:57.280
on your job or depending on where you've heard it said before.

345
0:20:57.280 --> 0:21:02.280
Some people think of a solar panel in the middle of nowhere in the woods.

346
0:21:02.280 --> 0:21:07.240
That's the edge device because it's, I don't know, at the edge of civilization basically.

347
0:21:07.240 --> 0:21:10.520
But an edge device can be something as simple as a cell phone.

348
0:21:10.520 --> 0:21:13.080
It can be an ATM sitting at a bank.

349
0:21:13.080 --> 0:21:19.320
It can be a factory that just happens to have intermittent Wi-Fi because today or this week

350
0:21:19.320 --> 0:21:22.080
got an ice storm and the internet went out.

351
0:21:22.080 --> 0:21:26.520
So an edge device can really be almost, it's more broad than what we normally think of.

352
0:21:26.520 --> 0:21:30.760
It can be almost any device that it's important that it always stays connected, but that doesn't

353
0:21:30.760 --> 0:21:32.520
mean that it will.

354
0:21:32.520 --> 0:21:37.000
Or in the case of some people, it's your work server that happens to be sitting in your

355
0:21:37.000 --> 0:21:40.880
office that goes out because the power went out at the office and now somebody's getting

356
0:21:40.880 --> 0:21:45.040
the phone call at 2 a.m. to go to that office and fix the server.

357
0:21:45.040 --> 0:21:47.800
That's why cloud computing is great.

358
0:21:47.800 --> 0:21:53.880
So basically what edge data replication allows is it allows you to run your influx DB OSS

359
0:21:53.880 --> 0:22:00.760
instance, your edge, and basically it has a disk back queue which holds that data.

360
0:22:00.760 --> 0:22:03.880
So as you can see here, you have your bucket, you have your queue.

361
0:22:03.880 --> 0:22:06.420
There are limits to how much data you can hold.

362
0:22:06.420 --> 0:22:10.040
You can check out the documentation to find out all the nitty gritty.

363
0:22:10.040 --> 0:22:16.560
But basically from there, if you ever have like, you know, you ever have internet blackouts,

364
0:22:16.560 --> 0:22:21.280
you ever have power loss, you will have that data backed up and then when it reconnects,

365
0:22:21.280 --> 0:22:24.360
it goes ahead and sends it to the cloud.

366
0:22:24.360 --> 0:22:30.040
Now obviously I would hope that nobody has plants that are so important that they necessarily

367
0:22:30.040 --> 0:22:36.120
need to back up their data, but I also like doing this because I monitor these plants

368
0:22:36.120 --> 0:22:40.800
at like conferences, like they come with me when I'm doing like basically what the people

369
0:22:40.800 --> 0:22:42.880
outside of this room are doing.

370
0:22:42.880 --> 0:22:47.920
Sometimes I have a plant at our booth where I monitor it, and although this conference

371
0:22:47.920 --> 0:22:52.560
has been really great for Wi-Fi, not all of them are so wonderful.

372
0:22:52.560 --> 0:22:56.640
And so it's actually not uncommon for me and my plant to lose Wi-Fi and then I can use

373
0:22:56.640 --> 0:23:00.700
the edge data replication to still push that data up to the cloud once I reconnect.

374
0:23:00.700 --> 0:23:04.320
Or I close my laptop when I go to lunch and then it stops running.

375
0:23:04.320 --> 0:23:05.920
Also not super great.

376
0:23:05.920 --> 0:23:11.920
But basically this is pretty easy to set up and get going on.

377
0:23:11.920 --> 0:23:15.800
So these are part of the setup instructions that are in this project's read me.

378
0:23:15.800 --> 0:23:21.040
So as you can see, we're running our influx DB-OSS edge on Docker.

379
0:23:21.040 --> 0:23:24.960
So it's a Docker hosted OSS.

380
0:23:24.960 --> 0:23:30.720
And basically what the command in the second portion does is it just sets it up to be an

381
0:23:30.720 --> 0:23:31.720
edge device.

382
0:23:31.720 --> 0:23:35.000
It's just saying like, hey, do the config create, plant buddy edge.

383
0:23:35.000 --> 0:23:36.840
This is going to be where it's coming from.

384
0:23:36.840 --> 0:23:38.760
It's the open source version.

385
0:23:38.760 --> 0:23:44.640
And then the rest of these instructions are basically just for the USB ports and such.

386
0:23:44.640 --> 0:23:51.280
Like I said before, we have some pretty in-depth documentation on how to get this project going.

387
0:23:51.280 --> 0:23:53.560
And then these are the two big commands that you run.

388
0:23:53.560 --> 0:23:55.560
And they're pretty straightforward.

389
0:23:55.560 --> 0:24:00.080
Basically all you need to do is just have all of your information for your OSS.

390
0:24:00.080 --> 0:24:04.400
So that's going to be that bucket that we named before.

391
0:24:04.400 --> 0:24:06.880
You're going to need to create that remote connection.

392
0:24:06.880 --> 0:24:11.360
And then finally you need to do the replication command where you're saying replicate between

393
0:24:11.360 --> 0:24:14.160
the local bucket ID and the remote bucket ID.

394
0:24:14.160 --> 0:24:17.880
So as I said before, I'll show how you actually create the buckets.

395
0:24:17.880 --> 0:24:22.480
But for the cloud as well as the open source is the exact same.

396
0:24:22.480 --> 0:24:23.680
You just basically create the bucket.

397
0:24:23.680 --> 0:24:25.120
You need to get the ID for it.

398
0:24:25.120 --> 0:24:28.480
And then you're basically just saying this is my local bucket.

399
0:24:28.480 --> 0:24:29.560
This is my cloud bucket.

400
0:24:29.560 --> 0:24:34.880
Please make sure the data goes up in that direction.

401
0:24:34.880 --> 0:24:39.760
So data requests and visualizations.

402
0:24:39.760 --> 0:24:45.760
So when we are querying data back out, this is using again the Python client library.

403
0:24:45.760 --> 0:24:51.520
Which although telegraph does have a few output plug-ins, they're not relevant for this specific

404
0:24:51.520 --> 0:24:52.520
project.

405
0:24:52.520 --> 0:24:57.360
You could check them out if you wanted to send your data to a different way, different

406
0:24:57.360 --> 0:24:58.800
website or such.

407
0:24:58.800 --> 0:25:03.960
But basically all we're doing here is we are using one of those flux queries, the same

408
0:25:03.960 --> 0:25:07.640
one that I showed from an earlier slide where it's basically just saying give me the data

409
0:25:07.640 --> 0:25:12.280
for the past roughly day for this bucket with this value.

410
0:25:12.280 --> 0:25:16.400
And from there you have your params, your bucket, your sensor name and your device ID

411
0:25:16.400 --> 0:25:18.760
which can be submitted.

412
0:25:18.760 --> 0:25:21.320
Like I said before, it's like a drop down that you can pick from.

413
0:25:21.320 --> 0:25:24.840
And basically once you do the query and you do the open dot read, you're going to receive

414
0:25:24.840 --> 0:25:27.560
that data back.

415
0:25:27.560 --> 0:25:31.280
And you can receive this data back in different ways, but we're doing it in a data frame because

416
0:25:31.280 --> 0:25:35.720
that's the easiest for graphing in Plotly.

417
0:25:35.720 --> 0:25:40.920
This is currently in what's the word?

418
0:25:40.920 --> 0:25:41.920
We're working on it.

419
0:25:41.920 --> 0:25:46.600
So we're currently working on getting this project to be integrated with SQL.

420
0:25:46.600 --> 0:25:51.040
That's going to be my task when I get home tomorrow on Monday or Tuesday whenever my

421
0:25:51.040 --> 0:25:52.440
flight lands.

422
0:25:52.440 --> 0:25:55.840
But basically from here this is how it's going to be instead executed.

423
0:25:55.840 --> 0:26:00.080
You're basically just going to be using a SQL command and getting a very similar read

424
0:26:00.080 --> 0:26:01.080
back.

425
0:26:01.080 --> 0:26:04.760
With this one we're just getting a straight read.

426
0:26:04.760 --> 0:26:06.840
We're not doing it into a data frame.

427
0:26:06.840 --> 0:26:09.400
But that is going to be something we're going to set up and be an option.

428
0:26:09.400 --> 0:26:13.920
So if you do want to use this in the future, just wait by the end of the week and we'll

429
0:26:13.920 --> 0:26:20.080
have that project up as a part of the Plant Buddy repo.

430
0:26:20.080 --> 0:26:22.440
And finally, actually graphing the data.

431
0:26:22.440 --> 0:26:25.480
So it's pretty easy to graph the data inside of Plotly.

432
0:26:25.480 --> 0:26:29.960
So as you can see, we have a few different line graphs which are set for soil moisture,

433
0:26:29.960 --> 0:26:31.440
air temperature.

434
0:26:31.440 --> 0:26:35.280
But as you can see, we're setting a few, like these are the values that we're setting here,

435
0:26:35.280 --> 0:26:37.240
like the graph default device ID.

436
0:26:37.240 --> 0:26:39.080
We're sending in that air temperature.

437
0:26:39.080 --> 0:26:42.680
And we're getting it back in a graph format.

438
0:26:42.680 --> 0:26:45.680
And this is going to be another case where we're going to see if we can get this to work

439
0:26:45.680 --> 0:26:47.760
because I really want this one to work.

440
0:26:47.760 --> 0:26:51.520
Darn it.

441
0:26:51.520 --> 0:26:57.200
I actually wonder...

442
0:26:57.200 --> 0:26:59.240
We're going to try something a little bit weird.

443
0:26:59.240 --> 0:27:03.280
See if we can get this out of the presenter view.

444
0:27:03.280 --> 0:27:05.280
Oh no.

445
0:27:05.280 --> 0:27:07.280
Escape.

446
0:27:07.280 --> 0:27:08.280
There we go.

447
0:27:08.280 --> 0:27:09.780
Okay.

448
0:27:09.780 --> 0:27:14.760
This is not really ideal, but we're just going to have to go with it, I think.

449
0:27:14.760 --> 0:27:15.760
Maybe.

450
0:27:15.760 --> 0:27:18.040
Man, it's really just not liking it, huh?

451
0:27:18.040 --> 0:27:19.640
I don't know why.

452
0:27:19.640 --> 0:27:20.640
What is this?

453
0:27:20.640 --> 0:27:24.400
Oh, well, that's not helpful at all.

454
0:27:24.400 --> 0:27:25.400
Darn.

455
0:27:25.400 --> 0:27:31.840
One second, I'm going to drag this onto my screen and just see if I can do it.

456
0:27:31.840 --> 0:27:39.120
I guess it just doesn't like the HDMI today.

457
0:27:39.120 --> 0:27:42.000
I'm on the FOSDAM one.

458
0:27:42.000 --> 0:27:47.000
This one?

459
0:27:47.000 --> 0:27:49.200
Yes.

460
0:27:49.200 --> 0:27:50.200
You think it's Internet?

461
0:27:50.200 --> 0:27:53.200
Not every Google thing likes IPv6.

462
0:27:53.200 --> 0:27:57.800
I'll also refresh this really quick.

463
0:27:57.800 --> 0:28:07.560
See if that helps at all.

464
0:28:07.560 --> 0:28:14.560
Yeah, just really...

465
0:28:14.560 --> 0:28:19.120
It's so funny that, yeah, it was working before, but now it's just not liking me.

466
0:28:19.120 --> 0:28:20.120
All right.

467
0:28:20.120 --> 0:28:21.120
So be it.

468
0:28:21.120 --> 0:28:27.840
Oh, you've got to be kidding me.

469
0:28:27.840 --> 0:28:29.840
All right.

470
0:28:29.840 --> 0:28:30.840
I've got it working.

471
0:28:30.840 --> 0:28:33.120
I think I just actually need to change my share settings.

472
0:28:33.120 --> 0:28:34.120
All right.

473
0:28:34.120 --> 0:28:41.320
We're going to go ahead and change the way this is shared.

474
0:28:41.320 --> 0:29:09.600
Do you know how to change the settings by any chance?

475
0:29:09.600 --> 0:29:13.960
I thought it would just change it, but it didn't just change it to just look at this.

476
0:29:13.960 --> 0:29:14.960
Just look at this screen.

477
0:29:14.960 --> 0:29:16.960
Oh, I don't think...

478
0:29:16.960 --> 0:29:17.960
No?

479
0:29:17.960 --> 0:29:18.960
Okay.

480
0:29:18.960 --> 0:29:19.960
Hmm.

481
0:29:19.960 --> 0:29:20.960
Fair enough.

482
0:29:20.960 --> 0:29:23.560
Yeah, it's just like it's not...

483
0:29:23.560 --> 0:29:26.640
All right.

484
0:29:26.640 --> 0:29:27.640
Here we go.

485
0:29:27.640 --> 0:29:28.640
Mirror display.

486
0:29:28.640 --> 0:29:30.240
It's all these new updates.

487
0:29:30.240 --> 0:29:32.240
I never know where anything is anymore.

488
0:29:32.240 --> 0:29:35.320
Okay, so it really is just the display thing, I think.

489
0:29:35.320 --> 0:29:38.200
I think it just doesn't want to work.

490
0:29:38.200 --> 0:29:40.640
There we go.

491
0:29:40.640 --> 0:29:43.640
Okay, cool.

492
0:29:43.640 --> 0:29:45.600
So...

493
0:29:45.600 --> 0:29:46.600
I'm so sorry, guys.

494
0:29:46.600 --> 0:29:48.680
I didn't realize it didn't like my share.

495
0:29:48.680 --> 0:29:49.680
Okay.

496
0:29:49.680 --> 0:29:51.080
So I'm going to go ahead and full screen this.

497
0:29:51.080 --> 0:29:53.880
And we'll just go back to the other video, because why not?

498
0:29:53.880 --> 0:29:56.360
So this is how it actually looks in the end.

499
0:29:56.360 --> 0:30:00.000
So as you can see, it starts to actually make a little bit more sense.

500
0:30:00.000 --> 0:30:02.060
But basically, you can pick your fields.

501
0:30:02.060 --> 0:30:05.720
So this is like a graph where you can kind of change it as you desire.

502
0:30:05.720 --> 0:30:10.560
And you could also pick your bucket as well, which I might show in a second here on this

503
0:30:10.560 --> 0:30:11.560
video.

504
0:30:11.560 --> 0:30:12.560
There we go.

505
0:30:12.560 --> 0:30:15.100
Yeah, so you could pick one of these many buckets.

506
0:30:15.100 --> 0:30:16.840
Most of these are not relevant to my project.

507
0:30:16.840 --> 0:30:21.760
They're just the buckets I have in my cloud account, or rather my open source.

508
0:30:21.760 --> 0:30:23.400
And so as you can see, these are the two...

509
0:30:23.400 --> 0:30:26.820
I'm going to go back to this part of the video.

510
0:30:26.820 --> 0:30:29.100
These are the two hard coded graphs.

511
0:30:29.100 --> 0:30:33.520
So as I said before, the original values sometimes come in really weird.

512
0:30:33.520 --> 0:30:36.640
I don't know why the heck humidity went all the way up to 90 and then dropped all the

513
0:30:36.640 --> 0:30:37.880
way back down.

514
0:30:37.880 --> 0:30:42.320
We normally do a first flush of a lot of this data when it first hits, because it just kind

515
0:30:42.320 --> 0:30:43.320
of comes in funny.

516
0:30:43.320 --> 0:30:44.960
Or maybe I breathed on it.

517
0:30:44.960 --> 0:30:45.960
Who knows?

518
0:30:45.960 --> 0:30:47.520
They're relatively sensitive.

519
0:30:47.520 --> 0:30:49.040
It really does happen.

520
0:30:49.040 --> 0:30:53.080
But also, we had to do a little bit of exponential smoothing as well.

521
0:30:53.080 --> 0:30:57.320
So we smoothed out the soil moisture, because it used to look like the air temperature does.

522
0:30:57.320 --> 0:30:59.840
It used to just kind of jump around like a crazy thing.

523
0:30:59.840 --> 0:31:03.760
The plant did not move between the frigid air to back inside.

524
0:31:03.760 --> 0:31:06.780
It's just these sensors can be a little bit temperamental.

525
0:31:06.780 --> 0:31:08.760
We bought the cheapest ones off Amazon.

526
0:31:08.760 --> 0:31:10.240
We can only expect so much.

527
0:31:10.240 --> 0:31:15.720
If you spend a little more money, you're going to get a nicer setup.

528
0:31:15.720 --> 0:31:21.200
So let me get out of full screen, please.

529
0:31:21.200 --> 0:31:24.000
And I can just not win today.

530
0:31:24.000 --> 0:31:26.680
All right.

531
0:31:26.680 --> 0:31:29.000
Nope.

532
0:31:29.000 --> 0:31:30.760
Now you just want to play.

533
0:31:30.760 --> 0:31:34.520
So these are some of the new visualization options for FlightSql.

534
0:31:34.520 --> 0:31:37.840
We're also going to be adding these into the project, so you can check it out.

535
0:31:37.840 --> 0:31:40.500
We already have pretty good integration with Grafana as well.

536
0:31:40.500 --> 0:31:44.300
So if you would prefer to use them for your visualizations instead of Plotly, you're more

537
0:31:44.300 --> 0:31:46.800
than welcome to.

538
0:31:46.800 --> 0:31:52.040
And then these are those further resources I mentioned before.

539
0:31:52.040 --> 0:31:53.780
So this is the Try It Yourself.

540
0:31:53.780 --> 0:31:55.880
So this is where the actual project lives.

541
0:31:55.880 --> 0:31:59.120
This is the QR code as well as the GitHub.

542
0:31:59.120 --> 0:32:02.540
If you look up PlantBuddy on the internet, you'll find this.

543
0:32:02.540 --> 0:32:06.040
And then we have a few different versions depending on what you want to do, including

544
0:32:06.040 --> 0:32:09.600
the edge data replication version, which I've mentioned here.

545
0:32:09.600 --> 0:32:13.400
Oh, I almost forgot about the other video.

546
0:32:13.400 --> 0:32:17.120
Let me go back up to it really quick.

547
0:32:17.120 --> 0:32:20.680
I like the videos because it means I don't normally have to jump around super crazily

548
0:32:20.680 --> 0:32:23.400
and go in and out of the cloud UI.

549
0:32:23.400 --> 0:32:25.600
Too bad it sometimes comes in as like, it's funny.

550
0:32:25.600 --> 0:32:30.520
Except for the high quality, but it never really is.

551
0:32:30.520 --> 0:32:33.280
And go back to slide show if you would be so kind.

552
0:32:33.280 --> 0:32:36.160
There we go.

553
0:32:36.160 --> 0:32:39.260
So as I was saying before, the Create bucket is pretty straightforward.

554
0:32:39.260 --> 0:32:40.460
You just name it.

555
0:32:40.460 --> 0:32:45.320
And then as you can see, the delete data is set for never or older than a certain amount

556
0:32:45.320 --> 0:32:46.760
of days or time.

557
0:32:46.760 --> 0:32:50.720
And then that advanced configuration is the schema that you can pick.

558
0:32:50.720 --> 0:32:53.920
And then finally, the API tokens, also pretty straightforward.

559
0:32:53.920 --> 0:32:57.360
You can do the read write, which is what I do suggest.

560
0:32:57.360 --> 0:33:00.640
This all accents is the big red button that I mentioned earlier.

561
0:33:00.640 --> 0:33:03.240
As you can see, it's got the warning to don't do this.

562
0:33:03.240 --> 0:33:06.200
I do it because I don't care.

563
0:33:06.200 --> 0:33:08.600
I like to live life on the edge.

564
0:33:08.600 --> 0:33:10.640
Ha ha.

565
0:33:10.640 --> 0:33:11.640
Horrible jokes.

566
0:33:11.640 --> 0:33:12.800
It's a great specialty of mine.

567
0:33:12.800 --> 0:33:15.920
But if you decide to do this the right way, this is how you would normally do it.

568
0:33:15.920 --> 0:33:18.680
You can pick your buckets for read and write.

569
0:33:18.680 --> 0:33:23.080
And you do need to have read and write if you want to use it in this context.

570
0:33:23.080 --> 0:33:24.920
If you just have read, it won't do you any good.

571
0:33:24.920 --> 0:33:28.480
If you don't have, I guess you could do one, but then your data is stuck inside and you

572
0:33:28.480 --> 0:33:29.480
can't do anything with it.

573
0:33:29.480 --> 0:33:31.200
So you need both.

574
0:33:31.200 --> 0:33:32.760
So that's that video.

575
0:33:32.760 --> 0:33:36.000
So I'm going to go back to the end of this.

576
0:33:36.000 --> 0:33:37.000
It's great.

577
0:33:37.000 --> 0:33:38.000
This thing never escapes.

578
0:33:38.000 --> 0:33:41.640
There we go.

579
0:33:41.640 --> 0:33:44.640
Awesome.

580
0:33:44.640 --> 0:33:47.160
So this is our community Slack.

581
0:33:47.160 --> 0:33:51.560
I'm also going to have a slide next that will have all of the, like it's the one to take

582
0:33:51.560 --> 0:33:52.560
a photo of.

583
0:33:52.560 --> 0:33:54.520
I don't want to take any photos of like this one.

584
0:33:54.520 --> 0:33:57.760
But basically you can come join us in our Slack community.

585
0:33:57.760 --> 0:33:58.760
I'm there.

586
0:33:58.760 --> 0:33:59.760
My coworkers are there.

587
0:33:59.760 --> 0:34:03.800
We love to hang out and talk to people and take feedback as well as questions.

588
0:34:03.800 --> 0:34:04.920
It's pretty active.

589
0:34:04.920 --> 0:34:06.800
We get like 100 messages a day.

590
0:34:06.800 --> 0:34:09.740
So we're always busy in there.

591
0:34:09.740 --> 0:34:14.860
And then for getting started yourself, you can obviously head to the influx community.

592
0:34:14.860 --> 0:34:18.320
It has a lot of projects as well as the influx code base.

593
0:34:18.320 --> 0:34:22.240
So you can go ahead and download that open source versioning.

594
0:34:22.240 --> 0:34:24.280
And if you want to get started, that's our website.

595
0:34:24.280 --> 0:34:28.480
This is also where you're going to find things like our documentation.

596
0:34:28.480 --> 0:34:31.160
And this is that slide that I promised that kind of has like everything.

597
0:34:31.160 --> 0:34:32.800
It makes it really easy.

598
0:34:32.800 --> 0:34:37.840
So the getting started is for getting started on cloud if you would like.

599
0:34:37.840 --> 0:34:40.400
The community is both the forums and Slack.

600
0:34:40.400 --> 0:34:42.000
Slack is our more active community.

601
0:34:42.000 --> 0:34:49.040
Our forums are because we can only pay for such an upgraded amount of Slack history storage.

602
0:34:49.040 --> 0:34:51.800
So we put all of our old questions in the forum.

603
0:34:51.800 --> 0:34:54.480
So they are a resource that you can kind of search through.

604
0:34:54.480 --> 0:34:58.560
And if you don't search through it, that's where I search when I answer questions.

605
0:34:58.560 --> 0:35:00.920
And then we also do have the influx community as well.

606
0:35:00.920 --> 0:35:04.440
It's basically the one on GitHub where you can find projects that people have worked

607
0:35:04.440 --> 0:35:06.640
on, including ourselves.

608
0:35:06.640 --> 0:35:10.620
Our book, which basically just goes into things like why you want to use it.

609
0:35:10.620 --> 0:35:14.720
The documentation, which I've mentioned multiple times because it really goes in depth on how

610
0:35:14.720 --> 0:35:17.480
to get this project set up and going.

611
0:35:17.480 --> 0:35:19.520
Blogs where you see things.

612
0:35:19.520 --> 0:35:23.000
They have some of our new stuff as well as just in general.

613
0:35:23.000 --> 0:35:26.240
We like to highlight some of the projects that people are working on.

614
0:35:26.240 --> 0:35:29.120
And finally, just our university where you can learn more.

615
0:35:29.120 --> 0:35:33.520
It's completely free and go at your own pace.

616
0:35:33.520 --> 0:35:41.040
So now that we've gotten through everything, if anybody has any questions.

617
0:35:41.040 --> 0:35:43.680
Yes.

618
0:35:43.680 --> 0:35:50.680
Yeah, so I'll go ahead.

619
0:35:50.680 --> 0:36:01.000
Oh, that's not what I wanted.

620
0:36:01.000 --> 0:36:03.880
No, it's just taking me back to the stupid drive video.

621
0:36:03.880 --> 0:36:04.880
There we go.

622
0:36:04.880 --> 0:36:08.960
So yeah, so this is that influx community plant buddy project.

623
0:36:08.960 --> 0:36:10.040
So the master branch.

624
0:36:10.040 --> 0:36:15.640
And then we also have, so like, for example, down here we talk about the control boards.

625
0:36:15.640 --> 0:36:17.600
So we've got the Arduino or the Boron.

626
0:36:17.600 --> 0:36:19.780
And then we have an entire sensor list.

627
0:36:19.780 --> 0:36:24.040
So for example, if I click on this one, it kind of it harassed me for cookies.

628
0:36:24.040 --> 0:36:26.820
It goes into the temperature sensor.

629
0:36:26.820 --> 0:36:31.820
So you can go ahead and learn about all the different sensors that we use for this project.

630
0:36:31.820 --> 0:36:36.960
And you can also obviously search them up on the internet and buy them if you desire.

631
0:36:36.960 --> 0:36:40.600
And you can use many different types of sensors, but these just happen to be the four that

632
0:36:40.600 --> 0:36:43.440
we just wanted to end up using.

633
0:36:43.440 --> 0:36:46.720
And like I said before, in this project, we have, yes, the master branch.

634
0:36:46.720 --> 0:36:52.320
And then we also have things like EDR, which is edge data replication, Kafka, and then

635
0:36:52.320 --> 0:36:54.120
a few others.

636
0:36:54.120 --> 0:36:56.160
I normally end up in the master branch.

637
0:36:56.160 --> 0:36:59.960
It's kind of like the main versioning of the project.

638
0:36:59.960 --> 0:37:04.780
And yeah, and then in the future, the sequel one that I was telling you about, that's going

639
0:37:04.780 --> 0:37:06.160
to be EDR IOCs.

640
0:37:06.160 --> 0:37:09.680
It's still currently being worked on as I speak, actually.

641
0:37:09.680 --> 0:37:15.000
So that one is not to be touched yet until it's all done.

642
0:37:15.000 --> 0:37:17.160
Yes.

643
0:37:17.160 --> 0:37:31.040
Yeah, so the question was, how is InfluxDB different than OpenTSB?

644
0:37:31.040 --> 0:37:33.040
Sorry, TSTB?

645
0:37:33.040 --> 0:37:35.140
There we go.

646
0:37:35.140 --> 0:37:39.600
So from what I understand, TSTB is also an open source time series database, just like

647
0:37:39.600 --> 0:37:40.600
we are.

648
0:37:40.600 --> 0:37:44.520
I think the biggest difference is going to be how much functionality it comes out of

649
0:37:44.520 --> 0:37:45.520
the box with.

650
0:37:45.520 --> 0:37:50.200
I would obviously have to go to their actual code and check it out a little bit further.

651
0:37:50.200 --> 0:37:57.640
But normally, the big thing that's our differentiator is the fact that we can...

652
0:37:57.640 --> 0:37:59.340
We actually have our own visualizations.

653
0:37:59.340 --> 0:38:03.800
We have our own ability with Flux to do things like alerting, like that moisture alerting

654
0:38:03.800 --> 0:38:05.840
that I was talking about before.

655
0:38:05.840 --> 0:38:09.160
And then with the new sequel integration, that will also be very nice for people who

656
0:38:09.160 --> 0:38:12.680
want to query in a language most people are already familiar with querying in when it

657
0:38:12.680 --> 0:38:15.080
comes to working with databases.

658
0:38:15.080 --> 0:38:19.640
But to be honest, a lot of time series DBs can be pretty comparable when it actually

659
0:38:19.640 --> 0:38:21.440
comes to the storage.

660
0:38:21.440 --> 0:38:26.280
So it's going to depend somewhat on your project and which one you want to, I suppose, work

661
0:38:26.280 --> 0:38:27.280
with.

662
0:38:27.280 --> 0:38:28.480
A lot of people normally like to...

663
0:38:28.480 --> 0:38:32.720
I normally do get told that we have pretty good documentation and a good community where

664
0:38:32.720 --> 0:38:35.400
we're very easy to work with and work through problems.

665
0:38:35.400 --> 0:38:42.800
And that's not always the case with every open source community.

666
0:38:42.800 --> 0:38:50.280
If anybody else has any other questions?

667
0:38:50.280 --> 0:38:55.120
If not, that's totally fine too, because that all gives you guys time to run off to the

668
0:38:55.120 --> 0:39:01.040
next talks or maybe go grab some lunch from the food trucks.

669
0:39:01.040 --> 0:39:04.520
Thank you.


1
0:00:00.000 --> 0:00:10.480
So, hello. I'm Edward, and I'm going to be talking about some tools that I've been building

2
0:00:10.480 --> 0:00:15.720
for adding links between OpenStreetMap and Wikidata. I've been working on these for a

3
0:00:15.720 --> 0:00:23.040
few years. This is all a hobbyist project. I'm not being paid to work on this, but I

4
0:00:23.040 --> 0:00:28.360
thought I'd come here and share with you some of the work that I've been doing. So, I'm

5
0:00:28.360 --> 0:00:33.440
going to use as an example to talk about the software that I'm building, this building

6
0:00:33.440 --> 0:00:40.560
which is in Brussels, the Royal Palace of Brussels. It's in the city centre. So, you

7
0:00:40.560 --> 0:00:47.320
can see here, this is it in two different systems. You've got OpenStreetMap and you've

8
0:00:47.320 --> 0:00:56.760
got Wikidata, both showing the same building. So, I'll describe OpenStreetMap just for anyone

9
0:00:56.760 --> 0:01:03.720
who's not familiar with it. It's a collaborative map. I've been going since 2004. It covers

10
0:01:03.720 --> 0:01:10.320
the whole world and anyone can come in and edit the map. It's got revision history. It

11
0:01:10.320 --> 0:01:17.560
works a lot like Wikipedia, but for maps. So, within OpenStreetMap, you've got three

12
0:01:17.560 --> 0:01:27.440
types of objects, nodes, ways and relations, increasing complexity. Each of those objects

13
0:01:27.440 --> 0:01:42.680
can have tags. Tags are pairs of keys and values. I've got some examples here for my

14
0:01:42.680 --> 0:01:48.040
example in Brussels. And the tags are not controlled by the software. You can put anything

15
0:01:48.040 --> 0:01:54.280
you want in, but it won't get rendered on the map unless it's one of the standard tags

16
0:01:54.280 --> 0:01:59.840
that gets used on OpenStreetMap. So, there's a community process for discussing, you know,

17
0:01:59.840 --> 0:02:05.440
how things should be tagged in OpenStreetMap and then it gets documented on the OpenStreetMap

18
0:02:05.440 --> 0:02:10.720
wiki. So, everything in OpenStreetMap can be uniquely

19
0:02:10.720 --> 0:02:17.880
identified by the type and the ID. Like, the ID on its own isn't enough. There's nodes

20
0:02:17.880 --> 0:02:24.120
and ways that have got the same ID. You have to have the type as well. So, in this example

21
0:02:24.120 --> 0:02:30.280
of the Royal Palace, you can see it's a relation. It's a complex polygon. You can see there's

22
0:02:30.280 --> 0:02:34.840
holes in the middle of the building, so you can't represent it as a way. And you can see

23
0:02:34.840 --> 0:02:41.400
there, it's got an ID as well. So, what about the other system I'm talking about?

24
0:02:41.400 --> 0:02:49.800
Wikidata. So, Wikidata is part of the Wikimedia Foundation, like the same people that run

25
0:02:49.800 --> 0:03:00.440
Wikipedia. And it's a wiki for structured data. It's newer than OpenStreetMap, 2012

26
0:03:00.440 --> 0:03:07.240
it launched. And it's big. Like, it's got 102 million items now. And for comparison,

27
0:03:07.240 --> 0:03:12.840
English Wikipedia has 6.6 million articles. Like, English Wikipedia is the biggest Wikipedia.

28
0:03:12.840 --> 0:03:18.120
And most of those articles have a Wikidata item as well. But then there's a lot more

29
0:03:18.120 --> 0:03:24.280
data, a lot more items in Wikidata than there are articles in English Wikipedia.

30
0:03:24.280 --> 0:03:30.840
So, if I take my example of the Royal Palace of Brussels, and you look it up on English

31
0:03:30.840 --> 0:03:36.360
Wikipedia, you can see there's a link in the sidebar that will take you to the Wikidata

32
0:03:36.360 --> 0:03:43.400
item. And you click that link, and you end up on the, this is the Wikidata item for the

33
0:03:43.400 --> 0:03:49.680
Royal Palace. I'll talk you through some of the pieces on this page. So, you've got,

34
0:03:49.680 --> 0:03:57.920
on the side, the site links. These are links to Wikipedia articles in different languages.

35
0:03:57.920 --> 0:04:04.880
Like part of the reason for the existence of Wikidata is to store these, they call them

36
0:04:04.880 --> 0:04:11.200
inter-language links. They used to be stored in Wikipedia and had to be maintained across

37
0:04:11.200 --> 0:04:16.160
all the different languages. So, if there was a new article written in a new language,

38
0:04:16.160 --> 0:04:22.840
every existing article in one of the existing languages had to be updated with these links.

39
0:04:22.840 --> 0:04:28.880
So, much better to centralize them and store them in Wikidata instead. All the bits and

40
0:04:28.880 --> 0:04:37.880
pieces you get on this page, you get a label, a description, and aliases. So, by default,

41
0:04:37.880 --> 0:04:41.920
when I look at Wikidata, I just see them in English, because that's the language I speak.

42
0:04:41.920 --> 0:04:49.160
But I can click the, a link to show me in more languages, and you can see that there's

43
0:04:49.160 --> 0:04:57.880
names of the thing available in lots of languages and descriptions and so on. The other main

44
0:04:57.880 --> 0:05:05.600
part of this page you see is the list of statements. So, statements are a bit like tags in OpenStreetMap,

45
0:05:05.600 --> 0:05:12.440
but they're more controlled by the software. You can't just make up a property. You have

46
0:05:12.440 --> 0:05:16.520
to use ones that are already in the system. And again, there's a community process in

47
0:05:16.520 --> 0:05:22.520
Wikidata for determining new properties. And the other big difference is that there's different

48
0:05:22.520 --> 0:05:28.760
data types, like in OpenStreetMap, everything is a string, but Wikidata has different data

49
0:05:28.760 --> 0:05:33.880
types of values. Here you can see there's an image, and there's also a link to another

50
0:05:33.880 --> 0:05:41.760
item used as values in the statements. So, the interesting, in terms of maps, is Wikidata

51
0:05:41.760 --> 0:05:49.240
has got coordinate locations. There's almost ten million items with coordinates. So, those

52
0:05:49.240 --> 0:05:53.960
are the kinds of things that we're interested in, and we'll probably be on OpenStreetMap

53
0:05:53.960 --> 0:06:02.080
as well. And there is a property for storing geo shapes in Wikidata, but it's quite new,

54
0:06:02.080 --> 0:06:11.160
and it's not used so much. There's only 29,000-odd items with a geo shape. So, you know, it's

55
0:06:11.160 --> 0:06:17.880
mostly about the coordinates. So, the thing that I'm interested in is adding links between

56
0:06:17.880 --> 0:06:25.160
the systems. So, if we have another look at OpenStreetMap, I've got highlighted here one

57
0:06:25.160 --> 0:06:33.920
of the tags for the palace, and it's the Wikidata tag, and it's got a Wikidata QID. This is

58
0:06:33.920 --> 0:06:39.960
the unique identifier for the Wikidata item. So, now, the two systems are linked. Like,

59
0:06:39.960 --> 0:06:48.440
if you visit this object on OpenStreetMap, then the user interface has a hyperlink that

60
0:06:48.440 --> 0:06:57.520
will take you to the same thing on Wikidata. So, why do I want to add links between Wikidata

61
0:06:57.520 --> 0:07:04.920
and OpenStreetMap? Well, it makes the data in OpenStreetMap a lot more useful. Like,

62
0:07:04.920 --> 0:07:10.840
Wikidata tends to have labels in more languages. Like, if you want the name of a thing in a

63
0:07:10.840 --> 0:07:18.400
different language, you can get it from Wikidata. You can link to the Wikipedia articles. It

64
0:07:18.400 --> 0:07:27.120
gets images from Commons and identifiers from other catalogues, data catalogues. So, there's

65
0:07:27.120 --> 0:07:31.640
Wikimedia Commons is the Wikimedia location for storing photos of things. So, we get loads

66
0:07:31.640 --> 0:07:41.600
of photos of our building, and we also get lots of identifiers in Wikidata. So, you can

67
0:07:41.600 --> 0:07:49.480
think of Wikidata as a bit like the Rosetta Stone of linking different data catalogues.

68
0:07:49.480 --> 0:07:56.440
It makes sense to store all this information in one place, and so, why not use Wikidata

69
0:07:56.440 --> 0:08:03.240
as that place for storing this kind of info? So, this is a good thing. We want to add links.

70
0:08:03.240 --> 0:08:10.720
The other thing you get is Wikidata gets access to the shapes of things, the polygon outline

71
0:08:10.720 --> 0:08:17.680
of the building, which otherwise it wouldn't have without a link. So, adding these links

72
0:08:17.680 --> 0:08:23.840
by hand is kind of laborious and time-consuming, so better to write some software to do it

73
0:08:23.840 --> 0:08:33.240
instead. So, the software I've written, I'm calling it AWL or OWL Places, and the web address

74
0:08:33.240 --> 0:08:41.720
is osm.wikidata.link. So, this is what the software looks like when you visit it. It

75
0:08:41.720 --> 0:08:47.920
asks you for a place name where you want to search for some matches, so you can put in

76
0:08:47.920 --> 0:08:55.680
the name of your town, somewhere you're familiar with, and can check that the matches are valid.

77
0:08:55.680 --> 0:09:03.640
So, I've done a search, and I've found the place where the Royal Palace is located, and

78
0:09:03.640 --> 0:09:09.680
this is the page you see. You've got a map with some blue pins, and these blue pins represent

79
0:09:09.680 --> 0:09:17.520
Wikidata items, but the software has found something that matches OpenStreetMap. So,

80
0:09:17.520 --> 0:09:24.960
if I scroll down this page, you can see some example matches. So, I show you various bits

81
0:09:24.960 --> 0:09:33.000
of data that come from Wikidata and Wikipedia to help you try and identify if these matches

82
0:09:33.000 --> 0:09:38.680
are valid. Like, sometimes the software doesn't get it right and will give you an invalid

83
0:09:38.680 --> 0:09:47.680
match, so it's important to look through this list and check that all the matches are correct.

84
0:09:47.680 --> 0:09:54.120
And to help you with that, I show you the first paragraph from the Wikipedia article,

85
0:09:54.120 --> 0:10:03.960
and I show you any images that come from Wikidata. You've got the Wikidata description there.

86
0:10:03.960 --> 0:10:12.560
The paragraphs I show you, I'll talk later about how it decides which languages to use

87
0:10:12.560 --> 0:10:18.280
for showing those, but it supports various languages, and then it shows you some of the

88
0:10:18.280 --> 0:10:25.640
details from OpenStreetMap, just so you can compare and make sure that they match. So,

89
0:10:25.640 --> 0:10:32.880
if I click on one of those, then it will zoom in on the map, and it shows you the polygon

90
0:10:32.880 --> 0:10:39.520
outline of the thing. You can see the red pin there is the selected thing. So, that

91
0:10:39.520 --> 0:10:43.000
looks like a pretty good match. It's probably the same thing, so we can go ahead and save

92
0:10:43.000 --> 0:10:52.200
that. So, we're interested in saving these matches to OpenStreetMap. So, then the software

93
0:10:52.200 --> 0:10:57.400
has a button that lets us log in via OpenStreetMap by auth, just put in a username and password

94
0:10:57.400 --> 0:11:03.680
and log in, and then you come back to the confirmation page, where you just see the

95
0:11:03.680 --> 0:11:09.280
same list again, but kind of abbreviated. These are things that I've checked, and I've

96
0:11:09.280 --> 0:11:15.920
said, yes, these are valid matches, and I want to save them. You can put a change comment.

97
0:11:15.920 --> 0:11:21.720
So, everything gets saved together as one change set, like it goes in as a single edit,

98
0:11:21.720 --> 0:11:28.520
and the change comment on the change set is generated automatically based on the location,

99
0:11:28.520 --> 0:11:35.560
but you can change it if you want to. So, I'll carry on with describing the software,

100
0:11:35.560 --> 0:11:40.840
and I'll show you some more features that I've built. So, I've added a type filter,

101
0:11:40.840 --> 0:11:46.920
like at the top here, you can see it says type filter, and there's a list of different

102
0:11:46.920 --> 0:11:55.640
types of things that it's found that are possible matches. So, it's got statues and buildings,

103
0:11:55.640 --> 0:12:02.960
and if I tick, I can tick sculpture to say I just want sculptures, and then when I scroll

104
0:12:02.960 --> 0:12:09.520
down, it will just show me things that it thinks are sculptures. So, I can focus on

105
0:12:09.520 --> 0:12:15.920
one particular type of thing. Sometimes, when you put in the name of a town, you might get

106
0:12:15.920 --> 0:12:21.600
200 matches, and it's a bit overwhelming to do them all in one go, so it's useful to do

107
0:12:21.600 --> 0:12:28.800
them bit by bit, just specific types that you're interested in. And then, when I go

108
0:12:28.800 --> 0:12:35.480
to the save page, it generates a change comment that's based on the type filter that you've

109
0:12:35.480 --> 0:12:44.960
selected. So, here it just says add Wikidator tags to sculptures in this area. So, I'm just

110
0:12:44.960 --> 0:12:51.400
going to talk about how it determines what is a match. So, if we have a look at one of

111
0:12:51.400 --> 0:13:02.280
these examples, this is a sculpture. So, if we have a look at the same thing on Wikidator,

112
0:13:02.280 --> 0:13:07.120
you can see that there's a statement in Wikidator, which is the instance of statement. So, this

113
0:13:07.120 --> 0:13:13.360
is saying that this thing is a sculpture. So, we can click through and have a look at

114
0:13:13.360 --> 0:13:23.120
the sculpture page. This is the Wikidator item for the concept of a sculpture. And then,

115
0:13:23.120 --> 0:13:31.440
if we scroll down this page, we get a Wikidator property, which is for OpenStreetMap tag or

116
0:13:31.440 --> 0:13:38.320
key. So, there's actually two values here, and the second value is uninteresting, like

117
0:13:38.320 --> 0:13:44.640
it's shown in red because it's a deprecated value, like it's a kind of old value that

118
0:13:44.640 --> 0:13:48.680
used to be used in OpenStreetMap and it's been documented in Wikidator. So, the interesting

119
0:13:48.680 --> 0:13:57.880
one is the top one, which is tag colon artwork underscore type vehicle sculpture. So, you

120
0:13:57.880 --> 0:14:05.520
know, the information is stored in Wikidator about what tags are used in OpenStreetMap

121
0:14:05.520 --> 0:14:12.200
to describe things. So, using this information, we can say that these two things are the same

122
0:14:12.200 --> 0:14:21.400
type of entity. So, when it comes to matching things, I'm looking for the coordinates to

123
0:14:21.400 --> 0:14:27.120
match, like the two things in the two systems have to be close to each other. They're not

124
0:14:27.120 --> 0:14:34.400
necessarily, you know, a perfect match, but within like 50 meters or something. And the

125
0:14:34.400 --> 0:14:39.280
entity type has to be the same like I just described. And then I'm also looking for a

126
0:14:39.280 --> 0:14:47.440
matching name or street address or identifier. So, I pull names from all over the place in

127
0:14:47.440 --> 0:14:54.040
both systems, like in Wikidator there's a bunch of different fields, or rather in OpenStreetMap

128
0:14:54.040 --> 0:14:59.080
there's a bunch of different fields where names can be stored, and I look at all of

129
0:14:59.080 --> 0:15:04.320
those, and then in Wikidator there's different places to get the names. I look at the, the

130
0:15:04.320 --> 0:15:11.280
labels that are in Wikidator, the aliases, the names of any Wikipedia articles. I look

131
0:15:11.280 --> 0:15:18.680
at the file name of any images that are in Wikidator just to get as much, you know, many

132
0:15:18.680 --> 0:15:23.720
possible names that I can use for matching. And then I normalize the names a lot, so I

133
0:15:23.720 --> 0:15:30.720
lowercase them and I remove stop words, and I process them a lot to try and get as many

134
0:15:30.720 --> 0:15:37.480
name matches I can. And then similarly with street addresses. So, there's street addresses

135
0:15:37.480 --> 0:15:43.720
in OpenStreetMap and Wikidator which I compare, and the software also looks for street addresses

136
0:15:43.720 --> 0:15:52.160
in the first paragraph of Wikipedia articles. So, and then in terms of matching identifiers,

137
0:15:52.160 --> 0:16:00.600
there's lots of standardized OpenStreetMap tags for different identifiers, and then there's

138
0:16:00.600 --> 0:16:06.440
also properties in Wikidator for those same identifiers. So, if, you know, I've got a

139
0:16:06.440 --> 0:16:10.800
railway station that's got the same station code in OpenStreetMap and Wikidator, I can

140
0:16:10.800 --> 0:16:15.560
be pretty sure that it's the same thing that I'm matching, so I can be confident about

141
0:16:15.560 --> 0:16:22.400
that match. So, one of the things I'm not using at the moment is the Wikipedia tags

142
0:16:22.400 --> 0:16:30.160
which appear in OpenStreetMap. Like before Wikidator came along, there was lots of Wikipedia

143
0:16:30.160 --> 0:16:37.480
tags added to OpenStreetMap, and they're not completely consistent in their formatting

144
0:16:37.480 --> 0:16:45.280
for how they link to Wikipedia, and sometimes they're wrong. So, you know, I've left the

145
0:16:45.280 --> 0:16:51.800
work for now working on trying to match up using Wikipedia tags for somebody else to

146
0:16:51.800 --> 0:16:57.160
have a look at. But I've been waiting for a few years now and no one has, so I might

147
0:16:57.160 --> 0:17:05.640
have to have a go at this. So, just in case anyone's interested in the technology behind

148
0:17:05.640 --> 0:17:15.240
this, this software is written in Python with Flask. I'm using Postgres as my database,

149
0:17:15.240 --> 0:17:21.020
and then on the front end, you know, various bits of JavaScript. I'm not really a front

150
0:17:21.020 --> 0:17:27.080
end developer, but, you know, I'm modelling my way through, and it seems to be working

151
0:17:27.080 --> 0:17:36.000
quite well. I'm using a bunch of APIs to get this data, so in terms of searching for places

152
0:17:36.000 --> 0:17:42.240
to look for matches, I use the OpenStreetMap Norman Artem API, and then to grab more data,

153
0:17:42.240 --> 0:17:49.320
I use the Overpass API, and then on the Wikidator side, I do a lot of sparkle queries against

154
0:17:49.320 --> 0:17:57.280
the Wikidator query service, and I use the Wikidator MediaWiki API to get the details

155
0:17:57.280 --> 0:18:03.520
of the Wikidator items. So, there's a bunch of things that don't work in my system at

156
0:18:03.520 --> 0:18:10.880
the moment. One of them is tunnels, like I designed the software with the assumption

157
0:18:10.880 --> 0:18:16.440
that there would be a kind of one-to-one mapping between a thing in OpenStreetMap and a thing

158
0:18:16.440 --> 0:18:23.400
in Wikidator, and that doesn't work for tunnels, because tunnels tend to get represented as

159
0:18:23.400 --> 0:18:29.980
two ways in OpenStreetMap, where, as in Wikidator, there'll be a single item. And so, you know,

160
0:18:29.980 --> 0:18:34.720
my assumption was wrong, and I need to change my software to say that you can link, you

161
0:18:34.720 --> 0:18:43.080
know, add the Wikidator identifier to ways in OpenStreetMap, but I haven't done that

162
0:18:43.080 --> 0:18:51.880
yet. Incidentally, bridges, we don't have the same problem with bridges, like the way

163
0:18:51.880 --> 0:18:56.960
that bridges get represented in OpenStreetMap is they're often two ways, but then there's

164
0:18:56.960 --> 0:19:03.440
a relation across the whole bridge that represents the bridge itself, and tunnels, there isn't

165
0:19:03.440 --> 0:19:10.040
a relation for representing, you know, the whole concept of the tunnel. So, that's another

166
0:19:10.040 --> 0:19:15.760
possible approach. Maybe OpenStreetMap should change and start mapping the tunnels with

167
0:19:15.760 --> 0:19:21.600
a relation that contains the two ways, you know, for storing Wikidator tags and any

168
0:19:21.600 --> 0:19:29.600
other information about the tunnel that is the same across both ways. So, another thing

169
0:19:29.600 --> 0:19:36.600
that I don't support are rivers, because they are linear relations, and my software that

170
0:19:36.600 --> 0:19:44.440
I'm using to import data from OpenStreetMap, I'm using OSM to PG SQL, and it can't handle

171
0:19:44.440 --> 0:19:50.160
linear relations, it just, you know, expects relations to be polygons. So, at the moment,

172
0:19:50.160 --> 0:19:56.600
rivers don't work in the system. And then similarly for tram stops, tram stops are kind

173
0:19:56.600 --> 0:20:01.520
of complex objects in OpenStreetMap, like you've got, you know, stop positions of where

174
0:20:01.520 --> 0:20:07.320
the tram stops on either side of the road, which are nodes, single points, and they're

175
0:20:07.320 --> 0:20:15.680
collected together into a relation, and that isn't supported properly by OSM to PG SQL,

176
0:20:15.680 --> 0:20:23.360
so I can't handle tram stops properly. I've got to talk about a few more features that

177
0:20:23.360 --> 0:20:31.680
are in the software. So, again, this is the center of Brussels, and I've got the language

178
0:20:31.680 --> 0:20:40.720
selector. So, the software has figured out all the languages that get used in for the

179
0:20:40.720 --> 0:20:47.360
labels of things and the OpenStreetMap objects that are in this area. You know, unsurprisingly

180
0:20:47.360 --> 0:20:54.280
for Brussels, the most popular languages are French and then Dutch, and English is the

181
0:20:54.280 --> 0:21:00.920
third most popular. Interestingly, we've got Latin at the bottom there. There's 22 items

182
0:21:00.920 --> 0:21:08.760
that have got labels in Latin in Wikidata. But, so, by default, this page is opened in

183
0:21:08.760 --> 0:21:15.320
French, and you can see the type filter is appearing in French, but I can't read French

184
0:21:15.320 --> 0:21:22.840
very well, so if I want to change it to Dutch, I can reorder these languages by drag and

185
0:21:22.840 --> 0:21:28.920
drop, or I can click on move to top, and you can see the type filter is now switched into

186
0:21:28.920 --> 0:21:34.800
being in Dutch, or if I want it in English, then I can move English to the top of the

187
0:21:34.800 --> 0:21:41.640
list, and it will show me the type filter in English, English labels and descriptions.

188
0:21:41.640 --> 0:21:47.360
And if I scroll down the page, you can see this is the page appearing in French. You've

189
0:21:47.360 --> 0:21:54.960
got titles in French and the extracts from Wikidata in French, or again, I can change

190
0:21:54.960 --> 0:22:00.960
it into Dutch if I want, or I can have it in English. And this works without reloading

191
0:22:00.960 --> 0:22:07.240
the page. You just change the order that you prefer the languages to appear in, and it

192
0:22:07.240 --> 0:22:15.800
does it all on the client and switches it over. So, some statistics for you. People

193
0:22:15.800 --> 0:22:23.680
are using this tool. Well, first of all, there's more and more Wikidata tags appearing in OpenStreetMap,

194
0:22:23.680 --> 0:22:30.160
so not all of them are coming from my software. There's other people figuring out how to add

195
0:22:30.160 --> 0:22:40.240
Wikidata tags to OpenStreetMap. So, here's some more stats. 26% of the Wikidata tags

196
0:22:40.240 --> 0:22:47.160
in OpenStreetMap were added using this tool, and we're up to 400 people, and there's been

197
0:22:47.160 --> 0:22:56.920
23,000 change sets, and we're getting close to 700,000 Wikidata tags added. So, I'm going

198
0:22:56.920 --> 0:23:05.560
to talk about the licensing. Wikidata is CC0 or public domain. You can do anything you

199
0:23:05.560 --> 0:23:12.360
want with Wikidata, and OpenStreetMap uses the Open Database license, which is a license

200
0:23:12.360 --> 0:23:21.200
that was pretty much written for OpenStreetMap. So, you can't copy any data from OpenStreetMap

201
0:23:21.200 --> 0:23:29.120
into Wikidata because you'd be relicensing it CC0, which is not allowed. But even more

202
0:23:29.120 --> 0:23:36.080
than just the licenses being different, the intellectual property jurisdictions are different.

203
0:23:36.080 --> 0:23:42.440
So, OpenStreetMap asserts database rights. Like, the argument is that it's a lot of effort

204
0:23:42.440 --> 0:23:47.520
to go around collecting all this information and putting it in OpenStreetMap, and they

205
0:23:47.520 --> 0:23:54.400
want to protect that, whereas Wikidata is part of the Wikimedia Foundation, which uses

206
0:23:54.400 --> 0:24:02.520
US intellectual property rules. And so, under US law, facts are not copyrighted, not protected,

207
0:24:02.520 --> 0:24:11.440
rather in law. So, the two things don't mesh that well, but it's fine because I'm not copying

208
0:24:11.440 --> 0:24:17.440
any data between the systems. I'm just adding links between them. In some cases, it might

209
0:24:17.440 --> 0:24:24.480
be nice if we could, you know, tidy up the data in one system based on the other. But

210
0:24:24.480 --> 0:24:30.120
I'm not doing that, and, you know, you've got to think carefully about the intellectual

211
0:24:30.120 --> 0:24:38.040
property rules before you try and do that. And so, also, just while we're talking about

212
0:24:38.040 --> 0:24:42.920
licenses, my software is GPL, and the code is on GitHub. It's all open source. Anyone

213
0:24:42.920 --> 0:24:50.640
can have a look at the software behind it. So, an important aspect for being able to

214
0:24:50.640 --> 0:24:58.320
add these links between the systems is to have stable identifiers. And for a long time,

215
0:24:58.320 --> 0:25:06.440
OpenStreetMap has talked about the identifiers not being stable. You know, sometimes, say,

216
0:25:06.440 --> 0:25:14.000
a railway station might get mapped as a single point, and then later on, somebody comes along

217
0:25:14.000 --> 0:25:20.560
and traces the outline of the building. And so, it changes from being a node into a way

218
0:25:20.560 --> 0:25:27.960
or a relation, and the identifier will have changed. So, you know, there aren't stable

219
0:25:27.960 --> 0:25:35.360
identifiers for concepts in OpenStreetMap. So, that, you know, the thinking is that that

220
0:25:35.360 --> 0:25:42.720
makes it difficult to link into OpenStreetMap because the identifiers might change. And

221
0:25:42.720 --> 0:25:49.640
there's been discussions within the OpenStreetMap community of having a permanent ID. And these

222
0:25:49.640 --> 0:25:55.640
discussions have been going on since 2017, and they haven't, you know, come to a conclusion.

223
0:25:55.640 --> 0:26:00.720
There's been an argument that maybe the right thing to use in terms of stable identifiers

224
0:26:00.720 --> 0:26:07.480
would be Wikidata IDs. Just say, anything that's important enough to need a stable identifier

225
0:26:07.480 --> 0:26:14.120
is probably on Wikidata, and so you could use the Wikidata IDs as a permanent ID. But

226
0:26:14.120 --> 0:26:18.720
another way to look at it is, in reality, you know, most of the world is mapped now

227
0:26:18.720 --> 0:26:26.080
on OpenStreetMap, and the IDs aren't changing that much. You know, things tend to be mapped

228
0:26:26.080 --> 0:26:31.800
as polygons, like outlines of buildings, and people aren't coming along and making changes

229
0:26:31.800 --> 0:26:36.320
that are destructive in destroying the IDs. So, maybe the IDs that are in OpenStreetMap

230
0:26:36.320 --> 0:26:42.440
already, the IDs that I talked about earlier, maybe they're stable enough, and maybe it's

231
0:26:42.440 --> 0:26:50.760
okay to just link to those and not worry about them changing. Whereas, Wikidata, on the other

232
0:26:50.760 --> 0:26:56.480
hand, and Wikidata was designed always to have stable identifiers, that was, you know,

233
0:26:56.480 --> 0:27:05.760
a big part, I think, of the initial approach to Wikidata. Like, Wikipedia identifies things

234
0:27:05.760 --> 0:27:11.600
by article title, and over time the article titles can change, and then, you know, things

235
0:27:11.600 --> 0:27:17.760
get moved around, and so they don't have, you know, long-term stable IDs. And so, the

236
0:27:17.760 --> 0:27:24.400
Wikidata QIDs was an approach that gave you stable IDs, but it turns out that they're not

237
0:27:24.400 --> 0:27:30.000
completely stable. There's also redirects appearing in Wikidata, like, with some of

238
0:27:30.000 --> 0:27:35.000
the work I've been doing, I find a lot of duplicates in Wikidata. Things have been imported

239
0:27:35.000 --> 0:27:41.320
from different sources, and say, for example, I found a lot of duplicate churches in Wikidata.

240
0:27:41.320 --> 0:27:48.840
So when I go and I merge the churches, then the ID that represents, you know, one of those

241
0:27:48.840 --> 0:27:58.200
churches will change. So, you know, I've got on the slide here, there's 10,000 OpenStreetMap

242
0:27:58.200 --> 0:28:06.080
objects that point to a redirect in Wikidata, and somebody needs to go through and update

243
0:28:06.080 --> 0:28:12.120
those, like, resolve those redirects and fix OpenStreetMap. I will probably do that at

244
0:28:12.120 --> 0:28:21.520
some point, if no one else does. So, a recent change to Wikidata is that there's a new property

245
0:28:21.520 --> 0:28:30.920
called OpenStreetMapElement, and that is for storing OpenStreetMap IDs. So now it is possible

246
0:28:30.920 --> 0:28:38.840
to add the links in both directions. We can have links from Wikidata to OpenStreetMap,

247
0:28:38.840 --> 0:28:46.480
which we never used to be able to have. So I need to change my software to start adding

248
0:28:46.480 --> 0:28:52.600
these links in. Like, when you save things at the moment, it just uploads them to OpenStreetMap.

249
0:28:52.600 --> 0:28:58.780
It should be uploading them to Wikidata as well. But to do that, I need to make the user

250
0:28:58.780 --> 0:29:07.040
log in to both systems, you know, which is possible, but it will break the flow of it.

251
0:29:07.040 --> 0:29:32.880
So I am going to try and do a demo. Let's see. So this is the software I'm describing,

252
0:29:32.880 --> 0:29:40.360
and I can say I want it in English. And you can see the type filter there. And if I scroll

253
0:29:40.360 --> 0:29:46.000
down, it shows matches that weren't very good at the start. So it's got some difficulty

254
0:29:46.000 --> 0:29:51.720
with this match, and it can't handle it. So we scroll past those. And here's the first

255
0:29:51.720 --> 0:30:04.320
match that the system can handle. And if I click on it, then it shows you the match.

256
0:30:04.320 --> 0:30:16.360
I can click toggle OSM tags. This is showing all of the tags from OpenStreetMap. The green

257
0:30:16.360 --> 0:30:25.240
ones are ones where it's found a match that's using those to figure out what the match is.

258
0:30:25.240 --> 0:30:31.320
I'll show you some more. Here's another one. You can see it appearing on the map. If I

259
0:30:31.320 --> 0:30:39.640
think this is not a correct match, I can click here, and it's deselected it. Thank you. So

260
0:30:39.640 --> 0:30:46.720
I've got a whole pile of matches here. I've checked these ahead of time. They're all good.

261
0:30:46.720 --> 0:30:54.080
So I'll scroll to the bottom, and I can say add tags to OpenStreetMap. And this is the

262
0:30:54.080 --> 0:31:02.400
confirmation page that I was telling you about. So I can hit save. And the software goes through,

263
0:31:02.400 --> 0:31:15.480
and it's saving my matches. So it has done it. And I can say view my change set. And

264
0:31:15.480 --> 0:31:23.800
you get to see my change set on OpenStreetMap. I can scroll down. And you can see these are

265
0:31:23.800 --> 0:31:32.240
all the things I've edited. So nice and quick to go through and edit OpenStreetMap. And

266
0:31:32.240 --> 0:31:46.600
I've just got another example. Another bit of Brussels. I can change to English. Say

267
0:31:46.600 --> 0:31:53.840
I want squares. And then if I scroll down, it will just show me some matches that haven't

268
0:31:53.840 --> 0:32:02.640
worked. So I scroll past those. Here's some squares that the software has managed to match

269
0:32:02.640 --> 0:32:09.760
up. And these all look like good matches. I've checked these before. So I can scroll

270
0:32:09.760 --> 0:32:18.800
to the bottom. There's another one. And I can say add to save to OpenStreetMap. And

271
0:32:18.800 --> 0:32:29.160
it's in the change comment, it's put the word squares. So I can hit save. And that is working

272
0:32:29.160 --> 0:32:41.360
to edit OpenStreetMap. I'll go back to the presentation. So that was my existing software.

273
0:32:41.360 --> 0:32:44.440
That's been running for a few years. People have been using that. And I've been working

274
0:32:44.440 --> 0:32:52.040
on a new version of the software that I'm calling LMap. This is what LMap looks like.

275
0:32:52.040 --> 0:32:59.160
So when you open this, you go straight to a map. It tries to guess where you are, locate

276
0:32:59.160 --> 0:33:06.360
you based on your IP address. And then it shows you this interface, much more map based

277
0:33:06.360 --> 0:33:16.360
rather than a list of things. You see the red pins are where there isn't a match already.

278
0:33:16.360 --> 0:33:21.840
Green pins are where there is a match. And the yellow pins are OpenStreetMap things.

279
0:33:21.840 --> 0:33:28.000
So you can see some of them have a line between the green pin and the yellow pin. That's showing

280
0:33:28.000 --> 0:33:36.080
you which, you know, the green pin is a Wikidator item that matches a thing on OpenStreetMap

281
0:33:36.080 --> 0:33:41.040
which is the yellow pin and there's a line between them. And you've got a filter at the

282
0:33:41.040 --> 0:33:48.520
side where you can filter on different item types. This is an example where I've selected

283
0:33:48.520 --> 0:33:54.000
one of the pins. I've clicked on a pin and it changes the color slightly. And it shows

284
0:33:54.000 --> 0:33:59.960
you some details. You get to see the photo and bits and pieces from Wikidator. And then

285
0:33:59.960 --> 0:34:05.040
underneath it shows you a list of possible matches. It just says, you know, this is a

286
0:34:05.040 --> 0:34:11.920
building. Here's some other buildings nearby. And I can see the street addresses on here

287
0:34:11.920 --> 0:34:18.040
and, you know, the nearest building, the street address matches. But in actual fact there's

288
0:34:18.040 --> 0:34:24.240
two street addresses on there. And if I scroll down this list, I can see that there's two

289
0:34:24.240 --> 0:34:30.000
buildings next to each other that both match this warehouse. So for some reason Wikidator

290
0:34:30.000 --> 0:34:35.800
is representing it as a single item whereas OpenStreetMap has got two separate objects.

291
0:34:35.800 --> 0:34:41.000
But this version of the software supports it. So I tick the boxes next to them and then

292
0:34:41.000 --> 0:34:48.880
I can hit save and it'll add the Wikidator tag to them. So this bit of software I'm still

293
0:34:48.880 --> 0:34:55.640
working on. It's live but it keeps breaking so I'm not really advertising for people to

294
0:34:55.640 --> 0:35:06.400
use it. I need to do some more work on it. And in fact I think I need some help. I'm

295
0:35:06.400 --> 0:35:12.360
just a hobbyist and I'm running out of time to work on this stuff. So I don't know if

296
0:35:12.360 --> 0:35:19.320
anyone knows how I can get some help with this, whether there's someone out there who

297
0:35:19.320 --> 0:35:27.440
wants to pay for this work or whether I can find volunteers to help me. I don't know.

298
0:35:27.440 --> 0:35:37.400
It's sort of a tricky like trying to work out managing people to work on this. So yeah,

299
0:35:37.400 --> 0:35:51.080
that's the software built. And I guess has anyone got any questions?

300
0:35:51.080 --> 0:36:20.920
If you have a question please raise your hand so I can see you. Oh there, I'm coming.

301
0:36:20.920 --> 0:36:26.960
Thank you Edward for that. Hi, I'm Seabroant. I'm a volunteer at Wikimedia. Wikimedia has

302
0:36:26.960 --> 0:36:35.040
a service called Wikimedia Cloud Services where you get free compute resources. Oh,

303
0:36:35.040 --> 0:36:40.600
where you can get free compute resources. I would highly recommend that you look into

304
0:36:40.600 --> 0:36:46.920
that. So like the machine I'm running some of this stuff on is 60 gigabytes of RAM and

305
0:36:46.920 --> 0:36:54.320
two terabytes of disk. Would I be able to get that much from Cloud Services? I would

306
0:36:54.320 --> 0:37:01.560
highly recommend that you talk to someone there. Okay. As you may be having a project

307
0:37:01.560 --> 0:37:07.800
that's quite valuable to the Wikimedia movement, I'm sure that someone will try to help you.

308
0:37:07.800 --> 0:37:26.480
Yep, sounds good. Anybody else? Over there. Hi, thank you for your contributions and for

309
0:37:26.480 --> 0:37:33.960
the talk. Have you considered interfacing or linking with Osmos? It's a quality assurance

310
0:37:33.960 --> 0:37:46.440
project from... Licking with what, sorry? Osmos. Osmos is Osmos.opestreamad.fr. It's

311
0:37:46.440 --> 0:37:53.560
a quality assurance project. It's a matter where you see alerts on the map, dangling

312
0:37:53.560 --> 0:38:03.240
ways, etc. I think it's somewhat extended and it has an existing user base. Maybe you

313
0:38:03.240 --> 0:38:13.720
could benefit from that. I haven't looked at this. Okay, I will write you later. Thank

314
0:38:13.720 --> 0:38:24.120
you. Hello. I have two remarks. First of all, I'm the maker of MapComplete, which also

315
0:38:24.120 --> 0:38:31.080
has an etymology team to link Wikidata to Straits so we can work together on that.

316
0:38:31.080 --> 0:38:39.560
And then second, a small remark on adding an ID of OpenStreetMap to Wikidata. That's

317
0:38:39.560 --> 0:38:44.480
a bit of a float approach because IDs aren't very stable in OpenStreetMap. Say that a new

318
0:38:44.480 --> 0:38:51.160
park is opened, I place a point where the park is and then a few days later someone

319
0:38:51.160 --> 0:38:56.800
else passes by and says, oh, we have aerial imagery now. There was an outline as a polygon

320
0:38:56.800 --> 0:39:04.200
and then it removes the alt point. That means that the link would be broken in Wikidata.

321
0:39:04.200 --> 0:39:08.760
I mean, I guess we just have to deal with that. We can have software that looks for

322
0:39:08.760 --> 0:39:14.600
these broken links. Maybe it would be nice if OpenStreetMap could add redirects like

323
0:39:14.600 --> 0:39:21.800
Wikidata has. Yeah, except that it's way more difficult than that because, for example,

324
0:39:21.800 --> 0:39:26.520
sometimes you have a big street and then you have properties which are different for parts

325
0:39:26.520 --> 0:39:30.640
of the street and then the street gets split into three parts. So then suddenly you'd have

326
0:39:30.640 --> 0:39:35.160
to redirect to three different parts. So it's better.

327
0:39:35.160 --> 0:39:43.880
Do you think that it's a mistake to add OpenStreetMap IDs to Wikidata then?

328
0:39:43.880 --> 0:39:51.760
Yes, basically. It doesn't make sense at first glance, but technically it will break down

329
0:39:51.760 --> 0:39:59.440
over time. So it's better to add a link to OpenStreetMap to Wikidata and then look at

330
0:39:59.440 --> 0:40:06.960
that perversely because the editing tools will keep track of the Wikidata link. So if

331
0:40:06.960 --> 0:40:11.120
the roads get split into multiple pieces, every single piece of the road will get a

332
0:40:11.120 --> 0:40:15.880
backlink to the Wikidata item. Yeah, you might have a good point.

333
0:40:15.880 --> 0:40:35.400
But let's have a discussion after the questions. Hi, Ed. Thanks for sharing the new software.

334
0:40:35.400 --> 0:40:43.040
It looks great. So I was fascinated by the example where you showed more than one potential

335
0:40:43.040 --> 0:40:50.120
match and I just wondered, does your software have a role to play in improving the quality

336
0:40:50.120 --> 0:40:54.080
of the data by cross-referencing between the two sides?

337
0:40:54.080 --> 0:41:00.240
I think it can improve the quality. Like I say, when I run this, I find duplicates in

338
0:41:00.240 --> 0:41:08.520
Wikidata that are difficult to identify from just Wikidata itself. I feel like the coordinates

339
0:41:08.520 --> 0:41:14.920
that are in Wikidata don't get much use. Like for a long time, you didn't even see the map

340
0:41:14.920 --> 0:41:20.480
appear in the Wikidata pages and then a lot of the coordinates were wrong, people transposed

341
0:41:20.480 --> 0:41:30.080
digits. Since the map is visible, people are more likely to check their data. And yeah,

342
0:41:30.080 --> 0:41:37.000
you can, the fact that the two systems exist, you can cross-reference them and find errors.

343
0:41:37.000 --> 0:41:47.480
Yes. I'm wondering how relevant it is now based upon the question just a moment ago.

344
0:41:47.480 --> 0:41:54.320
But I was wondering, can you search Wikidata for a lot longer window and find all objects

345
0:41:54.320 --> 0:42:03.320
within it when you're adding data to OpenStreetMap? So the, the, the, the, underneath I'm doing

346
0:42:03.320 --> 0:42:10.960
sparkle queries to Wikidata and Wikidata sparkle queries do support coordinate bounding boxes.

347
0:42:10.960 --> 0:42:16.480
I can say, you know, you can write your own query in sparkle that will give you all the

348
0:42:16.480 --> 0:42:23.760
churches within a given bounding box. The, like I demoed two separate systems that should

349
0:42:23.760 --> 0:42:29.960
really be combined into one and the old system doesn't support bounding boxes. It's all based

350
0:42:29.960 --> 0:42:35.840
on kind of place polygons. You have to say, show me things that are in Brussels. You can't

351
0:42:35.840 --> 0:42:41.560
say, show me things within this rectangle. And the new system is more kind of bounding

352
0:42:41.560 --> 0:42:45.680
box based in that you see the map and it just shows you all the matches that are in the

353
0:42:45.680 --> 0:42:50.640
rectangle that's visible on the screen. I'm not sure if that answers your question.

354
0:42:50.640 --> 0:42:55.840
It doesn't think, it's very valuable what you've done. Thanks.

355
0:42:55.840 --> 0:43:13.760
Any other questions? Raise your hand. Okay. Hi. Thank you for your talk. I had a question

356
0:43:13.760 --> 0:43:20.160
about the OpenStreetMap, OpenStreetMap tags that are in Wikidata. I think you show this

357
0:43:20.160 --> 0:43:26.360
in one of your slides. So how often are these tags uploaded from OpenStreetMap and does

358
0:43:26.360 --> 0:43:32.160
it pose any problem with the license compatibility issues that you talked about?

359
0:43:32.160 --> 0:43:40.000
I think you mean the property for OpenStreetMap tag or key. So things like I showed the palace

360
0:43:40.000 --> 0:43:45.680
type. Is that right? Is that the one you're thinking of? There's a few properties in Wikidata.

361
0:43:45.680 --> 0:43:51.520
Yes, the OSM tag like the structure one. I don't think there's any problem in terms

362
0:43:51.520 --> 0:44:00.080
of the intellectual property. It's kept pretty up to date. Like people invent a new tag to

363
0:44:00.080 --> 0:44:05.800
use on OpenStreetMap and then they go and find the matching Wikidata item and add the

364
0:44:05.800 --> 0:44:12.520
tag to it. And some unofficial tags that are used on OpenStreetMap, the information is

365
0:44:12.520 --> 0:44:23.280
in Wikidata. So it's pretty current, I think. So similar question from my side. So nice

366
0:44:23.280 --> 0:44:29.480
presentation. You explained the licenses nicely. Then you said that you cannot copy data from

367
0:44:29.480 --> 0:44:36.440
the OpenStreetMap to Wikidata. But what about the other way around? So that's an interesting

368
0:44:36.440 --> 0:44:43.120
question. And the OpenStreetMap community is a bit suspicious of the information that's

369
0:44:43.120 --> 0:44:49.080
in Wikidata. Like there's a feeling, you know, where did the coordinates come from? Were

370
0:44:49.080 --> 0:44:53.880
they just copied from Google Maps? Like do people look up a thing on Google Maps, find

371
0:44:53.880 --> 0:45:00.040
the coordinates, put the coordinates into Wikidata? And then does that make Wikidata

372
0:45:00.040 --> 0:45:07.040
a derived work of Google Maps? And so, you know, it's probably fine to copy any data

373
0:45:07.040 --> 0:45:15.720
from Wikidata into OpenStreetMap. If you want to copy a name in a different language, that's

374
0:45:15.720 --> 0:45:21.440
probably fine. But my software doesn't do that. I just add the links. And once the links

375
0:45:21.440 --> 0:45:26.360
are there, it's easier for somebody else to come along and find these things and copy

376
0:45:26.360 --> 0:45:34.480
the data over if they want. So my question is, does the software do the

377
0:45:34.480 --> 0:45:42.600
requests, the API requests on the back end on your hosted service? Or is it the client,

378
0:45:42.600 --> 0:45:46.840
the user that will do the browser will do the API requests?

379
0:45:46.840 --> 0:45:52.840
I showed two versions. The old, you know, the more established version is using the

380
0:45:52.840 --> 0:45:58.800
Nominate API to find things and then it's using the Overpass API to grab lots of map

381
0:45:58.800 --> 0:46:05.240
data. And then I use the OpenStreetMap API to push the changes you make to upload the

382
0:46:05.240 --> 0:46:13.000
Wikidata tags back into OpenStreetMap. And the new system I built maintains a full mirror

383
0:46:13.000 --> 0:46:22.320
of the OpenStreetMap data just to make things faster. So I'm not using APIs for downloading

384
0:46:22.320 --> 0:46:27.040
the data with that one. I just use the API for saving the changes. Does that answer your

385
0:46:27.040 --> 0:46:31.520
question? Yeah, partly. But does the request to fetch

386
0:46:31.520 --> 0:46:38.960
data from the Wikidata, does that go from your servers? Do your servers fetch data?

387
0:46:38.960 --> 0:46:44.960
Oh, I see. It is all going from my server, yeah. It's not from the client browser. It's

388
0:46:44.960 --> 0:46:51.600
going. Like I do a lot of preprocessing before I show you the list of matches and then I

389
0:46:51.600 --> 0:46:57.000
store them all in the database. So when you load the list of matches for a place, it's

390
0:46:57.000 --> 0:47:02.880
not doing any queries either on the server or the client with the APIs. It's all stored

391
0:47:02.880 --> 0:47:08.640
in the database. I mean, that's a problem. The matches get stale, there's a refresh button

392
0:47:08.640 --> 0:47:14.080
that you can hit and it will go off and rerun the match and get fresh data from OpenStreetMap

393
0:47:14.080 --> 0:47:17.560
and Wikidata. Yeah, OK. Thanks.

394
0:47:17.560 --> 0:47:24.560
There was a question here? No? OK, so I'll be back. All the other side.

395
0:47:27.200 --> 0:47:34.200
Hi, I'm Valerio from Milano and thank you so much for this tool. Again, thank you for

396
0:47:34.200 --> 0:47:41.200
the person who mentioned the possibility to host this tool on the Wikimedia Foundation

397
0:47:48.480 --> 0:47:53.720
infrastructure because it would be really, really nice to propose this on the Wikimedia

398
0:47:53.720 --> 0:48:00.720
Fabricator and I would be interested in discovering how the discussion will go. And second thing,

399
0:48:00.720 --> 0:48:07.720
you asked how to found your development. I think you can just contact your local Wikimedia

400
0:48:08.280 --> 0:48:15.280
chapter that maybe they provide microgrants or something like that. In my local community,

401
0:48:15.320 --> 0:48:21.080
some volunteers often in one week can obtain a microgrant to develop small tools or to

402
0:48:21.080 --> 0:48:28.080
boost some activities. Maybe this can be interesting for if they are useful for the universe and

403
0:48:28.080 --> 0:48:35.080
to produce software and the software and that's all. And one feedback for the user interface,

404
0:48:37.120 --> 0:48:44.120
it's not clear to me how to contribute on just one element. So if I have one minute,

405
0:48:45.080 --> 0:48:52.080
if I want to visit the tool and connect just one item because I'm 100% sure about that

406
0:48:52.080 --> 0:48:59.080
item and so I just want to press save on that contribution and be kidnapped. So this maybe

407
0:49:00.560 --> 0:49:03.560
can be useful if it's not already possible.

408
0:49:03.560 --> 0:49:08.200
There are two approaches for that. If you click on the title of an item, it takes you

409
0:49:08.200 --> 0:49:11.200
to a page where you can just edit a single item.

410
0:49:11.200 --> 0:49:12.600
Okay, wonderful.

411
0:49:12.600 --> 0:49:18.160
Or at the top of the page, there's an uncheck all tick box and then you can just tick the

412
0:49:18.160 --> 0:49:24.240
box next to one thing and scroll to the bottom and hit save. Both of those will work for

413
0:49:24.240 --> 0:49:26.280
adding a single Wikidator tag to.

414
0:49:26.280 --> 0:49:27.640
Okay, thank you.

415
0:49:27.640 --> 0:49:31.120
And thanks for your comment about contacting my local Wikidator.

416
0:49:31.120 --> 0:49:31.760
Okay.

417
0:49:31.760 --> 0:49:33.240
That's a good idea.

418
0:49:33.240 --> 0:49:37.880
Last thing, can you repeat, sorry, why do you need two terabytes of data to have this

419
0:49:37.880 --> 0:49:38.280
working?

420
0:49:38.280 --> 0:49:38.880
The OpenStreetMap.

421
0:49:38.880 --> 0:49:40.880
Thank you so much.

422
0:49:40.880 --> 0:49:47.040
The OpenStreetMap database is big. The world, the earth is big and I keep a whole copy of

423
0:49:47.040 --> 0:49:54.040
it to make things fast. And so it's probably 1.6 terabytes to store all of the OpenStreetMap

424
0:49:54.040 --> 0:49:56.320
data.

425
0:49:56.320 --> 0:49:58.480
I think that's time up.

426
0:49:58.480 --> 0:50:00.480
Okay, so thank you.

427
0:50:00.480 --> 0:50:17.480
Thank you.


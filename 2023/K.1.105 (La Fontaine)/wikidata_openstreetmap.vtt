WEBVTT

00:00.000 --> 00:10.480
So, hello. I'm Edward, and I'm going to be talking about some tools that I've been building

00:10.480 --> 00:15.720
for adding links between OpenStreetMap and Wikidata. I've been working on these for a

00:15.720 --> 00:23.040
few years. This is all a hobbyist project. I'm not being paid to work on this, but I

00:23.040 --> 00:28.360
thought I'd come here and share with you some of the work that I've been doing. So, I'm

00:28.360 --> 00:33.440
going to use as an example to talk about the software that I'm building, this building

00:33.440 --> 00:40.560
which is in Brussels, the Royal Palace of Brussels. It's in the city centre. So, you

00:40.560 --> 00:47.320
can see here, this is it in two different systems. You've got OpenStreetMap and you've

00:47.320 --> 00:56.760
got Wikidata, both showing the same building. So, I'll describe OpenStreetMap just for anyone

00:56.760 --> 01:03.720
who's not familiar with it. It's a collaborative map. I've been going since 2004. It covers

01:03.720 --> 01:10.320
the whole world and anyone can come in and edit the map. It's got revision history. It

01:10.320 --> 01:17.560
works a lot like Wikipedia, but for maps. So, within OpenStreetMap, you've got three

01:17.560 --> 01:27.440
types of objects, nodes, ways and relations, increasing complexity. Each of those objects

01:27.440 --> 01:42.680
can have tags. Tags are pairs of keys and values. I've got some examples here for my

01:42.680 --> 01:48.040
example in Brussels. And the tags are not controlled by the software. You can put anything

01:48.040 --> 01:54.280
you want in, but it won't get rendered on the map unless it's one of the standard tags

01:54.280 --> 01:59.840
that gets used on OpenStreetMap. So, there's a community process for discussing, you know,

01:59.840 --> 02:05.440
how things should be tagged in OpenStreetMap and then it gets documented on the OpenStreetMap

02:05.440 --> 02:10.720
wiki. So, everything in OpenStreetMap can be uniquely

02:10.720 --> 02:17.880
identified by the type and the ID. Like, the ID on its own isn't enough. There's nodes

02:17.880 --> 02:24.120
and ways that have got the same ID. You have to have the type as well. So, in this example

02:24.120 --> 02:30.280
of the Royal Palace, you can see it's a relation. It's a complex polygon. You can see there's

02:30.280 --> 02:34.840
holes in the middle of the building, so you can't represent it as a way. And you can see

02:34.840 --> 02:41.400
there, it's got an ID as well. So, what about the other system I'm talking about?

02:41.400 --> 02:49.800
Wikidata. So, Wikidata is part of the Wikimedia Foundation, like the same people that run

02:49.800 --> 03:00.440
Wikipedia. And it's a wiki for structured data. It's newer than OpenStreetMap, 2012

03:00.440 --> 03:07.240
it launched. And it's big. Like, it's got 102 million items now. And for comparison,

03:07.240 --> 03:12.840
English Wikipedia has 6.6 million articles. Like, English Wikipedia is the biggest Wikipedia.

03:12.840 --> 03:18.120
And most of those articles have a Wikidata item as well. But then there's a lot more

03:18.120 --> 03:24.280
data, a lot more items in Wikidata than there are articles in English Wikipedia.

03:24.280 --> 03:30.840
So, if I take my example of the Royal Palace of Brussels, and you look it up on English

03:30.840 --> 03:36.360
Wikipedia, you can see there's a link in the sidebar that will take you to the Wikidata

03:36.360 --> 03:43.400
item. And you click that link, and you end up on the, this is the Wikidata item for the

03:43.400 --> 03:49.680
Royal Palace. I'll talk you through some of the pieces on this page. So, you've got,

03:49.680 --> 03:57.920
on the side, the site links. These are links to Wikipedia articles in different languages.

03:57.920 --> 04:04.880
Like part of the reason for the existence of Wikidata is to store these, they call them

04:04.880 --> 04:11.200
inter-language links. They used to be stored in Wikipedia and had to be maintained across

04:11.200 --> 04:16.160
all the different languages. So, if there was a new article written in a new language,

04:16.160 --> 04:22.840
every existing article in one of the existing languages had to be updated with these links.

04:22.840 --> 04:28.880
So, much better to centralize them and store them in Wikidata instead. All the bits and

04:28.880 --> 04:37.880
pieces you get on this page, you get a label, a description, and aliases. So, by default,

04:37.880 --> 04:41.920
when I look at Wikidata, I just see them in English, because that's the language I speak.

04:41.920 --> 04:49.160
But I can click the, a link to show me in more languages, and you can see that there's

04:49.160 --> 04:57.880
names of the thing available in lots of languages and descriptions and so on. The other main

04:57.880 --> 05:05.600
part of this page you see is the list of statements. So, statements are a bit like tags in OpenStreetMap,

05:05.600 --> 05:12.440
but they're more controlled by the software. You can't just make up a property. You have

05:12.440 --> 05:16.520
to use ones that are already in the system. And again, there's a community process in

05:16.520 --> 05:22.520
Wikidata for determining new properties. And the other big difference is that there's different

05:22.520 --> 05:28.760
data types, like in OpenStreetMap, everything is a string, but Wikidata has different data

05:28.760 --> 05:33.880
types of values. Here you can see there's an image, and there's also a link to another

05:33.880 --> 05:41.760
item used as values in the statements. So, the interesting, in terms of maps, is Wikidata

05:41.760 --> 05:49.240
has got coordinate locations. There's almost ten million items with coordinates. So, those

05:49.240 --> 05:53.960
are the kinds of things that we're interested in, and we'll probably be on OpenStreetMap

05:53.960 --> 06:02.080
as well. And there is a property for storing geo shapes in Wikidata, but it's quite new,

06:02.080 --> 06:11.160
and it's not used so much. There's only 29,000-odd items with a geo shape. So, you know, it's

06:11.160 --> 06:17.880
mostly about the coordinates. So, the thing that I'm interested in is adding links between

06:17.880 --> 06:25.160
the systems. So, if we have another look at OpenStreetMap, I've got highlighted here one

06:25.160 --> 06:33.920
of the tags for the palace, and it's the Wikidata tag, and it's got a Wikidata QID. This is

06:33.920 --> 06:39.960
the unique identifier for the Wikidata item. So, now, the two systems are linked. Like,

06:39.960 --> 06:48.440
if you visit this object on OpenStreetMap, then the user interface has a hyperlink that

06:48.440 --> 06:57.520
will take you to the same thing on Wikidata. So, why do I want to add links between Wikidata

06:57.520 --> 07:04.920
and OpenStreetMap? Well, it makes the data in OpenStreetMap a lot more useful. Like,

07:04.920 --> 07:10.840
Wikidata tends to have labels in more languages. Like, if you want the name of a thing in a

07:10.840 --> 07:18.400
different language, you can get it from Wikidata. You can link to the Wikipedia articles. It

07:18.400 --> 07:27.120
gets images from Commons and identifiers from other catalogues, data catalogues. So, there's

07:27.120 --> 07:31.640
Wikimedia Commons is the Wikimedia location for storing photos of things. So, we get loads

07:31.640 --> 07:41.600
of photos of our building, and we also get lots of identifiers in Wikidata. So, you can

07:41.600 --> 07:49.480
think of Wikidata as a bit like the Rosetta Stone of linking different data catalogues.

07:49.480 --> 07:56.440
It makes sense to store all this information in one place, and so, why not use Wikidata

07:56.440 --> 08:03.240
as that place for storing this kind of info? So, this is a good thing. We want to add links.

08:03.240 --> 08:10.720
The other thing you get is Wikidata gets access to the shapes of things, the polygon outline

08:10.720 --> 08:17.680
of the building, which otherwise it wouldn't have without a link. So, adding these links

08:17.680 --> 08:23.840
by hand is kind of laborious and time-consuming, so better to write some software to do it

08:23.840 --> 08:33.240
instead. So, the software I've written, I'm calling it AWL or OWL Places, and the web address

08:33.240 --> 08:41.720
is osm.wikidata.link. So, this is what the software looks like when you visit it. It

08:41.720 --> 08:47.920
asks you for a place name where you want to search for some matches, so you can put in

08:47.920 --> 08:55.680
the name of your town, somewhere you're familiar with, and can check that the matches are valid.

08:55.680 --> 09:03.640
So, I've done a search, and I've found the place where the Royal Palace is located, and

09:03.640 --> 09:09.680
this is the page you see. You've got a map with some blue pins, and these blue pins represent

09:09.680 --> 09:17.520
Wikidata items, but the software has found something that matches OpenStreetMap. So,

09:17.520 --> 09:24.960
if I scroll down this page, you can see some example matches. So, I show you various bits

09:24.960 --> 09:33.000
of data that come from Wikidata and Wikipedia to help you try and identify if these matches

09:33.000 --> 09:38.680
are valid. Like, sometimes the software doesn't get it right and will give you an invalid

09:38.680 --> 09:47.680
match, so it's important to look through this list and check that all the matches are correct.

09:47.680 --> 09:54.120
And to help you with that, I show you the first paragraph from the Wikipedia article,

09:54.120 --> 10:03.960
and I show you any images that come from Wikidata. You've got the Wikidata description there.

10:03.960 --> 10:12.560
The paragraphs I show you, I'll talk later about how it decides which languages to use

10:12.560 --> 10:18.280
for showing those, but it supports various languages, and then it shows you some of the

10:18.280 --> 10:25.640
details from OpenStreetMap, just so you can compare and make sure that they match. So,

10:25.640 --> 10:32.880
if I click on one of those, then it will zoom in on the map, and it shows you the polygon

10:32.880 --> 10:39.520
outline of the thing. You can see the red pin there is the selected thing. So, that

10:39.520 --> 10:43.000
looks like a pretty good match. It's probably the same thing, so we can go ahead and save

10:43.000 --> 10:52.200
that. So, we're interested in saving these matches to OpenStreetMap. So, then the software

10:52.200 --> 10:57.400
has a button that lets us log in via OpenStreetMap by auth, just put in a username and password

10:57.400 --> 11:03.680
and log in, and then you come back to the confirmation page, where you just see the

11:03.680 --> 11:09.280
same list again, but kind of abbreviated. These are things that I've checked, and I've

11:09.280 --> 11:15.920
said, yes, these are valid matches, and I want to save them. You can put a change comment.

11:15.920 --> 11:21.720
So, everything gets saved together as one change set, like it goes in as a single edit,

11:21.720 --> 11:28.520
and the change comment on the change set is generated automatically based on the location,

11:28.520 --> 11:35.560
but you can change it if you want to. So, I'll carry on with describing the software,

11:35.560 --> 11:40.840
and I'll show you some more features that I've built. So, I've added a type filter,

11:40.840 --> 11:46.920
like at the top here, you can see it says type filter, and there's a list of different

11:46.920 --> 11:55.640
types of things that it's found that are possible matches. So, it's got statues and buildings,

11:55.640 --> 12:02.960
and if I tick, I can tick sculpture to say I just want sculptures, and then when I scroll

12:02.960 --> 12:09.520
down, it will just show me things that it thinks are sculptures. So, I can focus on

12:09.520 --> 12:15.920
one particular type of thing. Sometimes, when you put in the name of a town, you might get

12:15.920 --> 12:21.600
200 matches, and it's a bit overwhelming to do them all in one go, so it's useful to do

12:21.600 --> 12:28.800
them bit by bit, just specific types that you're interested in. And then, when I go

12:28.800 --> 12:35.480
to the save page, it generates a change comment that's based on the type filter that you've

12:35.480 --> 12:44.960
selected. So, here it just says add Wikidator tags to sculptures in this area. So, I'm just

12:44.960 --> 12:51.400
going to talk about how it determines what is a match. So, if we have a look at one of

12:51.400 --> 13:02.280
these examples, this is a sculpture. So, if we have a look at the same thing on Wikidator,

13:02.280 --> 13:07.120
you can see that there's a statement in Wikidator, which is the instance of statement. So, this

13:07.120 --> 13:13.360
is saying that this thing is a sculpture. So, we can click through and have a look at

13:13.360 --> 13:23.120
the sculpture page. This is the Wikidator item for the concept of a sculpture. And then,

13:23.120 --> 13:31.440
if we scroll down this page, we get a Wikidator property, which is for OpenStreetMap tag or

13:31.440 --> 13:38.320
key. So, there's actually two values here, and the second value is uninteresting, like

13:38.320 --> 13:44.640
it's shown in red because it's a deprecated value, like it's a kind of old value that

13:44.640 --> 13:48.680
used to be used in OpenStreetMap and it's been documented in Wikidator. So, the interesting

13:48.680 --> 13:57.880
one is the top one, which is tag colon artwork underscore type vehicle sculpture. So, you

13:57.880 --> 14:05.520
know, the information is stored in Wikidator about what tags are used in OpenStreetMap

14:05.520 --> 14:12.200
to describe things. So, using this information, we can say that these two things are the same

14:12.200 --> 14:21.400
type of entity. So, when it comes to matching things, I'm looking for the coordinates to

14:21.400 --> 14:27.120
match, like the two things in the two systems have to be close to each other. They're not

14:27.120 --> 14:34.400
necessarily, you know, a perfect match, but within like 50 meters or something. And the

14:34.400 --> 14:39.280
entity type has to be the same like I just described. And then I'm also looking for a

14:39.280 --> 14:47.440
matching name or street address or identifier. So, I pull names from all over the place in

14:47.440 --> 14:54.040
both systems, like in Wikidator there's a bunch of different fields, or rather in OpenStreetMap

14:54.040 --> 14:59.080
there's a bunch of different fields where names can be stored, and I look at all of

14:59.080 --> 15:04.320
those, and then in Wikidator there's different places to get the names. I look at the, the

15:04.320 --> 15:11.280
labels that are in Wikidator, the aliases, the names of any Wikipedia articles. I look

15:11.280 --> 15:18.680
at the file name of any images that are in Wikidator just to get as much, you know, many

15:18.680 --> 15:23.720
possible names that I can use for matching. And then I normalize the names a lot, so I

15:23.720 --> 15:30.720
lowercase them and I remove stop words, and I process them a lot to try and get as many

15:30.720 --> 15:37.480
name matches I can. And then similarly with street addresses. So, there's street addresses

15:37.480 --> 15:43.720
in OpenStreetMap and Wikidator which I compare, and the software also looks for street addresses

15:43.720 --> 15:52.160
in the first paragraph of Wikipedia articles. So, and then in terms of matching identifiers,

15:52.160 --> 16:00.600
there's lots of standardized OpenStreetMap tags for different identifiers, and then there's

16:00.600 --> 16:06.440
also properties in Wikidator for those same identifiers. So, if, you know, I've got a

16:06.440 --> 16:10.800
railway station that's got the same station code in OpenStreetMap and Wikidator, I can

16:10.800 --> 16:15.560
be pretty sure that it's the same thing that I'm matching, so I can be confident about

16:15.560 --> 16:22.400
that match. So, one of the things I'm not using at the moment is the Wikipedia tags

16:22.400 --> 16:30.160
which appear in OpenStreetMap. Like before Wikidator came along, there was lots of Wikipedia

16:30.160 --> 16:37.480
tags added to OpenStreetMap, and they're not completely consistent in their formatting

16:37.480 --> 16:45.280
for how they link to Wikipedia, and sometimes they're wrong. So, you know, I've left the

16:45.280 --> 16:51.800
work for now working on trying to match up using Wikipedia tags for somebody else to

16:51.800 --> 16:57.160
have a look at. But I've been waiting for a few years now and no one has, so I might

16:57.160 --> 17:05.640
have to have a go at this. So, just in case anyone's interested in the technology behind

17:05.640 --> 17:15.240
this, this software is written in Python with Flask. I'm using Postgres as my database,

17:15.240 --> 17:21.020
and then on the front end, you know, various bits of JavaScript. I'm not really a front

17:21.020 --> 17:27.080
end developer, but, you know, I'm modelling my way through, and it seems to be working

17:27.080 --> 17:36.000
quite well. I'm using a bunch of APIs to get this data, so in terms of searching for places

17:36.000 --> 17:42.240
to look for matches, I use the OpenStreetMap Norman Artem API, and then to grab more data,

17:42.240 --> 17:49.320
I use the Overpass API, and then on the Wikidator side, I do a lot of sparkle queries against

17:49.320 --> 17:57.280
the Wikidator query service, and I use the Wikidator MediaWiki API to get the details

17:57.280 --> 18:03.520
of the Wikidator items. So, there's a bunch of things that don't work in my system at

18:03.520 --> 18:10.880
the moment. One of them is tunnels, like I designed the software with the assumption

18:10.880 --> 18:16.440
that there would be a kind of one-to-one mapping between a thing in OpenStreetMap and a thing

18:16.440 --> 18:23.400
in Wikidator, and that doesn't work for tunnels, because tunnels tend to get represented as

18:23.400 --> 18:29.980
two ways in OpenStreetMap, where, as in Wikidator, there'll be a single item. And so, you know,

18:29.980 --> 18:34.720
my assumption was wrong, and I need to change my software to say that you can link, you

18:34.720 --> 18:43.080
know, add the Wikidator identifier to ways in OpenStreetMap, but I haven't done that

18:43.080 --> 18:51.880
yet. Incidentally, bridges, we don't have the same problem with bridges, like the way

18:51.880 --> 18:56.960
that bridges get represented in OpenStreetMap is they're often two ways, but then there's

18:56.960 --> 19:03.440
a relation across the whole bridge that represents the bridge itself, and tunnels, there isn't

19:03.440 --> 19:10.040
a relation for representing, you know, the whole concept of the tunnel. So, that's another

19:10.040 --> 19:15.760
possible approach. Maybe OpenStreetMap should change and start mapping the tunnels with

19:15.760 --> 19:21.600
a relation that contains the two ways, you know, for storing Wikidator tags and any

19:21.600 --> 19:29.600
other information about the tunnel that is the same across both ways. So, another thing

19:29.600 --> 19:36.600
that I don't support are rivers, because they are linear relations, and my software that

19:36.600 --> 19:44.440
I'm using to import data from OpenStreetMap, I'm using OSM to PG SQL, and it can't handle

19:44.440 --> 19:50.160
linear relations, it just, you know, expects relations to be polygons. So, at the moment,

19:50.160 --> 19:56.600
rivers don't work in the system. And then similarly for tram stops, tram stops are kind

19:56.600 --> 20:01.520
of complex objects in OpenStreetMap, like you've got, you know, stop positions of where

20:01.520 --> 20:07.320
the tram stops on either side of the road, which are nodes, single points, and they're

20:07.320 --> 20:15.680
collected together into a relation, and that isn't supported properly by OSM to PG SQL,

20:15.680 --> 20:23.360
so I can't handle tram stops properly. I've got to talk about a few more features that

20:23.360 --> 20:31.680
are in the software. So, again, this is the center of Brussels, and I've got the language

20:31.680 --> 20:40.720
selector. So, the software has figured out all the languages that get used in for the

20:40.720 --> 20:47.360
labels of things and the OpenStreetMap objects that are in this area. You know, unsurprisingly

20:47.360 --> 20:54.280
for Brussels, the most popular languages are French and then Dutch, and English is the

20:54.280 --> 21:00.920
third most popular. Interestingly, we've got Latin at the bottom there. There's 22 items

21:00.920 --> 21:08.760
that have got labels in Latin in Wikidata. But, so, by default, this page is opened in

21:08.760 --> 21:15.320
French, and you can see the type filter is appearing in French, but I can't read French

21:15.320 --> 21:22.840
very well, so if I want to change it to Dutch, I can reorder these languages by drag and

21:22.840 --> 21:28.920
drop, or I can click on move to top, and you can see the type filter is now switched into

21:28.920 --> 21:34.800
being in Dutch, or if I want it in English, then I can move English to the top of the

21:34.800 --> 21:41.640
list, and it will show me the type filter in English, English labels and descriptions.

21:41.640 --> 21:47.360
And if I scroll down the page, you can see this is the page appearing in French. You've

21:47.360 --> 21:54.960
got titles in French and the extracts from Wikidata in French, or again, I can change

21:54.960 --> 22:00.960
it into Dutch if I want, or I can have it in English. And this works without reloading

22:00.960 --> 22:07.240
the page. You just change the order that you prefer the languages to appear in, and it

22:07.240 --> 22:15.800
does it all on the client and switches it over. So, some statistics for you. People

22:15.800 --> 22:23.680
are using this tool. Well, first of all, there's more and more Wikidata tags appearing in OpenStreetMap,

22:23.680 --> 22:30.160
so not all of them are coming from my software. There's other people figuring out how to add

22:30.160 --> 22:40.240
Wikidata tags to OpenStreetMap. So, here's some more stats. 26% of the Wikidata tags

22:40.240 --> 22:47.160
in OpenStreetMap were added using this tool, and we're up to 400 people, and there's been

22:47.160 --> 22:56.920
23,000 change sets, and we're getting close to 700,000 Wikidata tags added. So, I'm going

22:56.920 --> 23:05.560
to talk about the licensing. Wikidata is CC0 or public domain. You can do anything you

23:05.560 --> 23:12.360
want with Wikidata, and OpenStreetMap uses the Open Database license, which is a license

23:12.360 --> 23:21.200
that was pretty much written for OpenStreetMap. So, you can't copy any data from OpenStreetMap

23:21.200 --> 23:29.120
into Wikidata because you'd be relicensing it CC0, which is not allowed. But even more

23:29.120 --> 23:36.080
than just the licenses being different, the intellectual property jurisdictions are different.

23:36.080 --> 23:42.440
So, OpenStreetMap asserts database rights. Like, the argument is that it's a lot of effort

23:42.440 --> 23:47.520
to go around collecting all this information and putting it in OpenStreetMap, and they

23:47.520 --> 23:54.400
want to protect that, whereas Wikidata is part of the Wikimedia Foundation, which uses

23:54.400 --> 24:02.520
US intellectual property rules. And so, under US law, facts are not copyrighted, not protected,

24:02.520 --> 24:11.440
rather in law. So, the two things don't mesh that well, but it's fine because I'm not copying

24:11.440 --> 24:17.440
any data between the systems. I'm just adding links between them. In some cases, it might

24:17.440 --> 24:24.480
be nice if we could, you know, tidy up the data in one system based on the other. But

24:24.480 --> 24:30.120
I'm not doing that, and, you know, you've got to think carefully about the intellectual

24:30.120 --> 24:38.040
property rules before you try and do that. And so, also, just while we're talking about

24:38.040 --> 24:42.920
licenses, my software is GPL, and the code is on GitHub. It's all open source. Anyone

24:42.920 --> 24:50.640
can have a look at the software behind it. So, an important aspect for being able to

24:50.640 --> 24:58.320
add these links between the systems is to have stable identifiers. And for a long time,

24:58.320 --> 25:06.440
OpenStreetMap has talked about the identifiers not being stable. You know, sometimes, say,

25:06.440 --> 25:14.000
a railway station might get mapped as a single point, and then later on, somebody comes along

25:14.000 --> 25:20.560
and traces the outline of the building. And so, it changes from being a node into a way

25:20.560 --> 25:27.960
or a relation, and the identifier will have changed. So, you know, there aren't stable

25:27.960 --> 25:35.360
identifiers for concepts in OpenStreetMap. So, that, you know, the thinking is that that

25:35.360 --> 25:42.720
makes it difficult to link into OpenStreetMap because the identifiers might change. And

25:42.720 --> 25:49.640
there's been discussions within the OpenStreetMap community of having a permanent ID. And these

25:49.640 --> 25:55.640
discussions have been going on since 2017, and they haven't, you know, come to a conclusion.

25:55.640 --> 26:00.720
There's been an argument that maybe the right thing to use in terms of stable identifiers

26:00.720 --> 26:07.480
would be Wikidata IDs. Just say, anything that's important enough to need a stable identifier

26:07.480 --> 26:14.120
is probably on Wikidata, and so you could use the Wikidata IDs as a permanent ID. But

26:14.120 --> 26:18.720
another way to look at it is, in reality, you know, most of the world is mapped now

26:18.720 --> 26:26.080
on OpenStreetMap, and the IDs aren't changing that much. You know, things tend to be mapped

26:26.080 --> 26:31.800
as polygons, like outlines of buildings, and people aren't coming along and making changes

26:31.800 --> 26:36.320
that are destructive in destroying the IDs. So, maybe the IDs that are in OpenStreetMap

26:36.320 --> 26:42.440
already, the IDs that I talked about earlier, maybe they're stable enough, and maybe it's

26:42.440 --> 26:50.760
okay to just link to those and not worry about them changing. Whereas, Wikidata, on the other

26:50.760 --> 26:56.480
hand, and Wikidata was designed always to have stable identifiers, that was, you know,

26:56.480 --> 27:05.760
a big part, I think, of the initial approach to Wikidata. Like, Wikipedia identifies things

27:05.760 --> 27:11.600
by article title, and over time the article titles can change, and then, you know, things

27:11.600 --> 27:17.760
get moved around, and so they don't have, you know, long-term stable IDs. And so, the

27:17.760 --> 27:24.400
Wikidata QIDs was an approach that gave you stable IDs, but it turns out that they're not

27:24.400 --> 27:30.000
completely stable. There's also redirects appearing in Wikidata, like, with some of

27:30.000 --> 27:35.000
the work I've been doing, I find a lot of duplicates in Wikidata. Things have been imported

27:35.000 --> 27:41.320
from different sources, and say, for example, I found a lot of duplicate churches in Wikidata.

27:41.320 --> 27:48.840
So when I go and I merge the churches, then the ID that represents, you know, one of those

27:48.840 --> 27:58.200
churches will change. So, you know, I've got on the slide here, there's 10,000 OpenStreetMap

27:58.200 --> 28:06.080
objects that point to a redirect in Wikidata, and somebody needs to go through and update

28:06.080 --> 28:12.120
those, like, resolve those redirects and fix OpenStreetMap. I will probably do that at

28:12.120 --> 28:21.520
some point, if no one else does. So, a recent change to Wikidata is that there's a new property

28:21.520 --> 28:30.920
called OpenStreetMapElement, and that is for storing OpenStreetMap IDs. So now it is possible

28:30.920 --> 28:38.840
to add the links in both directions. We can have links from Wikidata to OpenStreetMap,

28:38.840 --> 28:46.480
which we never used to be able to have. So I need to change my software to start adding

28:46.480 --> 28:52.600
these links in. Like, when you save things at the moment, it just uploads them to OpenStreetMap.

28:52.600 --> 28:58.780
It should be uploading them to Wikidata as well. But to do that, I need to make the user

28:58.780 --> 29:07.040
log in to both systems, you know, which is possible, but it will break the flow of it.

29:07.040 --> 29:32.880
So I am going to try and do a demo. Let's see. So this is the software I'm describing,

29:32.880 --> 29:40.360
and I can say I want it in English. And you can see the type filter there. And if I scroll

29:40.360 --> 29:46.000
down, it shows matches that weren't very good at the start. So it's got some difficulty

29:46.000 --> 29:51.720
with this match, and it can't handle it. So we scroll past those. And here's the first

29:51.720 --> 30:04.320
match that the system can handle. And if I click on it, then it shows you the match.

30:04.320 --> 30:16.360
I can click toggle OSM tags. This is showing all of the tags from OpenStreetMap. The green

30:16.360 --> 30:25.240
ones are ones where it's found a match that's using those to figure out what the match is.

30:25.240 --> 30:31.320
I'll show you some more. Here's another one. You can see it appearing on the map. If I

30:31.320 --> 30:39.640
think this is not a correct match, I can click here, and it's deselected it. Thank you. So

30:39.640 --> 30:46.720
I've got a whole pile of matches here. I've checked these ahead of time. They're all good.

30:46.720 --> 30:54.080
So I'll scroll to the bottom, and I can say add tags to OpenStreetMap. And this is the

30:54.080 --> 31:02.400
confirmation page that I was telling you about. So I can hit save. And the software goes through,

31:02.400 --> 31:15.480
and it's saving my matches. So it has done it. And I can say view my change set. And

31:15.480 --> 31:23.800
you get to see my change set on OpenStreetMap. I can scroll down. And you can see these are

31:23.800 --> 31:32.240
all the things I've edited. So nice and quick to go through and edit OpenStreetMap. And

31:32.240 --> 31:46.600
I've just got another example. Another bit of Brussels. I can change to English. Say

31:46.600 --> 31:53.840
I want squares. And then if I scroll down, it will just show me some matches that haven't

31:53.840 --> 32:02.640
worked. So I scroll past those. Here's some squares that the software has managed to match

32:02.640 --> 32:09.760
up. And these all look like good matches. I've checked these before. So I can scroll

32:09.760 --> 32:18.800
to the bottom. There's another one. And I can say add to save to OpenStreetMap. And

32:18.800 --> 32:29.160
it's in the change comment, it's put the word squares. So I can hit save. And that is working

32:29.160 --> 32:41.360
to edit OpenStreetMap. I'll go back to the presentation. So that was my existing software.

32:41.360 --> 32:44.440
That's been running for a few years. People have been using that. And I've been working

32:44.440 --> 32:52.040
on a new version of the software that I'm calling LMap. This is what LMap looks like.

32:52.040 --> 32:59.160
So when you open this, you go straight to a map. It tries to guess where you are, locate

32:59.160 --> 33:06.360
you based on your IP address. And then it shows you this interface, much more map based

33:06.360 --> 33:16.360
rather than a list of things. You see the red pins are where there isn't a match already.

33:16.360 --> 33:21.840
Green pins are where there is a match. And the yellow pins are OpenStreetMap things.

33:21.840 --> 33:28.000
So you can see some of them have a line between the green pin and the yellow pin. That's showing

33:28.000 --> 33:36.080
you which, you know, the green pin is a Wikidator item that matches a thing on OpenStreetMap

33:36.080 --> 33:41.040
which is the yellow pin and there's a line between them. And you've got a filter at the

33:41.040 --> 33:48.520
side where you can filter on different item types. This is an example where I've selected

33:48.520 --> 33:54.000
one of the pins. I've clicked on a pin and it changes the color slightly. And it shows

33:54.000 --> 33:59.960
you some details. You get to see the photo and bits and pieces from Wikidator. And then

33:59.960 --> 34:05.040
underneath it shows you a list of possible matches. It just says, you know, this is a

34:05.040 --> 34:11.920
building. Here's some other buildings nearby. And I can see the street addresses on here

34:11.920 --> 34:18.040
and, you know, the nearest building, the street address matches. But in actual fact there's

34:18.040 --> 34:24.240
two street addresses on there. And if I scroll down this list, I can see that there's two

34:24.240 --> 34:30.000
buildings next to each other that both match this warehouse. So for some reason Wikidator

34:30.000 --> 34:35.800
is representing it as a single item whereas OpenStreetMap has got two separate objects.

34:35.800 --> 34:41.000
But this version of the software supports it. So I tick the boxes next to them and then

34:41.000 --> 34:48.880
I can hit save and it'll add the Wikidator tag to them. So this bit of software I'm still

34:48.880 --> 34:55.640
working on. It's live but it keeps breaking so I'm not really advertising for people to

34:55.640 --> 35:06.400
use it. I need to do some more work on it. And in fact I think I need some help. I'm

35:06.400 --> 35:12.360
just a hobbyist and I'm running out of time to work on this stuff. So I don't know if

35:12.360 --> 35:19.320
anyone knows how I can get some help with this, whether there's someone out there who

35:19.320 --> 35:27.440
wants to pay for this work or whether I can find volunteers to help me. I don't know.

35:27.440 --> 35:37.400
It's sort of a tricky like trying to work out managing people to work on this. So yeah,

35:37.400 --> 35:51.080
that's the software built. And I guess has anyone got any questions?

35:51.080 --> 36:20.920
If you have a question please raise your hand so I can see you. Oh there, I'm coming.

36:20.920 --> 36:26.960
Thank you Edward for that. Hi, I'm Seabroant. I'm a volunteer at Wikimedia. Wikimedia has

36:26.960 --> 36:35.040
a service called Wikimedia Cloud Services where you get free compute resources. Oh,

36:35.040 --> 36:40.600
where you can get free compute resources. I would highly recommend that you look into

36:40.600 --> 36:46.920
that. So like the machine I'm running some of this stuff on is 60 gigabytes of RAM and

36:46.920 --> 36:54.320
two terabytes of disk. Would I be able to get that much from Cloud Services? I would

36:54.320 --> 37:01.560
highly recommend that you talk to someone there. Okay. As you may be having a project

37:01.560 --> 37:07.800
that's quite valuable to the Wikimedia movement, I'm sure that someone will try to help you.

37:07.800 --> 37:26.480
Yep, sounds good. Anybody else? Over there. Hi, thank you for your contributions and for

37:26.480 --> 37:33.960
the talk. Have you considered interfacing or linking with Osmos? It's a quality assurance

37:33.960 --> 37:46.440
project from... Licking with what, sorry? Osmos. Osmos is Osmos.opestreamad.fr. It's

37:46.440 --> 37:53.560
a quality assurance project. It's a matter where you see alerts on the map, dangling

37:53.560 --> 38:03.240
ways, etc. I think it's somewhat extended and it has an existing user base. Maybe you

38:03.240 --> 38:13.720
could benefit from that. I haven't looked at this. Okay, I will write you later. Thank

38:13.720 --> 38:24.120
you. Hello. I have two remarks. First of all, I'm the maker of MapComplete, which also

38:24.120 --> 38:31.080
has an etymology team to link Wikidata to Straits so we can work together on that.

38:31.080 --> 38:39.560
And then second, a small remark on adding an ID of OpenStreetMap to Wikidata. That's

38:39.560 --> 38:44.480
a bit of a float approach because IDs aren't very stable in OpenStreetMap. Say that a new

38:44.480 --> 38:51.160
park is opened, I place a point where the park is and then a few days later someone

38:51.160 --> 38:56.800
else passes by and says, oh, we have aerial imagery now. There was an outline as a polygon

38:56.800 --> 39:04.200
and then it removes the alt point. That means that the link would be broken in Wikidata.

39:04.200 --> 39:08.760
I mean, I guess we just have to deal with that. We can have software that looks for

39:08.760 --> 39:14.600
these broken links. Maybe it would be nice if OpenStreetMap could add redirects like

39:14.600 --> 39:21.800
Wikidata has. Yeah, except that it's way more difficult than that because, for example,

39:21.800 --> 39:26.520
sometimes you have a big street and then you have properties which are different for parts

39:26.520 --> 39:30.640
of the street and then the street gets split into three parts. So then suddenly you'd have

39:30.640 --> 39:35.160
to redirect to three different parts. So it's better.

39:35.160 --> 39:43.880
Do you think that it's a mistake to add OpenStreetMap IDs to Wikidata then?

39:43.880 --> 39:51.760
Yes, basically. It doesn't make sense at first glance, but technically it will break down

39:51.760 --> 39:59.440
over time. So it's better to add a link to OpenStreetMap to Wikidata and then look at

39:59.440 --> 40:06.960
that perversely because the editing tools will keep track of the Wikidata link. So if

40:06.960 --> 40:11.120
the roads get split into multiple pieces, every single piece of the road will get a

40:11.120 --> 40:15.880
backlink to the Wikidata item. Yeah, you might have a good point.

40:15.880 --> 40:35.400
But let's have a discussion after the questions. Hi, Ed. Thanks for sharing the new software.

40:35.400 --> 40:43.040
It looks great. So I was fascinated by the example where you showed more than one potential

40:43.040 --> 40:50.120
match and I just wondered, does your software have a role to play in improving the quality

40:50.120 --> 40:54.080
of the data by cross-referencing between the two sides?

40:54.080 --> 41:00.240
I think it can improve the quality. Like I say, when I run this, I find duplicates in

41:00.240 --> 41:08.520
Wikidata that are difficult to identify from just Wikidata itself. I feel like the coordinates

41:08.520 --> 41:14.920
that are in Wikidata don't get much use. Like for a long time, you didn't even see the map

41:14.920 --> 41:20.480
appear in the Wikidata pages and then a lot of the coordinates were wrong, people transposed

41:20.480 --> 41:30.080
digits. Since the map is visible, people are more likely to check their data. And yeah,

41:30.080 --> 41:37.000
you can, the fact that the two systems exist, you can cross-reference them and find errors.

41:37.000 --> 41:47.480
Yes. I'm wondering how relevant it is now based upon the question just a moment ago.

41:47.480 --> 41:54.320
But I was wondering, can you search Wikidata for a lot longer window and find all objects

41:54.320 --> 42:03.320
within it when you're adding data to OpenStreetMap? So the, the, the, the, underneath I'm doing

42:03.320 --> 42:10.960
sparkle queries to Wikidata and Wikidata sparkle queries do support coordinate bounding boxes.

42:10.960 --> 42:16.480
I can say, you know, you can write your own query in sparkle that will give you all the

42:16.480 --> 42:23.760
churches within a given bounding box. The, like I demoed two separate systems that should

42:23.760 --> 42:29.960
really be combined into one and the old system doesn't support bounding boxes. It's all based

42:29.960 --> 42:35.840
on kind of place polygons. You have to say, show me things that are in Brussels. You can't

42:35.840 --> 42:41.560
say, show me things within this rectangle. And the new system is more kind of bounding

42:41.560 --> 42:45.680
box based in that you see the map and it just shows you all the matches that are in the

42:45.680 --> 42:50.640
rectangle that's visible on the screen. I'm not sure if that answers your question.

42:50.640 --> 42:55.840
It doesn't think, it's very valuable what you've done. Thanks.

42:55.840 --> 43:13.760
Any other questions? Raise your hand. Okay. Hi. Thank you for your talk. I had a question

43:13.760 --> 43:20.160
about the OpenStreetMap, OpenStreetMap tags that are in Wikidata. I think you show this

43:20.160 --> 43:26.360
in one of your slides. So how often are these tags uploaded from OpenStreetMap and does

43:26.360 --> 43:32.160
it pose any problem with the license compatibility issues that you talked about?

43:32.160 --> 43:40.000
I think you mean the property for OpenStreetMap tag or key. So things like I showed the palace

43:40.000 --> 43:45.680
type. Is that right? Is that the one you're thinking of? There's a few properties in Wikidata.

43:45.680 --> 43:51.520
Yes, the OSM tag like the structure one. I don't think there's any problem in terms

43:51.520 --> 44:00.080
of the intellectual property. It's kept pretty up to date. Like people invent a new tag to

44:00.080 --> 44:05.800
use on OpenStreetMap and then they go and find the matching Wikidata item and add the

44:05.800 --> 44:12.520
tag to it. And some unofficial tags that are used on OpenStreetMap, the information is

44:12.520 --> 44:23.280
in Wikidata. So it's pretty current, I think. So similar question from my side. So nice

44:23.280 --> 44:29.480
presentation. You explained the licenses nicely. Then you said that you cannot copy data from

44:29.480 --> 44:36.440
the OpenStreetMap to Wikidata. But what about the other way around? So that's an interesting

44:36.440 --> 44:43.120
question. And the OpenStreetMap community is a bit suspicious of the information that's

44:43.120 --> 44:49.080
in Wikidata. Like there's a feeling, you know, where did the coordinates come from? Were

44:49.080 --> 44:53.880
they just copied from Google Maps? Like do people look up a thing on Google Maps, find

44:53.880 --> 45:00.040
the coordinates, put the coordinates into Wikidata? And then does that make Wikidata

45:00.040 --> 45:07.040
a derived work of Google Maps? And so, you know, it's probably fine to copy any data

45:07.040 --> 45:15.720
from Wikidata into OpenStreetMap. If you want to copy a name in a different language, that's

45:15.720 --> 45:21.440
probably fine. But my software doesn't do that. I just add the links. And once the links

45:21.440 --> 45:26.360
are there, it's easier for somebody else to come along and find these things and copy

45:26.360 --> 45:34.480
the data over if they want. So my question is, does the software do the

45:34.480 --> 45:42.600
requests, the API requests on the back end on your hosted service? Or is it the client,

45:42.600 --> 45:46.840
the user that will do the browser will do the API requests?

45:46.840 --> 45:52.840
I showed two versions. The old, you know, the more established version is using the

45:52.840 --> 45:58.800
Nominate API to find things and then it's using the Overpass API to grab lots of map

45:58.800 --> 46:05.240
data. And then I use the OpenStreetMap API to push the changes you make to upload the

46:05.240 --> 46:13.000
Wikidata tags back into OpenStreetMap. And the new system I built maintains a full mirror

46:13.000 --> 46:22.320
of the OpenStreetMap data just to make things faster. So I'm not using APIs for downloading

46:22.320 --> 46:27.040
the data with that one. I just use the API for saving the changes. Does that answer your

46:27.040 --> 46:31.520
question? Yeah, partly. But does the request to fetch

46:31.520 --> 46:38.960
data from the Wikidata, does that go from your servers? Do your servers fetch data?

46:38.960 --> 46:44.960
Oh, I see. It is all going from my server, yeah. It's not from the client browser. It's

46:44.960 --> 46:51.600
going. Like I do a lot of preprocessing before I show you the list of matches and then I

46:51.600 --> 46:57.000
store them all in the database. So when you load the list of matches for a place, it's

46:57.000 --> 47:02.880
not doing any queries either on the server or the client with the APIs. It's all stored

47:02.880 --> 47:08.640
in the database. I mean, that's a problem. The matches get stale, there's a refresh button

47:08.640 --> 47:14.080
that you can hit and it will go off and rerun the match and get fresh data from OpenStreetMap

47:14.080 --> 47:17.560
and Wikidata. Yeah, OK. Thanks.

47:17.560 --> 47:24.560
There was a question here? No? OK, so I'll be back. All the other side.

47:27.200 --> 47:34.200
Hi, I'm Valerio from Milano and thank you so much for this tool. Again, thank you for

47:34.200 --> 47:41.200
the person who mentioned the possibility to host this tool on the Wikimedia Foundation

47:48.480 --> 47:53.720
infrastructure because it would be really, really nice to propose this on the Wikimedia

47:53.720 --> 48:00.720
Fabricator and I would be interested in discovering how the discussion will go. And second thing,

48:00.720 --> 48:07.720
you asked how to found your development. I think you can just contact your local Wikimedia

48:08.280 --> 48:15.280
chapter that maybe they provide microgrants or something like that. In my local community,

48:15.320 --> 48:21.080
some volunteers often in one week can obtain a microgrant to develop small tools or to

48:21.080 --> 48:28.080
boost some activities. Maybe this can be interesting for if they are useful for the universe and

48:28.080 --> 48:35.080
to produce software and the software and that's all. And one feedback for the user interface,

48:37.120 --> 48:44.120
it's not clear to me how to contribute on just one element. So if I have one minute,

48:45.080 --> 48:52.080
if I want to visit the tool and connect just one item because I'm 100% sure about that

48:52.080 --> 48:59.080
item and so I just want to press save on that contribution and be kidnapped. So this maybe

49:00.560 --> 49:03.560
can be useful if it's not already possible.

49:03.560 --> 49:08.200
There are two approaches for that. If you click on the title of an item, it takes you

49:08.200 --> 49:11.200
to a page where you can just edit a single item.

49:11.200 --> 49:12.600
Okay, wonderful.

49:12.600 --> 49:18.160
Or at the top of the page, there's an uncheck all tick box and then you can just tick the

49:18.160 --> 49:24.240
box next to one thing and scroll to the bottom and hit save. Both of those will work for

49:24.240 --> 49:26.280
adding a single Wikidator tag to.

49:26.280 --> 49:27.640
Okay, thank you.

49:27.640 --> 49:31.120
And thanks for your comment about contacting my local Wikidator.

49:31.120 --> 49:31.760
Okay.

49:31.760 --> 49:33.240
That's a good idea.

49:33.240 --> 49:37.880
Last thing, can you repeat, sorry, why do you need two terabytes of data to have this

49:37.880 --> 49:38.280
working?

49:38.280 --> 49:38.880
The OpenStreetMap.

49:38.880 --> 49:40.880
Thank you so much.

49:40.880 --> 49:47.040
The OpenStreetMap database is big. The world, the earth is big and I keep a whole copy of

49:47.040 --> 49:54.040
it to make things fast. And so it's probably 1.6 terabytes to store all of the OpenStreetMap

49:54.040 --> 49:56.320
data.

49:56.320 --> 49:58.480
I think that's time up.

49:58.480 --> 50:00.480
Okay, so thank you.

50:00.480 --> 50:17.480
Thank you.

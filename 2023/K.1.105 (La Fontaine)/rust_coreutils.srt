1
0:00:00.000 --> 0:00:02.000
Thank you.

2
0:00:07.000 --> 0:00:09.000
Hi.

3
0:00:12.000 --> 0:00:14.000
Hello. I hope you had good beers yesterday.

4
0:00:16.000 --> 0:00:18.000
Thank you for coming that early this morning.

5
0:00:20.000 --> 0:00:22.000
I'm going to talk to you about the work that a few of us

6
0:00:22.000 --> 0:00:26.000
started a while back, which is we're implementing one of the

7
0:00:26.000 --> 0:00:31.000
tools that we're doing today. I'm going to talk to you about

8
0:00:31.000 --> 0:00:33.000
the history of the project, explain what we're trying to do,

9
0:00:33.000 --> 0:00:36.000
why, and maybe do a demo. Let's see what happens.

10
0:00:39.000 --> 0:00:42.000
So, who I am. I'm doing a lot of things. Way too many things

11
0:00:42.000 --> 0:00:46.000
according to my partner. I'm a developer for 15 years,

12
0:00:46.000 --> 0:00:52.000
IBM for 10 years. I'm also my actual job is I'm a director at

13
0:00:52.000 --> 0:00:54.000
the

14
0:00:56.000 --> 0:00:58.000
web. I'm a developer for 15 years. I'm a developer for 15

15
0:00:58.000 --> 0:01:01.000
years. I'm a developer for 15 years. I'm a developer for 15

16
0:01:01.000 --> 0:01:04.000
years. But that work is clearly unrelated to what we're doing

17
0:01:04.000 --> 0:01:09.000
at Mozilla. I don't want to get into troubles. But it's not a

18
0:01:09.000 --> 0:01:13.000
project. But I've been working with the developer for a long

19
0:01:13.000 --> 0:01:18.000
time. I managed some key people in the project. And in Paris,

20
0:01:18.000 --> 0:01:24.000
I'm a developer for 15 years. I also uploaded the initial

21
0:01:24.000 --> 0:01:30.000
version of REST in Debian a long time ago. And if you don't

22
0:01:30.000 --> 0:01:33.000
know about packaging, you can package a software when you are

23
0:01:33.000 --> 0:01:36.000
not an expert in the language it has been written in. I know

24
0:01:36.000 --> 0:01:40.000
that sounds crazy, but I'm not a C++ compiler developer, but

25
0:01:40.000 --> 0:01:44.000
I'm maintaining Clang for 10 years also. And I'm also

26
0:01:44.000 --> 0:01:48.000
working with the developers in the Debian archive for a long

27
0:01:48.000 --> 0:01:52.000
time. And they're for Ubuntu. But, yeah, let's talk about

28
0:01:52.000 --> 0:01:55.000
what happened. If you remember, something weird happened three

29
0:01:55.000 --> 0:02:00.000
years ago now. Most of the planet went on lockdown in our

30
0:02:00.000 --> 0:02:03.000
country. Sorry. In France. I think it was the same in

31
0:02:03.000 --> 0:02:06.000
Belgium and Italy and some country. So, this idea took

32
0:02:06.000 --> 0:02:10.000
everything. So, I don't know what you have done on your side,

33
0:02:10.000 --> 0:02:14.000
but what can I do with that three times that I had? So, some

34
0:02:14.000 --> 0:02:18.000
people make bread. So, I stole a picture from Julien Dangeau.

35
0:02:18.000 --> 0:02:23.000
He made some fancy bread. Who did bread here? Ah, a few.

36
0:02:23.000 --> 0:02:28.000
Cool. Ah, bÃ©ranger, too. Some of them did some woodworking.

37
0:02:28.000 --> 0:02:31.000
So, I stole a picture from someone who used to work at

38
0:02:31.000 --> 0:02:34.000
Red Hat, but now he's working at Mazias. He did some

39
0:02:34.000 --> 0:02:37.000
woodworking. The picture is ugly. It's not my fault. Some

40
0:02:37.000 --> 0:02:40.000
people did that stuff. Some people did gardening. And

41
0:02:40.000 --> 0:02:44.000
myself, what I've done, it's my son on the top right. He

42
0:02:44.000 --> 0:02:47.000
loves Lego, but he's destroying everything. Everything was

43
0:02:47.000 --> 0:02:50.000
put in the single bracket. And we decided to rebuild the

44
0:02:50.000 --> 0:02:55.000
Lego. So, it kept us busy for like three or four days. And

45
0:02:55.000 --> 0:02:59.000
then, he still has to work, but my partner decided to wear

46
0:02:59.000 --> 0:03:02.000
40 something. And she decided to rewatch Bushy as a vampire

47
0:03:02.000 --> 0:03:06.000
slayer. I have a good memory for TV shows. I was like,

48
0:03:06.000 --> 0:03:10.000
yeah, I don't want to watch it again. So, and then she did

49
0:03:10.000 --> 0:03:16.000
also that. So, you can do the math. It's like 200, 204

50
0:03:16.000 --> 0:03:20.000
hours. And it's basically I use that time to work on rest.

51
0:03:20.000 --> 0:03:23.000
Because she was watching that stuff and I saw her. I

52
0:03:23.000 --> 0:03:27.000
already saw the episode when I was younger. So, yeah, wanted

53
0:03:27.000 --> 0:03:31.000
to go on rest. So, before what I've done 10 years ago is I

54
0:03:31.000 --> 0:03:35.000
worked on that fancy project, which was at the beginning of

55
0:03:35.000 --> 0:03:39.000
Clang when it was just starting to support some basic C++. I

56
0:03:39.000 --> 0:03:42.000
package it into Debian and then I rebuild the Debian archive

57
0:03:42.000 --> 0:03:48.000
instead of CCC. I use Clang and cut me a job at the end. And a

58
0:03:48.000 --> 0:03:52.000
lot of fun. And I'm still doing that stuff even if I should

59
0:03:52.000 --> 0:03:56.000
stop at some point. So, the idea of that project was how

60
0:03:56.000 --> 0:04:00.000
can you replace a compiler by another one? Or like, yeah, I

61
0:04:00.000 --> 0:04:03.000
like to do the same with rest. I'm not a student anymore, so

62
0:04:03.000 --> 0:04:06.000
I don't want to do projects that are useless. So, I want to

63
0:04:06.000 --> 0:04:09.000
work on something interesting. So, I started thinking about

64
0:04:09.000 --> 0:04:13.000
what can I do? So, the first one is do I want to rewrite the

65
0:04:13.000 --> 0:04:30.840
G

66
0:04:30.840 --> 0:04:34.840
code? I don't want to read assembly. But at the end, there

67
0:04:34.840 --> 0:04:38.840
is no assembly in a core. It's just one file that I can

68
0:04:38.840 --> 0:04:43.840
never, I don't care about that one anyway. I'm good. But,

69
0:04:43.840 --> 0:04:47.840
yeah, some people are going to say, why are you doing that?

70
0:04:47.840 --> 0:04:51.840
It's pointless. So, yeah, it makes sense. You can think

71
0:04:51.840 --> 0:04:54.840
about that stuff. But the first one is why not? We all had

72
0:04:54.840 --> 0:04:58.840
crazy ideas in our careers and this one is one of them.

73
0:04:58.840 --> 0:05:02.840
Rest is amazing. So, you can bring some value and you will

74
0:05:02.840 --> 0:05:06.840
hear during that talk me repeating that stuff many times.

75
0:05:06.840 --> 0:05:11.840
I'd like to, I will repeat that stuff a few times, but the

76
0:05:11.840 --> 0:05:15.840
new implementation is fantastic. People doing that work are

77
0:05:15.840 --> 0:05:19.840
amazing. They are giant. And we always hear that, first, is

78
0:05:19.840 --> 0:05:23.840
amazing at security, at Modia. We keep repeating that stuff.

79
0:05:23.840 --> 0:05:26.840
But for the new implementation, it's not an argument. They

80
0:05:26.840 --> 0:05:30.840
had only 17 CVs for the last 20 years. So, it's not about

81
0:05:30.840 --> 0:05:35.840
security, the implementation. And it's not about the license.

82
0:05:35.840 --> 0:05:39.840
I know that some company cares a lot about license. Myself,

83
0:05:39.840 --> 0:05:42.840
as soon as I can upload it into Debian, I'm fine. But some

84
0:05:42.840 --> 0:05:47.840
people love debating how the GPL or MIT are amazing, or

85
0:05:47.840 --> 0:05:50.840
they suck, depending on who you talk to. I am not

86
0:05:50.840 --> 0:05:53.840
interesting to have that debate. I leave that debate to

87
0:05:53.840 --> 0:05:57.840
Reddit or the other one. And last but not least, it is

88
0:05:57.840 --> 0:06:00.840
super interesting. I hope during that presentation I will be

89
0:06:00.840 --> 0:06:02.840
able to convince you to contribute and to write

90
0:06:02.840 --> 0:06:06.840
patches. It's not that hard. I will even do a demo of fixing

91
0:06:06.840 --> 0:06:11.840
a bug live, hopefully. So, I keep talking about that

92
0:06:11.840 --> 0:06:14.840
stuff, but I think you all have a basic understanding, at

93
0:06:14.840 --> 0:06:18.840
least, of what are the coretors. So, we'll start with a

94
0:06:18.840 --> 0:06:22.840
quiz. So, who was born before 2000 in that room? I see a

95
0:06:22.840 --> 0:06:26.840
lot of grey hair. Oh, yeah, a bunch of people. After

96
0:06:26.840 --> 0:06:35.840
90, who was born after 90? That's N. After 80. After 71.

97
0:06:35.840 --> 0:06:40.840
Yeah. So, congrats, you are younger than the initial

98
0:06:40.840 --> 0:06:44.840
implementation of the coretors. So, the first version

99
0:06:44.840 --> 0:06:49.840
was published by Ken Thompson in 70. So, thanks to

100
0:06:49.840 --> 0:06:55.840
Software Itage, the archive done by Inria and a lot of

101
0:06:55.840 --> 0:06:58.840
factors, you can see the sources of the initial

102
0:06:58.840 --> 0:07:03.840
implementation. As you can see, the.s means assembly. I

103
0:07:03.840 --> 0:07:06.840
won't share any assembly code today, don't worry, but you

104
0:07:06.840 --> 0:07:09.840
can look at the source and it's pretty amazing to see that

105
0:07:09.840 --> 0:07:12.840
that code has been written 53 years ago. So, Ken Thompson

106
0:07:12.840 --> 0:07:18.840
and Denise, they worked on that stuff a long time ago.

107
0:07:18.840 --> 0:07:21.840
And what we are doing right now, and you can generalize

108
0:07:21.840 --> 0:07:24.840
that to most of the things in text, is that we are building

109
0:07:24.840 --> 0:07:27.840
stuff on the shoulder of those giants. So, those two

110
0:07:27.840 --> 0:07:30.840
folks invented things that we are still using on a daily

111
0:07:30.840 --> 0:07:33.840
basis, like we all use CP, MV, and all that stuff. Even if

112
0:07:33.840 --> 0:07:36.840
you don't know about it, your system is probably going to

113
0:07:36.840 --> 0:07:39.840
use it behind. I will also mention that it was very

114
0:07:39.840 --> 0:07:42.840
good for Madame Gordon-Belle, who is interviewing Brian

115
0:07:42.840 --> 0:07:48.840
Keringan, talking about the history of the UNIX operating

116
0:07:48.840 --> 0:07:51.840
system. So, those folks worked on new implementation of

117
0:07:51.840 --> 0:07:57.840
those commands in 72. So, mostly C, so you can see that,

118
0:07:57.840 --> 0:08:00.840
for example, CP and the if command were written in C.

119
0:08:00.840 --> 0:08:04.840
The code is surprisingly easy to read. So, this one is a

120
0:08:04.840 --> 0:08:09.840
source from, again, 50 years ago of CH mode. I'm sure that

121
0:08:09.840 --> 0:08:12.840
if you know a bit of C, you can read it. And found that

122
0:08:12.840 --> 0:08:15.840
fascinating to see that the code those folks wrote 50

123
0:08:15.840 --> 0:08:20.840
years ago, I'm showing it at first then in 2023, and it's

124
0:08:20.840 --> 0:08:24.840
still relevant, and people can relate to that code. And you

125
0:08:24.840 --> 0:08:27.840
can ask yourself, is your code you are writing today still

126
0:08:27.840 --> 0:08:30.840
going to be valuable in 50 years? Well, really not. But

127
0:08:30.840 --> 0:08:33.840
those folks, they made it. And it's probably going to stay

128
0:08:33.840 --> 0:08:37.840
for a long time. And this one is the actual implementation

129
0:08:37.840 --> 0:08:42.840
of the CH mode function in the function written in 72. So,

130
0:08:42.840 --> 0:08:46.840
it's not crazy code. It's full of bugs probably. But it

131
0:08:46.840 --> 0:08:51.840
worked, and it is what started UNIX a long time ago. And

132
0:08:51.840 --> 0:08:53.840
what I found surprising, listening to that podcast, is

133
0:08:53.840 --> 0:08:58.840
also how amazing programming language, sorry, corey

134
0:08:58.840 --> 0:09:02.840
fields and those commands are. We take that for granted.

135
0:09:02.840 --> 0:09:07.840
But when you think about it, when you use sort, UNIX, cat

136
0:09:07.840 --> 0:09:10.840
and all that stuff, it allows you to do some crazy things

137
0:09:10.840 --> 0:09:13.840
very quickly. So, let's take a few seconds and think, I

138
0:09:13.840 --> 0:09:17.840
give you a text file, and you want to tell me what is the

139
0:09:17.840 --> 0:09:21.840
most common, the five most common words in the Shakespeare

140
0:09:21.840 --> 0:09:26.840
books, longer than six cars. We can all do that stuff. It's

141
0:09:26.840 --> 0:09:31.840
probably six, seven lines of Python, same in Rust, and

142
0:09:31.840 --> 0:09:34.840
same in some languages. But if you do that in bash, sorry,

143
0:09:34.840 --> 0:09:38.840
in corey field with bash, it is that common. And when you

144
0:09:38.840 --> 0:09:42.840
think about it, it's very impressive that pipe and

145
0:09:42.840 --> 0:09:45.840
redirection are the key things that we are doing and how is

146
0:09:45.840 --> 0:09:48.840
it to program on a daily basis. All your system is running

147
0:09:48.840 --> 0:09:51.840
that kind of stuff on a daily basis, and it makes it

148
0:09:51.840 --> 0:09:54.840
super easy. I'm not saying that it is great, because it's

149
0:09:54.840 --> 0:09:57.840
not full tolerant. If you have the single error in that

150
0:09:57.840 --> 0:09:59.840
command, everything is going to break and you are not

151
0:09:59.840 --> 0:10:02.840
going to get what you want. But still, you can do that kind

152
0:10:02.840 --> 0:10:05.840
of things very quickly and very easily. So, by the way,

153
0:10:05.840 --> 0:10:08.840
the results are those ones. So, in Shakespeare, more than

154
0:10:08.840 --> 0:10:13.840
five letters, it should further accent. I don't know how to

155
0:10:13.840 --> 0:10:16.840
pronounce that one. So, I had to google what it means. It

156
0:10:16.840 --> 0:10:18.840
means that you leave the scene. That is what it means in

157
0:10:18.840 --> 0:10:20.840
English for Shakespeare before and after. And it's pretty

158
0:10:20.840 --> 0:10:23.840
funny to do that stuff. I did it until I checked it out,

159
0:10:23.840 --> 0:10:26.840
and it's quite interesting to see what Shakespeare used in

160
0:10:26.840 --> 0:10:30.840
terms of words. So, now let's talk about today. My

161
0:10:30.840 --> 0:10:33.840
brother and history teacher, I'm not. So, I will talk

162
0:10:33.840 --> 0:10:37.840
about what we have now. So, we have 105 comments in the

163
0:10:37.840 --> 0:10:41.840
implementation. In the blue implementation, we are trying

164
0:10:41.840 --> 0:10:44.840
to reach that level. You are very familiar with many of

165
0:10:44.840 --> 0:10:47.840
those. Some of them you probably never heard of. And

166
0:10:47.840 --> 0:10:52.840
I'd like also to remind that what is in the core details

167
0:10:52.840 --> 0:10:56.840
of the comments can be weird. So, sometimes you don't

168
0:10:56.840 --> 0:11:00.840
have find, you don't have find last stops and all those

169
0:11:00.840 --> 0:11:04.840
comments, but you have some other things. And most of

170
0:11:04.840 --> 0:11:08.840
these comments, they come up with arguments which sometimes

171
0:11:08.840 --> 0:11:11.840
are conflicting with each other. Sometimes are completely

172
0:11:11.840 --> 0:11:14.840
changing the argument of the behavior of the comment

173
0:11:14.840 --> 0:11:19.840
depending on what you enter. So, second quiz. So, who

174
0:11:19.840 --> 0:11:23.840
knows what the comment is? So, L, I, C, P, M, V. Everybody.

175
0:11:23.840 --> 0:11:27.840
Sure. And then this one, probably two. Now we are

176
0:11:27.840 --> 0:11:31.840
starting with the art stuff. Nump format. So, it's a

177
0:11:31.840 --> 0:11:34.840
comment that, yeah, there is one of the maintainer of the

178
0:11:34.840 --> 0:11:37.840
project with myself. Of course, you know. But really,

179
0:11:37.840 --> 0:11:39.840
this is the only one. So, it's the kind of stuff that we

180
0:11:39.840 --> 0:11:41.840
have to deal with because we want to be a drop team

181
0:11:41.840 --> 0:11:44.840
replacement for the new project. But we have those

182
0:11:44.840 --> 0:11:49.840
things. So, we have a lot of different things. One guy. So,

183
0:11:49.840 --> 0:11:53.840
someone else. Convert text files for printing. So, it's

184
0:11:53.840 --> 0:11:56.840
one of those comments and it has a huge number of arguments

185
0:11:56.840 --> 0:11:59.840
which are probably conflicting with each other. So, C

186
0:11:59.840 --> 0:12:03.840
split. Who knows? Daniel knows. Just a few people in

187
0:12:03.840 --> 0:12:07.840
that room. So, it is to split a file into section

188
0:12:07.840 --> 0:12:11.840
determined by the context line. It's cryptic, right? It's

189
0:12:11.840 --> 0:12:15.840
weird. And we have plenty of other factors to do math. We

190
0:12:15.840 --> 0:12:18.840
have pinky. I don't remember what he's doing. T sort is

191
0:12:18.840 --> 0:12:22.840
doing some kind of search. Shred is to delete. Really

192
0:12:22.840 --> 0:12:26.840
remove the data of a file on the hard drive. Sec is more

193
0:12:26.840 --> 0:12:31.840
common, but still I really see that one in scripts.

194
0:12:31.840 --> 0:12:34.840
And so, we have a bunch of implementation of the

195
0:12:34.840 --> 0:12:37.840
curios available on the market. So, the most common that

196
0:12:37.840 --> 0:12:40.840
everybody knows is the new implementation. So, our BSD

197
0:12:40.840 --> 0:12:44.840
which is used on Mac, for example, BSD box is the one

198
0:12:44.840 --> 0:12:47.840
when you want to use on MBD devices or when you want to

199
0:12:47.840 --> 0:12:51.840
recover a system. Toy box is one of the core developers

200
0:12:51.840 --> 0:12:54.840
of BSD box. This I did to rewrite Toy box because it was

201
0:12:54.840 --> 0:12:58.840
sick of license discussion. I learned recently that there

202
0:12:58.840 --> 0:13:01.840
is a V lang implementation. Don't ask me what is V lang. I

203
0:13:01.840 --> 0:13:04.840
don't know. And if you are aware of the implementation,

204
0:13:04.840 --> 0:13:08.840
please let me know. I will tell you why I want to know.

205
0:13:08.840 --> 0:13:12.840
So, let's talk about our implementation. So, it was

206
0:13:12.840 --> 0:13:16.840
started by Jodi. I will butcher his name, but

207
0:13:16.840 --> 0:13:23.840
in 2013, before version 1.0, I sent an email to Jodi

208
0:13:23.840 --> 0:13:27.840
because he has a.b email address saying I'm going to

209
0:13:27.840 --> 0:13:30.840
present the work that you started ten years ago at first

210
0:13:30.840 --> 0:13:33.840
time and he said, oh, cool. Glad to hear that this project

211
0:13:33.840 --> 0:13:37.840
is still alive. Myself, I found it in early 2020, so

212
0:13:37.840 --> 0:13:40.840
I started contributing in April. I remember that

213
0:13:40.840 --> 0:13:44.840
COVID started in Europe in March. It's not a coincidence.

214
0:13:44.840 --> 0:13:47.840
Now, he reads the size of the project. So, we have

215
0:13:47.840 --> 0:13:53.840
13,000 stars and we have 300 and 50 contributors.

216
0:13:53.840 --> 0:13:56.840
The second contributor to that project, you see his

217
0:13:56.840 --> 0:13:59.840
picture with the white background is over there. Well

218
0:13:59.840 --> 0:14:02.840
done. That's for your amazing work. He's the one

219
0:14:02.840 --> 0:14:05.840
who is doing RPR. I'm doing the easy one. He's not a

220
0:14:05.840 --> 0:14:09.840
good developer in general. Now, it's packaged in most

221
0:14:09.840 --> 0:14:12.840
of the distro. Obviously, it's not a coincidence in

222
0:14:12.840 --> 0:14:17.840
Debian and Ubuntu, but Fedora and most of them. It's

223
0:14:17.840 --> 0:14:20.840
used by it is shipping in Appartis, which is a

224
0:14:20.840 --> 0:14:25.840
Linux distro for cars, which between you and me found

225
0:14:25.840 --> 0:14:30.840
it scary that they are using our work in production.

226
0:14:30.840 --> 0:14:33.840
But I'm always the impostuous syndrome in terms of

227
0:14:33.840 --> 0:14:37.840
development. It's used by a social network through

228
0:14:37.840 --> 0:14:41.840
the project. It's not Facebook, the famous social

229
0:14:41.840 --> 0:14:44.840
network. Another one and they are making glasses and

230
0:14:44.840 --> 0:14:47.840
so on. I think you can guess who they are. They are

231
0:14:47.840 --> 0:14:50.840
using that to take pictures in the glasses. This one

232
0:14:50.840 --> 0:14:56.840
is for license reasons. Now, I'm doing some product

233
0:14:56.840 --> 0:14:38.840
placement for one of the M

234
0:14:57.840 --> 0:15:01.840
odzea achievement REST. Why do we want to do it in

235
0:15:01.840 --> 0:15:05.840
REST? You don't have to worry about security issue at

236
0:15:05.840 --> 0:15:09.840
MUSEA on Firefox. In particular, we see security

237
0:15:09.840 --> 0:15:13.840
issue caused by C and C++, not on a daily basis, but

238
0:15:13.840 --> 0:15:17.840
almost. You should not do C and C++ anymore if you

239
0:15:17.840 --> 0:15:21.840
care about security. It's very portable. One of the

240
0:15:21.840 --> 0:15:24.840
things that I learned with that project is we are

241
0:15:24.840 --> 0:15:27.840
supporting a lot of configuration, a lot of

242
0:15:27.840 --> 0:15:30.840
operating system. REST is really amazing for that.

243
0:15:30.840 --> 0:15:34.840
It was one of my big discoveries. It was probably

244
0:15:34.840 --> 0:15:37.840
for some of the REST developers in the room, but for

245
0:15:37.840 --> 0:15:41.840
me, it was a surprise. I really don't like to

246
0:15:41.840 --> 0:15:45.840
invent the wheel. We can leverage a lot of create

247
0:15:45.840 --> 0:15:48.840
which has been developed by very talented people

248
0:15:48.840 --> 0:15:51.840
over the years. LS color, for example, is used by

249
0:15:51.840 --> 0:15:55.840
LSD or XR probably to provide the same color as LS.

250
0:15:55.840 --> 0:15:58.840
We are using that stuff in the REST corey fields.

251
0:15:58.840 --> 0:16:01.840
We are using that work here to do recursive

252
0:16:01.840 --> 0:16:04.840
operation on the directory. We are using that

253
0:16:04.840 --> 0:16:07.840
crate, so we don't have to worry about that one.

254
0:16:07.840 --> 0:16:11.840
We use it for MK-10, for example. If you look at

255
0:16:11.840 --> 0:16:14.840
the sources of the new corey fields, they have to

256
0:16:14.840 --> 0:16:17.840
re-implement everything by themselves. Sometimes they

257
0:16:17.840 --> 0:16:20.840
use that in some libraries, but they have to rewrite

258
0:16:20.840 --> 0:16:24.840
a lot of things. While for us, we can reuse what

259
0:16:24.840 --> 0:16:28.840
we have to do. And last but not least, we have

260
0:16:28.840 --> 0:16:31.840
amazing performances. I will do a demo later of

261
0:16:31.840 --> 0:16:34.840
some of the performances that we have, but

262
0:16:34.840 --> 0:16:37.840
surprisingly, we are in some cases, we are

263
0:16:37.840 --> 0:16:41.840
significantly faster than the glue implementation.

264
0:16:41.840 --> 0:16:45.840
And it's a very popular language. No need to

265
0:16:45.840 --> 0:16:48.840
explain why, but we have a lot of contributors,

266
0:16:48.840 --> 0:16:51.840
and sometimes we are struggling to keep up with

267
0:16:51.840 --> 0:16:53.840
the

268
0:16:54.840 --> 0:16:56.840
things that we are trying to do.

269
0:16:56.840 --> 0:16:59.840
We are trying to make sure that everybody wants

270
0:16:59.840 --> 0:17:02.840
to learn REST, and you should if you don't, but

271
0:17:02.840 --> 0:17:04.840
it's very popular.

272
0:17:04.840 --> 0:17:07.840
So what is the goal of this specific

273
0:17:07.840 --> 0:17:10.840
implementation? When I took over that project

274
0:17:10.840 --> 0:17:14.840
a few years ago, I had exactly the same idea

275
0:17:14.840 --> 0:17:17.840
in mind as Chris Lettner and Apple did back then

276
0:17:17.840 --> 0:17:20.840
with Clang, is to be a drop-in replacement.

277
0:17:20.840 --> 0:17:24.840
Clang is a pure replacement for GCC in general

278
0:17:24.840 --> 0:17:28.840
for most of the options. It has been one of the

279
0:17:28.840 --> 0:17:31.840
success, you just have to override the CXX

280
0:17:31.840 --> 0:17:34.840
variable and you could use Clang directly.

281
0:17:34.840 --> 0:17:37.840
If it was not working, it was a bug for most of

282
0:17:37.840 --> 0:17:40.840
the cases. So it works surprisingly well.

283
0:17:40.840 --> 0:17:43.840
Now Clang is a de facto standard for compiling

284
0:17:43.840 --> 0:17:46.840
most of the very complex applications like

285
0:17:46.840 --> 0:17:49.840
Chrome or Firefox. What can we do to

286
0:17:49.840 --> 0:17:53.840
replicate that? So with the current

287
0:17:53.840 --> 0:17:55.840
use, we focused on that one, to be a drop-in

288
0:17:55.840 --> 0:17:57.840
replacement.

289
0:17:57.840 --> 0:18:00.840
We want that stuff to be a cross-platform.

290
0:18:00.840 --> 0:18:04.840
It has been decided before my time as the

291
0:18:04.840 --> 0:18:06.840
leader of the project, but I love the idea, so we

292
0:18:06.840 --> 0:18:08.840
support this operating system.

293
0:18:08.840 --> 0:18:11.840
We are struggling with a free BSD,

294
0:18:11.840 --> 0:18:14.840
CI, because it sucks on GitHub, but besides

295
0:18:14.840 --> 0:18:16.840
that, it's working pretty well.

296
0:18:16.840 --> 0:18:19.840
Except for Fushia, we have CI for every one

297
0:18:19.840 --> 0:18:22.840
of them, so for every PR, we run a lot of

298
0:18:22.840 --> 0:18:25.840
tests on those.

299
0:18:25.840 --> 0:18:29.840
It's very easy to test. So on my laptop,

300
0:18:29.840 --> 0:18:31.840
running the free test suite takes less than

301
0:18:31.840 --> 0:18:35.840
a minute, and it's covering a lot of part

302
0:18:35.840 --> 0:18:37.840
of the code. I will share some of the

303
0:18:37.840 --> 0:18:39.840
code coverage information.

304
0:18:39.840 --> 0:18:42.840
I don't care about it. Some people do.

305
0:18:42.840 --> 0:18:44.840
For some people, it's strengths. For some

306
0:18:44.840 --> 0:18:46.840
people, it's weaknesses, but it's an MIT

307
0:18:46.840 --> 0:18:49.840
license, so that social network and reuse

308
0:18:49.840 --> 0:18:52.840
still are a code to save money. Anyway,

309
0:18:52.840 --> 0:18:55.840
I'm not interested in having that debate.

310
0:18:55.840 --> 0:18:58.840
In my opinion, and I haven't seen anyone

311
0:18:58.840 --> 0:19:01.840
in the community using that argument, it's

312
0:19:01.840 --> 0:19:04.840
not a fight against the GNU project or the

313
0:19:04.840 --> 0:19:07.840
FSF. The GNU project has been doing a lot

314
0:19:07.840 --> 0:19:09.840
of good things for us in the open source

315
0:19:09.840 --> 0:19:12.840
world for 20 or 30 years.

316
0:19:12.840 --> 0:19:15.840
We are standing on their shoulder. It's not a

317
0:19:15.840 --> 0:19:19.840
fight. I know that some GNU quality

318
0:19:19.840 --> 0:19:22.840
developer of monitoring that project for

319
0:19:22.840 --> 0:19:24.840
a long time has been very friendly and so

320
0:19:24.840 --> 0:19:27.840
on. I met Jim Meyering 10 years or 20

321
0:19:27.840 --> 0:19:29.840
years ago, and I was very impressed by

322
0:19:29.840 --> 0:19:33.840
that person. It's not about fighting.

323
0:19:33.840 --> 0:19:36.840
It's about collaboration.

324
0:19:36.840 --> 0:19:38.840
When I started that project two or three

325
0:19:38.840 --> 0:19:40.840
years ago, my initial goal was I want to

326
0:19:40.840 --> 0:19:42.840
be able to put a Debian on it. My laptop

327
0:19:42.840 --> 0:19:45.840
here is running the GNU coretils now.

328
0:19:45.840 --> 0:19:48.840
For example, so it's not lying or it's

329
0:19:48.840 --> 0:19:51.840
working well now. Then it was to install

330
0:19:51.840 --> 0:19:55.840
the top 1,000 packages in Debian.

331
0:19:55.840 --> 0:19:57.840
If I wanted to do that, it's that Debian

332
0:19:57.840 --> 0:20:00.840
has a lot of script to configure the

333
0:20:00.840 --> 0:20:02.840
package because that post-inst, and they

334
0:20:02.840 --> 0:20:06.840
are usually done in Bash and using the

335
0:20:06.840 --> 0:20:10.840
sort and CP and NV and install.

336
0:20:10.840 --> 0:20:13.840
It's exercising a lot of features of the

337
0:20:13.840 --> 0:20:16.840
GNU coretils.

338
0:20:16.840 --> 0:20:18.840
One of the goals was also to build three

339
0:20:18.840 --> 0:20:21.840
of the big projects I care about, Linux,

340
0:20:21.840 --> 0:20:25.840
LLVM, and Firefox obviously. We don't

341
0:20:25.840 --> 0:20:28.840
use that much scripting, Bash or

342
0:20:28.840 --> 0:20:30.840
Knoritils, but I still found some bugs

343
0:20:30.840 --> 0:20:33.840
building the Linux kernel, some corner

344
0:20:33.840 --> 0:20:35.840
cases. Of course, packages into Debian

345
0:20:35.840 --> 0:20:37.840
and Ubuntu.

346
0:20:37.840 --> 0:20:41.840
I published some blog about it.

347
0:20:41.840 --> 0:20:43.840
They have been shared on a bunch of

348
0:20:43.840 --> 0:20:46.840
places. I had some interesting comments,

349
0:20:46.840 --> 0:20:48.840
some of them not very interesting.

350
0:20:48.840 --> 0:20:52.840
Anyway, so to achieve those goals, we had

351
0:20:52.840 --> 0:20:55.840
to deploy a CI, add code coverage

352
0:20:55.840 --> 0:20:57.840
support, improve the code coverage.

353
0:20:57.840 --> 0:20:59.840
It's one of the things to get familiar

354
0:20:59.840 --> 0:21:01.840
with the project. I wrote a lot of unit

355
0:21:01.840 --> 0:21:03.840
tests, so now the code coverage of our

356
0:21:03.840 --> 0:21:06.840
implementation is 80%. If you don't know

357
0:21:06.840 --> 0:21:09.840
much about code coverage, 80% is usually

358
0:21:09.840 --> 0:21:11.840
what we are trying to achieve. In a

359
0:21:11.840 --> 0:21:13.840
project, it means that the code coverage

360
0:21:13.840 --> 0:21:17.840
is very good. It's very hard to reach 100%,

361
0:21:17.840 --> 0:21:19.840
and sometimes it's a waste of time, but 80

362
0:21:19.840 --> 0:21:21.840
is usually considered as being a very

363
0:21:21.840 --> 0:21:23.840
good code coverage. I think on Firefox,

364
0:21:23.840 --> 0:21:28.840
we are at 65 or 70, something like that.

365
0:21:28.840 --> 0:21:30.840
We plugged a bunch of tools. I'm in love

366
0:21:30.840 --> 0:21:33.840
with static analysis, so of course I had

367
0:21:33.840 --> 0:21:35.840
to do that for that project.

368
0:21:35.840 --> 0:21:38.840
We also documented a lot of those processes.

369
0:21:38.840 --> 0:21:41.840
Everybody loves about docs, so we wrote

370
0:21:41.840 --> 0:21:45.840
plenty of docs. It took about a year to reach that state.

371
0:21:45.840 --> 0:21:47.840
Now is the current stages. What we have,

372
0:21:47.840 --> 0:21:50.840
you have a CI that is running for every PR,

373
0:21:50.840 --> 0:21:54.840
and we run our implementation against

374
0:21:54.840 --> 0:21:57.840
the new test suite. This is the latest graph,

375
0:21:57.840 --> 0:21:59.840
so you can see that we have been working

376
0:21:59.840 --> 0:22:03.840
a lot on improving the compatibility.

377
0:22:03.840 --> 0:22:06.840
We are not there yet. I will fix one of them

378
0:22:06.840 --> 0:22:08.840
with you later during that presentation,

379
0:22:08.840 --> 0:22:11.840
but there is no silver bullet. For many

380
0:22:11.840 --> 0:22:13.840
of those, you have to spend a few hours

381
0:22:13.840 --> 0:22:17.840
to fix one, and you improve one by one.

382
0:22:17.840 --> 0:22:19.840
Before you ask a question, the skip is

383
0:22:19.840 --> 0:22:23.840
mostly that it is SELinux, so CPMV and

384
0:22:23.840 --> 0:22:26.840
some command or CHCon are using SELinux,

385
0:22:26.840 --> 0:22:30.840
and GitHub action uses Ubuntu, and Ubuntu

386
0:22:30.840 --> 0:22:32.840
doesn't have a default, so it's tricky

387
0:22:32.840 --> 0:22:34.840
to test that stuff into the CI.

388
0:22:34.840 --> 0:22:36.840
If you know how to do it, please reach out to us.

389
0:22:36.840 --> 0:22:40.840
I'd like to fix that stuff.

390
0:22:40.840 --> 0:22:42.840
How do we work? As I said many times,

391
0:22:42.840 --> 0:22:45.840
we want that stuff to be a team replacement.

392
0:22:45.840 --> 0:22:49.840
We wrote a menu wrapper to make it super easy.

393
0:22:49.840 --> 0:22:53.840
That command that I share is going to run

394
0:22:53.840 --> 0:22:58.840
the not owner test for the touch command on GNU,

395
0:22:58.840 --> 0:23:03.840
so it's going to use the GNU test

396
0:23:03.840 --> 0:23:05.840
and run it against our implementation.

397
0:23:05.840 --> 0:23:09.840
It's super easy to test.

398
0:23:09.840 --> 0:23:12.840
We wrote some scripts to make our life easier.

399
0:23:12.840 --> 0:23:14.840
We have a Python script which is going to tell

400
0:23:14.840 --> 0:23:16.840
a series to the list. If you do it,

401
0:23:16.840 --> 0:23:18.840
it's several pages because we still have

402
0:23:18.840 --> 0:23:21.840
a lot of tests to fix.

403
0:23:21.840 --> 0:23:23.840
We wrote also a fancy page.

404
0:23:23.840 --> 0:23:27.840
I can show you what this looks like.

405
0:23:27.840 --> 0:23:31.840
Here it is. We have the list of all the tests

406
0:23:31.840 --> 0:23:33.840
for each command, and of course,

407
0:23:33.840 --> 0:23:38.840
the big one is MISC, where we have the MISC.

408
0:23:38.840 --> 0:23:40.840
Sometimes it's just a one-line change in the code.

409
0:23:40.840 --> 0:23:42.840
Sometimes it's a big refactor.

410
0:23:42.840 --> 0:23:44.840
It really depends. It's part of the fun.

411
0:23:44.840 --> 0:23:49.840
You never know what you are going to get.

412
0:23:49.840 --> 0:23:53.840
Let's use an example for MKGIR.

413
0:23:53.840 --> 0:23:56.840
This is the GNU I would put.

414
0:23:56.840 --> 0:24:01.840
You do dash P. Who knows what is dash P in that one?

415
0:24:01.840 --> 0:24:04.840
Okay, cool. It creates a recursive,

416
0:24:04.840 --> 0:24:06.840
and V is verbose. Everybody knows that.

417
0:24:06.840 --> 0:24:08.840
In the GNU implementations, they decided

418
0:24:08.840 --> 0:24:10.840
to do it directly by directory.

419
0:24:10.840 --> 0:24:12.840
You can argue that maybe it's not a good use.

420
0:24:12.840 --> 0:24:14.840
It's not smart. Maybe it is.

421
0:24:14.840 --> 0:24:17.840
Who cares? It's legacy. We have to deal with legacy.

422
0:24:17.840 --> 0:24:20.840
Our implementation was that one.

423
0:24:20.840 --> 0:24:24.840
You can argue that maybe ours was better or worse.

424
0:24:24.840 --> 0:24:26.840
Who cares? We updated that code,

425
0:24:26.840 --> 0:24:29.840
so we match exactly what GNU is doing.

426
0:24:29.840 --> 0:24:31.840
I will share the slide.

427
0:24:31.840 --> 0:24:34.840
After, you can look at the change.

428
0:24:34.840 --> 0:24:36.840
It's pretty easy to understand.

429
0:24:36.840 --> 0:24:38.840
This one is one of my favorites.

430
0:24:38.840 --> 0:24:41.840
In Debian, when you install LibreOffice,

431
0:24:41.840 --> 0:24:44.840
it is using App Armor, and someone decided

432
0:24:44.840 --> 0:24:46.840
that instead of doing a touch,

433
0:24:46.840 --> 0:24:49.840
you do install devnul, which creates an empty file.

434
0:24:49.840 --> 0:24:51.840
This legacy also.

435
0:24:51.840 --> 0:24:53.840
I want to fix legacy everywhere.

436
0:24:53.840 --> 0:24:55.840
Probably not.

437
0:24:55.840 --> 0:24:57.840
That was one of my favorite bugs,

438
0:24:57.840 --> 0:24:59.840
so I started investigating.

439
0:24:59.840 --> 0:25:01.840
Here is some rest cards which reproduce that issue.

440
0:25:01.840 --> 0:25:05.840
If you do a copy of devnul into a text file,

441
0:25:05.840 --> 0:25:07.840
it is failing with source path.

442
0:25:07.840 --> 0:25:10.840
It's not an existing regular file.

443
0:25:10.840 --> 0:25:13.840
I open a bug upstream.

444
0:25:13.840 --> 0:25:15.840
It's quite interesting.

445
0:25:15.840 --> 0:25:17.840
I think people in the Rust community

446
0:25:17.840 --> 0:25:19.840
are very passionate about that kind of thing.

447
0:25:19.840 --> 0:25:21.840
Too long didn't read. It hasn't been fixed.

448
0:25:21.840 --> 0:25:23.840
Here is a workaround.

449
0:25:23.840 --> 0:25:27.840
It's ugly, but if you know a better way to do it,

450
0:25:27.840 --> 0:25:31.840
besides fixing restc and dealing with the fallout of the fix,

451
0:25:31.840 --> 0:25:33.840
this is the best that we have.

452
0:25:33.840 --> 0:25:36.840
We are looking if the input is devnul.

453
0:25:36.840 --> 0:25:39.840
If it is devnul, we are creating an empty file.

454
0:25:39.840 --> 0:25:42.840
This is what it takes to deal with legacy.

455
0:25:42.840 --> 0:25:44.840
Let's do a demo together.

456
0:25:44.840 --> 0:25:46.840
Please bear with me.

457
0:26:15.840 --> 0:26:17.840
Just switch to alacrity.

458
0:26:17.840 --> 0:26:20.840
I never remember the shortcut to increase the font.

459
0:26:20.840 --> 0:26:22.840
The AS1.

460
0:26:22.840 --> 0:26:24.840
Better? Cool.

461
0:26:31.840 --> 0:26:33.840
This is not the new version that I'm running.

462
0:26:33.840 --> 0:26:36.840
You can see I'm running our implementation.

463
0:26:36.840 --> 0:26:38.840
We are working 30 days.

464
0:26:38.840 --> 0:26:42.840
This is 0.0, 17 weeks ago, something like that,

465
0:26:42.840 --> 0:26:46.840
when we could go, so we are using that implementation of it.

466
0:26:46.840 --> 0:26:49.840
When I took the train to come here,

467
0:26:49.840 --> 0:26:52.840
I looked at the test suite, and I was like,

468
0:26:52.840 --> 0:26:54.840
I will try to find a cool bug for the demo.

469
0:26:54.840 --> 0:26:58.840
I found one, and I want to show you what it is.

470
0:27:03.840 --> 0:27:05.840
I don't always remember the command.

471
0:27:05.840 --> 0:27:08.840
Because I'm a font of a crowd, I don't want to look stupid,

472
0:27:08.840 --> 0:27:12.840
so I did a post-bait within French.

473
0:27:17.840 --> 0:27:20.840
Here is building some stuff.

474
0:27:20.840 --> 0:27:24.840
What I'm testing right now is a sort command.

475
0:27:24.840 --> 0:27:29.840
The sort command has some fancy flag.

476
0:27:29.840 --> 0:27:32.840
This is a command from the GNU project,

477
0:27:32.840 --> 0:27:38.840
so I will show you what the test looks like on the GNU site.

478
0:27:46.840 --> 0:27:48.840
Here is the test.

479
0:27:48.840 --> 0:27:51.840
Of course, we have the TPL suite leader on top,

480
0:27:51.840 --> 0:27:55.840
and then there is a list of file with version name.

481
0:27:55.840 --> 0:28:00.840
On the top, we have the input.

482
0:28:00.840 --> 0:28:07.840
Below, we have the expected one.

483
0:28:07.840 --> 0:28:12.840
The command that they are testing is a stable sort

484
0:28:12.840 --> 0:28:14.840
with a sort by version.

485
0:28:14.840 --> 0:28:16.840
Sort, and same for LS.

486
0:28:16.840 --> 0:28:20.840
You can specify what kind of sort you want.

487
0:28:20.840 --> 0:28:23.840
Of course, doing sort of version is super complex,

488
0:28:23.840 --> 0:28:25.840
and we can basically do the test for hours.

489
0:28:25.840 --> 0:28:27.840
I love it.

490
0:28:27.840 --> 0:28:29.840
Here is what they are testing.

491
0:28:29.840 --> 0:28:32.840
Of course, as you can see, it failed on our side.

492
0:28:32.840 --> 0:28:37.840
Why did it fail?

493
0:28:37.840 --> 0:28:43.840
It seems that it is complaining that 5.4.0 is not sorted

494
0:28:43.840 --> 0:28:47.840
the same way as 5.04.

495
0:28:47.840 --> 0:28:50.840
Super interesting, isn't it?

496
0:28:50.840 --> 0:28:54.840
Basically, it means that we are sorting that version differently.

497
0:28:54.840 --> 0:28:56.840
Of course, it's obvious that it is the same version,

498
0:28:56.840 --> 0:28:58.840
and in theory, it should be equal,

499
0:28:58.840 --> 0:29:00.840
but when you are sorting in those cases,

500
0:29:00.840 --> 0:29:03.840
equal doesn't mean anything, so you need to make a decision.

501
0:29:03.840 --> 0:29:06.840
Of course, we decided to do other arrays

502
0:29:06.840 --> 0:29:09.840
because I think the person who did the implementation

503
0:29:09.840 --> 0:29:12.840
didn't realize that you were doing something different.

504
0:29:12.840 --> 0:29:16.840
Let's try to fix that together.

505
0:29:16.840 --> 0:29:19.840
What I like to do, I don't know how other contributors

506
0:29:19.840 --> 0:29:22.840
to the REST project are doing, is that I like to have test cases.

507
0:29:22.840 --> 0:29:28.840
What I'm doing is I'm creating some basic commands

508
0:29:28.840 --> 0:29:30.840
to be able to reproduce that easily

509
0:29:30.840 --> 0:29:32.840
so that I don't have to run the test.

510
0:29:32.840 --> 0:29:35.840
I spare you the details, so here is the test case.

511
0:29:35.840 --> 0:29:41.840
Let me do that right now.

512
0:29:41.840 --> 0:29:58.840
I've got my test file.

513
0:29:58.840 --> 0:30:01.840
What I'm doing is I'm forcing the full pass

514
0:30:01.840 --> 0:30:03.840
to use a new implementation.

515
0:30:03.840 --> 0:30:06.840
I used the two arguments that we mentioned earlier,

516
0:30:06.840 --> 0:30:09.840
and now I have the input and the output.

517
0:30:09.840 --> 0:30:19.840
If I do a div, it should be empty.

518
0:30:19.840 --> 0:30:21.840
It is.

519
0:30:21.840 --> 0:30:23.840
I love when demo works well.

520
0:30:23.840 --> 0:30:26.840
It's just the beginning, so I will probably affect up

521
0:30:26.840 --> 0:30:28.840
at some point.

522
0:30:28.840 --> 0:30:31.840
Now I want to test the new implementation.

523
0:30:31.840 --> 0:30:38.840
How are implementations of REST 1?

524
0:30:38.840 --> 0:30:39.840
Here it is.

525
0:30:39.840 --> 0:30:41.840
Now I have a simple test case that I can work on.

526
0:30:41.840 --> 0:30:43.840
I don't have to run the test with it.

527
0:30:43.840 --> 0:30:45.840
I don't have to do anything else.

528
0:30:45.840 --> 0:30:47.840
It's one of the things that I love with that project.

529
0:30:47.840 --> 0:30:49.840
That's why I'm not doing REST code at Mediite

530
0:30:49.840 --> 0:30:51.840
because I'm not a very good developer,

531
0:30:51.840 --> 0:30:53.840
and Firefox is super complex.

532
0:30:53.840 --> 0:30:55.840
That stuff is pretty easy to do.

533
0:30:55.840 --> 0:30:57.840
You can do that on the train to come here.

534
0:30:57.840 --> 0:30:59.840
For example, working on it, taking this one,

535
0:30:59.840 --> 0:31:01.840
it's probably going to take 20 minutes to fix.

536
0:31:01.840 --> 0:31:03.840
There is a weird thing at the end,

537
0:31:03.840 --> 0:31:06.840
but I'm not going to produce a surprise yet.

538
0:31:06.840 --> 0:31:08.840
Anyway, this is the code that I have.

539
0:31:08.840 --> 0:31:17.840
Let's dive in now into the actual code.

540
0:31:17.840 --> 0:31:20.840
Let's use GDB.

541
0:31:20.840 --> 0:31:23.840
GDB and REST works very well.

542
0:31:23.840 --> 0:31:25.840
If I do a run, yeah, it works.

543
0:31:25.840 --> 0:31:30.840
If I do a breakpoint on main, yeah, it works.

544
0:31:30.840 --> 0:31:31.840
Next, next, next.

545
0:31:31.840 --> 0:31:32.840
Here it is.

546
0:31:32.840 --> 0:31:33.840
You can see the REST code.

547
0:31:33.840 --> 0:31:35.840
You can evaluate the variables.

548
0:31:35.840 --> 0:31:36.840
It's working super well.

549
0:31:36.840 --> 0:31:38.840
I won't open and look for the function.

550
0:31:38.840 --> 0:31:39.840
I already did that for you.

551
0:31:39.840 --> 0:31:42.840
I already know the function where to put the breakpoint.

552
0:31:42.840 --> 0:31:46.840
It's version underscore CMP.

553
0:31:46.840 --> 0:31:48.840
Our code is pretty well written.

554
0:31:48.840 --> 0:31:51.840
I guess you'll understand what version CMP is doing.

555
0:31:51.840 --> 0:31:52.840
It's comparing version.

556
0:31:52.840 --> 0:31:54.840
Now I continue the execution,

557
0:31:54.840 --> 0:31:57.840
and then I'm in the function doing it.

558
0:31:57.840 --> 0:32:01.840
If I look at A, I see that it is that string.

559
0:32:01.840 --> 0:32:05.840
The first one, if I look at B, here it is.

560
0:32:05.840 --> 0:32:07.840
I have the two string.

561
0:32:07.840 --> 0:32:09.840
I will move in quick mode.

562
0:32:09.840 --> 0:32:11.840
There is execution.

563
0:32:11.840 --> 0:32:13.840
We have the version compare.

564
0:32:13.840 --> 0:32:15.840
Here is a function that I care about.

565
0:32:15.840 --> 0:32:16.840
I will scroll.

566
0:32:16.840 --> 0:32:19.840
You see in that function, it's probably what I care about

567
0:32:19.840 --> 0:32:21.840
because if you don't know about it first,

568
0:32:21.840 --> 0:32:25.840
it is going to trim the zero at the beginning.

569
0:32:25.840 --> 0:32:27.840
Obviously, in that case, it is what I'm looking for,

570
0:32:27.840 --> 0:32:30.840
so I want to remove the zero at first.

571
0:32:30.840 --> 0:32:44.840
Let's fix that code now.

572
0:32:44.840 --> 0:32:47.840
I learned from one of my colleagues at Maggia

573
0:32:47.840 --> 0:32:54.840
that nano is the best text editor, so I'm following the example.

574
0:32:54.840 --> 0:33:21.840
Yeah, exactly. It's the best, right?

575
0:33:21.840 --> 0:33:23.840
Here it is. I removed the trim.

576
0:33:23.840 --> 0:33:26.840
Of course, it's going to break something else after.

577
0:33:26.840 --> 0:33:31.840
I'm confident that it works, so let's rebuild that stuff.

578
0:33:31.840 --> 0:33:33.840
Here it is. It's rebuilding.

579
0:33:33.840 --> 0:33:37.840
The file that I touch is used in a U-call,

580
0:33:37.840 --> 0:33:40.840
so it's one of our basic library to do file management and so on.

581
0:33:40.840 --> 0:33:46.840
It's normal that it is rebuilding the various dependencies.

582
0:33:46.840 --> 0:33:49.840
Yeah, not GDB. I want without GDB.

583
0:33:49.840 --> 0:33:57.840
Please. That one. Did it work?

584
0:33:57.840 --> 0:34:01.840
Yeah, it worked. Cool. I fixed the bug.

585
0:34:01.840 --> 0:34:04.840
I'm very proud of myself.

586
0:34:04.840 --> 0:34:07.840
I love how Geeks love versioning comparison.

587
0:34:07.840 --> 0:34:09.840
We all love that stuff.

588
0:34:09.840 --> 0:34:14.840
Now, the funny story is, of course, because it will be too easy.

589
0:34:14.840 --> 0:34:18.840
Now, I'm not going to run the full test suite

590
0:34:18.840 --> 0:34:20.840
even if it takes less than a minute,

591
0:34:20.840 --> 0:34:23.840
but I'm just going to run that test because I know that that one failed.

592
0:34:23.840 --> 0:34:26.840
LS has the same function, but LS has a different expectation

593
0:34:26.840 --> 0:34:28.840
in terms of version sorting.

594
0:34:28.840 --> 0:34:33.840
Of course, that test is going to fail because LS likes to zero before

595
0:34:33.840 --> 0:34:37.840
instead of the other one. Of course, that test failed.

596
0:34:37.840 --> 0:34:41.840
One of the things that we could do is in the version compare,

597
0:34:41.840 --> 0:34:43.840
we could have, do we want zero to be first,

598
0:34:43.840 --> 0:34:48.840
or do we want zero to be after doing a Boolean?

599
0:34:48.840 --> 0:34:53.840
When I service, because I don't like the version comparison function

600
0:34:53.840 --> 0:34:56.840
is on our tree. I think it's done. Someone else did it.

601
0:34:56.840 --> 0:34:58.840
Of course, there is a crate doing it.

602
0:34:58.840 --> 0:34:59.840
I reached out to the developer saying,

603
0:34:59.840 --> 0:35:02.840
can you add an option to change the sort when it is a zero?

604
0:35:02.840 --> 0:35:04.840
The upstream made fun of me, but they have a PR ready,

605
0:35:04.840 --> 0:35:06.840
so they will probably end it.

606
0:35:06.840 --> 0:35:09.840
We are going to remove 100 of line of code and use that crate

607
0:35:09.840 --> 0:35:11.840
because it is what we want to do.

608
0:35:11.840 --> 0:35:18.840
We don't want to maintain a comparison of version because who cares, right?

609
0:35:18.840 --> 0:35:20.840
Let's come back to the presentation.

610
0:35:20.840 --> 0:35:23.840
So, performances. Benchmarking performances is hard.

611
0:35:23.840 --> 0:35:28.840
I know that in the room we have some media experts in performances,

612
0:35:28.840 --> 0:35:32.840
and they are not going to contact me when I say that benching is hard.

613
0:35:32.840 --> 0:35:35.840
But we are using a perfume.

614
0:35:35.840 --> 0:35:40.840
We can see that, for example, the start is almost five times faster

615
0:35:40.840 --> 0:35:43.840
than the good implementation because some people spend a lot of time

616
0:35:43.840 --> 0:35:46.840
improving it in our code but also in the crate.

617
0:35:46.840 --> 0:35:50.840
So, that one is basically taking all Shakespeare books,

618
0:35:50.840 --> 0:35:53.840
the text file, making it random, and sort it.

619
0:35:53.840 --> 0:35:57.840
So, we are significantly faster than the good implementation.

620
0:35:57.840 --> 0:36:03.840
Similarly, if you do a recursive LS or a recursive CP,

621
0:36:03.840 --> 0:36:06.840
we are 1.5 faster than you do.

622
0:36:06.840 --> 0:36:11.840
Then, new is probably because the code generated by USC

623
0:36:11.840 --> 0:36:16.840
is much better than the one we turned by new for a long time.

624
0:36:16.840 --> 0:36:19.840
But I don't want to pretend that we are always doing better.

625
0:36:19.840 --> 0:36:23.840
For example, with the factor function,

626
0:36:23.840 --> 0:36:28.840
we are significantly slower than the good implementation five times.

627
0:36:28.840 --> 0:36:30.840
I don't know who uses the command factor.

628
0:36:30.840 --> 0:36:32.840
I learned about that command when I started contributing,

629
0:36:32.840 --> 0:36:35.840
but still, we want to be a good tracking replacement,

630
0:36:35.840 --> 0:36:39.840
and that one is very slow.

631
0:36:39.840 --> 0:36:41.840
So, I'm going to do another demo.

632
0:36:41.840 --> 0:36:46.840
I'm going to do some product placement for a project called Simplies.

633
0:36:46.840 --> 0:36:40.840
He also has that project, works at M

634
0:36:49.840 --> 0:36:53.840
He's in the room, so if you need anything, don't blame me, blame him.

635
0:36:53.840 --> 0:36:57.840
And I will do a quick demo about how can you do

636
0:36:57.840 --> 0:37:01.840
a proper benchmarking of performances.

637
0:37:01.840 --> 0:37:06.840
I will try to find how to do the primary per kernel change.

638
0:37:11.840 --> 0:37:15.840
That one. I love the SH.

639
0:37:22.840 --> 0:37:27.840
So, I just did a recursive LS with a command called Simplies.

640
0:37:27.840 --> 0:37:29.840
So, basically, it is going to instrument it,

641
0:37:29.840 --> 0:37:33.840
and it's going to upload into the Firefox profiler

642
0:37:33.840 --> 0:37:36.840
the analysis of that program.

643
0:37:36.840 --> 0:37:40.840
So, I will zoom in a second.

644
0:37:40.840 --> 0:37:41.840
So, here it is.

645
0:37:41.840 --> 0:37:44.840
I think Baudrillard did four presentations of the profiler today,

646
0:37:44.840 --> 0:37:46.840
so if you haven't seen any...

647
0:37:46.840 --> 0:37:47.840
I'm going to do a quick demo.

648
0:37:47.840 --> 0:37:50.840
Anyway, so it is one of the magic things of Rust,

649
0:37:50.840 --> 0:37:54.840
is that we can easily do that stuff you saw, how long it took.

650
0:37:54.840 --> 0:37:58.840
I will show you the command again that I run.

651
0:37:58.840 --> 0:37:59.840
It is that one.

652
0:37:59.840 --> 0:38:01.840
So, simply record the binary and the argument.

653
0:38:01.840 --> 0:38:03.840
So, it's very easy.

654
0:38:03.840 --> 0:38:07.840
If I try to do that, we see another language is going to take forever,

655
0:38:07.840 --> 0:38:11.840
but Rust simply makes that so easy.

656
0:38:11.840 --> 0:38:15.840
So, here I have the flame graph, so I can see that for a recursive LS,

657
0:38:15.840 --> 0:38:18.840
most of the time that we are spending is in display grid.

658
0:38:18.840 --> 0:38:22.840
So, most of the time that LS is going to spend is not reading at the file

659
0:38:22.840 --> 0:38:23.840
or reading the metadata.

660
0:38:23.840 --> 0:38:26.840
It's just doing computation about how do you want to show the result

661
0:38:26.840 --> 0:38:28.840
into the terminal.

662
0:38:28.840 --> 0:38:32.840
And one of the amazing things is that it's going to...

663
0:38:32.840 --> 0:38:36.840
I can look at the source directly and see the counters

664
0:38:36.840 --> 0:38:38.840
and I can easily benchmark that stuff.

665
0:38:38.840 --> 0:38:40.840
So, if you are into performances in Rust,

666
0:38:40.840 --> 0:38:44.840
you can use simply and the Firefox profiler to do it.

667
0:38:44.840 --> 0:38:50.840
And again, not here as Maggia, but it's very valuable for any project.

668
0:38:50.840 --> 0:38:56.840
It's not Maggia related and makes that stuff super easy.

669
0:38:56.840 --> 0:38:59.840
So, we have also some fancy documentation.

670
0:38:59.840 --> 0:39:01.840
Tert in the room did most of the work.

671
0:39:01.840 --> 0:39:06.840
So, one of the things that he did that I love is that one of the things

672
0:39:06.840 --> 0:39:09.840
that I really struggled at first when I became a Unix developer

673
0:39:09.840 --> 0:39:13.840
like 20 years ago is that I never knew how to do an example

674
0:39:13.840 --> 0:39:14.840
and find the example.

675
0:39:14.840 --> 0:39:21.840
So, Tert link to TLDR.sh where it's providing example for every command.

676
0:39:21.840 --> 0:39:25.840
So, for example, here it's base 64.

677
0:39:25.840 --> 0:39:29.840
You have example, but I'm going to use a command that I didn't know about, shred.

678
0:39:29.840 --> 0:39:33.840
You have example for shred, so you don't have to Google and Stack Overflow

679
0:39:33.840 --> 0:39:34.840
or how to do that stuff.

680
0:39:34.840 --> 0:39:40.840
You have that out of the box in our documentation.

681
0:39:40.840 --> 0:39:45.840
So, we have development documentation.

682
0:39:45.840 --> 0:39:47.840
I won't go through it for a matter of time.

683
0:39:47.840 --> 0:39:53.840
But one of the things, we are taking the liberty also to extend the new clarity.

684
0:39:53.840 --> 0:39:56.840
So, we don't want to break compatibility, but we are doing some fancy things

685
0:39:56.840 --> 0:40:00.840
like progress bar because who doesn't love progress bar.

686
0:40:00.840 --> 0:40:13.840
So, for example, of course it is that one.

687
0:40:13.840 --> 0:40:15.840
So, we have a fancy progress bar now.

688
0:40:15.840 --> 0:40:17.840
You don't have that upstream.

689
0:40:17.840 --> 0:40:20.840
So, you can thank the guy.

690
0:40:20.840 --> 0:40:21.840
He's over there.

691
0:40:21.840 --> 0:40:22.840
I haven't done anything.

692
0:40:22.840 --> 0:40:24.840
But before the talk, he came to me and said,

693
0:40:24.840 --> 0:40:28.840
I looked at the implementation, at the patch that wasn't merging new

694
0:40:28.840 --> 0:40:31.840
and that patch was very hard to understand.

695
0:40:31.840 --> 0:40:33.840
If you look at the diff on the right side,

696
0:40:33.840 --> 0:40:35.840
even if you don't know about it first, you will understand it

697
0:40:35.840 --> 0:40:37.840
because we are relying on the crate.

698
0:40:37.840 --> 0:40:40.840
I think the upstream developer of the crate called Indicative,

699
0:40:40.840 --> 0:40:43.840
is that first demo, so thank you for your hard work.

700
0:40:43.840 --> 0:40:46.840
So, here is what kind of stuff we can do.

701
0:40:46.840 --> 0:40:47.840
We can do it for MV.

702
0:40:47.840 --> 0:40:51.840
MV is interesting because if you are moving between one file system to the other,

703
0:40:51.840 --> 0:40:54.840
it's not always super fast.

704
0:40:54.840 --> 0:40:57.840
We are also implementing some tools that Moot doesn't have,

705
0:40:57.840 --> 0:41:00.840
so B3-some, for example, because it's like B2-some,

706
0:41:00.840 --> 0:41:02.840
so it's an actual algorithm.

707
0:41:02.840 --> 0:41:06.840
Ncut-w, someone contributed that patch recently.

708
0:41:06.840 --> 0:41:10.840
It's a function, it's one of the options from BSD that Moot doesn't have.

709
0:41:10.840 --> 0:41:13.840
I'm like, yeah, why not?

710
0:41:13.840 --> 0:41:14.840
So, what is next?

711
0:41:14.840 --> 0:41:17.840
We want to implement the missing option for the various binary.

712
0:41:17.840 --> 0:41:18.840
It's not hard.

713
0:41:18.840 --> 0:41:19.840
It's fun.

714
0:41:19.840 --> 0:41:20.840
We try to be nice.

715
0:41:20.840 --> 0:41:23.840
I'm not always nice, but I try to.

716
0:41:23.840 --> 0:41:25.840
We want to have a full compatibility with Moot.

717
0:41:25.840 --> 0:41:31.840
So, the list that I show you, I'd like that to be fully green at some point.

718
0:41:31.840 --> 0:41:34.840
It's going to take years, but it's fun.

719
0:41:34.840 --> 0:41:37.840
Improve the performances on some key programs, like, for example, for Factor.

720
0:41:37.840 --> 0:41:39.840
I don't know if we want to spend too much time,

721
0:41:39.840 --> 0:41:43.840
but there are other things where we could improve the performances.

722
0:41:43.840 --> 0:41:50.840
And if you're interested, that link is the most interesting one to know where to start.

723
0:41:50.840 --> 0:41:52.840
It's well-documented.

724
0:41:52.840 --> 0:41:58.840
If you are a student, we are probably going to apply for the Google Summer of Code.

725
0:41:58.840 --> 0:42:03.840
And if someone is interested in sponsoring that project,

726
0:42:03.840 --> 0:42:05.840
if your company or your foundation is interesting,

727
0:42:05.840 --> 0:42:10.840
I'd like to buy some credits on GitHub Action to build faster,

728
0:42:10.840 --> 0:42:14.840
because we're running the new street test about, and it takes about an hour.

729
0:42:14.840 --> 0:42:18.840
And I think we are using a lot of resources,

730
0:42:18.840 --> 0:42:22.840
so it would be nice to have a faster CI.

731
0:42:22.840 --> 0:42:26.840
And now I'd like to predict the future.

732
0:42:26.840 --> 0:42:27.840
It's easy, right?

733
0:42:27.840 --> 0:42:32.840
So, the Linux kernel, they landed the first support of Rust inside the tree.

734
0:42:32.840 --> 0:42:36.840
So, if you do some stats on the on Linux Git repo,

735
0:42:36.840 --> 0:42:41.840
you see that they are first, so there is only 37 files upstream.

736
0:42:41.840 --> 0:42:46.840
It's mostly glue, so how do you manage memory and compatibility with the system

737
0:42:46.840 --> 0:42:49.840
and support for the build system?

738
0:42:49.840 --> 0:42:54.840
We hope that they are going to learn something in the main line soon,

739
0:42:54.840 --> 0:42:57.840
a feature that is going to happen this year or not.

740
0:42:57.840 --> 0:43:01.840
We don't know, and some people are still challenging Rust in the Linux kernel.

741
0:43:01.840 --> 0:43:07.840
The main argument that I heard is mainly for legacy system.

742
0:43:07.840 --> 0:43:12.840
But my prediction is that next year, we will start to see more and more

743
0:43:12.840 --> 0:43:18.840
of a distro vendor or cloud company to ship with more and more Rust code.

744
0:43:18.840 --> 0:43:22.840
Probably, I'm pretty sure that some Linux distro are going to ship in the cloud

745
0:43:22.840 --> 0:43:27.840
our implementation in the next few years.

746
0:43:27.840 --> 0:43:28.840
So, thanks for your time.

747
0:43:28.840 --> 0:43:30.840
I'd like to remind that it is not a muchier project,

748
0:43:30.840 --> 0:43:32.840
so please don't say muchier works on that.

749
0:43:32.840 --> 0:43:37.840
It will make my life easier, and I think we have a few minutes for questions.

750
0:43:37.840 --> 0:43:44.840
Thank you.

751
0:43:44.840 --> 0:44:11.840
I think you need in the badge.

752
0:44:11.840 --> 0:44:15.840
Oh, it's recorded.

753
0:44:15.840 --> 0:44:16.840
I'll say it.

754
0:44:16.840 --> 0:44:19.840
It's an issue for every Rust project currently.

755
0:44:19.840 --> 0:44:24.840
The fact that cargo is amazing at updating dependency is many of the Rust project

756
0:44:24.840 --> 0:44:29.840
are subject to supply chain attack legacy, and we are no exception.

757
0:44:29.840 --> 0:44:31.840
So, I can do product placement.

758
0:44:31.840 --> 0:44:36.840
If you have a tool called cargo vet, which mitigates that stuff,

759
0:44:36.840 --> 0:44:42.840
but it's too complex to deploy for a hobby like this one.

760
0:44:42.840 --> 0:44:47.840
So, yeah, you can do supply chain attack in our project,

761
0:44:47.840 --> 0:44:52.840
but we don't merge the dependable pull requests immediately.

762
0:44:52.840 --> 0:45:02.840
So, we are trying to mitigate that by taking our time.

763
0:45:02.840 --> 0:45:05.840
Any other questions?

764
0:45:05.840 --> 0:45:07.840
Yeah, over there.

765
0:45:07.840 --> 0:45:12.840
Yeah, please.

766
0:45:12.840 --> 0:45:15.840
The cut size compared to busy box, I don't know.

767
0:45:15.840 --> 0:45:17.840
With GNU, it's similar.

768
0:45:17.840 --> 0:45:20.840
So, you have different way to compile the project.

769
0:45:20.840 --> 0:45:23.840
So, the trick that I'm using in Debian for the package is that I'm building

770
0:45:23.840 --> 0:45:26.840
a single binary and I'm doing sim link.

771
0:45:26.840 --> 0:45:31.840
So, if you do a sim link from Cori Tilt to CP or to NS,

772
0:45:31.840 --> 0:45:34.840
the binary is going to understand that you are calling CP.

773
0:45:34.840 --> 0:45:38.840
So, the size is comparable to the GNU implementation in that case.

774
0:45:38.840 --> 0:45:40.840
But because of the nature of first,

775
0:45:40.840 --> 0:45:46.840
the binaries are bigger than the rest.

776
0:45:46.840 --> 0:45:50.840
Another question?

777
0:45:50.840 --> 0:45:59.840
Yeah, it's a question that comes back often.

778
0:45:59.840 --> 0:46:05.840
Do you compute the code coverage only on the passing tests or all of them?

779
0:46:05.840 --> 0:46:09.840
We run code coverage on everything, including the GNU test suite.

780
0:46:09.840 --> 0:46:11.840
So, it takes a lot of time.

781
0:46:11.840 --> 0:46:13.840
So, the tests that are failing?

782
0:46:13.840 --> 0:46:23.840
Yeah, we test everything.

783
0:46:23.840 --> 0:46:27.840
Did you find any bugs in the original GNU implementation

784
0:46:27.840 --> 0:46:29.840
when doing the re-implementation?

785
0:46:29.840 --> 0:46:33.840
Yeah, we have a contributor who found two or three bugs

786
0:46:33.840 --> 0:46:37.840
in the upstream implementation and they have been fixed up here.

787
0:46:37.840 --> 0:46:45.840
We bought it and fixed up soon.

788
0:46:45.840 --> 0:46:49.840
Have you had any need to use unsafe?

789
0:46:49.840 --> 0:46:52.840
And if yes, can you give a few examples in which kind of areas?

790
0:46:52.840 --> 0:46:56.840
We have some unsafe when we are calling the libc,

791
0:46:56.840 --> 0:46:58.840
some function of the libc, we are calling it directly,

792
0:46:58.840 --> 0:47:00.840
so we have some unsafe.

793
0:47:00.840 --> 0:47:02.840
Do you agree?

794
0:47:02.840 --> 0:47:04.840
Yeah.

795
0:47:04.840 --> 0:47:08.840
Basically, your name is false and no one is equal.

796
0:47:08.840 --> 0:47:10.840
Yeah.

797
0:47:10.840 --> 0:47:12.840
Dert, I'm going to repeat what he said.

798
0:47:12.840 --> 0:47:16.840
He said that it's for the libc.

799
0:47:16.840 --> 0:47:24.840
It's mostly, yeah, native code.

800
0:47:24.840 --> 0:47:27.840
Have you looked at code complexity metrics like

801
0:47:27.840 --> 0:47:29.840
cyclomatic complexity?

802
0:47:29.840 --> 0:47:31.840
Because I guess with the error handling,

803
0:47:31.840 --> 0:47:34.840
the memory management and clean-up in C is often really messy

804
0:47:34.840 --> 0:47:37.840
and that could be a huge boon in maintainability.

805
0:47:37.840 --> 0:47:41.840
Yeah, we have some codes that clearly need refactoring.

806
0:47:41.840 --> 0:47:45.840
So, for example, in LS, we have to work around the limitation of CLAP

807
0:47:45.840 --> 0:47:49.840
and the code complexity here is getting more and more complex.

808
0:47:49.840 --> 0:47:50.840
Yeah.

809
0:47:50.840 --> 0:47:53.840
That project needs some policies of our implementation

810
0:47:53.840 --> 0:47:55.840
and refactoring to decrease it.

811
0:47:55.840 --> 0:47:58.840
But the code is usually pretty easy to understand.

812
0:47:58.840 --> 0:48:04.840
Thanks.

813
0:48:04.840 --> 0:48:05.840
I think we're out of time.

814
0:48:05.840 --> 0:48:06.840
Yeah.

815
0:48:06.840 --> 0:48:07.840
Thank you all.

816
0:48:07.840 --> 0:48:08.840
Don't hesitate to contribute.

817
0:48:08.840 --> 0:48:26.840
I can find my email easily.


WEBVTT

00:00.000 --> 00:15.520
I'm talking about Fedora, which is Fedora for Apple Silicon.

00:15.520 --> 00:21.920
It's funny, I was in the bar the other night talking with David and Neil about doing this

00:21.920 --> 00:24.880
presentation.

00:24.880 --> 00:32.560
And I said, yeah, on that Mac mini, on about one in ten displays, it just doesn't work.

00:32.560 --> 00:40.200
So there is a small chance that I arrive on the day and HDMI output won't work.

00:40.200 --> 00:43.560
So yeah, we hit that issue.

00:43.560 --> 00:50.280
So I was hoping to do the whole demo directly on the Mac mini, but we had to go to plan

00:50.280 --> 00:52.400
B on my Chromebook here.

00:52.400 --> 00:57.400
But I still got short and will still do all the Q&A.

00:57.400 --> 01:01.480
I was hoping to show you a couple of things live.

01:01.480 --> 01:06.760
But yeah, we'll have to show that.

01:06.760 --> 01:11.280
So yeah, I'm Eric Horton.

01:11.280 --> 01:12.640
I work for Red Hat.

01:12.640 --> 01:14.840
I work in the automotive world.

01:14.840 --> 01:21.640
So that's what I kind of work on.

01:21.640 --> 01:27.400
I had a competition, but I have to shelve that, because it required the hardware.

01:27.400 --> 01:28.800
We'll see.

01:28.800 --> 01:30.800
A free time at the end.

01:30.800 --> 01:34.760
I might try and plug in the HDMI one more time.

01:34.760 --> 01:41.920
So why do we care about Fedora and Apple Silicon?

01:41.920 --> 01:46.240
So Apple released new Ambus, Apple Silicon devices.

01:46.240 --> 01:50.520
I think it was late 2020.

01:50.520 --> 01:56.120
And there's actually a shortage of well-abstreamed devices.

01:56.120 --> 02:01.080
What's cool about this one is the firmware is unlocked out of the box.

02:01.080 --> 02:08.200
So it's actually a feature of the Mac devices to run alternative operating systems.

02:08.200 --> 02:12.760
And virtualization is also unlocked on the firmware as well.

02:12.760 --> 02:15.000
That's actually a feature I find quite handy.

02:15.000 --> 02:19.520
I run KVMs a lot on this Mac mini.

02:19.520 --> 02:22.640
Yeah, and it's blazingly fast.

02:22.640 --> 02:29.720
And I swear that will be known for selling marketing their hardware as premium, which

02:29.720 --> 02:30.720
it is.

02:30.720 --> 02:38.720
But it's also great value, great bang for book in terms of performance.

02:38.720 --> 02:39.720
So why do I care?

02:39.720 --> 02:41.720
What did I get involved?

02:41.720 --> 02:46.160
Repeating, like I said earlier, I work in the Red Hat automotive org.

02:46.160 --> 02:49.440
Many automotive boards are Ambus.

02:49.440 --> 02:54.640
So I end up doing quite a bit of work that requires some kind of an AMR environment.

02:54.640 --> 02:59.360
And working on the Mac mini allows me to iterate quickly.

02:59.360 --> 03:04.800
And there's a bonus I learned more about AMR hardware and software implementations and

03:04.800 --> 03:11.400
things like kernel space rust and that kind of thing.

03:11.400 --> 03:12.680
So these were benchmarks.

03:12.680 --> 03:14.400
I did these well over a year ago.

03:14.400 --> 03:15.400
I was working a bit.

03:15.400 --> 03:19.280
I know it might be quite small and difficult to see.

03:19.280 --> 03:22.920
I was working with LibCamera at the time.

03:22.920 --> 03:30.840
And I just used it as a program to profile different pieces of hardware I had around

03:30.840 --> 03:32.880
the house.

03:32.880 --> 03:38.600
So it's basically minutes it takes to build LibCamera, or seconds even.

03:38.600 --> 03:45.480
So on the very left is Raspberry Pi 4.

03:45.480 --> 03:46.480
The green one is interesting.

03:46.480 --> 03:47.480
That was my phone.

03:47.480 --> 03:49.760
It was like a mid-range Motorola.

03:49.760 --> 03:55.280
I like a Fedora-ish P-Rooch, it's called, the piece of software.

03:55.280 --> 03:59.800
So I like a Fedora container running on my phone.

03:59.800 --> 04:01.360
So that's the green one.

04:01.360 --> 04:04.600
The yellow one is also a Fedora container running on my phone.

04:04.600 --> 04:11.360
Yellow is when my phone is rooted so I can get an extra little bit of performance out

04:11.360 --> 04:15.800
of that that was using Shirot rather than PiRooch.

04:15.800 --> 04:23.720
And the yellow is my company-issued laptop, which is like an Intel i7.

04:23.720 --> 04:30.040
And the small blue bar at the end is how long it was taking me to build LibCamera on my

04:30.040 --> 04:32.160
Mac Mini.

04:32.160 --> 04:39.400
And funnily enough, the orange bar, my company-issued laptop is twice the cost of the Mac Mini.

04:39.400 --> 04:48.920
So that's kind of going back to there's great bang for buck with the Apple device.

04:48.920 --> 04:54.280
So it makes the project great.

04:54.280 --> 05:00.600
We've really great upstream folk and we collaborate with these quite frequently.

05:00.600 --> 05:12.680
So we've Hector, Alyssa, Asahilina, Dugal, Sven, Mac, and there's many more as well.

05:12.680 --> 05:15.480
So we've great downstream folk as well.

05:15.480 --> 05:18.480
Neil and David, they are actually here.

05:18.480 --> 05:21.240
They're big in the whole Fedora ecosystem.

05:21.240 --> 05:22.240
They're big contributors.

05:22.240 --> 05:26.200
And Michelle, Lou Fliddy is another guy.

05:26.200 --> 05:31.960
She lives out quite a bit and there's many more.

05:31.960 --> 05:38.240
So this is another thing that I really love about the Asahil community in general.

05:38.240 --> 05:41.320
They have this kind of upstream everything aptitude.

05:41.320 --> 05:49.120
So like absolutely everything we send to the various upstream projects, if at all possible.

05:49.120 --> 05:50.120
And that's one thing.

05:50.120 --> 05:53.360
There's various certifications around ARM devices.

05:53.360 --> 05:58.480
Like I listed just three there I could find.

05:58.480 --> 06:04.480
One is work through a Chromebook and one is the Red Hat Enterprise Linux certification

06:04.480 --> 06:07.120
and the third is system ready.

06:07.120 --> 06:13.440
One thing that's in the spirit of all those certifications is upstream everything.

06:13.440 --> 06:21.160
And yeah, that's one of the kind of core values we have.

06:21.160 --> 06:27.640
And that's actually not as common as you would think with ARM devices.

06:27.640 --> 06:38.040
It's almost an exception when absolutely everything gets upstreamed.

06:38.040 --> 06:42.320
So in Fedora Asahil, this is a preferred workflow.

06:42.320 --> 06:47.680
So most of the time things will hit upstream first.

06:47.680 --> 06:55.680
And then Fedora will package that up and then the Fedora Asahil remix will use those packages.

06:55.680 --> 06:58.720
So that's the common case.

06:58.720 --> 07:06.920
We also use this workflow because sometimes submitting things upstream, it can take a

07:06.920 --> 07:09.880
bit of time.

07:09.880 --> 07:16.000
So that's a lot of our work as well in the Fedora Asahil community.

07:16.000 --> 07:22.040
So sometimes work will be submitted upstream but it might not be accepted yet.

07:22.040 --> 07:28.920
So in Fedora Asahil we'll take those patches and we'll fork whatever packages we need to

07:28.920 --> 07:35.040
make sure you have the best experience possible while things are still being upstreamed.

07:35.040 --> 07:40.280
And eventually that will make its way to Fedora when it gets upstreamed.

07:40.280 --> 07:50.480
And yeah, I'm going to explain that further in the next few slides.

07:50.480 --> 07:55.080
So yeah, absolutely since this is a success when it comes to Fedora Asahil.

07:55.080 --> 08:00.360
So ultimately we'll be planning getting as much as possible into the main Fedora repository.

08:00.360 --> 08:08.720
So every time a forked package is absolutely right, I would regard that as a success.

08:08.720 --> 08:13.920
So what do we fork?

08:13.920 --> 08:17.720
We fork U-boost.

08:17.720 --> 08:24.160
That's kind of one I'm kind of expecting could be forked almost forever because we have some

08:24.160 --> 08:28.600
Apple Silicon specific stuff in there.

08:28.600 --> 08:31.800
Sorry, yeah.

08:31.800 --> 08:40.640
I knocked off my mic.

08:40.640 --> 08:50.200
Two seconds.

08:50.200 --> 08:52.200
Okay.

08:52.200 --> 08:54.880
So we have U-boost.

08:54.880 --> 08:58.880
We have a package we call kernel which is our own kernel.

08:58.880 --> 09:01.960
It's separate to the normal Fedora kernel.

09:01.960 --> 09:04.680
We have another kernel we call kernel edge.

09:04.680 --> 09:07.060
We fork mesa.

09:07.060 --> 09:15.720
We have this kind of firmware package that Hector and I made called M1N1 and there's

09:15.720 --> 09:28.120
a handful of others.

09:28.120 --> 09:39.200
I think we have some flags, build time flags and we don't have a way of changing how it

09:39.200 --> 09:43.280
behaves at runtime yet.

09:43.280 --> 09:44.280
I could be wrong.

09:44.280 --> 09:45.360
It may not remain forked.

09:45.360 --> 09:54.800
The other thing about Fedora as well, we generally try and avoid maintaining firmware and focus

09:54.800 --> 09:57.240
on the operating system side.

09:57.240 --> 10:05.840
So if you notice our Fedora images, they generally don't get packaged with firmware.

10:05.840 --> 10:12.160
We try and avoid getting into maintaining firmware because, yeah, I can scale quite

10:12.160 --> 10:21.920
badly at the lower level pieces of software.

10:21.920 --> 10:28.760
So the Fedora kernel, it has Apple Silicon support.

10:28.760 --> 10:35.960
We continually test and enable more kernel configs as support gets profited upstream.

10:35.960 --> 10:40.580
It's built with 4K page size.

10:40.580 --> 10:42.760
So that's something interesting in Fedora.

10:42.760 --> 10:49.800
In Fedora we try and just build one kernel per CPU architecture.

10:49.800 --> 10:57.480
So at least the way things currently are, we don't build a kernel for 4K, for 16K, 64K

10:57.480 --> 11:08.220
because, yeah, against scale, we just, it's easier to maintain one kernel per CPU architecture.

11:08.220 --> 11:15.960
So something interesting about this kernel is not everything at the moment is upstreamed

11:15.960 --> 11:20.280
with support for 4K page size.

11:20.280 --> 11:24.880
That's something that's continually in progress and the upstream folks are working on.

11:24.880 --> 11:29.480
But hardware is designed to work with 16K page size.

11:29.480 --> 11:32.200
So we'll get there.

11:32.200 --> 11:38.420
Getting everything working with 16K page size upstream is definitely the priority first.

11:38.420 --> 11:44.400
The other thing about 4K page size is you take a performance hit because the hardware

11:44.400 --> 11:47.560
is kind of tuned for 16K page size.

11:47.560 --> 11:53.080
So that's something to bear in mind.

11:53.080 --> 12:00.120
So yeah, the Fedora Asahi SIG then maintains two kernels and this is the first one.

12:00.120 --> 12:03.160
I called it the Fedora Asahi kernel here.

12:03.160 --> 12:11.040
So it uses the Fedora kernel as a base and we didn't add extra yet to be upstreamed

12:11.040 --> 12:14.840
patches from like the Asahi Linux repos.

12:14.840 --> 12:18.600
We enable even more kernel configs.

12:18.600 --> 12:30.760
We build with 16K page size and it uses simple DRM which is software rendered graphics and

12:30.760 --> 12:32.240
that's actually surprisingly fast.

12:32.240 --> 12:37.640
I'm always amazed at how fast simple DRM is on hardware like this.

12:37.640 --> 12:43.760
So if you're interested in Fedora Asahi from a user perspective, I would be recommending

12:43.760 --> 12:49.280
this kernel or the next kernel I'm going to talk about because just the user experience

12:49.280 --> 12:50.720
is a bit better.

12:50.720 --> 12:58.220
More things work basically.

12:58.220 --> 13:00.780
So this is another kernel we maintain.

13:00.780 --> 13:05.400
We create this one not so long ago, just before Christmas.

13:05.400 --> 13:12.640
So this uses the Fedora, the last kernel I talked about basically as a base and we add

13:12.640 --> 13:18.980
even more patches and we enable even more kernel configs.

13:18.980 --> 13:22.680
So it uses accelerated graphics.

13:22.680 --> 13:28.120
What I had intended to do for this talk is that we would have a little computation of

13:28.120 --> 13:33.640
two people playing super dox cache just to show off the accelerated graphics.

13:33.640 --> 13:37.800
Yeah, HDMI issues.

13:37.800 --> 13:43.120
So I found this kernel interesting to work with because it's built with the Rust for

13:43.120 --> 13:54.520
Linux kernel space port and yet the DSI GPU driver is one of the first fully fledged Rust

13:54.520 --> 13:56.720
for Linux drivers and it's pretty neat.

13:56.720 --> 13:59.040
It works well.

13:59.040 --> 14:09.920
And another difference is we build this kernel with Clang LLVM because that's the basically

14:09.920 --> 14:12.520
GCC Rust support is a little bit behind.

14:12.520 --> 14:18.720
So at a minimum you have to build a Rust code with Clang LLVM and I remember playing around

14:18.720 --> 14:24.120
with that package at the time and at that point it was just easy to build the whole

14:24.120 --> 14:28.280
code base with Clang LLVM including all the C code.

14:28.280 --> 14:33.160
But I think it is possible if you kind of want the hybrid build to build the C code

14:33.160 --> 14:41.440
with GCC and the Rust code with Clang LLVM but we switched everything to Clang LLVM at

14:41.440 --> 14:44.720
least temporarily because it's easier.

14:44.720 --> 14:55.280
And we also use a forked mesa package so that works with the Rust GPU driver.

14:55.280 --> 14:59.600
So what's our official release date?

14:59.600 --> 15:02.320
David, he's here somewhere.

15:02.320 --> 15:05.040
I was talking to him before the talk.

15:05.040 --> 15:12.840
He's presenting this stuff at scale in March in about a month's time.

15:12.840 --> 15:20.400
I hope he has better luck with his CMI output and that kind of thing than me.

15:20.400 --> 15:26.760
So yeah, David is handling our release so we think we should have an official release

15:26.760 --> 15:32.360
output for that.

15:32.360 --> 15:39.760
So oh yeah, so most of the people working on this are kind of doing it part time except

15:39.760 --> 15:40.760
for the upstream folk.

15:40.760 --> 15:42.760
They're more or less.

15:42.760 --> 15:44.560
Some of them it's their full time job.

15:44.560 --> 15:51.680
So we're always welcome and open to have new contributors so if you're interested, reach

15:51.680 --> 15:55.040
out to us on Matrix.

15:55.040 --> 15:56.640
Apple is actually pretty impressive.

15:56.640 --> 16:01.680
They seem to be releasing new hardware pretty frequently.

16:01.680 --> 16:05.760
And every time they release new hardware, there's new things to do because every piece

16:05.760 --> 16:10.200
of hardware has its own nuances.

16:10.200 --> 16:14.160
Like this is something we were talking about in the last month or two.

16:14.160 --> 16:17.920
I don't actually have an M2 device so I can't test it personally.

16:17.920 --> 16:27.400
But WebKit is basically broken because there's this thing, it's a new feature of ARM.

16:27.400 --> 16:33.800
It came in ARM version 8.5 and it's called Branch Target Identification.

16:33.800 --> 16:42.320
And basically someone has to write the code in WebKit to say if BTI do this but nobody

16:42.320 --> 16:44.720
has done it yet.

16:44.720 --> 16:45.720
Which was interesting.

16:45.720 --> 16:53.480
I remember yesterday at an M pair talk, somebody asked a question, can new ARM versions break

16:53.480 --> 16:55.600
user space?

16:55.600 --> 17:02.020
And I didn't want to answer because I wasn't speaking but yes, they can sometimes because

17:02.020 --> 17:09.360
this is one of those cases.

17:09.360 --> 17:10.360
And that's kind of it.

17:10.360 --> 17:19.000
I have a couple of links there to our matrix, our wiki, our project tracker, the upstream,

17:19.000 --> 17:23.480
the Linux page and diskit and copper.

17:23.480 --> 17:28.280
You'll find some of our RPMs in there if you're interested.

17:28.280 --> 17:33.080
Yes, so that's kind of it.

17:33.080 --> 17:36.200
I'll take Q&A now if anyone has questions and answers.

17:36.200 --> 17:41.200
And if we don't and we have a little bit of time, I might plug in the HDMI cable one

17:41.200 --> 17:50.560
more time to see if we get very lucky.

17:50.560 --> 17:52.560
So anybody has questions?

17:52.560 --> 17:56.560
We have one here.

17:56.560 --> 17:58.560
Hello.

17:58.560 --> 18:04.600
At the beginning you mentioned that Apple Silicon is well upstreamed on ARM device.

18:04.600 --> 18:07.680
What do you mean by being well upstreamed?

18:07.680 --> 18:09.920
Does it have work put back into it?

18:09.920 --> 18:11.160
Could you repeat the question?

18:11.160 --> 18:15.560
In the first slide you said that Apple Silicon is a well upstreamed ARM device, which is

18:15.560 --> 18:16.760
why you work on it.

18:16.760 --> 18:19.080
What does that mean exactly?

18:19.080 --> 18:23.880
So that's all thanks to the upstreamed fork, the Saahe Linux fork.

18:23.880 --> 18:32.400
So Hector Martin is the leader of that and he really believes in upstreaming.

18:32.400 --> 18:37.280
So he tries his best.

18:37.280 --> 18:40.640
Sometimes certain piece of code, he does get difficulty.

18:40.640 --> 18:41.640
That's normal.

18:41.640 --> 18:45.480
It spends so many subsystems and so many different projects.

18:45.480 --> 18:47.840
So the world is upstreamed, absolutely everything.

18:47.840 --> 18:56.480
Amaro pointed that, oh, there are plenty of ARM SOCs that publish their code.

18:56.480 --> 19:01.880
So they'll put a git hub repo out and they'll publish the code there.

19:01.880 --> 19:08.840
But they'll never, often they don't go to final hurdle and get it into Linus's tree.

19:08.840 --> 19:16.440
So everyone's out of the box with Fedora, Debian, Ubuntu, all the various distributions.

19:16.440 --> 19:21.400
And that's one of the things I love about the Saahe guys because they go that extra

19:21.400 --> 19:23.440
mile to try and upstream everything.

19:23.440 --> 19:27.880
So that's what I meant by that.

19:27.880 --> 19:37.360
Hi, you mentioned that U-Boot, you think that might not be upstreamed.

19:37.360 --> 19:43.880
Would it make sense to have a separate project to create a UEFI layer on top of that to harmonize

19:43.880 --> 19:45.440
Fedora in that way?

19:45.440 --> 19:46.440
Yeah.

19:46.440 --> 19:53.920
I'll be honest, I did not work on U-Boot stuff myself.

19:53.920 --> 19:57.440
I think Hector did most of that.

19:57.440 --> 20:03.240
He calls it EFI like and not exactly EFI.

20:03.240 --> 20:07.760
So that might be the reason why it might remain a fork.

20:07.760 --> 20:13.520
To be honest, I work more with the downstream folks, so you'd probably have to talk to the

20:13.520 --> 20:16.160
upstream of Saahe guys about that.

20:16.160 --> 20:20.680
I think it was Hector working on U-Boot stuff, but I could be wrong.

20:20.680 --> 20:23.680
So yeah.

20:23.680 --> 20:35.960
I'll try and plug in the HDMI.

20:35.960 --> 20:48.160
Hi, thanks for the talk.

20:48.160 --> 20:53.960
I would like to know how it is to use a new programming language which is Rust in the

20:53.960 --> 20:55.960
kernel and in Meza.

20:55.960 --> 21:00.240
Is it going to be supported upstream?

21:00.240 --> 21:01.240
I think it's amazing.

21:01.240 --> 21:05.440
I'm not going to lie to you and say I've written thousands and thousands of lines of

21:05.440 --> 21:10.520
Rust because I haven't.

21:10.520 --> 21:18.240
But building it is easy as long as you're applying LLVM at the moment.

21:18.240 --> 21:23.760
And I believe GCC started to...

21:23.760 --> 21:29.840
They released Rust support recently, so I expect GCC to get there as well eventually.

21:29.840 --> 21:32.640
So building it isn't too bad now.

21:32.640 --> 21:38.240
Using it, it works solidly.

21:38.240 --> 21:42.560
I've never had any crashes or anything.

21:42.560 --> 21:46.120
Hector and all those upstream guys swear by it.

21:46.120 --> 21:55.480
They reckon they got that GPU driver written twice as quickly just by using Rust and by

21:55.480 --> 22:00.640
not having to handle memory management manually always and all these things and to handle

22:00.640 --> 22:02.880
trade races and stuff.

22:02.880 --> 22:08.640
I think another reason they chose Rust is I think when they're Rust engineering the

22:08.640 --> 22:13.400
Apple GPU driver, I think it was written in C++.

22:13.400 --> 22:18.240
So I think it made it a little bit easier for them because Rust has some of the features

22:18.240 --> 22:21.080
of C++.

22:21.080 --> 22:27.800
But they swear by it and they're the guys that actually write the Rust kernel patches,

22:27.800 --> 22:28.800
not me.

22:28.800 --> 22:47.120
Do you see a need or a demand for or use for Apple Silicon to run Linux servers in real

22:47.120 --> 22:50.880
scenarios in companies and this kind of stuff?

22:50.880 --> 22:52.840
Like in Enterprise?

22:52.840 --> 22:53.840
Yes.

22:53.840 --> 23:03.080
Enterprise is tricky because we're very much a community supported effort and we don't

23:03.080 --> 23:04.080
have any...

23:04.080 --> 23:11.200
Apple don't really have an issue with us doing this, but we also don't have an official relationship

23:11.200 --> 23:15.880
with Apple.

23:15.880 --> 23:23.680
So it would be hard to deploy Linux and Apple Silicon in a data center when you don't have

23:23.680 --> 23:28.640
support, official support from the hardware manufacturer.

23:28.640 --> 23:37.520
So at the moment I don't see that happening unless Apple all of a sudden are like, yeah,

23:37.520 --> 23:42.240
yeah, we'll support that configuration like in an Enterprise environment, yeah, could

23:42.240 --> 23:56.200
happen.

23:56.200 --> 24:05.760
Where did the HDMI cable go?

24:05.760 --> 24:09.760
Just gonna plug it in there.

24:09.760 --> 24:12.760
Sorry, guys.

24:12.760 --> 24:15.760
Hi.

24:15.760 --> 24:22.480
Sorry, I was just gonna wonder, you mentioned that for U-Boot you weren't gonna push things

24:22.480 --> 24:24.600
upstream from your fork.

24:24.600 --> 24:26.200
Is that a licensing issue?

24:26.200 --> 24:28.320
Like is it a GPL conflict or something like that?

24:28.320 --> 24:31.240
Or what's the problem?

24:31.240 --> 24:33.120
Could you repeat the question a little bit louder?

24:33.120 --> 24:37.760
I think earlier you said that for U-Boot you'd be maintaining a fork.

24:37.760 --> 24:38.760
Yeah.

24:38.760 --> 24:40.360
Is that a licensing issue?

24:40.360 --> 24:47.240
Is there something you can't commit back to U-Boot that they wouldn't accept?

24:47.240 --> 24:53.360
Yeah, I didn't, again, I didn't write the U-Boot patches.

24:53.360 --> 24:57.080
I'm pretty sure that was Hector.

24:57.080 --> 25:02.920
I think it's because it's written in a non-standard way.

25:02.920 --> 25:08.720
He often calls it UAFI-like and I think there's certain hacks he had to do to get it working.

25:08.720 --> 25:13.920
I'm working on Apple Silicon that the maintainers may not accept.

25:13.920 --> 25:22.320
But I'll repeat, does upstream cut, does the upstream Asahi community, they really care

25:22.320 --> 25:28.920
about upstreaming into the real projects, be it Linux, kernel, Meza, et cetera?

25:28.920 --> 25:30.280
So far all possible.

25:30.280 --> 25:32.920
I'm sure they will, you know.

25:32.920 --> 25:37.760
Sometimes there's just hacks required because it's, yeah, it's built around macOS at the

25:37.760 --> 25:56.280
end of the day.

25:56.280 --> 25:57.280
Some questions?

25:57.280 --> 25:58.280
No.

25:58.280 --> 26:08.560
I'll be around for today.

26:08.560 --> 26:13.360
If any of you see a monitor around the campus or whatever and you want to see it in action,

26:13.360 --> 26:18.080
we can hook it up and try and I'm open to that.

26:18.080 --> 26:23.080
So yeah, it's about, yeah, I've seen this happen before.

26:23.080 --> 26:29.080
90% of monitors work, so if you find a random monitor, yeah, we can do it.

26:29.080 --> 26:30.080
Okay.

26:30.080 --> 26:31.080
Okay.

26:31.080 --> 26:34.000
So, thank you Eric.

26:34.000 --> 26:35.000
Thanks guys.

26:35.000 --> 26:36.000
Thanks very much.

26:36.000 --> 26:53.600
Julius.

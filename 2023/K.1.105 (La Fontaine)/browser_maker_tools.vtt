WEBVTT

00:00.000 --> 00:09.720
I've been involved with, oh, I'm Stuart Allen here.

00:09.720 --> 00:12.800
You can reach me that email address.

00:12.800 --> 00:15.600
I've been involved with open source since the early 90s.

00:15.600 --> 00:21.320
I dabbled with Linux kernel development, but mostly my projects have been standalone applications

00:21.320 --> 00:22.320
and libraries.

00:22.320 --> 00:27.240
I've been the technical founder of several companies over the last 30 years, and I've

00:27.240 --> 00:31.760
managed to thread open source work through those companies and got them to release pretty

00:31.760 --> 00:36.520
significant packages as open source internal works that have data processing libraries

00:36.520 --> 00:38.120
and things like that.

00:38.120 --> 00:44.480
And over the last 10 years, I've become increasingly enamored with the idea of not having to install

00:44.480 --> 00:48.280
software anymore, at least not on the desktop.

00:48.280 --> 00:52.080
So I'm going to walk you through a little bit of backstory for that.

00:52.080 --> 00:53.500
I don't like slides.

00:53.500 --> 00:57.720
So most of this will actually be a live demo of different applications, walking you through

00:57.720 --> 00:58.720
the functionality.

00:58.720 --> 01:01.280
But I will walk through just a little bit of the technology and the backstory for that

01:01.280 --> 01:02.840
first before sort of hopping into this.

01:02.840 --> 01:08.240
So it'll be a bit of a high wire act.

01:08.240 --> 01:09.240
Let's see here.

01:09.240 --> 01:10.240
Bullet points.

01:10.240 --> 01:11.240
Excellent.

01:11.240 --> 01:13.880
So this is just the rough order of things that I'm going to talk about.

01:13.880 --> 01:20.460
I'm not good at following directions, even when I've written them, maybe especially when

01:20.460 --> 01:21.660
I've written them.

01:21.660 --> 01:24.160
So I might wander a little bit, keep me on topic.

01:24.160 --> 01:28.160
If I do ramble a little bit or if I talk too quickly, definitely let me know.

01:28.160 --> 01:31.760
I'm prone to do that, which is why I didn't have any espresso today.

01:31.760 --> 01:35.040
I'm at least not told this is over.

01:35.040 --> 01:36.040
Okay.

01:36.040 --> 01:39.480
So on to a little bit of backstory.

01:39.480 --> 01:43.320
All right.

01:43.320 --> 01:48.160
Since we are talking about maker tools, I want to just have a slide about making, but

01:48.160 --> 01:49.320
not dwell on it too long.

01:49.320 --> 01:54.120
While I was organizing these slides, it always turns into something other than what you start

01:54.120 --> 01:55.120
out.

01:55.120 --> 01:57.960
I had an idea when I went to this, and then what came out of it was kind of different,

01:57.960 --> 02:03.440
but the exception of the demo parts.

02:03.440 --> 02:08.160
It occurred to me that the proliferation of really powerful and accessible tools has turned

02:08.160 --> 02:12.960
really everybody into makers, and this is historically anomalous, like we've had tools

02:12.960 --> 02:17.120
in the past, but the kind of tools we have now are really incredibly powerful.

02:17.120 --> 02:21.200
My starting point as a maker was in the 70s.

02:21.200 --> 02:27.320
My older brother purchased a TRS-80 Model 3 and abandoned it, so it became mine.

02:27.320 --> 02:30.840
From that point, I basically learned basic by typing in programs at a bike magazine,

02:30.840 --> 02:34.960
and so I was a touch typist by the time I was 10 because I was like this, trying to

02:34.960 --> 02:38.680
get programs in faster.

02:38.680 --> 02:44.120
That terminal window was for me a portal into an entirely new universe, and I can't really

02:44.120 --> 02:50.760
overstate how profound that was for me at the time as I learned to code, exploring the

02:50.760 --> 02:54.960
whole new world that you could just sort of create on the fly in front of you.

02:54.960 --> 02:59.120
You had to use your imagination a little more than you do today with 3D and all the great

02:59.120 --> 03:01.880
stuff we have and VR.

03:01.880 --> 03:03.600
Imagination can be a powerful thing.

03:03.600 --> 03:07.760
I've been giving away software since about the time that I learned to code.

03:07.760 --> 03:08.880
Back then, we called it Shareware.

03:08.880 --> 03:13.480
We used bulletin boards to get our creations out of their nest at an incredibly slow rate,

03:13.480 --> 03:18.280
but they would make it around the world based on the letters and even checks that I got

03:18.280 --> 03:19.920
from around the world at the time.

03:19.920 --> 03:24.000
Unfortunately, I was like 12 when I did this, and I made up a company, and I put it on the

03:24.000 --> 03:25.080
software title screen.

03:25.080 --> 03:26.680
People sent me checks written out to that company.

03:26.680 --> 03:29.880
They didn't exist, and I couldn't cash them.

03:29.880 --> 03:31.880
Lesson learned.

03:31.880 --> 03:33.360
Let's see.

03:33.360 --> 03:35.040
Back to the point.

03:35.040 --> 03:39.800
The difference in time now in history is that we are all makers to some extent from, I would

03:39.800 --> 03:43.840
say, the ridiculous to the profound, as I have here at a bullet point, and I would have

03:43.840 --> 03:47.440
said that before, chat GPT and mid-journey and all the other stuff that's out there today,

03:47.440 --> 03:50.800
but that just serves to underscore the point.

03:50.800 --> 03:56.360
We can all be creators in a way that has really not been possible before.

03:56.360 --> 03:58.960
I guess that's sort of a debate.

03:58.960 --> 03:59.960
Let's see.

03:59.960 --> 04:01.960
Did I miss a slide?

04:01.960 --> 04:03.480
No, I didn't.

04:03.480 --> 04:07.320
This is the first time I'm using this, and the first time I'm presenting in like five

04:07.320 --> 04:09.120
years.

04:09.120 --> 04:13.440
There with me as I sort of find my footing.

04:13.440 --> 04:15.000
I don't actually read the bullet points.

04:15.000 --> 04:17.540
The things that I say are just inspirational things.

04:17.540 --> 04:21.000
The things that I say are just related to that.

04:21.000 --> 04:22.700
Why are browsers called browsers?

04:22.700 --> 04:27.320
We haven't called PCs word processors since the 80s, and it has to do with where they

04:27.320 --> 04:28.320
came from.

04:28.320 --> 04:31.360
I'm sure that there are a lot of people here who could better tell the story and the history

04:31.360 --> 04:35.880
of browsers, how they came to be, and the motivations of the people behind them, but

04:35.880 --> 04:41.560
I think it's safe to say that the early creators were focused on document hyperlinking, sharing

04:41.560 --> 04:46.120
of knowledge, not progressive web apps, and the browser sandbox, which is where we are

04:46.120 --> 04:50.120
today, many decades later.

04:50.120 --> 04:53.560
The reason it took us as long to get here is because we did start off from a document-centric

04:53.560 --> 05:02.280
view of the web, and outside of mostly closed self-referential sites like Wikipedia, I don't

05:02.280 --> 05:06.280
think that hyperlinking really is what it was envisioned to be, right?

05:06.280 --> 05:08.840
Link rot is sort of the order of the day.

05:08.840 --> 05:15.480
What has been far more successful is the evolution of the browser as an application platform.

05:15.480 --> 05:24.080
Okay, so this brings us to sort of the inherent and natural tensions of today.

05:24.080 --> 05:30.040
I've grown skeptical of the way that we distribute software, the software itself, pretty weary

05:30.040 --> 05:33.840
of uninstalling, reinstalling, cleaning up and organizing.

05:33.840 --> 05:36.840
Do you really know what's in the software that you're installing on your machine, what

05:36.840 --> 05:43.480
it contains, and to what extent should you have to worry at all about this, right?

05:43.480 --> 05:46.240
Conntainerization on the server side has not really delivered us from complexity, which

05:46.240 --> 05:49.800
is totally a topic for another day, but since we are talking about containerization, it's

05:49.800 --> 05:55.880
related decades on, there's still really no cross-platform application development environment

05:55.880 --> 05:58.000
that works really at cross platforms.

05:58.000 --> 06:03.360
Like I spent way too much time in the Java world, mostly enterprise, but even their take

06:03.360 --> 06:07.040
on AWT and all the other things that came after that were pretty horrendous.

06:07.040 --> 06:11.000
The toolkits that you can use now and try to get cross platforms, it really don't work.

06:11.000 --> 06:17.120
The fact that mobile tablets touch new interfaces further complicate the ability to create applications

06:17.120 --> 06:21.320
that run in multiple different formats.

06:21.320 --> 06:27.640
The cloud has created more tensions around data privacy and questions of individual agency.

06:27.640 --> 06:31.360
So hopefully, let's see if I actually address this in the next slide.

06:31.360 --> 06:32.600
This brings us to progressive web apps.

06:32.600 --> 06:35.800
I don't know if you know, are you familiar with this term?

06:35.800 --> 06:42.040
You know, HTML5 and CSS, progressive web apps are basically web pages that can be self-standing

06:42.040 --> 06:43.280
at the end of the day.

06:43.280 --> 06:47.040
If you add a manifest and some service workers, they'll cast their own data, they can be installed

06:47.040 --> 06:49.920
and run offline.

06:49.920 --> 06:55.840
And so this is why, my background has been in high performance computing, embedded systems,

06:55.840 --> 06:59.640
but I've ended up on the other end of the spectrum building web-based applications.

06:59.640 --> 07:03.360
And so there are a lot of people who will question the performance of JavaScript, JavaScript

07:03.360 --> 07:04.360
in general, and the browser.

07:04.360 --> 07:07.040
I hope to address all of that.

07:07.040 --> 07:08.920
My coding arc, as I said, started with BASIC.

07:08.920 --> 07:15.040
It went through C, Tickle TK, Perl, other scripting languages, embedded systems, Java

07:15.040 --> 07:22.800
for a couple of decades, a detour through Verilog, doing FPGAs and some of these real-time

07:22.800 --> 07:29.720
systems for quantum computers, actually, before landing on JavaScript, oddly, while doing

07:29.720 --> 07:36.040
a prototype in sort of like the late, or around 2010.

07:36.040 --> 07:40.840
So over the years I've spent way too much time struggling with cross-platform and UI

07:40.840 --> 07:45.040
issues, and I think that open source progressive web apps are really a solution for a lot of

07:45.040 --> 07:46.360
these problems.

07:46.360 --> 07:58.600
So let's see, they are deemed trusted because they're running in the browser sandbox, and

07:58.600 --> 08:03.200
I lost my place on my, because I wrote way too many notes for this slide, and so give

08:03.200 --> 08:05.480
me a second while I find where I was.

08:05.480 --> 08:08.760
I'm going to skip this, and I'm going to spend more time on the demo.

08:08.760 --> 08:11.600
You don't want to hear me talk about this much more.

08:11.600 --> 08:17.640
I will say that Android and Chromium are friendlier platforms than iOS.

08:17.640 --> 08:22.520
Apple is not really keen on progressive web apps because they compete with the app store

08:22.520 --> 08:23.520
if you think about it.

08:23.520 --> 08:26.240
If you have really good progressive web apps that you can install off a web page and run

08:26.240 --> 08:30.320
them offline and have access to all the modern web standards like WebUSB and WebSerial and

08:30.320 --> 08:35.520
all these other things, you don't really need the app store and app frameworks as much.

08:35.520 --> 08:40.560
And so they've done a pretty good job of trying to hobble WebKit and enforce its use on iOS.

08:40.560 --> 08:44.480
You used to be able to run Chromium on iOS without WebKit, and you had all these things,

08:44.480 --> 08:47.680
and they're like, no, for security reasons, we can't do that.

08:47.680 --> 08:53.280
Well, not really the case, but it does serve the purpose of enforcing the app store hegemony.

08:53.280 --> 08:59.960
All right, so all the apps I'm presenting today are single page progressive web apps,

08:59.960 --> 09:04.680
installable, runnable offline, fully open source, MIT license, been around for quite

09:04.680 --> 09:08.520
a while in some cases.

09:08.520 --> 09:10.720
I'm not sure if I'm going to spend a ton of time on this.

09:10.720 --> 09:13.720
Just this is the pros and cons sort of as I see it.

09:13.720 --> 09:17.200
For me, faster development time is the thing that I care the most about.

09:17.200 --> 09:24.480
It is basically a page load away from testing new code, which is a subsecond process for

09:24.480 --> 09:26.720
the most part, as you'll see.

09:26.720 --> 09:32.520
I spent a year one day trying to add a small feature to an open source popular Python package,

09:32.520 --> 09:38.160
and the dev test restart process took three minutes, and I was like, this is insane.

09:38.160 --> 09:42.800
I basically modify code, I hit reload, and I'm testing it immediately.

09:42.800 --> 09:45.640
Developer tools, especially Chromium, are shockingly good.

09:45.640 --> 09:50.240
I'm just going to leave it at that for right now.

09:50.240 --> 09:55.840
All right, so this is setting up or teeing up the first application that I'm going to

09:55.840 --> 09:58.040
show you.

09:58.040 --> 10:02.400
So I promise I'm almost to the demo.

10:02.400 --> 10:09.200
A lot of my early making was in CNC, solid modeling, electronics, robotics, and things

10:09.200 --> 10:11.440
like that, autonomous vehicles.

10:11.440 --> 10:12.440
Sorry.

10:12.440 --> 10:17.880
Then around 2012, I started getting heavily involved in 3D printing.

10:17.880 --> 10:20.280
You'll see a couple of my early projects here.

10:20.280 --> 10:22.560
Slicers of the day were painfully slow.

10:22.560 --> 10:28.200
They produced output that was suboptimal for the things that I was trying to make.

10:28.200 --> 10:31.680
The strength that I wanted, and I was working on engineer materials, scaled sort of like

10:31.680 --> 10:38.320
Lego-like things like this, and I was like, I've been coding for a long time, how hard

10:38.320 --> 10:40.560
could it be to write a better slicer?

10:40.560 --> 10:44.600
I sort of like the genesis of a lot of things like, this doesn't annoy me, how hard could

10:44.600 --> 10:47.160
it be to make a better one?

10:47.160 --> 10:50.880
And so I started to build a prototype, and in a couple weeks I had basically a slicer

10:50.880 --> 10:55.240
that did everything that I needed to do, which was good for me, and that was ten years ago,

10:55.240 --> 10:57.840
so you know you're never done with these things.

10:57.840 --> 11:02.400
But just to give you an example, a single cube or block out of this with the slicers

11:02.400 --> 11:09.400
of the time would take 20 minutes to make one of those cubes, and I was doing scaled

11:09.400 --> 11:11.660
up large scale models.

11:11.660 --> 11:15.520
My slicer would produce the same part, the output, it would produce the same part in

11:15.520 --> 11:21.360
11 minutes, and the part used less material and was more mechanically, was stronger, would

11:21.360 --> 11:23.960
bear more load, and did a lot of things that I wanted.

11:23.960 --> 11:28.880
So it was already success, sort of like two weeks in, again, ten years ago.

11:28.880 --> 11:34.720
Slicers have come a long way since then, and I'm not sure how much I want to get into that.

11:34.720 --> 11:41.160
But again, let's see, I'm going to skip the next slide.

11:41.160 --> 11:44.040
Wait, this, then this.

11:44.040 --> 11:47.800
I have the dual screens set up, it's hard to know what's going on here because this

11:47.800 --> 11:50.840
is not totally in sync with that.

11:50.840 --> 11:54.120
Lots of timeline of some of the tools I've been building since then.

11:54.120 --> 11:59.520
Kermodo, which is a multi-modal application that runs in the browser, does FDM slicing

11:59.520 --> 12:05.480
for 3D printing, does CAM, does laser, does MSLA, which is for resin printing, does drag

12:05.480 --> 12:07.300
knives as part of the laser.

12:07.300 --> 12:11.200
So basically it's an all-in-one maker tool for most of the things that you would have

12:11.200 --> 12:15.600
commonly used in your maker space.

12:15.600 --> 12:20.560
Because I was doing a lot of large scale printing, I ended up designing and building my own printer

12:20.560 --> 12:24.480
from my printer farm, which is also open source, open design.

12:24.480 --> 12:30.560
I ended up writing my own Gcode Center for that and a whole bunch of other things.

12:30.560 --> 12:36.160
And then around 2015, when Onshape came along, so my CAD program of preference was SOLIDWORKS

12:36.160 --> 12:38.600
for 15 years.

12:38.600 --> 12:43.400
And those guys left and started Onshape, and just a little bit back story there, SOLIDWORKS

12:43.400 --> 12:48.080
promised since the very first day they came out that they would eventually have a Mac

12:48.080 --> 12:52.240
version of their software, and they didn't deliver on that after 15 years.

12:52.240 --> 12:57.400
So the guys left, created Onshape, and now it runs on a Mac in a browser and is better.

12:57.400 --> 13:01.280
So they opened an app store, and I was like, this is perfect.

13:01.280 --> 13:06.960
I could integrate Kermodo into Onshape accessor APIs and have a connection between CAD and

13:06.960 --> 13:09.040
CAM in one thing.

13:09.040 --> 13:14.200
And I did that, got accessor APIs, and integrated it in 24 hours.

13:14.200 --> 13:16.880
And the next day they called me and they're like, hey, that was awesome.

13:16.880 --> 13:20.000
We'd never seen anybody integrate in less than 30 days.

13:20.000 --> 13:23.080
Do you think you want to do a CAM package?

13:23.080 --> 13:29.520
And I was like, huh, 3D printing CAM, additive, subtractive.

13:29.520 --> 13:30.520
It's interesting.

13:30.520 --> 13:31.520
I did it for a long time.

13:31.520 --> 13:32.940
How hard could that be?

13:32.940 --> 13:36.080
So I ended up adding CAM in 2016.

13:36.080 --> 13:40.480
Again, had a prototype working in about two weeks, and here we are six years later, and

13:40.480 --> 13:44.880
we're really just getting into the interesting stuff on that package.

13:44.880 --> 13:49.320
So this is the interface for different modes of Kermodo.

13:49.320 --> 13:54.600
This is the GitHub repository, and I'm going to jump into a demo of this.

13:54.600 --> 13:56.600
Application is called Kermodo.

13:56.600 --> 14:00.320
Most people call it Kiri or K-M when you're typing it out.

14:00.320 --> 14:03.560
The back story on that is that when I was building this, I was building two applications

14:03.560 --> 14:04.920
at the same time.

14:04.920 --> 14:08.480
One was the slicer, and the other one was actually a modeling program.

14:08.480 --> 14:13.840
I wanted to do CAD modeling in the browser, and again, none of the other tools really

14:13.840 --> 14:14.840
existed at that time.

14:14.840 --> 14:19.680
This was 2012-ish, and I started to build a block modeler that was sort of a combination

14:19.680 --> 14:24.920
of Minecraft and blocks that you could skin things and connect them, and you could create

14:24.920 --> 14:26.040
blocks to create blocks.

14:26.040 --> 14:31.680
So I called it Metamodo, but this ended up taking all of my time, and I never got a chance

14:31.680 --> 14:32.680
to really finish that.

14:32.680 --> 14:33.920
I abandoned it.

14:33.920 --> 14:37.680
But now I have the tools to actually maybe go back and finish that if I have time, which

14:37.680 --> 14:40.680
is doubtful, it seems like.

14:40.680 --> 14:44.040
Okay.

14:44.040 --> 14:46.680
This is a really short and quick slide.

14:46.680 --> 14:50.280
All the different modes have the same workflow.

14:50.280 --> 14:57.520
Whether you're an FEMCAM laser or an MSLA, you're arranging it on a workspace.

14:57.520 --> 15:01.320
You're doing a slicing pass, and the slicing pass is the crude pass that basically just

15:01.320 --> 15:07.740
says I'm deconstructing geometry, I'm creating the rough paths that I'm going to be following,

15:07.740 --> 15:10.400
but I'm not doing things like path routing and other complex stuff.

15:10.400 --> 15:16.880
That's the prepare step, which basically takes the raw slices and then does path routing.

15:16.880 --> 15:21.640
And path routing in the 3D world for 3D printing and CNC and laser are all different, which

15:21.640 --> 15:23.000
is why it's abstracted out.

15:23.000 --> 15:26.560
And each of them has their own different views, and you can do different things and different

15:26.560 --> 15:27.560
views based on that.

15:27.560 --> 15:30.520
And then the last pass is basically exporting into your device target.

15:30.520 --> 15:37.040
I'm going to export G code or an SVG or, in the case of MSLA printers, massively large

15:37.040 --> 15:40.760
binaries for no reason.

15:40.760 --> 15:41.760
Yeah.

15:41.760 --> 15:44.320
All right.

15:44.320 --> 15:47.000
Let's see if there's something missed here, didn't miss here.

15:47.000 --> 15:48.000
All right.

15:48.000 --> 15:52.540
The code structure, again, this is all running in the browser, 100 percent JavaScript unless

15:52.540 --> 15:56.440
I say otherwise, and I will denote when that happens.

15:56.440 --> 16:00.720
There is a little bit of WebAssembly in there, and I plan to add more WebAssembly in the

16:00.720 --> 16:04.320
future to accelerate things.

16:04.320 --> 16:10.360
The major libraries I'm using are 3JS for the 3D, Clipper for polygon offsetting, and

16:10.360 --> 16:17.280
very recently I added Manifold for a 3D Boolean engine.

16:17.280 --> 16:21.760
It's not, it's used in one small place, but in the future I probably want to use it in

16:21.760 --> 16:22.760
other places.

16:22.760 --> 16:25.240
It's actually an incredible library.

16:25.240 --> 16:29.920
Storage on the right, these different blue boxes are different workers, different thread

16:29.920 --> 16:32.120
contexts, so you've got the UI context.

16:32.120 --> 16:35.720
And then all the work is done in workers to keep the UI responsive while all the heavy

16:35.720 --> 16:37.440
lifting is happening.

16:37.440 --> 16:41.400
There's no lateral communication between the workers.

16:41.400 --> 16:43.840
It's all hierarchical, top down.

16:43.840 --> 16:44.840
There's a reason for that.

16:44.840 --> 16:49.120
I don't know if I have enough time to actually really talk about it today, but denoted in

16:49.120 --> 16:54.680
each of the boxes are the languages that are being used, languages and or libraries.

16:54.680 --> 16:56.320
All right.

16:56.320 --> 16:59.500
And I'll just hope to remember to show you all that stuff in the demo.

16:59.500 --> 17:04.040
So I'm going to hop into the demo now, start with KIROMoto, show you different parts of

17:04.040 --> 17:13.960
that integration with Onshape, and now I have to switch up the UI interface or rather the

17:13.960 --> 17:14.960
this thing here.

17:14.960 --> 17:21.240
I have to go to mirror display so you guys can see what's happening.

17:21.240 --> 17:24.160
Great.

17:24.160 --> 17:34.520
Now I have to go find my browser.

17:34.520 --> 17:36.800
Let's just do it here.

17:36.800 --> 17:40.000
All right.

17:40.000 --> 17:44.240
This is not good.

17:44.240 --> 17:46.680
That's better.

17:46.680 --> 17:50.960
I am running this live on the network here, which I found to be spotty sometimes during

17:50.960 --> 17:52.200
the day today.

17:52.200 --> 17:54.760
Sometimes it's great, sometimes it gets a little bit of trouble.

17:54.760 --> 17:58.600
So right off the space you can launch these applications directly.

17:58.600 --> 18:01.760
Because it's running in the browser, actually hold on a second, and you get my, because

18:01.760 --> 18:05.320
I no longer have speaker notes, I'm going to use my phone.

18:05.320 --> 18:11.320
That way hopefully I won't forget major important things to discuss.

18:11.320 --> 18:16.880
All right.

18:16.880 --> 18:18.740
You can launch these things directly from here.

18:18.740 --> 18:23.360
This allows you to launch any of the major modes or just hop right into the application

18:23.360 --> 18:25.560
by clicking on it there.

18:25.560 --> 18:26.560
And there you go.

18:26.560 --> 18:28.680
The whole thing is loaded.

18:28.680 --> 18:34.720
The footprint of this is under four megabytes compressed and usually loads in under a second

18:34.720 --> 18:39.960
with a cold cache, maybe about two and a half seconds to load the entire application with

18:39.960 --> 18:42.780
all the different modes and everything else that's in it.

18:42.780 --> 18:47.500
So it's quite small in terms of footprint for the code.

18:47.500 --> 18:51.560
Other slicers, if you go to download and install them, are going to be in the two to 500 megabyte

18:51.560 --> 18:59.120
range for the similar code size, for similar functionality.

18:59.120 --> 19:03.320
And I'm going to bring up on the right-hand side really quickly just to show you what's

19:03.320 --> 19:07.960
going on under the hood.

19:07.960 --> 19:10.560
On the right-hand side, I don't know if you ever brought these up, you can look at the

19:10.560 --> 19:12.800
different threads or thread contexts that are down here.

19:12.800 --> 19:18.760
In the interface, you can turn on and off threading, which will start and stop the workers

19:18.760 --> 19:22.340
on the right-hand side, which sort of eludes to the previous slide that I showed you.

19:22.340 --> 19:25.920
So these are the distributed workers that will be doing all the heavy lifting sort of

19:25.920 --> 19:27.240
behind the scenes.

19:27.240 --> 19:33.200
And you can turn it on or off because some browsers, like Safari, don't allow you to

19:33.200 --> 19:34.400
do nested workers.

19:34.400 --> 19:36.280
They have to only work in a flat space.

19:36.280 --> 19:41.400
It's just one of the most of the web standards they refuse to support properly.

19:41.400 --> 19:45.840
And so it'll still work that way, it's just going to be slower.

19:45.840 --> 19:49.840
All right.

19:49.840 --> 19:53.400
Typical slicer interfaces.

19:53.400 --> 19:57.880
The original interface for Curimoto was very much like the slicers that you see today,

19:57.880 --> 20:04.240
Cura and Prusa and all that kind of stuff with essentially a tree of 1,000 parameters.

20:04.240 --> 20:09.280
This interface is slightly more opinionated and cut down.

20:09.280 --> 20:16.040
And so you'll see that you've got a lot fewer parameters for your model.

20:16.040 --> 20:17.960
But that's not really a problem.

20:17.960 --> 20:23.800
I would say that most parameters and most slicers are designed to help you deal with

20:23.800 --> 20:26.280
crappy 3D printers.

20:26.280 --> 20:31.760
And it makes sense because most 3D printers are crap, to be honest.

20:31.760 --> 20:35.120
And they don't have good software, or they don't have good hardware, or they don't have

20:35.120 --> 20:36.120
both.

20:36.120 --> 20:40.080
So there's a lot of stuff that you can fix in software with a crappy 3D printer, even

20:40.080 --> 20:42.000
if your firmware is junk.

20:42.000 --> 20:45.000
And a lot of printers actually are capable of running better firmware than they are delivered

20:45.000 --> 20:46.680
to you with.

20:46.680 --> 20:52.940
And it's just beyond most users to change out the firmware for a custom one and tune

20:52.940 --> 20:54.680
it the way it needs to be tuned.

20:54.680 --> 20:57.360
And so a lot of that stuff gets pushed into the slicer.

20:57.360 --> 21:01.680
And so the slicers will give you 1,000 parameters, 1,000 parameters, 900 of those work against

21:01.680 --> 21:02.680
each other.

21:02.680 --> 21:08.360
And so slicer profiles become a religion, where it's all about, oh, mine works perfectly.

21:08.360 --> 21:11.280
Tweak a few things, something breaks, and so you're like, you can't correlate why this

21:11.280 --> 21:14.080
thing is breaking this other thing.

21:14.080 --> 21:16.040
Because this whole product is just me.

21:16.040 --> 21:21.040
I'm forced to be basically really brutal about what is in and what is out.

21:21.040 --> 21:24.480
And I'm doing heuristics for 99% of the stuff that's out there.

21:24.480 --> 21:27.840
Like it's going to work for most cases.

21:27.840 --> 21:33.240
And under the hood, in the engine, are all the parameters that would be in other slicers.

21:33.240 --> 21:36.040
I'm just not exposing them to you.

21:36.040 --> 21:38.840
Because I don't really believe that's helpful.

21:38.840 --> 21:42.960
And again, if you run into a corner case where you just can't do the thing you want to do

21:42.960 --> 21:45.800
with your favorite parameter, just go use the other slicer.

21:45.800 --> 21:49.120
Or commit some code.

21:49.120 --> 21:54.040
Because this is open source, it's all on GitHub and has been there for a long time.

21:54.040 --> 21:57.320
Let's see.

21:57.320 --> 22:00.840
There is, before I actually get into really demoing this, I want to show another thing.

22:00.840 --> 22:05.960
Because this is running in the browser, this is used pretty widely in not just in 3D printing,

22:05.960 --> 22:08.720
but CAM and everything else in a lot of classrooms.

22:08.720 --> 22:11.080
Because it is one of the only pieces of software that runs on Chromebooks.

22:11.080 --> 22:12.760
It doesn't have to be installed.

22:12.760 --> 22:15.520
You can basically run it in classroom, Google Classroom, and other places.

22:15.520 --> 22:18.000
You can configure everything on the URL.

22:18.000 --> 22:20.960
So you can create profiles and put a bookmark somewhere.

22:20.960 --> 22:21.960
And somebody can click on it.

22:21.960 --> 22:22.960
It'll open up the profile.

22:22.960 --> 22:26.960
And it'll be preloaded with everything that the student needs for that class.

22:26.960 --> 22:32.560
So you can use the device profiles, even loading up objects into your workspace.

22:32.560 --> 22:33.880
So it's pretty easy to do that kind of stuff.

22:33.880 --> 22:38.000
And the fact that you can basically export your workspace, open a private browsing tab,

22:38.000 --> 22:39.000
import it.

22:39.000 --> 22:42.880
You can use this as a way of getting your data around from browser to browser.

22:42.880 --> 22:45.800
Or again, for testing and debugging.

22:45.800 --> 22:47.200
People send me workspaces all the time.

22:47.200 --> 22:53.640
I open a private browsing tab, I import it, I replicate whatever their problem is immediately,

22:53.640 --> 22:57.280
and then be able to fix it right away.

22:57.280 --> 22:59.440
So from this interface, usually it comes up like this.

22:59.440 --> 23:01.320
You can click on the Docs grid space.

23:01.320 --> 23:05.840
It'll take you to this page here, where it shows you everything about the different ways

23:05.840 --> 23:10.240
you can do shared profiles, which are just alluded to, Gcode macros, and different ways

23:10.240 --> 23:15.000
to embed or otherwise use the API for this.

23:15.000 --> 23:23.360
So to show you a quick, let's just open up something which is sort of like your basic

23:23.360 --> 23:26.120
3D printing thing here, the Benchi.

23:26.120 --> 23:30.680
If anybody's done any 3D printing here, in the slice mode, you go in here and you're

23:30.680 --> 23:37.320
going to have the ability to look at different slices, ranges of slices, like this.

23:37.320 --> 23:40.880
And the reason that there are two different modes, most slicers will basically take you

23:40.880 --> 23:45.960
right to the path-routed version of a sliced object.

23:45.960 --> 23:50.840
The reason I put you in here first is because you might want to modify parameters for ranges.

23:50.840 --> 23:55.800
So in this case, I could just say I'm going to turn off the infill for that bottom part,

23:55.800 --> 23:59.080
and then I have a range here that shows me that I've done that here and I've overridden

23:59.080 --> 24:00.080
the fill amount.

24:00.080 --> 24:03.440
And if I re-slice that and go look at this at the bottom up, you'll see that there's

24:03.440 --> 24:07.640
no infill down here, and then all of a sudden it switches to the normal view there.

24:07.640 --> 24:12.400
And then you can go and look at the preview, and this will show you the path routing.

24:12.400 --> 24:17.280
Path routing in view involves also determining the speed at which those layers or portions

24:17.280 --> 24:19.340
of layers are going to be printed.

24:19.340 --> 24:21.600
And you can turn things on and off like booths.

24:21.600 --> 24:23.080
So you can look at the booths.

24:23.080 --> 24:29.160
Yeah, I realize that aspect ratio is a little funky maybe here.

24:29.160 --> 24:31.040
Typical stuff that you would see in a slicer.

24:31.040 --> 24:34.840
Nothing really amazing there.

24:34.840 --> 24:37.560
What is a little bit more interesting about Kiyomoto, and this isn't really specific to

24:37.560 --> 24:43.920
3D printing, and I'll get to this more later, is you can go in and change the version on

24:43.920 --> 24:50.000
the fly because I'm hosting the last ten versions of the software, I'm working on the

24:50.000 --> 24:55.160
beta channel, I'm pushing out software two to five times a week depending on how active

24:55.160 --> 25:02.080
development is going with major releases about every four to six weeks.

25:02.080 --> 25:06.200
And so if there's a bug in the current release, you can go just switch to the previous one.

25:06.200 --> 25:09.360
Your workspace will be preserved and it will bring you back into the same workspace that

25:09.360 --> 25:12.880
you were in before with all of your data and all of your everything.

25:12.880 --> 25:16.200
All of the stuff is persisted live in the browser, so again everything is just like

25:16.200 --> 25:19.920
reload the page and you're back where you were before, screwed something up, reload

25:19.920 --> 25:21.920
the page.

25:21.920 --> 25:24.840
All right.

25:24.840 --> 25:30.080
So there are three ways to import, export files really quickly.

25:30.080 --> 25:34.400
You can just drag and drop stuff into the browser.

25:34.400 --> 25:38.160
There are different formats you can support, so like in this case I can just drag in this

25:38.160 --> 25:42.000
file here, which is something that some users really love to use as a benchmark because

25:42.000 --> 25:46.440
it's got about a million polygons and it slices pretty fast.

25:46.440 --> 25:52.760
There are some users of the program who really helped me with performance because they care

25:52.760 --> 25:57.000
a lot about it and have benchmarked Curie against Cura and Prusa and a bunch of other

25:57.000 --> 25:58.160
kind of stuff like that.

25:58.160 --> 26:05.320
Again, million polygons, slicing this thing at the end of the day is about as fast as

26:05.320 --> 26:10.680
Cura was, at least last year, that was the last time we looked at this, fairly well optimized.

26:10.680 --> 26:15.640
And again, this is pure JavaScript, there's no WebAssembly or anything else happening

26:15.640 --> 26:20.160
here under the covers.

26:20.160 --> 26:23.080
What else I'm going to show you here?

26:23.080 --> 26:24.880
I'm not sure how important that is.

26:24.880 --> 26:29.200
But anyway, the version switching is nice and then they're pluggable language.

26:29.200 --> 26:33.280
If anybody wants to contribute languages, it's pretty easy to plug in a new language

26:33.280 --> 26:36.920
into the interface and again you just reload the page and you've got another language with

26:36.920 --> 26:39.240
the same interface that you had before.

26:39.240 --> 26:44.840
And here we can go through, look through this, there we go, look through anything else.

26:44.840 --> 26:46.840
So typical stuff there.

26:46.840 --> 26:51.520
Interesting thing to note about this is that once you've sliced this thing, we're now looking

26:51.520 --> 26:59.160
at about 25 or 30 million polygons in WebGL and it's still fairly responsive.

26:59.160 --> 27:01.640
I mean, it's not as fast as I'd like it to be.

27:01.640 --> 27:06.180
So future work is actually writing custom shaders, which I think would help with this.

27:06.180 --> 27:11.040
This is not a case where you can basically de-res or hide stuff on the fly because if

27:11.040 --> 27:14.800
somebody goes in to look at the interior of this object, you can't just hide and then

27:14.800 --> 27:15.800
show that thing.

27:15.800 --> 27:18.800
There's always a possibility that interior features are going to be shown through the

27:18.800 --> 27:21.560
shell so you can't hide them.

27:21.560 --> 27:26.480
Everything that's in this, every path that's in this thing has to be shown at all times.

27:26.480 --> 27:32.760
And so this is an area where I would, if they're graphics experts, this is not my field, would

27:32.760 --> 27:36.840
love to have some feedback on this at some point.

27:36.840 --> 27:38.880
And then you can just export the code.

27:38.880 --> 27:44.240
The nice thing about this is that Kiyomoto also has a G code.

27:44.240 --> 27:47.440
And again, I'm not sticking to my own script here.

27:47.440 --> 27:52.360
There's the things I want to talk about, but you can export the G code and then once you've

27:52.360 --> 27:55.360
done that, download the G code.

27:55.360 --> 27:57.240
You can also send directly to printers.

27:57.240 --> 28:03.320
I have a spooling agent that allows you to send directly from Kiyomoto in the browser

28:03.320 --> 28:04.400
to OctoPrint.

28:04.400 --> 28:08.880
So if you use OctoPrint as a back end, there's a way to send directly from the browser to

28:08.880 --> 28:10.920
your printer.

28:10.920 --> 28:15.840
And that's fairly well documented and I have other ways of doing that for some of my own

28:15.840 --> 28:16.840
printers.

28:16.840 --> 28:17.840
Download G code.

28:17.840 --> 28:19.800
Kiyomoto also has a G code render built in.

28:19.800 --> 28:25.320
So if you get some random G code and you want to bring that in, you can actually bring in

28:25.320 --> 28:28.000
the, bring the G code back in.

28:28.000 --> 28:29.000
Oops.

28:29.000 --> 28:34.480
Let's find the downloads and bring that back in.

28:34.480 --> 28:36.320
And we'll re-render the G code.

28:36.320 --> 28:37.800
This works in all modes.

28:37.800 --> 28:44.480
So Kiyomoto will render G code from CNC, laser, FDM.

28:44.480 --> 28:49.000
And so I'll get into it in the CNC section.

28:49.000 --> 28:51.120
I'll show you that as well.

28:51.120 --> 28:53.880
And then there's exporting and sharing of workspaces.

28:53.880 --> 29:03.560
So for example, I go into a private browsing session.

29:03.560 --> 29:04.960
And the internet's great.

29:04.960 --> 29:07.000
Let's try it again.

29:07.000 --> 29:08.000
Great.

29:08.000 --> 29:09.000
Private browsing.

29:09.000 --> 29:16.080
I can import something like a CNC job.

29:16.080 --> 29:19.520
And it will switch modes, bring it in, tell me, give me a screenshot of when the workspace

29:19.520 --> 29:22.240
was created and then bring everything in with it.

29:22.240 --> 29:26.680
So this is an example of the fourth axis lathe work that's happening right now in the cam

29:26.680 --> 29:28.600
mode.

29:28.600 --> 29:32.680
This isn't fully baked yet, but it's the next thing that's coming out with the next release,

29:32.680 --> 29:36.600
which is fourth axis CNC was the thing I added in the last release.

29:36.600 --> 29:42.200
And this just sort of gives you the ability to do some fun stuff like this.

29:42.200 --> 29:51.240
But that's just showing you importing, exporting, and sharing of workspaces.

29:51.240 --> 29:52.240
Cam mode.

29:52.240 --> 29:54.240
Let's just hop in a cam mode real fast.

29:54.240 --> 29:58.280
CNC mode.

29:58.280 --> 30:03.320
So you'll notice when you change modes, your device list changes and the platform changes.

30:03.320 --> 30:07.320
It's adapting on the fly to whatever the new mode is that we're working on.

30:07.320 --> 30:11.080
I got this new CNC mill, make it our carvera, and it got rid of all my other mills because

30:11.080 --> 30:13.720
it does everything that I need.

30:13.720 --> 30:16.800
And so that actually leads to another project that I've been working on.

30:16.800 --> 30:20.840
I'm going to bring in a workspace for that.

30:20.840 --> 30:26.680
This workspace that somebody sent me, they're like, hey, I have a problem with some anomalous

30:26.680 --> 30:28.000
cuts happening here.

30:28.000 --> 30:30.800
So in CNC mode, you get a new bar at the bottom.

30:30.800 --> 30:34.680
These are reorderable operations because CNC is a set of operations.

30:34.680 --> 30:38.040
Each operation may or may not use a different end mill.

30:38.040 --> 30:41.640
And then you can hover over each one and change the settings for those, and you can enable

30:41.640 --> 30:46.160
and disable them like that.

30:46.160 --> 30:49.600
And I'm just going to go into slice through this and give you an idea what the slice view

30:49.600 --> 30:50.600
looks like.

30:50.600 --> 30:56.080
I can turn on and off the different operations to look at what they're doing, or I can go

30:56.080 --> 30:57.960
through them like this.

30:57.960 --> 30:59.320
But this doesn't involve the routing.

30:59.320 --> 31:01.800
This is just, again, the pure slices.

31:01.800 --> 31:05.160
We go to preview this, and it's going to show us the path routing.

31:05.160 --> 31:07.240
That's a little aggressive on the hover.

31:07.240 --> 31:10.360
But once you've done this, we can go to animation mode.

31:10.360 --> 31:14.880
And now this is the first time we're doing something actually pretty interesting, where

31:14.880 --> 31:21.800
on the back end, there is a shared array buffer, which is a relatively new technology in the

31:21.800 --> 31:22.800
web standards.

31:22.800 --> 31:25.720
The shared array is like a shared memory, but having shared memory in JavaScript is

31:25.720 --> 31:26.720
cool.

31:26.720 --> 31:27.720
This is a new thing.

31:27.720 --> 31:29.680
The workers have access to one shared pool memory.

31:29.680 --> 31:31.800
They're all rendering into it simultaneously.

31:31.800 --> 31:36.840
And the front end 3JS engine is rendering the same buffer that's being rendered into

31:36.840 --> 31:39.000
by the workers on the back end.

31:39.000 --> 31:43.640
So I can go through, and I can run this animation, and I can speed this animation up.

31:43.640 --> 31:54.840
And so all of this is actually happening in real time by the workers on the back end.

31:54.840 --> 31:59.120
And I got this workspace that says, I have this anomalous cut right here.

31:59.120 --> 32:00.120
What's that all about?

32:00.120 --> 32:07.040
Well, I'm not going to walk you through the great details, but they had one thing incorrectly

32:07.040 --> 32:08.720
set in one of the settings.

32:08.720 --> 32:18.360
I figured that out, sent it back to them with the correct settings, and it wasn't a bug

32:18.360 --> 32:19.760
this time.

32:19.760 --> 32:21.320
Oops.

32:21.320 --> 32:26.500
It looks like, no, that's fortunate.

32:26.500 --> 32:28.280
My hand touched my phone.

32:28.280 --> 32:29.280
All the notes disappeared.

32:29.280 --> 32:31.760
It looked like I deleted them magically, but it didn't.

32:31.760 --> 32:35.040
It just created a new note that was empty.

32:35.040 --> 32:40.840
OK, so here, this is a fixed workspace.

32:40.840 --> 32:41.840
Let's see.

32:41.840 --> 32:46.040
Can really also do other sort of import export.

32:46.040 --> 32:47.760
It can import SPGs and extrude them.

32:47.760 --> 32:50.560
It can import images and turn them into height maps.

32:50.560 --> 32:54.320
So one of the common things people do with CNC is they'll do reliefs.

32:54.320 --> 33:06.360
And so I can bring in a relief, like an image of a flower, and add some parameters to that.

33:06.360 --> 33:10.200
And actually, I want my stock to be offset.

33:10.200 --> 33:20.480
And then I want to resize this thing because it's kind of too large.

33:20.480 --> 33:21.940
So this is sort of a common use case.

33:21.940 --> 33:23.160
People want to do reliefs.

33:23.160 --> 33:27.200
These are a pretty common thing.

33:27.200 --> 33:33.120
This came from this image right here, which I grabbed off the internet this morning.

33:33.120 --> 33:37.360
But just to show you that it will import things like that, and it will also import SPGs.

33:37.360 --> 33:40.600
So if you have an SVG, this is more common with lettering.

33:40.600 --> 33:43.520
If you want to do, like, lasering or CNC of lettering or things like that, you want to

33:43.520 --> 33:48.040
bring in an SVG that you created in another 2D program.

33:48.040 --> 33:50.160
And I can do that.

33:50.160 --> 33:51.160
And it'll bring it in.

33:51.160 --> 33:52.160
That's too large.

33:52.160 --> 34:05.240
I can delete pieces out of it and scale it because that's, again, too large.

34:05.240 --> 34:10.920
So then just to leave and add some new operations there, this is actually a good segue into

34:10.920 --> 34:12.840
the laser mode.

34:12.840 --> 34:15.960
This is actually really too large now again.

34:15.960 --> 34:21.480
Let me scale that guy down.

34:21.480 --> 34:25.920
And in laser mode, you're creating, let's see.

34:25.920 --> 34:29.080
I don't want to use this.

34:29.080 --> 34:31.840
I'm going to use a different cube.

34:31.840 --> 34:35.920
I'll just show you this.

34:35.920 --> 34:40.440
So by default, in the laser mode, when you slice, it basically looks at all the different

34:40.440 --> 34:41.440
Z changes.

34:41.440 --> 34:46.360
And it will, if you say nothing for zero for the height, it'll basically find all the transition

34:46.360 --> 34:48.560
points and it will create a slice at that point.

34:48.560 --> 34:52.160
The assumption there is that you're going to slice the thing into a stackable layer

34:52.160 --> 34:57.440
and you're going to basically do stacked, registered slices with a laser cutter.

34:57.440 --> 34:59.120
You can do something a little more complex.

34:59.120 --> 35:03.280
You can choose the slice height.

35:03.280 --> 35:06.400
But lettering, the things I showed you before, you're basically going to bring in a 2D thing

35:06.400 --> 35:11.360
usually and then slice that and set like an offset.

35:11.360 --> 35:13.320
Offset is a curve for the laser.

35:13.320 --> 35:16.560
And that'll tell you how far the line's going to be set off from the part so that when you

35:16.560 --> 35:20.600
take into account the width of the laser, you get the size of the part that you want.

35:20.600 --> 35:24.320
It has some other interesting features like a drag knife.

35:24.320 --> 35:26.120
You can turn on drag knives.

35:26.120 --> 35:31.400
Drag knives will do the radial cuts so that you can basically, if you're cutting vinyl,

35:31.400 --> 35:35.280
for example, it's very similar to laser cutting, but you're dragging a rolling surface.

35:35.280 --> 35:36.680
And so 15 minutes.

35:36.680 --> 35:37.680
Thank you.

35:37.680 --> 35:38.680
I'm rambling.

35:38.680 --> 35:39.680
Drag knife support.

35:39.680 --> 35:44.200
I'm going to quickly just go through the last mode or two here and then show you a couple

35:44.200 --> 35:46.920
other things.

35:46.920 --> 35:51.840
Resin printing, also known as usually MSLA, which is masked SLA as opposed to actually

35:51.840 --> 35:56.440
resin printing using a real laser which is tracing something.

35:56.440 --> 35:58.600
Chitty Box owns that market.

35:58.600 --> 36:02.760
I bought a couple of resin printers and I used them before I figured this out, that

36:02.760 --> 36:07.720
all of the file formats for resin printers are pretty much proprietary.

36:07.720 --> 36:11.800
They all contain the same information, which is basically a stack of images.

36:11.800 --> 36:16.480
But because Chitty Box sells the hardware, they force everybody to sign NDAs and make

36:16.480 --> 36:18.160
everybody to have a different file format.

36:18.160 --> 36:21.120
So what's out there today is all reverse engineered.

36:21.120 --> 36:26.920
I haven't put a lot of effort into MSLA since then, but it's really, really brutally simple.

36:26.920 --> 36:33.120
It doesn't even have the problem of path routing because you're really just doing layers.

36:33.120 --> 36:38.000
So you're slicing into layers, you're generating a bunch of bitmaps, you're encoding them into

36:38.000 --> 36:40.680
a file and then you're throwing that at your resin printer.

36:40.680 --> 36:43.800
I will say the one thing that really doesn't make sense about this is that resin printers

36:43.800 --> 36:49.720
take so long to cure each layer that a microcontroller could render and master each next layer and

36:49.720 --> 36:52.920
it really should just be a stack of SVGs instead of 100 megabyte.

36:52.920 --> 36:55.560
This would be like a 100 megabyte file going to a resin printer.

36:55.560 --> 36:56.560
Should be 5K.

36:56.560 --> 36:58.640
Makes no sense.

36:58.640 --> 37:01.000
And I'm done ranting on that for today.

37:01.000 --> 37:05.400
So the next way that you can access Kirito is through the engine.

37:05.400 --> 37:09.700
There is an engine API and an engine example.

37:09.700 --> 37:15.740
This is the pure API not associated with any UI or anything like that.

37:15.740 --> 37:18.240
You can run it standalone, you can run it in a browser.

37:18.240 --> 37:23.600
Here I'm actually going to just slice an object and generate out code in the browser.

37:23.600 --> 37:25.760
This is just using the engine directly.

37:25.760 --> 37:30.280
There's one more API which is actually used by, so the engine API and the frame API are

37:30.280 --> 37:35.040
used by a couple of different projects, even a commercial product.

37:35.040 --> 37:37.540
This is an API driving a frame.

37:37.540 --> 37:43.040
You can embed Kirito in a frame in your site and drive it through an API.

37:43.040 --> 37:45.040
This is automatically the API interaction.

37:45.040 --> 37:46.040
You can skin it.

37:46.040 --> 37:48.080
You can remove any UI elements you're not happy with.

37:48.080 --> 37:49.960
You can use the 3D part of it.

37:49.960 --> 37:53.880
So you can basically create your own engine for this, your own wrapper for this and put

37:53.880 --> 37:56.040
it anywhere you want.

37:56.040 --> 38:00.320
So that's just another sort of interesting way to access the interface.

38:00.320 --> 38:04.680
I'm going to show you the integration into Onshape.

38:04.680 --> 38:10.040
If you've never used it before, browser-based CAD, love it.

38:10.040 --> 38:11.520
Can't say enough nice things about it.

38:11.520 --> 38:16.120
It's not open source though, obviously.

38:16.120 --> 38:18.120
Go in, open a model.

38:18.120 --> 38:24.040
In this case, I actually did a YouTube video demoing this, creating a CNC job to mill a

38:24.040 --> 38:25.680
guitar neck.

38:25.680 --> 38:28.660
So you go into Onshape.

38:28.660 --> 38:30.480
This is the model in Onshape.

38:30.480 --> 38:31.960
Kirito's a tab over here.

38:31.960 --> 38:33.960
You basically just say add Kirito.

38:33.960 --> 38:34.960
It shows up here.

38:34.960 --> 38:36.280
It's in the App Store.

38:36.280 --> 38:40.560
And then inside of Onshape, because you can see I'm iframed right here, I bring in the

38:40.560 --> 38:44.560
guitar neck and it imports into my workspace.

38:44.560 --> 38:49.640
And I can start to go into CAD mode and start adding operations to mill this thing.

38:49.640 --> 38:51.640
Export the gcode, all in the same interface.

38:51.640 --> 38:55.600
If I update the model over here, I can come over here and refresh the model in place.

38:55.600 --> 38:58.480
So if I have things that are referenced in the model and I'm doing some milling stuff

38:58.480 --> 39:02.280
and I change the model, I can basically just re-update it in this tab.

39:02.280 --> 39:07.120
So that's really the beauty of having this integration done in the browser through their

39:07.120 --> 39:08.120
APIs.

39:08.120 --> 39:12.840
It's the only case where this isn't a fully standalone application.

39:12.840 --> 39:16.160
I have to have APIs on the server that talk to their APIs using OAuth and a bunch of

39:16.160 --> 39:17.280
other stuff.

39:17.280 --> 39:20.480
So I'll leave it at that since we're running out of time.

39:20.480 --> 39:27.920
The last two things that I want to show you are, if I go back to grid space, MeshTool.

39:27.920 --> 39:32.400
In the slicer world, you get a lot of crap models from Thingiverse and other places like

39:32.400 --> 39:35.400
that, non-manifold objects.

39:35.400 --> 39:41.240
And I kept adding more and more features into KIROMoto to manage those problems and try

39:41.240 --> 39:43.660
to heal those objects and clean them up.

39:43.660 --> 39:47.600
And eventually I'm like, I don't want to crowd the interface in KIROMoto with a bunch

39:47.600 --> 39:50.160
of stuff that really I used to use Blender for.

39:50.160 --> 39:52.960
And so I created my own tool for that.

39:52.960 --> 39:57.560
This was beginning of last year, I think.

39:57.560 --> 40:02.440
You can come in here and you can bring in any...

40:02.440 --> 40:08.280
So one of the things people do commonly with, oh, I didn't even show you the belt printing.

40:08.280 --> 40:14.960
So I will say that one of the things that KIROMoto did before most other slicers was

40:14.960 --> 40:16.760
add belt printing.

40:16.760 --> 40:19.640
So if you're not familiar with belt printers, one of the reasons I'm going to show you that

40:19.640 --> 40:24.680
is that belt printers are, you would think, very similar to Bottoms Up 3D printing.

40:24.680 --> 40:25.680
They're not.

40:25.680 --> 40:27.320
They're completely different.

40:27.320 --> 40:31.320
They're similar in some ways, but basically if you think about it, every layer has a first

40:31.320 --> 40:32.320
layer problem.

40:32.320 --> 40:37.320
At 45 degrees, every layer has a first layer problem.

40:37.320 --> 40:42.120
And you have to deal with the fact that your bed is not rigid.

40:42.120 --> 40:43.880
It doesn't like a lot of materials.

40:43.880 --> 40:46.520
And you have a really hard time enclosing that thing.

40:46.520 --> 40:50.560
Having said that, if you can get your print job to work in a belt printer, it's phenomenal

40:50.560 --> 40:51.560
for lots of things.

40:51.560 --> 40:53.160
Why do you like to print swords?

40:53.160 --> 40:56.380
Problem with swords is they don't lay flat on the belt.

40:56.380 --> 41:05.680
So one of the things you can do in this tool is you can go in and split a sword.

41:05.680 --> 41:07.520
And there I have half a sword.

41:07.520 --> 41:10.160
Now the problem with that is that it is not manifold.

41:10.160 --> 41:11.440
It is open.

41:11.440 --> 41:14.480
So in here I can go to repair, patch.

41:14.480 --> 41:20.480
I now have a sword, which I can flip over, put on a belt printer, and print it, which

41:20.480 --> 41:21.960
is something that people do pretty commonly.

41:21.960 --> 41:25.720
I'm not going to spend a lot more time in this tool other than it's something that

41:25.720 --> 41:30.680
I would love to improve over time and add a lot more features into over time.

41:30.680 --> 41:33.840
I think it's a tool that we should have running in the browser.

41:33.840 --> 41:36.200
There are some other things that are similar out there.

41:36.200 --> 41:38.760
But again, there's no cloud involvement for any of these programs.

41:38.760 --> 41:42.960
They're all completely standalone and run in the browser.

41:42.960 --> 41:51.320
And the very last thing, which I will show because we're totally out of time now, is

41:51.320 --> 41:52.560
card control, which is a sender.

41:52.560 --> 41:57.760
I can't actually show you this because I am not connected via serial to a CNC mill.

41:57.760 --> 42:03.600
But this runs in the browser, uses web serial to talk to your device directly, locally.

42:03.600 --> 42:07.160
It's abstracted so that you can talk over USB serial or you can talk over the network

42:07.160 --> 42:09.160
to the device.

42:09.160 --> 42:13.000
But what's really cool about this is that if you get a mill and you go to your first

42:13.000 --> 42:16.480
time setup and you plug it into your laptop, you can click the serial button right here.

42:16.480 --> 42:18.580
It will find your mill.

42:18.580 --> 42:22.040
You will connect to it and start controlling it immediately, run the browser without having

42:22.040 --> 42:24.120
to install any software.

42:24.120 --> 42:27.800
What led me here was when I got the mill and tried to install their software, it didn't

42:27.800 --> 42:29.920
work on any of my computers.

42:29.920 --> 42:32.840
It didn't work on Windows, it didn't work on Android, it didn't work on Mac.

42:32.840 --> 42:34.880
Now they fixed most of these problems.

42:34.880 --> 42:37.840
But again, it was like, this software is not complex.

42:37.840 --> 42:39.800
I've written senders before.

42:39.800 --> 42:41.180
How hard could it be?

42:41.180 --> 42:45.600
So the cool thing about this software is actually that it shows you, it uses 3JS, will render

42:45.600 --> 42:49.640
and show live in 3D what the mill is doing.

42:49.640 --> 42:54.680
So it's tracking in real time the G code against what's happening on the mill.

42:54.680 --> 42:55.680
All right.

42:55.680 --> 43:01.440
Go to GoodSpace, you'll find links to the forums, dot, discord, all that kind of crap.

43:01.440 --> 43:05.880
And now I can take questions.

43:05.880 --> 43:20.040
If anyone has questions, send over the microphone.

43:20.040 --> 43:22.720
Yes, on that side.

43:22.720 --> 43:25.720
The room is full of makers.

43:25.720 --> 43:28.720
Yes, yes.

43:28.720 --> 43:45.680
Hey, thanks for the talk.

43:45.680 --> 43:51.960
What are the techniques you're using for the workpiece simulation that you've demoed in

43:51.960 --> 43:55.040
the CNC workspace?

43:55.040 --> 43:57.560
The question is what?

43:57.560 --> 44:01.880
It looked like maybe you're using just a height map?

44:01.880 --> 44:02.880
For that, yes.

44:02.880 --> 44:03.880
Modeling this.

44:03.880 --> 44:04.880
Correct.

44:04.880 --> 44:12.920
In the three axis CNC mode, it's rendering a height map because you can't do undercuts

44:12.920 --> 44:15.640
or side cuts or anything like that.

44:15.640 --> 44:18.800
In four axis mode, it doesn't use a height map.

44:18.800 --> 44:21.160
That's way harder to deal with.

44:21.160 --> 44:24.460
That's actually the only place I'm using manifold currently.

44:24.460 --> 44:30.240
And so it actually does 3D subtraction in real time of the tool geometry against the

44:30.240 --> 44:31.240
geometry.

44:31.240 --> 44:34.000
It's far more computationally intensive.

44:34.000 --> 44:36.480
But yeah, and I didn't have time to show that.

44:36.480 --> 44:40.680
Is manifold like robust mesh billions?

44:40.680 --> 44:41.680
It is.

44:41.680 --> 44:45.320
So it's a relatively new project.

44:45.320 --> 44:47.200
It's really exciting.

44:47.200 --> 44:53.280
Written in C++, compiled into Wasm, and then loaded in as a library to run in each of the

44:53.280 --> 44:54.280
workers.

44:54.280 --> 44:55.640
Again, it's WebAssembly.

44:55.640 --> 45:08.080
So it's pretty fast, but it is a proper, like, manifold library for doing Booleans.

45:08.080 --> 45:13.800
And I did contribute to that project because their initial API was too slow for what I

45:13.800 --> 45:15.980
was doing.

45:15.980 --> 45:19.280
They weren't producing arrays properly.

45:19.280 --> 45:24.720
I rewrote their JavaScript API for import export of those and made it, like, 200 times

45:24.720 --> 45:25.720
faster.

45:25.720 --> 45:30.080
So that got accepted recently.

45:30.080 --> 45:32.480
Another question?

45:32.480 --> 45:36.200
Hi, thanks for the talk.

45:36.200 --> 45:39.440
I found it really interesting.

45:39.440 --> 45:44.560
I was wondering, I might have missed it, but I don't think you mentioned where you used

45:44.560 --> 45:45.560
WebAssembly in the product.

45:45.560 --> 45:48.840
And I was looking at the WebAssembly, Wasm.

45:48.840 --> 45:49.840
Yes.

45:49.840 --> 45:56.200
And I was curious, because looking at the slicer algorithms for FDM, they must be pretty

45:56.200 --> 45:58.200
computationally intensive.

45:58.200 --> 46:02.360
So how do you get that to work fast enough in the browser to be usable?

46:02.360 --> 46:07.440
So none of the slicing that you saw, none of the CAM stuff, none of that used WebAssembly.

46:07.440 --> 46:09.720
Nothing that you saw today used WebAssembly.

46:09.720 --> 46:16.120
That's all pure JavaScript, which I know is probably upsetting for people.

46:16.120 --> 46:19.120
Fun minutes.

46:19.120 --> 46:21.640
Yeah, I'm surprised it's fast enough.

46:21.640 --> 46:22.840
It's impressive.

46:22.840 --> 46:26.680
So part of it is I did spend decades doing high performance computing, and I'm a bit

46:26.680 --> 46:29.080
of a performance nut.

46:29.080 --> 46:31.320
So why would I use JavaScript?

46:31.320 --> 46:34.240
I did my prototype in JavaScript, and I'm like, this is just too easy.

46:34.240 --> 46:39.080
Like I said, it was more than ten years ago, and I was like, it worked.

46:39.080 --> 46:44.000
And my intention was to rewrite it in a real language, because I spent most of my life

46:44.000 --> 46:45.760
writing in real languages.

46:45.760 --> 46:49.120
And now I spend all of my time writing in JavaScript with a little bit of WebAssembly

46:49.120 --> 46:50.120
and some other things like that.

46:50.120 --> 46:51.800
And totally hooked on it.

46:51.800 --> 46:58.560
You can totally do some pretty amazing things in JavaScript if you decide you want to.

46:58.560 --> 46:59.560
Cool.

46:59.560 --> 47:00.560
Thank you.

47:00.560 --> 47:19.080
Thank you.

47:19.080 --> 47:42.620
Jenerob.

47:42.620 --> 47:44.620
.

48:12.620 --> 48:14.620
.

48:42.620 --> 48:44.620
.

49:12.620 --> 49:14.620
.

49:42.620 --> 49:44.620
.

50:12.620 --> 50:14.620
.

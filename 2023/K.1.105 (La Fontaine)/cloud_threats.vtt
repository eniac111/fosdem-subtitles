WEBVTT

00:00.000 --> 00:07.000
Thank you all for coming and staying so long. I'm positively surprised and impressed. I'm

00:12.000 --> 00:18.000
a bit nervous. I hope I entertain you well and don't make a mess out of this. Who of

00:18.000 --> 00:25.000
you thought that this title was clickbait? That's fair. It's clickbait, a little bit.

00:25.000 --> 00:32.000
But I'm also serious about it. I think it's a serious issue. Quick introduction. I will

00:34.800 --> 00:39.800
not read this to you and you already heard it. I think the key point, I work at Red Hat,

00:39.800 --> 00:46.800
yes. My motivation for this talk is informed by my experience at Red Hat, but really I've

00:46.960 --> 00:51.040
been an open source, free software for a long time and I'm really committed to that. That's

00:51.040 --> 00:58.040
the reason why I work at Red Hat, not vice versa. Also, I have to give this disclaimer.

00:59.920 --> 01:06.920
Nothing I say here is official position of any of my former current or future employers,

01:07.800 --> 01:14.800
although it may be the same things I tell my employer. So take that as you wish.

01:14.800 --> 01:21.800
Let's get on the topic. Why do I say that the cloud is a threat to free and open source

01:21.800 --> 01:28.800
software? Because while free software has democratized the access to code at rest, so

01:29.720 --> 01:36.720
code in a repository, taking that code and actually operationalizing it, running it, has

01:36.720 --> 01:43.720
become a new proprietary differentiator even on top of free software. In my experience,

01:43.720 --> 01:50.720
that is undermining both the usefulness and the sustainability of free software. Let me

01:50.720 --> 01:55.720
explain that a little bit. Why do we do free software? I trust everyone here in this room

01:55.720 --> 02:01.720
knows the definition of free software, so I'm not going to belabor that. I'll use open

02:01.720 --> 02:08.720
source free software for synonymously. We can discuss that over beer later if you want.

02:10.280 --> 02:17.280
The point is that you have the freedom to use software, and it matters. It's important

02:19.760 --> 02:26.760
because before free software, code was a major proprietary differentiator. Proprietary code

02:26.760 --> 02:33.760
was also the major entry hurdle for accessing technology. It incentivized centralization

02:34.200 --> 02:41.200
and walled gardens and thus became an inhibitor or was an inhibitor to innovation. It created

02:41.200 --> 02:48.200
and maintained dependencies and lock-ins. You were dependent on the decisions of someone

02:48.200 --> 02:55.200
else who had authority over the code that you used. Back then, that was the reason why

02:55.200 --> 03:01.360
it was annoying. Maybe it wasn't as big of an issue as it today, but the world has changed

03:01.360 --> 03:06.600
and I'll get to that. Free software, in contrast to proprietary code, levels the playing field

03:06.600 --> 03:13.480
and it democratizes the access to technology. It incentivizes open collaboration and offers

03:13.480 --> 03:20.480
a base for technical sovereignty, sovereignty being the state where you have authority over

03:20.480 --> 03:27.480
your technology. That's my own path to open source. I got to open source because I was

03:30.120 --> 03:37.120
in high school and I needed a compiler. I was using OS 2 at the time. I guess my age

03:38.760 --> 03:45.760
based on that. I was using OS 2 because DOS and Windows were not my thing. The TOBOSy

03:45.760 --> 03:52.760
compiler I had used on DOS didn't work on OS 2 and IBM wanted a lot of money for a compiler.

03:55.200 --> 04:00.200
Luckily, there was this guy DJ Delorey who also happens to work at Reddit nowadays, who

04:00.200 --> 04:07.200
had poured the GCC to OS 2 and that is what saved me. Let me use a compiler on OS 2 and

04:07.200 --> 04:14.200
that's what got me into free software. The key point here was that I was excluded from

04:16.600 --> 04:22.120
access to technology. I was excluded from being able to use something to write my own

04:22.120 --> 04:26.440
code on that platform that I happened to be running. I could have switched platforms but

04:26.440 --> 04:31.880
would have run into similar problems. There was a different, there were other compilers

04:31.880 --> 04:37.440
that were maybe cheaper but the problem became obvious to me because of the pricing that

04:37.440 --> 04:44.440
made it inaccessible for me. That removed the hurdle.

04:45.160 --> 04:51.240
Sovereignty is a big topic right now. For me, it starts with individual sovereignty.

04:51.240 --> 04:56.880
That becomes an issue for any organization. If as a business, you are dependent on other

04:56.880 --> 05:03.880
people's decisions or in Europe that's a big topic nowadays. Even as a state or union

05:06.040 --> 05:10.760
of states, you become dependent on other people's technology decisions, that's creating major

05:10.760 --> 05:17.760
risk. Free software is the antidote for that. It provides you an environment that lets you

05:17.760 --> 05:24.760
control your own technology and it creates an environment where access to technology

05:26.640 --> 05:33.640
is fully democratized. It provides incentives for collaboration. It creates a better innovation

05:36.040 --> 05:43.040
model that's based on collaboration. Now I'm repeating myself. Apologies for that. It

05:43.040 --> 05:50.040
creates this level of sovereignty and control over your code. That's why it matters. That

05:50.800 --> 05:57.800
is something that in the cloud is becoming harder to do. What happened is that software

05:58.800 --> 06:03.800
aids the world. Everything is software defined now. An example I often use is the connected

06:03.800 --> 06:10.800
mousetrap I have in my basement. Mousetrap is a pretty, pretty simple software. It's

06:10.800 --> 06:17.800
a mouse trap. A mouse trap is a pretty old concept doing something very physical. Now

06:21.840 --> 06:28.840
I have a mouse trap that has a microcontroller, talks to my network and tells me through a

06:32.240 --> 06:37.560
cloud backend with a front end on my mobile phone when it did its business so I don't

06:37.560 --> 06:44.560
find it weeks later. That's software defined now. I bought this one because it has software

06:48.000 --> 06:55.000
features. That shows how integrated our lives become. It's a silly example, but it shows

06:57.440 --> 07:02.280
how integrated our lives have become with software. How things are defined by software.

07:02.280 --> 07:09.280
I always go back to Lawrence Lessig's book in late 1990s or early 2000s that he wrote

07:12.600 --> 07:18.200
called Code where he argues that code becomes law because it defines our ability to interact

07:18.200 --> 07:24.200
with the world increasingly. I came across that in the context of the fight against software

07:24.200 --> 07:31.200
patents in Europe in the early 2000s. I think that's become more and more reality. Everything

07:32.800 --> 07:39.800
we do is more defined by code. That is not defined by code at rest anymore. It's not

07:40.760 --> 07:47.760
defined by code in a repository. It's defined by code that's running somewhere. The software,

07:47.760 --> 07:54.760
well, open source is a base for that. The cloud is built on open source. The software

08:01.600 --> 08:06.680
the complexity of modern software, the integration in the world has left and the dependencies

08:06.680 --> 08:13.680
that everything now has on that has led to a model where users, commercial users, private

08:13.680 --> 08:18.680
users, increasingly just build on top of services provided by someone else. It's just a function

08:18.680 --> 08:23.680
of complexity versus utility of something. If I need a database, I can click a button,

08:23.680 --> 08:27.680
I get a database. I don't have to become an expert in deploying databases myself. I don't

08:27.680 --> 08:32.680
need to figure out how to find the right infrastructure for it. I just press a button, it works.

08:32.680 --> 08:38.680
I can focus on the top 10% of my solution stack where I implement my, as a business,

08:38.680 --> 08:45.680
I implement my proprietary differentiation. I will use that. But the price for that is

08:46.680 --> 08:53.680
a dependency on a service that in itself may be based on open source code, but the step

08:58.680 --> 09:04.680
from taking the code that's in a repository to putting together multiple pieces of code

09:04.680 --> 09:09.680
into a running service and running that service, keeping it running, keeping it secure and

09:09.680 --> 09:14.680
integrating with other things increasingly becomes proprietary. It becomes the proprietary

09:14.680 --> 09:21.680
differentiation to the degree that less and less people can actually run services on their

09:21.680 --> 09:27.680
own. Why is that? Because the knowledge of running things in this complex interconnected

09:27.680 --> 09:32.680
world gets harder. It's hard to keep things secure, even configuring them secure, which

09:32.680 --> 09:39.680
you can see in the news, basically daily base, is hard. People fail and all kinds of data

09:41.680 --> 09:48.680
shows up in places it shouldn't be. That becoming a new, that knowledge, so it's not just, it's

09:50.680 --> 09:55.680
not the question whether, and this goes back to the definition of free software, my complaint

09:55.680 --> 10:01.680
is not that I may have to pay for a service. My complaint is that the knowledge on how

10:01.680 --> 10:07.680
to go from code in a repository to a running service, that knowledge in itself has become

10:07.680 --> 10:13.680
a proprietary differentiator that's creating walled gardens and that removes access to

10:15.680 --> 10:21.680
technology. I'm guilty myself in actually falling into that trap. I mean, I don't run

10:21.680 --> 10:27.680
my own mail server anymore, which has been, I don't know how many of you are in that camp,

10:27.680 --> 10:34.680
who runs their own mail server? Yeah, that's sad really. I mean, in this audience, I was

10:39.120 --> 10:43.680
wondering whether I should dare ask this question because I would have felt really silly if

10:43.680 --> 10:47.600
like all of you would have raised their hand and say, I'll run my own mail server, Daniel,

10:47.600 --> 10:53.600
you idiot. But like in reality, why don't I run my own mail servers? Because I can't,

10:53.600 --> 11:00.600
like I don't have the time to do it and keep it secure and keep my family on it and deal

11:05.520 --> 11:11.800
with the support requests of that and provide the same access from every device that I get

11:11.800 --> 11:17.360
if they are just on Google mail, right? But that's a compromise I make for the ease of

11:17.360 --> 11:23.160
use, the utility of it, and in the end it creates a dependency. Now I have the situation,

11:23.160 --> 11:28.000
I'm going a bit off script here, but I just write, like now they are scanning my mail

11:28.000 --> 11:35.000
for certain legal violations, right? And they will forward certain types of violations automatically

11:38.840 --> 11:44.200
to the police and lock you out of your account. I think that wasn't Google. There was a case

11:44.200 --> 11:51.000
recently where a family got into trouble for like a photo they had of their kid, like traditional

11:51.000 --> 11:58.000
family photo that was flagged as inappropriate and they lost access to their mail account.

11:58.320 --> 12:03.440
I don't say which vendor that was, but you can Google that in the US, right? And they

12:03.440 --> 12:10.440
are locked out forever because algorithm decided that that was not acceptable. And it's all

12:11.520 --> 12:17.000
well intended, right? But it shows what it means to not have technology sovereignty,

12:17.000 --> 12:24.000
right? You are now dependent on an algorithm that might be very badly implemented that

12:24.400 --> 12:31.200
then decides whether you lose access to your own data because it recognized a violation

12:31.200 --> 12:36.920
with the best intentions, but sometimes, you know, dangerous consequences. And we'll see

12:36.920 --> 12:42.320
more of that, right? Because there's a whole different thing I'm not talking about today

12:42.320 --> 12:47.920
that's happening with artificial intelligence and further integration of these systems into

12:47.920 --> 12:54.920
cloud services. So my point here at the end comes down to that, like, the question, it's

12:55.600 --> 13:02.000
great that we have free software, right? It's great that we have revolutionized the access

13:02.000 --> 13:07.920
to technology, access to code. We have revolutionized the business where free software has one.

13:07.920 --> 13:13.240
It's a base for all modern software development to some degree, right? There's always something

13:13.240 --> 13:19.280
like proprietary differentiation in code, right? Now, I would imagine it's limited kind

13:19.280 --> 13:25.360
of to the top of the code pyramid, right? When it becomes like the things that one company

13:25.360 --> 13:29.360
writes in-house, right? Their own business differentiations, that's always proprietary,

13:29.360 --> 13:36.360
right? That's where your trade secrets are. And that's okay, right? So it's shaking the

13:36.360 --> 13:43.360
head. Like, it's a separate way. But you will, like, at a point where something becomes so

13:46.640 --> 13:53.640
unique, right, you get into the question with a... No. We can debate it in a question and

13:53.720 --> 13:58.160
answer. I see it. But I think, so ultimately I respect people doing that, right? But then

13:58.160 --> 14:03.040
you get down to something is domain specific. Maybe there's some proprietary stuff in there.

14:03.040 --> 14:08.320
But latest you're like outside of like one specific industry, you get into free software

14:08.320 --> 14:12.480
frameworks that everyone is using. Because all this stuff on the business side that's

14:12.480 --> 14:19.480
common, their free software is a huge advantage. Because it gives you the ability to collaborate

14:22.200 --> 14:27.400
among competitors, to not reinvent things all the time, to get to common standards in

14:27.400 --> 14:34.400
a very practical way, right? Because code is better than a standard. So that works.

14:35.920 --> 14:42.920
But how much use is it really if you cannot run it anymore on your own without a dependency

14:44.920 --> 14:51.920
on someone who is a big centralized provider? And the issue here, you know, that goes into

14:51.920 --> 14:56.920
that is true for individuals, it's true for organizations, it's true for civil society,

14:56.920 --> 15:02.920
that is true for companies that are not as big as some other companies. You always create

15:02.920 --> 15:08.920
these dependencies. Because of the talent gaps and just the knowledge gaps and the risk

15:08.920 --> 15:15.920
included in it. And this has allowed the leading cloud providers to create centralized economies

15:15.920 --> 15:21.920
of scale based around their proprietary operational knowledge. And it's really useful. You click

15:21.920 --> 15:28.920
a button, you get anything you need in infrastructure. This sometimes includes unfair strip mining

15:28.920 --> 15:35.920
of free software projects, right? We've all seen that. They can do that just because of

15:35.920 --> 15:40.920
the scale of operationalization. It has nothing to do with the code. It has led to a situation

15:40.920 --> 15:45.920
where sometimes code itself is actually commoditized, right? Your challenge is not writing the code.

15:45.920 --> 15:50.920
You can't get enough people together to write the code. Really the problem comes running

15:50.920 --> 15:57.920
it and creating the economy of scale and adoption that makes it successful. And that is a dynamic

15:58.920 --> 16:03.920
that basically goes back to the mainframe. We went full circle and now we are running

16:03.920 --> 16:08.920
black box services on someone else's hardware. How do we do that? And then we have a lot

16:08.920 --> 16:14.920
of black box services on someone else's hardware. It's a convenient model but it's really creating

16:14.920 --> 16:27.920
lock-ins. And it's the same kind of lock-in and access hurdle that code used to be when I was in high school.

16:29.920 --> 16:36.920
It was impossible for many people to get to that level of technology even if they knew how to code

16:36.920 --> 16:43.920
in a sustainable way. And now we are getting back there. And there are plenty of examples

16:43.920 --> 16:50.920
how this goes even into how we create free software. This is not just a problem in using or deploying it.

16:50.920 --> 16:56.920
It affects our own creation. If you write modern cloud-native software, you aggregate existing

16:56.920 --> 17:01.920
services and you focus on the last 10% of what you really care about. You don't have to worry about

17:01.920 --> 17:05.920
anything else because you can use that from the cloud provider. If you're doing free software, then you

17:05.920 --> 17:11.920
have to run everything yourself because we haven't expanded free software to solve this problem.

17:17.920 --> 17:29.920
We can take prominent examples. Who here uses GitHub? Does it include GitHub issues and things like that?

17:29.920 --> 17:35.920
Who thinks that GitHub is open source software or free software?

17:37.920 --> 17:45.920
It's great. It's a great service. It's a great tool. Git is free software. GitHub and everything

17:45.920 --> 17:51.920
around the code management itself. When you go into issues, actions, integrations.

17:51.920 --> 17:59.920
It's owned by Microsoft, yes?

18:01.920 --> 18:10.920
I'm not going to go there. I have a similar comment who I work for. I don't want to have prejudice against

18:10.920 --> 18:25.920
Microsoft. Slack is not on Slack. We can go around and around and we will find that even the development

18:25.920 --> 18:35.920
of free software depends more on proprietary services. Software as a service.

18:35.920 --> 18:45.920
This is not necessarily criticism in these companies. I believe that everyone has a choice to

18:45.920 --> 18:51.920
offer their software and their service under the license in terms of services they see appropriate.

18:51.920 --> 18:57.920
But it's a problem for me where I think there should be an alternative. We need to think about how

18:57.920 --> 19:08.920
sustainable this is in the long term. Can we get to a model where free and open source software

19:08.920 --> 19:17.920
development can be integrated with other free and open source software development in a consistent

19:17.920 --> 19:26.920
model end to end? Where it regains its utility all the way to running code. That is the underlying

19:26.920 --> 19:33.920
problem. Having code and then not being able to actually offer the service or run your own mail

19:33.920 --> 19:41.920
server. A big topic that everyone here is probably aware of is the switch towards the

19:41.920 --> 19:45.920
Fediverse right now which is great. Which brings more attention to this issue. People are trying to

19:45.920 --> 19:52.920
run their own instances of a decentralized social network now. They're finding out that's actually

19:52.920 --> 20:00.920
really hard. That's going to get ugly before it gets good if people don't run back to the

20:00.920 --> 20:05.920
centralized wall garden because it's too hard. But that makes a point.

20:05.920 --> 20:13.920
Ultimately right now while the Fediverse I think is far ahead. It's one of the areas where I see

20:13.920 --> 20:20.920
hope because it's fairly easy to run. A lot of people are running and it's this decentralized

20:20.920 --> 20:26.920
system where you have hubs and people are running them for others as non-profits or as things

20:26.920 --> 20:34.920
where you have direct contribution but it's not a walled garden. That's hope. I see hope with

20:34.920 --> 20:42.920
projects like in the home automation space. I personally use Home Assistant but there are other

20:42.920 --> 20:47.920
great projects. But a lot of them go deep into actually giving you something that just runs.

20:47.920 --> 20:53.920
So operationalizing it isn't hard. It's actually often out of the box. You can download an image.

20:53.920 --> 21:00.920
It just works. Sometimes there are even services and the integration into services works out of

21:00.920 --> 21:05.920
the box. You can actually aggregate things. Sometimes it's a bit part of the problem is that

21:05.920 --> 21:10.920
there's no differentiation between integrating into other open source components and services and

21:10.920 --> 21:18.920
some very weird proprietary cloud-based things that maybe upload your security camera images to

21:18.920 --> 21:25.920
places where you don't want them. So there's that. But on the other hand it's progress in the sense

21:25.920 --> 21:29.920
that part of the open source project is to actually solve this problem.

21:29.920 --> 21:38.920
And this is a problem again I think this is a problem for everyone. Even if you're building on

21:38.920 --> 21:42.920
top of the cloud, even if you're a company building on top of the cloud and you have like very

21:42.920 --> 21:48.920
little code that is your own code where you put your business differentiation like your UI to

21:48.920 --> 21:56.920
control the microcontroller code that controls the mousetrap, you still need to figure out how to

21:56.920 --> 22:02.920
operationalize it. That means you need to have that knowledge from somewhere. And that's becoming

22:02.920 --> 22:11.920
increasingly a problem because it's hard to do that securely. So open source has one is only

22:11.920 --> 22:19.920
half right. That's my take away. Open source is a preeminent software development model at this

22:19.920 --> 22:27.920
point but it's not the operations model. And this limits how useful free and open source software

22:27.920 --> 22:36.920
is for users, whether it's individual users, private users, nonprofits or civil society

22:36.920 --> 22:43.920
organizations, companies or even governments that try to have sovereignty in their technology

22:43.920 --> 22:52.920
and data use. You know the GitOps is a nice example here. It's great to have a GitOps model

22:52.920 --> 23:01.920
but if you GitOps your free software, how free is it when the GitOps part is actually proprietary?

23:01.920 --> 23:11.920
So my thesis is that we need to expand the concept of free and open source software from code at

23:11.920 --> 23:19.920
rest, from code in a repository to really include the operationalization of the code. And we need

23:19.920 --> 23:29.920
to create the collaborative decentralized infrastructure model for that where we can use

23:29.920 --> 23:37.920
the same approach of aggregating existing services that are run maybe by other organizations,

23:37.920 --> 23:44.920
by other projects without having to rerun everything on our own. We need to create an exchange

23:44.920 --> 23:50.920
and operationalization knowledge and we need to create a practical capability to build applications

23:50.920 --> 24:02.920
in that way. And I think it's important to really take this also in something I hadn't

24:02.920 --> 24:09.920
thought about before as much. I spent some time at an open forum event on Friday about

24:09.920 --> 24:15.920
where a sovereign cloud, cloud sovereignty in the EU was a big topic. I think as a free

24:15.920 --> 24:20.920
and open source software community we need to also make sure that this point gets pushed

24:20.920 --> 24:26.920
into the cloud sovereignty discussion. Because if you end up with cloud sovereignty many

24:26.920 --> 24:34.920
people talk about how we're going to use open source code but at the end it's going to be

24:34.920 --> 24:40.920
in itself just a black box service. Maybe it's just a data center that happens to be

24:40.920 --> 24:45.920
in the EU but otherwise it's following the same existing proprietary centralized cloud

24:45.920 --> 24:50.920
model that wouldn't be sovereignty, at least not in my definition of sovereignty, which

24:50.920 --> 25:01.920
means you have actual control over your destiny. So what I'd like to see is what we need to

25:01.920 --> 25:11.920
do here, expand the model, create a collaborative model around actually running things, focus

25:11.920 --> 25:20.920
on sovereignty aspects and I think we need to consider technologies without bias. What

25:20.920 --> 25:26.920
I'm really concerned about is for example when I see discussions around web 3. There

25:26.920 --> 25:36.920
are a lot of people who have now a mindset where blockchain, web 3, that's tainted by

25:36.920 --> 25:44.920
either scam affiliation of similar technologies perceived or real or by political affiliations.

25:44.920 --> 25:48.920
I don't know how big that is in Europe, in the US that's like a big topic where you can

25:48.920 --> 25:55.920
talk to someone and they'll say no web 3 that's something that the crypto growth use.

25:55.920 --> 26:02.920
I think we need to be agnostic there, we need to look at technology and that's utility.

26:02.920 --> 26:10.920
I'm skeptical on each individual technology but ultimately it comes down to how can we

26:10.920 --> 26:15.920
solve the problems and there are areas where a distributed ledger is going to be the right

26:15.920 --> 26:23.920
solution. There's going to be areas in my view where for example something like Filecoin

26:23.920 --> 26:30.920
is the right solution because you need to find a way how to monetize offering services

26:30.920 --> 26:38.920
on a peer to peer basis. We need to be careful not to put everything into the same bucket

26:38.920 --> 26:46.920
as maybe other things like some scam coin and snowball model because they are not just

26:46.920 --> 26:58.920
the same technology, they're not the same thing. I want to give a concrete example of

26:58.920 --> 27:05.920
what can be done. This is something we are trying at Red Hat but it's an open source

27:05.920 --> 27:12.920
initiative. It would be silly to talk about it in this context if it wasn't. We call it

27:12.920 --> 27:20.920
operate first and I should explain the term. Red Hat has internally in our Linux group

27:20.920 --> 27:26.920
and I think for most other groups but there it comes from, we have a core principle that's

27:26.920 --> 27:34.920
called upstream first which says that we will never try to differentiate from upstream

27:34.920 --> 27:42.920
code on a technology base. If we implement a feature in our product we try to get it

27:42.920 --> 27:47.920
into the relevant upstream projects before we ship it as a feature to customers. It's

27:47.920 --> 27:53.920
not always true. We ended up maintaining Zen kernel patch for a long time because it was

27:53.920 --> 27:59.920
never accepted upstream but we also regretted that quickly and switched to KVM because

27:59.920 --> 28:07.920
it's painful. This is not altruism per se. The reason why Red Hat doesn't try to differentiate

28:07.920 --> 28:12.920
on the technology level from our upstream open source code is because that would make

28:12.920 --> 28:19.920
our whole development model really painful and almost useless because you lose the main

28:19.920 --> 28:25.920
point why a company should use free software. It's the development model that allows you

28:25.920 --> 28:34.920
to collaborate and achieve better solutions than anything you could come up with in-house.

28:34.920 --> 28:43.920
You lose the corrective. Most modern issues that you have in complex systems in the lower

28:43.920 --> 28:48.920
layers of your software stack you're never going to solve on your own. Any big kernel

28:48.920 --> 28:53.920
issue, any big security issue, it's always a collaborative effort and that's why they

28:53.920 --> 28:58.920
get solved. That's even true for most proprietary software at this point because someone else

28:58.920 --> 29:06.920
finds it. Red Hat has this principle called upstream first which features go upstream

29:06.920 --> 29:13.920
before they go into the product. Exceptions are always there but that's a goal and it's

29:13.920 --> 29:22.920
motivated by core business requirement not by altruism. Now we need the same for creating

29:22.920 --> 29:31.920
services. Red Hat is now as much software as a service company as it's a free ship code

29:31.920 --> 29:39.920
company. All our services are based on free software. Not all the glue code gets developed

29:39.920 --> 29:44.920
in a free software open source development model. Not all the glue code is publicly available

29:44.920 --> 29:53.920
yet. The point there is we have the same problem and this is not only speaking about our use

29:53.920 --> 29:59.920
of services. We can't force and we don't have the capacity to build everything ourselves.

29:59.920 --> 30:06.920
We have to offer services on proprietary cloud for example. There is no way around that.

30:06.920 --> 30:14.920
For the things we create, we were also drawn into just everyone in the culture of DevOps

30:14.920 --> 30:20.920
and cloud native development. We have created things that are proprietary in the productization

30:20.920 --> 30:27.920
step and we have lost the ability to collaborate on that which hampers ourselves. It hampers

30:27.920 --> 30:33.920
our customers that then try to do things on prem or try to create a hybrid environment.

30:33.920 --> 30:38.920
At the end we believe strongly in a hybrid cloud model for whole different discussion

30:38.920 --> 30:46.920
would be its own talk. We created this initiative to change our own dynamic but invite others

30:46.920 --> 30:57.920
to join it. It comes down to approaching the creation of our own services from a model

30:57.920 --> 31:04.920
where we start with making the upstream code operationalable. We make sure that what we

31:04.920 --> 31:09.920
put into the software repo is not just theoretically runnable code. It's actually everything you

31:09.920 --> 31:15.920
need to run it. Open source service first of all means something that the average person

31:15.920 --> 31:22.920
can instantiate as a running service. Second, drive the knowledge on how to operationalize

31:22.920 --> 31:28.920
it into the same community or overlay community. Sometimes you can't because things aggregate

31:28.920 --> 31:34.920
into bigger services and create communities to have an exchange on how to operationalize

31:34.920 --> 31:42.920
the software and make that knowledge available under free software licenses in a free software

31:42.920 --> 31:51.920
exchange model and development model. Then also try to create actual running instances

31:51.920 --> 31:57.920
that our projects can reuse without having to run component services on their own and

31:57.920 --> 32:04.920
invite others to participate in that. We collaborate with some universities. This is not new.

32:04.920 --> 32:12.920
Matt Miller from Fedora Project is sitting in the first row reminding me that Fedora

32:12.920 --> 32:19.920
has done things like that all the time. Linux distributions of course have run what nowadays

32:19.920 --> 32:23.920
would be called a cloud service like build systems and so on in a collaborative fashion.

32:23.920 --> 32:30.920
This is not net new. The problem is we have to expand that into everything, into databases

32:30.920 --> 32:37.920
that we need to run, we need to make reusable, into any kind of software that we ship we

32:37.920 --> 32:58.920
have to include to operationalization. So that's the pitch. And we have 10 minutes for

32:58.920 --> 33:07.920
questions, discussions and answers. 15, I did some quick talking there. Do we have questions

33:07.920 --> 33:22.920
online? Maybe we can start with these then. Yes, no. Nothing online. So questions? Yeah,

33:22.920 --> 33:31.920
I will take the first one then. I'm not going to heckle you. Closer? Okay. There we go.

33:31.920 --> 33:37.920
So a lot of the public discussion I've seen about cloud services and open source has come

33:37.920 --> 33:43.920
from a different direction. It's like companies who have open source software and their business

33:43.920 --> 33:48.920
model will support around it and then some other much larger company suddenly runs their

33:48.920 --> 33:53.920
software better than they do and they say hey, that's not fair. That's not why we open sourced

33:53.920 --> 33:59.920
it. We wanted something else out of that. And there's been a kind of a fight over licensing

33:59.920 --> 34:07.920
and some new licenses basically meant to restrict that kind of running things. And there's

34:07.920 --> 34:11.920
been debate about whether those fit under open source. I think you're talking about something

34:11.920 --> 34:15.920
entirely different. And is there a licensing approach we can take to drive software towards

34:15.920 --> 34:25.920
this operate first model? So I'm not convinced that code licensing itself will solve the

34:25.920 --> 34:31.920
issue of strip mining code. Like the problem when a larger company takes your code and runs

34:31.920 --> 34:36.920
a service and monetize or doesn't have to actually be a service. They could just ship the

34:36.920 --> 34:42.920
code into it better. There's always a risk like that. It's a dynamic that always existed in a

34:42.920 --> 34:47.920
Linux distribution. We ship something that undermines the ability to sell the same thing

34:47.920 --> 34:53.920
unless you find a way how to make your selling the same thing either better or an add on.

34:53.920 --> 35:01.920
So in the tradition sense I always like I was a product manager for Rel a long time where

35:01.920 --> 35:07.920
we ship components that other people try to monetize because it's expected from a Linux

35:07.920 --> 35:13.920
distribution to bring certain things out of the box. Now what we always said is look we

35:13.920 --> 35:19.920
have a very generalized solution here. We will help you upsell your specialized support.

35:19.920 --> 35:24.920
So that's solved in that sense. But if you go into the strip mining by for example cloud

35:24.920 --> 35:29.920
providers it takes the same piece of software run it, competes with you and they can operationalize

35:29.920 --> 35:33.920
it much better than you and then win. Also have more reach and have a better customer

35:33.920 --> 35:38.920
model. They have a marketplace where they can promote their solution over years. I don't

35:38.920 --> 35:43.920
know if a code license can solve that because part of the problem there is that they could

35:43.920 --> 35:48.920
also rewrite and when that was done they rewrote the code or forked an earlier version when

35:48.920 --> 35:53.920
you changed the license. So this didn't work. What worked however I think is creating the

35:53.920 --> 36:02.920
awareness, creating specialization and creating a dynamic around the integrations.

36:02.920 --> 36:09.920
So embracing that you're not selling actually the code. Now I still believe that it's probably

36:09.920 --> 36:16.920
better to license the code under a copy left license and license your operationalization

36:16.920 --> 36:22.920
under a copy left license to minimize the abuse versus a license that's too liberal and

36:22.920 --> 36:30.920
allows people to take it proprietary. But the successful countermeasures I've seen were

36:30.920 --> 36:37.920
not based on licensing primarily. They were based on business model and engagement with

36:37.920 --> 36:50.920
the customers. Right. How do you copy left the operas, I can't say that word. Well you

36:50.920 --> 36:57.920
get into like a game we just found out luckily that game rules cannot be copyrighted. Right.

36:57.920 --> 37:06.920
So D and D will live despite Hasbro. But I think the code you implemented in can. Right.

37:06.920 --> 37:12.920
And at the end it comes down to like how much of the hurdle is writing new automation code

37:12.920 --> 37:17.920
and actually that becomes a fairly big hurdle to reinvent automation code. And then copy

37:17.920 --> 37:24.920
left helps. You know it doesn't help you against the reach and economy of scale. There you

37:24.920 --> 37:31.920
need awareness of your benefits, good business model and awareness of the problems of walled

37:31.920 --> 37:38.920
gardens. Right. I mean the Twitter versus Fediverse situation is a great experiment of that.

37:38.920 --> 37:47.920
You know I think we should all try to help make that successful. Right.

37:47.920 --> 37:52.920
How do you feel about decay of self hosted infrastructure for example servers or domains

37:52.920 --> 37:59.920
disappearing and in general being less reliable than for example get up. I couldn't. OK. How

37:59.920 --> 38:05.920
do you feel about decay of self hosted infrastructure for example servers or domains disappearing.

38:05.920 --> 38:10.920
That wouldn't be the case with get up. OK.

38:10.920 --> 38:27.920
How do you feel about the decay of self hosted infrastructure like servers and domains

38:27.920 --> 38:33.920
disappearing and less reliable than example get up. Well yeah that. So that's a huge issue

38:33.920 --> 38:43.920
right. So self hosted infrastructure always decays. Right. And I mean that's true for anyone

38:43.920 --> 38:47.920
who does something you're interested in at the beginning and even if you're still around

38:47.920 --> 38:53.920
you move on to the next interesting topic that is at least true for me. And well you know

38:53.920 --> 39:01.920
I was I was I'm very happy with home assistant. I wouldn't want to run a security scanner

39:01.920 --> 39:09.920
on my home assistant device. Now it's like that's fairly OK because it's so isolated

39:09.920 --> 39:17.920
and doesn't control well it controls the heating so there's a risk there. So yeah that's a

39:17.920 --> 39:23.920
problem. I mean and I think my impression is for example the home assistant community

39:23.920 --> 39:27.920
and again that's just what I'm using. I don't want to like single them out and I haven't

39:27.920 --> 39:31.920
had time because I didn't have time to try others it might be better ones but what I'm

39:31.920 --> 39:36.920
seeing there is that there is out of the community actually people start offering the services

39:36.920 --> 39:42.920
commercially. And nothing I said today is an argument against commercial offerings.

39:42.920 --> 39:47.920
It is an argument against proprietary offerings. It's totally fair to charge for something

39:47.920 --> 39:53.920
right. Developers want to eat. Just admins need to eat. We can sell services. And so

39:53.920 --> 40:00.920
I think professional free software infrastructure is the answer to the decay of self-hosted

40:00.920 --> 40:07.920
systems and you know a reasonable approach and some of us we have to figure out by reasonable

40:07.920 --> 40:14.920
approach decentralization where multiple people can offer things without making you to choose

40:14.920 --> 40:18.920
proprietary lock-in is the answer. That's why I think we need to look at VEP 3 without

40:18.920 --> 40:24.920
making you choose proprietary lock-in services because that is one way that could work. If

40:24.920 --> 40:32.920
I look at Filecoin IPFS as an example that actually is working right now not economically

40:32.920 --> 40:36.920
for the people who are offering it because the hardware is too expensive for the money

40:36.920 --> 40:42.920
you can get with it but if you're using Filecoin based storage that is actually pretty cheap

40:42.920 --> 40:50.920
and the problem is that the specialized compute capacity needed to offer it is too expensive

40:50.920 --> 40:57.920
right now but that's just going to be solved with progress in technology and I'm sure that

40:57.920 --> 41:03.920
we'll see some risk five based specialized Filecoin systems in the near future that makes

41:03.920 --> 41:08.920
this affordable. And then we have a way how you can have at least for storage you can

41:08.920 --> 41:15.920
have distributed in fact a good funding model. Other ways are foundations or other peer payment

41:15.920 --> 41:19.920
models or small companies decentralized small companies.

41:20.920 --> 41:26.920
We have three more questions. There was someone over here there and then there and then over

41:26.920 --> 41:37.920
there. So what do you think is the way or the sort of gold standard or end point for

41:37.920 --> 41:45.920
packaging up operational capability with the code and with the application when shipping

41:45.920 --> 41:51.920
to end users who are not software developers and who don't have servers.

41:52.920 --> 42:00.920
I agree with everything you said before. My thesis so far has been that it's straight peer

42:00.920 --> 42:05.920
to peer you know stuff like BitTorrent or Tor or old school file sharing apps would be an

42:05.920 --> 42:12.920
example where if when you got LimeWire you got the app with the data but you know it could

42:12.920 --> 42:16.920
also maybe be web three something but what do you think that looks like for the two billion

42:16.920 --> 42:19.920
people who don't have servers and are software developers.

42:22.920 --> 42:27.920
So I have an example of right now a piece of software that I think is doing this really

42:27.920 --> 42:35.920
well and it's a sync thing. It's a peer to peer you know file synchronization system

42:35.920 --> 42:41.920
that I use between my mobile phone with Android Linux machine bunch of servers and I now use

42:41.920 --> 42:45.920
it for everything where you use everything we need to full copy everywhere.

42:47.920 --> 42:51.920
At least last time I haven't checked for new features it was a debate. They don't have

42:51.920 --> 42:56.920
like on demand replication I didn't have that last time I looked for it. So I use other things

42:56.920 --> 43:01.920
when I want to have things like the Google Drive type thing right where you have something

43:01.920 --> 43:05.920
in the cloud and you only download it when you look at it. For that it wasn't the right

43:05.920 --> 43:12.920
thing last time but I use it for my you know key pass replication things like that for

43:12.920 --> 43:21.920
backup for all documents I want everywhere and it's super easy it just works right like

43:21.920 --> 43:28.920
that. And so my 11 year old daughter uses it. Now the poor kid also has to run a Linux

43:28.920 --> 43:36.920
laptop because I refuse to do anything else. I can tell you the pressure to go into a proprietary

43:36.920 --> 43:43.920
ecosystem of a specific company that sells laptops and phones primarily I think. That's

43:43.920 --> 43:51.920
what they do and watches. It's a fashion business I hear but like the pressure on kids to be

43:51.920 --> 43:59.920
on that because all the other kids have that is enormous. So you know poor kid is in trouble

43:59.920 --> 44:05.920
but she has a swing thing and some other cool things and Roblox works in wine just like

44:05.920 --> 44:14.920
if you are struggling with this. Hi thank you for your talk. I'm wondering whether this

44:14.920 --> 44:24.920
might also come as a problem because of sometimes a need for centralization. I myself move to

44:24.920 --> 44:35.920
Mastodon but I still push all of my toots to Twitter and I would move to GitHub to GitHub

44:35.920 --> 44:41.920
into a local GitLab but if I want to have users on my code I still need to push all

44:41.920 --> 44:51.420
of my code to GitHub as well. So what's the solution with that? I mean I'm in the same

44:51.420 --> 45:00.420
boat. Of course I have a Mastodon account. I'm not super active on Twitter. I try to

45:00.420 --> 45:09.420
do all my code projects on GitLab which is slightly better. It's a more hybrid model

45:09.420 --> 45:16.280
although it's not perfect but I like them. But yeah I think it's a cultural change in

45:16.280 --> 45:25.280
awareness. People need to understand that you need decentralization and we need to create

45:25.280 --> 45:33.880
code and infrastructure and culture that works in the federation to give users a reach. The

45:33.880 --> 45:43.280
problem is reach. It's really a cultural question at the end. I mean the perfect example is

45:43.280 --> 45:50.280
the switch from IRC to Slack as a dominant interaction for developers in many places.

45:50.280 --> 45:58.280
I mean there are really limitations with IRC that become problematic. Technology wise Slack

45:58.280 --> 46:04.280
isn't fundamentally different. It's nicer UI, some additional features and the persistence

46:04.280 --> 46:12.280
that you had to do extra steps to get with IRC. But it's primarily minor improvements

46:12.280 --> 46:21.280
like threading and the web UI and persistence. And then the critical mass effect and the

46:21.280 --> 46:29.280
reach it created. Really the answer is a cultural change where people appreciate and do the

46:29.280 --> 46:34.280
extra work. And it goes back to the earlier question about what's the gold standard for

46:34.280 --> 46:40.280
creating such an app. It's us here who have to drive that and then make it usable for

46:40.280 --> 46:49.280
all the others. That's not different than what happened with free software in general.

46:49.280 --> 46:55.280
We've been through this cycle and I think it's truly equivalent. I mean using free software

46:55.280 --> 47:03.280
20 years ago was hard. I mean when using software was hard but when I installed my first Slack

47:03.280 --> 47:11.280
where that was painful. And then nothing was available and then you had to recompile it

47:11.280 --> 47:19.280
and it behaved randomly whenever you compiled it. So we have to do that.

47:19.280 --> 47:33.280
This has to be the last question. Hi. Hello? Hello? Okay so I agree with what you just

47:33.280 --> 47:40.280
said about cultural change and to give an example of that, for me Microsoft's acquisition

47:40.280 --> 47:44.280
of GitHub was the last straw and I closed my account. But that means that if I want to

47:44.280 --> 47:50.280
contribute to free software projects it's increasingly hard because I'm expected to have

47:50.280 --> 47:56.280
a GitHub account. And it seems to me that anyone here who agrees with what you've been

47:56.280 --> 48:03.280
saying and yet who still uses GitHub or other proprietary software and particularly proprietary

48:03.280 --> 48:09.280
software that they allow to be at the heart of the development of the free software is

48:09.280 --> 48:15.280
being very hypocritical. And so it's up to us surely to as you say take on that pain

48:15.280 --> 48:20.280
but that includes a lot of people in the room who put their hands up when you asked who

48:20.280 --> 48:27.280
has a GitHub account. So I put it to you. Should we not change? We have to go through that pain.

48:27.280 --> 48:33.280
Thank you. Yeah. I agree we have to change. I'll be honest. My presentation part of the

48:33.280 --> 48:37.280
reason why I was struggling I couldn't read my speaker notes because I created it in what's

48:37.280 --> 48:43.280
the defaulted Reddit which is Google presentation, Google Docs and then downloaded it because

48:43.280 --> 48:55.280
I didn't want to look super silly in front of you. So yes it's a hard right. I honestly

48:55.280 --> 49:03.280
believe in, I don't know, who recognizes this t-shirt? You're not watching enough TV or

49:03.280 --> 49:10.280
the wrong. Watch the Expanse, best show ever. But that's from the TV show. That's a TV show.

49:10.280 --> 49:16.280
They changed it. Next time I'll do a tattoo or something. Anyhow, so I believe in the power

49:16.280 --> 49:27.280
of subversion and not the Git predecessor. I actually do not believe, that was great at the

49:27.280 --> 49:35.280
time. Stick with Git. My point is, so for example, I kept my GitHub account. I do contribute

49:35.280 --> 49:40.280
to projects where I need to because I don't want to put too much of a burden on people I'm

49:40.280 --> 49:45.280
trying to collaborate with that I depend on. It's hard. But I do try to problematize it,

49:45.280 --> 49:55.280
bring it up and I do everything I can on alternative platforms. And I think, you know, I

49:55.280 --> 50:03.280
think that's really like adding that extra step of advocacy and pulling people, trying to pull

50:03.280 --> 50:13.280
people over is the best we can do. I just created my, I just created a Noster key and now I'll do

50:13.280 --> 50:19.280
Noster instead of Twitter because that's a fully decentralized thing. But I'll cross post, but

50:19.280 --> 50:24.280
I'll point out that you find me on Noster and if you want me to reply you have to talk to me

50:24.280 --> 50:30.280
on Noster. Things like that. I don't know if we all do it, I think if everyone who comes to

50:30.280 --> 50:58.280
Fostom starts behaving like that, I think we can change things.

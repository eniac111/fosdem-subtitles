1
0:00:00.000 --> 0:00:15.480
Let's entire talk is inspired by a single remark by a former co-worker of mine who just

2
0:00:15.480 --> 0:00:20.800
casually dropped the line that Yama was so simple that nobody could ever attain master

3
0:00:20.800 --> 0:00:21.800
ship in it.

4
0:00:21.800 --> 0:00:26.800
So a question towards the audience, also slight audience participation, sorry, who would tend

5
0:00:26.800 --> 0:00:27.800
to agree?

6
0:00:27.800 --> 0:00:33.680
That is almost nobody.

7
0:00:33.680 --> 0:00:37.480
That's a shame because you would be in good company.

8
0:00:37.480 --> 0:00:45.280
This is in the goat section of every speck of Yama there is.

9
0:00:45.280 --> 0:00:48.440
So let's get a bit into detail.

10
0:00:48.440 --> 0:00:57.560
And the very cool Yama exists to provide printable text presentation of structured data.

11
0:00:57.560 --> 0:01:02.000
And in that regard it is a rival to things like JSON, XML and other formats.

12
0:01:02.000 --> 0:01:03.960
It's been around for quite a while.

13
0:01:03.960 --> 0:01:08.920
We're almost looking into 20 years of Yama now.

14
0:01:08.920 --> 0:01:15.440
It is somewhat interwoven with JSON since version 1.2.

15
0:01:15.440 --> 0:01:19.800
Actually all of JSON is also valid Yama.

16
0:01:19.800 --> 0:01:27.520
That is, they're just introducing an interesting relation because now since I think 2018 JSON

17
0:01:27.520 --> 0:01:35.600
is a strict subset of JavaScript, there's an intersection of Yama and JavaScript now

18
0:01:35.600 --> 0:01:40.200
that is precisely JSON.

19
0:01:40.200 --> 0:01:44.760
Let's not get into the argument if that's good or not.

20
0:01:44.760 --> 0:01:47.360
It's a thing.

21
0:01:47.360 --> 0:01:55.400
If you write a lot of Yama, all of the examples, most of the examples, most of the real life

22
0:01:55.400 --> 0:02:01.120
specimens they will let you believe that there are no real types in Yama.

23
0:02:01.120 --> 0:02:04.560
Actually the opposite is true.

24
0:02:04.560 --> 0:02:06.960
Yama is heavily typed.

25
0:02:06.960 --> 0:02:10.600
Almost everything in a Yama document has a type.

26
0:02:10.600 --> 0:02:11.920
Here's a selection.

27
0:02:11.920 --> 0:02:15.360
They're nothing surprising.

28
0:02:15.360 --> 0:02:19.520
All of the times you see here they are also present in JSON.

29
0:02:19.520 --> 0:02:22.440
That's also inspiring an interesting question.

30
0:02:22.440 --> 0:02:26.200
Let's say you have a Yama document.

31
0:02:26.200 --> 0:02:33.320
Could you just change the syntax to JSON and have a valid presentation?

32
0:02:33.320 --> 0:02:34.320
Would that work?

33
0:02:34.320 --> 0:02:37.320
Oh, you're too good.

34
0:02:37.320 --> 0:02:44.760
I see I affected the wrong audience because no, that doesn't work.

35
0:02:44.760 --> 0:02:48.840
Actually it falls apart with the map type.

36
0:02:48.840 --> 0:02:52.320
The map type in Yama is really, really wide.

37
0:02:52.320 --> 0:02:58.680
It does allow for such things as composite keys to its entries.

38
0:02:58.680 --> 0:03:05.880
If you're really interested, they're introduced by your, what's the token, Crested Mark Space.

39
0:03:05.880 --> 0:03:08.400
So that's a thing.

40
0:03:08.400 --> 0:03:12.200
There are not so basic types.

41
0:03:12.200 --> 0:03:14.640
OMAP is an audit map.

42
0:03:14.640 --> 0:03:18.680
The regular mapping is not ordered.

43
0:03:18.680 --> 0:03:22.760
That is somewhat special.

44
0:03:22.760 --> 0:03:25.240
There's not a complete list, by the way.

45
0:03:25.240 --> 0:03:28.400
There's a way to have Yama inside Yama.

46
0:03:28.400 --> 0:03:29.960
That's nice.

47
0:03:29.960 --> 0:03:35.560
Then there's a type specifically for binary data.

48
0:03:35.560 --> 0:03:42.920
This one is really, really useful provided it actually works.

49
0:03:42.920 --> 0:03:46.160
Try it.

50
0:03:46.160 --> 0:03:53.760
The problem really is in JSON, XML, also in Yama is you can't have certain bytemarks.

51
0:03:53.760 --> 0:03:58.440
So the first 16, I believe, character points, they are off limits.

52
0:03:58.440 --> 0:04:00.600
They are controlled signals.

53
0:04:00.600 --> 0:04:03.880
They can't be part of the stream.

54
0:04:03.880 --> 0:04:07.920
With this type, you can just base 64 everything.

55
0:04:07.920 --> 0:04:14.640
Once your Yama is being passed, that is being expanded into the raw binary.

56
0:04:14.640 --> 0:04:30.600
First example, this is not minimal Yama, but it does help to illustrate a few points.

57
0:04:30.600 --> 0:04:36.720
I suppose a lot of you got a lot to do with say OpenShift, Kubernetes, something like.

58
0:04:36.720 --> 0:04:40.960
You've seen three hyphens a lot, haven't you?

59
0:04:40.960 --> 0:04:41.960
Okay.

60
0:04:41.960 --> 0:04:44.120
Who knows what that does?

61
0:04:44.120 --> 0:04:48.880
It's not the beginning of the document.

62
0:04:48.880 --> 0:04:49.880
Come again.

63
0:04:49.880 --> 0:04:50.880
Not quite, no.

64
0:04:50.880 --> 0:04:52.920
It's not the beginning of the document.

65
0:04:52.920 --> 0:04:57.240
What this is is a document separator.

66
0:04:57.240 --> 0:05:01.040
So what you see here is not actually a Yama document.

67
0:05:01.040 --> 0:05:02.520
It's a Yama stream.

68
0:05:02.520 --> 0:05:07.600
Yama is meant to be streamed, possibly.

69
0:05:07.600 --> 0:05:13.680
Don't do that unless you have a solid message framing because our truncated Yama tends also

70
0:05:13.680 --> 0:05:15.400
to be earlier to Yama.

71
0:05:15.400 --> 0:05:18.360
So I think twice before you do that.

72
0:05:18.360 --> 0:05:25.960
Thing is, most of the tools that you have with Yama will assume there's only one document

73
0:05:25.960 --> 0:05:26.960
ever.

74
0:05:26.960 --> 0:05:32.320
You need to do some convincing to get all the documents out of a stream.

75
0:05:32.320 --> 0:05:39.880
By the way, do you know what happens if you omit those three hyphens?

76
0:05:39.880 --> 0:05:42.000
You do.

77
0:05:42.000 --> 0:05:44.360
Okay.

78
0:05:44.360 --> 0:05:48.000
Pretty much everything you see here, if it's missing, it's implied.

79
0:05:48.000 --> 0:05:49.240
Great, eh?

80
0:05:49.240 --> 0:05:53.600
It's a folder version number.

81
0:05:53.600 --> 0:05:58.240
There's also a bit of homework for you.

82
0:05:58.240 --> 0:06:02.680
There's a chance this is going to break your tools because they do not understand version

83
0:06:02.680 --> 0:06:05.680
1.2.

84
0:06:05.680 --> 0:06:09.440
The majority of the tools are still stuck at 1.1.

85
0:06:09.440 --> 0:06:15.280
Ah, yeah.

86
0:06:15.280 --> 0:06:17.080
Let's get into time a bit.

87
0:06:17.080 --> 0:06:19.080
This is something you see quite common.

88
0:06:19.080 --> 0:06:20.160
What do we have here?

89
0:06:20.160 --> 0:06:28.120
It's a mapping with a single entry, which shares the key variables.

90
0:06:28.120 --> 0:06:32.080
Inside is another mapping for the key app version.

91
0:06:32.080 --> 0:06:34.080
We've got something in it.

92
0:06:34.080 --> 0:06:38.040
Now there's no indication to what data type that is.

93
0:06:38.040 --> 0:06:40.040
It's an integer, right?

94
0:06:40.040 --> 0:06:41.400
You agree?

95
0:06:41.400 --> 0:06:43.320
Depends on your schema.

96
0:06:43.320 --> 0:06:47.760
It depends on your schema.

97
0:06:47.760 --> 0:06:52.080
We're not quite there yet.

98
0:06:52.080 --> 0:06:55.680
This is for most pure YAML.

99
0:06:55.680 --> 0:07:01.440
This is an integer, we agree for the time being.

100
0:07:01.440 --> 0:07:04.200
This is a float, right?

101
0:07:04.200 --> 0:07:06.840
This is a string.

102
0:07:06.840 --> 0:07:10.600
This is still a string.

103
0:07:10.600 --> 0:07:12.720
You may have noticed I omitted a few things.

104
0:07:12.720 --> 0:07:14.720
What's three points?

105
0:07:14.720 --> 0:07:19.280
It depends on your schema.

106
0:07:19.280 --> 0:07:21.280
No.

107
0:07:21.280 --> 0:07:23.000
Yes, it does.

108
0:07:23.000 --> 0:07:29.720
The regular expression for float says three point is a float.

109
0:07:29.720 --> 0:07:33.720
What is point one then?

110
0:07:33.720 --> 0:07:36.160
It's also a float.

111
0:07:36.160 --> 0:07:42.360
If you want to make sure this is really always a string, you may be tempted to do something

112
0:07:42.360 --> 0:07:44.360
like this.

113
0:07:44.360 --> 0:07:46.960
Quota strings are a thing, also in YAML.

114
0:07:46.960 --> 0:07:47.960
Big supplies.

115
0:07:47.960 --> 0:07:50.160
Single quoted also.

116
0:07:50.160 --> 0:07:56.480
The professional may do something like this.

117
0:07:56.480 --> 0:07:58.120
This is a tag.

118
0:07:58.120 --> 0:08:02.680
The two exclamation marks means it's a global tag.

119
0:08:02.680 --> 0:08:03.680
There's global meaning.

120
0:08:03.680 --> 0:08:08.080
I'm running out of time.

121
0:08:08.080 --> 0:08:09.080
It's a string.

122
0:08:09.080 --> 0:08:10.960
I have my word for it.

123
0:08:10.960 --> 0:08:16.320
The true professional who lost a plot made to something like this.

124
0:08:16.320 --> 0:08:20.280
Tags are identified by URNs.

125
0:08:20.280 --> 0:08:24.080
Also there's a name spacing mechanism in YAML.

126
0:08:24.080 --> 0:08:31.360
That's the part where you go, yay, name spaces.

127
0:08:31.360 --> 0:08:36.000
Most features, this is something you do not commonly see.

128
0:08:36.000 --> 0:08:39.240
Most users of YAML are probably unaware this exists.

129
0:08:39.240 --> 0:08:47.000
But you have some tools to reduce duplication, redundancy within your structures.

130
0:08:47.000 --> 0:08:48.000
One is anchors.

131
0:08:48.000 --> 0:08:51.040
They're basically marker.

132
0:08:51.040 --> 0:08:56.480
One are alliances that do invoke those anchors.

133
0:08:56.480 --> 0:08:58.320
Pretty nifty.

134
0:08:58.320 --> 0:09:06.800
So these do give way for an attack known as one brilliant loss.

135
0:09:06.800 --> 0:09:17.320
It's basically you can set an anchor to an array or list of alliances who themselves

136
0:09:17.320 --> 0:09:21.520
contain a lot of anchors.

137
0:09:21.520 --> 0:09:27.600
This allows for a very complex presentation of a very complex structure that quickly expands

138
0:09:27.600 --> 0:09:31.400
plenty of code.

139
0:09:31.400 --> 0:09:41.960
So if you happen to consume YAML from untrusted sources, this is something you should know.

140
0:09:41.960 --> 0:09:45.720
Magic operator, this is another really nifty tool.

141
0:09:45.720 --> 0:09:48.520
It's only valid in 1.1 of YAML.

142
0:09:48.520 --> 0:09:51.520
It got immediately deprecated in 1.2.

143
0:09:51.520 --> 0:09:57.280
And also it's a data type.

144
0:09:57.280 --> 0:10:03.960
It's there to basically merge mappings into other mappings.

145
0:10:03.960 --> 0:10:05.880
Great stuff.

146
0:10:05.880 --> 0:10:09.640
So these are examples that really happened.

147
0:10:09.640 --> 0:10:13.200
Do you see, I should explain this.

148
0:10:13.200 --> 0:10:17.680
This is part of the GitLab setup as a script.

149
0:10:17.680 --> 0:10:24.000
This is expected to be a sequence of strings to be executed on the shell.

150
0:10:24.000 --> 0:10:25.000
That's not what it is.

151
0:10:25.000 --> 0:10:28.000
Who sees the issue?

152
0:10:28.000 --> 0:10:29.000
No?

153
0:10:29.000 --> 0:10:32.000
Oh, very good, yes.

154
0:10:32.000 --> 0:10:38.760
That's not a string.

155
0:10:38.760 --> 0:10:40.680
It's a mapping.

156
0:10:40.680 --> 0:10:46.440
Because of the single pass design of YAML, the algorithm is very, very greedy.

157
0:10:46.440 --> 0:10:50.080
So it sees that colon there and says, oh, great.

158
0:10:50.080 --> 0:10:52.320
This is a mapping.

159
0:10:52.320 --> 0:10:57.200
And completely ignores the cretations.

160
0:10:57.200 --> 0:10:59.680
So how do you fix this?

161
0:10:59.680 --> 0:11:03.400
There's a bunch of ways.

162
0:11:03.400 --> 0:11:09.520
Yes, I think the third one is my favorite.

163
0:11:09.520 --> 0:11:13.320
The fourth is really unsafe because once again, raw binary data.

164
0:11:13.320 --> 0:11:17.160
I'm sorry to know that.

165
0:11:17.160 --> 0:11:18.720
This is another favorite.

166
0:11:18.720 --> 0:11:23.080
So again, GitLab CI, we have a mapping.

167
0:11:23.080 --> 0:11:27.480
We tried to set some variables for GitLab to expand.

168
0:11:27.480 --> 0:11:33.080
What is the content of bar?

169
0:11:33.080 --> 0:11:35.840
I must remind you, mappings don't have order.

170
0:11:35.840 --> 0:11:37.840
Oh, who knows?

171
0:11:37.840 --> 0:11:41.640
I thought the answer was fast.

172
0:11:41.640 --> 0:11:42.640
Oh, no.

173
0:11:42.640 --> 0:11:45.240
It's going to be empty.

174
0:11:45.240 --> 0:11:46.240
It's going to be empty.

175
0:11:46.240 --> 0:11:50.640
The mapping doesn't have an order.

176
0:11:50.640 --> 0:11:54.280
The YAML implementation in GitLab has other ideas.

177
0:11:54.280 --> 0:11:57.840
So it takes that mapping and applies an order on it.

178
0:11:57.840 --> 0:12:02.880
So bar goes top because of the order.

179
0:12:02.880 --> 0:12:06.320
And then there's a single round of interpolations.

180
0:12:06.320 --> 0:12:10.320
And foo at that point is empty as a variable.

181
0:12:10.320 --> 0:12:12.320
So how do you fix that?

182
0:12:12.320 --> 0:12:21.680
Either way out is you rename your variables or this.

183
0:12:21.680 --> 0:12:25.680
Thank you.

184
0:12:25.680 --> 0:12:29.080
Thank you.

185
0:12:29.080 --> 0:12:37.240
Oh, this never happened to me, but it's been too good to pass.

186
0:12:37.240 --> 0:12:38.520
What do we have here?

187
0:12:38.520 --> 0:12:40.080
What does languages contain?

188
0:12:40.080 --> 0:12:47.160
It's a sequence of?

189
0:12:47.160 --> 0:12:50.640
We all need to drink.

190
0:12:50.640 --> 0:12:53.800
It's one string and one Boolean.

191
0:12:53.800 --> 0:13:01.760
Because no, which is supposed to present Norwegian here, is accepted as a Boolean.

192
0:13:01.760 --> 0:13:05.120
So you need to tag that or quote it.

193
0:13:05.120 --> 0:13:08.320
How are you, you wish?

194
0:13:08.320 --> 0:13:17.240
So my observations, because of the cases of the hidden complexity, there's huge disparity

195
0:13:17.240 --> 0:13:21.160
in features that various tools actually support.

196
0:13:21.160 --> 0:13:24.040
They also show different behavior.

197
0:13:24.040 --> 0:13:25.400
It's one hot mess.

198
0:13:25.400 --> 0:13:29.000
I can't put it in other words.

199
0:13:29.000 --> 0:13:35.420
Also if you're writing YAML, it is admittedly really a pleasure.

200
0:13:35.420 --> 0:13:39.680
It's easy to type, but you can never let your guard down.

201
0:13:39.680 --> 0:13:45.960
YAML would try to do a lot of lag for you, being very accommodating in sometimes the

202
0:13:45.960 --> 0:13:52.040
worst way possible.

203
0:13:52.040 --> 0:13:57.840
Some proposals I have, because with the versions of YAML really do different behavior, you

204
0:13:57.840 --> 0:14:02.760
should start to tag your streams accordingly.

205
0:14:02.760 --> 0:14:07.520
You should see that the tools you use for consuming YAML are properly configured.

206
0:14:07.520 --> 0:14:11.560
Things like language specific extensions.

207
0:14:11.560 --> 0:14:18.480
Part of the YAML streams could be evaluated in the process, read, execute it.

208
0:14:18.480 --> 0:14:21.800
That's a bit scary.

209
0:14:21.800 --> 0:14:30.480
As most of YAML is relatively simple, the complexity is mostly because it's deeply nested

210
0:14:30.480 --> 0:14:34.040
and you can't properly edit it.

211
0:14:34.040 --> 0:14:36.520
Strict YAML may be a solution.

212
0:14:36.520 --> 0:14:42.600
It's a strict subset of YAML with a lot of the ambiguity removed.

213
0:14:42.600 --> 0:14:46.720
Way easier, safer, way easier.

214
0:14:46.720 --> 0:14:49.720
Turning support is so-so.

215
0:14:49.720 --> 0:14:52.800
I teased a question with this talk.

216
0:14:52.800 --> 0:14:59.280
The question could be, YAML is exactly then the answer if all you wanted was JSON with

217
0:14:59.280 --> 0:15:03.400
comments.

218
0:15:03.400 --> 0:15:07.800
Some other niceties as well, but that's pretty much it.

219
0:15:07.800 --> 0:15:08.800
This concludes my talk.

220
0:15:08.800 --> 0:15:09.800
Thank you very much.

221
0:15:09.800 --> 0:15:10.800
You've been terrific.

222
0:15:10.800 --> 0:15:11.800
Is there any questions?

223
0:15:11.800 --> 0:15:12.800
Please repeat the questions.

224
0:15:12.800 --> 0:15:13.800
We've got four seconds.

225
0:15:13.800 --> 0:15:14.800
Is JSON any better?

226
0:15:14.800 --> 0:15:15.800
There you have it.

227
0:15:15.800 --> 0:15:31.960
It depends on what your use case is really.

228
0:15:31.960 --> 0:15:34.960
Repeat the question please.

229
0:15:34.960 --> 0:15:39.280
Oh yes, the question was, was JSON any better?

230
0:15:39.280 --> 0:15:41.280
So yes.

231
0:15:41.280 --> 0:15:49.160
Thank you very much again.


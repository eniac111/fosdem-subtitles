1
0:00:00.000 --> 0:00:17.720
I'm going to be presented by two amazing researchers, Iraklis and Christos.

2
0:00:17.720 --> 0:00:20.920
Good morning, thank you for the introduction, thank you for being here and attending our

3
0:00:20.920 --> 0:00:22.400
presentation.

4
0:00:22.400 --> 0:00:27.640
So I'm Iraklis Varlamis and here is Christos Cronis.

5
0:00:27.640 --> 0:00:33.880
We come from Harakopi University but here we are also representing the Open Technology

6
0:00:33.880 --> 0:00:38.920
Alliance, the Greek Open Technology Alliance for Open Source Software.

7
0:00:38.920 --> 0:00:45.880
So we will present today Fosbot which is a project that started a couple of years ago

8
0:00:45.880 --> 0:00:53.040
in terms of the Google Summer of Code as an open design, an open source software robot

9
0:00:53.040 --> 0:01:00.120
and gradually it evolved to what you see here which is a more concrete, let's say, robot,

10
0:01:00.120 --> 0:01:07.400
a more concrete design that is specifically targeted to educators in our educational levels.

11
0:01:07.400 --> 0:01:12.680
So together with me I have Christos and I will give a follow-up to Christos Cronis who

12
0:01:12.680 --> 0:01:21.560
is the lead developer of the team, Fosbot, and also the designer of this robot.

13
0:01:21.560 --> 0:01:24.600
So Christos, the floor is yours.

14
0:01:24.600 --> 0:01:25.600
Thank you.

15
0:01:25.600 --> 0:01:27.600
Hello, I'm Christos.

16
0:01:27.600 --> 0:01:32.840
I would like first to introduce the team behind the Fosbot.

17
0:01:32.840 --> 0:01:38.360
Let's start with my PhD supervisor, Professor Iraklis Varlamis, who is the coordinator of

18
0:01:38.360 --> 0:01:43.760
the project, me as the designer of the robot including the hardware and the software, Elisari

19
0:01:43.760 --> 0:01:49.920
and Vanay who are front-end and backend developers and past Google Summer of Code contributors

20
0:01:49.920 --> 0:01:56.120
of the project, Dimitris and Jorvos are backend developers and assemblers of the physical

21
0:01:56.120 --> 0:02:02.680
robot, and finally Manusos who is a backend developer and also the developer of the Fosbot

22
0:02:02.680 --> 0:02:04.040
simulator.

23
0:02:04.040 --> 0:02:13.000
Now, so this is the Fosbot, also we have a physical version of the robot in the table.

24
0:02:13.000 --> 0:02:20.000
Let's start with an overview of the hardware and design aspects of the Fosbot.

25
0:02:20.000 --> 0:02:26.560
On the front side of the robot we have a multi-core RGB lead on the top left, a photo resistor

26
0:02:26.560 --> 0:02:30.840
on the top right and ultrasonic sensor in the middle.

27
0:02:30.840 --> 0:02:41.160
The entire body of the robot is 3D printable in any FDM printer with bed size 220 by 220

28
0:02:41.160 --> 0:02:42.760
millimeters.

29
0:02:42.760 --> 0:02:48.160
The design is customizable and easy to assemble.

30
0:02:48.160 --> 0:02:54.240
At the bottom of the robot there are three IR optical sensors suitable for line following

31
0:02:54.240 --> 0:03:00.680
or edge detection application.

32
0:03:00.680 --> 0:03:06.560
The robot moves based on two DC motors and the free rotor on the back side.

33
0:03:06.560 --> 0:03:14.160
This motor have odometers to measure the movement of the robot and there is also a

34
0:03:14.160 --> 0:03:20.480
three axis accelerometer and gyroscope sensor inside.

35
0:03:20.480 --> 0:03:27.480
At the back of the robot there is a speaker and an off switch charging port and the robot

36
0:03:27.480 --> 0:03:33.640
powered by three lithium ion rechargeable batteries.

37
0:03:33.640 --> 0:03:39.480
On the top of the robot there are some unique features, a pulling component in the back

38
0:03:39.480 --> 0:03:41.520
side of the robot.

39
0:03:41.520 --> 0:03:48.040
That component gives the opportunity to user to attach small object, let's say using a

40
0:03:48.040 --> 0:03:56.440
rope, in order to measure how the extra weight affects the movement of the robot.

41
0:03:56.440 --> 0:03:59.320
Also we have a large detachable cover.

42
0:03:59.320 --> 0:04:05.240
It's the white circular piece on the top.

43
0:04:05.240 --> 0:04:13.280
That component is Lego brick compatible and also have a hole in the front side.

44
0:04:13.280 --> 0:04:19.200
This hole drives to the bottom of the robot and allowing the market to be attached for

45
0:04:19.200 --> 0:04:23.200
programmatic drawing.

46
0:04:23.200 --> 0:04:31.800
Now let's summarize the key features from the hardware design aspects.

47
0:04:31.800 --> 0:04:36.960
The robot is 3D readable and offers repairability and customization.

48
0:04:36.960 --> 0:04:43.560
Can be designed to be used with common electronics.

49
0:04:43.560 --> 0:04:49.000
In the current version the brain of the robot is based on the Raspberry Pi but we already

50
0:04:49.000 --> 0:04:53.760
see some variation of the robot with Arduino or micro bit inside.

51
0:04:53.760 --> 0:05:01.720
It's open source and open design of course and it comes in a low cost around 90 to 120

52
0:05:01.720 --> 0:05:03.720
euros.

53
0:05:03.720 --> 0:04:49.000
In the slide you can see our lab on Her

54
0:05:05.800 --> 0:04:49.000
Her

55
0:05:05.800 --> 0:05:05.800
Her

56
0:05:05.800 --> 0:05:10.880
University and some pictures from let's say the assembly line of the robot, from the physical

57
0:05:10.880 --> 0:05:21.080
robot or also have some pictures from different assembly phases of the robot.

58
0:05:21.080 --> 0:05:23.120
Now we'll speak about the software.

59
0:05:23.120 --> 0:05:27.640
We have created the custom platform built in the robot with three modes.

60
0:05:27.640 --> 0:05:32.280
The Gitter Carder mode, the Elementor School mode and the High School or Advanced mode.

61
0:05:32.280 --> 0:05:38.120
The Gitter Carder mode features a friendly UI with card blocks based on Google's Blockly.

62
0:05:38.120 --> 0:05:44.320
Additionally it's expandable with the options to add new cards to execute Python or Blockly

63
0:05:44.320 --> 0:05:45.520
scripts.

64
0:05:45.520 --> 0:05:51.920
For the Elementor School we have a custom user interface once again based on more complicated

65
0:05:51.920 --> 0:06:00.760
Google's Blockly version that uses custom code blocks for all the sensors of the robot.

66
0:06:00.760 --> 0:06:09.640
The experience is similar to Scratch and that makes the robot to be easy, that offers easy

67
0:06:09.640 --> 0:06:11.880
direction with the robot.

68
0:06:11.880 --> 0:06:15.600
Finally we have the High School or Advanced mode.

69
0:06:15.600 --> 0:06:20.720
This mode based on Jupyter Notebooks and the native Python language.

70
0:06:20.720 --> 0:06:27.360
This mode is under construction but will be available soon.

71
0:06:27.360 --> 0:06:30.600
Now let's take a look to the platform UI.

72
0:06:30.600 --> 0:06:34.000
The platform, this is the platform's home screen.

73
0:06:34.000 --> 0:06:37.880
That home screen allows the creation of multiple projects.

74
0:06:37.880 --> 0:06:45.440
Also we have the ability to import or import export of shared project between users.

75
0:06:45.440 --> 0:06:50.760
Also using the little cog in the top right we can modify the behaviors on some blocks

76
0:06:50.760 --> 0:06:55.160
such as the default distance, let's say for one step movement.

77
0:06:55.160 --> 0:07:08.280
The icon with the three ABC cubes in the lower right offers access to the Kitter Kardon mode.

78
0:07:08.280 --> 0:07:12.200
Now we see the Kitter Kardon mode.

79
0:07:12.200 --> 0:07:17.280
The Kitter Kardon mode utilizes a simplified version of Blockly using card based blocks

80
0:07:17.280 --> 0:07:19.720
for basic actions.

81
0:07:19.720 --> 0:07:25.000
In the bottom right corner we can see an example of how this mode can be used in a classroom

82
0:07:25.000 --> 0:07:26.000
setting.

83
0:07:26.000 --> 0:07:31.720
In this example we are trying to teach students the numbers through a greeted carpet with

84
0:07:31.720 --> 0:07:35.440
numbers on it.

85
0:07:35.440 --> 0:07:40.960
In the elementary school mode we have as already said a fully custom version of Blockly.

86
0:07:40.960 --> 0:07:46.840
On the left side we have different categories of blocks including mathematics, programming,

87
0:07:46.840 --> 0:07:49.400
movement and sensing.

88
0:07:49.400 --> 0:07:55.120
On the right there are some control buttons and a terminal window for printing real time

89
0:07:55.120 --> 0:07:59.560
measurements and messages.

90
0:07:59.560 --> 0:08:01.720
Now for the advanced mode.

91
0:08:01.720 --> 0:08:05.400
The advanced mode of the robot is based in Jupiter.

92
0:08:05.400 --> 0:08:12.600
The user can directly program the robot using native Python language combined with our custom

93
0:08:12.600 --> 0:08:17.920
robot library and the code can be combined with text and images.

94
0:08:17.920 --> 0:08:24.240
Then the whole page can be exported including the result of the program execution as an

95
0:08:24.240 --> 0:08:30.120
experimental report in a class.

96
0:08:30.120 --> 0:08:33.760
Now for the action.

97
0:08:33.760 --> 0:08:38.200
This is a line following program written using Blockly.

98
0:08:38.200 --> 0:08:43.960
It's a very common task for students when we teach them robotics.

99
0:08:43.960 --> 0:08:46.360
We have some videos to present you.

100
0:08:46.360 --> 0:08:51.720
On the left you see a video of the robot line following a line and stopping when it detects

101
0:08:51.720 --> 0:08:54.200
an obstacle in front of it.

102
0:08:54.200 --> 0:08:59.400
On the right we have a video of the robot running the same code but this time following

103
0:08:59.400 --> 0:09:01.360
the line in the loop.

104
0:09:01.360 --> 0:09:07.280
When a colleague puts her hand in front of the robot it stops and waits until no obstacle

105
0:09:07.280 --> 0:09:10.280
is detected.

106
0:09:10.280 --> 0:09:24.080
Additionally, the physical robot will also have a simulated environment.

107
0:09:24.080 --> 0:09:32.120
We have developed a library and a custom simulation environment for our robot using CopleiaSim.

108
0:09:32.120 --> 0:09:37.800
This was a crucial step for us because it eliminates the need for a physical robot and

109
0:09:37.800 --> 0:09:42.800
that means that the experimentation with the robot comes in no cost.

110
0:09:42.800 --> 0:09:50.000
Our software platform works seamlessly in both the physical and the simulated environment

111
0:09:50.000 --> 0:09:54.440
allowing the project to run identically in either setting.

112
0:09:54.440 --> 0:09:59.000
On the left you can see a video of a simple example of our platform combined with the

113
0:09:59.000 --> 0:10:00.000
simulator.

114
0:10:00.000 --> 0:10:09.360
Here are more examples of our virtual environment.

115
0:10:09.360 --> 0:10:13.320
Those examples created for different teaching scenarios.

116
0:10:13.320 --> 0:10:18.760
Also we have a video in the top right that demonstrates a line following project inside

117
0:10:18.760 --> 0:10:22.120
the simulator.

118
0:10:22.120 --> 0:10:31.240
We are trying to constantly improve the robot and we have received strong interest from

119
0:10:31.240 --> 0:10:33.120
our university students.

120
0:10:33.120 --> 0:10:38.720
We have already students creating educational material and developing new features such

121
0:10:38.720 --> 0:10:46.960
as the real-time graphs and soon we will hope to integrate the new features to the main

122
0:10:46.960 --> 0:10:49.000
platform.

123
0:10:49.000 --> 0:10:55.600
Now let's dig deeper into the workings of our platform.

124
0:10:55.600 --> 0:11:00.360
Firstly we have created a custom library to simplify the process of controlling the electronic

125
0:11:00.360 --> 0:11:02.760
parts of the robot.

126
0:11:02.760 --> 0:11:07.680
That library is based of my 2019 Google Summer of Code contribution.

127
0:11:07.680 --> 0:11:14.880
The platform was built using Flask, Socket.io, Python, Blockly and can be deployed to the

128
0:11:14.880 --> 0:11:20.840
robot via token containers for easy distribution and maintenance.

129
0:11:20.840 --> 0:11:27.760
The robot after powering up tried to connect to a non-WiFi and if that is not possible

130
0:11:27.760 --> 0:11:31.640
then the robot creates its own wireless access point.

131
0:11:31.640 --> 0:11:38.720
The access to the platform can be gained through a user preferred browser such as Chromium

132
0:11:38.720 --> 0:11:46.880
and finally all the necessary tools are already pre-installed inside the robot.

133
0:11:46.880 --> 0:11:51.520
This allows a hassle-free experience as the user never needs to install anything to their

134
0:11:51.520 --> 0:11:54.560
computer.

135
0:11:54.560 --> 0:11:59.520
In this slide we present a brief overview of how users can be accessed at multiple levels

136
0:11:59.520 --> 0:12:00.520
of the robot.

137
0:12:00.520 --> 0:12:06.640
The top level is designed for less experienced users and is where the platform resides inside

138
0:12:06.640 --> 0:12:09.840
multiple docker containers.

139
0:12:09.840 --> 0:12:15.000
The access to this layer can be achieved through a web browser.

140
0:12:15.000 --> 0:12:22.080
The second and third levels are designed for advanced users with knowledge of Python language

141
0:12:22.080 --> 0:12:29.600
and bus and can be accessed through SSH.

142
0:12:29.600 --> 0:12:33.560
Before concluding I would like to present the future prospects for the robot and its

143
0:12:33.560 --> 0:12:39.000
potential use in higher education.

144
0:12:39.000 --> 0:12:44.700
In Herakopio University we have already started to examine the potential of using the force

145
0:12:44.700 --> 0:12:50.680
boot as a machine learning robotics platform by combining the custom high-level library,

146
0:12:50.680 --> 0:12:56.560
the simulated environment and the physical robot with advanced algorithms.

147
0:12:56.560 --> 0:13:01.680
With this combination the force boot has the potential to be used in various ways, for

148
0:13:01.680 --> 0:13:03.840
example, reinforcement learning.

149
0:13:03.840 --> 0:13:11.440
Additionally, if attached to the robot some advanced sensors such as cameras or lighters,

150
0:13:11.440 --> 0:13:19.720
it can be used as a self-driving platform or a computer vision platform.

151
0:13:19.720 --> 0:13:22.240
So that brings us to the end of our presentation.

152
0:13:22.240 --> 0:13:24.040
I hope you enjoyed it.

153
0:13:24.040 --> 0:13:31.040
Before closing I want to add a couple of things to this excellent presentation of Christos.

154
0:13:31.040 --> 0:13:37.600
First of all I have to say that technology wouldn't be successful without content, first

155
0:13:37.600 --> 0:13:39.760
of all, and without people.

156
0:13:39.760 --> 0:13:48.520
With the help of Open Technologies Alliance we also managed to have a great group of educators,

157
0:13:48.520 --> 0:13:54.840
primary and secondary education, that currently are creating or developing educational activities

158
0:13:54.840 --> 0:14:00.880
and educational content for teachers in Greece.

159
0:14:00.880 --> 0:14:07.320
They are currently running some seminars for force boot and they are currently educating

160
0:14:07.320 --> 0:14:16.320
them on programming and using force boot in their teaching activities.

161
0:14:16.320 --> 0:14:22.560
Over 1,000 or almost 1,000 teachers around Greece.

162
0:14:22.560 --> 0:14:29.240
So the benefit is that we have the virtual simulation environment of force boot so they

163
0:14:29.240 --> 0:14:33.600
can start working in the simulation environment and then everything that they have created

164
0:14:33.600 --> 0:14:38.680
there, they can directly apply it to force boot, they can print the force boot, assemble

165
0:14:38.680 --> 0:14:42.480
it and use it in the actual process.

166
0:14:42.480 --> 0:14:48.680
Another thing that I would like to add to the higher education part of this presentation

167
0:14:48.680 --> 0:14:54.120
of this work is that we are currently working with some colleagues in the university in

168
0:14:54.120 --> 0:15:00.400
order to develop a short term curriculum, let's say one year curriculum with basic IT

169
0:15:00.400 --> 0:15:07.840
courses such as data management courses, IoT programming, basic Python programming, machine

170
0:15:07.840 --> 0:15:13.760
learning and AI as Christo said, in order to develop content that in most of the activities

171
0:15:13.760 --> 0:15:17.840
we'll use force boot as its main demonstration platform.

172
0:15:17.840 --> 0:15:21.560
So this is another effort that we are trying to do, we are working on at the moment and

173
0:15:21.560 --> 0:15:25.640
we hope that it will soon bring us some results.

174
0:15:25.640 --> 0:15:53.640
And I would like to thank you once again for your attendance.


1
0:00:00.000 --> 0:00:11.720
First thing first, the Dagger team was kind enough to send me some stickers.

2
0:00:11.720 --> 0:00:13.640
This is really the reason why I go to conferences.

3
0:00:13.640 --> 0:00:17.320
So if you want to pick some up, I will leave it somewhere here.

4
0:00:17.320 --> 0:00:19.920
Okay, cool.

5
0:00:19.920 --> 0:00:23.960
So, good evening everyone.

6
0:00:23.960 --> 0:00:27.120
Thank you for joining my presentation today.

7
0:00:27.120 --> 0:00:32.320
My name is Mark, and for the last couple of years, or maybe for the better part of the

8
0:00:32.320 --> 0:00:37.960
decade, I've been helping engineering teams focus on their business, building their business

9
0:00:37.960 --> 0:00:43.040
applications instead of worrying about things like deployments or CI, CD, or stuff like

10
0:00:43.040 --> 0:00:44.400
that.

11
0:00:44.400 --> 0:00:50.720
And currently, my current title at Cisco is Techly, but by the way, is there anyone here

12
0:00:50.720 --> 0:00:54.800
who saw my presentation in the morning in the Goja room?

13
0:00:54.800 --> 0:00:55.800
Okay.

14
0:00:55.800 --> 0:01:00.840
So I'm going to make it up to you guys.

15
0:01:00.840 --> 0:01:05.660
So please laugh at my jokes as well, even though you are recording them.

16
0:01:05.660 --> 0:01:11.560
So I decided that I would come clean here today, that this is a completely fake title,

17
0:01:11.560 --> 0:01:16.840
and that in fact my real job is a YAML engineer.

18
0:01:16.840 --> 0:01:20.720
So anyone else want to come clean?

19
0:01:20.720 --> 0:01:21.720
Unburden themselves?

20
0:01:21.720 --> 0:01:22.720
Okay, cool.

21
0:01:22.720 --> 0:01:30.720
Oh yeah, that's engineer probably, that's an overstatement.

22
0:01:30.720 --> 0:01:33.800
So let's talk about CI, CD.

23
0:01:33.800 --> 0:01:39.260
And we do have a bunch of CI, CD services available today, and it's still evolving continuously,

24
0:01:39.260 --> 0:01:48.120
but we do have a couple of challenges that causes pain to developers and people every

25
0:01:48.120 --> 0:01:49.120
day.

26
0:01:49.120 --> 0:01:55.400
And there are the kind of hints that one of them, YAML, like, man, you put a space in

27
0:01:55.400 --> 0:01:58.480
the wrong place and it just breaks over.

28
0:01:58.480 --> 0:02:03.120
And you don't even know why, because the CI tool may not even tell you where that extra

29
0:02:03.120 --> 0:02:04.960
space is.

30
0:02:04.960 --> 0:02:09.680
So YAML is really one of the core pains of all the CI solutions today.

31
0:02:09.680 --> 0:02:15.680
And yeah, I know there is Jenkins and Groovy, which is inverse, but YAML is really the standard

32
0:02:15.680 --> 0:02:17.480
of CI, CD languages these days.

33
0:02:17.480 --> 0:02:22.160
And there are some places, like, there are a couple solutions where it's kind of okay

34
0:02:22.160 --> 0:02:30.000
for simple pipelines, but for more complex cases, it's just a nightmare.

35
0:02:30.000 --> 0:02:36.640
Then CI has this tendency to break for no obvious reason.

36
0:02:36.640 --> 0:02:41.840
Like one day the pipeline works and the other way it just doesn't.

37
0:02:41.840 --> 0:02:48.840
And well, for operations, for deploying your application to a production environment, you

38
0:02:48.840 --> 0:02:52.100
can always say, okay, ops problem, let them solve.

39
0:02:52.100 --> 0:02:54.360
But for CI, that's not really okay.

40
0:02:54.360 --> 0:02:58.720
It's like developers have to interface with interact with CI.

41
0:02:58.720 --> 0:03:04.480
And if the CI is breaking, then it's probably the developers who have to fix it.

42
0:03:04.480 --> 0:03:09.240
And the problem with current CI solutions today is that we don't really have, like,

43
0:03:09.240 --> 0:03:11.920
an easy way to debug CI issues.

44
0:03:11.920 --> 0:03:16.440
Like, if there is something wrong, you probably have to guess where the problem is, maybe

45
0:03:16.440 --> 0:03:22.880
add a few echo lines to the YAML file, push the whole thing to the repository, wait for

46
0:03:22.880 --> 0:03:28.620
the CI to get triggered by the repository, and then go through this whole long feedback

47
0:03:28.620 --> 0:03:30.120
loop over and over again.

48
0:03:30.120 --> 0:03:35.120
You see a lot of people nodding.

49
0:03:35.120 --> 0:03:41.400
So when something goes wrong, it's your job to fix it, and it takes a lot of time, and

50
0:03:41.400 --> 0:03:43.160
it's just painful.

51
0:03:43.160 --> 0:03:51.920
And sometimes, sometimes it's actually not the CI's fault, but your fault.

52
0:03:51.920 --> 0:03:56.080
The code doesn't or the test doesn't pass, the linter doesn't pass.

53
0:03:56.080 --> 0:04:03.440
And that's often caused by things like having different versions in the CI and different

54
0:04:03.440 --> 0:04:06.360
versions in your development environment.

55
0:04:06.360 --> 0:04:14.000
And there are tools and there are, like, ways to make those as close to each other as possible,

56
0:04:14.000 --> 0:04:16.880
but still, this is happening very often.

57
0:04:16.880 --> 0:04:21.040
Like, I had this problem, like, a week ago.

58
0:04:21.040 --> 0:04:26.920
So sometimes it's just your code that's not working with the CI, and you have to go through

59
0:04:26.920 --> 0:04:33.200
the same feedback loop, trying to push a change, hoping that it will fix your problem, and

60
0:04:33.200 --> 0:04:39.320
of course it doesn't work for the first time, so you do it over and over again until after

61
0:04:39.320 --> 0:04:46.880
an hour, maybe if you sacrifice something to the CI gods, it works.

62
0:04:46.880 --> 0:04:53.640
So I'm pretty sure there are other challenges with CI, but let's see how Dagger may be able

63
0:04:53.640 --> 0:04:56.120
to solve some of these challenges here.

64
0:04:56.120 --> 0:04:59.200
So first of all, who has heard about Dagger?

65
0:04:59.200 --> 0:05:01.200
Who knows what Dagger is?

66
0:05:01.200 --> 0:05:02.960
Oh, cool.

67
0:05:02.960 --> 0:05:10.040
So Dagger is a programmable CI-CD solution, and portable is a pretty great feature here,

68
0:05:10.040 --> 0:05:14.400
because instead of going through the total feedback loop I was talking about, you can

69
0:05:14.400 --> 0:05:22.040
run your CI-CD PyPy on your own local machine and figure out what's wrong much sooner than

70
0:05:22.040 --> 0:05:25.400
by pushing to the GitHub repository and waiting for the CI over and over again.

71
0:05:25.400 --> 0:05:32.200
So it's much quicker that way to debug issues either related to the CI or your code, and

72
0:05:32.200 --> 0:05:35.840
it's also much easier to build the pipeline in the first place, like when you build a

73
0:05:35.840 --> 0:05:40.840
new CI pipeline for a new project, you have to go through the same feedback loop, because

74
0:05:40.840 --> 0:05:46.000
you have to add new steps and figure out if it works or not, and if it doesn't, then you

75
0:05:46.000 --> 0:05:48.680
have to figure out how to add the right parameters.

76
0:05:48.680 --> 0:05:55.080
So even building new pipelines is way easier, because the whole thing is portable.

77
0:05:55.080 --> 0:06:00.640
The other thing that makes Dagger great is that you can basically write your pipelines

78
0:06:00.640 --> 0:06:03.280
in any language.

79
0:06:03.280 --> 0:06:10.680
Dagger officially supports a couple languages, like Go, Python, TypeScript, and Q, but basically

80
0:06:10.680 --> 0:06:16.240
any language that can talk to a GraphQL API, because that's what's under the hood, any

81
0:06:16.240 --> 0:06:22.080
language that can talk to a GraphQL API basically can be used to build your own pipelines with

82
0:06:22.080 --> 0:06:23.560
Dagger.

83
0:06:23.560 --> 0:06:28.680
And if you combine these two traits, like being portable and being able to write pipelines

84
0:06:28.680 --> 0:06:33.040
in your own language, it also points to the fact that you can completely avoid vendor

85
0:06:33.040 --> 0:06:34.040
locking.

86
0:06:34.040 --> 0:06:40.720
Obviously you would still need some sort of CI service, and you would need a thin layer

87
0:06:40.720 --> 0:06:46.560
of integration that would run Dagger itself, but once you have a portable pipeline written

88
0:06:46.560 --> 0:06:53.320
in your own format, in your own language, not in a proprietary or a CI-specific YAML

89
0:06:53.320 --> 0:06:58.960
format, you are not logged into the CI vendor you are using right now, and you may think

90
0:06:58.960 --> 0:07:05.000
you don't really switch like CI providers often, but that happens when they buy your

91
0:07:05.000 --> 0:07:09.360
company and then you have to move from one provider to another, and then you have to

92
0:07:09.360 --> 0:07:13.480
move again because reasons.

93
0:07:13.480 --> 0:07:20.120
And the fourth reason, or the fourth thing that makes Dagger great is caching.

94
0:07:20.120 --> 0:07:27.200
Now most CI services already have some sort of caching solution that you can use to cache

95
0:07:27.200 --> 0:07:32.600
like intermediary artifacts or dependencies or whatever you want to store in a cache that

96
0:07:32.600 --> 0:07:37.880
you don't want to download or compile every single time when your CI pipeline runs, but

97
0:07:37.880 --> 0:07:42.120
you still have to configure it properly and you have to make sure that you have the right

98
0:07:42.120 --> 0:07:47.840
caching keys, you have to add the right paths to the caching configuration, and you may

99
0:07:47.840 --> 0:07:52.840
either end up with a huge cache at the end of the day or you may not use cache at all.

100
0:07:52.840 --> 0:07:56.200
So if you don't configure it properly, it may not work.

101
0:07:56.200 --> 0:08:04.160
With Dagger you get caching by default, and by default I mean every single step in your

102
0:08:04.160 --> 0:08:07.760
pipeline, the result of that run will be cached.

103
0:08:07.760 --> 0:08:12.640
Similarly how a Docker file works, like every single instruction, the result of that instruction

104
0:08:12.640 --> 0:08:19.080
will be cached if there are no changes before that step actually.

105
0:08:19.080 --> 0:08:25.800
So similarly to that, Dagger caches every step in your CI pipeline.

106
0:08:25.800 --> 0:08:27.560
Now how does it do that?

107
0:08:27.560 --> 0:08:28.720
How does it work?

108
0:08:28.720 --> 0:08:29.720
How is this portable?

109
0:08:29.720 --> 0:08:30.720
Any guesses?

110
0:08:30.720 --> 0:08:31.720
One word?

111
0:08:31.720 --> 0:08:36.120
Yeah, Docker, yeah, that's right.

112
0:08:36.120 --> 0:08:38.280
So containers, of course containers.

113
0:08:38.280 --> 0:08:43.760
So in order to be portable and to do all this magic that Dagger does, it needs to have a

114
0:08:43.760 --> 0:08:48.960
reasonable level of isolation so that you can be confident that it will run on your

115
0:08:48.960 --> 0:08:51.200
local machine and on your CI the same way.

116
0:08:51.200 --> 0:08:56.520
So it runs your builds in containers.

117
0:08:56.520 --> 0:09:02.240
And I already mentioned that Dagger has a few official SDKs that you can use to build

118
0:09:02.240 --> 0:09:04.360
the pipeline in your own code.

119
0:09:04.360 --> 0:09:10.760
And using that Dagger SDK you can talk to the so-called Dagger engine, which is the

120
0:09:10.760 --> 0:09:15.240
API that implements the GraphQL specification.

121
0:09:15.240 --> 0:09:21.360
And the Dagger SDK will call this API with the steps in your pipeline and the Dagger

122
0:09:21.360 --> 0:09:29.320
engine will build a DAG from these steps and then will pass that to basically to run through

123
0:09:29.320 --> 0:09:35.080
a container runtime and that's how your pipeline will run.

124
0:09:35.080 --> 0:09:38.880
And the good thing about this is that you can actually chain these pipelines.

125
0:09:38.880 --> 0:09:44.960
So the output of one pipeline can be the input of another and this whole thing goes through

126
0:09:44.960 --> 0:09:46.440
a single thing called session.

127
0:09:46.440 --> 0:09:51.840
So in a single session you can have multiple like these container executions and you can

128
0:09:51.840 --> 0:09:55.360
chain the results into each other if you want to.

129
0:09:55.360 --> 0:10:00.680
Now let's actually take a look at how these things run.

130
0:10:00.680 --> 0:10:04.920
And the reason why I asked if there is anyone here who was in my presentation in the morning

131
0:10:04.920 --> 0:10:08.940
because I completely botched the demo and it didn't work at all.

132
0:10:08.940 --> 0:10:12.880
So let's hope it works this time.

133
0:10:12.880 --> 0:10:19.560
So the example is in Go, but again it could be like TypeScript and Pyashore or even Q.

134
0:10:19.560 --> 0:10:26.440
And I'm not going to go into that much detail about the Go specific here, but basically

135
0:10:26.440 --> 0:10:30.200
you need to import this Dagger SDK in order to...

136
0:10:30.200 --> 0:10:32.720
By the way, can you see the screen or the code?

137
0:10:32.720 --> 0:10:34.280
Make it bigger?

138
0:10:34.280 --> 0:10:35.280
Okay.

139
0:10:35.280 --> 0:10:36.280
Better?

140
0:10:36.280 --> 0:10:37.280
Cool.

141
0:10:37.280 --> 0:10:43.640
So you have to import this Dagger SDK if you want to use Go and then the first thing you

142
0:10:43.640 --> 0:10:46.440
need to do is connect to the Dagger engine.

143
0:10:46.440 --> 0:10:53.120
Now if the Dagger engine doesn't run locally, then the SDK will actually run it using a

144
0:10:53.120 --> 0:10:55.280
simple Docker container.

145
0:10:55.280 --> 0:11:01.880
So the first thing you need to do is connect to this Dagger engine and then you can start

146
0:11:01.880 --> 0:11:04.960
launching these containers and start building your pipelines.

147
0:11:04.960 --> 0:11:10.280
And if it looks very similar, it's because it's basically the same, uses the same language

148
0:11:10.280 --> 0:11:14.880
and it looks very similar to Docker files.

149
0:11:14.880 --> 0:11:18.660
And it works basically the same way.

150
0:11:18.660 --> 0:11:24.720
So you have a base image, you have a bunch of mounted volumes for caching, and then you

151
0:11:24.720 --> 0:11:30.280
mount the source code and you run some sort of command.

152
0:11:30.280 --> 0:11:31.280
And that's it.

153
0:11:31.280 --> 0:11:32.280
That's your pipeline.

154
0:11:32.280 --> 0:11:33.760
Now let's see if it actually runs.

155
0:11:33.760 --> 0:11:39.880
So I use this make file alternative for Go called Mage.

156
0:11:39.880 --> 0:11:45.240
So this is how I have this whole code implemented in a test function.

157
0:11:45.240 --> 0:11:49.920
Let's see if it runs.

158
0:11:49.920 --> 0:11:55.200
Okay.

159
0:11:55.200 --> 0:11:57.200
So it did run.

160
0:11:57.200 --> 0:11:58.200
Cool.

161
0:11:58.200 --> 0:12:02.200
So if I just for...

162
0:12:02.200 --> 0:12:06.800
Let's turn the debug lock to see what's happening in the background.

163
0:12:06.800 --> 0:12:15.400
So it pulls an image, the Go rolling image, it mounts the code, it mounts the volumes,

164
0:12:15.400 --> 0:12:25.840
and then runs my Go test on the mounted code and then basically exits and outputs the result

165
0:12:25.840 --> 0:12:29.440
of the test.

166
0:12:29.440 --> 0:12:33.800
So well, that's it.

167
0:12:33.800 --> 0:12:37.080
If you want to get started with Dagger, check out the documentation.

168
0:12:37.080 --> 0:12:38.720
It's getting better by the day.

169
0:12:38.720 --> 0:12:43.400
They actually released, well, either today or yesterday, a new quick start guide, which

170
0:12:43.400 --> 0:12:44.880
is pretty awesome.

171
0:12:44.880 --> 0:12:50.720
It has all the three or four supported languages and a single document so you can switch between

172
0:12:50.720 --> 0:12:52.360
languages if you want to.

173
0:12:52.360 --> 0:12:55.280
There is even a playground for the lower-level GraphQL API.

174
0:12:55.280 --> 0:12:59.560
So if you don't want to start a new project, you can play directly with the GraphQL API

175
0:12:59.560 --> 0:13:03.080
with the hosted version of the Dagger engine.

176
0:13:03.080 --> 0:13:04.080
So thank you for your attention.

177
0:13:04.080 --> 0:13:12.920
If you have any questions, I'm happy to answer if you have time for that.

178
0:13:12.920 --> 0:13:18.480
Hey, thank you so much.

179
0:13:18.480 --> 0:13:19.480
That was awesome.

180
0:13:19.480 --> 0:13:21.640
I have a question with regards to implementation.

181
0:13:21.640 --> 0:13:25.560
So let's say that you roll your pipeline and you commit that you want to run that somewhere

182
0:13:25.560 --> 0:13:27.160
like in a CI environment.

183
0:13:27.160 --> 0:13:28.160
Okay.

184
0:13:28.160 --> 0:13:32.160
GitHub actions or, God forbid, Jenkins or whatever.

185
0:13:32.160 --> 0:13:33.440
How do you go about that?

186
0:13:33.440 --> 0:13:38.320
I can imagine that you need to expose the Docker socket to the pipeline.

187
0:13:38.320 --> 0:13:39.320
How does it work?

188
0:13:39.320 --> 0:13:40.320
Yeah.

189
0:13:40.320 --> 0:13:43.400
So basically if you have Docker running in your environment, you can run this pipeline.

190
0:13:43.400 --> 0:13:46.120
And you can run Docker anywhere basically today.

191
0:13:46.120 --> 0:13:48.520
You can run it in Jenkins or GitHub.

192
0:13:48.520 --> 0:13:50.920
You have it in GitHub actions actually.

193
0:13:50.920 --> 0:13:53.440
And you probably have it on your machine as well.

194
0:13:53.440 --> 0:13:58.080
So whenever you have Docker running today, this pipeline will run.

195
0:13:58.080 --> 0:14:02.600
So you just invoke the Dagger command, that command that you just showed us.

196
0:14:02.600 --> 0:14:04.520
Yeah, it's not on the Dagger command.

197
0:14:04.520 --> 0:14:05.760
This is entirely my code.

198
0:14:05.760 --> 0:14:07.720
This is my Go binary basically.

199
0:14:07.720 --> 0:14:08.720
Right.

200
0:14:08.720 --> 0:14:09.720
Okay.

201
0:14:09.720 --> 0:14:12.560
And it will find the Docker API socket.

202
0:14:12.560 --> 0:14:15.120
And if you just start containers.

203
0:14:15.120 --> 0:14:16.120
Awesome.

204
0:14:16.120 --> 0:14:17.680
Thanks.

205
0:14:17.680 --> 0:14:20.680
Before I...

206
0:14:20.680 --> 0:14:21.680
Very cool stuff.

207
0:14:21.680 --> 0:14:27.320
So before I switch all my CI to Dagger.

208
0:14:27.320 --> 0:14:28.600
Let's frame it like this.

209
0:14:28.600 --> 0:14:34.440
What would be the two things that you would really love to see an improved implementation

210
0:14:34.440 --> 0:14:37.800
of in the next version?

211
0:14:37.800 --> 0:14:38.800
Can you repeat the question?

212
0:14:38.800 --> 0:14:44.440
What are the two things that really need to be improved about the current state of Dagger?

213
0:14:44.440 --> 0:14:46.200
What improves?

214
0:14:46.200 --> 0:14:47.200
To improve Dagger?

215
0:14:47.200 --> 0:14:48.200
Yeah.

216
0:14:48.200 --> 0:14:52.440
In your opinion, what are the two things that need most improvement?

217
0:14:52.440 --> 0:14:53.440
Okay.

218
0:14:53.440 --> 0:14:56.200
So one thing is secret management.

219
0:14:56.200 --> 0:15:00.720
Right now, Dagger, it's not that easy to work with secrets.

220
0:15:00.720 --> 0:15:01.880
So that needs to be improved.

221
0:15:01.880 --> 0:15:03.120
And they are actually working on it.

222
0:15:03.120 --> 0:15:04.120
So that's great.

223
0:15:04.120 --> 0:15:08.320
The other thing is that right now, if you build something in one language, for example,

224
0:15:08.320 --> 0:15:15.440
if I build a reusable library in Go to run my pipelines, I can't reuse it in TypeScript,

225
0:15:15.440 --> 0:15:16.640
for example, today.

226
0:15:16.640 --> 0:15:22.680
And for that, there is actually a feature called extensions.

227
0:15:22.680 --> 0:15:26.760
So they're working on a feature so you can build extensions to the Dagger engine.

228
0:15:26.760 --> 0:15:33.920
So you can build these reliable or reusable pipeline pieces like running linters and stuff

229
0:15:33.920 --> 0:15:34.920
like that.

230
0:15:34.920 --> 0:15:36.160
So you don't have to build that in your own code.

231
0:15:36.160 --> 0:15:39.720
You just have to build the extensions and you can call it from whatever language you

232
0:15:39.720 --> 0:15:41.120
want to call them.

233
0:15:41.120 --> 0:15:43.720
Basically GraphQL API extensions.

234
0:15:43.720 --> 0:15:45.960
Thank you.

235
0:15:45.960 --> 0:15:53.360
Last question.

236
0:15:53.360 --> 0:15:54.360
Hi.

237
0:15:54.360 --> 0:16:00.720
Does Dagger support spinning up service A concurrently with service B because the test

238
0:16:00.720 --> 0:16:03.080
needs something else to run while the test is running?

239
0:16:03.080 --> 0:16:06.000
And then afterwards you can continue to other stuff?

240
0:16:06.000 --> 0:16:07.840
Right now, I don't think it does.

241
0:16:07.840 --> 0:16:14.440
Again, this is something that they are thinking about, but it's not a trivial thing to do.

242
0:16:14.440 --> 0:16:16.240
So no, currently...

243
0:16:16.240 --> 0:16:21.440
Someone is working on it.

244
0:16:21.440 --> 0:16:22.440
Thank you.

245
0:16:22.440 --> 0:16:24.680
Of course.

246
0:16:24.680 --> 0:16:25.680
Thank you.

247
0:16:25.680 --> 0:16:44.880
Thank you very much.


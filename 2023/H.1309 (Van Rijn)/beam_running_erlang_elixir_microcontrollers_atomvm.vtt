WEBVTT

00:00.000 --> 00:10.260
There is more management overhead than to talk.

00:10.260 --> 00:11.260
Great.

00:11.260 --> 00:12.260
Okay.

00:12.260 --> 00:18.520
This is Davi Debettio with Running Erlang and Elixir on microcontrollers with AtomVM.

00:18.520 --> 00:19.520
Give it up.

00:19.520 --> 00:20.520
Hello, everyone.

00:20.520 --> 00:28.840
So, who I am, basically, I work during my daytime on a start and a jog that are really

00:28.840 --> 00:32.520
nice Elixir projects for IoT and whatever.

00:32.520 --> 00:43.080
And during my nighttime, I try to work a lot on AtomVM that allows you to run Elixir, Erlang,

00:43.080 --> 00:48.040
Gleam, whatever can run on the beam on a microcontroller.

00:48.040 --> 00:55.800
When I say microcontroller, I mean something really, I mean memory constraint, but not

00:55.800 --> 00:56.800
too much.

00:56.800 --> 01:01.120
Still, it has to be a 32-bit processor.

01:01.120 --> 01:07.080
It requires about 80 kilobytes of RAM, but we can do it.

01:07.080 --> 01:09.200
Pretty crazy, but we can do it.

01:09.200 --> 01:12.600
And so, the software is mostly unmodified.

01:12.600 --> 01:20.160
I mean, we don't have to translate it to other formats or whatever.

01:20.160 --> 01:22.280
It can run beam files.

01:22.280 --> 01:25.280
So it's pretty standard.

01:25.280 --> 01:27.280
So how?

01:27.280 --> 01:34.280
So basically, we did, well, I created it from scratch.

01:34.280 --> 01:40.500
And so the whole implementation has no code from the original beam implementation because

01:40.500 --> 01:43.400
we are focused on memory.

01:43.400 --> 01:51.120
So rather than focusing on performances where beam is very good at, we are focusing on making

01:51.120 --> 01:54.920
everything stay in just a few kilobytes of RAM.

01:54.920 --> 02:01.960
And the virtual machine is compatible with, I mean, all the recent OTP releases.

02:01.960 --> 02:06.800
We already have some experimental support for OTP 26.

02:06.800 --> 02:09.760
So we are on par right now.

02:09.760 --> 02:16.600
And we have support for quite a big number of NIFs and BIFs from Erlang.

02:16.600 --> 02:23.600
So we implemented them in all the daily basics so you can run your project if you are not

02:23.600 --> 02:25.880
doing anything weird.

02:25.880 --> 02:28.320
And well, there is.

02:28.320 --> 02:31.480
And also, we did something more.

02:31.480 --> 02:38.080
For example, we weren't able to run a replica for Erlang or Elixir on a microcontroller.

02:38.080 --> 02:39.320
It's not really easy.

02:39.320 --> 02:44.160
So we did a simple Lisp implementation for testing stuff.

02:44.160 --> 02:51.160
So if you want to test registers or EWC communication or SPI communication, you can poke with registers

02:51.160 --> 02:52.160
using Lisp.

02:52.160 --> 02:55.600
It's not good as maybe Erlang or Elixir or whatever.

02:55.600 --> 03:00.160
But you can experiment a lot.

03:00.160 --> 03:06.280
And everything can be packed into a single file that can be easily flashed.

03:06.280 --> 03:14.640
And we are mainly supporting right now ESP32 because we started a project with that powerful

03:14.640 --> 03:15.640
microcontroller.

03:15.640 --> 03:23.360
But we support Linux, MacOS, whatever, because we need to test it.

03:23.360 --> 03:29.000
And we are working on improving and extending the support to other devices.

03:29.000 --> 03:33.600
As soon as I get a new development board, I try to run it.

03:33.600 --> 03:37.240
And sometimes I need help, of course.

03:37.240 --> 03:40.800
And it's pretty easy to port it, by the way.

03:40.800 --> 03:42.160
And one.

03:42.160 --> 03:43.640
It is already here.

03:43.640 --> 03:48.520
And it can be used for your simple or maybe a bit more complex projects.

03:48.520 --> 03:51.280
Again, you are running on a really constrained device.

03:51.280 --> 03:54.480
But you can do interesting stuff.

03:54.480 --> 04:00.160
And we are working towards the next release that it will feature a lot of cool stuff.

04:00.160 --> 04:02.440
We got finally SMP support.

04:02.440 --> 04:07.320
So we can take benefit of multi-core microcontrollers.

04:07.320 --> 04:12.000
And we got recently also really good code debugging features.

04:12.000 --> 04:14.960
So it's pretty nice.

04:14.960 --> 04:20.800
And yeah, this project has been possible thanks to the work of other contributors.

04:20.800 --> 04:24.760
And so thank you very much to everyone who has been working.

04:24.760 --> 04:30.200
And because, you know, open source projects are always kind of teamwork.

04:30.200 --> 04:32.760
And it's hard to do something like this just alone.

04:32.760 --> 04:36.440
So a lot of thanks to all the contributors.

04:36.440 --> 04:40.280
And thank you to all of you, of course.

04:40.280 --> 04:46.560
Thank you, David.

04:46.560 --> 04:50.240
Four minutes and 40 seconds, I think.

04:50.240 --> 04:51.240
Perfect timing.

04:51.240 --> 05:16.820
You know, it's been pretty late.

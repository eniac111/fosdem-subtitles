1
0:00:00.000 --> 0:00:13.560
So, now we have Harry Berstow with an introduction to Gleam, which is another language running

2
0:00:13.560 --> 0:00:15.140
on Erlang VM.

3
0:00:15.140 --> 0:00:17.560
So give it up for him.

4
0:00:17.560 --> 0:00:19.800
Hi, everyone.

5
0:00:19.800 --> 0:00:27.080
My name's Harry, and I'm, as we said, doing an introduction to Gleam.

6
0:00:27.080 --> 0:00:28.080
You might ask, what is Gleam?

7
0:00:28.080 --> 0:00:31.680
Gleam is a programming language for building type safe systems that scale.

8
0:00:31.680 --> 0:00:35.680
It's powered primarily by the Beam, but can also be run on JavaScript targets too.

9
0:00:35.680 --> 0:00:40.200
I thought I'd go first into the three key points which make Gleam what it is.

10
0:00:40.200 --> 0:00:41.200
First it's safety.

11
0:00:41.200 --> 0:00:45.040
Gleam has powerful compile time type checking built into its core.

12
0:00:45.040 --> 0:00:49.080
This helps you write fast code that's integrated with Erlang and Elixir, while giving you the

13
0:00:49.080 --> 0:00:52.480
safety of a statically typed language.

14
0:00:52.480 --> 0:00:56.360
Secondly is performance, as was just discussed before, building on the success of Discord,

15
0:00:56.360 --> 0:00:58.960
WhatsApp, Ericsson, and more with the Beam.

16
0:00:58.960 --> 0:01:02.760
Gleam adds no overhead, so you get the same great type safety and performance with an

17
0:01:02.760 --> 0:01:04.800
enjoyable syntax.

18
0:01:04.800 --> 0:01:05.800
And finally, it's friendliness.

19
0:01:05.800 --> 0:01:08.640
Both the community and the syntax of Gleam are friendly.

20
0:01:08.640 --> 0:01:12.160
The community is more than happy to help with any problem or just friendly chit chat.

21
0:01:12.160 --> 0:01:14.520
They even help write some of this talk.

22
0:01:14.520 --> 0:01:18.640
And when you get something wrong, the compiler provides insightful help so that you can hunt

23
0:01:18.640 --> 0:01:20.560
down the issues and stop them.

24
0:01:20.560 --> 0:01:23.440
The syntax of Gleam is similar to that of Rust, but if you're not from one of those

25
0:01:23.440 --> 0:01:27.600
backgrounds, don't worry, there are several guides to get started if you're used to syntax

26
0:01:27.600 --> 0:01:30.720
from Python, Elm, Erlang, or even Elixir.

27
0:01:30.720 --> 0:01:35.600
Here's an example of the start of the Gleam project.

28
0:01:35.600 --> 0:01:40.480
All Gleam projects have an exported main function in the project name.gleam file, which is within

29
0:01:40.480 --> 0:01:41.480
your source folder.

30
0:01:41.480 --> 0:01:46.880
If you need I.O., you can import the standard library's I.O. module, as shown there.

31
0:01:46.880 --> 0:01:49.560
And the standard library contains several modules to help you with everything you can

32
0:01:49.560 --> 0:01:52.800
think of, from regex to options, iterators, and more.

33
0:01:52.800 --> 0:01:57.680
If you need target-specific standard library features, look at the Gleam Erlang and Gleam

34
0:01:57.680 --> 0:02:03.760
JavaScript packages, which are both available on Hex and GitHub.

35
0:02:03.760 --> 0:02:07.080
Let's explore some Gleam examples to get a better understanding of the language.

36
0:02:07.080 --> 0:02:10.840
And once we've done that, you can go away and look at the docs yourself for more examples,

37
0:02:10.840 --> 0:02:15.560
and we'll go on to building some stuff with Shimmer.

38
0:02:15.560 --> 0:02:18.160
Variables in Gleam are created using the let keyword.

39
0:02:18.160 --> 0:02:20.240
They are assigned to a name and a value.

40
0:02:20.240 --> 0:02:23.840
The name can be reused later by other let bindings, but the values contained within

41
0:02:23.840 --> 0:02:27.760
are immutable, meaning the values themselves cannot be changed.

42
0:02:27.760 --> 0:02:31.260
Here's an example of blocks.

43
0:02:31.260 --> 0:02:34.080
Every block in Gleam is an expression.

44
0:02:34.080 --> 0:02:37.200
All expressions in the block are executed, and then the result of the last expression

45
0:02:37.200 --> 0:02:38.200
is returned.

46
0:02:38.200 --> 0:02:42.600
So as you can see here, the response will be false, even though hello and 42 plus 12

47
0:02:42.600 --> 0:02:44.040
are evaluated.

48
0:02:44.040 --> 0:02:47.960
This can be used to build more advanced expressions where the order of operations is important.

49
0:02:47.960 --> 0:02:52.360
Here's an example of using the blocks to convert from Fahrenheit to Celsius, being

50
0:02:52.360 --> 0:02:58.240
sure to remove the 32 before multiplying and dividing.

51
0:02:58.240 --> 0:03:00.360
In Gleam, lists are all homogenous.

52
0:03:00.360 --> 0:03:03.800
This means the elements in a list must all be of the same type.

53
0:03:03.800 --> 0:03:07.840
If you try and construct a list with multiple types, this will result in a compiler error

54
0:03:07.840 --> 0:03:12.840
presenting you with a type error and showing you where you tried to use the multiple different

55
0:03:12.840 --> 0:03:17.520
types, so you can find it and correct it.

56
0:03:17.520 --> 0:03:20.880
Returning to a list in Gleam is very fast, and this is the way that Gleam's documentation

57
0:03:20.880 --> 0:03:23.640
recommends that you should add new values to a list.

58
0:03:23.640 --> 0:03:27.800
In the standard library, there is a list module, which allows you to do more advanced operations

59
0:03:27.800 --> 0:03:30.160
and also add to lists that way.

60
0:03:30.160 --> 0:03:34.560
The above example uses two constant lists, well, a constant and a constant list, but

61
0:03:34.560 --> 0:03:41.880
the same principles apply, whether you have one dynamic and the other constant or vice-versa.

62
0:03:41.880 --> 0:03:47.440
If you need multiple types in one place, you can use tuples using the hash and bracket

63
0:03:47.440 --> 0:03:48.440
syntax there.

64
0:03:48.440 --> 0:03:51.920
They can have multiple types and can be pattern matched against.

65
0:03:51.920 --> 0:03:53.760
We'll look at pattern matching in a few slides.

66
0:03:53.760 --> 0:03:57.600
But if you want to access the values on a tuple, there's always the dot syntax, which

67
0:03:57.600 --> 0:04:02.080
I'll show you on the next slide, which is similar to that you'd be used to in object-oriented

68
0:04:02.080 --> 0:04:04.120
for custom types and objects.

69
0:04:04.120 --> 0:04:08.600
Here's an example of a tuple which has two elements, and they're selected using the dot

70
0:04:08.600 --> 0:04:11.520
syntax and assigned to their own variables.

71
0:04:11.520 --> 0:04:14.760
It's not particularly useful here because they're constants, but with runtime variables,

72
0:04:14.760 --> 0:04:19.360
it's easy to access.

73
0:04:19.360 --> 0:04:22.720
Gleam supports custom types, and custom types in Gleam are a collection of keys and their

74
0:04:22.720 --> 0:04:25.120
values, and you can see them as objects.

75
0:04:25.120 --> 0:04:26.360
You can see them as objects.

76
0:04:26.360 --> 0:04:27.880
There's just one caveat though.

77
0:04:27.880 --> 0:04:32.160
Types in Gleam don't have methods.

78
0:04:32.160 --> 0:04:38.480
Similar to tuples, you can use the dot syntax to access properties within them, but instead

79
0:04:38.480 --> 0:04:46.360
of dot and position, you use dot and the name.

80
0:04:46.360 --> 0:04:52.000
In Gleam, custom types can have multiple constructors, similar to in the Rust ecosystem for enums.

81
0:04:52.000 --> 0:04:56.680
This does bring another caveat though, which is that the dot syntax now only works for

82
0:04:56.680 --> 0:04:58.680
keys that are shared across all elements.

83
0:04:58.680 --> 0:05:02.760
So in this case, the only key you would be able to use the dot syntax with is name.

84
0:05:02.760 --> 0:05:08.880
Otherwise, you would have to pattern match against them to make sure that type safety

85
0:05:08.880 --> 0:05:11.480
stays.

86
0:05:11.480 --> 0:05:13.120
Case statements can match anything.

87
0:05:13.120 --> 0:05:17.280
In this first example, we use basic integers, but there's more advanced pattern matching

88
0:05:17.280 --> 0:05:19.520
over the next couple slides.

89
0:05:19.520 --> 0:05:23.360
You can see we match the first three numbers and produce a value, and otherwise, we just

90
0:05:23.360 --> 0:05:31.000
consume as a variable and say, we can either use or discard that variable.

91
0:05:31.000 --> 0:05:34.600
We can pattern match against tuples here and even extract values from within.

92
0:05:34.600 --> 0:05:38.720
In this example, we're checking for two specific paths where one is no and the other is yes.

93
0:05:38.720 --> 0:05:43.000
The unique thing about the yes path is that we're discarding the integer in the middle,

94
0:05:43.000 --> 0:05:52.120
but we could again take that as a variable and do further checks against it.

95
0:05:52.120 --> 0:05:55.360
If you remember the custom type from earlier, this pattern matches against that, so we can

96
0:05:55.360 --> 0:06:00.720
extract the values into certain variables here, like torques and mic.

97
0:06:00.720 --> 0:06:04.440
The rest can be thrown away with the two dots.

98
0:06:04.440 --> 0:06:08.320
You can also use the two dots and assign that to a variable so that then you can reconstruct

99
0:06:08.320 --> 0:06:13.640
the type afterwards to pass it back on somewhere else.

100
0:06:13.640 --> 0:06:17.600
There's lots more about Gleam syntax that I don't have time to cover today, such as external

101
0:06:17.600 --> 0:06:21.280
functions, generics, the use keyword, and more, and stuff's always being added to the

102
0:06:21.280 --> 0:06:22.480
syntax.

103
0:06:22.480 --> 0:06:26.280
All of it's documented in the language talk, so feel free to have a look over there and

104
0:06:26.280 --> 0:06:30.600
get a better understanding of what else is available within Gleam.

105
0:06:30.600 --> 0:06:39.280
Now let's get onto building some bots to put our Gleam skills into practice.

106
0:06:39.280 --> 0:06:42.680
Shimmer is a library which I've dabbled in and out of over the last 13 months.

107
0:06:42.680 --> 0:06:48.240
I started as a project to learn Gleam and get into the Beam ecosystem, but in the process

108
0:06:48.240 --> 0:06:49.640
I've done much more.

109
0:06:49.640 --> 0:06:51.360
I'm doing this talk now.

110
0:06:51.360 --> 0:06:55.720
I've started contributing to the Gleam compiler and the wider ecosystem, and I use Alexa and

111
0:06:55.720 --> 0:06:59.720
Erlang more day to day now.

112
0:06:59.720 --> 0:07:04.720
To this point in Shimmer's development, we've moved away from using Erlang foreign functions,

113
0:07:04.720 --> 0:07:08.800
and now a majority of it is in Gleam.

114
0:07:08.800 --> 0:07:11.920
Some key features of Shimmer first is compatibility.

115
0:07:11.920 --> 0:07:16.040
While Shimmer is built in Gleam, it can be used in Alexa, Erlang, and any other Beam

116
0:07:16.040 --> 0:07:17.040
language.

117
0:07:17.040 --> 0:07:22.120
It's published on Hex, and the source code is available online.

118
0:07:22.120 --> 0:07:26.520
I've been working on some examples for Erlang and Alexa, which I'll publish into the GitHub

119
0:07:26.520 --> 0:07:29.840
repository once I've got them to a stable point.

120
0:07:29.840 --> 0:07:31.600
Secondly, it's Actor-based.

121
0:07:31.600 --> 0:07:35.760
As we discussed before with its resilience, Shimmer is built on top of Actors, and when

122
0:07:35.760 --> 0:07:40.000
you're running in single shard mode, you only have one Actor, multiple shards.

123
0:07:40.000 --> 0:07:41.000
That's not a problem.

124
0:07:41.000 --> 0:07:45.240
We use a supervisor tree so that all the shards stay alive, and it's built on top of Erlang's

125
0:07:45.240 --> 0:07:47.880
OTP using the Gleam OTP package.

126
0:07:47.880 --> 0:07:50.720
Finally, it's type safety.

127
0:07:50.720 --> 0:07:53.960
As well as being called to Gleam is a useful feature for Shimmer.

128
0:07:53.960 --> 0:07:58.160
For building your Discord bot in Gleam, we leverage all of Gleam's type functionality

129
0:07:58.160 --> 0:08:01.400
to ensure that the code you write for the Beam is type safe.

130
0:08:01.400 --> 0:08:04.920
You only get the full type safety when you write all of your code in Gleam, but you can

131
0:08:04.920 --> 0:08:08.120
always trust that the core of the library will be type safe.

132
0:08:08.120 --> 0:08:12.560
It's a little fun fact.

133
0:08:12.560 --> 0:08:16.200
Moving more and more of Shimmer to Gleam, we're currently at 97% Gleam, and the rest

134
0:08:16.200 --> 0:08:21.880
is just Erlang forum functions for small parts of networking which are yet to have libraries

135
0:08:21.880 --> 0:08:24.360
implemented in Gleam.

136
0:08:24.360 --> 0:08:29.560
For some of you, this might now be the most interesting part of the talk, and for some

137
0:08:29.560 --> 0:08:30.560
of you it might not.

138
0:08:30.560 --> 0:08:34.160
But I'm just going to quickly touch on how Discord's gateway works so that you have a

139
0:08:34.160 --> 0:08:40.560
better understanding of why we use Actors and how that's useful to us in Gleam and with

140
0:08:40.560 --> 0:08:44.280
the OTP package.

141
0:08:44.280 --> 0:08:47.960
Discord bots are powered by Discord's real-time gateway, which uses web sockets to send and

142
0:08:47.960 --> 0:08:49.480
receive messages.

143
0:08:49.480 --> 0:08:56.000
For Shimmer, we use Erlang's gun library from 9.9s to receive them, and we use a typed wrapper

144
0:08:56.000 --> 0:09:03.200
on top of that, which is based upon Lewis, the creator of Gleam's nerf library.

145
0:09:03.200 --> 0:09:06.800
The diagram here shows what happens when Shimmer opens a connection to the gateway.

146
0:09:06.800 --> 0:09:13.760
We use ETF encoding and hand the frames off to Actors to pass, manage them, and send them

147
0:09:13.760 --> 0:09:21.640
to the event loop and eventually either trigger handlers or discard them.

148
0:09:21.640 --> 0:09:26.280
Inside of that, Shimmer has a powerful event loop built on top of Actors and messages,

149
0:09:26.280 --> 0:09:30.120
which manages multiple messages as well as its own state, both internally and externally

150
0:09:30.120 --> 0:09:35.640
accepts messages so that you can send updates to Discord, or internally we can manage the

151
0:09:35.640 --> 0:09:37.040
updates.

152
0:09:37.040 --> 0:09:40.920
The next slide shows a state diagram which roughly shows how it works.

153
0:09:40.920 --> 0:09:46.080
The state diagram shows what happens at different stages depending on the initial message.

154
0:09:46.080 --> 0:09:49.740
For example, here if you have a web socket frame, it's then passed.

155
0:09:49.740 --> 0:09:52.680
We then check whether it's asking us to do.

156
0:09:52.680 --> 0:09:57.840
We then either respond, discard it, stop the bot, and then terminate.

157
0:09:57.840 --> 0:10:01.160
This diagram isn't complete at all, but it just shows you how complicated it can go very

158
0:10:01.160 --> 0:10:07.200
quickly and how Gleam and the beam can easily handle it.

159
0:10:07.200 --> 0:10:10.480
Now that we know some Gleam and understand how Shimmer works under the hood, let's actually

160
0:10:10.480 --> 0:10:11.480
get our bot written.

161
0:10:11.480 --> 0:10:15.680
Above the boilerplate we're going to use, and as a side note, the final code for all

162
0:10:15.680 --> 0:10:21.760
of this is in the GitHub repository, which there's a link to at the end.

163
0:10:21.760 --> 0:10:25.240
Shimmer uses a handler-based system which allows for one function to be registered for

164
0:10:25.240 --> 0:10:26.240
each event.

165
0:10:26.240 --> 0:10:30.360
For the purpose of this bot, we're only registering two events, but you can always register more

166
0:10:30.360 --> 0:10:32.680
as and when they're implemented in Shimmer.

167
0:10:32.680 --> 0:10:37.960
But before we have a look at that, let's understand how this code uses what we learned earlier

168
0:10:37.960 --> 0:10:41.980
and what it actually does.

169
0:10:41.980 --> 0:10:43.880
Here we create a new Shimmer client.

170
0:10:43.880 --> 0:10:48.340
Here we use a function that wraps around a custom type.

171
0:10:48.340 --> 0:10:53.120
The custom type holds both internal data as well as token, intents, and other data you

172
0:10:53.120 --> 0:10:54.120
pass in.

173
0:10:54.120 --> 0:10:56.040
So we create a function to wrap it.

174
0:10:56.040 --> 0:10:59.560
That way you don't have to manage all of that state yourself.

175
0:10:59.560 --> 0:11:04.880
Then we pipe that into the connect function where it takes the client, passes that as

176
0:11:04.880 --> 0:11:09.760
the first param, and then passes your handlers in as the second.

177
0:11:09.760 --> 0:11:12.600
Normally the token should be an environment variable, but for the purposes of this, we're

178
0:11:12.600 --> 0:11:15.600
just using a string.

179
0:11:15.600 --> 0:11:18.520
Finally we'll tell Erlang to sleep forever so that our actor and supervisor can run in

180
0:11:18.520 --> 0:11:25.920
the background, accepting messages from the gateway and passing them to the event loop.

181
0:11:25.920 --> 0:11:31.120
Now that we know what it all vaguely does, let's revisit the handlers.

182
0:11:31.120 --> 0:11:33.440
First we're going to add a handler for the onReady event.

183
0:11:33.440 --> 0:11:36.880
All handlers are passed in their event as well as the client.

184
0:11:36.880 --> 0:11:41.320
That way you can use the client to call other methods such as updating the bot's presence

185
0:11:41.320 --> 0:11:44.080
or sending messages yourself across the gateway.

186
0:11:44.080 --> 0:11:49.800
On the client there's no private accesses, so you can access all the internal stuff as

187
0:11:49.800 --> 0:11:52.800
well if you want to add your own custom functionality.

188
0:11:52.800 --> 0:11:58.400
The client has its gun connection and all the other stuff in there as well, so you can

189
0:11:58.400 --> 0:12:01.400
adapt that as you please.

190
0:12:01.400 --> 0:12:04.920
Let's quickly zoom into the handler and explore that.

191
0:12:04.920 --> 0:12:09.800
Here you can see the event in this case is an onReady event which provides us crucial

192
0:12:09.800 --> 0:12:17.040
information, but as I said before, there's the client that we have just spoken about.

193
0:12:17.040 --> 0:12:21.760
The Gleams accessor syntax we learned about earlier makes it easy to access fields within

194
0:12:21.760 --> 0:12:23.920
the types even when they're two levels deep.

195
0:12:23.920 --> 0:12:30.280
As you can see here, we're accessing the user's ID which is in the user field of the event,

196
0:12:30.280 --> 0:12:35.400
and then we're printing it to the console using the standard library's IO.

197
0:12:35.400 --> 0:12:40.400
We can then make this into a function and then we can pass that into our onReady handler.

198
0:12:40.400 --> 0:12:43.800
That way we can add the functions in multiple different files and import them from across

199
0:12:43.800 --> 0:12:47.960
the project to keep everything tidy.

200
0:12:47.960 --> 0:12:55.400
Let's move on to actually receiving some messages and sending some responses.

201
0:12:55.400 --> 0:12:59.120
When we receive a message, we get the onMessage payload as our event.

202
0:12:59.120 --> 0:13:03.400
This contains information about the message itself as well as the guild ID, mentions,

203
0:13:03.400 --> 0:13:06.640
the message content, and other variables.

204
0:13:06.640 --> 0:13:09.900
For now, we're going to assign the content to a variable for ease, but we can always

205
0:13:09.900 --> 0:13:15.520
collapse that into the case statement we use later on if that isn't something you need.

206
0:13:15.520 --> 0:13:18.920
Let's have a look at how we're going to use our pattern matching to match against the

207
0:13:18.920 --> 0:13:19.920
content.

208
0:13:19.920 --> 0:13:24.560
Using Gleams powerful pattern matching, we can check it as a desired prefix and then

209
0:13:24.560 --> 0:13:29.360
we can extract the part to the right of the prefix into a separate variable.

210
0:13:29.360 --> 0:13:33.440
If not, we can take the message out itself and we can just print that for easier debugging

211
0:13:33.440 --> 0:13:35.280
for now.

212
0:13:35.280 --> 0:13:36.720
Let's say we want a specific command though.

213
0:13:36.720 --> 0:13:42.200
We could either add another case statement onto that or we can just edit it so it's exclamation

214
0:13:42.200 --> 0:13:45.560
mark on what we want as the string of a pattern matching against.

215
0:13:45.560 --> 0:13:47.600
Let's say, for example, you wanted some arguments though.

216
0:13:47.600 --> 0:13:50.820
You could put the two together and you could have your prefix with the command and take

217
0:13:50.820 --> 0:13:57.200
all of the arguments out separately to then pass and manage them.

218
0:13:57.200 --> 0:14:01.760
Now we'll match against a specific command and in the response, we'll use the message

219
0:14:01.760 --> 0:14:08.480
send function to reply to the user by sending another message.

220
0:14:08.480 --> 0:14:14.720
As before, we can use the handler's builder to add this in as a function and the bot should

221
0:14:14.720 --> 0:14:15.720
be done.

222
0:14:15.720 --> 0:14:19.720
Now you have a basic ping pong where you can send and receive messages using basically

223
0:14:19.720 --> 0:14:24.200
everything you learned from the introduction earlier.

224
0:14:24.200 --> 0:14:27.000
The full code, as I said earlier, is available on the GitHub as well if you want to have

225
0:14:27.000 --> 0:14:30.640
a look and take a deeper dive there.

226
0:14:30.640 --> 0:14:34.360
Just to recap, at the start of the talk, we went over some Gleam syntax before to get

227
0:14:34.360 --> 0:14:35.800
ready on our exclamation of Shimmer.

228
0:14:35.800 --> 0:14:40.440
We found out how the Discord's gateway worked on a high level and how to leverage Gleam

229
0:14:40.440 --> 0:14:48.320
OTP and how Gleam OTP is leveraged within Shimmer for actors.

230
0:14:48.320 --> 0:14:51.440
Thank you very much for listening.

231
0:14:51.440 --> 0:14:55.080
If there's some QR codes to the Gleam website as well as the Gleam Discord if you want to

232
0:14:55.080 --> 0:15:06.360
talk there and if there's any questions, I'm happy to take them if I have time.

233
0:15:06.360 --> 0:15:12.400
There's none for questions.

234
0:15:12.400 --> 0:15:19.360
You showed the tuple access syntax which was tuple.zero, tuple.one.

235
0:15:19.360 --> 0:15:26.120
Does that mean that if you use a record or whatever it's called, can you still use zero

236
0:15:26.120 --> 0:15:29.120
as a key or is that not a...

237
0:15:29.120 --> 0:15:30.320
If you use a custom type?

238
0:15:30.320 --> 0:15:31.320
Yeah.

239
0:15:31.320 --> 0:15:33.960
No, when you use custom types you have to use the keys you define in the custom type

240
0:15:33.960 --> 0:15:35.840
to access them.

241
0:15:35.840 --> 0:15:41.920
The index syntax is only available for tuples.

242
0:15:41.920 --> 0:15:42.920
Question there.

243
0:15:42.920 --> 0:15:52.400
I have a question about the handlers on the library and about Gleam I guess.

244
0:15:52.400 --> 0:15:59.080
When I'm writing the handler, do I know what type of the event is in the client by the

245
0:15:59.080 --> 0:16:00.480
time of writing?

246
0:16:00.480 --> 0:16:01.480
Yes.

247
0:16:01.480 --> 0:16:06.440
So when a Gleam project is put onto Hex we produce Hex stocks and they're all documented

248
0:16:06.440 --> 0:16:07.440
there as well.

249
0:16:07.440 --> 0:16:13.240
So those types are on Hex stocks you can look at and also Gleam has an LSP built into it

250
0:16:13.240 --> 0:16:18.680
which is going to give you the information in your editor.

251
0:16:18.680 --> 0:16:21.720
Oh, okay.

252
0:16:21.720 --> 0:16:23.720
Hello.

253
0:16:23.720 --> 0:16:29.280
If you're used to LX0, what are the things that you would miss in Gleam?

254
0:16:29.280 --> 0:16:33.320
Is there a big overlap?

255
0:16:33.320 --> 0:16:36.640
It has most of the features you're used to along with your type safety.

256
0:16:36.640 --> 0:16:41.480
The only difference would be in Elixir you can define multiple modules in one file whereas

257
0:16:41.480 --> 0:16:44.360
in Gleam that's not really something.

258
0:16:44.360 --> 0:16:45.800
Modules are files themselves.

259
0:16:45.800 --> 0:16:48.720
I guess that's the only thing I could think of off the top of my head.

260
0:16:48.720 --> 0:16:49.720
Right, thank you.

261
0:16:49.720 --> 0:16:50.720
No worries.

262
0:16:50.720 --> 0:16:53.240
Is there any macros as well?

263
0:16:53.240 --> 0:16:57.760
No, we don't have macros right now but there has been several discussions about how we

264
0:16:57.760 --> 0:17:00.040
want to do them and what they're going to be like.

265
0:17:00.040 --> 0:17:05.400
So there is potential for that in the future.

266
0:17:05.400 --> 0:17:07.920
Any more questions?

267
0:17:07.920 --> 0:17:08.920
Okay.

268
0:17:08.920 --> 0:17:11.000
Do you have one?

269
0:17:11.000 --> 0:17:12.000
Yeah.

270
0:17:12.000 --> 0:17:13.000
I'm sorry.

271
0:17:13.000 --> 0:17:14.000
Thank you for your talk.

272
0:17:14.000 --> 0:17:15.000
It was very nice.

273
0:17:15.000 --> 0:17:16.000
I have one question.

274
0:17:16.000 --> 0:17:21.000
I think currently it's version 0.25 of Gleam or 26?

275
0:17:21.000 --> 0:17:22.000
0.26, yeah.

276
0:17:22.000 --> 0:17:23.000
Sorry.

277
0:17:23.000 --> 0:17:24.000
This week.

278
0:17:24.000 --> 0:17:30.920
So are there any big hurdles before like plans for 1.0 for example?

279
0:17:30.920 --> 0:17:37.280
I believe Lewis wants to get like LSP features more properly implemented but you can always

280
0:17:37.280 --> 0:17:39.440
join the Discord and talk there.

281
0:17:39.440 --> 0:17:41.160
I think Lewis is probably better.

282
0:17:41.160 --> 0:17:45.720
I think we also have a GitHub milestone on the GitHub repository which says what we want

283
0:17:45.720 --> 0:17:51.120
before V1.

284
0:17:51.120 --> 0:17:52.720
Any more questions?

285
0:17:52.720 --> 0:17:54.320
Okay.

286
0:17:54.320 --> 0:17:59.320
Thank you, Aria again.

287
0:17:59.320 --> 0:18:01.320
Thank you.


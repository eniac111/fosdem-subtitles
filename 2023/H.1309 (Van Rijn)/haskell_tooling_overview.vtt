WEBVTT

00:00.000 --> 00:10.720
Okay, so here is a quick overview of the Haskell tooling. I am Julien Deus. I am an assistant

00:10.720 --> 00:16.480
professor in computer science and I use Haskell since 2015, initially for teaching functional

00:16.480 --> 00:24.000
programming. So since the beginning of the language Haskell has many tools have been

00:24.000 --> 00:31.360
created for developing in Haskell and today most of the Haskell developers use a GHC compiler

00:31.360 --> 00:38.280
for building Haskell projects we have an HCL such as Kerbal or Stack. Haskell is now quite

00:38.280 --> 00:46.040
well integrated in the editor such as Visual Studio Code, VIM or Emacs, thanks to LSP implementations

00:46.040 --> 00:55.400
such as HLS and all these tools can be installed using some tools like GHC app or Nix. In this talk

00:55.400 --> 01:05.240
I will focus on Kerbal with VS Code and the Haskell plugin. First we have some online tools such as

01:05.240 --> 01:12.760
Akage which is a package archive so you can go to the website and search for packages there is

01:12.760 --> 01:20.680
for example some libraries for doing whatever you want. These libraries you can access their

01:20.680 --> 01:28.160
documentation so you can see what to do with this library and how to use it and you also access to

01:28.160 --> 01:36.160
their source code with nice colors and code navigation which is quite useful. We also have

01:36.160 --> 01:43.200
Hoggle which is Haskell Google so it's a search engine and you can type the name of a function

01:43.200 --> 01:50.320
and Hoggle will give you a link to the documentation of the function in Akage. If you don't know the

01:50.320 --> 01:56.520
name of the function you can also type write the type of the function and Hoggle try to find a

01:56.520 --> 02:03.080
function that matches that type so you can see its documentation on Akage and you see if it's

02:03.080 --> 02:11.240
the function you are looking for. To work on a Haskell project you can use Kerbal which is a

02:11.240 --> 02:20.040
tool for building and packaging projects. To use Kerbal we have to write a Kerbal file which is a

02:20.040 --> 02:28.000
configuration file where you can specify some information about your project and also define

02:28.000 --> 02:33.440
the target you want to build in your project. For example if you have a library or executables you

02:33.440 --> 02:39.440
can write them. You can also add some dependencies for example libraries are available on Akage.

02:39.440 --> 02:47.240
Then you can use the Kerbal tool once we have this file so you can run Kerbal build to build

02:47.240 --> 02:56.200
our targets and when you do that Kerbal will get the dependencies from Akage and run the compiler

02:56.200 --> 03:03.440
to build all your files. We also have the Kerbal run command to run specific targets and you can

03:03.440 --> 03:10.840
also give command line arguments if your program requires that. We have a Reaper which is a read

03:10.840 --> 03:16.360
eval print loop so this runs a compiler in an interpreter mode so you can write some Haskell

03:16.360 --> 03:23.360
expressions and the compiler will evaluate these expressions and print the result so it's very

03:23.360 --> 03:30.240
interesting for testing some code and you have also more specific commands. For example here

03:30.240 --> 03:37.400
you can ask some information about the type of function or anything. Okay so to work on the

03:37.400 --> 03:43.720
Haskell project we can use editors like Visual Studio Code with HLS and the Haskell. Haskell

03:43.720 --> 03:50.320
plugin. It's a very easy tool so you have the file of your project you can open them edit them.

03:50.320 --> 04:01.600
You also have code navigation and documentation so if I put the mouse pointer over a function

04:01.600 --> 04:07.320
VS Code will show me the documentation of that function and if I control click on the function

04:07.320 --> 04:14.120
VS Code goes to the definition of the function. We also have code completion so VS Code tries to

04:14.120 --> 04:21.360
complete the code you are typing. We have an integration of the compiler so if there is

04:21.360 --> 04:28.680
an error in your code VS Code will show you where is this error and it can give you the

04:28.680 --> 04:36.120
message from the compiler. Even if your code is correct, VS Code can help you improve your code.

04:36.120 --> 04:43.200
It can give some hints to refactor it. So for example here it says that my code is correct but

04:43.200 --> 04:51.560
it would be better if I use the FMAP operator instead of the FMAP function. We also have HLS

04:51.560 --> 04:57.600
which is let's say you are writing some code you don't know what to write at a specific

04:57.600 --> 05:03.960
pace you can put this underscore character and the compiler will tell you what you'd expect at this

05:03.960 --> 05:10.000
place. For example here it says that it waits for a function that take a string and return a hint.

05:10.000 --> 05:19.240
We have an inline repo so you can type some Haskell expressions, Haskell expressions in your

05:19.240 --> 05:25.480
code with a specific prefix and when you do that Haskell VS Code will print a button, will show a

05:25.480 --> 05:33.040
button and if you click on this button it will evaluate your expressions and add the result of

05:33.040 --> 05:39.320
these expressions in the comments below. So it can be very useful for adding some examples

05:39.320 --> 05:47.240
as comments in your code for documenting the code. Speaking of documentation we have HADOC which is

05:47.240 --> 05:53.080
a classic tool where we write documentation of our project inside as comment inside the code and

05:53.080 --> 06:01.080
then we can run KBIR HADOC and this generates documentation as HTML5 which look like this.

06:01.080 --> 06:08.280
As you can see it's a tool that is used for generating the documentation on IKG. And finally

06:08.280 --> 06:16.280
we have some tools for testing our project. First of all Haskell has a quite powerful type system so

06:16.280 --> 06:23.160
it already prevents us from writing many errors but we still need to test our code. We can do

06:23.160 --> 06:28.040
that with a very classic unit test. So for example here we just write a Haskell expression with a

06:28.040 --> 06:35.800
specific input and call a function on that input and we can write the value that we expect for this

06:35.800 --> 06:45.080
input. So we can write many inputs to test and test many functions and when we run KBIR test

06:45.960 --> 06:52.200
this will compile our testing program and run it and it checks that every expression is evaluated

06:52.200 --> 07:01.160
and returns the expected value. If there is a problem in one of the tests, KBIR test will tell

07:01.160 --> 07:08.760
us where the which function fails. We have more than that. We can use property-based testing

07:09.480 --> 07:15.480
instead of giving a specific input we can write a property which is a function that takes

07:15.480 --> 07:19.720
an argument and return a boolean and this boolean says if the property is satisfied or not.

07:20.600 --> 07:26.520
And when we do that a quick check will generate random inputs. Here it says that it has generated

07:26.520 --> 07:34.680
100 inputs and it tests the properties on each input. If one input makes the test fail,

07:35.560 --> 07:43.960
a quick check will try to shrink the input to the smallest value such that it's simpler for us

07:43.960 --> 07:51.000
to debug our program. Okay and to conclude Haskell has done nice tools for many years.

07:51.000 --> 07:58.600
All these two, KABAL, repo, quick check are quite old and now very mature. Since more recently we

07:58.600 --> 08:07.160
have very nice integrations in editors like VS Code or other editors. This is quite easy to install

08:07.160 --> 08:13.000
at least on Linux. You just have to install JSTUP, VS Code and the Haskell. Haskell plugin and that's

08:13.000 --> 08:19.800
it. You have a nice Haskell environment for the Rapinio project. This slide has an end-of-the-world

08:19.800 --> 08:28.440
culture here. You can also see the tooling below which presents other alternatives. So if you

08:28.440 --> 08:36.280
prefer to use VIM or MX there is a tool you can use to do that. And that's all from me. Thank you

08:36.280 --> 08:48.520
for your attention. Thank you very much, Julia. There is time for questions.

08:48.520 --> 08:54.760
Five minutes. Just shout it out and we can repeat the question.

09:08.760 --> 09:14.200
Can you please repeat the question? So what is the difference between the KABAL repo and the JSTI

09:14.200 --> 09:19.800
which is a repo from the compiler? In fact I think it's quite the same tool. KABAL will call

09:19.800 --> 09:28.360
the JSTI, the repo from the compiler. But if your project has some specific dependencies or some

09:28.360 --> 09:33.640
modules, the KABAL repo will take all of that into account so you can inspect that code and

09:33.640 --> 09:46.600
it's quite more powerful. But it's the same tool at the end. Which tools do you recommend for

09:46.600 --> 09:53.320
debugging Haskell? I don't use very much the Haskell debugger. There is a debugger.

09:53.960 --> 10:00.440
Debugging in Haskell is quite different from other languages I think. So there is a debugger

10:00.440 --> 10:12.520
where you can inspect memory or a runtime system using the JSTI compiler. It's not something that

10:13.480 --> 10:16.840
I can do very well. So I won't recommend anything.

10:16.840 --> 10:31.240
There's been your example which you showed that you can have comments evaluated as a record.

10:34.520 --> 10:39.720
Because I know Rust has something quite similar and it makes sure that examples in your documentation

10:39.720 --> 10:47.720
compile past tests. Can you do similar sorts of things? You had an example of a

10:49.000 --> 10:58.280
REPL evaluated in comments in your code. Is that specific for the VS Code extension?

10:58.280 --> 11:08.440
I think so. It's provided by Visual Studio Code with the SQL extension and it's automatic.

11:08.440 --> 11:33.240
Yeah, Rust has this feature. The evaluator is doing a test. What is very confusing for beginners

11:33.240 --> 11:38.360
sometimes if you come from another language like Rust or so, it's one way to build a project.

11:39.080 --> 11:46.280
In Haskell you have like Kabbal and Stag and Dix and Stag and Nix together. Then you have Kabbal

11:46.280 --> 11:54.840
V1, V2, NU. Is there some plan to clean this up someday to give a simple way to build Haskell

11:54.840 --> 12:06.280
project? In fact, Kabbal and Stag don't do exactly the same. Stag is based on snapshots,

12:06.280 --> 12:13.320
so it's more secure if you want to have the same build for a few projects. But both tools are

12:13.320 --> 12:21.320
compatible, so Stag can use a Kabbal file. You can just write a Kabbal file, then add the version of

12:21.320 --> 12:28.040
the snapshots you want to use for Stag. I agree with you, there are many tools.

12:37.240 --> 12:41.720
I'm not familiar with Stag, but I thought that a Kabbal has something like a log file nowadays,

12:41.720 --> 12:46.040
like a freeze is called. Is that similar to the Kabbal freeze?

12:46.040 --> 12:55.160
I don't know. I thought it was Kabbal, so there is a freeze with Nix, but I don't use Kabbal

12:55.880 --> 13:01.000
very much. Maybe, but I don't know. Okay, thanks.

13:01.000 --> 13:17.400
Sorry. Okay, we're out of time, so please once again thank Julian.

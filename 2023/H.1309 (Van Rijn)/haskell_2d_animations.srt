1
0:00:00.000 --> 0:00:11.160
So, I will speak about 2D animations in Haskell using low-slence and state.

2
0:00:11.160 --> 0:00:17.360
I'm Julien Duos, and I am an assistant professor in computer science, and I use Haskell mostly

3
0:00:17.360 --> 0:00:21.760
for teaching functional programming.

4
0:00:21.760 --> 0:00:26.440
Haskell is not the most readily used language for implementing animations, but still it

5
0:00:26.440 --> 0:00:32.080
has some interesting tools, such as library bindings like SDL2.

6
0:00:32.080 --> 0:00:38.280
We also have some entity component system implementations, which is a classic technique

7
0:00:38.280 --> 0:00:40.880
for developing games.

8
0:00:40.880 --> 0:00:46.720
And we also have functional-reactive programming, which is a technique for implementing complex

9
0:00:46.720 --> 0:00:50.080
user interfaces, for example.

10
0:00:50.080 --> 0:00:55.600
And we can find some cool projects developed in Haskell, for example, defect process, which

11
0:00:55.600 --> 0:01:01.480
is a game available on Steam that has been open-sourced recently.

12
0:01:01.480 --> 0:01:08.520
And also the organic library, which can make quite impressive animations.

13
0:01:08.520 --> 0:01:14.720
In this talk, I will show how to implement several animations on concrete examples using

14
0:01:14.720 --> 0:01:20.800
functional programming and how to improve this code using some features of Haskell,

15
0:01:20.800 --> 0:01:29.240
like data type, lazy evaluation, salence library, and state monad.

16
0:01:29.240 --> 0:01:32.560
So first, let's look at a very simple example.

17
0:01:32.560 --> 0:01:33.560
Let's say...

18
0:01:33.560 --> 0:01:36.560
One note, can we get to a little louder?

19
0:01:36.560 --> 0:01:37.560
Oh, okay.

20
0:01:37.560 --> 0:01:39.560
A little hard to understand.

21
0:01:39.560 --> 0:01:40.560
Okay.

22
0:01:40.560 --> 0:01:45.640
So, as a first example, let's say we want to draw a solid disk on the screen with a

23
0:01:45.640 --> 0:01:46.640
fixed radius.

24
0:01:46.640 --> 0:01:52.160
To do that, we can use the GloST library, which is a classic library in Haskell, for

25
0:01:52.160 --> 0:01:55.120
implementing animations and 2D graphics.

26
0:01:55.120 --> 0:02:03.520
This library provides some functions for drawing primitives or for handling user events.

27
0:02:03.520 --> 0:02:10.120
And the GloST library also provides some main loops that will run the main application.

28
0:02:10.120 --> 0:02:14.800
So basically, all we have to do is to write some unlock function, which say how to render

29
0:02:14.800 --> 0:02:17.840
the scene or how to render user inputs.

30
0:02:17.840 --> 0:02:23.120
And then we pass these functions to the main loop, and that's all.

31
0:02:23.120 --> 0:02:26.040
We can run the program.

32
0:02:26.040 --> 0:02:27.040
So let's do that.

33
0:02:27.040 --> 0:02:30.360
For this first example, we don't have any particular data.

34
0:02:30.360 --> 0:02:33.240
We just want to draw a disk with a fixed radius.

35
0:02:33.240 --> 0:02:38.120
So there is no letter to remember for describing the scene.

36
0:02:38.120 --> 0:02:42.680
So we can write a type, which represents the model of our application.

37
0:02:42.680 --> 0:02:48.360
But here, we don't need anything, so we can say it's a unit type, which means no letter.

38
0:02:48.360 --> 0:02:53.160
Then we have to write a function that renders the scene.

39
0:02:53.160 --> 0:02:58.360
So this function should take a model and return a picture.

40
0:02:58.360 --> 0:03:02.720
Here we use a solid circle function, which is provided by GloST to draw a disk on the

41
0:03:02.720 --> 0:03:03.720
screen.

42
0:03:03.720 --> 0:03:09.980
And we say we want a disk with 50 pixels as the radius.

43
0:03:09.980 --> 0:03:13.040
We also need a function to render user events.

44
0:03:13.040 --> 0:03:18.240
That function should take an event and a model and return a new model.

45
0:03:18.240 --> 0:03:25.920
This is a very classic way for modifying data in functional programming.

46
0:03:25.920 --> 0:03:31.320
We can't mutate a variable because it's a side effect.

47
0:03:31.320 --> 0:03:36.520
And pure functional programming, we can do that using pure functions.

48
0:03:36.520 --> 0:03:42.600
So we just take the current model and return a new model, a copy of the model, which contains

49
0:03:42.600 --> 0:03:44.760
the modifications.

50
0:03:44.760 --> 0:03:49.600
For now, the scene is static, so we just return the same model.

51
0:03:49.600 --> 0:03:53.760
And finally, to handle time, we just need a float.

52
0:03:53.760 --> 0:03:59.160
The elapsed time is the previous update.

53
0:03:59.160 --> 0:04:03.800
And the current model, and we return the new model with the modifications.

54
0:04:03.800 --> 0:04:11.200
And once again, the scene is static, so for now, we return the same model.

55
0:04:11.200 --> 0:04:14.360
Now we can write the main function.

56
0:04:14.360 --> 0:04:21.440
We just have to set some parameters, for example, the initial value for the model and some parameters

57
0:04:21.440 --> 0:04:26.600
for the window, the background color, and the format of the animation.

58
0:04:26.600 --> 0:04:32.080
Then we can call the play function, which is main loop provided by the GloST library.

59
0:04:32.080 --> 0:04:36.240
So we just pass to this function our parameters and our under function.

60
0:04:36.240 --> 0:04:40.200
This is a very quick way to do in functional programming.

61
0:04:40.200 --> 0:04:45.480
We have functions that we can pass to other functions and we can organize the code like

62
0:04:45.480 --> 0:04:46.480
this.

63
0:04:46.480 --> 0:04:48.400
So we get something like this.

64
0:04:48.400 --> 0:04:49.600
I can run the program.

65
0:04:49.600 --> 0:04:52.760
It's really impressive.

66
0:04:52.760 --> 0:04:56.640
Nice.

67
0:04:56.640 --> 0:05:00.080
And now let's add some animations.

68
0:05:00.080 --> 0:05:05.920
So let's say we want to refresh the scene every second and change the radius using a

69
0:05:05.920 --> 0:05:08.040
random number.

70
0:05:08.040 --> 0:05:12.640
So to do that, we can use a pseudo random number generator.

71
0:05:12.640 --> 0:05:17.300
We need to model our scene differently.

72
0:05:17.300 --> 0:05:21.720
So we write a type, which is model here, which has two fields.

73
0:05:21.720 --> 0:05:27.440
First is the current radius of the disk and the random number generator that we can use

74
0:05:27.440 --> 0:05:29.240
to update the scene.

75
0:05:29.240 --> 0:05:31.280
This is a record type in Haskell.

76
0:05:31.280 --> 0:05:35.280
We have two fields, which has a name.

77
0:05:35.280 --> 0:05:37.480
Each of them has a name.

78
0:05:37.480 --> 0:05:43.160
And we can then use the function here.

79
0:05:43.160 --> 0:05:47.760
So the name of the field is also a function that can access to this field using the model.

80
0:05:47.760 --> 0:05:54.520
So here we get the radius of the model and we use that as the radius for drawing the

81
0:05:54.520 --> 0:05:56.320
disk.

82
0:05:56.320 --> 0:06:00.760
For the under time function, all we have to do is to generate a new radius.

83
0:06:00.760 --> 0:06:09.240
So we take the generator inside the model and we call this function to generate a new

84
0:06:09.240 --> 0:06:11.360
radius.

85
0:06:11.360 --> 0:06:18.880
Since we cannot mutate the generator, we have to return a new generator for the next random

86
0:06:18.880 --> 0:06:19.880
generation.

87
0:06:19.880 --> 0:06:25.040
So this is why we get a new reduce here and a new generator here.

88
0:06:25.040 --> 0:06:26.040
And that's it.

89
0:06:26.040 --> 0:06:33.800
We can build and return the new model, which is the result of the function.

90
0:06:33.800 --> 0:06:36.600
We need to update the main function.

91
0:06:36.600 --> 0:06:39.680
We have to get a random number generator.

92
0:06:39.680 --> 0:06:48.360
We can do that with this function, which gets the standard number generator from the system.

93
0:06:48.360 --> 0:06:55.000
And we can also generate a first random number for the first radius of the animation.

94
0:06:55.000 --> 0:06:59.240
And the model is built, is constructed here.

95
0:06:59.240 --> 0:07:09.280
We get something like this, which is not so much impressive, but there is some animation.

96
0:07:09.280 --> 0:07:12.240
Okay.

97
0:07:12.240 --> 0:07:17.440
So this is a very classic way for generating random numbers.

98
0:07:17.440 --> 0:07:21.720
But in Haskell, we can do differently.

99
0:07:21.720 --> 0:07:28.200
Since Haskell has lazy evaluation, we can define an infinite list for all the radius

100
0:07:28.200 --> 0:07:29.640
of the animation.

101
0:07:29.640 --> 0:07:36.200
And Haskell will compute the numbers when it needs them.

102
0:07:36.200 --> 0:07:42.920
So instead of the generator, we can use here a random list, an infinite list.

103
0:07:42.920 --> 0:07:44.160
And that's all we need.

104
0:07:44.160 --> 0:07:52.080
We will consume the elements in this list for having new reduces.

105
0:07:52.080 --> 0:08:13.680
The unmet

106
0:08:13.680 --> 0:08:15.800
have a function to get an infinite list.

107
0:08:15.800 --> 0:08:22.000
So it just here, instead of the random R function, we just have to call the random RS function.

108
0:08:22.000 --> 0:08:24.800
And this gives us an infinite list of random number.

109
0:08:24.800 --> 0:08:30.080
And we don't have to under a random generator explicitly.

110
0:08:30.080 --> 0:08:33.000
Okay.

111
0:08:33.000 --> 0:08:36.400
So now let's look at a more complex example.

112
0:08:36.400 --> 0:08:41.720
Let's say we want a ball that moves inside the window and bounces against the border

113
0:08:41.720 --> 0:08:42.960
of the window.

114
0:08:42.960 --> 0:08:48.240
And I can show and control the result.

115
0:08:48.240 --> 0:08:49.560
Okay.

116
0:08:49.560 --> 0:08:54.760
So we want a ball that moves inside the windows.

117
0:08:54.760 --> 0:08:58.080
It can bounce against the border of the screen.

118
0:08:58.080 --> 0:09:06.320
And if I hit the enter key, the scene is reinitialized with a random velocity and a random position

119
0:09:06.320 --> 0:09:08.840
for the ball.

120
0:09:08.840 --> 0:09:11.840
So how can we do that?

121
0:09:11.840 --> 0:09:13.120
We need more complex types.

122
0:09:13.120 --> 0:09:19.080
So we can first describe a ball, a ball as a position and velocity.

123
0:09:19.080 --> 0:09:21.480
These fields are 2D vectors.

124
0:09:21.480 --> 0:09:26.440
And now the model is just the current ball and the infinite list of the other ball.

125
0:09:26.440 --> 0:09:33.360
We can generate randomly as we did before with the reduces.

126
0:09:33.360 --> 0:09:39.200
These types are more complex than before because we have a model that has a ball and a ball

127
0:09:39.200 --> 0:09:44.360
as two fields which are 3D vectors.

128
0:09:44.360 --> 0:09:49.200
So these vectors have x-coordinate and y-coordinate.

129
0:09:49.200 --> 0:09:55.040
So we have nested types which is a bit more complex to use.

130
0:09:55.040 --> 0:09:58.960
We can under this type with the scale using standard record syntax.

131
0:09:58.960 --> 0:10:01.840
There is no problem with that.

132
0:10:01.840 --> 0:10:04.600
The syntax is just a little bit more complex.

133
0:10:04.600 --> 0:10:07.760
So here we get the ball field of the model.

134
0:10:07.760 --> 0:10:11.480
And here, for example, we return the same model as the argument.

135
0:10:11.480 --> 0:10:19.080
But we change the ball field with these balls here, which has been computed before.

136
0:10:19.080 --> 0:10:22.160
All the other fields of the model doesn't change.

137
0:10:22.160 --> 0:10:26.160
We still copy them, in fact.

138
0:10:26.160 --> 0:10:28.600
So this function updates the scene.

139
0:10:28.600 --> 0:10:32.240
I have implemented it in two steps.

140
0:10:32.240 --> 0:10:38.440
So first we move the ball and then we compute Bonsie's against the border of the window.

141
0:10:38.440 --> 0:10:43.440
So let's look at the update Bonsie's function.

142
0:10:43.440 --> 0:10:47.680
We have to compute the collision with the border of the windows.

143
0:10:47.680 --> 0:10:53.760
So we take a ball as input and we return the ball after all the collisions have been computed.

144
0:10:53.760 --> 0:11:01.840
To do that, we can use the record syntax as did before to change only the field that need

145
0:11:01.840 --> 0:11:02.840
some modifications.

146
0:11:02.840 --> 0:11:08.640
But in fact, it's sometimes simpler to fully reconstruct a ball.

147
0:11:08.640 --> 0:11:11.600
So that's what I did here.

148
0:11:11.600 --> 0:11:18.320
I have detected a collision with the left border and I have to return this ball so I

149
0:11:18.320 --> 0:11:23.320
can set explicitly what is the new position vector and the new velocity vector.

150
0:11:23.320 --> 0:11:30.160
In fact, there are only two fields which are different, the x-coordinate of the position

151
0:11:30.160 --> 0:11:35.880
and the x-coordinate of the velocity.

152
0:11:35.880 --> 0:11:44.120
So to avoid reconstructing the ball, we can use a library in a scale which is a lens and

153
0:11:44.120 --> 0:11:45.960
which can simplify this code.

154
0:11:45.960 --> 0:11:54.600
So the lens library enables us to access and modify nested types so we can go deeper inside

155
0:11:54.600 --> 0:11:58.720
the type to just add a small modification.

156
0:11:58.720 --> 0:12:01.720
To do that, we need to construct lenses.

157
0:12:01.720 --> 0:12:05.760
Lenses are just functions that can access to a data type.

158
0:12:05.760 --> 0:12:11.040
And when we have these functions, we can use all the functions and operators provided by

159
0:12:11.040 --> 0:12:13.760
the lens library.

160
0:12:13.760 --> 0:12:16.080
So let's do that.

161
0:12:16.080 --> 0:12:22.480
We can build these functions, these access functions using this function, make lenses,

162
0:12:22.480 --> 0:12:24.160
and that does everything for us.

163
0:12:24.160 --> 0:12:29.280
So we just have to call make lenses for the ball and for the model.

164
0:12:29.280 --> 0:12:30.280
And that's it.

165
0:12:30.280 --> 0:12:37.920
We can use all the operators provided by the lens library.

166
0:12:37.920 --> 0:12:38.920
This looks like this.

167
0:12:38.920 --> 0:12:43.640
So here I return the model with two modifications.

168
0:12:43.640 --> 0:12:50.880
The first modification, which is applying this function to the ball field and the second

169
0:12:50.880 --> 0:12:56.760
modification here, where I apply the update functions, update bonuses function to the

170
0:12:56.760 --> 0:12:58.280
ball field of the model.

171
0:12:58.280 --> 0:13:07.680
And finally, the model with these two modifications is returned.

172
0:13:07.680 --> 0:13:09.720
We have more than that.

173
0:13:09.720 --> 0:13:15.040
For example, for the update bonuses function, instead of reconstructing the ball, we can

174
0:13:15.040 --> 0:13:20.400
now just get it deeper inside the type to apply some changes.

175
0:13:20.400 --> 0:13:27.960
For example, here I set this value to the x field of the position field of the ball

176
0:13:27.960 --> 0:13:29.640
and finally the ball is returned.

177
0:13:29.640 --> 0:13:32.120
And then I can change another modification here.

178
0:13:32.120 --> 0:13:36.680
I apply the negate function to the x field of the velocity field of the ball.

179
0:13:36.680 --> 0:13:44.600
So I can change several modifications and go deeply inside the type to make some modification,

180
0:13:44.600 --> 0:13:46.960
setting a value or applying a function.

181
0:13:46.960 --> 0:13:50.000
So this is quite interesting.

182
0:13:50.000 --> 0:13:53.680
We can still improve this code.

183
0:13:53.680 --> 0:13:56.440
As you can see, we take a ball and return a new ball.

184
0:13:56.440 --> 0:13:59.120
So it's just updating a ball.

185
0:13:59.120 --> 0:14:06.400
And to do that, we have computed here several steps, which corresponds to the collision

186
0:14:06.400 --> 0:14:08.880
between all the borders of the windows.

187
0:14:08.880 --> 0:14:13.760
In fact, we are modifying a ball, but we can't do that in pure functional programming.

188
0:14:13.760 --> 0:14:20.000
So we have to use intermediate variables that store the modification after this collision

189
0:14:20.000 --> 0:14:21.800
and this collision.

190
0:14:21.800 --> 0:14:24.280
So the code is quite cumbersome.

191
0:14:24.280 --> 0:14:32.760
And we can improve that using something in Haskell, which is called the state monad.

192
0:14:32.760 --> 0:14:35.040
So the state monad is a very well-known monad in Haskell.

193
0:14:35.040 --> 0:14:36.520
It's a very classic monad.

194
0:14:36.520 --> 0:14:42.580
It's just a context where we simulate mutating a state.

195
0:14:42.580 --> 0:14:48.320
So each action inside this monad is an access or modification of the current state.

196
0:14:48.320 --> 0:14:51.960
And we can get the final state or another result.

197
0:14:51.960 --> 0:14:54.920
We can do that also.

198
0:14:54.920 --> 0:15:00.280
And that works well with the lens library because the lens library provides a stateful

199
0:15:00.280 --> 0:15:05.320
version of its function and operators.

200
0:15:05.320 --> 0:15:06.320
So let's do that.

201
0:15:06.320 --> 0:15:09.120
We can change the under time function like this.

202
0:15:09.120 --> 0:15:16.080
Instead of applying several modifications, we can just execute the state actions defined

203
0:15:16.080 --> 0:15:17.080
here.

204
0:15:17.080 --> 0:15:19.840
So this is a function.

205
0:15:19.840 --> 0:15:23.760
This function takes a first parameter, which is the previous ball.

206
0:15:23.760 --> 0:15:28.040
And when we have applied all the actions, the state action, we get a final state, which

207
0:15:28.040 --> 0:15:33.800
is the final ball that we can use to update our model.

208
0:15:33.800 --> 0:15:11.840
Let's see the update

209
0:15:11.840 --> 0:15:16.840
this function.

210
0:15:16.840 --> 0:15:40.800
So instead of taking a ball and returning a ball, now it's clear that we are in a state

211
0:15:40.800 --> 0:15:42.400
monad.

212
0:15:42.400 --> 0:15:47.720
And this is a state action where the current state is a ball.

213
0:15:47.720 --> 0:15:49.720
And we can return a value.

214
0:15:49.720 --> 0:15:50.720
But here we don't need that.

215
0:15:50.720 --> 0:15:55.520
So the function return unit.

216
0:15:55.520 --> 0:16:02.320
That means that every action inside this function is now an action, a state action.

217
0:16:02.320 --> 0:16:08.360
So reading the state, modifying the state, and so on.

218
0:16:08.360 --> 0:16:15.240
For example, here we can access the post field of the current state, which is a ball.

219
0:16:15.240 --> 0:16:22.960
Here we can set this value to the x field of the position field of the ball or applying

220
0:16:22.960 --> 0:16:29.320
a function on the x field of the velocity field of the ball, which is the current state.

221
0:16:29.320 --> 0:16:36.900
Since the state monad is a monad, we can use all the features available for monads, such

222
0:16:36.900 --> 0:16:38.340
as the new notation.

223
0:16:38.340 --> 0:16:42.760
So we can change several actions like this.

224
0:16:42.760 --> 0:16:51.200
And we can also use some functions provided for monads, such as the went function.

225
0:16:51.200 --> 0:16:55.180
As a result, the code is a little bit more simple.

226
0:16:55.180 --> 0:17:02.440
And it's clear that this is a state action that we have a current state, which is modified

227
0:17:02.440 --> 0:17:04.520
according to the code.

228
0:17:04.520 --> 0:17:07.200
And then we get the final state.

229
0:17:07.200 --> 0:17:11.400
And this is checked by the compiler.

230
0:17:11.400 --> 0:17:17.840
So to conclude, we have seen that functional programming and Haskell, using a functional

231
0:17:17.840 --> 0:17:19.960
programming and Haskell, we can implement animations.

232
0:17:19.960 --> 0:17:24.680
This is very natural in functional programming since we just have to pass some function to

233
0:17:24.680 --> 0:17:26.800
other functions like a main loop.

234
0:17:26.800 --> 0:17:31.600
And we can decompose and organize our code like this.

235
0:17:31.600 --> 0:17:35.160
We use infinite list to generate random numbers.

236
0:17:35.160 --> 0:17:40.120
So we don't have to use random number explicitly.

237
0:17:40.120 --> 0:17:44.520
We just consume the elements of this list.

238
0:17:44.520 --> 0:17:50.280
We also use the length library to access or modify nested types.

239
0:17:50.280 --> 0:17:54.400
And we can go deeply inside these types.

240
0:17:54.400 --> 0:17:58.920
And finally, we simulate a mutable state using the state monad.

241
0:17:58.920 --> 0:18:04.040
So we can modify a variable and get the final result.

242
0:18:04.040 --> 0:18:07.440
So all of this is still based on functional programming.

243
0:18:07.440 --> 0:18:13.200
So we just manipulate pure functions and static typing.

244
0:18:13.200 --> 0:18:16.760
And this is quite easy to read and less work-front.

245
0:18:16.760 --> 0:18:21.520
Since we have no side effects, a function only depends on its argument and produces

246
0:18:21.520 --> 0:18:24.680
the same result if the arguments are the same.

247
0:18:24.680 --> 0:18:30.080
And all of this is checked by the compiler.

248
0:18:30.080 --> 0:18:34.920
So this code, this state and the code shown here are available at this thing.

249
0:18:34.920 --> 0:18:41.920
And you can find some information in the documentation of the libraries and see the things that sit

250
0:18:41.920 --> 0:18:42.920
for me.

251
0:18:42.920 --> 0:18:43.920
Thank you for your attention.

252
0:18:43.920 --> 0:18:46.960
Thanks to the organizer.

253
0:18:46.960 --> 0:18:55.320
Thank you, Julien.

254
0:18:55.320 --> 0:19:21.320
If you have a question, put up your hand, I'll bring the mic.

255
0:19:21.320 --> 0:19:26.040
Okay any questions?

256
0:19:26.040 --> 0:19:27.920
Yes.

257
0:19:27.920 --> 0:19:32.200
Do we know what the performance of gloss is like for complex applications?

258
0:19:32.200 --> 0:19:39.880
Could you write a complex QI in gloss?

259
0:19:39.880 --> 0:19:44.760
Do we know what the performance of gloss is for a complex display?

260
0:19:44.760 --> 0:19:52.720
Okay, gloss is based on OpenGL, so it's not that slow, but I don't know for very complex

261
0:19:52.720 --> 0:19:55.480
animations.

262
0:19:55.480 --> 0:20:03.640
I believe some projects use SDL, and it seems they have no problem of performance, but I

263
0:20:03.640 --> 0:20:17.360
have no experience more like that.

264
0:20:17.360 --> 0:20:23.480
In the play function, it pretty much makes the whole program pure with no I.O.

265
0:20:23.480 --> 0:20:27.920
What if you do want to do any I.O. in an application?

266
0:20:27.920 --> 0:20:37.120
Okay, so the gloss library provides two interfaces, one which is purely functional, and another

267
0:20:37.120 --> 0:20:38.120
where you can do I.O.

268
0:20:38.120 --> 0:20:48.560
So there is a version where you can do that.

269
0:20:48.560 --> 0:20:50.720
Okay any more questions?

270
0:20:50.720 --> 0:20:51.720
Yes.

271
0:20:51.720 --> 0:21:03.360
Maybe it's without a microphone, can you explain the operators used for the lenses?

272
0:21:03.360 --> 0:21:05.360
There is many many operators.

273
0:21:05.360 --> 0:21:10.600
Is the person signed?

274
0:21:10.600 --> 0:21:16.760
Yeah, okay, so there is two versions of these operators, one which is purely functional,

275
0:21:16.760 --> 0:21:23.320
so we just take the data structures that it can access and return the value, so this is

276
0:21:23.320 --> 0:21:24.320
such operators.

277
0:21:24.320 --> 0:21:32.560
So that means we apply the modification, so the ball 0 is returned after this modification,

278
0:21:32.560 --> 0:21:35.320
so this is what this operator means.

279
0:21:35.320 --> 0:21:40.720
Here it's for accessing another field, so it's an x field of the position field of the

280
0:21:40.720 --> 0:21:49.800
table, and this operator says we set a value in that field, and this operator says we apply

281
0:21:49.800 --> 0:21:56.480
a function on the field, and the stateful version is the same, but we have an equal

282
0:21:56.480 --> 0:21:59.480
sign instead of the tilde.

283
0:21:59.480 --> 0:22:03.480
It's like a get and a set.

284
0:22:03.480 --> 0:22:08.480
Yes, we can get it like this, we can get the data.

285
0:22:08.480 --> 0:22:14.920
Okay, any more questions?

286
0:22:14.920 --> 0:22:20.160
Okay, let's thank Julia.

287
0:22:20.160 --> 0:22:21.160
Thank you.

288
0:22:21.160 --> 0:22:39.060
It's important for us to thank Juliahorn and her team, thank you so much, it was great

289
0:22:39.060 --> 0:22:40.800
to be here.

290
0:22:40.800 --> 0:22:44.480
And thank you, Julia.

291
0:22:44.480 --> 0:22:48.680
Go learn better soon.


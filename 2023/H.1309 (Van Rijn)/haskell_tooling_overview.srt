1
0:00:00.000 --> 0:00:10.720
Okay, so here is a quick overview of the Haskell tooling. I am Julien Deus. I am an assistant

2
0:00:10.720 --> 0:00:16.480
professor in computer science and I use Haskell since 2015, initially for teaching functional

3
0:00:16.480 --> 0:00:24.000
programming. So since the beginning of the language Haskell has many tools have been

4
0:00:24.000 --> 0:00:31.360
created for developing in Haskell and today most of the Haskell developers use a GHC compiler

5
0:00:31.360 --> 0:00:38.280
for building Haskell projects we have an HCL such as Kerbal or Stack. Haskell is now quite

6
0:00:38.280 --> 0:00:46.040
well integrated in the editor such as Visual Studio Code, VIM or Emacs, thanks to LSP implementations

7
0:00:46.040 --> 0:00:55.400
such as HLS and all these tools can be installed using some tools like GHC app or Nix. In this talk

8
0:00:55.400 --> 0:01:05.240
I will focus on Kerbal with VS Code and the Haskell plugin. First we have some online tools such as

9
0:01:05.240 --> 0:01:12.760
Akage which is a package archive so you can go to the website and search for packages there is

10
0:01:12.760 --> 0:01:20.680
for example some libraries for doing whatever you want. These libraries you can access their

11
0:01:20.680 --> 0:01:28.160
documentation so you can see what to do with this library and how to use it and you also access to

12
0:01:28.160 --> 0:01:36.160
their source code with nice colors and code navigation which is quite useful. We also have

13
0:01:36.160 --> 0:01:43.200
Hoggle which is Haskell Google so it's a search engine and you can type the name of a function

14
0:01:43.200 --> 0:01:50.320
and Hoggle will give you a link to the documentation of the function in Akage. If you don't know the

15
0:01:50.320 --> 0:01:56.520
name of the function you can also type write the type of the function and Hoggle try to find a

16
0:01:56.520 --> 0:02:03.080
function that matches that type so you can see its documentation on Akage and you see if it's

17
0:02:03.080 --> 0:02:11.240
the function you are looking for. To work on a Haskell project you can use Kerbal which is a

18
0:02:11.240 --> 0:02:20.040
tool for building and packaging projects. To use Kerbal we have to write a Kerbal file which is a

19
0:02:20.040 --> 0:02:28.000
configuration file where you can specify some information about your project and also define

20
0:02:28.000 --> 0:02:33.440
the target you want to build in your project. For example if you have a library or executables you

21
0:02:33.440 --> 0:02:39.440
can write them. You can also add some dependencies for example libraries are available on Akage.

22
0:02:39.440 --> 0:02:47.240
Then you can use the Kerbal tool once we have this file so you can run Kerbal build to build

23
0:02:47.240 --> 0:02:56.200
our targets and when you do that Kerbal will get the dependencies from Akage and run the compiler

24
0:02:56.200 --> 0:03:03.440
to build all your files. We also have the Kerbal run command to run specific targets and you can

25
0:03:03.440 --> 0:03:10.840
also give command line arguments if your program requires that. We have a Reaper which is a read

26
0:03:10.840 --> 0:03:16.360
eval print loop so this runs a compiler in an interpreter mode so you can write some Haskell

27
0:03:16.360 --> 0:03:23.360
expressions and the compiler will evaluate these expressions and print the result so it's very

28
0:03:23.360 --> 0:03:30.240
interesting for testing some code and you have also more specific commands. For example here

29
0:03:30.240 --> 0:03:37.400
you can ask some information about the type of function or anything. Okay so to work on the

30
0:03:37.400 --> 0:03:43.720
Haskell project we can use editors like Visual Studio Code with HLS and the Haskell. Haskell

31
0:03:43.720 --> 0:03:50.320
plugin. It's a very easy tool so you have the file of your project you can open them edit them.

32
0:03:50.320 --> 0:04:01.600
You also have code navigation and documentation so if I put the mouse pointer over a function

33
0:04:01.600 --> 0:04:07.320
VS Code will show me the documentation of that function and if I control click on the function

34
0:04:07.320 --> 0:04:14.120
VS Code goes to the definition of the function. We also have code completion so VS Code tries to

35
0:04:14.120 --> 0:04:21.360
complete the code you are typing. We have an integration of the compiler so if there is

36
0:04:21.360 --> 0:04:28.680
an error in your code VS Code will show you where is this error and it can give you the

37
0:04:28.680 --> 0:04:36.120
message from the compiler. Even if your code is correct, VS Code can help you improve your code.

38
0:04:36.120 --> 0:04:43.200
It can give some hints to refactor it. So for example here it says that my code is correct but

39
0:04:43.200 --> 0:04:51.560
it would be better if I use the FMAP operator instead of the FMAP function. We also have HLS

40
0:04:51.560 --> 0:04:57.600
which is let's say you are writing some code you don't know what to write at a specific

41
0:04:57.600 --> 0:05:03.960
pace you can put this underscore character and the compiler will tell you what you'd expect at this

42
0:05:03.960 --> 0:05:10.000
place. For example here it says that it waits for a function that take a string and return a hint.

43
0:05:10.000 --> 0:05:19.240
We have an inline repo so you can type some Haskell expressions, Haskell expressions in your

44
0:05:19.240 --> 0:05:25.480
code with a specific prefix and when you do that Haskell VS Code will print a button, will show a

45
0:05:25.480 --> 0:05:33.040
button and if you click on this button it will evaluate your expressions and add the result of

46
0:05:33.040 --> 0:05:39.320
these expressions in the comments below. So it can be very useful for adding some examples

47
0:05:39.320 --> 0:05:47.240
as comments in your code for documenting the code. Speaking of documentation we have HADOC which is

48
0:05:47.240 --> 0:05:53.080
a classic tool where we write documentation of our project inside as comment inside the code and

49
0:05:53.080 --> 0:06:01.080
then we can run KBIR HADOC and this generates documentation as HTML5 which look like this.

50
0:06:01.080 --> 0:06:08.280
As you can see it's a tool that is used for generating the documentation on IKG. And finally

51
0:06:08.280 --> 0:06:16.280
we have some tools for testing our project. First of all Haskell has a quite powerful type system so

52
0:06:16.280 --> 0:06:23.160
it already prevents us from writing many errors but we still need to test our code. We can do

53
0:06:23.160 --> 0:06:28.040
that with a very classic unit test. So for example here we just write a Haskell expression with a

54
0:06:28.040 --> 0:06:35.800
specific input and call a function on that input and we can write the value that we expect for this

55
0:06:35.800 --> 0:06:45.080
input. So we can write many inputs to test and test many functions and when we run KBIR test

56
0:06:45.960 --> 0:06:52.200
this will compile our testing program and run it and it checks that every expression is evaluated

57
0:06:52.200 --> 0:07:01.160
and returns the expected value. If there is a problem in one of the tests, KBIR test will tell

58
0:07:01.160 --> 0:07:08.760
us where the which function fails. We have more than that. We can use property-based testing

59
0:07:09.480 --> 0:07:15.480
instead of giving a specific input we can write a property which is a function that takes

60
0:07:15.480 --> 0:07:19.720
an argument and return a boolean and this boolean says if the property is satisfied or not.

61
0:07:20.600 --> 0:07:26.520
And when we do that a quick check will generate random inputs. Here it says that it has generated

62
0:07:26.520 --> 0:07:34.680
100 inputs and it tests the properties on each input. If one input makes the test fail,

63
0:07:35.560 --> 0:07:43.960
a quick check will try to shrink the input to the smallest value such that it's simpler for us

64
0:07:43.960 --> 0:07:51.000
to debug our program. Okay and to conclude Haskell has done nice tools for many years.

65
0:07:51.000 --> 0:07:58.600
All these two, KABAL, repo, quick check are quite old and now very mature. Since more recently we

66
0:07:58.600 --> 0:08:07.160
have very nice integrations in editors like VS Code or other editors. This is quite easy to install

67
0:08:07.160 --> 0:08:13.000
at least on Linux. You just have to install JSTUP, VS Code and the Haskell. Haskell plugin and that's

68
0:08:13.000 --> 0:08:19.800
it. You have a nice Haskell environment for the Rapinio project. This slide has an end-of-the-world

69
0:08:19.800 --> 0:08:28.440
culture here. You can also see the tooling below which presents other alternatives. So if you

70
0:08:28.440 --> 0:08:36.280
prefer to use VIM or MX there is a tool you can use to do that. And that's all from me. Thank you

71
0:08:36.280 --> 0:08:48.520
for your attention. Thank you very much, Julia. There is time for questions.

72
0:08:48.520 --> 0:08:54.760
Five minutes. Just shout it out and we can repeat the question.

73
0:09:08.760 --> 0:09:14.200
Can you please repeat the question? So what is the difference between the KABAL repo and the JSTI

74
0:09:14.200 --> 0:09:19.800
which is a repo from the compiler? In fact I think it's quite the same tool. KABAL will call

75
0:09:19.800 --> 0:09:28.360
the JSTI, the repo from the compiler. But if your project has some specific dependencies or some

76
0:09:28.360 --> 0:09:33.640
modules, the KABAL repo will take all of that into account so you can inspect that code and

77
0:09:33.640 --> 0:09:46.600
it's quite more powerful. But it's the same tool at the end. Which tools do you recommend for

78
0:09:46.600 --> 0:09:53.320
debugging Haskell? I don't use very much the Haskell debugger. There is a debugger.

79
0:09:53.960 --> 0:10:00.440
Debugging in Haskell is quite different from other languages I think. So there is a debugger

80
0:10:00.440 --> 0:10:12.520
where you can inspect memory or a runtime system using the JSTI compiler. It's not something that

81
0:10:13.480 --> 0:10:16.840
I can do very well. So I won't recommend anything.

82
0:10:16.840 --> 0:10:31.240
There's been your example which you showed that you can have comments evaluated as a record.

83
0:10:34.520 --> 0:10:39.720
Because I know Rust has something quite similar and it makes sure that examples in your documentation

84
0:10:39.720 --> 0:10:47.720
compile past tests. Can you do similar sorts of things? You had an example of a

85
0:10:49.000 --> 0:10:58.280
REPL evaluated in comments in your code. Is that specific for the VS Code extension?

86
0:10:58.280 --> 0:11:08.440
I think so. It's provided by Visual Studio Code with the SQL extension and it's automatic.

87
0:11:08.440 --> 0:11:33.240
Yeah, Rust has this feature. The evaluator is doing a test. What is very confusing for beginners

88
0:11:33.240 --> 0:11:38.360
sometimes if you come from another language like Rust or so, it's one way to build a project.

89
0:11:39.080 --> 0:11:46.280
In Haskell you have like Kabbal and Stag and Dix and Stag and Nix together. Then you have Kabbal

90
0:11:46.280 --> 0:11:54.840
V1, V2, NU. Is there some plan to clean this up someday to give a simple way to build Haskell

91
0:11:54.840 --> 0:12:06.280
project? In fact, Kabbal and Stag don't do exactly the same. Stag is based on snapshots,

92
0:12:06.280 --> 0:12:13.320
so it's more secure if you want to have the same build for a few projects. But both tools are

93
0:12:13.320 --> 0:12:21.320
compatible, so Stag can use a Kabbal file. You can just write a Kabbal file, then add the version of

94
0:12:21.320 --> 0:12:28.040
the snapshots you want to use for Stag. I agree with you, there are many tools.

95
0:12:37.240 --> 0:12:41.720
I'm not familiar with Stag, but I thought that a Kabbal has something like a log file nowadays,

96
0:12:41.720 --> 0:12:46.040
like a freeze is called. Is that similar to the Kabbal freeze?

97
0:12:46.040 --> 0:12:55.160
I don't know. I thought it was Kabbal, so there is a freeze with Nix, but I don't use Kabbal

98
0:12:55.880 --> 0:13:01.000
very much. Maybe, but I don't know. Okay, thanks.

99
0:13:01.000 --> 0:13:17.400
Sorry. Okay, we're out of time, so please once again thank Julian.


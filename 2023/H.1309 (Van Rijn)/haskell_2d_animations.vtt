WEBVTT

00:00.000 --> 00:11.160
So, I will speak about 2D animations in Haskell using low-slence and state.

00:11.160 --> 00:17.360
I'm Julien Duos, and I am an assistant professor in computer science, and I use Haskell mostly

00:17.360 --> 00:21.760
for teaching functional programming.

00:21.760 --> 00:26.440
Haskell is not the most readily used language for implementing animations, but still it

00:26.440 --> 00:32.080
has some interesting tools, such as library bindings like SDL2.

00:32.080 --> 00:38.280
We also have some entity component system implementations, which is a classic technique

00:38.280 --> 00:40.880
for developing games.

00:40.880 --> 00:46.720
And we also have functional-reactive programming, which is a technique for implementing complex

00:46.720 --> 00:50.080
user interfaces, for example.

00:50.080 --> 00:55.600
And we can find some cool projects developed in Haskell, for example, defect process, which

00:55.600 --> 01:01.480
is a game available on Steam that has been open-sourced recently.

01:01.480 --> 01:08.520
And also the organic library, which can make quite impressive animations.

01:08.520 --> 01:14.720
In this talk, I will show how to implement several animations on concrete examples using

01:14.720 --> 01:20.800
functional programming and how to improve this code using some features of Haskell,

01:20.800 --> 01:29.240
like data type, lazy evaluation, salence library, and state monad.

01:29.240 --> 01:32.560
So first, let's look at a very simple example.

01:32.560 --> 01:33.560
Let's say...

01:33.560 --> 01:36.560
One note, can we get to a little louder?

01:36.560 --> 01:37.560
Oh, okay.

01:37.560 --> 01:39.560
A little hard to understand.

01:39.560 --> 01:40.560
Okay.

01:40.560 --> 01:45.640
So, as a first example, let's say we want to draw a solid disk on the screen with a

01:45.640 --> 01:46.640
fixed radius.

01:46.640 --> 01:52.160
To do that, we can use the GloST library, which is a classic library in Haskell, for

01:52.160 --> 01:55.120
implementing animations and 2D graphics.

01:55.120 --> 02:03.520
This library provides some functions for drawing primitives or for handling user events.

02:03.520 --> 02:10.120
And the GloST library also provides some main loops that will run the main application.

02:10.120 --> 02:14.800
So basically, all we have to do is to write some unlock function, which say how to render

02:14.800 --> 02:17.840
the scene or how to render user inputs.

02:17.840 --> 02:23.120
And then we pass these functions to the main loop, and that's all.

02:23.120 --> 02:26.040
We can run the program.

02:26.040 --> 02:27.040
So let's do that.

02:27.040 --> 02:30.360
For this first example, we don't have any particular data.

02:30.360 --> 02:33.240
We just want to draw a disk with a fixed radius.

02:33.240 --> 02:38.120
So there is no letter to remember for describing the scene.

02:38.120 --> 02:42.680
So we can write a type, which represents the model of our application.

02:42.680 --> 02:48.360
But here, we don't need anything, so we can say it's a unit type, which means no letter.

02:48.360 --> 02:53.160
Then we have to write a function that renders the scene.

02:53.160 --> 02:58.360
So this function should take a model and return a picture.

02:58.360 --> 03:02.720
Here we use a solid circle function, which is provided by GloST to draw a disk on the

03:02.720 --> 03:03.720
screen.

03:03.720 --> 03:09.980
And we say we want a disk with 50 pixels as the radius.

03:09.980 --> 03:13.040
We also need a function to render user events.

03:13.040 --> 03:18.240
That function should take an event and a model and return a new model.

03:18.240 --> 03:25.920
This is a very classic way for modifying data in functional programming.

03:25.920 --> 03:31.320
We can't mutate a variable because it's a side effect.

03:31.320 --> 03:36.520
And pure functional programming, we can do that using pure functions.

03:36.520 --> 03:42.600
So we just take the current model and return a new model, a copy of the model, which contains

03:42.600 --> 03:44.760
the modifications.

03:44.760 --> 03:49.600
For now, the scene is static, so we just return the same model.

03:49.600 --> 03:53.760
And finally, to handle time, we just need a float.

03:53.760 --> 03:59.160
The elapsed time is the previous update.

03:59.160 --> 04:03.800
And the current model, and we return the new model with the modifications.

04:03.800 --> 04:11.200
And once again, the scene is static, so for now, we return the same model.

04:11.200 --> 04:14.360
Now we can write the main function.

04:14.360 --> 04:21.440
We just have to set some parameters, for example, the initial value for the model and some parameters

04:21.440 --> 04:26.600
for the window, the background color, and the format of the animation.

04:26.600 --> 04:32.080
Then we can call the play function, which is main loop provided by the GloST library.

04:32.080 --> 04:36.240
So we just pass to this function our parameters and our under function.

04:36.240 --> 04:40.200
This is a very quick way to do in functional programming.

04:40.200 --> 04:45.480
We have functions that we can pass to other functions and we can organize the code like

04:45.480 --> 04:46.480
this.

04:46.480 --> 04:48.400
So we get something like this.

04:48.400 --> 04:49.600
I can run the program.

04:49.600 --> 04:52.760
It's really impressive.

04:52.760 --> 04:56.640
Nice.

04:56.640 --> 05:00.080
And now let's add some animations.

05:00.080 --> 05:05.920
So let's say we want to refresh the scene every second and change the radius using a

05:05.920 --> 05:08.040
random number.

05:08.040 --> 05:12.640
So to do that, we can use a pseudo random number generator.

05:12.640 --> 05:17.300
We need to model our scene differently.

05:17.300 --> 05:21.720
So we write a type, which is model here, which has two fields.

05:21.720 --> 05:27.440
First is the current radius of the disk and the random number generator that we can use

05:27.440 --> 05:29.240
to update the scene.

05:29.240 --> 05:31.280
This is a record type in Haskell.

05:31.280 --> 05:35.280
We have two fields, which has a name.

05:35.280 --> 05:37.480
Each of them has a name.

05:37.480 --> 05:43.160
And we can then use the function here.

05:43.160 --> 05:47.760
So the name of the field is also a function that can access to this field using the model.

05:47.760 --> 05:54.520
So here we get the radius of the model and we use that as the radius for drawing the

05:54.520 --> 05:56.320
disk.

05:56.320 --> 06:00.760
For the under time function, all we have to do is to generate a new radius.

06:00.760 --> 06:09.240
So we take the generator inside the model and we call this function to generate a new

06:09.240 --> 06:11.360
radius.

06:11.360 --> 06:18.880
Since we cannot mutate the generator, we have to return a new generator for the next random

06:18.880 --> 06:19.880
generation.

06:19.880 --> 06:25.040
So this is why we get a new reduce here and a new generator here.

06:25.040 --> 06:26.040
And that's it.

06:26.040 --> 06:33.800
We can build and return the new model, which is the result of the function.

06:33.800 --> 06:36.600
We need to update the main function.

06:36.600 --> 06:39.680
We have to get a random number generator.

06:39.680 --> 06:48.360
We can do that with this function, which gets the standard number generator from the system.

06:48.360 --> 06:55.000
And we can also generate a first random number for the first radius of the animation.

06:55.000 --> 06:59.240
And the model is built, is constructed here.

06:59.240 --> 07:09.280
We get something like this, which is not so much impressive, but there is some animation.

07:09.280 --> 07:12.240
Okay.

07:12.240 --> 07:17.440
So this is a very classic way for generating random numbers.

07:17.440 --> 07:21.720
But in Haskell, we can do differently.

07:21.720 --> 07:28.200
Since Haskell has lazy evaluation, we can define an infinite list for all the radius

07:28.200 --> 07:29.640
of the animation.

07:29.640 --> 07:36.200
And Haskell will compute the numbers when it needs them.

07:36.200 --> 07:42.920
So instead of the generator, we can use here a random list, an infinite list.

07:42.920 --> 07:44.160
And that's all we need.

07:44.160 --> 07:52.080
We will consume the elements in this list for having new reduces.

07:52.080 --> 08:13.680
The unmet

08:13.680 --> 08:15.800
have a function to get an infinite list.

08:15.800 --> 08:22.000
So it just here, instead of the random R function, we just have to call the random RS function.

08:22.000 --> 08:24.800
And this gives us an infinite list of random number.

08:24.800 --> 08:30.080
And we don't have to under a random generator explicitly.

08:30.080 --> 08:33.000
Okay.

08:33.000 --> 08:36.400
So now let's look at a more complex example.

08:36.400 --> 08:41.720
Let's say we want a ball that moves inside the window and bounces against the border

08:41.720 --> 08:42.960
of the window.

08:42.960 --> 08:48.240
And I can show and control the result.

08:48.240 --> 08:49.560
Okay.

08:49.560 --> 08:54.760
So we want a ball that moves inside the windows.

08:54.760 --> 08:58.080
It can bounce against the border of the screen.

08:58.080 --> 09:06.320
And if I hit the enter key, the scene is reinitialized with a random velocity and a random position

09:06.320 --> 09:08.840
for the ball.

09:08.840 --> 09:11.840
So how can we do that?

09:11.840 --> 09:13.120
We need more complex types.

09:13.120 --> 09:19.080
So we can first describe a ball, a ball as a position and velocity.

09:19.080 --> 09:21.480
These fields are 2D vectors.

09:21.480 --> 09:26.440
And now the model is just the current ball and the infinite list of the other ball.

09:26.440 --> 09:33.360
We can generate randomly as we did before with the reduces.

09:33.360 --> 09:39.200
These types are more complex than before because we have a model that has a ball and a ball

09:39.200 --> 09:44.360
as two fields which are 3D vectors.

09:44.360 --> 09:49.200
So these vectors have x-coordinate and y-coordinate.

09:49.200 --> 09:55.040
So we have nested types which is a bit more complex to use.

09:55.040 --> 09:58.960
We can under this type with the scale using standard record syntax.

09:58.960 --> 10:01.840
There is no problem with that.

10:01.840 --> 10:04.600
The syntax is just a little bit more complex.

10:04.600 --> 10:07.760
So here we get the ball field of the model.

10:07.760 --> 10:11.480
And here, for example, we return the same model as the argument.

10:11.480 --> 10:19.080
But we change the ball field with these balls here, which has been computed before.

10:19.080 --> 10:22.160
All the other fields of the model doesn't change.

10:22.160 --> 10:26.160
We still copy them, in fact.

10:26.160 --> 10:28.600
So this function updates the scene.

10:28.600 --> 10:32.240
I have implemented it in two steps.

10:32.240 --> 10:38.440
So first we move the ball and then we compute Bonsie's against the border of the window.

10:38.440 --> 10:43.440
So let's look at the update Bonsie's function.

10:43.440 --> 10:47.680
We have to compute the collision with the border of the windows.

10:47.680 --> 10:53.760
So we take a ball as input and we return the ball after all the collisions have been computed.

10:53.760 --> 11:01.840
To do that, we can use the record syntax as did before to change only the field that need

11:01.840 --> 11:02.840
some modifications.

11:02.840 --> 11:08.640
But in fact, it's sometimes simpler to fully reconstruct a ball.

11:08.640 --> 11:11.600
So that's what I did here.

11:11.600 --> 11:18.320
I have detected a collision with the left border and I have to return this ball so I

11:18.320 --> 11:23.320
can set explicitly what is the new position vector and the new velocity vector.

11:23.320 --> 11:30.160
In fact, there are only two fields which are different, the x-coordinate of the position

11:30.160 --> 11:35.880
and the x-coordinate of the velocity.

11:35.880 --> 11:44.120
So to avoid reconstructing the ball, we can use a library in a scale which is a lens and

11:44.120 --> 11:45.960
which can simplify this code.

11:45.960 --> 11:54.600
So the lens library enables us to access and modify nested types so we can go deeper inside

11:54.600 --> 11:58.720
the type to just add a small modification.

11:58.720 --> 12:01.720
To do that, we need to construct lenses.

12:01.720 --> 12:05.760
Lenses are just functions that can access to a data type.

12:05.760 --> 12:11.040
And when we have these functions, we can use all the functions and operators provided by

12:11.040 --> 12:13.760
the lens library.

12:13.760 --> 12:16.080
So let's do that.

12:16.080 --> 12:22.480
We can build these functions, these access functions using this function, make lenses,

12:22.480 --> 12:24.160
and that does everything for us.

12:24.160 --> 12:29.280
So we just have to call make lenses for the ball and for the model.

12:29.280 --> 12:30.280
And that's it.

12:30.280 --> 12:37.920
We can use all the operators provided by the lens library.

12:37.920 --> 12:38.920
This looks like this.

12:38.920 --> 12:43.640
So here I return the model with two modifications.

12:43.640 --> 12:50.880
The first modification, which is applying this function to the ball field and the second

12:50.880 --> 12:56.760
modification here, where I apply the update functions, update bonuses function to the

12:56.760 --> 12:58.280
ball field of the model.

12:58.280 --> 13:07.680
And finally, the model with these two modifications is returned.

13:07.680 --> 13:09.720
We have more than that.

13:09.720 --> 13:15.040
For example, for the update bonuses function, instead of reconstructing the ball, we can

13:15.040 --> 13:20.400
now just get it deeper inside the type to apply some changes.

13:20.400 --> 13:27.960
For example, here I set this value to the x field of the position field of the ball

13:27.960 --> 13:29.640
and finally the ball is returned.

13:29.640 --> 13:32.120
And then I can change another modification here.

13:32.120 --> 13:36.680
I apply the negate function to the x field of the velocity field of the ball.

13:36.680 --> 13:44.600
So I can change several modifications and go deeply inside the type to make some modification,

13:44.600 --> 13:46.960
setting a value or applying a function.

13:46.960 --> 13:50.000
So this is quite interesting.

13:50.000 --> 13:53.680
We can still improve this code.

13:53.680 --> 13:56.440
As you can see, we take a ball and return a new ball.

13:56.440 --> 13:59.120
So it's just updating a ball.

13:59.120 --> 14:06.400
And to do that, we have computed here several steps, which corresponds to the collision

14:06.400 --> 14:08.880
between all the borders of the windows.

14:08.880 --> 14:13.760
In fact, we are modifying a ball, but we can't do that in pure functional programming.

14:13.760 --> 14:20.000
So we have to use intermediate variables that store the modification after this collision

14:20.000 --> 14:21.800
and this collision.

14:21.800 --> 14:24.280
So the code is quite cumbersome.

14:24.280 --> 14:32.760
And we can improve that using something in Haskell, which is called the state monad.

14:32.760 --> 14:35.040
So the state monad is a very well-known monad in Haskell.

14:35.040 --> 14:36.520
It's a very classic monad.

14:36.520 --> 14:42.580
It's just a context where we simulate mutating a state.

14:42.580 --> 14:48.320
So each action inside this monad is an access or modification of the current state.

14:48.320 --> 14:51.960
And we can get the final state or another result.

14:51.960 --> 14:54.920
We can do that also.

14:54.920 --> 15:00.280
And that works well with the lens library because the lens library provides a stateful

15:00.280 --> 15:05.320
version of its function and operators.

15:05.320 --> 15:06.320
So let's do that.

15:06.320 --> 15:09.120
We can change the under time function like this.

15:09.120 --> 15:16.080
Instead of applying several modifications, we can just execute the state actions defined

15:11.840 --> 15:16.840
this function.

15:16.080 --> 15:17.080
here.

15:16.840 --> 15:40.800
So instead of taking a ball and returning a ball, now it's clear that we are in a state

15:17.080 --> 15:19.840
So this is a function.

15:19.840 --> 15:23.760
This function takes a first parameter, which is the previous ball.

15:23.760 --> 15:28.040
And when we have applied all the actions, the state action, we get a final state, which

15:28.040 --> 15:33.800
is the final ball that we can use to update our model.

15:33.800 --> 15:40.800
Let's see the update

15:40.800 --> 15:42.400
monad.

15:42.400 --> 15:47.720
And this is a state action where the current state is a ball.

15:47.720 --> 15:49.720
And we can return a value.

15:49.720 --> 15:50.720
But here we don't need that.

15:50.720 --> 15:55.520
So the function return unit.

15:55.520 --> 16:02.320
That means that every action inside this function is now an action, a state action.

16:02.320 --> 16:08.360
So reading the state, modifying the state, and so on.

16:08.360 --> 16:15.240
For example, here we can access the post field of the current state, which is a ball.

16:15.240 --> 16:22.960
Here we can set this value to the x field of the position field of the ball or applying

16:22.960 --> 16:29.320
a function on the x field of the velocity field of the ball, which is the current state.

16:29.320 --> 16:36.900
Since the state monad is a monad, we can use all the features available for monads, such

16:36.900 --> 16:38.340
as the new notation.

16:38.340 --> 16:42.760
So we can change several actions like this.

16:42.760 --> 16:51.200
And we can also use some functions provided for monads, such as the went function.

16:51.200 --> 16:55.180
As a result, the code is a little bit more simple.

16:55.180 --> 17:02.440
And it's clear that this is a state action that we have a current state, which is modified

17:02.440 --> 17:04.520
according to the code.

17:04.520 --> 17:07.200
And then we get the final state.

17:07.200 --> 17:11.400
And this is checked by the compiler.

17:11.400 --> 17:17.840
So to conclude, we have seen that functional programming and Haskell, using a functional

17:17.840 --> 17:19.960
programming and Haskell, we can implement animations.

17:19.960 --> 17:24.680
This is very natural in functional programming since we just have to pass some function to

17:24.680 --> 17:26.800
other functions like a main loop.

17:26.800 --> 17:31.600
And we can decompose and organize our code like this.

17:31.600 --> 17:35.160
We use infinite list to generate random numbers.

17:35.160 --> 17:40.120
So we don't have to use random number explicitly.

17:40.120 --> 17:44.520
We just consume the elements of this list.

17:44.520 --> 17:50.280
We also use the length library to access or modify nested types.

17:50.280 --> 17:54.400
And we can go deeply inside these types.

17:54.400 --> 17:58.920
And finally, we simulate a mutable state using the state monad.

17:58.920 --> 18:04.040
So we can modify a variable and get the final result.

18:04.040 --> 18:07.440
So all of this is still based on functional programming.

18:07.440 --> 18:13.200
So we just manipulate pure functions and static typing.

18:13.200 --> 18:16.760
And this is quite easy to read and less work-front.

18:16.760 --> 18:21.520
Since we have no side effects, a function only depends on its argument and produces

18:21.520 --> 18:24.680
the same result if the arguments are the same.

18:24.680 --> 18:30.080
And all of this is checked by the compiler.

18:30.080 --> 18:34.920
So this code, this state and the code shown here are available at this thing.

18:34.920 --> 18:41.920
And you can find some information in the documentation of the libraries and see the things that sit

18:41.920 --> 18:42.920
for me.

18:42.920 --> 18:43.920
Thank you for your attention.

18:43.920 --> 18:46.960
Thanks to the organizer.

18:46.960 --> 18:55.320
Thank you, Julien.

18:55.320 --> 19:21.320
If you have a question, put up your hand, I'll bring the mic.

19:21.320 --> 19:26.040
Okay any questions?

19:26.040 --> 19:27.920
Yes.

19:27.920 --> 19:32.200
Do we know what the performance of gloss is like for complex applications?

19:32.200 --> 19:39.880
Could you write a complex QI in gloss?

19:39.880 --> 19:44.760
Do we know what the performance of gloss is for a complex display?

19:44.760 --> 19:52.720
Okay, gloss is based on OpenGL, so it's not that slow, but I don't know for very complex

19:52.720 --> 19:55.480
animations.

19:55.480 --> 20:03.640
I believe some projects use SDL, and it seems they have no problem of performance, but I

20:03.640 --> 20:17.360
have no experience more like that.

20:17.360 --> 20:23.480
In the play function, it pretty much makes the whole program pure with no I.O.

20:23.480 --> 20:27.920
What if you do want to do any I.O. in an application?

20:27.920 --> 20:37.120
Okay, so the gloss library provides two interfaces, one which is purely functional, and another

20:37.120 --> 20:38.120
where you can do I.O.

20:38.120 --> 20:48.560
So there is a version where you can do that.

20:48.560 --> 20:50.720
Okay any more questions?

20:50.720 --> 20:51.720
Yes.

20:51.720 --> 21:03.360
Maybe it's without a microphone, can you explain the operators used for the lenses?

21:03.360 --> 21:05.360
There is many many operators.

21:05.360 --> 21:10.600
Is the person signed?

21:10.600 --> 21:16.760
Yeah, okay, so there is two versions of these operators, one which is purely functional,

21:16.760 --> 21:23.320
so we just take the data structures that it can access and return the value, so this is

21:23.320 --> 21:24.320
such operators.

21:24.320 --> 21:32.560
So that means we apply the modification, so the ball 0 is returned after this modification,

21:32.560 --> 21:35.320
so this is what this operator means.

21:35.320 --> 21:40.720
Here it's for accessing another field, so it's an x field of the position field of the

21:40.720 --> 21:49.800
table, and this operator says we set a value in that field, and this operator says we apply

21:49.800 --> 21:56.480
a function on the field, and the stateful version is the same, but we have an equal

21:56.480 --> 21:59.480
sign instead of the tilde.

21:59.480 --> 22:03.480
It's like a get and a set.

22:03.480 --> 22:08.480
Yes, we can get it like this, we can get the data.

22:08.480 --> 22:14.920
Okay, any more questions?

22:14.920 --> 22:20.160
Okay, let's thank Julia.

22:20.160 --> 22:21.160
Thank you.

22:21.160 --> 22:39.060
It's important for us to thank Juliahorn and her team, thank you so much, it was great

22:39.060 --> 22:40.800
to be here.

22:40.800 --> 22:44.480
And thank you, Julia.

22:44.480 --> 22:48.680
Go learn better soon.

1
0:00:00.000 --> 0:00:14.480
Okay. Okay, now we have Linus de Meijer with shorter feedback loops with Livebook. Give

2
0:00:14.480 --> 0:00:15.480
it up.

3
0:00:15.480 --> 0:00:27.120
All right. Thank you. Can everybody hear me? Yeah. To my surprise, I am the first and

4
0:00:27.120 --> 0:00:36.680
only Belgian here presenting. I can welcome you all here. Maybe the first question I

5
0:00:36.680 --> 0:00:44.280
want to ask, which is the most important one, who is hungry right now? All right. Sorry,

6
0:00:44.280 --> 0:00:52.520
I cannot help with that. But another question I would like to ask is who has heard of Livebook?

7
0:00:52.520 --> 0:00:58.200
Who knows what it is, more or less? Yeah. Okay. It's a lot of people. Who has worked

8
0:00:58.200 --> 0:01:04.720
with Livebook professionally or has just it on their computer? Okay. Less people, but

9
0:01:04.720 --> 0:01:10.160
there are some. If you want to follow along and if you already installed Livebook, then

10
0:01:10.160 --> 0:01:17.120
you can go to my GitHub repository. I have a little notebook prepared. And I try to switch

11
0:01:17.120 --> 0:01:24.680
back and forth between this presentation and the Livebook. All right. The goals of today

12
0:01:24.680 --> 0:01:33.360
would be to introduce you to Livebook to make sure you all understand what it is, how you

13
0:01:33.360 --> 0:01:38.320
can get it, how you install it, the various options. And then I think the most interesting

14
0:01:38.320 --> 0:01:46.080
part is how I used it in three different cases and what I learned from using it in a real

15
0:01:46.080 --> 0:01:53.600
project. And underneath all this, I hope I can bring across the message that Livebook

16
0:01:53.600 --> 0:02:04.160
really helps to start somewhere in the middle. So you don't spend time like folding an application.

17
0:02:04.160 --> 0:02:12.440
And then just after a few days or hours, get to the most interesting part. So Livebook

18
0:02:12.440 --> 0:02:21.080
enables you to start in the middle. That's my main message here. Whenever you start Livebook,

19
0:02:21.080 --> 0:02:28.400
you're greeted with an introduction page. At the top, you see your folder structure.

20
0:02:28.400 --> 0:02:34.800
There is a very nice learning section. And at the bottom there, you have your sessions.

21
0:02:34.800 --> 0:02:44.440
So you will import a Livebook often, and then a session will appear, and you can hook into

22
0:02:44.440 --> 0:02:53.560
that. So you can... That's actually what we are going to do here. I'm going to go to my

23
0:02:53.560 --> 0:03:02.440
notebook that I just prepared here. And, yeah, I just wanted to point out if you are just

24
0:03:02.440 --> 0:03:07.360
starting with Livebook, there is a very good learning section. So please go through these.

25
0:03:07.360 --> 0:03:14.040
Also if you're learning Elixir, it's a very good way to familiarize yourself with Elixir.

26
0:03:14.040 --> 0:03:21.240
And it also covers things like how you make pretty graphs or how you would use the Kino

27
0:03:21.240 --> 0:03:29.640
library, which is the one that is used to actually interact with your Livebook.

28
0:03:29.640 --> 0:03:38.200
It's all just markdown. So it uses those... Yeah, you can see here. It uses these code

29
0:03:38.200 --> 0:03:47.360
fences with Elixir annotation. So it's very easy to check into your GitHub repository

30
0:03:47.360 --> 0:03:55.840
and make sure you can review it if you want. And GitHub also recently added the feature

31
0:03:55.840 --> 0:04:05.560
that it nicely formats your Livebooks. They have the extension LiveMD. So it integrates

32
0:04:05.560 --> 0:04:16.200
nicely with your version control system. The basics. We have code cells which can be

33
0:04:16.200 --> 0:04:21.480
executed. They contain your codes. And the first one is a little bit special in the sense

34
0:04:21.480 --> 0:04:29.120
that it often contains your setup. So you can pull in all your dependencies. So you

35
0:04:29.120 --> 0:04:36.420
can use the mix install function. And I'm going to use a few here. Not too many. But

36
0:04:36.420 --> 0:04:43.320
I'll go over these once they become relevant. So right here we have our first code cell.

37
0:04:43.320 --> 0:04:49.640
We can just execute it. Takes a while to just start up. But then we can go. It is being

38
0:04:49.640 --> 0:04:55.280
evaluated. You can see the green dots. So it's being evaluated. And you have all those

39
0:04:55.280 --> 0:05:02.360
nice features that you can expect from an IDE. So you can ask it to autocomplete. If

40
0:05:02.360 --> 0:05:11.100
you control space one more time, you get all the documentation that is for that function.

41
0:05:11.100 --> 0:05:19.760
So you get a lot of help editing your code here. The result is being printed down below

42
0:05:19.760 --> 0:05:26.040
here. And you also have the ability to, like I did here actually, to put stuff. And that's

43
0:05:26.040 --> 0:05:31.960
also being printed underneath your code cell. So that's very nice. And, yeah, maybe the

44
0:05:31.960 --> 0:05:38.800
most or a very important feature at least, it's that you can interleave your code blocks

45
0:05:38.800 --> 0:05:45.280
with just regular markdown. So it's a really nice way to do little coding and then explain

46
0:05:45.280 --> 0:05:59.600
what you have done and then go on to do the code again. Yes. A few words about reproducibility.

47
0:05:59.600 --> 0:06:07.400
It's very nice to have this notebook and to know what actually will happen if you execute

48
0:06:07.400 --> 0:06:12.640
all those code cells. If you start from the beginning, it's very clear. You go from top

49
0:06:12.640 --> 0:06:18.840
to bottom. But what if you're going to edit in the middle, make a change somewhere? Well,

50
0:06:18.840 --> 0:06:23.960
Livebook has you covered. It analyzes all those bindings that are being made in those

51
0:06:23.960 --> 0:06:28.960
code cells. And it makes sure that if you change something, the relevant code cells

52
0:06:28.960 --> 0:06:36.060
underneath them are also going to be executed again. So that's actually the way you often

53
0:06:36.060 --> 0:06:42.520
build up states. You have a code cell that creates a binding. And then in the next code

54
0:06:42.520 --> 0:06:49.000
cell, you can reuse that or you can use that binding so you can build upon when you go

55
0:06:49.000 --> 0:06:59.240
through all the code cells. I can do a little demonstration how branching sections work.

56
0:06:59.240 --> 0:07:05.940
So the sections are actually shown very clearly here on the sides. I have a few of them. But

57
0:07:05.940 --> 0:07:14.520
one has the little branch icon. So this is a branching section. And this is just to show

58
0:07:14.520 --> 0:07:22.080
how the execution model actually works. So right here, I demonstrate that you can use

59
0:07:22.080 --> 0:07:32.200
the bindings from before. So from the main flow of the notebook. And if I start an infinite

60
0:07:32.200 --> 0:07:39.880
loop here, this is just going to stay printing in this little frame here. You will see that

61
0:07:39.880 --> 0:07:44.440
if I execute a code cell below, it will be queued. But it will never run because the

62
0:07:44.440 --> 0:07:49.960
other code is just blocking that one. But if we carry on to the next session, we can

63
0:07:49.960 --> 0:07:57.040
see that all is well again. So this is still blocked. But this is the main threat of execution.

64
0:07:57.040 --> 0:08:05.040
So we are not blocked here anymore. And just to show that we cannot access the bindings

65
0:08:05.040 --> 0:08:16.480
from before, I just triggered this error because we cannot access this variable. Okay. This

66
0:08:16.480 --> 0:08:23.680
is a pretty picture that I stole from Rosse Hallem. I'm not going to go into detail. But

67
0:08:23.680 --> 0:08:28.640
I just want to point out that everything is based or is heavily using the airline distribution

68
0:08:28.640 --> 0:08:36.720
mechanisms that we all know from the airline OTP ecosystem. So we have a central application

69
0:08:36.720 --> 0:08:43.880
here. It's a live view application actually with a lot of JavaScript. And we can connect

70
0:08:43.880 --> 0:08:50.200
to it through WebSockets. That's all being handled for us. And it does not run the code

71
0:08:50.200 --> 0:08:56.880
actually on the live book application itself. But in normal mode, it will spawn a new node

72
0:08:56.880 --> 0:09:04.000
and run your code on this new node. So this we call it a runtime. This runtime is not

73
0:09:04.000 --> 0:09:10.160
aware of anything live book related. It is just a plain node that can execute code and

74
0:09:10.160 --> 0:09:17.520
you get the results back. So that's what's going on underneath. There are a lot of ways

75
0:09:17.520 --> 0:09:26.180
you can get live book on your computer. Recently, well, I used to like Escript installation.

76
0:09:26.180 --> 0:09:32.240
But since it's tied to your Elixir installation, I now switch to using the desktop application,

77
0:09:32.240 --> 0:09:38.400
which is getting very good at this point. You also can run it in the cloud. You can

78
0:09:38.400 --> 0:09:43.960
have it as a Docker image. That's all being covered. The various ways to start. Not very

79
0:09:43.960 --> 0:09:53.640
interesting. But I think what's more interesting is my story of how I used it to mitigate risks

80
0:09:53.640 --> 0:10:02.560
early on some projects that I've been doing. Yes. I just want to sum up here the benefits

81
0:10:02.560 --> 0:10:10.800
that I see. So it allows you to start in the middle. If you're using live book, you can

82
0:10:10.800 --> 0:10:18.880
jump straight into your problem space. It increases transparency. And you can use it

83
0:10:18.880 --> 0:10:25.000
because you can use that markdown in between to document your process. So all your thoughts,

84
0:10:25.000 --> 0:10:30.520
you can put them in between all those code cells. And it's, I think, way better than

85
0:10:30.520 --> 0:10:37.000
those obscure scripts we sometimes write. And you can also very easily share this document.

86
0:10:37.000 --> 0:10:45.640
So that's actually something that we did. I got some tasks to do. A client was asking

87
0:10:45.640 --> 0:10:51.040
something. We were doing something with machine learning and artificial intelligence. We were

88
0:10:51.040 --> 0:10:56.840
not aware or we did not know whether we could do it. So I sat down, made a slide hook, and

89
0:10:56.840 --> 0:11:02.720
then documented all the steps I did. And in the end, got a pretty graph out of it so I

90
0:11:02.720 --> 0:11:11.880
could convince the clients that we could do it actually with Elixir.

91
0:11:11.880 --> 0:11:19.080
Just a little bit of context. I work for a small company. We often switch in between

92
0:11:19.080 --> 0:11:25.240
projects. The company is named Zenjoy. And we are often working as a team of two. So

93
0:11:25.240 --> 0:11:30.320
documentation and collaboration is very important. And also the communication with the clients

94
0:11:30.320 --> 0:11:39.880
is very, very important. So this first case, we were tasked to interpret

95
0:11:39.880 --> 0:11:50.280
with or to call an undocumented legacy API. It was very low level. It was not as low level

96
0:11:50.280 --> 0:11:57.920
as tools explained to us. So it was not like we had to do the pattern matching on the bit

97
0:11:57.920 --> 0:12:04.080
level. But we had to use the GenTCP module straight from Erlang. But it was very nice

98
0:12:04.080 --> 0:12:11.260
to have this live book environment where we could just throw the commands at this server

99
0:12:11.260 --> 0:12:19.360
that we could somehow use and see what came back. So in this way, we were able to create

100
0:12:19.360 --> 0:12:29.000
a notebook that documented all the commands we could see or how it reacted. And you see

101
0:12:29.000 --> 0:12:35.300
some pattern matching going on here. You also see some magic variables. So this was given

102
0:12:35.300 --> 0:12:40.320
to us. So we could not change this. But at least we could document it. And this became

103
0:12:40.320 --> 0:12:54.120
a very long document to refer back to. So this is another demonstration I wanted to

104
0:12:54.120 --> 0:13:01.440
do. It's not because you're in the browser that you're constrained by any way. You can

105
0:13:01.440 --> 0:13:07.980
still use all the process magic and all the Gen servers you like. And this is just a demonstration

106
0:13:07.980 --> 0:13:19.400
of how you would go around and spawn a TCP server. I'm using Thousand Island here. In

107
0:13:19.400 --> 0:13:28.960
reality, I was using the other one, the older one. Cowboy and ranch. Yes, thank you. But

108
0:13:28.960 --> 0:13:34.480
now for this demonstration, I got to use Thousand Island. And it's super nice. So you can just

109
0:13:34.480 --> 0:13:41.360
define your handler. It's just going to echo back whatever we sent to it. And here I started

110
0:13:41.360 --> 0:13:49.120
up the only caveat or the thing you have to be aware of is that you can start your children,

111
0:13:49.120 --> 0:13:55.800
your processes and your supervisor tree under the keynote code cell. So whenever you reevaluate

112
0:13:55.800 --> 0:14:02.060
here, you see that you can't see. But another process is started or a whole tree started.

113
0:14:02.060 --> 0:14:09.480
So this is a nice interop with the livebook environment. And once we have those, we can

114
0:14:09.480 --> 0:14:24.060
even... Yeah. Yeah, I guess that the gods are not with me today. But at least, yeah,

115
0:14:24.060 --> 0:14:29.480
what I wanted to show is that you can actually draw a pretty picture of the supervision tree

116
0:14:29.480 --> 0:14:37.840
right here. But still, I think the server got started. And so now I can net cut into

117
0:14:37.840 --> 0:14:46.120
my local host on this given port. And I can see how some stuff is being echoed back to

118
0:14:46.120 --> 0:14:58.800
me. So at least that works. All right. Back to the presentation. So it is a nice environment

119
0:14:58.800 --> 0:15:07.160
to like stop out a server and set up a situation where you can then use your application to

120
0:15:07.160 --> 0:15:20.320
interact with this stubbed version of your API. All right. I'm going to show... Or this

121
0:15:20.320 --> 0:15:29.080
is just an example of how you would integrate your livebook with a regular mix project.

122
0:15:29.080 --> 0:15:33.520
It's all just sitting next to each other. Oftentimes, I just make a folder where the

123
0:15:33.520 --> 0:15:40.320
notebook lives and then your mix project, whatever it is, it can be a Phoenix application.

124
0:15:40.320 --> 0:15:53.080
You can access it if you use the bot way of referencing your dependencies. A few words

125
0:15:53.080 --> 0:16:01.320
about a typical lifecycle that I've observed. You often start to experiment in your livebook.

126
0:16:01.320 --> 0:16:08.280
On good days, you add tests. And then you move all that code into the regular application

127
0:16:08.280 --> 0:16:15.680
or in the regular mix project. And you reference it from there on in a way that I just described.

128
0:16:15.680 --> 0:16:25.600
So you promote reusable code. And that's often a way that worked very well for me. The second

129
0:16:25.600 --> 0:16:32.360
case that I want to discuss is how I set up or created concurrent ETL pipeline, which

130
0:16:32.360 --> 0:16:39.880
is a fancy word for just loading CSV files and then maybe transforming them and dumping

131
0:16:39.880 --> 0:16:47.880
them into Postgres. So I really got to learn a lot about how concurrent data processing

132
0:16:47.880 --> 0:16:54.420
actually happens. I got to play around with Flow, which is a very nice library which builds

133
0:16:54.420 --> 0:17:04.880
on top of Gen State. No, not Gen State, the other one. Gen Stage, that's the one. And

134
0:17:04.880 --> 0:17:12.600
you can still use all the power of processes that is available in Erlang and Elixir. To

135
0:17:12.600 --> 0:17:20.520
demonstrate, I've prepared or I want to show how you can use Ecto and then this Flow library

136
0:17:20.520 --> 0:17:28.200
right within your live hook application. To start off, I create a repository just like

137
0:17:28.200 --> 0:17:32.840
you would do in a Phoenix application. Don't worry if you do not recognize this. This is

138
0:17:32.840 --> 0:17:40.120
kind of standard stuff. You have to specify the adapter. And then you can emulate whatever

139
0:17:40.120 --> 0:17:44.960
mix Ecto creates with you. So you make sure that your storage is up. In my case, it was

140
0:17:44.960 --> 0:17:50.760
already up. So that's what it reports. And then you can even make your migrations like

141
0:17:50.760 --> 0:17:58.400
you would if you used Ecto together with a Phoenix application. In this case, I also

142
0:17:58.400 --> 0:18:04.920
make sure there was an item in the database so we can query it later on. So I have to

143
0:18:04.920 --> 0:18:11.600
make sure that this repository actually runs. And then I migrate, well, I do a rollback

144
0:18:11.600 --> 0:18:19.000
to make sure nothing is being left over and then I migrate again. So we have the end situation

145
0:18:19.000 --> 0:18:26.680
that I can query right here. So you can see that our fresh entry is just inserted with

146
0:18:26.680 --> 0:18:35.000
this new timestamp. And then we can build upon this. This is another demonstration,

147
0:18:35.000 --> 0:18:40.800
very short. This is a definition of a flow. Also, don't worry if you do not recognize

148
0:18:40.800 --> 0:18:47.160
this. That's not the key here. I just want to show that you can use all those goodies

149
0:18:47.160 --> 0:18:54.480
and you're not constrained in any way. Right here, we are just emitting a value every second.

150
0:18:54.480 --> 0:19:01.440
And we're going to wait for three seconds and then insert an item in the database again.

151
0:19:01.440 --> 0:19:06.720
So you get the logging. And if we query again, so you might recognize the nice Ecto query

152
0:19:06.720 --> 0:19:14.240
syntax you see. I've wrapped it in a data table and you can now see the three new items

153
0:19:14.240 --> 0:19:23.680
appearing. So what's very nice, here you see me playing around and actually visualizing

154
0:19:23.680 --> 0:19:31.800
this ETL pipeline where every color actually is another class of objects or is being inserted

155
0:19:31.800 --> 0:19:38.760
in another table. It went very quickly. But when making this presentation, I also saw

156
0:19:38.760 --> 0:19:45.280
there is some room for improvement. So not all cylinders are firing together, but at

157
0:19:45.280 --> 0:19:55.000
least it was fast enough for our purposes. Another case I want to share with you is that

158
0:19:55.000 --> 0:20:04.320
we used a live hook to actually connect to a live running instance. So remember, as I

159
0:20:04.320 --> 0:20:10.680
have shown in the beginning, it's all just Erlang distribution under the hood. So instead

160
0:20:10.680 --> 0:20:17.760
of using the regular setup where you do an Elixir standalone setting, you can also do

161
0:20:17.760 --> 0:20:24.880
an attached node configuration. The only thing you have to know is your node's name or your

162
0:20:24.880 --> 0:20:31.800
short name and a cookie which you have to agree upon. And it's very good for doing one

163
0:20:31.800 --> 0:20:39.920
of tasks. Maybe you don't have a UI for something yet and you want to do it in a live book,

164
0:20:39.920 --> 0:20:47.120
then this is a nice way to actually have like a super admin interface. But be aware that

165
0:20:47.120 --> 0:20:52.320
it's still a live environment. So if you do this, make sure to put a big disclaimer on

166
0:20:52.320 --> 0:21:03.200
top of your notebook to remind you of the risks involved. All right. The last thing

167
0:21:03.200 --> 0:21:08.760
that I want to share or show is how you would do tests in live hook. Like I said, on a good

168
0:21:08.760 --> 0:21:15.320
day you write tests. And we have seen some examples in the previous presentations how

169
0:21:15.320 --> 0:21:26.400
you would do a doc test where you attach some kind of formatted tests and its expected output.

170
0:21:26.400 --> 0:21:36.080
Well, since a few versions, these tests are actually automatically run. So if you define

171
0:21:36.080 --> 0:21:45.840
a module, in this case Christmas, you see that the doc tests are failing. I think I

172
0:21:45.840 --> 0:21:51.680
can easily fix it by changing the expectation. And if you run it again, the doc tests are

173
0:21:51.680 --> 0:21:56.280
green again. But you can also do just your regular testing. The only thing you have to

174
0:21:56.280 --> 0:22:02.960
think about is that you have to disable your auto running. But then again, you can do your

175
0:22:02.960 --> 0:22:09.040
testing and you have to make sure you call the run function on the XUnit module. So there

176
0:22:09.040 --> 0:22:21.040
is no excuse not to test, actually. I want to end with reference to these two resources.

177
0:22:21.040 --> 0:22:29.080
There is an initiative by DocYard Academy. It's an open source curriculum to learn elixir.

178
0:22:29.080 --> 0:22:36.000
And they have used the notebooks or the livebooks to actually teach this to students. And the

179
0:22:36.000 --> 0:22:43.080
other thing you might have heard about in the elixir news is the project Bumblebee,

180
0:22:43.080 --> 0:22:50.160
which allows you to actually play around with these new neural networks like GPT-2 and stable

181
0:22:50.160 --> 0:22:56.160
diffusion. And you can just do it locally. So it's a very nice way. It integrates very

182
0:22:56.160 --> 0:23:10.800
nice into your live notebook. All right. That's it for me. Thank you very much.

183
0:23:10.800 --> 0:23:22.080
Thank you very much. Is there any question? Could you maybe compare and contrast live

184
0:23:22.080 --> 0:23:29.760
books with Jupyter notebooks? Yes, that's actually a reference. Sorry. So the question

185
0:23:29.760 --> 0:23:36.800
was how this relates to the Jupyter notebooks, which we might also know. I think it's very

186
0:23:36.800 --> 0:23:44.040
much inspired by it. So it's also a computational notebook. But I also see a lot of differences,

187
0:23:44.040 --> 0:23:50.120
although I do not know Jupyter notebooks very well. But I think, for example, like the dependencies

188
0:23:50.120 --> 0:23:56.000
in the first cell, I do not think there is such a system in the Jupyter notebooks. You

189
0:23:56.000 --> 0:24:01.200
would have to use like Comda or Anaconda to set up your dependency. So it's a little bit

190
0:24:01.200 --> 0:24:07.960
less integrated. But I cannot say more about differences. But you're very right. There

191
0:24:07.960 --> 0:24:16.120
is a strong inspiration there. Yes. Thank you. Any other question?

192
0:24:16.120 --> 0:24:32.560
Cool. Thanks for the talk. I wanted to ask actually whether there is an option as well

193
0:24:32.560 --> 0:24:39.840
for a lifebook being available as an UI within the IDE. So kind of connected closer to the

194
0:24:39.840 --> 0:24:47.320
development environment? No, not that I know of. No, no. It runs in

195
0:24:47.320 --> 0:24:51.720
the browser and that's where it lives. So you can install it as a standalone application,

196
0:24:51.720 --> 0:24:57.760
but it's still something that lives in the browser. But you're right in the sense that

197
0:24:57.760 --> 0:25:04.080
it is not a full blown IDE. And that's also one of the nuances that I have noticed is

198
0:25:04.080 --> 0:25:09.560
that if you have very large code cells, for example, you are missing some features. And

199
0:25:09.560 --> 0:25:13.400
if you're used to VI bindings, for example, you will not find them there.

200
0:25:13.400 --> 0:25:23.440
Cool. Thanks. Yes. Okay. Last question.

201
0:25:23.440 --> 0:25:26.200
Does this work for multiple users collaborating on things?

202
0:25:26.200 --> 0:25:31.560
Yes. And I should have shown this. It is one of the nicest features. Thank you for opening

203
0:25:31.560 --> 0:25:39.680
that door. If you're using multiple sessions or, for example, multiple users in multiple

204
0:25:39.680 --> 0:25:44.560
locations, you, for example, see the selections they made. You see a little cursor where they

205
0:25:44.560 --> 0:25:51.040
are editing or you are editing. And you're actually editing the same notebook. So yes,

206
0:25:51.040 --> 0:25:55.800
that's kind of a life coding environment. Yes. Yeah.

207
0:25:55.800 --> 0:26:04.600
I don't know. No. It's building on top of these goodies we have. Yeah.

208
0:26:04.600 --> 0:26:27.520
Okay. Thank you again.


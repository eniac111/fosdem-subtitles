WEBVTT

00:00.000 --> 00:13.560
So, now we have Harry Berstow with an introduction to Gleam, which is another language running

00:13.560 --> 00:15.140
on Erlang VM.

00:15.140 --> 00:17.560
So give it up for him.

00:17.560 --> 00:19.800
Hi, everyone.

00:19.800 --> 00:27.080
My name's Harry, and I'm, as we said, doing an introduction to Gleam.

00:27.080 --> 00:28.080
You might ask, what is Gleam?

00:28.080 --> 00:31.680
Gleam is a programming language for building type safe systems that scale.

00:31.680 --> 00:35.680
It's powered primarily by the Beam, but can also be run on JavaScript targets too.

00:35.680 --> 00:40.200
I thought I'd go first into the three key points which make Gleam what it is.

00:40.200 --> 00:41.200
First it's safety.

00:41.200 --> 00:45.040
Gleam has powerful compile time type checking built into its core.

00:45.040 --> 00:49.080
This helps you write fast code that's integrated with Erlang and Elixir, while giving you the

00:49.080 --> 00:52.480
safety of a statically typed language.

00:52.480 --> 00:56.360
Secondly is performance, as was just discussed before, building on the success of Discord,

00:56.360 --> 00:58.960
WhatsApp, Ericsson, and more with the Beam.

00:58.960 --> 01:02.760
Gleam adds no overhead, so you get the same great type safety and performance with an

01:02.760 --> 01:04.800
enjoyable syntax.

01:04.800 --> 01:05.800
And finally, it's friendliness.

01:05.800 --> 01:08.640
Both the community and the syntax of Gleam are friendly.

01:08.640 --> 01:12.160
The community is more than happy to help with any problem or just friendly chit chat.

01:12.160 --> 01:14.520
They even help write some of this talk.

01:14.520 --> 01:18.640
And when you get something wrong, the compiler provides insightful help so that you can hunt

01:18.640 --> 01:20.560
down the issues and stop them.

01:20.560 --> 01:23.440
The syntax of Gleam is similar to that of Rust, but if you're not from one of those

01:23.440 --> 01:27.600
backgrounds, don't worry, there are several guides to get started if you're used to syntax

01:27.600 --> 01:30.720
from Python, Elm, Erlang, or even Elixir.

01:30.720 --> 01:35.600
Here's an example of the start of the Gleam project.

01:35.600 --> 01:40.480
All Gleam projects have an exported main function in the project name.gleam file, which is within

01:40.480 --> 01:41.480
your source folder.

01:41.480 --> 01:46.880
If you need I.O., you can import the standard library's I.O. module, as shown there.

01:46.880 --> 01:49.560
And the standard library contains several modules to help you with everything you can

01:49.560 --> 01:52.800
think of, from regex to options, iterators, and more.

01:52.800 --> 01:57.680
If you need target-specific standard library features, look at the Gleam Erlang and Gleam

01:57.680 --> 02:03.760
JavaScript packages, which are both available on Hex and GitHub.

02:03.760 --> 02:07.080
Let's explore some Gleam examples to get a better understanding of the language.

02:07.080 --> 02:10.840
And once we've done that, you can go away and look at the docs yourself for more examples,

02:10.840 --> 02:15.560
and we'll go on to building some stuff with Shimmer.

02:15.560 --> 02:18.160
Variables in Gleam are created using the let keyword.

02:18.160 --> 02:20.240
They are assigned to a name and a value.

02:20.240 --> 02:23.840
The name can be reused later by other let bindings, but the values contained within

02:23.840 --> 02:27.760
are immutable, meaning the values themselves cannot be changed.

02:27.760 --> 02:31.260
Here's an example of blocks.

02:31.260 --> 02:34.080
Every block in Gleam is an expression.

02:34.080 --> 02:37.200
All expressions in the block are executed, and then the result of the last expression

02:37.200 --> 02:38.200
is returned.

02:38.200 --> 02:42.600
So as you can see here, the response will be false, even though hello and 42 plus 12

02:42.600 --> 02:44.040
are evaluated.

02:44.040 --> 02:47.960
This can be used to build more advanced expressions where the order of operations is important.

02:47.960 --> 02:52.360
Here's an example of using the blocks to convert from Fahrenheit to Celsius, being

02:52.360 --> 02:58.240
sure to remove the 32 before multiplying and dividing.

02:58.240 --> 03:00.360
In Gleam, lists are all homogenous.

03:00.360 --> 03:03.800
This means the elements in a list must all be of the same type.

03:03.800 --> 03:07.840
If you try and construct a list with multiple types, this will result in a compiler error

03:07.840 --> 03:12.840
presenting you with a type error and showing you where you tried to use the multiple different

03:12.840 --> 03:17.520
types, so you can find it and correct it.

03:17.520 --> 03:20.880
Returning to a list in Gleam is very fast, and this is the way that Gleam's documentation

03:20.880 --> 03:23.640
recommends that you should add new values to a list.

03:23.640 --> 03:27.800
In the standard library, there is a list module, which allows you to do more advanced operations

03:27.800 --> 03:30.160
and also add to lists that way.

03:30.160 --> 03:34.560
The above example uses two constant lists, well, a constant and a constant list, but

03:34.560 --> 03:41.880
the same principles apply, whether you have one dynamic and the other constant or vice-versa.

03:41.880 --> 03:47.440
If you need multiple types in one place, you can use tuples using the hash and bracket

03:47.440 --> 03:48.440
syntax there.

03:48.440 --> 03:51.920
They can have multiple types and can be pattern matched against.

03:51.920 --> 03:53.760
We'll look at pattern matching in a few slides.

03:53.760 --> 03:57.600
But if you want to access the values on a tuple, there's always the dot syntax, which

03:57.600 --> 04:02.080
I'll show you on the next slide, which is similar to that you'd be used to in object-oriented

04:02.080 --> 04:04.120
for custom types and objects.

04:04.120 --> 04:08.600
Here's an example of a tuple which has two elements, and they're selected using the dot

04:08.600 --> 04:11.520
syntax and assigned to their own variables.

04:11.520 --> 04:14.760
It's not particularly useful here because they're constants, but with runtime variables,

04:14.760 --> 04:19.360
it's easy to access.

04:19.360 --> 04:22.720
Gleam supports custom types, and custom types in Gleam are a collection of keys and their

04:22.720 --> 04:25.120
values, and you can see them as objects.

04:25.120 --> 04:26.360
You can see them as objects.

04:26.360 --> 04:27.880
There's just one caveat though.

04:27.880 --> 04:32.160
Types in Gleam don't have methods.

04:32.160 --> 04:38.480
Similar to tuples, you can use the dot syntax to access properties within them, but instead

04:38.480 --> 04:46.360
of dot and position, you use dot and the name.

04:46.360 --> 04:52.000
In Gleam, custom types can have multiple constructors, similar to in the Rust ecosystem for enums.

04:52.000 --> 04:56.680
This does bring another caveat though, which is that the dot syntax now only works for

04:56.680 --> 04:58.680
keys that are shared across all elements.

04:58.680 --> 05:02.760
So in this case, the only key you would be able to use the dot syntax with is name.

05:02.760 --> 05:08.880
Otherwise, you would have to pattern match against them to make sure that type safety

05:08.880 --> 05:11.480
stays.

05:11.480 --> 05:13.120
Case statements can match anything.

05:13.120 --> 05:17.280
In this first example, we use basic integers, but there's more advanced pattern matching

05:17.280 --> 05:19.520
over the next couple slides.

05:19.520 --> 05:23.360
You can see we match the first three numbers and produce a value, and otherwise, we just

05:23.360 --> 05:31.000
consume as a variable and say, we can either use or discard that variable.

05:31.000 --> 05:34.600
We can pattern match against tuples here and even extract values from within.

05:34.600 --> 05:38.720
In this example, we're checking for two specific paths where one is no and the other is yes.

05:38.720 --> 05:43.000
The unique thing about the yes path is that we're discarding the integer in the middle,

05:43.000 --> 05:52.120
but we could again take that as a variable and do further checks against it.

05:52.120 --> 05:55.360
If you remember the custom type from earlier, this pattern matches against that, so we can

05:55.360 --> 06:00.720
extract the values into certain variables here, like torques and mic.

06:00.720 --> 06:04.440
The rest can be thrown away with the two dots.

06:04.440 --> 06:08.320
You can also use the two dots and assign that to a variable so that then you can reconstruct

06:08.320 --> 06:13.640
the type afterwards to pass it back on somewhere else.

06:13.640 --> 06:17.600
There's lots more about Gleam syntax that I don't have time to cover today, such as external

06:17.600 --> 06:21.280
functions, generics, the use keyword, and more, and stuff's always being added to the

06:21.280 --> 06:22.480
syntax.

06:22.480 --> 06:26.280
All of it's documented in the language talk, so feel free to have a look over there and

06:26.280 --> 06:30.600
get a better understanding of what else is available within Gleam.

06:30.600 --> 06:39.280
Now let's get onto building some bots to put our Gleam skills into practice.

06:39.280 --> 06:42.680
Shimmer is a library which I've dabbled in and out of over the last 13 months.

06:42.680 --> 06:48.240
I started as a project to learn Gleam and get into the Beam ecosystem, but in the process

06:48.240 --> 06:49.640
I've done much more.

06:49.640 --> 06:51.360
I'm doing this talk now.

06:51.360 --> 06:55.720
I've started contributing to the Gleam compiler and the wider ecosystem, and I use Alexa and

06:55.720 --> 06:59.720
Erlang more day to day now.

06:59.720 --> 07:04.720
To this point in Shimmer's development, we've moved away from using Erlang foreign functions,

07:04.720 --> 07:08.800
and now a majority of it is in Gleam.

07:08.800 --> 07:11.920
Some key features of Shimmer first is compatibility.

07:11.920 --> 07:16.040
While Shimmer is built in Gleam, it can be used in Alexa, Erlang, and any other Beam

07:16.040 --> 07:17.040
language.

07:17.040 --> 07:22.120
It's published on Hex, and the source code is available online.

07:22.120 --> 07:26.520
I've been working on some examples for Erlang and Alexa, which I'll publish into the GitHub

07:26.520 --> 07:29.840
repository once I've got them to a stable point.

07:29.840 --> 07:31.600
Secondly, it's Actor-based.

07:31.600 --> 07:35.760
As we discussed before with its resilience, Shimmer is built on top of Actors, and when

07:35.760 --> 07:40.000
you're running in single shard mode, you only have one Actor, multiple shards.

07:40.000 --> 07:41.000
That's not a problem.

07:41.000 --> 07:45.240
We use a supervisor tree so that all the shards stay alive, and it's built on top of Erlang's

07:45.240 --> 07:47.880
OTP using the Gleam OTP package.

07:47.880 --> 07:50.720
Finally, it's type safety.

07:50.720 --> 07:53.960
As well as being called to Gleam is a useful feature for Shimmer.

07:53.960 --> 07:58.160
For building your Discord bot in Gleam, we leverage all of Gleam's type functionality

07:58.160 --> 08:01.400
to ensure that the code you write for the Beam is type safe.

08:01.400 --> 08:04.920
You only get the full type safety when you write all of your code in Gleam, but you can

08:04.920 --> 08:08.120
always trust that the core of the library will be type safe.

08:08.120 --> 08:12.560
It's a little fun fact.

08:12.560 --> 08:16.200
Moving more and more of Shimmer to Gleam, we're currently at 97% Gleam, and the rest

08:16.200 --> 08:21.880
is just Erlang forum functions for small parts of networking which are yet to have libraries

08:21.880 --> 08:24.360
implemented in Gleam.

08:24.360 --> 08:29.560
For some of you, this might now be the most interesting part of the talk, and for some

08:29.560 --> 08:30.560
of you it might not.

08:30.560 --> 08:34.160
But I'm just going to quickly touch on how Discord's gateway works so that you have a

08:34.160 --> 08:40.560
better understanding of why we use Actors and how that's useful to us in Gleam and with

08:40.560 --> 08:44.280
the OTP package.

08:44.280 --> 08:47.960
Discord bots are powered by Discord's real-time gateway, which uses web sockets to send and

08:47.960 --> 08:49.480
receive messages.

08:49.480 --> 08:56.000
For Shimmer, we use Erlang's gun library from 9.9s to receive them, and we use a typed wrapper

08:56.000 --> 09:03.200
on top of that, which is based upon Lewis, the creator of Gleam's nerf library.

09:03.200 --> 09:06.800
The diagram here shows what happens when Shimmer opens a connection to the gateway.

09:06.800 --> 09:13.760
We use ETF encoding and hand the frames off to Actors to pass, manage them, and send them

09:13.760 --> 09:21.640
to the event loop and eventually either trigger handlers or discard them.

09:21.640 --> 09:26.280
Inside of that, Shimmer has a powerful event loop built on top of Actors and messages,

09:26.280 --> 09:30.120
which manages multiple messages as well as its own state, both internally and externally

09:30.120 --> 09:35.640
accepts messages so that you can send updates to Discord, or internally we can manage the

09:35.640 --> 09:37.040
updates.

09:37.040 --> 09:40.920
The next slide shows a state diagram which roughly shows how it works.

09:40.920 --> 09:46.080
The state diagram shows what happens at different stages depending on the initial message.

09:46.080 --> 09:49.740
For example, here if you have a web socket frame, it's then passed.

09:49.740 --> 09:52.680
We then check whether it's asking us to do.

09:52.680 --> 09:57.840
We then either respond, discard it, stop the bot, and then terminate.

09:57.840 --> 10:01.160
This diagram isn't complete at all, but it just shows you how complicated it can go very

10:01.160 --> 10:07.200
quickly and how Gleam and the beam can easily handle it.

10:07.200 --> 10:10.480
Now that we know some Gleam and understand how Shimmer works under the hood, let's actually

10:10.480 --> 10:11.480
get our bot written.

10:11.480 --> 10:15.680
Above the boilerplate we're going to use, and as a side note, the final code for all

10:15.680 --> 10:21.760
of this is in the GitHub repository, which there's a link to at the end.

10:21.760 --> 10:25.240
Shimmer uses a handler-based system which allows for one function to be registered for

10:25.240 --> 10:26.240
each event.

10:26.240 --> 10:30.360
For the purpose of this bot, we're only registering two events, but you can always register more

10:30.360 --> 10:32.680
as and when they're implemented in Shimmer.

10:32.680 --> 10:37.960
But before we have a look at that, let's understand how this code uses what we learned earlier

10:37.960 --> 10:41.980
and what it actually does.

10:41.980 --> 10:43.880
Here we create a new Shimmer client.

10:43.880 --> 10:48.340
Here we use a function that wraps around a custom type.

10:48.340 --> 10:53.120
The custom type holds both internal data as well as token, intents, and other data you

10:53.120 --> 10:54.120
pass in.

10:54.120 --> 10:56.040
So we create a function to wrap it.

10:56.040 --> 10:59.560
That way you don't have to manage all of that state yourself.

10:59.560 --> 11:04.880
Then we pipe that into the connect function where it takes the client, passes that as

11:04.880 --> 11:09.760
the first param, and then passes your handlers in as the second.

11:09.760 --> 11:12.600
Normally the token should be an environment variable, but for the purposes of this, we're

11:12.600 --> 11:15.600
just using a string.

11:15.600 --> 11:18.520
Finally we'll tell Erlang to sleep forever so that our actor and supervisor can run in

11:18.520 --> 11:25.920
the background, accepting messages from the gateway and passing them to the event loop.

11:25.920 --> 11:31.120
Now that we know what it all vaguely does, let's revisit the handlers.

11:31.120 --> 11:33.440
First we're going to add a handler for the onReady event.

11:33.440 --> 11:36.880
All handlers are passed in their event as well as the client.

11:36.880 --> 11:41.320
That way you can use the client to call other methods such as updating the bot's presence

11:41.320 --> 11:44.080
or sending messages yourself across the gateway.

11:44.080 --> 11:49.800
On the client there's no private accesses, so you can access all the internal stuff as

11:49.800 --> 11:52.800
well if you want to add your own custom functionality.

11:52.800 --> 11:58.400
The client has its gun connection and all the other stuff in there as well, so you can

11:58.400 --> 12:01.400
adapt that as you please.

12:01.400 --> 12:04.920
Let's quickly zoom into the handler and explore that.

12:04.920 --> 12:09.800
Here you can see the event in this case is an onReady event which provides us crucial

12:09.800 --> 12:17.040
information, but as I said before, there's the client that we have just spoken about.

12:17.040 --> 12:21.760
The Gleams accessor syntax we learned about earlier makes it easy to access fields within

12:21.760 --> 12:23.920
the types even when they're two levels deep.

12:23.920 --> 12:30.280
As you can see here, we're accessing the user's ID which is in the user field of the event,

12:30.280 --> 12:35.400
and then we're printing it to the console using the standard library's IO.

12:35.400 --> 12:40.400
We can then make this into a function and then we can pass that into our onReady handler.

12:40.400 --> 12:43.800
That way we can add the functions in multiple different files and import them from across

12:43.800 --> 12:47.960
the project to keep everything tidy.

12:47.960 --> 12:55.400
Let's move on to actually receiving some messages and sending some responses.

12:55.400 --> 12:59.120
When we receive a message, we get the onMessage payload as our event.

12:59.120 --> 13:03.400
This contains information about the message itself as well as the guild ID, mentions,

13:03.400 --> 13:06.640
the message content, and other variables.

13:06.640 --> 13:09.900
For now, we're going to assign the content to a variable for ease, but we can always

13:09.900 --> 13:15.520
collapse that into the case statement we use later on if that isn't something you need.

13:15.520 --> 13:18.920
Let's have a look at how we're going to use our pattern matching to match against the

13:18.920 --> 13:19.920
content.

13:19.920 --> 13:24.560
Using Gleams powerful pattern matching, we can check it as a desired prefix and then

13:24.560 --> 13:29.360
we can extract the part to the right of the prefix into a separate variable.

13:29.360 --> 13:33.440
If not, we can take the message out itself and we can just print that for easier debugging

13:33.440 --> 13:35.280
for now.

13:35.280 --> 13:36.720
Let's say we want a specific command though.

13:36.720 --> 13:42.200
We could either add another case statement onto that or we can just edit it so it's exclamation

13:42.200 --> 13:45.560
mark on what we want as the string of a pattern matching against.

13:45.560 --> 13:47.600
Let's say, for example, you wanted some arguments though.

13:47.600 --> 13:50.820
You could put the two together and you could have your prefix with the command and take

13:50.820 --> 13:57.200
all of the arguments out separately to then pass and manage them.

13:57.200 --> 14:01.760
Now we'll match against a specific command and in the response, we'll use the message

14:01.760 --> 14:08.480
send function to reply to the user by sending another message.

14:08.480 --> 14:14.720
As before, we can use the handler's builder to add this in as a function and the bot should

14:14.720 --> 14:15.720
be done.

14:15.720 --> 14:19.720
Now you have a basic ping pong where you can send and receive messages using basically

14:19.720 --> 14:24.200
everything you learned from the introduction earlier.

14:24.200 --> 14:27.000
The full code, as I said earlier, is available on the GitHub as well if you want to have

14:27.000 --> 14:30.640
a look and take a deeper dive there.

14:30.640 --> 14:34.360
Just to recap, at the start of the talk, we went over some Gleam syntax before to get

14:34.360 --> 14:35.800
ready on our exclamation of Shimmer.

14:35.800 --> 14:40.440
We found out how the Discord's gateway worked on a high level and how to leverage Gleam

14:40.440 --> 14:48.320
OTP and how Gleam OTP is leveraged within Shimmer for actors.

14:48.320 --> 14:51.440
Thank you very much for listening.

14:51.440 --> 14:55.080
If there's some QR codes to the Gleam website as well as the Gleam Discord if you want to

14:55.080 --> 15:06.360
talk there and if there's any questions, I'm happy to take them if I have time.

15:06.360 --> 15:12.400
There's none for questions.

15:12.400 --> 15:19.360
You showed the tuple access syntax which was tuple.zero, tuple.one.

15:19.360 --> 15:26.120
Does that mean that if you use a record or whatever it's called, can you still use zero

15:26.120 --> 15:29.120
as a key or is that not a...

15:29.120 --> 15:30.320
If you use a custom type?

15:30.320 --> 15:31.320
Yeah.

15:31.320 --> 15:33.960
No, when you use custom types you have to use the keys you define in the custom type

15:33.960 --> 15:35.840
to access them.

15:35.840 --> 15:41.920
The index syntax is only available for tuples.

15:41.920 --> 15:42.920
Question there.

15:42.920 --> 15:52.400
I have a question about the handlers on the library and about Gleam I guess.

15:52.400 --> 15:59.080
When I'm writing the handler, do I know what type of the event is in the client by the

15:59.080 --> 16:00.480
time of writing?

16:00.480 --> 16:01.480
Yes.

16:01.480 --> 16:06.440
So when a Gleam project is put onto Hex we produce Hex stocks and they're all documented

16:06.440 --> 16:07.440
there as well.

16:07.440 --> 16:13.240
So those types are on Hex stocks you can look at and also Gleam has an LSP built into it

16:13.240 --> 16:18.680
which is going to give you the information in your editor.

16:18.680 --> 16:21.720
Oh, okay.

16:21.720 --> 16:23.720
Hello.

16:23.720 --> 16:29.280
If you're used to LX0, what are the things that you would miss in Gleam?

16:29.280 --> 16:33.320
Is there a big overlap?

16:33.320 --> 16:36.640
It has most of the features you're used to along with your type safety.

16:36.640 --> 16:41.480
The only difference would be in Elixir you can define multiple modules in one file whereas

16:41.480 --> 16:44.360
in Gleam that's not really something.

16:44.360 --> 16:45.800
Modules are files themselves.

16:45.800 --> 16:48.720
I guess that's the only thing I could think of off the top of my head.

16:48.720 --> 16:49.720
Right, thank you.

16:49.720 --> 16:50.720
No worries.

16:50.720 --> 16:53.240
Is there any macros as well?

16:53.240 --> 16:57.760
No, we don't have macros right now but there has been several discussions about how we

16:57.760 --> 17:00.040
want to do them and what they're going to be like.

17:00.040 --> 17:05.400
So there is potential for that in the future.

17:05.400 --> 17:07.920
Any more questions?

17:07.920 --> 17:08.920
Okay.

17:08.920 --> 17:11.000
Do you have one?

17:11.000 --> 17:12.000
Yeah.

17:12.000 --> 17:13.000
I'm sorry.

17:13.000 --> 17:14.000
Thank you for your talk.

17:14.000 --> 17:15.000
It was very nice.

17:15.000 --> 17:16.000
I have one question.

17:16.000 --> 17:21.000
I think currently it's version 0.25 of Gleam or 26?

17:21.000 --> 17:22.000
0.26, yeah.

17:22.000 --> 17:23.000
Sorry.

17:23.000 --> 17:24.000
This week.

17:24.000 --> 17:30.920
So are there any big hurdles before like plans for 1.0 for example?

17:30.920 --> 17:37.280
I believe Lewis wants to get like LSP features more properly implemented but you can always

17:37.280 --> 17:39.440
join the Discord and talk there.

17:39.440 --> 17:41.160
I think Lewis is probably better.

17:41.160 --> 17:45.720
I think we also have a GitHub milestone on the GitHub repository which says what we want

17:45.720 --> 17:51.120
before V1.

17:51.120 --> 17:52.720
Any more questions?

17:52.720 --> 17:54.320
Okay.

17:54.320 --> 17:59.320
Thank you, Aria again.

17:59.320 --> 18:01.320
Thank you.

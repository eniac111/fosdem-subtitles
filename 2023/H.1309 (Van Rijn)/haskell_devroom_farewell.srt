1
0:00:00.000 --> 0:00:10.720
So, thank you everyone who has come today, those who are here and those who are not in

2
0:00:10.720 --> 0:00:14.800
the room and were earlier.

3
0:00:14.800 --> 0:00:23.700
I would like to thank our speakers, Julia, Matheides and Reynaldo, Hekate, Ivan and David.

4
0:00:23.700 --> 0:00:29.440
Thank you very much for presenting at the first and hopefully not the last Haskell bedroom

5
0:00:29.440 --> 0:00:39.560
at FOSDEM and let's give them all another round of applause.

6
0:00:39.560 --> 0:00:44.760
Thank you to David and Toils who have helped a lot with the organising of this event, selecting

7
0:00:44.760 --> 0:00:51.720
the programme and for the swag which was donated by the Haskell Foundation.

8
0:00:51.720 --> 0:00:56.360
We have stickers here at the front, there's stickers on the table at the back as well.

9
0:00:56.360 --> 0:01:01.840
Feel free to grab a bunch as you leave.

10
0:01:01.840 --> 0:01:11.000
And for the books, for the prize draw, programming in Haskell by Graham Hutton, second edition,

11
0:01:11.000 --> 0:01:16.920
three copies donated by the Haskell Foundation to give away in the prize draw today.

12
0:01:16.920 --> 0:01:22.440
So thank you very much David for organising that.

13
0:01:22.440 --> 0:01:28.720
Thank you to the FOSDEM organisers and volunteers to make this possible and especially for all

14
0:01:28.720 --> 0:01:34.160
of the AV side of things which is a massive undertaking.

15
0:01:34.160 --> 0:01:43.400
So credit to them and if you see some volunteers please remember to thank them.

16
0:01:43.400 --> 0:01:48.160
And now the prize draw.

17
0:01:48.160 --> 0:01:52.480
So I think the highest number ticket was 39, if you have a ticket with a higher number

18
0:01:52.480 --> 0:02:02.840
than that, jump up and yell so that I put the correct range in the random number generator.

19
0:02:02.840 --> 0:02:15.760
So let's import system.random, let's make a generator, a new stdgen, actually I'll do

20
0:02:15.760 --> 0:02:27.000
it in a, I'll use a monad for this, new stdgen bind and what do we need to do here, random

21
0:02:27.000 --> 0:02:34.520
R, so random in a range from 1 to 39.

22
0:02:34.520 --> 0:02:35.520
It's inclusive?

23
0:02:35.520 --> 0:02:36.520
Yes.

24
0:02:36.520 --> 0:02:41.040
Okay, take my word for it.

25
0:02:41.040 --> 0:02:42.040
It'll be fast enough.

26
0:02:42.040 --> 0:02:43.040
Why not random RIO?

27
0:02:43.040 --> 0:02:46.040
Why not random RIO?

28
0:02:46.040 --> 0:02:54.400
Okay, and we need to, we'll need to do a random RIO, is that a function?

29
0:02:54.400 --> 0:02:56.120
We'll use new stdgen.

30
0:02:56.120 --> 0:03:01.560
We have to use a monad and a bind here just because this is the Haskell devroom and we

31
0:03:01.560 --> 0:03:08.880
need to play up to those sayings that people have that we're all obsessed with monads in

32
0:03:08.880 --> 0:03:11.720
the Haskell community and that's all we ever talk about.

33
0:03:11.720 --> 0:03:22.440
Okay, and we'll need to, let's see, pull out the first value, there we go.

34
0:03:22.440 --> 0:03:27.400
Okay, 35, who's got number 35?

35
0:03:27.400 --> 0:03:32.160
Not here, I'm just going to keep going then.

36
0:03:32.160 --> 0:03:35.160
Number nine, yes, we have a winner, okay.

37
0:03:35.160 --> 0:03:42.160
I'm going to pass that back, thank you.

38
0:03:42.160 --> 0:03:48.160
Okay I might actually hand these down and get someone else to do the running around.

39
0:03:48.160 --> 0:03:57.920
Okay, number 26.

40
0:03:57.920 --> 0:04:04.160
Okay, number 29, yep, here we go.

41
0:04:04.160 --> 0:04:14.320
33, there we go, everyone's right at the front.

42
0:04:14.320 --> 0:04:21.480
Okay and the grand prize, Australia's finest export.

43
0:04:21.480 --> 0:04:28.040
Number three, hey well done, okay.

44
0:04:28.040 --> 0:04:29.560
I'll bring up to you in a minute.

45
0:04:29.560 --> 0:04:33.480
Okay, so thank you everyone, that's a wrap.

46
0:04:33.480 --> 0:04:34.480
Cheers.

47
0:04:34.480 --> 0:05:00.140
Thank you.


1
0:00:00.000 --> 0:00:07.520
All right, cool.

2
0:00:07.520 --> 0:00:09.640
So again, apologies for being this late.

3
0:00:09.640 --> 0:00:12.880
I really don't take it out on the people that are organizing this room.

4
0:00:12.880 --> 0:00:14.600
It's really my fault.

5
0:00:14.600 --> 0:00:20.760
So I hope still you have a nice day and I'll try to keep it short so we stay on schedule.

6
0:00:20.760 --> 0:00:25.040
So this is kind of an introductory talk for people that are new to Alexur and Erlang.

7
0:00:25.040 --> 0:00:29.640
So Alexur is a language which now already exists for 10 years and it's built on top

8
0:00:29.640 --> 0:00:32.760
of the Beam virtual machine, also called the Erlang VM.

9
0:00:32.760 --> 0:00:37.960
So they hired some of the properties that the Beam runtime has as well.

10
0:00:37.960 --> 0:00:42.120
And Beam runtime is actually created for telecom systems.

11
0:00:42.120 --> 0:00:47.600
So it's meant to be 24-7 on and by doing that it has to be full tolerant so if something

12
0:00:47.600 --> 0:00:52.640
goes wrong it can still heal and keep on running.

13
0:00:52.640 --> 0:00:57.300
And because it has to be on all the time, it also means that any code changes should

14
0:00:57.300 --> 0:01:01.000
be done on the fly while the system is running without interruptions, without bringing systems

15
0:01:01.000 --> 0:01:02.520
down, bringing systems up.

16
0:01:02.520 --> 0:01:07.800
But just keep things running on and changing the code under the hood.

17
0:01:07.800 --> 0:01:11.800
It also needed to be concurrent because it needed to handle a lot of incoming telephone

18
0:01:11.800 --> 0:01:14.180
calls at the same time.

19
0:01:14.180 --> 0:01:19.140
And it also needs to be distributed because you have to connect telephone switches together

20
0:01:19.140 --> 0:01:23.320
and make sure that everything runs smoothly.

21
0:01:23.320 --> 0:01:29.600
So those are kind of the properties that Erlang also inherited, oh I'm sorry, Alexur inherited

22
0:01:29.600 --> 0:01:32.520
from Erlang as well.

23
0:01:32.520 --> 0:01:39.640
So when you look at other systems, multi-threaded, okay, programming can be hard.

24
0:01:39.640 --> 0:01:44.040
So in theory it should all work like we have, you know, if you want to do something concurrently

25
0:01:44.040 --> 0:01:47.640
we spawn a few threads and they do their work.

26
0:01:47.640 --> 0:01:52.960
But in practice, because threads can actually interfere with each other's work, it actually

27
0:01:52.960 --> 0:01:54.240
becomes a mess.

28
0:01:54.240 --> 0:01:59.000
So hence the second picture.

29
0:01:59.000 --> 0:02:01.640
The other property that Erlang has is full torrents.

30
0:02:01.640 --> 0:02:07.920
So in Erlang you set up a supervision tree in which a supervisor is actually watching

31
0:02:07.920 --> 0:02:13.040
monitoring a worker and if one of those processes dies, then the supervisor actually makes sure

32
0:02:13.040 --> 0:02:17.600
that a new process is spawned in its place and the system as a whole keeps running even

33
0:02:17.600 --> 0:02:20.240
though one of the parts actually fail.

34
0:02:20.240 --> 0:02:27.920
That's also the mantra that's very often told in Erlang is let it crash.

35
0:02:27.920 --> 0:02:31.120
Nice timing, okay.

36
0:02:31.120 --> 0:02:35.800
Because people feel safe by, you know, if there's an exception, if your code always

37
0:02:35.800 --> 0:02:41.520
goes for the happy path and something goes wrong, Erlang developers tend to not care

38
0:02:41.520 --> 0:02:47.080
that much about it because the system, like the supervisor will restart that process again.

39
0:02:47.080 --> 0:02:52.720
So very exceptional edge cases are sometimes not covered because they feel comfortable

40
0:02:52.720 --> 0:02:58.760
having the system pick it up from there as well.

41
0:02:58.760 --> 0:03:06.600
Before Erlang also existed for quite a while, so Alex also inherited some of the experience

42
0:03:06.600 --> 0:03:12.320
of 20 years building telecom systems which also makes it, for example, WhatsApp had only

43
0:03:12.320 --> 0:03:18.840
57 engineers working for them when they sold to Facebook, but only about 20 of them were

44
0:03:18.840 --> 0:03:19.840
Erlang developers.

45
0:03:19.840 --> 0:03:27.160
The rest were actually mobile developers supporting Androids, Windows, iOS, et cetera, and actually

46
0:03:27.160 --> 0:03:33.920
could handle a lot of users while having a small team.

47
0:03:33.920 --> 0:03:39.200
So then the question also comes a little bit why does Alex exist?

48
0:03:39.200 --> 0:03:45.000
And when people innovate and build new things, there are approximately three ways they can

49
0:03:45.000 --> 0:03:46.880
go around it.

50
0:03:46.880 --> 0:03:52.640
So they completely build something very new which didn't exist before, or they try to

51
0:03:52.640 --> 0:03:58.240
combine ideas from other fields, for example.

52
0:03:58.240 --> 0:04:02.880
Or in some cases people just put a new label on it and say, well, this is new, this is

53
0:04:02.880 --> 0:04:04.720
innovation.

54
0:04:04.720 --> 0:04:10.960
So that hence the title of my talk, is Alex really something new or is it just a new label

55
0:04:10.960 --> 0:04:16.760
on the existing Erlang foundation?

56
0:04:16.760 --> 0:04:25.000
And some other languages, they try to incrementally do some innovations, but after a while the

57
0:04:25.000 --> 0:04:29.040
original sources picked up those changes.

58
0:04:29.040 --> 0:04:34.120
Like CoffeeScript is a very famous example in which the original language picked up those

59
0:04:34.120 --> 0:04:40.680
changes and nowadays a lot less people actually use CoffeeScript.

60
0:04:40.680 --> 0:04:45.680
So how are we doing on time?

61
0:04:45.680 --> 0:04:50.080
So the question is then also why did Jose is kind of the creator of Alektra, why did

62
0:04:50.080 --> 0:04:52.480
he write a new language?

63
0:04:52.480 --> 0:04:57.840
And he was at a time when he wrote Alektra, he was working at Rails team, and one of the

64
0:04:57.840 --> 0:05:01.800
things that he faced was trying to make Rails thread safe.

65
0:05:01.800 --> 0:05:06.880
So making sure that several threads that were running in the Rails program weren't interfering

66
0:05:06.880 --> 0:05:07.880
with each other.

67
0:05:07.880 --> 0:05:11.880
And by doing that he was actually looking around how did other, like folks, how did

68
0:05:11.880 --> 0:05:16.380
other programming languages, other frameworks, how did they solve that issue?

69
0:05:16.380 --> 0:05:19.800
And that's when he actually stumbled upon Erlang and he liked it.

70
0:05:19.800 --> 0:05:25.360
It was just the thing he needed to use.

71
0:05:25.360 --> 0:05:29.980
But there were also some things that he was actually missing.

72
0:05:29.980 --> 0:05:35.300
So for starters, the syntax stems from prologue.

73
0:05:35.300 --> 0:05:37.940
So it's unfamiliar for a lot of people.

74
0:05:37.940 --> 0:05:46.800
So that means that new people who come to Erlang have to have a high barrier to actually

75
0:05:46.800 --> 0:05:51.280
get around because they feel unfamiliar with the syntax.

76
0:05:51.280 --> 0:05:53.540
So he did that first.

77
0:05:53.540 --> 0:05:58.200
And he also introduced other new syntax, for example, the pipe operator in which, like the

78
0:05:58.200 --> 0:06:04.760
result of the previous expression, is piped into the next function as a first parameter.

79
0:06:04.760 --> 0:06:09.760
So by doing that you can avoid having a very nested function calls by having something

80
0:06:09.760 --> 0:06:14.320
that's more readable, more clear to other people.

81
0:06:14.320 --> 0:06:22.560
He also introduced more extensibility to the language by introducing macros and protocols.

82
0:06:22.560 --> 0:06:24.880
And one of my favorites is actually the bottom one.

83
0:06:24.880 --> 0:06:29.720
I'm not sure if everybody can read it, but it's an upcase function which takes a string

84
0:06:29.720 --> 0:06:31.920
and upcases every letter.

85
0:06:31.920 --> 0:06:34.560
And it does that under the hood via a macro.

86
0:06:34.560 --> 0:06:42.100
So the Unicode definition, like the library definitions of characters is downloaded and

87
0:06:42.100 --> 0:06:45.720
actually been translated to functions under the hood.

88
0:06:45.720 --> 0:06:51.880
So when you call this, you're actually using some data that is transformed into functions

89
0:06:51.880 --> 0:06:54.840
for that language.

90
0:06:54.840 --> 0:06:58.200
I'll skip over this part because we don't have that much time.

91
0:06:58.200 --> 0:07:01.440
And you also actually see that those macros are used everywhere.

92
0:07:01.440 --> 0:07:08.640
So even like defining module is a macro, defining a function, et cetera, everything is actually

93
0:07:08.640 --> 0:07:13.320
implemented through macros.

94
0:07:13.320 --> 0:07:17.320
The other thing that he also introduced is a build-to to make it easier for people who

95
0:07:17.320 --> 0:07:20.880
are, for example, new to the language.

96
0:07:20.880 --> 0:07:25.400
If you want to have a package manager, like before, didn't really have package management,

97
0:07:25.400 --> 0:07:32.000
like in the sense that you could add packages to your project, but you had to download them

98
0:07:32.000 --> 0:07:36.600
by yourself, put them somewhere, define it in your config, like, okay, this is the path

99
0:07:36.600 --> 0:07:39.600
to my library that I'm using.

100
0:07:39.600 --> 0:07:47.000
And with Hex and with Mix, just say I made it easier by having a list of dependencies

101
0:07:47.000 --> 0:07:51.080
and go download it from a central place.

102
0:07:51.080 --> 0:07:54.320
Documentation was also made more prominent.

103
0:07:54.320 --> 0:07:57.720
For example, the doc tests which are inspired by Python.

104
0:07:57.720 --> 0:08:04.700
So in this case, we have a function defined and above it is a document, a comment in which

105
0:08:04.700 --> 0:08:06.400
there's an example.

106
0:08:06.400 --> 0:08:12.800
And this example doesn't serve only for documentation, but in the same time, it's also a test.

107
0:08:12.800 --> 0:08:17.240
So, you know, actually, you can, if you would change the implementation, you can directly

108
0:08:17.240 --> 0:08:25.000
see the effect of it because the test is just above it as documentation fails.

109
0:08:25.000 --> 0:08:32.320
So, and, yeah, the documentation is also accessible from REPL from other places.

110
0:08:32.320 --> 0:08:34.400
And this was built before the LSP.

111
0:08:34.400 --> 0:08:40.480
So nowadays you can just hover over a function in your editor and you will see the documentation.

112
0:08:40.480 --> 0:08:46.820
But when Alexa was created, those functionalities weren't that common, like among other languages.

113
0:08:46.820 --> 0:08:50.060
And that's something that's really nice to work with.

114
0:08:50.060 --> 0:08:55.480
And the last thing that he kind of also introduced is a different culture.

115
0:08:55.480 --> 0:08:58.500
Culture which is a little bit more open to newcomers.

116
0:08:58.500 --> 0:09:04.880
So it's not like Erlang shed away from newcomers, but it also didn't, like, make it easier for

117
0:09:04.880 --> 0:09:15.000
new people who are new to the language to get started with it, et cetera.

118
0:09:15.000 --> 0:09:21.480
So that whole, you know, like, to come back to my question, like, is Alexa a kind of new

119
0:09:21.480 --> 0:09:24.040
flavor on top of Erlang?

120
0:09:24.040 --> 0:09:28.920
I think there are kind of projects stemming from Alexa which make it more interesting

121
0:09:28.920 --> 0:09:30.240
and which are really new.

122
0:09:30.240 --> 0:09:38.840
So, for example, Nx numerical, Alexa is an extension which makes machine learning easy.

123
0:09:38.840 --> 0:09:42.760
And that's something that, you know, before Alexa nobody actually thought would be useful

124
0:09:42.760 --> 0:09:45.960
to do with the beam, with the Erlang VM.

125
0:09:45.960 --> 0:09:47.680
Because it wasn't meant for that.

126
0:09:47.680 --> 0:09:51.980
It wasn't meant for number crunching.

127
0:09:51.980 --> 0:09:56.040
But this library, this tooling actually makes it a lot easier to do.

128
0:09:56.040 --> 0:09:58.440
And that's very promising.

129
0:09:58.440 --> 0:10:02.440
Nx is actually a web framework which was inspired by Rails.

130
0:10:02.440 --> 0:10:06.480
And now, so you worry around, it's now an inspiration for Rails and other frameworks

131
0:10:06.480 --> 0:10:08.800
to work with.

132
0:10:08.800 --> 0:10:14.840
And Nx is also kind of an interesting project which makes it possible to run on smaller

133
0:10:14.840 --> 0:10:19.120
devices like Raspberry Pis or something like this.

134
0:10:19.120 --> 0:10:22.640
So to answer the question, is Alexa really different from Erlang?

135
0:10:22.640 --> 0:10:27.000
Is it really, you know, an innovation or is it really hashing?

136
0:10:27.000 --> 0:10:28.320
I would say no.

137
0:10:28.320 --> 0:10:36.440
I think Alexa really adds something to the whole ecosystem which, yeah, wasn't that easy

138
0:10:36.440 --> 0:10:38.480
before that.

139
0:10:38.480 --> 0:10:48.920
So with that being said, thanks for listening.

140
0:10:48.920 --> 0:10:49.920
Thank you.

141
0:10:49.920 --> 0:10:53.840
Unfortunately, we don't have any time for Q&A, but you can find it.

142
0:10:53.840 --> 0:10:54.840
Yes.

143
0:10:54.840 --> 0:10:58.480
So if you're looking for me online, I usually have the handle toxified.

144
0:10:58.480 --> 0:11:04.080
So on Twitter, if it still works or mastered on you, you can also find me.

145
0:11:04.080 --> 0:11:08.360
And I'll be around, I think, for today if you have any further questions.

146
0:11:08.360 --> 0:11:09.360
Thanks again for listening.

147
0:11:09.360 --> 0:11:11.160
And apologies for being this late.

148
0:11:11.160 --> 0:11:12.160
Thank you again.

149
0:11:12.160 --> 0:11:26.280
And with that, stand by for the audience.

150
0:11:26.280 --> 0:11:38.960
I'm


1
0:00:00.000 --> 0:00:11.000
Okay, now we have Nelson Vides with the Actor model as a load testing framework.

2
0:00:11.000 --> 0:00:16.800
Give it up.

3
0:00:16.800 --> 0:00:17.800
Thank you very much.

4
0:00:17.800 --> 0:00:18.800
Thank you for coming.

5
0:00:18.800 --> 0:00:19.800
Let's get started.

6
0:00:19.800 --> 0:00:21.080
As you heard, I'm Nelson Vides.

7
0:00:21.080 --> 0:00:25.080
We only have so many minutes, so I'm not going to go deep into an introduction of who I am.

8
0:00:25.080 --> 0:00:26.080
Just ask me on the corridors.

9
0:00:26.080 --> 0:00:28.480
I love talking.

10
0:00:28.480 --> 0:00:34.240
I'm your Erlang consultant for Erlang Solutions and core Mongoose end developer messaging

11
0:00:34.240 --> 0:00:35.840
back in different questions.

12
0:00:35.840 --> 0:00:36.840
Again, ask me on the corridors.

13
0:00:36.840 --> 0:00:39.680
I would love to talk about it.

14
0:00:39.680 --> 0:00:44.680
Let's start with an analogy, an intro, a catchy intro.

15
0:00:44.680 --> 0:00:51.160
Now, let's see how the internet works.

16
0:00:51.160 --> 0:00:57.680
While this loads, and I hope it loads, otherwise I have it unloaded, I had a fantastic teacher

17
0:00:57.680 --> 0:00:59.640
in high school, a fantastic physics teacher.

18
0:00:59.640 --> 0:01:02.320
Kudos to him, whatever he is.

19
0:01:02.320 --> 0:01:03.320
Hello.

20
0:01:03.320 --> 0:01:10.000
When we were studying aerodynamics and the Newton laws, we studied this bridge that is

21
0:01:10.000 --> 0:01:11.680
not loading.

22
0:01:11.680 --> 0:01:28.200
I think I would just save time and reproduce it here.

23
0:01:28.200 --> 0:01:32.400
Don't ask me how to make it bigger.

24
0:01:32.400 --> 0:01:38.680
Back in the 40s, they built a bridge in the Tacoma Narrows in Washington State, crossing

25
0:01:38.680 --> 0:01:43.680
from Tacoma to the peninsula, the other side of the Narrows, and the bridge had that problem.

26
0:01:43.680 --> 0:01:46.040
It had a very spectacular build.

27
0:01:46.040 --> 0:01:49.080
Through the build, they already realized that this is happening, that the bridge is not

28
0:01:49.080 --> 0:01:51.200
really stable.

29
0:01:51.200 --> 0:01:57.560
Very shortly after the grand opening, they had to evacuate.

30
0:01:57.560 --> 0:02:00.400
They left one car with the only casualty.

31
0:02:00.400 --> 0:02:06.760
Unfortunately, a dog was left inside of that car, the only casualty of this accident.

32
0:02:06.760 --> 0:02:12.600
This spectacular happening, if you check it on Wikipedia, it will be written something

33
0:02:12.600 --> 0:02:18.520
that this left a mark in the history of engineering, engineers went all mad and crazy, what happened

34
0:02:18.520 --> 0:02:22.600
here, what mistake have we made?

35
0:02:22.600 --> 0:02:27.520
Eventually the bridge fell in 1940, so then there was World War II, they didn't have a

36
0:02:27.520 --> 0:02:28.520
chance to build it.

37
0:02:28.520 --> 0:02:31.200
In the 50s, they built a new one.

38
0:02:31.200 --> 0:02:36.360
The old one, these pieces that fell are now a fantastic house for fishes in the bottom

39
0:02:36.360 --> 0:02:37.360
of the river.

40
0:02:37.360 --> 0:02:41.360
Let's go back to the presentation.

41
0:02:41.360 --> 0:02:42.360
Yeah, this never loaded.

42
0:02:42.360 --> 0:02:43.360
Good that I downloaded it.

43
0:02:43.360 --> 0:02:51.800
Why am I talking about this bridge?

44
0:02:51.800 --> 0:02:53.800
Back in the days, bridges were like this.

45
0:02:53.800 --> 0:02:59.800
The Roman times, it was a solid piece of stone that you could just hammer it in all directions.

46
0:02:59.800 --> 0:03:01.720
It was just solid.

47
0:03:01.720 --> 0:03:03.320
What is the load that this bridge was having?

48
0:03:03.320 --> 0:03:07.560
A few Romans and Turians walking, 100 of them at a time.

49
0:03:07.560 --> 0:03:08.960
How heavy that is?

50
0:03:08.960 --> 0:03:10.720
Some armory, what armors they had anyway.

51
0:03:10.720 --> 0:03:16.800
It was not like big modern nice and things that weigh tons.

52
0:03:16.800 --> 0:03:22.560
But one day we went from bridges like that to bridges like this that are very lightweight,

53
0:03:22.560 --> 0:03:28.520
even if they are much bigger and they spawn way longer distances, they are way lighter

54
0:03:28.520 --> 0:03:29.520
than the previous one.

55
0:03:29.520 --> 0:03:31.280
And they are not a solid.

56
0:03:31.280 --> 0:03:36.960
So there are forces that didn't used to matter in the previous bridge that now make a really

57
0:03:36.960 --> 0:03:38.280
big difference.

58
0:03:38.280 --> 0:03:40.040
For example, wind.

59
0:03:40.040 --> 0:03:44.360
The previous bridge put it through a hurricane.

60
0:03:44.360 --> 0:03:46.200
Like what kind of hurricane you need to do something.

61
0:03:46.200 --> 0:03:51.160
But that bridge, not this one in the picture, this is a model, but the Tacoma bridge fell

62
0:03:51.160 --> 0:03:54.920
under a wind of 40 miles per hour.

63
0:03:54.920 --> 0:03:58.720
It's not that I like miles, sorry, I'm supporter of the international system, but the Wikipedia

64
0:03:58.720 --> 0:04:01.040
article was written by an American, so it's in miles.

65
0:04:01.040 --> 0:04:04.640
How many kilometers per hour that is, I don't know how to convert it.

66
0:04:04.640 --> 0:04:05.760
But it's not a lot.

67
0:04:05.760 --> 0:04:08.920
It's not a hurricane.

68
0:04:08.920 --> 0:04:13.160
So my analogy.

69
0:04:13.160 --> 0:04:18.920
The previous bridge there was just a few people with a small load and forces that were there

70
0:04:18.920 --> 0:04:21.040
didn't play any difference whatsoever.

71
0:04:21.040 --> 0:04:26.280
But in the new bridge there is hundreds of cars with lots of loads, probably transports

72
0:04:26.280 --> 0:04:32.440
of goods and much bigger weapons that in the past and forces that were always there really

73
0:04:32.440 --> 0:04:34.040
make a huge difference.

74
0:04:34.040 --> 0:04:38.400
Let's have an analogy that matters to us here.

75
0:04:38.400 --> 0:04:41.600
We are not bridge engineers.

76
0:04:41.600 --> 0:04:46.720
Not long ago we had these huge computers, but you can probably just punch them and nothing

77
0:04:46.720 --> 0:04:47.720
would ever happen.

78
0:04:47.720 --> 0:04:51.000
If I punch this one, the presentation is over.

79
0:04:51.000 --> 0:04:56.520
But we're used by just a few people with a few use cases.

80
0:04:56.520 --> 0:05:02.240
And then we went to this magic infrastructure of God knows what is going on, of lots of

81
0:05:02.240 --> 0:05:07.000
things put somewhere used by millions of people.

82
0:05:07.000 --> 0:05:10.120
God knows what use case people are finding out.

83
0:05:10.120 --> 0:05:14.920
You probably designed your service with one or two use cases in mind and then people surprise

84
0:05:14.920 --> 0:05:17.560
you.

85
0:05:17.560 --> 0:05:24.880
So the questions again, what are all the interactions?

86
0:05:24.880 --> 0:05:29.520
There was one or two use cases by one or two people now sky's the limit.

87
0:05:29.520 --> 0:05:32.040
What is the traffic capacity?

88
0:05:32.040 --> 0:05:37.800
In the Roman bridge there was a centurion, an army, a division with a few weapons.

89
0:05:37.800 --> 0:05:41.000
Now you're imagining a modern bridge.

90
0:05:41.000 --> 0:05:42.800
What about the amplifying factors?

91
0:05:42.800 --> 0:05:48.080
The problem with the wind asked me in the Q&A or in the questions like the details of

92
0:05:48.080 --> 0:05:49.080
why this bridge fell.

93
0:05:49.080 --> 0:05:50.080
I love that story.

94
0:05:50.080 --> 0:05:55.440
There was a little bit of wind that amplified the movement to more than the bridge would

95
0:05:55.440 --> 0:05:56.440
support.

96
0:05:56.440 --> 0:05:58.000
This can happen also to us.

97
0:05:58.000 --> 0:06:03.000
Imagine a client sends a packet that is compressed with decompressive and he sent half a kilobyte

98
0:06:03.000 --> 0:06:06.480
but with decompressive and it's 5G cache.

99
0:06:06.480 --> 0:06:07.520
You run out of memory.

100
0:06:07.520 --> 0:06:08.520
What about amplifying factors?

101
0:06:08.520 --> 0:06:12.760
And what about all forces that didn't make any difference, for example punching a computer

102
0:06:12.760 --> 0:06:18.760
that now they really do?

103
0:06:18.760 --> 0:06:22.120
Let's get with a little bit of terminology.

104
0:06:22.120 --> 0:06:25.600
Coming back to the title of my presentation.

105
0:06:25.600 --> 0:06:27.080
What is a framework?

106
0:06:27.080 --> 0:06:32.560
Here you have a bunch of copy pasted definitions from different dictionaries and Wikipedia

107
0:06:32.560 --> 0:06:37.280
is the first, which is not the best dictionary but we all love it.

108
0:06:37.280 --> 0:06:41.440
Basically probably you have an idea like Phoenix is a web framework for example.

109
0:06:41.440 --> 0:06:51.680
It's a set of tools that gives you a way to build a system to solve a problem.

110
0:06:51.680 --> 0:06:55.560
In turn what is a model?

111
0:06:55.560 --> 0:06:59.880
You can have a model of a bridge but you cannot have a framework of a bridge.

112
0:06:59.880 --> 0:07:05.520
You have a framework to build a bridge and a model that represents the bridge.

113
0:07:05.520 --> 0:07:10.120
Again some copy pasted definitions from diverse dictionaries for you to enjoy.

114
0:07:10.120 --> 0:07:17.640
This model in particular is the model of the categories of the Sagrada family.

115
0:07:17.640 --> 0:07:22.040
Again ask me, I love this topic but we are here to talk about that.

116
0:07:22.040 --> 0:07:24.960
This is how they designed the Sagrada family.

117
0:07:24.960 --> 0:07:26.520
That is just about to finish any day now.

118
0:07:26.520 --> 0:07:30.360
That's some data we'll finish it.

119
0:07:30.360 --> 0:07:37.680
So we have a framework, set of tools to solve a problem and a model, a theoretical representation

120
0:07:37.680 --> 0:07:41.560
of your problem set.

121
0:07:41.560 --> 0:07:43.440
Testing and load.

122
0:07:43.440 --> 0:07:48.640
Testing like kids go to school and they get a test just to prove that they know what they

123
0:07:48.640 --> 0:07:50.960
are supposed to know.

124
0:07:50.960 --> 0:07:55.920
It's a process of making sure that things are doing what they are supposed to do.

125
0:07:55.920 --> 0:07:59.480
They know their knowledge that the software does what it's supposed to do etc.

126
0:07:59.480 --> 0:08:02.640
And load, this is what Newton would probably love to call work.

127
0:08:02.640 --> 0:08:05.440
Again thank you physics teacher.

128
0:08:05.440 --> 0:08:09.600
Everyone Newton would love to call work is a mass of quantity of something that has to

129
0:08:09.600 --> 0:08:10.600
be worked on.

130
0:08:10.600 --> 0:08:17.560
Like moved or supported or resisted against gravity or wind or transported in this virtual

131
0:08:17.560 --> 0:08:22.360
bridges of cables that we have under the ocean etc.

132
0:08:22.360 --> 0:08:30.080
So load testing is testing that their software, a service, can handle the load that we are

133
0:08:30.080 --> 0:08:32.240
giving it.

134
0:08:32.240 --> 0:08:35.520
And how it behaves under different such quantities.

135
0:08:35.520 --> 0:08:41.360
So we have this roughly scheme of like three points of performance testing, of load testing

136
0:08:41.360 --> 0:08:44.080
that you have to test.

137
0:08:44.080 --> 0:08:46.640
Performance is basically how fast your algorithm is, like execute it once.

138
0:08:46.640 --> 0:08:49.200
It takes 10 seconds or 10 nanoseconds.

139
0:08:49.200 --> 0:08:51.360
It's the theoretical performance.

140
0:08:51.360 --> 0:08:59.280
But what happens when you make a lot of requests at the point where you expect your service

141
0:08:59.280 --> 0:09:01.760
to still be able, but not more than that.

142
0:09:01.760 --> 0:09:06.000
So the hardware you deploy, the architecture, you expect that this should behave like this.

143
0:09:06.000 --> 0:09:07.520
And then you test it.

144
0:09:07.520 --> 0:09:12.200
And then you put more load and see how it dies.

145
0:09:12.200 --> 0:09:19.760
We have this luxury in IT that we can destroy our software because we can just replicate

146
0:09:19.760 --> 0:09:22.080
it, build infinite copies.

147
0:09:22.080 --> 0:09:23.480
The bridge guy would be very yellow.

148
0:09:23.480 --> 0:09:26.400
He cannot build two bridges to break one.

149
0:09:26.400 --> 0:09:27.600
He has no second chance.

150
0:09:27.600 --> 0:09:30.480
There is one bridge, don't break it, it's very expensive.

151
0:09:30.480 --> 0:09:37.240
Make sure it works how do you test what happens when it dies.

152
0:09:37.240 --> 0:09:41.920
So a load testing framework is going to be, of course, a set of tools that gives you a

153
0:09:41.920 --> 0:09:46.560
way to test these different kinds of loads.

154
0:09:46.560 --> 0:09:51.680
And for these kinds of loads, you need some units of measurement, what you say load.

155
0:09:51.680 --> 0:09:56.320
In the case of the bridge, Newton would love to call that the forces.

156
0:09:56.320 --> 0:09:58.240
And you need the interactions.

157
0:09:58.240 --> 0:10:01.680
How are these possible loads applied?

158
0:10:01.680 --> 0:10:05.040
In the case of the bridge, we would usually think of it as gravity.

159
0:10:05.040 --> 0:10:06.040
There is just one interaction.

160
0:10:06.040 --> 0:10:07.040
It goes down.

161
0:10:07.040 --> 0:10:12.000
But wind and turbulences and your users can be very crazy.

162
0:10:12.000 --> 0:10:14.080
Forces can be applied in any way.

163
0:10:14.080 --> 0:10:19.740
So we need to think about the unit of measurement and the interactions.

164
0:10:19.740 --> 0:10:22.280
So as I said, there is the forces.

165
0:10:22.280 --> 0:10:25.080
Newton would love this.

166
0:10:25.080 --> 0:10:27.000
And the equivalent.

167
0:10:27.000 --> 0:10:31.360
You have a service, some backend, that has users.

168
0:10:31.360 --> 0:10:37.800
And as I said before, you would never imagine the ways they find to use your service.

169
0:10:37.800 --> 0:10:43.120
You usually design with three or four things in mind.

170
0:10:43.120 --> 0:10:52.120
So I would say that the equivalent of the forces that can be applied in different directions

171
0:10:52.120 --> 0:10:57.640
are self-independent programs.

172
0:10:57.640 --> 0:11:03.560
Imagine that each one of those users is a program that decides how to apply his force,

173
0:11:03.560 --> 0:11:05.880
decides how to interact.

174
0:11:05.880 --> 0:11:09.960
Each one of those many arrows that you can draw in this bridge, and this is infinite

175
0:11:09.960 --> 0:11:12.840
if you get involved with different equations.

176
0:11:12.840 --> 0:11:16.160
Complicated mathematics, everything moves like crazy.

177
0:11:16.160 --> 0:11:23.280
All those moving arrows can be represented with an independent program on its own.

178
0:11:23.280 --> 0:11:25.920
And those programs interact with each other.

179
0:11:25.920 --> 0:11:30.680
This is the model of the actor that I can imagine that most of you more or less would

180
0:11:30.680 --> 0:11:33.600
be familiar with what we do in Erlang and Elixir.

181
0:11:33.600 --> 0:11:42.200
For those of you that are not, the idea, basically, by the way, before I go to the next slide,

182
0:11:42.200 --> 0:11:50.680
this is Carl Heywood, the guy that named the actor model, that put it into paper.

183
0:11:50.680 --> 0:11:55.440
He died a month ago, or almost two, maybe, somewhere in mid-December.

184
0:11:55.440 --> 0:11:57.680
So a bit of a tribute to him.

185
0:11:57.680 --> 0:11:59.840
Thank you for the theory.

186
0:11:59.840 --> 0:12:04.440
For those of you that may not be familiar with the concept of the actor, basically,

187
0:12:04.440 --> 0:12:06.640
it's the universal primitive.

188
0:12:06.640 --> 0:12:10.500
In a language like Ruby, for example, everything is an object.

189
0:12:10.500 --> 0:12:13.920
You can do whatever dot something and maybe it will crash because it's not valid.

190
0:12:13.920 --> 0:12:16.720
The compiler may tell you, but you can.

191
0:12:16.720 --> 0:12:18.800
That's how you design your program.

192
0:12:18.800 --> 0:12:21.880
In a language like Lisp, everything is a function, absolutely everything.

193
0:12:21.880 --> 0:12:23.920
You can do whatever parenthesis.

194
0:12:23.920 --> 0:12:29.080
And maybe it's not valid, maybe it will crash, maybe the compiler will tell you before compiling.

195
0:12:29.080 --> 0:12:30.920
In a language like Erlang, everything is an actor.

196
0:12:30.920 --> 0:12:33.520
You can do whateverclamation marks send a message.

197
0:12:33.520 --> 0:12:35.040
And it's almost never valid.

198
0:12:35.040 --> 0:12:40.840
It is only by a process identifier or if it has a name, a proper name.

199
0:12:40.840 --> 0:12:45.160
So this is the model of your program.

200
0:12:45.160 --> 0:12:48.820
This is how you structure the program.

201
0:12:48.820 --> 0:12:57.520
How are we going to load test a service?

202
0:12:57.520 --> 0:13:04.840
Light thickens and the crow makes wind to the rocky wood.

203
0:13:04.840 --> 0:13:06.400
This has lots of background.

204
0:13:06.400 --> 0:13:07.760
It's a very personal thing.

205
0:13:07.760 --> 0:13:10.360
First of all, I love Shakespeare, but that's not the point.

206
0:13:10.360 --> 0:13:13.360
I work at the beginning in the service.

207
0:13:13.360 --> 0:13:15.000
That is an XMPP implementation.

208
0:13:15.000 --> 0:13:19.560
In XMPP, I don't know why, but I'm very happy about it.

209
0:13:19.560 --> 0:13:26.480
All the examples in the RFC are given with Shakespeare quotes.

210
0:13:26.480 --> 0:13:29.880
So when it comes to messages, there is Alice writing to...

211
0:13:29.880 --> 0:13:35.960
No, Alice uses Juliet writing to Romeo from the balcony and all the examples are like

212
0:13:35.960 --> 0:13:36.960
this.

213
0:13:36.960 --> 0:13:44.520
So we made a piece of service based on a quote from Shakespeare, the name, that is called

214
0:13:44.520 --> 0:13:48.840
a murder of Krause.

215
0:13:48.840 --> 0:13:51.640
I also love Hitchcock.

216
0:13:51.640 --> 0:13:55.240
If you haven't watched it, please watch this picture, this movie.

217
0:13:55.240 --> 0:14:03.200
So there is this library we created in my team to test Mongoose IM on the load.

218
0:14:03.200 --> 0:14:07.320
That is called a murder of Krause because Krause are dangerous and are there to kill

219
0:14:07.320 --> 0:14:09.240
you and eat your corpse.

220
0:14:09.240 --> 0:14:15.520
So this is what we try to do, to just kill Mongoose IM, see it dying and then try to

221
0:14:15.520 --> 0:14:18.040
make it stronger next time.

222
0:14:18.040 --> 0:14:24.800
With this project, we reflect about the interactions, the traffic capacity, amplifying factor, all

223
0:14:24.800 --> 0:14:26.400
new forces.

224
0:14:26.400 --> 0:14:30.640
So in the case of a messaging system, there is this vulnerability that happens to everyone

225
0:14:30.640 --> 0:14:31.640
back in the days.

226
0:14:31.640 --> 0:14:35.400
There is compression, somebody sends you a small packet, you decompress it and boom,

227
0:14:35.400 --> 0:14:36.800
you run out of memory.

228
0:14:36.800 --> 0:14:41.920
These kind of things, you have to look for these amplifying forces, the traffic capacity,

229
0:14:41.920 --> 0:14:47.520
how much traffic each client can send, how many clients can you have.

230
0:14:47.520 --> 0:15:00.520
All new forces, something that may not be a surprise for old schoolers, early developers.

231
0:15:00.520 --> 0:15:07.360
This new world of cloud, that is someone else's computer really, with all your microservices

232
0:15:07.360 --> 0:15:12.360
connection are a lot less stable, distribution is not as cool and easy as it was when Ericsson

233
0:15:12.360 --> 0:15:16.560
made it and hardware was indestructible, you know, the punching theory, nothing happens.

234
0:15:16.560 --> 0:15:18.680
Now it dies.

235
0:15:18.680 --> 0:15:26.000
So all new forces that now make a difference in the new way of building a system.

236
0:15:26.000 --> 0:15:31.760
In the case of Mongo same, we have this usual use cases, session establishment, so somebody

237
0:15:31.760 --> 0:15:37.600
looks in, authentication, password, passwordless, make up your mind, send messages, obviously,

238
0:15:37.600 --> 0:15:42.760
so a lot of sending messages, fetching your archive, you reconnect after a while, you

239
0:15:42.760 --> 0:15:46.640
are on holidays and then you fetch all the messages you lost, this is stored somewhere,

240
0:15:46.640 --> 0:15:53.200
it has to be stored as you send it, what is the impact that it has on sending, on receiving,

241
0:15:53.200 --> 0:15:55.640
joining and leaving group chats.

242
0:15:55.640 --> 0:16:03.680
This is something that in all classic XMPPs, it's a problem to scale, but all classic with

243
0:16:03.680 --> 0:16:06.080
time happen, we had solutions for that.

244
0:16:06.080 --> 0:16:08.960
So I had these problems, we need to test them.

245
0:16:08.960 --> 0:16:12.520
And we think how to test them.

246
0:16:12.520 --> 0:16:20.480
So you start your scenario and at testing time, you need a init, a start up, like start

247
0:16:20.480 --> 0:16:25.840
the metrics, start the functionality that is going to coordinate all your actors when

248
0:16:25.840 --> 0:16:29.400
they have some interaction between them, for example, in a group chat you are going to

249
0:16:29.400 --> 0:16:33.720
create so many actors, then they will join the same group chat and talk to each other.

250
0:16:33.720 --> 0:16:38.120
Or in a multi-user game, you are going to have millions of users, but they will cluster

251
0:16:38.120 --> 0:16:39.120
in groups.

252
0:16:39.120 --> 0:16:40.200
So you need to coordinate them.

253
0:16:40.200 --> 0:16:46.520
So you will start logic to capture users and to coordinate them and join the same group,

254
0:16:46.520 --> 0:16:48.840
etc., etc.

255
0:16:48.840 --> 0:16:53.800
So you start all the actors, after all you are in it, then you spawn all the process,

256
0:16:53.800 --> 0:17:01.160
you know, Erlang thing, and each one executes the program they are supposed to, that they

257
0:17:01.160 --> 0:17:03.840
have been coded to do.

258
0:17:03.840 --> 0:17:09.160
And then you run it, locally or distributed, at some point the load that you can generate

259
0:17:09.160 --> 0:17:13.520
doesn't fit in a single computer, so it has to be distributed, so you need your service

260
0:17:13.520 --> 0:17:15.920
to handle the distribution for you.

261
0:17:15.920 --> 0:17:23.160
The purpose of the load testing is checking how your software is going to survive or die

262
0:17:23.160 --> 0:17:28.840
and not implementing the load testing idea.

263
0:17:28.840 --> 0:17:34.920
We want a load testing library that will just give me all the users, give me a way to coordinate

264
0:17:34.920 --> 0:17:39.800
them when I have to, to throttle them when I have to, and the rate that I have to, to

265
0:17:39.800 --> 0:17:44.840
handle whatever place I need to start this load testing.

266
0:17:44.840 --> 0:17:50.280
And I don't want to think about all of that, I just want to describe the scenario that

267
0:17:50.280 --> 0:17:52.800
I'm going to use to kill my service.

268
0:17:52.800 --> 0:17:58.760
So we build a library that does all the other stuff.

269
0:17:58.760 --> 0:18:02.080
Very important thing is the throttle idea.

270
0:18:02.080 --> 0:18:06.600
In the case of the chat service, imagine that a million users connect exactly at the same

271
0:18:06.600 --> 0:18:08.440
time and logging at the same time.

272
0:18:08.440 --> 0:18:13.960
This is probably not a real use case, you can test for that, but that is the stress

273
0:18:13.960 --> 0:18:16.120
part when you want to kill the service.

274
0:18:16.120 --> 0:18:17.760
That later.

275
0:18:17.760 --> 0:18:23.520
You would usually see what happens when you connect 100 per second, and then you increment.

276
0:18:23.520 --> 0:18:28.640
200 per second, 500 per second, 1,000 per second, and you want to have a functionality

277
0:18:28.640 --> 0:18:33.920
that will throttle and progressively increment the rate.

278
0:18:33.920 --> 0:18:39.400
And then see in your metrics, both load testing library will output to Grafana, your service

279
0:18:39.400 --> 0:18:45.240
that you're testing will output to Grafana, and then see the correlations.

280
0:18:45.240 --> 0:18:49.360
You want actors to wait for the permission.

281
0:18:49.360 --> 0:18:52.120
I'm allowed to do this already.

282
0:18:52.120 --> 0:18:56.520
And the case is the session establishment, but also joining a group chat, how many messages

283
0:18:56.520 --> 0:18:58.280
are you going to send.

284
0:18:58.280 --> 0:19:02.720
There is this, you have an arrow that is going to be applied in one place, how big do you

285
0:19:02.720 --> 0:19:10.040
want the arrow to be if you want that arrow to grow incrementally.

286
0:19:10.040 --> 0:19:13.400
And you may want to ask another actor to wait for the approval.

287
0:19:13.400 --> 0:19:20.920
You can tell the throttle logic to tell that actor to wait for something, and then that

288
0:19:20.920 --> 0:19:25.320
actor, which is not yourself, will wait for the action.

289
0:19:25.320 --> 0:19:28.360
For example, in the case of joining a group chat, you have to create it.

290
0:19:28.360 --> 0:19:32.160
So there is a first user that says to everyone wait, don't join because I need to create

291
0:19:32.160 --> 0:19:33.160
the group chat first.

292
0:19:33.160 --> 0:19:38.440
Voila is created, come here, et cetera.

293
0:19:38.440 --> 0:19:43.840
And another very piece of important functionality is the coordination idea.

294
0:19:43.840 --> 0:19:51.680
So as actors are appearing in your load test, one thing that you will want to do, as I said

295
0:19:51.680 --> 0:19:54.840
before, is to coordinate sets of them.

296
0:19:54.840 --> 0:19:57.360
For example, who is going to write to whom.

297
0:19:57.360 --> 0:20:01.160
So you want an actor to know about another one.

298
0:20:01.160 --> 0:20:03.600
So it can send him a message.

299
0:20:03.600 --> 0:20:10.440
You want a functionality that will pick up actors as they are starting in a configurable

300
0:20:10.440 --> 0:20:18.440
way, either all of them that are started or sets of pairs or a list of them.

301
0:20:18.440 --> 0:20:25.120
And once the configurable amount of actors has started, then make them do something.

302
0:20:25.120 --> 0:20:30.760
There is a callback that will get the list of actors that they identify and will coordinate

303
0:20:30.760 --> 0:20:34.080
how they interact with each other.

304
0:20:34.080 --> 0:20:40.080
And the actor, as they join the coordinator, they will be given the function that they

305
0:20:40.080 --> 0:20:43.280
have to do.

306
0:20:43.280 --> 0:20:53.480
So to us, this is what my load testing framework is supposed to help me do.

307
0:20:53.480 --> 0:20:55.200
We use it for XMPP.

308
0:20:55.200 --> 0:21:00.800
So then we have scenarios and functionality written that knows how to do the authentication

309
0:21:00.800 --> 0:21:04.160
for the protocol, that knows the functionality of Mongoose IM.

310
0:21:04.160 --> 0:21:13.080
But we don't believe that the load testing library is the one that decides your scenario.

311
0:21:13.080 --> 0:21:19.960
I have seen different load testing frameworks that give you functionality to run HTTP requests.

312
0:21:19.960 --> 0:21:23.960
But what if you are not testing something HTTP related?

313
0:21:23.960 --> 0:21:27.600
We believe that the best way to write what you want to test is to write the code that

314
0:21:27.600 --> 0:21:29.560
you know how to write anyway.

315
0:21:29.560 --> 0:21:34.680
So the idea is that you write Erlang, Elixir is on the way.

316
0:21:34.680 --> 0:21:38.160
This library is not integrated with Elixir, but we will.

317
0:21:38.160 --> 0:21:41.080
Pull requests accepted.

318
0:21:41.080 --> 0:21:46.360
The library, as I said, is called Amok, an acronym for the order of Krause, because you

319
0:21:46.360 --> 0:21:51.600
want to see your service dying.

320
0:21:51.600 --> 0:21:53.680
There is the repo, you can look it up.

321
0:21:53.680 --> 0:21:58.320
We have this other repo that we call Amokarsenal, where we have all the scenarios for XMPP, where

322
0:21:58.320 --> 0:22:03.240
you can take inspiration on how they work.

323
0:22:03.240 --> 0:22:06.600
And I'm about to finish here.

324
0:22:06.600 --> 0:22:11.160
I proposed to myself that I would make this presentation without showing a single line

325
0:22:11.160 --> 0:22:17.480
of code, so I actually cut the screenshot before the code starts.

326
0:22:17.480 --> 0:22:19.400
Let's see how it works.

327
0:22:19.400 --> 0:22:24.600
In previous presentation I have shown a lot, and it's a bit more complicated to explain.

328
0:22:24.600 --> 0:22:27.880
So the library has documentation.

329
0:22:27.880 --> 0:22:33.280
To do the thing that I have pending is to use the new XDock documentation.

330
0:22:33.280 --> 0:22:38.800
It doesn't have it yet, but it has a beautiful markdown that you can read in GitHub pages.

331
0:22:38.800 --> 0:22:43.520
And the scenarios library for inspiration.

332
0:22:43.520 --> 0:22:45.480
That is all I will have for you.

333
0:22:45.480 --> 0:22:46.840
This is my handle.

334
0:22:46.840 --> 0:22:52.280
That is two repos, links, for Mongoose, I am Amok, and this is a picture that I have

335
0:22:52.280 --> 0:22:56.440
everywhere if you see some Nilsen videos and you don't know if it's me, it's going to be

336
0:22:56.440 --> 0:22:59.880
that one if it has that picture.

337
0:22:59.880 --> 0:23:00.880
That's all from me.

338
0:23:00.880 --> 0:23:01.880
Thank you very much.

339
0:23:01.880 --> 0:23:07.280
Thank you, Nilsen.

340
0:23:07.280 --> 0:23:14.160
Is there any questions?

341
0:23:14.160 --> 0:23:16.880
I know that there's also a library called Zung.

342
0:23:16.880 --> 0:23:19.600
It's an old load testing library written in Erlang.

343
0:23:19.600 --> 0:23:22.080
How is this one different?

344
0:23:22.080 --> 0:23:25.880
In that one you write the scenario in XML.

345
0:23:25.880 --> 0:23:34.760
It has a domain specific language, XML base, to describe what you want to do.

346
0:23:34.760 --> 0:23:37.680
The library has to offer you the protocol.

347
0:23:37.680 --> 0:23:43.760
That library has HTTP and XMPP helper functionality.

348
0:23:43.760 --> 0:23:47.080
If you want a different protocol, the library doesn't give it.

349
0:23:47.080 --> 0:23:49.440
We thought we just want to write the Erlang code.

350
0:23:49.440 --> 0:23:55.200
It's way more pleasant to write and also less limited.

351
0:23:55.200 --> 0:23:58.880
Thank you.

352
0:23:58.880 --> 0:24:07.000
Other questions?

353
0:24:07.000 --> 0:24:11.960
By using the murder of Krause, did you already find any bugs in Mongoose I Am that you've

354
0:24:11.960 --> 0:24:14.440
been able to fix based on the...

355
0:24:14.440 --> 0:24:16.320
Every single time.

356
0:24:16.320 --> 0:24:17.320
Fair.

357
0:24:17.320 --> 0:24:26.560
Usual bottlenecks sometimes are database interactions in an old force that didn't used

358
0:24:26.560 --> 0:24:29.840
to matter in the computer you could punch.

359
0:24:29.840 --> 0:24:36.680
As you write messages, you need to make sure that they are recoverable.

360
0:24:36.680 --> 0:24:42.560
The amount of messages that you can send might not be as scalable as the amount of inserts

361
0:24:42.560 --> 0:24:46.080
a database can have.

362
0:24:46.080 --> 0:24:50.160
This is something that we test a lot.

363
0:24:50.160 --> 0:24:54.320
Another functionality that we do is the time to delivery.

364
0:24:54.320 --> 0:24:59.360
The sender puts a timestamp and the receiver just measures the difference.

365
0:24:59.360 --> 0:25:04.600
That's something that we also test continuously when we change something to see that we didn't

366
0:25:04.600 --> 0:25:08.800
introduce a computation that would make the time to delivery longer.

367
0:25:08.800 --> 0:25:11.520
Those are the two most common tests that we test almost all the time.

368
0:25:11.520 --> 0:25:16.800
Then there are each case that we don't test as regularly, but we have all the scenarios

369
0:25:16.800 --> 0:25:18.200
for them.

370
0:25:18.200 --> 0:25:23.240
Any other question?

371
0:25:23.240 --> 0:25:28.640
I wanted to mention another library I saw that's called MZbench, I think.

372
0:25:28.640 --> 0:25:30.640
I don't know that one.

373
0:25:30.640 --> 0:25:31.640
I think it was...

374
0:25:31.640 --> 0:25:38.080
I know it because it was used by VerneQ to do its load testing, I think.

375
0:25:38.080 --> 0:25:47.160
I think it's in Erlang 2 and you write scenarios.

376
0:25:47.160 --> 0:25:54.200
If I have an actor that has to perform some action and then pass the state to another

377
0:25:54.200 --> 0:25:56.480
actor, is that possible?

378
0:25:56.480 --> 0:25:58.760
You have to write your own code, basically.

379
0:25:58.760 --> 0:25:59.760
Do that.

380
0:25:59.760 --> 0:26:00.760
Half-half.

381
0:26:00.760 --> 0:26:01.760
The coordinator will help.

382
0:26:01.760 --> 0:26:05.960
In the coordinator, you can say to pick a pair of actors and then they say...

383
0:26:05.960 --> 0:26:10.120
Okay, you're the first one.

384
0:26:10.120 --> 0:26:11.880
Any other question?

385
0:26:11.880 --> 0:26:16.360
We have something similar for changing the owner of a room and then actors have to pass

386
0:26:16.360 --> 0:26:22.920
the state, the knowledge, to another one.

387
0:26:22.920 --> 0:26:23.920
Thank you again.

388
0:26:23.920 --> 0:26:24.920
That's the eternal life of the question.

389
0:26:24.920 --> 0:26:40.720
Thank you.


1
0:00:00.000 --> 0:00:10.920
And now we have Arjun Srepenice, and he is going to talk about how live-view will be

2
0:00:10.920 --> 0:00:12.680
used to keep you warm.

3
0:00:12.680 --> 0:00:14.880
So give it up!

4
0:00:14.880 --> 0:00:20.060
Alright, thank you everybody.

5
0:00:20.060 --> 0:00:22.860
Nice to see such a big turn up.

6
0:00:22.860 --> 0:00:28.840
When he last organized this dev room, I think three years ago, it was a much smaller room.

7
0:00:28.840 --> 0:00:33.960
It was really packed, now it's not packed but it's obvious because it's a bigger room.

8
0:00:33.960 --> 0:00:39.400
But I'm very glad that everybody is here.

9
0:00:39.400 --> 0:00:46.320
So my name is Arjan Skrepenis and I'm going to talk a bit about knitting today with you

10
0:00:46.320 --> 0:00:48.120
and also a bit about LiveView.

11
0:00:48.120 --> 0:00:54.320
So I'm going to give a little bit of background about my project, about what I'm doing, then

12
0:00:54.320 --> 0:01:01.080
I'm going to talk about LiveView and how I use it and then I'm going to wrap up.

13
0:01:01.080 --> 0:01:05.320
So let's start with some background.

14
0:01:05.320 --> 0:01:08.960
I've been programming since I was a little kid.

15
0:01:08.960 --> 0:01:17.600
Yesterday when we had a beer together I talked about what is your first OTP release that

16
0:01:17.600 --> 0:01:18.600
you used.

17
0:01:18.600 --> 0:01:24.760
I was actually R13 so that's a bit and you can guess my age a bit.

18
0:01:24.760 --> 0:01:29.560
It's from 2009 so I've been using Erlang since 2009.

19
0:01:29.560 --> 0:01:35.960
Before that I used PHP a lot but then I got introduced by somebody to Erlang and that

20
0:01:35.960 --> 0:01:42.520
actually Mark Worell had a bit the same story as Jose Falimat when he created Elixir.

21
0:01:42.520 --> 0:01:45.160
Mark wanted to create also Web Framework for Erlang.

22
0:01:45.160 --> 0:01:51.080
Elixir was not yet born and so he created Zotonic, Web Framework and I'm still a contributor

23
0:01:51.080 --> 0:01:56.400
to that and it's still alive although it's not as popular as Elixir or Phoenix for that

24
0:01:56.400 --> 0:01:58.640
matter.

25
0:01:58.640 --> 0:02:03.840
But then later I got used to programming in Elixir and I've been doing that since for

26
0:02:03.840 --> 0:02:04.840
quite a bit.

27
0:02:04.840 --> 0:02:06.920
So my background is I studied AI.

28
0:02:06.920 --> 0:02:11.080
I have a Masters in that back when AI was not hot at all.

29
0:02:11.080 --> 0:02:13.320
It was the middle of the winter of AI.

30
0:02:13.320 --> 0:02:17.440
Nobody wanted to do anything with it but I thought hey why not.

31
0:02:17.440 --> 0:02:22.760
But then it turned out I did not really do anything with AI for a long time so I just

32
0:02:22.760 --> 0:02:28.160
became a regular web developer doing first PHP like I said and then Elixir.

33
0:02:28.160 --> 0:02:33.920
But I'm still interested in AI in hardware and software and also in art actually because

34
0:02:33.920 --> 0:02:39.760
after when I stopped or graduated from AI school I went to the art academy, the Rietveld

35
0:02:39.760 --> 0:02:48.360
Academy in Amsterdam and I decided to proceed the career in art or at least try to do something

36
0:02:48.360 --> 0:02:53.840
more creative outside of pure computer science.

37
0:02:53.840 --> 0:02:59.720
So one of the, let's talk about that a bit because it gets me slowly to the knitting

38
0:02:59.720 --> 0:03:00.720
stuff.

39
0:03:00.720 --> 0:03:08.240
So I worked with Glazine van der Zonschl, she's a friend of mine and an artist slash

40
0:03:08.240 --> 0:03:13.280
interaction designer and together we did quite a lot of projects that were related to this

41
0:03:13.280 --> 0:03:14.280
kind of stuff.

42
0:03:14.280 --> 0:03:21.040
So for instance we built an app where you could interact with a fake social network

43
0:03:21.040 --> 0:03:23.400
from the Dutch Golden Age.

44
0:03:23.400 --> 0:03:27.400
So you would walk around in a museum and then you would walk next to a Rembrandt painting

45
0:03:27.400 --> 0:03:33.960
and then Rembrandt would send you a private message and wanted to become your friend.

46
0:03:33.960 --> 0:03:40.800
And that way it actually told the story back in that Golden Age that was also already like

47
0:03:40.800 --> 0:03:41.800
a social network.

48
0:03:41.800 --> 0:03:51.400
It told the story of history basically through a current situation and it's still used by

49
0:03:51.400 --> 0:03:54.800
children mostly for education.

50
0:03:54.800 --> 0:04:01.560
Other similar kind of project is where in Ghent where we created the augmented reality

51
0:04:01.560 --> 0:04:06.640
installation where there was actually a chat, a little chat going on here and there was

52
0:04:06.640 --> 0:04:14.320
an archaeologist who was chatting to you about the objects that you would scan.

53
0:04:14.320 --> 0:04:18.920
Another project that was really nice during Covid actually was Distance Disco and Duo

54
0:04:18.920 --> 0:04:24.520
Disco which is like an app where you dance silently with your headphones on and you're

55
0:04:24.520 --> 0:04:29.520
matched to somebody else and then you have to basically mimic how you dance and then

56
0:04:29.520 --> 0:04:34.920
based on if you find somebody who dances like you then you're probably dancing to the same

57
0:04:34.920 --> 0:04:39.040
song because everybody listens to another song.

58
0:04:39.040 --> 0:04:42.760
I gave a talk, it's also written, that was written in Erlang actually, the back end for

59
0:04:42.760 --> 0:04:49.200
that, like with processes for everything and matching people together.

60
0:04:49.200 --> 0:04:51.640
That's another talk.

61
0:04:51.640 --> 0:04:55.320
Another talk that I actually did three years ago here was with this printer.

62
0:04:55.320 --> 0:05:00.720
It was also a project for Glazine where she created some kind of interactive cooking installation

63
0:05:00.720 --> 0:05:02.720
from the future.

64
0:05:02.720 --> 0:05:08.200
So you first would have to interact with this Google speaker over here and then the speaker

65
0:05:08.200 --> 0:05:14.000
would ask you a few very personal questions like do you believe in God and do you value

66
0:05:14.000 --> 0:05:18.080
your privacy and what would you do if, I don't know.

67
0:05:18.080 --> 0:05:23.200
And based on those information there would be a little recipe printed out and you would

68
0:05:23.200 --> 0:05:29.400
get instructions on to make something in that installation.

69
0:05:29.400 --> 0:05:36.840
So it was only logical that when Glazine got some new projects that she thought of me and

70
0:05:36.840 --> 0:05:43.520
she thought of hey, I have now this customer which is our customer.

71
0:05:43.520 --> 0:05:48.920
It was some art collective of people who approach Glazine to make some kind of installation

72
0:05:48.920 --> 0:05:49.920
for a conference.

73
0:05:49.920 --> 0:05:54.880
People like conferences like this where there would be somewhere a back channel with information

74
0:05:54.880 --> 0:05:57.520
on how the people in the conference are doing.

75
0:05:57.520 --> 0:06:03.760
So for instance a graph of the mood or tweets or pictures, etc.

76
0:06:03.760 --> 0:06:06.040
And she thought hey, why would we show that on the screen?

77
0:06:06.040 --> 0:06:09.560
Why not show it in a knitting?

78
0:06:09.560 --> 0:06:13.200
Which is logical, right?

79
0:06:13.200 --> 0:06:14.200
And then she thought of me.

80
0:06:14.200 --> 0:06:15.200
This doesn't work, sorry.

81
0:06:15.200 --> 0:06:17.240
I have to do it like this.

82
0:06:17.240 --> 0:06:21.800
Because actually 10 years ago I already hacked a knitting machine once together with two

83
0:06:21.800 --> 0:06:25.040
very talented people who did actually most of the knitting.

84
0:06:25.040 --> 0:06:29.460
I just did most of the software around it.

85
0:06:29.460 --> 0:06:31.360
But this was also a long time ago.

86
0:06:31.360 --> 0:06:35.900
You can I think still loop this project up.

87
0:06:35.900 --> 0:06:43.440
So Glazine thought well, I want to make like a giant knitting for a conference where everything

88
0:06:43.440 --> 0:06:47.560
that is happening in the conference gets knitted out and then we have this big carpet that

89
0:06:47.560 --> 0:06:56.160
you can still look at after, like a big blanket of conference feedback.

90
0:06:56.160 --> 0:06:59.400
So she asked me do you want to do this project?

91
0:06:59.400 --> 0:07:02.000
And I was like yeah, why not?

92
0:07:02.000 --> 0:07:07.680
Because it was for me, it's not like I do this kind of stuff full time.

93
0:07:07.680 --> 0:07:12.520
It's more that I do it because I just like it and whenever Glazine has an idea I just

94
0:07:12.520 --> 0:07:13.520
do it.

95
0:07:13.520 --> 0:07:20.240
So we went on to eBay or Mark Platz actually and we bought this Pass Up electronic knitting

96
0:07:20.240 --> 0:07:25.120
machine, which is a machine from I think 30 or 40 years ago.

97
0:07:25.120 --> 0:07:27.260
Swiss made, so very well made.

98
0:07:27.260 --> 0:07:32.520
Some people describe this machine as the Rolls Royce under the knitting machines.

99
0:07:32.520 --> 0:07:37.520
So I thought hey, this is a nice machine to look at and to see if I can make it knit what

100
0:07:37.520 --> 0:07:39.680
I want.

101
0:07:39.680 --> 0:07:44.080
So I bought it and I put it in my home.

102
0:07:44.080 --> 0:07:49.240
So now I have a room which is basically the knitting room because it's a large machine.

103
0:07:49.240 --> 0:07:52.040
It's like I couldn't bring it unfortunately.

104
0:07:52.040 --> 0:07:53.360
I would have.

105
0:07:53.360 --> 0:07:55.920
And I thought well, it's like a printer, right?

106
0:07:55.920 --> 0:07:57.960
It has pixels.

107
0:07:57.960 --> 0:08:04.920
Every knitting is a printer, is a pixel and I just write a printer driver for it basically.

108
0:08:04.920 --> 0:08:10.160
Well, it's not that easy as it turns out.

109
0:08:10.160 --> 0:08:15.160
Unfortunately and over the last couple of months I've grown a lot of respect for the

110
0:08:15.160 --> 0:08:19.880
whole knitting industry, the robotics things because there's actually a lot more to it

111
0:08:19.880 --> 0:08:25.480
than just now we as a software developer, we're very lucky to be in such a stable environment

112
0:08:25.480 --> 0:08:28.880
where we just write code and it does something or it doesn't something but there's nothing

113
0:08:28.880 --> 0:08:31.600
in between.

114
0:08:31.600 --> 0:08:34.320
It's not hardware.

115
0:08:34.320 --> 0:08:39.280
It is kind of interesting to learn.

116
0:08:39.280 --> 0:08:46.920
And also I found out there's actually YouTube videos of people operating this machine and

117
0:08:46.920 --> 0:08:52.320
those people are usually like 60 year old women.

118
0:08:52.320 --> 0:08:54.040
But they can do it.

119
0:08:54.040 --> 0:08:58.480
So there's like a lot of instructions how to do it.

120
0:08:58.480 --> 0:09:01.840
There's a lot of parameters to tweak.

121
0:09:01.840 --> 0:09:04.880
A lot of weird tools that you have to use to get it right.

122
0:09:04.880 --> 0:09:10.920
But eventually I got it somehow working.

123
0:09:10.920 --> 0:09:15.600
It's basically the parameter space of like you have to have a certain knit, a certain

124
0:09:15.600 --> 0:09:19.520
thickness of the yarn and you have to like the proper tension of the yarn because otherwise

125
0:09:19.520 --> 0:09:20.840
you get loops.

126
0:09:20.840 --> 0:09:25.560
It is unbelievable how much it's like it's basically like trying to learn to play the

127
0:09:25.560 --> 0:09:30.400
violin or trying to yeah something like that and like playing trying to play the violin

128
0:09:30.400 --> 0:09:35.280
without a proper instructor present or the instructor has died already because it's such

129
0:09:35.280 --> 0:09:38.240
an old violin.

130
0:09:38.240 --> 0:09:44.480
So I have a very small clip of me knitting if it's here.

131
0:09:44.480 --> 0:09:45.480
Hello.

132
0:09:45.480 --> 0:09:47.840
Oh, there we go.

133
0:09:47.840 --> 0:09:51.360
It takes a while.

134
0:09:51.360 --> 0:09:53.880
And there's no release, no sound.

135
0:09:53.880 --> 0:09:56.160
Oh, it's very short.

136
0:09:56.160 --> 0:09:57.560
But this is basically how it goes.

137
0:09:57.560 --> 0:10:03.200
So the machine is there, there's yarn coming in from the top and the machine goes over

138
0:10:03.200 --> 0:10:04.200
the needles.

139
0:10:04.200 --> 0:10:10.680
There's a lot of needles here and then once this carriage goes over, it basically the

140
0:10:10.680 --> 0:10:14.720
needles hook into it and make it like a yarn or the knitting and the knitting comes out

141
0:10:14.720 --> 0:10:19.260
from the needle.

142
0:10:19.260 --> 0:10:21.280
And how did I want to automate this?

143
0:10:21.280 --> 0:10:25.720
I have to watch my time a bit.

144
0:10:25.720 --> 0:10:34.600
I actually found online some Germans who actually used this machine before to hack it because

145
0:10:34.600 --> 0:10:39.160
there's actually, ah, damn it, this doesn't work.

146
0:10:39.160 --> 0:10:44.960
So what I wanted to replace was this, how you used to program it was you basically,

147
0:10:44.960 --> 0:10:49.320
there was this big flow chart in this manual where you would need to press the buttons

148
0:10:49.320 --> 0:10:53.920
in a certain combination and then set the dials, everything, and then upload the pattern.

149
0:10:53.920 --> 0:11:00.120
And the way you upload the pattern is you basically take a piece of matrix paper like

150
0:11:00.120 --> 0:11:07.680
with a grid and you make some of the cells you make black and that's basically your pattern.

151
0:11:07.680 --> 0:11:13.960
So you draw pixel art on a paper and you feed the paper into the scanner because this is

152
0:11:13.960 --> 0:11:16.000
a kind of a scanner.

153
0:11:16.000 --> 0:11:21.580
And then this thing somehow says, okay, well, I've now remembered that pattern.

154
0:11:21.580 --> 0:11:26.560
And then this machine communicates with the thing that goes, the carriage that goes back

155
0:11:26.560 --> 0:11:31.600
and forth and that actually then knits that pattern.

156
0:11:31.600 --> 0:11:37.200
I did not try to do that because it sounded very hard.

157
0:11:37.200 --> 0:11:45.040
So instead I found this space from the Ekerspace Bemberg in which they used an Arduino because

158
0:11:45.040 --> 0:11:48.280
this is the connector that you need to plug into the console.

159
0:11:48.280 --> 0:11:50.980
So I basically replaced the whole console with an Arduino.

160
0:11:50.980 --> 0:11:56.500
So on one side there's the Arduino communicating with the carriage and then out comes digital

161
0:11:56.500 --> 0:12:01.520
signals, just a serial protocol that goes back into the computer and then the computer

162
0:12:01.520 --> 0:12:07.080
can tell, knit this pattern, knit that pattern, etc.

163
0:12:07.080 --> 0:12:11.480
If you have more questions about this, I can answer a lot.

164
0:12:11.480 --> 0:12:14.040
I'm not going to do it right now.

165
0:12:14.040 --> 0:12:19.220
Basically the new user interface that I'm working right now looks a bit like this.

166
0:12:19.220 --> 0:12:23.820
So it's just basically a browser.

167
0:12:23.820 --> 0:12:26.660
And also because I wanted to use LiveView for something.

168
0:12:26.660 --> 0:12:29.080
So we're finally getting to that subject.

169
0:12:29.080 --> 0:12:30.080
Yes.

170
0:12:30.080 --> 0:12:38.500
So this knitting interface shows a bit, it shows, well, basically where the machine is

171
0:12:38.500 --> 0:12:41.600
at in the knit process.

172
0:12:41.600 --> 0:12:46.200
And it shows the current color that it is knitting.

173
0:12:46.200 --> 0:12:51.080
And it shows whether you have to move it left or right because there is a motor, you can

174
0:12:51.080 --> 0:12:53.320
enable the motor so that it knits automatically.

175
0:12:53.320 --> 0:12:57.120
But you can also do it manually.

176
0:12:57.120 --> 0:13:01.800
So it has a little counter, it has a start-stop button and it has several configuration things

177
0:13:01.800 --> 0:13:04.720
like because it's a very big knitting machine.

178
0:13:04.720 --> 0:13:08.400
So you have to specify, I have to knit it here, I can knit it there.

179
0:13:08.400 --> 0:13:09.840
It's so wide.

180
0:13:09.840 --> 0:13:11.160
And then you can upload a pattern.

181
0:13:11.160 --> 0:13:14.480
So you can type in 1 to 0 here.

182
0:13:14.480 --> 0:13:20.840
Literally you can type in 1 and 1 to 0 and it will then create a pattern and then there's

183
0:13:20.840 --> 0:13:27.520
a state machine that will loop through that pattern to send the proper instructions to

184
0:13:27.520 --> 0:13:30.000
the Arduino.

185
0:13:30.000 --> 0:13:35.960
So I'm going to demo that a bit later because first I want to go a bit into the detail of

186
0:13:35.960 --> 0:13:37.840
this live view.

187
0:13:37.840 --> 0:13:39.680
It's not only live view.

188
0:13:39.680 --> 0:13:43.840
It's basically just a Phoenix or just an Elixir project.

189
0:13:43.840 --> 0:13:45.680
And it has several parts.

190
0:13:45.680 --> 0:13:49.720
One of it, of course, is the user interface which is all the way over there.

191
0:13:49.720 --> 0:13:52.880
And the other part is the actual knitting machine that's over here.

192
0:13:52.880 --> 0:13:55.640
So it's connected with an Arduino like I showed.

193
0:13:55.640 --> 0:13:59.240
And the Arduino is connected to the Elixir.

194
0:13:59.240 --> 0:14:05.480
So this middle part is the interesting software part that I've built.

195
0:14:05.480 --> 0:14:09.960
So there's a few components here and I've created some kind of color coding for that

196
0:14:09.960 --> 0:14:10.960
in front of myself.

197
0:14:10.960 --> 0:14:16.120
So basically green is an Erlang process or Elixir process.

198
0:14:16.120 --> 0:14:19.240
And orange is like state.

199
0:14:19.240 --> 0:14:21.080
It's just data.

200
0:14:21.080 --> 0:14:28.560
And without color is something that is not very interesting.

201
0:14:28.560 --> 0:14:36.720
So basically whenever I used a NURV3 library, I think it was already mentioned that NURV3

202
0:14:36.720 --> 0:14:40.640
is really nice for doing IoT kind of things with Elixir.

203
0:14:40.640 --> 0:14:42.320
So UART is the protocol.

204
0:14:42.320 --> 0:14:43.600
It's basically a serial port.

205
0:14:43.600 --> 0:14:48.920
So whenever you program an Arduino, you can tell it to send and receive serial commands.

206
0:14:48.920 --> 0:14:54.040
And you can very easily listen to them with Elixir.

207
0:14:54.040 --> 0:14:59.480
There's a monitor that basically looks for the serial port.

208
0:14:59.480 --> 0:15:05.600
So I can hotplug basically the knitting machine into my computer and pull it out.

209
0:15:05.600 --> 0:15:13.960
And then basically whenever it receives some serial packet, just a line, basically just

210
0:15:13.960 --> 0:15:19.920
a text line, it sends this over, Phoenix pops up to the rest of the system.

211
0:15:19.920 --> 0:15:23.800
And then there are several other components that listen to those serial commands.

212
0:15:23.800 --> 0:15:30.920
One of them is the control, which is a gen server that basically has all this state.

213
0:15:30.920 --> 0:15:39.080
Basically it has all this state, like where am I in the knitting, et cetera.

214
0:15:39.080 --> 0:15:43.720
So that gen server holds the state of the knitting machine itself.

215
0:15:43.720 --> 0:15:48.440
So that basically has the task of transforming this pattern plus the settings into a sequence

216
0:15:48.440 --> 0:15:53.960
of commands that needs to be sent out to the knitting machine.

217
0:15:53.960 --> 0:16:00.120
And also the state is also updated whenever new serial commands come in.

218
0:16:00.120 --> 0:16:07.360
And then the control is also connected to the live view, which actually shows everything

219
0:16:07.360 --> 0:16:15.680
that is being done.

220
0:16:15.680 --> 0:16:21.640
So what I'm going to talk the rest of is mostly this part, because that's the title of the

221
0:16:21.640 --> 0:16:22.640
talk.

222
0:16:22.640 --> 0:16:35.920
It's about live view and how that works and what it is actually, how it works in my case.

223
0:16:35.920 --> 0:16:36.920
Are there any questions?

224
0:16:36.920 --> 0:16:38.400
Oh, I have 10 minutes left.

225
0:16:38.400 --> 0:16:39.400
Really?

226
0:16:39.400 --> 0:16:40.400
Okay.

227
0:16:40.400 --> 0:16:41.400
I have 10 minutes left.

228
0:16:41.400 --> 0:16:45.880
So let's go for a bit quicker now.

229
0:16:45.880 --> 0:16:46.880
What is live view?

230
0:16:46.880 --> 0:16:52.360
Well, from the docs it says, live view provides rich real-time experiences with user rendered

231
0:16:52.360 --> 0:16:56.880
HTML and to understand or with server rendered HTML.

232
0:16:56.880 --> 0:17:03.440
And to understand what that actually means, let's dive into a little bit of the web history.

233
0:17:03.440 --> 0:17:07.400
When this whole Internet thing started, the first thing there was was just a browser with

234
0:17:07.400 --> 0:17:08.400
HTML, right?

235
0:17:08.400 --> 0:17:13.280
So you had a web server, you uploaded the HTML file to and you just view it.

236
0:17:13.280 --> 0:17:14.280
That's basically it.

237
0:17:14.280 --> 0:17:20.360
And when you want to go to another page, you just click a link and you view the other page.

238
0:17:20.360 --> 0:17:24.040
That's basically what we now call a static website.

239
0:17:24.040 --> 0:17:26.360
Very static.

240
0:17:26.360 --> 0:17:28.620
So that worked pretty well for a while.

241
0:17:28.620 --> 0:17:34.200
And then when at some point people thought, well, we can also not make the static, but

242
0:17:34.200 --> 0:17:37.400
we can send something different back every time.

243
0:17:37.400 --> 0:17:45.320
So that's when it became the HTML, dynamic HTML, PHP was born, other programming, I'm

244
0:17:45.320 --> 0:17:48.120
getting feedback from the mic now.

245
0:17:48.120 --> 0:17:50.640
It's a bit irritating.

246
0:17:50.640 --> 0:17:52.600
Whatever.

247
0:17:52.600 --> 0:17:55.400
So basically, the HTML became dynamic.

248
0:17:55.400 --> 0:17:58.080
So there was a lot of logic on the server.

249
0:17:58.080 --> 0:18:00.840
You would make a PHP file that rendered out HTML.

250
0:18:00.840 --> 0:18:04.360
The HTML was different for each user even because there were sessions.

251
0:18:04.360 --> 0:18:07.200
You have cookies where you store basically the state.

252
0:18:07.200 --> 0:18:08.280
Like this user is logged in.

253
0:18:08.280 --> 0:18:10.880
This user has this stuff in his cart.

254
0:18:10.880 --> 0:18:11.880
Whatever.

255
0:18:11.880 --> 0:18:16.320
So there's a lot of logic on the server that renders into HTML and then the HTML is just

256
0:18:16.320 --> 0:18:20.040
sent over the wire and the browser displays it when done.

257
0:18:20.040 --> 0:18:21.840
So that worked pretty okay.

258
0:18:21.840 --> 0:18:25.680
But it was not really interactive because every time you had to do something in the

259
0:18:25.680 --> 0:18:27.760
site, it would reload the page.

260
0:18:27.760 --> 0:18:30.960
So then at some point people thought, hey, I can make little effects.

261
0:18:30.960 --> 0:18:34.240
I can do hovers and animations.

262
0:18:34.240 --> 0:18:42.720
So we make a JavaScript that was born basically, I think with IE version something free started

263
0:18:42.720 --> 0:18:44.480
to become popular.

264
0:18:44.480 --> 0:18:49.120
So there was a bit of JavaScript written to make things a bit more lively and a bit more

265
0:18:49.120 --> 0:18:52.360
dynamic without having to reload the page every time.

266
0:18:52.360 --> 0:18:55.080
Well, of course, you know what happened next.

267
0:18:55.080 --> 0:18:58.840
So JavaScript became very big.

268
0:18:58.840 --> 0:19:02.540
So a lot of the logic was actually moved to the client.

269
0:19:02.540 --> 0:19:06.200
So the pages did not reload every time.

270
0:19:06.200 --> 0:19:11.520
Basically just loaded the page one time and then JavaScript basically takes care of the

271
0:19:11.520 --> 0:19:12.520
rest.

272
0:19:12.520 --> 0:19:16.800
It was just parts of the HTML with other parts.

273
0:19:16.800 --> 0:19:23.520
It even sends you to another URL without actually re-loading the page with push date kind of

274
0:19:23.520 --> 0:19:24.720
things.

275
0:19:24.720 --> 0:19:29.920
So there was a lot of logic on the client suddenly.

276
0:19:29.920 --> 0:19:37.040
And it would fetch underwater, not over HTML, but it would just use what's called Ajax.

277
0:19:37.040 --> 0:19:42.360
But currently we have REST and GraphQL, all kinds of protocols to get data into the client

278
0:19:42.360 --> 0:19:45.720
and then do stuff with the data.

279
0:19:45.720 --> 0:19:50.920
So there was a lot of logic suddenly on the client.

280
0:19:50.920 --> 0:19:51.920
And this is still the case.

281
0:19:51.920 --> 0:19:58.600
I think when you write JavaScript, there's a like, or when you, any web project is quite

282
0:19:58.600 --> 0:20:03.600
heavy on the server side or on the client side.

283
0:20:03.600 --> 0:20:09.900
Now with LiveView, the pendulum has swung in the other way a bit again.

284
0:20:09.900 --> 0:20:15.000
Because the actually very interesting thing about LiveView is that we can do very interactive

285
0:20:15.000 --> 0:20:16.000
things.

286
0:20:16.000 --> 0:20:18.800
We don't have to reload the page every time to do something interactive.

287
0:20:18.800 --> 0:20:24.560
We can stay on the same page, but we can still dynamically change parts of the page without

288
0:20:24.560 --> 0:20:32.640
having to do very heavy, create all kinds of APIs and do complicated things.

289
0:20:32.640 --> 0:20:44.320
So suddenly with LiveView, the logic is again mostly for 99%, I would say, back on the server.

290
0:20:44.320 --> 0:20:48.480
So it's actually, it's like a bit again from back in the old days.

291
0:20:48.480 --> 0:20:52.640
You just render something, you just put it to the browser and then the browser displays

292
0:20:52.640 --> 0:20:53.640
it.

293
0:20:53.640 --> 0:20:54.640
It's as simple as that.

294
0:20:54.640 --> 0:20:58.640
You don't need to write a lot of JavaScript unless you really want to.

295
0:20:58.640 --> 0:21:04.840
And that's actually one of the promises of LiveView, that you can make UIs very quickly

296
0:21:04.840 --> 0:21:10.640
just staying in Elixir and just templating from Elixir.

297
0:21:10.640 --> 0:21:14.760
So how does that actually work?

298
0:21:14.760 --> 0:21:18.320
Is there a diagram on the next slide?

299
0:21:18.320 --> 0:21:19.320
Yes.

300
0:21:19.320 --> 0:21:28.600
So basically what happens is, I can show this one first.

301
0:21:28.600 --> 0:21:30.720
So there's one LiveView process.

302
0:21:30.720 --> 0:21:35.160
So basically in Erlang, processes are very lightweight.

303
0:21:35.160 --> 0:21:38.800
Five minutes left, oh no.

304
0:21:38.800 --> 0:21:43.960
Templates are rendered on the server and they are rendered every time you update the state.

305
0:21:43.960 --> 0:21:50.240
But it does not send the whole template over to the client, it just sends the things that

306
0:21:50.240 --> 0:21:52.920
are changed.

307
0:21:52.920 --> 0:21:55.080
So basically it works a bit like this.

308
0:21:55.080 --> 0:22:00.440
So the first time it renders, we get some HTML and then it actually connects over a

309
0:22:00.440 --> 0:22:04.800
WebSocket and then it says, hey, I'm a LiveView process and I can now interact with you.

310
0:22:04.800 --> 0:22:10.680
And then whenever some state changes, the browser is now connected to the corresponding

311
0:22:10.680 --> 0:22:12.360
process in the server.

312
0:22:12.360 --> 0:22:18.800
So when the state changes, it actually re-renders something and it actually just sends the things

313
0:22:18.800 --> 0:22:20.640
that have changed, sends it to the browser.

314
0:22:20.640 --> 0:22:25.720
And then the browser is intelligent enough that it can just patch small parts of the

315
0:22:25.720 --> 0:22:31.040
DOM tree to just change that part and not change everything.

316
0:22:31.040 --> 0:22:36.160
So that makes it very lightweight and very flexible.

317
0:22:36.160 --> 0:22:42.000
And this is a bit, well, when you start with this, it is now integrated into Phoenix, the

318
0:22:42.000 --> 0:22:44.200
Elixir Web Framework.

319
0:22:44.200 --> 0:22:47.760
And I will give a little demo now, I think.

320
0:22:47.760 --> 0:22:50.340
Yeah, so let's make the knitting live.

321
0:22:50.340 --> 0:22:57.920
So it would look a bit like, when you write in the Elixir module, it looks a bit like this.

322
0:22:57.920 --> 0:23:00.640
There's always something you have to write, it's mount.

323
0:23:00.640 --> 0:23:05.840
When you mount something, you just return, okay, I'm mounted and I have some assigns

324
0:23:05.840 --> 0:23:06.840
in my socket.

325
0:23:06.840 --> 0:23:10.440
It's a bit like normal Phoenix templating.

326
0:23:10.440 --> 0:23:15.520
You assign things to something and then you can render, use those assigns to render something.

327
0:23:15.520 --> 0:23:22.320
So back below here, there's actually the render function and in this case, it just renders

328
0:23:22.320 --> 0:23:25.400
an image tag, image class movie.

329
0:23:25.400 --> 0:23:26.560
Wonder what that is.

330
0:23:26.560 --> 0:23:33.400
And the source is some kind of, is an image URL with a variable in it, a frame, and the

331
0:23:33.400 --> 0:23:37.280
frame is assigned here.

332
0:23:37.280 --> 0:23:41.160
So it renders a single image.

333
0:23:41.160 --> 0:23:47.800
And whenever a serial command comes in from a serial port, basically, I calculate a new

334
0:23:47.800 --> 0:23:51.080
frame and then assign it to the socket again.

335
0:23:51.080 --> 0:23:55.600
So this triggers another render here and it will probably change the frame number, so

336
0:23:55.600 --> 0:23:57.780
it will change the image.

337
0:23:57.780 --> 0:24:02.360
So this basically connects the serial port to a live view.

338
0:24:02.360 --> 0:24:06.600
I think that's better.

339
0:24:06.600 --> 0:24:10.000
So I actually have a demo of that because I actually, well, I did not bring my knitting

340
0:24:10.000 --> 0:24:15.800
machine, I actually brought my knitting machine emulator, which is an Arduino with a potentiometer

341
0:24:15.800 --> 0:24:17.920
attached.

342
0:24:17.920 --> 0:24:32.240
And I can probably now, this will fill, but who cares, plug it in and then we go to this.

343
0:24:32.240 --> 0:24:38.240
So if you look in the source, we see somewhere that here, this is the one, we see the movie.

344
0:24:38.240 --> 0:24:41.000
It's now at frame number 15.

345
0:24:41.000 --> 0:24:47.440
And then if we, is it running?

346
0:24:47.440 --> 0:24:51.440
Should be running.

347
0:24:51.440 --> 0:24:53.680
If we now turn the knob.

348
0:24:53.680 --> 0:24:54.680
Yes.

349
0:24:54.680 --> 0:24:55.680
Okay.

350
0:24:55.680 --> 0:24:56.680
So now I can knit.

351
0:24:56.680 --> 0:25:07.320
You see, I am knitting.

352
0:25:07.320 --> 0:25:11.240
So I did not bring my whole machine, but I brought a virtual version of myself that is

353
0:25:11.240 --> 0:25:19.600
now at home and I can control it through this little Arduino over here.

354
0:25:19.600 --> 0:25:21.520
I thought of this last night to demo it like this.

355
0:25:21.520 --> 0:25:27.120
It was not really prepared.

356
0:25:27.120 --> 0:25:31.840
So I hope that gets you a bit of the idea how live view updates its state.

357
0:25:31.840 --> 0:25:36.080
And in this case, it is very simple, but an actual live view, of course, is much more,

358
0:25:36.080 --> 0:25:39.600
much bigger.

359
0:25:39.600 --> 0:25:48.000
And actually that is the rest of my talk that I'm still need to do.

360
0:25:48.000 --> 0:25:49.000
Let's continue very quickly.

361
0:25:49.000 --> 0:25:50.000
How much?

362
0:25:50.000 --> 0:25:51.000
Oh, time's up.

363
0:25:51.000 --> 0:25:52.000
Okay.

364
0:25:52.000 --> 0:25:53.000
Is it really up?

365
0:25:53.000 --> 0:25:56.760
I think that you can take like one or two minutes.

366
0:25:56.760 --> 0:25:57.760
Okay.

367
0:25:57.760 --> 0:25:58.760
Okay.

368
0:25:58.760 --> 0:26:01.880
I will quickly skip through the next slides then.

369
0:26:01.880 --> 0:26:07.360
So you can imagine that writing a single Elixir module with every logic in it, you get one

370
0:26:07.360 --> 0:26:08.880
big assign with everything.

371
0:26:08.880 --> 0:26:09.980
It's not really scalable.

372
0:26:09.980 --> 0:26:12.420
So there are actually two things to make that scalable.

373
0:26:12.420 --> 0:26:13.760
You make components.

374
0:26:13.760 --> 0:26:17.760
So one of the components is function components, which are basically just rendering templates

375
0:26:17.760 --> 0:26:19.320
inside functions.

376
0:26:19.320 --> 0:26:21.740
And then the other ones are Phoenix live components.

377
0:26:21.740 --> 0:26:26.480
And those are basically like sub live views in your live view that have their own state

378
0:26:26.480 --> 0:26:30.900
and their own render function and their own mount function.

379
0:26:30.900 --> 0:26:36.280
So in this case, in my UI, these are, I just created a few components, one component is

380
0:26:36.280 --> 0:26:38.600
settings components, which contains a form.

381
0:26:38.600 --> 0:26:43.360
Another component is a row component that just renders a single row.

382
0:26:43.360 --> 0:26:46.520
So the row components are very simple.

383
0:26:46.520 --> 0:26:53.120
It just renders basically a set of diffs.

384
0:26:53.120 --> 0:26:54.520
And then you can call it like this.

385
0:26:54.520 --> 0:26:59.160
So it's basically in the template syntax using function components, basically the same as

386
0:26:59.160 --> 0:27:04.160
a normal tag, but you prepend it with a dot, which is because it's basically a function

387
0:27:04.160 --> 0:27:07.400
call.

388
0:27:07.400 --> 0:27:10.880
And the live components are stateful.

389
0:27:10.880 --> 0:27:14.600
So live components have their own state, so they have a mount.

390
0:27:14.600 --> 0:27:15.840
You can assign things to there.

391
0:27:15.840 --> 0:27:18.400
It's basically what I already said.

392
0:27:18.400 --> 0:27:22.160
It's a live view inside a live view.

393
0:27:22.160 --> 0:27:28.240
So these signals directly communicate with the live components in this case.

394
0:27:28.240 --> 0:27:33.880
Then there's some more things like slots you can create like different parts of your component

395
0:27:33.880 --> 0:27:40.800
and make them into like separate things where you can put part of your DOM tree as well.

396
0:27:40.800 --> 0:27:45.120
And I just wanted to say there's a lot out there, like there's a big community, and I

397
0:27:45.120 --> 0:27:47.740
think live view is really getting a lot of traction.

398
0:27:47.740 --> 0:27:48.740
And it's actually a shame.

399
0:27:48.740 --> 0:27:52.320
I have not done anything really with live view in production actually.

400
0:27:52.320 --> 0:27:54.580
I wanted to make a disclaimer there.

401
0:27:54.580 --> 0:28:01.520
But I really like where it's going, and there's a lot of projects popping up with component

402
0:28:01.520 --> 0:28:05.120
libraries and people making stuff on top of it.

403
0:28:05.120 --> 0:28:10.680
There's the storybook project, which is also very nice, which allows you to make a library

404
0:28:10.680 --> 0:28:15.720
of components and then have a live environment somewhere where you can document these components

405
0:28:15.720 --> 0:28:20.400
and try them out and copy paste the code for you to use inside your live view.

406
0:28:20.400 --> 0:28:25.660
So there's a lot of things, like JavaScript integration, which I'm not going to show.

407
0:28:25.660 --> 0:28:27.160
There's live view native coming up.

408
0:28:27.160 --> 0:28:31.080
It's also very nice technology where you don't render things to the browser, but you render

409
0:28:31.080 --> 0:28:35.680
things into a native app so that it actually builds a native act.

410
0:28:35.680 --> 0:28:40.600
What React Native is to React is, well, you get the drift.

411
0:28:40.600 --> 0:28:45.640
So thank you for listening.

412
0:28:45.640 --> 0:28:51.360
Thank you, Aryan.


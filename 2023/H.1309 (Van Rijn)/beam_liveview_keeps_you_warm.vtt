WEBVTT

00:00.000 --> 00:10.920
And now we have Arjun Srepenice, and he is going to talk about how live-view will be

00:10.920 --> 00:12.680
used to keep you warm.

00:12.680 --> 00:14.880
So give it up!

00:14.880 --> 00:20.060
Alright, thank you everybody.

00:20.060 --> 00:22.860
Nice to see such a big turn up.

00:22.860 --> 00:28.840
When he last organized this dev room, I think three years ago, it was a much smaller room.

00:28.840 --> 00:33.960
It was really packed, now it's not packed but it's obvious because it's a bigger room.

00:33.960 --> 00:39.400
But I'm very glad that everybody is here.

00:39.400 --> 00:46.320
So my name is Arjan Skrepenis and I'm going to talk a bit about knitting today with you

00:46.320 --> 00:48.120
and also a bit about LiveView.

00:48.120 --> 00:54.320
So I'm going to give a little bit of background about my project, about what I'm doing, then

00:54.320 --> 01:01.080
I'm going to talk about LiveView and how I use it and then I'm going to wrap up.

01:01.080 --> 01:05.320
So let's start with some background.

01:05.320 --> 01:08.960
I've been programming since I was a little kid.

01:08.960 --> 01:17.600
Yesterday when we had a beer together I talked about what is your first OTP release that

01:17.600 --> 01:18.600
you used.

01:18.600 --> 01:24.760
I was actually R13 so that's a bit and you can guess my age a bit.

01:24.760 --> 01:29.560
It's from 2009 so I've been using Erlang since 2009.

01:29.560 --> 01:35.960
Before that I used PHP a lot but then I got introduced by somebody to Erlang and that

01:35.960 --> 01:42.520
actually Mark Worell had a bit the same story as Jose Falimat when he created Elixir.

01:42.520 --> 01:45.160
Mark wanted to create also Web Framework for Erlang.

01:45.160 --> 01:51.080
Elixir was not yet born and so he created Zotonic, Web Framework and I'm still a contributor

01:51.080 --> 01:56.400
to that and it's still alive although it's not as popular as Elixir or Phoenix for that

01:56.400 --> 01:58.640
matter.

01:58.640 --> 02:03.840
But then later I got used to programming in Elixir and I've been doing that since for

02:03.840 --> 02:04.840
quite a bit.

02:04.840 --> 02:06.920
So my background is I studied AI.

02:06.920 --> 02:11.080
I have a Masters in that back when AI was not hot at all.

02:11.080 --> 02:13.320
It was the middle of the winter of AI.

02:13.320 --> 02:17.440
Nobody wanted to do anything with it but I thought hey why not.

02:17.440 --> 02:22.760
But then it turned out I did not really do anything with AI for a long time so I just

02:22.760 --> 02:28.160
became a regular web developer doing first PHP like I said and then Elixir.

02:28.160 --> 02:33.920
But I'm still interested in AI in hardware and software and also in art actually because

02:33.920 --> 02:39.760
after when I stopped or graduated from AI school I went to the art academy, the Rietveld

02:39.760 --> 02:48.360
Academy in Amsterdam and I decided to proceed the career in art or at least try to do something

02:48.360 --> 02:53.840
more creative outside of pure computer science.

02:53.840 --> 02:59.720
So one of the, let's talk about that a bit because it gets me slowly to the knitting

02:59.720 --> 03:00.720
stuff.

03:00.720 --> 03:08.240
So I worked with Glazine van der Zonschl, she's a friend of mine and an artist slash

03:08.240 --> 03:13.280
interaction designer and together we did quite a lot of projects that were related to this

03:13.280 --> 03:14.280
kind of stuff.

03:14.280 --> 03:21.040
So for instance we built an app where you could interact with a fake social network

03:21.040 --> 03:23.400
from the Dutch Golden Age.

03:23.400 --> 03:27.400
So you would walk around in a museum and then you would walk next to a Rembrandt painting

03:27.400 --> 03:33.960
and then Rembrandt would send you a private message and wanted to become your friend.

03:33.960 --> 03:40.800
And that way it actually told the story back in that Golden Age that was also already like

03:40.800 --> 03:41.800
a social network.

03:41.800 --> 03:51.400
It told the story of history basically through a current situation and it's still used by

03:51.400 --> 03:54.800
children mostly for education.

03:54.800 --> 04:01.560
Other similar kind of project is where in Ghent where we created the augmented reality

04:01.560 --> 04:06.640
installation where there was actually a chat, a little chat going on here and there was

04:06.640 --> 04:14.320
an archaeologist who was chatting to you about the objects that you would scan.

04:14.320 --> 04:18.920
Another project that was really nice during Covid actually was Distance Disco and Duo

04:18.920 --> 04:24.520
Disco which is like an app where you dance silently with your headphones on and you're

04:24.520 --> 04:29.520
matched to somebody else and then you have to basically mimic how you dance and then

04:29.520 --> 04:34.920
based on if you find somebody who dances like you then you're probably dancing to the same

04:34.920 --> 04:39.040
song because everybody listens to another song.

04:39.040 --> 04:42.760
I gave a talk, it's also written, that was written in Erlang actually, the back end for

04:42.760 --> 04:49.200
that, like with processes for everything and matching people together.

04:49.200 --> 04:51.640
That's another talk.

04:51.640 --> 04:55.320
Another talk that I actually did three years ago here was with this printer.

04:55.320 --> 05:00.720
It was also a project for Glazine where she created some kind of interactive cooking installation

05:00.720 --> 05:02.720
from the future.

05:02.720 --> 05:08.200
So you first would have to interact with this Google speaker over here and then the speaker

05:08.200 --> 05:14.000
would ask you a few very personal questions like do you believe in God and do you value

05:14.000 --> 05:18.080
your privacy and what would you do if, I don't know.

05:18.080 --> 05:23.200
And based on those information there would be a little recipe printed out and you would

05:23.200 --> 05:29.400
get instructions on to make something in that installation.

05:29.400 --> 05:36.840
So it was only logical that when Glazine got some new projects that she thought of me and

05:36.840 --> 05:43.520
she thought of hey, I have now this customer which is our customer.

05:43.520 --> 05:48.920
It was some art collective of people who approach Glazine to make some kind of installation

05:48.920 --> 05:49.920
for a conference.

05:49.920 --> 05:54.880
People like conferences like this where there would be somewhere a back channel with information

05:54.880 --> 05:57.520
on how the people in the conference are doing.

05:57.520 --> 06:03.760
So for instance a graph of the mood or tweets or pictures, etc.

06:03.760 --> 06:06.040
And she thought hey, why would we show that on the screen?

06:06.040 --> 06:09.560
Why not show it in a knitting?

06:09.560 --> 06:13.200
Which is logical, right?

06:13.200 --> 06:14.200
And then she thought of me.

06:14.200 --> 06:15.200
This doesn't work, sorry.

06:15.200 --> 06:17.240
I have to do it like this.

06:17.240 --> 06:21.800
Because actually 10 years ago I already hacked a knitting machine once together with two

06:21.800 --> 06:25.040
very talented people who did actually most of the knitting.

06:25.040 --> 06:29.460
I just did most of the software around it.

06:29.460 --> 06:31.360
But this was also a long time ago.

06:31.360 --> 06:35.900
You can I think still loop this project up.

06:35.900 --> 06:43.440
So Glazine thought well, I want to make like a giant knitting for a conference where everything

06:43.440 --> 06:47.560
that is happening in the conference gets knitted out and then we have this big carpet that

06:47.560 --> 06:56.160
you can still look at after, like a big blanket of conference feedback.

06:56.160 --> 06:59.400
So she asked me do you want to do this project?

06:59.400 --> 07:02.000
And I was like yeah, why not?

07:02.000 --> 07:07.680
Because it was for me, it's not like I do this kind of stuff full time.

07:07.680 --> 07:12.520
It's more that I do it because I just like it and whenever Glazine has an idea I just

07:12.520 --> 07:13.520
do it.

07:13.520 --> 07:20.240
So we went on to eBay or Mark Platz actually and we bought this Pass Up electronic knitting

07:20.240 --> 07:25.120
machine, which is a machine from I think 30 or 40 years ago.

07:25.120 --> 07:27.260
Swiss made, so very well made.

07:27.260 --> 07:32.520
Some people describe this machine as the Rolls Royce under the knitting machines.

07:32.520 --> 07:37.520
So I thought hey, this is a nice machine to look at and to see if I can make it knit what

07:37.520 --> 07:39.680
I want.

07:39.680 --> 07:44.080
So I bought it and I put it in my home.

07:44.080 --> 07:49.240
So now I have a room which is basically the knitting room because it's a large machine.

07:49.240 --> 07:52.040
It's like I couldn't bring it unfortunately.

07:52.040 --> 07:53.360
I would have.

07:53.360 --> 07:55.920
And I thought well, it's like a printer, right?

07:55.920 --> 07:57.960
It has pixels.

07:57.960 --> 08:04.920
Every knitting is a printer, is a pixel and I just write a printer driver for it basically.

08:04.920 --> 08:10.160
Well, it's not that easy as it turns out.

08:10.160 --> 08:15.160
Unfortunately and over the last couple of months I've grown a lot of respect for the

08:15.160 --> 08:19.880
whole knitting industry, the robotics things because there's actually a lot more to it

08:19.880 --> 08:25.480
than just now we as a software developer, we're very lucky to be in such a stable environment

08:25.480 --> 08:28.880
where we just write code and it does something or it doesn't something but there's nothing

08:28.880 --> 08:31.600
in between.

08:31.600 --> 08:34.320
It's not hardware.

08:34.320 --> 08:39.280
It is kind of interesting to learn.

08:39.280 --> 08:46.920
And also I found out there's actually YouTube videos of people operating this machine and

08:46.920 --> 08:52.320
those people are usually like 60 year old women.

08:52.320 --> 08:54.040
But they can do it.

08:54.040 --> 08:58.480
So there's like a lot of instructions how to do it.

08:58.480 --> 09:01.840
There's a lot of parameters to tweak.

09:01.840 --> 09:04.880
A lot of weird tools that you have to use to get it right.

09:04.880 --> 09:10.920
But eventually I got it somehow working.

09:10.920 --> 09:15.600
It's basically the parameter space of like you have to have a certain knit, a certain

09:15.600 --> 09:19.520
thickness of the yarn and you have to like the proper tension of the yarn because otherwise

09:19.520 --> 09:20.840
you get loops.

09:20.840 --> 09:25.560
It is unbelievable how much it's like it's basically like trying to learn to play the

09:25.560 --> 09:30.400
violin or trying to yeah something like that and like playing trying to play the violin

09:30.400 --> 09:35.280
without a proper instructor present or the instructor has died already because it's such

09:35.280 --> 09:38.240
an old violin.

09:38.240 --> 09:44.480
So I have a very small clip of me knitting if it's here.

09:44.480 --> 09:45.480
Hello.

09:45.480 --> 09:47.840
Oh, there we go.

09:47.840 --> 09:51.360
It takes a while.

09:51.360 --> 09:53.880
And there's no release, no sound.

09:53.880 --> 09:56.160
Oh, it's very short.

09:56.160 --> 09:57.560
But this is basically how it goes.

09:57.560 --> 10:03.200
So the machine is there, there's yarn coming in from the top and the machine goes over

10:03.200 --> 10:04.200
the needles.

10:04.200 --> 10:10.680
There's a lot of needles here and then once this carriage goes over, it basically the

10:10.680 --> 10:14.720
needles hook into it and make it like a yarn or the knitting and the knitting comes out

10:14.720 --> 10:19.260
from the needle.

10:19.260 --> 10:21.280
And how did I want to automate this?

10:21.280 --> 10:25.720
I have to watch my time a bit.

10:25.720 --> 10:34.600
I actually found online some Germans who actually used this machine before to hack it because

10:34.600 --> 10:39.160
there's actually, ah, damn it, this doesn't work.

10:39.160 --> 10:44.960
So what I wanted to replace was this, how you used to program it was you basically,

10:44.960 --> 10:49.320
there was this big flow chart in this manual where you would need to press the buttons

10:49.320 --> 10:53.920
in a certain combination and then set the dials, everything, and then upload the pattern.

10:53.920 --> 11:00.120
And the way you upload the pattern is you basically take a piece of matrix paper like

11:00.120 --> 11:07.680
with a grid and you make some of the cells you make black and that's basically your pattern.

11:07.680 --> 11:13.960
So you draw pixel art on a paper and you feed the paper into the scanner because this is

11:13.960 --> 11:16.000
a kind of a scanner.

11:16.000 --> 11:21.580
And then this thing somehow says, okay, well, I've now remembered that pattern.

11:21.580 --> 11:26.560
And then this machine communicates with the thing that goes, the carriage that goes back

11:26.560 --> 11:31.600
and forth and that actually then knits that pattern.

11:31.600 --> 11:37.200
I did not try to do that because it sounded very hard.

11:37.200 --> 11:45.040
So instead I found this space from the Ekerspace Bemberg in which they used an Arduino because

11:45.040 --> 11:48.280
this is the connector that you need to plug into the console.

11:48.280 --> 11:50.980
So I basically replaced the whole console with an Arduino.

11:50.980 --> 11:56.500
So on one side there's the Arduino communicating with the carriage and then out comes digital

11:56.500 --> 12:01.520
signals, just a serial protocol that goes back into the computer and then the computer

12:01.520 --> 12:07.080
can tell, knit this pattern, knit that pattern, etc.

12:07.080 --> 12:11.480
If you have more questions about this, I can answer a lot.

12:11.480 --> 12:14.040
I'm not going to do it right now.

12:14.040 --> 12:19.220
Basically the new user interface that I'm working right now looks a bit like this.

12:19.220 --> 12:23.820
So it's just basically a browser.

12:23.820 --> 12:26.660
And also because I wanted to use LiveView for something.

12:26.660 --> 12:29.080
So we're finally getting to that subject.

12:29.080 --> 12:30.080
Yes.

12:30.080 --> 12:38.500
So this knitting interface shows a bit, it shows, well, basically where the machine is

12:38.500 --> 12:41.600
at in the knit process.

12:41.600 --> 12:46.200
And it shows the current color that it is knitting.

12:46.200 --> 12:51.080
And it shows whether you have to move it left or right because there is a motor, you can

12:51.080 --> 12:53.320
enable the motor so that it knits automatically.

12:53.320 --> 12:57.120
But you can also do it manually.

12:57.120 --> 13:01.800
So it has a little counter, it has a start-stop button and it has several configuration things

13:01.800 --> 13:04.720
like because it's a very big knitting machine.

13:04.720 --> 13:08.400
So you have to specify, I have to knit it here, I can knit it there.

13:08.400 --> 13:09.840
It's so wide.

13:09.840 --> 13:11.160
And then you can upload a pattern.

13:11.160 --> 13:14.480
So you can type in 1 to 0 here.

13:14.480 --> 13:20.840
Literally you can type in 1 and 1 to 0 and it will then create a pattern and then there's

13:20.840 --> 13:27.520
a state machine that will loop through that pattern to send the proper instructions to

13:27.520 --> 13:30.000
the Arduino.

13:30.000 --> 13:35.960
So I'm going to demo that a bit later because first I want to go a bit into the detail of

13:35.960 --> 13:37.840
this live view.

13:37.840 --> 13:39.680
It's not only live view.

13:39.680 --> 13:43.840
It's basically just a Phoenix or just an Elixir project.

13:43.840 --> 13:45.680
And it has several parts.

13:45.680 --> 13:49.720
One of it, of course, is the user interface which is all the way over there.

13:49.720 --> 13:52.880
And the other part is the actual knitting machine that's over here.

13:52.880 --> 13:55.640
So it's connected with an Arduino like I showed.

13:55.640 --> 13:59.240
And the Arduino is connected to the Elixir.

13:59.240 --> 14:05.480
So this middle part is the interesting software part that I've built.

14:05.480 --> 14:09.960
So there's a few components here and I've created some kind of color coding for that

14:09.960 --> 14:10.960
in front of myself.

14:10.960 --> 14:16.120
So basically green is an Erlang process or Elixir process.

14:16.120 --> 14:19.240
And orange is like state.

14:19.240 --> 14:21.080
It's just data.

14:21.080 --> 14:28.560
And without color is something that is not very interesting.

14:28.560 --> 14:36.720
So basically whenever I used a NURV3 library, I think it was already mentioned that NURV3

14:36.720 --> 14:40.640
is really nice for doing IoT kind of things with Elixir.

14:40.640 --> 14:42.320
So UART is the protocol.

14:42.320 --> 14:43.600
It's basically a serial port.

14:43.600 --> 14:48.920
So whenever you program an Arduino, you can tell it to send and receive serial commands.

14:48.920 --> 14:54.040
And you can very easily listen to them with Elixir.

14:54.040 --> 14:59.480
There's a monitor that basically looks for the serial port.

14:59.480 --> 15:05.600
So I can hotplug basically the knitting machine into my computer and pull it out.

15:05.600 --> 15:13.960
And then basically whenever it receives some serial packet, just a line, basically just

15:13.960 --> 15:19.920
a text line, it sends this over, Phoenix pops up to the rest of the system.

15:19.920 --> 15:23.800
And then there are several other components that listen to those serial commands.

15:23.800 --> 15:30.920
One of them is the control, which is a gen server that basically has all this state.

15:30.920 --> 15:39.080
Basically it has all this state, like where am I in the knitting, et cetera.

15:39.080 --> 15:43.720
So that gen server holds the state of the knitting machine itself.

15:43.720 --> 15:48.440
So that basically has the task of transforming this pattern plus the settings into a sequence

15:48.440 --> 15:53.960
of commands that needs to be sent out to the knitting machine.

15:53.960 --> 16:00.120
And also the state is also updated whenever new serial commands come in.

16:00.120 --> 16:07.360
And then the control is also connected to the live view, which actually shows everything

16:07.360 --> 16:15.680
that is being done.

16:15.680 --> 16:21.640
So what I'm going to talk the rest of is mostly this part, because that's the title of the

16:21.640 --> 16:22.640
talk.

16:22.640 --> 16:35.920
It's about live view and how that works and what it is actually, how it works in my case.

16:35.920 --> 16:36.920
Are there any questions?

16:36.920 --> 16:38.400
Oh, I have 10 minutes left.

16:38.400 --> 16:39.400
Really?

16:39.400 --> 16:40.400
Okay.

16:40.400 --> 16:41.400
I have 10 minutes left.

16:41.400 --> 16:45.880
So let's go for a bit quicker now.

16:45.880 --> 16:46.880
What is live view?

16:46.880 --> 16:52.360
Well, from the docs it says, live view provides rich real-time experiences with user rendered

16:52.360 --> 16:56.880
HTML and to understand or with server rendered HTML.

16:56.880 --> 17:03.440
And to understand what that actually means, let's dive into a little bit of the web history.

17:03.440 --> 17:07.400
When this whole Internet thing started, the first thing there was was just a browser with

17:07.400 --> 17:08.400
HTML, right?

17:08.400 --> 17:13.280
So you had a web server, you uploaded the HTML file to and you just view it.

17:13.280 --> 17:14.280
That's basically it.

17:14.280 --> 17:20.360
And when you want to go to another page, you just click a link and you view the other page.

17:20.360 --> 17:24.040
That's basically what we now call a static website.

17:24.040 --> 17:26.360
Very static.

17:26.360 --> 17:28.620
So that worked pretty well for a while.

17:28.620 --> 17:34.200
And then when at some point people thought, well, we can also not make the static, but

17:34.200 --> 17:37.400
we can send something different back every time.

17:37.400 --> 17:45.320
So that's when it became the HTML, dynamic HTML, PHP was born, other programming, I'm

17:45.320 --> 17:48.120
getting feedback from the mic now.

17:48.120 --> 17:50.640
It's a bit irritating.

17:50.640 --> 17:52.600
Whatever.

17:52.600 --> 17:55.400
So basically, the HTML became dynamic.

17:55.400 --> 17:58.080
So there was a lot of logic on the server.

17:58.080 --> 18:00.840
You would make a PHP file that rendered out HTML.

18:00.840 --> 18:04.360
The HTML was different for each user even because there were sessions.

18:04.360 --> 18:07.200
You have cookies where you store basically the state.

18:07.200 --> 18:08.280
Like this user is logged in.

18:08.280 --> 18:10.880
This user has this stuff in his cart.

18:10.880 --> 18:11.880
Whatever.

18:11.880 --> 18:16.320
So there's a lot of logic on the server that renders into HTML and then the HTML is just

18:16.320 --> 18:20.040
sent over the wire and the browser displays it when done.

18:20.040 --> 18:21.840
So that worked pretty okay.

18:21.840 --> 18:25.680
But it was not really interactive because every time you had to do something in the

18:25.680 --> 18:27.760
site, it would reload the page.

18:27.760 --> 18:30.960
So then at some point people thought, hey, I can make little effects.

18:30.960 --> 18:34.240
I can do hovers and animations.

18:34.240 --> 18:42.720
So we make a JavaScript that was born basically, I think with IE version something free started

18:42.720 --> 18:44.480
to become popular.

18:44.480 --> 18:49.120
So there was a bit of JavaScript written to make things a bit more lively and a bit more

18:49.120 --> 18:52.360
dynamic without having to reload the page every time.

18:52.360 --> 18:55.080
Well, of course, you know what happened next.

18:55.080 --> 18:58.840
So JavaScript became very big.

18:58.840 --> 19:02.540
So a lot of the logic was actually moved to the client.

19:02.540 --> 19:06.200
So the pages did not reload every time.

19:06.200 --> 19:11.520
Basically just loaded the page one time and then JavaScript basically takes care of the

19:11.520 --> 19:12.520
rest.

19:12.520 --> 19:16.800
It was just parts of the HTML with other parts.

19:16.800 --> 19:23.520
It even sends you to another URL without actually re-loading the page with push date kind of

19:23.520 --> 19:24.720
things.

19:24.720 --> 19:29.920
So there was a lot of logic on the client suddenly.

19:29.920 --> 19:37.040
And it would fetch underwater, not over HTML, but it would just use what's called Ajax.

19:37.040 --> 19:42.360
But currently we have REST and GraphQL, all kinds of protocols to get data into the client

19:42.360 --> 19:45.720
and then do stuff with the data.

19:45.720 --> 19:50.920
So there was a lot of logic suddenly on the client.

19:50.920 --> 19:51.920
And this is still the case.

19:51.920 --> 19:58.600
I think when you write JavaScript, there's a like, or when you, any web project is quite

19:58.600 --> 20:03.600
heavy on the server side or on the client side.

20:03.600 --> 20:09.900
Now with LiveView, the pendulum has swung in the other way a bit again.

20:09.900 --> 20:15.000
Because the actually very interesting thing about LiveView is that we can do very interactive

20:15.000 --> 20:16.000
things.

20:16.000 --> 20:18.800
We don't have to reload the page every time to do something interactive.

20:18.800 --> 20:24.560
We can stay on the same page, but we can still dynamically change parts of the page without

20:24.560 --> 20:32.640
having to do very heavy, create all kinds of APIs and do complicated things.

20:32.640 --> 20:44.320
So suddenly with LiveView, the logic is again mostly for 99%, I would say, back on the server.

20:44.320 --> 20:48.480
So it's actually, it's like a bit again from back in the old days.

20:48.480 --> 20:52.640
You just render something, you just put it to the browser and then the browser displays

20:52.640 --> 20:53.640
it.

20:53.640 --> 20:54.640
It's as simple as that.

20:54.640 --> 20:58.640
You don't need to write a lot of JavaScript unless you really want to.

20:58.640 --> 21:04.840
And that's actually one of the promises of LiveView, that you can make UIs very quickly

21:04.840 --> 21:10.640
just staying in Elixir and just templating from Elixir.

21:10.640 --> 21:14.760
So how does that actually work?

21:14.760 --> 21:18.320
Is there a diagram on the next slide?

21:18.320 --> 21:19.320
Yes.

21:19.320 --> 21:28.600
So basically what happens is, I can show this one first.

21:28.600 --> 21:30.720
So there's one LiveView process.

21:30.720 --> 21:35.160
So basically in Erlang, processes are very lightweight.

21:35.160 --> 21:38.800
Five minutes left, oh no.

21:38.800 --> 21:43.960
Templates are rendered on the server and they are rendered every time you update the state.

21:43.960 --> 21:50.240
But it does not send the whole template over to the client, it just sends the things that

21:50.240 --> 21:52.920
are changed.

21:52.920 --> 21:55.080
So basically it works a bit like this.

21:55.080 --> 22:00.440
So the first time it renders, we get some HTML and then it actually connects over a

22:00.440 --> 22:04.800
WebSocket and then it says, hey, I'm a LiveView process and I can now interact with you.

22:04.800 --> 22:10.680
And then whenever some state changes, the browser is now connected to the corresponding

22:10.680 --> 22:12.360
process in the server.

22:12.360 --> 22:18.800
So when the state changes, it actually re-renders something and it actually just sends the things

22:18.800 --> 22:20.640
that have changed, sends it to the browser.

22:20.640 --> 22:25.720
And then the browser is intelligent enough that it can just patch small parts of the

22:25.720 --> 22:31.040
DOM tree to just change that part and not change everything.

22:31.040 --> 22:36.160
So that makes it very lightweight and very flexible.

22:36.160 --> 22:42.000
And this is a bit, well, when you start with this, it is now integrated into Phoenix, the

22:42.000 --> 22:44.200
Elixir Web Framework.

22:44.200 --> 22:47.760
And I will give a little demo now, I think.

22:47.760 --> 22:50.340
Yeah, so let's make the knitting live.

22:50.340 --> 22:57.920
So it would look a bit like, when you write in the Elixir module, it looks a bit like this.

22:57.920 --> 23:00.640
There's always something you have to write, it's mount.

23:00.640 --> 23:05.840
When you mount something, you just return, okay, I'm mounted and I have some assigns

23:05.840 --> 23:06.840
in my socket.

23:06.840 --> 23:10.440
It's a bit like normal Phoenix templating.

23:10.440 --> 23:15.520
You assign things to something and then you can render, use those assigns to render something.

23:15.520 --> 23:22.320
So back below here, there's actually the render function and in this case, it just renders

23:22.320 --> 23:25.400
an image tag, image class movie.

23:25.400 --> 23:26.560
Wonder what that is.

23:26.560 --> 23:33.400
And the source is some kind of, is an image URL with a variable in it, a frame, and the

23:33.400 --> 23:37.280
frame is assigned here.

23:37.280 --> 23:41.160
So it renders a single image.

23:41.160 --> 23:47.800
And whenever a serial command comes in from a serial port, basically, I calculate a new

23:47.800 --> 23:51.080
frame and then assign it to the socket again.

23:51.080 --> 23:55.600
So this triggers another render here and it will probably change the frame number, so

23:55.600 --> 23:57.780
it will change the image.

23:57.780 --> 24:02.360
So this basically connects the serial port to a live view.

24:02.360 --> 24:06.600
I think that's better.

24:06.600 --> 24:10.000
So I actually have a demo of that because I actually, well, I did not bring my knitting

24:10.000 --> 24:15.800
machine, I actually brought my knitting machine emulator, which is an Arduino with a potentiometer

24:15.800 --> 24:17.920
attached.

24:17.920 --> 24:32.240
And I can probably now, this will fill, but who cares, plug it in and then we go to this.

24:32.240 --> 24:38.240
So if you look in the source, we see somewhere that here, this is the one, we see the movie.

24:38.240 --> 24:41.000
It's now at frame number 15.

24:41.000 --> 24:47.440
And then if we, is it running?

24:47.440 --> 24:51.440
Should be running.

24:51.440 --> 24:53.680
If we now turn the knob.

24:53.680 --> 24:54.680
Yes.

24:54.680 --> 24:55.680
Okay.

24:55.680 --> 24:56.680
So now I can knit.

24:56.680 --> 25:07.320
You see, I am knitting.

25:07.320 --> 25:11.240
So I did not bring my whole machine, but I brought a virtual version of myself that is

25:11.240 --> 25:19.600
now at home and I can control it through this little Arduino over here.

25:19.600 --> 25:21.520
I thought of this last night to demo it like this.

25:21.520 --> 25:27.120
It was not really prepared.

25:27.120 --> 25:31.840
So I hope that gets you a bit of the idea how live view updates its state.

25:31.840 --> 25:36.080
And in this case, it is very simple, but an actual live view, of course, is much more,

25:36.080 --> 25:39.600
much bigger.

25:39.600 --> 25:48.000
And actually that is the rest of my talk that I'm still need to do.

25:48.000 --> 25:49.000
Let's continue very quickly.

25:49.000 --> 25:50.000
How much?

25:50.000 --> 25:51.000
Oh, time's up.

25:51.000 --> 25:52.000
Okay.

25:52.000 --> 25:53.000
Is it really up?

25:53.000 --> 25:56.760
I think that you can take like one or two minutes.

25:56.760 --> 25:57.760
Okay.

25:57.760 --> 25:58.760
Okay.

25:58.760 --> 26:01.880
I will quickly skip through the next slides then.

26:01.880 --> 26:07.360
So you can imagine that writing a single Elixir module with every logic in it, you get one

26:07.360 --> 26:08.880
big assign with everything.

26:08.880 --> 26:09.980
It's not really scalable.

26:09.980 --> 26:12.420
So there are actually two things to make that scalable.

26:12.420 --> 26:13.760
You make components.

26:13.760 --> 26:17.760
So one of the components is function components, which are basically just rendering templates

26:17.760 --> 26:19.320
inside functions.

26:19.320 --> 26:21.740
And then the other ones are Phoenix live components.

26:21.740 --> 26:26.480
And those are basically like sub live views in your live view that have their own state

26:26.480 --> 26:30.900
and their own render function and their own mount function.

26:30.900 --> 26:36.280
So in this case, in my UI, these are, I just created a few components, one component is

26:36.280 --> 26:38.600
settings components, which contains a form.

26:38.600 --> 26:43.360
Another component is a row component that just renders a single row.

26:43.360 --> 26:46.520
So the row components are very simple.

26:46.520 --> 26:53.120
It just renders basically a set of diffs.

26:53.120 --> 26:54.520
And then you can call it like this.

26:54.520 --> 26:59.160
So it's basically in the template syntax using function components, basically the same as

26:59.160 --> 27:04.160
a normal tag, but you prepend it with a dot, which is because it's basically a function

27:04.160 --> 27:07.400
call.

27:07.400 --> 27:10.880
And the live components are stateful.

27:10.880 --> 27:14.600
So live components have their own state, so they have a mount.

27:14.600 --> 27:15.840
You can assign things to there.

27:15.840 --> 27:18.400
It's basically what I already said.

27:18.400 --> 27:22.160
It's a live view inside a live view.

27:22.160 --> 27:28.240
So these signals directly communicate with the live components in this case.

27:28.240 --> 27:33.880
Then there's some more things like slots you can create like different parts of your component

27:33.880 --> 27:40.800
and make them into like separate things where you can put part of your DOM tree as well.

27:40.800 --> 27:45.120
And I just wanted to say there's a lot out there, like there's a big community, and I

27:45.120 --> 27:47.740
think live view is really getting a lot of traction.

27:47.740 --> 27:48.740
And it's actually a shame.

27:48.740 --> 27:52.320
I have not done anything really with live view in production actually.

27:52.320 --> 27:54.580
I wanted to make a disclaimer there.

27:54.580 --> 28:01.520
But I really like where it's going, and there's a lot of projects popping up with component

28:01.520 --> 28:05.120
libraries and people making stuff on top of it.

28:05.120 --> 28:10.680
There's the storybook project, which is also very nice, which allows you to make a library

28:10.680 --> 28:15.720
of components and then have a live environment somewhere where you can document these components

28:15.720 --> 28:20.400
and try them out and copy paste the code for you to use inside your live view.

28:20.400 --> 28:25.660
So there's a lot of things, like JavaScript integration, which I'm not going to show.

28:25.660 --> 28:27.160
There's live view native coming up.

28:27.160 --> 28:31.080
It's also very nice technology where you don't render things to the browser, but you render

28:31.080 --> 28:35.680
things into a native app so that it actually builds a native act.

28:35.680 --> 28:40.600
What React Native is to React is, well, you get the drift.

28:40.600 --> 28:45.640
So thank you for listening.

28:45.640 --> 28:51.360
Thank you, Aryan.

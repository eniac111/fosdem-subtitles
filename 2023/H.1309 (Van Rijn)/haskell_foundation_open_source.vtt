WEBVTT

00:00.000 --> 00:14.520
All right, so our final talk for the dev room today is by David Christensen.

00:14.520 --> 00:19.760
He is the executive director of the Haskell Foundation and has worked with Haskell and

00:19.760 --> 00:24.260
functional programming in both academia and industry.

00:24.260 --> 00:29.760
He was a major contributor to the first version of Idris and its Emacs mode, together with

00:29.760 --> 00:31.400
Daniel P. Friedman.

00:31.400 --> 00:37.440
He wrote The Little Typer, an introduction to dependent type theory, and he's currently

00:37.440 --> 00:43.080
working on functional programming in Lean, an introduction to writing programs in Lean

00:43.080 --> 00:44.680
4.

00:44.680 --> 00:49.880
His presentation today is open source opportunities with the Haskell Foundation.

00:49.880 --> 00:50.880
Thank you, David.

00:50.880 --> 00:51.880
Thank you.

00:51.880 --> 01:03.120
So, as a brief overview, I'll be presenting three major sort of categories of speech today,

01:03.120 --> 01:04.120
I guess.

01:04.120 --> 01:09.040
A bit about lore and values of Haskell for those who are new to the community, a bit

01:09.040 --> 01:13.440
about institutions and projects that kind of keep us all up and going, and at the very

01:13.440 --> 01:18.640
end I will plug my employer, the Haskell Foundation, as one does.

01:18.640 --> 01:22.160
So to begin with, lore and values.

01:22.160 --> 01:25.960
Many people coming in here who don't know Haskell so well might be thinking, what is

01:25.960 --> 01:26.960
Haskell?

01:26.960 --> 01:27.960
And I'm not going to answer that at all.

01:27.960 --> 01:31.520
I'm going to answer another question, which is, who is Haskell?

01:31.520 --> 01:35.720
And the reason why I think this is an interesting question to answer, well, my thinking was

01:35.720 --> 01:40.640
really influenced by this essay by Ken Pittman from back in 1994 called Lambda, the Ultimate

01:40.640 --> 01:47.040
Political Party, which was kind of a riff on a series of MIT AI lab memos, Lambda,

01:47.040 --> 01:53.480
the Ultimate X, where X are things like op code and so forth.

01:53.480 --> 01:57.200
And most of this is a bunch of details about the Lisp standardization project of the early

01:57.200 --> 02:01.280
90s, which is not so relevant anymore to most of us.

02:01.280 --> 02:06.520
But for those who are not historians, the author makes a wonderful point where he proposes

02:06.520 --> 02:08.120
a thought experiment.

02:08.120 --> 02:11.840
And in this thought experiment he says, take the Lisp community and give them the C programming

02:11.840 --> 02:12.920
language.

02:12.920 --> 02:14.800
Don't let them talk to C programmers.

02:14.800 --> 02:17.040
Come back, check in after some time has gone by.

02:17.040 --> 02:18.600
And what should you expect to find?

02:18.600 --> 02:22.720
Well, you should expect that the version of C that the Lisp hackers had been hacking on

02:22.720 --> 02:24.280
has grown Lambda.

02:24.280 --> 02:25.700
It's grown garbage collection.

02:25.700 --> 02:28.920
It's grown fancy interactive environments.

02:28.920 --> 02:31.360
It certainly won't run on low-end machines anymore.

02:31.360 --> 02:35.280
Whereas you'd expect that C would be sort of basically like C, but better in the ways

02:35.280 --> 02:37.520
that C normally gets better.

02:37.520 --> 02:40.000
Maybe bool has become a type and things like that.

02:40.000 --> 02:41.520
This is from the perspective of 1994.

02:41.520 --> 02:44.780
That was not the case yet.

02:44.780 --> 02:48.960
And what this really says is that the way we should understand a programming language

02:48.960 --> 02:52.160
is really as like a shared artifact for a community of practice.

02:52.160 --> 02:56.040
Like a group of people who are working together on some project.

02:56.040 --> 03:00.400
We're not all identical, but we all have something in common which draws us to this programming

03:00.400 --> 03:01.520
language.

03:01.520 --> 03:05.120
And what this really means is that like the values of a community shape the development

03:05.120 --> 03:07.440
of a programming language over time.

03:07.440 --> 03:11.560
And the shape of the programming language affects the values of the community because

03:11.560 --> 03:14.640
if you hate it you're going to leave.

03:14.640 --> 03:16.760
So what are some values of the Haskell community?

03:16.760 --> 03:19.600
Well we think that elegance is a very important thing.

03:19.600 --> 03:21.200
Very very important.

03:21.200 --> 03:23.120
But we also like to build things that really work.

03:23.120 --> 03:27.200
There's a stereotype of Haskellers who once they're programmed to type checks they just

03:27.200 --> 03:28.440
like delete it because they're done.

03:28.440 --> 03:30.520
And that's not true at all.

03:30.520 --> 03:32.840
We really do like to build things.

03:32.840 --> 03:37.040
I used Xmodad for like a decade.

03:37.040 --> 03:40.720
But also we really do appreciate a mathematical inspiration.

03:40.720 --> 03:44.920
We like to sort of be able to look at a thing and say like oh from this branch of mathematics

03:44.920 --> 03:46.920
this means this thing.

03:46.920 --> 03:51.120
And a few of us do that and the rest of us look at those people and say like yeah.

03:51.120 --> 03:54.080
But as opposed to ehh.

03:54.080 --> 03:56.440
We also really like playing with things.

03:56.440 --> 04:01.400
Playing practical jokes in the type system is something that will get you respect rather

04:01.400 --> 04:03.600
than disgust in Haskell.

04:03.600 --> 04:06.640
We have a real culture of like cluging through a thing and then cleaning it up and making

04:06.640 --> 04:08.880
it elegant and beautiful later.

04:08.880 --> 04:11.280
You're not expected to prove theorems and then do your work.

04:11.280 --> 04:14.480
It's more like find a thing that works and then see if you can prove something cool about

04:14.480 --> 04:15.760
it.

04:15.760 --> 04:19.000
We tend to be pretty anti-authoritarian and independent people.

04:19.000 --> 04:23.760
That makes my job as chief cat herder more kind of like chief mountain lion herder.

04:23.760 --> 04:26.200
Which is fun.

04:26.200 --> 04:29.320
And typically when we want to make a thing that works well we're going to be using kind

04:29.320 --> 04:35.280
of lightweight semi-formal methods like fancy types or property based testing.

04:35.280 --> 04:40.960
Things like that as opposed to other processes that are used more so in the rest of the world.

04:40.960 --> 04:42.600
We like cleverness.

04:42.600 --> 04:46.140
If you can come up with a thing that's like fancy and powerful and cool like people look

04:46.140 --> 04:48.360
at that and say yes.

04:48.360 --> 04:51.560
We tend to have low power distance.

04:51.560 --> 04:56.360
If you go to a Haskell event and the person with the gaggle of young Haskellers following

04:56.360 --> 05:00.880
them around says something and you talk back to them you're likely to be met with respect

05:00.880 --> 05:05.920
rather than with rejection for having dared across the great leader.

05:05.920 --> 05:07.580
We like novelty.

05:07.580 --> 05:12.040
We tend to have a lot of respect for knowledge.

05:12.040 --> 05:15.960
We don't want to say oh that's just book learning.

05:15.960 --> 05:17.720
We also tend to be a bit insular.

05:17.720 --> 05:21.680
There's a bit of a not invented here thing that happens quite often in Haskell.

05:21.680 --> 05:26.240
And also we've mass imported a lot of random Unix stuff.

05:26.240 --> 05:31.360
A preference for grody command line applications.

05:31.360 --> 05:33.920
I think some non-values of the community.

05:33.920 --> 05:40.200
One is achieving correctness through formal discipline organizational design.

05:40.200 --> 05:42.480
That certainly happens in some organizations.

05:42.480 --> 05:46.880
I think more in the corporate world than in the open source world.

05:46.880 --> 05:51.920
But we also tend to not use traditional software engineering practices even when it might be

05:51.920 --> 05:55.680
relevant and useful because we just kind of look at that and say huh.

05:55.680 --> 06:01.200
And also while we value simplicity and beauty in our language the things outside of the

06:01.200 --> 06:07.480
language we often look at and say yeah it's okay if that's a bit crunchy.

06:07.480 --> 06:09.720
So where is all this coming from?

06:09.720 --> 06:12.440
A community has values but it also has history.

06:12.440 --> 06:16.600
Well back in 1976 two very important things happened.

06:16.600 --> 06:20.480
The first was a paper by Dan Friedman and David Wise called cons should not evaluate

06:20.480 --> 06:22.080
its arguments.

06:22.080 --> 06:28.760
Wise is the name of the list constructor in old school list and today in list today.

06:28.760 --> 06:34.720
Also David Turner made a new version of the St. Andrews static language which was lazy.

06:34.720 --> 06:38.040
And this sort of gave rise to a cottage industry of cool things.

06:38.040 --> 06:41.240
They're not all on the slide here because there's too many of them.

06:41.240 --> 06:50.040
One notable example in 1984 was lazy ML from Chalmers and also of course Miranda in 1985.

06:50.040 --> 06:56.440
And as we all must note Miranda is a trademark of research software limited.

06:56.440 --> 07:03.920
And so then a bunch of other languages came out like Orwell, Alphal, Clean from the folks

07:03.920 --> 07:08.040
at Nymakin a really great interesting language with some cool ideas you should look at.

07:08.040 --> 07:12.400
And then people would think well we've got this nice compiler over here.

07:12.400 --> 07:13.920
We've got this nice library over here.

07:13.920 --> 07:18.520
We can't use the library with the compiler because they don't, they're different languages

07:18.520 --> 07:20.600
but there's not anything important about them.

07:20.600 --> 07:25.360
It's just that this one came from this university and this one came from this university.

07:25.360 --> 07:28.680
And to be clear this was a very university led phenomenon.

07:28.680 --> 07:31.600
All of this lazy programming in the 80s.

07:31.600 --> 07:39.200
And so a committee got together and in 1987 and through 1990 they started working on the

07:39.200 --> 07:43.120
sort of committee language that would essentially shave off all the things like this one uses

07:43.120 --> 07:47.280
a single colon for the types, this one uses a double colon, this one uses a capital letter

07:47.280 --> 07:51.680
for constructors, this one uses a lowercase letter and shave off those differences and

07:51.680 --> 07:55.920
make this language where you could use a library from the one site on the compiler from the

07:55.920 --> 07:57.440
other site.

07:57.440 --> 08:01.920
And unfortunately when you get, fortunately or unfortunately, when you get researchers

08:01.920 --> 08:05.240
in a room together they tend to do research and all of a sudden they figured out type

08:05.240 --> 08:10.160
classes and they started doing IO with monads and then Haskell was born.

08:10.160 --> 08:12.880
And the yeah, yay!

08:12.880 --> 08:17.960
So the 1990s was like a period of furious hacking both on the definition and the implementation.

08:17.960 --> 08:19.960
The two kind of went hand in hand.

08:19.960 --> 08:23.320
There were lots of implementations of Haskell in the start because the idea was that it

08:23.320 --> 08:28.840
would be a common standard for implementations sort of like in the sense more like C or common

08:28.840 --> 08:36.120
Lisp and less like Python or Perl or Rust which are sort of defined by their canonical

08:36.120 --> 08:38.920
implementation.

08:38.920 --> 08:43.760
In 1992 work was started on GHC, in 1995 on hugs.

08:43.760 --> 08:45.600
Has anyone in here used hugs?

08:45.600 --> 08:48.160
Ah good, some hands.

08:48.160 --> 08:53.680
So back in the day GHC didn't really, didn't have a REPL so you'd use hugs for the nice

08:53.680 --> 08:57.920
interactive environment and the error messages and then you'd use GHC to compile your code.

08:57.920 --> 09:03.560
Kind of like standard ML programmers do with like SML and J and Milton.

09:03.560 --> 09:08.800
And by the end of the 90s we had the Haskell 98 report put together by the committee and

09:08.800 --> 09:14.360
by 2001 GHC came out and I see this as like kind of a watershed moment because it's when

09:14.360 --> 09:19.200
GHC began starting to kind of serve all of the needs of the Haskell community rather

09:19.200 --> 09:22.560
than just the batch compiler to make your fast code need.

09:22.560 --> 09:28.240
In the 2000s we had a fairly finished language standard, right?

09:28.240 --> 09:34.480
The Haskell committee disbanded itself after Haskell 98 came out in 1999.

09:34.480 --> 09:38.560
And a lot of work was put into making Haskell go fast like let's make the compiler generate

09:38.560 --> 09:42.320
better code, let's look at all these nice optimizations we can do.

09:42.320 --> 09:46.880
Also at doing like reliable concurrent programming so we got a lot of cool like parallel Haskell

09:46.880 --> 09:51.480
features, we got software transactional memory, all this like space age technology stuff from

09:51.480 --> 09:55.120
the perspective of the mid 00s at least.

09:55.120 --> 10:03.280
And in the 2010s, you know, or I should say in 2009 we got the Haskell 2010 report and

10:03.280 --> 10:07.120
that was actually the last major revision to Haskell and there isn't really a committee

10:07.120 --> 10:11.760
around anymore that feels like they can define a new Haskell language.

10:11.760 --> 10:16.040
And in some sense this report was a little bit anachronistic because by this point GHC

10:16.040 --> 10:19.520
was the Haskell implementation that everyone was using.

10:19.520 --> 10:24.240
Through the 2010s GHC was extended with all sorts of super fancy types.

10:24.240 --> 10:29.480
You've seen a little bit of them today but there was this whole line of research of how

10:29.480 --> 10:34.000
can we extend the expressive power of the type system while still keeping a lot of the

10:34.000 --> 10:37.600
properties we like of Haskell like being able to write down a simple program and have it

10:37.600 --> 10:41.200
tell me what the type should be as opposed to having me tell it what the type is first

10:41.200 --> 10:43.920
and then having it check the program.

10:43.920 --> 10:48.040
And it's, you know, we're only a little bit into the 2020s but I think that what's happening

10:48.040 --> 10:53.680
here is that we're going to finally deliver on our potential of having the best experience

10:53.680 --> 10:58.080
driven by the fancy types and the fearless concurrency and all these things.

10:58.080 --> 11:00.360
But we'll see what happens.

11:00.360 --> 11:02.240
So a little bit about institutions.

11:02.240 --> 11:07.760
I've been talking a lot about sort of community and history but a community is more than just

11:07.760 --> 11:08.960
a group of people.

11:08.960 --> 11:13.760
There's also, you know, figures within any community who kind of set the agenda for that

11:13.760 --> 11:20.360
community who others look to for leadership and inspiration from time to time.

11:20.360 --> 11:24.840
And an interesting thing about Haskell, this comes up a lot in various discussion boards,

11:24.840 --> 11:27.880
is people will say what is the Haskell X, right?

11:27.880 --> 11:34.160
Where X is drawn from the set containing build tool or tutorial or book or IDE or compiler

11:34.160 --> 11:36.040
or whatever.

11:36.040 --> 11:43.040
And in fact, we can't answer that question because unlike something like, you know, Python

11:43.040 --> 11:48.980
or Rust or many other of these implementation defined languages, there isn't really any

11:48.980 --> 11:54.400
organization that owns Haskell and can say we're going to now say that this is the official

11:54.400 --> 11:56.400
Haskell X.

11:56.400 --> 12:02.800
And, you know, like we're essentially defined by GHC but it doesn't have, the GHC project

12:02.800 --> 12:07.640
doesn't have this kind of leading role in the same way that like the Python project

12:07.640 --> 12:09.520
has in Python.

12:09.520 --> 12:15.080
So that's, so we do have various committees that are, you know, that exist and people

12:15.080 --> 12:18.360
mostly do what they say.

12:18.360 --> 12:22.280
And like I said, we're a fiercely independent bunch of people.

12:22.280 --> 12:27.280
So there's the core libraries committee and they're the ones who are maintaining and controlling

12:27.280 --> 12:29.240
the standard libraries.

12:29.240 --> 12:34.680
So things like strings and lists and all the basic stuff that you need that essentially

12:34.680 --> 12:39.680
every Haskell program is going to need either directly or transitively through other things.

12:39.680 --> 12:44.840
Then we have the GHC steering committee and that's a, the name of that committee is a

12:44.840 --> 12:45.840
bit misleading.

12:45.840 --> 12:50.920
In fact, what they do is they evaluate changes to the language implemented by GHC.

12:50.920 --> 12:55.520
So in some ways this is the forum in which changes to Haskell are discussed and if you

12:55.520 --> 12:58.360
have input about it, that's where you should show up.

12:58.360 --> 13:04.280
Also, if you'd like to participate, you know, they regularly have new nominations so it's

13:04.280 --> 13:06.460
a place that you can do that.

13:06.460 --> 13:11.000
And then we have the Haskell org committee which is responsible for administering the

13:11.000 --> 13:16.080
Haskell org site and that's both the website but also like the sub-domain namespace.

13:16.080 --> 13:19.880
So when I needed to get errors at Haskell org for a thing, they're the ones that I went

13:19.880 --> 13:20.880
to and asked.

13:20.880 --> 13:25.280
And they also for historical reasons run the Google Summer of Code or Haskell Summer of

13:25.280 --> 13:28.320
Code when there is no GSOC.

13:28.320 --> 13:33.400
The key tools in Haskell as we seen earlier, there's the major compiler GHC.

13:33.400 --> 13:40.080
We've got HLS which gives us all those fancy features that we saw earlier in the talk.

13:40.080 --> 13:44.160
There's Cabal and Stack are the two major build tools.

13:44.160 --> 13:47.640
There's GHC up which is like a tool chain installation and management program which

13:47.640 --> 13:49.840
is quite convenient to use.

13:49.840 --> 13:55.840
There's Hackage which is kind of our CPAN or CTAN or crates.io or depending on where

13:55.840 --> 14:01.080
you come from, one of those might make sense to you which is centralized repository of

14:01.080 --> 14:02.080
packages.

14:02.080 --> 14:04.080
Luckily, we've just got one of those.

14:04.080 --> 14:09.160
Stackage is a version-pinned distribution of packages from Hackage that have been tested

14:09.160 --> 14:12.760
to work well together so you can get a coherent set of stuff.

14:12.760 --> 14:17.140
These days, like in the old days, as the name suggests, Stackage used to work with Stack.

14:17.140 --> 14:21.360
Now you can also point Cabal at it as well if you want.

14:21.360 --> 14:24.600
Then there's Haddock which is a documentation generator and it's in need of some serious

14:24.600 --> 14:27.840
refactoring, the maintainer sitting over here.

14:27.840 --> 14:31.400
If that's something you'd like to get involved with, you should go talk to them because that

14:31.400 --> 14:34.400
could be a really useful way to help out.

14:34.400 --> 14:38.440
Also GHC up I know is looking for a co-maintainer to share some of the burden there.

14:38.440 --> 14:42.440
That's another good place to get involved where you don't have to be a super type system

14:42.440 --> 14:45.160
expert.

14:45.160 --> 14:48.640
Comp Spinning Haskell Playground is looking for volunteers as well.

14:48.640 --> 14:54.360
This is an up and coming project to have an online place where you can go put in some

14:54.360 --> 14:57.520
Haskell code and run it and see what happens without having to install anything on your

14:57.520 --> 14:58.880
machine or anything like that.

14:58.880 --> 15:05.120
You can think of it as an active paste bin.

15:05.120 --> 15:08.800
I've been instructed to tell you to look at the help wanted and good first issue labels

15:08.800 --> 15:13.560
on the issue tracker and mentorship is available from the author.

15:13.560 --> 15:19.040
The Haskell Foundation is the other institution that I didn't talk about with the first ones.

15:19.040 --> 15:24.640
We're a very, very new nonprofit, just a couple years old and we are trying to broaden the

15:24.640 --> 15:28.000
adoption of Haskell because a programming language is more useful when more people use

15:28.000 --> 15:31.520
it so the more people we can get making cool Haskell stuff, the better it gets for all

15:31.520 --> 15:33.480
the rest of us.

15:33.480 --> 15:36.680
Also we think that there's a lot of really good things in Haskell that haven't, like

15:36.680 --> 15:39.520
good ideas that haven't spread as far as they could yet.

15:39.520 --> 15:43.540
Like the rest of the world definitely deals with first class functions now so we've succeeded

15:43.540 --> 15:44.540
there.

15:44.540 --> 15:49.080
The rest of the world is basically catching on about monads, we're succeeding there, but

15:49.080 --> 15:53.720
there's a lot of other cool stuff that I think we still have that if we want to make the

15:53.720 --> 15:59.960
world a better place, we can spread those good ideas.

15:59.960 --> 16:03.480
The point of the Haskell Foundation is not to come in and take over everything.

16:03.480 --> 16:09.040
Our goal is really to support existing processes from our fiercely independent Haskell community

16:09.040 --> 16:14.120
and figure out what opportunities to help out.

16:14.120 --> 16:20.880
I am the executive team so I've been in that role since May of 2022 so I'm still fairly

16:20.880 --> 16:21.880
new at it.

16:21.880 --> 16:24.200
I used to work at Galois and Dion Digital.

16:24.200 --> 16:28.080
Before that I have a PhD from IT University of Copenhagen from 2015.

16:28.080 --> 16:32.000
I also did a postdoc in Indiana University.

16:32.000 --> 16:36.240
I worked on Digital One and I helped write the little typer and I'm working on functional

16:36.240 --> 16:37.560
programming in Lean.

16:37.560 --> 16:40.880
As you can see I'm into dependent type stuff but that's really not the focus of where I'm

16:40.880 --> 16:42.160
working in Haskell.

16:42.160 --> 16:47.560
I think dependent types are cool but there's way more cool things than just that.

16:47.560 --> 16:51.120
The other full-time person we have at the Haskell Foundation is Brian Richter who you

16:51.120 --> 16:52.680
may know online as Shri Cat.

16:52.680 --> 16:54.760
I'm actually not sure how to pronounce that.

16:54.760 --> 17:02.480
CHR is a consonant cluster found in my own name but nonetheless unusual in English.

17:02.480 --> 17:07.840
He's doing full-time dev ops and CI work for the GHC project and helping to unstick things

17:07.840 --> 17:13.680
there and make it easier for both the existing team and new contributors to work on it.

17:13.680 --> 17:18.560
He's also looking for volunteers to help out so if you have knowledge of CI and dev ops

17:18.560 --> 17:24.680
things generally and in particular GitLab, Nix, Python, Bash and or PowerShell, get in

17:24.680 --> 17:31.220
touch with him and he'll put you to work doing useful interesting stuff for GHC.

17:31.220 --> 17:35.640
Another project of the Haskell Foundation is the Haskell Error Index.

17:35.640 --> 17:40.040
This is a new website which you can get at errors.hascal.org.

17:40.040 --> 17:43.400
It really got its start at ZeroHack last summer.

17:43.400 --> 17:47.480
The way this works is that participating Haskell development tools and so far there's three,

17:47.480 --> 17:53.440
that's GHC stack and GHC up, can assign a unique code to each of the error messages

17:53.440 --> 17:58.840
and warnings and then these can be looked up on this website.

17:58.840 --> 18:05.720
The website contains for a given error message detailed description of it that's longer than

18:05.720 --> 18:08.080
you could put in the error text itself.

18:08.080 --> 18:14.640
It can contain any number of examples so ideally we're going to be providing a before and after

18:14.640 --> 18:18.280
example like a program that exhibits the error message and then one in which it has been

18:18.280 --> 18:26.020
fixed along with details about why that program exhibits the error message.

18:26.020 --> 18:30.080
I could really use some volunteer help on this one so if you're good at CSS and JavaScript

18:30.080 --> 18:37.560
then dark mode support would be super useful and also we've put some work into the CSS

18:37.560 --> 18:38.760
but it could use more.

18:38.760 --> 18:41.840
It's not the most beautiful of websites yet.

18:41.840 --> 18:44.320
Also writing documentation content is super useful.

18:44.320 --> 18:48.240
If you know enough Haskell to understand one error message and you can write a markdown

18:48.240 --> 18:52.320
file and use Git then you have the skills necessary to contribute documentation for

18:52.320 --> 18:53.860
one error.

18:53.860 --> 18:56.800
So far we have 72 in there.

18:56.800 --> 19:04.360
With the new GHC release coming out that supports the error codes we'll quickly get the 371 remaining

19:04.360 --> 19:06.360
errors documented.

19:06.360 --> 19:10.000
No, 271.

19:10.000 --> 19:14.960
Also if the site backend is a static site generator written in Haskell using the hack

19:14.960 --> 19:20.060
a library and right now the deployment script takes too long to run and if you can help

19:20.060 --> 19:23.520
me with the caching to fix that that would be awesome because I'm terrible at that stuff.

19:23.520 --> 19:29.640
As you saw earlier, Frasier is running our security advisory database.

19:29.640 --> 19:36.200
This is a new project, a new initiative, sort of inspired by the Rust and NPM advisory databases.

19:36.200 --> 19:40.460
The idea is that it's going to serve as a data source for tools like Kibale, Stack and

19:40.460 --> 19:46.400
Dependabot and in particular a lot of organizations that want to use Haskell need to pass ISO

19:46.400 --> 19:52.200
27.001 certification and doing that is certainly possible without one of these automated scanners

19:52.200 --> 19:55.640
but then you have to have a conversation with the auditor and that makes things slower and

19:55.640 --> 19:57.160
riskier and more expensive.

19:57.160 --> 20:00.580
So if you can just check the box that's much better.

20:00.580 --> 20:04.240
Also there's real value in finding out whether or not one of your dependencies has some sort

20:04.240 --> 20:07.080
of a known issue.

20:07.080 --> 20:11.440
Volunteers are wanted for the security response team which is going to be administering the

20:11.440 --> 20:15.040
actual contents of the database but also for tool development.

20:15.040 --> 20:19.000
It would be great to be able to sit down and say Kibale audit or Stack audit and have it

20:19.000 --> 20:22.680
spit out a list of things to look out for.

20:22.680 --> 20:25.960
And also some public communication help could be useful.

20:25.960 --> 20:32.000
Right now we have a data format for the database but generating a nice website that documents

20:32.000 --> 20:37.740
everything and is searchable would also be a really useful contribution.

20:37.740 --> 20:41.880
We have a podcast, the Haskell Interlude podcast which is looking for guests, members of the

20:41.880 --> 20:43.200
Haskell community.

20:43.200 --> 20:47.280
So if you'd like to get on there and have a discussion with some leading Haskellers

20:47.280 --> 20:50.040
about what you're up to that would be really cool.

20:50.040 --> 20:53.320
Email podcast at Haskell.foundation.

20:53.320 --> 20:58.560
The Haskell Optimization Handbook is an in progress text on how to make Haskell code

20:58.560 --> 21:02.200
go fast.

21:02.200 --> 21:05.560
I blurred out the address on there a little bit just because it's in the process of moving

21:05.560 --> 21:07.480
from one address to another one.

21:07.480 --> 21:10.360
But if you Google it, it'll come right up.

21:10.360 --> 21:14.560
This is being organized by Jeff Young who works at IOG.

21:14.560 --> 21:16.320
He's known as Do You Can Do on the internet.

21:16.320 --> 21:20.640
So you can get a hold of him if you'd like to find ways to contribute text or infrastructure

21:20.640 --> 21:23.840
to this project.

21:23.840 --> 21:27.840
In addition to all of these sort of concrete technical things, we're also orchestrating

21:27.840 --> 21:30.160
the Hackage Security Signing Process.

21:30.160 --> 21:35.200
So Hackage uses an instance of the update framework which is a sort of standard way

21:35.200 --> 21:41.440
of securing software repositories against man in the middle attacks and untrusted mirrors

21:41.440 --> 21:44.080
and these kinds of things.

21:44.080 --> 21:50.080
And part of this process is that we have a collection of trustees who have keys and any

21:50.080 --> 21:55.240
three of them have to sign the metadata file from time to time just to keep the thing going.

21:55.240 --> 22:00.880
And they're certifying that all of the associated roles are correct.

22:00.880 --> 22:03.360
And that's been a volunteer-led process in the past.

22:03.360 --> 22:07.440
And we've had a couple of times where we thought, uh-oh, we've got to sign this real fast, otherwise

22:07.440 --> 22:08.680
things are going down.

22:08.680 --> 22:14.020
And so the HF is by being a professional organization, we can put a thing in the calendar

22:14.020 --> 22:19.360
and get the process going in plenty of time and all of those things.

22:19.360 --> 22:23.080
Also we're going to be doing a sort of lottery factor audit of key projects and infrastructure

22:23.080 --> 22:27.760
soon and try to find more places where we need to recruit extra maintainers for important

22:27.760 --> 22:29.640
projects and that kind of thing.

22:29.640 --> 22:33.160
Some people call the lottery factor a bus factor, but I'd rather think in terms of how

22:33.160 --> 22:36.720
many people can win the lottery and retire from computing forever without the project

22:36.720 --> 22:37.720
collapsing.

22:37.720 --> 22:40.240
It seems a little happier.

22:40.240 --> 22:43.440
We've also spent some time helping out the GHC developers.

22:43.440 --> 22:48.120
The results of this end up on discourse.haskal.org typically.

22:48.120 --> 22:53.720
Recently they asked us for some help in going out and surveying a certain number of GHC users

22:53.720 --> 22:57.560
about priorities for the next six to nine months.

22:57.560 --> 23:02.280
And then we collected feedback on that and then developed a report where they said what

23:02.280 --> 23:04.680
they're actually going to do based on the feedback.

23:04.680 --> 23:07.120
So this is available to be read.

23:07.120 --> 23:11.360
And right now we're trying to do something similar for a project on making nightly releases

23:11.360 --> 23:12.680
easier to get to.

23:12.680 --> 23:16.500
So right now you can get nightlies if you know the incantation, but we'd really like

23:16.500 --> 23:19.240
it to be super easy to get a hold of them.

23:19.240 --> 23:24.120
And so if you go find, if you think that you could use nightly releases for something,

23:24.120 --> 23:28.760
then please go find the discourse thread and post because that way we make sure that whatever

23:28.760 --> 23:31.880
solution we have incorporates your use cases as well.

23:31.880 --> 23:36.920
And I've already discovered a few that I hadn't thought of, so that's been a useful process.

23:36.920 --> 23:40.120
We're organizing a workshop for new GHC contributors.

23:40.120 --> 23:45.720
So if you'd like to get started on hacking GHC but don't yet know how, then you should

23:45.720 --> 23:51.040
come to ZeroHack three days before ZeroHack and get an introduction.

23:51.040 --> 23:52.520
This is still an in-progress thing.

23:52.520 --> 23:54.760
We don't have a specific speaker list yet.

23:54.760 --> 23:59.760
Simon's definitely talking, but the rest is depending a little bit on a survey that's

23:59.760 --> 24:00.760
out there.

24:00.760 --> 24:03.560
So if you fill out the survey and say what you're most interested in learning to hack

24:03.560 --> 24:09.280
on, that'll affect the people who we invite to come and present parts of GHC for potential

24:09.280 --> 24:11.280
contributors.

24:11.280 --> 24:14.720
And also if you know how to run a hybrid event well, get a hold of me.

24:14.720 --> 24:15.720
I don't.

24:15.720 --> 24:20.320
I'm going to do my best, but if you could spare 45 minutes on the phone with me to tell

24:20.320 --> 24:23.120
me all the things I'm about to do wrong, that would be very valuable.

24:23.120 --> 24:25.900
So email me if that's a thing.

24:25.900 --> 24:27.840
We have two big working groups at the moment.

24:27.840 --> 24:35.520
We have a technical working group which evaluates various project proposals and especially proposals

24:35.520 --> 24:40.960
where Haskell Foundation administrative time or money would be useful.

24:40.960 --> 24:45.000
And so if you have something like that, please come and give us a proposal and we'll discuss

24:45.000 --> 24:50.600
it and try to refine it and eventually hopefully fund it or administer it or otherwise carry

24:50.600 --> 24:51.600
it out.

24:51.600 --> 24:57.200
We've also used this to host a community RFC process in cases where that's needed because,

24:57.200 --> 24:59.620
as I said earlier, there isn't really anyone who owns Haskell.

24:59.620 --> 25:03.640
So it seems as good a forum as any to have some of those discussions.

25:03.640 --> 25:08.680
And we have a stability working group which meets every two weeks and we're looking at

25:08.680 --> 25:14.400
which involves GHC developers and academics and others and we're trying to find ways to

25:14.400 --> 25:21.560
reduce the difficulty posed by updates to the Haskell ecosystem.

25:21.560 --> 25:26.120
And that's going to be some combination of social and technical means over time.

25:26.120 --> 25:28.640
Lots of small stuff.

25:28.640 --> 25:30.600
Thank you for listening.

25:30.600 --> 25:34.560
If you want to get a hold of me, I'm David at Haskell.foundation or I'm Kristansen on

25:34.560 --> 25:36.120
Matrix.org.

25:36.120 --> 25:39.360
And then the Haskell Foundation itself is Haskell.foundation.

25:39.360 --> 25:43.120
You can also look at Haskell.org to find out more about Haskell itself.

25:43.120 --> 25:48.120
We have, we're on Mass on Twitter as well and the names are up there.

25:48.120 --> 25:51.280
And I got, I believe, a few minutes, five minutes left.

25:51.280 --> 25:53.800
So if there's any questions.

25:53.800 --> 25:58.040
Oh, that's, yeah, thanks.

25:58.040 --> 26:01.040
Thank you.

26:01.040 --> 26:14.360
That was a great talk.

26:14.360 --> 26:20.880
So I observe what Haskell.foundation does and there's a lot of great initiatives and

26:20.880 --> 26:22.680
I think it pushed the language forward.

26:22.680 --> 26:29.960
But I'm wondering, so does Haskell.foundation measure somehow how popular Haskell is?

26:29.960 --> 26:33.560
Every other month there is a threat that Haskell is dying.

26:33.560 --> 26:42.640
So I was just wondering, do you have some concrete data that would say otherwise, that

26:42.640 --> 26:47.080
I don't know, a job posting are growing or the number of companies that are using Haskell

26:47.080 --> 26:50.440
are growing or the community is growing somehow?

26:50.440 --> 26:55.480
Or do you gather some data like this?

26:55.480 --> 26:56.480
Not particularly, no.

26:56.480 --> 27:04.120
I haven't found a good way to do it that I think is gonna be more signal than noise.

27:04.120 --> 27:05.600
I don't think Haskell is dying.

27:05.600 --> 27:10.560
I think that there's a couple of people who feel that way and they're entitled to that

27:10.560 --> 27:13.340
feeling and they say it regularly.

27:13.340 --> 27:16.320
But I don't think that that's a commonly held feeling is my impression.

27:16.320 --> 27:20.200
I get the impression that that's more a feeling that a couple of people have.

27:20.200 --> 27:25.000
I know that I keep hearing about new users of Haskell who I'd never expected because

27:25.000 --> 27:28.120
they're not very public about it.

27:28.120 --> 27:30.240
Hackage continues to grow.

27:30.240 --> 27:35.880
I see job posts on a regular basis which I didn't see a couple of years ago.

27:35.880 --> 27:41.960
Those are all sort of anecdotal qualitative kind of things.

27:41.960 --> 27:48.240
If you have ideas about non-misleading measurements that are sort of cheap enough that I can do

27:48.240 --> 27:54.560
them being essentially one person with a not tiny but not infinite budget then.

27:54.560 --> 27:55.560
Yeah, definitely.

27:55.560 --> 27:56.560
I'm not saying it's easy.

27:56.560 --> 28:01.520
I was just wondering if you maybe do stuff like this.

28:01.520 --> 28:07.120
As you could see from my background, it's very much on the programming language side

28:07.120 --> 28:10.440
rather than the market research side.

28:10.440 --> 28:13.040
If you do have good resources, I'd love to hear them.

28:13.040 --> 28:14.040
Sure.

28:14.040 --> 28:15.040
Yeah, thanks.

28:15.040 --> 28:21.240
Okay.

28:21.240 --> 28:26.080
Any more questions?

28:26.080 --> 28:27.080
It seems not.

28:27.080 --> 28:28.080
Thank you very much, David.

28:28.080 --> 28:45.720
Thanks.

WEBVTT

00:00.000 --> 00:10.940
Please welcome Hugo, who is going to do the next talk on code-reloading techniques in

00:10.940 --> 00:13.940
Python.

00:13.940 --> 00:27.820
Hello, everybody, and I'm glad to speak to you, and I hope I will have a good presentation.

00:27.820 --> 00:33.560
You will be happy about replacing Jonathan's talk, who could make it today.

00:33.560 --> 00:38.280
So we'll be talking about hot code-reloading in Python and a few different methods to do

00:38.280 --> 00:39.280
this.

00:39.280 --> 00:40.640
A short introduction.

00:40.640 --> 00:47.080
So I discovered Python in Linux in 2003, and I think I've attended almost every Fuzz

00:47.080 --> 00:53.960
them since 2004, and I really, I think Fuzz them made me, and I'm really happy to be speaking

00:53.960 --> 00:58.300
here to be here with you.

00:58.300 --> 01:01.760
In Python, there are a lot of things that we can do, and I'm really amazed by all the

01:01.760 --> 01:07.080
flexibility of Python and the access to the internals, and when I started discovering

01:07.080 --> 01:13.320
Python, I was 16-year-old, and I discovered you could play with exec and socket and combine

01:13.320 --> 01:19.780
them and make Trojan horse, and I found that really cool.

01:19.780 --> 01:23.680
Many years later, I discovered people were basically taking the same idea to make something

01:23.680 --> 01:28.380
called Jupyter Notebook you may have heard about, something where you receive Python

01:28.380 --> 01:34.400
code over the Internet and then you just execute it somewhere.

01:34.400 --> 01:37.840
And I really liked tinkering with Python.

01:37.840 --> 01:46.080
I also created my own web framework before they were Django and most popular ones that

01:46.080 --> 01:51.760
are more mature now, and one thing I discovered is you could use exec file to execute code

01:51.760 --> 01:55.360
that's in a Python file in a specific environment.

01:55.360 --> 01:59.900
So you have these environment variables in your Python code, and you can override them.

01:59.900 --> 02:05.960
So when you execute code from a Python file in a specific environment, you pass the environment

02:05.960 --> 02:10.600
in the dictionary above here, it can only access these variables.

02:10.600 --> 02:16.400
So you could restrict the access to imports, the access to a lot of things, but Python

02:16.400 --> 02:21.920
is Python, and there are always ways to escape this by accessing the properties of objects,

02:21.920 --> 02:29.920
so there's no safe way to run Python codes contained, like you could use Lua or something.

02:29.920 --> 02:36.760
When you have Python code, it always has access to everything that the CPython interpreter

02:36.760 --> 02:40.960
has access to.

02:40.960 --> 02:46.440
And so I will be talking about code reloading, which is a process of replacing part of a

02:46.440 --> 02:48.720
program with a new version.

02:48.720 --> 02:54.440
It focuses on changes in the source code, a term mostly used for interpreted languages,

02:54.440 --> 02:56.820
and you have two ways to do code reloading.

02:56.820 --> 03:01.920
You have code reloading, which means that you are stopping the process and you're restarting

03:01.920 --> 03:06.800
it, and you have hot code reloading where you keep the process running and you just

03:06.800 --> 03:11.840
patch it while it's running, keeping the state.

03:11.840 --> 03:17.720
As a small analogy, cold code reloading, you can really switch anything you want, but it

03:17.720 --> 03:18.720
takes a while.

03:18.720 --> 03:23.800
Hot code reloading, you just do it while it's going on.

03:23.800 --> 03:29.360
Cold code reloading is the most popular technique for code reloading in Python, so you stop

03:29.360 --> 03:36.520
and restart the entire process, and it's easy, reliable, but you lose state.

03:36.520 --> 03:39.360
So getting it back might take a while.

03:39.360 --> 03:47.040
It's very popular in web frameworks because all of the state is stored in databases.

03:47.040 --> 03:51.160
And you also have the easiest way to do code reloading that you all used.

03:51.160 --> 03:53.680
Control C, app enter.

03:53.680 --> 03:59.200
I still end up using it so often.

03:59.200 --> 04:00.760
And there's tooling to do that.

04:00.760 --> 04:06.520
If you look at how Django and Flask do it, they have good examples, Django source code

04:06.520 --> 04:10.640
especially is very easy to understand, very clear.

04:10.640 --> 04:14.640
And the main part of it ends up being this part here.

04:14.640 --> 04:23.080
So it has this object called a reloader and will run this function, and it will basically

04:23.080 --> 04:26.360
run your main app, your main process in a thread.

04:26.360 --> 04:31.800
And when there is something that has changed, it looks at changes in the file system, when

04:31.800 --> 04:37.600
it has changed, it will restart your program in that thread.

04:37.600 --> 04:42.720
So it's basically running all of Django in a thread, and that allows it to stop it, reimport

04:42.720 --> 04:45.800
everything, and then restart that part of the process.

04:45.800 --> 04:50.560
So you still have one process running, only one process, but it's running all of your

04:50.560 --> 04:54.360
application in a background thread that's managed by this reloader object.

04:54.360 --> 04:59.640
That's what happens when you do a Python managed by run server using Django.

04:59.640 --> 05:02.480
Flask uses something very similar.

05:02.480 --> 05:07.080
The code is a bit easier to read when you look at Django.

05:07.080 --> 05:09.240
So really have a look at this auto reload from Django.

05:09.240 --> 05:13.800
It's a really good example on how to do things.

05:13.800 --> 05:18.240
And under the hood, there are different ways of detecting that a file has changed.

05:18.240 --> 05:23.000
Of course, you could just manually every second or every few seconds look if there are changes

05:23.000 --> 05:25.720
on the file system from a thread again.

05:25.720 --> 05:31.400
But there are ways on different operating systems to have direct notifications, direct

05:31.400 --> 05:33.960
signals when something is happening.

05:33.960 --> 05:39.560
On Linux, you have the inotify API provided by the kernel that basically gives events

05:39.560 --> 05:44.040
so any process can look for changes on files.

05:44.040 --> 05:49.160
And the very simple way to use it in a shell is just to use this inotify to wait.

05:49.160 --> 05:54.280
So you can just say I'm waiting for anything to happen in this directory and then when

05:54.280 --> 05:57.040
something happens, you just do something.

05:57.040 --> 06:03.120
In Python, you have the inotify binding to this inotify library and you have watchdog.

06:03.120 --> 06:08.800
Watchdog is a multi-platform library in Python to do exactly this.

06:08.800 --> 06:15.000
So it works on both Linux, Mac OS, Windows, BSDs.

06:15.000 --> 06:17.800
Not micro Python.

06:17.800 --> 06:20.840
And the interface is quite simple.

06:20.840 --> 06:27.760
A bit of a classy overhead but you can basically schedule an observer and start it and it will

06:27.760 --> 06:31.600
use callbacks when something is modified.

06:31.600 --> 06:36.640
So you can do whatever you want to do at that moment.

06:36.640 --> 06:37.640
Hot code reloading.

06:37.640 --> 06:43.740
That's something that's less common, especially in Python, but in general it's less common.

06:43.740 --> 06:49.060
It has drawbacks because of the states, it can lead to inconsistent states.

06:49.060 --> 06:53.600
But it also has advantages because sometimes it's states that you're interested in, you're

06:53.600 --> 06:59.240
making a video game and you have an NPC and you have to test it, you have to go back to

06:59.240 --> 07:02.600
that same space, recreate the whole behavior.

07:02.600 --> 07:06.920
It's hard to tweak the behavior live when you have sometimes a WebSocket or socket connections

07:06.920 --> 07:09.440
that you have to keep open.

07:09.440 --> 07:15.120
When starting your program takes a while because you're initializing a bunch of things, then

07:15.120 --> 07:20.120
it can be quite useful to do hot code reloading.

07:20.120 --> 07:23.320
And there are two challenges if you want to do this.

07:23.320 --> 07:28.520
One of the challenges is to find and load the new code and then you need to replace

07:28.520 --> 07:32.440
the references where that code is used in the code.

07:32.440 --> 07:35.040
In your memory.

07:35.040 --> 07:36.480
And it's not a new thing.

07:36.480 --> 07:38.400
Other languages do it.

07:38.400 --> 07:44.560
Java especially, they have a way to use the debugger and you can replace a version of

07:44.560 --> 07:51.560
a class file which is the PYC of Java, the compiled file of Java.

07:51.560 --> 07:57.400
You can replace it from your ID directly while it's running using the debugger.

07:57.400 --> 08:00.920
The only concern is that the interface of the class, the methods, the properties of

08:00.920 --> 08:03.640
that class may not change.

08:03.640 --> 08:11.280
In C++ you can do hot code reloading by using DLLs, dynamic link libraries or shared libraries.

08:11.280 --> 08:14.280
That allows you to do hot code reloading.

08:14.280 --> 08:22.160
So it's possible to replace DLLs and do hot code reloading in C++ as well.

08:22.160 --> 08:28.440
If you want to do it in pure Python, there are three main ways to execute code from Python.

08:28.440 --> 08:29.760
You have the import module.

08:29.760 --> 08:34.720
If you import something, it will execute everything in that file.

08:34.720 --> 08:40.480
If you were at the micro Python tool, sometimes you import a blink and it runs it.

08:40.480 --> 08:46.020
That's a weird feature of Python, but it basically just executes everything there.

08:46.020 --> 08:50.400
You can use exec, this function that takes a string and then it will parse the Python

08:50.400 --> 08:55.240
code from that string and execute it.

08:55.240 --> 09:00.160
Basically in a specific environment you can add specific variables to the environment

09:00.160 --> 09:01.160
of this execution.

09:01.160 --> 09:07.160
And you have eval that's basically evaluating a Python expression and getting the result

09:07.160 --> 09:08.320
out of it.

09:08.320 --> 09:13.800
So if you want to make a small shell or ask for a user input and use eval, the user can

09:13.800 --> 09:18.920
type any Python code he wants, which could lead to security issues if that's interested

09:18.920 --> 09:25.480
in but it can be quite nice if you want the user to be able to use powers of numbers with

09:25.480 --> 09:33.280
two stars and any Python supported expression.

09:33.280 --> 09:40.440
So if you want to use the import base, if you use import, something that you can use

09:40.440 --> 09:45.380
is this import and you can reload a Python module that you imported.

09:45.380 --> 09:51.240
So if you just have some code that's importing a module, you can reload that module.

09:51.240 --> 09:57.600
But all the references you have will still be to, if you have a reference or a function

09:57.600 --> 10:02.320
inside that module, it will still be a reference to the old function, to the bytecode of the

10:02.320 --> 10:04.760
old function, not the updated version.

10:04.760 --> 10:10.880
However, if your module is named module and you have module.my function and you always

10:10.880 --> 10:16.480
call it module.my function, then when you reload it, if it can access a new reference

10:16.480 --> 10:19.380
to the new loaded module, then this will work.

10:19.380 --> 10:27.400
So it's quite an easy way to do reloading of code if all your references are not inside

10:27.400 --> 10:38.800
the module but reference always through the whole module.my function.

10:38.800 --> 10:45.040
One issue you have if you use this import base reloading is sometimes people write code

10:45.040 --> 10:47.680
in the middle of the Python file.

10:47.680 --> 10:53.080
You just have a small script that's containing a while through or you have a connection to

10:53.080 --> 10:58.320
a database that takes ten seconds and that's blocking and every time you're reloading,

10:58.320 --> 11:05.280
this will be in your way every time and will slow you down.

11:05.280 --> 11:12.520
Another way you can do Python code reloading is to just take control yourself of the execution

11:12.520 --> 11:13.520
of the refreshing.

11:13.520 --> 11:22.080
So if you have some Python code here, you can execute the code above within the environment

11:22.080 --> 11:24.920
of this module, module.py.

11:24.920 --> 11:32.360
So if I have a function, my sum in module.py, by running this, I can basically refresh it

11:32.360 --> 11:43.640
and say, okay, now I want to replace module.mysum with the new function, the new code here.

11:43.640 --> 11:48.560
And so if you want to wrap everything together, what can be quite interesting is to have a

11:48.560 --> 11:49.560
proxy.

11:49.560 --> 11:54.040
So instead of manipulating directly the function you're interested in, when you want to be

11:54.040 --> 11:58.240
able to reload something, you don't pass around a reference to that function but to a proxy

11:58.240 --> 12:01.120
that can change its own reference.

12:01.120 --> 12:06.120
That way you can reload something and then everything that's using it is not using my

12:06.120 --> 12:13.840
function directly, it's using a proxy to my function and you can override the code attributes.

12:13.840 --> 12:19.840
So here you have this proxy here and it's a proxy to work in progress.

12:19.840 --> 12:24.920
It keeps this reference to the function and then every time you call the proxy, so the

12:24.920 --> 12:30.680
instance of this proxy, it will basically just forward every argument to the function

12:30.680 --> 12:32.400
and return the result.

12:32.400 --> 12:38.200
So you can just proxy a call to a function this way with a mutable reference to the function

12:38.200 --> 12:39.200
here.

12:39.200 --> 12:45.160
This mutable reference you can change later.

12:45.160 --> 12:47.200
You can do something similar with classes.

12:47.200 --> 12:53.760
So if you look at a Python class, an instance of a class in Python, it basically has two

12:53.760 --> 12:57.480
very important attributes, class and dict.

12:57.480 --> 13:01.880
Class is a reference to the class that it inherits from.

13:01.880 --> 13:08.120
So if you instantiate a class, every instance has a reference to the class it instantiates

13:08.120 --> 13:13.320
and that's reference because it's Python is mutable so you can change the underscore and

13:13.320 --> 13:17.520
the first class of your object and forward it to another class and bam, your object is

13:17.520 --> 13:20.480
now from another class.

13:20.480 --> 13:27.640
I see some people don't like this idea.

13:27.640 --> 13:30.400
It's Python with great power, great responsibility.

13:30.400 --> 13:33.400
You can do very nasty things in Python.

13:33.400 --> 13:37.720
Please do not unless it really makes sense.

13:37.720 --> 13:42.680
And you have this underscore, underscore dict object which contains all the properties that

13:42.680 --> 13:44.720
are part of your instance.

13:44.720 --> 13:51.240
So if you do my instance dot a, it will look, okay, is a defined inside underscore, underscore

13:51.240 --> 13:52.240
dict?

13:52.240 --> 13:53.880
Yes, it will just return that.

13:53.880 --> 14:00.240
No, then it will look in the class and on the parents of that class for this attribute

14:00.240 --> 14:06.240
a, attribute or method because all the methods and the attributes are in this underscore,

14:06.240 --> 14:09.280
underscore dict part.

14:09.280 --> 14:15.880
So in practice if you have this, an object, an instance and you replace the underscore

14:15.880 --> 14:22.080
underscore class and you keep the underscore, underscore dict, then you are switching, reloading

14:22.080 --> 14:28.000
what class that instance is part of and then if that new version, new class is the new

14:28.000 --> 14:37.120
version of your class, you just reloaded live the instance and all the code of your class.

14:37.120 --> 14:43.520
So this allows you to basically do hot code reloading of the class of all the instances

14:43.520 --> 14:46.120
if you patch this.

14:46.120 --> 14:50.480
And then the last thing that's useful in Python is the weak references.

14:50.480 --> 14:56.240
So weak references allow you to keep a reference to an object but still allow it to be garbage

14:56.240 --> 14:57.560
collected.

14:57.560 --> 15:04.400
So when you have a reference, the garbage collector uses a reference counting and also

15:04.400 --> 15:12.040
a regular collection for circular import, circular references, but when you keep a weak

15:12.040 --> 15:18.800
reference to something, then it will not increase that garbage counting counter, so it will

15:18.800 --> 15:27.240
allow the object that's targeted to be garbage collected at some point.

15:27.240 --> 15:37.920
And so you have this weak ref library in Python to have a weak reference to something.

15:37.920 --> 15:42.560
You can get the source codes of the new source code using the inspect module in Python.

15:42.560 --> 15:47.080
You have inspect.get source of my function, it will just return you directly the source

15:47.080 --> 15:54.160
code as a string of your function and inspect.get source of a class does exactly the same thing,

15:54.160 --> 16:02.280
so it's very easy to get access to the source code of any Python function or class.

16:02.280 --> 16:08.320
And if you put it all together, you can say, okay, I have my source code, I just get the

16:08.320 --> 16:14.920
new source code of my targets, which uses inspect.get source.

16:14.920 --> 16:22.480
Then I have some environment, the environment of the module and some new environment with

16:22.480 --> 16:28.840
the variables created by the code, and I just execute the source code within the environment

16:28.840 --> 16:34.600
of the module so you can access all the imports and all the variables defined in that module,

16:34.600 --> 16:40.200
and I have these locals so that every variable created during this execution is available

16:40.200 --> 16:41.920
within this namespace.

16:41.920 --> 16:52.440
And I just returned the field from this dictionary here that's named the same as my target.

16:52.440 --> 16:57.080
And now I just hot code reloaded it.

16:57.080 --> 17:02.920
Putting it together, I made a small module in Python where I added this auto reload feature

17:02.920 --> 17:10.440
so you can decorate any function and it will reload it automatically while it's running.

17:10.440 --> 17:12.240
We can have a look at a small demo here.

17:12.240 --> 17:18.640
So I have some Python code with a global state and two functions that are processing something.

17:18.640 --> 17:23.120
And I will just I can just run this.

17:23.120 --> 17:35.760
But if I want to be able to live code, I need to I can just put reload.

17:35.760 --> 17:39.440
I'll just mark these two methods as auto reload.

17:39.440 --> 17:40.720
So there's no magic.

17:40.720 --> 17:44.680
You have to mark them as reloadable.

17:44.680 --> 17:46.080
Too much magic is bad.

17:46.080 --> 17:49.680
There is already enough.

17:49.680 --> 17:53.280
And so here on the right side, you see that it's executing this program.

17:53.280 --> 17:56.320
But I don't really like the way it's printing the value.

17:56.320 --> 18:00.880
So I want something more English, like value is.

18:00.880 --> 18:06.240
And this complex processing thing, it's yeah, maybe it was a 20 I wanted.

18:06.240 --> 18:09.680
So now I'm multiplying everything by 20.

18:09.680 --> 18:12.280
Or it was a negative value.

18:12.280 --> 18:14.040
So it's changing sign all the time.

18:14.040 --> 18:18.000
And this is just while running, I can just swap it directly.

18:18.000 --> 18:20.640
And as you can see, the program is running.

18:20.640 --> 18:24.000
It's maintaining a state, but you can still change the code.

18:24.000 --> 18:29.560
If you do a typo, then it will just show you that there is an invalid syntax and wait for

18:29.560 --> 18:42.160
you to fix it to keep running again.

18:42.160 --> 18:43.600
And you can just pip install it.

18:43.600 --> 18:44.600
It's on pipe UI.

18:44.600 --> 18:53.160
So if you end up in this situation where your state is complex to get in Python and you

18:53.160 --> 18:58.920
want to work on something, you are not doing web with all your state in a database, have

18:58.920 --> 18:59.920
a look at reloader.

18:59.920 --> 19:10.320
It's a simple way to just hot code reload and tweak your code while it's running.

19:10.320 --> 19:13.920
You can find the slides on this URL.

19:13.920 --> 19:23.320
Thanks for watching.

19:23.320 --> 19:31.880
I believe we have five minutes for questions or remarks if you didn't like it.

19:31.880 --> 19:35.520
So if you have any questions, don't hesitate.

19:35.520 --> 19:36.520
Yes?

19:36.520 --> 20:00.800
So you

20:00.800 --> 20:18.800
can use

20:18.800 --> 20:43.040
of

20:43.040 --> 20:46.040
Okay, that's good to look at, thank you.

20:46.040 --> 20:49.040
Another thing is that there is a library called opcodes,

20:49.040 --> 20:52.040
which has a safe eval function,

20:52.040 --> 20:56.040
which allows you to define an allow list of opcodes,

20:56.040 --> 21:01.040
like byte for byte for opcodes, which are allowed.

21:01.040 --> 21:02.040
So there is a...

21:02.040 --> 21:05.040
This is much more tricky, and you shouldn't drop it.

21:05.040 --> 21:09.040
Okay, so there is a library that allows you to do safe evaluation

21:09.040 --> 21:12.040
by filtering the opcodes that the code is allowed to run.

21:12.040 --> 21:13.040
That's what you're saying.

21:13.040 --> 21:16.040
Okay, that's quite interesting as well, yeah.

21:16.040 --> 21:17.040
Pawn tools.

21:17.040 --> 21:20.040
It's not really designed to be used on production.

21:20.040 --> 21:25.040
It's like very used for like CTF security challenges.

21:25.040 --> 21:27.040
So how do you calculate it?

21:27.040 --> 21:28.040
Phone calls?

21:28.040 --> 21:29.040
Pawn tools.

21:29.040 --> 21:30.040
Pawn tools.

21:30.040 --> 21:31.040
Pwn tools.

21:31.040 --> 21:32.040
Oh, okay.

21:32.040 --> 21:34.040
Pwn tools.

21:34.040 --> 21:35.040
Yeah.

21:35.040 --> 21:36.040
Okay.

21:36.040 --> 21:40.040
I'm not sure I want to pip install something with Pwn inside.

21:40.040 --> 21:42.040
Yeah.

21:42.040 --> 21:44.040
Yeah.

21:44.040 --> 21:51.040
Any other question or remarks?

21:51.040 --> 21:53.040
Okay.

21:53.040 --> 21:54.040
Thank you.

21:54.040 --> 22:12.040
Thank you.

WEBVTT

00:00.000 --> 00:01.000
Welcome, Max.

00:01.000 --> 00:04.000
Can you hear me okay?

00:04.000 --> 00:05.000
Awesome.

00:05.000 --> 00:18.040
Hugo has warned me if I step here that it will no longer pick me up on the camera.

00:18.040 --> 00:21.160
I like to walk, so I'm going to do a little bit just to get out of my system if that's

00:21.160 --> 00:22.160
okay.

00:22.160 --> 00:28.320
I want to talk to you today about malware on the PyPy on the Python package index.

00:28.320 --> 00:31.240
More importantly than that, I'm going to run some malware on my own machine to show you

00:31.240 --> 00:34.320
what happens.

00:34.320 --> 00:37.320
If I do this, you don't have to, and you'll know what the dangers are, so you don't have

00:37.320 --> 00:38.320
to worry.

00:38.320 --> 00:41.600
I'm going to go here so people, if there's a live stream and I'm popular enough for anyone

00:41.600 --> 00:42.960
to look at it, they'll see me.

00:42.960 --> 00:43.960
Hello, everybody.

00:43.960 --> 00:45.960
I think we might be going to a normal mic stream here.

00:45.960 --> 00:47.960
How do I make it off?

00:47.960 --> 00:48.960
I don't know.

00:48.960 --> 00:49.960
I'm just going to hide it.

00:49.960 --> 00:50.960
I'll put it there.

00:50.960 --> 00:51.960
It's all good.

00:51.960 --> 00:52.960
Right.

00:52.960 --> 00:57.600
My name's Max, and I'm a developer advocate at Vonage, this company here, up there on the

00:57.600 --> 00:58.600
side.

00:58.600 --> 00:59.600
Hearing something?

00:59.600 --> 01:00.600
Okay.

01:00.600 --> 01:03.240
What I want to do first of all is just explain, because these guys have paid for me to come

01:03.240 --> 01:04.240
here.

01:04.240 --> 01:05.240
They've paid for my flight.

01:05.240 --> 01:07.760
I've come from the UK, so I'm going to do the bit where I tell you what they do.

01:07.760 --> 01:11.040
What we do is we make communications APIs.

01:11.040 --> 01:16.000
Things like SMS, voice calls, video chats, two-factor authentication, as a service, on

01:16.000 --> 01:17.000
demand.

01:17.000 --> 01:18.160
That's what we do, basically.

01:18.160 --> 01:20.880
What I actually do is I manage the Python tooling for that.

01:20.880 --> 01:25.160
In my role, I've done quite a lot of work to actually understand how I can not get myself

01:25.160 --> 01:28.920
screwed over with malware, which is where this kind of talk comes from.

01:28.920 --> 01:33.080
Unfortunately, my research of malware started to annoy some people.

01:33.080 --> 01:37.320
This is a colleague I actually work with who no longer trusts anything I send him, because

01:37.320 --> 01:39.600
he knows I've been researching malware and he gets annoyed now.

01:39.600 --> 01:41.480
He's like, hey, don't send me that weird stuff.

01:41.480 --> 01:43.440
Unfortunately, he's like, come on, man.

01:43.440 --> 01:45.640
Don't do this to me.

01:45.640 --> 01:49.200
He said this is not going to be a slide in your talk, and I was like, yes, it is.

01:49.200 --> 01:51.160
This is going to be a slide in my talk.

01:51.160 --> 01:52.840
That's what's going to happen.

01:52.840 --> 01:57.840
He didn't like it, because I'm going into the Vonage Python SDK, but I made a version

01:57.840 --> 02:00.600
called not the Vonage Python SDK that I uploaded to PyPy.

02:00.600 --> 02:02.560
I'm going to show you what happens if you install it.

02:02.560 --> 02:05.280
Please do not install it unless you want to have a bad time.

02:05.280 --> 02:07.640
It is live, and you could literally do it right now.

02:07.640 --> 02:09.480
Please don't, again, but you could.

02:09.480 --> 02:10.480
Maybe you should.

02:10.480 --> 02:11.560
It's up to you.

02:11.560 --> 02:14.200
That's where we are with this.

02:14.200 --> 02:17.600
Before we get there, that's the foreshadowing bit where I say, look, this is Chekhov's malware.

02:17.600 --> 02:18.600
We set it up at the start.

02:18.600 --> 02:19.600
We hit it at the end.

02:19.600 --> 02:20.600
That's what we do.

02:20.600 --> 02:21.600
I've just also hit that.

02:21.600 --> 02:22.600
That's a literal punch.

02:22.600 --> 02:25.400
Okay, so first question for you.

02:25.400 --> 02:28.120
Does anybody remember this website, this old font?

02:28.120 --> 02:29.120
Remember that?

02:29.120 --> 02:30.120
Quick question, yes?

02:30.120 --> 02:32.120
Anyone remember that?

02:32.120 --> 02:35.320
Who thought that said Google.com?

02:35.320 --> 02:36.320
It didn't.

02:36.320 --> 02:37.320
It didn't say Google.com.

02:37.320 --> 02:38.320
You're wrong.

02:38.320 --> 02:39.320
You're crazy.

02:39.320 --> 02:40.320
It says gobble.com.

02:40.320 --> 02:46.680
Actually, this was a real website that in the mid-2000s you might accidentally visit

02:46.680 --> 02:49.480
when you were typing in Google.com into your browser.

02:49.480 --> 02:51.400
If you did, I can see some nodding here.

02:51.400 --> 02:53.160
I can see some people might know about this website.

02:53.160 --> 02:57.600
But what would happen is it would do a drive-by download of malware onto your machine, and

02:57.600 --> 03:00.320
it would basically screw over your machine.

03:00.320 --> 03:04.320
This was one of the really prominent examples in the early 2000s of typo squatting, where

03:04.320 --> 03:07.640
just making one typo would absolutely destroy you.

03:07.640 --> 03:11.560
What's really nice is I managed to get some archive footage of a machine being infected

03:11.560 --> 03:13.200
with the gobble.com malware.

03:13.200 --> 03:15.560
I'll show it to you now.

03:15.560 --> 03:19.560
Here's the machine, and here it is after malware has actually infected it.

03:19.560 --> 03:28.040
I'm just going to drink some water because I'm on the line.

03:28.040 --> 03:31.440
What we're going to talk about today, hopefully we're not going to run on because I see panic

03:31.440 --> 03:32.840
looks over there from Hugo.

03:32.840 --> 03:33.840
Thank you very much.

03:33.840 --> 03:37.560
In this talk, we're going to talk about malware, as you might expect at this point, given the

03:37.560 --> 03:39.320
very obvious foreshadowing.

03:39.320 --> 03:42.720
We're also going to talk about how it gets onto your machine from PyPy.

03:42.720 --> 03:45.160
We're going to talk about how it gets made to look legitimate.

03:45.160 --> 03:49.100
We're going to talk about how it works, and we're going to talk about how we can protect

03:49.100 --> 03:54.360
ourselves from malware, as you can see now, because I'm reading my presenter view, not

03:54.360 --> 03:56.280
the actual view, and that's the issue.

03:56.280 --> 03:58.480
Does that sound good to everybody who's here?

03:58.480 --> 03:59.480
Open question.

03:59.480 --> 04:02.160
I'm seeing more of that, more energy.

04:02.160 --> 04:05.280
I love it.

04:05.280 --> 04:09.640
I feel like there's been some really very smart people giving talks, and I'm not that, so

04:09.640 --> 04:10.720
I'm just hyping you up.

04:10.720 --> 04:11.720
That's my job.

04:11.720 --> 04:13.560
I'm like that guy in the back who's like, come on, guys, let's get going.

04:13.560 --> 04:14.560
That's me.

04:14.560 --> 04:15.560
Okay.

04:15.560 --> 04:16.560
Quick disclaimer.

04:16.560 --> 04:19.280
First of all, I'm a freaking idiot, as you've now learned.

04:19.280 --> 04:21.840
More importantly, malware evolves and it changes.

04:21.840 --> 04:23.120
A lot of stuff happens here.

04:23.120 --> 04:24.680
A lot of stuff goes on.

04:24.680 --> 04:27.040
What I'm going to show you today is currently what I'm seeing.

04:27.040 --> 04:30.560
I'm reading a lot of research blogs and stuff from really smart people.

04:30.560 --> 04:35.720
But this is the kind of way that I'm... The malware I'll show you works in the way that

04:35.720 --> 04:38.680
it's currently working, but that will not be the same in a year's time, or a two year's

04:38.680 --> 04:39.680
time.

04:39.680 --> 04:43.240
This stuff is going to evolve, and it's going to change as bad actors get better at dealing

04:43.240 --> 04:45.240
with malware or hiding their malware.

04:45.240 --> 04:47.760
Also, I am not a security professional.

04:47.760 --> 04:48.760
I'm just a guy.

04:48.760 --> 04:49.760
I just woke up here.

04:49.760 --> 04:50.760
They just let me.

04:50.760 --> 04:51.760
I haven't even registered for this thing.

04:51.760 --> 04:55.440
I just showed up and was like, yeah, sure, we got a slot.

04:55.440 --> 05:01.080
Essentially, what I'm saying is the stuff that I found through my own research, but

05:01.080 --> 05:06.960
please don't yourself try and necessarily take what I say as gospel because I'm learning

05:06.960 --> 05:07.960
and sharing what I know.

05:07.960 --> 05:08.960
Is that cool?

05:08.960 --> 05:09.960
Is that cool with you?

05:09.960 --> 05:10.960
Yeah.

05:10.960 --> 05:11.960
Yeah.

05:11.960 --> 05:12.960
I love it.

05:12.960 --> 05:13.960
Okay.

05:13.960 --> 05:18.120
I'd like to show you an image I generated with Dolly because it's cute as heck.

05:18.120 --> 05:19.320
That's the only reason I included it.

05:19.320 --> 05:20.320
It's just really cute.

05:20.320 --> 05:21.320
Look at that little face.

05:21.320 --> 05:22.320
Look at those eyes.

05:22.320 --> 05:26.360
You get a 50% hit rate on eyes, which is why he's only showed one on there.

05:26.360 --> 05:27.600
But let's see.

05:27.600 --> 05:28.720
The cost of malware.

05:28.720 --> 05:31.720
This is important because this is big business.

05:31.720 --> 05:33.760
Malware is big business.

05:33.760 --> 05:38.400
The question, first of all... These stats I'm about to show you, they came from a research

05:38.400 --> 05:41.640
study that was done by the Poneman Research Institute last year.

05:41.640 --> 05:43.400
They studied 550 organizations.

05:43.400 --> 05:44.400
I've got to walk.

05:44.400 --> 05:45.400
I'm going to walk.

05:45.400 --> 05:49.280
I studied 550 organizations that have been infected with malware and how they dealt with

05:49.280 --> 05:50.280
that.

05:50.280 --> 05:52.280
They basically shared their findings.

05:52.280 --> 05:54.520
The question here, first of all, this is a genuine question.

05:54.520 --> 05:55.520
Shout out.

05:55.520 --> 05:59.560
What do you think the average cost of a data breach was for those organizations?

05:59.560 --> 06:00.560
Anybody shout at me.

06:00.560 --> 06:01.560
100,000.

06:01.560 --> 06:02.560
100,000.

06:02.560 --> 06:03.560
Keep going.

06:03.560 --> 06:04.560
300k.

06:04.560 --> 06:05.560
300k.

06:05.560 --> 06:06.560
Keep going.

06:06.560 --> 06:07.560
500k.

06:07.560 --> 06:08.560
Keep going.

06:08.560 --> 06:09.560
A million.

06:09.560 --> 06:10.560
A million.

06:10.560 --> 06:11.560
Keep going.

06:11.560 --> 06:12.560
A million.

06:12.560 --> 06:15.200
A million sold to the gentleman in the red shirt.

06:15.200 --> 06:19.520
4.35 million was the average cost of a data breach on PyPy.

06:19.520 --> 06:21.040
Sorry, that was not true.

06:21.040 --> 06:22.520
It's just a free breach in those organizations.

06:22.520 --> 06:24.120
I just did a spin and distracted myself.

06:24.120 --> 06:25.120
It's the blood flow.

06:25.120 --> 06:26.320
Another question here.

06:26.320 --> 06:28.880
This is slightly more relevant to our talk today.

06:28.880 --> 06:31.360
What percentage of breaches were caused by compromised credentials?

06:31.360 --> 06:32.640
I don't mean phishing scams.

06:32.640 --> 06:36.800
I mean some malware scraping your credentials and actually then using those credentials

06:36.800 --> 06:38.240
to infect a network.

06:38.240 --> 06:39.240
What percentage?

06:39.240 --> 06:40.240
70.

06:40.240 --> 06:41.240
70.

06:41.240 --> 06:42.240
A little lower.

06:42.240 --> 06:43.240
Three.

06:43.240 --> 06:44.240
Slightly higher.

06:44.240 --> 06:45.240
You know what?

06:45.240 --> 06:48.240
We can play this all day.

06:48.240 --> 06:49.240
I'll show you.

06:49.240 --> 06:50.240
It's 19%.

06:50.240 --> 06:53.600
About one in five breaches were caused by this exact thing.

06:53.600 --> 06:55.200
I love your enthusiasm as well.

06:55.200 --> 06:56.200
Dig it.

06:56.200 --> 06:57.200
I'm back here.

06:57.200 --> 06:59.960
If anybody is watching this can see me.

06:59.960 --> 07:04.240
The question I'd like us to think about is what does this mean?

07:04.240 --> 07:05.240
Thanks.

07:05.240 --> 07:07.240
That was my water break.

07:07.240 --> 07:10.200
I'll tell you what I think it means.

07:10.200 --> 07:13.560
Developers are now a target for this type of malware.

07:13.560 --> 07:14.560
Developers are a real target.

07:14.560 --> 07:18.720
There are two reasons a malware actor might want to target a developer.

07:18.720 --> 07:19.720
Hello new people.

07:19.720 --> 07:20.720
Welcome.

07:20.720 --> 07:22.520
There are two reasons.

07:22.520 --> 07:25.160
The first one is because developers are installing something.

07:25.160 --> 07:27.760
They're going to have stuff on their machine to exploit.

07:27.760 --> 07:31.200
But also because those developers might make software for end users and we might be able

07:31.200 --> 07:32.720
to screw them as well.

07:32.720 --> 07:33.720
That's awesome.

07:33.720 --> 07:34.720
For the malware.

07:34.720 --> 07:35.720
It's not good for us.

07:35.720 --> 07:36.720
I'm just enthusiastic.

07:36.720 --> 07:37.720
I don't love crime.

07:37.720 --> 07:42.920
First of all, let's talk about remote code execution.

07:42.920 --> 07:43.920
This is the gold standard.

07:43.920 --> 07:47.000
If an actor gets into your machine, they execute code on there.

07:47.000 --> 07:48.000
What can they do?

07:48.000 --> 07:50.080
We've talked about credential stealing.

07:50.080 --> 07:51.680
Also ransomware.

07:51.680 --> 07:54.240
Also things like crypto mining and crypto diversion.

07:54.240 --> 07:59.440
I saw a piece of malware that would siphon off payments that would go to your Bitcoin

07:59.440 --> 08:03.520
or Ethereum wallet and put it to a different wallet address and put it to the attacker's

08:03.520 --> 08:04.520
wallet.

08:04.520 --> 08:06.720
There are some quite interesting use cases for this.

08:06.720 --> 08:09.200
Again, I don't love crime.

08:09.200 --> 08:13.120
What's important is you can be a target as a developer but also your end users can be

08:13.120 --> 08:14.120
targeted.

08:14.120 --> 08:18.600
If you make software that's important that someone is using, you might download a dependency

08:18.600 --> 08:22.880
that behaves as expected except for the fact that it includes vulnerabilities.

08:22.880 --> 08:25.280
That means your users could be vulnerable.

08:25.280 --> 08:30.120
Alternatively, it could use outdated versions of dependencies itself or outdated version

08:30.120 --> 08:31.400
of the package.

08:31.400 --> 08:35.480
That means essentially your users will be vulnerable as well because it hasn't, for

08:35.480 --> 08:38.720
example, received updates or if there's a CVE that's come out saying, look, here's a

08:38.720 --> 08:39.720
threat advisory.

08:39.720 --> 08:40.920
We need to patch this.

08:40.920 --> 08:42.480
You won't get that patch.

08:42.480 --> 08:45.240
These kinds of things can be done to actually get your end users as well.

08:45.240 --> 08:46.960
Does that make sense?

08:46.960 --> 08:47.960
Good.

08:47.960 --> 08:51.320
Because this is the most dramatic slide I put in, or one of them, which is this.

08:51.320 --> 08:52.320
Python developers beware.

08:52.320 --> 08:53.720
I'd like to set the scene for you here.

08:53.720 --> 08:54.720
It's Stormy Night.

08:54.720 --> 08:56.080
It's a castle in Romania.

08:56.080 --> 08:59.360
A man in ragged clothes is running away from the castle.

08:59.360 --> 09:00.360
Bats chasing after him.

09:00.360 --> 09:03.280
He hears the howling of wolves in the distance and then lightning flashes.

09:03.280 --> 09:04.280
He says, stay away.

09:04.280 --> 09:05.280
He screams at you with wild eyes.

09:05.280 --> 09:06.280
Stay away.

09:06.280 --> 09:10.320
Stay away from the Python package index.

09:10.320 --> 09:11.320
I didn't rehearse that.

09:11.320 --> 09:12.320
I'm kind of proud, actually.

09:12.320 --> 09:14.320
That went pretty well.

09:14.320 --> 09:15.320
Okay.

09:15.320 --> 09:16.320
Three bomb.

09:16.320 --> 09:17.320
Okay.

09:17.320 --> 09:18.320
So, right.

09:18.320 --> 09:21.520
PyPy is what we're talking about today.

09:21.520 --> 09:24.880
Because whilst it's awesome, and I don't really think you should stay away, it's an awesome

09:24.880 --> 09:26.480
way to get our dependencies right.

09:26.480 --> 09:27.880
I couldn't live without this thing.

09:27.880 --> 09:31.520
Well, I could literally live, but I couldn't do my work without this thing.

09:31.520 --> 09:36.320
So I want to talk to you about why maybe it's not the safest place in the world in certain

09:36.320 --> 09:37.400
contexts.

09:37.400 --> 09:42.080
So the first thing is that if we talk about typersquatting, if you mistype something,

09:42.080 --> 09:46.680
you misremember something, you put it in wrong, this is the case, for example, with goggle.com,

09:46.680 --> 09:49.200
where a user would type it in wrong and would get screwed over.

09:49.200 --> 09:51.600
They would get that malware on their machine.

09:51.600 --> 09:53.240
But the same exists with PyPy.

09:53.240 --> 09:57.320
Because if you type in pip install and then a package, if you type that wrong, it doesn't

09:57.320 --> 09:58.320
check.

09:58.320 --> 09:59.320
It doesn't say, oh, did you mean requests?

09:59.320 --> 10:01.400
It says, okay, yeah, I'll install asdfj.

10:01.400 --> 10:02.400
You know, that's fine, too.

10:02.400 --> 10:06.080
As long as that package exists, you will get it.

10:06.080 --> 10:07.160
And that can be concerning.

10:07.160 --> 10:08.440
So quick question here.

10:08.440 --> 10:12.280
What percentage of PyPy packages are estimated to actually potentially be using a typersquatting

10:12.280 --> 10:13.280
technique?

10:13.280 --> 10:14.280
Five.

10:14.280 --> 10:16.080
That's a good number.

10:16.080 --> 10:17.080
Any other guesses?

10:17.080 --> 10:18.080
40, 20.

10:18.080 --> 10:19.080
42.

10:19.080 --> 10:20.080
42.

10:20.080 --> 10:21.080
42.

10:21.080 --> 10:22.080
Very specific.

10:22.080 --> 10:23.080
I love it.

10:23.080 --> 10:24.080
41.9.

10:24.080 --> 10:25.080
About 3%.

10:25.080 --> 10:29.960
So a lot closer this time.

10:29.960 --> 10:33.440
You redeemed yourself or respect it.

10:33.440 --> 10:35.880
So yeah, basically a little smaller.

10:35.880 --> 10:38.020
But still, there's millions of packages on there.

10:38.020 --> 10:39.720
So this is a big ass number.

10:39.720 --> 10:43.400
This is a big old number.

10:43.400 --> 10:47.440
So the next question, this is maybe relevant to us now, is what percentage of PyPy downloads

10:47.440 --> 10:50.600
are estimated to be of typersquatting packages?

10:50.600 --> 10:53.600
So in percent, how many times does someone download something where they maybe didn't

10:53.600 --> 10:54.600
mean to?

10:54.600 --> 10:55.600
10%.

10:55.600 --> 10:56.600
10%.

10:56.600 --> 10:57.600
Two.

10:57.600 --> 10:58.600
One percent.

10:58.600 --> 10:59.600
One percent.

10:59.600 --> 11:00.600
Two percent.

11:00.600 --> 11:01.600
Four percent.

11:01.600 --> 11:02.600
Four percent.

11:02.600 --> 11:03.600
Sold.

11:03.600 --> 11:06.560
So 0.5 is about the right answer.

11:06.560 --> 11:09.240
So again, we're getting to people who I just saw, yes.

11:09.240 --> 11:10.240
And I respect that as well.

11:10.240 --> 11:14.160
I love the enthusiasm that we're generating here because that's really the content.

11:14.160 --> 11:18.600
You guys are the product, right?

11:18.600 --> 11:19.600
So yeah.

11:19.600 --> 11:21.920
But 0.5 is not much, but it's 1 in 200.

11:21.920 --> 11:25.960
And if you think about how many millions of things are downloaded from PyPy every day,

11:25.960 --> 11:26.960
that's a big deal.

11:26.960 --> 11:27.960
That's a really big number.

11:27.960 --> 11:32.440
Easy photo, good, because I need to move on.

11:32.440 --> 11:35.280
Let's talk about types of squats.

11:35.280 --> 11:38.760
In fact, this is a type of squat of typersquat, which is a pun, and I'm so proud of it.

11:38.760 --> 11:41.320
I didn't sleep all night.

11:41.320 --> 11:42.640
Types of squats that you can get.

11:42.640 --> 11:44.160
So misspelling, pretty obvious.

11:44.160 --> 11:46.840
You mean to type something, you hit the wrong button, something goes wrong.

11:46.840 --> 11:49.960
For example, these are all real typersquats from the request module.

11:49.960 --> 11:52.320
We all know the request module, I hope, I assume.

11:52.320 --> 11:53.720
You send HCP requests?

11:53.720 --> 11:54.720
Awesome.

11:54.720 --> 12:01.120
Well, you might send requests or requests or equests, any of those.

12:01.120 --> 12:06.640
And those are real actual pieces of malware that were found on PyPy.

12:06.640 --> 12:11.760
So if you had mistyped, they would be on your machine.

12:11.760 --> 12:13.560
Which isn't ideal for you.

12:13.560 --> 12:18.080
There's another type, which is confusion typersquats, where the user misremembers the name of a

12:18.080 --> 12:21.240
package, and there may be some separated confusion or ordering confusion.

12:21.240 --> 12:24.840
For example, easy install, maybe there's an underscore, maybe there's a hyphen, maybe there's

12:24.840 --> 12:27.000
nothing, maybe it's install easy, who knows, right?

12:27.000 --> 12:32.720
So in this case, you might end up with some malware, but there's also version and confusion,

12:32.720 --> 12:37.400
where basically you think, oh, this is a certain version, or maybe like, you know, beautiful

12:37.400 --> 12:38.920
Super 4, BS 4.

12:38.920 --> 12:40.480
That's the kind of thing where, what, it's BS 4?

12:40.480 --> 12:41.480
I never scraped before.

12:41.480 --> 12:42.480
Sure.

12:42.480 --> 12:43.480
Okay.

12:43.480 --> 12:47.560
So there are some examples where you wouldn't actually want, you know, you'd want to basically

12:47.560 --> 12:48.760
consider these different versions.

12:48.760 --> 12:52.600
So for example, this is a real piece of malware that I saw on PyPy, request 3.

12:52.600 --> 12:56.360
You might think, oh, a beta version of version 3 of request, yeah, okay, I'll get that, I'll

12:56.360 --> 12:58.320
get that, that's good, that's good stuff.

12:58.320 --> 12:59.320
Do not do that.

12:59.320 --> 13:00.320
Do not do that.

13:00.320 --> 13:01.320
Get the request module.

13:01.320 --> 13:02.320
Okay.

13:02.320 --> 13:03.320
Right.

13:03.320 --> 13:07.520
Let's play a little game, because apparently all we do now is audience participation.

13:07.520 --> 13:09.640
So, which of these is the malware?

13:09.640 --> 13:10.640
Choose now.

13:10.640 --> 13:11.640
Top one or bottom one?

13:11.640 --> 13:12.640
Hands up for top one.

13:12.640 --> 13:14.640
Hands up for the bottom one.

13:14.640 --> 13:15.640
Heck yeah.

13:15.640 --> 13:16.640
Damn right.

13:16.640 --> 13:17.640
Okay.

13:17.640 --> 13:19.200
Another one here.

13:19.200 --> 13:20.960
Libkill or Pykill, which is the malware?

13:20.960 --> 13:22.040
This is a Python package.

13:22.040 --> 13:23.040
Which is the Python package?

13:23.040 --> 13:24.040
Top one?

13:24.040 --> 13:25.040
Bottom one.

13:25.040 --> 13:26.040
Top one.

13:26.040 --> 13:27.040
Aye.

13:27.040 --> 13:30.920
Really split on that one.

13:30.920 --> 13:34.760
So I think the confusion there is because the actual package that Pykill calls, that's

13:34.760 --> 13:38.440
the system package, but actually the actual Python package is called Pykill, and that's

13:38.440 --> 13:41.760
why if you would guess wrong, it's really sensible that you might guess Libkill, but

13:41.760 --> 13:42.920
it's actually malware.

13:42.920 --> 13:47.200
So once you've got some malware, how does it look legit?

13:47.200 --> 13:52.860
So one way is that you can have dependencies where basically you have a package itself

13:52.860 --> 13:57.200
that is innocent, doesn't do anything bad, but it includes a package as a dependency

13:57.200 --> 13:58.200
that is malicious.

13:58.200 --> 14:02.760
And in this situation, you might have the original package behaving as normal, but actually

14:02.760 --> 14:06.520
that's just to avoid suspicion, but the actual second package is the malware.

14:06.520 --> 14:09.800
And we'll see an example of that very soon, and we'll see a live example depending on

14:09.800 --> 14:11.840
how good the Wi-Fi is in here.

14:11.840 --> 14:15.000
So there's also malicious commits over time.

14:15.000 --> 14:18.600
And this is another real attack vector.

14:18.600 --> 14:20.540
This is not so based on type of squatting.

14:20.540 --> 14:24.080
This is based on other elements of trust and abuse.

14:24.080 --> 14:26.120
So first of all, the project might be safe.

14:26.120 --> 14:27.240
Nothing wrong with it.

14:27.240 --> 14:28.720
But then builds up a user base.

14:28.720 --> 14:29.720
It's a useful package.

14:29.720 --> 14:30.800
People start to use it.

14:30.800 --> 14:33.640
And eventually maybe malware gets added.

14:33.640 --> 14:36.140
And this was the case with a package called FastAPI Toolkit.

14:36.140 --> 14:39.720
So if we've heard of FastAPI, there was a toolkit package which was adding some useful

14:39.720 --> 14:40.720
stuff.

14:40.720 --> 14:46.520
And the toolkit package eventually in version 0.27 actually added some malware, which has

14:46.520 --> 14:47.520
now been rolled back.

14:47.520 --> 14:50.160
But as I'll show you later, that doesn't mean you don't get that malware.

14:50.160 --> 14:52.960
I had an ooh, yeah.

14:52.960 --> 14:55.520
Ooh, ooh, it got me to, it shot me to my core.

14:55.520 --> 14:57.840
It shot me to the very depths of my soul.

14:57.840 --> 15:00.560
I've gone very Manchester all of a sudden.

15:00.560 --> 15:01.560
Right.

15:01.560 --> 15:05.000
The other way this thing can work, come in, come in, join us, join us.

15:05.000 --> 15:06.000
Move that way.

15:06.000 --> 15:07.480
It's the shift left principle.

15:07.480 --> 15:11.760
Okay, so the other way this can work is that a repo might get a new maintainer.

15:11.760 --> 15:16.640
So somebody who's starting to contribute to the repo in a useful way.

15:16.640 --> 15:18.240
And they say, hey, can I just get some admin access?

15:18.240 --> 15:19.240
I want to maintain this repo.

15:19.240 --> 15:20.240
I want to take something over.

15:20.240 --> 15:21.240
Okay, awesome.

15:21.240 --> 15:22.240
Sure.

15:22.240 --> 15:23.840
Oh, oh no, this person added malware.

15:23.840 --> 15:24.840
What a surprise.

15:24.840 --> 15:26.840
What a coincidence.

15:26.840 --> 15:28.720
And this is a genuine and real thing that does happen.

15:28.720 --> 15:30.120
Now I want to drink some more water.

15:30.120 --> 15:32.160
So I'm going to show you a pretty slide with a cute snake on it.

15:32.160 --> 15:33.160
It's now jacking.

15:33.160 --> 15:34.160
Look at the cute snake.

15:34.160 --> 15:37.920
I'm going to get hypnotized by it while I drink this water.

15:37.920 --> 15:39.280
Sick.

15:39.280 --> 15:40.280
Thank you.

15:40.280 --> 15:41.280
Right.

15:41.280 --> 15:42.280
Have we heard of star jacking?

15:42.280 --> 15:43.280
Is that something that we're familiar with?

15:43.280 --> 15:44.280
Is it a term?

15:44.280 --> 15:45.280
Shaken heads.

15:45.280 --> 15:46.280
Okay, perfect.

15:46.280 --> 15:47.280
Ten minutes left.

15:47.280 --> 15:48.280
Really?

15:48.280 --> 15:49.280
Oh no.

15:49.280 --> 15:50.280
Okay, we're going to be hauling.

15:50.280 --> 15:51.280
Okay, right.

15:51.280 --> 15:52.280
Star jacking.

15:52.280 --> 15:53.280
What is it?

15:53.280 --> 15:54.280
I'll tell you what it is.

15:54.280 --> 15:56.720
On PyPy, they don't verify the URL that you give as the project URL.

15:56.720 --> 15:59.920
And that means you can exploit that.

15:59.920 --> 16:00.920
So quick one here.

16:00.920 --> 16:01.920
I'll tell you the answer.

16:01.920 --> 16:03.480
We don't have time.

16:03.480 --> 16:04.800
First tool belt or tool belt request.

16:04.800 --> 16:08.040
One of these is an actual tooling package for request.

16:08.040 --> 16:09.040
It's the top one.

16:09.040 --> 16:10.040
The bottom one is malware.

16:10.040 --> 16:11.040
How do I know?

16:11.040 --> 16:12.040
Because I made it.

16:12.040 --> 16:13.040
And it's on PyPy.

16:13.040 --> 16:14.040
That's how I know.

16:14.040 --> 16:17.000
But we can see here if we look at the page on PyPy, look at these stars.

16:17.000 --> 16:18.000
Look at them.

16:18.000 --> 16:19.000
I've got 900 stars.

16:19.000 --> 16:20.000
I only did it yesterday.

16:20.000 --> 16:21.000
I'm that popular.

16:21.000 --> 16:22.000
And you can see this is a real thing.

16:22.000 --> 16:23.960
So if you go and check out a package, you can get screwed this way.

16:23.960 --> 16:26.720
So think about it when you look at this, right?

16:26.720 --> 16:28.120
It's a real problem.

16:28.120 --> 16:29.120
Okay.

16:29.120 --> 16:30.120
Right.

16:30.120 --> 16:31.120
We are pushing for time.

16:31.120 --> 16:32.520
So I'll say a typical chain of events that happens.

16:32.520 --> 16:36.960
A user installs a dodgy package that's been type-exported or in other ways confused.

16:36.960 --> 16:38.880
It depends on a malicious one.

16:38.880 --> 16:39.880
That package runs.

16:39.880 --> 16:46.000
It decodes some basic code which downloads some true malware from a remote server.

16:46.000 --> 16:47.640
The upshot of it is very sad snake.

16:47.640 --> 16:48.640
Hello.

16:48.640 --> 16:50.840
The upshot of it is very sad snake.

16:50.840 --> 16:52.840
So let's show an example.

16:52.840 --> 16:53.840
That's what we're here for.

16:53.840 --> 16:54.840
We want to see my machine get screwed.

16:54.840 --> 16:55.840
That's why we're here.

16:55.840 --> 16:56.840
That's why we're all on this talk.

16:56.840 --> 16:57.840
That's why we're in the full room.

16:57.840 --> 16:58.840
Yeah.

16:58.840 --> 16:59.840
Yeah.

16:59.840 --> 17:00.840
Yeah.

17:00.840 --> 17:01.840
Come on, boys.

17:01.840 --> 17:02.840
So right.

17:02.840 --> 17:05.600
I said I work for this company, right?

17:05.600 --> 17:07.360
And I maintain this particular SDK.

17:07.360 --> 17:08.360
You can look at it if you want.

17:08.360 --> 17:10.520
I just put the QR code in again because they pay for my flight.

17:10.520 --> 17:11.520
That's why I did that.

17:11.520 --> 17:13.200
You can scan it if you want.

17:13.200 --> 17:15.680
But the reason my colleague didn't trust me earlier is because I made a version of this

17:15.680 --> 17:17.920
called not the Vonage Python SDK.

17:17.920 --> 17:22.000
I didn't want to make it too obviously type-awable because I actually don't want someone downloading

17:22.000 --> 17:23.000
this.

17:23.000 --> 17:24.000
But this is a real package.

17:24.000 --> 17:25.000
I uploaded.

17:25.000 --> 17:26.000
You can see it looks similar.

17:26.000 --> 17:29.200
It has the same number of stars as the actual package.

17:29.200 --> 17:31.600
So again, it looks pretty legit.

17:31.600 --> 17:33.720
But I want to show you what happens if you download that.

17:33.720 --> 17:34.720
So that's the plan.

17:34.720 --> 17:36.720
So just to summarize, we got these two.

17:36.720 --> 17:40.000
We got these two packages here that I've uploaded to PyPy.

17:40.000 --> 17:43.840
As of yesterday, I had to make a fake account because they deleted my first set.

17:43.840 --> 17:44.840
That's not a joke.

17:44.840 --> 17:45.840
I had a lot.

17:45.840 --> 17:48.920
I didn't get to go to this conference because I was redoing my malware.

17:48.920 --> 17:52.280
So anyway, the point is here, we've got these two packages.

17:52.280 --> 17:55.440
And what I want to do is show you what happens when you run them.

17:55.440 --> 17:56.440
Can you?

17:56.440 --> 17:57.440
Nope.

17:57.440 --> 17:58.440
I've got a...

17:58.440 --> 17:59.440
Oh, dear.

17:59.440 --> 18:00.440
We're going to have a problem.

18:00.440 --> 18:01.440
I'm going to drag you over there.

18:01.440 --> 18:02.440
It does.

18:02.440 --> 18:03.440
Great.

18:03.440 --> 18:04.960
There's a thing already.

18:04.960 --> 18:08.320
So we can see here, this is going to be very difficult to manage.

18:08.320 --> 18:10.320
Essentially, this is my Python SDK.

18:10.320 --> 18:13.080
And we can see here in the setup Py, it's normal.

18:13.080 --> 18:16.600
Except for the fact here, it includes tool belt requests, which is a new dependency that

18:16.600 --> 18:17.600
wasn't there before.

18:17.600 --> 18:20.800
And we can see in the client class here, I've got request util.

18:20.800 --> 18:22.640
This is a random function I've imported.

18:22.640 --> 18:23.640
It doesn't do anything.

18:23.640 --> 18:26.200
But what's important there is I've imported tool belt requests.

18:26.200 --> 18:27.200
Can we all see that?

18:27.200 --> 18:28.200
Is that big enough at the back?

18:28.200 --> 18:29.200
Great stuff.

18:29.200 --> 18:30.200
Okay.

18:30.200 --> 18:31.200
Awesome.

18:31.200 --> 18:33.080
So I can actually go and where's my mouse?

18:33.080 --> 18:34.080
I'll show you.

18:34.080 --> 18:35.760
I've got this one on here.

18:35.760 --> 18:37.960
This is going to be quite a lot of dragging and clicking.

18:37.960 --> 18:39.980
This is my malware package.

18:39.980 --> 18:41.920
This is tool belt requests.

18:41.920 --> 18:45.720
And we can see here that this setup Py looks normal.

18:45.720 --> 18:46.960
Request util looks fine.

18:46.960 --> 18:47.960
Nothing happens in here.

18:47.960 --> 18:50.120
If we go to init Py, again, looks normal.

18:50.120 --> 18:51.120
Where's the malware?

18:51.120 --> 18:55.760
Well, let's scroll over a little bit, shall we?

18:55.760 --> 18:56.760
And I say this.

18:56.760 --> 18:59.880
This is a legitimate technique that is used by bad actors.

18:59.880 --> 19:00.880
This is real.

19:00.880 --> 19:08.400
So if we scroll over, what do we see?

19:08.400 --> 19:10.440
Oh, look, a base 64 encoded payload.

19:10.440 --> 19:11.440
What could this be?

19:11.440 --> 19:12.440
Who knows?

19:12.440 --> 19:13.440
Right.

19:13.440 --> 19:17.000
So this is what we end up with, right?

19:17.000 --> 19:21.040
And what happens is this command will decode that and then it will run it.

19:21.040 --> 19:26.280
And so because of the first package what we had was this import statement here, it will

19:26.280 --> 19:28.040
run as soon as we import the first package.

19:28.040 --> 19:31.320
And the reason for that is that actually in the init Py file we've got this import of

19:31.320 --> 19:32.320
everything for clients.

19:32.320 --> 19:35.800
So basically when we import a package, we believe it's called Vonage, which inherently

19:35.800 --> 19:38.840
the module, the package itself is called Vonage still.

19:38.840 --> 19:41.940
So a user may not know that they've downloaded the wrong package at this point.

19:41.940 --> 19:45.820
You will download and install and then use and activate that malware.

19:45.820 --> 19:47.760
So what's left to do?

19:47.760 --> 19:48.760
Check off malware.

19:48.760 --> 19:50.520
Let's get some malware going.

19:50.520 --> 19:51.520
Right.

19:51.520 --> 19:54.120
And we've got this up here.

19:54.120 --> 19:57.560
So I've used a blank one because I'm hoping we can download it live.

19:57.560 --> 19:58.800
So let's do that.

19:58.800 --> 20:02.120
Can I try this while not looking?

20:02.120 --> 20:07.200
Not the Vonage Python SDK.

20:07.200 --> 20:08.200
Okay.

20:08.200 --> 20:10.640
Wi-Fi is working nice.

20:10.640 --> 20:11.640
Okay.

20:11.640 --> 20:14.160
So this is a blank VM that I've got here.

20:14.160 --> 20:18.100
We can now see if I do a pip list.

20:18.100 --> 20:21.760
We can see that I've got tool belt requests in here, which is my malware.

20:21.760 --> 20:25.040
And we can see here that I've got not the Vonage Python SDK.

20:25.040 --> 20:26.040
Okay.

20:26.040 --> 20:28.040
So now if I open up a Python shell, cool.

20:28.040 --> 20:32.560
And if I actually import that, what's going to happen?

20:32.560 --> 20:33.560
Import Vonage.

20:33.560 --> 20:36.560
What are we going to do?

20:36.560 --> 20:40.120
Oh, wait a minute.

20:40.120 --> 20:41.120
It's done it on my off.

20:41.120 --> 20:43.200
This demo would have been so cool if I just mirrored my screens.

20:43.200 --> 20:44.200
Where's my mouse?

20:44.200 --> 20:45.200
I'll show you what it did.

20:45.200 --> 20:46.200
I'll show you what it did.

20:46.200 --> 20:47.760
Can I do that?

20:47.760 --> 20:48.760
No, I can't.

20:48.760 --> 20:51.760
I need to do it this way.

20:51.760 --> 20:55.320
I'll show you right now.

20:55.320 --> 20:59.000
All righty.

20:59.000 --> 21:07.520
So that's what I want to show you for now with that.

21:07.520 --> 21:09.920
But because we don't have much time, I'm going to actually tell you now I've spent most of

21:09.920 --> 21:11.560
my time telling you what screws you up.

21:11.560 --> 21:14.440
I'm now going to tell you how you can protect yourself a little bit.

21:14.440 --> 21:18.080
So thank you, Mr. Ashley, for your once again, your dedicated service.

21:18.080 --> 21:21.360
It actually won't play because the Wi-Fi is not fast enough.

21:21.360 --> 21:26.600
But you can imagine it in your head if you want.

21:26.600 --> 21:28.360
So right.

21:28.360 --> 21:29.440
Now we're back here.

21:29.440 --> 21:30.440
Let's talk about protecting ourselves.

21:30.440 --> 21:31.440
Right.

21:31.440 --> 21:32.440
Again, adorable snake.

21:32.440 --> 21:33.440
That's my water break.

21:33.440 --> 21:35.040
Snake for the break.

21:35.040 --> 21:36.040
Okay.

21:36.040 --> 21:39.400
So as maintainers, if you maintain a package and you don't want your users to get the wrong

21:39.400 --> 21:41.400
thing like me, what can you do?

21:41.400 --> 21:44.360
Well, your dependencies might become compromised, right?

21:44.360 --> 21:48.200
So you need to think about how you can look for those compromises and deal with those.

21:48.200 --> 21:52.520
So this is the case where maybe a patchy, like fast API toolkit becomes malicious over

21:52.520 --> 21:54.600
time or there's some vulnerability that's discovered.

21:54.600 --> 21:57.200
In that case, automated scanning tools can help you, right?

21:57.200 --> 21:58.200
Five minutes left.

21:58.200 --> 21:59.200
Okay.

21:59.200 --> 22:00.200
No worries.

22:00.200 --> 22:01.200
We got this.

22:01.200 --> 22:02.200
We're a team.

22:02.200 --> 22:03.200
I appreciate you gave me a little more.

22:03.200 --> 22:04.200
I like that.

22:04.200 --> 22:05.200
Okay.

22:05.200 --> 22:06.200
So right.

22:06.200 --> 22:07.200
So first of all, there are things to use.

22:07.200 --> 22:08.200
We use this.

22:08.200 --> 22:09.520
We give these guys an awful lot of money.

22:09.520 --> 22:11.880
So if you want to do the same, please feel free.

22:11.880 --> 22:12.880
I don't know.

22:12.880 --> 22:13.880
I'm sponsored by them.

22:13.880 --> 22:14.880
There's also dependables.

22:14.880 --> 22:19.480
There's other services that will scan your repos and check and see if there's any malware

22:19.480 --> 22:23.280
or any CVs that might provide vulnerabilities.

22:23.280 --> 22:27.440
Also as maintainers, another cute snake, you might want to consider defensively type of

22:27.440 --> 22:31.240
squatting which is where you preemptively type of squat your own stuff like I did there

22:31.240 --> 22:33.120
with not the Vonage Python SDK.

22:33.120 --> 22:35.520
You might do that yourself with your own package.

22:35.520 --> 22:38.120
You might give something similar typos or confusions.

22:38.120 --> 22:39.680
You might want to make those yourself.

22:39.680 --> 22:42.680
Oh, now it plays.

22:42.680 --> 22:53.720
How do I actually turn it off?

22:53.720 --> 23:03.200
I actually don't know what that's up.

23:03.200 --> 23:04.200
Wow.

23:04.200 --> 23:05.200
Okay.

23:05.200 --> 23:06.200
Wow.

23:06.200 --> 23:08.760
I did not think it would go like this.

23:08.760 --> 23:10.480
This is my second proper talk.

23:10.480 --> 23:11.480
Right.

23:11.480 --> 23:15.440
When you preemptively type of squatting, that means you can save the packages that you're

23:15.440 --> 23:16.440
dealing with.

23:16.440 --> 23:17.440
Right.

23:17.440 --> 23:20.480
So there was a person, William Bernstein, who decided to take some of this into his

23:20.480 --> 23:24.200
own hands and he type of squatted 1,000 packages.

23:24.200 --> 23:28.640
In two years, they got over 500,000 downloads which shows how useful that technique was

23:28.640 --> 23:32.360
to stop those $500,000 potentially going to malware.

23:32.360 --> 23:33.360
Right.

23:33.360 --> 23:35.560
As package users, we've got other things we can do.

23:35.560 --> 23:39.720
The obvious one here, if you type something in, you're at risk.

23:39.720 --> 23:42.720
You might want to look at how you do that.

23:42.720 --> 23:45.960
What is obviously maybe a good practice is store from a file so you can check what you've

23:45.960 --> 23:46.960
written.

23:46.960 --> 23:47.960
Vet your dependencies if you can.

23:47.960 --> 23:52.440
And, again, you might want to use those automated scanning tools.

23:52.440 --> 23:55.560
Now if you're using a mirror, you might want to check the latest safe version.

23:55.560 --> 23:59.440
This is really important because if you're using a mirror, what can actually happen?

23:59.440 --> 24:01.800
I'll give you the fast API example again.

24:01.800 --> 24:03.320
Basically, a mirror site.

24:03.320 --> 24:05.720
For example, if you're in an enterprise and you download all your stuff that's cached

24:05.720 --> 24:11.120
at a mirror site, you can end up in a situation where, for example, 0.27 is malware, 0.26

24:11.120 --> 24:12.120
is not.

24:12.120 --> 24:16.840
When that was discovered, the whole on PyPy went back to 0.26, but in the mirrors, they

24:16.840 --> 24:19.960
often configured so they only take the latest version.

24:19.960 --> 24:22.280
In that case, you'd not get that safe version.

24:22.280 --> 24:24.720
It would keep the malware on your mirror.

24:24.720 --> 24:28.160
Just consider that as well if that is how you install stuff.

24:28.160 --> 24:31.760
Because I've got two minutes left, I'm going to sum up really quickly.

24:31.760 --> 24:36.200
First of all, type of squatting on PyPy is a real attack vector.

24:36.200 --> 24:39.760
So benign packages that become malicious, as we just said.

24:39.760 --> 24:44.080
So what you should do is vet your dependencies really carefully.

24:44.080 --> 24:47.400
And if you can, use automated vulnerability scanning tools.

24:47.400 --> 24:51.520
If you really have to, you might want to consider defensive type of squatting because that's

24:51.520 --> 24:52.920
a way to protect your users.

24:52.920 --> 24:56.240
But also be careful when you're using mirrors.

24:56.240 --> 24:59.120
So the final thing I just want to say, first of all, is never get security up.

24:59.120 --> 25:02.760
It will never let you down, run around, or even.

25:02.760 --> 25:04.360
And I quote, desert you.

25:04.360 --> 25:10.360
Thank you very much.

25:10.360 --> 25:14.760
Thank you.

25:14.760 --> 25:25.040
So, just quickly, if you want to see the slides or any resources, they are there.

25:25.040 --> 25:27.200
And this is just the summary because the other one wasn't super useful.

25:27.200 --> 25:29.160
If you want to tweet me and ask me questions, feel free.

25:29.160 --> 25:30.160
I'm an idiot.

25:30.160 --> 25:31.160
Tweet me, it's fine.

25:31.160 --> 25:32.160
Okay.

25:32.160 --> 25:33.160
That's me.

25:33.160 --> 25:34.720
If there is anything else, any questions, shout them out to me and I'll attempt to answer

25:34.720 --> 25:38.600
them.

25:38.600 --> 25:40.600
Thank you, Max.

25:40.600 --> 25:44.240
Now I really want to install your SDK.

25:44.240 --> 26:00.120
I haven't seen that video enough.

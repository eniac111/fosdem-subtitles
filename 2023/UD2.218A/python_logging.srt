1
0:00:00.000 --> 0:00:10.000
This is the largest room I've ever given a presentation to, so thank you for showing

2
0:00:10.000 --> 0:00:11.000
up.

3
0:00:11.000 --> 0:00:14.240
Also, let's see.

4
0:00:14.240 --> 0:00:17.640
How many of you are using logging right now in your job?

5
0:00:17.640 --> 0:00:18.640
Wow.

6
0:00:18.640 --> 0:00:19.640
Okay.

7
0:00:19.640 --> 0:00:20.960
That's a lot of you.

8
0:00:20.960 --> 0:00:21.960
This is the wrong talk.

9
0:00:21.960 --> 0:00:22.960
No, I'm just kidding.

10
0:00:22.960 --> 0:00:27.080
How many of you would say you're doing Python logging well?

11
0:00:27.080 --> 0:00:28.880
Yeah.

12
0:00:28.880 --> 0:00:29.880
That's what I thought.

13
0:00:29.880 --> 0:00:30.880
Well, it's okay.

14
0:00:30.880 --> 0:00:34.440
You're in the right conversation because we're going to tell you all about how you get started

15
0:00:34.440 --> 0:00:38.160
with Python logging and all the wonderful things that...

16
0:00:38.160 --> 0:00:40.640
Hold on.

17
0:00:40.640 --> 0:00:41.640
It's my boss.

18
0:00:41.640 --> 0:00:42.640
Hold on.

19
0:00:42.640 --> 0:00:43.640
Hey.

20
0:00:43.640 --> 0:00:45.480
Yeah, I'm in the middle of a presentation right now.

21
0:00:45.480 --> 0:00:47.560
What's up?

22
0:00:47.560 --> 0:00:49.400
He deployed on a Saturday?

23
0:00:49.400 --> 0:00:50.400
Are you kidding me?

24
0:00:50.400 --> 0:00:52.600
What do you mean production's broken?

25
0:00:52.600 --> 0:00:56.480
Yeah, tell me you checked the logs.

26
0:00:56.480 --> 0:00:57.480
He's not logging.

27
0:00:57.480 --> 0:00:58.960
Oh, my goodness.

28
0:00:58.960 --> 0:01:01.000
Well, please don't fire him.

29
0:01:01.000 --> 0:01:02.920
Tell him to tune into my talk.

30
0:01:02.920 --> 0:01:06.240
We're going to go over the basics of logging, and then we're going to get all the way down

31
0:01:06.240 --> 0:01:08.640
into some more advanced logging configurations.

32
0:01:08.640 --> 0:01:09.640
Okay?

33
0:01:09.640 --> 0:01:10.640
Yeah.

34
0:01:10.640 --> 0:01:11.640
Ciao.

35
0:01:11.640 --> 0:01:15.560
So, nobody wants to be in that situation.

36
0:01:15.560 --> 0:01:22.600
Honestly, that went over way better than I thought it would.

37
0:01:22.600 --> 0:01:23.600
Nobody wants to be in that situation.

38
0:01:23.600 --> 0:01:26.360
So, before we get too deep, though, I'm going to just say hi.

39
0:01:26.360 --> 0:01:27.360
I'm David.

40
0:01:27.360 --> 0:01:29.960
I'm a developer advocate for Open Search.

41
0:01:29.960 --> 0:01:32.740
Thanks to the Open Search group for letting me come here.

42
0:01:32.740 --> 0:01:39.440
Open Search is commonly used as a log store, so it fits in nice with Python logging.

43
0:01:39.440 --> 0:01:44.120
Previous to this, I'd worked as a data engineer, network automation engineer, DevOps engineer.

44
0:01:44.120 --> 0:01:48.400
I've done a lot of engineering, and all of them had one thing in common, and it was I

45
0:01:48.400 --> 0:01:49.640
needed a lot of logs.

46
0:01:49.640 --> 0:01:53.360
I was able to understand what was going on at any point in my application.

47
0:01:53.360 --> 0:01:55.680
So, you might want to get your phones out at this point.

48
0:01:55.680 --> 0:01:57.280
I have lots of QR codes.

49
0:01:57.280 --> 0:01:58.280
They're only three.

50
0:01:58.280 --> 0:02:01.000
And we're going to go to code right after this one.

51
0:02:01.000 --> 0:02:05.240
So, that's my link tree if you want to connect with me and hear more about Open Search, because

52
0:02:05.240 --> 0:02:07.720
I'll talk your ear off, I promise.

53
0:02:07.720 --> 0:02:11.000
So with that, you can follow along.

54
0:02:11.000 --> 0:02:12.920
There's a gist for this whole presentation.

55
0:02:12.920 --> 0:02:14.640
It can all run for the most part.

56
0:02:14.640 --> 0:02:18.680
I was working on it last night till very late.

57
0:02:18.680 --> 0:02:20.360
And we're going to go ahead and get started.

58
0:02:20.360 --> 0:02:26.480
So, as with anything, we're going to import logging off to the races, and now you can

59
0:02:26.480 --> 0:02:30.760
check off your Jira card and put it on the backlog.

60
0:02:30.760 --> 0:02:31.760
Just kidding.

61
0:02:31.760 --> 0:02:34.200
We all know that logging is a lot more than just importing logging.

62
0:02:34.200 --> 0:02:36.400
So we're going to start with the logger.

63
0:02:36.400 --> 0:02:41.480
Logger is kind of the core concept of Python logging, and all loggers start with a name.

64
0:02:41.480 --> 0:02:44.520
So we're going to do underscore, underscore, name.

65
0:02:44.520 --> 0:02:50.120
Does anyone know what underscore, underscore, name actually will resolve to in this instance?

66
0:02:50.120 --> 0:02:52.480
Any guesses?

67
0:02:52.480 --> 0:02:53.680
It's underscore, underscore, main.

68
0:02:53.680 --> 0:02:55.800
Come on, guys.

69
0:02:55.800 --> 0:03:01.680
So we create a logger, we give it a name, and fun fact of the day, that logger is global.

70
0:03:01.680 --> 0:03:09.480
I can import Python logging and do get logger, of course, from anywhere and use this logger.

71
0:03:09.480 --> 0:03:11.960
With it's too small.

72
0:03:11.960 --> 0:03:12.960
Yes.

73
0:03:12.960 --> 0:03:14.280
There we go.

74
0:03:14.280 --> 0:03:17.920
Try not to delete code while I'm at it.

75
0:03:17.920 --> 0:03:18.920
There we go.

76
0:03:18.920 --> 0:03:20.680
We're going to make this smaller.

77
0:03:20.680 --> 0:03:23.000
We're going to make this up here.

78
0:03:23.000 --> 0:03:26.720
So as we know with logging, there are several different levels you can set.

79
0:03:26.720 --> 0:03:30.480
These levels are a filtering mechanism for Python logging.

80
0:03:30.480 --> 0:03:35.400
Fun fact of the day, though, most people don't know this, is these logger or these levels

81
0:03:35.400 --> 0:03:37.380
actually resolve to numbers.

82
0:03:37.380 --> 0:03:40.220
And those numbers are used to do filtering.

83
0:03:40.220 --> 0:03:46.920
And fun fact of the day, you can actually make your own log levels as if five, six,

84
0:03:46.920 --> 0:03:49.160
six log levels, seven log levels isn't enough.

85
0:03:49.160 --> 0:03:51.640
You could add more potentially if you needed that.

86
0:03:51.640 --> 0:03:55.240
So we're going to go ahead and send this to terminal.

87
0:03:55.240 --> 0:03:59.120
And we're going to take a look at all those log levels.

88
0:03:59.120 --> 0:04:00.160
Here we are.

89
0:04:00.160 --> 0:04:05.960
As we can see, they resolve to 10, 20, 30, 30, 30, 30, 40, and 50.

90
0:04:05.960 --> 0:04:09.180
So warn and warning both resolve to the same log level.

91
0:04:09.180 --> 0:04:15.240
So they're both there in case you need two log levels that have the same level.

92
0:04:15.240 --> 0:04:17.120
And these levels, again, are used for filtering.

93
0:04:17.120 --> 0:04:23.080
So as you are sending out logs, they're used to filter out logs that maybe are less important.

94
0:04:23.080 --> 0:04:27.920
So the lower the number, the lower the importance of the log.

95
0:04:27.920 --> 0:04:29.600
So let's talk about emitting a log.

96
0:04:29.600 --> 0:04:33.720
Here we're going to go ahead and send a log with logger.info.

97
0:04:33.720 --> 0:04:40.200
So that's going to emit a log from the logger with the info level attached to it.

98
0:04:40.200 --> 0:04:42.880
Lowercase info is for sending logs.

99
0:04:42.880 --> 0:04:45.880
Uppercase info is the level.

100
0:04:45.880 --> 0:04:47.600
Nothing actually happens.

101
0:04:47.600 --> 0:04:50.760
It just gets sent to the terminal and nothing happens.

102
0:04:50.760 --> 0:04:55.360
And the reason why nothing happens is because we've not told it where it needs to go.

103
0:04:55.360 --> 0:04:57.520
We need log handlers.

104
0:04:57.520 --> 0:05:01.000
So that is what we do.

105
0:05:01.000 --> 0:05:06.820
We're going to build a simple syslog handler for, sorry, a streaming handler for sending

106
0:05:06.820 --> 0:05:08.620
to standard out now.

107
0:05:08.620 --> 0:05:11.840
So handlers receive logs from the logger.

108
0:05:11.840 --> 0:05:12.840
It's pretty straightforward.

109
0:05:12.840 --> 0:05:17.880
We're going to go ahead and create this real quick.

110
0:05:17.880 --> 0:05:19.960
We're going to set the level of our handler.

111
0:05:19.960 --> 0:05:23.880
Remember our levels are our wonderful filtering mechanism.

112
0:05:23.880 --> 0:05:25.960
Set the level to warning.

113
0:05:25.960 --> 0:05:31.840
And the top one will not show up, but the bottom one should because it is greater than

114
0:05:31.840 --> 0:05:33.280
warning.

115
0:05:33.280 --> 0:05:34.280
And there it is.

116
0:05:34.280 --> 0:05:35.960
This will.

117
0:05:35.960 --> 0:05:37.720
That's pretty dull.

118
0:05:37.720 --> 0:05:39.960
Nobody really wants a log that says this will.

119
0:05:39.960 --> 0:05:41.720
That tells us nothing.

120
0:05:41.720 --> 0:05:44.080
You have no clue what's going on in your application.

121
0:05:44.080 --> 0:05:46.160
What time did this will?

122
0:05:46.160 --> 0:05:48.920
What time will it won't?

123
0:05:48.920 --> 0:05:50.400
So we need to add some context.

124
0:05:50.400 --> 0:05:54.640
And the way we get context is, of course, with log formatters.

125
0:05:54.640 --> 0:05:58.840
And I've jumped ahead too far in my presentation.

126
0:05:58.840 --> 0:06:01.720
We're just going to take a quick back step real quick.

127
0:06:01.720 --> 0:06:04.440
We're going to talk about some of the other handlers that are built in.

128
0:06:04.440 --> 0:06:06.560
So there's the rotating file handle.

129
0:06:06.560 --> 0:06:11.440
This one's particularly useful if you have too many logs and your file gets too large.

130
0:06:11.440 --> 0:06:18.280
It can actually automatically rotate that file every X amount of size into a new file.

131
0:06:18.280 --> 0:06:22.840
And then you can specify for it to delete logs after a certain amount of time or a certain

132
0:06:22.840 --> 0:06:23.840
amount of files.

133
0:06:23.840 --> 0:06:26.200
We have the syslog handler.

134
0:06:26.200 --> 0:06:28.240
Syslog is a standard for logging.

135
0:06:28.240 --> 0:06:33.080
HTTP lets you send logs to arbitrary HTTP endpoints.

136
0:06:33.080 --> 0:06:38.680
Timed rotating file handler, believe it or not, is a timed rotation of your log files,

137
0:06:38.680 --> 0:06:42.440
whether it be every day, every minute, or please, God forbid, every second.

138
0:06:42.440 --> 0:06:43.440
Do not do that.

139
0:06:43.440 --> 0:06:45.040
You will end up with thousands of files.

140
0:06:45.040 --> 0:06:48.320
I did actually every hour once, and that was a huge mistake.

141
0:06:48.320 --> 0:06:52.760
I ended up with like 15,000 files after a little bit.

142
0:06:52.760 --> 0:06:58.240
And the SMTP handler if you are masochistic.

143
0:06:58.240 --> 0:07:00.120
Now we'll talk about formatters.

144
0:07:00.120 --> 0:07:01.600
OK.

145
0:07:01.600 --> 0:07:03.000
So let's go ahead.

146
0:07:03.000 --> 0:07:07.720
We're going to create, set our console handle to the info level.

147
0:07:07.720 --> 0:07:09.120
We're going to create a formatter.

148
0:07:09.120 --> 0:07:13.600
The formatter is going to include the date and time, the name of the logger, which, again,

149
0:07:13.600 --> 0:07:17.000
if you're using underscore underscore name, that's going to be the name of your module,

150
0:07:17.000 --> 0:07:20.600
whether that's like search dot util dot whatever.

151
0:07:20.600 --> 0:07:25.800
And then the level name that it was emitted at and a message.

152
0:07:25.800 --> 0:07:26.800
Pretty straightforward.

153
0:07:26.800 --> 0:07:28.880
Then we set the formatter.

154
0:07:28.880 --> 0:07:33.680
Formatter gets attached to handlers again and logger dot info.

155
0:07:33.680 --> 0:07:36.040
Look at my pretty log.

156
0:07:36.040 --> 0:07:37.920
Well, just kidding.

157
0:07:37.920 --> 0:07:39.680
There's no log there.

158
0:07:39.680 --> 0:07:41.760
Is it because I have a bug?

159
0:07:41.760 --> 0:07:43.920
Because I wrote this way too late at night?

160
0:07:43.920 --> 0:07:44.920
Probably.

161
0:07:44.920 --> 0:07:49.320
Or more likely because there was something I actually tricked you on earlier.

162
0:07:49.320 --> 0:07:53.640
The truth is the reason our first log wasn't emitted wasn't because there wasn't a handler

163
0:07:53.640 --> 0:07:59.520
attached to it, but it's because Python's logging library by default sets loggers and

164
0:07:59.520 --> 0:08:02.720
handlers to the warning level right out of the gate.

165
0:08:02.720 --> 0:08:04.720
And we admitted at the warning level.

166
0:08:04.720 --> 0:08:11.680
So fun fact, you actually need to set the level for both the logger and your handlers.

167
0:08:11.680 --> 0:08:12.680
So we'll go ahead and do that.

168
0:08:12.680 --> 0:08:15.260
We'll set the logger level.

169
0:08:15.260 --> 0:08:16.560
And we're off to the races.

170
0:08:16.560 --> 0:08:18.320
Let's look at this pretty log.

171
0:08:18.320 --> 0:08:21.160
Man, that is so beautiful.

172
0:08:21.160 --> 0:08:24.320
Now I know exactly when I had a pretty log.

173
0:08:24.320 --> 0:08:26.760
I know exactly where it happened in the main.

174
0:08:26.760 --> 0:08:28.320
I know what level it was at.

175
0:08:28.320 --> 0:08:31.680
It was informational log.

176
0:08:31.680 --> 0:08:34.040
So we've talked about a lot so far.

177
0:08:34.040 --> 0:08:37.120
We've talked about loggers, handlers.

178
0:08:37.120 --> 0:08:42.160
So let's do a top to bottom just real quick to make sure we're all talking about the same

179
0:08:42.160 --> 0:08:43.320
thing.

180
0:08:43.320 --> 0:08:45.760
So we have loggers.

181
0:08:45.760 --> 0:08:48.720
Loggers emit a log at some level.

182
0:08:48.720 --> 0:08:51.560
They also filter out logs at some level.

183
0:08:51.560 --> 0:08:56.800
So if your logger is set to filter out warning logs and you send it an info, it's never going

184
0:08:56.800 --> 0:08:59.440
to get to the handler.

185
0:08:59.440 --> 0:09:04.600
Loggers receive logs and then send them to some specified output, whatever that may be.

186
0:09:04.600 --> 0:09:08.320
And then formatters attach to handlers and they enrich the output.

187
0:09:08.320 --> 0:09:09.920
So they add context.

188
0:09:09.920 --> 0:09:12.760
And there's a bunch of other context that's not mentioned here.

189
0:09:12.760 --> 0:09:17.040
It's in a Python logging library.

190
0:09:17.040 --> 0:09:19.400
I guess it's like at a certain time in the presentation.

191
0:09:19.400 --> 0:09:23.060
It just decides it wants to do that.

192
0:09:23.060 --> 0:09:25.880
So these are all wonderful.

193
0:09:25.880 --> 0:09:29.880
Wait a minute.

194
0:09:29.880 --> 0:09:31.440
I'm getting there.

195
0:09:31.440 --> 0:09:32.440
Logging.

196
0:09:32.440 --> 0:09:33.440
Yes.

197
0:09:33.440 --> 0:09:34.440
All right.

198
0:09:34.440 --> 0:09:35.440
Here we go.

199
0:09:35.440 --> 0:09:36.440
We're just going to scroll on.

200
0:09:36.440 --> 0:09:37.440
And oh, yes.

201
0:09:37.440 --> 0:09:38.440
Here we go.

202
0:09:38.440 --> 0:09:42.480
So setting up logs from, you know, in each individual module is a pain.

203
0:09:42.480 --> 0:09:48.000
So you can actually pre-create loggers ahead of time with a dictionary config or a YAML

204
0:09:48.000 --> 0:09:52.800
config file because I know all of us just love creating YAML configs and having them

205
0:09:52.800 --> 0:09:54.320
everywhere.

206
0:09:54.320 --> 0:10:02.280
So with this, you can create as many logs as you want and specify them with dictionary

207
0:10:02.280 --> 0:10:03.540
config.

208
0:10:03.540 --> 0:10:06.980
One other really important thing to mention, and I probably should have hit it when I was

209
0:10:06.980 --> 0:10:11.000
talking about loggers at the get go, there's a specific reason why you can set it at the

210
0:10:11.000 --> 0:10:13.960
logger level and at the handler level.

211
0:10:13.960 --> 0:10:18.340
So handlers give you very fine-tuned access over what you're looking at.

212
0:10:18.340 --> 0:10:21.280
So where it's going, which output, you know.

213
0:10:21.280 --> 0:10:25.640
So a lot of times people will specify certain levels for handlers and then they will use

214
0:10:25.640 --> 0:10:29.200
their global debug level to set their loggers.

215
0:10:29.200 --> 0:10:32.560
So say, for example, you're debugging an application locally.

216
0:10:32.560 --> 0:10:35.300
You're going to set that to debug, of course.

217
0:10:35.300 --> 0:10:38.320
But when you push it to production, you don't want that.

218
0:10:38.320 --> 0:10:44.160
So a lot of people will have, you know, a pre-production logging config and a development

219
0:10:44.160 --> 0:10:46.440
environment logging config.

220
0:10:46.440 --> 0:10:55.320
So with that, there is actually one other slight challenge with loggers, and that is

221
0:10:55.320 --> 0:10:57.640
they're blocking operations.

222
0:10:57.640 --> 0:11:03.960
So like I said earlier, if you're a masochist and you like the SMTP log handler, you could

223
0:11:03.960 --> 0:11:05.200
be in a real pinch.

224
0:11:05.200 --> 0:11:10.600
So say, for example, I'm on your application, you have this nice web server, and all of

225
0:11:10.600 --> 0:11:13.920
a sudden it hits a critical error.

226
0:11:13.920 --> 0:11:16.600
It sends a message to your SMTP server.

227
0:11:16.600 --> 0:11:18.800
Your SMTP server is slow.

228
0:11:18.800 --> 0:11:19.800
It's chugging.

229
0:11:19.800 --> 0:11:25.280
So you're taking five to ten seconds for it to register that and send a response.

230
0:11:25.280 --> 0:11:28.800
You think I'm going to stay on your web page for five to ten seconds while it sends an

231
0:11:28.800 --> 0:11:29.800
error log?

232
0:11:29.800 --> 0:11:32.560
Heck no, I'm closing out and going to somewhere else.

233
0:11:32.560 --> 0:11:35.720
I don't know, amazon.com to buy whatever I needed.

234
0:11:35.720 --> 0:11:38.320
So we have to handle this.

235
0:11:38.320 --> 0:11:42.920
We have to understand that, hey, this could potentially block, so how do we unblock our

236
0:11:42.920 --> 0:11:43.920
applications?

237
0:11:43.920 --> 0:11:48.840
Well, it's by making our applications simpler, obviously, and using multithreading.

238
0:11:48.840 --> 0:11:49.840
That was a joke.

239
0:11:49.840 --> 0:11:52.800
You can laugh.

240
0:11:52.800 --> 0:11:58.440
So with this, we can actually import queues, and what happens is there's a queue handler

241
0:11:58.440 --> 0:12:00.360
and a queue listener.

242
0:12:00.360 --> 0:12:05.440
So the queue is the shared memory space that can be accessed by both the handler and the

243
0:12:05.440 --> 0:12:06.440
listener.

244
0:12:06.440 --> 0:12:07.440
You create the handler.

245
0:12:07.440 --> 0:12:12.880
The handler receives all the logs and then distributes them to the queue.

246
0:12:12.880 --> 0:12:18.480
The queue listener starts up on its own independent thread, and it's going to listen to the log

247
0:12:18.480 --> 0:12:23.560
queue and then distribute it to any of the handlers that you specified it should.

248
0:12:23.560 --> 0:12:26.960
So let's go through that end-to-end again.

249
0:12:26.960 --> 0:12:30.080
We've got queue handlers, receive the logs, place them on a queue.

250
0:12:30.080 --> 0:12:35.500
The queue hands it over to the queue listener, which then hands it on to your other loggers.

251
0:12:35.500 --> 0:12:37.280
Now your application's unblocked.

252
0:12:37.280 --> 0:12:41.280
It drops that queue or that log on the queue, and then it's off to the races.

253
0:12:41.280 --> 0:12:47.720
You can use SMTPlib if you really wanted to.

254
0:12:47.720 --> 0:12:51.480
So let's talk about pulling this all together now, right?

255
0:12:51.480 --> 0:12:52.600
So we have these logs.

256
0:12:52.600 --> 0:12:58.760
They sit on our local machines, and that's fine, but if you are a large organization,

257
0:12:58.760 --> 0:13:03.160
you might have hundreds of servers.

258
0:13:03.160 --> 0:13:05.540
Take a second to breathe.

259
0:13:05.540 --> 0:13:09.920
You might have hundreds of servers, hundreds of network devices or whatever.

260
0:13:09.920 --> 0:13:13.920
And I'll give a real example of when I use this or could have used this.

261
0:13:13.920 --> 0:13:19.040
So when I was a network automation engineer, we had a particular log that my boss found

262
0:13:19.040 --> 0:13:25.160
on some of the servers or router switches, et cetera, and I spent the next three hours

263
0:13:25.160 --> 0:13:27.400
logging into each individual one.

264
0:13:27.400 --> 0:13:31.180
We had thousands of network devices.

265
0:13:31.180 --> 0:13:35.760
So I logged into enough of them, wrote down the logs, and then correlated.

266
0:13:35.760 --> 0:13:43.960
I said, oh, look, every Thursday and Saturday at the exact same time this log happens.

267
0:13:43.960 --> 0:13:49.080
One email later finds out security team is pentesting against us, and we don't need to

268
0:13:49.080 --> 0:13:50.440
worry about it.

269
0:13:50.440 --> 0:13:56.460
Again, three hours just trying to correlate what log was happening, where, when.

270
0:13:56.460 --> 0:14:02.480
So this is exactly what you can avoid by using something like open search, elastic search,

271
0:14:02.480 --> 0:14:06.020
low key to aggregate your logs.

272
0:14:06.020 --> 0:14:10.160
And again, if you do want to follow along with this later, this just is a Docker compose

273
0:14:10.160 --> 0:14:14.540
file that will let you spin up some sample containers with open search.

274
0:14:14.540 --> 0:14:24.440
So we'll import logging in our open search library, create an open search client, and

275
0:14:24.440 --> 0:14:30.280
this is where I'm going to break for just a moment and talk about custom handlers.

276
0:14:30.280 --> 0:14:33.420
So we mentioned handlers are where you send your logs.

277
0:14:33.420 --> 0:14:36.840
You can implement custom handlers, believe it or not.

278
0:14:36.840 --> 0:14:42.640
All you need to do is I was going to say inherit from, there we go, that's probably the right

279
0:14:42.640 --> 0:14:45.280
word, logging.handler.

280
0:14:45.280 --> 0:14:52.820
Then you create an emit definition, and that needs to have self and record, and that will

281
0:14:52.820 --> 0:14:55.640
send the record wherever you specify.

282
0:14:55.640 --> 0:15:00.840
So in our case, we have, it's going to take and it's going to format created time.

283
0:15:00.840 --> 0:15:06.000
Also I did not implement the formatting library because I wanted to send it as a dictionary

284
0:15:06.000 --> 0:15:08.720
to open search just because that's what it works with.

285
0:15:08.720 --> 0:15:15.360
You can also use something like fluent bit or fluent D log stash to parse out your logs

286
0:15:15.360 --> 0:15:18.480
later, and we'll talk about that just briefly.

287
0:15:18.480 --> 0:15:20.280
So we've got our created time.

288
0:15:20.280 --> 0:15:24.320
We've created this wonderful record, open search client.index.

289
0:15:24.320 --> 0:15:30.280
We'll send that log to open search.

290
0:15:30.280 --> 0:15:32.280
There we go.

291
0:15:32.280 --> 0:15:33.280
And then we'll set it up.

292
0:15:33.280 --> 0:15:36.360
So we're going to create our logger named log.

293
0:15:36.360 --> 0:15:40.880
We're going to set the logger's level to info so that we get the info records.

294
0:15:40.880 --> 0:15:47.160
We're going to create the open search handler and add logging.info, set that level, and

295
0:15:47.160 --> 0:15:52.720
add our handler, and we're off to the races.

296
0:15:52.720 --> 0:15:53.720
Boom.

297
0:15:53.720 --> 0:15:56.400
Well, that was kind of anticlimactic.

298
0:15:56.400 --> 0:15:59.880
You can't actually see it going into open search, but I promise you it chugged along

299
0:15:59.880 --> 0:16:05.280
and it went into open search, and huzzah, let's go into open search.

300
0:16:05.280 --> 0:16:07.600
And this is actually open search dashboards.

301
0:16:07.600 --> 0:16:14.520
So again, if you do this on your local machine, password's admin, username's admin.

302
0:16:14.520 --> 0:16:15.520
Very secure.

303
0:16:15.520 --> 0:16:19.520
We're actually looking to change that, but that is coming soon.

304
0:16:19.520 --> 0:16:25.000
So we go here and we're going to go into stack management.

305
0:16:25.000 --> 0:16:26.760
Hang with me for just a second.

306
0:16:26.760 --> 0:16:30.040
So we created a custom index with this.

307
0:16:30.040 --> 0:16:33.800
And that index is named based off of the logger that sent it.

308
0:16:33.800 --> 0:16:42.200
So we've got logger name, which was log, and then with the date time so that we can roll

309
0:16:42.200 --> 0:16:45.500
those off after a certain amount of days.

310
0:16:45.500 --> 0:16:49.200
We're going to create an index pattern.

311
0:16:49.200 --> 0:16:56.160
And we are going to say absolutely nothing because this is the problem with doing things

312
0:16:56.160 --> 0:16:57.160
like oh, just kidding.

313
0:16:57.160 --> 0:16:58.840
I just don't know how to use open search.

314
0:16:58.840 --> 0:16:59.840
Here we go.

315
0:16:59.840 --> 0:17:00.840
It's only my job.

316
0:17:00.840 --> 0:17:01.840
Don't worry.

317
0:17:01.840 --> 0:17:03.520
Boss, I swear, if you're watching this.

318
0:17:03.520 --> 0:17:04.600
No, I'm just kidding.

319
0:17:04.600 --> 0:17:05.600
So there we go.

320
0:17:05.600 --> 0:17:09.520
So we have these two indexes that have been created because I was testing yesterday and

321
0:17:09.520 --> 0:17:11.280
today.

322
0:17:11.280 --> 0:17:16.060
So log star just says hey, any index that looks like log with anything after it, group

323
0:17:16.060 --> 0:17:19.200
them together.

324
0:17:19.200 --> 0:17:22.400
Ask for a time field, which is our created field.

325
0:17:22.400 --> 0:17:23.680
And create index pattern.

326
0:17:23.680 --> 0:17:24.800
There we go.

327
0:17:24.800 --> 0:17:30.720
Open search, auto detect, all of these different files, types, et cetera.

328
0:17:30.720 --> 0:17:35.000
You can actually specify mappings and I actually really recommend that because different visualizations

329
0:17:35.000 --> 0:17:36.640
require different types of mappings.

330
0:17:36.640 --> 0:17:38.800
But that is not what we're talking about today.

331
0:17:38.800 --> 0:17:40.240
We're talking about Python logs.

332
0:17:40.240 --> 0:17:47.960
So we're going to go over to discover and go into our logs.

333
0:17:47.960 --> 0:17:51.040
And we are going to make sure we're looking at today's logs.

334
0:17:51.040 --> 0:17:52.400
Actually, you know what?

335
0:17:52.400 --> 0:17:53.400
Let's look at this week.

336
0:17:53.400 --> 0:17:54.720
Here we go.

337
0:17:54.720 --> 0:17:55.720
And we have three hits.

338
0:17:55.720 --> 0:17:57.160
There we are.

339
0:17:57.160 --> 0:17:58.160
These are our logs.

340
0:17:58.160 --> 0:17:59.160
Look ma, I'm logging.

341
0:17:59.160 --> 0:18:02.840
And you could actually see the exact point in time when I switch from this is my log

342
0:18:02.840 --> 0:18:04.660
to look ma, I'm logging.

343
0:18:04.660 --> 0:18:08.400
So that was yeah, I had 2.37 pm.

344
0:18:08.400 --> 0:18:15.280
So anyhow, with this, you can actually go ahead and then visualize spikes, peaks, valleys,

345
0:18:15.280 --> 0:18:16.280
when this is happening.

346
0:18:16.280 --> 0:18:18.280
You can enrich it with device information.

347
0:18:18.280 --> 0:18:21.480
So you can say, hey, when was this log sent?

348
0:18:21.480 --> 0:18:23.980
Is there a particular device that's having a lot of issues?

349
0:18:23.980 --> 0:18:27.840
So now instead of logging into all of your servers, you can go and bounce the correct

350
0:18:27.840 --> 0:18:29.880
ones.

351
0:18:29.880 --> 0:18:35.480
And if you saw Donton's presentation yesterday, you'll know you can use this for monitoring

352
0:18:35.480 --> 0:18:42.840
anything, whether it's CI-CD pipelines, Python logs, network logs, et cetera.

353
0:18:42.840 --> 0:18:44.860
So let's see.

354
0:18:44.860 --> 0:18:45.860
Look at that.

355
0:18:45.860 --> 0:18:48.160
You're doing more logging now than 99% of the population.

356
0:18:48.160 --> 0:18:49.160
So congratulations.

357
0:18:49.160 --> 0:18:52.160
Clap your hands for yourselves.

358
0:18:52.160 --> 0:19:01.400
So I'm going to talk real quick about just a very simple common logging architecture

359
0:19:01.400 --> 0:19:07.320
for capturing distributed logs and why you would want to do that.

360
0:19:07.320 --> 0:19:14.600
So more often than not, you're probably actually going to want to log your...

361
0:19:14.600 --> 0:19:17.720
You're going to want to put your logs locally on the file system.

362
0:19:17.720 --> 0:19:22.760
And the reason why is because your file system is not going to go down, and God forbid if

363
0:19:22.760 --> 0:19:26.280
it goes down, there's no hope for that log getting out anyways.

364
0:19:26.280 --> 0:19:30.720
Your service remotely could disconnect because whether you're doing an upgrade or something

365
0:19:30.720 --> 0:19:32.120
along those lines.

366
0:19:32.120 --> 0:19:34.880
So it acts as a little bit of a caching mechanism.

367
0:19:34.880 --> 0:19:38.560
And then you'll normally have it log to a file, and then you could use something like

368
0:19:38.560 --> 0:19:43.000
fluent bit or beats, and those will ship your logs out.

369
0:19:43.000 --> 0:19:47.360
And the wonderful thing about this architecture is, again, if open search was to go down because

370
0:19:47.360 --> 0:19:53.160
you're doing an update, or if something was to happen critical with your Python app, it

371
0:19:53.160 --> 0:19:56.200
can quickly write that log out.

372
0:19:56.200 --> 0:19:58.200
And you can also do enrichment.

373
0:19:58.200 --> 0:20:03.720
So I talked about getting which server sent that log.

374
0:20:03.720 --> 0:20:04.720
So fluent B...

375
0:20:04.720 --> 0:20:10.680
Sorry, fluent D, data prepper and log stash, all can take and enrich your logs with the

376
0:20:10.680 --> 0:20:13.200
context information that came with them.

377
0:20:13.200 --> 0:20:20.680
So say, for example, it says, I received this log from X, Y, and Z server, 10, 20, 90, to

378
0:20:20.680 --> 0:20:23.520
83, or something like that.

379
0:20:23.520 --> 0:20:29.520
Then it can go and do a reverse DNS lookup and say, hey, which service is assigned to

380
0:20:29.520 --> 0:20:30.520
that?

381
0:20:30.520 --> 0:20:33.840
And then it can add that information in and then push it into open search.

382
0:20:33.840 --> 0:20:38.880
So now you've all of a sudden gone from having a log that says, hello world, to...

383
0:20:38.880 --> 0:20:43.200
Or got here, please, please, do not.

384
0:20:43.200 --> 0:20:47.760
And you can have it pushed into open search, know what service is causing the issues, and

385
0:20:47.760 --> 0:20:50.920
visualize on dashboards.

386
0:20:50.920 --> 0:20:54.960
With that, I'm finished, please scan, look at open search if you're curious.

387
0:20:54.960 --> 0:21:00.960
It is open source, Apache 2 licensed, all of our features are being developed in the open.

388
0:21:00.960 --> 0:21:05.000
And with that, I want to ask it, does anyone have any questions?

389
0:21:05.000 --> 0:21:06.000
Yeah.

390
0:21:06.000 --> 0:21:07.000
Thank you.

391
0:21:07.000 --> 0:21:21.160
Hello?

392
0:21:21.160 --> 0:21:23.160
Okay.

393
0:21:23.160 --> 0:21:27.800
I'm mostly familiar with Sentry, and I'm very curious how would you compare this to that?

394
0:21:27.800 --> 0:21:31.880
Because as far as my friend has told me, they're pretty different products, but they do similar

395
0:21:31.880 --> 0:21:32.880
stuff.

396
0:21:32.880 --> 0:21:35.480
Yeah, I think Sentry is more of an APM, isn't it?

397
0:21:35.480 --> 0:21:36.880
Is that word familiar?

398
0:21:36.880 --> 0:21:42.200
Okay, so open search has some APM capabilities, which is...

399
0:21:42.200 --> 0:21:46.640
I don't remember the word for it, but it's for app monitoring and specific to the application.

400
0:21:46.640 --> 0:21:50.880
So this has some APM capabilities.

401
0:21:50.880 --> 0:21:55.840
It might not go as deep as some of your auto configurations for other APM tools, though.

402
0:21:55.840 --> 0:21:59.680
But it can ingest APM logs, so it's a good question.

403
0:21:59.680 --> 0:22:00.800
Thank you.

404
0:22:00.800 --> 0:22:03.680
We had two async questions from the chats.

405
0:22:03.680 --> 0:22:08.840
The first one is, what about fstrings and logging?

406
0:22:08.840 --> 0:22:13.760
Because I wrote this presentation in a couple hours, and yeah.

407
0:22:13.760 --> 0:22:19.280
So I'm trying to modernize, but again, old habits die hard, so I'm still using fstrings.

408
0:22:19.280 --> 0:22:21.280
Please don't get on me.

409
0:22:21.280 --> 0:22:24.400
What was the next one?

410
0:22:24.400 --> 0:22:25.400
Sorry.

411
0:22:25.400 --> 0:22:31.200
And the second question is, what about structured logging, and in particular, strut log?

412
0:22:31.200 --> 0:22:32.920
I'm not actually familiar with strut log.

413
0:22:32.920 --> 0:22:38.640
So I'm actually moving myself more towards using open telemetry instead of logging, or

414
0:22:38.640 --> 0:22:40.240
alongside logging, we'll say.

415
0:22:40.240 --> 0:22:46.480
So open telemetry gives you a trace, actually, which can tell you the full stack of what

416
0:22:46.480 --> 0:22:48.520
happened during your application.

417
0:22:48.520 --> 0:22:56.000
So everything down from which function was called to which load balancer sent the information

418
0:22:56.000 --> 0:22:57.000
over.

419
0:22:57.000 --> 0:22:59.960
So you get an end-to-end trace of what happened, which in my opinion, I think, is a little

420
0:22:59.960 --> 0:23:02.960
bit more handy than just logs.

421
0:23:02.960 --> 0:23:10.680
I think we have one more question in the middle.

422
0:23:10.680 --> 0:23:14.040
Just a quick question from a discussion I'm having with the co-worker.

423
0:23:14.040 --> 0:23:19.520
So we're thinking about moving our logs to JSON format, because it's, like, easy to understand

424
0:23:19.520 --> 0:23:22.960
for non-Python people and searchable.

425
0:23:22.960 --> 0:23:27.560
If we were to switch to open search, and I really like the presentation, do you think

426
0:23:27.560 --> 0:23:32.680
it's still feasible to make logs searchable in and of itself?

427
0:23:32.680 --> 0:23:39.760
Or is open search that stable and usable and from your experience, there's no need to search

428
0:23:39.760 --> 0:23:40.760
on your logs?

429
0:23:40.760 --> 0:23:42.140
Yeah, no, that's a great question.

430
0:23:42.140 --> 0:23:44.120
You do need to search your logs.

431
0:23:44.120 --> 0:23:48.560
Open search is a search engine at its core, and that is why it is as good as it is with

432
0:23:48.560 --> 0:23:50.200
logs.

433
0:23:50.200 --> 0:23:55.440
As for JSON versus other formats, I think there's no particular preference.

434
0:23:55.440 --> 0:23:56.880
But open search is certainly stable.

435
0:23:56.880 --> 0:23:58.720
We have 150 million downloads.

436
0:23:58.720 --> 0:24:01.560
So we are here to stay.

437
0:24:01.560 --> 0:24:07.840
It's been adopted by a lot of companies, such as Oracle, Ivan, InstaCluster, Opster, Amazon

438
0:24:07.840 --> 0:24:12.400
Web Services, of course, because I worked there, and many others.

439
0:24:12.400 --> 0:24:17.880
So I would say it is very stable, production ready to use, and, yeah, it's a really great

440
0:24:17.880 --> 0:24:18.880
way to search your logs.

441
0:24:18.880 --> 0:24:24.360
In fact, I have a lightning talk at 1655 in another room, so I think it's a Kubernetes

442
0:24:24.360 --> 0:24:25.360
room.

443
0:24:25.360 --> 0:24:28.160
If you want to talk more about searching your logs, I'm going to be talking about search

444
0:24:28.160 --> 0:24:30.320
relevance for logs.

445
0:24:30.320 --> 0:24:31.320
Thank you.

446
0:24:31.320 --> 0:24:56.440
Thank you, online people.


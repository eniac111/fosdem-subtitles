WEBVTT

00:00.000 --> 00:02.000
Thank you.

00:05.140 --> 00:07.140
We have to stay on our schedule.

00:09.440 --> 00:12.280
So our next speaker, Rona, she stood here three years ago but

00:12.280 --> 00:16.280
before the pandemic was a thing and she gave us a challenge to

00:16.280 --> 00:19.280
solve the Go diversity problem within a year. Rona, is it

00:19.280 --> 00:21.280
solved?

00:22.380 --> 00:24.380
Well done. Well done.

00:24.380 --> 00:29.380
Well done. Well done.

00:29.380 --> 00:31.380
No? No?

00:33.380 --> 00:35.380
So actually, Martia stole this from me because three years ago

00:35.380 --> 00:38.380
I did challenge this forum to solve the problem of lack of

00:38.380 --> 00:42.380
diversity within the Go community within a year.

00:42.380 --> 00:48.380
And then the pandemic hit and it seems that these issues kind of

00:48.380 --> 00:52.380
took a long time to solve the problem.

00:52.380 --> 00:56.380
And so the issues kind of took a side, were pushed aside

00:56.380 --> 01:00.380
unfortunately. But we can start again.

01:00.380 --> 01:04.380
So I'm here to talk to you today about a lighter topic, is Go

01:04.380 --> 01:10.380
object oriented? Now, it appears to be something that people have

01:10.380 --> 01:14.380
many opinions about. And I hope that you do too because that

01:14.380 --> 01:20.380
will be fun. So I am Rona. I'm a Google developer expert for

01:20.380 --> 01:25.380
Go. I create workshops. That's kind of like my thing when I

01:25.380 --> 01:29.380
want to teach something. I make a workshop about it. And in

01:29.380 --> 01:35.380
2022 I kind of realized that after a few years of seeing

01:35.380 --> 01:40.380
developers struggling with different paradigms around the

01:40.380 --> 01:44.380
Go typing system, specifically with interfaces, I figured why

01:44.380 --> 01:48.380
not create a workshop about it and I submitted it to Go for

01:48.380 --> 01:55.380
Europe. It was the name of the Go workshop was object oriented

01:55.380 --> 02:03.380
design with Go. And then the comments started coming.

02:03.380 --> 02:07.380
So something between object oriented is dead. Please let

02:07.380 --> 02:11.380
it R and P.

02:11.380 --> 02:18.380
I'm going to give a comment to why. Somebody posted a comment

02:18.380 --> 02:23.380
on my tweet and then blocked me. Because apparently that's how

02:23.380 --> 02:29.380
the Internet works. So, yeah, and somebody blamed me for

02:29.380 --> 02:34.380
introducing spring into Go. Now, I have been a developer for

02:34.380 --> 02:38.380
20 years, but I have not done any spring in my life. And that

02:38.380 --> 02:46.380
is why I'm here. I was fairly surprised. So I'm not here to

02:46.380 --> 02:50.380
promote my workshop, even though I'm giving it again this year

02:50.380 --> 02:56.380
in Berlin. And, you know, in June, because that would be

02:56.380 --> 03:04.380
bad. So what is object oriented programming? So it's the idea

03:04.380 --> 03:08.380
of building software into things or objects or concerns or

03:08.380 --> 03:14.380
instances and adding some functionality to them, usually

03:14.380 --> 03:19.380
called messages or methods or member functions so that we can

03:19.380 --> 03:23.380
work with software in a more intuitive way, the way that we

03:23.380 --> 03:28.380
understand how we interact with the real world. That's it.

03:28.380 --> 03:33.380
Now, where there are things, it can get incredibly messy.

03:33.380 --> 03:39.380
That's the business model behind Marie Kondo. Yeah. I felt

03:39.380 --> 03:44.380
this sigh. You don't have 14 items maximum in your house.

03:44.380 --> 03:51.380
You're not alone. And we have this lovely quote from Joe

03:51.380 --> 03:55.380
Armstrong. The problem with object oriented languages is

03:55.380 --> 03:58.380
that they've got all of this implicit environment that they

03:58.380 --> 04:02.380
carry with them. You wanted a banana, but what you got was a

04:02.380 --> 04:07.380
gorilla holding a banana and the entire jungle. And that

04:07.380 --> 04:13.380
feels like it. It does. It really does.

04:13.380 --> 04:17.380
So go really went a different way. It tried to sort of stay

04:17.380 --> 04:23.380
away from this. But we'll see what remains and what actually

04:23.380 --> 04:27.380
remained from this and what actually we were able to let go

04:27.380 --> 04:31.380
of in a second. So we're going to hold a trial where we're

04:31.380 --> 04:34.380
going to check you're going to be the jury. You're going to

04:34.380 --> 04:37.380
decide if go is object oriented. I'm going to try and convince

04:37.380 --> 04:40.380
you. I'm going to show you the arguments for both sides. And

04:40.380 --> 04:43.380
I'm going to have to convince you that it is object oriented

04:43.380 --> 04:50.380
or I am responsible for defamation. I am taking the

04:50.380 --> 04:55.380
ghost good name and dragging it through the mud, tarnishing

04:55.380 --> 05:01.380
it, hurting its reputation. You're the jury. You will decide.

05:01.380 --> 05:07.380
So disclaimer, this is not a real trial. But and I'm the

05:07.380 --> 05:11.380
judge and the rules are what I say they are, which is to say

05:11.380 --> 05:16.380
that these proceedings are going to be ridiculous. But yeah,

05:16.380 --> 05:20.380
we're just going to have to do it. So what have we come to

05:20.380 --> 05:24.380
expect from an object oriented language? Most of you know this

05:24.380 --> 05:28.380
by heart, really. We have classes because classes and only

05:28.380 --> 05:33.380
classes can have methods classes can also have this constructors

05:33.380 --> 05:42.380
constructors are created allowed to create objects safely.

05:42.380 --> 05:59.380
And we also expect inheritance. Objection. So in go. We don't

05:59.380 --> 06:04.380
have classes. And therefore we don't have constructors, but we

06:04.380 --> 06:09.380
pretend to have them. So here's where we pretend to have

06:09.380 --> 06:13.380
something. Now this one is quite fun. So this is a package that

06:13.380 --> 06:19.380
I created. And you can see here that inside type robot, the

06:19.380 --> 06:23.380
go doc aggregated nicely a function called new. Now you

06:23.380 --> 06:25.380
can see that it doesn't actually have a receiver. It's not a

06:25.380 --> 06:29.380
method. It's not anything. And it's just the package level

06:29.380 --> 06:33.380
function that the go doc understood to be a constructor

06:33.380 --> 06:37.380
and then added it where it should be nicely nested inside a

06:37.380 --> 06:41.380
robot type. Which is really interesting because what that

06:41.380 --> 06:44.380
means was that the go team essentially decided at some

06:44.380 --> 06:49.380
point that safe construction of objects is a tooling problem,

06:49.380 --> 06:57.380
not a language problem. It's interesting. We work

06:57.380 --> 07:02.380
constructors. Okay. All types can have methods. So you've

07:02.380 --> 07:06.380
probably seen this or code similar to this some point in

07:06.380 --> 07:10.380
your life. So I created a new type my thing out of an

07:10.380 --> 07:16.380
integer. So we have a new type with an underlying type int. I

07:16.380 --> 07:22.380
added a method foo to it using the receiver. Remember that we

07:22.380 --> 07:28.380
said earlier that we have objects interacting through

07:28.380 --> 07:33.380
messages. It's called a receiver because it receives.

07:33.380 --> 07:41.380
It's that easy. Yeah. Come on. All together. Nobody agrees.

07:41.380 --> 07:51.380
What's going on? Yeah. Okay. Pathetic. But yeah. I said I

07:51.380 --> 07:58.380
was going to judge. All right. So and then we have so now

07:58.380 --> 08:02.380
we created a variable T of type my thing. We assigned it

08:02.380 --> 08:08.380
one and then we're able to call a method on T foo. Voila.

08:08.380 --> 08:12.380
We have a primitive type and it has a method because in go

08:12.380 --> 08:25.380
all types are created equal. Thank you.

08:25.380 --> 08:32.380
Only real life. Okay. So let's move on to inheritance. So we

08:32.380 --> 08:37.380
get in go we get composition. We don't get inheritance.

08:37.380 --> 08:41.380
That's not something that's available to us. So this little

08:41.380 --> 08:45.380
snippet here is supposed to show the difference. I created

08:45.380 --> 08:50.380
a type a it's an empty struct. I added a method foo to it.

08:50.380 --> 08:56.380
It has a method bar foo calls bar. That's nice. Returns bar.

08:56.380 --> 09:01.380
We have type B that embeds a it can embed as many as many as

09:01.380 --> 09:06.380
many as many as many types as it wants. It embeds a that means

09:06.380 --> 09:11.380
that now it has foo and bar and then it decided to override

09:11.380 --> 09:20.380
bar. Fine. Variable B of B lowercase B of type uppercase B

09:20.380 --> 09:25.380
to be confusing not to be confused. Okay. Get it.

09:25.380 --> 09:30.380
And we can call B dot bar and we expect B dot bar to be

09:30.380 --> 09:37.380
invoked directly and then we call B dot foo. Now with

09:37.380 --> 09:46.380
inheritance we would expect B dot foo which returns a dot bar

09:46.380 --> 09:53.380
which is overridden to be called. So we would expect to get B

09:53.380 --> 09:57.380
in both cases. But that's not what's going to happen because

09:57.380 --> 10:02.380
we do not have this type of polymorphism. That is true.

10:02.380 --> 10:07.380
Who was it who said it earlier? Raise your hands.

10:07.380 --> 10:13.380
Round of applause to the gentleman.

10:13.380 --> 10:18.380
Okay. Moving on. So let's talk about single and multiple inheritance

10:18.380 --> 10:22.380
because this really bugs me. So I started my career with seven years

10:22.380 --> 10:28.380
of C++ and yes it sounds biblical because it is.

10:28.380 --> 10:34.380
Thank you. Yeah. So I started with seven years of C++.

10:34.380 --> 10:41.380
C++ actually has a really nifty feature you can inherit a lot.

10:41.380 --> 10:46.380
You have multiple inheritance. It's not limited. Java, Ruby,

10:46.380 --> 10:50.380
they allow you to inherit exactly once. That to me does not

10:50.380 --> 10:53.380
feel like a feature. That feels like a limitation. I don't

10:53.380 --> 10:57.380
understand it. Let's say that you have a truck and you want to

10:57.380 --> 11:01.380
describe a container of goods and a vehicle. You cannot

11:01.380 --> 11:06.380
inherit from both. What do you do? Well, in Go we have composition

11:06.380 --> 11:11.380
but in many, many languages that offer inheritance you only get

11:11.380 --> 11:15.380
single inheritance. Now I will say this. If you feel, and I know

11:15.380 --> 11:19.380
that a lot of people do, if you feel that inheritance is that

11:19.380 --> 11:24.380
important, it just doesn't make sense that it will be so limited

11:24.380 --> 11:28.380
a feature that you will not be able to use properly or like

11:28.380 --> 11:31.380
or fully. And I do believe also that that is the cause of all

11:31.380 --> 11:37.380
the messy code that we see because my, the classes that I

11:37.380 --> 11:41.380
used to define were very small, were one function, two functions.

11:41.380 --> 11:44.380
I didn't have to make odd choices of what is going to go

11:44.380 --> 11:49.380
into a class or what wouldn't. So it was really easy to be

11:49.380 --> 11:54.380
very expressive. So that's what I personally, my personal

11:54.380 --> 11:58.380
opinion, is about single and multiple inheritance. I don't

11:58.380 --> 12:02.380
feel in most common languages since it's usually single

12:02.380 --> 12:08.380
inheritance, I don't feel that it makes it a, it makes it

12:08.380 --> 12:11.380
something that is going to determine whether a language is

12:11.380 --> 12:16.380
or isn't object oriented because if it is, then as far as I'm

12:16.380 --> 12:19.380
concerned, single, any language that has single inheritance

12:19.380 --> 12:26.380
cannot be object oriented. So, go is not object oriented, the

12:26.380 --> 12:29.380
usual argument summary, and I'm going to like, you have to

12:29.380 --> 12:31.380
understand that I'm aggregating here everything that was sent

12:31.380 --> 12:35.380
to me over the internet, which is a great source of information

12:35.380 --> 12:41.380
and also a great source of information. So, go is simple,

12:41.380 --> 12:45.380
object oriented programming isn't, therefore go is not object

12:45.380 --> 12:50.380
oriented. Go doesn't have classes, so go cannot be object

12:50.380 --> 12:54.380
oriented. It doesn't have inheritance, so it's not object

12:54.380 --> 12:57.380
oriented. And lastly, and this one is a great argument, we're

12:57.380 --> 13:01.380
going to dive into that one, methods are not really messages,

13:01.380 --> 13:05.380
so go is not object oriented. Now, this one is fun. So this

13:05.380 --> 13:09.380
comes from the Alan Kay school. So all the fans of Alan Kay

13:09.380 --> 13:13.380
have jumped in to let me know everything about the history of

13:13.380 --> 13:17.380
object oriented. So here's what I've got. One person said

13:17.380 --> 13:20.380
technically they aren't methods, so he's referring to

13:20.380 --> 13:23.380
receiver to method receivers, they aren't methods on type T,

13:23.380 --> 13:27.380
they are functions where the first argument is type is the

13:27.380 --> 13:31.380
type. The promotion to them as methods is syntactic sugar.

13:31.380 --> 13:36.380
It's why you can call, now look at this, this is amazing,

13:36.380 --> 13:44.380
V dot foo with bar or T, call the type, invoke a method on

13:44.380 --> 13:50.380
the type and provide V as a parameter. And it's true, show

13:50.380 --> 13:57.380
you what it looks like. So same code as before, we have a

13:57.380 --> 14:06.380
empty struct, we have method foo on that we added to A,

14:06.380 --> 14:16.380
quiet in the court. We have method foo that we added to

14:16.380 --> 14:20.380
type A, which is nice, and we can invoke it using two ways.

14:20.380 --> 14:25.380
One is clearly less common than the other, so this is the

14:25.380 --> 14:31.380
common way, or we can invoke it on the type and pass in

14:31.380 --> 14:44.380
lower case A as a parameter. You have the screen?

14:44.380 --> 14:50.380
That's why, by the way, a pointer receiver can be nil.

14:50.380 --> 14:52.380
So I have this game, I play this game all the time with

14:52.380 --> 14:56.380
people who are new to go and ask them what's going to happen.

14:56.380 --> 15:02.380
So I create, we are able to create methods with pointer

15:02.380 --> 15:10.380
receivers. So I add foo and make the receiver a pointer.

15:10.380 --> 15:15.380
I create variable A, which is a pointer to upper case A,

15:15.380 --> 15:23.380
which is a pointer to the pointer. It's zero value is nil.

15:23.380 --> 15:29.380
And I invoke A.foo. And then I ask people what will happen.

15:29.380 --> 15:35.380
Now, we're not going to be able to do this quiz here, because

15:35.380 --> 15:39.380
we are late on time and we have to make up some time.

15:39.380 --> 15:48.380
So, hi from foo is actually returned by foo, which means

15:48.380 --> 15:53.380
we were able to invoke a method on a nil pointer.

15:53.380 --> 15:57.380
It's possible because there is no receiver, there's no actual

15:57.380 --> 16:01.380
receiver. Most of the time when we call a method in other

16:01.380 --> 16:08.380
languages, what happens is that we are, we have to go and

16:08.380 --> 16:11.380
go through some reference that's somewhere in the address

16:11.380 --> 16:19.380
space of the variable itself. This tells us that it's not

16:19.380 --> 16:22.380
where the method is at all. It's not where it's defined.

16:22.380 --> 16:31.380
It's not where the run time looks for it. It's just not.

16:31.380 --> 16:35.380
So my coorganizer, my women who go coorganize it, Jessica

16:35.380 --> 16:39.380
Green saw this and said, so there is no spoon, which I

16:39.380 --> 16:43.380
thought was amazing, because this is kind of a design thing,

16:43.380 --> 16:47.380
right? So everything is in our minds. Really everything is in

16:47.380 --> 16:50.380
our minds. We sort of, you know, we have these philosophical

16:50.380 --> 16:53.380
ideas and then we put them into code. If there is anybody who

16:53.380 --> 16:56.380
actually thinks that the gopher that you saw on the screen in

16:56.380 --> 17:00.380
the maze, there is an actual gopher out there doing this, let

17:00.380 --> 17:09.380
me know. I want to hang out. So where do receivers come from?

17:09.380 --> 17:12.380
So listen to this, because this is very interesting.

17:12.380 --> 17:16.380
According to the Go team, the Inspiration2 method receivers

17:16.380 --> 17:23.380
came from Oberon 2, which is the object oriented version of

17:23.380 --> 17:43.380
Oberon. Okay. And they're called receivers because they

17:43.380 --> 17:48.380
receive messages, except there is no receiver. So everybody's

17:48.380 --> 17:54.380
right. Another thing that the same person brought up, which

17:54.380 --> 17:58.380
is really cool, he said, well, I forgot to say who Alan Kay

17:58.380 --> 18:02.380
was. What's wrong with me? Alan Kay is the creator of small

18:02.380 --> 18:05.380
talk and also is considered to be the person who coined the

18:05.380 --> 18:08.380
term object oriented. So he's supposedly supposed to know

18:08.380 --> 18:14.380
stuff about it. You know. So that's why people quote him and

18:14.380 --> 18:18.380
that's fine. It's totally fine. And he has a lot of opinions,

18:18.380 --> 18:23.380
which is also great. We encourage opinions. So what a

18:23.380 --> 18:25.380
person said to me, so in small talk, you don't need to

18:25.380 --> 18:28.380
explicitly declare that an object can have a specific

18:28.380 --> 18:33.380
message. You send it a message and then it decides whether to

18:33.380 --> 18:39.380
handle it. So duck typing. Now, this is really interesting.

18:39.380 --> 18:46.380
Can we do this and go? Can we check if a certain value, if

18:46.380 --> 18:49.380
this can handle a certain message or has in layman's

18:49.380 --> 18:53.380
terms, has certain methods? Well, the answer is yes,

18:53.380 --> 19:00.380
through the magic of interface conversion. So again, we type

19:00.380 --> 19:06.380
a, we added function foo, it doesn't do much. We don't

19:06.380 --> 19:11.380
actually care what it does. And we created interface i,

19:11.380 --> 19:17.380
uppercase i. And this interface has one function, defines

19:17.380 --> 19:24.380
one function, foo, that returns a string. And a,

19:24.380 --> 19:27.380
coincidentally, or pointed to a, coincidentally, also has

19:27.380 --> 19:33.380
foo, which is a string. Now, this is where go completely

19:33.380 --> 19:38.380
differently than other languages. In go, interfaces are

19:38.380 --> 19:44.380
implicit. In most languages, if you have, let's say, class

19:44.380 --> 19:48.380
a and you wanted to implement interface i, you have to, at

19:48.380 --> 19:52.380
the time of creating that class, you have to say something

19:52.380 --> 19:56.380
like class a implements i. That means that you have to be,

19:56.380 --> 20:00.380
that you cannot have a type that is not aware, has no

20:00.380 --> 20:05.380
idea that, and implements, that a certain interface exists

20:05.380 --> 20:10.380
and will implement it. Not unless, not unless, that's

20:10.380 --> 20:14.380
why a lot of people move to scripting languages, because

20:14.380 --> 20:19.380
that allows them to pick some code from the internet and

20:19.380 --> 20:23.380
use it. You know, just use it. Regardless of what's going

20:23.380 --> 20:27.380
on. And go allows you to actually download some random

20:27.380 --> 20:32.380
code from the internet and plug it in using your own

20:32.380 --> 20:39.380
interfaces. It's very strange. It's very unique. So, with

20:39.380 --> 20:43.380
that in mind, if you have implicit interfaces, it makes

20:43.380 --> 20:48.380
sense to be able to try and be able to ask whether a type

20:48.380 --> 20:53.380
implements an interface. Because maybe it does. In other

20:53.380 --> 20:58.380
languages, it just doesn't make sense because the answer

20:58.380 --> 21:05.380
will be no. Right? Right. Okay. So, therefore, we use

21:05.380 --> 21:09.380
interface conversion. Now, this is the syntax. What you

21:09.380 --> 21:12.380
need to understand from this expression is that if

21:12.380 --> 21:18.380
everything was fine, then Val will have a type, will have

21:18.380 --> 21:25.380
B, which is, which it points to A. And with the

21:25.380 --> 21:31.380
interface of I, inside the interface of I, Val will have

21:31.380 --> 21:35.380
all of that and will be able to invoke foo, which is

21:35.380 --> 21:39.380
this one. Which is exactly what's going to happen. And

21:39.380 --> 21:43.380
this is how stringers work. Now, we said that small talk,

21:43.380 --> 21:48.380
we said that small talk was created by Alan Kay and he

21:48.380 --> 21:53.380
coined object oriented. Well, actually created small talk

21:53.380 --> 21:59.380
with the explicit, explicitly with his ideas of what

21:59.380 --> 22:04.380
object oriented is supposed to be. And it's important

22:04.380 --> 22:08.380
because according to Robert Grissmer, who is one of the

22:08.380 --> 22:13.380
creators of the Go programming language, this is what

22:13.380 --> 22:17.380
small talk was actually the inspiration for this kind of

22:17.380 --> 22:20.380
interface conversion so that at run time we can actually

22:20.380 --> 22:25.380
check if a type has certain methods. And Russ Cox

22:25.380 --> 22:29.380
compared it to duck typing. And by the way, this is a

22:29.380 --> 22:33.380
really, really nice read. So, if you just Google Russ

22:33.380 --> 22:37.380
Cox duck typing, you will find it. It is a really nice

22:37.380 --> 22:40.380
read. He explains how the run time does it and also how

22:40.380 --> 22:43.380
the caching works because obviously you cannot compute

22:43.380 --> 22:46.380
well at compile time. You cannot compute every type

22:46.380 --> 22:49.380
against all the interfaces in the world. It's really,

22:49.380 --> 22:56.380
really nice. And finally, we have a surprise witness.

22:56.380 --> 23:00.380
Martje is going to be the proxy of said surprise witness.

23:00.380 --> 23:01.380
Do you have your?

23:01.380 --> 23:11.380
I am here. So, before I introduce our witness, I am

23:11.380 --> 23:16.380
going to ask the witness, do you remember giving an

23:16.380 --> 23:24.380
interview in 2010 to Danica Lev? I don't recall.

23:24.380 --> 23:27.380
Well, it's on the internet, so it must be true. It's

23:27.380 --> 23:36.380
true. I submit into evidence a web page, exhibit 90210.

23:36.380 --> 23:43.380
So, please read a portion of the text from the web

23:43.380 --> 23:45.380
page in your own voice.

23:45.380 --> 23:49.380
Okay. Go is an object oriented even though it doesn't

23:49.380 --> 23:52.380
have the notion of a class. The type system is more

23:52.380 --> 23:56.380
general. Any type, even basic types such as integers and

23:56.380 --> 23:58.380
strings can have methods.

23:58.380 --> 24:02.380
Thank you very much. So, what makes you such an expert

24:02.380 --> 24:06.380
to be able to say such claims?

24:06.380 --> 24:08.380
I co-created the language.

24:08.380 --> 24:11.380
You created the language. What is your name?

24:11.380 --> 24:13.380
Rob Pike.

24:13.380 --> 24:16.380
Thank you, Rob. New glasses?

24:16.380 --> 24:18.380
Yeah, new dress. Really made it.

24:18.380 --> 24:20.380
Thank you very much. Thank you, Martje.

24:20.380 --> 24:31.380
So, yes, Rob Pike actually said that in 2010. I don't

24:31.380 --> 24:35.380
know if he actually changed his mind since. But the

24:35.380 --> 24:39.380
truth is that I feel that at this point it is clearly a

24:39.380 --> 24:42.380
matter of opinion. So, I would like to know yours since

24:42.380 --> 24:45.380
you are the jury.

24:45.380 --> 24:55.380
Voting is now open. So, the verdict. It's verdict time.

24:55.380 --> 25:03.380
I hope it's now open. Yeah, it is.

25:03.380 --> 25:10.380
The Go team is not permitted to answer.

25:10.380 --> 25:13.380
I believe one of my members asked the Go team last year

25:13.380 --> 25:17.380
if Go is object oriented.

25:17.380 --> 25:32.380
That's a dare.

25:32.380 --> 25:37.380
I am going to give you 35 more seconds because we have to

25:37.380 --> 25:52.380
wrap it up.

25:52.380 --> 25:56.380
Am I correct? You already see 105 judgments. 108.

25:56.380 --> 26:02.380
Oh, no.

26:02.380 --> 26:12.380
I'm not sure if I'm going to get a bunch of bots.

26:12.380 --> 26:16.380
All right. So, I have to close this.

26:16.380 --> 26:24.380
Unfortunately, let's find out what you said.

26:24.380 --> 26:28.380
That's interesting.

26:28.380 --> 26:38.380
Are you showing the Q&A?

26:38.380 --> 26:48.380
Yeah, I don't know what happened.

26:48.380 --> 26:50.380
Let's do this.

26:50.380 --> 26:55.380
That's what I did. Wow.

26:55.380 --> 27:00.380
Okay. So, I am going to cancel these proceedings

27:00.380 --> 27:07.380
because clearly you're out of your minds.

27:07.380 --> 27:16.380
As the judge, I condemn myself to providing you with

27:16.380 --> 27:20.380
stickers. Lots and lots and lots of stickers.

27:20.380 --> 27:24.380
Iris Rona, thank you very much. I have to get off.

27:24.380 --> 27:35.380
Thank you.

27:35.380 --> 27:38.380
If you have a sticker, you also have to give her one if she

27:38.380 --> 27:41.380
convinced you.

27:41.380 --> 27:43.380
Again, housekeeping announcement.

27:43.380 --> 27:46.380
If you submitted lightning talk, check your mail matrix,

27:46.380 --> 27:48.380
Discord, WhatsApp, whatever you sent to me.

27:48.380 --> 27:52.380
I'll try to contact you if you got accepted, if you aren't

27:52.380 --> 27:55.380
sure, our mested on account has...

1
0:00:00.000 --> 0:00:10.320
And it is time for our next talk. I would like you to welcome a venduler.

2
0:00:10.320 --> 0:00:24.980
Hello, I'm Wendy. I'm a software engineer. I work at third head for six years now and

3
0:00:24.980 --> 0:00:28.680
and I'm part of the system in starting.

4
0:00:28.680 --> 0:00:32.680
And today, welcome on my talk about the communication

5
0:00:32.680 --> 0:00:35.780
with D-Bus from Python applications.

6
0:00:35.780 --> 0:00:37.700
So first of all, I would like to clarify

7
0:00:37.700 --> 0:00:40.760
that I'm in no way an expert on D-Bus.

8
0:00:40.760 --> 0:00:43.860
I'm just a very lazy programmer who wrote library

9
0:00:43.860 --> 0:00:46.440
to make her job easier.

10
0:00:46.440 --> 0:00:48.340
So what is D-Bus?

11
0:00:48.340 --> 0:00:51.140
It's a shortcut for the disk to bus,

12
0:00:51.140 --> 0:00:55.140
and basically it's a system for the inter-process

13
0:00:55.140 --> 0:00:56.480
communication.

14
0:00:56.480 --> 0:00:59.880
It consists of two parts, the protocol and the bus daemon,

15
0:00:59.880 --> 0:01:03.280
and on a typical Linux distribution,

16
0:01:03.280 --> 0:01:06.280
you can usually find the two bus daemon,

17
0:01:08.320 --> 0:01:11.320
the session bus and the system bus.

18
0:01:11.320 --> 0:01:14.860
So for example, this is a screenshot from my laptop.

19
0:01:14.860 --> 0:01:17.460
This is the visual representation of the system buses

20
0:01:17.460 --> 0:01:20.540
and services that you can find.

21
0:01:20.540 --> 0:01:22.340
And for the demonstration purposes,

22
0:01:22.340 --> 0:01:25.500
I've created the example chat service,

23
0:01:25.500 --> 0:01:28.740
and you can see on the right side

24
0:01:28.740 --> 0:01:31.980
that this service provides for objects,

25
0:01:33.120 --> 0:01:36.480
and this object implements some interfaces.

26
0:01:36.480 --> 0:01:40.460
So how do we talk to this thing from Python?

27
0:01:40.460 --> 0:01:43.260
We will use the D-Bus library for that.

28
0:01:43.260 --> 0:01:45.620
It's a library that I wrote some years ago,

29
0:01:45.620 --> 0:01:47.960
and basically it's an abstraction level

30
0:01:47.960 --> 0:01:51.460
above Python bindings for the GV library.

31
0:01:53.260 --> 0:01:55.240
Okay, so let's jump in.

32
0:01:55.240 --> 0:01:56.840
Let's start with the client part.

33
0:01:56.840 --> 0:01:59.700
So we know that there is a D-Bus service

34
0:01:59.700 --> 0:02:01.480
that we want to talk to,

35
0:02:01.480 --> 0:02:05.440
and how do we do it from the Python application?

36
0:02:05.440 --> 0:02:07.780
First of all, we need to establish the connection

37
0:02:07.780 --> 0:02:09.020
to the message bus.

38
0:02:09.020 --> 0:02:10.780
In this case, we know it's the session bus,

39
0:02:10.780 --> 0:02:13.960
so we will use the session message bus.

40
0:02:13.960 --> 0:02:15.760
And the other thing that we have to create

41
0:02:15.760 --> 0:02:19.500
is the proxy of the remote object we want to talk to.

42
0:02:19.500 --> 0:02:21.600
For that, we need to know two things.

43
0:02:21.600 --> 0:02:25.540
The first one is the name of the D-Bus service.

44
0:02:25.540 --> 0:02:29.800
The second one is the object path of the remote object.

45
0:02:29.800 --> 0:02:31.400
After that, we can use the proxy

46
0:02:31.400 --> 0:02:33.180
like any other Python object.

47
0:02:33.180 --> 0:02:35.780
So we can get and set properties.

48
0:02:35.780 --> 0:02:37.520
We can call methods.

49
0:02:38.820 --> 0:02:42.980
And another thing we can do is to watch D-Bus signals.

50
0:02:42.980 --> 0:02:46.980
D-Bus signals is something you can connect to.

51
0:02:48.180 --> 0:02:49.720
You will create a callback,

52
0:02:49.720 --> 0:02:51.320
connect this callback to the signal,

53
0:02:51.320 --> 0:02:54.420
and every time this service emits the signal,

54
0:02:54.420 --> 0:02:58.580
your callback will be called and run and processed.

55
0:03:00.520 --> 0:03:02.820
So this is how we do it.

56
0:03:02.820 --> 0:03:05.860
This service, or this run proxy,

57
0:03:05.860 --> 0:03:09.800
has one signal called message received signal,

58
0:03:09.800 --> 0:03:11.160
and you can connect the callback

59
0:03:11.160 --> 0:03:14.440
to the message that you receive.

60
0:03:14.440 --> 0:03:15.600
And that's it.

61
0:03:16.740 --> 0:03:18.380
This requires one more step,

62
0:03:18.380 --> 0:03:21.880
and that's to run an event loop.

63
0:03:21.880 --> 0:03:25.480
Basically, it's a little complicated to explain.

64
0:03:25.480 --> 0:03:27.480
It's just a black box that runs forever

65
0:03:27.480 --> 0:03:31.660
and handles any asynchronous events that can come up,

66
0:03:32.560 --> 0:03:34.820
like emitting of a signal.

67
0:03:34.820 --> 0:03:38.100
So the things run forever unless you stop the loop

68
0:03:38.100 --> 0:03:41.360
or kill the application.

69
0:03:41.360 --> 0:03:44.760
Yeah, so let's actually do some demonstration

70
0:03:44.760 --> 0:03:49.100
because I think the demonstrations are doomed to fail,

71
0:03:49.100 --> 0:03:50.340
but let's try.

72
0:03:50.340 --> 0:03:53.340
So here I need to start my server.

73
0:03:56.180 --> 0:03:57.620
Let's not dive into that yet.

74
0:03:57.620 --> 0:04:00.120
It's just I needed to have a training.

75
0:04:00.120 --> 0:04:03.280
And we can actually check the defeat,

76
0:04:03.280 --> 0:04:07.660
and on the session bus, you can look for my example chat.

77
0:04:07.660 --> 0:04:09.820
And you can see what you saw on the slides.

78
0:04:09.820 --> 0:04:11.400
Sorry, it's so little.

79
0:04:11.400 --> 0:04:14.360
And there's my Room 3, and there are some interfaces,

80
0:04:14.360 --> 0:04:17.140
and this is the interface I'm interested in.

81
0:04:17.140 --> 0:04:19.640
So let's do some stuff with it.

82
0:04:20.940 --> 0:04:25.100
The first one, we will ask for the name of the room,

83
0:04:27.440 --> 0:04:28.440
and that's it.

84
0:04:28.440 --> 0:04:31.440
So here I can just write the first one,

85
0:04:33.720 --> 0:04:36.580
and it just prints three because we asked

86
0:04:36.580 --> 0:04:38.580
the Room 3 for the name.

87
0:04:39.760 --> 0:04:42.520
The second thing that we can do is to send a message

88
0:04:42.520 --> 0:04:43.520
to the room.

89
0:04:44.500 --> 0:04:46.500
So this is the number two.

90
0:04:47.700 --> 0:04:49.660
Yeah, this doesn't print anything,

91
0:04:49.660 --> 0:04:53.840
but as you can see here, the server received a message

92
0:04:53.840 --> 0:04:56.440
for this room, and it printed.

93
0:04:56.440 --> 0:05:00.280
So if I call it server times, it prints this stuff.

94
0:05:00.280 --> 0:05:04.440
And if I change it to something else, I can actually talk

95
0:05:09.180 --> 0:05:12.060
to another object and send another message

96
0:05:12.060 --> 0:05:15.520
and stuff like that, and it just will send

97
0:05:15.520 --> 0:05:18.600
a different message to a different room.

98
0:05:18.600 --> 0:05:20.000
Yeah, it's a very primitive chat.

99
0:05:20.000 --> 0:05:23.260
Don't try to find something clever about it.

100
0:05:23.260 --> 0:05:25.860
And the last thing I want to show you

101
0:05:25.860 --> 0:05:27.940
is the signal processing.

102
0:05:27.940 --> 0:05:30.020
So this is how it looks like.

103
0:05:32.020 --> 0:05:34.820
The callback will just print the receipt message

104
0:05:34.820 --> 0:05:38.980
with some additional stuff, and this is where I connect

105
0:05:39.860 --> 0:05:43.400
the callback to the signal, and then I will just

106
0:05:43.400 --> 0:05:45.560
start the event loop.

107
0:05:45.560 --> 0:05:48.140
So for that, I actually have to...

108
0:05:48.140 --> 0:05:48.960
Yeah.

109
0:05:52.000 --> 0:05:55.100
So this thing is listening, it's waiting in the event loop,

110
0:05:55.100 --> 0:05:57.080
and it's waiting for any events.

111
0:05:57.080 --> 0:06:00.740
So if I, again, send some messages to the...

112
0:06:03.440 --> 0:06:06.980
Oh, and something, yeah, because I changed it.

113
0:06:06.980 --> 0:06:10.480
That's why you shouldn't change your code.

114
0:06:12.820 --> 0:06:15.220
It should work now, yes.

115
0:06:15.220 --> 0:06:19.060
Okay, so because it's listening on the Room 3,

116
0:06:21.700 --> 0:06:24.640
so if I send a message to the Room 3,

117
0:06:24.640 --> 0:06:28.500
it's well printed here, and this service behind it,

118
0:06:28.500 --> 0:06:31.300
it's still running, it receives the messages.

119
0:06:31.300 --> 0:06:32.140
So, okay.

120
0:06:33.240 --> 0:06:36.140
That was the client side of the things.

121
0:06:36.140 --> 0:06:38.340
Let's be the service.

122
0:06:38.340 --> 0:06:40.520
How do we do this?

123
0:06:40.520 --> 0:06:43.560
First of all, we need to register the DBUS name

124
0:06:43.560 --> 0:06:45.120
of the service.

125
0:06:45.120 --> 0:06:49.300
That's basically, you announce the name of your process,

126
0:06:50.300 --> 0:06:52.200
so the other applications can find you,

127
0:06:52.200 --> 0:06:54.600
and reach you, and talk to you.

128
0:06:54.600 --> 0:06:56.060
So the other thing that you have to do

129
0:06:56.060 --> 0:06:57.800
is to publish some objects,

130
0:06:57.800 --> 0:07:01.500
so other applications can actually use some API

131
0:07:01.500 --> 0:07:05.580
that you provide, and do some stuff with your service.

132
0:07:05.580 --> 0:07:08.240
And the last thing, again, is to start the event loop,

133
0:07:08.240 --> 0:07:11.380
and the event loop handles the incoming DBUS calls,

134
0:07:11.380 --> 0:07:14.380
calls the relevant handlers and callbacks,

135
0:07:14.380 --> 0:07:18.660
and sends the return values to the callers.

136
0:07:18.660 --> 0:07:21.120
So, the last part that is missing

137
0:07:21.120 --> 0:07:24.860
is how do we create this DBUS object?

138
0:07:24.860 --> 0:07:27.860
Every DBUS object needs to provide something

139
0:07:27.860 --> 0:07:30.740
called the XML specification.

140
0:07:30.740 --> 0:07:31.560
This is,

141
0:07:34.500 --> 0:07:37.880
it's a declaration of our interfaces, methods,

142
0:07:37.880 --> 0:07:42.340
properties, and signals that this DBUS object implements,

143
0:07:42.340 --> 0:07:44.820
and that you can call.

144
0:07:44.820 --> 0:07:46.880
And when I saw this for the first time,

145
0:07:46.880 --> 0:07:48.680
I thought, oh my god, my colleagues will do

146
0:07:48.680 --> 0:07:50.560
some metipos in the things.

147
0:07:50.560 --> 0:07:53.420
And we will have so many bugs.

148
0:07:53.420 --> 0:07:56.060
So the first mission I had was actually

149
0:07:56.060 --> 0:07:58.260
to get rid of this, and make it generated

150
0:07:58.260 --> 0:08:00.560
automatically from the code,

151
0:08:00.560 --> 0:08:03.100
because I knew that we are going to do a lot of changes

152
0:08:03.100 --> 0:08:06.040
all of the time, because it was a huge project.

153
0:08:06.040 --> 0:08:11.040
And in no way, we would keep this same as the code.

154
0:08:12.180 --> 0:08:14.240
So let's look how it can be done with DBUS.

155
0:08:15.740 --> 0:08:17.840
Or you can, all you have to do

156
0:08:17.840 --> 0:08:20.280
is to just use the DBUS interface decorator,

157
0:08:20.280 --> 0:08:23.120
and provide the name of your interface.

158
0:08:23.120 --> 0:08:28.120
And this decorator just looks at the class members

159
0:08:28.960 --> 0:08:30.400
of the decorated class.

160
0:08:30.400 --> 0:08:32.700
And for every member, it will generate this piece

161
0:08:32.700 --> 0:08:37.640
of the specification, and it will create

162
0:08:37.640 --> 0:08:39.840
this whole specification.

163
0:08:39.840 --> 0:08:43.040
Sometimes it collects more interfaces,

164
0:08:43.040 --> 0:08:44.580
it's more complicated.

165
0:08:44.580 --> 0:08:49.480
But at the end, you don't have to do or write any XML,

166
0:08:49.480 --> 0:08:51.920
but you can have access to it,

167
0:08:51.920 --> 0:08:53.620
and use it to publish your object.

168
0:08:54.720 --> 0:08:56.980
So we will start with this decorator,

169
0:08:56.980 --> 0:09:00.520
and then you can just define a DBUS method.

170
0:09:00.520 --> 0:09:03.200
This is definition, and at the same time,

171
0:09:03.200 --> 0:09:04.700
the implementation of the method.

172
0:09:04.700 --> 0:09:06.760
So you can see it prints the message.

173
0:09:08.200 --> 0:09:11.340
One thing that you have to do is to provide type hints

174
0:09:11.340 --> 0:09:14.600
for the arguments and the return values,

175
0:09:14.600 --> 0:09:17.940
because DBUS needs to know about the data types

176
0:09:17.940 --> 0:09:20.240
of these of the arguments.

177
0:09:21.440 --> 0:09:23.840
And another thing, yeah, everything is comma-cased.

178
0:09:23.840 --> 0:09:25.420
I'm sorry about that.

179
0:09:25.420 --> 0:09:29.260
It's a standard for DBUS, and it didn't make a lot of sense

180
0:09:29.260 --> 0:09:32.920
to try some mapping from the traditional Python

181
0:09:32.920 --> 0:09:35.260
to this comma-cased thing.

182
0:09:35.260 --> 0:09:37.500
So it's easier to just try the comma-cased.

183
0:09:39.500 --> 0:09:43.300
So this is the method, and this is how to define

184
0:09:43.300 --> 0:09:45.360
a DBUS property, it's just a Python property

185
0:09:45.360 --> 0:09:47.540
with a type hint again.

186
0:09:47.540 --> 0:09:51.180
And last but not least, DBUS signal,

187
0:09:51.180 --> 0:09:53.340
you need to use a special decorator for that.

188
0:09:54.540 --> 0:09:57.480
And if this signal emits some additional arguments,

189
0:09:57.480 --> 0:10:02.480
you need to specify them as arguments of the method,

190
0:10:02.680 --> 0:10:03.520
kind of, yeah.

191
0:10:04.760 --> 0:10:06.720
This method is never called, it's just used

192
0:10:06.720 --> 0:10:08.720
for the definition of the signal.

193
0:10:09.800 --> 0:10:12.360
So that's it.

194
0:10:12.360 --> 0:10:14.960
Let's have a look at the implementation

195
0:10:14.960 --> 0:10:18.040
of how it looks like when you put it all together.

196
0:10:19.100 --> 0:10:21.700
So this is the classroom.

197
0:10:22.700 --> 0:10:25.740
There is the decorator, and as you can see,

198
0:10:25.740 --> 0:10:28.280
there is just all the definitions and implementation

199
0:10:28.280 --> 0:10:31.880
that this class needs, and the XML is just generated

200
0:10:31.880 --> 0:10:33.120
by the decorator.

201
0:10:33.120 --> 0:10:35.980
You don't need to care about anything.

202
0:10:37.120 --> 0:10:39.560
The chat also has a DBUS interface,

203
0:10:39.560 --> 0:10:41.160
but it doesn't contain anything.

204
0:10:41.160 --> 0:10:46.160
Here we can see later how the XML looks like,

205
0:10:46.500 --> 0:10:49.480
and you create a connection to the message bus,

206
0:10:49.480 --> 0:10:51.680
you register the name of the service,

207
0:10:51.680 --> 0:10:55.920
you publish some objects, and you start the event loop,

208
0:10:55.920 --> 0:10:56.740
and that's all.

209
0:10:58.220 --> 0:11:01.760
In this case, it's good to disconnect from the bus.

210
0:11:01.760 --> 0:11:05.120
There's an open-floor request to use the session bus

211
0:11:05.120 --> 0:11:07.920
as a context manager because it's nicer,

212
0:11:07.920 --> 0:11:09.460
but it's not matched yet.

213
0:11:09.460 --> 0:11:13.620
Because it will unregister everything that you did here,

214
0:11:13.620 --> 0:11:15.220
so that's a good thing to do.

215
0:11:15.220 --> 0:11:20.160
So, and here we can see that when the server was started,

216
0:11:20.160 --> 0:11:22.400
it printed the interfaces that were generated,

217
0:11:22.400 --> 0:11:25.200
so the first one is empty, there's nothing there,

218
0:11:25.200 --> 0:11:28.000
but with the room, it contains everything

219
0:11:28.000 --> 0:11:30.340
that was inside of that class.

220
0:11:30.340 --> 0:11:32.580
So yeah, this was completely generated.

221
0:11:32.580 --> 0:11:33.840
You don't have to care about it.

222
0:11:33.840 --> 0:11:37.840
You don't have to figure out what type S is.

223
0:11:37.840 --> 0:11:39.640
In this case, it's simple, but sometimes

224
0:11:39.640 --> 0:11:42.520
it gets a little more not so pretty.

225
0:11:44.120 --> 0:11:46.360
So yeah, you don't have to care about it,

226
0:11:46.360 --> 0:11:47.560
which is, I think, great.

227
0:11:48.700 --> 0:11:49.900
Features.

228
0:11:49.900 --> 0:11:51.660
So, this bus has a lot of features

229
0:11:51.660 --> 0:11:54.200
because the project I was working on was big,

230
0:11:54.200 --> 0:11:57.540
so we wanted to do as many simplifications as we could.

231
0:11:59.000 --> 0:12:01.400
So one thing that we did, okay,

232
0:12:01.400 --> 0:12:03.180
I want to mention one thing.

233
0:12:03.180 --> 0:12:07.340
I decided I will focus on the end result of these features

234
0:12:07.340 --> 0:12:10.540
because it's a little difficult to explain the definitions

235
0:12:10.540 --> 0:12:12.720
and like all the steps you need to do before that,

236
0:12:12.720 --> 0:12:15.080
so I will just show you what you will end up with

237
0:12:15.080 --> 0:12:16.660
in your code.

238
0:12:16.660 --> 0:12:20.320
So the first thing I want to mention is the management

239
0:12:20.320 --> 0:12:22.920
of the bus names and pass, because you could see

240
0:12:22.920 --> 0:12:25.720
that there are a lot of strings you need to handle.

241
0:12:25.720 --> 0:12:28.700
And it's very easy to make typos in this again.

242
0:12:29.800 --> 0:12:34.560
So, I can, okay, yeah.

243
0:12:34.560 --> 0:12:38.140
So it's very easy to make typos in that as well.

244
0:12:38.140 --> 0:12:40.980
So basically, this bus provides a system

245
0:12:40.980 --> 0:12:45.780
that allows you to define namespaces and objects

246
0:12:45.780 --> 0:12:48.680
that are published in these namespaces.

247
0:12:48.680 --> 0:12:51.820
And at the end, you will have these very simple objects

248
0:12:51.820 --> 0:12:56.820
called chat and trims3, and you can just use these objects

249
0:12:57.660 --> 0:13:00.300
to create proxies or ask for the interface name

250
0:13:00.300 --> 0:13:03.460
or ask for the service name or get the object pass,

251
0:13:03.460 --> 0:13:06.160
and you don't have to care about the strings behind it

252
0:13:06.160 --> 0:13:09.740
because they are created from what you defined earlier.

253
0:13:12.100 --> 0:13:15.440
Yeah, I can get to that later if you have time.

254
0:13:15.440 --> 0:13:20.420
So another thing that the bus provides

255
0:13:20.420 --> 0:13:25.260
is management of a group of publishable objects.

256
0:13:25.260 --> 0:13:29.220
So let's say that the chat is not static,

257
0:13:29.220 --> 0:13:30.600
it doesn't have only three rooms,

258
0:13:30.600 --> 0:13:34.500
but you can ask the chat to create a new room,

259
0:13:34.500 --> 0:13:36.900
and you want to get the bus pass of that room

260
0:13:36.900 --> 0:13:38.140
so you can connect to it.

261
0:13:39.140 --> 0:13:43.200
So yeah, you can implement it manually on your own

262
0:13:43.200 --> 0:13:45.380
and make sure that every room has a unique pass,

263
0:13:45.380 --> 0:13:48.140
and if someone wants to do something with that room,

264
0:13:48.140 --> 0:13:52.220
you can just figure out again what was the room,

265
0:13:52.220 --> 0:13:55.220
or you can just use the room container.

266
0:13:55.220 --> 0:13:57.320
It's very easy, you just provide the namespace

267
0:13:57.320 --> 0:14:00.660
that the container can use, and you will specify

268
0:14:00.660 --> 0:14:05.560
the message bus that can be used to publish these objects.

269
0:14:05.560 --> 0:14:08.200
And the whole purpose of this container

270
0:14:08.200 --> 0:14:12.840
is just to give it a Python object and get a debus pass,

271
0:14:12.840 --> 0:14:15.880
and it works the same way backwards.

272
0:14:15.880 --> 0:14:19.380
So if you receive an object pass, you can get room.

273
0:14:19.380 --> 0:14:24.380
So with this mapping, you can deal with this mapping

274
0:14:24.380 --> 0:14:29.380
very early, and in your code, you only have the objects.

275
0:14:30.280 --> 0:14:32.620
You don't have to care about the debus implementation

276
0:14:32.620 --> 0:14:37.180
behind it, so yeah, it's a little difficult to explain,

277
0:14:37.180 --> 0:14:40.420
but it can simplify your life load.

278
0:14:43.060 --> 0:14:45.060
Yeah, another thing I want to talk about

279
0:14:45.060 --> 0:14:47.500
is how to handle debus errors.

280
0:14:47.500 --> 0:14:52.400
So this bus raises a default exception by default,

281
0:14:52.400 --> 0:14:55.840
but sometimes you want to handle a specific debus error,

282
0:14:55.840 --> 0:14:59.740
or maybe you want to raise a specific debus error

283
0:14:59.740 --> 0:15:01.940
from your service.

284
0:15:01.940 --> 0:15:03.720
It's very easy thing to do.

285
0:15:03.720 --> 0:15:05.320
There's a special decorator for that

286
0:15:05.320 --> 0:15:07.620
that you can use for your exceptions,

287
0:15:07.620 --> 0:15:10.280
and in the decorator, you specify the debus name

288
0:15:10.280 --> 0:15:12.960
of this error, and that's all you have to do

289
0:15:12.960 --> 0:15:15.400
to be able to use this exception in your code.

290
0:15:15.400 --> 0:15:20.200
So once you decorate it, you can raise it in a service,

291
0:15:20.200 --> 0:15:22.100
and you can accept it in the client,

292
0:15:22.100 --> 0:15:25.000
and you don't have to care about the magic between that.

293
0:15:26.340 --> 0:15:28.300
Yeah, that's also a cool thing to do.

294
0:15:29.840 --> 0:15:33.980
Debus structures, so this is very, yeah,

295
0:15:33.980 --> 0:15:36.280
this is a funny thing.

296
0:15:36.280 --> 0:15:39.220
Debus doesn't have native support for structures,

297
0:15:39.220 --> 0:15:43.660
so what everyone does is they send dictionaries

298
0:15:43.660 --> 0:15:46.760
that map attribute names, attribute values,

299
0:15:46.760 --> 0:15:49.560
and since these values can be of different types,

300
0:15:49.560 --> 0:15:53.460
you have to wrap them inside variants.

301
0:15:53.460 --> 0:15:55.960
Variant is a special data type

302
0:15:55.960 --> 0:15:59.900
that basically couples the data and the type together,

303
0:15:59.900 --> 0:16:03.800
so when you send it from your service,

304
0:16:03.800 --> 0:16:06.740
the client is able to interpret the data,

305
0:16:06.740 --> 0:16:10.980
even though it didn't know the type of this data before.

306
0:16:12.420 --> 0:16:15.780
So this is pretty horrible thing to work with,

307
0:16:15.780 --> 0:16:18.980
especially when you need to receive the structure,

308
0:16:18.980 --> 0:16:21.360
change something, and send it somewhere else,

309
0:16:21.360 --> 0:16:24.120
because creating these variants is not easy,

310
0:16:24.120 --> 0:16:25.960
variants are not changeable,

311
0:16:25.960 --> 0:16:27.760
so you have to always create new ones,

312
0:16:27.760 --> 0:16:30.500
and yeah, it's not pretty.

313
0:16:30.500 --> 0:16:33.560
So with this bus, you can actually describe the structure

314
0:16:33.560 --> 0:16:36.040
using data classes, and these classes

315
0:16:36.040 --> 0:16:38.080
just have some properties,

316
0:16:38.080 --> 0:16:40.040
and there's a lot of automation

317
0:16:40.040 --> 0:16:43.220
that allows you to basically give it the dictionary,

318
0:16:43.220 --> 0:16:45.880
it will transform the dictionary into a Python object,

319
0:16:45.880 --> 0:16:47.880
then you can just play with the Python object,

320
0:16:47.880 --> 0:16:49.880
and when you need the structure again,

321
0:16:49.880 --> 0:16:51.620
you will just go to structure

322
0:16:53.180 --> 0:16:55.860
to get the structure that you can send on the bus.

323
0:16:57.520 --> 0:16:59.560
Yeah, so that's another thing you can do.

324
0:17:01.100 --> 0:17:03.200
Lastly, this is a new feature

325
0:17:03.200 --> 0:17:07.240
that I was working on with some people last year.

326
0:17:07.240 --> 0:17:10.040
Yeah, I would like to think this way.

327
0:17:10.040 --> 0:17:12.580
I would like to use this to thank everyone

328
0:17:12.580 --> 0:17:14.540
who was involved in this,

329
0:17:14.540 --> 0:17:17.680
because it was bigger issue than I expected,

330
0:17:17.680 --> 0:17:21.580
and basically, you can send Unix file descriptors

331
0:17:21.580 --> 0:17:24.380
through the bus.

332
0:17:24.380 --> 0:17:28.360
It works only on Unix systems, obviously,

333
0:17:28.360 --> 0:17:30.960
and it's optional feature is disabled by default

334
0:17:30.960 --> 0:17:33.160
because there's some overhead,

335
0:17:33.160 --> 0:17:37.340
and I didn't want it to slow down everyone's services.

336
0:17:38.500 --> 0:17:40.640
So all you have to do is when you create a proxy,

337
0:17:40.640 --> 0:17:43.980
you will specify a little different client library

338
0:17:43.980 --> 0:17:46.540
or the server library that will be used

339
0:17:46.540 --> 0:17:51.540
to process the incoming calls or the requests,

340
0:17:53.140 --> 0:17:56.380
and it basically means that if,

341
0:17:58.780 --> 0:18:00.080
yeah, it's a little complicated

342
0:18:00.080 --> 0:18:02.920
because the bus has a special support

343
0:18:02.920 --> 0:18:04.160
for your next file descriptors,

344
0:18:04.160 --> 0:18:08.760
but it's very messy when you have to deal with it specifically,

345
0:18:08.760 --> 0:18:10.260
and with this extension,

346
0:18:10.260 --> 0:18:12.000
you don't have to care about it, basically.

347
0:18:12.000 --> 0:18:14.060
If you want to send a file descriptor,

348
0:18:14.060 --> 0:18:16.140
you will just send a file descriptor

349
0:18:16.140 --> 0:18:18.540
and receive a file descriptor on the other side.

350
0:18:20.940 --> 0:18:25.940
Yeah, so these features can be very hard to understand

351
0:18:26.540 --> 0:18:27.480
and I get it.

352
0:18:27.480 --> 0:18:29.580
So I want to mention that this is optional.

353
0:18:29.580 --> 0:18:31.220
It's not something that you have to use

354
0:18:31.220 --> 0:18:32.880
if you want to use a dustbuzz,

355
0:18:34.080 --> 0:18:36.920
and I would suggest if you don't have the need to use them,

356
0:18:36.920 --> 0:18:39.120
don't use them, keep it simple,

357
0:18:39.120 --> 0:18:42.200
do whatever is the easiest,

358
0:18:42.200 --> 0:18:43.900
because there can be a lot of,

359
0:18:43.900 --> 0:18:47.980
yeah, additional code that can be hard to understand.

360
0:18:50.240 --> 0:18:53.220
Another thing I want to mention is that

361
0:18:53.220 --> 0:18:56.380
I acknowledge that every project is a little different

362
0:18:56.380 --> 0:18:58.360
and has very different needs,

363
0:18:58.360 --> 0:19:00.620
and sometimes you can make a lot of assumptions

364
0:19:00.620 --> 0:19:01.860
about your service.

365
0:19:01.860 --> 0:19:06.300
Like, you might not need half of the debug support

366
0:19:06.300 --> 0:19:09.000
that there is, so you can simplify some stuff a lot,

367
0:19:10.200 --> 0:19:12.840
and it's great, but that's often not generic enough

368
0:19:12.840 --> 0:19:15.740
to be implemented in a library like dustbuzz.

369
0:19:16.900 --> 0:19:20.180
So what you can do actually is to take any piece

370
0:19:20.180 --> 0:19:24.040
of dustbuzz, re-implement it to fit it to your needs,

371
0:19:24.040 --> 0:19:26.740
and propagate it in the right places

372
0:19:26.740 --> 0:19:29.520
so dustbuzz will use it instead of the original

373
0:19:29.520 --> 0:19:30.920
implementation.

374
0:19:30.920 --> 0:19:34.360
I want to mention this because we were in this position

375
0:19:35.560 --> 0:19:37.420
at the beginning of our project,

376
0:19:37.420 --> 0:19:39.860
and we had a lot of troubles with the library

377
0:19:39.860 --> 0:19:40.960
that we used back then,

378
0:19:40.960 --> 0:19:44.940
and basically we had to patch the whole library

379
0:19:44.940 --> 0:19:47.380
because we were not able to get there

380
0:19:47.380 --> 0:19:48.740
the stuff that we needed,

381
0:19:48.740 --> 0:19:52.180
and it wasn't easy to just change it,

382
0:19:52.180 --> 0:19:53.740
so we have to patch it.

383
0:19:55.820 --> 0:19:58.520
So this is the link to the library.

384
0:19:59.640 --> 0:20:04.220
There's open discussion session, there's issue tracker,

385
0:20:04.220 --> 0:20:06.460
so if you have any suggestions, questions,

386
0:20:06.460 --> 0:20:08.720
you can find me there, reach me there.

387
0:20:08.720 --> 0:20:11.000
I don't hesitate to ask.

388
0:20:11.000 --> 0:20:14.360
There's also, there are some examples.

389
0:20:14.360 --> 0:20:16.400
You should be able to find the examples

390
0:20:16.400 --> 0:20:20.140
that are similar to the one that I showed you.

391
0:20:20.140 --> 0:20:24.780
I think I will use there also the demo stuff

392
0:20:24.780 --> 0:20:27.080
because it's easier to understand.

393
0:20:30.120 --> 0:20:34.820
Yeah, and there's also recommendation that might help you

394
0:20:34.820 --> 0:20:38.820
because maybe this talk didn't help you so much.

395
0:20:38.820 --> 0:20:40.020
So that's all from me.

396
0:20:40.020 --> 0:20:41.420
Thank you so much for coming.

397
0:20:42.460 --> 0:20:44.700
Yeah, does anyone has any questions?

398
0:20:46.000 --> 0:20:46.840
Yeah.

399
0:20:46.840 --> 0:20:47.660
Thank you.

400
0:20:47.660 --> 0:20:48.500
I think we have time for questions.

401
0:20:48.500 --> 0:20:49.340
Yes.

402
0:20:49.340 --> 0:20:50.160
Yeah.

403
0:20:50.160 --> 0:20:51.000
Yeah.

404
0:20:51.000 --> 0:20:51.840
Yeah.

405
0:20:51.840 --> 0:20:52.660
Yeah.

406
0:20:52.660 --> 0:21:03.980
Hi, I just wanted to ask, where do you find people

407
0:21:03.980 --> 0:21:04.820
who are using this?

408
0:21:04.820 --> 0:21:06.980
Is it in chat message applications

409
0:21:06.980 --> 0:21:09.580
or what are the applications of this for most people?

410
0:21:12.120 --> 0:21:13.860
What are the applications who are providing

411
0:21:13.860 --> 0:21:16.000
the debuffs API that you can, okay.

412
0:21:16.000 --> 0:21:19.560
So like on the ONNX system, it's basically

413
0:21:24.940 --> 0:21:28.740
like there are printers or you can control the media player

414
0:21:28.740 --> 0:21:33.740
or you can set up your firewall or on the session bus.

415
0:21:34.880 --> 0:21:37.920
I think this chat actually has their own debuffs API.

416
0:21:37.920 --> 0:21:41.220
So it's more like the applications that are running

417
0:21:41.220 --> 0:21:44.080
on your rest stop often provide this debuffs API

418
0:21:44.080 --> 0:21:46.260
so you can write some scripts to tweak them

419
0:21:46.260 --> 0:21:47.620
and to control them.

420
0:21:47.620 --> 0:21:49.620
So yeah, that's it.

421
0:21:49.620 --> 0:21:50.460
I'm sure.

422
0:21:50.460 --> 0:21:51.300
Yeah.

423
0:21:51.300 --> 0:21:56.300
Okay.

424
0:21:56.380 --> 0:22:01.380
Does bus support properties and annotations?

425
0:22:04.960 --> 0:22:06.480
Properties, yes.

426
0:22:06.480 --> 0:22:11.480
Annotations do mean like properties changed annotations

427
0:22:13.060 --> 0:22:13.900
or stuff like that.

428
0:22:13.900 --> 0:22:17.120
Like it's changed signal and deprecated

429
0:22:17.120 --> 0:22:18.260
and stuff like that.

430
0:22:18.260 --> 0:22:22.700
Oh, I'm not sure about it.

431
0:22:22.700 --> 0:22:24.200
I think it's not like needed.

432
0:22:24.200 --> 0:22:27.240
It's just like a recommendation for the documentation

433
0:22:27.240 --> 0:22:28.780
but it's not something that.

434
0:22:29.740 --> 0:22:32.740
Otherwise the client can't see that the server

435
0:22:32.740 --> 0:22:35.780
may support an API call but it's a debt marked

436
0:22:35.780 --> 0:22:36.820
as deprecated.

437
0:22:38.520 --> 0:22:39.360
Okay.

438
0:22:39.360 --> 0:22:43.560
Yeah, I think it doesn't like support customer annotations

439
0:22:43.560 --> 0:22:47.000
but that's definitely something I can look at if it's like.

440
0:22:47.000 --> 0:22:49.260
I just wanted to give an add them and that's fine.

441
0:22:49.260 --> 0:22:50.100
Yeah, yeah.

442
0:22:50.100 --> 0:22:51.640
So I don't think that this is supported

443
0:22:51.640 --> 0:22:53.360
but it's definitely supportable.

444
0:22:53.360 --> 0:22:54.200
So yeah.

445
0:23:02.940 --> 0:23:07.940
Hi, why would someone want to use debuffs,

446
0:23:08.120 --> 0:23:12.580
I mean, Daspos for versus like some other debuffs library

447
0:23:12.580 --> 0:23:14.480
that's out there for Python?

448
0:23:14.480 --> 0:23:15.380
Yeah, okay.

449
0:23:15.380 --> 0:23:18.720
So this library was actually inspired by Py debuffs

450
0:23:18.720 --> 0:23:20.420
which is also very popular.

451
0:23:20.420 --> 0:23:24.660
It just, we hit some issues and it's complicated

452
0:23:24.660 --> 0:23:26.740
like you need to think a lot for us.

453
0:23:26.740 --> 0:23:30.240
So at some point I just got so frustrated

454
0:23:30.240 --> 0:23:33.200
I decided to rewrite it and create Daspos.

455
0:23:33.200 --> 0:23:35.780
But yeah, there are a lot of like interesting libraries

456
0:23:35.780 --> 0:23:37.940
and sometimes they are a little simpler

457
0:23:37.940 --> 0:23:39.280
and it might be enough.

458
0:23:39.280 --> 0:23:43.140
So like you don't have to use this one.

459
0:23:43.140 --> 0:23:45.380
It's just, this is much easier if you,

460
0:23:48.620 --> 0:23:50.520
if you have a lot of debuffs API

461
0:23:50.520 --> 0:23:52.420
because like with our project

462
0:23:52.420 --> 0:23:55.200
there are several debuffs services

463
0:23:55.200 --> 0:23:57.900
and it has a lot of objects, a lot of interfaces

464
0:23:57.900 --> 0:24:00.100
and it will be very difficult to deal with it

465
0:24:00.100 --> 0:24:03.940
in a, with a library that operates on lower level.

466
0:24:03.940 --> 0:24:05.780
So we needed a lot of abstraction

467
0:24:05.780 --> 0:24:07.700
to make sure that the code is okay.

468
0:24:07.700 --> 0:24:12.700
We have time for one last question.

469
0:24:18.820 --> 0:24:19.860
Who was first?

470
0:24:19.860 --> 0:24:21.000
Maybe two questions.

471
0:24:23.220 --> 0:24:25.540
Hello, thank you for the library.

472
0:24:25.540 --> 0:24:27.780
I've been trying it and it's great.

473
0:24:27.780 --> 0:24:32.200
I wanted to ask a question regarding the van loop.

474
0:24:32.200 --> 0:24:35.720
Lately I've been doing some work with debuffs

475
0:24:35.720 --> 0:24:40.100
and I find it very painful that most libraries

476
0:24:40.100 --> 0:24:44.220
rely on the G-LIP main loop

477
0:24:44.220 --> 0:24:49.220
rather than the default event loop coming from Async.io.

478
0:24:49.540 --> 0:24:51.340
I saw that in the code base.

479
0:24:51.340 --> 0:24:54.100
You, there is an abstract event loop

480
0:24:54.100 --> 0:24:57.300
that could become something else.

481
0:24:57.300 --> 0:24:59.900
But do you have any plans about that?

482
0:24:59.900 --> 0:25:02.860
Yeah, so right now I don't know about the demand

483
0:25:02.860 --> 0:25:05.580
for additional support for other event loops

484
0:25:05.580 --> 0:25:07.700
and like the cons.

485
0:25:07.700 --> 0:25:09.620
But the code is implemented in a way

486
0:25:09.620 --> 0:25:11.140
that it should be possible to do it.

487
0:25:11.140 --> 0:25:12.780
So if there is like enough people

488
0:25:12.780 --> 0:25:14.220
who would be interested in this,

489
0:25:14.220 --> 0:25:16.500
that's definitely something I would like to look at.

490
0:25:16.500 --> 0:25:20.140
It's just, yeah, it's no demand right now.

491
0:25:23.180 --> 0:25:25.500
Thanks a lot, thank you again.

492
0:25:25.500 --> 0:25:26.340
Thank you.

493
0:25:26.340 --> 0:25:27.180
Thank you.

494
0:25:27.180 --> 0:25:28.020
Thank you.

495
0:25:28.020 --> 0:25:28.860
Thank you.

496
0:25:28.860 --> 0:25:29.700
Thank you.

497
0:25:29.700 --> 0:25:30.540
Thank you.

498
0:25:30.540 --> 0:25:31.380
Thank you.

499
0:25:31.380 --> 0:25:32.220
Thank you.

500
0:25:32.220 --> 0:25:33.060
Thank you.

501
0:25:33.060 --> 0:25:33.900
Thank you.

502
0:25:33.900 --> 0:25:35.500
And to our audience for people interested in

503
0:25:35.500 --> 0:26:04.300
the next desktop here.


1
0:00:00.000 --> 0:00:14.680
Hello, so yeah, I'm talking about PyScript.

2
0:00:14.680 --> 0:00:19.280
So I'm trying to get a catchy title, so it's kind of like a clickbait, so we PyScript,

3
0:00:19.280 --> 0:00:24.180
we place Django, so maybe a lot of people will be like really, you know, sparking their

4
0:00:24.180 --> 0:00:32.720
interest because I mentioned Django, which is a very popular framework for web.

5
0:00:32.720 --> 0:00:36.640
But today I'm not going to talk too much about Django, but I'm mainly going to talk about

6
0:00:36.640 --> 0:00:40.920
PyScript and I would have some crazy demo at the end, which is like very interesting

7
0:00:40.920 --> 0:00:48.680
demo, so you may not want to miss it, but the most important thing is that this is the

8
0:00:48.680 --> 0:00:49.680
link to the slides.

9
0:00:49.680 --> 0:00:55.200
I should have used some QR code, but kind of lazy, so this is just a link that you could

10
0:00:55.200 --> 0:00:56.700
find the slide deck.

11
0:00:56.700 --> 0:01:02.720
It is also uploaded to the Fostem website, you can find it to follow along, if you can't

12
0:01:02.720 --> 0:01:07.280
see it very well or anything happened, then you can look at the slides, and all the links

13
0:01:07.280 --> 0:01:08.560
are there as well.

14
0:01:08.560 --> 0:01:17.200
So I hope that since you're here, you have heard of PyScript, but how much do you know

15
0:01:17.200 --> 0:01:22.360
about PyScript, except that it's something to do with Python?

16
0:01:22.360 --> 0:01:25.880
So, yeah, silence.

17
0:01:25.880 --> 0:01:27.880
So, yeah.

18
0:01:27.880 --> 0:01:32.520
So I think most people that I met, I've talked about PyScript and they said they have heard

19
0:01:32.520 --> 0:01:37.640
about PyScript, they may have read a block or two about PyScript, it's something that's

20
0:01:37.640 --> 0:01:43.360
relatively new, so that's why I think it's important to kind of, you know, to put information

21
0:01:43.360 --> 0:01:49.080
together so people have something to look at when they want to know more about PyScript.

22
0:01:49.080 --> 0:01:51.960
So by the way, I'm Czech, why am I talking about PyScript?

23
0:01:51.960 --> 0:01:57.280
Why it sounds like I know a lot about PyScript, because I work in Alekonda, so PyScript is

24
0:01:57.280 --> 0:02:02.200
developed by a team in Alekonda, so I work with them a lot, so I have, you know, kind

25
0:02:02.200 --> 0:02:07.400
of very close to the source, so I kind of have some information about what's the newest

26
0:02:07.400 --> 0:02:11.680
thing about PyScript, and I love open source projects, I have been involved in open source

27
0:02:11.680 --> 0:02:16.200
projects in the past, I just want to put more pictures there, so that's why I put it here.

28
0:02:16.200 --> 0:02:21.440
And I organize a lot of events, so let's jump into it.

29
0:02:21.440 --> 0:02:24.760
What is PyScript?

30
0:02:24.760 --> 0:02:30.600
PyScript is actually a framework, some people think that PyScript is a new language, but

31
0:02:30.600 --> 0:02:35.440
it's not, it's actually Python, but you can write Python in your HTML file, that's what

32
0:02:35.440 --> 0:02:36.920
it is.

33
0:02:36.920 --> 0:02:44.240
And also, like, it's a framework, why, because later you'll see why, like, we say PyScript

34
0:02:44.240 --> 0:02:48.320
is a framework, because of how you can change the backend and other stuff.

35
0:02:48.320 --> 0:02:52.680
So it lets you run Python application in the browser, basically it just means that you

36
0:02:52.680 --> 0:03:01.800
can, well, you can run, you know, you can write Python script, just like you write JavaScript

37
0:03:01.800 --> 0:03:07.720
in the HTML file, and then the browser would understand what you wanted to do, and then

38
0:03:07.720 --> 0:03:09.640
we'd do something.

39
0:03:09.640 --> 0:03:14.680
So but it's not trying to repay JavaScript, you can actually use it with JavaScript, for

40
0:03:14.680 --> 0:03:20.480
example, I'm using it with the D3 library, which is crazy.

41
0:03:20.480 --> 0:03:21.480
Who knows about D3?

42
0:03:21.480 --> 0:03:22.480
Yes, okay, good.

43
0:03:22.480 --> 0:03:28.160
Okay, I'm not speaking to other people, but yeah, it's good.

44
0:03:28.160 --> 0:03:34.760
So I will show some demo later, so basically you can actually pass the objects back and

45
0:03:34.760 --> 0:03:35.760
forth.

46
0:03:35.760 --> 0:03:39.040
So you can change your Python object into JavaScript object, and then your JavaScript

47
0:03:39.040 --> 0:03:45.320
library like D3 will understand it, or the other way around, so it is something that

48
0:03:45.320 --> 0:03:48.200
is quite new.

49
0:03:48.200 --> 0:03:54.000
So also, so all these things that I talk about, that you can, like, change the Python object

50
0:03:54.000 --> 0:04:00.840
into JavaScript object, all this stuff, won't be happening if we don't have the PyEoDy project,

51
0:04:00.840 --> 0:04:08.000
which they, by the way, for those of you who haven't heard, it started as a monselas project

52
0:04:08.000 --> 0:04:09.000
called Iody.

53
0:04:09.000 --> 0:04:15.040
They tried to have a lot of things that is run, you know, as a WESM, WebAssembly, so

54
0:04:15.040 --> 0:04:17.400
the browser can run it.

55
0:04:17.400 --> 0:04:23.880
And then there's a, so within that, all those projects, there's a Python, you know, project

56
0:04:23.880 --> 0:04:31.280
that is actually like converting Python into WebAssembly, so that's the PyEoDy project.

57
0:04:31.280 --> 0:04:41.200
So that's actually allow you to run the Python, so without it, like, actually, PyScript won't

58
0:04:41.200 --> 0:04:42.200
work.

59
0:04:42.200 --> 0:04:46.040
So, well, PyScript will still work, you can change the backend, but like, it started with

60
0:04:46.040 --> 0:04:52.360
PyEoDy, sorry, I'm like kind of, I'm trying to be correct in what I'm saying.

61
0:04:52.360 --> 0:04:59.120
But the main thing is that you need to kind of compile Python into a WebAssembly.

62
0:04:59.120 --> 0:05:04.880
So PyEoDy is like the, kind of one of the most popular one, that is like having the

63
0:05:04.880 --> 0:05:11.920
whole, more or less the whole thing that your standard Python offer is actually compiled

64
0:05:11.920 --> 0:05:15.760
into WebAssembly, so you can run Python on the browser.

65
0:05:15.760 --> 0:05:19.080
But there's also other things that we are trying, the team is trying now, for example,

66
0:05:19.080 --> 0:05:24.280
they are trying to compile microPython, which is a lighter version of Python, into WebAssembly,

67
0:05:24.280 --> 0:05:30.840
so it more or less works the same, but you have some kind of Python functionality that

68
0:05:30.840 --> 0:05:38.720
is not available on microPython, so you can actually choose which one you want to use.

69
0:05:38.720 --> 0:05:45.400
And also because one thing about the PyEoDy project that is, that is why it is the first

70
0:05:45.400 --> 0:05:50.320
one that PyScript adopts and why it's the first one that is like, why it is so popular,

71
0:05:50.320 --> 0:05:55.480
because the project itself also provides a lot of Python packages, for example, those

72
0:05:55.480 --> 0:06:01.720
that we use a lot, for example, NumPy, like scientists and data scientists use a lot,

73
0:06:01.720 --> 0:06:08.720
it's like, for example, NumPy, SciPy, SciQL, and all those actually are quite difficult

74
0:06:08.720 --> 0:06:11.640
to run on a browser because they are not pure Python.

75
0:06:11.640 --> 0:06:18.160
So for pure Python, if you have a Python interpreter that actually is compiled into Wasm, of course

76
0:06:18.160 --> 0:06:23.040
you can do it because they are just Python, but something like NumPy, SciPy, SciQL, and

77
0:06:23.040 --> 0:06:28.600
they are not pure Python, then it's a bit tricky, but PyEoDy project also provides that,

78
0:06:28.600 --> 0:06:35.800
so now we can also run those very complicated Python packages on the browser, which is cool.

79
0:06:35.800 --> 0:06:40.640
So I will show you a little bit of the PyScript basic, and then I'll show you the demo, and

80
0:06:40.640 --> 0:06:43.240
then like, all the questions will come at the end.

81
0:06:43.240 --> 0:06:48.560
Is it too small?

82
0:06:48.560 --> 0:06:51.440
I don't know how to zoom in though.

83
0:06:51.440 --> 0:06:55.120
That's why the link is important at the beginning.

84
0:06:55.120 --> 0:07:00.600
So I can explain, but the content of this code is not the most important thing, it's

85
0:07:00.600 --> 0:07:05.080
just like how a typical PyScript will look like.

86
0:07:05.080 --> 0:07:07.040
So I'm just talking about this section here.

87
0:07:07.040 --> 0:07:10.840
So for the first two lines here, you don't need to see it, but I'm telling you what it

88
0:07:10.840 --> 0:07:16.440
is, it's just like when you have a JavaScript code, you would actually have a, probably

89
0:07:16.440 --> 0:07:20.840
you have a CSS, which is like the style of how your website will look like, the style

90
0:07:20.840 --> 0:07:25.480
sheet, and then you have a JavaScript that you kind of pull it in, and then you can run

91
0:07:25.480 --> 0:07:29.600
all these like JavaScript functions that you have.

92
0:07:29.600 --> 0:07:36.120
So this is actually something like a path to a PyScript.js that's hosted on the PyScript.net.

93
0:07:36.120 --> 0:07:45.640
So this is actually what allows you to write Python on the websites, on your HTML file.

94
0:07:45.640 --> 0:07:48.420
You may ask, why is it.js?

95
0:07:48.420 --> 0:07:52.720
This is just how wasm works, so we have to follow the standard.

96
0:07:52.720 --> 0:07:57.800
So yeah, that's.js, but that's not important, you're not writing JavaScript, so don't worry

97
0:07:57.800 --> 0:07:59.240
about it.

98
0:07:59.240 --> 0:08:01.960
Next is there is a section that you can actually write Python code.

99
0:08:01.960 --> 0:08:08.680
So here is just some NumPy code that is plotting some NumPy random numbers.

100
0:08:08.680 --> 0:08:13.880
So here, like if it's, sorry, I'm not expecting the room to be this big.

101
0:08:13.880 --> 0:08:21.560
So if you can see it, so the first line is basically a HTML tag, and it's PyScript, and

102
0:08:21.560 --> 0:08:25.600
then it also have a little bit of settings like output equals to plot and stuff like

103
0:08:25.600 --> 0:08:26.600
that.

104
0:08:26.600 --> 0:08:28.080
And it is just a Python script.

105
0:08:28.080 --> 0:08:32.640
It's just like import NumPy, import Map.lib and all that stuff.

106
0:08:32.640 --> 0:08:35.520
And then it's Python code.

107
0:08:35.520 --> 0:08:38.360
It's just like you can copy and paste your Python code there.

108
0:08:38.360 --> 0:08:41.160
It's more or less the same thing.

109
0:08:41.160 --> 0:08:45.840
And the other thing that you may have when you are using PyScript is a PyConfic file.

110
0:08:45.840 --> 0:08:51.720
So this PyConfic file is actually, there's multiple formats that is supported.

111
0:08:51.720 --> 0:08:58.040
In this example, in JSON format, it's just a JSON file with packages is NumPy, and then

112
0:08:58.040 --> 0:09:02.400
Map.lib, because we are using it in the Python code.

113
0:09:02.400 --> 0:09:06.880
That's why we have to put it there to say that we are using those packages, kind of

114
0:09:06.880 --> 0:09:08.640
like your pip install.

115
0:09:08.640 --> 0:09:13.080
It's like putting it in the environment within your browser.

116
0:09:13.080 --> 0:09:15.560
So that's what it does.

117
0:09:15.560 --> 0:09:16.760
So this is the code.

118
0:09:16.760 --> 0:09:18.520
That's typically how it looks like.

119
0:09:18.520 --> 0:09:22.080
One catch is that it's using the latest version in the first two lines there.

120
0:09:22.080 --> 0:09:26.520
So if you don't want to break your code, you can pin a version.

121
0:09:26.520 --> 0:09:34.480
Now you can also pin a specific version with the releases and then the version number.

122
0:09:34.480 --> 0:09:36.240
Now we are named.

123
0:09:36.240 --> 0:09:42.640
We are attacking it as like the year, month, days, year, month probably, and then the versions.

124
0:09:42.640 --> 0:09:48.780
So if, for example, you don't want it to, because now PyScript is still changing a lot.

125
0:09:48.780 --> 0:09:53.600
So if you don't want your code to be not working next month, so you may want to pin the version

126
0:09:53.600 --> 0:09:58.280
until you want to update it manually when you look at the code again and update it.

127
0:09:58.280 --> 0:09:59.760
You can do it, so don't worry about it.

128
0:09:59.760 --> 0:10:02.480
I know people will have questions about it.

129
0:10:02.480 --> 0:10:09.920
Or you may think that, oh, like, you're a web developer and you don't like the CDN calling

130
0:10:09.920 --> 0:10:12.800
in from another website that you have no control of.

131
0:10:12.800 --> 0:10:18.220
If that website got attacked or something and it won't work, it may be very dangerous.

132
0:10:18.220 --> 0:10:19.320
You can host it yourself.

133
0:10:19.320 --> 0:10:25.520
You can download that two things, the style sheet and the JavaScript code yourself.

134
0:10:25.520 --> 0:10:26.520
And the other things will fit as well.

135
0:10:26.520 --> 0:10:28.000
There are also a few other things.

136
0:10:28.000 --> 0:10:29.000
But they are all downloadable.

137
0:10:29.000 --> 0:10:34.000
You can download it and host it yourself if you want to.

138
0:10:34.000 --> 0:10:40.360
So it's getting more complicated because now the PyScript is getting more developed and

139
0:10:40.360 --> 0:10:46.520
now there are more things you can config about how PyScript works.

140
0:10:46.520 --> 0:10:49.880
The PyConfig tag is where you can change all those.

141
0:10:49.880 --> 0:10:57.280
So, first of all, the tag itself, so within inside, there's multiple formats you can use.

142
0:10:57.280 --> 0:10:59.000
There's the Tomo format, which is the default.

143
0:10:59.000 --> 0:11:03.840
So if you don't tell this tag what format you're writing, so it will just assume you're

144
0:11:03.840 --> 0:11:05.800
using a Tomo format.

145
0:11:05.800 --> 0:11:09.320
So in this demo here, it says packages and paths.

146
0:11:09.320 --> 0:11:12.000
So it's just like what package you are putting in.

147
0:11:12.000 --> 0:11:17.640
Just like the pigment store thing, there's an environment within the browser that's running

148
0:11:17.640 --> 0:11:19.520
all the PyScript code.

149
0:11:19.520 --> 0:11:25.160
So you have to first say what packages you are using to allow it to be usable.

150
0:11:25.160 --> 0:11:30.560
The JSON format, again, it's just different formats, more or less the same thing.

151
0:11:30.560 --> 0:11:32.240
Or you can actually have another source.

152
0:11:32.240 --> 0:11:36.960
You can write your file in another, for example, either JSON file or Tomo file.

153
0:11:36.960 --> 0:11:43.240
You can also put it in because you don't want everything to be in your HTML file, so you

154
0:11:43.240 --> 0:11:47.680
can actually put in other sources as well.

155
0:11:47.680 --> 0:11:57.840
And also, the PyConfig tag is not just used for putting all your packages and other stuff.

156
0:11:57.840 --> 0:12:02.960
There's also other things that you could set in a PyConfig tag.

157
0:12:02.960 --> 0:12:07.240
So you can also host the will of the package.

158
0:12:07.240 --> 0:12:30.960
It doesn't need to be using the one that's provided by Py

159
0:12:30.960 --> 0:12:35.240
Script, but you can do it as well.

160
0:12:35.240 --> 0:12:57.700
You can change the runtime setting, like I said before, because Py

161
0:12:57.700 --> 0:13:07.740
isn't necessarily there of a lot of fun.

162
0:13:07.740 --> 0:13:11.900
Take no time to load, but it provides all the basic Python

163
0:13:11.900 --> 0:13:15.800
code that you could write in the HTML file.

164
0:13:15.800 --> 0:13:17.960
So you can quickly teach someone Python

165
0:13:17.960 --> 0:13:20.140
without installing Python and just like

166
0:13:20.140 --> 0:13:22.560
running it on the HTML file.

167
0:13:24.360 --> 0:13:26.480
You can also add some metadata, for example,

168
0:13:26.480 --> 0:13:28.560
you want to add the author who writes this script

169
0:13:28.560 --> 0:13:32.300
and the license, you can also do that, no problem.

170
0:13:32.300 --> 0:13:37.300
So another thing that you may put in your HTML file

171
0:13:37.300 --> 0:13:40.460
while you are using PyScript is the PyRepo.

172
0:13:40.460 --> 0:13:42.460
It's something that's just like Jupyter Notebook.

173
0:13:42.460 --> 0:13:43.940
If you have Jupyter Notebook, you know,

174
0:13:43.940 --> 0:13:47.540
it's like very nice repo that you can put in the

175
0:13:47.540 --> 0:13:49.680
Python code, shift enter, and then you execute

176
0:13:49.680 --> 0:13:51.340
and give you the result.

177
0:13:51.340 --> 0:13:56.340
You can also embed that in your HTML page

178
0:13:56.980 --> 0:13:58.820
when you are using PyScript.

179
0:13:58.820 --> 0:14:00.860
So you just need to do the same thing,

180
0:14:00.860 --> 0:14:03.300
you know, having those two lines of the style sheet

181
0:14:03.300 --> 0:14:06.260
and the PyScript.js.

182
0:14:06.260 --> 0:14:08.660
And then you can just put the PyRepo tag

183
0:14:08.660 --> 0:14:11.180
and then you will have a Jupyter-like repo

184
0:14:11.180 --> 0:14:12.780
that you could use in your site.

185
0:14:14.460 --> 0:14:16.180
So why is it so useful, right?

186
0:14:16.180 --> 0:14:18.240
Like, it's a new thing, it's exciting,

187
0:14:18.240 --> 0:14:21.100
but can I really use it?

188
0:14:21.100 --> 0:14:23.940
Or is it just a fun thing to do

189
0:14:23.940 --> 0:14:25.500
while doing it on the front end, right?

190
0:14:25.500 --> 0:14:28.900
Like now you can have like application, like Django,

191
0:14:28.900 --> 0:14:31.460
like I said, it's a kind of people love Django,

192
0:14:31.460 --> 0:14:36.460
like I, you know, why do we want PyScript?

193
0:14:37.940 --> 0:14:40.300
Because sometimes like things just need to be run

194
0:14:40.300 --> 0:14:43.820
on the front end, sometimes like we can't really rely

195
0:14:43.820 --> 0:14:48.820
on an application like Django or other Python application

196
0:14:49.420 --> 0:14:51.600
to handle all this Python code.

197
0:14:52.700 --> 0:14:57.540
For example, if you don't want to use up all your resources,

198
0:14:57.540 --> 0:14:59.960
right, like if you have a back end and then the back end

199
0:14:59.960 --> 0:15:03.180
is actually hosted by you or the cloud service

200
0:15:03.180 --> 0:15:05.560
that you pay for, if there's a lot of user

201
0:15:05.560 --> 0:15:10.560
and like if every single user had a very like heavy use

202
0:15:10.760 --> 0:15:14.660
of your resources, then the bills can be expensive

203
0:15:14.660 --> 0:15:17.580
and then you may not want that, you want to maybe,

204
0:15:17.580 --> 0:15:20.700
you know, give back the law into the users

205
0:15:20.700 --> 0:15:21.620
who is using it, right?

206
0:15:21.620 --> 0:15:24.640
So you could push things into the front end.

207
0:15:26.060 --> 0:15:29.700
And all, if I've heard like maintainers said that like,

208
0:15:29.700 --> 0:15:32.620
they want people to try out their code, you know,

209
0:15:32.620 --> 0:15:36.580
you can build a sandbox that let people to run it,

210
0:15:36.580 --> 0:15:39.920
like for example, a lot of the data science stuff,

211
0:15:39.920 --> 0:15:42.340
you know, for example, the NumPy, SciPy,

212
0:15:42.340 --> 0:15:45.280
they will have, before they will have the binder thing

213
0:15:45.280 --> 0:15:47.860
that actually load in, you know, another application,

214
0:15:47.860 --> 0:15:49.720
you know, that have the back end

215
0:15:49.720 --> 0:15:52.100
and then they could run some code there to do it

216
0:15:52.100 --> 0:15:53.540
as an example.

217
0:15:53.540 --> 0:15:58.140
But for these services, they are provided for free usually,

218
0:15:58.140 --> 0:16:01.020
they are quite slow or you know, they have limits.

219
0:16:01.020 --> 0:16:06.020
So if you want to provide a sandbox for users,

220
0:16:06.860 --> 0:16:09.020
if it can run on their machine, you don't have to worry

221
0:16:09.020 --> 0:16:10.820
about people abusing it as well.

222
0:16:10.820 --> 0:16:13.100
Like for example, some people, if you,

223
0:16:13.100 --> 0:16:15.100
whoever run whatever on your sandbox,

224
0:16:15.100 --> 0:16:18.380
they could do crypto mining and then it's not a good thing.

225
0:16:18.380 --> 0:16:19.980
So if it's on the front end,

226
0:16:19.980 --> 0:16:23.180
it's using the user's resources, not your resources,

227
0:16:23.180 --> 0:16:24.820
which if they want to mine Bitcoin,

228
0:16:24.820 --> 0:16:26.780
it's fine, it's on their machine or on your machine,

229
0:16:26.780 --> 0:16:29.020
you don't have to pay the bill.

230
0:16:29.020 --> 0:16:33.060
Also, sometimes we have applications that, for example,

231
0:16:33.060 --> 0:16:36.660
is some research data, some medical data, very sensitive.

232
0:16:36.660 --> 0:16:40.460
So you can't really, you know, it's like the rules that you,

233
0:16:40.460 --> 0:16:42.980
the data can't leave the machine.

234
0:16:42.980 --> 0:16:46.180
So you can send it to a backend somewhere to do it.

235
0:16:46.180 --> 0:16:49.900
Then, you know, maybe you can provide the, you know,

236
0:16:49.900 --> 0:16:52.860
provide the code that, you know,

237
0:16:52.860 --> 0:16:54.980
someone can use it to run on the browser.

238
0:16:54.980 --> 0:16:56.140
So it's run on their machine.

239
0:16:56.140 --> 0:16:58.140
So instead of, you know, you have,

240
0:16:58.140 --> 0:17:00.460
you have built application and they have to send the data

241
0:17:00.460 --> 0:17:04.380
over to your, whatever the backend is,

242
0:17:04.380 --> 0:17:06.100
and then to run the application.

243
0:17:06.100 --> 0:17:08.780
So it's also easier to set up as well.

244
0:17:08.780 --> 0:17:11.260
Otherwise you may have to provide a separate,

245
0:17:11.260 --> 0:17:14.940
secure environment with the whole kind of set up

246
0:17:14.940 --> 0:17:17.340
of the backend and the front end together and stuff.

247
0:17:17.340 --> 0:17:20.300
You know, if you just have the front end, it's much easier.

248
0:17:20.300 --> 0:17:22.220
You don't have to worry about it.

249
0:17:22.220 --> 0:17:25.420
So with Highscript, with H. Django,

250
0:17:25.420 --> 0:17:28.220
I know that you already know the answer is no,

251
0:17:28.220 --> 0:17:33.220
but actually it's very fun if you use them together.

252
0:17:33.300 --> 0:17:35.500
I will show you a few things that I like,

253
0:17:36.460 --> 0:17:40.140
that is done by either me or some of my friends.

254
0:17:40.140 --> 0:17:44.060
That's actually quite cool things that we have used,

255
0:17:44.060 --> 0:17:46.380
like both Django and Highscript.

256
0:17:46.380 --> 0:17:49.300
So for example, this is what I have done with,

257
0:17:50.940 --> 0:17:52.380
can I just pass it in here?

258
0:17:52.380 --> 0:17:53.220
Okay.

259
0:17:53.220 --> 0:17:54.460
So this is something that I've done.

260
0:17:54.460 --> 0:17:58.660
It's like using Highscript with Django.

261
0:17:58.660 --> 0:18:00.660
That I've, so this is what I,

262
0:18:00.660 --> 0:18:03.340
I will show you what it is first and then I will explain.

263
0:18:03.340 --> 0:18:05.140
So here, this is the thing I do.

264
0:18:05.140 --> 0:18:07.140
I think this one, this one I can zoom in cool.

265
0:18:07.140 --> 0:18:09.620
So this is a recommender system, right?

266
0:18:09.620 --> 0:18:11.540
So I have all these movie that I download

267
0:18:11.540 --> 0:18:14.900
from the movie dataset on Cardo.

268
0:18:14.900 --> 0:18:17.540
And then is there a bunch of ratings.

269
0:18:17.540 --> 0:18:21.020
So this recommender, if you put in a movie that you like,

270
0:18:21.020 --> 0:18:23.060
if you try to find all the potential movie

271
0:18:23.060 --> 0:18:24.900
that you like after, for example,

272
0:18:24.900 --> 0:18:27.700
I always like putting Iron Man because I know it works.

273
0:18:29.420 --> 0:18:31.500
And then give me five recommendations.

274
0:18:31.500 --> 0:18:33.940
If I like Iron Man, what else would you recommend me?

275
0:18:33.940 --> 0:18:35.940
And then if I click recommend,

276
0:18:35.940 --> 0:18:37.660
and I've got five of them, right?

277
0:18:37.660 --> 0:18:41.740
So most of them sci-fi movie, which is quite cool.

278
0:18:41.740 --> 0:18:43.580
There's also the Dark Knight, which is,

279
0:18:43.580 --> 0:18:45.380
I think it's the movie about a Batman,

280
0:18:45.380 --> 0:18:47.300
which is also, I like it.

281
0:18:47.300 --> 0:18:48.820
So yeah, that's nice.

282
0:18:50.060 --> 0:18:51.700
So, but this thing, right?

283
0:18:51.700 --> 0:18:53.100
This thing, usually you think of, oh,

284
0:18:53.100 --> 0:18:55.140
it's like a machine learning thing, right?

285
0:18:55.140 --> 0:18:59.220
It's a recommender system.

286
0:18:59.220 --> 0:19:01.620
You know, can I run it on the front end?

287
0:19:01.620 --> 0:19:02.620
Yes, you can.

288
0:19:02.620 --> 0:19:05.700
As long as you have your model already trained,

289
0:19:05.700 --> 0:19:08.780
then for example, in my example here,

290
0:19:08.780 --> 0:19:10.980
actually you have a link to see the,

291
0:19:12.700 --> 0:19:13.780
how it's set up.

292
0:19:14.660 --> 0:19:16.540
If you click on this link,

293
0:19:16.540 --> 0:19:18.940
it will show you how I set it up.

294
0:19:18.940 --> 0:19:21.500
So you can play around yourself as well.

295
0:19:21.500 --> 0:19:23.900
So what I did is just like,

296
0:19:23.900 --> 0:19:25.940
of course I download the data as a given,

297
0:19:25.940 --> 0:19:28.540
you have to have the data to make it work, right?

298
0:19:28.540 --> 0:19:32.420
And then after that, you just run some of this script.

299
0:19:32.420 --> 0:19:35.140
You can actually do it in a more beautiful way.

300
0:19:35.140 --> 0:19:38.220
I'm just using some command line to run all this script

301
0:19:38.220 --> 0:19:42.580
to load in the data to train your model and stuff.

302
0:19:42.580 --> 0:19:44.260
You can do it with other ways.

303
0:19:44.260 --> 0:19:47.340
For example, you have a user, a main user interface, right?

304
0:19:47.340 --> 0:19:49.800
They upload a new data and other stuff.

305
0:19:49.800 --> 0:19:52.620
Then it will automatically retrain the model

306
0:19:52.620 --> 0:19:53.900
when there's new data.

307
0:19:53.900 --> 0:19:54.900
You can set that up as well,

308
0:19:54.900 --> 0:19:57.300
but it's just a demo, so this is like this.

309
0:19:57.300 --> 0:20:00.400
But after that, there will be a model that's already trained.

310
0:20:00.400 --> 0:20:02.620
It will deploy to the front end.

311
0:20:02.620 --> 0:20:04.940
And then in the front end, that's how this come in.

312
0:20:04.940 --> 0:20:06.140
That's how it works.

313
0:20:06.140 --> 0:20:08.020
So this is just a trained model.

314
0:20:08.020 --> 0:20:09.880
It's very lightweight.

315
0:20:09.880 --> 0:20:11.620
And then you don't have to host all the data.

316
0:20:11.620 --> 0:20:13.880
It could be done somewhere else.

317
0:20:13.880 --> 0:20:17.660
But for the user, they have a trained model

318
0:20:17.660 --> 0:20:19.980
and then they just need to put in the input

319
0:20:19.980 --> 0:20:21.900
and then it will give you some results.

320
0:20:21.900 --> 0:20:24.660
So if a machine learning model deploy on the front end.

321
0:20:25.620 --> 0:20:28.480
Another thing that my friend has done, which is quite cool,

322
0:20:28.480 --> 0:20:31.940
is front end as a back end.

323
0:20:31.940 --> 0:20:36.260
So it's running Django on the browser.

324
0:20:36.260 --> 0:20:37.100
So.

325
0:20:37.100 --> 0:20:37.940
So.

326
0:20:39.020 --> 0:20:39.860
Yes.

327
0:20:39.860 --> 0:20:42.860
No, this is, oh, this is so small.

328
0:20:42.860 --> 0:20:44.740
But yeah, someone has done it.

329
0:20:44.740 --> 0:20:46.100
This is not my doing,

330
0:20:46.100 --> 0:20:49.740
so I don't have responsibility.

331
0:20:49.740 --> 0:20:51.900
But have a look.

332
0:20:51.900 --> 0:20:53.260
So this is actually like,

333
0:20:55.580 --> 0:20:59.200
basically you have two browser, like HTML page.

334
0:20:59.200 --> 0:21:01.140
One page is the server.

335
0:21:01.140 --> 0:21:02.300
One page is the front end.

336
0:21:02.300 --> 0:21:03.740
So this is what it is.

337
0:21:03.740 --> 0:21:05.580
So you have a back end and a front end.

338
0:21:05.580 --> 0:21:06.880
On the same page, yay.

339
0:21:08.860 --> 0:21:10.100
So yeah, you can do that.

340
0:21:10.100 --> 0:21:13.300
So I was like, oh, this is a bit fun, but is it useful?

341
0:21:13.300 --> 0:21:15.340
But my friend here Hugo told me

342
0:21:15.340 --> 0:21:17.180
that you can actually use it to test things

343
0:21:17.180 --> 0:21:20.700
because you now can run an application on the browser.

344
0:21:20.700 --> 0:21:21.820
So everybody have a browser.

345
0:21:21.820 --> 0:21:24.820
So you can run an application on it, which is pretty cool.

346
0:21:24.820 --> 0:21:26.740
So yeah, check that out.

347
0:21:28.860 --> 0:21:32.140
Other things that I used PySquared for is not with Django.

348
0:21:32.140 --> 0:21:34.580
It's with other things.

349
0:21:34.580 --> 0:21:36.260
For example, use it together with D3.

350
0:21:36.260 --> 0:21:37.420
I have this example here.

351
0:21:37.420 --> 0:21:41.180
I already preload them because I'm not going to like,

352
0:21:41.180 --> 0:21:43.540
for you, it actually take quite a while to load.

353
0:21:43.540 --> 0:21:45.700
So that's why I preload them.

354
0:21:45.700 --> 0:21:49.380
But yeah, because I'm using the whole kind of package.

355
0:21:49.380 --> 0:21:50.740
Here I'm using NetworkX.

356
0:21:50.740 --> 0:21:53.060
I have put in a network graph.

357
0:21:53.060 --> 0:21:55.820
I have all these network analysis, which is super cool.

358
0:21:55.820 --> 0:22:00.140
But I don't like the NetworkX visualization

359
0:22:00.140 --> 0:22:01.220
because it's kind of basic.

360
0:22:01.220 --> 0:22:03.100
So that's why I use D3 for the visualization.

361
0:22:03.100 --> 0:22:04.620
I can do this.

362
0:22:04.620 --> 0:22:05.620
Very good animation.

363
0:22:05.620 --> 0:22:07.460
I can click on things and things change.

364
0:22:07.460 --> 0:22:10.660
Now I see all the neighbors are colored coded.

365
0:22:10.660 --> 0:22:14.380
So yeah, you can combine the cool stuff

366
0:22:14.380 --> 0:22:16.660
that JavaScript provides, for example, D3,

367
0:22:16.660 --> 0:22:18.260
and the cool stuff that Python provides,

368
0:22:18.260 --> 0:22:21.100
which is all this data science stuff, which is cool.

369
0:22:22.460 --> 0:22:24.380
Also, there are other plots as well.

370
0:22:25.580 --> 0:22:30.580
Before, you can't have these interactive things

371
0:22:31.740 --> 0:22:35.100
that you could, you know, interactive graph done easily

372
0:22:35.100 --> 0:22:36.740
on your website.

373
0:22:36.740 --> 0:22:38.700
So yeah, and also, map as well.

374
0:22:38.700 --> 0:22:40.180
This is not, again, not my demo,

375
0:22:40.180 --> 0:22:43.020
but you can now have this map thingy.

376
0:22:43.020 --> 0:22:45.660
You can use volume, which is, again, Python library.

377
0:22:45.660 --> 0:22:46.860
Now you can use it on the browser.

378
0:22:46.860 --> 0:22:47.700
Super cool.

379
0:22:49.340 --> 0:22:51.660
Yeah, and also, I have actually started building

380
0:22:51.660 --> 0:22:52.740
a PyScript tutorial.

381
0:22:52.740 --> 0:22:55.700
Again, this is work in progress because things keep changing.

382
0:22:55.700 --> 0:22:58.620
I can't keep it up, but if you're interested,

383
0:22:58.620 --> 0:23:01.060
if you want to try it, that may be a place

384
0:23:01.060 --> 0:23:03.020
you want to have a look at.

385
0:23:03.020 --> 0:23:05.300
So yeah, all of these slides, again, this is on the slide.

386
0:23:05.300 --> 0:23:08.620
So yeah, so download my slides if you need to.

387
0:23:08.620 --> 0:23:09.620
No.

388
0:23:09.620 --> 0:23:13.460
So I think I don't have too much time left.

389
0:23:13.460 --> 0:23:16.380
I would like to answer your questions,

390
0:23:16.380 --> 0:23:18.380
but there are these common questions

391
0:23:18.380 --> 0:23:21.100
that I would also ask and answer myself.

392
0:23:21.100 --> 0:23:22.860
So for example, people ask me,

393
0:23:22.860 --> 0:23:24.620
can you put in a Python script?

394
0:23:24.620 --> 0:23:25.460
Yes, you can.

395
0:23:25.460 --> 0:23:26.620
You can use the FASH now.

396
0:23:26.620 --> 0:23:29.220
Look at the documentation if you want to.

397
0:23:29.220 --> 0:23:31.220
What Python version you're using,

398
0:23:31.220 --> 0:23:33.460
it depends on the runtime, which is, again,

399
0:23:33.460 --> 0:23:36.700
PyConfig settings that you could, you know,

400
0:23:36.700 --> 0:23:39.220
you can look at it and see which one you want to use,

401
0:23:39.220 --> 0:23:41.260
you know, PyEldy version, which version you want to use,

402
0:23:41.260 --> 0:23:42.820
you can choose it yourself.

403
0:23:42.820 --> 0:23:46.820
And, you know, why we can't do it like JavaScript,

404
0:23:46.820 --> 0:23:49.580
having script, tech equals to Python.

405
0:23:49.580 --> 0:23:53.140
Because this is so new, all the browsers,

406
0:23:53.140 --> 0:23:56.380
they don't support it yet, so we have to make a custom tech,

407
0:23:56.380 --> 0:23:58.260
which is PyScript.

408
0:23:59.140 --> 0:24:02.380
Okay, why don't you just use PyEldy?

409
0:24:02.380 --> 0:24:04.100
I think PyScript is just easier to use.

410
0:24:04.100 --> 0:24:07.820
PyEldy is very nice, but, you know,

411
0:24:07.820 --> 0:24:11.140
sometimes get quite complicated for beginners, especially.

412
0:24:11.140 --> 0:24:13.260
Also, you can change the runtime with PyScript,

413
0:24:13.260 --> 0:24:15.780
so it's not just PyEldy, you can, again, you know,

414
0:24:15.780 --> 0:24:19.260
there's, my colleagues now working on a compiled version

415
0:24:19.260 --> 0:24:21.020
of micro-Python, it would be much faster,

416
0:24:21.020 --> 0:24:23.660
much more lightweight, so try that.

417
0:24:25.580 --> 0:24:28.460
A bunch more other things, so can you pin a version

418
0:24:28.460 --> 0:24:31.240
of the packages that you use?

419
0:24:31.240 --> 0:24:32.740
If you want, well, if you want,

420
0:24:32.740 --> 0:24:34.380
then you better host the will yourself,

421
0:24:34.380 --> 0:24:35.860
then you know which version you're using,

422
0:24:35.860 --> 0:24:39.500
and it's there, frozen, unchanged forever.

423
0:24:39.500 --> 0:24:42.340
So also, some, do you know Brighten?

424
0:24:42.340 --> 0:24:44.140
Maybe some of you have heard about Brighten.

425
0:24:44.140 --> 0:24:47.940
So Brighten is a project that tries to translate Python

426
0:24:47.940 --> 0:24:50.380
into JavaScript and then run it in the browser.

427
0:24:50.380 --> 0:24:52.020
The difference is that PyScript actually

428
0:24:52.020 --> 0:24:54.780
is not using JavaScript, it's actually using Wasm.

429
0:24:54.780 --> 0:24:56.940
So Python is compiled to Wasm,

430
0:24:56.940 --> 0:25:00.380
so more packages is available.

431
0:25:00.380 --> 0:25:02.900
So yeah, also you can, again, change the runtime,

432
0:25:02.900 --> 0:25:04.860
the backend, which one you want to use.

433
0:25:04.860 --> 0:25:08.020
Bware, as someone mentioned, Bware in my previous talk,

434
0:25:08.020 --> 0:25:11.660
so yes, I would love to see more support for Bware,

435
0:25:11.660 --> 0:25:15.320
but I can't say for the company, so I'm not saying that.

436
0:25:15.320 --> 0:25:17.580
Yeah, so that's the end of my talk.

437
0:25:17.580 --> 0:25:19.500
I know I have a few minutes left for Q&A,

438
0:25:19.500 --> 0:25:22.680
so, or if you didn't get the sticker at the beginning,

439
0:25:22.680 --> 0:25:25.020
come to talk to me, I'll give you a sticker.

440
0:25:25.020 --> 0:25:37.700
Thank you.

441
0:25:37.700 --> 0:25:39.740
We have a few minutes for questions,

442
0:25:39.740 --> 0:25:42.580
and before the questions, I want to thank everyone

443
0:25:42.580 --> 0:25:45.260
for joining the Python Dev Room,

444
0:25:45.260 --> 0:25:48.220
and I want to thank also Eric Gazzoni,

445
0:25:48.220 --> 0:25:51.980
my friend who organized all of the planning of the day

446
0:25:51.980 --> 0:25:56.100
and everything upstream,

447
0:25:56.100 --> 0:25:59.020
and he made a great worry for all the selection

448
0:25:59.020 --> 0:26:00.740
of the speakers, the planning, everything.

449
0:26:00.740 --> 0:26:02.740
He couldn't make it here today,

450
0:26:02.740 --> 0:26:06.420
but I really want to thank him as well.

451
0:26:06.420 --> 0:26:11.740
Thanks everybody.

452
0:26:11.740 --> 0:26:14.700
And thanks to Arnaud also for joining me today

453
0:26:14.700 --> 0:26:17.460
to help the Dev Room.

454
0:26:17.460 --> 0:26:23.580
Yes, yes.

455
0:26:23.580 --> 0:26:26.700
Hi, thank you for a wonderful talk.

456
0:26:26.700 --> 0:26:29.620
High script is very exciting.

457
0:26:29.620 --> 0:26:31.500
I know people are using WebAssembly

458
0:26:31.500 --> 0:26:33.900
to run untrusted code in the browser.

459
0:26:33.900 --> 0:26:37.980
You can use it like a sandbox, so it's very exciting.

460
0:26:37.980 --> 0:26:42.500
But my question is, so you were importing packages.

461
0:26:42.500 --> 0:26:43.380
Is that easy to do?

462
0:26:43.380 --> 0:26:47.180
Do the packages have to be on the machine already?

463
0:26:47.180 --> 0:26:49.860
Yes, so if you have internet connection,

464
0:26:49.860 --> 0:26:53.500
so the package, if you just simply put in like,

465
0:26:53.500 --> 0:26:54.860
you know, in the PyCon state,

466
0:26:54.860 --> 0:26:57.220
you put in package equals to something,

467
0:26:57.220 --> 0:26:59.020
so those will be actually approved

468
0:26:59.020 --> 0:27:01.460
from whatever PyOutice provided.

469
0:27:01.460 --> 0:27:03.300
So it needs to be loaded from online,

470
0:27:03.300 --> 0:27:05.220
so you'll see if you have a web page,

471
0:27:05.220 --> 0:27:07.220
it will take quite a while to load.

472
0:27:07.220 --> 0:27:08.740
But you also have an alternative

473
0:27:08.740 --> 0:27:11.220
that you can download the will of the package

474
0:27:11.220 --> 0:27:14.740
as long as that will is purely written in Python.

475
0:27:14.740 --> 0:27:18.420
So something like NumPy, SciPy, those,

476
0:27:18.420 --> 0:27:19.500
because they have extension,

477
0:27:19.500 --> 0:27:21.140
they're not purely written in Python,

478
0:27:21.140 --> 0:27:22.580
those you don't have an option.

479
0:27:22.580 --> 0:27:24.820
You have to use the WonderPy that I provided.

480
0:27:24.820 --> 0:27:26.540
But otherwise, if it's in other library,

481
0:27:26.540 --> 0:27:27.900
for example, Fuzzy Wussy, you know,

482
0:27:27.900 --> 0:27:29.020
it's purely written in Python.

483
0:27:29.020 --> 0:27:31.980
You can download the will and it can run locally.

484
0:27:31.980 --> 0:27:32.820
Yeah.

485
0:27:34.140 --> 0:27:37.940
Yeah, my question's about matplotlib is okay,

486
0:27:37.940 --> 0:27:41.420
but how is this base map or carto-py?

487
0:27:41.420 --> 0:27:42.980
Can it be used also?

488
0:27:42.980 --> 0:27:45.220
Matplotlib, sorry.

489
0:27:45.220 --> 0:27:47.540
Matplotlib is for graphics,

490
0:27:47.540 --> 0:27:50.700
but if you have cart, maps, base map,

491
0:27:51.700 --> 0:27:55.380
can such a tool also be used, sent in the browser?

492
0:27:55.380 --> 0:27:58.700
Yeah, most of the library that if it's available in Python,

493
0:27:58.700 --> 0:28:00.620
it will also be available, so.

494
0:28:00.620 --> 0:28:03.060
It must be pure Python or it's.

495
0:28:03.060 --> 0:28:07.060
Oh, matplotlib, I'm not sure matplotlib is pure Python.

496
0:28:08.020 --> 0:28:10.580
I don't know matplotlib enough, John, so the question.

497
0:28:10.580 --> 0:28:11.420
I try.

498
0:28:11.420 --> 0:28:15.020
Yeah, but yeah, so you have to check.

499
0:28:15.020 --> 0:28:16.700
Like the library that you want to import,

500
0:28:16.700 --> 0:28:18.100
is it purely in Python or not?

501
0:28:18.100 --> 0:28:18.940
So yeah.

502
0:28:23.500 --> 0:28:27.740
I'm a bit confused because what we loaded in the browser

503
0:28:27.740 --> 0:28:29.260
is a JavaScript module,

504
0:28:29.260 --> 0:28:32.220
so is there some WebAssembly somewhere?

505
0:28:32.220 --> 0:28:35.660
Yeah, so you see the script that was import is.js, right?

506
0:28:35.660 --> 0:28:37.500
But actually, that's a WebAssembly.

507
0:28:37.500 --> 0:28:40.380
It's just that the standard, the WebAssembly standard

508
0:28:40.380 --> 0:28:42.940
is like when my team provided,

509
0:28:42.940 --> 0:28:45.780
like when they released the thing,

510
0:28:45.780 --> 0:28:49.020
which is in WebAssembly, but it's the extension.js.

511
0:28:49.020 --> 0:28:50.980
It's a bit confusing, but actually it's in WebAssembly.

512
0:28:50.980 --> 0:28:51.820
It's not in JavaScript.

513
0:28:51.820 --> 0:28:54.980
It's just how the WebAssembly kind of standard work.

514
0:28:54.980 --> 0:28:59.100
You have a JS file somehow after you have, you know,

515
0:28:59.100 --> 0:29:02.300
done the release, the build and the source.

516
0:29:02.300 --> 0:29:04.700
It become.js.

517
0:29:04.700 --> 0:29:06.620
We have time for one more question.

518
0:29:06.620 --> 0:29:07.460
Should I have one?

519
0:29:07.460 --> 0:29:12.460
Yep, better.

520
0:29:13.700 --> 0:29:15.380
Thanks for your talk.

521
0:29:15.380 --> 0:29:18.100
Does PyScript use any Web workers?

522
0:29:18.100 --> 0:29:21.020
And if so, how do, can you control them?

523
0:29:21.020 --> 0:29:22.780
There's the web, sorry.

524
0:29:22.780 --> 0:29:25.460
Does PyScript use any Web workers?

525
0:29:25.460 --> 0:29:27.980
Like does your code run parallel?

526
0:29:27.980 --> 0:29:29.700
It's purely in the browser.

527
0:29:29.700 --> 0:29:32.620
So if you host everything locally,

528
0:29:32.620 --> 0:29:34.900
actually it's just on the browser.

529
0:29:34.900 --> 0:29:36.860
So there's no Web worker that communicate

530
0:29:36.860 --> 0:29:38.020
with other applications.

531
0:29:38.020 --> 0:29:38.860
Yeah.

532
0:29:41.740 --> 0:29:42.580
Yes, yes.

533
0:29:42.580 --> 0:29:43.660
One tiny question.

534
0:29:43.660 --> 0:29:44.500
Yeah.

535
0:29:44.500 --> 0:29:47.460
How does it all came in with different browsers

536
0:29:47.460 --> 0:29:49.220
for Firefox, Chrome?

537
0:29:49.220 --> 0:29:52.100
Because I guess it depends on your browser supporting that.

538
0:29:52.100 --> 0:29:52.940
Yeah.

539
0:29:52.940 --> 0:29:55.340
Now, definitely work on Chrome.

540
0:29:55.340 --> 0:29:58.740
Firefox maybe, others, I can't guarantee.

541
0:29:58.740 --> 0:29:59.580
Right.

542
0:29:59.580 --> 0:30:01.540
Yeah, yeah.

543
0:30:01.540 --> 0:30:02.900
But it's very young, the project.

544
0:30:02.900 --> 0:30:07.900
So later it will be more support.


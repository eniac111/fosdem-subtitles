1
0:00:00.000 --> 0:00:15.000
Okay. This speaker claims that in 20 minutes Robert is going to build an event-driven application.

2
0:00:15.000 --> 0:00:21.000
Well, to be kind, I gave him 25 minutes. So start your countdown clocks.

3
0:00:21.000 --> 0:00:33.000
Hello. My name is Robert. And yes, I would like to show you today that we can build event-driven

4
0:00:33.000 --> 0:00:38.000
application in Go and it can be as simple as building simple HTTP server.

5
0:00:38.000 --> 0:00:49.000
And I actually decided to put the bar a bit higher. I think that I can do it within 15 minutes.

6
0:00:49.000 --> 0:00:53.000
All right. At the beginning, a couple of words about myself.

7
0:00:53.000 --> 0:00:58.000
So during the day I work in a company named SlashID. So I work there as a principal engineer

8
0:00:58.000 --> 0:01:04.000
and we are creating some identity and onboarding solution that is a bit more frictionless

9
0:01:04.000 --> 0:01:10.000
than a solution available now on the market. And during the night I'm blogging at 3.techblog

10
0:01:10.000 --> 0:01:16.000
where we are writing some blog posts that are covering how to create Go applications

11
0:01:16.000 --> 0:01:21.000
that are kind of business applications but are also maintainable in the long term.

12
0:01:21.000 --> 0:01:26.000
I know maybe some of you had a chance to read at least one article there. There are some people.

13
0:01:26.000 --> 0:01:31.000
Nice. Nice. I will have something special for you later.

14
0:01:31.000 --> 0:01:37.000
You can find me on Twitter, GitHub, Mastodon. There's also my email if you would like to write to me

15
0:01:37.000 --> 0:01:43.000
and ask about something. But what's the most important for today? I'm also a owner of Watermill Library.

16
0:01:43.000 --> 0:01:47.000
And how everything started with Watermill? Because I think that this is a pretty important context.

17
0:01:47.000 --> 0:01:54.000
So a couple of years ago I worked in a company where we are creating products that were not doing something

18
0:01:54.000 --> 0:02:02.000
super unusual. But the idea was that each user was able to add some content and he should be able to...

19
0:02:02.000 --> 0:02:07.000
We were storing it to MySQL. Plus we wanted to have some more advanced search.

20
0:02:07.000 --> 0:02:17.000
Plus have the ability to create a fit for other users with some machine learning models that were doing personalization.

21
0:02:17.000 --> 0:02:22.000
And usually if you are building such kind of system in a synchronous way, there's one problem.

22
0:02:22.000 --> 0:02:27.000
So this part may be sometimes slow because I know Elasticsearch is under high load

23
0:02:27.000 --> 0:02:32.000
or I know Magic Machine Learning model said that this day it will not work.

24
0:02:32.000 --> 0:02:37.000
Not nice, but it happens in water unfortunately. And...

25
0:02:37.000 --> 0:02:43.000
Or even worse for example, some part is not working. And it's not best user experience if it's working slowly

26
0:02:43.000 --> 0:02:49.000
or it's... So for example, you can imagine that you're adding some tweet and you're waiting for 10 seconds

27
0:02:49.000 --> 0:02:55.000
because Elasticsearch need to index something or Machine Learning model is working slowly.

28
0:02:55.000 --> 0:03:01.000
Or even you are not able to add this content. And it doesn't make sense because everything what is done

29
0:03:01.000 --> 0:03:05.000
on this other part of the diagram could be done asynchronously.

30
0:03:05.000 --> 0:03:09.000
Because it's not a problem if for example the search...

31
0:03:09.000 --> 0:03:15.000
Some content that was added cannot be searched for example for one minute after it's out that if something is done.

32
0:03:15.000 --> 0:03:19.000
It's much better than not allowing people to add anything.

33
0:03:19.000 --> 0:03:28.000
So by the book, the default solution for such problems is using some kind of PubSub and doing it asynchronously.

34
0:03:28.000 --> 0:03:33.000
So in this case we decided to SCAFCA because it's scalable, it's nice.

35
0:03:33.000 --> 0:03:39.000
But as usually with some concepts that you're reading in the books or listening on the conferences,

36
0:03:39.000 --> 0:03:43.000
it's not that simple in practice. And it was also the case here.

37
0:03:43.000 --> 0:03:50.000
The first problem was that the big part of the team wasn't actually working in asynchronous architectures earlier.

38
0:03:50.000 --> 0:03:56.000
That kind of makes sense because if you're starting to learn to code, you're not starting with building some even driven application.

39
0:03:56.000 --> 0:04:00.000
You're rather creating some REST API or website.

40
0:04:00.000 --> 0:04:10.000
So it makes sense that it was a big entry point for people that didn't use that.

41
0:04:10.000 --> 0:04:14.000
And it was not the only problem because even in the architecture,

42
0:04:14.000 --> 0:04:20.000
you have a lot of concepts that you need to know like customer groups, partitioning,

43
0:04:20.000 --> 0:04:26.000
etc. ordering, at least once delivery, acknowledge negative, acknowledge poison queue.

44
0:04:26.000 --> 0:04:29.000
And with all of that, you need to be sure that you didn't miss an event.

45
0:04:29.000 --> 0:04:35.000
And it's pretty important in some domains. In some cases, okay, it's fine. You're missing some event and okay.

46
0:04:35.000 --> 0:04:41.000
But for example, I used to work in the financial domain and losing one event may, for example, mean that somebody will be not paid out.

47
0:04:41.000 --> 0:04:47.000
It's not nice. In general, I believe that as engineers we should be responsible because, you know,

48
0:04:47.000 --> 0:04:52.000
sometimes the code that we are building is a pretty big impact to the real life.

49
0:04:52.000 --> 0:04:59.000
And after thinking for a while, I actually started to wonder, is it maybe something that I can do to making,

50
0:04:59.000 --> 0:05:02.000
to building some kind of applications and go simpler?

51
0:05:02.000 --> 0:05:09.000
And here we are. This is how water mill was created. So, so far we have more than 5000 stars in the GitHub.

52
0:05:09.000 --> 0:05:14.000
It was, we have more than 50 contributors across multiple water mill repositories.

53
0:05:14.000 --> 0:05:27.000
We are supporting 12 different PubSub implementations, like Kafka, like Google PubSub, like NITS, JetStream, RabbitMQ.

54
0:05:27.000 --> 0:05:34.000
But we have also some more strange implementations, like MySQL, for example, if you don't have the infrastructure for some real PubSub.

55
0:05:34.000 --> 0:05:38.000
Or for example, I would like to avoid face-comet problem.

56
0:05:38.000 --> 0:06:05.740
If you are doing some more fun projects, you can have just Go-Channel implementation or

57
0:06:05.740 --> 0:06:07.740
a

58
0:06:07.740 --> 0:06:09.740
project that makes your life simpler, like standard library for HTTP.

59
0:06:09.740 --> 0:06:15.740
So, for example, if you are implementing an HTTP server, you don't care about TLS, seven layers of network,

60
0:06:15.740 --> 0:06:19.740
clicking star, connection pooling, all this stuff. You are just implementing the logic in most cases.

61
0:06:19.740 --> 0:06:23.740
Sometimes, of course, you may have some specific scenarios that you care about that.

62
0:06:23.740 --> 0:06:28.740
But in most cases, you should just implement your handlers and don't care about everything around.

63
0:06:28.740 --> 0:06:39.740
And as some of you have shown, I wrote the article that I think that frameworks are probably not working best in Go.

64
0:06:39.740 --> 0:06:45.740
And watermills, for example, that's the case why watermills are actually a library.

65
0:06:45.740 --> 0:06:48.740
And it has pretty good two upsides.

66
0:06:48.740 --> 0:06:54.740
So the first one is that if you already have some system and you would like to migrate to watermill, it's kind of simple.

67
0:06:54.740 --> 0:07:01.740
Because watermill doesn't add anything super custom and it can be integrated with any existing system.

68
0:07:01.740 --> 0:07:02.740
And vice versa.

69
0:07:02.740 --> 0:07:11.740
If, for example, for some reason you decide that you don't like watermill, you can migrate from watermill to some different library.

70
0:07:11.740 --> 0:07:12.740
So this is the good thing.

71
0:07:12.740 --> 0:07:17.740
And I think what's pretty important, so how everything is done, because, okay, in theory, it may sound nice,

72
0:07:17.740 --> 0:07:24.740
it's helping, but how watermill is built.

73
0:07:24.740 --> 0:07:30.740
And in the heart of watermill, I would say that you can see in multiple places something that is named Unix philosophy.

74
0:07:30.740 --> 0:07:34.740
And it's kind of old philosophy because it's from 1978.

75
0:07:34.740 --> 0:07:40.740
And it's saying as to write programs that do one thing and do it well, write programs to work together,

76
0:07:40.740 --> 0:07:44.740
and write programs to handle, in our case, message.

77
0:07:44.740 --> 0:07:46.740
Because that is a universal interface.

78
0:07:46.740 --> 0:07:48.740
So that's my question now.

79
0:07:48.740 --> 0:07:53.740
Do you know who's that?

80
0:07:53.740 --> 0:07:54.740
So it's Ken Thompson.

81
0:07:54.740 --> 0:07:56.740
So he's author of this philosophy.

82
0:07:56.740 --> 0:08:01.740
And also interesting, he is one of the authors of Go programming language.

83
0:08:01.740 --> 0:08:06.740
Actually, it makes sense because if you look on the Go, for example, to IO reader or our writer,

84
0:08:06.740 --> 0:08:08.740
this is pretty nicely visible there.

85
0:08:08.740 --> 0:08:13.740
And I know that for a lot of people didn't know about Unix philosophy.

86
0:08:13.740 --> 0:08:20.740
And sometimes when I have too much time to think, I have some impression that sometimes we forgot about some good old ideas

87
0:08:20.740 --> 0:08:25.740
that we are trying to bring when they will, even if some problems were already solved.

88
0:08:25.740 --> 0:08:33.740
And it may be something like in the Dark Ages that it was some old nice ideas, but it was a bit forgotten.

89
0:08:33.740 --> 0:08:35.740
And okay, maybe I'm thinking too much.

90
0:08:35.740 --> 0:08:37.740
Let's go back to the watermill.

91
0:08:37.740 --> 0:08:42.740
So there are a couple important times in watermill.

92
0:08:42.740 --> 0:08:44.740
So the first one is message.

93
0:08:44.740 --> 0:08:48.740
So if we compare it to HTTP server, it's something similar to HTTP request.

94
0:08:48.740 --> 0:08:52.740
So in message with a UID that is pretty useful for debugging, we have metadata.

95
0:08:52.740 --> 0:08:56.740
So metadata is something like headers request plus payload.

96
0:08:56.740 --> 0:09:01.740
So this is the place where you are storing your event, for example.

97
0:09:01.740 --> 0:09:06.740
The two next important parts of watermill are publisher and subscriber.

98
0:09:06.740 --> 0:09:09.740
So publisher, you can publish those messages.

99
0:09:09.740 --> 0:09:17.740
And with subscriber, you're right, you can subscribe for those messages from the provided topic and receive that by the child.

100
0:09:17.740 --> 0:09:22.740
Usually I'm not using these interfaces because it's used somewhere internally in watermill.

101
0:09:22.740 --> 0:09:27.740
But for example, if we would like to add a new implementation of PubSub, this is something that we're implementing.

102
0:09:27.740 --> 0:09:30.740
And each PubSub implementation is implementing this interface.

103
0:09:30.740 --> 0:09:38.740
That's why I actually pretty like this interface, because it's making some constraint on the implementers that, okay, they need to implement that in that way.

104
0:09:38.740 --> 0:09:46.740
But it's also good because it's making each of them pretty compatible with themselves.

105
0:09:46.740 --> 0:09:50.740
And then last but not least, type is handler function.

106
0:09:50.740 --> 0:09:56.740
A handler function is something like HTTP handler that we are implementing in the HTTP server,

107
0:09:56.740 --> 0:10:02.740
with the small difference that instead of receiving HTTP request, you are receiving message, and optionally you can receive the message.

108
0:10:02.740 --> 0:10:11.740
So the idea is that you can react on some message, do something, and send me some other messages so you can do some kind of training later.

109
0:10:11.740 --> 0:10:13.740
I will show shortly an example.

110
0:10:13.740 --> 0:10:16.740
And everything is magically connected.

111
0:10:16.740 --> 0:10:21.740
Sorry, it may be even small, but you need to trust me that in the middle there is a router here.

112
0:10:21.740 --> 0:10:23.740
And this is connecting everything.

113
0:10:23.740 --> 0:10:26.740
So message is going from some publisher.

114
0:10:26.740 --> 0:10:27.740
It doesn't need to be watermill.

115
0:10:27.740 --> 0:10:32.740
It's going to the queue from by subscriber, the router.

116
0:10:32.740 --> 0:10:34.740
The router is passing it through middleware.

117
0:10:34.740 --> 0:10:37.740
Middleware is working in watermill like in HTTP.

118
0:10:37.740 --> 0:10:39.740
So another thing that is pretty similar.

119
0:10:39.740 --> 0:10:42.740
And it's processed by handlers.

120
0:10:42.740 --> 0:10:46.740
And later, if we want, we can publish some other messages.

121
0:10:46.740 --> 0:10:48.740
Not super complex.

122
0:10:48.740 --> 0:10:53.740
So do you know the first rule of live coding?

123
0:10:53.740 --> 0:10:54.740
Don't do live coding.

124
0:10:54.740 --> 0:10:56.740
So do live coding.

125
0:10:56.740 --> 0:10:59.740
Both can go wrong.

126
0:10:59.740 --> 0:11:00.740
All right.

127
0:11:00.740 --> 0:11:03.740
So I need to change sharing settings.

128
0:11:03.740 --> 0:11:04.740
So one second.

129
0:11:04.740 --> 0:11:27.740
It's probably not this one.

130
0:11:27.740 --> 0:11:39.740
This is why you are not doing live coding.

131
0:11:39.740 --> 0:11:40.740
Yes.

132
0:11:40.740 --> 0:11:41.740
Okay.

133
0:11:41.740 --> 0:11:42.740
So something does work.

134
0:11:42.740 --> 0:11:43.740
That's good.

135
0:11:43.740 --> 0:11:56.740
I don't know if you really want it.

136
0:11:56.740 --> 0:11:57.740
Perfect.

137
0:11:57.740 --> 0:11:59.740
This is something that I wanted to have.

138
0:11:59.740 --> 0:12:02.740
So I prepared a simple application here.

139
0:12:02.740 --> 0:12:04.740
And what does this application does?

140
0:12:04.740 --> 0:12:08.740
So if you are not from Brussels, so this may be something familiar to you.

141
0:12:08.740 --> 0:12:12.740
So it allows you to book a room in hotel.

142
0:12:12.740 --> 0:12:17.740
You can provide room ID, pass guest counts, and let's see if it works.

143
0:12:17.740 --> 0:12:18.740
Okay.

144
0:12:18.740 --> 0:12:20.740
It seems that it's not working sometimes.

145
0:12:20.740 --> 0:12:21.740
Sometimes it's working.

146
0:12:21.740 --> 0:12:24.740
Sometimes it's not working.

147
0:12:24.740 --> 0:12:27.740
Sometimes it's working slowly.

148
0:12:27.740 --> 0:12:29.740
Slowly, slowly, slowly.

149
0:12:29.740 --> 0:12:31.740
Sometimes it's even not working slowly.

150
0:12:31.740 --> 0:12:32.740
So it's even worse.

151
0:12:32.740 --> 0:12:36.740
So let's check the source code of that application.

152
0:12:36.740 --> 0:12:38.740
So, okay.

153
0:12:38.740 --> 0:12:40.740
So here we are running HTTP.

154
0:12:40.740 --> 0:12:42.740
So boring.

155
0:12:42.740 --> 0:12:43.740
Signals handling.

156
0:12:43.740 --> 0:12:44.740
Boring.

157
0:12:44.740 --> 0:12:46.740
But this is probably not boring.

158
0:12:46.740 --> 0:12:50.740
This is usually when the most interesting part of the application leaves.

159
0:12:50.740 --> 0:12:51.740
Let's check our handler.

160
0:12:51.740 --> 0:12:54.740
Okay.

161
0:12:54.740 --> 0:12:57.740
So we are on Marsha Link, stuff, to book room request.

162
0:12:57.740 --> 0:13:00.740
We have some advanced algorithm of calculation of room price.

163
0:13:00.740 --> 0:13:02.740
And we are taking payment.

164
0:13:02.740 --> 0:13:04.740
What can go wrong here?

165
0:13:04.740 --> 0:13:05.740
And, okay.

166
0:13:05.740 --> 0:13:09.740
As we can see, our payment provider is not super stable.

167
0:13:09.740 --> 0:13:10.740
But, okay.

168
0:13:10.740 --> 0:13:11.740
I don't know.

169
0:13:11.740 --> 0:13:14.740
Let's imagine that it's our boss colleague and we cannot change that politics.

170
0:13:14.740 --> 0:13:16.740
It happens.

171
0:13:16.740 --> 0:13:17.740
It's okay.

172
0:13:17.740 --> 0:13:18.740
What we can do.

173
0:13:18.740 --> 0:13:21.740
In the interior we can do like that.

174
0:13:21.740 --> 0:13:22.740
Go, fun.

175
0:13:22.740 --> 0:13:23.740
Okay.

176
0:13:23.740 --> 0:13:24.740
Done.

177
0:13:24.740 --> 0:13:25.740
It works now.

178
0:13:25.740 --> 0:13:26.740
But it's one problem with that.

179
0:13:26.740 --> 0:13:30.740
So if our server ruled I, there is a chance that we will not take payment.

180
0:13:30.740 --> 0:13:33.740
And it doesn't like that as the best idea.

181
0:13:33.740 --> 0:13:34.740
What would be my idea?

182
0:13:34.740 --> 0:13:41.740
Instead of doing it synchronously within this HTTP handler, I would like to emit some event,

183
0:13:41.740 --> 0:13:45.740
listen to that event, and take payment asynchronously.

184
0:13:45.740 --> 0:13:46.740
So let's do that.

185
0:13:46.740 --> 0:13:48.740
Let's do that with full terminal, of course.

186
0:13:48.740 --> 0:13:52.740
So at the beginning we need to get rid of that.

187
0:13:52.740 --> 0:13:58.740
And we need to have our publisher here.

188
0:13:58.740 --> 0:13:59.740
Message publisher.

189
0:13:59.740 --> 0:14:02.740
So this is the interface that you should remember.

190
0:14:02.740 --> 0:14:03.740
All right.

191
0:14:03.740 --> 0:14:08.740
And I also can prepare some code snippets to not lose time on some boring stuff like

192
0:14:08.740 --> 0:14:09.740
room booked.

193
0:14:09.740 --> 0:14:10.740
Boom.

194
0:14:10.740 --> 0:14:13.740
We have our event.

195
0:14:13.740 --> 0:14:18.740
So room booked.

196
0:14:18.740 --> 0:14:21.740
All right.

197
0:14:21.740 --> 0:14:27.740
Get count and price, room price.

198
0:14:27.740 --> 0:14:28.740
All right.

199
0:14:28.740 --> 0:14:33.460
Now we need to marshal that because we are sending bytes between our processes through

200
0:14:33.460 --> 0:14:34.460
our path map.

201
0:14:34.460 --> 0:14:35.460
So JSON.

202
0:14:35.460 --> 0:14:39.100
Because JSON is kind of common and it's pretty easy to debug.

203
0:14:39.100 --> 0:14:41.740
So let's marshal that.

204
0:14:41.740 --> 0:14:44.740
Playload error.

205
0:14:44.740 --> 0:14:50.300
Room booked.

206
0:14:50.300 --> 0:14:58.820
Don't do such error handling at home, please.

207
0:14:58.820 --> 0:15:01.100
And now let's publish them.

208
0:15:01.100 --> 0:15:05.100
So H, publisher, publish topic.

209
0:15:05.100 --> 0:15:07.620
Let's use bookings.

210
0:15:07.620 --> 0:15:09.180
And we need our message.

211
0:15:09.180 --> 0:15:13.460
So remember we need to have free ID.

212
0:15:13.460 --> 0:15:17.820
So it doesn't matter actually what format of ID it can be.

213
0:15:17.820 --> 0:15:23.580
I know it can be even empty for some presentations, but good luck with debugging.

214
0:15:23.580 --> 0:15:25.580
And room booked payloads.

215
0:15:25.580 --> 0:15:26.620
All right.

216
0:15:26.620 --> 0:15:28.860
And it returns error.

217
0:15:28.860 --> 0:15:35.540
So we need to handle that in not a nice way, but it's live coding, so it's fine.

218
0:15:35.540 --> 0:15:36.540
All right.

219
0:15:36.540 --> 0:15:37.540
So we have the first part.

220
0:15:37.540 --> 0:15:42.420
So for room booked event, we're publishing that to the topic bookings.

221
0:15:42.420 --> 0:15:43.420
And okay.

222
0:15:43.420 --> 0:15:46.900
So we just need to inject now the publisher.

223
0:15:46.900 --> 0:15:48.580
So check where it's created.

224
0:15:48.580 --> 0:15:49.580
Okay.

225
0:15:49.580 --> 0:15:50.580
We no longer need payments.

226
0:15:50.580 --> 0:15:53.500
I heard that Kafka is nice and scalable for this Kafka.

227
0:15:53.500 --> 0:15:54.980
I have also snippet for that.

228
0:15:54.980 --> 0:15:56.580
It's nothing magical here.

229
0:15:56.580 --> 0:16:00.900
It's just what this and the water mill documentation.

230
0:16:00.900 --> 0:16:02.180
And let's use this publisher.

231
0:16:02.180 --> 0:16:05.940
We don't need subscriber yet, but probably we'll need it later.

232
0:16:05.940 --> 0:16:07.900
All right.

233
0:16:07.900 --> 0:16:12.500
By the way, I'm running some nice Docker compose under the hood that is recompiling

234
0:16:12.500 --> 0:16:15.540
the project each time when I'm putting changes there.

235
0:16:15.540 --> 0:16:20.380
At the end of the presentation, I will give you materials with all the source code and

236
0:16:20.380 --> 0:16:25.220
with the description of how it's done that it's automatically reloading after each change.

237
0:16:25.220 --> 0:16:26.780
All right.

238
0:16:26.780 --> 0:16:27.780
So we have our publisher.

239
0:16:27.780 --> 0:16:29.260
We are publishing our event.

240
0:16:29.260 --> 0:16:31.540
So let's check if it works.

241
0:16:31.540 --> 0:16:32.540
Hopefully it will work.

242
0:16:32.540 --> 0:16:33.540
Okay.

243
0:16:33.540 --> 0:16:40.580
So as you can see that our API is pretty stable and let's check if our event is really published.

244
0:16:40.580 --> 0:16:42.660
So we'll use meal tool.

245
0:16:42.660 --> 0:16:47.780
So meal is part of water mill, as you can guess, and we'll consume from bookings from

246
0:16:47.780 --> 0:16:53.060
Kafka and meal is allowing you to consume messages from multiple pub supplies that are

247
0:16:53.060 --> 0:16:54.260
supported in water mill.

248
0:16:54.260 --> 0:17:00.340
I know that there is two for that in Kafka, but you know, it's not mine.

249
0:17:00.340 --> 0:17:02.580
And yeah, with meal you can use multiple boxes.

250
0:17:02.580 --> 0:17:03.580
Okay.

251
0:17:03.580 --> 0:17:05.220
As you can see, now we have event here.

252
0:17:05.220 --> 0:17:06.220
So it seems to work.

253
0:17:06.220 --> 0:17:07.220
Okay.

254
0:17:07.220 --> 0:17:08.220
So Dan, thank you.

255
0:17:08.220 --> 0:17:09.220
Not really.

256
0:17:09.220 --> 0:17:12.020
We are not taking payments.

257
0:17:12.020 --> 0:17:16.540
So probably if our company will go bankrupt pretty quickly.

258
0:17:16.540 --> 0:17:18.380
So we need to start to take payments.

259
0:17:18.380 --> 0:17:21.580
So for that we already have our subscriber.

260
0:17:21.580 --> 0:17:22.580
That's good.

261
0:17:22.580 --> 0:17:26.660
So let's uncomment that.

262
0:17:26.660 --> 0:17:29.940
Okay.

263
0:17:29.940 --> 0:17:45.380
We need to have water mill router, some router config, water mill logger, good error handling.

264
0:17:45.380 --> 0:17:47.100
And now we need to add a handler.

265
0:17:47.100 --> 0:17:49.340
So we'll just add handler.

266
0:17:49.340 --> 0:17:51.180
So we'll need to provide handler name.

267
0:17:51.180 --> 0:17:53.460
So it will be payments.

268
0:17:53.460 --> 0:17:59.020
It doesn't matter really what is the handler name, but again, pretty useful for debugging.

269
0:17:59.020 --> 0:18:03.060
So we're subscribing to the topic that we published this message.

270
0:18:03.060 --> 0:18:06.780
So this is bookings.

271
0:18:06.780 --> 0:18:08.660
Bookings.

272
0:18:08.660 --> 0:18:12.660
We need to use subscriber and we need to publish to topic.

273
0:18:12.660 --> 0:18:19.180
So we'll publish event when we succeed to take payment.

274
0:18:19.180 --> 0:18:27.060
So payments, publisher and handler function.

275
0:18:27.060 --> 0:18:30.100
So hopefully you remember handler function signature.

276
0:18:30.100 --> 0:18:33.220
So yeah, we are receiving message and we are returning message.

277
0:18:33.220 --> 0:18:37.620
But we'll do it in a bit more fancy way.

278
0:18:37.620 --> 0:18:42.300
Payments handler because we can inject some dependencies earlier.

279
0:18:42.300 --> 0:18:44.540
I need to fix that and that.

280
0:18:44.540 --> 0:18:45.540
All right.

281
0:18:45.540 --> 0:18:48.180
So we have our payments handler.

282
0:18:48.180 --> 0:18:53.420
So we'll receive message and we'll take payment and emit some event.

283
0:18:53.420 --> 0:19:01.860
So we need to have our payment provider and what?

284
0:19:01.860 --> 0:19:09.220
We need to have room booked.

285
0:19:09.220 --> 0:19:12.540
We need to un-martial that.

286
0:19:12.540 --> 0:19:20.100
So message payload to room booked.

287
0:19:20.100 --> 0:19:26.860
And compared to standard library HTTP handler, you can return errors from a water mu handler.

288
0:19:26.860 --> 0:19:30.300
So I don't need to panic.

289
0:19:30.300 --> 0:19:32.740
And all right.

290
0:19:32.740 --> 0:19:34.900
So we should have the payload that we published here.

291
0:19:34.900 --> 0:19:35.900
So that's good.

292
0:19:35.900 --> 0:19:42.860
So we can now use that to take payment for room booked price.

293
0:19:42.860 --> 0:19:44.300
Great.

294
0:19:44.300 --> 0:19:46.300
Great.

295
0:19:46.300 --> 0:19:48.860
And as I said, so I would like to also emit some events.

296
0:19:48.860 --> 0:19:49.860
It may be useful.

297
0:19:49.860 --> 0:19:55.420
I mean, even if we took the payment, we can have some BI or we can do something else.

298
0:19:55.420 --> 0:19:59.140
I mean, I don't know, we can send beer to this person after he booked room.

299
0:19:59.140 --> 0:20:01.140
Because why not?

300
0:20:01.140 --> 0:20:05.620
And okay.

301
0:20:05.620 --> 0:20:08.580
So we need the second event.

302
0:20:08.580 --> 0:20:10.580
Payment taken.

303
0:20:10.580 --> 0:20:13.580
Payment taken.

304
0:20:13.580 --> 0:20:25.380
Film fields, room booked, as well as price.

305
0:20:25.380 --> 0:20:33.780
And we need to marshal it again to JSON.

306
0:20:33.780 --> 0:20:34.780
Error.

307
0:20:34.780 --> 0:20:35.780
Cool.

308
0:20:35.780 --> 0:20:37.100
Okay.

309
0:20:37.100 --> 0:20:42.060
And the last thing that we need to do is return new message.

310
0:20:42.060 --> 0:20:45.060
Message as new.

311
0:20:45.060 --> 0:20:48.060
Message new.

312
0:20:48.060 --> 0:20:52.540
UID new string.

313
0:20:52.540 --> 0:20:54.860
And payment taken payload.

314
0:20:54.860 --> 0:20:58.860
I hope that I'm not writing too fast or too slow.

315
0:20:58.860 --> 0:21:00.140
All right.

316
0:21:00.140 --> 0:21:02.340
So in the error, there is a chance that it may work.

317
0:21:02.340 --> 0:21:03.340
So what we are doing.

318
0:21:03.340 --> 0:21:05.940
So we are receiving our room booked events.

319
0:21:05.940 --> 0:21:07.060
We are marshalling that.

320
0:21:07.060 --> 0:21:08.900
We are taking payment.

321
0:21:08.900 --> 0:21:12.780
When we succeed, we are emitting another event.

322
0:21:12.780 --> 0:21:14.380
Sounds like a ton.

323
0:21:14.380 --> 0:21:17.820
So the only thing that we need to do is to reuse that handler.

324
0:21:17.820 --> 0:21:22.180
So we have that one.

325
0:21:22.180 --> 0:21:24.220
And handler.

326
0:21:24.220 --> 0:21:25.220
Cool.

327
0:21:25.220 --> 0:21:28.100
Let's check if it compiles.

328
0:21:28.100 --> 0:21:29.540
It even compiles.

329
0:21:29.540 --> 0:21:32.260
So let's check if it's working.

330
0:21:32.260 --> 0:21:34.660
So let's book a couple rooms.

331
0:21:34.660 --> 0:21:39.940
And the idea is that by default, Watermute handler will try if the payment provider

332
0:21:39.940 --> 0:21:40.940
failed.

333
0:21:40.940 --> 0:21:51.220
So in there we should see some information that payment was taken.

334
0:21:51.220 --> 0:21:52.940
And we don't see that.

335
0:21:52.940 --> 0:21:58.980
I know why we don't see that because we didn't start at router.

336
0:21:58.980 --> 0:22:00.940
Run.

337
0:22:00.940 --> 0:22:03.820
Context.

338
0:22:03.820 --> 0:22:08.340
It's a bit naive implementation because it's not really graceful shutdown.

339
0:22:08.340 --> 0:22:15.300
But what in the documentation, as I remember, we have examples with real graceful shutdown.

340
0:22:15.300 --> 0:22:16.780
Okay.

341
0:22:16.780 --> 0:22:17.780
And let's see.

342
0:22:17.780 --> 0:22:18.780
Okay.

343
0:22:18.780 --> 0:22:20.500
So we have some random error.

344
0:22:20.500 --> 0:22:22.460
And you can see payment taken.

345
0:22:22.460 --> 0:22:23.460
Hooray.

346
0:22:23.460 --> 0:22:25.820
Our company is saved.

347
0:22:25.820 --> 0:22:28.300
All right.

348
0:22:28.300 --> 0:22:30.740
So this is working.

349
0:22:30.740 --> 0:22:33.220
But there's one problem with that.

350
0:22:33.220 --> 0:22:36.260
We figure out that, okay, Kafka is a bit hard to run.

351
0:22:36.260 --> 0:22:37.260
And we're on GCP.

352
0:22:37.260 --> 0:22:39.780
So maybe we can use Google Cloud PubSub.

353
0:22:39.780 --> 0:22:45.260
So I think that I can change Kafka implementation to Google Cloud PubSub in one minute.

354
0:22:45.260 --> 0:22:46.660
I'm realizing the bar today.

355
0:22:46.660 --> 0:22:47.660
Hi.

356
0:22:47.660 --> 0:22:49.500
But I think that I can do that.

357
0:22:49.500 --> 0:22:50.500
Let's see.

358
0:22:50.500 --> 0:22:51.500
Let's start the timer.

359
0:22:51.500 --> 0:22:52.500
One, two, three.

360
0:22:52.500 --> 0:22:53.500
Go.

361
0:22:53.500 --> 0:22:54.500
Whoa.

362
0:22:54.500 --> 0:23:05.660
Okay.

363
0:23:05.660 --> 0:23:15.900
Let's check.

364
0:23:15.900 --> 0:23:18.540
I think I did that.

365
0:23:18.540 --> 0:23:19.540
So let's book.

366
0:23:19.540 --> 0:23:20.540
And okay.

367
0:23:20.540 --> 0:23:21.540
Payment taken.

368
0:23:21.540 --> 0:23:22.820
We can double check.

369
0:23:22.820 --> 0:23:24.340
So let's use Neo.

370
0:23:24.340 --> 0:23:29.340
And let's consume some bookings.

371
0:23:29.340 --> 0:23:33.860
Yes, it works.

372
0:23:33.860 --> 0:23:35.980
All right.

373
0:23:35.980 --> 0:23:41.300
So it will be that from live coding.

374
0:23:41.300 --> 0:23:44.020
One last thing that I would like to show you.

375
0:23:44.020 --> 0:23:49.340
Because you may notice that, okay, it's a lot of boring JSON there, et cetera, et cetera.

376
0:23:49.340 --> 0:23:51.340
You may notice that I don't like boring stuff.

377
0:23:51.340 --> 0:23:56.820
Because probably there are more interesting things to do than marshalling to JSON.

378
0:23:56.820 --> 0:24:03.100
That's because of that we created a component that is named CQRS component.

379
0:24:03.100 --> 0:24:08.540
And the idea is that instead of doing this JSON marshall and all that stuff, you can

380
0:24:08.540 --> 0:24:12.620
provide configuration to which format you would like to marshall everything.

381
0:24:12.620 --> 0:24:14.020
And under the hood it would be done.

382
0:24:14.020 --> 0:24:16.060
So you can use, of course, JSON.

383
0:24:16.060 --> 0:24:20.620
You can use protobuf, Avro, even something custom if you really want one.

384
0:24:20.620 --> 0:24:25.620
The idea is that you're only implementing this interface, so providing the name of the

385
0:24:25.620 --> 0:24:26.620
handler.

386
0:24:26.620 --> 0:24:30.460
You are providing the event that you are expecting to receive.

387
0:24:30.460 --> 0:24:32.940
So in that case it will be room booked.

388
0:24:32.940 --> 0:24:35.580
And you may notice that it was pretty generic.

389
0:24:35.580 --> 0:24:37.620
So we have an interface here.

390
0:24:37.620 --> 0:24:40.540
But we are working on the newer version.

391
0:24:40.540 --> 0:24:43.180
And you are just receiving this event.

392
0:24:43.180 --> 0:24:45.700
Zero, un marshalling, or whatever.

393
0:24:45.700 --> 0:24:48.500
And the same is going when you are publishing an event.

394
0:24:48.500 --> 0:24:54.740
So you are just providing the struct and what you are under the hood is doing all the marshalling

395
0:24:54.740 --> 0:24:55.740
stuff.

396
0:24:55.740 --> 0:24:56.740
Okay.

397
0:24:56.740 --> 0:25:00.620
So I think that will be all for live coding.

398
0:25:00.620 --> 0:25:05.660
It looks that I was lucky this time that everything worked.

399
0:25:05.660 --> 0:25:09.180
And yeah, of course, it's still not production-grade implementation.

400
0:25:09.180 --> 0:25:14.060
I mean, it's even hard to create a production-grade implementation of HTTP server.

401
0:25:14.060 --> 0:25:18.320
So it's more kind of inspiration to look deeper and see that, okay, it's not that

402
0:25:18.320 --> 0:25:19.320
scary.

403
0:25:19.320 --> 0:25:23.940
But you need to take into consideration that there are things like Kafka and Google Cloud

404
0:25:23.940 --> 0:25:47.760
PubSub internals, Lucky

405
0:25:47.760 --> 0:25:49.640
documentation.

406
0:25:49.640 --> 0:25:52.260
So yeah, I heard that we have pretty good documentation.

407
0:25:52.260 --> 0:25:59.460
So at the end of the presentation, it will be in the link.

408
0:25:59.460 --> 0:26:00.460
What else?

409
0:26:00.460 --> 0:26:01.900
We have also a lot of examples in watermills.

410
0:26:01.900 --> 0:26:04.820
So I will encourage you to...

411
0:26:04.820 --> 0:26:06.740
It's black.

412
0:26:06.740 --> 0:26:07.740
Oh.

413
0:26:07.740 --> 0:26:08.740
Live coding.

414
0:26:08.740 --> 0:26:09.740
Okay.

415
0:26:09.740 --> 0:26:10.740
It's not live coding.

416
0:26:10.740 --> 0:26:13.140
So see, not only live coding is risky.

417
0:26:13.140 --> 0:26:17.300
So yeah, we have a lot of examples that probably you cannot see because it's on the block.

418
0:26:17.300 --> 0:26:20.940
You need to believe me that this is on the watermill repository.

419
0:26:20.940 --> 0:26:25.180
At this point, I wanted to say a big thank you to all watermill contributors because

420
0:26:25.180 --> 0:26:28.500
without you, it wouldn't be like it's now.

421
0:26:28.500 --> 0:26:35.100
And slow announcement that we actually released watermill 1.2 after having too many release

422
0:26:35.100 --> 0:26:36.100
candidates.

423
0:26:36.100 --> 0:26:39.780
So yeah, finally it's released and you are all invited to a library party.

424
0:26:39.780 --> 0:26:44.540
And we will say what are the new features and it will be on March 1st.

425
0:26:44.540 --> 0:26:47.460
On the last link, it will be also linked for that.

426
0:26:47.460 --> 0:26:48.620
And I think that will be all.

427
0:26:48.620 --> 0:26:49.620
So this is the...

428
0:26:49.620 --> 0:26:50.860
Again, it's not working.

429
0:26:50.860 --> 0:26:51.860
Oh.

430
0:26:51.860 --> 0:26:52.860
Yeah.

431
0:26:52.860 --> 0:26:54.420
So this is the link that I promised to give you.

432
0:26:54.420 --> 0:26:58.700
The bonus that I have, I have super fancy holographic sticker notes.

433
0:26:58.700 --> 0:27:02.140
I'm sure that you don't have sticker notes, laptop stickers.

434
0:27:02.140 --> 0:27:03.820
So I'm sure that you don't have holographic ones.

435
0:27:03.820 --> 0:27:06.700
So if you don't have, I have a lot of them.

436
0:27:06.700 --> 0:27:08.820
And yeah, I think that would be all.

437
0:27:08.820 --> 0:27:12.820
So thank you very much for your attention.

438
0:27:12.820 --> 0:27:14.820
Thank you.


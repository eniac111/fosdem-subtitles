1
0:00:00.000 --> 0:00:02.000
you

2
0:00:04.860 --> 0:00:06.860
Good morning everyone

3
0:00:09.340 --> 0:00:14.820
Finally I can hear you again after two years online where I just had to stare at a boring matrix chat

4
0:00:14.820 --> 0:00:30.320
I am honestly so glad to be here and welcome everyone back in our physical bedroom

5
0:00:30.320 --> 0:00:33.820
Just like every year we're starting with an update with the state of Go

6
0:00:33.820 --> 0:00:40.820
We're gonna talk about what's new in Go, how quickly touch on some topics, how interesting things about Go come in later talks

7
0:00:40.820 --> 0:00:46.820
So what I'm gonna look into today is change to the language, as well as the standard library, tooling of course

8
0:00:46.820 --> 0:00:52.820
I got two interesting design drafts for new releases in Go and of course an update on our Go community

9
0:00:52.820 --> 0:00:58.820
What is new in Go since Go 180? Well of course Go 119 was released in August of last year

10
0:00:58.820 --> 0:01:02.820
Go 1.20 was released a few days ago

11
0:01:02.820 --> 0:01:06.820
It's just the first time that they released a Go version before I do this talk

12
0:01:06.820 --> 0:01:11.820
What are the big new changes? There are four new changes to the language

13
0:01:11.820 --> 0:01:17.820
It's the most we ever had, however one is not really a change so it's more like 2.5 changes

14
0:01:17.820 --> 0:01:20.820
But actually more like 2.25

15
0:01:20.820 --> 0:01:23.820
Okay let's just keep it there, two real changes to the language edition

16
0:01:23.820 --> 0:01:28.820
The first one is that there is a new syntax for converting a slice to an array

17
0:01:28.820 --> 0:01:34.820
Those of you who are new to Go might be confused because what's the difference between a slice and an array? I call them both arrays

18
0:01:34.820 --> 0:01:39.820
Well technically in Go an array has a fixed length and a slice doesn't

19
0:01:39.820 --> 0:01:42.820
That's too easy to say it's not correct

20
0:01:42.820 --> 0:01:49.820
But you can convert between those two and you could have done so since Go 117 using this ugly syntax

21
0:01:49.820 --> 0:01:52.820
Which has to do with pointers and how it works underneath

22
0:01:52.820 --> 0:01:55.820
I would have never come up with this myself

23
0:01:55.820 --> 0:01:58.820
When in Go 1.20 it's more logical now

24
0:01:58.820 --> 0:02:03.820
You can just make an array with a fixed length of 3 and put your slice in it, this now works

25
0:02:03.820 --> 0:02:08.820
The next change has to do with generics which were introduced just last year

26
0:02:08.820 --> 0:02:12.820
It has to do with a comparable constraint which we could give to variables

27
0:02:12.820 --> 0:02:15.820
You could say a variable has to be comparable

28
0:02:15.820 --> 0:02:21.820
Why would you use this? For example when you have to loop over a map it has to have a comparable key

29
0:02:21.820 --> 0:02:24.820
So you could write something like this to make a sum of some numbers

30
0:02:24.820 --> 0:02:30.820
And you can use it wherever you want, you make a map from strings and ints and it will count as

31
0:02:30.820 --> 0:02:34.820
Okay, strings will work because they are comparable, how do I know that?

32
0:02:34.820 --> 0:02:38.820
Simple, you can compare them with equal size

33
0:02:38.820 --> 0:02:42.820
But what about the empty interface? Is that comparable?

34
0:02:42.820 --> 0:02:45.820
Well that depends what the interface is

35
0:02:45.820 --> 0:02:47.820
Before this was not valid, you couldn't do this

36
0:02:47.820 --> 0:02:51.820
When in Go 1.20 you can because now you have two types of comparables

37
0:02:51.820 --> 0:02:56.820
You have strictly comparables like ints, thin strings, bytes, the usual

38
0:02:56.820 --> 0:02:59.820
But also non-strictly comparables like the empty interface

39
0:02:59.820 --> 0:03:02.820
Do be careful because this might panic at runtime

40
0:03:02.820 --> 0:03:05.820
It's allowed but it can panic

41
0:03:05.820 --> 0:03:08.820
The next change is the comparison of struct values

42
0:03:08.820 --> 0:03:12.820
It now checks one property at a time and it will exit at the first mismatch

43
0:03:12.820 --> 0:03:15.820
Wait a minute, this was always this way

44
0:03:15.820 --> 0:03:20.820
Yes, it was always implemented this way but it was never specified in the language specification

45
0:03:20.820 --> 0:03:22.820
But this isn't really a change in the language

46
0:03:22.820 --> 0:03:26.820
The next change has to do with three new unsafe functions

47
0:03:26.820 --> 0:03:30.820
But this is the unsafe package, you should just avoid doing this

48
0:03:33.820 --> 0:03:36.820
Next up, what is new with the Go tooling?

49
0:03:36.820 --> 0:03:39.820
Well, I say this every year and before me, Frances said it every year

50
0:03:39.820 --> 0:03:42.820
Is that there are new warnings in GoVets

51
0:03:42.820 --> 0:03:45.820
Why should you care? Okay, there is a new squiggly line in your editor

52
0:03:45.820 --> 0:03:47.820
You might not care about those squiggly lines in your editor

53
0:03:47.820 --> 0:03:49.820
You should, but you can't

54
0:03:49.820 --> 0:03:52.820
Okay, but it also runs when you run tests with Go test

55
0:03:52.820 --> 0:03:55.820
So you see I might suddenly turn red if you update your Go version

56
0:03:55.820 --> 0:03:58.820
Because there are new warnings, that's why these are important

57
0:03:58.820 --> 0:04:01.820
The first new warning this year is in Go 119

58
0:04:01.820 --> 0:04:05.820
That it will now error when you pass a pointer to an error

59
0:04:05.820 --> 0:04:07.820
And the error.s function

60
0:04:07.820 --> 0:04:10.820
Which is such a common mistake that Kitop co-pilot wrote this code for me

61
0:04:12.820 --> 0:04:14.820
It's not bad, it doesn't work

62
0:04:14.820 --> 0:04:17.820
The next warning has to do with incorrect date formats

63
0:04:17.820 --> 0:04:22.820
I'd say I want to format the date of today in an ISO-like notation

64
0:04:22.820 --> 0:04:24.820
Well, I would write some code like this

65
0:04:24.820 --> 0:04:28.820
But wait a minute, let's think twice about my code here

66
0:04:28.820 --> 0:04:30.820
How do I format dates in Go?

67
0:04:30.820 --> 0:04:34.820
Well, you always have to think about Monday, January 2nd of 2006

68
0:04:34.820 --> 0:04:36.820
This is February 1st

69
0:04:36.820 --> 0:04:39.820
Many of you probably haven't noticed

70
0:04:39.820 --> 0:04:41.820
Again, this is a common mistake

71
0:04:41.820 --> 0:04:43.820
Because people are confused with the one and the two

72
0:04:43.820 --> 0:04:45.820
GoVets will now warn you against the above format

73
0:04:45.820 --> 0:04:48.820
Because it probably is used nowhere

74
0:04:48.820 --> 0:04:51.820
There are also some welcome changes to GoDoc

75
0:04:51.820 --> 0:04:56.820
You can now list, link, and headers inside your doc comments

76
0:04:56.820 --> 0:04:59.820
Which will be rendered into HTML

77
0:04:59.820 --> 0:05:01.820
Here's an example below where I put a header in

78
0:05:01.820 --> 0:05:03.820
I link to the RC I'm implementing

79
0:05:03.820 --> 0:05:07.820
And I'm also listing which guys of coffee my machine supports

80
0:05:08.820 --> 0:05:11.820
There is also in 119 a new Unix build constraint

81
0:05:11.820 --> 0:05:14.820
If you want to build a file that only will be built on a Unix system

82
0:05:14.820 --> 0:05:17.820
You can do that using Go column builds

83
0:05:17.820 --> 0:05:21.820
In the past you could do it by listing all different Unix systems

84
0:05:21.820 --> 0:05:23.820
There are a lot of them

85
0:05:23.820 --> 0:05:25.820
That's a lot of code, right?

86
0:05:25.820 --> 0:05:29.820
Well, in 119 you can just do Go column build Unix

87
0:05:29.820 --> 0:05:32.820
Wait a minute, isn't this a common thing to do?

88
0:05:32.820 --> 0:05:36.820
Because the file system in Unix is almost the same everywhere

89
0:05:36.820 --> 0:05:40.820
So I asked chatgpt, like every developer does these days

90
0:05:40.820 --> 0:05:43.820
I asked, give me a Unix build constraint

91
0:05:43.820 --> 0:05:44.820
And it gave me this thing

92
0:05:44.820 --> 0:05:47.820
Go build, not Windows

93
0:05:52.820 --> 0:05:54.820
Okay, you all know what's going to happen, right?

94
0:05:54.820 --> 0:05:58.820
Okay, you say, it's an AI, I trust the AI

95
0:05:58.820 --> 0:06:01.820
Let's think thrice about this

96
0:06:01.820 --> 0:06:03.820
Don't go out to be smart

97
0:06:03.820 --> 0:06:05.820
And read the actual compiler code

98
0:06:05.820 --> 0:06:07.820
Like every one of you does all day

99
0:06:07.820 --> 0:06:10.820
And immediately I found this thing

100
0:06:10.820 --> 0:06:12.820
Oh, JavaScript is a thing

101
0:06:12.820 --> 0:06:14.820
WebAssembly, one important fact

102
0:06:14.820 --> 0:06:16.820
I didn't even talk about if plan 9 is Unix or not

103
0:06:16.820 --> 0:06:18.820
No, I just want JavaScript

104
0:06:18.820 --> 0:06:21.820
That's not Unix and it's also not Windows

105
0:06:21.820 --> 0:06:23.820
So just don't trust your AI, please

106
0:06:24.820 --> 0:06:27.820
1.20 adds also coverage on building binaries

107
0:06:27.820 --> 0:06:29.820
Why should you care about this?

108
0:06:29.820 --> 0:06:31.820
Well, many integration and end-to-end tests

109
0:06:31.820 --> 0:06:35.820
You run them by making a special binary, running it, and getting your test results

110
0:06:35.820 --> 0:06:38.820
If you also want coverage results, this wasn't possible before

111
0:06:38.820 --> 0:06:44.820
If you now build it with dash cover and add a code cover dir environment variable

112
0:06:44.820 --> 0:06:48.820
Then run the script, okay, you get your output

113
0:06:48.820 --> 0:06:50.820
And you also get which lines all your code touch

114
0:06:50.820 --> 0:06:53.820
So you can put it in your site, your favorite coverage tool

115
0:06:54.820 --> 0:06:57.820
There are also a few small changes on which I want to touch upon

116
0:06:57.820 --> 0:07:00.820
Cgo will now be disabled if a C2 chain is not found

117
0:07:00.820 --> 0:07:03.820
Many container people will now be happy

118
0:07:03.820 --> 0:07:04.820
Go generate and go test

119
0:07:04.820 --> 0:07:08.820
I also have a skip flag which you can put in the regex for which file to skip

120
0:07:10.820 --> 0:07:12.820
Okay, let's take a look at the standard library

121
0:07:12.820 --> 0:07:14.820
Go has many things in the standard library

122
0:07:14.820 --> 0:07:16.820
And of course we have changes in those every year

123
0:07:16.820 --> 0:07:20.820
The first one is in 1.20 and I find super useful

124
0:07:20.820 --> 0:07:22.820
You can now wrap multiple errors

125
0:07:22.820 --> 0:07:25.820
You can do so using errors.fmt.errorf

126
0:07:25.820 --> 0:07:28.820
You can now put multiple percent, sine w in there

127
0:07:28.820 --> 0:07:30.820
You can just wrap multiple errors

128
0:07:30.820 --> 0:07:33.820
Your functions that you will run on them like errors.is or errors.s

129
0:07:33.820 --> 0:07:35.820
Just loop over all those errors

130
0:07:35.820 --> 0:07:38.820
It does that by using the underlying new unwrap interface

131
0:07:38.820 --> 0:07:41.820
Which just gives you the slice of original errors back

132
0:07:41.820 --> 0:07:44.820
There is also the new errors.join function

133
0:07:44.820 --> 0:07:46.820
Which you can just throw all your errors into

134
0:07:47.820 --> 0:07:49.820
Why would you use this?

135
0:07:49.820 --> 0:07:50.820
You always written a code like this

136
0:07:50.820 --> 0:07:52.820
You just loop over a list

137
0:07:52.820 --> 0:07:54.820
And you want to check for some errors

138
0:07:54.820 --> 0:07:57.820
Okay, you could just return a slice of error

139
0:07:57.820 --> 0:08:00.820
But then you have to check for the length, if it's not nil, etc

140
0:08:00.820 --> 0:08:02.820
Okay, you just want a single error out there

141
0:08:02.820 --> 0:08:05.820
You can use errors.join and you get a list of all your errors

142
0:08:05.820 --> 0:08:07.820
Which are joined together

143
0:08:07.820 --> 0:08:10.820
You can just treat it like a normal error in your code

144
0:08:10.820 --> 0:08:13.820
And even use errors.is and errors.as

145
0:08:13.820 --> 0:08:17.820
So you could just say, oh, was there any NP string in this list?

146
0:08:17.820 --> 0:08:20.820
There are also a few changes to the strings and byte package

147
0:08:20.820 --> 0:08:22.820
Which is that it now has a new cut function

148
0:08:22.820 --> 0:08:27.820
It just works as a React trim with trim prefix, cut prefix and cut suffix

149
0:08:27.820 --> 0:08:30.820
Except it will now return a boolean if a cutout happened

150
0:08:30.820 --> 0:08:34.820
There is also a clone function which returns the same instance copied in memory

151
0:08:34.820 --> 0:08:38.820
Also, a few small changes to the time package

152
0:08:38.820 --> 0:08:40.820
We now have a compare function

153
0:08:40.820 --> 0:08:42.820
Which is a combination of before and after

154
0:08:42.820 --> 0:08:43.820
It does both

155
0:08:43.820 --> 0:08:46.820
It will return you an integer from either minus one plus one or zero

156
0:08:46.820 --> 0:08:49.820
Depending on which before, after, or the same at the given time

157
0:08:51.820 --> 0:08:53.820
There are also three new layout constraints which you can use

158
0:08:53.820 --> 0:08:55.820
And those actually came from you

159
0:08:55.820 --> 0:08:58.820
Those came from the Go user survey that they are commonly used

160
0:08:58.820 --> 0:08:59.820
So they added them

161
0:08:59.820 --> 0:09:02.820
There is date time, which gives you an ISO-like notation

162
0:09:02.820 --> 0:09:05.820
There is also date only and time only

163
0:09:05.820 --> 0:09:07.820
Which gives you only the date and only the time

164
0:09:08.820 --> 0:09:11.820
There is also a change in the TLS package like every addition

165
0:09:11.820 --> 0:09:13.820
This time it's a change in how it treats memory

166
0:09:13.820 --> 0:09:17.820
It now shares a copy of your certificate in memory

167
0:09:17.820 --> 0:09:19.820
Why is this useful for you?

168
0:09:19.820 --> 0:09:22.820
Well, let's say you have an application that does many concurrent connections

169
0:09:22.820 --> 0:09:23.820
Like Kubernetes

170
0:09:23.820 --> 0:09:27.820
Well, ultimately now it stores a copy of the certificate for every connection in memory

171
0:09:27.820 --> 0:09:30.820
It now is sharing those amongst multiple connections

172
0:09:30.820 --> 0:09:31.820
So you are saving memory

173
0:09:31.820 --> 0:09:33.820
If you somehow have an invalid certificate

174
0:09:33.820 --> 0:09:36.820
You also get a specific error that says the certificate is not valid

175
0:09:36.820 --> 0:09:38.820
Instead of a general error

176
0:09:39.820 --> 0:09:44.820
And yes, we also have breaking changes in addition in the standard library

177
0:09:44.820 --> 0:09:47.820
The first one happened in 119 in the HTTP package

178
0:09:47.820 --> 0:09:50.820
The HTTP client will now no longer give an error back

179
0:09:50.820 --> 0:09:54.820
If your server sends a 300 response without the location header set

180
0:09:54.820 --> 0:09:58.820
If you rely on your code to check if the location is set or not

181
0:09:58.820 --> 0:10:01.820
By using this error, yes, your code will break now

182
0:10:02.820 --> 0:10:04.820
Also a change in the random package

183
0:10:04.820 --> 0:10:07.820
It is now pre-seeded when you use the global random functions

184
0:10:07.820 --> 0:10:12.820
You no longer have to call the.seed function with some random number you get from somewhere

185
0:10:12.820 --> 0:10:13.820
It now does that for you

186
0:10:13.820 --> 0:10:16.820
Of course it deprecates the.seed function

187
0:10:16.820 --> 0:10:20.820
If you still need your own seed for predictable random numbers

188
0:10:20.820 --> 0:10:23.820
You can do so by using the run.new function

189
0:10:23.820 --> 0:10:25.820
If this somehow breaks your code, it could

190
0:10:25.820 --> 0:10:29.820
You can disable it using this new go debug variable

191
0:10:30.820 --> 0:10:33.820
In tar and zip there are also some changes which are welcome

192
0:10:33.820 --> 0:10:36.820
Which is that it will now error if your archive has an absolute path

193
0:10:36.820 --> 0:10:38.820
An invalid character in a file name

194
0:10:38.820 --> 0:10:40.820
Or a reserved name on the Windows platform

195
0:10:40.820 --> 0:10:43.820
It will now return an error in secure path

196
0:10:43.820 --> 0:10:45.820
This to protect your server from being hacked

197
0:10:45.820 --> 0:10:50.820
If you somehow don't want this you can also turn it off in go debug

198
0:10:50.820 --> 0:10:53.820
There is one new package in the standard library

199
0:10:53.820 --> 0:10:56.820
Which is the elliptic curve default command key change

200
0:10:59.820 --> 0:11:01.820
Yay, very excited

201
0:11:02.820 --> 0:11:03.820
This was possible

202
0:11:03.820 --> 0:11:06.820
Google can do this using the lower elliptic one

203
0:11:06.820 --> 0:11:08.820
But you had to implement more yourself

204
0:11:09.820 --> 0:11:11.820
So it's probably more secure than you would it

205
0:11:12.820 --> 0:11:14.820
Okay, the core runtime

206
0:11:14.820 --> 0:11:16.820
We also have a few changes in there

207
0:11:16.820 --> 0:11:19.820
Well, go 119 has a revised memory model

208
0:11:19.820 --> 0:11:22.820
And I have no idea how they did that

209
0:11:22.820 --> 0:11:23.820
I don't know

210
0:11:23.820 --> 0:11:26.820
So if you want something, actually know what he's talking about

211
0:11:26.820 --> 0:11:28.820
Rescox wrote an amazing blog post about it

212
0:11:28.820 --> 0:11:31.820
But what does this means for us average go developers

213
0:11:31.820 --> 0:11:33.820
And not compiler developers?

214
0:11:33.820 --> 0:11:36.820
Well, first of all go now has a soft memory limit

215
0:11:36.820 --> 0:11:40.820
You can now tell go how much memory you want it to maximum use

216
0:11:40.820 --> 0:11:42.820
To a soft limit

217
0:11:42.820 --> 0:11:45.820
Okay, you can for example set it to be 1 gigabyte

218
0:11:45.820 --> 0:11:47.820
Okay, what will happen?

219
0:11:47.820 --> 0:11:49.820
The more go towards the 1 gigabyte limits

220
0:11:49.820 --> 0:11:53.820
It will try to trigger the garbage collector more to get more memory freeds

221
0:11:53.820 --> 0:11:56.820
Yes, you can see the results if it's too low

222
0:11:56.820 --> 0:11:58.820
Well, what will happen is if it's too much

223
0:11:58.820 --> 0:12:02.820
It will try to limit it to 50% of the CPU execution time

224
0:12:02.820 --> 0:12:04.820
Which your process is using to be garbage collection

225
0:12:05.820 --> 0:12:07.820
There is however a warning if you set it to tens of milli

226
0:12:07.820 --> 0:12:09.820
Tens of megabytes it might just not work

227
0:12:09.820 --> 0:12:12.820
Because your operating system says that's absolutely not enough

228
0:12:12.820 --> 0:12:16.820
This also results in a new atomic package

229
0:12:16.820 --> 0:12:19.820
Which provides low level atomic memory access

230
0:12:19.820 --> 0:12:22.820
So you can now access these variables in multiple go routines

231
0:12:22.820 --> 0:12:26.820
It works only for primitives like integers, boolean and unsafe pointers

232
0:12:26.820 --> 0:12:30.820
It does this by exposing the function store and load

233
0:12:30.820 --> 0:12:34.820
Also add for integers and compare and compare and swap

234
0:12:35.820 --> 0:12:39.820
Okay, but if you use this you need to know exactly what you're doing

235
0:12:39.820 --> 0:12:41.820
You need to know how automics work

236
0:12:41.820 --> 0:12:42.820
As always

237
0:12:42.820 --> 0:12:45.820
And it's still not really recommended

238
0:12:45.820 --> 0:12:49.820
They recommend that you still share memory by communicating

239
0:12:49.820 --> 0:12:52.820
For example with channels and not communicate by sharing memory

240
0:12:52.820 --> 0:12:56.820
So please only use this as if this is your only option

241
0:12:57.820 --> 0:12:59.820
Go 1.20 has a few small changes in the runtime

242
0:12:59.820 --> 0:13:01.820
The garbage collector got better yet again

243
0:13:01.820 --> 0:13:03.820
Say this every year for five years

244
0:13:03.820 --> 0:13:06.820
It got better and it is now a lazeratic

245
0:13:06.820 --> 0:13:09.820
There is also a new mode which you can compile a binary scene

246
0:13:09.820 --> 0:13:13.820
Which is Pgo which you can give it a profile of your program that has been running

247
0:13:13.820 --> 0:13:17.820
Which we will now will try to optimize the binary towards your CPU profile

248
0:13:17.820 --> 0:13:21.820
From a previous run by for example inlining frequently called functions

249
0:13:21.820 --> 0:13:24.820
The go team claims that is up to 4% faster

250
0:13:24.820 --> 0:13:26.820
I had some colleagues who were looking into this

251
0:13:26.820 --> 0:13:28.820
But not in time to get actual benchmarks

252
0:13:30.820 --> 0:13:33.820
At last I want to give you a small update on go ports

253
0:13:33.820 --> 0:13:35.820
So what is happening on the ports in go?

254
0:13:35.820 --> 0:13:38.820
Well go 1.19 added a new processor architecture on the next one

255
0:13:38.820 --> 0:13:40.820
Which is long arc

256
0:13:40.820 --> 0:13:42.820
It's a chinese build architecture

257
0:13:42.820 --> 0:13:44.820
It's not yet in white use however

258
0:13:44.820 --> 0:13:48.820
Go 1.20 will be the last one to support Windows 7 and 8

259
0:13:52.820 --> 0:13:56.820
It will also be the last one to support Mac OS 10.13 and 10.14 but who cares

260
0:13:58.820 --> 0:14:02.820
Go 1.20 also adds experimental support for RISC-V for the free BSD platform

261
0:14:02.820 --> 0:14:05.820
Yay!

262
0:14:05.820 --> 0:14:07.820
Okay that is the current version of go

263
0:14:07.820 --> 0:14:09.820
But of course let's take a look at the future

264
0:14:09.820 --> 0:14:13.820
And always we try to look in the future it won't always work

265
0:14:13.820 --> 0:14:16.820
I have two interesting design drafts which I found

266
0:14:16.820 --> 0:14:19.820
The first one is one for structured logging

267
0:14:19.820 --> 0:14:22.820
Something you all do but doesn't work in a standard library

268
0:14:22.820 --> 0:14:27.820
There is a proposal to make an S-lock package in lock in a standard library

269
0:14:27.820 --> 0:14:30.820
They want this to produce machine readable logging

270
0:14:30.820 --> 0:14:34.820
And it hopes to replace the many many many many many many structured logging libraries

271
0:14:34.820 --> 0:14:38.820
Like logris, zet, zet, log, logger, clock, hclog, clock and however you pronounce all those

272
0:14:38.820 --> 0:14:41.820
It tries to propose something like this

273
0:14:41.820 --> 0:14:44.820
Something like every library probably already did is

274
0:14:44.820 --> 0:14:47.820
You set up for something, you set up where you want to send it to

275
0:14:47.820 --> 0:14:50.820
You put in messages, you put in variables and it logs those out

276
0:14:50.820 --> 0:14:52.820
In something that is machine readable

277
0:14:52.820 --> 0:14:56.820
This is the text output which is just key value pairs

278
0:14:56.820 --> 0:14:59.820
So your computers can all read it and can index it and make it searchable

279
0:14:59.820 --> 0:15:02.820
How does it want to do this?

280
0:15:02.820 --> 0:15:05.820
It wants to give you a logger interface

281
0:15:05.820 --> 0:15:09.820
Again these are all interfaces you can just implement them in your own library

282
0:15:09.820 --> 0:15:15.820
It wants to give you fellow functions like info, error, warning, log attributes

283
0:15:15.820 --> 0:15:18.820
It then makes those into records

284
0:15:18.820 --> 0:15:20.820
This is just a struct containing all this data

285
0:15:20.820 --> 0:15:23.820
And you give this record to a handler

286
0:15:23.820 --> 0:15:26.820
And this handler will turn it into something that is machine readable

287
0:15:26.820 --> 0:15:29.820
If you want JSON you just give it to a JSON handler

288
0:15:29.820 --> 0:15:32.820
If you want some proprietary format you just make your own

289
0:15:32.820 --> 0:15:35.820
So it tries to give you an implementation and interfaces in the standard library

290
0:15:35.820 --> 0:15:39.820
For different log levels like debug, info, warning, error

291
0:15:39.820 --> 0:15:44.820
Passing in data to be printed out and outputting it to text and JSON and maybe more formats

292
0:15:44.820 --> 0:15:47.820
Again this is a design proposal

293
0:15:47.820 --> 0:15:49.820
It's not yet implemented anyway

294
0:15:49.820 --> 0:15:51.820
If you have strong opinions about logging

295
0:15:51.820 --> 0:15:53.820
You can read the full proposal of this link

296
0:15:53.820 --> 0:15:56.820
I will publish the site of false them later today

297
0:15:56.820 --> 0:15:59.820
And you can go there, read everything about it

298
0:15:59.820 --> 0:16:02.820
And leave some comments in their issue tracker

299
0:16:02.820 --> 0:16:05.820
The next big thing they want to tackle is Go version compatibility

300
0:16:05.820 --> 0:16:08.820
Why do they want to do that?

301
0:16:08.820 --> 0:16:11.820
Well we've been doing this talk ever since 2015

302
0:16:11.820 --> 0:16:15.820
A lot has changed, bigger room, different speakers

303
0:16:15.820 --> 0:16:17.820
And especially different slide templates

304
0:16:17.820 --> 0:16:19.820
But there is one thing that always stays the same

305
0:16:19.820 --> 0:16:21.820
It's this slide

306
0:16:21.820 --> 0:16:23.820
Breaking changes

307
0:16:23.820 --> 0:16:27.820
Wait a minute Marcia, isn't there the Go 1.0 compatibility promise?

308
0:16:27.820 --> 0:16:28.820
And yes

309
0:16:28.820 --> 0:16:32.820
Well Go's emphasis on backwards compatibility is why we all use Go

310
0:16:32.820 --> 0:16:35.820
Because we don't have to rewrite our whole application every two years

311
0:16:35.820 --> 0:16:38.820
However there are times which is not possible

312
0:16:38.820 --> 0:16:42.820
For example with external security dependencies or just bugs that we have to fix

313
0:16:42.820 --> 0:16:45.820
Okay let's take a look at this in practice

314
0:16:45.820 --> 0:16:47.820
Let's look at the big Go project

315
0:16:47.820 --> 0:16:49.820
Kubernetes again

316
0:16:49.820 --> 0:16:51.820
And Go break Kubernetes, well more than you think

317
0:16:51.820 --> 0:16:53.820
Just in the last versions

318
0:16:53.820 --> 0:16:55.820
Go 1.15 broke Kubernetes in some way

319
0:16:55.820 --> 0:16:57.820
By deprecating the X.509 command name

320
0:16:57.820 --> 0:17:01.820
1.17, a bug fix in that parse IP, broke it again

321
0:17:01.820 --> 0:17:04.820
In 1.18, again X.509 broke Kubernetes again

322
0:17:04.820 --> 0:17:07.820
Because Go changed something, they deprecated something

323
0:17:07.820 --> 0:17:11.820
And in 1.19, a bug fix in loop path also broke Kubernetes

324
0:17:11.820 --> 0:17:12.820
Oops

325
0:17:12.820 --> 0:17:16.820
Of course it's impossible not to break Kubernetes somehow

326
0:17:16.820 --> 0:17:22.820
But still let's try to avoid this in our language

327
0:17:22.820 --> 0:17:25.820
So we have a solution and it's a solution already we have today

328
0:17:25.820 --> 0:17:28.820
It's that Go debug flag I've been showing on my slides

329
0:17:28.820 --> 0:17:33.820
Okay what is this proposal? It is to commit to adding one of these Go debug flags

330
0:17:33.820 --> 0:17:36.820
To every breaking change in the following releases

331
0:17:36.820 --> 0:17:40.820
And also to guarantee that they'll stay there for a few years or maybe forever

332
0:17:40.820 --> 0:17:44.820
They also want to add metrics to it so you can look at your program

333
0:17:44.820 --> 0:17:46.820
See how many of those are there that you have to fix

334
0:17:46.820 --> 0:17:50.820
And also to put it in code so you can use Go call and debug

335
0:17:50.820 --> 0:17:52.820
To override it inside the code yourself

336
0:17:52.820 --> 0:17:54.820
Again this is not yet fully implemented

337
0:17:54.820 --> 0:17:57.820
There is design proposal, you can read everything on the link there

338
0:17:57.820 --> 0:17:59.820
And leave any comments

339
0:17:59.820 --> 0:18:02.820
But wait a minute Marcia, don't we already have this

340
0:18:02.820 --> 0:18:05.820
I have to specify that Go version in my modules file, right?

341
0:18:05.820 --> 0:18:07.820
Yeah but what does it actually do?

342
0:18:07.820 --> 0:18:11.820
Oh I know, this says the minimum Go version to build it

343
0:18:11.820 --> 0:18:16.820
No, it will try, any version will just try to build it

344
0:18:16.820 --> 0:18:18.820
It's just a suggestion, it might fail

345
0:18:18.820 --> 0:18:22.820
Oh I know, it says the Go version in which it uses

346
0:18:22.820 --> 0:18:27.820
Also, no sorry, it uses the installed version on your laptop, nothing else

347
0:18:27.820 --> 0:18:30.820
Oh then I know, it says the semantic rule set for the version

348
0:18:30.820 --> 0:18:33.820
And yes that is correct, but only the semantic rule set

349
0:18:33.820 --> 0:18:37.820
So that's slice to array conversion, yes that is set by the flag

350
0:18:37.820 --> 0:18:40.820
The octal numbers which got added two years ago, yes that is also checked by the flag

351
0:18:40.820 --> 0:18:42.820
But that's all

352
0:18:42.820 --> 0:18:44.820
Ok they want to change this

353
0:18:44.820 --> 0:18:46.820
And this is the Go toolchain proposal

354
0:18:46.820 --> 0:18:49.820
They want to add a Go toolchain environment variable

355
0:18:49.820 --> 0:18:52.820
Which you could use to set a specific toolchain

356
0:18:52.820 --> 0:18:55.820
Ok I want to use the 1.20 toolchain for this application

357
0:18:55.820 --> 0:18:59.820
This will allow Go get to get a new Go toolchain

358
0:18:59.820 --> 0:19:01.820
Just like you would get your Go modules

359
0:19:01.820 --> 0:19:05.820
Ok, but it also needs to change the Go command a lot

360
0:19:05.820 --> 0:19:09.820
Because it has to get your toolchain from somewhere

361
0:19:09.820 --> 0:19:11.820
And then first download it, check it and run it

362
0:19:11.820 --> 0:19:13.820
That changes our tooling a lot

363
0:19:13.820 --> 0:19:15.820
And also there is a cool toolchain local

364
0:19:15.820 --> 0:19:17.820
If you still need a local for some reason

365
0:19:17.820 --> 0:19:19.820
Again this is just a design proposal

366
0:19:19.820 --> 0:19:21.820
I might be saying that this is implemented next year

367
0:19:21.820 --> 0:19:25.820
If you have comments about it, there is a link here below

368
0:19:25.820 --> 0:19:28.820
There is also a proposal to add this to the Go mod file

369
0:19:28.820 --> 0:19:30.820
So it's right under the Go version

370
0:19:30.820 --> 0:19:32.820
You say ok, my application uses the 1.19 syntax

371
0:19:32.820 --> 0:19:35.820
But it has to use a 1.20 RC for toolchain

372
0:19:35.820 --> 0:19:38.820
So if you build this module, it will go download this version of Go

373
0:19:38.820 --> 0:19:40.820
And build it using that

374
0:19:41.820 --> 0:19:43.820
Ok, that's a technical thing

375
0:19:43.820 --> 0:19:46.820
Let's talk about my favorite subject, the Go community

376
0:19:46.820 --> 0:19:49.820
This is a map of all Go meetups in the world

377
0:19:49.820 --> 0:19:51.820
We are pretty much covered everywhere

378
0:19:51.820 --> 0:19:54.820
Where big populations are, but still not enough

379
0:19:54.820 --> 0:19:55.820
What are the numbers?

380
0:19:55.820 --> 0:19:57.820
Well the professional Go developer network on meetup

381
0:19:57.820 --> 0:20:01.820
Counts 127,000 members

382
0:20:01.820 --> 0:20:04.820
That's 8,000 more than last year

383
0:20:04.820 --> 0:20:06.820
There is sad news, for the first time

384
0:20:06.820 --> 0:20:08.820
There is now only 190 meetups

385
0:20:08.820 --> 0:20:10.820
That's 6 less than last year

386
0:20:10.820 --> 0:20:14.820
Which also results in one country being less represented

387
0:20:14.820 --> 0:20:16.820
Probably due to the pandemic

388
0:20:16.820 --> 0:20:19.820
There are also the women who go in GoBrick chapters

389
0:20:19.820 --> 0:20:21.820
Which is still stable at 41 chapters

390
0:20:21.820 --> 0:20:23.820
And Berlin is still the most active one

391
0:20:23.820 --> 0:20:26.820
But now let's talk about my favorite community

392
0:20:26.820 --> 0:20:28.820
The Franceland community

393
0:20:28.820 --> 0:20:30.820
Our death room is 9 years old today

394
0:20:30.820 --> 0:20:33.820
So we've been doing this since 2014

395
0:20:33.820 --> 0:20:36.820
Ok, small room, anyone can see themselves

396
0:20:36.820 --> 0:20:40.820
Ok, we got upgraded in 2015, 2016

397
0:20:40.820 --> 0:20:43.820
Ok, bigger one, we stayed in the same size for 3 years

398
0:20:43.820 --> 0:20:46.820
Which was crowded enough, and today even it's full house

399
0:20:46.820 --> 0:20:50.820
2019 we got the biggest upgrade ever

400
0:20:50.820 --> 0:20:51.820
We got a giant room

401
0:20:51.820 --> 0:20:55.820
And in 2020 we got the biggest room they could find for us

402
0:20:55.820 --> 0:20:59.820
But I regret doing that because a month later we were all in lockdown

403
0:20:59.820 --> 0:21:04.820
That cost our 2021 edition to be fully online for the first time

404
0:21:04.820 --> 0:21:07.820
We all did our best, we turned our living rooms into giant television studios

405
0:21:07.820 --> 0:21:10.820
Trying to bring you some talks about Go

406
0:21:10.820 --> 0:21:12.820
We learned a lot of lessons

407
0:21:12.820 --> 0:21:14.820
And in 2022 we brought you Govers Around the World

408
0:21:14.820 --> 0:21:17.820
Which we had great fun in producing

409
0:21:17.820 --> 0:21:20.820
But hey, welcome back

410
0:21:20.820 --> 0:21:27.820
This is something you'll never ever see again today

411
0:21:27.820 --> 0:21:32.820
There was just one guy still sitting there

412
0:21:32.820 --> 0:21:36.820
And he'll be here at 9 pm

413
0:21:36.820 --> 0:21:38.820
Ok, let's talk about Go conferences

414
0:21:38.820 --> 0:21:39.820
You're all in the mood, right?

415
0:21:39.820 --> 0:21:42.820
So there is a Go Dev and what falls down, you are here

416
0:21:42.820 --> 0:21:44.820
Please stay, there are better talks than mine

417
0:21:44.820 --> 0:21:48.820
If you quickly catch a plane, right now you can still make

418
0:21:48.820 --> 0:21:50.820
Govercon Israel, February 7th

419
0:21:50.820 --> 0:21:53.820
Govercon 42 will still be held online in April

420
0:21:53.820 --> 0:21:57.820
If you want to go to New York you can do so at April 28

421
0:21:57.820 --> 0:21:59.820
Govercon Japan will be held online

422
0:21:59.820 --> 0:22:02.820
Govercon Europe will be in Berlin in June

423
0:22:02.820 --> 0:22:06.820
Govercon US will be in San Diego in September

424
0:22:06.820 --> 0:22:09.820
And Go up in Florence, Italy will be held in November

425
0:22:09.820 --> 0:22:11.820
Which I have not officially confirmed yet

426
0:22:11.820 --> 0:22:15.820
So we got an amazing schedule today

427
0:22:15.820 --> 0:22:18.820
I already want to talk all speakers for signing up

428
0:22:18.820 --> 0:22:20.820
To be in our dev room today

429
0:22:20.820 --> 0:22:22.820
I hope you're welcome again next year

430
0:22:22.820 --> 0:22:26.820
But before I leave you all I want to give a few housekeeping announcements

431
0:22:26.820 --> 0:22:30.820
First of all, out of tradition we have lightning talks at the end of the day

432
0:22:30.820 --> 0:22:35.820
We reserve the last half hour of the day to do five minute talks

433
0:22:35.820 --> 0:22:38.820
Those timings strict I will pull you off stage

434
0:22:38.820 --> 0:22:43.820
We have a CFP for those, it's open till 17.00 or 5 pm for you Americans

435
0:22:43.820 --> 0:22:47.820
And you can submit a tile till that hour at govers.left.light

436
0:22:47.820 --> 0:22:50.820
I'll write it on the right board later

437
0:22:50.820 --> 0:22:53.820
You just have to fill out three easy questions

438
0:22:53.820 --> 0:22:57.820
And if you fill those out I can welcome you on stage at the last half hour

439
0:22:57.820 --> 0:23:03.820
So you have time to submit a talk, quickly think of something submitted, we need you

440
0:23:03.820 --> 0:23:07.820
If you want to talk to us about social media

441
0:23:07.820 --> 0:23:10.820
You can do so by using hashtag goal line

442
0:23:10.820 --> 0:23:13.820
And hashtag false them 23 or false them 2023 or false them

443
0:23:13.820 --> 0:23:15.820
Nobody agrees on that hashtag

444
0:23:15.820 --> 0:23:18.820
But we stand to say with false them 23

445
0:23:18.820 --> 0:23:21.820
We're also on the Fediverse this year because Boo isn't

446
0:23:21.820 --> 0:23:27.820
You can follow us, mention us, like us at godevroom at false.social

447
0:23:27.820 --> 0:23:30.820
We have a social media responsible person this year

448
0:23:30.820 --> 0:23:36.820
If we will be happy to reply to all your angry toots

449
0:23:36.820 --> 0:23:39.820
So this is a state of goal I first of all want to thank

450
0:23:39.820 --> 0:23:42.820
The false them organization for welcoming us back in the U of B

451
0:23:42.820 --> 0:23:45.820
I want to thank all the volunteers who are helping

452
0:23:45.820 --> 0:23:48.820
Who make this room possible as well as the AV team from false them

453
0:23:48.820 --> 0:23:49.820
Who makes my camera work

454
0:23:49.820 --> 0:23:51.820
And everyone else working at false them

455
0:23:51.820 --> 0:23:55.820
And at last I want to thank all speakers for coming here today

456
0:23:55.820 --> 0:23:59.820
And of course you all for coming to the godev room again

457
0:23:59.820 --> 0:24:09.820
Thank you


WEBVTT

00:00.000 --> 00:15.000
Okay. This speaker claims that in 20 minutes Robert is going to build an event-driven application.

00:15.000 --> 00:21.000
Well, to be kind, I gave him 25 minutes. So start your countdown clocks.

00:21.000 --> 00:33.000
Hello. My name is Robert. And yes, I would like to show you today that we can build event-driven

00:33.000 --> 00:38.000
application in Go and it can be as simple as building simple HTTP server.

00:38.000 --> 00:49.000
And I actually decided to put the bar a bit higher. I think that I can do it within 15 minutes.

00:49.000 --> 00:53.000
All right. At the beginning, a couple of words about myself.

00:53.000 --> 00:58.000
So during the day I work in a company named SlashID. So I work there as a principal engineer

00:58.000 --> 01:04.000
and we are creating some identity and onboarding solution that is a bit more frictionless

01:04.000 --> 01:10.000
than a solution available now on the market. And during the night I'm blogging at 3.techblog

01:10.000 --> 01:16.000
where we are writing some blog posts that are covering how to create Go applications

01:16.000 --> 01:21.000
that are kind of business applications but are also maintainable in the long term.

01:21.000 --> 01:26.000
I know maybe some of you had a chance to read at least one article there. There are some people.

01:26.000 --> 01:31.000
Nice. Nice. I will have something special for you later.

01:31.000 --> 01:37.000
You can find me on Twitter, GitHub, Mastodon. There's also my email if you would like to write to me

01:37.000 --> 01:43.000
and ask about something. But what's the most important for today? I'm also a owner of Watermill Library.

01:43.000 --> 01:47.000
And how everything started with Watermill? Because I think that this is a pretty important context.

01:47.000 --> 01:54.000
So a couple of years ago I worked in a company where we are creating products that were not doing something

01:54.000 --> 02:02.000
super unusual. But the idea was that each user was able to add some content and he should be able to...

02:02.000 --> 02:07.000
We were storing it to MySQL. Plus we wanted to have some more advanced search.

02:07.000 --> 02:17.000
Plus have the ability to create a fit for other users with some machine learning models that were doing personalization.

02:17.000 --> 02:22.000
And usually if you are building such kind of system in a synchronous way, there's one problem.

02:22.000 --> 02:27.000
So this part may be sometimes slow because I know Elasticsearch is under high load

02:27.000 --> 02:32.000
or I know Magic Machine Learning model said that this day it will not work.

02:32.000 --> 02:37.000
Not nice, but it happens in water unfortunately. And...

02:37.000 --> 02:43.000
Or even worse for example, some part is not working. And it's not best user experience if it's working slowly

02:43.000 --> 02:49.000
or it's... So for example, you can imagine that you're adding some tweet and you're waiting for 10 seconds

02:49.000 --> 02:55.000
because Elasticsearch need to index something or Machine Learning model is working slowly.

02:55.000 --> 03:01.000
Or even you are not able to add this content. And it doesn't make sense because everything what is done

03:01.000 --> 03:05.000
on this other part of the diagram could be done asynchronously.

03:05.000 --> 03:09.000
Because it's not a problem if for example the search...

03:09.000 --> 03:15.000
Some content that was added cannot be searched for example for one minute after it's out that if something is done.

03:15.000 --> 03:19.000
It's much better than not allowing people to add anything.

03:19.000 --> 03:28.000
So by the book, the default solution for such problems is using some kind of PubSub and doing it asynchronously.

03:28.000 --> 03:33.000
So in this case we decided to SCAFCA because it's scalable, it's nice.

03:33.000 --> 03:39.000
But as usually with some concepts that you're reading in the books or listening on the conferences,

03:39.000 --> 03:43.000
it's not that simple in practice. And it was also the case here.

03:43.000 --> 03:50.000
The first problem was that the big part of the team wasn't actually working in asynchronous architectures earlier.

03:50.000 --> 03:56.000
That kind of makes sense because if you're starting to learn to code, you're not starting with building some even driven application.

03:56.000 --> 04:00.000
You're rather creating some REST API or website.

04:00.000 --> 04:10.000
So it makes sense that it was a big entry point for people that didn't use that.

04:10.000 --> 04:14.000
And it was not the only problem because even in the architecture,

04:14.000 --> 04:20.000
you have a lot of concepts that you need to know like customer groups, partitioning,

04:20.000 --> 04:26.000
etc. ordering, at least once delivery, acknowledge negative, acknowledge poison queue.

04:26.000 --> 04:29.000
And with all of that, you need to be sure that you didn't miss an event.

04:29.000 --> 04:35.000
And it's pretty important in some domains. In some cases, okay, it's fine. You're missing some event and okay.

04:35.000 --> 04:41.000
But for example, I used to work in the financial domain and losing one event may, for example, mean that somebody will be not paid out.

04:41.000 --> 04:47.000
It's not nice. In general, I believe that as engineers we should be responsible because, you know,

04:47.000 --> 04:52.000
sometimes the code that we are building is a pretty big impact to the real life.

04:52.000 --> 04:59.000
And after thinking for a while, I actually started to wonder, is it maybe something that I can do to making,

04:59.000 --> 05:02.000
to building some kind of applications and go simpler?

05:02.000 --> 05:09.000
And here we are. This is how water mill was created. So, so far we have more than 5000 stars in the GitHub.

05:09.000 --> 05:14.000
It was, we have more than 50 contributors across multiple water mill repositories.

05:14.000 --> 05:27.000
We are supporting 12 different PubSub implementations, like Kafka, like Google PubSub, like NITS, JetStream, RabbitMQ.

05:27.000 --> 05:34.000
But we have also some more strange implementations, like MySQL, for example, if you don't have the infrastructure for some real PubSub.

05:34.000 --> 05:38.000
Or for example, I would like to avoid face-comet problem.

05:38.000 --> 06:05.740
If you are doing some more fun projects, you can have just Go-Channel implementation or

06:05.740 --> 06:07.740
a

06:07.740 --> 06:09.740
project that makes your life simpler, like standard library for HTTP.

06:09.740 --> 06:15.740
So, for example, if you are implementing an HTTP server, you don't care about TLS, seven layers of network,

06:15.740 --> 06:19.740
clicking star, connection pooling, all this stuff. You are just implementing the logic in most cases.

06:19.740 --> 06:23.740
Sometimes, of course, you may have some specific scenarios that you care about that.

06:23.740 --> 06:28.740
But in most cases, you should just implement your handlers and don't care about everything around.

06:28.740 --> 06:39.740
And as some of you have shown, I wrote the article that I think that frameworks are probably not working best in Go.

06:39.740 --> 06:45.740
And watermills, for example, that's the case why watermills are actually a library.

06:45.740 --> 06:48.740
And it has pretty good two upsides.

06:48.740 --> 06:54.740
So the first one is that if you already have some system and you would like to migrate to watermill, it's kind of simple.

06:54.740 --> 07:01.740
Because watermill doesn't add anything super custom and it can be integrated with any existing system.

07:01.740 --> 07:02.740
And vice versa.

07:02.740 --> 07:11.740
If, for example, for some reason you decide that you don't like watermill, you can migrate from watermill to some different library.

07:11.740 --> 07:12.740
So this is the good thing.

07:12.740 --> 07:17.740
And I think what's pretty important, so how everything is done, because, okay, in theory, it may sound nice,

07:17.740 --> 07:24.740
it's helping, but how watermill is built.

07:24.740 --> 07:30.740
And in the heart of watermill, I would say that you can see in multiple places something that is named Unix philosophy.

07:30.740 --> 07:34.740
And it's kind of old philosophy because it's from 1978.

07:34.740 --> 07:40.740
And it's saying as to write programs that do one thing and do it well, write programs to work together,

07:40.740 --> 07:44.740
and write programs to handle, in our case, message.

07:44.740 --> 07:46.740
Because that is a universal interface.

07:46.740 --> 07:48.740
So that's my question now.

07:48.740 --> 07:53.740
Do you know who's that?

07:53.740 --> 07:54.740
So it's Ken Thompson.

07:54.740 --> 07:56.740
So he's author of this philosophy.

07:56.740 --> 08:01.740
And also interesting, he is one of the authors of Go programming language.

08:01.740 --> 08:06.740
Actually, it makes sense because if you look on the Go, for example, to IO reader or our writer,

08:06.740 --> 08:08.740
this is pretty nicely visible there.

08:08.740 --> 08:13.740
And I know that for a lot of people didn't know about Unix philosophy.

08:13.740 --> 08:20.740
And sometimes when I have too much time to think, I have some impression that sometimes we forgot about some good old ideas

08:20.740 --> 08:25.740
that we are trying to bring when they will, even if some problems were already solved.

08:25.740 --> 08:33.740
And it may be something like in the Dark Ages that it was some old nice ideas, but it was a bit forgotten.

08:33.740 --> 08:35.740
And okay, maybe I'm thinking too much.

08:35.740 --> 08:37.740
Let's go back to the watermill.

08:37.740 --> 08:42.740
So there are a couple important times in watermill.

08:42.740 --> 08:44.740
So the first one is message.

08:44.740 --> 08:48.740
So if we compare it to HTTP server, it's something similar to HTTP request.

08:48.740 --> 08:52.740
So in message with a UID that is pretty useful for debugging, we have metadata.

08:52.740 --> 08:56.740
So metadata is something like headers request plus payload.

08:56.740 --> 09:01.740
So this is the place where you are storing your event, for example.

09:01.740 --> 09:06.740
The two next important parts of watermill are publisher and subscriber.

09:06.740 --> 09:09.740
So publisher, you can publish those messages.

09:09.740 --> 09:17.740
And with subscriber, you're right, you can subscribe for those messages from the provided topic and receive that by the child.

09:17.740 --> 09:22.740
Usually I'm not using these interfaces because it's used somewhere internally in watermill.

09:22.740 --> 09:27.740
But for example, if we would like to add a new implementation of PubSub, this is something that we're implementing.

09:27.740 --> 09:30.740
And each PubSub implementation is implementing this interface.

09:30.740 --> 09:38.740
That's why I actually pretty like this interface, because it's making some constraint on the implementers that, okay, they need to implement that in that way.

09:38.740 --> 09:46.740
But it's also good because it's making each of them pretty compatible with themselves.

09:46.740 --> 09:50.740
And then last but not least, type is handler function.

09:50.740 --> 09:56.740
A handler function is something like HTTP handler that we are implementing in the HTTP server,

09:56.740 --> 10:02.740
with the small difference that instead of receiving HTTP request, you are receiving message, and optionally you can receive the message.

10:02.740 --> 10:11.740
So the idea is that you can react on some message, do something, and send me some other messages so you can do some kind of training later.

10:11.740 --> 10:13.740
I will show shortly an example.

10:13.740 --> 10:16.740
And everything is magically connected.

10:16.740 --> 10:21.740
Sorry, it may be even small, but you need to trust me that in the middle there is a router here.

10:21.740 --> 10:23.740
And this is connecting everything.

10:23.740 --> 10:26.740
So message is going from some publisher.

10:26.740 --> 10:27.740
It doesn't need to be watermill.

10:27.740 --> 10:32.740
It's going to the queue from by subscriber, the router.

10:32.740 --> 10:34.740
The router is passing it through middleware.

10:34.740 --> 10:37.740
Middleware is working in watermill like in HTTP.

10:37.740 --> 10:39.740
So another thing that is pretty similar.

10:39.740 --> 10:42.740
And it's processed by handlers.

10:42.740 --> 10:46.740
And later, if we want, we can publish some other messages.

10:46.740 --> 10:48.740
Not super complex.

10:48.740 --> 10:53.740
So do you know the first rule of live coding?

10:53.740 --> 10:54.740
Don't do live coding.

10:54.740 --> 10:56.740
So do live coding.

10:56.740 --> 10:59.740
Both can go wrong.

10:59.740 --> 11:00.740
All right.

11:00.740 --> 11:03.740
So I need to change sharing settings.

11:03.740 --> 11:04.740
So one second.

11:04.740 --> 11:27.740
It's probably not this one.

11:27.740 --> 11:39.740
This is why you are not doing live coding.

11:39.740 --> 11:40.740
Yes.

11:40.740 --> 11:41.740
Okay.

11:41.740 --> 11:42.740
So something does work.

11:42.740 --> 11:43.740
That's good.

11:43.740 --> 11:56.740
I don't know if you really want it.

11:56.740 --> 11:57.740
Perfect.

11:57.740 --> 11:59.740
This is something that I wanted to have.

11:59.740 --> 12:02.740
So I prepared a simple application here.

12:02.740 --> 12:04.740
And what does this application does?

12:04.740 --> 12:08.740
So if you are not from Brussels, so this may be something familiar to you.

12:08.740 --> 12:12.740
So it allows you to book a room in hotel.

12:12.740 --> 12:17.740
You can provide room ID, pass guest counts, and let's see if it works.

12:17.740 --> 12:18.740
Okay.

12:18.740 --> 12:20.740
It seems that it's not working sometimes.

12:20.740 --> 12:21.740
Sometimes it's working.

12:21.740 --> 12:24.740
Sometimes it's not working.

12:24.740 --> 12:27.740
Sometimes it's working slowly.

12:27.740 --> 12:29.740
Slowly, slowly, slowly.

12:29.740 --> 12:31.740
Sometimes it's even not working slowly.

12:31.740 --> 12:32.740
So it's even worse.

12:32.740 --> 12:36.740
So let's check the source code of that application.

12:36.740 --> 12:38.740
So, okay.

12:38.740 --> 12:40.740
So here we are running HTTP.

12:40.740 --> 12:42.740
So boring.

12:42.740 --> 12:43.740
Signals handling.

12:43.740 --> 12:44.740
Boring.

12:44.740 --> 12:46.740
But this is probably not boring.

12:46.740 --> 12:50.740
This is usually when the most interesting part of the application leaves.

12:50.740 --> 12:51.740
Let's check our handler.

12:51.740 --> 12:54.740
Okay.

12:54.740 --> 12:57.740
So we are on Marsha Link, stuff, to book room request.

12:57.740 --> 13:00.740
We have some advanced algorithm of calculation of room price.

13:00.740 --> 13:02.740
And we are taking payment.

13:02.740 --> 13:04.740
What can go wrong here?

13:04.740 --> 13:05.740
And, okay.

13:05.740 --> 13:09.740
As we can see, our payment provider is not super stable.

13:09.740 --> 13:10.740
But, okay.

13:10.740 --> 13:11.740
I don't know.

13:11.740 --> 13:14.740
Let's imagine that it's our boss colleague and we cannot change that politics.

13:14.740 --> 13:16.740
It happens.

13:16.740 --> 13:17.740
It's okay.

13:17.740 --> 13:18.740
What we can do.

13:18.740 --> 13:21.740
In the interior we can do like that.

13:21.740 --> 13:22.740
Go, fun.

13:22.740 --> 13:23.740
Okay.

13:23.740 --> 13:24.740
Done.

13:24.740 --> 13:25.740
It works now.

13:25.740 --> 13:26.740
But it's one problem with that.

13:26.740 --> 13:30.740
So if our server ruled I, there is a chance that we will not take payment.

13:30.740 --> 13:33.740
And it doesn't like that as the best idea.

13:33.740 --> 13:34.740
What would be my idea?

13:34.740 --> 13:41.740
Instead of doing it synchronously within this HTTP handler, I would like to emit some event,

13:41.740 --> 13:45.740
listen to that event, and take payment asynchronously.

13:45.740 --> 13:46.740
So let's do that.

13:46.740 --> 13:48.740
Let's do that with full terminal, of course.

13:48.740 --> 13:52.740
So at the beginning we need to get rid of that.

13:52.740 --> 13:58.740
And we need to have our publisher here.

13:58.740 --> 13:59.740
Message publisher.

13:59.740 --> 14:02.740
So this is the interface that you should remember.

14:02.740 --> 14:03.740
All right.

14:03.740 --> 14:08.740
And I also can prepare some code snippets to not lose time on some boring stuff like

14:08.740 --> 14:09.740
room booked.

14:09.740 --> 14:10.740
Boom.

14:10.740 --> 14:13.740
We have our event.

14:13.740 --> 14:18.740
So room booked.

14:18.740 --> 14:21.740
All right.

14:21.740 --> 14:27.740
Get count and price, room price.

14:27.740 --> 14:28.740
All right.

14:28.740 --> 14:33.460
Now we need to marshal that because we are sending bytes between our processes through

14:33.460 --> 14:34.460
our path map.

14:34.460 --> 14:35.460
So JSON.

14:35.460 --> 14:39.100
Because JSON is kind of common and it's pretty easy to debug.

14:39.100 --> 14:41.740
So let's marshal that.

14:41.740 --> 14:44.740
Playload error.

14:44.740 --> 14:50.300
Room booked.

14:50.300 --> 14:58.820
Don't do such error handling at home, please.

14:58.820 --> 15:01.100
And now let's publish them.

15:01.100 --> 15:05.100
So H, publisher, publish topic.

15:05.100 --> 15:07.620
Let's use bookings.

15:07.620 --> 15:09.180
And we need our message.

15:09.180 --> 15:13.460
So remember we need to have free ID.

15:13.460 --> 15:17.820
So it doesn't matter actually what format of ID it can be.

15:17.820 --> 15:23.580
I know it can be even empty for some presentations, but good luck with debugging.

15:23.580 --> 15:25.580
And room booked payloads.

15:25.580 --> 15:26.620
All right.

15:26.620 --> 15:28.860
And it returns error.

15:28.860 --> 15:35.540
So we need to handle that in not a nice way, but it's live coding, so it's fine.

15:35.540 --> 15:36.540
All right.

15:36.540 --> 15:37.540
So we have the first part.

15:37.540 --> 15:42.420
So for room booked event, we're publishing that to the topic bookings.

15:42.420 --> 15:43.420
And okay.

15:43.420 --> 15:46.900
So we just need to inject now the publisher.

15:46.900 --> 15:48.580
So check where it's created.

15:48.580 --> 15:49.580
Okay.

15:49.580 --> 15:50.580
We no longer need payments.

15:50.580 --> 15:53.500
I heard that Kafka is nice and scalable for this Kafka.

15:53.500 --> 15:54.980
I have also snippet for that.

15:54.980 --> 15:56.580
It's nothing magical here.

15:56.580 --> 16:00.900
It's just what this and the water mill documentation.

16:00.900 --> 16:02.180
And let's use this publisher.

16:02.180 --> 16:05.940
We don't need subscriber yet, but probably we'll need it later.

16:05.940 --> 16:07.900
All right.

16:07.900 --> 16:12.500
By the way, I'm running some nice Docker compose under the hood that is recompiling

16:12.500 --> 16:15.540
the project each time when I'm putting changes there.

16:15.540 --> 16:20.380
At the end of the presentation, I will give you materials with all the source code and

16:20.380 --> 16:25.220
with the description of how it's done that it's automatically reloading after each change.

16:25.220 --> 16:26.780
All right.

16:26.780 --> 16:27.780
So we have our publisher.

16:27.780 --> 16:29.260
We are publishing our event.

16:29.260 --> 16:31.540
So let's check if it works.

16:31.540 --> 16:32.540
Hopefully it will work.

16:32.540 --> 16:33.540
Okay.

16:33.540 --> 16:40.580
So as you can see that our API is pretty stable and let's check if our event is really published.

16:40.580 --> 16:42.660
So we'll use meal tool.

16:42.660 --> 16:47.780
So meal is part of water mill, as you can guess, and we'll consume from bookings from

16:47.780 --> 16:53.060
Kafka and meal is allowing you to consume messages from multiple pub supplies that are

16:53.060 --> 16:54.260
supported in water mill.

16:54.260 --> 17:00.340
I know that there is two for that in Kafka, but you know, it's not mine.

17:00.340 --> 17:02.580
And yeah, with meal you can use multiple boxes.

17:02.580 --> 17:03.580
Okay.

17:03.580 --> 17:05.220
As you can see, now we have event here.

17:05.220 --> 17:06.220
So it seems to work.

17:06.220 --> 17:07.220
Okay.

17:07.220 --> 17:08.220
So Dan, thank you.

17:08.220 --> 17:09.220
Not really.

17:09.220 --> 17:12.020
We are not taking payments.

17:12.020 --> 17:16.540
So probably if our company will go bankrupt pretty quickly.

17:16.540 --> 17:18.380
So we need to start to take payments.

17:18.380 --> 17:21.580
So for that we already have our subscriber.

17:21.580 --> 17:22.580
That's good.

17:22.580 --> 17:26.660
So let's uncomment that.

17:26.660 --> 17:29.940
Okay.

17:29.940 --> 17:45.380
We need to have water mill router, some router config, water mill logger, good error handling.

17:45.380 --> 17:47.100
And now we need to add a handler.

17:47.100 --> 17:49.340
So we'll just add handler.

17:49.340 --> 17:51.180
So we'll need to provide handler name.

17:51.180 --> 17:53.460
So it will be payments.

17:53.460 --> 17:59.020
It doesn't matter really what is the handler name, but again, pretty useful for debugging.

17:59.020 --> 18:03.060
So we're subscribing to the topic that we published this message.

18:03.060 --> 18:06.780
So this is bookings.

18:06.780 --> 18:08.660
Bookings.

18:08.660 --> 18:12.660
We need to use subscriber and we need to publish to topic.

18:12.660 --> 18:19.180
So we'll publish event when we succeed to take payment.

18:19.180 --> 18:27.060
So payments, publisher and handler function.

18:27.060 --> 18:30.100
So hopefully you remember handler function signature.

18:30.100 --> 18:33.220
So yeah, we are receiving message and we are returning message.

18:33.220 --> 18:37.620
But we'll do it in a bit more fancy way.

18:37.620 --> 18:42.300
Payments handler because we can inject some dependencies earlier.

18:42.300 --> 18:44.540
I need to fix that and that.

18:44.540 --> 18:45.540
All right.

18:45.540 --> 18:48.180
So we have our payments handler.

18:48.180 --> 18:53.420
So we'll receive message and we'll take payment and emit some event.

18:53.420 --> 19:01.860
So we need to have our payment provider and what?

19:01.860 --> 19:09.220
We need to have room booked.

19:09.220 --> 19:12.540
We need to un-martial that.

19:12.540 --> 19:20.100
So message payload to room booked.

19:20.100 --> 19:26.860
And compared to standard library HTTP handler, you can return errors from a water mu handler.

19:26.860 --> 19:30.300
So I don't need to panic.

19:30.300 --> 19:32.740
And all right.

19:32.740 --> 19:34.900
So we should have the payload that we published here.

19:34.900 --> 19:35.900
So that's good.

19:35.900 --> 19:42.860
So we can now use that to take payment for room booked price.

19:42.860 --> 19:44.300
Great.

19:44.300 --> 19:46.300
Great.

19:46.300 --> 19:48.860
And as I said, so I would like to also emit some events.

19:48.860 --> 19:49.860
It may be useful.

19:49.860 --> 19:55.420
I mean, even if we took the payment, we can have some BI or we can do something else.

19:55.420 --> 19:59.140
I mean, I don't know, we can send beer to this person after he booked room.

19:59.140 --> 20:01.140
Because why not?

20:01.140 --> 20:05.620
And okay.

20:05.620 --> 20:08.580
So we need the second event.

20:08.580 --> 20:10.580
Payment taken.

20:10.580 --> 20:13.580
Payment taken.

20:13.580 --> 20:25.380
Film fields, room booked, as well as price.

20:25.380 --> 20:33.780
And we need to marshal it again to JSON.

20:33.780 --> 20:34.780
Error.

20:34.780 --> 20:35.780
Cool.

20:35.780 --> 20:37.100
Okay.

20:37.100 --> 20:42.060
And the last thing that we need to do is return new message.

20:42.060 --> 20:45.060
Message as new.

20:45.060 --> 20:48.060
Message new.

20:48.060 --> 20:52.540
UID new string.

20:52.540 --> 20:54.860
And payment taken payload.

20:54.860 --> 20:58.860
I hope that I'm not writing too fast or too slow.

20:58.860 --> 21:00.140
All right.

21:00.140 --> 21:02.340
So in the error, there is a chance that it may work.

21:02.340 --> 21:03.340
So what we are doing.

21:03.340 --> 21:05.940
So we are receiving our room booked events.

21:05.940 --> 21:07.060
We are marshalling that.

21:07.060 --> 21:08.900
We are taking payment.

21:08.900 --> 21:12.780
When we succeed, we are emitting another event.

21:12.780 --> 21:14.380
Sounds like a ton.

21:14.380 --> 21:17.820
So the only thing that we need to do is to reuse that handler.

21:17.820 --> 21:22.180
So we have that one.

21:22.180 --> 21:24.220
And handler.

21:24.220 --> 21:25.220
Cool.

21:25.220 --> 21:28.100
Let's check if it compiles.

21:28.100 --> 21:29.540
It even compiles.

21:29.540 --> 21:32.260
So let's check if it's working.

21:32.260 --> 21:34.660
So let's book a couple rooms.

21:34.660 --> 21:39.940
And the idea is that by default, Watermute handler will try if the payment provider

21:39.940 --> 21:40.940
failed.

21:40.940 --> 21:51.220
So in there we should see some information that payment was taken.

21:51.220 --> 21:52.940
And we don't see that.

21:52.940 --> 21:58.980
I know why we don't see that because we didn't start at router.

21:58.980 --> 22:00.940
Run.

22:00.940 --> 22:03.820
Context.

22:03.820 --> 22:08.340
It's a bit naive implementation because it's not really graceful shutdown.

22:08.340 --> 22:15.300
But what in the documentation, as I remember, we have examples with real graceful shutdown.

22:15.300 --> 22:16.780
Okay.

22:16.780 --> 22:17.780
And let's see.

22:17.780 --> 22:18.780
Okay.

22:18.780 --> 22:20.500
So we have some random error.

22:20.500 --> 22:22.460
And you can see payment taken.

22:22.460 --> 22:23.460
Hooray.

22:23.460 --> 22:25.820
Our company is saved.

22:25.820 --> 22:28.300
All right.

22:28.300 --> 22:30.740
So this is working.

22:30.740 --> 22:33.220
But there's one problem with that.

22:33.220 --> 22:36.260
We figure out that, okay, Kafka is a bit hard to run.

22:36.260 --> 22:37.260
And we're on GCP.

22:37.260 --> 22:39.780
So maybe we can use Google Cloud PubSub.

22:39.780 --> 22:45.260
So I think that I can change Kafka implementation to Google Cloud PubSub in one minute.

22:45.260 --> 22:46.660
I'm realizing the bar today.

22:46.660 --> 22:47.660
Hi.

22:47.660 --> 22:49.500
But I think that I can do that.

22:49.500 --> 22:50.500
Let's see.

22:50.500 --> 22:51.500
Let's start the timer.

22:51.500 --> 22:52.500
One, two, three.

22:52.500 --> 22:53.500
Go.

22:53.500 --> 22:54.500
Whoa.

22:54.500 --> 23:05.660
Okay.

23:05.660 --> 23:15.900
Let's check.

23:15.900 --> 23:18.540
I think I did that.

23:18.540 --> 23:19.540
So let's book.

23:19.540 --> 23:20.540
And okay.

23:20.540 --> 23:21.540
Payment taken.

23:21.540 --> 23:22.820
We can double check.

23:22.820 --> 23:24.340
So let's use Neo.

23:24.340 --> 23:29.340
And let's consume some bookings.

23:29.340 --> 23:33.860
Yes, it works.

23:33.860 --> 23:35.980
All right.

23:35.980 --> 23:41.300
So it will be that from live coding.

23:41.300 --> 23:44.020
One last thing that I would like to show you.

23:44.020 --> 23:49.340
Because you may notice that, okay, it's a lot of boring JSON there, et cetera, et cetera.

23:49.340 --> 23:51.340
You may notice that I don't like boring stuff.

23:51.340 --> 23:56.820
Because probably there are more interesting things to do than marshalling to JSON.

23:56.820 --> 24:03.100
That's because of that we created a component that is named CQRS component.

24:03.100 --> 24:08.540
And the idea is that instead of doing this JSON marshall and all that stuff, you can

24:08.540 --> 24:12.620
provide configuration to which format you would like to marshall everything.

24:12.620 --> 24:14.020
And under the hood it would be done.

24:14.020 --> 24:16.060
So you can use, of course, JSON.

24:16.060 --> 24:20.620
You can use protobuf, Avro, even something custom if you really want one.

24:20.620 --> 24:25.620
The idea is that you're only implementing this interface, so providing the name of the

24:25.620 --> 24:26.620
handler.

24:26.620 --> 24:30.460
You are providing the event that you are expecting to receive.

24:30.460 --> 24:32.940
So in that case it will be room booked.

24:32.940 --> 24:35.580
And you may notice that it was pretty generic.

24:35.580 --> 24:37.620
So we have an interface here.

24:37.620 --> 24:40.540
But we are working on the newer version.

24:40.540 --> 24:43.180
And you are just receiving this event.

24:43.180 --> 24:45.700
Zero, un marshalling, or whatever.

24:45.700 --> 24:48.500
And the same is going when you are publishing an event.

24:48.500 --> 24:54.740
So you are just providing the struct and what you are under the hood is doing all the marshalling

24:54.740 --> 24:55.740
stuff.

24:55.740 --> 24:56.740
Okay.

24:56.740 --> 25:00.620
So I think that will be all for live coding.

25:00.620 --> 25:05.660
It looks that I was lucky this time that everything worked.

25:05.660 --> 25:09.180
And yeah, of course, it's still not production-grade implementation.

25:09.180 --> 25:14.060
I mean, it's even hard to create a production-grade implementation of HTTP server.

25:14.060 --> 25:18.320
So it's more kind of inspiration to look deeper and see that, okay, it's not that

25:18.320 --> 25:19.320
scary.

25:19.320 --> 25:23.940
But you need to take into consideration that there are things like Kafka and Google Cloud

25:23.940 --> 25:47.760
PubSub internals, Lucky

25:47.760 --> 25:49.640
documentation.

25:49.640 --> 25:52.260
So yeah, I heard that we have pretty good documentation.

25:52.260 --> 25:59.460
So at the end of the presentation, it will be in the link.

25:59.460 --> 26:00.460
What else?

26:00.460 --> 26:01.900
We have also a lot of examples in watermills.

26:01.900 --> 26:04.820
So I will encourage you to...

26:04.820 --> 26:06.740
It's black.

26:06.740 --> 26:07.740
Oh.

26:07.740 --> 26:08.740
Live coding.

26:08.740 --> 26:09.740
Okay.

26:09.740 --> 26:10.740
It's not live coding.

26:10.740 --> 26:13.140
So see, not only live coding is risky.

26:13.140 --> 26:17.300
So yeah, we have a lot of examples that probably you cannot see because it's on the block.

26:17.300 --> 26:20.940
You need to believe me that this is on the watermill repository.

26:20.940 --> 26:25.180
At this point, I wanted to say a big thank you to all watermill contributors because

26:25.180 --> 26:28.500
without you, it wouldn't be like it's now.

26:28.500 --> 26:35.100
And slow announcement that we actually released watermill 1.2 after having too many release

26:35.100 --> 26:36.100
candidates.

26:36.100 --> 26:39.780
So yeah, finally it's released and you are all invited to a library party.

26:39.780 --> 26:44.540
And we will say what are the new features and it will be on March 1st.

26:44.540 --> 26:47.460
On the last link, it will be also linked for that.

26:47.460 --> 26:48.620
And I think that will be all.

26:48.620 --> 26:49.620
So this is the...

26:49.620 --> 26:50.860
Again, it's not working.

26:50.860 --> 26:51.860
Oh.

26:51.860 --> 26:52.860
Yeah.

26:52.860 --> 26:54.420
So this is the link that I promised to give you.

26:54.420 --> 26:58.700
The bonus that I have, I have super fancy holographic sticker notes.

26:58.700 --> 27:02.140
I'm sure that you don't have sticker notes, laptop stickers.

27:02.140 --> 27:03.820
So I'm sure that you don't have holographic ones.

27:03.820 --> 27:06.700
So if you don't have, I have a lot of them.

27:06.700 --> 27:08.820
And yeah, I think that would be all.

27:08.820 --> 27:12.820
So thank you very much for your attention.

27:12.820 --> 27:14.820
Thank you.

WEBVTT

00:00.000 --> 00:20.440
Okay, our first actual speaker of the day is Frederico, who is a maintainer of metal

00:20.440 --> 00:21.720
LB, which I personally use.

00:21.720 --> 00:22.720
Thank you.

00:22.720 --> 00:26.600
Over at Red Hat, and he will be talking to us about cognitive loads.

00:26.600 --> 00:29.600
So a round of applause for Frederico.

00:29.600 --> 00:33.520
Yeah, it works.

00:33.520 --> 00:44.560
Yeah, so today I'm going to talk about cognitive load and how it affects our code base, why

00:44.560 --> 00:47.680
it matters, and how we can reduce it.

00:47.680 --> 00:52.560
And the reason why I put together this talk is because over the past, I would say, two

00:52.560 --> 00:57.920
years I started contributing first and then maintaining the metal bit project.

00:57.920 --> 00:59.760
Is anyone using it?

00:59.760 --> 01:05.600
Okay, so if it's gotten less stable, that's because of me.

01:05.600 --> 01:11.120
But by doing that, I started reviewing a good amount of PRs.

01:11.120 --> 01:18.840
Over this period, I kind of identified the recurring patterns that I was keeping asking

01:18.840 --> 01:20.760
and asking over.

01:20.760 --> 01:27.760
And those recurring patterns, those scattered suggestions that I tried to give in code reviews

01:27.760 --> 01:29.960
are what this talk is about.

01:29.960 --> 01:37.320
In terms of code, metal LB is a nicely sized project, not too big, not too small, and I

01:37.320 --> 01:42.240
think it's worth keeping alive.

01:42.240 --> 01:43.720
So some quick words about me.

01:43.720 --> 01:44.720
I'm Frederico.

01:44.720 --> 01:45.720
I work for Red Hat.

01:45.720 --> 01:51.120
I'm part of a networking team in charge of making the OpenShift platform suitable for

01:51.120 --> 01:52.840
telco workloads.

01:52.840 --> 02:00.000
That means that I touch and contribute a lot of these different network related projects,

02:00.000 --> 02:03.840
but that doesn't mean that I'm a network expert because I'm not.

02:03.840 --> 02:09.640
So don't come asking to fix your router, as my parents do, because I won't.

02:09.640 --> 02:11.880
All of these are my handles.

02:11.880 --> 02:17.680
Probably the master one needs to be adjusted, but you can find me there if you have questions

02:17.680 --> 02:23.520
to ask, if you need to provide feedback, whatever, I'll try to reply.

02:23.520 --> 02:29.720
So let's start with cognitive load, and this is the Wikipedia definition.

02:29.720 --> 02:34.600
Cognitive load is meant to be the extra energy, the amount of effort that we need to put in

02:34.600 --> 02:37.960
place to understand something.

02:37.960 --> 02:41.480
That applies perfectly to our code base.

02:41.480 --> 02:45.520
It might be because we are reading something that we wrote years ago where we were less

02:45.520 --> 02:49.520
experts, it might be because we are trying to review some code that somebody else is

02:49.520 --> 02:52.840
trying to push to our project.

02:52.840 --> 02:57.880
It might be because we got a bug report and we need to correlate the behavior that we

02:57.880 --> 03:06.840
get from the reality and what we understand from our code.

03:06.840 --> 03:11.600
The less energy we spend, we are able to spend the better because it might be evening and

03:11.600 --> 03:15.280
we might be tired and we might have some urgency about that.

03:15.280 --> 03:18.360
So that's why it's so important.

03:18.360 --> 03:25.720
And sometimes this complexity is proportional, this extra energy is proportional to the complexity

03:25.720 --> 03:26.880
of our code.

03:26.880 --> 03:34.200
Think about cryptography, think about ultra-optimized code that runs in embedded systems, but some

03:34.200 --> 03:35.800
other times it's not.

03:35.800 --> 03:40.400
Take this example and take the same run through one of the scatters.

03:40.400 --> 03:49.000
This takes a lot more energy to understand that this function prints a hell of a word.

03:49.000 --> 03:56.280
This is to say that we need to put an effort because that effort gets a reward in terms

03:56.280 --> 04:01.200
of speed of development and speed of understanding.

04:01.200 --> 04:09.120
So say that, a disclaimer, not everything is black and white.

04:09.120 --> 04:14.240
Of course there might be exceptions to the suggestions that I'm going to say.

04:14.240 --> 04:20.560
And this talk is more or less a collection of scattered rules that I collected from sources

04:20.560 --> 04:22.680
that I trust.

04:22.680 --> 04:28.920
In case you don't like them, blame the sources.

04:28.920 --> 04:36.120
In general, I think that the stuff that we write should take care of two sites.

04:36.120 --> 04:43.080
One is of course the implementation, and this implementation is pretty clear, I guess.

04:43.080 --> 04:46.920
This function is just doing the sum of two numbers, it's easy to understand.

04:46.920 --> 04:48.680
We can't argue with that.

04:48.680 --> 04:52.760
But what if we land on a code base that is doing something like this?

04:52.760 --> 05:02.720
And this takes more energy compared to a better version of it where the function is named

05:02.720 --> 05:05.760
nicely so we understand what it's doing.

05:05.760 --> 05:10.160
This is to say, and this is something that is going to be recurrent in this talk, that

05:10.160 --> 05:15.000
what matters is not only how we care about the implementation but also how we care about

05:15.000 --> 05:21.280
the users of our packages, of our functions, of our objects.

05:21.280 --> 05:26.120
So let's start with the first item, which is the line of sight.

05:26.120 --> 05:30.360
And this is something that I believe every good and automatic Go code base should try

05:30.360 --> 05:32.160
to foster.

05:32.160 --> 05:38.480
Finally we have this leftmost indented line where all the happy path leaves, and we have

05:38.480 --> 05:41.400
this indented one where we handle all the exceptions.

05:41.400 --> 05:47.680
And I expect every code base, which is well written where I want to, to respect this rule.

05:47.680 --> 05:51.560
And there are a few tips to do this.

05:51.560 --> 05:55.400
And I pressed the wrong...

05:55.400 --> 05:58.400
It wasn't me.

05:58.400 --> 05:59.400
Sorry.

05:59.400 --> 06:04.520
So these are just tips to do that, to implement this.

06:04.520 --> 06:08.520
And let's see why it matters, how it will make our code base better.

06:08.520 --> 06:13.400
This was more or less a real example that I got from a real PR.

06:13.400 --> 06:16.280
And it was really hard to follow all the special cases.

06:16.280 --> 06:23.880
And so I tried to give feedback and try to hammer it with suggestions in order to leverage

06:23.880 --> 06:30.600
earlier returns and flipping errors, removing else is...

06:30.600 --> 06:33.960
When I see an else, it's something that I try to get rid of.

06:33.960 --> 06:40.720
Like it's a red flag and I think three times before allowing it to go through.

06:40.720 --> 06:42.920
And then leverage more returns.

06:42.920 --> 06:44.160
And then...

06:44.160 --> 06:46.880
Yeah, leverage more returns.

06:46.880 --> 06:47.880
And then...

06:47.880 --> 06:48.880
Sorry?

06:48.880 --> 06:49.880
Yeah.

06:49.880 --> 06:54.960
So, we're wrapping into a function so we can leverage even more returns because now we

06:54.960 --> 06:57.280
have a smaller scope.

06:57.280 --> 07:03.560
So we got to something from something which looked like this to something that looked

07:03.560 --> 07:04.560
like this.

07:04.560 --> 07:08.400
And I dare you to say that this is easier to understand.

07:08.400 --> 07:13.720
And remember, like this is understandable, but this requires less energy.

07:13.720 --> 07:15.680
It's clear.

07:15.680 --> 07:20.120
It's better because of all the reasons that I already said before.

07:20.120 --> 07:25.320
There is this nice blog post from Matt Ryer about this very same topic.

07:25.320 --> 07:29.760
He more or less gives the same set of advices.

07:29.760 --> 07:32.160
Line of sight is not a nice exercise.

07:32.160 --> 07:38.960
It's a rule of thumb that allow us to untangle our code and to make it sleeker and easier

07:38.960 --> 07:41.680
to understand.

07:41.680 --> 07:45.000
Next I'm gonna talk about package names.

07:45.000 --> 07:50.720
This is another February of mine.

07:50.720 --> 07:53.480
We know that naming is hard.

07:53.480 --> 07:58.100
And that is particularly true in case of package names.

07:58.100 --> 08:04.440
We know that the name of a package should be small enough because that is consuming

08:04.440 --> 08:11.120
screen space, but should be also good enough to let us understand the purpose of the package.

08:11.120 --> 08:16.320
But in Go there is even more because when we use an object, the name of the package

08:16.320 --> 08:17.520
is part of the name.

08:17.520 --> 08:25.720
So that is an opportunity for us to put some value in that part that the reader can consume.

08:25.720 --> 08:28.520
And again, I'm starting with a bad example.

08:28.520 --> 08:35.600
We have this util package and we have this copy node function that is totally fictional.

08:35.600 --> 08:38.760
But that util part is a wasted opportunity.

08:38.760 --> 08:41.720
It's part of the name that doesn't add any value.

08:41.720 --> 08:50.000
So it's better to take and split our package, smaller scoped packages, and explain what

08:50.000 --> 08:51.000
to do.

08:51.000 --> 08:56.920
And in this case, from the calling side, you have node.copy which still explains the purpose

08:56.920 --> 09:00.520
of that function and it's not wasting space.

09:00.520 --> 09:07.100
And this was taken from the official Go blog and it says basically the same thing.

09:07.100 --> 09:13.920
There is no need to have these gigantic kitchen sink packages where we throw everything because

09:13.920 --> 09:15.560
in Go packages are free.

09:15.560 --> 09:22.680
So it's fine to split them in a better way.

09:22.680 --> 09:26.760
Next one is going to be about errors.

09:26.760 --> 09:31.240
And I see also this happening very frequently.

09:31.240 --> 09:32.980
In Go errors are types.

09:32.980 --> 09:37.480
And let's say that the developer wants to handle a special error.

09:37.480 --> 09:41.240
And the problem with this approach is that we are giving away the fact that errors are

09:41.240 --> 09:46.680
types and we are converting them to a string and we are treating them as a string.

09:46.680 --> 09:52.060
And since Go 1.13, we have like, and there are, like, that's legacy.

09:52.060 --> 09:55.920
So there are no excuses not to use this.

09:55.920 --> 09:57.080
There are two ways.

09:57.080 --> 10:03.240
One is to assert that the error that we are checking is an instance of a given object

10:03.240 --> 10:05.400
that we have somewhere.

10:05.400 --> 10:18.960
And there is another one which is about asserting that the error that we want to handle implements

10:18.960 --> 10:25.840
the error interface against a specific real type.

10:25.840 --> 10:26.960
But there is more.

10:26.960 --> 10:33.760
So in this way, you can have wraps of errors and you can assert that the error that you

10:33.760 --> 10:41.200
are checking not only equals the one that you are handling, but also any error inside

10:41.200 --> 10:42.200
of this wrap.

10:42.200 --> 10:43.720
And this is how you wrap them.

10:43.720 --> 10:52.280
You can either use errors.wrap so the return error from this function will contain the

10:52.280 --> 11:00.960
value returned by this, but will also return true if we assert against the braptid one.

11:00.960 --> 11:08.680
And also there is the way suggested by the standard library which is using the %w formatters.

11:08.680 --> 11:13.960
So both of them will return you a braptid error.

11:13.960 --> 11:20.880
So now let's talk about pure functions and why they are important.

11:20.880 --> 11:25.080
So a pure function has two properties.

11:25.080 --> 11:30.360
One is the fact that no matter how time when you call it, no matter how many times you

11:30.360 --> 11:37.960
call it, with a given set of input parameters, it will return always the same output.

11:37.960 --> 11:43.160
And the other property is the fact that it shouldn't rely on the state of your system.

11:43.160 --> 11:47.000
Shall it be sorry, it shouldn't modify the state of the system.

11:47.000 --> 11:53.120
Shall it be global variables or static variables or your input parameters or anything that

11:53.120 --> 11:55.200
is external to the function.

11:55.200 --> 11:57.880
And why it matters.

11:57.880 --> 12:02.920
This is an example where this function, the behavior of this function depends on the state

12:02.920 --> 12:07.600
on of an external system that is accessed through a client.

12:07.600 --> 12:10.680
And then you have the business logic after that.

12:10.680 --> 12:12.000
And why this is bad.

12:12.000 --> 12:18.320
I would say that mostly because this is hard to test or we can mock the external system,

12:18.320 --> 12:21.320
we can do tricks to replace the client.

12:21.320 --> 12:29.120
But moving away the state-vuleness part of the function away and having the business

12:29.120 --> 12:35.760
logic implemented, sorry, implemented as a pure function will allow us to be quicker

12:35.760 --> 12:39.040
in writing the implementation and to write our tests.

12:39.040 --> 12:42.400
And how about the second part?

12:42.400 --> 12:51.640
So we have a function that accepts a pointer and in some random cases it changes the object.

12:51.640 --> 12:53.080
And what's the problem with that?

12:53.080 --> 12:57.200
The problem with that is now on the reading side because you don't know that it's not

12:57.200 --> 12:59.760
clear enough that this function is changing the node.

12:59.760 --> 13:06.080
So you get your bug report and you look at the code and you know that somewhere the name

13:06.080 --> 13:09.200
of the node changed but you don't know why.

13:09.200 --> 13:17.240
And that's because it's not clear from outside that is what this function is doing and it's

13:17.240 --> 13:19.560
harder to reason about it.

13:19.560 --> 13:26.720
So a better way is to change the name of the function so it's clear.

13:26.720 --> 13:31.440
But I think that and this comes quite often.

13:31.440 --> 13:36.760
A better way to do that is to delegate the responsibility of changing the object outside

13:36.760 --> 13:38.960
and changing the function to be a pure function.

13:38.960 --> 13:46.320
Again, this version is easier to understand, it's easier to reason about, it's clear when

13:46.320 --> 13:49.360
you will have something to change.

13:49.360 --> 13:53.680
And this can also say about environment variables.

13:53.680 --> 14:00.840
In the world of pods and containers, adding a new knob as an environment variable is so

14:00.840 --> 14:01.840
convenient.

14:01.840 --> 14:05.000
You just add an environment variable, you consume it from the function where you need

14:05.000 --> 14:07.400
it and you're done.

14:07.400 --> 14:12.600
But the problem with that is that you then don't have control anymore on all the knobs,

14:12.600 --> 14:19.520
on all the parameters that your program is consuming because they are all scattered across

14:19.520 --> 14:21.240
the code base.

14:21.240 --> 14:29.280
And that is bad because you can't foresee what a given function is doing by reading

14:29.280 --> 14:33.080
its calling site.

14:33.080 --> 14:36.800
So again, this is something that should be avoided.

14:36.800 --> 14:44.520
Environment variables should be read in your main functions and then be propagated through

14:44.520 --> 14:49.480
all the stacks.

14:49.480 --> 14:56.520
So another topic that I care about is function arguments.

14:56.520 --> 15:03.080
And the first one is booleans.

15:03.080 --> 15:10.120
So you start with something like this where you have a simple setup function that is easy

15:10.120 --> 15:18.400
enough and then with all the good intentions of the world, thanks.

15:18.400 --> 15:23.800
With all the good intentions of the world, the developer starts adding a parameter.

15:23.800 --> 15:29.320
But then we need another one and then we need another one.

15:29.320 --> 15:32.160
And how does it look on the calling site?

15:32.160 --> 15:33.160
Something like this.

15:33.160 --> 15:38.840
And you think, hmm, true, false, true, true, false, what the hell?

15:38.840 --> 15:40.360
And then you need to stop.

15:40.360 --> 15:42.560
You need to enter into this function.

15:42.560 --> 15:48.080
You need to understand where was the enable webbook parameter?

15:48.080 --> 15:50.120
It was the first one and then you get back here.

15:50.120 --> 15:58.480
And this works but adds friction and getting a better version of it is so cheap that we

15:58.480 --> 16:03.360
should do that because we are doing a favor to our future selves.

16:03.360 --> 16:08.480
We are doing a favor to the maintainer and it's going to be easier to understand.

16:08.480 --> 16:19.960
Another option might be to pass a structure to the function that also works, but not this.

16:19.960 --> 16:25.960
Now I want to talk about function overloading or the fact that Go doesn't have.

16:25.960 --> 16:28.960
So it's more or less the same as the other one.

16:28.960 --> 16:37.360
Go doesn't have function overloading so it's easy to have this full variety of the same

16:37.360 --> 16:40.720
function where we need to slightly change the behavior.

16:40.720 --> 16:45.000
So you start with creating a service, then you need one with a backend, then you need

16:45.000 --> 16:50.520
one with an IP and then you need one with a backend and with an IP.

16:50.520 --> 16:55.520
And it's clear that can get easily out of hand.

16:55.520 --> 17:04.040
So an approach that I really like is using a variadic argument with some modifiers that

17:04.040 --> 17:09.800
accept the parameter and do what they have to do.

17:09.800 --> 17:13.160
And this is how it looks from the colon site.

17:13.160 --> 17:19.000
And it's clear, it's easy to understand.

17:19.000 --> 17:23.000
Your future self will thank you for this.

17:23.000 --> 17:27.800
And there is also another version where you can have these generator functions.

17:27.800 --> 17:35.200
I think it's on the borderline of being too magic for me, but again, this one is easy

17:35.200 --> 17:39.320
to read.

17:39.320 --> 17:47.120
So next one, I see this happening a lot in the world of controllers where you have one

17:47.120 --> 17:52.660
file that basically implements all the methods related to a controller.

17:52.660 --> 17:57.280
So you have this file and you need to add a utility function and then all the other

17:57.280 --> 17:59.680
functions are methods and what do you do?

17:59.680 --> 18:01.800
You add a new method.

18:01.800 --> 18:04.260
Even if it doesn't have to be a method.

18:04.260 --> 18:08.520
So you look at something like this and you think, hmm, why is this a method?

18:08.520 --> 18:12.040
Is there something wrong with that?

18:12.040 --> 18:15.440
And this again is adding friction that could be avoided.

18:15.440 --> 18:19.400
So if a function is a function, just make it a function and not a method.

18:19.400 --> 18:22.280
Because it's also testing is easier.

18:22.280 --> 18:27.880
You don't have to have the instance that you are not using for anything just in order to

18:27.880 --> 18:30.400
test this function.

18:30.400 --> 18:36.760
And then a word about pointers.

18:36.760 --> 18:41.600
You all have pointers like not all other languages.

18:41.600 --> 18:47.240
So people might find them hard to reason about.

18:47.240 --> 18:52.800
And when I see two functions like this, my first thing I thought is like this one is

18:52.800 --> 18:53.920
not changing the object.

18:53.920 --> 18:55.640
The second one is doing that.

18:55.640 --> 18:58.800
So this is the rule of thumb that I'm trying to apply.

18:58.800 --> 19:02.720
If a function is not changing the object, then pass the object by value.

19:02.720 --> 19:06.120
Otherwise pass the pointer.

19:06.120 --> 19:07.840
But there are also exceptions.

19:07.840 --> 19:10.960
There are some kind of objects that can be passed by value.

19:10.960 --> 19:15.240
Or they can, but they will give you a bad afternoon.

19:15.240 --> 19:21.960
But so mutexes, file descriptors, we need to pass them by reference because that's the

19:21.960 --> 19:22.960
way it works.

19:22.960 --> 19:25.260
So we have linters that help us in that.

19:25.260 --> 19:32.360
And we have this rule of thumb that says if you look at the point, the object, if all

19:32.360 --> 19:37.800
the methods associated are associated with a pointer, then use a pointer.

19:37.800 --> 19:40.000
One might argue how about performances.

19:40.000 --> 19:43.800
We are passing the whole object instead of passing just the reference.

19:43.800 --> 19:47.320
Yeah, passing the reference is cheaper.

19:47.320 --> 19:49.520
But this is not C. This is go.

19:49.520 --> 19:51.240
And that's not always clear.

19:51.240 --> 19:54.480
So what we should care about is the readability.

19:54.480 --> 20:00.640
And we have a lot of toolery that will help us to understand if that can be optimized

20:00.640 --> 20:04.760
if it's in the hot path.

20:04.760 --> 20:15.480
And then we need to sacrifice a bit the readability of our program in order to have better performances.

20:15.480 --> 20:21.040
So now I'm going to talk about something that was advocated in clean code where it says

20:21.040 --> 20:26.120
that our code base should read like a newspaper.

20:26.120 --> 20:31.120
Which means that you open a file, you should have all the high level concepts on the top

20:31.120 --> 20:36.040
of the file and then start to find all the neat details of the implementation in the

20:36.040 --> 20:37.800
bottom of the file.

20:37.800 --> 20:41.560
And this applies pretty well to Go.

20:41.560 --> 20:47.680
So what I expect from a well written Go file is to have all the public methods, all the

20:47.680 --> 20:52.400
public objects in the top of the file because when I open the file, I see what this package

20:52.400 --> 20:55.640
has to offer to the external world.

20:55.640 --> 21:02.320
And so those are our high level concepts by definition.

21:02.320 --> 21:08.320
And another thing that I think is sometimes underestimated is the fact that we can have

21:08.320 --> 21:10.600
our packages split into files.

21:10.600 --> 21:19.000
So again, in order to have a better availability of our code base, we can split it into files,

21:19.000 --> 21:28.080
have a main file related to the package that is named after the package, and then have

21:28.080 --> 21:34.960
these smaller entities where we put the different logics.

21:34.960 --> 21:39.360
And this is basically what I'm trying to say here.

21:39.360 --> 21:47.000
So try to have the public fields on the top, try to remove or to move the util functions

21:47.000 --> 21:51.080
in the bottom, split the package into files because again, it's free.

21:51.080 --> 21:57.920
It won't cost any energy to you or to the executable.

21:57.920 --> 22:03.920
And have a main package file that is named after the package.

22:03.920 --> 22:09.240
Next item is about asynchronous functions.

22:09.240 --> 22:14.280
And I saw this many times.

22:14.280 --> 22:17.440
This is one of the nice things about Go, right?

22:17.440 --> 22:21.880
It's so easy, so convenient to implement concurrent code.

22:21.880 --> 22:28.440
You can just implement Go routines, you can pass channels and have a fan in, fan out.

22:28.440 --> 22:34.960
But the problem with that is that something like this has some flaws.

22:34.960 --> 22:41.480
And I think that is way better to, again, take the business logic, move it to a synchronous

22:41.480 --> 22:46.600
function that is easier to test without all the infrastructure that you need to put in

22:46.600 --> 22:54.680
place with channels, with weight groups in order to have your, to reverse the asynchronousness

22:54.680 --> 22:57.160
of your function just in order to test it.

22:57.160 --> 23:02.640
So if you can move the business logic into a synchronous function and let the calling

23:02.640 --> 23:06.640
site handle the life cycle of the Go routine.

23:06.640 --> 23:14.200
So again, that part has to be delegated on the client code and that will make our function

23:14.200 --> 23:19.400
easier to test and our code base easier to reason about.

23:19.400 --> 23:24.120
And again, I didn't invent this as everything else.

23:24.120 --> 23:28.320
This is from the CoderView Go Wiki.

23:28.320 --> 23:29.920
And it's basically saying the same thing.

23:29.920 --> 23:39.200
Like try to use synchronous functions as much as you can.

23:39.200 --> 23:42.400
Next item is about functions that lie.

23:42.400 --> 23:44.120
And what I mean by that.

23:44.120 --> 23:48.760
You have something that is what would you expect this function to do?

23:48.760 --> 23:51.200
Clear the node.

23:51.200 --> 23:52.200
Exactly.

23:52.200 --> 23:54.080
That's what I would expect.

23:54.080 --> 24:00.400
But the developer found a very edgy corner case where if the name of the node is do not

24:00.400 --> 24:03.040
clean, then do not clean.

24:03.040 --> 24:08.160
And he was doing that with the all good faith of the world.

24:08.160 --> 24:10.640
He's trying to solve a problem here.

24:10.640 --> 24:15.360
But the problem is that again, this is going to give us a bad afternoon because we'll see

24:15.360 --> 24:23.000
that the node is not being cleared and we'll have to put a lot of print f's in our code

24:23.000 --> 24:28.920
or to do a lot of debugging in order to understand why is this happening.

24:28.920 --> 24:34.040
So again, this is done with good intentions.

24:34.040 --> 24:36.800
But the result is not so good.

24:36.800 --> 24:46.440
So again, as I said multiple times today, we should defer this responsibility to the

24:46.440 --> 24:54.320
calling site because that will result in a code base that requires less energy and less

24:54.320 --> 24:56.280
effort to understand.

24:56.280 --> 25:00.520
What if we have this function called 100 times in our code base?

25:00.520 --> 25:01.520
I don't know.

25:01.520 --> 25:09.040
Just call it clear the node but not the do not clean one or have one filter function,

25:09.040 --> 25:14.040
whatever but not lie to the reader.

25:14.040 --> 25:23.960
So wrapping up, there is no much to wrap up.

25:23.960 --> 25:26.920
It was just a list of no related items.

25:26.920 --> 25:35.200
Maybe the only takeaway that is global is to say that we should be smart and let our

25:35.200 --> 25:43.240
readers the calling site over the code base do a bit more because that will give us a

25:43.240 --> 25:46.400
better day in the future.

25:46.400 --> 25:54.720
I'm a strong believer of the Pareto's principle most often when it's on the bad side of it.

25:54.720 --> 25:59.360
But in this case, I think that by applying this set of rules that will take very less

25:59.360 --> 26:08.320
to implement, those will improve the quality of the code base a lot.

26:08.320 --> 26:16.200
And then I want to finish with this quote from Rob Pike, simplicity is complicated but

26:16.200 --> 26:19.800
the clarity is worth the fight.

26:19.800 --> 26:25.440
And with that, I'm finished.

26:25.440 --> 26:28.520
Sorry?

26:28.520 --> 26:38.880
Are there any questions?

26:38.880 --> 26:44.880
I'll try to come with a microphone.

26:44.880 --> 26:45.880
Thanks for the talk.

26:45.880 --> 26:54.720
I was wondering, do you see any room for automating some of these rules and wisdom that you share

26:54.720 --> 26:55.720
today?

26:55.720 --> 27:00.920
I don't know.

27:00.920 --> 27:02.480
I should think about that.

27:02.480 --> 27:08.720
Probably some of them, yes, like avoiding having functions or raising a flag if a function

27:08.720 --> 27:12.040
is accepting a channel, for example.

27:12.040 --> 27:14.440
But there are exceptions to that.

27:14.440 --> 27:16.760
So that shouldn't be blocking.

27:16.760 --> 27:22.600
There are some others like the function that is lying to the user is something that depends

27:22.600 --> 27:30.560
on the implementation or, for example, having a function that accepts five bullions should

27:30.560 --> 27:32.440
be flagged.

27:32.440 --> 27:42.360
I see that I think that it depends on the case but some of them might be automated.

27:42.360 --> 27:44.320
Any more questions?

27:44.320 --> 27:45.480
No?

27:45.480 --> 27:50.880
Thank you very much.

27:50.880 --> 27:58.840
How was it?

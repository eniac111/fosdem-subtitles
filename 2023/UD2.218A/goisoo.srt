1
0:00:00.000 --> 0:00:02.000
Thank you.

2
0:00:05.140 --> 0:00:07.140
We have to stay on our schedule.

3
0:00:09.440 --> 0:00:12.280
So our next speaker, Rona, she stood here three years ago but

4
0:00:12.280 --> 0:00:16.280
before the pandemic was a thing and she gave us a challenge to

5
0:00:16.280 --> 0:00:19.280
solve the Go diversity problem within a year. Rona, is it

6
0:00:19.280 --> 0:00:21.280
solved?

7
0:00:22.380 --> 0:00:24.380
Well done. Well done.

8
0:00:24.380 --> 0:00:29.380
Well done. Well done.

9
0:00:29.380 --> 0:00:31.380
No? No?

10
0:00:33.380 --> 0:00:35.380
So actually, Martia stole this from me because three years ago

11
0:00:35.380 --> 0:00:38.380
I did challenge this forum to solve the problem of lack of

12
0:00:38.380 --> 0:00:42.380
diversity within the Go community within a year.

13
0:00:42.380 --> 0:00:48.380
And then the pandemic hit and it seems that these issues kind of

14
0:00:48.380 --> 0:00:52.380
took a long time to solve the problem.

15
0:00:52.380 --> 0:00:56.380
And so the issues kind of took a side, were pushed aside

16
0:00:56.380 --> 0:01:00.380
unfortunately. But we can start again.

17
0:01:00.380 --> 0:01:04.380
So I'm here to talk to you today about a lighter topic, is Go

18
0:01:04.380 --> 0:01:10.380
object oriented? Now, it appears to be something that people have

19
0:01:10.380 --> 0:01:14.380
many opinions about. And I hope that you do too because that

20
0:01:14.380 --> 0:01:20.380
will be fun. So I am Rona. I'm a Google developer expert for

21
0:01:20.380 --> 0:01:25.380
Go. I create workshops. That's kind of like my thing when I

22
0:01:25.380 --> 0:01:29.380
want to teach something. I make a workshop about it. And in

23
0:01:29.380 --> 0:01:35.380
2022 I kind of realized that after a few years of seeing

24
0:01:35.380 --> 0:01:40.380
developers struggling with different paradigms around the

25
0:01:40.380 --> 0:01:44.380
Go typing system, specifically with interfaces, I figured why

26
0:01:44.380 --> 0:01:48.380
not create a workshop about it and I submitted it to Go for

27
0:01:48.380 --> 0:01:55.380
Europe. It was the name of the Go workshop was object oriented

28
0:01:55.380 --> 0:02:03.380
design with Go. And then the comments started coming.

29
0:02:03.380 --> 0:02:07.380
So something between object oriented is dead. Please let

30
0:02:07.380 --> 0:02:11.380
it R and P.

31
0:02:11.380 --> 0:02:18.380
I'm going to give a comment to why. Somebody posted a comment

32
0:02:18.380 --> 0:02:23.380
on my tweet and then blocked me. Because apparently that's how

33
0:02:23.380 --> 0:02:29.380
the Internet works. So, yeah, and somebody blamed me for

34
0:02:29.380 --> 0:02:34.380
introducing spring into Go. Now, I have been a developer for

35
0:02:34.380 --> 0:02:38.380
20 years, but I have not done any spring in my life. And that

36
0:02:38.380 --> 0:02:46.380
is why I'm here. I was fairly surprised. So I'm not here to

37
0:02:46.380 --> 0:02:50.380
promote my workshop, even though I'm giving it again this year

38
0:02:50.380 --> 0:02:56.380
in Berlin. And, you know, in June, because that would be

39
0:02:56.380 --> 0:03:04.380
bad. So what is object oriented programming? So it's the idea

40
0:03:04.380 --> 0:03:08.380
of building software into things or objects or concerns or

41
0:03:08.380 --> 0:03:14.380
instances and adding some functionality to them, usually

42
0:03:14.380 --> 0:03:19.380
called messages or methods or member functions so that we can

43
0:03:19.380 --> 0:03:23.380
work with software in a more intuitive way, the way that we

44
0:03:23.380 --> 0:03:28.380
understand how we interact with the real world. That's it.

45
0:03:28.380 --> 0:03:33.380
Now, where there are things, it can get incredibly messy.

46
0:03:33.380 --> 0:03:39.380
That's the business model behind Marie Kondo. Yeah. I felt

47
0:03:39.380 --> 0:03:44.380
this sigh. You don't have 14 items maximum in your house.

48
0:03:44.380 --> 0:03:51.380
You're not alone. And we have this lovely quote from Joe

49
0:03:51.380 --> 0:03:55.380
Armstrong. The problem with object oriented languages is

50
0:03:55.380 --> 0:03:58.380
that they've got all of this implicit environment that they

51
0:03:58.380 --> 0:04:02.380
carry with them. You wanted a banana, but what you got was a

52
0:04:02.380 --> 0:04:07.380
gorilla holding a banana and the entire jungle. And that

53
0:04:07.380 --> 0:04:13.380
feels like it. It does. It really does.

54
0:04:13.380 --> 0:04:17.380
So go really went a different way. It tried to sort of stay

55
0:04:17.380 --> 0:04:23.380
away from this. But we'll see what remains and what actually

56
0:04:23.380 --> 0:04:27.380
remained from this and what actually we were able to let go

57
0:04:27.380 --> 0:04:31.380
of in a second. So we're going to hold a trial where we're

58
0:04:31.380 --> 0:04:34.380
going to check you're going to be the jury. You're going to

59
0:04:34.380 --> 0:04:37.380
decide if go is object oriented. I'm going to try and convince

60
0:04:37.380 --> 0:04:40.380
you. I'm going to show you the arguments for both sides. And

61
0:04:40.380 --> 0:04:43.380
I'm going to have to convince you that it is object oriented

62
0:04:43.380 --> 0:04:50.380
or I am responsible for defamation. I am taking the

63
0:04:50.380 --> 0:04:55.380
ghost good name and dragging it through the mud, tarnishing

64
0:04:55.380 --> 0:05:01.380
it, hurting its reputation. You're the jury. You will decide.

65
0:05:01.380 --> 0:05:07.380
So disclaimer, this is not a real trial. But and I'm the

66
0:05:07.380 --> 0:05:11.380
judge and the rules are what I say they are, which is to say

67
0:05:11.380 --> 0:05:16.380
that these proceedings are going to be ridiculous. But yeah,

68
0:05:16.380 --> 0:05:20.380
we're just going to have to do it. So what have we come to

69
0:05:20.380 --> 0:05:24.380
expect from an object oriented language? Most of you know this

70
0:05:24.380 --> 0:05:28.380
by heart, really. We have classes because classes and only

71
0:05:28.380 --> 0:05:33.380
classes can have methods classes can also have this constructors

72
0:05:33.380 --> 0:05:42.380
constructors are created allowed to create objects safely.

73
0:05:42.380 --> 0:05:59.380
And we also expect inheritance. Objection. So in go. We don't

74
0:05:59.380 --> 0:06:04.380
have classes. And therefore we don't have constructors, but we

75
0:06:04.380 --> 0:06:09.380
pretend to have them. So here's where we pretend to have

76
0:06:09.380 --> 0:06:13.380
something. Now this one is quite fun. So this is a package that

77
0:06:13.380 --> 0:06:19.380
I created. And you can see here that inside type robot, the

78
0:06:19.380 --> 0:06:23.380
go doc aggregated nicely a function called new. Now you

79
0:06:23.380 --> 0:06:25.380
can see that it doesn't actually have a receiver. It's not a

80
0:06:25.380 --> 0:06:29.380
method. It's not anything. And it's just the package level

81
0:06:29.380 --> 0:06:33.380
function that the go doc understood to be a constructor

82
0:06:33.380 --> 0:06:37.380
and then added it where it should be nicely nested inside a

83
0:06:37.380 --> 0:06:41.380
robot type. Which is really interesting because what that

84
0:06:41.380 --> 0:06:44.380
means was that the go team essentially decided at some

85
0:06:44.380 --> 0:06:49.380
point that safe construction of objects is a tooling problem,

86
0:06:49.380 --> 0:06:57.380
not a language problem. It's interesting. We work

87
0:06:57.380 --> 0:07:02.380
constructors. Okay. All types can have methods. So you've

88
0:07:02.380 --> 0:07:06.380
probably seen this or code similar to this some point in

89
0:07:06.380 --> 0:07:10.380
your life. So I created a new type my thing out of an

90
0:07:10.380 --> 0:07:16.380
integer. So we have a new type with an underlying type int. I

91
0:07:16.380 --> 0:07:22.380
added a method foo to it using the receiver. Remember that we

92
0:07:22.380 --> 0:07:28.380
said earlier that we have objects interacting through

93
0:07:28.380 --> 0:07:33.380
messages. It's called a receiver because it receives.

94
0:07:33.380 --> 0:07:41.380
It's that easy. Yeah. Come on. All together. Nobody agrees.

95
0:07:41.380 --> 0:07:51.380
What's going on? Yeah. Okay. Pathetic. But yeah. I said I

96
0:07:51.380 --> 0:07:58.380
was going to judge. All right. So and then we have so now

97
0:07:58.380 --> 0:08:02.380
we created a variable T of type my thing. We assigned it

98
0:08:02.380 --> 0:08:08.380
one and then we're able to call a method on T foo. Voila.

99
0:08:08.380 --> 0:08:12.380
We have a primitive type and it has a method because in go

100
0:08:12.380 --> 0:08:25.380
all types are created equal. Thank you.

101
0:08:25.380 --> 0:08:32.380
Only real life. Okay. So let's move on to inheritance. So we

102
0:08:32.380 --> 0:08:37.380
get in go we get composition. We don't get inheritance.

103
0:08:37.380 --> 0:08:41.380
That's not something that's available to us. So this little

104
0:08:41.380 --> 0:08:45.380
snippet here is supposed to show the difference. I created

105
0:08:45.380 --> 0:08:50.380
a type a it's an empty struct. I added a method foo to it.

106
0:08:50.380 --> 0:08:56.380
It has a method bar foo calls bar. That's nice. Returns bar.

107
0:08:56.380 --> 0:09:01.380
We have type B that embeds a it can embed as many as many as

108
0:09:01.380 --> 0:09:06.380
many as many as many types as it wants. It embeds a that means

109
0:09:06.380 --> 0:09:11.380
that now it has foo and bar and then it decided to override

110
0:09:11.380 --> 0:09:20.380
bar. Fine. Variable B of B lowercase B of type uppercase B

111
0:09:20.380 --> 0:09:25.380
to be confusing not to be confused. Okay. Get it.

112
0:09:25.380 --> 0:09:30.380
And we can call B dot bar and we expect B dot bar to be

113
0:09:30.380 --> 0:09:37.380
invoked directly and then we call B dot foo. Now with

114
0:09:37.380 --> 0:09:46.380
inheritance we would expect B dot foo which returns a dot bar

115
0:09:46.380 --> 0:09:53.380
which is overridden to be called. So we would expect to get B

116
0:09:53.380 --> 0:09:57.380
in both cases. But that's not what's going to happen because

117
0:09:57.380 --> 0:10:02.380
we do not have this type of polymorphism. That is true.

118
0:10:02.380 --> 0:10:07.380
Who was it who said it earlier? Raise your hands.

119
0:10:07.380 --> 0:10:13.380
Round of applause to the gentleman.

120
0:10:13.380 --> 0:10:18.380
Okay. Moving on. So let's talk about single and multiple inheritance

121
0:10:18.380 --> 0:10:22.380
because this really bugs me. So I started my career with seven years

122
0:10:22.380 --> 0:10:28.380
of C++ and yes it sounds biblical because it is.

123
0:10:28.380 --> 0:10:34.380
Thank you. Yeah. So I started with seven years of C++.

124
0:10:34.380 --> 0:10:41.380
C++ actually has a really nifty feature you can inherit a lot.

125
0:10:41.380 --> 0:10:46.380
You have multiple inheritance. It's not limited. Java, Ruby,

126
0:10:46.380 --> 0:10:50.380
they allow you to inherit exactly once. That to me does not

127
0:10:50.380 --> 0:10:53.380
feel like a feature. That feels like a limitation. I don't

128
0:10:53.380 --> 0:10:57.380
understand it. Let's say that you have a truck and you want to

129
0:10:57.380 --> 0:11:01.380
describe a container of goods and a vehicle. You cannot

130
0:11:01.380 --> 0:11:06.380
inherit from both. What do you do? Well, in Go we have composition

131
0:11:06.380 --> 0:11:11.380
but in many, many languages that offer inheritance you only get

132
0:11:11.380 --> 0:11:15.380
single inheritance. Now I will say this. If you feel, and I know

133
0:11:15.380 --> 0:11:19.380
that a lot of people do, if you feel that inheritance is that

134
0:11:19.380 --> 0:11:24.380
important, it just doesn't make sense that it will be so limited

135
0:11:24.380 --> 0:11:28.380
a feature that you will not be able to use properly or like

136
0:11:28.380 --> 0:11:31.380
or fully. And I do believe also that that is the cause of all

137
0:11:31.380 --> 0:11:37.380
the messy code that we see because my, the classes that I

138
0:11:37.380 --> 0:11:41.380
used to define were very small, were one function, two functions.

139
0:11:41.380 --> 0:11:44.380
I didn't have to make odd choices of what is going to go

140
0:11:44.380 --> 0:11:49.380
into a class or what wouldn't. So it was really easy to be

141
0:11:49.380 --> 0:11:54.380
very expressive. So that's what I personally, my personal

142
0:11:54.380 --> 0:11:58.380
opinion, is about single and multiple inheritance. I don't

143
0:11:58.380 --> 0:12:02.380
feel in most common languages since it's usually single

144
0:12:02.380 --> 0:12:08.380
inheritance, I don't feel that it makes it a, it makes it

145
0:12:08.380 --> 0:12:11.380
something that is going to determine whether a language is

146
0:12:11.380 --> 0:12:16.380
or isn't object oriented because if it is, then as far as I'm

147
0:12:16.380 --> 0:12:19.380
concerned, single, any language that has single inheritance

148
0:12:19.380 --> 0:12:26.380
cannot be object oriented. So, go is not object oriented, the

149
0:12:26.380 --> 0:12:29.380
usual argument summary, and I'm going to like, you have to

150
0:12:29.380 --> 0:12:31.380
understand that I'm aggregating here everything that was sent

151
0:12:31.380 --> 0:12:35.380
to me over the internet, which is a great source of information

152
0:12:35.380 --> 0:12:41.380
and also a great source of information. So, go is simple,

153
0:12:41.380 --> 0:12:45.380
object oriented programming isn't, therefore go is not object

154
0:12:45.380 --> 0:12:50.380
oriented. Go doesn't have classes, so go cannot be object

155
0:12:50.380 --> 0:12:54.380
oriented. It doesn't have inheritance, so it's not object

156
0:12:54.380 --> 0:12:57.380
oriented. And lastly, and this one is a great argument, we're

157
0:12:57.380 --> 0:13:01.380
going to dive into that one, methods are not really messages,

158
0:13:01.380 --> 0:13:05.380
so go is not object oriented. Now, this one is fun. So this

159
0:13:05.380 --> 0:13:09.380
comes from the Alan Kay school. So all the fans of Alan Kay

160
0:13:09.380 --> 0:13:13.380
have jumped in to let me know everything about the history of

161
0:13:13.380 --> 0:13:17.380
object oriented. So here's what I've got. One person said

162
0:13:17.380 --> 0:13:20.380
technically they aren't methods, so he's referring to

163
0:13:20.380 --> 0:13:23.380
receiver to method receivers, they aren't methods on type T,

164
0:13:23.380 --> 0:13:27.380
they are functions where the first argument is type is the

165
0:13:27.380 --> 0:13:31.380
type. The promotion to them as methods is syntactic sugar.

166
0:13:31.380 --> 0:13:36.380
It's why you can call, now look at this, this is amazing,

167
0:13:36.380 --> 0:13:44.380
V dot foo with bar or T, call the type, invoke a method on

168
0:13:44.380 --> 0:13:50.380
the type and provide V as a parameter. And it's true, show

169
0:13:50.380 --> 0:13:57.380
you what it looks like. So same code as before, we have a

170
0:13:57.380 --> 0:14:06.380
empty struct, we have method foo on that we added to A,

171
0:14:06.380 --> 0:14:16.380
quiet in the court. We have method foo that we added to

172
0:14:16.380 --> 0:14:20.380
type A, which is nice, and we can invoke it using two ways.

173
0:14:20.380 --> 0:14:25.380
One is clearly less common than the other, so this is the

174
0:14:25.380 --> 0:14:31.380
common way, or we can invoke it on the type and pass in

175
0:14:31.380 --> 0:14:44.380
lower case A as a parameter. You have the screen?

176
0:14:44.380 --> 0:14:50.380
That's why, by the way, a pointer receiver can be nil.

177
0:14:50.380 --> 0:14:52.380
So I have this game, I play this game all the time with

178
0:14:52.380 --> 0:14:56.380
people who are new to go and ask them what's going to happen.

179
0:14:56.380 --> 0:15:02.380
So I create, we are able to create methods with pointer

180
0:15:02.380 --> 0:15:10.380
receivers. So I add foo and make the receiver a pointer.

181
0:15:10.380 --> 0:15:15.380
I create variable A, which is a pointer to upper case A,

182
0:15:15.380 --> 0:15:23.380
which is a pointer to the pointer. It's zero value is nil.

183
0:15:23.380 --> 0:15:29.380
And I invoke A.foo. And then I ask people what will happen.

184
0:15:29.380 --> 0:15:35.380
Now, we're not going to be able to do this quiz here, because

185
0:15:35.380 --> 0:15:39.380
we are late on time and we have to make up some time.

186
0:15:39.380 --> 0:15:48.380
So, hi from foo is actually returned by foo, which means

187
0:15:48.380 --> 0:15:53.380
we were able to invoke a method on a nil pointer.

188
0:15:53.380 --> 0:15:57.380
It's possible because there is no receiver, there's no actual

189
0:15:57.380 --> 0:16:01.380
receiver. Most of the time when we call a method in other

190
0:16:01.380 --> 0:16:08.380
languages, what happens is that we are, we have to go and

191
0:16:08.380 --> 0:16:11.380
go through some reference that's somewhere in the address

192
0:16:11.380 --> 0:16:19.380
space of the variable itself. This tells us that it's not

193
0:16:19.380 --> 0:16:22.380
where the method is at all. It's not where it's defined.

194
0:16:22.380 --> 0:16:31.380
It's not where the run time looks for it. It's just not.

195
0:16:31.380 --> 0:16:35.380
So my coorganizer, my women who go coorganize it, Jessica

196
0:16:35.380 --> 0:16:39.380
Green saw this and said, so there is no spoon, which I

197
0:16:39.380 --> 0:16:43.380
thought was amazing, because this is kind of a design thing,

198
0:16:43.380 --> 0:16:47.380
right? So everything is in our minds. Really everything is in

199
0:16:47.380 --> 0:16:50.380
our minds. We sort of, you know, we have these philosophical

200
0:16:50.380 --> 0:16:53.380
ideas and then we put them into code. If there is anybody who

201
0:16:53.380 --> 0:16:56.380
actually thinks that the gopher that you saw on the screen in

202
0:16:56.380 --> 0:17:00.380
the maze, there is an actual gopher out there doing this, let

203
0:17:00.380 --> 0:17:09.380
me know. I want to hang out. So where do receivers come from?

204
0:17:09.380 --> 0:17:12.380
So listen to this, because this is very interesting.

205
0:17:12.380 --> 0:17:16.380
According to the Go team, the Inspiration2 method receivers

206
0:17:16.380 --> 0:17:23.380
came from Oberon 2, which is the object oriented version of

207
0:17:23.380 --> 0:17:43.380
Oberon. Okay. And they're called receivers because they

208
0:17:43.380 --> 0:17:48.380
receive messages, except there is no receiver. So everybody's

209
0:17:48.380 --> 0:17:54.380
right. Another thing that the same person brought up, which

210
0:17:54.380 --> 0:17:58.380
is really cool, he said, well, I forgot to say who Alan Kay

211
0:17:58.380 --> 0:18:02.380
was. What's wrong with me? Alan Kay is the creator of small

212
0:18:02.380 --> 0:18:05.380
talk and also is considered to be the person who coined the

213
0:18:05.380 --> 0:18:08.380
term object oriented. So he's supposedly supposed to know

214
0:18:08.380 --> 0:18:14.380
stuff about it. You know. So that's why people quote him and

215
0:18:14.380 --> 0:18:18.380
that's fine. It's totally fine. And he has a lot of opinions,

216
0:18:18.380 --> 0:18:23.380
which is also great. We encourage opinions. So what a

217
0:18:23.380 --> 0:18:25.380
person said to me, so in small talk, you don't need to

218
0:18:25.380 --> 0:18:28.380
explicitly declare that an object can have a specific

219
0:18:28.380 --> 0:18:33.380
message. You send it a message and then it decides whether to

220
0:18:33.380 --> 0:18:39.380
handle it. So duck typing. Now, this is really interesting.

221
0:18:39.380 --> 0:18:46.380
Can we do this and go? Can we check if a certain value, if

222
0:18:46.380 --> 0:18:49.380
this can handle a certain message or has in layman's

223
0:18:49.380 --> 0:18:53.380
terms, has certain methods? Well, the answer is yes,

224
0:18:53.380 --> 0:19:00.380
through the magic of interface conversion. So again, we type

225
0:19:00.380 --> 0:19:06.380
a, we added function foo, it doesn't do much. We don't

226
0:19:06.380 --> 0:19:11.380
actually care what it does. And we created interface i,

227
0:19:11.380 --> 0:19:17.380
uppercase i. And this interface has one function, defines

228
0:19:17.380 --> 0:19:24.380
one function, foo, that returns a string. And a,

229
0:19:24.380 --> 0:19:27.380
coincidentally, or pointed to a, coincidentally, also has

230
0:19:27.380 --> 0:19:33.380
foo, which is a string. Now, this is where go completely

231
0:19:33.380 --> 0:19:38.380
differently than other languages. In go, interfaces are

232
0:19:38.380 --> 0:19:44.380
implicit. In most languages, if you have, let's say, class

233
0:19:44.380 --> 0:19:48.380
a and you wanted to implement interface i, you have to, at

234
0:19:48.380 --> 0:19:52.380
the time of creating that class, you have to say something

235
0:19:52.380 --> 0:19:56.380
like class a implements i. That means that you have to be,

236
0:19:56.380 --> 0:20:00.380
that you cannot have a type that is not aware, has no

237
0:20:00.380 --> 0:20:05.380
idea that, and implements, that a certain interface exists

238
0:20:05.380 --> 0:20:10.380
and will implement it. Not unless, not unless, that's

239
0:20:10.380 --> 0:20:14.380
why a lot of people move to scripting languages, because

240
0:20:14.380 --> 0:20:19.380
that allows them to pick some code from the internet and

241
0:20:19.380 --> 0:20:23.380
use it. You know, just use it. Regardless of what's going

242
0:20:23.380 --> 0:20:27.380
on. And go allows you to actually download some random

243
0:20:27.380 --> 0:20:32.380
code from the internet and plug it in using your own

244
0:20:32.380 --> 0:20:39.380
interfaces. It's very strange. It's very unique. So, with

245
0:20:39.380 --> 0:20:43.380
that in mind, if you have implicit interfaces, it makes

246
0:20:43.380 --> 0:20:48.380
sense to be able to try and be able to ask whether a type

247
0:20:48.380 --> 0:20:53.380
implements an interface. Because maybe it does. In other

248
0:20:53.380 --> 0:20:58.380
languages, it just doesn't make sense because the answer

249
0:20:58.380 --> 0:21:05.380
will be no. Right? Right. Okay. So, therefore, we use

250
0:21:05.380 --> 0:21:09.380
interface conversion. Now, this is the syntax. What you

251
0:21:09.380 --> 0:21:12.380
need to understand from this expression is that if

252
0:21:12.380 --> 0:21:18.380
everything was fine, then Val will have a type, will have

253
0:21:18.380 --> 0:21:25.380
B, which is, which it points to A. And with the

254
0:21:25.380 --> 0:21:31.380
interface of I, inside the interface of I, Val will have

255
0:21:31.380 --> 0:21:35.380
all of that and will be able to invoke foo, which is

256
0:21:35.380 --> 0:21:39.380
this one. Which is exactly what's going to happen. And

257
0:21:39.380 --> 0:21:43.380
this is how stringers work. Now, we said that small talk,

258
0:21:43.380 --> 0:21:48.380
we said that small talk was created by Alan Kay and he

259
0:21:48.380 --> 0:21:53.380
coined object oriented. Well, actually created small talk

260
0:21:53.380 --> 0:21:59.380
with the explicit, explicitly with his ideas of what

261
0:21:59.380 --> 0:22:04.380
object oriented is supposed to be. And it's important

262
0:22:04.380 --> 0:22:08.380
because according to Robert Grissmer, who is one of the

263
0:22:08.380 --> 0:22:13.380
creators of the Go programming language, this is what

264
0:22:13.380 --> 0:22:17.380
small talk was actually the inspiration for this kind of

265
0:22:17.380 --> 0:22:20.380
interface conversion so that at run time we can actually

266
0:22:20.380 --> 0:22:25.380
check if a type has certain methods. And Russ Cox

267
0:22:25.380 --> 0:22:29.380
compared it to duck typing. And by the way, this is a

268
0:22:29.380 --> 0:22:33.380
really, really nice read. So, if you just Google Russ

269
0:22:33.380 --> 0:22:37.380
Cox duck typing, you will find it. It is a really nice

270
0:22:37.380 --> 0:22:40.380
read. He explains how the run time does it and also how

271
0:22:40.380 --> 0:22:43.380
the caching works because obviously you cannot compute

272
0:22:43.380 --> 0:22:46.380
well at compile time. You cannot compute every type

273
0:22:46.380 --> 0:22:49.380
against all the interfaces in the world. It's really,

274
0:22:49.380 --> 0:22:56.380
really nice. And finally, we have a surprise witness.

275
0:22:56.380 --> 0:23:00.380
Martje is going to be the proxy of said surprise witness.

276
0:23:00.380 --> 0:23:01.380
Do you have your?

277
0:23:01.380 --> 0:23:11.380
I am here. So, before I introduce our witness, I am

278
0:23:11.380 --> 0:23:16.380
going to ask the witness, do you remember giving an

279
0:23:16.380 --> 0:23:24.380
interview in 2010 to Danica Lev? I don't recall.

280
0:23:24.380 --> 0:23:27.380
Well, it's on the internet, so it must be true. It's

281
0:23:27.380 --> 0:23:36.380
true. I submit into evidence a web page, exhibit 90210.

282
0:23:36.380 --> 0:23:43.380
So, please read a portion of the text from the web

283
0:23:43.380 --> 0:23:45.380
page in your own voice.

284
0:23:45.380 --> 0:23:49.380
Okay. Go is an object oriented even though it doesn't

285
0:23:49.380 --> 0:23:52.380
have the notion of a class. The type system is more

286
0:23:52.380 --> 0:23:56.380
general. Any type, even basic types such as integers and

287
0:23:56.380 --> 0:23:58.380
strings can have methods.

288
0:23:58.380 --> 0:24:02.380
Thank you very much. So, what makes you such an expert

289
0:24:02.380 --> 0:24:06.380
to be able to say such claims?

290
0:24:06.380 --> 0:24:08.380
I co-created the language.

291
0:24:08.380 --> 0:24:11.380
You created the language. What is your name?

292
0:24:11.380 --> 0:24:13.380
Rob Pike.

293
0:24:13.380 --> 0:24:16.380
Thank you, Rob. New glasses?

294
0:24:16.380 --> 0:24:18.380
Yeah, new dress. Really made it.

295
0:24:18.380 --> 0:24:20.380
Thank you very much. Thank you, Martje.

296
0:24:20.380 --> 0:24:31.380
So, yes, Rob Pike actually said that in 2010. I don't

297
0:24:31.380 --> 0:24:35.380
know if he actually changed his mind since. But the

298
0:24:35.380 --> 0:24:39.380
truth is that I feel that at this point it is clearly a

299
0:24:39.380 --> 0:24:42.380
matter of opinion. So, I would like to know yours since

300
0:24:42.380 --> 0:24:45.380
you are the jury.

301
0:24:45.380 --> 0:24:55.380
Voting is now open. So, the verdict. It's verdict time.

302
0:24:55.380 --> 0:25:03.380
I hope it's now open. Yeah, it is.

303
0:25:03.380 --> 0:25:10.380
The Go team is not permitted to answer.

304
0:25:10.380 --> 0:25:13.380
I believe one of my members asked the Go team last year

305
0:25:13.380 --> 0:25:17.380
if Go is object oriented.

306
0:25:17.380 --> 0:25:32.380
That's a dare.

307
0:25:32.380 --> 0:25:37.380
I am going to give you 35 more seconds because we have to

308
0:25:37.380 --> 0:25:52.380
wrap it up.

309
0:25:52.380 --> 0:25:56.380
Am I correct? You already see 105 judgments. 108.

310
0:25:56.380 --> 0:26:02.380
Oh, no.

311
0:26:02.380 --> 0:26:12.380
I'm not sure if I'm going to get a bunch of bots.

312
0:26:12.380 --> 0:26:16.380
All right. So, I have to close this.

313
0:26:16.380 --> 0:26:24.380
Unfortunately, let's find out what you said.

314
0:26:24.380 --> 0:26:28.380
That's interesting.

315
0:26:28.380 --> 0:26:38.380
Are you showing the Q&A?

316
0:26:38.380 --> 0:26:48.380
Yeah, I don't know what happened.

317
0:26:48.380 --> 0:26:50.380
Let's do this.

318
0:26:50.380 --> 0:26:55.380
That's what I did. Wow.

319
0:26:55.380 --> 0:27:00.380
Okay. So, I am going to cancel these proceedings

320
0:27:00.380 --> 0:27:07.380
because clearly you're out of your minds.

321
0:27:07.380 --> 0:27:16.380
As the judge, I condemn myself to providing you with

322
0:27:16.380 --> 0:27:20.380
stickers. Lots and lots and lots of stickers.

323
0:27:20.380 --> 0:27:24.380
Iris Rona, thank you very much. I have to get off.

324
0:27:24.380 --> 0:27:35.380
Thank you.

325
0:27:35.380 --> 0:27:38.380
If you have a sticker, you also have to give her one if she

326
0:27:38.380 --> 0:27:41.380
convinced you.

327
0:27:41.380 --> 0:27:43.380
Again, housekeeping announcement.

328
0:27:43.380 --> 0:27:46.380
If you submitted lightning talk, check your mail matrix,

329
0:27:46.380 --> 0:27:48.380
Discord, WhatsApp, whatever you sent to me.

330
0:27:48.380 --> 0:27:52.380
I'll try to contact you if you got accepted, if you aren't

331
0:27:52.380 --> 0:27:55.380
sure, our mested on account has...


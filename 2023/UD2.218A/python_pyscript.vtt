WEBVTT

00:00.000 --> 00:14.680
Hello, so yeah, I'm talking about PyScript.

00:14.680 --> 00:19.280
So I'm trying to get a catchy title, so it's kind of like a clickbait, so we PyScript,

00:19.280 --> 00:24.180
we place Django, so maybe a lot of people will be like really, you know, sparking their

00:24.180 --> 00:32.720
interest because I mentioned Django, which is a very popular framework for web.

00:32.720 --> 00:36.640
But today I'm not going to talk too much about Django, but I'm mainly going to talk about

00:36.640 --> 00:40.920
PyScript and I would have some crazy demo at the end, which is like very interesting

00:40.920 --> 00:48.680
demo, so you may not want to miss it, but the most important thing is that this is the

00:48.680 --> 00:49.680
link to the slides.

00:49.680 --> 00:55.200
I should have used some QR code, but kind of lazy, so this is just a link that you could

00:55.200 --> 00:56.700
find the slide deck.

00:56.700 --> 01:02.720
It is also uploaded to the Fostem website, you can find it to follow along, if you can't

01:02.720 --> 01:07.280
see it very well or anything happened, then you can look at the slides, and all the links

01:07.280 --> 01:08.560
are there as well.

01:08.560 --> 01:17.200
So I hope that since you're here, you have heard of PyScript, but how much do you know

01:17.200 --> 01:22.360
about PyScript, except that it's something to do with Python?

01:22.360 --> 01:25.880
So, yeah, silence.

01:25.880 --> 01:27.880
So, yeah.

01:27.880 --> 01:32.520
So I think most people that I met, I've talked about PyScript and they said they have heard

01:32.520 --> 01:37.640
about PyScript, they may have read a block or two about PyScript, it's something that's

01:37.640 --> 01:43.360
relatively new, so that's why I think it's important to kind of, you know, to put information

01:43.360 --> 01:49.080
together so people have something to look at when they want to know more about PyScript.

01:49.080 --> 01:51.960
So by the way, I'm Czech, why am I talking about PyScript?

01:51.960 --> 01:57.280
Why it sounds like I know a lot about PyScript, because I work in Alekonda, so PyScript is

01:57.280 --> 02:02.200
developed by a team in Alekonda, so I work with them a lot, so I have, you know, kind

02:02.200 --> 02:07.400
of very close to the source, so I kind of have some information about what's the newest

02:07.400 --> 02:11.680
thing about PyScript, and I love open source projects, I have been involved in open source

02:11.680 --> 02:16.200
projects in the past, I just want to put more pictures there, so that's why I put it here.

02:16.200 --> 02:21.440
And I organize a lot of events, so let's jump into it.

02:21.440 --> 02:24.760
What is PyScript?

02:24.760 --> 02:30.600
PyScript is actually a framework, some people think that PyScript is a new language, but

02:30.600 --> 02:35.440
it's not, it's actually Python, but you can write Python in your HTML file, that's what

02:35.440 --> 02:36.920
it is.

02:36.920 --> 02:44.240
And also, like, it's a framework, why, because later you'll see why, like, we say PyScript

02:44.240 --> 02:48.320
is a framework, because of how you can change the backend and other stuff.

02:48.320 --> 02:52.680
So it lets you run Python application in the browser, basically it just means that you

02:52.680 --> 03:01.800
can, well, you can run, you know, you can write Python script, just like you write JavaScript

03:01.800 --> 03:07.720
in the HTML file, and then the browser would understand what you wanted to do, and then

03:07.720 --> 03:09.640
we'd do something.

03:09.640 --> 03:14.680
So but it's not trying to repay JavaScript, you can actually use it with JavaScript, for

03:14.680 --> 03:20.480
example, I'm using it with the D3 library, which is crazy.

03:20.480 --> 03:21.480
Who knows about D3?

03:21.480 --> 03:22.480
Yes, okay, good.

03:22.480 --> 03:28.160
Okay, I'm not speaking to other people, but yeah, it's good.

03:28.160 --> 03:34.760
So I will show some demo later, so basically you can actually pass the objects back and

03:34.760 --> 03:35.760
forth.

03:35.760 --> 03:39.040
So you can change your Python object into JavaScript object, and then your JavaScript

03:39.040 --> 03:45.320
library like D3 will understand it, or the other way around, so it is something that

03:45.320 --> 03:48.200
is quite new.

03:48.200 --> 03:54.000
So also, so all these things that I talk about, that you can, like, change the Python object

03:54.000 --> 04:00.840
into JavaScript object, all this stuff, won't be happening if we don't have the PyEoDy project,

04:00.840 --> 04:08.000
which they, by the way, for those of you who haven't heard, it started as a monselas project

04:08.000 --> 04:09.000
called Iody.

04:09.000 --> 04:15.040
They tried to have a lot of things that is run, you know, as a WESM, WebAssembly, so

04:15.040 --> 04:17.400
the browser can run it.

04:17.400 --> 04:23.880
And then there's a, so within that, all those projects, there's a Python, you know, project

04:23.880 --> 04:31.280
that is actually like converting Python into WebAssembly, so that's the PyEoDy project.

04:31.280 --> 04:41.200
So that's actually allow you to run the Python, so without it, like, actually, PyScript won't

04:41.200 --> 04:42.200
work.

04:42.200 --> 04:46.040
So, well, PyScript will still work, you can change the backend, but like, it started with

04:46.040 --> 04:52.360
PyEoDy, sorry, I'm like kind of, I'm trying to be correct in what I'm saying.

04:52.360 --> 04:59.120
But the main thing is that you need to kind of compile Python into a WebAssembly.

04:59.120 --> 05:04.880
So PyEoDy is like the, kind of one of the most popular one, that is like having the

05:04.880 --> 05:11.920
whole, more or less the whole thing that your standard Python offer is actually compiled

05:11.920 --> 05:15.760
into WebAssembly, so you can run Python on the browser.

05:15.760 --> 05:19.080
But there's also other things that we are trying, the team is trying now, for example,

05:19.080 --> 05:24.280
they are trying to compile microPython, which is a lighter version of Python, into WebAssembly,

05:24.280 --> 05:30.840
so it more or less works the same, but you have some kind of Python functionality that

05:30.840 --> 05:38.720
is not available on microPython, so you can actually choose which one you want to use.

05:38.720 --> 05:45.400
And also because one thing about the PyEoDy project that is, that is why it is the first

05:45.400 --> 05:50.320
one that PyScript adopts and why it's the first one that is like, why it is so popular,

05:50.320 --> 05:55.480
because the project itself also provides a lot of Python packages, for example, those

05:55.480 --> 06:01.720
that we use a lot, for example, NumPy, like scientists and data scientists use a lot,

06:01.720 --> 06:08.720
it's like, for example, NumPy, SciPy, SciQL, and all those actually are quite difficult

06:08.720 --> 06:11.640
to run on a browser because they are not pure Python.

06:11.640 --> 06:18.160
So for pure Python, if you have a Python interpreter that actually is compiled into Wasm, of course

06:18.160 --> 06:23.040
you can do it because they are just Python, but something like NumPy, SciPy, SciQL, and

06:23.040 --> 06:28.600
they are not pure Python, then it's a bit tricky, but PyEoDy project also provides that,

06:28.600 --> 06:35.800
so now we can also run those very complicated Python packages on the browser, which is cool.

06:35.800 --> 06:40.640
So I will show you a little bit of the PyScript basic, and then I'll show you the demo, and

06:40.640 --> 06:43.240
then like, all the questions will come at the end.

06:43.240 --> 06:48.560
Is it too small?

06:48.560 --> 06:51.440
I don't know how to zoom in though.

06:51.440 --> 06:55.120
That's why the link is important at the beginning.

06:55.120 --> 07:00.600
So I can explain, but the content of this code is not the most important thing, it's

07:00.600 --> 07:05.080
just like how a typical PyScript will look like.

07:05.080 --> 07:07.040
So I'm just talking about this section here.

07:07.040 --> 07:10.840
So for the first two lines here, you don't need to see it, but I'm telling you what it

07:10.840 --> 07:16.440
is, it's just like when you have a JavaScript code, you would actually have a, probably

07:16.440 --> 07:20.840
you have a CSS, which is like the style of how your website will look like, the style

07:20.840 --> 07:25.480
sheet, and then you have a JavaScript that you kind of pull it in, and then you can run

07:25.480 --> 07:29.600
all these like JavaScript functions that you have.

07:29.600 --> 07:36.120
So this is actually something like a path to a PyScript.js that's hosted on the PyScript.net.

07:36.120 --> 07:45.640
So this is actually what allows you to write Python on the websites, on your HTML file.

07:45.640 --> 07:48.420
You may ask, why is it.js?

07:48.420 --> 07:52.720
This is just how wasm works, so we have to follow the standard.

07:52.720 --> 07:57.800
So yeah, that's.js, but that's not important, you're not writing JavaScript, so don't worry

07:57.800 --> 07:59.240
about it.

07:59.240 --> 08:01.960
Next is there is a section that you can actually write Python code.

08:01.960 --> 08:08.680
So here is just some NumPy code that is plotting some NumPy random numbers.

08:08.680 --> 08:13.880
So here, like if it's, sorry, I'm not expecting the room to be this big.

08:13.880 --> 08:21.560
So if you can see it, so the first line is basically a HTML tag, and it's PyScript, and

08:21.560 --> 08:25.600
then it also have a little bit of settings like output equals to plot and stuff like

08:25.600 --> 08:26.600
that.

08:26.600 --> 08:28.080
And it is just a Python script.

08:28.080 --> 08:32.640
It's just like import NumPy, import Map.lib and all that stuff.

08:32.640 --> 08:35.520
And then it's Python code.

08:35.520 --> 08:38.360
It's just like you can copy and paste your Python code there.

08:38.360 --> 08:41.160
It's more or less the same thing.

08:41.160 --> 08:45.840
And the other thing that you may have when you are using PyScript is a PyConfic file.

08:45.840 --> 08:51.720
So this PyConfic file is actually, there's multiple formats that is supported.

08:51.720 --> 08:58.040
In this example, in JSON format, it's just a JSON file with packages is NumPy, and then

08:58.040 --> 09:02.400
Map.lib, because we are using it in the Python code.

09:02.400 --> 09:06.880
That's why we have to put it there to say that we are using those packages, kind of

09:06.880 --> 09:08.640
like your pip install.

09:08.640 --> 09:13.080
It's like putting it in the environment within your browser.

09:13.080 --> 09:15.560
So that's what it does.

09:15.560 --> 09:16.760
So this is the code.

09:16.760 --> 09:18.520
That's typically how it looks like.

09:18.520 --> 09:22.080
One catch is that it's using the latest version in the first two lines there.

09:22.080 --> 09:26.520
So if you don't want to break your code, you can pin a version.

09:26.520 --> 09:34.480
Now you can also pin a specific version with the releases and then the version number.

09:34.480 --> 09:36.240
Now we are named.

09:36.240 --> 09:42.640
We are attacking it as like the year, month, days, year, month probably, and then the versions.

09:42.640 --> 09:48.780
So if, for example, you don't want it to, because now PyScript is still changing a lot.

09:48.780 --> 09:53.600
So if you don't want your code to be not working next month, so you may want to pin the version

09:53.600 --> 09:58.280
until you want to update it manually when you look at the code again and update it.

09:58.280 --> 09:59.760
You can do it, so don't worry about it.

09:59.760 --> 10:02.480
I know people will have questions about it.

10:02.480 --> 10:09.920
Or you may think that, oh, like, you're a web developer and you don't like the CDN calling

10:09.920 --> 10:12.800
in from another website that you have no control of.

10:12.800 --> 10:18.220
If that website got attacked or something and it won't work, it may be very dangerous.

10:18.220 --> 10:19.320
You can host it yourself.

10:19.320 --> 10:25.520
You can download that two things, the style sheet and the JavaScript code yourself.

10:25.520 --> 10:26.520
And the other things will fit as well.

10:26.520 --> 10:28.000
There are also a few other things.

10:28.000 --> 10:29.000
But they are all downloadable.

10:29.000 --> 10:34.000
You can download it and host it yourself if you want to.

10:34.000 --> 10:40.360
So it's getting more complicated because now the PyScript is getting more developed and

10:40.360 --> 10:46.520
now there are more things you can config about how PyScript works.

10:46.520 --> 10:49.880
The PyConfig tag is where you can change all those.

10:49.880 --> 10:57.280
So, first of all, the tag itself, so within inside, there's multiple formats you can use.

10:57.280 --> 10:59.000
There's the Tomo format, which is the default.

10:59.000 --> 11:03.840
So if you don't tell this tag what format you're writing, so it will just assume you're

11:03.840 --> 11:05.800
using a Tomo format.

11:05.800 --> 11:09.320
So in this demo here, it says packages and paths.

11:09.320 --> 11:12.000
So it's just like what package you are putting in.

11:12.000 --> 11:17.640
Just like the pigment store thing, there's an environment within the browser that's running

11:17.640 --> 11:19.520
all the PyScript code.

11:19.520 --> 11:25.160
So you have to first say what packages you are using to allow it to be usable.

11:25.160 --> 11:30.560
The JSON format, again, it's just different formats, more or less the same thing.

11:30.560 --> 11:32.240
Or you can actually have another source.

11:32.240 --> 11:36.960
You can write your file in another, for example, either JSON file or Tomo file.

11:36.960 --> 11:43.240
You can also put it in because you don't want everything to be in your HTML file, so you

11:43.240 --> 11:47.680
can actually put in other sources as well.

11:47.680 --> 11:57.840
And also, the PyConfig tag is not just used for putting all your packages and other stuff.

11:57.840 --> 12:02.960
There's also other things that you could set in a PyConfig tag.

12:02.960 --> 12:07.240
So you can also host the will of the package.

12:07.240 --> 12:30.960
It doesn't need to be using the one that's provided by Py

12:30.960 --> 12:35.240
Script, but you can do it as well.

12:35.240 --> 12:57.700
You can change the runtime setting, like I said before, because Py

12:57.700 --> 13:07.740
isn't necessarily there of a lot of fun.

13:07.740 --> 13:11.900
Take no time to load, but it provides all the basic Python

13:11.900 --> 13:15.800
code that you could write in the HTML file.

13:15.800 --> 13:17.960
So you can quickly teach someone Python

13:17.960 --> 13:20.140
without installing Python and just like

13:20.140 --> 13:22.560
running it on the HTML file.

13:24.360 --> 13:26.480
You can also add some metadata, for example,

13:26.480 --> 13:28.560
you want to add the author who writes this script

13:28.560 --> 13:32.300
and the license, you can also do that, no problem.

13:32.300 --> 13:37.300
So another thing that you may put in your HTML file

13:37.300 --> 13:40.460
while you are using PyScript is the PyRepo.

13:40.460 --> 13:42.460
It's something that's just like Jupyter Notebook.

13:42.460 --> 13:43.940
If you have Jupyter Notebook, you know,

13:43.940 --> 13:47.540
it's like very nice repo that you can put in the

13:47.540 --> 13:49.680
Python code, shift enter, and then you execute

13:49.680 --> 13:51.340
and give you the result.

13:51.340 --> 13:56.340
You can also embed that in your HTML page

13:56.980 --> 13:58.820
when you are using PyScript.

13:58.820 --> 14:00.860
So you just need to do the same thing,

14:00.860 --> 14:03.300
you know, having those two lines of the style sheet

14:03.300 --> 14:06.260
and the PyScript.js.

14:06.260 --> 14:08.660
And then you can just put the PyRepo tag

14:08.660 --> 14:11.180
and then you will have a Jupyter-like repo

14:11.180 --> 14:12.780
that you could use in your site.

14:14.460 --> 14:16.180
So why is it so useful, right?

14:16.180 --> 14:18.240
Like, it's a new thing, it's exciting,

14:18.240 --> 14:21.100
but can I really use it?

14:21.100 --> 14:23.940
Or is it just a fun thing to do

14:23.940 --> 14:25.500
while doing it on the front end, right?

14:25.500 --> 14:28.900
Like now you can have like application, like Django,

14:28.900 --> 14:31.460
like I said, it's a kind of people love Django,

14:31.460 --> 14:36.460
like I, you know, why do we want PyScript?

14:37.940 --> 14:40.300
Because sometimes like things just need to be run

14:40.300 --> 14:43.820
on the front end, sometimes like we can't really rely

14:43.820 --> 14:48.820
on an application like Django or other Python application

14:49.420 --> 14:51.600
to handle all this Python code.

14:52.700 --> 14:57.540
For example, if you don't want to use up all your resources,

14:57.540 --> 14:59.960
right, like if you have a back end and then the back end

14:59.960 --> 15:03.180
is actually hosted by you or the cloud service

15:03.180 --> 15:05.560
that you pay for, if there's a lot of user

15:05.560 --> 15:10.560
and like if every single user had a very like heavy use

15:10.760 --> 15:14.660
of your resources, then the bills can be expensive

15:14.660 --> 15:17.580
and then you may not want that, you want to maybe,

15:17.580 --> 15:20.700
you know, give back the law into the users

15:20.700 --> 15:21.620
who is using it, right?

15:21.620 --> 15:24.640
So you could push things into the front end.

15:26.060 --> 15:29.700
And all, if I've heard like maintainers said that like,

15:29.700 --> 15:32.620
they want people to try out their code, you know,

15:32.620 --> 15:36.580
you can build a sandbox that let people to run it,

15:36.580 --> 15:39.920
like for example, a lot of the data science stuff,

15:39.920 --> 15:42.340
you know, for example, the NumPy, SciPy,

15:42.340 --> 15:45.280
they will have, before they will have the binder thing

15:45.280 --> 15:47.860
that actually load in, you know, another application,

15:47.860 --> 15:49.720
you know, that have the back end

15:49.720 --> 15:52.100
and then they could run some code there to do it

15:52.100 --> 15:53.540
as an example.

15:53.540 --> 15:58.140
But for these services, they are provided for free usually,

15:58.140 --> 16:01.020
they are quite slow or you know, they have limits.

16:01.020 --> 16:06.020
So if you want to provide a sandbox for users,

16:06.860 --> 16:09.020
if it can run on their machine, you don't have to worry

16:09.020 --> 16:10.820
about people abusing it as well.

16:10.820 --> 16:13.100
Like for example, some people, if you,

16:13.100 --> 16:15.100
whoever run whatever on your sandbox,

16:15.100 --> 16:18.380
they could do crypto mining and then it's not a good thing.

16:18.380 --> 16:19.980
So if it's on the front end,

16:19.980 --> 16:23.180
it's using the user's resources, not your resources,

16:23.180 --> 16:24.820
which if they want to mine Bitcoin,

16:24.820 --> 16:26.780
it's fine, it's on their machine or on your machine,

16:26.780 --> 16:29.020
you don't have to pay the bill.

16:29.020 --> 16:33.060
Also, sometimes we have applications that, for example,

16:33.060 --> 16:36.660
is some research data, some medical data, very sensitive.

16:36.660 --> 16:40.460
So you can't really, you know, it's like the rules that you,

16:40.460 --> 16:42.980
the data can't leave the machine.

16:42.980 --> 16:46.180
So you can send it to a backend somewhere to do it.

16:46.180 --> 16:49.900
Then, you know, maybe you can provide the, you know,

16:49.900 --> 16:52.860
provide the code that, you know,

16:52.860 --> 16:54.980
someone can use it to run on the browser.

16:54.980 --> 16:56.140
So it's run on their machine.

16:56.140 --> 16:58.140
So instead of, you know, you have,

16:58.140 --> 17:00.460
you have built application and they have to send the data

17:00.460 --> 17:04.380
over to your, whatever the backend is,

17:04.380 --> 17:06.100
and then to run the application.

17:06.100 --> 17:08.780
So it's also easier to set up as well.

17:08.780 --> 17:11.260
Otherwise you may have to provide a separate,

17:11.260 --> 17:14.940
secure environment with the whole kind of set up

17:14.940 --> 17:17.340
of the backend and the front end together and stuff.

17:17.340 --> 17:20.300
You know, if you just have the front end, it's much easier.

17:20.300 --> 17:22.220
You don't have to worry about it.

17:22.220 --> 17:25.420
So with Highscript, with H. Django,

17:25.420 --> 17:28.220
I know that you already know the answer is no,

17:28.220 --> 17:33.220
but actually it's very fun if you use them together.

17:33.300 --> 17:35.500
I will show you a few things that I like,

17:36.460 --> 17:40.140
that is done by either me or some of my friends.

17:40.140 --> 17:44.060
That's actually quite cool things that we have used,

17:44.060 --> 17:46.380
like both Django and Highscript.

17:46.380 --> 17:49.300
So for example, this is what I have done with,

17:50.940 --> 17:52.380
can I just pass it in here?

17:52.380 --> 17:53.220
Okay.

17:53.220 --> 17:54.460
So this is something that I've done.

17:54.460 --> 17:58.660
It's like using Highscript with Django.

17:58.660 --> 18:00.660
That I've, so this is what I,

18:00.660 --> 18:03.340
I will show you what it is first and then I will explain.

18:03.340 --> 18:05.140
So here, this is the thing I do.

18:05.140 --> 18:07.140
I think this one, this one I can zoom in cool.

18:07.140 --> 18:09.620
So this is a recommender system, right?

18:09.620 --> 18:11.540
So I have all these movie that I download

18:11.540 --> 18:14.900
from the movie dataset on Cardo.

18:14.900 --> 18:17.540
And then is there a bunch of ratings.

18:17.540 --> 18:21.020
So this recommender, if you put in a movie that you like,

18:21.020 --> 18:23.060
if you try to find all the potential movie

18:23.060 --> 18:24.900
that you like after, for example,

18:24.900 --> 18:27.700
I always like putting Iron Man because I know it works.

18:29.420 --> 18:31.500
And then give me five recommendations.

18:31.500 --> 18:33.940
If I like Iron Man, what else would you recommend me?

18:33.940 --> 18:35.940
And then if I click recommend,

18:35.940 --> 18:37.660
and I've got five of them, right?

18:37.660 --> 18:41.740
So most of them sci-fi movie, which is quite cool.

18:41.740 --> 18:43.580
There's also the Dark Knight, which is,

18:43.580 --> 18:45.380
I think it's the movie about a Batman,

18:45.380 --> 18:47.300
which is also, I like it.

18:47.300 --> 18:48.820
So yeah, that's nice.

18:50.060 --> 18:51.700
So, but this thing, right?

18:51.700 --> 18:53.100
This thing, usually you think of, oh,

18:53.100 --> 18:55.140
it's like a machine learning thing, right?

18:55.140 --> 18:59.220
It's a recommender system.

18:59.220 --> 19:01.620
You know, can I run it on the front end?

19:01.620 --> 19:02.620
Yes, you can.

19:02.620 --> 19:05.700
As long as you have your model already trained,

19:05.700 --> 19:08.780
then for example, in my example here,

19:08.780 --> 19:10.980
actually you have a link to see the,

19:12.700 --> 19:13.780
how it's set up.

19:14.660 --> 19:16.540
If you click on this link,

19:16.540 --> 19:18.940
it will show you how I set it up.

19:18.940 --> 19:21.500
So you can play around yourself as well.

19:21.500 --> 19:23.900
So what I did is just like,

19:23.900 --> 19:25.940
of course I download the data as a given,

19:25.940 --> 19:28.540
you have to have the data to make it work, right?

19:28.540 --> 19:32.420
And then after that, you just run some of this script.

19:32.420 --> 19:35.140
You can actually do it in a more beautiful way.

19:35.140 --> 19:38.220
I'm just using some command line to run all this script

19:38.220 --> 19:42.580
to load in the data to train your model and stuff.

19:42.580 --> 19:44.260
You can do it with other ways.

19:44.260 --> 19:47.340
For example, you have a user, a main user interface, right?

19:47.340 --> 19:49.800
They upload a new data and other stuff.

19:49.800 --> 19:52.620
Then it will automatically retrain the model

19:52.620 --> 19:53.900
when there's new data.

19:53.900 --> 19:54.900
You can set that up as well,

19:54.900 --> 19:57.300
but it's just a demo, so this is like this.

19:57.300 --> 20:00.400
But after that, there will be a model that's already trained.

20:00.400 --> 20:02.620
It will deploy to the front end.

20:02.620 --> 20:04.940
And then in the front end, that's how this come in.

20:04.940 --> 20:06.140
That's how it works.

20:06.140 --> 20:08.020
So this is just a trained model.

20:08.020 --> 20:09.880
It's very lightweight.

20:09.880 --> 20:11.620
And then you don't have to host all the data.

20:11.620 --> 20:13.880
It could be done somewhere else.

20:13.880 --> 20:17.660
But for the user, they have a trained model

20:17.660 --> 20:19.980
and then they just need to put in the input

20:19.980 --> 20:21.900
and then it will give you some results.

20:21.900 --> 20:24.660
So if a machine learning model deploy on the front end.

20:25.620 --> 20:28.480
Another thing that my friend has done, which is quite cool,

20:28.480 --> 20:31.940
is front end as a back end.

20:31.940 --> 20:36.260
So it's running Django on the browser.

20:36.260 --> 20:37.100
So.

20:37.100 --> 20:37.940
So.

20:39.020 --> 20:39.860
Yes.

20:39.860 --> 20:42.860
No, this is, oh, this is so small.

20:42.860 --> 20:44.740
But yeah, someone has done it.

20:44.740 --> 20:46.100
This is not my doing,

20:46.100 --> 20:49.740
so I don't have responsibility.

20:49.740 --> 20:51.900
But have a look.

20:51.900 --> 20:53.260
So this is actually like,

20:55.580 --> 20:59.200
basically you have two browser, like HTML page.

20:59.200 --> 21:01.140
One page is the server.

21:01.140 --> 21:02.300
One page is the front end.

21:02.300 --> 21:03.740
So this is what it is.

21:03.740 --> 21:05.580
So you have a back end and a front end.

21:05.580 --> 21:06.880
On the same page, yay.

21:08.860 --> 21:10.100
So yeah, you can do that.

21:10.100 --> 21:13.300
So I was like, oh, this is a bit fun, but is it useful?

21:13.300 --> 21:15.340
But my friend here Hugo told me

21:15.340 --> 21:17.180
that you can actually use it to test things

21:17.180 --> 21:20.700
because you now can run an application on the browser.

21:20.700 --> 21:21.820
So everybody have a browser.

21:21.820 --> 21:24.820
So you can run an application on it, which is pretty cool.

21:24.820 --> 21:26.740
So yeah, check that out.

21:28.860 --> 21:32.140
Other things that I used PySquared for is not with Django.

21:32.140 --> 21:34.580
It's with other things.

21:34.580 --> 21:36.260
For example, use it together with D3.

21:36.260 --> 21:37.420
I have this example here.

21:37.420 --> 21:41.180
I already preload them because I'm not going to like,

21:41.180 --> 21:43.540
for you, it actually take quite a while to load.

21:43.540 --> 21:45.700
So that's why I preload them.

21:45.700 --> 21:49.380
But yeah, because I'm using the whole kind of package.

21:49.380 --> 21:50.740
Here I'm using NetworkX.

21:50.740 --> 21:53.060
I have put in a network graph.

21:53.060 --> 21:55.820
I have all these network analysis, which is super cool.

21:55.820 --> 22:00.140
But I don't like the NetworkX visualization

22:00.140 --> 22:01.220
because it's kind of basic.

22:01.220 --> 22:03.100
So that's why I use D3 for the visualization.

22:03.100 --> 22:04.620
I can do this.

22:04.620 --> 22:05.620
Very good animation.

22:05.620 --> 22:07.460
I can click on things and things change.

22:07.460 --> 22:10.660
Now I see all the neighbors are colored coded.

22:10.660 --> 22:14.380
So yeah, you can combine the cool stuff

22:14.380 --> 22:16.660
that JavaScript provides, for example, D3,

22:16.660 --> 22:18.260
and the cool stuff that Python provides,

22:18.260 --> 22:21.100
which is all this data science stuff, which is cool.

22:22.460 --> 22:24.380
Also, there are other plots as well.

22:25.580 --> 22:30.580
Before, you can't have these interactive things

22:31.740 --> 22:35.100
that you could, you know, interactive graph done easily

22:35.100 --> 22:36.740
on your website.

22:36.740 --> 22:38.700
So yeah, and also, map as well.

22:38.700 --> 22:40.180
This is not, again, not my demo,

22:40.180 --> 22:43.020
but you can now have this map thingy.

22:43.020 --> 22:45.660
You can use volume, which is, again, Python library.

22:45.660 --> 22:46.860
Now you can use it on the browser.

22:46.860 --> 22:47.700
Super cool.

22:49.340 --> 22:51.660
Yeah, and also, I have actually started building

22:51.660 --> 22:52.740
a PyScript tutorial.

22:52.740 --> 22:55.700
Again, this is work in progress because things keep changing.

22:55.700 --> 22:58.620
I can't keep it up, but if you're interested,

22:58.620 --> 23:01.060
if you want to try it, that may be a place

23:01.060 --> 23:03.020
you want to have a look at.

23:03.020 --> 23:05.300
So yeah, all of these slides, again, this is on the slide.

23:05.300 --> 23:08.620
So yeah, so download my slides if you need to.

23:08.620 --> 23:09.620
No.

23:09.620 --> 23:13.460
So I think I don't have too much time left.

23:13.460 --> 23:16.380
I would like to answer your questions,

23:16.380 --> 23:18.380
but there are these common questions

23:18.380 --> 23:21.100
that I would also ask and answer myself.

23:21.100 --> 23:22.860
So for example, people ask me,

23:22.860 --> 23:24.620
can you put in a Python script?

23:24.620 --> 23:25.460
Yes, you can.

23:25.460 --> 23:26.620
You can use the FASH now.

23:26.620 --> 23:29.220
Look at the documentation if you want to.

23:29.220 --> 23:31.220
What Python version you're using,

23:31.220 --> 23:33.460
it depends on the runtime, which is, again,

23:33.460 --> 23:36.700
PyConfig settings that you could, you know,

23:36.700 --> 23:39.220
you can look at it and see which one you want to use,

23:39.220 --> 23:41.260
you know, PyEldy version, which version you want to use,

23:41.260 --> 23:42.820
you can choose it yourself.

23:42.820 --> 23:46.820
And, you know, why we can't do it like JavaScript,

23:46.820 --> 23:49.580
having script, tech equals to Python.

23:49.580 --> 23:53.140
Because this is so new, all the browsers,

23:53.140 --> 23:56.380
they don't support it yet, so we have to make a custom tech,

23:56.380 --> 23:58.260
which is PyScript.

23:59.140 --> 24:02.380
Okay, why don't you just use PyEldy?

24:02.380 --> 24:04.100
I think PyScript is just easier to use.

24:04.100 --> 24:07.820
PyEldy is very nice, but, you know,

24:07.820 --> 24:11.140
sometimes get quite complicated for beginners, especially.

24:11.140 --> 24:13.260
Also, you can change the runtime with PyScript,

24:13.260 --> 24:15.780
so it's not just PyEldy, you can, again, you know,

24:15.780 --> 24:19.260
there's, my colleagues now working on a compiled version

24:19.260 --> 24:21.020
of micro-Python, it would be much faster,

24:21.020 --> 24:23.660
much more lightweight, so try that.

24:25.580 --> 24:28.460
A bunch more other things, so can you pin a version

24:28.460 --> 24:31.240
of the packages that you use?

24:31.240 --> 24:32.740
If you want, well, if you want,

24:32.740 --> 24:34.380
then you better host the will yourself,

24:34.380 --> 24:35.860
then you know which version you're using,

24:35.860 --> 24:39.500
and it's there, frozen, unchanged forever.

24:39.500 --> 24:42.340
So also, some, do you know Brighten?

24:42.340 --> 24:44.140
Maybe some of you have heard about Brighten.

24:44.140 --> 24:47.940
So Brighten is a project that tries to translate Python

24:47.940 --> 24:50.380
into JavaScript and then run it in the browser.

24:50.380 --> 24:52.020
The difference is that PyScript actually

24:52.020 --> 24:54.780
is not using JavaScript, it's actually using Wasm.

24:54.780 --> 24:56.940
So Python is compiled to Wasm,

24:56.940 --> 25:00.380
so more packages is available.

25:00.380 --> 25:02.900
So yeah, also you can, again, change the runtime,

25:02.900 --> 25:04.860
the backend, which one you want to use.

25:04.860 --> 25:08.020
Bware, as someone mentioned, Bware in my previous talk,

25:08.020 --> 25:11.660
so yes, I would love to see more support for Bware,

25:11.660 --> 25:15.320
but I can't say for the company, so I'm not saying that.

25:15.320 --> 25:17.580
Yeah, so that's the end of my talk.

25:17.580 --> 25:19.500
I know I have a few minutes left for Q&A,

25:19.500 --> 25:22.680
so, or if you didn't get the sticker at the beginning,

25:22.680 --> 25:25.020
come to talk to me, I'll give you a sticker.

25:25.020 --> 25:37.700
Thank you.

25:37.700 --> 25:39.740
We have a few minutes for questions,

25:39.740 --> 25:42.580
and before the questions, I want to thank everyone

25:42.580 --> 25:45.260
for joining the Python Dev Room,

25:45.260 --> 25:48.220
and I want to thank also Eric Gazzoni,

25:48.220 --> 25:51.980
my friend who organized all of the planning of the day

25:51.980 --> 25:56.100
and everything upstream,

25:56.100 --> 25:59.020
and he made a great worry for all the selection

25:59.020 --> 26:00.740
of the speakers, the planning, everything.

26:00.740 --> 26:02.740
He couldn't make it here today,

26:02.740 --> 26:06.420
but I really want to thank him as well.

26:06.420 --> 26:11.740
Thanks everybody.

26:11.740 --> 26:14.700
And thanks to Arnaud also for joining me today

26:14.700 --> 26:17.460
to help the Dev Room.

26:17.460 --> 26:23.580
Yes, yes.

26:23.580 --> 26:26.700
Hi, thank you for a wonderful talk.

26:26.700 --> 26:29.620
High script is very exciting.

26:29.620 --> 26:31.500
I know people are using WebAssembly

26:31.500 --> 26:33.900
to run untrusted code in the browser.

26:33.900 --> 26:37.980
You can use it like a sandbox, so it's very exciting.

26:37.980 --> 26:42.500
But my question is, so you were importing packages.

26:42.500 --> 26:43.380
Is that easy to do?

26:43.380 --> 26:47.180
Do the packages have to be on the machine already?

26:47.180 --> 26:49.860
Yes, so if you have internet connection,

26:49.860 --> 26:53.500
so the package, if you just simply put in like,

26:53.500 --> 26:54.860
you know, in the PyCon state,

26:54.860 --> 26:57.220
you put in package equals to something,

26:57.220 --> 26:59.020
so those will be actually approved

26:59.020 --> 27:01.460
from whatever PyOutice provided.

27:01.460 --> 27:03.300
So it needs to be loaded from online,

27:03.300 --> 27:05.220
so you'll see if you have a web page,

27:05.220 --> 27:07.220
it will take quite a while to load.

27:07.220 --> 27:08.740
But you also have an alternative

27:08.740 --> 27:11.220
that you can download the will of the package

27:11.220 --> 27:14.740
as long as that will is purely written in Python.

27:14.740 --> 27:18.420
So something like NumPy, SciPy, those,

27:18.420 --> 27:19.500
because they have extension,

27:19.500 --> 27:21.140
they're not purely written in Python,

27:21.140 --> 27:22.580
those you don't have an option.

27:22.580 --> 27:24.820
You have to use the WonderPy that I provided.

27:24.820 --> 27:26.540
But otherwise, if it's in other library,

27:26.540 --> 27:27.900
for example, Fuzzy Wussy, you know,

27:27.900 --> 27:29.020
it's purely written in Python.

27:29.020 --> 27:31.980
You can download the will and it can run locally.

27:31.980 --> 27:32.820
Yeah.

27:34.140 --> 27:37.940
Yeah, my question's about matplotlib is okay,

27:37.940 --> 27:41.420
but how is this base map or carto-py?

27:41.420 --> 27:42.980
Can it be used also?

27:42.980 --> 27:45.220
Matplotlib, sorry.

27:45.220 --> 27:47.540
Matplotlib is for graphics,

27:47.540 --> 27:50.700
but if you have cart, maps, base map,

27:51.700 --> 27:55.380
can such a tool also be used, sent in the browser?

27:55.380 --> 27:58.700
Yeah, most of the library that if it's available in Python,

27:58.700 --> 28:00.620
it will also be available, so.

28:00.620 --> 28:03.060
It must be pure Python or it's.

28:03.060 --> 28:07.060
Oh, matplotlib, I'm not sure matplotlib is pure Python.

28:08.020 --> 28:10.580
I don't know matplotlib enough, John, so the question.

28:10.580 --> 28:11.420
I try.

28:11.420 --> 28:15.020
Yeah, but yeah, so you have to check.

28:15.020 --> 28:16.700
Like the library that you want to import,

28:16.700 --> 28:18.100
is it purely in Python or not?

28:18.100 --> 28:18.940
So yeah.

28:23.500 --> 28:27.740
I'm a bit confused because what we loaded in the browser

28:27.740 --> 28:29.260
is a JavaScript module,

28:29.260 --> 28:32.220
so is there some WebAssembly somewhere?

28:32.220 --> 28:35.660
Yeah, so you see the script that was import is.js, right?

28:35.660 --> 28:37.500
But actually, that's a WebAssembly.

28:37.500 --> 28:40.380
It's just that the standard, the WebAssembly standard

28:40.380 --> 28:42.940
is like when my team provided,

28:42.940 --> 28:45.780
like when they released the thing,

28:45.780 --> 28:49.020
which is in WebAssembly, but it's the extension.js.

28:49.020 --> 28:50.980
It's a bit confusing, but actually it's in WebAssembly.

28:50.980 --> 28:51.820
It's not in JavaScript.

28:51.820 --> 28:54.980
It's just how the WebAssembly kind of standard work.

28:54.980 --> 28:59.100
You have a JS file somehow after you have, you know,

28:59.100 --> 29:02.300
done the release, the build and the source.

29:02.300 --> 29:04.700
It become.js.

29:04.700 --> 29:06.620
We have time for one more question.

29:06.620 --> 29:07.460
Should I have one?

29:07.460 --> 29:12.460
Yep, better.

29:13.700 --> 29:15.380
Thanks for your talk.

29:15.380 --> 29:18.100
Does PyScript use any Web workers?

29:18.100 --> 29:21.020
And if so, how do, can you control them?

29:21.020 --> 29:22.780
There's the web, sorry.

29:22.780 --> 29:25.460
Does PyScript use any Web workers?

29:25.460 --> 29:27.980
Like does your code run parallel?

29:27.980 --> 29:29.700
It's purely in the browser.

29:29.700 --> 29:32.620
So if you host everything locally,

29:32.620 --> 29:34.900
actually it's just on the browser.

29:34.900 --> 29:36.860
So there's no Web worker that communicate

29:36.860 --> 29:38.020
with other applications.

29:38.020 --> 29:38.860
Yeah.

29:41.740 --> 29:42.580
Yes, yes.

29:42.580 --> 29:43.660
One tiny question.

29:43.660 --> 29:44.500
Yeah.

29:44.500 --> 29:47.460
How does it all came in with different browsers

29:47.460 --> 29:49.220
for Firefox, Chrome?

29:49.220 --> 29:52.100
Because I guess it depends on your browser supporting that.

29:52.100 --> 29:52.940
Yeah.

29:52.940 --> 29:55.340
Now, definitely work on Chrome.

29:55.340 --> 29:58.740
Firefox maybe, others, I can't guarantee.

29:58.740 --> 29:59.580
Right.

29:59.580 --> 30:01.540
Yeah, yeah.

30:01.540 --> 30:02.900
But it's very young, the project.

30:02.900 --> 30:07.900
So later it will be more support.

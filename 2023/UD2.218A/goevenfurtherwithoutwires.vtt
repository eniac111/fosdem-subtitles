WEBVTT

00:00.000 --> 00:08.080
While one of the slides I'll quickly introduce him.

00:08.080 --> 00:11.980
I have a lot of things to say about him, but he's already learning late.

00:11.980 --> 00:17.340
But I've never seen such dedication to even five seconds before he came on stage debugging

00:17.340 --> 00:19.300
his code.

00:19.300 --> 00:21.000
I've never seen such dedication for a talk.

00:21.000 --> 00:23.960
I think this is true conference-driven development.

00:23.960 --> 00:28.280
Thank you, Ron.

00:28.280 --> 00:39.080
At FOSDAM 2021, we learned to go without wires.

00:39.080 --> 00:45.240
And we discovered Go Bluetooth, a new package that let you use Go to connect with Bluetooth,

00:45.240 --> 00:47.880
not just on microcontrollers, but on Windows.

00:47.880 --> 00:50.080
Yes, I said Windows here at FOSDAM.

00:50.080 --> 00:51.200
I'm very brave.

00:51.200 --> 00:55.360
On Windows, on Mac OS, and on Linux.

00:55.360 --> 01:02.640
Then, at FOSDAM 2022, we learned to go further without wires.

01:02.640 --> 01:08.480
And we discovered the mysteries of Wi-Fi and the internets.

01:08.480 --> 01:16.520
Now at FOSDAM 2023, we will go even further without wires.

01:16.520 --> 01:19.360
This time, we go long.

01:19.360 --> 01:21.400
I am Ron Evans, dead program.

01:21.400 --> 01:24.520
I am technologist for Hire, aren't we all these days?

01:24.520 --> 01:30.560
The hybrid group, here on planet Earth, we are all technologists for Hire.

01:30.560 --> 01:35.560
We do a lot of open source work, usually for little or no renumeration.

01:35.560 --> 01:41.080
And TinyGo is the result of the amazing collaborations of a huge community of people all over the

01:41.080 --> 01:42.780
world.

01:42.780 --> 01:46.800
This is about going further without wires.

01:46.800 --> 01:51.560
What we are talking about here is low-powered wide area networking, or LP-WAN.

01:51.560 --> 01:55.680
We talked about personal area networking two years ago, local area networking, and now

01:55.680 --> 01:58.520
we are going for wide area networking.

01:58.520 --> 02:04.400
And of course, we are talking about LoRa and LoRaWAN.

02:04.400 --> 02:05.400
What is LoRa?

02:05.400 --> 02:07.440
That is a very good question.

02:07.440 --> 02:09.680
Maybe we should ask who is LoRa or why is LoRa.

02:09.680 --> 02:11.560
Let's start with what is LoRa.

02:11.560 --> 02:15.200
LoRa is, of course, long range radio.

02:15.200 --> 02:22.320
It is a semi-proprietary but freely licensed protocol that was created in order to do long

02:22.320 --> 02:26.400
range wireless communication of digital data.

02:26.400 --> 02:29.640
And yes, I had to ask why is LoRa.

02:29.640 --> 02:33.800
Long range, of course, you knew that from the name, right?

02:33.800 --> 02:35.040
Ultra low power.

02:35.040 --> 02:38.400
Not just low power, but ultra low power.

02:38.400 --> 02:40.760
And license free spectrum.

02:40.760 --> 02:45.160
That means you do not need to go to any governmental entities and ask permissions.

02:45.160 --> 02:48.120
But that does not mean free for all.

02:48.120 --> 02:53.080
That just means we must share the commons gently because these airwaves are in fact the

02:53.080 --> 02:56.080
property of all human beings.

02:56.080 --> 03:00.840
So LoRa is the physical layer protocol.

03:00.840 --> 03:06.520
And what we mean by that is it actually tells us when the radio signal comes whether it

03:06.520 --> 03:07.780
is a one or a zero.

03:07.780 --> 03:12.720
So a question, what do these three things have in common?

03:12.720 --> 03:22.080
A bat, a dolphin, and screen star of the 20th century, Hedy Lamarr.

03:22.080 --> 03:23.400
I know you're probably wondering.

03:23.400 --> 03:25.920
The answer is, of course, chirp spread spectrum.

03:25.920 --> 03:27.040
You have that, right?

03:27.040 --> 03:32.480
So Hedy Lamarr, in addition to being an actress, probably many people know, was an inventor

03:32.480 --> 03:37.760
of what is now known as frequency hopping, which was a technology that was used to avoid

03:37.760 --> 03:41.240
jamming and detection during World War II.

03:41.240 --> 03:44.240
And we use this today for the LoRa protocol.

03:44.240 --> 03:47.720
So to kind of get you an idea, there's an up chirp and a down chirp.

03:47.720 --> 03:51.120
So I will now imitate the up chirp.

03:51.120 --> 03:52.120
And the down chirp.

03:52.120 --> 03:55.960
And like imagine that in a cute little dolphin voice.

03:55.960 --> 04:02.160
So by being able to parse and modulate these signals, it's able to actually send across

04:02.160 --> 04:04.380
long distances using very low power.

04:04.380 --> 04:05.880
So how to use LoRa?

04:05.880 --> 04:08.360
Well, chips, of course.

04:08.360 --> 04:09.360
Thank you.

04:09.360 --> 04:10.360
Good night.

04:10.360 --> 04:11.360
No.

04:11.360 --> 04:12.520
Chips mostly from Semtech.

04:12.520 --> 04:17.000
So Semtech is a company that are the creators of the LoRa protocol.

04:17.000 --> 04:18.400
And they make most of the chips.

04:18.400 --> 04:19.720
And they license them out.

04:19.720 --> 04:26.040
The two that are the most common are the SX126x series and the SX127 series.

04:26.040 --> 04:29.320
And so what we're going to do is we're going to see you have a microcontroller, some type

04:29.320 --> 04:30.320
of device.

04:30.320 --> 04:33.800
And we're going to connect through the serial peripheral interface, which is a low level

04:33.800 --> 04:37.180
serial interface, to the actual LoRa chipset.

04:37.180 --> 04:41.120
And then with the antenna, talk out to someplace far, far away.

04:41.120 --> 04:43.520
So this is where TinyGo comes in.

04:43.520 --> 04:46.020
You can end up when we saw a microcontroller.

04:46.020 --> 04:48.120
So the Go compiler for small places.

04:48.120 --> 04:51.840
If you haven't checked it out, you can program Arduino as with Go.

04:51.840 --> 04:53.360
You'll see in a minute.

04:53.360 --> 04:58.480
So let's start with the whole world of things, which of course is a blinky LED.

04:58.480 --> 05:03.280
And we're going to start with a Raspberry Pi Pico, which, oh, I forgot to start my video.

05:03.280 --> 05:04.720
Let's see here.

05:04.720 --> 05:07.440
Because you need some actually to see what's going on.

05:07.440 --> 05:09.760
It's not quite as exciting.

05:09.760 --> 05:11.800
Let's see here.

05:11.800 --> 05:15.880
Yes, I use all Linux tools.

05:15.880 --> 05:18.680
Don't we all?

05:18.680 --> 05:21.240
Let's see if the camera will come up.

05:21.240 --> 05:25.240
Oh, wrong camera.

05:25.240 --> 05:26.920
That looks like, well, I think that is it.

05:26.920 --> 05:28.760
I forgot to take the lens cap off.

05:28.760 --> 05:29.760
That helps.

05:29.760 --> 05:35.320
No, I am not a professional photographer by trade.

05:35.320 --> 05:37.480
And of course, if we make that bigger, it's a lot easier to see.

05:37.480 --> 05:39.600
And we can even bring it into a little bit of focus.

05:39.600 --> 05:40.600
All right.

05:40.600 --> 05:47.640
So this is a Raspberry Pi Pico RP2040, which is a microcontroller made by Raspberry Pi.

05:47.640 --> 05:52.800
And as we were seeing a minute ago, it's got a dual-core ARM Cortex N0, which is a very,

05:52.800 --> 05:58.560
very low-powered, not very powerful ARM Cortex microcontroller, 32-bit.

05:58.560 --> 06:02.680
Comes at 133 megahertz and 2 megabytes of flash.

06:02.680 --> 06:06.080
So let's just take a quick look at some code, just so you get an idea of what it is that

06:06.080 --> 06:08.920
we're looking at.

06:08.920 --> 06:13.240
And the whole world of things is a very simple program.

06:13.240 --> 06:15.000
You can see this good.

06:15.000 --> 06:16.000
All right.

06:16.000 --> 06:17.840
So it's just a Go program, right?

06:17.840 --> 06:21.520
But it's run through the TinyGo compiler, and it compiles to the code that can actually

06:21.520 --> 06:23.340
run on the microcontroller.

06:23.340 --> 06:28.540
So we'll import the machine package, which is a special package TinyGo uses to communicate

06:28.540 --> 06:30.520
with the hardware directly.

06:30.520 --> 06:33.400
Then the time package, same time package.

06:33.400 --> 06:36.040
And our function main, you've seen this before.

06:36.040 --> 06:40.920
So first we're going to say LED colon equals machine LED, which is like the built-in LED

06:40.920 --> 06:42.480
that's on a lot of boards.

06:42.480 --> 06:46.600
We'll configure that as an output, meaning we're going to send a signal to it to turn

06:46.600 --> 06:47.800
it on.

06:47.800 --> 06:53.120
And then forever, we're going to turn it low, meaning off.

06:53.120 --> 06:57.840
We're going to wait for 500 milliseconds, half a second, turn it on.

06:57.840 --> 07:00.120
And then wait for another 500 milliseconds.

07:00.120 --> 07:01.400
All right.

07:01.400 --> 07:05.280
So let's go and let's see this actually work.

07:05.280 --> 07:11.000
So if we go back to my presser, posthum, there we go.

07:11.000 --> 07:17.120
And if we make blinky, I really like make.

07:17.120 --> 07:20.240
So we'll then compile that code, flash it on there.

07:20.240 --> 07:23.080
And you can see that it's a 7K program.

07:23.080 --> 07:24.920
Can you see that?

07:24.920 --> 07:25.920
Yeah.

07:25.920 --> 07:30.040
So we'll have both the type and the program.

07:30.040 --> 07:39.480
And then if we go and we take a look, if we, oh, I forgot to plug it in.

07:39.480 --> 07:42.120
I was a little rushed for time, I'll admit.

07:42.120 --> 07:43.120
Naturally it failed to flash.

07:43.120 --> 07:44.860
That would have been frightening if it had.

07:44.860 --> 07:48.000
There is no wireless in there yet.

07:48.000 --> 07:51.320
It's very inexpensive, meaning there's no wireless built on board.

07:51.320 --> 07:52.320
All right.

07:52.320 --> 07:53.360
So now it's flashed.

07:53.360 --> 07:59.560
And if we take a look, we can see an LED is turning on and off.

07:59.560 --> 08:00.560
Yes.

08:00.560 --> 08:01.560
All right.

08:01.560 --> 08:07.320
We're off for a good start.

08:07.320 --> 08:11.240
I tempted the demo gods quite a lot today.

08:11.240 --> 08:15.600
So now we're going to use the TinyGo drivers package, which is a package that is a sister

08:15.600 --> 08:21.120
package to the TinyGo compiler, which contains support for all different kinds of sensors,

08:21.120 --> 08:28.720
displays, and other interesting things like, for example, R, LoRa wireless adapters.

08:28.720 --> 08:33.880
So our first demo is going to be showing LoRa, just the low-level protocol, transmitting

08:33.880 --> 08:34.880
and receiving.

08:34.880 --> 08:37.680
And we're going to use the same Raspberry Pi Pico.

08:37.680 --> 08:42.000
But we're going to add to it an RF solutions lambda 62.

08:42.000 --> 08:44.480
So if we can actually take a look at that here.

08:44.480 --> 08:51.520
If we go to the video, we'll take away that one, and we'll put in this one, different

08:51.520 --> 08:53.000
Raspberry Pi.

08:53.000 --> 08:56.360
And it's wired up to one of those chips that I showed you before.

08:56.360 --> 08:59.120
This by the way is the antenna, this little wire.

08:59.120 --> 09:01.120
Do I tell you that?

09:01.120 --> 09:03.120
I think I do.

09:03.120 --> 09:04.120
Yes.

09:04.120 --> 09:10.200
It's a Semtech SX1262 with an 868 megahertz radio, is what you need in order to be legal

09:10.200 --> 09:13.320
and broadcast here in the European region.

09:13.320 --> 09:17.880
And it's got a wire antenna, which is literally just a short piece of wire.

09:17.880 --> 09:27.720
So if we take a quick look at the code of our SX1266, so we can see it's not that much

09:27.720 --> 09:28.720
longer.

09:28.720 --> 09:32.800
It's got a package main, our machine package, time.

09:32.800 --> 09:37.640
And now we bring in the drivers for LoRa, which is the actual communication for LoRa,

09:37.640 --> 09:40.720
and then for the chip itself.

09:40.720 --> 09:44.960
And what we're going to do here in our main is we'll start by sleeping, and then we'll

09:44.960 --> 09:51.560
set up the LoRa interface, and then we'll try to receive data, transmit some data, and

09:51.560 --> 09:52.800
then sleep.

09:52.800 --> 09:57.080
So setting up the LoRa interface is really just about configuring the SPI interface,

09:57.080 --> 10:04.000
the SPI interface, creating the driver that we need in the TinyGo drivers package, attaching

10:04.000 --> 10:08.680
a radio controller, which because these chips have so many different variations that we

10:08.680 --> 10:14.120
need to be able to do so we can tell it which wires are going to be turning it on and off,

10:14.120 --> 10:20.000
and then make sure we actually have the device detected, configure it appropriately.

10:20.000 --> 10:26.480
So here we've got our 868.1 megahertz frequency, the bandwidth that we're using, et cetera.

10:26.480 --> 10:30.760
And then once we've got that configured, if you recall, we have our setup, then we'll

10:30.760 --> 10:32.120
receive data.

10:32.120 --> 10:39.080
And when to receive, it's just a matter of saying LoRa.Rx, and then how long we should

10:39.080 --> 10:43.520
wait, and if we don't receive any data, time out and return.

10:43.520 --> 10:46.920
And then transmit is almost exactly the same thing.

10:46.920 --> 10:54.480
That's going to be transmitting this message here, which is from RP2040 saying, hello,

10:54.480 --> 10:55.680
TinyGo.

10:55.680 --> 10:57.280
And then it's going to use LoRa.TX.

10:57.280 --> 10:59.080
All right.

10:59.080 --> 11:00.680
Let's see if it actually works.

11:00.680 --> 11:06.560
The demo gods are just waiting for their chance.

11:06.560 --> 11:09.160
All right.

11:09.160 --> 11:15.760
So let's actually plug it in this time, since we are professionals.

11:15.760 --> 11:22.080
And let's run make, which will now flash that code.

11:22.080 --> 11:23.760
And that one's a whole 15K.

11:23.760 --> 11:24.760
Whoo.

11:24.760 --> 11:27.560
Yeah, you have to add something to go wireless.

11:27.560 --> 11:28.840
All right.

11:28.840 --> 11:32.640
And we're actually using one of the capabilities we added into TinyGo two releases ago, which

11:32.640 --> 11:34.920
is it's got a built-in serial monitor.

11:34.920 --> 11:41.200
So we can see it's trying to receive LoRa data for 10 seconds.

11:41.200 --> 11:43.800
There's no one sending, apparently.

11:43.800 --> 11:48.240
And then after that, it'll try to send.

11:48.240 --> 11:54.040
So because there's no one sending, wait.

11:54.040 --> 11:55.040
What?

11:55.040 --> 11:58.040
Who is that?

11:58.040 --> 12:01.040
That's my next demo.

12:01.040 --> 12:03.600
All right.

12:03.600 --> 12:05.120
The Yo badge.

12:05.120 --> 12:09.760
You may have seen several of us are wearing these Go badges.

12:09.760 --> 12:16.360
So the Go badge is a, it started out like, oh, wow, it's upside down.

12:16.360 --> 12:21.960
It started out life as an Adafruit pie badge.

12:21.960 --> 12:26.000
But we helped it transition to its final form, a Go badge.

12:26.000 --> 12:28.520
It's much happier now, I can tell you.

12:28.520 --> 12:32.240
I mean, just look at its display.

12:32.240 --> 12:34.440
Not to mention that we've got such cute stickers.

12:34.440 --> 12:39.480
So we're actually running a different TinyGo program on there, which is called Yo badge.

12:39.480 --> 12:44.200
So Yo badge is using the Adafruit pie badge.

12:44.200 --> 12:45.820
I told you about that a little bit.

12:45.820 --> 12:52.640
And it's using this Adafruit LoRa feather wing, which is a little daughterboard that

12:52.640 --> 12:54.600
can be added to some of these.

12:54.600 --> 12:55.920
I soldered it on here.

12:55.920 --> 13:02.280
It's got a UFL antenna, which is one of those little antennas that clip on.

13:02.280 --> 13:07.160
That way you can wear it as a badge, because it is, in fact, a badge.

13:07.160 --> 13:13.680
And then naturally I need to reboot it.

13:13.680 --> 13:16.120
OK.

13:16.120 --> 13:19.100
So you can see the cool Yo logo.

13:19.100 --> 13:25.600
And then because the other program is still running, remember it's plugged in.

13:25.600 --> 13:27.760
The Raspberry Pi is still plugged in.

13:27.760 --> 13:31.200
So we could say Yo to it.

13:31.200 --> 13:35.960
And within 10 seconds or so, it should say something back.

13:35.960 --> 13:38.520
Let's see.

13:38.520 --> 13:40.520
Let's see if it's still here.

13:40.520 --> 13:42.020
Oh.

13:42.020 --> 13:43.240
Yep.

13:43.240 --> 13:44.240
That was it.

13:44.240 --> 13:46.760
The machines are talking to us, and we're talking back.

13:46.760 --> 13:51.800
Oh, I feel so warm.

13:51.800 --> 13:54.800
I really like machines, if you haven't noticed that.

13:54.800 --> 13:55.960
All right.

13:55.960 --> 14:00.360
So now let's talk about LoRaWAN.

14:00.360 --> 14:04.240
Because this was all just peer to peer, which actually, before I do that,

14:04.240 --> 14:08.360
just real quick before I do that, so we brought a few of these Go badges that

14:08.360 --> 14:12.160
I give away here today to some very special lucky individuals.

14:12.160 --> 14:13.760
We'll do that this afternoon.

14:13.760 --> 14:16.480
So if you go on Mastodon or any of those other social media things

14:16.480 --> 14:20.280
that you're still using, and you send out some really great messages

14:20.280 --> 14:25.200
about how awesome TinyGo is, and how cool FastM is, and how you really

14:25.200 --> 14:28.640
would like to be one of the kids with a programmable badge with wireless,

14:28.640 --> 14:33.280
then we'll sort of arbitrarily decide who gets these badges.

14:33.280 --> 14:34.040
Maybe random.

14:34.040 --> 14:35.800
I don't have time to write any more software.

14:35.800 --> 14:38.200
All right.

14:38.200 --> 14:40.120
So we don't have that much time left.

14:40.120 --> 14:45.240
So LoRaWAN, we're going to go really wide.

14:45.240 --> 14:49.240
So the first LoRaWAN specification was actually created in January 2015.

14:49.240 --> 14:52.440
So we're not cutting edge here, my friends.

14:52.440 --> 14:56.640
We're just catching up on what the cool kids have been doing back

14:56.640 --> 14:58.120
when they were kids.

14:58.120 --> 15:05.080
So this is the LAN part of the talk, which means the cloud.

15:05.080 --> 15:06.120
Take a refreshing breath.

15:06.120 --> 15:06.880
All right.

15:06.880 --> 15:09.000
So that means routable packets.

15:09.000 --> 15:11.320
If you want to go between internet works, generally we

15:11.320 --> 15:14.440
use media access control addresses or MAC addresses.

15:14.440 --> 15:18.000
You've seen these and wondered, that's so ugly.

15:18.000 --> 15:24.000
But we need this because with LoRaWAN, our architecture is a bit more complex.

15:24.000 --> 15:28.160
We have our end devices, as you saw, like the badge.

15:28.160 --> 15:30.480
And they talk to a LoRa gateway.

15:30.480 --> 15:33.920
And the gateway is what I was trying to get working before,

15:33.920 --> 15:36.880
but I had to do a router reset and I didn't have time to finish.

15:36.880 --> 15:38.080
I apologize.

15:38.080 --> 15:39.920
They didn't give me an ethernet cable.

15:39.920 --> 15:41.920
We're worried about what I would do with it.

15:41.920 --> 15:44.960
I don't know why.

15:44.960 --> 15:49.240
Anyway, the gateway then has a backhaul to the internet.

15:49.240 --> 15:52.440
And that's where the LoRaWAN protocol has three components

15:52.440 --> 15:56.520
that are very important, the join server, the network server,

15:56.520 --> 15:59.280
and then the application server.

15:59.280 --> 16:03.440
So by the way, LoRaWAN is already running on Go.

16:03.440 --> 16:07.760
Go is in all the good places and it's already LoRaWAN.

16:07.760 --> 16:08.880
What do I mean?

16:08.880 --> 16:12.080
Well, you may have heard of a company called the Things Network.

16:12.080 --> 16:16.040
Very, very cool company, real pioneers in the space.

16:16.040 --> 16:20.840
And they have a complete stack for a LoRaWAN server back end

16:20.840 --> 16:23.000
that's all written entirely in Go.

16:23.000 --> 16:24.320
Come on, give it up for them.

16:24.320 --> 16:29.960
Not to make this an awesome free public service.

16:29.960 --> 16:32.720
And then ChirpStack, a little bit more recent entry,

16:32.720 --> 16:36.720
they're actually doing amazing stuff with a similarly entirely in Go

16:36.720 --> 16:38.760
back end stack for LoRaWAN.

16:38.760 --> 16:41.040
And they have a lot of cool tools and libraries

16:41.040 --> 16:42.040
that we're using.

16:42.040 --> 16:43.160
So give it up for them.

16:43.160 --> 16:48.880
But we're talking about devices here.

16:48.880 --> 16:50.960
I mean, they really got Go on the back end.

16:50.960 --> 16:52.880
We don't need to reinvent that wheel.

16:52.880 --> 16:54.440
They're doing amazing work.

16:54.440 --> 16:56.800
We're talking about the actual end devices here.

16:56.800 --> 17:00.240
And the most important part starts with device activation.

17:00.240 --> 17:02.800
So device activation is like when you buy a phone

17:02.800 --> 17:03.960
and it turns on.

17:03.960 --> 17:06.040
You don't have to keep logging into your phone.

17:06.040 --> 17:07.080
Maybe you should be.

17:07.080 --> 17:08.560
But let's skip over that.

17:08.560 --> 17:09.560
That's another talk.

17:09.560 --> 17:10.640
So it connects.

17:10.640 --> 17:11.720
It's activated.

17:11.720 --> 17:13.440
You go to your cellular provider.

17:13.440 --> 17:15.160
And now you just start making calls.

17:15.160 --> 17:18.000
Well, this is the same model, the same pattern

17:18.000 --> 17:19.800
that we use with LoRaWAN.

17:19.800 --> 17:21.240
And there's two kinds of activation.

17:21.240 --> 17:22.840
One is activation by personalization,

17:22.840 --> 17:27.240
which means pre-saved keys on the device itself.

17:27.240 --> 17:28.240
Uh-oh.

17:28.240 --> 17:29.680
We're running out of power.

17:29.680 --> 17:31.560
4%.

17:31.560 --> 17:33.160
The question is, what do I unplug?

17:33.160 --> 17:37.080
It's like it's a tough decision.

17:37.080 --> 17:39.680
Well, and also I don't have my adapter with me.

17:39.680 --> 17:40.920
You only have five minutes.

17:40.920 --> 17:41.440
So go.

17:41.440 --> 17:44.120
Oh, perfect.

17:44.120 --> 17:46.400
And then over-the-air activation,

17:46.400 --> 17:48.960
which means that you just connect to some server

17:48.960 --> 17:52.600
somewhere and you get your keys down from the cloud.

17:52.600 --> 17:54.320
And then you save those.

17:54.320 --> 17:56.960
And then you can use those.

17:56.960 --> 17:58.920
And then you use those for uplink and downlink.

17:58.920 --> 18:01.320
And one thing to remember that's really important

18:01.320 --> 18:04.400
is that with uplink and downlink and LoRaWAN,

18:04.400 --> 18:05.840
there is really only uplink.

18:05.840 --> 18:07.680
You uplink and then you maybe get a chance

18:07.680 --> 18:09.080
to download some data.

18:09.080 --> 18:11.160
So this is the reason why it's so low power.

18:11.160 --> 18:13.400
It mostly talks and doesn't really

18:13.400 --> 18:15.960
listen, which is the opposite of the app I showed you before,

18:15.960 --> 18:18.280
which is just the peer-to-peer thing.

18:18.280 --> 18:20.640
So we have lower gateways.

18:20.640 --> 18:23.040
That's what this awesome antenna here is.

18:23.040 --> 18:26.800
It's a micro tick knot that I couldn't get rebooted in time

18:26.800 --> 18:28.640
with a Yagi antenna.

18:28.640 --> 18:31.280
And this is a very powerful antenna.

18:31.280 --> 18:34.040
And you'll see what this is all about tomorrow.

18:34.040 --> 18:35.920
What do I mean?

18:35.920 --> 18:40.960
What I mean is Tiny Global, a Pico high altitude balloon.

18:40.960 --> 18:44.600
So if you go to tinyglobal.com, and we'll

18:44.600 --> 18:46.120
see if we have internet.

18:49.480 --> 18:50.240
Yes.

18:50.240 --> 18:52.000
It will redirect you to this page, which

18:52.000 --> 18:55.240
is showing you when it's turned on the actual current location,

18:55.240 --> 18:59.080
altitude, and stats of the high altitude balloon.

18:59.080 --> 19:04.760
This balloon we will be launching tomorrow here at FOSDEM.

19:04.760 --> 19:07.680
Uh-oh, I think it may have fallen asleep.

19:07.680 --> 19:12.720
12 noon Central European time, weather permitting, of course.

19:12.720 --> 19:14.440
And that's the end of the talk.

19:14.440 --> 19:29.120
That's the best ending ever.

19:29.120 --> 19:31.320
We still have some time for questions, weirdly enough.

19:31.320 --> 19:32.160
Thank you, battery.

19:32.160 --> 19:33.640
How did that happen?

19:33.640 --> 19:34.560
I have no idea.

19:34.560 --> 19:37.760
Any questions for Ron?

19:37.760 --> 19:44.720
I'm sure you have a lot of questions.

19:44.720 --> 19:46.920
Apparently, no questions.

19:46.920 --> 19:50.640
Sorry, sorry, sorry.

19:50.640 --> 19:51.440
Hi.

19:51.440 --> 19:55.600
Have you ever managed to compile the whole Raspberry Pico

19:55.600 --> 20:00.480
SDK in C and then import it successfully in TinyGo?

20:00.480 --> 20:02.800
I'm sorry, could you repeat the first part of the question?

20:02.800 --> 20:05.920
Have you ever managed to successfully compile

20:05.920 --> 20:08.880
the whole SDK for Raspberry Pi Pico

20:08.880 --> 20:11.800
and then successfully import it in TinyGo?

20:11.800 --> 20:14.440
Because a year ago, it didn't work.

20:14.440 --> 20:20.040
Well, so the question is, can we import the Raspberry Pi C SDK

20:20.040 --> 20:22.200
and then compile it into TinyGo?

20:22.200 --> 20:25.880
The answer is, I'm not really sure.

20:25.880 --> 20:28.160
Actually, I think you can, but that's not something

20:28.160 --> 20:29.440
we're really trying to do.

20:29.440 --> 20:31.800
You're probably interested in the Wi-Fi support.

20:31.800 --> 20:35.840
In any support, watch it off, for example.

20:35.840 --> 20:39.360
Most things are probably better implemented in TinyGo itself.

20:39.360 --> 20:41.400
There is no watchdog in TinyGo.

20:41.400 --> 20:43.120
There is no reply code.

20:43.120 --> 20:49.880
There is a branch with a watchdog, WDT,

20:49.880 --> 20:51.480
experimental branch for it.

20:51.480 --> 20:53.080
Check that out.

20:53.080 --> 20:57.800
But yes, watchdog, low-power, and bringing in C,

20:57.800 --> 21:02.640
those are all things that are part of the TinyGo continuum.

21:02.640 --> 21:05.800
So 12 noon tomorrow, look for us outside somewhere

21:05.800 --> 21:08.320
and you'll know us by this antenna.

21:08.320 --> 21:12.720
Look for this antenna and some people wearing glowing helmets

21:12.720 --> 21:16.160
with actual balloons that are back in my hotel room.

21:16.160 --> 21:19.960
And by the way, all the parts are of Chinese origin,

21:19.960 --> 21:21.640
but it was made by these American hands.

21:21.640 --> 21:22.120
Thank you.

21:25.120 --> 21:25.880
Thank you very much.

21:25.880 --> 21:28.880
And please do not tell the government about tomorrow.

21:28.880 --> 21:38.400
I'm sorry I don't have any cards.

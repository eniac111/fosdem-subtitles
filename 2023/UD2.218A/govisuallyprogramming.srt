1
0:00:00.000 --> 0:00:11.340
It's getting late already in Brussels.

2
0:00:11.340 --> 0:00:13.020
The sun is shutting down.

3
0:00:13.020 --> 0:00:17.180
But we still managed to find a second TinyGo talk somehow.

4
0:00:17.180 --> 0:00:23.500
Then you'll ask everything about visual programming in Go, which I think means that I no longer

5
0:00:23.500 --> 0:00:24.660
have to write codes.

6
0:00:24.660 --> 0:00:26.660
So, front of the bus.

7
0:00:26.660 --> 0:00:27.660
Okay.

8
0:00:27.660 --> 0:00:29.660
Can you hear me?

9
0:00:29.660 --> 0:00:36.740
First of all, thank March and the rest of the organization for this beautiful Go Dev

10
0:00:36.740 --> 0:00:38.740
room today.

11
0:00:38.740 --> 0:00:41.620
Also the first one.

12
0:00:41.620 --> 0:00:44.460
And I'm Daniel Esteban, also known as Connejo.

13
0:00:44.460 --> 0:00:49.220
And I'm going to talk about a visually programming Go.

14
0:00:49.220 --> 0:00:52.340
Probably you use your eyes to program right now.

15
0:00:52.340 --> 0:00:58.820
But I'm talking about a visual programming language, which is like you use graphically

16
0:00:58.820 --> 0:01:03.180
element instead of text or code.

17
0:01:03.180 --> 0:01:09.020
Usually there are two main branches of visual programming language.

18
0:01:09.020 --> 0:01:13.620
One is flow based and the other is block based.

19
0:01:13.620 --> 0:01:20.100
And today we are going to focus on this block based way of programming Go.

20
0:01:20.100 --> 0:01:21.620
Why?

21
0:01:21.620 --> 0:01:25.140
Because I like to make crazy things with Go.

22
0:01:25.140 --> 0:01:36.500
Especially TinyGo and I wanted to know if it's possible to make some code graphically

23
0:01:36.500 --> 0:01:38.580
and then translate it to Go.

24
0:01:38.580 --> 0:01:46.260
Because well, more seriously, because I think Go is programming is an essential skill for

25
0:01:46.260 --> 0:01:47.260
the future.

26
0:01:47.260 --> 0:01:58.300
It's a great way to introduce non-programmers to programming, especially children.

27
0:01:58.300 --> 0:02:07.180
It's great for simple tasks like home information or if IFTTT.

28
0:02:07.180 --> 0:02:11.260
Also no code, low code movement are getting popular.

29
0:02:11.260 --> 0:02:15.780
And Go has a standard nice library, some nice package.

30
0:02:15.780 --> 0:02:20.300
It's easy to read and has multiple targets.

31
0:02:20.300 --> 0:02:28.340
You can run Go on Mac, Windows, but also on a lot of microcontroller.

32
0:02:28.340 --> 0:02:34.900
How are we going to be showing program Go?

33
0:02:34.900 --> 0:02:40.620
Well, there is blocky, blockly.

34
0:02:40.620 --> 0:02:49.340
Also known as make code or scratch or block, all of them use the same engine.

35
0:02:49.340 --> 0:02:52.900
And we are going to see this in a few moments.

36
0:02:52.900 --> 0:02:55.820
Blockly is a JavaScript library.

37
0:02:55.820 --> 0:03:00.100
It's 100% clear and not server side dependencies.

38
0:03:00.100 --> 0:03:02.940
It's compatible with all your browser.

39
0:03:02.940 --> 0:03:07.140
And it's highly extensible and extensible.

40
0:03:07.140 --> 0:03:11.980
Blockly, unfortunately, does not show for Go officially.

41
0:03:11.980 --> 0:03:15.660
So I hear to fix that.

42
0:03:15.660 --> 0:03:25.660
Unfortunately, I have a playground specifically made, but I left the last update at my home.

43
0:03:25.660 --> 0:03:30.100
It's not on the Internet, so I cannot run on my laptop right now.

44
0:03:30.100 --> 0:03:35.420
But I will show you some screen shot and we are going to see some demo.

45
0:03:35.420 --> 0:03:45.500
As you can see on the left side, the blockly editor is run on your web browser.

46
0:03:45.500 --> 0:03:53.020
Once we have it generate the Go code and then we send it to a server so it can compile,

47
0:03:53.020 --> 0:03:56.180
it can format the code.

48
0:03:56.180 --> 0:04:08.500
And then we can get the ones file that it runs on the web and browser again so we can

49
0:04:08.500 --> 0:04:13.860
see the output or we just get the file for our device.

50
0:04:13.860 --> 0:04:19.820
We are using for the server to compile, we are using TinyGo, which is a Go compiler for

51
0:04:19.820 --> 0:04:25.940
microcontroller, but you can use a regular Go.

52
0:04:25.940 --> 0:04:29.300
Let's see a sample.

53
0:04:29.300 --> 0:04:41.460
This is for example we can make and we are going to see a different feature of Blockly.

54
0:04:41.460 --> 0:04:48.340
The first one is, of course, a hell over.

55
0:04:48.340 --> 0:05:02.500
So Blockly we have these different blocks already made and we just drag and drop them.

56
0:05:02.500 --> 0:05:06.740
We can edit them.

57
0:05:06.740 --> 0:05:17.100
We can add we want for example to print hello war and we just go for a text.

58
0:05:17.100 --> 0:05:22.980
We drop here.

59
0:05:22.980 --> 0:05:27.620
Hello foster.

60
0:05:27.620 --> 0:05:37.700
We are going to make this five times.

61
0:05:37.700 --> 0:05:43.500
We just drop and drop the different elements.

62
0:05:43.500 --> 0:06:01.700
The code it will generate is pretty simple and it's just Go code.

63
0:06:01.700 --> 0:06:04.340
So this was our first example.

64
0:06:04.340 --> 0:06:13.260
You will need to trust me like this is working but like I said, the last version of the playground

65
0:06:13.260 --> 0:06:18.380
is not I couldn't bring it here.

66
0:06:18.380 --> 0:06:25.020
Our next example is like especially focused to children or non-programming people.

67
0:06:25.020 --> 0:06:28.900
I present you the Lobo tartle.

68
0:06:28.900 --> 0:06:35.620
Tartles are educational robots used in computer science.

69
0:06:35.620 --> 0:06:45.500
Because it's really easy to see, to program the robot and you can see like you tell them

70
0:06:45.500 --> 0:06:52.740
move forward one meter, turn right or to left, move forward again, go back and then you see

71
0:06:52.740 --> 0:06:57.380
the little robot moving and it's very easy for children to understand the principle of

72
0:06:57.380 --> 0:06:58.580
programming.

73
0:06:58.580 --> 0:07:04.860
So they became popular with the local language and tartographic.

74
0:07:04.860 --> 0:07:08.740
So we make our own version.

75
0:07:08.740 --> 0:07:16.620
It's the gopherino.

76
0:07:16.620 --> 0:07:19.300
It's this little one.

77
0:07:19.300 --> 0:07:20.300
Okay.

78
0:07:20.300 --> 0:07:30.420
This is a different robot, the chassis.

79
0:07:30.420 --> 0:07:40.700
The brain is a BBC micro bit which can go inside and then the eyes are ultrasonic distance

80
0:07:40.700 --> 0:07:46.820
sensor.

81
0:07:46.820 --> 0:07:51.940
We are going to avoid obstacle.

82
0:07:51.940 --> 0:08:03.140
For example, like you can see, we set a variable called distance is number variable and then

83
0:08:03.140 --> 0:08:11.380
while forever we just get the we read the distance from the sensor and if the distance

84
0:08:11.380 --> 0:08:16.780
is less than a value, we just move to the we spin to arrive.

85
0:08:16.780 --> 0:08:22.460
If not, we are going forward and then repeat it indefinitely.

86
0:08:22.460 --> 0:08:33.900
Or go code, the generated go code will take and I mean, blockly will make the right imports,

87
0:08:33.900 --> 0:08:41.620
it will declare some variable needed for it and it generate valid.

88
0:08:41.620 --> 0:08:46.060
This block will generate a valid code.

89
0:08:46.060 --> 0:08:47.100
So we just run.

90
0:08:47.100 --> 0:08:56.180
I will skip the flash bar because again, it's just waiting waste time and I think we are

91
0:08:56.180 --> 0:09:04.220
pretty tired for a long day but we just can't see.

92
0:09:04.220 --> 0:09:06.740
Maybe.

93
0:09:06.740 --> 0:09:12.980
Yes.

94
0:09:12.980 --> 0:09:28.020
And when it's fine and obstacle, it just spin.

95
0:09:28.020 --> 0:09:36.540
Bye bye, Ego Farino.

96
0:09:36.540 --> 0:09:41.420
The next example is what I call the string tank problem.

97
0:09:41.420 --> 0:09:45.260
I have a string tank at home.

98
0:09:45.260 --> 0:09:49.260
Oh, shoot.

99
0:09:49.260 --> 0:09:58.780
string need to live in a very specific temperature and it turns out like water heater are very

100
0:09:58.780 --> 0:10:03.060
cheap but water cooler are not.

101
0:10:03.060 --> 0:10:17.780
You can just blow air with a fan to the fish tank and it will lower the temperature.

102
0:10:17.780 --> 0:10:27.980
So I couldn't bring the fish tank here but I have hopefully still hot coffee and hopefully

103
0:10:27.980 --> 0:10:31.100
still cold water.

104
0:10:31.100 --> 0:10:33.300
The circuit is very simple.

105
0:10:33.300 --> 0:10:36.820
It's an Arduino nano RP 2040.

106
0:10:36.820 --> 0:10:43.940
It has waterproof temperature sensor here and instead of blowing a fan, I will just

107
0:10:43.940 --> 0:10:50.340
put some RGB LEDs.

108
0:10:50.340 --> 0:10:58.220
So you can see them on the back.

109
0:10:58.220 --> 0:11:01.380
The code is quite similar as before.

110
0:11:01.380 --> 0:11:05.860
We just have a variable called temperature.

111
0:11:05.860 --> 0:11:08.460
We just initialize the device.

112
0:11:08.460 --> 0:11:17.020
We read the temperature and if the temperature is higher than 30 degrees, we just blink red.

113
0:11:17.020 --> 0:11:25.300
If it's under 20 degrees Celsius, it will be blue and if the temperature is okay, it

114
0:11:25.300 --> 0:11:47.420
will be green.

115
0:11:47.420 --> 0:12:04.100
So the temperature is okay, we're going to put the sensor in the coffee.

116
0:12:04.100 --> 0:12:07.100
It turned red.

117
0:12:07.100 --> 0:12:17.940
And now in the water, it will get hopefully blue.

118
0:12:17.940 --> 0:12:27.060
So we can make this a small thing because with very, very few blocks, we just save us

119
0:12:27.060 --> 0:12:30.620
a lot of money instead of buying a water cooler.

120
0:12:30.620 --> 0:12:34.540
The code.

121
0:12:34.540 --> 0:12:43.300
The code again is very simple, but it makes a regular code.

122
0:12:43.300 --> 0:12:52.340
Also the next example is more focused on no code, low code and wet assembly.

123
0:12:52.340 --> 0:12:56.580
Wet assembly is getting supported by more and more entities, more and more in service

124
0:12:56.580 --> 0:13:03.260
like Fastly, Cloud Fair, Capsuleware, X team.

125
0:13:03.260 --> 0:13:09.260
You can have serverless function run right now.

126
0:13:09.260 --> 0:13:15.980
X team tried to make what Lua was a couple of years ago.

127
0:13:15.980 --> 0:13:25.060
You can have your program and you can include some extension from the user or the community

128
0:13:25.060 --> 0:13:28.180
built in wet assembly.

129
0:13:28.180 --> 0:13:38.020
So I just create a once worker, it's a visit counter.

130
0:13:38.020 --> 0:13:43.220
In orange you can see the special block to work with Cloud Fair.

131
0:13:43.220 --> 0:13:48.900
We just create a data store with an encounter or the connection.

132
0:13:48.900 --> 0:13:57.340
We get it's time we visit the main route on the web server.

133
0:13:57.340 --> 0:14:05.660
It gets the value of that data store, it's increment by one and then put it back.

134
0:14:05.660 --> 0:14:10.980
Just a simple visit counter.

135
0:14:10.980 --> 0:14:18.620
The code generates here is again like HTTP handle function.

136
0:14:18.620 --> 0:14:25.780
You can probably write if you have done some web server code.

137
0:14:25.780 --> 0:14:33.540
This is a bit early code I will explain later.

138
0:14:33.540 --> 0:14:42.180
But the rest is just convert from string to integer, just add one and then put back again.

139
0:14:42.180 --> 0:14:47.060
And then we search the code.

140
0:14:47.060 --> 0:14:49.060
Wait.

141
0:14:49.060 --> 0:15:05.220
The URL will be here.

142
0:15:05.220 --> 0:15:12.980
This is right now one and two.

143
0:15:12.980 --> 0:15:32.380
If we keep reloading the page it will continue and if we go to the backend on Cloud Fair,

144
0:15:32.380 --> 0:15:41.420
we can see the value is there.

145
0:15:41.420 --> 0:15:52.300
So again with very few blocks we can allow non-programmer people of our team to write

146
0:15:52.300 --> 0:15:58.940
an extension for our main program or whatever tool they are using.

147
0:15:58.940 --> 0:16:04.060
And now what makes blocks the blocks?

148
0:16:04.060 --> 0:16:08.460
You need to define the blocks.

149
0:16:08.460 --> 0:16:19.060
It's a JSON structure which you have what type of block, the message to solve, if it

150
0:16:19.060 --> 0:16:32.860
has some input, the output, the next statement, you can add a tool tip, some comment or documentation.

151
0:16:32.860 --> 0:16:45.260
Then you just define what the block does and what the go code that it should write finally.

152
0:16:45.260 --> 0:16:49.340
There is even a block generator.

153
0:16:49.340 --> 0:16:54.940
You can add different properties to your block.

154
0:16:54.940 --> 0:17:03.660
And now the feature of the block is they are type checking, there is a little bit of type

155
0:17:03.660 --> 0:17:04.660
checking.

156
0:17:04.660 --> 0:17:11.540
You cannot assign a text to a text variable or something like that.

157
0:17:11.540 --> 0:17:21.860
Some blocks you can define what type is returning.

158
0:17:21.860 --> 0:17:25.480
You also have conditional, of course.

159
0:17:25.480 --> 0:17:33.420
You can edit the own block on live to add more else if or else condition.

160
0:17:33.420 --> 0:17:36.520
You have some lists also.

161
0:17:36.520 --> 0:17:40.180
You have inline documentation.

162
0:17:40.180 --> 0:17:48.700
Just wait a little bit and just the tool tip appear of what this block does.

163
0:17:48.700 --> 0:17:57.100
It can be translated, of course, in any language which makes it really, really easy for people

164
0:17:57.100 --> 0:17:59.260
to start.

165
0:17:59.260 --> 0:18:08.940
You can have different colors and different styles for each type of blocks.

166
0:18:08.940 --> 0:18:16.980
You can also have some image on any part of the block which helps a lot, again, the user

167
0:18:16.980 --> 0:18:26.860
to know that, okay, this block is an LED or a temporary sensor or something like that.

168
0:18:26.860 --> 0:18:31.260
The limitation is currently not everything is yet supported.

169
0:18:31.260 --> 0:18:34.140
You need to create a block for it.

170
0:18:34.140 --> 0:18:40.980
It's probably worse for vision impaired people or screen reader user because I guess just

171
0:18:40.980 --> 0:18:45.900
a text file or a code file is easier for them.

172
0:18:45.900 --> 0:18:52.260
So static typing is complicated because there are a lot of different types.

173
0:18:52.260 --> 0:19:02.100
Blockly was made with JavaScript, Python, Dart in mind, like dynamic type kind of language.

174
0:19:02.100 --> 0:19:05.260
You have to make a lot of decisions in behalf of the user.

175
0:19:05.260 --> 0:19:15.500
For example, on our example of our web service, we just assume the response writer will be

176
0:19:15.500 --> 0:19:20.300
called D and the request is REQ.

177
0:19:20.300 --> 0:19:28.940
So you have to have that in mind when you make other blocks.

178
0:19:28.940 --> 0:19:36.740
Agri code is sometimes needed because, for example, since I'm just focusing on TinyGo,

179
0:19:36.740 --> 0:19:44.780
I expect all number variables to be integer 32 because it's what is common in TinyGo.

180
0:19:44.780 --> 0:19:53.620
So when you have to type in to 32 or something like that, it gets ugly.

181
0:19:53.620 --> 0:20:00.500
And there's not much documentation right now about how to debug it or how to develop on

182
0:20:00.500 --> 0:20:01.500
Blockly.

183
0:20:01.500 --> 0:20:04.540
So it's kind of hard right now.

184
0:20:04.540 --> 0:20:07.700
Here are the links for the different projects.

185
0:20:07.700 --> 0:20:09.420
That's it.

186
0:20:09.420 --> 0:20:10.900
Thank you.

187
0:20:10.900 --> 0:20:18.180
I'll give you some time.


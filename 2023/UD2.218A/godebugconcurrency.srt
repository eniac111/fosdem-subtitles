1
0:00:00.000 --> 0:00:09.920
I'm going to talk about the most painful thing I ever did in Go, which is debugging concurrent

2
0:00:09.920 --> 0:00:10.920
programs.

3
0:00:10.920 --> 0:00:14.400
I'll give it a pass for Andrew.

4
0:00:14.400 --> 0:00:15.400
Hi.

5
0:00:15.400 --> 0:00:20.880
Can you hear me well?

6
0:00:20.880 --> 0:00:23.400
Nice.

7
0:00:23.400 --> 0:00:32.580
I'm very pleased all of you here at FOSDIM in person finally since all this COVID.

8
0:00:32.580 --> 0:00:38.400
And today I will talk about debugging concurrent programs in Golang and a little bit about

9
0:00:38.400 --> 0:00:40.920
myself.

10
0:00:40.920 --> 0:00:42.120
My name is Andrei.

11
0:00:42.120 --> 0:00:47.680
I'm a software engineer originally from Ukraine, currently, unfortunately, living in Austria.

12
0:00:47.680 --> 0:00:55.640
I am a big fan of sports, gymnastics, crossfit, and different debuggers, et cetera.

13
0:00:55.640 --> 0:01:03.240
The interest in parallel programming has grown dramatically in recent years.

14
0:01:03.240 --> 0:01:09.040
And the added complexity of expressing concurrency has made debugging parallel programs even

15
0:01:09.040 --> 0:01:13.440
harder than debugging sequential programs.

16
0:01:13.440 --> 0:01:24.920
And usually, sorry, every day at work, I feel like I have these eight stages of debugging

17
0:01:24.920 --> 0:01:26.640
myself.

18
0:01:26.640 --> 0:01:31.120
So that can't happen.

19
0:01:31.120 --> 0:01:34.360
That does not happen on my machine.

20
0:01:34.360 --> 0:01:36.840
That should not happen.

21
0:01:36.840 --> 0:01:38.360
Why does it happen?

22
0:01:38.360 --> 0:01:41.000
Oh, I see now.

23
0:01:41.000 --> 0:01:44.040
I feel I know what's the problem.

24
0:01:44.040 --> 0:01:46.760
Then how did it ever work?

25
0:01:46.760 --> 0:01:54.200
So last couple days, I saw PR like, oh, it's not working since two years, some code.

26
0:01:54.200 --> 0:01:57.360
And like, who wrote this?

27
0:01:57.360 --> 0:02:02.200
And like, oh, wait, it was me.

28
0:02:02.200 --> 0:02:10.840
So the classical approach for debugging sequential programs involves very easy straightforward

29
0:02:10.840 --> 0:02:11.840
way.

30
0:02:11.840 --> 0:02:18.800
So we rapidly stop on and set break points with we just go step by step.

31
0:02:18.800 --> 0:02:27.040
And like, sometimes we print something, sometimes we continue, rerun, et cetera.

32
0:02:27.040 --> 0:02:35.080
So and this style we just usually we call is a tick-click debugging.

33
0:02:35.080 --> 0:02:41.760
But the problem, unfortunately, parallel or concurrent programs do not always have reproducible

34
0:02:41.760 --> 0:02:48.760
behavior, even when they run with the same inputs on the same machine with the same results.

35
0:02:48.760 --> 0:02:54.440
So an output results usually can be radically different.

36
0:02:54.440 --> 0:02:59.240
And it's hard to predict.

37
0:02:59.240 --> 0:03:08.200
This difference, a cure, for example, when you run some program, and as you can see,

38
0:03:08.200 --> 0:03:09.840
it's very dummy one.

39
0:03:09.840 --> 0:03:13.920
But output is different each time when I run it on my machine.

40
0:03:13.920 --> 0:03:17.840
Sometimes it's the same, but sometimes not.

41
0:03:17.840 --> 0:03:25.160
Yeah, I spent lots of time to read some books and articles and videos on YouTube.

42
0:03:25.160 --> 0:03:30.960
I just always trying to find like a question, like an answer to my question.

43
0:03:30.960 --> 0:03:35.960
OK, there is any like, OK, we have books how to write code.

44
0:03:35.960 --> 0:03:37.880
We have books how to write tests.

45
0:03:37.880 --> 0:03:39.640
OK, how to debug code.

46
0:03:39.640 --> 0:03:41.200
There is no books.

47
0:03:41.200 --> 0:03:45.240
Even there is no books to how debug concurrent programs.

48
0:03:45.240 --> 0:03:53.760
And so to start explaining my journey, how I usually do it, let's a little bit remind

49
0:03:53.760 --> 0:03:57.320
you what is gorytine.

50
0:03:57.320 --> 0:04:01.600
So gorytine is just like an abstraction.

51
0:04:01.600 --> 0:04:09.560
Yeah, it's just by the way, it's struct which handle gorytine under the hood inside of Go.

52
0:04:09.560 --> 0:04:16.520
And usually gorytines are multiplexed on different or multiply OS threads.

53
0:04:16.520 --> 0:04:24.400
So if one should block and like we're waiting for some I or call, others can continue to

54
0:04:24.400 --> 0:04:27.280
run.

55
0:04:27.280 --> 0:04:36.040
And there are also lots of design which hides many complexities of thread creation and management.

56
0:04:36.040 --> 0:04:39.240
So Golang do it on our own.

57
0:04:39.240 --> 0:04:41.400
So it's nice.

58
0:04:41.400 --> 0:04:48.240
And to create a gorytine, it's very easy, just prefix your function with Go keyword.

59
0:04:48.240 --> 0:04:53.960
And that's new gorytine, nothing complicated.

60
0:04:53.960 --> 0:04:59.800
By the way, who knows why they name it gorytines?

61
0:04:59.800 --> 0:05:01.280
Maybe somebody have ideas.

62
0:05:01.280 --> 0:05:08.800
Yeah, go ahead.

63
0:05:08.800 --> 0:05:15.440
Why not just call it gorytine?

64
0:05:15.440 --> 0:05:24.800
So in each language, we can just replace first letter and gorytine.

65
0:05:24.800 --> 0:05:25.800
Yes and no.

66
0:05:25.800 --> 0:05:31.680
So like they call it at least from what I read, they call it because like threads, coroutines,

67
0:05:31.680 --> 0:05:33.720
processes and so on.

68
0:05:33.720 --> 0:05:37.680
It's not an accurate explanation what gorytine does.

69
0:05:37.680 --> 0:05:45.400
So gorytine has its own simple model and how it's executed, et cetera, et cetera.

70
0:05:45.400 --> 0:05:50.120
And that's why they know it.

71
0:05:50.120 --> 0:05:52.160
Cool.

72
0:05:52.160 --> 0:05:53.920
So next question.

73
0:05:53.920 --> 0:06:01.160
Before I will share my experience, how do you think how can I debug my concurrent program?

74
0:06:01.160 --> 0:06:03.160
So nice.

75
0:06:03.160 --> 0:06:04.160
Nice.

76
0:06:04.160 --> 0:06:08.520
Can you repeat what the answer was for the stream?

77
0:06:08.520 --> 0:06:10.800
Thank you.

78
0:06:10.800 --> 0:06:14.000
Can you repeat the question, you mean?

79
0:06:14.000 --> 0:06:17.240
If you have an answer from the room, can you quickly repeat it so it's recorded on the

80
0:06:17.240 --> 0:06:18.240
stream?

81
0:06:18.240 --> 0:06:19.240
Okay.

82
0:06:19.240 --> 0:06:22.840
Yeah, will do.

83
0:06:22.840 --> 0:06:24.400
So let's repeat.

84
0:06:24.400 --> 0:06:27.720
How can I debug my concurrent program?

85
0:06:27.720 --> 0:06:31.600
So the gentleman suggested using print.

86
0:06:31.600 --> 0:06:33.600
Nice.

87
0:06:33.600 --> 0:06:34.600
Yes.

88
0:06:34.600 --> 0:06:35.600
Nice.

89
0:06:35.600 --> 0:06:38.440
It's also of depth, by the way.

90
0:06:38.440 --> 0:06:39.440
Okay.

91
0:06:39.440 --> 0:06:40.440
Any other ideas?

92
0:06:40.440 --> 0:06:41.440
Okay.

93
0:06:41.440 --> 0:06:42.440
Yes.

94
0:06:42.440 --> 0:06:43.440
Yeah.

95
0:06:43.440 --> 0:06:47.440
It's a good idea.

96
0:06:47.440 --> 0:06:50.720
Nice.

97
0:06:50.720 --> 0:06:57.280
So just to repeat for people who are watching, their ideas was using debugger.

98
0:06:57.280 --> 0:07:05.400
Delft, using trace or trace, using tests, et cetera.

99
0:07:05.400 --> 0:07:08.880
So my first assumption was, okay, playground.

100
0:07:08.880 --> 0:07:10.680
Let's play a little bit.

101
0:07:10.680 --> 0:07:19.480
And like a few years ago, like when I started like writing this talk, to be honest, there

102
0:07:19.480 --> 0:07:20.880
was like a limit.

103
0:07:20.880 --> 0:07:24.520
So playground worked only with Go, Max, Prods, 1.

104
0:07:24.520 --> 0:07:27.560
So it always like reproduced my program.

105
0:07:27.560 --> 0:07:32.400
But right now it's more or less simulate local developments.

106
0:07:32.400 --> 0:07:33.920
Okay.

107
0:07:33.920 --> 0:07:36.200
I have more like bright ideas.

108
0:07:36.200 --> 0:07:39.560
So maybe we can just color logs.

109
0:07:39.560 --> 0:07:41.280
I don't know.

110
0:07:41.280 --> 0:07:42.960
Visualize Go routines.

111
0:07:42.960 --> 0:07:44.000
Why not?

112
0:07:44.000 --> 0:07:47.920
So here's a funny package, which just what it does.

113
0:07:47.920 --> 0:07:54.120
It's just like print different Go routines with different colors like this.

114
0:07:54.120 --> 0:07:55.120
So yeah.

115
0:07:55.120 --> 0:08:03.800
I mean, if you do something very quick, you can just figure out which Go routine, which

116
0:08:03.800 --> 0:08:07.280
color, et cetera.

117
0:08:07.280 --> 0:08:09.920
Yeah.

118
0:08:09.920 --> 0:08:10.920
Return to seriously.

119
0:08:10.920 --> 0:08:12.960
There is interesting article.

120
0:08:12.960 --> 0:08:20.680
It's quite old, but one of my friends from Ukraine, he like wrote this article also a

121
0:08:20.680 --> 0:08:22.240
few years ago.

122
0:08:22.240 --> 0:08:29.000
He decided to visualize how all this scheduling or routines works with these fancy pictures.

123
0:08:29.000 --> 0:08:31.080
Also very good article to read.

124
0:08:31.080 --> 0:08:33.840
Highly recommend.

125
0:08:33.840 --> 0:08:42.720
Another idea is try to print how Go schedule events.

126
0:08:42.720 --> 0:08:54.560
So there is the environment variable, which can print you some extra information and yeah.

127
0:08:54.560 --> 0:09:02.760
And of course, using the buggers today, I will focus a little bit on Delft and a little

128
0:09:02.760 --> 0:09:05.120
bit on GDB.

129
0:09:05.120 --> 0:09:09.040
So next question.

130
0:09:09.040 --> 0:09:12.880
Can I set break point inside Go routine?

131
0:09:12.880 --> 0:09:14.880
Any ideas?

132
0:09:14.880 --> 0:09:16.480
Yes, no.

133
0:09:16.480 --> 0:09:17.480
Yes.

134
0:09:17.480 --> 0:09:18.480
So the answer is yes.

135
0:09:18.480 --> 0:09:19.480
Yeah.

136
0:09:19.480 --> 0:09:22.960
Typically you can set break point inside Go routine.

137
0:09:22.960 --> 0:09:30.760
You can jump into this Go routine, see what's inside and yeah, it's very handy, especially

138
0:09:30.760 --> 0:09:37.200
if you develop like server and other stuff.

139
0:09:37.200 --> 0:09:39.760
Okay.

140
0:09:39.760 --> 0:09:41.560
What about channels?

141
0:09:41.560 --> 0:09:54.080
So if I decide like send a message to the buffer channel of size four, yeah, it's very

142
0:09:54.080 --> 0:09:56.440
nice that you can set break point.

143
0:09:56.440 --> 0:10:04.960
You can pre-channel and Delft has very fancy like metadata, which shows you even like current

144
0:10:04.960 --> 0:10:07.800
channel state.

145
0:10:07.800 --> 0:10:15.800
So you see, I send like one, it's a first item and some information also useful.

146
0:10:15.800 --> 0:10:24.880
Then if I add another one, so like next, you see now I have two elements in channel and

147
0:10:24.880 --> 0:10:27.280
the small problem.

148
0:10:27.280 --> 0:10:34.400
Usually like if I want to send the message to channel from Delft CLI, unfortunately,

149
0:10:34.400 --> 0:10:35.400
it's not supported.

150
0:10:35.400 --> 0:10:37.600
Here's the issue I created.

151
0:10:37.600 --> 0:10:38.600
Yeah.

152
0:10:38.600 --> 0:10:49.600
And there's a comment that yeah, we can fix it, but yeah, I hope we will fix it some time.

153
0:10:49.600 --> 0:10:50.880
Yeah.

154
0:10:50.880 --> 0:11:01.400
So you can't set, so technically it's possible, but it's not, I mean, so it can be same semantic.

155
0:11:01.400 --> 0:11:07.400
You can set and Delft will handle it.

156
0:11:07.400 --> 0:11:09.120
Okay.

157
0:11:09.120 --> 0:11:14.280
Now let's focus a little bit on how we can debug routines.

158
0:11:14.280 --> 0:11:22.880
So yeah, if you're inside a guartine and you will print a state of guartine, there's a

159
0:11:22.880 --> 0:11:24.600
key word guartine.

160
0:11:24.600 --> 0:11:34.120
It prints current guartine where you put your breakpoint, but if you have lots of guartines,

161
0:11:34.120 --> 0:11:36.440
there's like interesting feature.

162
0:11:36.440 --> 0:11:39.800
I really use a lot.

163
0:11:39.800 --> 0:11:42.800
So but let's step back a little bit.

164
0:11:42.800 --> 0:11:46.960
There's another idea and like implementation.

165
0:11:46.960 --> 0:11:49.380
You can use this profile labels.

166
0:11:49.380 --> 0:11:51.620
So it's inside P prof model.

167
0:11:51.620 --> 0:12:00.200
So you can run P prof do and inside through context, run your code and it will like mark

168
0:12:00.200 --> 0:12:02.480
your guartine with label.

169
0:12:02.480 --> 0:12:05.840
And usually you use these labels for profiling.

170
0:12:05.840 --> 0:12:17.000
So you can open P prof profiles and see like some different metrics.

171
0:12:17.000 --> 0:12:21.200
But you can do it also with Delft, which is super cool.

172
0:12:21.200 --> 0:12:35.960
So you can, if you label your guartines with labels like this, or if you use like middleware,

173
0:12:35.960 --> 0:12:37.280
you can also do it.

174
0:12:37.280 --> 0:12:41.880
I mean, if you use web server, you can use this middleware.

175
0:12:41.880 --> 0:12:49.680
I post link on next slide and it will automatically like add labels to all your handlers, which

176
0:12:49.680 --> 0:12:50.680
is nice.

177
0:12:50.680 --> 0:12:58.840
You can see like which handler you are currently because if you print guartines, you will see

178
0:12:58.840 --> 0:13:04.080
like even in Delft, you will see lots of unreadable information.

179
0:13:04.080 --> 0:13:11.000
But if you just need to focus, I don't know, on login, guartines or like guartines, which

180
0:13:11.000 --> 0:13:15.560
is doing something with your database, you can label it in the same manner as you do

181
0:13:15.560 --> 0:13:16.920
with P prof.

182
0:13:16.920 --> 0:13:21.200
And then, yeah, also you can do it directly, by the way.

183
0:13:21.200 --> 0:13:24.920
This library, which I mentioned, it's very small one.

184
0:13:24.920 --> 0:13:29.280
It's also support like set labels, just a wrapper.

185
0:13:29.280 --> 0:13:31.240
So very handy one.

186
0:13:31.240 --> 0:13:40.000
And then if you run guartines, a keyword inside Delft debugger, minus L, it will print guartines.

187
0:13:40.000 --> 0:13:47.640
It's just very simple hello world, which has like this main guartine and few other guartines

188
0:13:47.640 --> 0:13:50.960
without any labels, etc.

189
0:13:50.960 --> 0:14:04.720
But then I created another like project inspired by one article.

190
0:14:04.720 --> 0:14:15.080
And yeah, so here you can print all guartines, which relate it to your like label page.

191
0:14:15.080 --> 0:14:22.760
And yeah, also you can go to docs and find different like group by, I don't know, filters.

192
0:14:22.760 --> 0:14:25.160
So it's very handy.

193
0:14:25.160 --> 0:14:30.560
And how you can find your guartine, then you can switch to this guartine.

194
0:14:30.560 --> 0:14:35.160
If you don't know, also you can print or list source code.

195
0:14:35.160 --> 0:14:38.320
You can set new break point.

196
0:14:38.320 --> 0:14:42.000
It's very nice.

197
0:14:42.000 --> 0:14:46.320
And yeah, also you can use this demo project.

198
0:14:46.320 --> 0:14:52.440
It's not mine, but it's more written for Golan.

199
0:14:52.440 --> 0:14:56.640
But if to run it, you just need to this small tweak.

200
0:14:56.640 --> 0:15:02.400
You need pass some build flags and tags debugger, otherwise this library will not work.

201
0:15:02.400 --> 0:15:05.240
And then you can you can repeat everything I did.

202
0:15:05.240 --> 0:15:08.720
I highly recommend to play with that.

203
0:15:08.720 --> 0:15:16.760
And when you need it, you will be already like with everything you need.

204
0:15:16.760 --> 0:15:21.920
Regarding GDB, yeah, I play a little bit with them.

205
0:15:21.920 --> 0:15:27.160
Inside not supported what I need for Golan.

206
0:15:27.160 --> 0:15:35.520
Yeah, it has this like info guartines keyword.

207
0:15:35.520 --> 0:15:41.480
As far as I remember, you can't like filter guartines and it's not readable.

208
0:15:41.480 --> 0:15:46.040
So like, yeah, especially this part.

209
0:15:46.040 --> 0:15:47.040
Yeah.

210
0:15:47.040 --> 0:15:51.880
And then I decided to not waste my time, to be honest, because it's yeah, you can just

211
0:15:51.880 --> 0:15:59.480
use Delft and for such problem rather than playing with GDB.

212
0:15:59.480 --> 0:16:01.800
Cool.

213
0:16:01.800 --> 0:16:10.120
So next, not only with debugger, you can find your problems.

214
0:16:10.120 --> 0:16:17.480
One important problem in Golan world is deadlocks.

215
0:16:17.480 --> 0:16:26.360
And with deadlocks, usually program gets stuck on the channel send operation, which waiting

216
0:16:26.360 --> 0:16:31.480
forever, for example, to read the value.

217
0:16:31.480 --> 0:16:38.480
And nice that Golan support detection of these situations compared to other languages.

218
0:16:38.480 --> 0:16:48.880
For example, Python doesn't support this deadlock detection, which is hard to debug such problems.

219
0:16:48.880 --> 0:16:53.280
And yeah.

220
0:16:53.280 --> 0:16:59.280
If you need like real world examples, you can see this very interesting library, go

221
0:16:59.280 --> 0:17:00.920
deadlock.

222
0:17:00.920 --> 0:17:08.360
Which using this library, also found lots of deadlocks on Cockroach DB.

223
0:17:08.360 --> 0:17:17.280
And there are lots of interesting examples how mutexes can be handled properly, how to

224
0:17:17.280 --> 0:17:20.280
write it properly, and etc.

225
0:17:20.280 --> 0:17:30.120
It's like this library is an entire separate like discussion.

226
0:17:30.120 --> 0:17:38.440
According to our case, yeah, I wrote like I put two slides is very simple example.

227
0:17:38.440 --> 0:17:46.440
So yeah, sometimes you you have this conflicting access and you have this data races.

228
0:17:46.440 --> 0:17:53.000
And I saw it a few times in some open source projects.

229
0:17:53.000 --> 0:17:55.720
But usually people do not do it.

230
0:17:55.720 --> 0:18:02.960
So I highly recommend run UCI by applying with this dash race, especially tests.

231
0:18:02.960 --> 0:18:12.160
It helps you like always run with this flag and it will print you like users data races

232
0:18:12.160 --> 0:18:14.080
or not.

233
0:18:14.080 --> 0:18:20.720
This dash race not always can find all data races.

234
0:18:20.720 --> 0:18:24.160
Some common yes, but sometimes no.

235
0:18:24.160 --> 0:18:26.800
But highly recommend to add it to your project.

236
0:18:26.800 --> 0:18:29.280
So never skip.

237
0:18:29.280 --> 0:18:36.920
So now I have like seven.

238
0:18:36.920 --> 0:18:38.360
I have it.

239
0:18:38.360 --> 0:18:42.340
I have a seven rules for you.

240
0:18:42.340 --> 0:18:48.960
So how to unblock yourself when you get stuck on something and you don't know how to debug

241
0:18:48.960 --> 0:18:49.960
it.

242
0:18:49.960 --> 0:18:54.960
So first never assume a particular order of execution.

243
0:18:54.960 --> 0:19:04.920
So when you're writing concurrent programs, try to always think about not running it in

244
0:19:04.920 --> 0:19:07.520
particular order.

245
0:19:07.520 --> 0:19:14.560
Especially it works with some benchmarks and tests.

246
0:19:14.560 --> 0:19:23.080
So try to not put this like I also saw it lots of times when people run tests, when

247
0:19:23.080 --> 0:19:28.040
you run go tests by default, if you know, they run it in parallel.

248
0:19:28.040 --> 0:19:34.960
But usually people say like, no, run it like sequentially.

249
0:19:34.960 --> 0:19:39.840
And that's not a good idea.

250
0:19:39.840 --> 0:19:45.040
Another advice, it's more about designing than writing code.

251
0:19:45.040 --> 0:19:50.120
Try to implement any concurrency logic at highest level as possible.

252
0:19:50.120 --> 0:19:56.520
Try to not pass lots of channels, lots of like go routines, etc.

253
0:19:56.520 --> 0:20:07.200
Try to like keep logic separately and this concurrency separately.

254
0:20:07.200 --> 0:20:16.000
Don't forget, as I said, go race not always helps because it's not the text when program

255
0:20:16.000 --> 0:20:17.320
like whole freeze.

256
0:20:17.320 --> 0:20:23.240
It's only when a subset of go routines gets stuck.

257
0:20:23.240 --> 0:20:29.760
As gentlemen suggested, you can use Cs trace and different tools for tracing, which can

258
0:20:29.760 --> 0:20:37.760
help you to see like, are we waiting for some resource like reading file access net?

259
0:20:37.760 --> 0:20:41.440
It's more low level, but it's very useful.

260
0:20:41.440 --> 0:20:47.140
Yeah, I show it on another talk, but you probably know about it.

261
0:20:47.140 --> 0:20:54.320
You can use conditional breakpoints, which helps you to cover cases, especially when

262
0:20:54.320 --> 0:21:02.600
it's concurrent program so you can catch only your case, not like click next on every

263
0:21:02.600 --> 0:21:05.280
go routine.

264
0:21:05.280 --> 0:21:09.480
As I said, you can use shadow and tracer.

265
0:21:09.480 --> 0:21:12.320
You can use go deadlock.

266
0:21:12.320 --> 0:21:14.640
And yeah, last but not least, use debugger.

267
0:21:14.640 --> 0:21:15.640
Don't forget about it.

268
0:21:15.640 --> 0:21:18.080
It's also very handy.

269
0:21:18.080 --> 0:21:24.640
Like every release, every version, I see how the buggers are adding new stuff, which is

270
0:21:24.640 --> 0:21:26.440
nice.

271
0:21:26.440 --> 0:21:28.280
Cool.

272
0:21:28.280 --> 0:21:38.720
So I have like few references because to cover everything is hard in 25 minutes.

273
0:21:38.720 --> 0:21:43.240
I will post slides so you can accurately read everything.

274
0:21:43.240 --> 0:21:48.560
And I will maybe to like picture it.

275
0:21:48.560 --> 0:21:52.200
And thank you.

276
0:21:52.200 --> 0:21:54.200
Thank you.

277
0:21:54.200 --> 0:22:01.120
Any questions?

278
0:22:01.120 --> 0:22:02.920
Are there any questions?

279
0:22:02.920 --> 0:22:08.760
Yeah, before you're thinking, if you want to donate to Ukraine, just let me know.

280
0:22:08.760 --> 0:22:15.760
You my friends right now are fighting so we can help directly if you're afraid.

281
0:22:15.760 --> 0:22:17.760
Thank you.

282
0:22:17.760 --> 0:22:31.320
Oh, I have a question.

283
0:22:31.320 --> 0:22:37.560
Have we tried using tools such as Rr or Hermit, which try to execute the program in a deterministic

284
0:22:37.560 --> 0:22:38.600
fashion?

285
0:22:38.600 --> 0:22:39.600
You mean backwards?

286
0:22:39.600 --> 0:22:43.680
Yes, they can do a recording of the institution and then replay it.

287
0:22:43.680 --> 0:22:46.360
But the point is that the recording is deterministic.

288
0:22:46.360 --> 0:22:52.560
Yeah, I use it for sequential debugging, never for concurrent debugging.

289
0:22:52.560 --> 0:22:54.320
I mean, maybe it's possible.

290
0:22:54.320 --> 0:22:59.720
But in my case, it's I covered what I just showed.

291
0:22:59.720 --> 0:23:01.320
Of course, there are other cases.

292
0:23:01.320 --> 0:23:07.320
I will try.

293
0:23:07.320 --> 0:23:11.280
If you are leaving the room, try to stay quiet for a second.

294
0:23:11.280 --> 0:23:12.280
Do not talk.

295
0:23:12.280 --> 0:23:13.280
Chairs are OK.

296
0:23:13.280 --> 0:23:17.280
So we can still hear any questions.

297
0:23:17.280 --> 0:23:23.240
Well, no more questions.

298
0:23:23.240 --> 0:23:24.920
That means your talk was very clear.

299
0:23:24.920 --> 0:23:25.920
Thank you.

300
0:23:25.920 --> 0:23:26.920
And a round of applause.

301
0:23:26.920 --> 0:23:52.880
Thanks.


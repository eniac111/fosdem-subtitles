WEBVTT

00:00.000 --> 00:10.320
And it is time for our next talk. I would like you to welcome a venduler.

00:10.320 --> 00:24.980
Hello, I'm Wendy. I'm a software engineer. I work at third head for six years now and

00:24.980 --> 00:28.680
and I'm part of the system in starting.

00:28.680 --> 00:32.680
And today, welcome on my talk about the communication

00:32.680 --> 00:35.780
with D-Bus from Python applications.

00:35.780 --> 00:37.700
So first of all, I would like to clarify

00:37.700 --> 00:40.760
that I'm in no way an expert on D-Bus.

00:40.760 --> 00:43.860
I'm just a very lazy programmer who wrote library

00:43.860 --> 00:46.440
to make her job easier.

00:46.440 --> 00:48.340
So what is D-Bus?

00:48.340 --> 00:51.140
It's a shortcut for the disk to bus,

00:51.140 --> 00:55.140
and basically it's a system for the inter-process

00:55.140 --> 00:56.480
communication.

00:56.480 --> 00:59.880
It consists of two parts, the protocol and the bus daemon,

00:59.880 --> 01:03.280
and on a typical Linux distribution,

01:03.280 --> 01:06.280
you can usually find the two bus daemon,

01:08.320 --> 01:11.320
the session bus and the system bus.

01:11.320 --> 01:14.860
So for example, this is a screenshot from my laptop.

01:14.860 --> 01:17.460
This is the visual representation of the system buses

01:17.460 --> 01:20.540
and services that you can find.

01:20.540 --> 01:22.340
And for the demonstration purposes,

01:22.340 --> 01:25.500
I've created the example chat service,

01:25.500 --> 01:28.740
and you can see on the right side

01:28.740 --> 01:31.980
that this service provides for objects,

01:33.120 --> 01:36.480
and this object implements some interfaces.

01:36.480 --> 01:40.460
So how do we talk to this thing from Python?

01:40.460 --> 01:43.260
We will use the D-Bus library for that.

01:43.260 --> 01:45.620
It's a library that I wrote some years ago,

01:45.620 --> 01:47.960
and basically it's an abstraction level

01:47.960 --> 01:51.460
above Python bindings for the GV library.

01:53.260 --> 01:55.240
Okay, so let's jump in.

01:55.240 --> 01:56.840
Let's start with the client part.

01:56.840 --> 01:59.700
So we know that there is a D-Bus service

01:59.700 --> 02:01.480
that we want to talk to,

02:01.480 --> 02:05.440
and how do we do it from the Python application?

02:05.440 --> 02:07.780
First of all, we need to establish the connection

02:07.780 --> 02:09.020
to the message bus.

02:09.020 --> 02:10.780
In this case, we know it's the session bus,

02:10.780 --> 02:13.960
so we will use the session message bus.

02:13.960 --> 02:15.760
And the other thing that we have to create

02:15.760 --> 02:19.500
is the proxy of the remote object we want to talk to.

02:19.500 --> 02:21.600
For that, we need to know two things.

02:21.600 --> 02:25.540
The first one is the name of the D-Bus service.

02:25.540 --> 02:29.800
The second one is the object path of the remote object.

02:29.800 --> 02:31.400
After that, we can use the proxy

02:31.400 --> 02:33.180
like any other Python object.

02:33.180 --> 02:35.780
So we can get and set properties.

02:35.780 --> 02:37.520
We can call methods.

02:38.820 --> 02:42.980
And another thing we can do is to watch D-Bus signals.

02:42.980 --> 02:46.980
D-Bus signals is something you can connect to.

02:48.180 --> 02:49.720
You will create a callback,

02:49.720 --> 02:51.320
connect this callback to the signal,

02:51.320 --> 02:54.420
and every time this service emits the signal,

02:54.420 --> 02:58.580
your callback will be called and run and processed.

03:00.520 --> 03:02.820
So this is how we do it.

03:02.820 --> 03:05.860
This service, or this run proxy,

03:05.860 --> 03:09.800
has one signal called message received signal,

03:09.800 --> 03:11.160
and you can connect the callback

03:11.160 --> 03:14.440
to the message that you receive.

03:14.440 --> 03:15.600
And that's it.

03:16.740 --> 03:18.380
This requires one more step,

03:18.380 --> 03:21.880
and that's to run an event loop.

03:21.880 --> 03:25.480
Basically, it's a little complicated to explain.

03:25.480 --> 03:27.480
It's just a black box that runs forever

03:27.480 --> 03:31.660
and handles any asynchronous events that can come up,

03:32.560 --> 03:34.820
like emitting of a signal.

03:34.820 --> 03:38.100
So the things run forever unless you stop the loop

03:38.100 --> 03:41.360
or kill the application.

03:41.360 --> 03:44.760
Yeah, so let's actually do some demonstration

03:44.760 --> 03:49.100
because I think the demonstrations are doomed to fail,

03:49.100 --> 03:50.340
but let's try.

03:50.340 --> 03:53.340
So here I need to start my server.

03:56.180 --> 03:57.620
Let's not dive into that yet.

03:57.620 --> 04:00.120
It's just I needed to have a training.

04:00.120 --> 04:03.280
And we can actually check the defeat,

04:03.280 --> 04:07.660
and on the session bus, you can look for my example chat.

04:07.660 --> 04:09.820
And you can see what you saw on the slides.

04:09.820 --> 04:11.400
Sorry, it's so little.

04:11.400 --> 04:14.360
And there's my Room 3, and there are some interfaces,

04:14.360 --> 04:17.140
and this is the interface I'm interested in.

04:17.140 --> 04:19.640
So let's do some stuff with it.

04:20.940 --> 04:25.100
The first one, we will ask for the name of the room,

04:27.440 --> 04:28.440
and that's it.

04:28.440 --> 04:31.440
So here I can just write the first one,

04:33.720 --> 04:36.580
and it just prints three because we asked

04:36.580 --> 04:38.580
the Room 3 for the name.

04:39.760 --> 04:42.520
The second thing that we can do is to send a message

04:42.520 --> 04:43.520
to the room.

04:44.500 --> 04:46.500
So this is the number two.

04:47.700 --> 04:49.660
Yeah, this doesn't print anything,

04:49.660 --> 04:53.840
but as you can see here, the server received a message

04:53.840 --> 04:56.440
for this room, and it printed.

04:56.440 --> 05:00.280
So if I call it server times, it prints this stuff.

05:00.280 --> 05:04.440
And if I change it to something else, I can actually talk

05:09.180 --> 05:12.060
to another object and send another message

05:12.060 --> 05:15.520
and stuff like that, and it just will send

05:15.520 --> 05:18.600
a different message to a different room.

05:18.600 --> 05:20.000
Yeah, it's a very primitive chat.

05:20.000 --> 05:23.260
Don't try to find something clever about it.

05:23.260 --> 05:25.860
And the last thing I want to show you

05:25.860 --> 05:27.940
is the signal processing.

05:27.940 --> 05:30.020
So this is how it looks like.

05:32.020 --> 05:34.820
The callback will just print the receipt message

05:34.820 --> 05:38.980
with some additional stuff, and this is where I connect

05:39.860 --> 05:43.400
the callback to the signal, and then I will just

05:43.400 --> 05:45.560
start the event loop.

05:45.560 --> 05:48.140
So for that, I actually have to...

05:48.140 --> 05:48.960
Yeah.

05:52.000 --> 05:55.100
So this thing is listening, it's waiting in the event loop,

05:55.100 --> 05:57.080
and it's waiting for any events.

05:57.080 --> 06:00.740
So if I, again, send some messages to the...

06:03.440 --> 06:06.980
Oh, and something, yeah, because I changed it.

06:06.980 --> 06:10.480
That's why you shouldn't change your code.

06:12.820 --> 06:15.220
It should work now, yes.

06:15.220 --> 06:19.060
Okay, so because it's listening on the Room 3,

06:21.700 --> 06:24.640
so if I send a message to the Room 3,

06:24.640 --> 06:28.500
it's well printed here, and this service behind it,

06:28.500 --> 06:31.300
it's still running, it receives the messages.

06:31.300 --> 06:32.140
So, okay.

06:33.240 --> 06:36.140
That was the client side of the things.

06:36.140 --> 06:38.340
Let's be the service.

06:38.340 --> 06:40.520
How do we do this?

06:40.520 --> 06:43.560
First of all, we need to register the DBUS name

06:43.560 --> 06:45.120
of the service.

06:45.120 --> 06:49.300
That's basically, you announce the name of your process,

06:50.300 --> 06:52.200
so the other applications can find you,

06:52.200 --> 06:54.600
and reach you, and talk to you.

06:54.600 --> 06:56.060
So the other thing that you have to do

06:56.060 --> 06:57.800
is to publish some objects,

06:57.800 --> 07:01.500
so other applications can actually use some API

07:01.500 --> 07:05.580
that you provide, and do some stuff with your service.

07:05.580 --> 07:08.240
And the last thing, again, is to start the event loop,

07:08.240 --> 07:11.380
and the event loop handles the incoming DBUS calls,

07:11.380 --> 07:14.380
calls the relevant handlers and callbacks,

07:14.380 --> 07:18.660
and sends the return values to the callers.

07:18.660 --> 07:21.120
So, the last part that is missing

07:21.120 --> 07:24.860
is how do we create this DBUS object?

07:24.860 --> 07:27.860
Every DBUS object needs to provide something

07:27.860 --> 07:30.740
called the XML specification.

07:30.740 --> 07:31.560
This is,

07:34.500 --> 07:37.880
it's a declaration of our interfaces, methods,

07:37.880 --> 07:42.340
properties, and signals that this DBUS object implements,

07:42.340 --> 07:44.820
and that you can call.

07:44.820 --> 07:46.880
And when I saw this for the first time,

07:46.880 --> 07:48.680
I thought, oh my god, my colleagues will do

07:48.680 --> 07:50.560
some metipos in the things.

07:50.560 --> 07:53.420
And we will have so many bugs.

07:53.420 --> 07:56.060
So the first mission I had was actually

07:56.060 --> 07:58.260
to get rid of this, and make it generated

07:58.260 --> 08:00.560
automatically from the code,

08:00.560 --> 08:03.100
because I knew that we are going to do a lot of changes

08:03.100 --> 08:06.040
all of the time, because it was a huge project.

08:06.040 --> 08:11.040
And in no way, we would keep this same as the code.

08:12.180 --> 08:14.240
So let's look how it can be done with DBUS.

08:15.740 --> 08:17.840
Or you can, all you have to do

08:17.840 --> 08:20.280
is to just use the DBUS interface decorator,

08:20.280 --> 08:23.120
and provide the name of your interface.

08:23.120 --> 08:28.120
And this decorator just looks at the class members

08:28.960 --> 08:30.400
of the decorated class.

08:30.400 --> 08:32.700
And for every member, it will generate this piece

08:32.700 --> 08:37.640
of the specification, and it will create

08:37.640 --> 08:39.840
this whole specification.

08:39.840 --> 08:43.040
Sometimes it collects more interfaces,

08:43.040 --> 08:44.580
it's more complicated.

08:44.580 --> 08:49.480
But at the end, you don't have to do or write any XML,

08:49.480 --> 08:51.920
but you can have access to it,

08:51.920 --> 08:53.620
and use it to publish your object.

08:54.720 --> 08:56.980
So we will start with this decorator,

08:56.980 --> 09:00.520
and then you can just define a DBUS method.

09:00.520 --> 09:03.200
This is definition, and at the same time,

09:03.200 --> 09:04.700
the implementation of the method.

09:04.700 --> 09:06.760
So you can see it prints the message.

09:08.200 --> 09:11.340
One thing that you have to do is to provide type hints

09:11.340 --> 09:14.600
for the arguments and the return values,

09:14.600 --> 09:17.940
because DBUS needs to know about the data types

09:17.940 --> 09:20.240
of these of the arguments.

09:21.440 --> 09:23.840
And another thing, yeah, everything is comma-cased.

09:23.840 --> 09:25.420
I'm sorry about that.

09:25.420 --> 09:29.260
It's a standard for DBUS, and it didn't make a lot of sense

09:29.260 --> 09:32.920
to try some mapping from the traditional Python

09:32.920 --> 09:35.260
to this comma-cased thing.

09:35.260 --> 09:37.500
So it's easier to just try the comma-cased.

09:39.500 --> 09:43.300
So this is the method, and this is how to define

09:43.300 --> 09:45.360
a DBUS property, it's just a Python property

09:45.360 --> 09:47.540
with a type hint again.

09:47.540 --> 09:51.180
And last but not least, DBUS signal,

09:51.180 --> 09:53.340
you need to use a special decorator for that.

09:54.540 --> 09:57.480
And if this signal emits some additional arguments,

09:57.480 --> 10:02.480
you need to specify them as arguments of the method,

10:02.680 --> 10:03.520
kind of, yeah.

10:04.760 --> 10:06.720
This method is never called, it's just used

10:06.720 --> 10:08.720
for the definition of the signal.

10:09.800 --> 10:12.360
So that's it.

10:12.360 --> 10:14.960
Let's have a look at the implementation

10:14.960 --> 10:18.040
of how it looks like when you put it all together.

10:19.100 --> 10:21.700
So this is the classroom.

10:22.700 --> 10:25.740
There is the decorator, and as you can see,

10:25.740 --> 10:28.280
there is just all the definitions and implementation

10:28.280 --> 10:31.880
that this class needs, and the XML is just generated

10:31.880 --> 10:33.120
by the decorator.

10:33.120 --> 10:35.980
You don't need to care about anything.

10:37.120 --> 10:39.560
The chat also has a DBUS interface,

10:39.560 --> 10:41.160
but it doesn't contain anything.

10:41.160 --> 10:46.160
Here we can see later how the XML looks like,

10:46.500 --> 10:49.480
and you create a connection to the message bus,

10:49.480 --> 10:51.680
you register the name of the service,

10:51.680 --> 10:55.920
you publish some objects, and you start the event loop,

10:55.920 --> 10:56.740
and that's all.

10:58.220 --> 11:01.760
In this case, it's good to disconnect from the bus.

11:01.760 --> 11:05.120
There's an open-floor request to use the session bus

11:05.120 --> 11:07.920
as a context manager because it's nicer,

11:07.920 --> 11:09.460
but it's not matched yet.

11:09.460 --> 11:13.620
Because it will unregister everything that you did here,

11:13.620 --> 11:15.220
so that's a good thing to do.

11:15.220 --> 11:20.160
So, and here we can see that when the server was started,

11:20.160 --> 11:22.400
it printed the interfaces that were generated,

11:22.400 --> 11:25.200
so the first one is empty, there's nothing there,

11:25.200 --> 11:28.000
but with the room, it contains everything

11:28.000 --> 11:30.340
that was inside of that class.

11:30.340 --> 11:32.580
So yeah, this was completely generated.

11:32.580 --> 11:33.840
You don't have to care about it.

11:33.840 --> 11:37.840
You don't have to figure out what type S is.

11:37.840 --> 11:39.640
In this case, it's simple, but sometimes

11:39.640 --> 11:42.520
it gets a little more not so pretty.

11:44.120 --> 11:46.360
So yeah, you don't have to care about it,

11:46.360 --> 11:47.560
which is, I think, great.

11:48.700 --> 11:49.900
Features.

11:49.900 --> 11:51.660
So, this bus has a lot of features

11:51.660 --> 11:54.200
because the project I was working on was big,

11:54.200 --> 11:57.540
so we wanted to do as many simplifications as we could.

11:59.000 --> 12:01.400
So one thing that we did, okay,

12:01.400 --> 12:03.180
I want to mention one thing.

12:03.180 --> 12:07.340
I decided I will focus on the end result of these features

12:07.340 --> 12:10.540
because it's a little difficult to explain the definitions

12:10.540 --> 12:12.720
and like all the steps you need to do before that,

12:12.720 --> 12:15.080
so I will just show you what you will end up with

12:15.080 --> 12:16.660
in your code.

12:16.660 --> 12:20.320
So the first thing I want to mention is the management

12:20.320 --> 12:22.920
of the bus names and pass, because you could see

12:22.920 --> 12:25.720
that there are a lot of strings you need to handle.

12:25.720 --> 12:28.700
And it's very easy to make typos in this again.

12:29.800 --> 12:34.560
So, I can, okay, yeah.

12:34.560 --> 12:38.140
So it's very easy to make typos in that as well.

12:38.140 --> 12:40.980
So basically, this bus provides a system

12:40.980 --> 12:45.780
that allows you to define namespaces and objects

12:45.780 --> 12:48.680
that are published in these namespaces.

12:48.680 --> 12:51.820
And at the end, you will have these very simple objects

12:51.820 --> 12:56.820
called chat and trims3, and you can just use these objects

12:57.660 --> 13:00.300
to create proxies or ask for the interface name

13:00.300 --> 13:03.460
or ask for the service name or get the object pass,

13:03.460 --> 13:06.160
and you don't have to care about the strings behind it

13:06.160 --> 13:09.740
because they are created from what you defined earlier.

13:12.100 --> 13:15.440
Yeah, I can get to that later if you have time.

13:15.440 --> 13:20.420
So another thing that the bus provides

13:20.420 --> 13:25.260
is management of a group of publishable objects.

13:25.260 --> 13:29.220
So let's say that the chat is not static,

13:29.220 --> 13:30.600
it doesn't have only three rooms,

13:30.600 --> 13:34.500
but you can ask the chat to create a new room,

13:34.500 --> 13:36.900
and you want to get the bus pass of that room

13:36.900 --> 13:38.140
so you can connect to it.

13:39.140 --> 13:43.200
So yeah, you can implement it manually on your own

13:43.200 --> 13:45.380
and make sure that every room has a unique pass,

13:45.380 --> 13:48.140
and if someone wants to do something with that room,

13:48.140 --> 13:52.220
you can just figure out again what was the room,

13:52.220 --> 13:55.220
or you can just use the room container.

13:55.220 --> 13:57.320
It's very easy, you just provide the namespace

13:57.320 --> 14:00.660
that the container can use, and you will specify

14:00.660 --> 14:05.560
the message bus that can be used to publish these objects.

14:05.560 --> 14:08.200
And the whole purpose of this container

14:08.200 --> 14:12.840
is just to give it a Python object and get a debus pass,

14:12.840 --> 14:15.880
and it works the same way backwards.

14:15.880 --> 14:19.380
So if you receive an object pass, you can get room.

14:19.380 --> 14:24.380
So with this mapping, you can deal with this mapping

14:24.380 --> 14:29.380
very early, and in your code, you only have the objects.

14:30.280 --> 14:32.620
You don't have to care about the debus implementation

14:32.620 --> 14:37.180
behind it, so yeah, it's a little difficult to explain,

14:37.180 --> 14:40.420
but it can simplify your life load.

14:43.060 --> 14:45.060
Yeah, another thing I want to talk about

14:45.060 --> 14:47.500
is how to handle debus errors.

14:47.500 --> 14:52.400
So this bus raises a default exception by default,

14:52.400 --> 14:55.840
but sometimes you want to handle a specific debus error,

14:55.840 --> 14:59.740
or maybe you want to raise a specific debus error

14:59.740 --> 15:01.940
from your service.

15:01.940 --> 15:03.720
It's very easy thing to do.

15:03.720 --> 15:05.320
There's a special decorator for that

15:05.320 --> 15:07.620
that you can use for your exceptions,

15:07.620 --> 15:10.280
and in the decorator, you specify the debus name

15:10.280 --> 15:12.960
of this error, and that's all you have to do

15:12.960 --> 15:15.400
to be able to use this exception in your code.

15:15.400 --> 15:20.200
So once you decorate it, you can raise it in a service,

15:20.200 --> 15:22.100
and you can accept it in the client,

15:22.100 --> 15:25.000
and you don't have to care about the magic between that.

15:26.340 --> 15:28.300
Yeah, that's also a cool thing to do.

15:29.840 --> 15:33.980
Debus structures, so this is very, yeah,

15:33.980 --> 15:36.280
this is a funny thing.

15:36.280 --> 15:39.220
Debus doesn't have native support for structures,

15:39.220 --> 15:43.660
so what everyone does is they send dictionaries

15:43.660 --> 15:46.760
that map attribute names, attribute values,

15:46.760 --> 15:49.560
and since these values can be of different types,

15:49.560 --> 15:53.460
you have to wrap them inside variants.

15:53.460 --> 15:55.960
Variant is a special data type

15:55.960 --> 15:59.900
that basically couples the data and the type together,

15:59.900 --> 16:03.800
so when you send it from your service,

16:03.800 --> 16:06.740
the client is able to interpret the data,

16:06.740 --> 16:10.980
even though it didn't know the type of this data before.

16:12.420 --> 16:15.780
So this is pretty horrible thing to work with,

16:15.780 --> 16:18.980
especially when you need to receive the structure,

16:18.980 --> 16:21.360
change something, and send it somewhere else,

16:21.360 --> 16:24.120
because creating these variants is not easy,

16:24.120 --> 16:25.960
variants are not changeable,

16:25.960 --> 16:27.760
so you have to always create new ones,

16:27.760 --> 16:30.500
and yeah, it's not pretty.

16:30.500 --> 16:33.560
So with this bus, you can actually describe the structure

16:33.560 --> 16:36.040
using data classes, and these classes

16:36.040 --> 16:38.080
just have some properties,

16:38.080 --> 16:40.040
and there's a lot of automation

16:40.040 --> 16:43.220
that allows you to basically give it the dictionary,

16:43.220 --> 16:45.880
it will transform the dictionary into a Python object,

16:45.880 --> 16:47.880
then you can just play with the Python object,

16:47.880 --> 16:49.880
and when you need the structure again,

16:49.880 --> 16:51.620
you will just go to structure

16:53.180 --> 16:55.860
to get the structure that you can send on the bus.

16:57.520 --> 16:59.560
Yeah, so that's another thing you can do.

17:01.100 --> 17:03.200
Lastly, this is a new feature

17:03.200 --> 17:07.240
that I was working on with some people last year.

17:07.240 --> 17:10.040
Yeah, I would like to think this way.

17:10.040 --> 17:12.580
I would like to use this to thank everyone

17:12.580 --> 17:14.540
who was involved in this,

17:14.540 --> 17:17.680
because it was bigger issue than I expected,

17:17.680 --> 17:21.580
and basically, you can send Unix file descriptors

17:21.580 --> 17:24.380
through the bus.

17:24.380 --> 17:28.360
It works only on Unix systems, obviously,

17:28.360 --> 17:30.960
and it's optional feature is disabled by default

17:30.960 --> 17:33.160
because there's some overhead,

17:33.160 --> 17:37.340
and I didn't want it to slow down everyone's services.

17:38.500 --> 17:40.640
So all you have to do is when you create a proxy,

17:40.640 --> 17:43.980
you will specify a little different client library

17:43.980 --> 17:46.540
or the server library that will be used

17:46.540 --> 17:51.540
to process the incoming calls or the requests,

17:53.140 --> 17:56.380
and it basically means that if,

17:58.780 --> 18:00.080
yeah, it's a little complicated

18:00.080 --> 18:02.920
because the bus has a special support

18:02.920 --> 18:04.160
for your next file descriptors,

18:04.160 --> 18:08.760
but it's very messy when you have to deal with it specifically,

18:08.760 --> 18:10.260
and with this extension,

18:10.260 --> 18:12.000
you don't have to care about it, basically.

18:12.000 --> 18:14.060
If you want to send a file descriptor,

18:14.060 --> 18:16.140
you will just send a file descriptor

18:16.140 --> 18:18.540
and receive a file descriptor on the other side.

18:20.940 --> 18:25.940
Yeah, so these features can be very hard to understand

18:26.540 --> 18:27.480
and I get it.

18:27.480 --> 18:29.580
So I want to mention that this is optional.

18:29.580 --> 18:31.220
It's not something that you have to use

18:31.220 --> 18:32.880
if you want to use a dustbuzz,

18:34.080 --> 18:36.920
and I would suggest if you don't have the need to use them,

18:36.920 --> 18:39.120
don't use them, keep it simple,

18:39.120 --> 18:42.200
do whatever is the easiest,

18:42.200 --> 18:43.900
because there can be a lot of,

18:43.900 --> 18:47.980
yeah, additional code that can be hard to understand.

18:50.240 --> 18:53.220
Another thing I want to mention is that

18:53.220 --> 18:56.380
I acknowledge that every project is a little different

18:56.380 --> 18:58.360
and has very different needs,

18:58.360 --> 19:00.620
and sometimes you can make a lot of assumptions

19:00.620 --> 19:01.860
about your service.

19:01.860 --> 19:06.300
Like, you might not need half of the debug support

19:06.300 --> 19:09.000
that there is, so you can simplify some stuff a lot,

19:10.200 --> 19:12.840
and it's great, but that's often not generic enough

19:12.840 --> 19:15.740
to be implemented in a library like dustbuzz.

19:16.900 --> 19:20.180
So what you can do actually is to take any piece

19:20.180 --> 19:24.040
of dustbuzz, re-implement it to fit it to your needs,

19:24.040 --> 19:26.740
and propagate it in the right places

19:26.740 --> 19:29.520
so dustbuzz will use it instead of the original

19:29.520 --> 19:30.920
implementation.

19:30.920 --> 19:34.360
I want to mention this because we were in this position

19:35.560 --> 19:37.420
at the beginning of our project,

19:37.420 --> 19:39.860
and we had a lot of troubles with the library

19:39.860 --> 19:40.960
that we used back then,

19:40.960 --> 19:44.940
and basically we had to patch the whole library

19:44.940 --> 19:47.380
because we were not able to get there

19:47.380 --> 19:48.740
the stuff that we needed,

19:48.740 --> 19:52.180
and it wasn't easy to just change it,

19:52.180 --> 19:53.740
so we have to patch it.

19:55.820 --> 19:58.520
So this is the link to the library.

19:59.640 --> 20:04.220
There's open discussion session, there's issue tracker,

20:04.220 --> 20:06.460
so if you have any suggestions, questions,

20:06.460 --> 20:08.720
you can find me there, reach me there.

20:08.720 --> 20:11.000
I don't hesitate to ask.

20:11.000 --> 20:14.360
There's also, there are some examples.

20:14.360 --> 20:16.400
You should be able to find the examples

20:16.400 --> 20:20.140
that are similar to the one that I showed you.

20:20.140 --> 20:24.780
I think I will use there also the demo stuff

20:24.780 --> 20:27.080
because it's easier to understand.

20:30.120 --> 20:34.820
Yeah, and there's also recommendation that might help you

20:34.820 --> 20:38.820
because maybe this talk didn't help you so much.

20:38.820 --> 20:40.020
So that's all from me.

20:40.020 --> 20:41.420
Thank you so much for coming.

20:42.460 --> 20:44.700
Yeah, does anyone has any questions?

20:46.000 --> 20:46.840
Yeah.

20:46.840 --> 20:47.660
Thank you.

20:47.660 --> 20:48.500
I think we have time for questions.

20:48.500 --> 20:49.340
Yes.

20:49.340 --> 20:50.160
Yeah.

20:50.160 --> 20:51.000
Yeah.

20:51.000 --> 20:51.840
Yeah.

20:51.840 --> 20:52.660
Yeah.

20:52.660 --> 21:03.980
Hi, I just wanted to ask, where do you find people

21:03.980 --> 21:04.820
who are using this?

21:04.820 --> 21:06.980
Is it in chat message applications

21:06.980 --> 21:09.580
or what are the applications of this for most people?

21:12.120 --> 21:13.860
What are the applications who are providing

21:13.860 --> 21:16.000
the debuffs API that you can, okay.

21:16.000 --> 21:19.560
So like on the ONNX system, it's basically

21:24.940 --> 21:28.740
like there are printers or you can control the media player

21:28.740 --> 21:33.740
or you can set up your firewall or on the session bus.

21:34.880 --> 21:37.920
I think this chat actually has their own debuffs API.

21:37.920 --> 21:41.220
So it's more like the applications that are running

21:41.220 --> 21:44.080
on your rest stop often provide this debuffs API

21:44.080 --> 21:46.260
so you can write some scripts to tweak them

21:46.260 --> 21:47.620
and to control them.

21:47.620 --> 21:49.620
So yeah, that's it.

21:49.620 --> 21:50.460
I'm sure.

21:50.460 --> 21:51.300
Yeah.

21:51.300 --> 21:56.300
Okay.

21:56.380 --> 22:01.380
Does bus support properties and annotations?

22:04.960 --> 22:06.480
Properties, yes.

22:06.480 --> 22:11.480
Annotations do mean like properties changed annotations

22:13.060 --> 22:13.900
or stuff like that.

22:13.900 --> 22:17.120
Like it's changed signal and deprecated

22:17.120 --> 22:18.260
and stuff like that.

22:18.260 --> 22:22.700
Oh, I'm not sure about it.

22:22.700 --> 22:24.200
I think it's not like needed.

22:24.200 --> 22:27.240
It's just like a recommendation for the documentation

22:27.240 --> 22:28.780
but it's not something that.

22:29.740 --> 22:32.740
Otherwise the client can't see that the server

22:32.740 --> 22:35.780
may support an API call but it's a debt marked

22:35.780 --> 22:36.820
as deprecated.

22:38.520 --> 22:39.360
Okay.

22:39.360 --> 22:43.560
Yeah, I think it doesn't like support customer annotations

22:43.560 --> 22:47.000
but that's definitely something I can look at if it's like.

22:47.000 --> 22:49.260
I just wanted to give an add them and that's fine.

22:49.260 --> 22:50.100
Yeah, yeah.

22:50.100 --> 22:51.640
So I don't think that this is supported

22:51.640 --> 22:53.360
but it's definitely supportable.

22:53.360 --> 22:54.200
So yeah.

23:02.940 --> 23:07.940
Hi, why would someone want to use debuffs,

23:08.120 --> 23:12.580
I mean, Daspos for versus like some other debuffs library

23:12.580 --> 23:14.480
that's out there for Python?

23:14.480 --> 23:15.380
Yeah, okay.

23:15.380 --> 23:18.720
So this library was actually inspired by Py debuffs

23:18.720 --> 23:20.420
which is also very popular.

23:20.420 --> 23:24.660
It just, we hit some issues and it's complicated

23:24.660 --> 23:26.740
like you need to think a lot for us.

23:26.740 --> 23:30.240
So at some point I just got so frustrated

23:30.240 --> 23:33.200
I decided to rewrite it and create Daspos.

23:33.200 --> 23:35.780
But yeah, there are a lot of like interesting libraries

23:35.780 --> 23:37.940
and sometimes they are a little simpler

23:37.940 --> 23:39.280
and it might be enough.

23:39.280 --> 23:43.140
So like you don't have to use this one.

23:43.140 --> 23:45.380
It's just, this is much easier if you,

23:48.620 --> 23:50.520
if you have a lot of debuffs API

23:50.520 --> 23:52.420
because like with our project

23:52.420 --> 23:55.200
there are several debuffs services

23:55.200 --> 23:57.900
and it has a lot of objects, a lot of interfaces

23:57.900 --> 24:00.100
and it will be very difficult to deal with it

24:00.100 --> 24:03.940
in a, with a library that operates on lower level.

24:03.940 --> 24:05.780
So we needed a lot of abstraction

24:05.780 --> 24:07.700
to make sure that the code is okay.

24:07.700 --> 24:12.700
We have time for one last question.

24:18.820 --> 24:19.860
Who was first?

24:19.860 --> 24:21.000
Maybe two questions.

24:23.220 --> 24:25.540
Hello, thank you for the library.

24:25.540 --> 24:27.780
I've been trying it and it's great.

24:27.780 --> 24:32.200
I wanted to ask a question regarding the van loop.

24:32.200 --> 24:35.720
Lately I've been doing some work with debuffs

24:35.720 --> 24:40.100
and I find it very painful that most libraries

24:40.100 --> 24:44.220
rely on the G-LIP main loop

24:44.220 --> 24:49.220
rather than the default event loop coming from Async.io.

24:49.540 --> 24:51.340
I saw that in the code base.

24:51.340 --> 24:54.100
You, there is an abstract event loop

24:54.100 --> 24:57.300
that could become something else.

24:57.300 --> 24:59.900
But do you have any plans about that?

24:59.900 --> 25:02.860
Yeah, so right now I don't know about the demand

25:02.860 --> 25:05.580
for additional support for other event loops

25:05.580 --> 25:07.700
and like the cons.

25:07.700 --> 25:09.620
But the code is implemented in a way

25:09.620 --> 25:11.140
that it should be possible to do it.

25:11.140 --> 25:12.780
So if there is like enough people

25:12.780 --> 25:14.220
who would be interested in this,

25:14.220 --> 25:16.500
that's definitely something I would like to look at.

25:16.500 --> 25:20.140
It's just, yeah, it's no demand right now.

25:23.180 --> 25:25.500
Thanks a lot, thank you again.

25:25.500 --> 25:26.340
Thank you.

25:26.340 --> 25:27.180
Thank you.

25:27.180 --> 25:28.020
Thank you.

25:28.020 --> 25:28.860
Thank you.

25:28.860 --> 25:29.700
Thank you.

25:29.700 --> 25:30.540
Thank you.

25:30.540 --> 25:31.380
Thank you.

25:31.380 --> 25:32.220
Thank you.

25:32.220 --> 25:33.060
Thank you.

25:33.060 --> 25:33.900
Thank you.

25:33.900 --> 25:35.500
And to our audience for people interested in

25:35.500 --> 26:04.300
the next desktop here.

1
0:00:00.000 --> 0:00:11.920
So, hello, everyone. My name is Anastasia, and I can say a few words about myself before

2
0:00:11.920 --> 0:00:18.400
we start today's talk. I came here from Berlin. I live in Germany, Berlin, for already seven

3
0:00:18.400 --> 0:00:24.880
years, but I'm from Ukraine originally, and I play a role as an associate director of

4
0:00:24.880 --> 0:00:31.040
engineering at Soundwide in Berlin. Also, I'm one of the organizers of Bye Berlin Meetup,

5
0:00:31.680 --> 0:00:38.080
and I have 11 years of experience in software development and seven of them in Python. You can

6
0:00:38.080 --> 0:00:47.680
see how happy I am with Python, and I can share, and I will share, my long road to programming,

7
0:00:47.680 --> 0:00:54.880
actually, with documentation, and you will learn from me what I learned through all the years of

8
0:00:54.880 --> 0:01:03.760
software development. And let's start today's talk with a question. Do you document your code?

9
0:01:03.760 --> 0:01:17.040
So, raise a hand if you do. Write documentation. Wow, a lot. Nice. Okay. That's very nice. So,

10
0:01:18.560 --> 0:01:24.640
some years ago, around ten years ago, when I just started, I remember myself, I started

11
0:01:24.640 --> 0:01:31.360
programming language. I took a programming book, then I just went by the book. I wrote a

12
0:01:31.360 --> 0:01:39.760
hello world program. It was very nice. It looked so perfect. I did a first pull request into our

13
0:01:39.760 --> 0:01:47.760
code, and I thought it was very perfect. It looked so great. It was approved, but it didn't feel right.

14
0:01:47.760 --> 0:01:53.600
I didn't even know what to check, but I just didn't feel right, and I was not sure, would this code

15
0:01:53.600 --> 0:02:02.480
still be live or there in some years, or maybe in six months, or somebody will just change that code,

16
0:02:02.480 --> 0:02:10.560
and then it would be not good anymore. And when I even passed the code review, I merged the code.

17
0:02:10.560 --> 0:02:15.840
I was still not sure what to check in the code and when to consider that the code is good enough.

18
0:02:15.840 --> 0:02:23.760
And, of course, I didn't know about documentation. I was not told that I should write documentation

19
0:02:24.320 --> 0:02:36.480
in my code. And today, we're going to look into the ten years after I started. So, after all of

20
0:02:36.480 --> 0:02:42.960
this time, I realized that experience comes together with the confidence of you more.

21
0:02:42.960 --> 0:02:48.480
You are more confident in the code that you're writing because you're writing a lot, and then

22
0:02:48.480 --> 0:02:54.640
you learn from other people, you go to the conferences, you listen to all the talks,

23
0:02:54.640 --> 0:03:01.760
all the experiences, you talk to other developers in the community. If you're an open source developer

24
0:03:01.760 --> 0:03:12.480
and there is no documentation, it's a bit tricky. So, what if me ten years ago could possibly travel

25
0:03:12.480 --> 0:03:20.400
into the future and listen to this talk and know what to do from the very start? I would be maybe

26
0:03:20.400 --> 0:03:26.000
happier in my life. I would not do so many mistakes as I did through all the years. And that's why

27
0:03:26.000 --> 0:03:31.840
we're here. I'm going to show you things that I learned over the years. And we are going to

28
0:03:32.880 --> 0:03:40.560
have a bit of magic today happening following the ten years into the future. So, let the future

29
0:03:40.560 --> 0:03:51.920
begin now. Let's start with the story of one little set code which was lost in its lifetime,

30
0:03:51.920 --> 0:03:55.920
and no one wanted to play with this code. This is the code that I'm talking about.

31
0:03:57.360 --> 0:04:02.800
And the code was just sitting there very sad, very little, wondering.

32
0:04:02.800 --> 0:04:12.720
Wondering why am I so sad, why no one is talking to me? And had no clue how to deal with other

33
0:04:12.720 --> 0:04:20.960
services or other developers and had so many questions in its lifetime. And the only sad cat

34
0:04:20.960 --> 0:04:28.720
was sitting and supporting that set code. So, the set code was actually wondering what is wrong with

35
0:04:28.720 --> 0:04:36.640
it and how to change to find new friends. Let's take a look into the code. So, the first function,

36
0:04:37.280 --> 0:04:43.920
it's pretty clear. It's just the hello world, the basic stuff. But if you look to the second one,

37
0:04:44.560 --> 0:04:52.720
this is the sad part. So, there is a function with some of the arguments and some of the results

38
0:04:52.720 --> 0:05:00.640
returning something, but not very clear, not very clear the outcome of the function, what does it

39
0:05:00.640 --> 0:05:06.800
do, what is the purpose, also names of the parameters, where they lost at some point.

40
0:05:08.320 --> 0:05:13.520
So, you remember the story, there was a set code, very sad code, and just a cat

41
0:05:14.640 --> 0:05:20.240
sitting next to the sad code. And the code went to sleep. And something truly magical happened.

42
0:05:20.240 --> 0:05:29.440
It met someone. It met its future self. Just right ten years after. And the future self said,

43
0:05:29.440 --> 0:05:37.120
I will give you four pieces of advice which will help you to improve your communication skills,

44
0:05:37.120 --> 0:05:44.800
and in the end, I will give you a riddle to solve. So, follow my advice to reclaim the ancient

45
0:05:44.800 --> 0:05:53.520
knowledge of programming superpowers and you will shine for many, many years. So, let's start.

46
0:05:55.040 --> 0:06:01.760
Then listen carefully. Yes, the sad code said, please continue. So, here is my first advice to

47
0:06:01.760 --> 0:06:10.400
you. This is the way how to use the goal oriented approach to show the world how to solve a problem

48
0:06:10.400 --> 0:06:17.840
if there are any in the future. This approach is about writing how to guides. So, those are

49
0:06:17.840 --> 0:06:23.360
basically the directions to the reader and you can read a bit more in the links which I listed

50
0:06:23.360 --> 0:06:34.080
over there. This is the most used guide, the most searched and the most read in basically everything

51
0:06:34.080 --> 0:06:42.400
written about the code. It includes like a recipe or the direction for solving a very specific

52
0:06:42.400 --> 0:06:51.360
problem. So, if you are trying to create something of the how to guide about something very specific,

53
0:06:51.360 --> 0:06:57.280
not very about everything, like how to create a web server, something that would not be how to guide,

54
0:06:57.280 --> 0:07:03.120
but something how to create for a very specific reason. That would be how to guide. And those are

55
0:07:03.120 --> 0:07:08.960
actually very specific guidelines that we are usually looking for because we have all of the

56
0:07:08.960 --> 0:07:15.360
specific issues and then we are searching for a specific piece of information for a specific

57
0:07:15.360 --> 0:07:24.400
problem as a solution. So, with the first piece of advice, the sad code was thinking, okay, I can

58
0:07:25.200 --> 0:07:31.680
improve by just writing a simple setup, how to set up myself to be open for others. So,

59
0:07:31.680 --> 0:07:39.440
that's a very specific what to install, where to install and added some read me file to the

60
0:07:39.440 --> 0:07:48.240
guideline of the code. And then after following that advice, the sad code noticed that they got

61
0:07:48.240 --> 0:07:56.160
a friend. Can you imagine? A friend, a real friend. How do I know that? Well, just look at that. There

62
0:07:56.160 --> 0:08:03.840
is a star shining. Well, that was just the star, the first one. So, the second advice showed the

63
0:08:03.840 --> 0:08:10.640
sad code how to use learning oriented approach to show the world what actually is done by this code.

64
0:08:11.440 --> 0:08:18.480
So, those are the tutorials. Those are a bit different from the how to guides in the way that

65
0:08:18.480 --> 0:08:24.240
this is more like learning by doing so you're not reading all the documentation, you're just

66
0:08:24.240 --> 0:08:30.960
doing an exercise like a teacher showing in the school what to do to learn a specific subject.

67
0:08:30.960 --> 0:08:38.720
So, if we're talking about the code, then just follow the advice also would be learning by doing,

68
0:08:39.280 --> 0:08:47.920
writing some specific tutorials would be to achieve some goal, but it doesn't have to be

69
0:08:47.920 --> 0:08:56.720
a very specific problem to be solved. So, if we're following the advice, the sad code was thinking,

70
0:08:56.720 --> 0:09:03.840
okay, maybe I can add a bit more. Let me write some tutorial about basic set up, how to write

71
0:09:03.840 --> 0:09:12.640
it, how to build it. And then something happened again. There was another friend. Look at that.

72
0:09:12.640 --> 0:09:19.680
The second star is shining. Already good. Good path. The third advice showed the sad code how to use

73
0:09:20.320 --> 0:09:26.480
understanding oriented approach to explain more what the code is doing. So, those are the

74
0:09:26.480 --> 0:09:33.520
explanations, different discussions on very specific topics which are broadening the main subject.

75
0:09:34.240 --> 0:09:39.440
So, if we already have the basic documentation, we have the how to guide, we have different

76
0:09:39.440 --> 0:09:50.800
learning by doing exercises. Those are explanations are very, very specific. So, if you compare to a

77
0:09:50.800 --> 0:09:58.640
recipe book, this is not a recipe book. This is more of a reference of the different ingredients,

78
0:09:58.640 --> 0:10:05.760
how to get the ingredient, for example, or which ingredients are particular for a very specific

79
0:10:05.760 --> 0:10:14.640
dish. This is everything that could tell the sad little code how to deal with different packages

80
0:10:14.640 --> 0:10:20.160
or different services, how to integrate with others. And, of course, the sad code

81
0:10:21.120 --> 0:10:26.320
did implement something like this. So, they wrote a bit of more explanation on why do we

82
0:10:26.320 --> 0:10:34.160
need documentation in general. And, again, it was very helpful, very happy. So, the sad code

83
0:10:34.160 --> 0:10:41.200
was thinking, okay, and more friends are coming. That's great. Let's go to the last advice. So,

84
0:10:41.200 --> 0:10:47.840
the last but not least piece of advice was about information oriented approach, about references.

85
0:10:49.440 --> 0:10:55.760
In software development, reference guides are usually describing the functions, the input

86
0:10:55.760 --> 0:11:02.240
output arguments, the results of the functions, key classes, different APIs. So, everything that

87
0:11:02.240 --> 0:11:08.880
is about the code, about different attributes, it doesn't have to be every single function,

88
0:11:08.880 --> 0:11:14.720
but it should be all of the main key classes, key functions that are used. So, then, afterwards,

89
0:11:14.720 --> 0:11:21.120
you can recap and then look just the ten years after you can look at what was done before.

90
0:11:21.120 --> 0:11:32.480
And, just like that, the code, the sad code followed the fourth piece of advice and decided to

91
0:11:33.760 --> 0:11:41.360
write the code reference, edit that, and also applaud that to somewhere for others to see.

92
0:11:43.280 --> 0:11:49.840
And, after those four wonderful advices from the future self, something really magic happened.

93
0:11:49.840 --> 0:11:56.480
And the code woke up not very sad anymore, not mad, and it felt very comfortable to go out and

94
0:11:56.480 --> 0:12:04.640
then talk to others, connect to other developers. And then, after some time, the sad code remembered

95
0:12:06.240 --> 0:12:12.800
that there was a riddle. The future self said, that would be a riddle, and then you will gain

96
0:12:12.800 --> 0:12:21.200
the superpowers, right? So, here it is. I'm someone who can teach you a lesson, but not a teacher.

97
0:12:23.040 --> 0:12:29.520
I'm someone who can guide you to a goal, but not a tour guide. I'm someone who can tell you

98
0:12:29.520 --> 0:12:37.360
everything about technical specs of your functions, but not an encyclopedia. I'm someone who can

99
0:12:37.360 --> 0:12:44.480
explain you a particular topic to help you to understand, but not Google. Can you guess what that is?

100
0:12:52.320 --> 0:12:59.520
Okay. So, the code was very happy because they knew the answer already and asked the future self,

101
0:12:59.520 --> 0:13:07.440
so, well, look, was it all about you? All about you, my future, so you are documentation, so you

102
0:13:07.440 --> 0:13:13.760
are really my future. And the future self said, yes, those four advices were all about me and

103
0:13:13.760 --> 0:13:19.200
your future. I'm your future. Fantastic documentation with the tutorials, how-to guides,

104
0:13:19.200 --> 0:13:27.680
explanation, and the references. And, in other words, we all need to understand that documentation

105
0:13:27.680 --> 0:13:35.040
is not a single piece. It's more than that. It consists of four different types of documentation,

106
0:13:35.680 --> 0:13:43.920
and it's very important that we add all of them, and we at least have some sections of those

107
0:13:43.920 --> 0:13:47.280
to focus for our future selves not to be in trouble.

108
0:13:47.280 --> 0:13:59.600
So, just to recap the future of that little code is now, it's about code references,

109
0:14:01.040 --> 0:14:09.440
tutorials, explanations, how-to guides, and that would make your code happy, and the cat, of course.

110
0:14:10.880 --> 0:14:15.360
And it would get many friends, especially in open source, it's very important to add

111
0:14:15.360 --> 0:14:22.640
documentation and to explain what is code actually doing and all the functions. And that would be a

112
0:14:22.640 --> 0:14:30.960
really bright future. So, I have another question for all of you. Would you document your code

113
0:14:30.960 --> 0:14:44.240
after all of you heard in the future? So, if this example didn't convince you, I have a few more

114
0:14:44.240 --> 0:14:51.440
pieces of advice from myself from my own experience. Why do we need to document code? Because people

115
0:14:51.440 --> 0:14:59.840
forget things. Even if you wrote a code, you will forget about it in a week, in a month, in a day,

116
0:15:00.560 --> 0:15:05.680
or maybe something happens and then, well, you return back to the code and then you don't

117
0:15:05.680 --> 0:15:14.400
remember why was it. People leave the code alone. And this is also important. If you are working for

118
0:15:14.400 --> 0:15:19.680
open source, you can give it to somebody else. You leave it alone. Then you come back, you need to

119
0:15:19.680 --> 0:15:25.920
review. And then, oh, my God, I didn't remember that function. Then new people come to contribute.

120
0:15:25.920 --> 0:15:30.400
This is also very important. They need to know how to contribute, what to contribute, what is

121
0:15:30.400 --> 0:15:44.720
important for this. So, how to start? First, you need to choose main source tool for documentation.

122
0:15:45.600 --> 0:15:50.640
And then, of course, you need to make sure that it's up to date. So, the continuous documentation,

123
0:15:50.640 --> 0:15:57.360
it's a culture. It's not the thing that you can force people into. You need to make it as a culture

124
0:15:57.360 --> 0:16:03.280
for yourself and also for other people. So, I would recommend you to read a few things.

125
0:16:04.400 --> 0:16:11.600
This was the original document where it's actually written about those four pieces of documentation.

126
0:16:11.600 --> 0:16:17.920
I recommend you to go through it, read more about different types of documentation, then also

127
0:16:18.560 --> 0:16:24.240
work with documentation about the legacy code. And the real Python has a very nice tutorial about

128
0:16:24.240 --> 0:16:32.800
documentation with MK docs and also GitHub pages. So, how to start? You need to start as simple as

129
0:16:32.800 --> 0:16:38.080
possible. This is the best solution. Just start some basics. Then you can go to version control

130
0:16:38.080 --> 0:16:45.600
documentation. And that would be like a next level. So, you have Python code. You need to document

131
0:16:45.600 --> 0:16:53.120
something. First, what do you do? I would say you start documenting. So, for that, you need to add

132
0:16:53.120 --> 0:16:58.240
some doc strings to your code. Then you will take them and make a reference guide which is nice to

133
0:16:58.240 --> 0:17:04.720
have. It's out of the box. It can be auto generated if you host it somewhere so beautiful and easy.

134
0:17:05.520 --> 0:17:11.520
For that, you can use Sphinx, MK docs to prepare the documentation, also put some files.

135
0:17:13.040 --> 0:17:18.480
Of course, you can try to host it somewhere like read the docs which is free for open source

136
0:17:18.480 --> 0:17:25.360
projects or GitHub pages. There are other tools, but those are the ones I used. And, of course,

137
0:17:25.360 --> 0:17:31.600
add more documentation. So, if you want to see those pieces of documentation that I showed,

138
0:17:32.640 --> 0:17:42.640
here is the link where they are. And also, you can see in here, so this is how the read the docs

139
0:17:42.640 --> 0:17:49.680
would look if you would use it for a simpler project. And this is how the Sphinx of the

140
0:17:49.680 --> 0:17:58.320
documentation that I showed you with the set code would look like. And then, just to remind you that

141
0:17:58.320 --> 0:18:04.880
you cannot force people to read documentation. You can force them only to write documentation. So,

142
0:18:04.880 --> 0:18:10.160
if you want to make sure that your documentation is up to date, you need to make it as a culture

143
0:18:10.160 --> 0:18:17.360
for yourself to also start somewhere to start writing documentation, and then it will somehow

144
0:18:17.360 --> 0:18:26.320
become a habit. So, thank you so much. This is all you can all join the PyBerlin meetup in Berlin.

145
0:18:26.320 --> 0:18:32.320
You're all welcome to come. We have meetings every month. And also, some of the more articles

146
0:18:32.320 --> 0:18:44.960
about documentation you can read over there.

147
0:18:53.280 --> 0:18:58.320
Thank you, Anastasia. We have five minutes for questions. If we have questions,

148
0:18:58.320 --> 0:19:06.000
please raise your hand. I will pass the microphone so we can record the questions. Can you maybe

149
0:19:06.000 --> 0:19:19.280
pass it over? Thanks for the talk. Did you experience an increase in your documentation

150
0:19:19.280 --> 0:19:25.760
quality when using such tools? I mean, so, the overall problem is you actually need to write

151
0:19:25.760 --> 0:19:31.280
documentation and you need like an incentive for it, right? Did you experience that using the

152
0:19:31.840 --> 0:19:39.360
tools that you presented helps? Well, it did help. So, we forced a certain documentation level. You

153
0:19:39.360 --> 0:19:45.200
can also see the tools that I used on the CI on the project that I shared. They just did help to

154
0:19:45.200 --> 0:19:52.480
force people to write it. But actually, as soon as we made this as a must to have for every code

155
0:19:52.480 --> 0:19:57.120
review, then it helped. So, for every code review, every developer was looking, okay, you didn't

156
0:19:57.120 --> 0:20:02.640
write this documentation. This is important. And then they would ask, can you please write some

157
0:20:02.640 --> 0:20:06.080
few lines about this. This is important to remember. Then it did work.

158
0:20:11.200 --> 0:20:20.160
Thank you for the talk. I wanted to ask about your opinion on using ChetGPT to maybe ease the

159
0:20:20.160 --> 0:20:26.240
work of documentation, save your time if you've got any opinion on it. Because from my experimenting,

160
0:20:26.240 --> 0:20:32.880
it can document code quite decently. So, maybe it could even be used for the tutorial-based

161
0:20:32.880 --> 0:20:39.840
approach that you mentioned. Oh, actually, I didn't try it. So, I can try and let you know next time.

162
0:20:39.840 --> 0:20:54.800
Thanks. Any other questions?

163
0:20:54.800 --> 0:21:16.800
Hello. Thank you for your talk. Do you use restructure text, markdown? Do you think

164
0:21:16.800 --> 0:21:27.120
Python coder should use one or the other? RST or MD? Which do you like?

165
0:21:28.560 --> 0:21:32.160
Well, it doesn't matter if you don't write documentation. So, it's important to actually

166
0:21:32.160 --> 0:21:37.760
write. And it's actually up to developers. Sometimes they like one, sometimes they like the other.

167
0:21:37.760 --> 0:21:50.720
And I don't mind both. I just want to make sure that there is up-to-date documentation.

168
0:21:52.720 --> 0:21:57.200
Do you have tools to help you to make documentation up-to-date?

169
0:21:58.880 --> 0:22:05.760
Oh, that's a tricky question. Well, this is more like a human factor, how to make documentation

170
0:22:05.760 --> 0:22:12.080
up-to-date. You can test examples. You can even try the examples if they work. So, you can automate

171
0:22:12.080 --> 0:22:17.040
that. You can check how many lines of the documentation are in every pull request. So,

172
0:22:17.040 --> 0:22:23.760
this is automated. But it doesn't automate the things which are outside of the code. You cannot

173
0:22:23.760 --> 0:22:29.280
really test those unless there is a piece of code. You can go through it. You can try running it. So,

174
0:22:29.280 --> 0:22:35.680
unfortunately, the things outside of the very specific code, and this is basically not.

175
0:22:36.240 --> 0:22:36.640
Thank you.

176
0:22:41.360 --> 0:22:43.360
Okay, we have two more minutes for questions.

177
0:22:43.360 --> 0:22:47.120
I see a question in the back. Perfect. I needed to do some sport today.

178
0:22:47.120 --> 0:22:51.120
Okay.

179
0:22:56.320 --> 0:23:02.720
A, thank you for your talk. Is writing documentation something that you do

180
0:23:02.720 --> 0:23:10.000
alone or something that you collaborate with someone else? And if so, are there non-technical

181
0:23:10.000 --> 0:23:17.840
people that collaborate with you in the moment of writing? Or how can you be sure to address also

182
0:23:17.840 --> 0:23:21.680
people with different levels of technical knowledge? Thank you.

183
0:23:22.640 --> 0:23:27.840
Thank you for the question. Actually, those are different types of documentation. So, there is a

184
0:23:27.840 --> 0:23:35.040
technical documentation which could be written by a technical writer. But documentation that my team

185
0:23:35.040 --> 0:23:40.640
is writing, for example, should be written by a developer who is writing the code. So,

186
0:23:40.640 --> 0:23:45.600
you're a developer, you wrote a piece of code, a function, something you have to document it.

187
0:23:45.600 --> 0:23:50.960
And this is actually written in our ways of working for the team. So, that is part of the

188
0:23:51.680 --> 0:23:57.200
done of the features. So, as soon as this is done, it has to be documented.

189
0:23:57.200 --> 0:24:05.920
Unless it's documented, we don't close the ticket. So, it has to happen. And this is for everyone in

190
0:24:05.920 --> 0:24:11.520
the team. So, there's no specific person on the developer who did the feature. Then they do it.

191
0:24:13.920 --> 0:24:15.680
Do we have any other question?

192
0:24:19.440 --> 0:24:24.160
Okay. Regarding chat GPT, I played a bit with it. I have the feeling it's a great tool for

193
0:24:24.160 --> 0:24:30.240
beginners to learn. But if chat GPT can document it, then why should you? Shouldn't you put what

194
0:24:30.240 --> 0:24:35.280
chat GPT cannot guess from the code, all the business logic, the reasons you did it?

195
0:24:36.160 --> 0:24:41.440
Just a small thinking. Thanks a lot. Thanks again.

196
0:24:41.440 --> 0:24:55.760
Thank you.


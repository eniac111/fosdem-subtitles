1
0:00:00.000 --> 0:00:20.440
Okay, our first actual speaker of the day is Frederico, who is a maintainer of metal

2
0:00:20.440 --> 0:00:21.720
LB, which I personally use.

3
0:00:21.720 --> 0:00:22.720
Thank you.

4
0:00:22.720 --> 0:00:26.600
Over at Red Hat, and he will be talking to us about cognitive loads.

5
0:00:26.600 --> 0:00:29.600
So a round of applause for Frederico.

6
0:00:29.600 --> 0:00:33.520
Yeah, it works.

7
0:00:33.520 --> 0:00:44.560
Yeah, so today I'm going to talk about cognitive load and how it affects our code base, why

8
0:00:44.560 --> 0:00:47.680
it matters, and how we can reduce it.

9
0:00:47.680 --> 0:00:52.560
And the reason why I put together this talk is because over the past, I would say, two

10
0:00:52.560 --> 0:00:57.920
years I started contributing first and then maintaining the metal bit project.

11
0:00:57.920 --> 0:00:59.760
Is anyone using it?

12
0:00:59.760 --> 0:01:05.600
Okay, so if it's gotten less stable, that's because of me.

13
0:01:05.600 --> 0:01:11.120
But by doing that, I started reviewing a good amount of PRs.

14
0:01:11.120 --> 0:01:18.840
Over this period, I kind of identified the recurring patterns that I was keeping asking

15
0:01:18.840 --> 0:01:20.760
and asking over.

16
0:01:20.760 --> 0:01:27.760
And those recurring patterns, those scattered suggestions that I tried to give in code reviews

17
0:01:27.760 --> 0:01:29.960
are what this talk is about.

18
0:01:29.960 --> 0:01:37.320
In terms of code, metal LB is a nicely sized project, not too big, not too small, and I

19
0:01:37.320 --> 0:01:42.240
think it's worth keeping alive.

20
0:01:42.240 --> 0:01:43.720
So some quick words about me.

21
0:01:43.720 --> 0:01:44.720
I'm Frederico.

22
0:01:44.720 --> 0:01:45.720
I work for Red Hat.

23
0:01:45.720 --> 0:01:51.120
I'm part of a networking team in charge of making the OpenShift platform suitable for

24
0:01:51.120 --> 0:01:52.840
telco workloads.

25
0:01:52.840 --> 0:02:00.000
That means that I touch and contribute a lot of these different network related projects,

26
0:02:00.000 --> 0:02:03.840
but that doesn't mean that I'm a network expert because I'm not.

27
0:02:03.840 --> 0:02:09.640
So don't come asking to fix your router, as my parents do, because I won't.

28
0:02:09.640 --> 0:02:11.880
All of these are my handles.

29
0:02:11.880 --> 0:02:17.680
Probably the master one needs to be adjusted, but you can find me there if you have questions

30
0:02:17.680 --> 0:02:23.520
to ask, if you need to provide feedback, whatever, I'll try to reply.

31
0:02:23.520 --> 0:02:29.720
So let's start with cognitive load, and this is the Wikipedia definition.

32
0:02:29.720 --> 0:02:34.600
Cognitive load is meant to be the extra energy, the amount of effort that we need to put in

33
0:02:34.600 --> 0:02:37.960
place to understand something.

34
0:02:37.960 --> 0:02:41.480
That applies perfectly to our code base.

35
0:02:41.480 --> 0:02:45.520
It might be because we are reading something that we wrote years ago where we were less

36
0:02:45.520 --> 0:02:49.520
experts, it might be because we are trying to review some code that somebody else is

37
0:02:49.520 --> 0:02:52.840
trying to push to our project.

38
0:02:52.840 --> 0:02:57.880
It might be because we got a bug report and we need to correlate the behavior that we

39
0:02:57.880 --> 0:03:06.840
get from the reality and what we understand from our code.

40
0:03:06.840 --> 0:03:11.600
The less energy we spend, we are able to spend the better because it might be evening and

41
0:03:11.600 --> 0:03:15.280
we might be tired and we might have some urgency about that.

42
0:03:15.280 --> 0:03:18.360
So that's why it's so important.

43
0:03:18.360 --> 0:03:25.720
And sometimes this complexity is proportional, this extra energy is proportional to the complexity

44
0:03:25.720 --> 0:03:26.880
of our code.

45
0:03:26.880 --> 0:03:34.200
Think about cryptography, think about ultra-optimized code that runs in embedded systems, but some

46
0:03:34.200 --> 0:03:35.800
other times it's not.

47
0:03:35.800 --> 0:03:40.400
Take this example and take the same run through one of the scatters.

48
0:03:40.400 --> 0:03:49.000
This takes a lot more energy to understand that this function prints a hell of a word.

49
0:03:49.000 --> 0:03:56.280
This is to say that we need to put an effort because that effort gets a reward in terms

50
0:03:56.280 --> 0:04:01.200
of speed of development and speed of understanding.

51
0:04:01.200 --> 0:04:09.120
So say that, a disclaimer, not everything is black and white.

52
0:04:09.120 --> 0:04:14.240
Of course there might be exceptions to the suggestions that I'm going to say.

53
0:04:14.240 --> 0:04:20.560
And this talk is more or less a collection of scattered rules that I collected from sources

54
0:04:20.560 --> 0:04:22.680
that I trust.

55
0:04:22.680 --> 0:04:28.920
In case you don't like them, blame the sources.

56
0:04:28.920 --> 0:04:36.120
In general, I think that the stuff that we write should take care of two sites.

57
0:04:36.120 --> 0:04:43.080
One is of course the implementation, and this implementation is pretty clear, I guess.

58
0:04:43.080 --> 0:04:46.920
This function is just doing the sum of two numbers, it's easy to understand.

59
0:04:46.920 --> 0:04:48.680
We can't argue with that.

60
0:04:48.680 --> 0:04:52.760
But what if we land on a code base that is doing something like this?

61
0:04:52.760 --> 0:05:02.720
And this takes more energy compared to a better version of it where the function is named

62
0:05:02.720 --> 0:05:05.760
nicely so we understand what it's doing.

63
0:05:05.760 --> 0:05:10.160
This is to say, and this is something that is going to be recurrent in this talk, that

64
0:05:10.160 --> 0:05:15.000
what matters is not only how we care about the implementation but also how we care about

65
0:05:15.000 --> 0:05:21.280
the users of our packages, of our functions, of our objects.

66
0:05:21.280 --> 0:05:26.120
So let's start with the first item, which is the line of sight.

67
0:05:26.120 --> 0:05:30.360
And this is something that I believe every good and automatic Go code base should try

68
0:05:30.360 --> 0:05:32.160
to foster.

69
0:05:32.160 --> 0:05:38.480
Finally we have this leftmost indented line where all the happy path leaves, and we have

70
0:05:38.480 --> 0:05:41.400
this indented one where we handle all the exceptions.

71
0:05:41.400 --> 0:05:47.680
And I expect every code base, which is well written where I want to, to respect this rule.

72
0:05:47.680 --> 0:05:51.560
And there are a few tips to do this.

73
0:05:51.560 --> 0:05:55.400
And I pressed the wrong...

74
0:05:55.400 --> 0:05:58.400
It wasn't me.

75
0:05:58.400 --> 0:05:59.400
Sorry.

76
0:05:59.400 --> 0:06:04.520
So these are just tips to do that, to implement this.

77
0:06:04.520 --> 0:06:08.520
And let's see why it matters, how it will make our code base better.

78
0:06:08.520 --> 0:06:13.400
This was more or less a real example that I got from a real PR.

79
0:06:13.400 --> 0:06:16.280
And it was really hard to follow all the special cases.

80
0:06:16.280 --> 0:06:23.880
And so I tried to give feedback and try to hammer it with suggestions in order to leverage

81
0:06:23.880 --> 0:06:30.600
earlier returns and flipping errors, removing else is...

82
0:06:30.600 --> 0:06:33.960
When I see an else, it's something that I try to get rid of.

83
0:06:33.960 --> 0:06:40.720
Like it's a red flag and I think three times before allowing it to go through.

84
0:06:40.720 --> 0:06:42.920
And then leverage more returns.

85
0:06:42.920 --> 0:06:44.160
And then...

86
0:06:44.160 --> 0:06:46.880
Yeah, leverage more returns.

87
0:06:46.880 --> 0:06:47.880
And then...

88
0:06:47.880 --> 0:06:48.880
Sorry?

89
0:06:48.880 --> 0:06:49.880
Yeah.

90
0:06:49.880 --> 0:06:54.960
So, we're wrapping into a function so we can leverage even more returns because now we

91
0:06:54.960 --> 0:06:57.280
have a smaller scope.

92
0:06:57.280 --> 0:07:03.560
So we got to something from something which looked like this to something that looked

93
0:07:03.560 --> 0:07:04.560
like this.

94
0:07:04.560 --> 0:07:08.400
And I dare you to say that this is easier to understand.

95
0:07:08.400 --> 0:07:13.720
And remember, like this is understandable, but this requires less energy.

96
0:07:13.720 --> 0:07:15.680
It's clear.

97
0:07:15.680 --> 0:07:20.120
It's better because of all the reasons that I already said before.

98
0:07:20.120 --> 0:07:25.320
There is this nice blog post from Matt Ryer about this very same topic.

99
0:07:25.320 --> 0:07:29.760
He more or less gives the same set of advices.

100
0:07:29.760 --> 0:07:32.160
Line of sight is not a nice exercise.

101
0:07:32.160 --> 0:07:38.960
It's a rule of thumb that allow us to untangle our code and to make it sleeker and easier

102
0:07:38.960 --> 0:07:41.680
to understand.

103
0:07:41.680 --> 0:07:45.000
Next I'm gonna talk about package names.

104
0:07:45.000 --> 0:07:50.720
This is another February of mine.

105
0:07:50.720 --> 0:07:53.480
We know that naming is hard.

106
0:07:53.480 --> 0:07:58.100
And that is particularly true in case of package names.

107
0:07:58.100 --> 0:08:04.440
We know that the name of a package should be small enough because that is consuming

108
0:08:04.440 --> 0:08:11.120
screen space, but should be also good enough to let us understand the purpose of the package.

109
0:08:11.120 --> 0:08:16.320
But in Go there is even more because when we use an object, the name of the package

110
0:08:16.320 --> 0:08:17.520
is part of the name.

111
0:08:17.520 --> 0:08:25.720
So that is an opportunity for us to put some value in that part that the reader can consume.

112
0:08:25.720 --> 0:08:28.520
And again, I'm starting with a bad example.

113
0:08:28.520 --> 0:08:35.600
We have this util package and we have this copy node function that is totally fictional.

114
0:08:35.600 --> 0:08:38.760
But that util part is a wasted opportunity.

115
0:08:38.760 --> 0:08:41.720
It's part of the name that doesn't add any value.

116
0:08:41.720 --> 0:08:50.000
So it's better to take and split our package, smaller scoped packages, and explain what

117
0:08:50.000 --> 0:08:51.000
to do.

118
0:08:51.000 --> 0:08:56.920
And in this case, from the calling side, you have node.copy which still explains the purpose

119
0:08:56.920 --> 0:09:00.520
of that function and it's not wasting space.

120
0:09:00.520 --> 0:09:07.100
And this was taken from the official Go blog and it says basically the same thing.

121
0:09:07.100 --> 0:09:13.920
There is no need to have these gigantic kitchen sink packages where we throw everything because

122
0:09:13.920 --> 0:09:15.560
in Go packages are free.

123
0:09:15.560 --> 0:09:22.680
So it's fine to split them in a better way.

124
0:09:22.680 --> 0:09:26.760
Next one is going to be about errors.

125
0:09:26.760 --> 0:09:31.240
And I see also this happening very frequently.

126
0:09:31.240 --> 0:09:32.980
In Go errors are types.

127
0:09:32.980 --> 0:09:37.480
And let's say that the developer wants to handle a special error.

128
0:09:37.480 --> 0:09:41.240
And the problem with this approach is that we are giving away the fact that errors are

129
0:09:41.240 --> 0:09:46.680
types and we are converting them to a string and we are treating them as a string.

130
0:09:46.680 --> 0:09:52.060
And since Go 1.13, we have like, and there are, like, that's legacy.

131
0:09:52.060 --> 0:09:55.920
So there are no excuses not to use this.

132
0:09:55.920 --> 0:09:57.080
There are two ways.

133
0:09:57.080 --> 0:10:03.240
One is to assert that the error that we are checking is an instance of a given object

134
0:10:03.240 --> 0:10:05.400
that we have somewhere.

135
0:10:05.400 --> 0:10:18.960
And there is another one which is about asserting that the error that we want to handle implements

136
0:10:18.960 --> 0:10:25.840
the error interface against a specific real type.

137
0:10:25.840 --> 0:10:26.960
But there is more.

138
0:10:26.960 --> 0:10:33.760
So in this way, you can have wraps of errors and you can assert that the error that you

139
0:10:33.760 --> 0:10:41.200
are checking not only equals the one that you are handling, but also any error inside

140
0:10:41.200 --> 0:10:42.200
of this wrap.

141
0:10:42.200 --> 0:10:43.720
And this is how you wrap them.

142
0:10:43.720 --> 0:10:52.280
You can either use errors.wrap so the return error from this function will contain the

143
0:10:52.280 --> 0:11:00.960
value returned by this, but will also return true if we assert against the braptid one.

144
0:11:00.960 --> 0:11:08.680
And also there is the way suggested by the standard library which is using the %w formatters.

145
0:11:08.680 --> 0:11:13.960
So both of them will return you a braptid error.

146
0:11:13.960 --> 0:11:20.880
So now let's talk about pure functions and why they are important.

147
0:11:20.880 --> 0:11:25.080
So a pure function has two properties.

148
0:11:25.080 --> 0:11:30.360
One is the fact that no matter how time when you call it, no matter how many times you

149
0:11:30.360 --> 0:11:37.960
call it, with a given set of input parameters, it will return always the same output.

150
0:11:37.960 --> 0:11:43.160
And the other property is the fact that it shouldn't rely on the state of your system.

151
0:11:43.160 --> 0:11:47.000
Shall it be sorry, it shouldn't modify the state of the system.

152
0:11:47.000 --> 0:11:53.120
Shall it be global variables or static variables or your input parameters or anything that

153
0:11:53.120 --> 0:11:55.200
is external to the function.

154
0:11:55.200 --> 0:11:57.880
And why it matters.

155
0:11:57.880 --> 0:12:02.920
This is an example where this function, the behavior of this function depends on the state

156
0:12:02.920 --> 0:12:07.600
on of an external system that is accessed through a client.

157
0:12:07.600 --> 0:12:10.680
And then you have the business logic after that.

158
0:12:10.680 --> 0:12:12.000
And why this is bad.

159
0:12:12.000 --> 0:12:18.320
I would say that mostly because this is hard to test or we can mock the external system,

160
0:12:18.320 --> 0:12:21.320
we can do tricks to replace the client.

161
0:12:21.320 --> 0:12:29.120
But moving away the state-vuleness part of the function away and having the business

162
0:12:29.120 --> 0:12:35.760
logic implemented, sorry, implemented as a pure function will allow us to be quicker

163
0:12:35.760 --> 0:12:39.040
in writing the implementation and to write our tests.

164
0:12:39.040 --> 0:12:42.400
And how about the second part?

165
0:12:42.400 --> 0:12:51.640
So we have a function that accepts a pointer and in some random cases it changes the object.

166
0:12:51.640 --> 0:12:53.080
And what's the problem with that?

167
0:12:53.080 --> 0:12:57.200
The problem with that is now on the reading side because you don't know that it's not

168
0:12:57.200 --> 0:12:59.760
clear enough that this function is changing the node.

169
0:12:59.760 --> 0:13:06.080
So you get your bug report and you look at the code and you know that somewhere the name

170
0:13:06.080 --> 0:13:09.200
of the node changed but you don't know why.

171
0:13:09.200 --> 0:13:17.240
And that's because it's not clear from outside that is what this function is doing and it's

172
0:13:17.240 --> 0:13:19.560
harder to reason about it.

173
0:13:19.560 --> 0:13:26.720
So a better way is to change the name of the function so it's clear.

174
0:13:26.720 --> 0:13:31.440
But I think that and this comes quite often.

175
0:13:31.440 --> 0:13:36.760
A better way to do that is to delegate the responsibility of changing the object outside

176
0:13:36.760 --> 0:13:38.960
and changing the function to be a pure function.

177
0:13:38.960 --> 0:13:46.320
Again, this version is easier to understand, it's easier to reason about, it's clear when

178
0:13:46.320 --> 0:13:49.360
you will have something to change.

179
0:13:49.360 --> 0:13:53.680
And this can also say about environment variables.

180
0:13:53.680 --> 0:14:00.840
In the world of pods and containers, adding a new knob as an environment variable is so

181
0:14:00.840 --> 0:14:01.840
convenient.

182
0:14:01.840 --> 0:14:05.000
You just add an environment variable, you consume it from the function where you need

183
0:14:05.000 --> 0:14:07.400
it and you're done.

184
0:14:07.400 --> 0:14:12.600
But the problem with that is that you then don't have control anymore on all the knobs,

185
0:14:12.600 --> 0:14:19.520
on all the parameters that your program is consuming because they are all scattered across

186
0:14:19.520 --> 0:14:21.240
the code base.

187
0:14:21.240 --> 0:14:29.280
And that is bad because you can't foresee what a given function is doing by reading

188
0:14:29.280 --> 0:14:33.080
its calling site.

189
0:14:33.080 --> 0:14:36.800
So again, this is something that should be avoided.

190
0:14:36.800 --> 0:14:44.520
Environment variables should be read in your main functions and then be propagated through

191
0:14:44.520 --> 0:14:49.480
all the stacks.

192
0:14:49.480 --> 0:14:56.520
So another topic that I care about is function arguments.

193
0:14:56.520 --> 0:15:03.080
And the first one is booleans.

194
0:15:03.080 --> 0:15:10.120
So you start with something like this where you have a simple setup function that is easy

195
0:15:10.120 --> 0:15:18.400
enough and then with all the good intentions of the world, thanks.

196
0:15:18.400 --> 0:15:23.800
With all the good intentions of the world, the developer starts adding a parameter.

197
0:15:23.800 --> 0:15:29.320
But then we need another one and then we need another one.

198
0:15:29.320 --> 0:15:32.160
And how does it look on the calling site?

199
0:15:32.160 --> 0:15:33.160
Something like this.

200
0:15:33.160 --> 0:15:38.840
And you think, hmm, true, false, true, true, false, what the hell?

201
0:15:38.840 --> 0:15:40.360
And then you need to stop.

202
0:15:40.360 --> 0:15:42.560
You need to enter into this function.

203
0:15:42.560 --> 0:15:48.080
You need to understand where was the enable webbook parameter?

204
0:15:48.080 --> 0:15:50.120
It was the first one and then you get back here.

205
0:15:50.120 --> 0:15:58.480
And this works but adds friction and getting a better version of it is so cheap that we

206
0:15:58.480 --> 0:16:03.360
should do that because we are doing a favor to our future selves.

207
0:16:03.360 --> 0:16:08.480
We are doing a favor to the maintainer and it's going to be easier to understand.

208
0:16:08.480 --> 0:16:19.960
Another option might be to pass a structure to the function that also works, but not this.

209
0:16:19.960 --> 0:16:25.960
Now I want to talk about function overloading or the fact that Go doesn't have.

210
0:16:25.960 --> 0:16:28.960
So it's more or less the same as the other one.

211
0:16:28.960 --> 0:16:37.360
Go doesn't have function overloading so it's easy to have this full variety of the same

212
0:16:37.360 --> 0:16:40.720
function where we need to slightly change the behavior.

213
0:16:40.720 --> 0:16:45.000
So you start with creating a service, then you need one with a backend, then you need

214
0:16:45.000 --> 0:16:50.520
one with an IP and then you need one with a backend and with an IP.

215
0:16:50.520 --> 0:16:55.520
And it's clear that can get easily out of hand.

216
0:16:55.520 --> 0:17:04.040
So an approach that I really like is using a variadic argument with some modifiers that

217
0:17:04.040 --> 0:17:09.800
accept the parameter and do what they have to do.

218
0:17:09.800 --> 0:17:13.160
And this is how it looks from the colon site.

219
0:17:13.160 --> 0:17:19.000
And it's clear, it's easy to understand.

220
0:17:19.000 --> 0:17:23.000
Your future self will thank you for this.

221
0:17:23.000 --> 0:17:27.800
And there is also another version where you can have these generator functions.

222
0:17:27.800 --> 0:17:35.200
I think it's on the borderline of being too magic for me, but again, this one is easy

223
0:17:35.200 --> 0:17:39.320
to read.

224
0:17:39.320 --> 0:17:47.120
So next one, I see this happening a lot in the world of controllers where you have one

225
0:17:47.120 --> 0:17:52.660
file that basically implements all the methods related to a controller.

226
0:17:52.660 --> 0:17:57.280
So you have this file and you need to add a utility function and then all the other

227
0:17:57.280 --> 0:17:59.680
functions are methods and what do you do?

228
0:17:59.680 --> 0:18:01.800
You add a new method.

229
0:18:01.800 --> 0:18:04.260
Even if it doesn't have to be a method.

230
0:18:04.260 --> 0:18:08.520
So you look at something like this and you think, hmm, why is this a method?

231
0:18:08.520 --> 0:18:12.040
Is there something wrong with that?

232
0:18:12.040 --> 0:18:15.440
And this again is adding friction that could be avoided.

233
0:18:15.440 --> 0:18:19.400
So if a function is a function, just make it a function and not a method.

234
0:18:19.400 --> 0:18:22.280
Because it's also testing is easier.

235
0:18:22.280 --> 0:18:27.880
You don't have to have the instance that you are not using for anything just in order to

236
0:18:27.880 --> 0:18:30.400
test this function.

237
0:18:30.400 --> 0:18:36.760
And then a word about pointers.

238
0:18:36.760 --> 0:18:41.600
You all have pointers like not all other languages.

239
0:18:41.600 --> 0:18:47.240
So people might find them hard to reason about.

240
0:18:47.240 --> 0:18:52.800
And when I see two functions like this, my first thing I thought is like this one is

241
0:18:52.800 --> 0:18:53.920
not changing the object.

242
0:18:53.920 --> 0:18:55.640
The second one is doing that.

243
0:18:55.640 --> 0:18:58.800
So this is the rule of thumb that I'm trying to apply.

244
0:18:58.800 --> 0:19:02.720
If a function is not changing the object, then pass the object by value.

245
0:19:02.720 --> 0:19:06.120
Otherwise pass the pointer.

246
0:19:06.120 --> 0:19:07.840
But there are also exceptions.

247
0:19:07.840 --> 0:19:10.960
There are some kind of objects that can be passed by value.

248
0:19:10.960 --> 0:19:15.240
Or they can, but they will give you a bad afternoon.

249
0:19:15.240 --> 0:19:21.960
But so mutexes, file descriptors, we need to pass them by reference because that's the

250
0:19:21.960 --> 0:19:22.960
way it works.

251
0:19:22.960 --> 0:19:25.260
So we have linters that help us in that.

252
0:19:25.260 --> 0:19:32.360
And we have this rule of thumb that says if you look at the point, the object, if all

253
0:19:32.360 --> 0:19:37.800
the methods associated are associated with a pointer, then use a pointer.

254
0:19:37.800 --> 0:19:40.000
One might argue how about performances.

255
0:19:40.000 --> 0:19:43.800
We are passing the whole object instead of passing just the reference.

256
0:19:43.800 --> 0:19:47.320
Yeah, passing the reference is cheaper.

257
0:19:47.320 --> 0:19:49.520
But this is not C. This is go.

258
0:19:49.520 --> 0:19:51.240
And that's not always clear.

259
0:19:51.240 --> 0:19:54.480
So what we should care about is the readability.

260
0:19:54.480 --> 0:20:00.640
And we have a lot of toolery that will help us to understand if that can be optimized

261
0:20:00.640 --> 0:20:04.760
if it's in the hot path.

262
0:20:04.760 --> 0:20:15.480
And then we need to sacrifice a bit the readability of our program in order to have better performances.

263
0:20:15.480 --> 0:20:21.040
So now I'm going to talk about something that was advocated in clean code where it says

264
0:20:21.040 --> 0:20:26.120
that our code base should read like a newspaper.

265
0:20:26.120 --> 0:20:31.120
Which means that you open a file, you should have all the high level concepts on the top

266
0:20:31.120 --> 0:20:36.040
of the file and then start to find all the neat details of the implementation in the

267
0:20:36.040 --> 0:20:37.800
bottom of the file.

268
0:20:37.800 --> 0:20:41.560
And this applies pretty well to Go.

269
0:20:41.560 --> 0:20:47.680
So what I expect from a well written Go file is to have all the public methods, all the

270
0:20:47.680 --> 0:20:52.400
public objects in the top of the file because when I open the file, I see what this package

271
0:20:52.400 --> 0:20:55.640
has to offer to the external world.

272
0:20:55.640 --> 0:21:02.320
And so those are our high level concepts by definition.

273
0:21:02.320 --> 0:21:08.320
And another thing that I think is sometimes underestimated is the fact that we can have

274
0:21:08.320 --> 0:21:10.600
our packages split into files.

275
0:21:10.600 --> 0:21:19.000
So again, in order to have a better availability of our code base, we can split it into files,

276
0:21:19.000 --> 0:21:28.080
have a main file related to the package that is named after the package, and then have

277
0:21:28.080 --> 0:21:34.960
these smaller entities where we put the different logics.

278
0:21:34.960 --> 0:21:39.360
And this is basically what I'm trying to say here.

279
0:21:39.360 --> 0:21:47.000
So try to have the public fields on the top, try to remove or to move the util functions

280
0:21:47.000 --> 0:21:51.080
in the bottom, split the package into files because again, it's free.

281
0:21:51.080 --> 0:21:57.920
It won't cost any energy to you or to the executable.

282
0:21:57.920 --> 0:22:03.920
And have a main package file that is named after the package.

283
0:22:03.920 --> 0:22:09.240
Next item is about asynchronous functions.

284
0:22:09.240 --> 0:22:14.280
And I saw this many times.

285
0:22:14.280 --> 0:22:17.440
This is one of the nice things about Go, right?

286
0:22:17.440 --> 0:22:21.880
It's so easy, so convenient to implement concurrent code.

287
0:22:21.880 --> 0:22:28.440
You can just implement Go routines, you can pass channels and have a fan in, fan out.

288
0:22:28.440 --> 0:22:34.960
But the problem with that is that something like this has some flaws.

289
0:22:34.960 --> 0:22:41.480
And I think that is way better to, again, take the business logic, move it to a synchronous

290
0:22:41.480 --> 0:22:46.600
function that is easier to test without all the infrastructure that you need to put in

291
0:22:46.600 --> 0:22:54.680
place with channels, with weight groups in order to have your, to reverse the asynchronousness

292
0:22:54.680 --> 0:22:57.160
of your function just in order to test it.

293
0:22:57.160 --> 0:23:02.640
So if you can move the business logic into a synchronous function and let the calling

294
0:23:02.640 --> 0:23:06.640
site handle the life cycle of the Go routine.

295
0:23:06.640 --> 0:23:14.200
So again, that part has to be delegated on the client code and that will make our function

296
0:23:14.200 --> 0:23:19.400
easier to test and our code base easier to reason about.

297
0:23:19.400 --> 0:23:24.120
And again, I didn't invent this as everything else.

298
0:23:24.120 --> 0:23:28.320
This is from the CoderView Go Wiki.

299
0:23:28.320 --> 0:23:29.920
And it's basically saying the same thing.

300
0:23:29.920 --> 0:23:39.200
Like try to use synchronous functions as much as you can.

301
0:23:39.200 --> 0:23:42.400
Next item is about functions that lie.

302
0:23:42.400 --> 0:23:44.120
And what I mean by that.

303
0:23:44.120 --> 0:23:48.760
You have something that is what would you expect this function to do?

304
0:23:48.760 --> 0:23:51.200
Clear the node.

305
0:23:51.200 --> 0:23:52.200
Exactly.

306
0:23:52.200 --> 0:23:54.080
That's what I would expect.

307
0:23:54.080 --> 0:24:00.400
But the developer found a very edgy corner case where if the name of the node is do not

308
0:24:00.400 --> 0:24:03.040
clean, then do not clean.

309
0:24:03.040 --> 0:24:08.160
And he was doing that with the all good faith of the world.

310
0:24:08.160 --> 0:24:10.640
He's trying to solve a problem here.

311
0:24:10.640 --> 0:24:15.360
But the problem is that again, this is going to give us a bad afternoon because we'll see

312
0:24:15.360 --> 0:24:23.000
that the node is not being cleared and we'll have to put a lot of print f's in our code

313
0:24:23.000 --> 0:24:28.920
or to do a lot of debugging in order to understand why is this happening.

314
0:24:28.920 --> 0:24:34.040
So again, this is done with good intentions.

315
0:24:34.040 --> 0:24:36.800
But the result is not so good.

316
0:24:36.800 --> 0:24:46.440
So again, as I said multiple times today, we should defer this responsibility to the

317
0:24:46.440 --> 0:24:54.320
calling site because that will result in a code base that requires less energy and less

318
0:24:54.320 --> 0:24:56.280
effort to understand.

319
0:24:56.280 --> 0:25:00.520
What if we have this function called 100 times in our code base?

320
0:25:00.520 --> 0:25:01.520
I don't know.

321
0:25:01.520 --> 0:25:09.040
Just call it clear the node but not the do not clean one or have one filter function,

322
0:25:09.040 --> 0:25:14.040
whatever but not lie to the reader.

323
0:25:14.040 --> 0:25:23.960
So wrapping up, there is no much to wrap up.

324
0:25:23.960 --> 0:25:26.920
It was just a list of no related items.

325
0:25:26.920 --> 0:25:35.200
Maybe the only takeaway that is global is to say that we should be smart and let our

326
0:25:35.200 --> 0:25:43.240
readers the calling site over the code base do a bit more because that will give us a

327
0:25:43.240 --> 0:25:46.400
better day in the future.

328
0:25:46.400 --> 0:25:54.720
I'm a strong believer of the Pareto's principle most often when it's on the bad side of it.

329
0:25:54.720 --> 0:25:59.360
But in this case, I think that by applying this set of rules that will take very less

330
0:25:59.360 --> 0:26:08.320
to implement, those will improve the quality of the code base a lot.

331
0:26:08.320 --> 0:26:16.200
And then I want to finish with this quote from Rob Pike, simplicity is complicated but

332
0:26:16.200 --> 0:26:19.800
the clarity is worth the fight.

333
0:26:19.800 --> 0:26:25.440
And with that, I'm finished.

334
0:26:25.440 --> 0:26:28.520
Sorry?

335
0:26:28.520 --> 0:26:38.880
Are there any questions?

336
0:26:38.880 --> 0:26:44.880
I'll try to come with a microphone.

337
0:26:44.880 --> 0:26:45.880
Thanks for the talk.

338
0:26:45.880 --> 0:26:54.720
I was wondering, do you see any room for automating some of these rules and wisdom that you share

339
0:26:54.720 --> 0:26:55.720
today?

340
0:26:55.720 --> 0:27:00.920
I don't know.

341
0:27:00.920 --> 0:27:02.480
I should think about that.

342
0:27:02.480 --> 0:27:08.720
Probably some of them, yes, like avoiding having functions or raising a flag if a function

343
0:27:08.720 --> 0:27:12.040
is accepting a channel, for example.

344
0:27:12.040 --> 0:27:14.440
But there are exceptions to that.

345
0:27:14.440 --> 0:27:16.760
So that shouldn't be blocking.

346
0:27:16.760 --> 0:27:22.600
There are some others like the function that is lying to the user is something that depends

347
0:27:22.600 --> 0:27:30.560
on the implementation or, for example, having a function that accepts five bullions should

348
0:27:30.560 --> 0:27:32.440
be flagged.

349
0:27:32.440 --> 0:27:42.360
I see that I think that it depends on the case but some of them might be automated.

350
0:27:42.360 --> 0:27:44.320
Any more questions?

351
0:27:44.320 --> 0:27:45.480
No?

352
0:27:45.480 --> 0:27:50.880
Thank you very much.

353
0:27:50.880 --> 0:27:58.840
How was it?


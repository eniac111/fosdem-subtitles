WEBVTT

00:00.000 --> 00:11.080
I just have to mention that our board has put out a recruitment call, a call for nominations.

00:11.080 --> 00:12.360
We're trying to expand our board.

00:12.360 --> 00:15.320
So if you go to fsf.org, it'll be the top news item.

00:15.320 --> 00:20.560
It's something I just want to plug before I get started.

00:20.560 --> 00:22.760
We also host another conference in a month.

00:22.760 --> 00:25.800
You'll see some information about that too.

00:25.800 --> 00:40.480
So my talk is about SAS, and that stands for Public Speaking.

00:40.480 --> 00:43.720
It takes just a minute.

00:43.720 --> 00:50.360
A service as a software substitute.

00:50.360 --> 00:56.200
And what that means is when you run a service, when you use a service, and you use it to

00:56.200 --> 00:59.160
substitute for your own computing.

00:59.160 --> 01:04.120
And that's a little abstract, so I specify give an example.

01:04.120 --> 01:07.920
And the one I like to give is a photo editing service.

01:07.920 --> 01:12.880
So say you go to a website, you upload a photo, you tell it, you want to turn it black and

01:12.880 --> 01:18.040
white, and you click a button, it does it, and then you click download and you've got

01:18.040 --> 01:19.040
your photo.

01:19.040 --> 01:26.960
Well, that computation done on the back on the server is something that you should control

01:26.960 --> 01:30.960
with a program, with a free photo editing program like GIMP.

01:30.960 --> 01:36.440
And so when you use a service like that, you give away your software freedom in a very

01:36.440 --> 01:42.840
similar way to using a proprietary program on your computer.

01:42.840 --> 01:49.200
But in some ways it's even worse, because the server operator, it's automatically spire,

01:49.200 --> 01:55.320
has all your data, and it automatically has a backdoor to make changes at any time.

01:55.320 --> 02:00.200
So in some ways even worse than a proprietary software.

02:00.200 --> 02:10.880
So I want to talk about, that's sort of the basic case, but I'm going to assume you understand

02:10.880 --> 02:12.520
software freedom a bit.

02:12.520 --> 02:17.080
So I'm going to go into some more other cases.

02:17.080 --> 02:23.360
So let's talk about first some basic examples of when something is not SAS.

02:23.360 --> 02:31.480
So when somebody else is inherently involved in the activity, that's kind of usually a

02:31.480 --> 02:33.120
good giveaway.

02:33.120 --> 02:36.400
So communication service is an example.

02:36.400 --> 02:38.920
Say I want to send you a message across the internet.

02:38.920 --> 02:41.920
We need some intermediary to write that message.

02:41.920 --> 02:44.840
It's just I don't have a direct connection to everybody else.

02:44.840 --> 02:48.360
So somebody has to provide a service to do that.

02:48.360 --> 02:51.240
It's necessary.

02:51.240 --> 02:54.860
Another good example is publication.

02:54.860 --> 02:57.360
So I give you some data.

02:57.360 --> 02:58.720
I send you an email.

02:58.720 --> 03:00.000
I say you can publish it.

03:00.000 --> 03:02.880
Well, there's nothing wrong with you doing that versus me doing that.

03:02.880 --> 03:06.800
It's just publishing information.

03:06.800 --> 03:15.160
Now some websites offer multiple services and well, or one they call it one service,

03:15.160 --> 03:22.680
but it has many different use cases and some are SAS and some aren't.

03:22.680 --> 03:24.880
And let me digress just for a second.

03:24.880 --> 03:29.040
This SAS has nothing to do with the SAS with two S's.

03:29.040 --> 03:34.000
It was kind of meant to be a bad pun and it didn't work out that great.

03:34.000 --> 03:41.200
So just know that when I'm saying SAS, I'm talking about the SAS with the three S's and

03:41.200 --> 03:43.800
you just have to understand by context.

03:43.800 --> 03:48.920
So as I was saying, some services have multiple use cases.

03:48.920 --> 03:50.640
Some are SAS, some aren't.

03:50.640 --> 03:54.280
An example would be the website Flickr.

03:54.280 --> 03:59.480
It's meant to share photos, publication, not SAS, but then it also has photo editing features

03:59.480 --> 04:02.560
that is SAS as I talked about.

04:02.560 --> 04:07.200
So let's move on to another example, a backup service.

04:07.200 --> 04:15.440
So a backup service is something people often like to run themselves.

04:15.440 --> 04:16.960
So you think, well, is it SAS?

04:16.960 --> 04:17.960
Is it not?

04:17.960 --> 04:23.280
Well, if the backup, if the point of the backup service is to give you back your files exactly

04:23.280 --> 04:30.160
as you gave it to them, then it's not SAS because there's no computation there that

04:30.160 --> 04:34.560
you should control if you're only hoping to get back the exact same data that you gave

04:34.560 --> 04:35.560
it.

04:35.560 --> 04:37.120
The result wouldn't be any different.

04:37.120 --> 04:41.200
Now you may want to run that backup service for reasons other than SAS.

04:41.200 --> 04:42.720
Maybe you think it's more reliable.

04:42.720 --> 04:45.480
Maybe you think you have some privacy there.

04:45.480 --> 04:51.680
And that's one of the complications with SAS and services in general is that there are

04:51.680 --> 04:55.760
other concerns besides SAS that are often very important to people.

04:55.760 --> 04:58.920
So it makes it a little difficult to talk about it.

04:58.920 --> 05:03.800
That's part of the reason I'm talking about it today.

05:03.800 --> 05:12.160
Now how about the case of a database as a database service, for example, a SQL database

05:12.160 --> 05:13.160
service?

05:13.160 --> 05:21.560
Well, in this case, SQL queries are actually complex computation.

05:21.560 --> 05:23.800
There's huge manuals for them.

05:23.800 --> 05:29.080
How they work matters to the people using it.

05:29.080 --> 05:31.320
They want specific database programs.

05:31.320 --> 05:32.880
They care about what the version is running.

05:32.880 --> 05:34.920
They care about how that computation is run.

05:34.920 --> 05:39.960
So yes, it would be a SAS if it's a database service.

05:39.960 --> 05:46.280
But then think about contrast, a backup service, and a database service.

05:46.280 --> 05:51.520
So say you use a database service, but you use it like a backup service.

05:51.520 --> 05:56.720
You just dump some data into a single table, and you just retrieve that table.

05:56.720 --> 06:01.560
Well then you're using it like a backup service, and suddenly it's not SAS anymore.

06:01.560 --> 06:09.040
So what we have to think about is the primary purpose of how you're using the service.

06:09.040 --> 06:21.280
And when I say primary purpose, that brings me to a secondary purpose.

06:21.280 --> 06:24.800
And it's not really a secondary purpose that I want to talk about.

06:24.800 --> 06:28.920
But let me bring up another example.

06:28.920 --> 06:33.440
Say you upload some files to your backup service.

06:33.440 --> 06:38.920
And then you say to the backup service, what files do I have?

06:38.920 --> 06:43.760
And the backup service returns you a list of files sorted alphabetically.

06:43.760 --> 06:51.440
So if you have a list of files on your computer and you wanted it sorted, well that would

06:51.440 --> 06:53.920
be something you would want to do on your computer.

06:53.920 --> 06:58.600
You'd want to run the sorting algorithm, something you should control, how it's sorted.

06:58.600 --> 06:59.600
Definitely matters to you.

06:59.600 --> 07:01.000
That's your computation.

07:01.000 --> 07:08.040
But then when the backup service does it, well it has to tell you those files, and it

07:08.040 --> 07:09.600
has to sort them somehow.

07:09.600 --> 07:12.360
It has to give you to them in some sorted order.

07:12.360 --> 07:21.960
So in this case, it's doing computation that is what I call incidental computing.

07:21.960 --> 07:23.260
It's not your primary purpose.

07:23.260 --> 07:27.040
Your purpose is just to find out what files are on the backup service.

07:27.040 --> 07:33.500
Incidentally, there has to be some computing done in that process, which happens to also

07:33.500 --> 07:38.760
be like computing you would do on your own computer if you were running locally.

07:38.760 --> 07:42.880
But it's not the primary purpose of using that service.

07:42.880 --> 07:44.880
So it wouldn't be SAS.

07:44.880 --> 07:48.160
Another way to call it was ancillary computing.

07:48.160 --> 07:54.800
And so when you pick apart a service and its use cases, this is one way to narrow down

07:54.800 --> 08:00.960
the issue to whether something is SAS or is not SAS.

08:00.960 --> 08:06.760
Now for another more complicated example, I've been talking about the computing of an

08:06.760 --> 08:13.280
individual person, but groups can come together for a common purpose, form an organization

08:13.280 --> 08:19.000
or a project, and then they use a server to collaborate with each other.

08:19.000 --> 08:27.080
And an example of this would be like Wikipedia, which runs, well, media wiki, and Wikipedia

08:27.080 --> 08:30.760
and people who, and groups who run media wiki.

08:30.760 --> 08:42.440
Now that service has features like document editing, dipping documents, conflict resolution.

08:42.440 --> 08:48.360
Those are the type of computing, if you were working on your own, something you would want

08:48.360 --> 08:57.000
to control on your computer, but because you're working collaboratively with a group, you

08:57.000 --> 09:01.800
could say the group's computing.

09:01.800 --> 09:07.560
It's the group, and that group should be able to control its own computing by running its

09:07.560 --> 09:09.780
own server and the software on it.

09:09.780 --> 09:15.920
So you could say when you join in with that group, you're a member of that group and you're

09:15.920 --> 09:18.120
collaborating and doing that group's computing.

09:18.120 --> 09:21.920
So you can use those sort of features together.

09:21.920 --> 09:27.880
And this is a little bit hard to think about because sometimes your computing versus a

09:27.880 --> 09:34.760
group's computing can get a little blurry sometimes, but it's important to realize and

09:34.760 --> 09:37.760
think about.

09:37.760 --> 09:41.240
So onto another example.

09:41.240 --> 09:44.520
Think about bug tracking, a bug tracker.

09:44.520 --> 09:52.320
This is a very common piece of software that developers use.

09:52.320 --> 10:02.640
Now one way that a bug tracker could work, or does work for some projects, is they have

10:02.640 --> 10:08.080
a mailing list where they say, bugs go to this mailing list.

10:08.080 --> 10:13.280
So somebody sends an email to the mailing list, say, I have a bug, and somebody responds

10:13.280 --> 10:15.640
and says, yes, I agree, that's a bug.

10:15.640 --> 10:17.440
Or somebody says, no, I don't think so.

10:17.440 --> 10:18.840
And they discuss it.

10:18.840 --> 10:27.240
Well, this is just a form of communication and publication, like a normal mailing list,

10:27.240 --> 10:30.000
and I wouldn't call that SAS.

10:30.000 --> 10:36.560
But consider a software like Bugzilla.

10:36.560 --> 10:39.960
Well, it doesn't work that way.

10:39.960 --> 10:49.960
Especially with a larger project, you customize it so that it has maybe even hundreds of fields.

10:49.960 --> 11:00.760
And the people who are administering it are doing complicated queries on all of the bugs,

11:00.760 --> 11:06.360
running queries that will modify all the bugs, reassign them.

11:06.360 --> 11:11.680
And then it's starting to look like a complicated database with a front end.

11:11.680 --> 11:14.960
And then I would call that SAS.

11:14.960 --> 11:24.440
And this, I think, brings up a little bit of a problem in that it's very difficult.

11:24.440 --> 11:33.280
A lot of software projects want sophisticated software for their project.

11:33.280 --> 11:41.520
But they don't necessarily have the means to run that software, like Bugzilla.

11:41.520 --> 11:46.720
Because complicated software is complicated to run, especially as a service.

11:46.720 --> 11:51.160
Because you have data, you have backups, you have all of the details of running complicated

11:51.160 --> 11:52.160
software.

11:52.160 --> 12:00.400
So in that case, it's like a lot of projects out there actually running SAS, giving up

12:00.400 --> 12:01.400
their freedom.

12:01.400 --> 12:03.640
Well, yes, basically.

12:03.640 --> 12:10.320
But it's an area where we have a long way to go, I think.

12:10.320 --> 12:18.880
And a good way to deal with that situation is for projects to come together in a larger

12:18.880 --> 12:24.120
project that is in their collective interest.

12:24.120 --> 12:33.120
So some of the software I run or I help run, like the GNU project, where many software

12:33.120 --> 12:38.040
packages come together, share the infrastructure that's going to be in all of their interests.

12:38.040 --> 12:45.280
And that way, they're sort of doing a group computation together for a bug tracker.

12:45.280 --> 12:52.000
But now this brings me to an example of GitHub.

12:52.000 --> 12:58.920
So when I think of GitHub, I look around at the GitHub service.

12:58.920 --> 13:02.680
And I think there are a few features that are clearly SAS.

13:02.680 --> 13:06.520
One, some obvious examples would be continuous integration.

13:06.520 --> 13:11.320
That's like they kind of give you a virtual machine and say, run some code on your software.

13:11.320 --> 13:19.440
And well, if the code that you're running, well, is their code, then I guess that brings

13:19.440 --> 13:26.320
up another topic of virtual machines, which are not SAS if you control them.

13:26.320 --> 13:33.400
And but another feature of GitHub would be like they have a feature to tell you which

13:33.400 --> 13:36.280
functions in two repositories are different.

13:36.280 --> 13:43.600
Well, clearly that would be SAS because it's parsing the language of the repositories.

13:43.600 --> 13:48.200
It's doing a complicated diff, function level diff on them.

13:48.200 --> 13:54.720
And then some other features I think would not be SAS, like simply publishing a Git

13:54.720 --> 13:56.120
repository.

13:56.120 --> 14:02.240
That's just a publication of software, a publication of information, not SAS.

14:02.240 --> 14:05.520
And then the bug tracker, for example.

14:05.520 --> 14:13.880
I think in its basic form, it works very much like a simple form, like a mailing list that

14:13.880 --> 14:15.800
one person posts, another person replies.

14:15.800 --> 14:18.560
I would call that just a communication service.

14:18.560 --> 14:23.000
But I'm not too familiar with all of the advanced features of GitHub.

14:23.000 --> 14:29.280
But I get the suspicion that some of the maybe there might be some features of the bug tracker

14:29.280 --> 14:34.520
which go into the SAS area when it gets more complicated, when you're an advanced user

14:34.520 --> 14:36.520
of all of the features there.

14:36.520 --> 14:39.440
So I haven't picked apart every piece of GitHub.

14:39.440 --> 14:44.040
And it takes some time to do that analysis, which I haven't done.

14:44.040 --> 14:51.560
But in general, this brings me to the next topic is that, well, I don't know how many

14:51.560 --> 14:52.560
minutes do I have left?

14:52.560 --> 14:53.560
10 more minutes.

14:53.560 --> 14:54.560
10 minutes?

14:54.560 --> 14:55.560
Great.

14:55.560 --> 14:56.560
OK.

14:56.560 --> 15:03.400
So I think I'm done with some basic examples of analyzing SAS or not.

15:03.400 --> 15:10.440
And I'm happy to talk to people because there sometimes aren't bright lines.

15:10.440 --> 15:20.120
And it's a little blurrier than with determining if a piece of software is free or not.

15:20.120 --> 15:24.080
But it's not like there isn't blurry lines in that either.

15:24.080 --> 15:27.680
So I think it's just something we have to deal with.

15:27.680 --> 15:30.760
It's part of a lot of ethical issues, have their gray areas.

15:30.760 --> 15:33.320
And I just happen to be highlighting them.

15:33.320 --> 15:34.320
That's all.

15:34.320 --> 15:40.880
I don't think it's an inherent problem with SAS at all, with the concept of SAS.

15:40.880 --> 15:47.800
So now I want to bring up one common misconception is that a service which publishes some free

15:47.800 --> 15:52.960
source code that it says it's running means that the users of the service have software

15:52.960 --> 15:53.960
freedom.

15:53.960 --> 15:56.560
They don't.

15:56.560 --> 15:58.200
The users don't control that service.

15:58.200 --> 16:00.960
They can't tell it what program to run.

16:00.960 --> 16:07.480
You can only do that with a program on a server you control or on your own computer.

16:07.480 --> 16:12.240
And there may be important code that it runs besides what's published.

16:12.240 --> 16:20.400
I mean, generally, servers are not publishing the operating system or other things.

16:20.400 --> 16:26.800
The first reason I gave is basically the fundamental one, but some other ones are that.

16:26.800 --> 16:30.920
And of course, you can't ever be sure what somebody else's server is doing.

16:30.920 --> 16:33.200
You haven't installed the program.

16:33.200 --> 16:37.040
You can't be 100% sure.

16:37.040 --> 16:43.040
It's different than running your own code on a server you control.

16:43.040 --> 16:47.240
So for services that are not SAS, now I'm going to talk about this idea of publishing

16:47.240 --> 16:52.640
source code and think about the difference and the interaction between SAS and the publishing

16:52.640 --> 16:54.960
of service source code.

16:54.960 --> 17:03.600
So when we think about publishing service source code, I think about the AGPL, which

17:03.600 --> 17:10.440
says you have to publish the source code if it's a service to the users of it.

17:10.440 --> 17:18.200
And what we say is that the publishing of source code benefits the community so that

17:18.200 --> 17:22.440
they could use that source code.

17:22.440 --> 17:33.880
That benefit is so important to people being able to use that code that it's worth mandating

17:33.880 --> 17:34.880
with AGPL.

17:34.880 --> 17:43.920
And we recommend it for all software that is intended to be run as a service.

17:43.920 --> 17:56.400
And in fact, now not thinking about the SAS issue, but just in general, if I encounter

17:56.400 --> 18:02.760
a service and I say, I think, would there be any reason somebody else besides the server

18:02.760 --> 18:06.040
operator would want to run it?

18:06.040 --> 18:15.920
If there is, if there's a plausible case of that, I think, well, then are they publishing

18:15.920 --> 18:16.920
the source code?

18:16.920 --> 18:18.880
If they aren't, why not?

18:18.880 --> 18:23.880
I mean, why do they not want to benefit the community?

18:23.880 --> 18:33.920
And another benefit that brings, I think the biggest one is if the service is working well,

18:33.920 --> 18:42.160
good, maybe there's some fundamental services we all rely on, like DNS services.

18:42.160 --> 18:51.640
But then if the service stops working, it adds conditions that people don't want to

18:51.640 --> 18:52.640
agree to.

18:52.640 --> 18:54.640
It adds, it changes.

18:54.640 --> 18:59.760
Well, then the publishing of source code is sort of an insurance policy that somebody

18:59.760 --> 19:04.760
else could start up a new service and users could move over there, and that is so important

19:04.760 --> 19:10.920
that I think it's worth considering that in general for any service, which is separate

19:10.920 --> 19:14.400
than the SAS issue.

19:14.400 --> 19:19.480
And I think if we take a service like GitHub, I think that's obvious.

19:19.480 --> 19:22.440
Of course, people would want to run their own GitHub.

19:22.440 --> 19:30.920
So why we shouldn't accept a GitHub that doesn't have the service source code published, it's

19:30.920 --> 19:38.600
just foolish to subject yourself to the whims of that service operator without having some

19:38.600 --> 19:46.800
sort of insurance to go somewhere else, even if you aren't using it in a SAS way.

19:46.800 --> 19:56.160
So I'm going to move on to my next topic, which basically I think the SAS has not gotten

19:56.160 --> 20:01.760
enough attention in free software advocacy.

20:01.760 --> 20:02.760
And why hasn't?

20:02.760 --> 20:04.000
I think there's lots of reasons.

20:04.000 --> 20:06.880
I talked a little bit about the complexity.

20:06.880 --> 20:11.880
I think SAS was far less common in the past.

20:11.880 --> 20:19.000
Nowadays, most services tend to require non-free software as a client, usually in the form

20:19.000 --> 20:20.640
of JavaScript.

20:20.640 --> 20:28.880
And so services in general have caused a lot of problems for software freedom, other problems

20:28.880 --> 20:30.080
besides SAS.

20:30.080 --> 20:36.440
But like I said, I think SAS needs to get more attention because it's becoming more

20:36.440 --> 20:37.480
prevalent.

20:37.480 --> 20:42.680
Database services have, in the past few years, become very popular.

20:42.680 --> 20:45.200
Before that, it was much more common to run your own database.

20:45.200 --> 20:49.600
A lot of people are relying on these services, which are SAS.

20:49.600 --> 20:58.800
And so I think one interesting historical reason for a lack of focus on SAS is that,

20:58.800 --> 21:01.800
well, it's not part of the GPL.

21:01.800 --> 21:05.040
It's not part of any license.

21:05.040 --> 21:12.360
When the GPL was being drafted, the FSF had its lawyers try and think of a way to add

21:12.360 --> 21:17.760
in a provision against SAS, and they couldn't think of a way to do it.

21:17.760 --> 21:19.560
So they just didn't.

21:19.560 --> 21:24.400
And so when we say the GPL protects your freedom, well, there's one little hidden asterisk

21:24.400 --> 21:28.640
there as long as you don't give it away in a SAS.

21:28.640 --> 21:34.640
And I'd be curious to know some of the lawyers, maybe some lawyers here today, if they still

21:34.640 --> 21:36.280
think that's the case.

21:36.280 --> 21:40.560
If there's no way to have a SAS provision in a license, I'd be curious to what that

21:40.560 --> 21:41.560
is.

21:41.560 --> 21:45.720
I mean, it's the one case, I think, of the FSF saying, here's an important issue.

21:45.720 --> 21:47.040
We couldn't write into the license.

21:47.040 --> 21:52.440
I haven't heard many people talk about how that could be done.

21:52.440 --> 21:55.960
Maybe not covering all SAS, but some portion of it.

21:55.960 --> 21:57.160
I don't know.

21:57.160 --> 22:03.920
I'm not a lawyer, but I would love to hear from some.

22:03.920 --> 22:07.440
So how can you give SAS more attention?

22:07.440 --> 22:08.440
I don't have all the answers.

22:08.440 --> 22:09.560
It's just a couple ideas.

22:09.560 --> 22:11.840
I think number one is just to simply call it out more.

22:11.840 --> 22:17.720
When a company has a SAS business model, just say, hey, their business model is SAS.

22:17.720 --> 22:20.040
That's taking away people's freedom.

22:20.040 --> 22:23.040
That's a very simple way.

22:23.040 --> 22:33.600
Another idea I have is that there's this term self-hosting, which basically seems to cover

22:33.600 --> 22:35.600
the idea of SAS plus other things.

22:35.600 --> 22:39.120
It's the idea of services, run yourself.

22:39.120 --> 22:46.040
And sometimes it's even expanded to just non-services, a SAS services that should be run on your

22:46.040 --> 22:48.800
own computer and not as a service at all and running themselves.

22:48.800 --> 22:50.640
And people call that self-hosting.

22:50.640 --> 22:54.600
So it's kind of the idea of self-hosting kind of covers SAS plus other things.

22:54.600 --> 23:03.360
So I think also advocating for self-hosting and saying self-hosting overlaps very well

23:03.360 --> 23:09.560
with software freedom is a way that we can advocate against SAS without having to deal

23:09.560 --> 23:18.040
with the complexity of SAS itself of explaining it fully.

23:18.040 --> 23:23.040
And I'm getting to the end of my talk here.

23:23.040 --> 23:27.360
I think most of the ideas I want to share, I'd be happy to talk to people afterwards.

23:27.360 --> 23:33.320
And one shout out to a specific program, GNU Units, which is a small SAS that many of you

23:33.320 --> 23:34.320
many people use.

23:34.320 --> 23:39.120
They ask Google or a search engine to convert between Celsius or Fahrenheit.

23:39.120 --> 23:42.320
And there's a program you can do that on your own computer called GNU Units.

23:42.320 --> 23:44.760
So look it up.

23:44.760 --> 23:45.760
And that's all I've got.

23:45.760 --> 24:00.960
Thanks,

1
0:00:00.000 --> 0:00:02.000
Thank you.

2
0:00:07.000 --> 0:00:09.000
Thank you.

3
0:00:12.000 --> 0:00:14.000
Thank you.

4
0:00:18.000 --> 0:00:20.000
Hey, everyone. Thank you for joining me. I'm Solomon Briss.

5
0:00:20.000 --> 0:00:22.000
This is a mirror without reflection for Kotlin multi-platform.

6
0:00:25.000 --> 0:00:27.000
Without further ado, let's go into the subject and define what

7
0:00:27.000 --> 0:00:29.000
the

8
0:00:31.000 --> 0:00:33.000
context of the program is, for example,

9
0:00:34.000 --> 0:00:36.000
it's possible for a Java class to obtain the name of all of its

10
0:00:36.000 --> 0:00:38.000
members.

11
0:00:41.000 --> 0:00:43.000
This definition is extracted from the Java documentation, and it

12
0:00:43.000 --> 0:00:47.000
explains that reflection basically allows a program to intro

13
0:00:47.000 --> 0:00:53.000
expect upon itself and look at its own method and properties.

14
0:00:53.000 --> 0:00:59.000
For example, in this code, I simply print every field and

15
0:00:59.000 --> 0:01:05.000
method that a class is declaring as accessible.

16
0:01:05.000 --> 0:01:12.000
And so this is possible thanks to these class objects that the

17
0:01:12.000 --> 0:01:19.000
Java programming, the Java runtime gives me, and it allows me

18
0:01:19.000 --> 0:01:25.000
to access all fields, methods, properties, and everything that

19
0:01:25.000 --> 0:01:30.000
defines this class. Now, that's not the only thing Java

20
0:01:30.000 --> 0:01:35.000
reflection can do. Java reflection can also provide

21
0:01:35.000 --> 0:01:39.000
proxies. So, for example, here, I create a simple print-alent

22
0:01:39.000 --> 0:01:41.000
proxy.

23
0:01:42.000 --> 0:01:46.000
So here, I create a simple print-alent proxy.

24
0:01:46.000 --> 0:01:52.000
So here, I create a proxy by saying, okay, here's a class.

25
0:01:52.000 --> 0:01:57.000
Here's its class loader. Here's a class. It's not really a

26
0:01:57.000 --> 0:02:01.000
class. It's an interface. So here's an interface.

27
0:02:01.000 --> 0:02:08.000
And what I'm asking the runtime to do is to give me an object

28
0:02:08.000 --> 0:02:12.000
that implements this interface and delegates every call to this

29
0:02:12.000 --> 0:02:18.000
lambda. So basically, I'm creating an implementation of

30
0:02:18.000 --> 0:02:24.000
an interface at runtime. And this is how you can use it.

31
0:02:24.000 --> 0:02:29.000
As you can see, it's pretty simple. All you have to do is

32
0:02:29.000 --> 0:02:34.000
call this create proxy method, and then you'll have an

33
0:02:34.000 --> 0:02:38.000
interface, an implementation of the interface created at

34
0:02:38.000 --> 0:02:44.000
runtime. So this talk is about to be a, is going to be about

35
0:02:44.000 --> 0:02:48.000
a lot of definitions because we are going to have multiple

36
0:02:48.000 --> 0:02:52.000
pieces of the puzzle. So the first piece of the puzzle was,

37
0:02:52.000 --> 0:02:58.000
of course, reflection. Let's go into Kotlin Multiplatform.

38
0:02:58.000 --> 0:03:02.000
And maybe let's not go into Kotlin Multiplatform because

39
0:03:02.000 --> 0:03:05.000
you've just seen an entire presentation about what is

40
0:03:05.000 --> 0:03:09.000
Kotlin Multiplatform and how it works. So I'm not going to go

41
0:03:09.000 --> 0:03:13.000
into details about what is Kotlin Multiplatform and how it

42
0:03:13.000 --> 0:03:17.000
works, but I'm simply going to say that Kotlin Multiplatform

43
0:03:17.000 --> 0:03:22.000
is a way to compile Kotlin code for different targets,

44
0:03:22.000 --> 0:03:28.000
namely JVM and Android on one side, JavaScript on another

45
0:03:28.000 --> 0:03:33.000
side, and finally Kotlin Native on the last side.

46
0:03:33.000 --> 0:03:38.000
Kotlin Native encompasses iOS and also other less

47
0:03:38.000 --> 0:03:42.000
interesting targets. Let's face it, Kotlin Native exists

48
0:03:42.000 --> 0:03:47.000
for the sole purpose of iOS. So while Kotlin JVM supports

49
0:03:47.000 --> 0:03:51.000
reflection, Kotlin JS and Kotlin Native do not. What is

50
0:03:51.000 --> 0:03:54.000
important to understand in this sentence is that reflection

51
0:03:54.000 --> 0:04:01.000
is not a feature of Kotlin JVM, it's a feature of the JVM.

52
0:04:01.000 --> 0:04:06.000
That Kotlin uses and builds upon with its own reflection

53
0:04:06.000 --> 0:04:11.000
library, but basically it's a feature of the JVM, it's not

54
0:04:11.000 --> 0:04:14.000
a feature of the Kotlin language. And as such, it is not

55
0:04:14.000 --> 0:04:19.000
provided in Kotlin JS and in Kotlin Native. So Kotlin

56
0:04:19.000 --> 0:04:25.000
Multiplatform being the center of Kotlin JVM, Kotlin JS,

57
0:04:25.000 --> 0:04:32.000
and Kotlin Native, hence do not support reflection.

58
0:04:32.000 --> 0:04:38.000
So we need to get together and find another way of doing

59
0:04:38.000 --> 0:04:45.000
what we usually do with reflection. Maybe if we go back

60
0:04:45.000 --> 0:04:53.000
to the definition of what reflection is, we can single

61
0:04:53.000 --> 0:04:57.000
out this word. Reflection is a feature that allows an

62
0:04:57.000 --> 0:05:02.000
executing Java program. So what this means is that reflection

63
0:05:02.000 --> 0:05:08.000
is a runtime feature. And we all know that what we cannot

64
0:05:08.000 --> 0:05:13.000
do at runtime, let's do at compile time. What can go wrong?

65
0:05:13.000 --> 0:05:19.000
Right? So to do that at compile time, what reflection does

66
0:05:19.000 --> 0:05:24.000
at runtime, we need to add several other pieces of our

67
0:05:24.000 --> 0:05:30.000
puzzle. Kotlin Poets is a Kotlin and Java API for generating

68
0:05:30.000 --> 0:05:36.000
Kotlin source files. So what you could do is generate

69
0:05:36.000 --> 0:05:43.000
Kotlin source files by hand with templates and fill yourself

70
0:05:43.000 --> 0:05:49.000
like the vibe of the PHP 2000 era where everything was done

71
0:05:49.000 --> 0:05:55.000
with templating or you could use a type API that will build

72
0:05:55.000 --> 0:05:59.000
the Kotlin file for you. So I strongly encourage you to not

73
0:05:59.000 --> 0:06:03.000
generate your Kotlin source files by hand and use an API

74
0:06:03.000 --> 0:06:08.000
such as Kotlin Poets. And here, for example, it's very simple.

75
0:06:08.000 --> 0:06:13.000
I create a new function called hello. I declare that it takes

76
0:06:13.000 --> 0:06:18.000
a name argument and I add the statement, print alone hello

77
0:06:18.000 --> 0:06:25.000
name. So it generates basically this function. Okay. So that's

78
0:06:25.000 --> 0:06:29.000
a very important piece of our puzzle, but that's by far not

79
0:06:29.000 --> 0:06:37.000
the most complicated one. So the next piece of our puzzle is

80
0:06:37.000 --> 0:06:45.000
KSP. And KSP stands for Kerbal Space Program. It's a very good

81
0:06:45.000 --> 0:06:51.000
video game. And the goal of this video game is to build a

82
0:06:51.000 --> 0:06:55.000
rocket and explore space. It's an exploration game. So it's

83
0:06:55.000 --> 0:07:00.000
purposefully undocumented. So there's no manual for discovery

84
0:07:00.000 --> 0:07:03.000
and that's the entire game. You need to build your rocket,

85
0:07:03.000 --> 0:07:08.000
send your Kerbal to space and see what happened. So the game

86
0:07:08.000 --> 0:07:12.000
is heavily based on trial and error. Not all Kerbal will

87
0:07:12.000 --> 0:07:17.000
survive the journey. You will send them to space and not all

88
0:07:17.000 --> 0:07:22.000
Kerbal will come back. But when you do build a rocket and a

89
0:07:22.000 --> 0:07:27.000
space station in orbit, you feel a great sense of accomplishment.

90
0:07:27.000 --> 0:07:32.000
And as it happens, KSP also stands for Kotlin Symbol

91
0:07:32.000 --> 0:07:39.000
Processing API. The goal is to build a compiler processor,

92
0:07:39.000 --> 0:07:44.000
a compiler code processor. And it is very, very likely

93
0:07:44.000 --> 0:07:49.000
documented. Let's be honest. There is no manual for its

94
0:07:49.000 --> 0:07:55.000
discovery. You will use trial and error and you will scream

95
0:07:55.000 --> 0:08:00.000
at your screen yelling at your frustration. Using KSP is a

96
0:08:00.000 --> 0:08:05.000
very good exercise in managing your frustration because of its

97
0:08:05.000 --> 0:08:12.000
light documentation. But when you finally achieve a

98
0:08:12.000 --> 0:08:18.000
functional Kotlin Symbol processor, you will, just like

99
0:08:18.000 --> 0:08:25.000
in the KSP video game, feel a great sense of accomplishment.

100
0:08:25.000 --> 0:08:31.000
So let's see all our pieces of the puzzle. We use KSP to

101
0:08:31.000 --> 0:08:36.000
instrument codes at compile time. We use Kotlin Poets to

102
0:08:36.000 --> 0:08:40.000
generate codes at compile time. And we use Kotlin Multi

103
0:08:40.000 --> 0:08:45.000
Platform to compile everything for all targets that Kotlin

104
0:08:45.000 --> 0:08:50.000
Multi Platform supports. So the idea here is not to allow a

105
0:08:50.000 --> 0:08:56.000
code to introspect upon itself at runtime, but to generate

106
0:08:56.000 --> 0:09:02.000
the information your code needs at compile time. It is a

107
0:09:02.000 --> 0:09:06.000
lot more optimized, of course, because you don't have to

108
0:09:06.000 --> 0:09:09.000
introspect all the code and all the information you need are

109
0:09:09.000 --> 0:09:13.000
generated for you at compile time, but it is, of course, a

110
0:09:13.000 --> 0:09:20.000
lot more complicated. So how do you create a mirror

111
0:09:20.000 --> 0:09:27.000
generator? So a mirror is a class that contains reflection

112
0:09:27.000 --> 0:09:31.000
information of another class. So how would you create a

113
0:09:31.000 --> 0:09:36.000
mirror generator? Well, creating a Symbol processor in KSP is

114
0:09:36.000 --> 0:09:44.000
not that complicated. What you need to do is create a Symbol

115
0:09:44.000 --> 0:09:50.000
processor class that takes a code generator and a logger as

116
0:09:50.000 --> 0:09:57.000
constructor input. And you will use those to, well, generate

117
0:09:57.000 --> 0:10:02.000
code and log when things go right or wrong. And then you

118
0:10:02.000 --> 0:10:10.000
can get, you can find all symbols that are annotated by a

119
0:10:10.000 --> 0:10:15.000
specific annotation and then simply see what type of symbol

120
0:10:15.000 --> 0:10:20.000
that is, and then you can continue to instrument the code

121
0:10:20.000 --> 0:10:25.000
starting with this. So as you can see here, for example, look

122
0:10:25.000 --> 0:10:29.000
at if the symbol annotated is a property or maybe it's just a

123
0:10:29.000 --> 0:10:34.000
property setter because you can, in Coqe, annotate get and set

124
0:10:34.000 --> 0:10:43.000
properties methods or maybe it's a function declaration or

125
0:10:43.000 --> 0:10:47.000
maybe it's a class declaration and there are a lot of other

126
0:10:47.000 --> 0:10:55.000
things available. What's interesting in KSP and what I'm

127
0:10:55.000 --> 0:11:04.000
not showing here in code is that you could ask KSP to give

128
0:11:04.000 --> 0:11:11.000
you all symbols that are of a simple, of a declaring

129
0:11:11.000 --> 0:11:14.000
interface, for example, that are implementing an interface.

130
0:11:14.000 --> 0:11:18.000
You don't have, just like APT, you don't have to use

131
0:11:18.000 --> 0:11:26.000
annotations. Annotations are a very valid means of conveying

132
0:11:26.000 --> 0:11:31.000
the information that the code will be instrumented. But you

133
0:11:31.000 --> 0:11:35.000
could with KSP say, okay, give me all symbols, all classes

134
0:11:35.000 --> 0:11:40.000
that implement this interface, for example, or give me all

135
0:11:40.000 --> 0:11:48.000
codes to these methods or these kind of things. And then what

136
0:11:48.000 --> 0:11:52.000
you need to do after you have instrumented the code is to

137
0:11:52.000 --> 0:11:58.000
generate your file, the Kotlin source file that you will

138
0:11:58.000 --> 0:12:05.000
generate. And the good news is that, sorry, the good news is

139
0:12:05.000 --> 0:12:12.000
that Kotlin Poet does support KSP. So you don't have to write

140
0:12:12.000 --> 0:12:17.000
a facade between the KSP code generator and the KSP code

141
0:12:17.000 --> 0:12:24.000
generator. Kotlin Poet does support KSP, so it's, as you

142
0:12:24.000 --> 0:12:30.000
can see, pretty easy to write your very own code generator

143
0:12:30.000 --> 0:12:40.000
with KSP. And then what you need to do is to add your

144
0:12:40.000 --> 0:12:47.000
simple processor to your Kotlin compilation tool chain with

145
0:12:47.000 --> 0:12:52.000
Gradle. And as you can see, it's pretty simple. Just apply

146
0:12:52.000 --> 0:13:02.000
the plugin. Now, the KSP plugins is versioned using its own

147
0:13:02.000 --> 0:13:06.000
version number and the Kotlin version number. For example,

148
0:13:06.000 --> 0:13:14.000
here it's version 109 of the Kotlin symbol processor of KSP

149
0:13:14.000 --> 0:13:22.000
and it's version 1810 of the Kotlin language. And at the

150
0:13:22.000 --> 0:13:26.000
moment, because the Kotlin compiler plugin API keeps

151
0:13:26.000 --> 0:13:31.000
changing and is not stable and is not documented, KSP

152
0:13:31.000 --> 0:13:36.000
depends on a very specific version of the Kotlin language.

153
0:13:36.000 --> 0:13:42.000
So you need to upgrade KSP with the same Kotlin version

154
0:13:42.000 --> 0:13:49.000
that you need to upgrade Kotlin. And that's kind of a

155
0:13:49.000 --> 0:13:54.000
bummer because you need to wait when a new Kotlin language

156
0:13:54.000 --> 0:13:59.000
version comes up, you need to wait for KSP to be compatible

157
0:13:59.000 --> 0:14:02.000
with this new version, even for minor version. If you use

158
0:14:02.000 --> 0:14:07.000
the wrong minor version, KSP will warn you that it is not

159
0:14:07.000 --> 0:14:11.000
compatible with this minor version. And once again, that's

160
0:14:11.000 --> 0:14:15.000
because the Kotlin compiler plugin API isn't stable and

161
0:14:15.000 --> 0:14:21.000
that KSP is using internal function and features of the

162
0:14:21.000 --> 0:14:27.000
Kotlin compiler plugin. Then, of course, you probably need

163
0:14:27.000 --> 0:14:31.000
to add your own runtime because when you generate code, you

164
0:14:31.000 --> 0:14:36.000
will probably need to provide with the generated code a

165
0:14:36.000 --> 0:14:41.000
different time of your own. And then you need to declare

166
0:14:41.000 --> 0:14:46.000
that your KSP code processor will run on this code. Now,

167
0:14:46.000 --> 0:14:52.000
as you can see, it is declared differently than with regular

168
0:14:52.000 --> 0:14:58.000
Kotlin dependencies because at the moment, KSP doesn't

169
0:14:58.000 --> 0:15:03.000
interact with the Kotlin Gradle compiler, with the Kotlin

170
0:15:03.000 --> 0:15:08.000
DSL. So you have to use this word KSP common main metadata

171
0:15:08.000 --> 0:15:13.000
configuration in Gradle dependencies.

172
0:15:13.000 --> 0:15:21.000
So what can you do with this technology? Well, for the last

173
0:15:21.000 --> 0:15:26.000
two years, I've been developing an example because it was

174
0:15:26.000 --> 0:15:32.000
needed for the company I worked at, and that was mocking.

175
0:15:32.000 --> 0:15:38.000
So what we have here is a class that works with Kotlin

176
0:15:38.000 --> 0:15:44.000
multi-platform tests, and that works with all targets of

177
0:15:44.000 --> 0:15:49.000
Kotlin, and that generates mocks at compile time. Because

178
0:15:49.000 --> 0:15:56.000
mocking in, for example, mockK or with mokito, mocking uses

179
0:15:56.000 --> 0:16:02.000
the proxy reflection feature of the JVM, which does not

180
0:16:02.000 --> 0:16:08.000
exist in Kotlin multi-platform. So, for example, here we

181
0:16:08.000 --> 0:16:13.000
say we want a view that will be mocked. So view is an

182
0:16:13.000 --> 0:16:18.000
interface, and it will be generated by the mok.mp

183
0:16:18.000 --> 0:16:23.000
compiler plugin. We want a fake, and a fake is a data

184
0:16:23.000 --> 0:16:26.000
class, and we want a data class that filled with fake

185
0:16:26.000 --> 0:16:31.000
values, empty string, zeroed integers, and all those kind

186
0:16:31.000 --> 0:16:35.000
of stuff. We want a controller that uses both a fake and

187
0:16:35.000 --> 0:16:45.000
a mock. We want to define the behavior of our mock. For

188
0:16:45.000 --> 0:16:49.000
example, here I say that in the interface view in my mock,

189
0:16:49.000 --> 0:16:56.000
in my view mock, if I call view.render with any argument,

190
0:16:56.000 --> 0:17:01.000
it will return true, and I want to be able to verify that

191
0:17:01.000 --> 0:17:07.000
a mock has been called with a specific data in this

192
0:17:07.000 --> 0:17:13.000
instance model. So all that, and all that DSL, is possible

193
0:17:13.000 --> 0:17:19.000
thanks to KSP and Kotlin Poet, and the ability to generate

194
0:17:19.000 --> 0:17:24.000
code at compile time. So what was previously unavailable to

195
0:17:24.000 --> 0:17:28.000
Kotlin multi-platform, because reflection wasn't available,

196
0:17:28.000 --> 0:17:34.000
is now available thanks to code generation. And by the

197
0:17:34.000 --> 0:17:40.000
way, if you're interested in this in mocking for Kotlin

198
0:17:40.000 --> 0:17:45.000
multi-platform, you can use mock.mp, which is a library that

199
0:17:45.000 --> 0:17:51.000
we built with Deezer, and this testing library is used in

200
0:17:51.000 --> 0:17:57.000
production, meaning in test production, at Deezer, almost

201
0:17:57.000 --> 0:18:03.000
all the multi-platform tests at Deezer uses this mock.mp

202
0:18:03.000 --> 0:18:11.000
library that we developed together. So there's a problem

203
0:18:11.000 --> 0:18:16.000
with KSP. If we go back to the example I just gave you,

204
0:18:16.000 --> 0:18:23.000
this method uses this inject mocks function. This class

205
0:18:23.000 --> 0:18:27.000
uses inject mocks. And the fact is that inject mocks is

206
0:18:27.000 --> 0:18:32.000
precisely the function that is generated for this class,

207
0:18:32.000 --> 0:18:36.000
because this class, we can see here, because this class has

208
0:18:36.000 --> 0:18:40.000
at mock annotated properties and at fake annotated properties,

209
0:18:40.000 --> 0:18:47.000
then an inject mocks function will be generated by the

210
0:18:47.000 --> 0:18:53.000
mok.mp compiler plugin slash symbol processor. And when you

211
0:18:53.000 --> 0:18:57.000
load the project, the Deezer project, or any project that

212
0:18:57.000 --> 0:19:03.000
uses this system, well, inject mocks is an error, because it

213
0:19:03.000 --> 0:19:07.000
hasn't been generated yet. So IDEA will show you an error

214
0:19:07.000 --> 0:19:10.000
saying, okay, this function just doesn't exist. I don't know

215
0:19:10.000 --> 0:19:15.000
what you are talking about. So you need to either build the

216
0:19:15.000 --> 0:19:24.000
project or you need to say to Gradle to generate and run KSP.

217
0:19:24.000 --> 0:19:29.000
And at the moment, there is no way around that. And that's

218
0:19:29.000 --> 0:19:33.000
because KSP has a very important limitation. It treats the

219
0:19:33.000 --> 0:19:38.000
source code it is instrumenting as read-only. There is no way

220
0:19:38.000 --> 0:19:44.000
with KSP to add properties or to modify a symbol that you are

221
0:19:44.000 --> 0:19:50.000
instrumenting. So this, my test class, there's no way with KSP

222
0:19:50.000 --> 0:19:56.000
that I can add a property or I can add an annotation and all

223
0:19:56.000 --> 0:20:00.000
that. And since there is no reflection in Kotlin

224
0:20:00.000 --> 0:20:05.000
multiplatform, there is no way to find a class that exists,

225
0:20:05.000 --> 0:20:11.000
but there's no class then, class.withname. So that means

226
0:20:11.000 --> 0:20:17.000
that you need in your code to use the code that is generated,

227
0:20:17.000 --> 0:20:23.000
and that code doesn't exist unless you generate it. And

228
0:20:23.000 --> 0:20:30.000
that's a small price to pay to use KSP. So why would you use

229
0:20:30.000 --> 0:20:35.000
KSP as opposed to writing a full-fledged Kotlin compiler

230
0:20:35.000 --> 0:20:41.000
plugin? First and foremost, because KSP provides a kind of

231
0:20:41.000 --> 0:20:51.000
stable API, it is, the API changes, but it follows a

232
0:20:51.000 --> 0:20:56.000
depreciation cycle, and the API of KSP is supposed to be

233
0:20:56.000 --> 0:21:02.000
public, so they treat it with the respect of a public API.

234
0:21:02.000 --> 0:21:06.000
And also because when you use KSP, you don't have to write a

235
0:21:06.000 --> 0:21:12.000
compiler plugin. Writing a compiler plugin with Kotlin just

236
0:21:12.000 --> 0:21:17.000
not only means that you will have to understand the inner

237
0:21:17.000 --> 0:21:21.000
components of the Kotlin compiler, which are absolutely

238
0:21:21.000 --> 0:21:25.000
not documented. KSP is a little bit documented. The Kotlin

239
0:21:25.000 --> 0:21:29.000
compiler internals are just not documented, but it also means

240
0:21:29.000 --> 0:21:32.000
that you will have to handle compiler integration and greater

241
0:21:32.000 --> 0:21:35.000
integration. So you will have to add your own cradle plugin,

242
0:21:35.000 --> 0:21:38.000
you will have to add your own compiler plugin, and it becomes

243
0:21:38.000 --> 0:21:44.000
a very complicated endeavor. And finally, because for code

244
0:21:44.000 --> 0:21:51.000
generating use cases, KSP remains a lot simpler than

245
0:21:51.000 --> 0:21:56.000
writing a compiler plugin, which once again is done completely

246
0:21:56.000 --> 0:22:00.000
in the dark. You won't have any support if you try to write

247
0:22:00.000 --> 0:22:08.000
your own compiler plugin. So using KSP is still a very, very

248
0:22:08.000 --> 0:22:12.000
important tool in the grand open source library of Kotlin

249
0:22:12.000 --> 0:22:18.000
multi-platform project. A lot of Kotlin multi-platform libraries

250
0:22:18.000 --> 0:22:26.000
use KSP now, and I encourage you to contribute to that grant

251
0:22:26.000 --> 0:22:32.000
library. And that's it for me. Just want to say that I

252
0:22:32.000 --> 0:22:36.000
represent here Coding Coders. We are certified for our Kotlin

253
0:22:36.000 --> 0:22:40.000
training, so if you want Kotlin multi-platform training, be sure

254
0:22:40.000 --> 0:22:47.000
to contact us. We have lots of libraries that are open source.

255
0:22:47.000 --> 0:22:51.000
Ruma with the next talk is going to present to you. Another

256
0:22:51.000 --> 0:22:57.000
one of them, and we like to do our open source work with

257
0:22:57.000 --> 0:23:03.000
Kotlin multi-platform for every target it can compile to. So

258
0:23:03.000 --> 0:23:07.000
whether you want to contribute to Kotlin multi-platform

259
0:23:07.000 --> 0:23:12.000
libraries or learn how to use Kotlin multi-platform, be sure

260
0:23:12.000 --> 0:23:19.000
to contact us. Thank you very much.

261
0:23:19.000 --> 0:23:23.000
Thank you again. We have time for one question. If someone

262
0:23:23.000 --> 0:23:29.000
has a question, raise your hand. Just shout it, and you have

263
0:23:29.000 --> 0:23:30.000
to repeat the question.

264
0:23:30.000 --> 0:23:37.000
Yeah, so you decided to write your own library. There was

265
0:23:37.000 --> 0:23:41.000
any way of making Kotlin works with yours, or is that

266
0:23:41.000 --> 0:23:42.000
impossible?

267
0:23:42.000 --> 0:23:49.000
So the question is, rather than creating a whole new library

268
0:23:49.000 --> 0:23:53.000
for marking a Kotlin multi-platform, is there a way to

269
0:23:53.000 --> 0:23:57.000
port Mokito to Kotlin multi-platform? And the answer is

270
0:23:57.000 --> 0:24:02.000
definitely no. Mokito uses a lot of reflection, not just for

271
0:24:02.000 --> 0:24:09.000
proxy, but for object generation and for verification, and it

272
0:24:09.000 --> 0:24:14.000
instruments the runtime heavily. And since there is no

273
0:24:14.000 --> 0:24:17.000
runtime, there is no JVM runtime in Kotlin multi-platform,

274
0:24:17.000 --> 0:24:22.000
there is no way to port Mokito to Kotlin multi-platform. Now

275
0:24:22.000 --> 0:24:27.000
what we've tried to do with Mokay MP is to emulate the same

276
0:24:27.000 --> 0:24:32.000
API that Mokito provides so that when you use Mokay MP,

277
0:24:32.000 --> 0:24:37.000
you're at home, you're using an API that is really close, but

278
0:24:37.000 --> 0:24:42.000
there's no way to port Mokito itself. Thank you very much,

279
0:24:42.000 --> 0:24:43.240
and have a nice Fuzz


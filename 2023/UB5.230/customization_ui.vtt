WEBVTT

00:00.000 --> 00:08.480
Okay, so welcome everybody.

00:08.480 --> 00:14.360
My name is Alexander and today we'll talk about user interface library and the problem

00:14.360 --> 00:17.520
of customization.

00:17.520 --> 00:23.880
To give you some context, I'm a three years old React engineer and I'm working at MUI

00:23.880 --> 00:29.840
during the day and during the night I was working for Open Food Facts, which is kind

00:29.840 --> 00:31.960
of Wikipedia for food products.

00:31.960 --> 00:37.160
At the end, don't hesitate to ask for stickers for both.

00:37.160 --> 00:42.440
So for the few who don't know what is material UI, this is the homepage that you can get

00:42.440 --> 00:46.520
what is a component we provide.

00:46.520 --> 00:51.800
And we have the usual problem of user interface library, which is what the re-user want to

00:51.800 --> 00:53.200
do with it.

00:53.200 --> 01:00.640
So one aspect is making internal tools or small MVP, you work in NGO for example, this

01:00.640 --> 01:02.920
is one project I'm working on.

01:02.920 --> 01:06.720
I'm currently doing a lot of effort because you can see the colors are not the default

01:06.720 --> 01:11.760
one, which is a lot better than most of the projects we're using.

01:11.760 --> 01:18.680
But you also have a kind of a real website that do a bit more customization with the

01:18.680 --> 01:19.680
library.

01:19.680 --> 01:23.840
All the components are from MUI.

01:23.840 --> 01:29.440
So you get a conflict about what is interesting for you because for me working out of the

01:29.440 --> 01:30.440
box is super important.

01:30.440 --> 01:34.520
I don't want to spend more than five minutes to set up a button.

01:34.520 --> 01:39.160
If you're paying engineers, they can spend a bit of time on it.

01:39.160 --> 01:44.080
Being big enough, finally, super important for me to get new contributors on the projects

01:44.080 --> 01:48.600
for companies who don't spend time on onboarding.

01:48.600 --> 01:54.520
Things about customization, I think the example before was clear enough.

01:54.520 --> 02:01.920
So I would present you our perceived customization across my learning journey.

02:01.920 --> 02:06.800
So I started into a consulting company and what you have to do most of the time is the

02:06.800 --> 02:11.040
designer come ask to set up some specific colors.

02:11.040 --> 02:16.080
And so you had a CSS specification selectors.

02:16.080 --> 02:18.760
It has to be a bit more specific for some of them.

02:18.760 --> 02:19.760
You have a class name.

02:19.760 --> 02:21.720
You want to be again more specific.

02:21.720 --> 02:25.800
You had another class name and it works by magic.

02:25.800 --> 02:31.240
And one year later you will know that in CSS, the more classes you put, the more likely

02:31.240 --> 02:36.920
you are to override the properties, which is called a CSS specificity for those who

02:36.920 --> 02:39.600
are not aware.

02:39.600 --> 02:44.880
For user interface library, this means only one thing, but all your style into one CSS

02:44.880 --> 02:49.800
class name so that your user will be able to override them.

02:49.800 --> 02:57.480
So here is one of the simplest components to override, one class with a meaningful name

02:57.480 --> 03:00.560
and developers can override.

03:00.560 --> 03:02.120
That's not all for customization.

03:02.120 --> 03:07.640
Of course you need to respect to pass some attributes to your HTML, for example, to strictly

03:07.640 --> 03:10.120
speaking disable your buttons.

03:10.120 --> 03:16.120
And you can allow a bit more with React, for example, speeding custom props.

03:16.120 --> 03:17.500
So that's all for me.

03:17.500 --> 03:20.440
If you want to customize the style, it's CSS.

03:20.440 --> 03:24.040
And if you want to modify the behavior, you will use props.

03:24.040 --> 03:29.040
That's basically what you learn after a bit one year of development.

03:29.040 --> 03:33.160
And for me it was the time to level up and to join a MUI.

03:33.160 --> 03:37.200
So I was thinking, yes, I will walk onto those tiny components.

03:37.200 --> 03:46.160
And the guys say, it will be slightly more complex, so you will walk onto the data grid.

03:46.160 --> 03:52.240
Was a bit scared about at least being able to use it, but fairly simple at the beginning.

03:52.240 --> 03:56.640
You define what is a role with a collection of objects, same for the columns.

03:56.640 --> 04:01.560
You pass everything and the components magically do the stuff.

04:01.560 --> 04:09.280
But of course such a component has a lot of features, and here is the problem of the complex

04:09.280 --> 04:13.520
components being able at the same time for you to manage them internally, but also to

04:13.520 --> 04:14.880
document them.

04:14.880 --> 04:20.560
Because if you were just taking your component, put it into the website, it would be nice.

04:20.560 --> 04:28.400
But of course they want to modify how the filtering is working or the seller wondered.

04:28.400 --> 04:31.720
And they have very bad idea to test.

04:31.720 --> 04:34.480
So here's one of the first issues I get.

04:34.480 --> 04:40.280
So it's complex because you can open a filter panel.

04:40.280 --> 04:44.400
Into this filter panel you can select on which column you will do the selection.

04:44.400 --> 04:50.480
And they wanted to sort it by alphabetical order instead of the order of the columns.

04:50.480 --> 04:52.400
It makes a lot of sense.

04:52.400 --> 05:00.000
But the problem is how do you allow the developers to access this really specific rendering without

05:00.000 --> 05:02.040
having to break everything?

05:02.040 --> 05:06.520
If you're following what you learned during your first year, you say, okay, it's a behavior

05:06.520 --> 05:08.960
modification, so I add properties.

05:08.960 --> 05:13.600
And then you get a problem about all your documentation will look like in a bit one

05:13.600 --> 05:15.080
year.

05:15.080 --> 05:18.340
So you need to find a solution.

05:18.340 --> 05:24.920
So there is three main solutions which we will talk about.

05:24.920 --> 05:26.600
So the first one is a headless.

05:26.600 --> 05:28.800
And basically it means you remove a problem.

05:28.800 --> 05:32.920
You say I will not consider giving you the components.

05:32.920 --> 05:34.920
I give you only the logics.

05:34.920 --> 05:38.480
So you provide options here, for example, what are the columns, what are the data to

05:38.480 --> 05:39.580
render.

05:39.580 --> 05:46.780
And it returns you all the utilities function to quickly set up a filtering or rendering.

05:46.780 --> 05:50.000
So you're not any more responsible of rendering the select.

05:50.000 --> 05:53.420
So developers can do whatever they want in it.

05:53.420 --> 05:58.660
So it's super customizable because you do not deal with the components.

05:58.660 --> 06:03.480
It's clearly not out of the box because even the quick start examples are more than hundreds

06:03.480 --> 06:05.480
of lines.

06:05.480 --> 06:11.600
And beginner-friendly, yes and no, because you strictly give them like legal pieces.

06:11.600 --> 06:13.640
Like they have a function.

06:13.640 --> 06:15.140
They know what to do.

06:15.140 --> 06:20.080
They can do whatever they want before, after, or with the results.

06:20.080 --> 06:23.540
But you're also responsible to pass all the attributes to the HTML elements.

06:23.540 --> 06:25.320
So you have to learn each of them.

06:25.320 --> 06:30.520
If you don't know, you need to pass, for example, a label ID to be RER compliant.

06:30.520 --> 06:38.760
There is no way to say you forget this specification in the component.

06:38.760 --> 06:41.600
Another way to do is to provide the basic components.

06:41.600 --> 06:50.600
The case here of React admin, which the name says it's an administration panel.

06:50.600 --> 06:53.240
Basically this is how you define your administration panel.

06:53.240 --> 06:57.360
You get a provider that wraps all your application.

06:57.360 --> 06:59.520
And you define resources.

06:59.520 --> 07:05.360
Which define how they will run the table.

07:05.360 --> 07:09.300
Most of the time you don't want to get the default table because like always you want

07:09.300 --> 07:11.020
to do some customization.

07:11.020 --> 07:12.900
And so it's easy.

07:12.900 --> 07:14.360
You define your own list.

07:14.360 --> 07:16.260
So there is an example.

07:16.260 --> 07:19.520
You can specify, okay, this colon ID will be text.

07:19.520 --> 07:22.040
The category is text also.

07:22.040 --> 07:25.360
Published at, it will be a date.

07:25.360 --> 07:26.880
And so on.

07:26.880 --> 07:31.280
And if you're not happy about the default way to render a date, you just remove the

07:31.280 --> 07:37.240
date field and you create your custom components with smaller components they provide.

07:37.240 --> 07:42.440
And you can go deeper and deeper as you want.

07:42.440 --> 07:47.320
The idea in fact is that they provide the basic components as small as possible and

07:47.320 --> 07:51.520
the way to wrap them all together, which is the providers.

07:51.520 --> 07:53.000
And you get your application.

07:53.000 --> 07:58.160
And if you know this image, you know that the result can also be this one.

07:58.160 --> 08:02.760
This is a, so you know material UI so you will recognize the code.

08:02.760 --> 08:07.840
It's a form control with an input and a select.

08:07.840 --> 08:12.560
And just below it's a form control, a label and a text field.

08:12.560 --> 08:16.160
It's a real code I wrote when I arrived.

08:16.160 --> 08:17.540
And it was not working.

08:17.540 --> 08:23.600
You can see the variant standard is not applied onto the text field.

08:23.600 --> 08:25.120
And you probably already guessed why.

08:25.120 --> 08:30.360
It's because the text field is already a form control with a label with an input and a null

08:30.360 --> 08:37.880
product so without realizing I was putting a form control into another one, so it did

08:37.880 --> 08:39.680
not work.

08:39.680 --> 08:43.200
The problem is not that it's not working because it was my fault.

08:43.200 --> 08:48.560
The problem is that I was not able to get any warning into the console to say, hey,

08:48.560 --> 08:50.560
you're doing stupid stuff.

08:50.560 --> 08:55.400
But that's because people can take all the components they want and wrap them in the

08:55.400 --> 09:01.440
order they want and you cannot handle all the stupid ad cage that developers could be

09:01.440 --> 09:03.040
able to do.

09:03.040 --> 09:06.680
So you cannot prevent them from doing a mistake.

09:06.680 --> 09:09.680
So here's a correction.

09:09.680 --> 09:15.880
If you want an example, this is IKR page, fairly simple, but there is already six ways

09:15.880 --> 09:17.680
of not to do.

09:17.680 --> 09:22.720
And into documentation, developers do not already read the section how to do, so how

09:22.720 --> 09:27.320
not to do, you are likely that they will never read it.

09:27.320 --> 09:32.480
So customization is nice because you can already override your components.

09:32.480 --> 09:33.480
It works out of the box.

09:33.480 --> 09:36.600
If you stick with the default one, it's nice.

09:36.600 --> 09:43.040
But it's not beginner friendly because you cannot prevent errors.

09:43.040 --> 09:44.240
And there is another fact.

09:44.240 --> 09:48.640
If you want to do customization, you need to understand how the providers are working

09:48.640 --> 09:52.320
and it's super hard, one, to document and two, to explore.

09:52.320 --> 09:57.800
You cannot say, oh, I can solve all the problems and I saw all the attributes that are available

09:57.800 --> 09:59.440
and I guess how they work.

09:59.440 --> 10:04.760
There is to use some provider and consumer.

10:04.760 --> 10:09.360
So now the last one, which are the slots used at MIUI.

10:09.360 --> 10:14.920
So if you remember, the first example I gave about a customizing button is to add an end

10:14.920 --> 10:17.280
icon.

10:17.280 --> 10:19.680
We can apply the same thing for custom components.

10:19.680 --> 10:25.200
For example, I want to provide a custom filter panel, so I pass a props filter panel, but

10:25.200 --> 10:29.960
we arrive at the same problems, an infinite list of props.

10:29.960 --> 10:31.760
So we put some context.

10:31.760 --> 10:36.400
So we defined the property slots and we will document in a specific place.

10:36.400 --> 10:41.280
These are all the components you can override.

10:41.280 --> 10:47.680
And that works, but this is a kind of basic filter panel with a lot of subcomponents,

10:47.680 --> 10:53.680
a lot of logic and HKs that are already being solved and you want to take advantage of all

10:53.680 --> 10:57.800
the issues we resolved.

10:57.800 --> 11:01.040
So the idea is to provide also sub props.

11:01.040 --> 11:07.320
So you say to my filter panel, which is kind of a box I can remove and replace by a custom

11:07.320 --> 11:08.320
one.

11:08.320 --> 11:10.380
I also want to put some inputs.

11:10.380 --> 11:17.040
So for example, I want to provide the property colon is sorted by ascending order and the

11:17.040 --> 11:20.000
default component might support it.

11:20.000 --> 11:23.600
So of course, if you replace it with a custom one and do not support this props, it will

11:23.600 --> 11:26.480
not work, which is a complex case.

11:26.480 --> 11:35.160
But this is currently the solution to solve the initial issue sorting by ascending order.

11:35.160 --> 11:39.960
So it's customizable because in the worst case, you remove the components and replace

11:39.960 --> 11:41.720
it by your custom one.

11:41.720 --> 11:47.120
It works out of a box because if you don't want customization, it's working and big enough

11:47.120 --> 11:52.200
only because we have a single place for the interface between your code and our code,

11:52.200 --> 11:53.680
which are the properties.

11:53.680 --> 11:58.560
So you remove the components and you know props passed to these components is the only

11:58.560 --> 12:03.120
responsibility we have to provide you.

12:03.120 --> 12:09.440
You don't have to expect props coming from somewhere else or modification of the wrapper

12:09.440 --> 12:15.240
because you see it has a new children.

12:15.240 --> 12:16.880
So which one is the best?

12:16.880 --> 12:21.480
I've already seen this question a lot of time on Twitter and of course the answer is there

12:21.480 --> 12:22.480
is no best.

12:22.480 --> 12:28.200
It depends on how many times you are able to spend on your project and how much custom

12:28.200 --> 12:31.320
you want to be.

12:31.320 --> 12:34.840
And there is a last solution, which is you can also not choose.

12:34.840 --> 12:39.800
It's upcoming way to do it.

12:39.800 --> 12:44.680
So for example, for a filter panel, you can use slots to override it.

12:44.680 --> 12:50.800
So you have the way to say that your only props are your interface between the library

12:50.800 --> 12:53.920
and your custom components.

12:53.920 --> 12:58.960
You can use Atlas inside your custom components to say, okay, I know what I will get as a

12:58.960 --> 13:06.600
props so I can provide you a hook that will transform them into helping functions.

13:06.600 --> 13:11.880
And if there is a lot of elements inside, you can also provide the basic breaks to build

13:11.880 --> 13:19.560
your filter panel consuming the, for example, your filter items, props that are provided

13:19.560 --> 13:20.880
by the headless approach.

13:20.880 --> 13:27.240
So there is a way to say, okay, you can do whatever you want with a filter panel.

13:27.240 --> 13:30.360
If it's really common, you will just have to pass props.

13:30.360 --> 13:31.360
It's more general.

13:31.360 --> 13:35.520
If you want, for example, to modify the DOM, it's something like that when you have to

13:35.520 --> 13:36.520
mix everything.

13:36.520 --> 13:43.000
And if you want to do something completely different, you go to the trash and put your

13:43.000 --> 13:45.400
own components.

13:45.400 --> 13:47.080
And that's all for me.

13:47.080 --> 13:59.880
Thank you very much.

13:59.880 --> 14:03.280
We obviously have plenty of time for questions.

14:03.280 --> 14:08.600
So who wants to ask the first one?

14:08.600 --> 14:17.440
Hi.

14:17.440 --> 14:20.520
First thank you very much for creating the data grid.

14:20.520 --> 14:24.360
It has saved my job countless times.

14:24.360 --> 14:31.080
My question was more related to oh, yeah, I don't want to.

14:31.080 --> 14:32.080
Okay.

14:32.080 --> 14:38.580
My question is related to another talk that we saw today called Pen Pot, which is an open

14:38.580 --> 14:42.800
source version of Figma, basically.

14:42.800 --> 14:50.920
And Mui has some design kits to use in different design tools.

14:50.920 --> 14:53.080
Are you guys looking at Pen Pot?

14:53.080 --> 14:57.280
Are you thinking about creating a design kit for it?

14:57.280 --> 14:59.160
I would love to use it.

14:59.160 --> 15:00.160
Thank you.

15:00.160 --> 15:05.240
I have clearly no idea because it's a completely different team that is using it.

15:05.240 --> 15:06.240
Okay.

15:06.240 --> 15:07.240
Thank you.

15:07.240 --> 15:08.240
Hello.

15:08.240 --> 15:17.880
Thank you for the presentation.

15:17.880 --> 15:22.320
Quick question regarding the design phase.

15:22.320 --> 15:25.520
Did you consider about backward compatibility?

15:25.520 --> 15:27.080
About what?

15:27.080 --> 15:30.520
Backwards compatibility with previous versions of material UI.

15:30.520 --> 15:36.000
Yes, but what is the relation with backwards compatibility?

15:36.000 --> 15:42.800
So with its new major version that material UI has, usually there are quite a few breaking

15:42.800 --> 15:46.560
changes.

15:46.560 --> 15:53.160
So when you were talking about the considerations on the design phase about being beginner-friendly

15:53.160 --> 16:00.880
and all this stuff, was backwards compatibility a thought at that stage?

16:00.880 --> 16:13.560
I honestly don't understand how you want to provide a backward compatibility for such

16:13.560 --> 16:15.560
a user library.

16:15.560 --> 16:16.560
Sorry.

16:16.560 --> 16:18.560
Can you repeat?

16:18.560 --> 16:26.840
I don't understand what you're expecting to get solved by the library.

16:26.840 --> 16:33.000
So you usually expect backwards compatibility so that every time that a major version is

16:33.000 --> 16:39.480
upgraded, your code does not break a lot.

16:39.480 --> 16:44.200
But that is not the case, unfortunately, usually.

16:44.200 --> 16:49.920
As long as you do not go from one major to another one, it's working.

16:49.920 --> 16:50.920
Okay.

16:50.920 --> 16:57.880
I mean, we follow the same verse, so if you're into v4, you can upgrade as long as you want

16:57.880 --> 17:00.880
and it will be working.

17:00.880 --> 17:04.000
Okay, thanks.

17:04.000 --> 17:07.080
Thank you.

17:07.080 --> 17:16.040
While I walk up, I see a little bit of trash here and there.

17:16.040 --> 17:22.120
So please, even if it's not yours, pick it up, put it in the bin.

17:22.120 --> 17:23.360
Thank you.

17:23.360 --> 17:27.160
So you showed us about slot props and slots.

17:27.160 --> 17:31.800
You said that it was basically the best tradeoff between being beginner-friendly and customizable.

17:31.800 --> 17:36.560
I was wondering what if you have really complex components, where the slot components also

17:36.560 --> 17:38.880
have slots themselves?

17:38.880 --> 17:41.640
Are you able to do this kind of cascade of slot props?

17:41.640 --> 17:46.800
There is this problem sometimes.

17:46.800 --> 17:53.640
It's problematic for documentation point of view because if you allow people to override

17:53.640 --> 18:02.360
the sub-slot, they will not implement all the HKs, the interfacing with the props provided.

18:02.360 --> 18:08.760
And after that, they want to just pass the props to the wrapper components and of course

18:08.760 --> 18:13.160
it will break because they did not implement the internal ones.

18:13.160 --> 18:21.440
And it's problematic, but you ought to say that the best way to mitigate is you do not

18:21.440 --> 18:28.560
provide a slot for every component, just the stuff that can be considered as an independent.

18:28.560 --> 18:34.720
For example, the filter panel is super easy because you have an entire piece of software.

18:34.720 --> 18:37.160
You know it will get some filters in time.

18:37.160 --> 18:39.880
It needs to update its value.

18:39.880 --> 18:40.880
And that's all.

18:40.880 --> 18:41.880
It's super clear.

18:41.880 --> 18:42.880
It's the same.

18:42.880 --> 18:44.320
You will not have a sub-component.

18:44.320 --> 18:47.800
You want to customize except writing them by yourself.

18:47.800 --> 18:54.840
So it's really rare when you have a sub-component into another one for slots.

18:54.840 --> 18:55.840
Okay.

18:55.840 --> 18:58.440
And for the rest, you are using props, I suppose?

18:58.440 --> 18:59.440
Yes.

18:59.440 --> 19:05.760
And I think for now, we do not do it because we don't need to reach this level of simplifying

19:05.760 --> 19:12.840
customization, but I think providing the sub-components to do it is maybe the best way.

19:12.840 --> 19:18.240
For example, we have a toolbar and the way to overriding is to provide a slot to define

19:18.240 --> 19:23.480
what is the toolbar and we provide all the default buttons you could wish to put into

19:23.480 --> 19:24.480
your toolbar.

19:24.480 --> 19:25.480
Okay.

19:25.480 --> 19:36.080
Thank you.

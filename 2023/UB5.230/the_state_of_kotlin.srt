1
0:00:00.000 --> 0:00:07.000
Okay, so just a minute there.

2
0:00:07.000 --> 0:00:08.000
Hello, everyone.

3
0:00:08.000 --> 0:00:13.200
I guess we are starting because we have been told that we are strict on time, minutes to

4
0:00:13.200 --> 0:00:20.200
minutes, so I cannot do anything, but I have to start talking now, and thanks a lot for

5
0:00:20.200 --> 0:00:22.240
joining us today.

6
0:00:22.240 --> 0:00:26.120
And let's start with a brief intro, probably, of our speakers.

7
0:00:26.120 --> 0:00:27.440
All right.

8
0:00:27.440 --> 0:00:28.640
Thank you.

9
0:00:28.640 --> 0:00:30.720
Thank you all for being here.

10
0:00:30.720 --> 0:00:32.200
I'm Marco.

11
0:00:32.200 --> 0:00:36.480
And yeah, I'm Kotlin GDE based in Berlin.

12
0:00:36.480 --> 0:00:43.160
I'm Italian, and today I'm here talking about Kotlin.

13
0:00:43.160 --> 0:00:44.160
Same here.

14
0:00:44.160 --> 0:00:45.160
I'm Sergei.

15
0:00:45.160 --> 0:00:51.640
I'll be talking about Kotlin as well, and we were asked to get you the state of Kotlin,

16
0:00:51.640 --> 0:00:54.480
whatever it means.

17
0:00:54.480 --> 0:01:01.400
I worked for various companies in Kotlin for about seven years now, I guess, such a long

18
0:01:01.400 --> 0:01:09.880
time, early years with the veterans in Kotlin now mainly in Android development and infra.

19
0:01:09.880 --> 0:01:13.840
But let's start with important things.

20
0:01:13.840 --> 0:01:20.840
We live in a modern time with modern technologies available, and so this presentation is powered

21
0:01:20.840 --> 0:01:23.920
by generative AI.

22
0:01:23.920 --> 0:01:31.240
It's really important to remember that the speakers today, both of us, are not anyhow

23
0:01:31.240 --> 0:01:37.520
affiliated with any company that creates Kotlin or like sponsor it or anything like this.

24
0:01:37.520 --> 0:01:43.240
It will be pure, our opinion based on our experience, our guesses.

25
0:01:43.240 --> 0:01:44.240
I don't know.

26
0:01:44.240 --> 0:01:49.080
We might be wrong, except for the places where when we are right.

27
0:01:49.080 --> 0:01:51.680
That's it for today.

28
0:01:51.680 --> 0:01:59.760
So yeah, and generative AI make a thing that probably the speaking these days will be an

29
0:01:59.760 --> 0:02:00.760
easy job.

30
0:02:00.760 --> 0:02:10.680
So last year, preparing for the FOSDAM talk, I've been writing my videos about 3am before

31
0:02:10.680 --> 0:02:11.680
the deadline.

32
0:02:11.680 --> 0:02:18.120
So Nikola was already saying why you're not sending me the videos, and I had to do.

33
0:02:18.120 --> 0:02:23.080
And this year I thought, all right, I'm using the modern technologies and asked Chad GPT

34
0:02:23.080 --> 0:02:25.560
to generate the slides for me.

35
0:02:25.560 --> 0:02:31.160
Unfortunately we ended up in like 5 to 10 minutes saying, oh, I have no idea what is

36
0:02:31.160 --> 0:02:35.280
Kotlin because I don't have data after 2021 probably.

37
0:02:35.280 --> 0:02:41.040
So the rest of the presentation is really not powered by the generative AI.

38
0:02:41.040 --> 0:02:42.740
I'm sorry for this.

39
0:02:42.740 --> 0:02:46.520
So it's powered by us.

40
0:02:46.520 --> 0:02:52.520
We had to figure out what is Kotlin and what is the current state.

41
0:02:52.520 --> 0:02:58.960
So probably the first reasonable thing thinking about this is to get and try to understand

42
0:02:58.960 --> 0:03:01.600
any of the developer surveys available.

43
0:03:01.600 --> 0:03:06.880
And one of the most interesting ones in this domain is the JetBrains developer survey that

44
0:03:06.880 --> 0:03:13.160
they run, I guess, every year from 2019 or 2020ish.

45
0:03:13.160 --> 0:03:21.380
So here is the data available on the end of 2022, the survey.

46
0:03:21.380 --> 0:03:28.240
And we can see definitely a domination of mobile development for Kotlin and presumably

47
0:03:28.240 --> 0:03:31.520
it's Android mobile development.

48
0:03:31.520 --> 0:03:33.400
I guess so.

49
0:03:33.400 --> 0:03:41.400
And another leading stream is the web or back-end development, which is rising and 40% of all

50
0:03:41.400 --> 0:03:45.080
Kotlin engineers are working with back-ends.

51
0:03:45.080 --> 0:03:55.160
I must admit that at the end of 2022, the majority of the population is still in mobile.

52
0:03:55.160 --> 0:04:01.560
The back-end is rising and back-end is trending up.

53
0:04:01.560 --> 0:04:08.760
I was under impression like a year ago that, hey, Android is probably the only platform

54
0:04:08.760 --> 0:04:09.880
for Kotlin.

55
0:04:09.880 --> 0:04:13.440
However, I was like reasonably biased with this.

56
0:04:13.440 --> 0:04:20.040
And the first time after COVID, when I arrived to one of the European conferences that had

57
0:04:20.040 --> 0:04:29.760
a few topics there, I was impressed that the majority of topics were with back-ends.

58
0:04:29.760 --> 0:04:36.360
But today let's try to avoid getting too deep into particular Kotlin platforms and focus

59
0:04:36.360 --> 0:04:41.680
more on high-level language stuff, what is coming in the next years, or at least what

60
0:04:41.680 --> 0:04:44.760
we can probably predict to come.

61
0:04:44.760 --> 0:04:53.840
It's quite funny that it's possible to describe the whole 2022 and 2023 agenda in the Kotlin

62
0:04:53.840 --> 0:04:56.480
world with just five letters.

63
0:04:56.480 --> 0:04:58.960
And one is common in most of the words.

64
0:04:58.960 --> 0:05:05.560
It's K2, the new Kotlin compiler that's coming, and the Kotlin multiplatform or KMP.

65
0:05:05.560 --> 0:05:08.880
So I'm not very surprised.

66
0:05:08.880 --> 0:05:13.880
And in the past year, we didn't see a lot of Kotlin language features.

67
0:05:13.880 --> 0:05:16.460
And there are a few reasons for this.

68
0:05:16.460 --> 0:05:25.320
And we'll definitely discuss them in the next slides and further in this talk.

69
0:05:25.320 --> 0:05:32.000
But let's try to first understand what is K2 and what is what it's preparing for us

70
0:05:32.000 --> 0:05:38.960
as developers and product owners or Plight engineers.

71
0:05:38.960 --> 0:05:44.720
And then we'll get to KMP later in this presentation.

72
0:05:44.720 --> 0:05:51.880
First of all, there are a few major problems in the whole Kotlin infrastructure.

73
0:05:51.880 --> 0:05:56.080
And they are the stability and performance of the ID.

74
0:05:56.080 --> 0:06:03.440
So Plight, even though probably IntelliJ is one of the greatest product on the market

75
0:06:03.440 --> 0:06:09.720
for developers, it's not great for Kotlin.

76
0:06:09.720 --> 0:06:10.960
I mean, it's fine.

77
0:06:10.960 --> 0:06:15.760
But whenever your project is growing and growing and growing, and I know something about large

78
0:06:15.760 --> 0:06:21.000
project in the industry, it's getting unusable.

79
0:06:21.000 --> 0:06:23.960
The second thing is build speed.

80
0:06:23.960 --> 0:06:31.400
Plight, whenever you try probably Java for its builds before, even if Java is slow, but

81
0:06:31.400 --> 0:06:35.120
overall Kotlin is significantly slower.

82
0:06:35.120 --> 0:06:41.980
And this is like a drawback, especially if you came from the legacy code base whenever

83
0:06:41.980 --> 0:06:46.040
you had five or 10 years of previously Java code.

84
0:06:46.040 --> 0:06:47.280
Yeah, I know, I know.

85
0:06:47.280 --> 0:06:51.480
I tried to say we are not getting deeper into the platforms.

86
0:06:51.480 --> 0:06:53.840
But it is what it is.

87
0:06:53.840 --> 0:06:58.040
And the build setup overall is quite complicated.

88
0:06:58.040 --> 0:07:01.520
So for example, Kotlin multi-platform.

89
0:07:01.520 --> 0:07:05.440
How to run Kotlin multi-platforms from the common line.

90
0:07:05.440 --> 0:07:14.480
If you can give me an answer, I will just take you out for dinner probably.

91
0:07:14.480 --> 0:07:22.920
And currently the overall K2 is developing in the two major Kotlin roadmap milestones.

92
0:07:22.920 --> 0:07:28.880
Like whenever you're interested, what is going on in Kotlin, you can get to the Kotlin roadmap.

93
0:07:28.880 --> 0:07:31.880
Thanks a lot for publishing it to JetBrains.

94
0:07:31.880 --> 0:07:35.160
It's like magic.

95
0:07:35.160 --> 0:07:37.280
There are two key things.

96
0:07:37.280 --> 0:07:39.320
Like getting K2 to better.

97
0:07:39.320 --> 0:07:41.280
K2 is currently in alpha.

98
0:07:41.280 --> 0:07:44.880
And it's the whole rewrite of the compiler front end.

99
0:07:44.880 --> 0:07:51.960
Meaning that if you previously hacked something for the compiler plug-ins or compiler infrastructure,

100
0:07:51.960 --> 0:07:59.760
for you an owner of the libraries like KSP or KPT, you basically have to redo everything

101
0:07:59.760 --> 0:08:03.760
you did in the past three, five years.

102
0:08:03.760 --> 0:08:08.280
And the second part is the IntelliJ based plug-in.

103
0:08:08.280 --> 0:08:16.160
And the story there is like the compiler and the compiler front end especially is very

104
0:08:16.160 --> 0:08:22.680
coupled with whatever Android Studio or IntelliJ ID or your ID of choice is doing with the

105
0:08:22.680 --> 0:08:23.680
language.

106
0:08:23.680 --> 0:08:31.360
Either it's a language server or the index you have locally, your compiler performance

107
0:08:31.360 --> 0:08:38.600
really impacts the experience you have in the ID.

108
0:08:38.600 --> 0:08:43.720
Let's get to the other things.

109
0:08:43.720 --> 0:08:53.040
Like the unfortunate is the deprioritization of the API for compiler plug-ins.

110
0:08:53.040 --> 0:09:01.480
It means that for all of the engineers outside of JetBrains, it will be still very hard to

111
0:09:01.480 --> 0:09:06.120
create tools for a compiler for ID and evolve them over time.

112
0:09:06.120 --> 0:09:12.640
So currently you don't have a stable and you don't have basically a documented API for

113
0:09:12.640 --> 0:09:13.640
the compiler.

114
0:09:13.640 --> 0:09:21.960
So for example, if you're creating a library that changes something, every major or any

115
0:09:21.960 --> 0:09:29.040
even minor release of Kotlin, you need to upgrade it and evolve and maintain the compatibility

116
0:09:29.040 --> 0:09:33.360
of the version for the compiler.

117
0:09:33.360 --> 0:09:43.120
Please get back.

118
0:09:43.120 --> 0:09:44.440
Yes, it's back.

119
0:09:44.440 --> 0:09:51.880
So currently K2 is an alpha, but as far as we understand, the 1.9, Kotlin 1.9 is about

120
0:09:51.880 --> 0:09:54.800
to get us K2 in beta.

121
0:09:54.800 --> 0:10:03.040
For the current numbers, we have the improvement at around a rate of 2X for all the build that

122
0:10:03.040 --> 0:10:13.040
at least JetBrains provided us in their benchmarks and publicly told us about these things.

123
0:10:13.040 --> 0:10:17.600
With Kotlin itself being built in significantly faster.

124
0:10:17.600 --> 0:10:22.880
But if you're impatient, there is the way to bring at least some of the improvements

125
0:10:22.880 --> 0:10:26.960
for the build speed earlier in the pipe.

126
0:10:26.960 --> 0:10:34.920
You can get to Kotlin 1.7 something and it has a probably 10 to 15% improvement in the

127
0:10:34.920 --> 0:10:36.120
build speed.

128
0:10:36.120 --> 0:10:46.520
And you can even experience this in the large scale code bases.

129
0:10:46.520 --> 0:10:55.240
There are a few plans about the K2 going to beta and mainly what JetBrains and Kotlin

130
0:10:55.240 --> 0:11:00.600
wants to achieve, it's the full functional compiler and it should work for the whole

131
0:11:00.600 --> 0:11:04.680
ecosystem, not only the JVM.

132
0:11:04.680 --> 0:11:08.520
It's probably usable for JVM even right now.

133
0:11:08.520 --> 0:11:09.600
I tried it.

134
0:11:09.600 --> 0:11:16.400
It's not a great experience, but you can experiment at least with it.

135
0:11:16.400 --> 0:11:25.560
So there is a need for improvement in various plugins like Kotlin annotation processor,

136
0:11:25.560 --> 0:11:28.920
serializable, KSP and others.

137
0:11:28.920 --> 0:11:33.260
And it will take time.

138
0:11:33.260 --> 0:11:42.400
As of yesterday, there is a well done support for Kotlin X serialization, all open, no arc

139
0:11:42.400 --> 0:11:45.500
plugins and Lombok.

140
0:11:45.500 --> 0:11:50.440
It's already in the source code of Kotlin compiler.

141
0:11:50.440 --> 0:11:52.760
I'm not sure which version they are targeting.

142
0:11:52.760 --> 0:11:58.080
So I was checking 1.9 daily build and it was fine there.

143
0:11:58.080 --> 0:12:04.360
Probably there is something in 1.7.21, but I'm not quite sure.

144
0:12:04.360 --> 0:12:08.620
So unfortunately KAPT is still not working.

145
0:12:08.620 --> 0:12:12.200
So you cannot do any of the annotation processing yet.

146
0:12:12.200 --> 0:12:19.160
And KSP, the simple process in the future of annotation processing for Kotlin also doesn't

147
0:12:19.160 --> 0:12:22.080
work.

148
0:12:22.080 --> 0:12:28.840
But let's get into some details of the annotation processor support.

149
0:12:28.840 --> 0:12:34.200
Like luckily in Utrecht there are tickets for almost everything that works or that doesn't

150
0:12:34.200 --> 0:12:39.340
work and what JetBrains is planning to work on.

151
0:12:39.340 --> 0:12:44.880
So there is the ticket for frontend IR support for KAPT.

152
0:12:44.880 --> 0:12:46.680
It's still in progress.

153
0:12:46.680 --> 0:12:51.720
It should be done in 1.9 or at least it's a current version now.

154
0:12:51.720 --> 0:12:55.640
I try to understand what doesn't work like right now.

155
0:12:55.640 --> 0:13:00.640
And it got me to quite interesting things.

156
0:13:00.640 --> 0:13:06.880
That KAPT currently doesn't support language version 2.0.

157
0:13:06.880 --> 0:13:09.640
This used language version 1.9 or below.

158
0:13:09.640 --> 0:13:12.600
It's just a source code that I saw yesterday.

159
0:13:12.600 --> 0:13:20.840
And I tried to get deeper and saw that there is a Kotlin version introduced that has symbols

160
0:13:20.840 --> 0:13:22.440
both 2 and 0.

161
0:13:22.440 --> 0:13:29.840
I probably don't want to make any judgment here what the version would be, but there

162
0:13:29.840 --> 0:13:38.360
is something suggested that we are going to have some major changes in the future.

163
0:13:38.360 --> 0:13:43.920
Kotlin symbol processing is another thing that doesn't work currently, but it's expected

164
0:13:43.920 --> 0:13:46.800
to get around 1.9.

165
0:13:46.800 --> 0:13:55.280
There is some work going on in the domain in the Google repository for KSP, but still

166
0:13:55.280 --> 0:13:58.840
nothing there done.

167
0:13:58.840 --> 0:14:03.280
And the testing info doesn't work at all currently.

168
0:14:03.280 --> 0:14:10.600
So one of the major libraries for the compile testing doesn't support K2.

169
0:14:10.600 --> 0:14:13.680
I don't know when the support will come there.

170
0:14:13.680 --> 0:14:19.280
There's a pull request getting this support at least partially, but who knows.

171
0:14:19.280 --> 0:14:23.640
Probably will take another six to eight months.

172
0:14:23.640 --> 0:14:30.720
And finally, the IDE support for K2.

173
0:14:30.720 --> 0:14:39.960
So as far as I understand, the plan is to create the K2-based IDE plugin that will probably

174
0:14:39.960 --> 0:14:48.520
start from a quite lightweight one that will support only a few things.

175
0:14:48.520 --> 0:14:57.960
It should have the performance that started it to be everything worked fast and correct,

176
0:14:57.960 --> 0:15:01.080
and likely stable.

177
0:15:01.080 --> 0:15:09.640
The IDE plugin will have a lower number of features, will be lightweight, and will be

178
0:15:09.640 --> 0:15:15.960
released likely after the better or stable of the compiler.

179
0:15:15.960 --> 0:15:24.480
So it's not earlier than 1.9, probably even later.

180
0:15:24.480 --> 0:15:31.480
So as stated currently, it should have all the quote highlighting.

181
0:15:31.480 --> 0:15:38.520
It should have basic code completion, like nothing fancy, probably just the stuff you

182
0:15:38.520 --> 0:15:44.680
use on a regular basis, but not for major refactorings or anything else.

183
0:15:44.680 --> 0:15:51.640
In debugger, there should be breakpoints and some simple stuff, really simple stuff, as

184
0:15:51.640 --> 0:15:53.040
it's declared.

185
0:15:53.040 --> 0:15:58.520
And there should be a limited number of diagnostics.

186
0:15:58.520 --> 0:16:07.080
The last but not the least thing, as you might notice, another big part is the Kotlin multiplatform

187
0:16:07.080 --> 0:16:08.080
support.

188
0:16:08.080 --> 0:16:17.960
This new lightweight plugin is aiming to have the full featured Kotlin multiplatform support

189
0:16:17.960 --> 0:16:19.600
as well.

190
0:16:19.600 --> 0:16:23.120
And yeah.

191
0:16:23.120 --> 0:16:24.120
That's my third.

192
0:16:24.120 --> 0:16:26.000
All right.

193
0:16:26.000 --> 0:16:36.880
So now after some K2 magic, let's try to check what went through this year of Kotlin Multiplatform

194
0:16:36.880 --> 0:16:41.040
and what will come in the future.

195
0:16:41.040 --> 0:16:46.720
So let's start our journey from Kotlin 1.6.20.

196
0:16:46.720 --> 0:16:53.240
And the first magic things, beautiful things that we saw was the hierarchical project structure

197
0:16:53.240 --> 0:16:55.200
become in default.

198
0:16:55.200 --> 0:17:02.120
And this thing was such a blast because you got finally don't need any more to do some

199
0:17:02.120 --> 0:17:10.880
weird magic stuff like symbolic links and things to have to cover multiple architecture

200
0:17:10.880 --> 0:17:19.360
like iOS version and Intel version and X64 version.

201
0:17:19.360 --> 0:17:26.920
So you get automatically shared stuff and you can just use an intermediate target for

202
0:17:26.920 --> 0:17:31.520
the thing, which was really a good thing to start with.

203
0:17:31.520 --> 0:17:39.840
But wasn't the only thing in 6.20 because we got some improvements on Kotlin native

204
0:17:39.840 --> 0:17:44.120
and we got all the improvement that as an engineer you can dream of.

205
0:17:44.120 --> 0:17:48.480
So runtime, compile time and code size.

206
0:17:48.480 --> 0:17:57.320
So it was an interesting update that brought many, many improvements on the developer experience,

207
0:17:57.320 --> 0:18:00.480
which was really nice.

208
0:18:00.480 --> 0:18:09.240
But the very big thing came later in 1.7.20, which was finally the new memory manager for

209
0:18:09.240 --> 0:18:10.680
Kotlin native.

210
0:18:10.680 --> 0:18:13.560
And with that version it's now enabled by default.

211
0:18:13.560 --> 0:18:22.080
And basically it's again a huge win in terms of developer experience because a lot of change

212
0:18:22.080 --> 0:18:25.760
changed and we got better stuff.

213
0:18:25.760 --> 0:18:35.440
Just because the memory manager changed from reference counting garbage collection to tracing

214
0:18:35.440 --> 0:18:43.200
garbage collection because in the past it was just made it quick and dirty.

215
0:18:43.200 --> 0:18:45.640
Let's put it in the way to just get out.

216
0:18:45.640 --> 0:18:51.200
But now that things are getting bigger and people are using it, they realize that some

217
0:18:51.200 --> 0:18:55.440
stuff was not the best choice afterwards.

218
0:18:55.440 --> 0:19:03.280
So what this means in reality is that there are no more restrictions on sharing objects

219
0:19:03.280 --> 0:19:05.880
between threads.

220
0:19:05.880 --> 0:19:14.200
There is more leak free primitives, which means no leaks on the internals but maybe

221
0:19:14.200 --> 0:19:21.200
leaks on stuff that you wrote because we can introduce bad things but at least the tooling

222
0:19:21.200 --> 0:19:25.400
is not sneaking leaks.

223
0:19:25.400 --> 0:19:29.400
What does it mean at the end of the day for developers?

224
0:19:29.400 --> 0:19:33.280
It means that no more freezing.

225
0:19:33.280 --> 0:19:37.960
Finally we get all the beautiful sun because we don't need to freeze objects anymore.

226
0:19:37.960 --> 0:19:41.440
We are really free to use everything.

227
0:19:41.440 --> 0:19:51.840
And yeah, you just don't have to think anymore to freeze stuff and to understand that it's

228
0:19:51.840 --> 0:19:54.360
not crashing, that there's no mutability and stuff.

229
0:19:54.360 --> 0:19:59.240
So all magic now.

230
0:19:59.240 --> 0:20:08.880
And this thing enables a bigger thing, which is finally Kotlin Music Platform mobile, the

231
0:20:08.880 --> 0:20:16.000
mobile part, to reach the beta version, which is a huge milestone.

232
0:20:16.000 --> 0:20:26.560
And this means that the technology is basically done and it is safe to use your project.

233
0:20:26.560 --> 0:20:36.440
The fact that in beta means that there's still some work to do mostly on the toolchain, but

234
0:20:36.440 --> 0:20:40.960
in general thinking you can use this safely.

235
0:20:40.960 --> 0:20:45.240
Maybe there will be some cut corners on setting up the toolchain and stuff like that, but

236
0:20:45.240 --> 0:20:54.920
don't worry, you can start using a learning, your project, and do it because it's fun.

237
0:20:54.920 --> 0:20:58.240
So yeah, do it.

238
0:20:58.240 --> 0:21:00.200
All right.

239
0:21:00.200 --> 0:21:06.760
Now let's move to more close to today.

240
0:21:06.760 --> 0:21:15.200
And with the release of Kotlin 1.8, we got a lot more interesting stuff in the field

241
0:21:15.200 --> 0:21:23.640
of Objective-C and with interoperability, which is something that people always ask because

242
0:21:23.640 --> 0:21:27.120
it could be better sometimes.

243
0:21:27.120 --> 0:21:36.960
So with this release, we got some nice annotations, like Objective-C name, that let us specify

244
0:21:36.960 --> 0:21:47.520
a more beautiful naming for some function that we want to expose to Swift so we can

245
0:21:47.520 --> 0:21:54.640
just change the name without changing the Kotlin object itself.

246
0:21:54.640 --> 0:22:04.000
Another one is hidden from Objective-C, which as the name suggests, we can hide some function

247
0:22:04.000 --> 0:22:14.360
from Objective-C because maybe we want to have an application function that works better

248
0:22:14.360 --> 0:22:21.640
or has a better representation for the Swift word, and we want to just hide the Kotlin

249
0:22:21.640 --> 0:22:31.200
one so we can save precious binary size and have a specific function only for the iOS

250
0:22:31.200 --> 0:22:32.200
part.

251
0:22:32.200 --> 0:22:40.040
And finally, another interesting thing is the should refine in Swift annotation, which

252
0:22:40.040 --> 0:22:49.000
basically is the compiler to mark a function or a property as Swift private.

253
0:22:49.000 --> 0:22:54.640
So basically it's going to be exported on Objective-C with a double underscore.

254
0:22:54.640 --> 0:23:01.920
And so with a double underscore, this function will be invisible because auto-seguestion

255
0:23:01.920 --> 0:23:05.520
doesn't auto-seguest.

256
0:23:05.520 --> 0:23:12.400
On iOS, sometimes stuff are invisible because auto-seguestion doesn't work properly in Xcode,

257
0:23:12.400 --> 0:23:16.800
but that's another thing.

258
0:23:16.800 --> 0:23:25.360
But in this way, it will be possible to hide some function and then rewrite it on Swift

259
0:23:25.360 --> 0:23:33.360
to have a better, a better, um, idea-matics with way of doing things.

260
0:23:33.360 --> 0:23:35.120
All right.

261
0:23:35.120 --> 0:23:41.280
Another experimental thing that we got on Kotlin 1.8 is something that I was dreaming

262
0:23:41.280 --> 0:23:50.360
of because every time I saw I see Android test and Android Android test, my ads explode

263
0:23:50.360 --> 0:23:59.960
because I don't, every time I think that it's a typo or something, but it's not a typo.

264
0:23:59.960 --> 0:24:09.140
But right now, this will change, and there will be a more descriptive things, like instead

265
0:24:09.140 --> 0:24:14.720
of Android test, Android unit test, and instead of Android Android test, Android instrumented

266
0:24:14.720 --> 0:24:15.720
test.

267
0:24:15.720 --> 0:24:25.040
It's going to be more clear, and you've got to understand really what's this thing.

268
0:24:25.040 --> 0:24:29.520
Connected to that, there will be more clarity also to where to put the manifest.

269
0:24:29.520 --> 0:24:39.320
So not in the Android main, but you're going to have a specific folder for the bug and

270
0:24:39.320 --> 0:24:47.560
the release version, so it's going to be more clear, and you've got to understand better.

271
0:24:47.560 --> 0:24:49.800
This thing is still experimental.

272
0:24:49.800 --> 0:24:57.080
Of course, it's going to be enabled by default sometimes in the future, but if you want to

273
0:24:57.080 --> 0:25:04.200
use it, you have to opt in with a gradle option.

274
0:25:04.200 --> 0:25:17.480
Another thing that was in Kotlin 1.8 was the stabilization of the Kotlin JS backend, and

275
0:25:17.480 --> 0:25:24.920
so finally right now, all the three different technologies, so Kotlin for the JVM, Kotlin

276
0:25:24.920 --> 0:25:33.920
native, are using the same backend, which means better handling, less bug, and everything

277
0:25:33.920 --> 0:25:41.760
is works better.

278
0:25:41.760 --> 0:25:53.520
Another interesting goodie that is not specific to a specific version is that since version

279
0:25:53.520 --> 0:26:03.160
1.4 to 1.8, they were experimentally checking binary back to compatibility, which is always

280
0:26:03.160 --> 0:26:13.360
a nice thing, and from now on, there are processes set up on JVM's side to keep binary compatibility

281
0:26:13.360 --> 0:26:23.040
from every release, which is going to alleviate the pain of having stuff broken.

282
0:26:23.040 --> 0:26:34.240
All right, another very interesting thing about Kotlin and the multi-platform world

283
0:26:34.240 --> 0:26:40.640
is the fact that JetBrains is maintaining also a composed version for desktop and the

284
0:26:40.640 --> 0:26:55.640
web, which is a fork from the Android one from Google, and the support is going on,

285
0:26:55.640 --> 0:27:02.240
but it's really neat, it's really beautiful, because you can just use something nicer to

286
0:27:02.240 --> 0:27:11.640
write desktop application and still not have to deal with Java, whatever stuff, so it's

287
0:27:11.640 --> 0:27:15.520
really nice that we have some sort of things.

288
0:27:15.520 --> 0:27:21.760
Of course, it takes time to keep it up with Google releases, because they have to catch

289
0:27:21.760 --> 0:27:32.600
it up, but, for example, a couple of days ago, we got the 1.3.0 release, and, yeah,

290
0:27:32.600 --> 0:27:38.840
so stuff is going forward also on this side.

291
0:27:38.840 --> 0:27:47.280
Last year, we got also some interesting experimental stuff, which is composed for iOS.

292
0:27:47.280 --> 0:27:52.600
Yes, it seems to have, seems happening.

293
0:27:52.600 --> 0:28:01.000
It's still some very experimental and technical preview, so absolutely not ready for production,

294
0:28:01.000 --> 0:28:04.440
but people in the community are playing with that.

295
0:28:04.440 --> 0:28:12.240
For example, folks at Touchlab, they built the draw.con version of the draw.con app for

296
0:28:12.240 --> 0:28:21.720
the iOS version of the draw.con app, which is something amazing, and, yeah, this is something,

297
0:28:21.720 --> 0:28:28.600
as I said, not ready, but it's something to keep an eye on, because it's going to be wild

298
0:28:28.600 --> 0:28:31.760
and interesting.

299
0:28:31.760 --> 0:28:35.760
What is going to come this year?

300
0:28:35.760 --> 0:28:44.360
There will be more improvements on the memory manager, even though it's still already stable,

301
0:28:44.360 --> 0:28:50.720
and it's the default memory manager.

302
0:28:50.720 --> 0:29:00.400
Folks at Jetman will keep increasing and fixing bug and increasing performance on that.

303
0:29:00.400 --> 0:29:06.720
Of course, there will be more improvement on compilation time on Kotlinative, because

304
0:29:06.720 --> 0:29:16.640
it's still sometimes not the fastest thing in the world, and so it has to be improved.

305
0:29:16.640 --> 0:29:22.240
Another point, which is, like I was mentioning before, it's always asked from people, it's

306
0:29:22.240 --> 0:29:30.840
better exporting to Objective-C, so it has better APIs to interact with from the iOS

307
0:29:30.840 --> 0:29:31.840
part.

308
0:29:31.840 --> 0:29:43.120
Also, another thing will be, after confirming that there are tools in place to have backward

309
0:29:43.120 --> 0:29:51.560
binary compatibility for the Kotlin native version, they will describe and add more improvements,

310
0:29:51.560 --> 0:29:58.040
and documentation for library developers to maintain binary compatibility as well.

311
0:29:58.040 --> 0:30:03.640
All of that is going to...

312
0:30:03.640 --> 0:30:11.040
These improvements are connected to having, finally, Kotlin-motive-platform mobile to stable,

313
0:30:11.040 --> 0:30:16.800
which hopefully is going to happen this year, and in order to do that, there are a bunch

314
0:30:16.800 --> 0:30:20.560
of things that need to be addressed.

315
0:30:20.560 --> 0:30:29.360
Like I said before, it's mostly toolchain and infrastructure stuff, but the main thing

316
0:30:29.360 --> 0:30:37.720
is working, and you can start already using it, because it's in beta, and stuff are kind

317
0:30:37.720 --> 0:30:40.080
of working right now.

318
0:30:40.080 --> 0:30:51.320
With that was it, the introduction of the journey into Kotlin from the past year and

319
0:30:51.320 --> 0:30:54.440
for this year.

320
0:30:54.440 --> 0:30:55.920
Thank you very much.

321
0:30:55.920 --> 0:31:02.240
There will be a lot of content today, so feel free to catch it up with all of that, and

322
0:31:02.240 --> 0:31:03.240
have fun.

323
0:31:03.240 --> 0:31:11.840
Thank you very much.

324
0:31:11.840 --> 0:31:17.440
We do have four minutes for questions, so if you have any, raise your hand, I will bring

325
0:31:17.440 --> 0:31:28.760
you the microphone.

326
0:31:28.760 --> 0:31:35.560
Is it okay if I ask three consecutive questions, two of which are related?

327
0:31:35.560 --> 0:31:45.800
First of all, in terms of Kotlin JS and Kotlin native, those are not intended to be a performant

328
0:31:45.800 --> 0:31:48.240
alternative for existing solutions.

329
0:31:48.240 --> 0:31:52.600
Like Kotlin JS wasn't meant to be a challenge to TypeScript, what I heard somewhere, and

330
0:31:52.600 --> 0:32:00.120
Kotlin native wasn't intended to rival things like Rust or Go, etc.

331
0:32:00.120 --> 0:32:04.560
Is there a change in that ambition?

332
0:32:04.560 --> 0:32:06.400
That's my first question.

333
0:32:06.400 --> 0:32:12.920
My second question is, does JetBrains have any plans to use Compose to port their IDEs

334
0:32:12.920 --> 0:32:18.200
to Compose from AWT?

335
0:32:18.200 --> 0:32:41.720
Okay, for the first one, I'm not sure if I heard or read some changes or stuff.

336
0:32:41.720 --> 0:32:56.720
There's just another thing in the ecosystem, probably it's not going to be a place.

337
0:32:56.720 --> 0:33:01.480
I'm not sure what you catch or what not, so I'm going to start.

338
0:33:01.480 --> 0:33:08.440
I haven't read stuff, or here's stuff that changed what you were saying.

339
0:33:08.440 --> 0:33:15.000
Probably there's going to be other tooling to the...

340
0:33:15.000 --> 0:33:22.160
It's another technology to support and not to replace.

341
0:33:22.160 --> 0:33:31.640
So it's going to be another thing to cover in other use cases, not to completely replace.

342
0:33:31.640 --> 0:33:40.160
I don't have more clear guidance or evidence or opinions about that.

343
0:33:40.160 --> 0:33:42.200
The second one was about...

344
0:33:42.200 --> 0:33:44.600
There was no easy, I didn't get it fully.

345
0:33:44.600 --> 0:33:53.760
It's like eating your own doctor, or JetBrains, you should compose to fill their IDEs.

346
0:33:53.760 --> 0:34:00.400
I'm not JetBrains, so I don't know, but probably yes if I have to bet it.

347
0:34:00.400 --> 0:34:10.440
I know that they have their own runtime for UI and stuff like that, but probably yes,

348
0:34:10.440 --> 0:34:31.480
they are going to use it, but I'm not JetBrains, so I don't know.


WEBVTT

00:00.000 --> 00:18.740
Thank you.

00:30.000 --> 00:59.560
All right, so let's continue with one of our favorite topic which is dependency injection.

00:59.560 --> 01:01.000
So we talked about it this morning.

01:01.000 --> 01:02.500
As you can see, we have a lot of topics.

01:02.500 --> 01:05.720
We have even more topics until what time do we finish?

01:05.720 --> 01:08.000
6.30 p.m., right?

01:08.000 --> 01:10.720
So 6 p.m., 6.30.

01:10.720 --> 01:12.960
So we still have a lot of stuff coming in.

01:12.960 --> 01:19.640
But for now, please welcome Arnaud who is going to talk about coin.

01:19.640 --> 01:25.240
Thank you very much.

01:25.240 --> 01:30.360
Let's talk about new Kotlin developer experience in coin.

01:30.360 --> 01:36.720
Just about me, I'm Arnaud Jugiani, the lead maintainer of coin project and also Kotlin

01:36.720 --> 01:39.120
GD.

01:39.120 --> 01:44.920
Coin is a dependency injection framework and the idea is to help you structure your application

01:44.920 --> 01:46.960
with ease and efficiency.

01:46.960 --> 01:53.360
And this is the challenge of providing a DSL developer experience for you to make your

01:53.360 --> 01:56.480
app very, very easy to build.

01:56.480 --> 02:01.160
I tried to explain coin in just two minutes to explain how finally we improved behind

02:01.160 --> 02:02.720
that.

02:02.720 --> 02:08.600
As we have a dependency injection framework, we want a bunch of classes here, one A and

02:08.600 --> 02:11.200
B with a dependency.

02:11.200 --> 02:16.320
And we have a DSL keyword here that make the configuration space for us.

02:16.320 --> 02:23.800
And this is a module keyword that introduce the way that we have definitions for the application.

02:23.800 --> 02:30.360
Single keyword with a lambda function to create what we want to create the class that we have

02:30.360 --> 02:31.520
here.

02:31.520 --> 02:36.800
And the second one to declare the second button and then we are done.

02:36.800 --> 02:41.720
We have declared our components inside the coin container.

02:41.720 --> 02:47.200
The thing here is that it's working directly with your Kotlin code.

02:47.200 --> 02:52.600
That means that here if you follow closely, we are using constructor directly.

02:52.600 --> 02:54.720
And then it's not compiling.

02:54.720 --> 03:00.400
Then that means that this class B is needed a dependency to class A. And then this is

03:00.400 --> 03:04.360
where we need the last keyword that is get.

03:04.360 --> 03:11.280
And then the challenge was that in three keywords, I can manage to write an application configuration.

03:11.280 --> 03:21.640
The thing is that then coin can create everything by constructor for you and also run any kind

03:21.640 --> 03:26.280
of Kotlin code directly behind the functions.

03:26.280 --> 03:33.720
The other side of coin is that you can inject any field easily just by unlocking an extension

03:33.720 --> 03:36.040
with the coin component interface.

03:36.040 --> 03:43.560
That means that you can access to the by inject function that helps you retrieve a dependency

03:43.560 --> 03:45.600
out of coin container.

03:45.600 --> 03:47.800
Then you have both components.

03:47.800 --> 03:50.520
Those one that are created directly by coin.

03:50.520 --> 03:57.800
And when you can't have things created directly by coin, then you need to inject in fields.

03:57.800 --> 04:06.720
This will perhaps remind you some of the Android activity things like you can't create activity

04:06.720 --> 04:07.720
by yourself.

04:07.720 --> 04:09.480
You can't create Android component by yourself.

04:09.480 --> 04:11.920
You are called by a lifecycle.

04:11.920 --> 04:18.480
Then you need to retrieve things from the outside of the container.

04:18.480 --> 04:19.480
And then that's it.

04:19.480 --> 04:22.600
You mostly have all the tools to have your dependency injection.

04:22.600 --> 04:27.920
You need just to run and start your container.

04:27.920 --> 04:31.200
But finally, the experience is interesting.

04:31.200 --> 04:37.200
And the community raises many things like problem of verbosity.

04:37.200 --> 04:43.640
Because sometimes in application, you tend to have, like, dozens of dependency.

04:43.640 --> 04:46.040
I would say perhaps look at your code.

04:46.040 --> 04:51.280
Perhaps you have kind of potato effect where you can have everything inside one component

04:51.280 --> 04:52.800
and try to gather everything.

04:52.800 --> 04:57.280
But yeah, not that great for us.

04:57.280 --> 05:03.920
This is where the story starts for us and how we can improve this for the Kotlin developers.

05:03.920 --> 05:10.520
And then from this really simplistic example here, what we have here is we would like to

05:10.520 --> 05:15.600
avoid all the blubber to write manually the get things.

05:15.600 --> 05:21.320
The idea and the need of get is that coin is made to be super efficient.

05:21.320 --> 05:22.320
We don't use reflection.

05:22.320 --> 05:28.080
We don't use any kind of meta data information over your code.

05:28.080 --> 05:30.000
We just run the thing.

05:30.000 --> 05:33.480
And then the configuration seems to be a bit manual over there.

05:33.480 --> 05:38.720
But then you are manually writing the things for coin.

05:38.720 --> 05:46.960
The new magic way finally to write this with coin is having a new keyword, single and single

05:46.960 --> 05:47.960
off.

05:47.960 --> 05:49.560
That is the same semantic keyword.

05:49.560 --> 05:52.520
But we did a new function.

05:52.520 --> 05:58.920
And then instead of asking you a lambda, we want to ask you a function directly.

05:58.920 --> 06:02.280
This is why you have the double semi-colon character.

06:02.280 --> 06:07.080
And then for us, you don't have to write things we get.

06:07.080 --> 06:14.400
It's still readable, still very easy to use with the coin semantic, the sense, the meaning

06:14.400 --> 06:16.360
of the DSL.

06:16.360 --> 06:21.840
And then also it's consistent with changes in the meaning of, for example, if you change

06:21.840 --> 06:27.680
the constructor of a class, your DSL can break because you didn't update it.

06:27.680 --> 06:35.940
Then for us, it's a very great improvement to go over a DSL that is using lots of functions.

06:35.940 --> 06:43.880
But finally, not a value to write those functions directly as a lambda, but directly with parenthesis

06:43.880 --> 06:50.000
and this pointer kind of pointer function stuff.

06:50.000 --> 06:56.080
The other side of coin, of course, is having dynamic behavior that are interesting, is

06:56.080 --> 06:58.880
that you can pass data directly to a definition.

06:58.880 --> 07:03.360
That means that in this class, we just want an ID.

07:03.360 --> 07:09.640
And what we want to do is pass this ID dynamically to this component.

07:09.640 --> 07:14.680
Coin offer you the way to do that directly when you inject a field by using the function

07:14.680 --> 07:16.360
parameters of.

07:16.360 --> 07:23.120
And then magically, your data is growing into the graph and then is injected in your definition

07:23.120 --> 07:25.200
directly by this function.

07:25.200 --> 07:34.200
This is very visual, interesting, but then this compact way of having the DSL also is

07:34.200 --> 07:40.080
capable of dealing with your lambda expression.

07:40.080 --> 07:42.680
Then you don't need lambda anymore.

07:42.680 --> 07:49.640
It's quite interesting because finally, this was this feeling of having coin as a really

07:49.640 --> 07:55.560
compact DSL and compact way to describe everything without to invade your implication.

07:55.560 --> 08:02.920
Is now, it avoids an annoying side effect of the DSL and now you can just write directly

08:02.920 --> 08:06.240
your class constructor like that.

08:06.240 --> 08:09.800
There's of course some warnings.

08:09.800 --> 08:16.240
If you have qualifiers, name parameters, like if you have two components that have the same

08:16.240 --> 08:21.240
type but have not the same implementation, then you want to have the different name for

08:21.240 --> 08:22.240
them.

08:22.240 --> 08:28.320
Then here, we can't guess which one you want to use directly.

08:28.320 --> 08:31.360
Function and classes that have different values, we don't know.

08:31.360 --> 08:34.600
We don't know if you want to use the default values.

08:34.600 --> 08:41.320
If you want coin to use this, then up to you to use again the lambda expression thing.

08:41.320 --> 08:50.040
Also any kind of complex expression like builders, yeah, it's still cut in then for you.

08:50.040 --> 08:55.080
You can just still use the lambda when those expressions are needed.

08:55.080 --> 09:00.240
Else, go with this double semicolon character expression and then just use the class and

09:00.240 --> 09:01.840
then you're done.

09:01.840 --> 09:09.680
Mostly, keep the things up going in the easiest way to write for you.

09:09.680 --> 09:14.240
It's opening a door for us like we are framework maker.

09:14.240 --> 09:19.760
We try to understand what kind of DSL and options we want to offer you.

09:19.760 --> 09:28.800
For example, when you're defining something in your DI, you can give it a name, a qualifier.

09:28.800 --> 09:30.680
We can say that it's created on start.

09:30.680 --> 09:34.720
For example, the container is starting, then you can create it on start and also you can

09:34.720 --> 09:38.040
say that it's binding another type.

09:38.040 --> 09:49.080
All of this is interesting, but it's not really easy to extend in terms of keywords and binding.

09:49.080 --> 09:53.480
For example, you don't know if there is other keywords after the bind because we are already

09:53.480 --> 09:58.200
using some lambda, then a function to express something.

09:58.200 --> 10:02.760
Do we open a new lambda block after the lambda block?

10:02.760 --> 10:04.920
It's a bit weird things.

10:04.920 --> 10:11.360
With this new DSL, we can open a new way to write this function.

10:11.360 --> 10:18.360
That means that we can directly open a lambda, there is theory for this option.

10:18.360 --> 10:21.800
We have a name, we have created at start and we have bind.

10:21.800 --> 10:28.800
This is the same world, but not implemented in the same DSL style.

10:28.800 --> 10:32.880
Here this is functions directly out of the definition thing.

10:32.880 --> 10:37.720
Clearly, you see it's a bit more readable for us.

10:37.720 --> 10:44.280
It's clearly more maintainable and allowing us to add more features at time.

10:44.280 --> 10:50.800
It's really interesting to provide a new way to write things and also feedback of the community

10:50.800 --> 10:55.560
is super interesting for us.

10:55.560 --> 11:01.880
One of the things also is that coin is really simple and keeps the things really simple

11:01.880 --> 11:06.520
in terms of DSL that means that you declare anything in terms of module.

11:06.520 --> 11:12.240
You can scale in the way you want by features, by layers, by everything, then up to you to

11:12.240 --> 11:13.720
organize yourself.

11:13.720 --> 11:20.520
Really, the idea is that the tool shouldn't impact your mind, it shouldn't impact your

11:20.520 --> 11:22.920
way to build your application.

11:22.920 --> 11:26.640
You should even forget that you are using coin.

11:26.640 --> 11:32.800
This is really important for us to continue in this way.

11:32.800 --> 11:42.000
In coin, the framework never had the need of gathering modules other by list or by let's

11:42.000 --> 11:49.320
say something more common by your plus operator, but it was really simplistic.

11:49.320 --> 11:56.480
The problem is that with scaling application development, scaling around all the development,

11:56.480 --> 12:01.800
meaning really strong links between definition, between re-easibility of this component, this

12:01.800 --> 12:05.560
layer and this stuff.

12:05.560 --> 12:13.800
We finally introduced something that can be seen as really simple to add as a module is

12:13.800 --> 12:19.520
that we add the includes function that help us really understand what kind of module we

12:19.520 --> 12:28.280
want to reuse and then flatten everything that optimize your loading at start for you.

12:28.280 --> 12:38.120
It may be visually, it may be really easy to use, but when finally at the beginning

12:38.120 --> 12:44.840
for coin, you only have a list of modules to play with, it's kind of really hard to

12:44.840 --> 12:52.960
reuse and really hard to figure out where finally you can build your configuration.

12:52.960 --> 12:59.040
Then we are unlocking a really big door that means that you can begin to reuse parent modules

12:59.040 --> 13:04.800
with chime modules, with chime modules and then you can begin to dive into really, really

13:04.800 --> 13:08.800
complex big and complex configuration things.

13:08.800 --> 13:14.000
Then for you, we are flattening all the graph, we are loading and optimizing all the stuff

13:14.000 --> 13:17.960
for you.

13:17.960 --> 13:24.320
Then all those Kotlin Multiplatform, all of these features are Kotlin Multiplatform ready

13:24.320 --> 13:31.400
and to get those superpowers, sure, you can grab these directly in your Gradle file.

13:31.400 --> 13:39.520
It's not 3.2 versions, time is flying, but 3.3 and if you are making a Kotlin Multiplatform

13:39.520 --> 13:46.680
application, use the coin core module, Gradle module and if you are using Android, then

13:46.680 --> 13:51.320
use the coin Android module version.

13:51.320 --> 13:58.040
Coin has been made to make your development super easy and super simple and this is why

13:58.040 --> 14:02.760
your coin configuration should stay really simple for you.

14:02.760 --> 14:10.480
I let you meditate on this quote from Chet Haase.

14:10.480 --> 14:16.720
The transition for us is we are trying to use another kind of expression in terms of

14:16.720 --> 14:23.120
framework is that until now we were really people that pushing a lot for Kotlin DSL,

14:23.120 --> 14:25.680
DSL stuff, etc.

14:25.680 --> 14:32.440
The idea of perhaps introducing annotation is also to not reproduce what you can find

14:32.440 --> 14:42.000
in other frameworks like Dagger and others, but truly point something, we want to bring

14:42.000 --> 14:44.440
value.

14:44.440 --> 14:49.640
The problem of also the DSL is that we clearly have some limits over that.

14:49.640 --> 14:55.680
We can't understand really what you are writing, we can't trigger any static analysis of your

14:55.680 --> 14:57.660
code directly.

14:57.660 --> 15:00.360
That came to magic to the Kotlin compiler plugin.

15:00.360 --> 15:06.600
I won't dive into details for that because I believe some people already talk about KSP

15:06.600 --> 15:12.080
and everything about that, but let's say that Kotlin compiler is everything we could do

15:12.080 --> 15:16.240
for you before we are compiling your code in Kotlin.

15:16.240 --> 15:22.120
Then we could rewrite things, we could make code generation, of course, analysis, etc.,

15:22.120 --> 15:23.360
etc.

15:23.360 --> 15:31.640
What we will do with Google KSP is provide you a way to avoid the DSL and go really straightforward

15:31.640 --> 15:38.720
with annotation and keep all the coin semantic, all the coin API for you.

15:38.720 --> 15:42.360
We don't want to reinvent the wheel.

15:42.360 --> 15:48.560
What we want to do here is that we want to generate what the DSL you would have to write

15:48.560 --> 15:54.160
and then it's really, really, really a small piece of code that you would have to write.

15:54.160 --> 15:59.900
Then if we can still avoid you to write things in your code, this is still a good experience

15:59.900 --> 16:04.000
for us to let you understand how we can go.

16:04.000 --> 16:12.240
In terms of definitions, what it means is that if you have a class, then you can just

16:12.240 --> 16:19.360
add directly an annotation, you see that this is the same keyword we have, the add single

16:19.360 --> 16:25.640
on it, and then you see that we are extending an interface.

16:25.640 --> 16:31.600
The idea is that with just one annotation, we will understand that this class is having

16:31.600 --> 16:37.680
a constructor and then we will also bind directly to type my repository.

16:37.680 --> 16:42.440
The idea is that we allow you to have not to type anything in this.

16:42.440 --> 16:47.600
We detect things for you, we detect the code and then we can say, okay, coin, just write

16:47.600 --> 16:54.660
this definition for my repository type with the implementation of my repository.

16:54.660 --> 16:57.960
We have another component.

16:57.960 --> 16:59.800
We target add factory.

16:59.800 --> 17:05.080
Factory is another keyword of coin is where you want, it's the opposite of a singleton.

17:05.080 --> 17:08.840
A factory is something you want to create each time you want to ask a definition for

17:08.840 --> 17:11.560
that.

17:11.560 --> 17:17.200
If you want an instance of my presenter directly, you just type it add factory and then coin

17:17.200 --> 17:24.840
will generate the DSL and then coin will manage to go to and get the definition for you.

17:24.840 --> 17:30.560
You see finally you don't really care about the DSL and the complexity behind that.

17:30.560 --> 17:35.060
Finally we can detect many, many things for you.

17:35.060 --> 17:42.320
Finally for those who are making Android development, we have a add coin view model annotation dedicated

17:42.320 --> 17:47.560
for coin that lets you understand that, let coin understand that we will create an instance

17:47.560 --> 17:49.240
of view model.

17:49.240 --> 17:53.120
Then we are reaching all the dependencies.

17:53.120 --> 17:57.440
We understand that this is a view model and then we will bind everything for you.

17:57.440 --> 18:00.760
You see that here we don't speak about DSL.

18:00.760 --> 18:07.840
It's just that we tagged something here and the idea is that we can have automatic injection

18:07.840 --> 18:08.840
and binding.

18:08.840 --> 18:12.680
We can detect everything, all you need here by default.

18:12.680 --> 18:15.000
We can deal with new label type.

18:15.000 --> 18:19.640
That means that if you use the question mark in parameter construction, then we will understand

18:19.640 --> 18:24.000
that this is something that can be new label and then for you it's completely transparent

18:24.000 --> 18:28.800
and then it will be taken into account.

18:28.800 --> 18:38.920
Also, as you have seen, we can tag a parameter in a function or in a constructor as injected

18:38.920 --> 18:39.920
param.

18:39.920 --> 18:44.960
That means it will be something that comes from the application that is sending a data,

18:44.960 --> 18:48.520
a dynamic data directly to the definition.

18:48.520 --> 18:56.520
Then the natural way to do that will be to tag a parameter as injected param.

18:56.520 --> 19:02.880
You see that finally the experience for us is to try really to let you write the minimum

19:02.880 --> 19:05.600
and the minimum things for you.

19:05.600 --> 19:13.040
For example, with DaggerHit we still have lots to write, lots of things to specify.

19:13.040 --> 19:17.600
For example, in the Spring framework, this is the kind of opposite because Spring is

19:17.600 --> 19:21.960
scanning everything for you and making all the class pass analysis for you.

19:21.960 --> 19:32.640
Then we are in between where finally we allow you to just tag your code with just a bunch

19:32.640 --> 19:38.600
of annotation and then you're ready to go and you can manage any kind of tip of injection

19:38.600 --> 19:42.880
with your constructor things.

19:42.880 --> 19:47.160
The idea behind of the magic is that just you use annotation and you are ready to use

19:47.160 --> 19:54.320
the standard coin API is that you can use by inject or by view model field injection

19:54.320 --> 19:57.320
as tidy hair.

19:57.320 --> 20:02.440
We don't break the experience of people that are already using coin.

20:02.440 --> 20:10.040
Then we allow people that are using annotation directly to use those extensions as regular

20:10.040 --> 20:14.000
extensions.

20:14.000 --> 20:20.440
For the modules then, for definition we just tag annotation, we annotate classes but for

20:20.440 --> 20:26.800
modules we can't directly tag something in the DSL.

20:26.800 --> 20:32.280
How works KSP is that we are scanning from many classes or functions then it will be

20:32.280 --> 20:35.440
kind of hard to tag around the DSL.

20:35.440 --> 20:41.360
The proposal for now is to work directly with class module to let you have an organization

20:41.360 --> 20:44.360
module for that.

20:44.360 --> 20:47.080
How you do that, you declare a module and that's it.

20:47.080 --> 20:52.400
You have a module, you have a hard module and the idea is that you put add component

20:52.400 --> 20:59.160
scan and then we will scan any kind of component that has been tagged in your application by

20:59.160 --> 21:00.800
package.

21:00.800 --> 21:05.760
Then it's really specific in terms of scan.

21:05.760 --> 21:10.960
That means that you can really filter by package, filter by layer, filter by features, how you

21:10.960 --> 21:16.360
want to organize yourself and then you just have this annotation here.

21:16.360 --> 21:22.760
Also, if you want, you can declare things directly inside a function.

21:22.760 --> 21:28.040
Like we will understand that if you would tag something inside your module class it

21:28.040 --> 21:32.160
will be a definition that we can bind for you directly.

21:32.160 --> 21:38.240
You see it's still very, very natural to use and really super compact.

21:38.240 --> 21:44.760
The idea is for us to let you go super fast for your dependency injection and keep everything

21:44.760 --> 21:48.400
a side for you.

21:48.400 --> 21:57.520
Of course, between two modules you can have the includes of other modules that will generate

21:57.520 --> 21:58.800
the right things for you.

21:58.800 --> 22:03.480
That means that it will use the includes function that has been introduced just above in the

22:03.480 --> 22:06.800
new coin DSL side.

22:06.800 --> 22:11.120
Then we just need to start coin.

22:11.120 --> 22:17.720
That means that you have your module, you have a function where you want to start coin

22:17.720 --> 22:25.040
and then the idea is we just run the module with a new instance of my module here.

22:25.040 --> 22:31.040
The only thing we want to generate for you is that it's just a simple extension that

22:31.040 --> 22:37.800
will generate the DSL and this is where we just want to make boundaries for us.

22:37.800 --> 22:39.560
We don't want to reinvent the wheel.

22:39.560 --> 22:43.560
We don't want to reinvent things to generate code over code.

22:43.560 --> 22:49.480
We want to keep coin as it is, something that is super efficient to make dependency injection

22:49.480 --> 22:53.640
but allow you to use the annotations.

22:53.640 --> 22:56.960
This is why with such approach you can mix both.

22:56.960 --> 23:02.200
You don't have to write a new project with annotation, you can already use coin annotations

23:02.200 --> 23:05.120
inside your project and test with it.

23:05.120 --> 23:09.600
The only thing you have to care is be sure to have the right import.

23:09.600 --> 23:17.360
That means that we are generating all your coin content inside of.coin.ksp.generated

23:17.360 --> 23:25.120
and then you can use both DSL module, class modules annotated and everything, everything.

23:25.120 --> 23:32.040
Then up to you to express yourself and use the right tools that is great for you.

23:32.040 --> 23:36.960
What is interesting for us is that we don't want to reproduce what we have seen and why

23:36.960 --> 23:43.240
we have made coin is that we don't want to expose you to tools that can take dozens of

23:43.240 --> 23:45.480
minutes to recompile your project.

23:45.480 --> 23:52.360
The idea is that it should run for thousands of components really quick.

23:52.360 --> 23:57.920
The other good thing about that is that behind the scene it is coin generated and this is

23:57.920 --> 24:05.800
something you can clearly debug step by step if you want.

24:05.800 --> 24:10.160
Up to you, that means that we don't want to replace DSL by annotations.

24:10.160 --> 24:12.120
It's another way to express yourself.

24:12.120 --> 24:18.640
KSP is a good technology for us to help you write less, less quads equals less bugs.

24:18.640 --> 24:26.520
Then up to you to choose the right tools and the right solution to make your app structure.

24:26.520 --> 24:32.960
To finish then about coin and some improvement of this here, what's next?

24:32.960 --> 24:39.920
If you want to slow down about coin, we have many tutorials on many kinds of Kotlin application

24:39.920 --> 24:44.560
from Kotlin, Kotlin Media Platform and Android application.

24:44.560 --> 24:56.320
This is the roadmap for 2023 where we have end of track 3.2, 3.3 is the active track.

24:56.320 --> 25:00.560
This is the current application that is still maintained.

25:00.560 --> 25:08.280
Before the next release where we are in 3.4, where we want to focus on compose for the

25:08.280 --> 25:11.760
JetBrains multi-platform side.

25:11.760 --> 25:18.160
We want to bring better experience for Kotlin native and we have the verify API that is

25:18.160 --> 25:23.200
a new verification API that lets you make a compile time verification.

25:23.200 --> 25:30.560
Of course we are keen of Ktor and we want to push new things about Ktor.

25:30.560 --> 25:36.120
Especially today at first then, this is my first session at first then, I'm really happy

25:36.120 --> 25:41.840
to show all the people that are really sharing and contributing to coin and clearly want

25:41.840 --> 25:42.840
to thank them.

25:42.840 --> 25:46.640
Thank you all the community to work on coin.

25:46.640 --> 25:51.400
I believe some of people can find themselves on this board.

25:51.400 --> 25:57.800
If you want to chat with the coin community, then you can either find us on Twitter, on

25:57.800 --> 26:04.880
Slack, the Kotlin on Slack and also you can go on the website that is in sartcoin.io to

26:04.880 --> 26:09.520
find all the related sources that you want.

26:09.520 --> 26:15.320
Also open source is great but you need a strong company behind that to help you and have support

26:15.320 --> 26:19.880
on your project that is helping with coin technology and Kotlin technology.

26:19.880 --> 26:26.680
This is why I founded Cozila last year to work with the people that are using such technologies.

26:26.680 --> 26:33.640
Then you can find all the resources on Cozila.io and write on time.

26:33.640 --> 26:34.640
Thank you.

26:34.640 --> 26:35.640
Thank you.

26:35.640 --> 26:40.800
Then we have time for questions.

26:40.800 --> 26:41.800
No question there.

26:41.800 --> 26:42.800
No, sorry.

26:42.800 --> 26:44.800
We don't have time for questions.

26:44.800 --> 26:47.280
We are so strict on timing.

26:47.280 --> 27:05.400
The next talk will start in four minutes actually.

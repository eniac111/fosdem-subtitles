WEBVTT

00:00.000 --> 00:07.000
Okay, so just a minute there.

00:07.000 --> 00:08.000
Hello, everyone.

00:08.000 --> 00:13.200
I guess we are starting because we have been told that we are strict on time, minutes to

00:13.200 --> 00:20.200
minutes, so I cannot do anything, but I have to start talking now, and thanks a lot for

00:20.200 --> 00:22.240
joining us today.

00:22.240 --> 00:26.120
And let's start with a brief intro, probably, of our speakers.

00:26.120 --> 00:27.440
All right.

00:27.440 --> 00:28.640
Thank you.

00:28.640 --> 00:30.720
Thank you all for being here.

00:30.720 --> 00:32.200
I'm Marco.

00:32.200 --> 00:36.480
And yeah, I'm Kotlin GDE based in Berlin.

00:36.480 --> 00:43.160
I'm Italian, and today I'm here talking about Kotlin.

00:43.160 --> 00:44.160
Same here.

00:44.160 --> 00:45.160
I'm Sergei.

00:45.160 --> 00:51.640
I'll be talking about Kotlin as well, and we were asked to get you the state of Kotlin,

00:51.640 --> 00:54.480
whatever it means.

00:54.480 --> 01:01.400
I worked for various companies in Kotlin for about seven years now, I guess, such a long

01:01.400 --> 01:09.880
time, early years with the veterans in Kotlin now mainly in Android development and infra.

01:09.880 --> 01:13.840
But let's start with important things.

01:13.840 --> 01:20.840
We live in a modern time with modern technologies available, and so this presentation is powered

01:20.840 --> 01:23.920
by generative AI.

01:23.920 --> 01:31.240
It's really important to remember that the speakers today, both of us, are not anyhow

01:31.240 --> 01:37.520
affiliated with any company that creates Kotlin or like sponsor it or anything like this.

01:37.520 --> 01:43.240
It will be pure, our opinion based on our experience, our guesses.

01:43.240 --> 01:44.240
I don't know.

01:44.240 --> 01:49.080
We might be wrong, except for the places where when we are right.

01:49.080 --> 01:51.680
That's it for today.

01:51.680 --> 01:59.760
So yeah, and generative AI make a thing that probably the speaking these days will be an

01:59.760 --> 02:00.760
easy job.

02:00.760 --> 02:10.680
So last year, preparing for the FOSDAM talk, I've been writing my videos about 3am before

02:10.680 --> 02:11.680
the deadline.

02:11.680 --> 02:18.120
So Nikola was already saying why you're not sending me the videos, and I had to do.

02:18.120 --> 02:23.080
And this year I thought, all right, I'm using the modern technologies and asked Chad GPT

02:23.080 --> 02:25.560
to generate the slides for me.

02:25.560 --> 02:31.160
Unfortunately we ended up in like 5 to 10 minutes saying, oh, I have no idea what is

02:31.160 --> 02:35.280
Kotlin because I don't have data after 2021 probably.

02:35.280 --> 02:41.040
So the rest of the presentation is really not powered by the generative AI.

02:41.040 --> 02:42.740
I'm sorry for this.

02:42.740 --> 02:46.520
So it's powered by us.

02:46.520 --> 02:52.520
We had to figure out what is Kotlin and what is the current state.

02:52.520 --> 02:58.960
So probably the first reasonable thing thinking about this is to get and try to understand

02:58.960 --> 03:01.600
any of the developer surveys available.

03:01.600 --> 03:06.880
And one of the most interesting ones in this domain is the JetBrains developer survey that

03:06.880 --> 03:13.160
they run, I guess, every year from 2019 or 2020ish.

03:13.160 --> 03:21.380
So here is the data available on the end of 2022, the survey.

03:21.380 --> 03:28.240
And we can see definitely a domination of mobile development for Kotlin and presumably

03:28.240 --> 03:31.520
it's Android mobile development.

03:31.520 --> 03:33.400
I guess so.

03:33.400 --> 03:41.400
And another leading stream is the web or back-end development, which is rising and 40% of all

03:41.400 --> 03:45.080
Kotlin engineers are working with back-ends.

03:45.080 --> 03:55.160
I must admit that at the end of 2022, the majority of the population is still in mobile.

03:55.160 --> 04:01.560
The back-end is rising and back-end is trending up.

04:01.560 --> 04:08.760
I was under impression like a year ago that, hey, Android is probably the only platform

04:08.760 --> 04:09.880
for Kotlin.

04:09.880 --> 04:13.440
However, I was like reasonably biased with this.

04:13.440 --> 04:20.040
And the first time after COVID, when I arrived to one of the European conferences that had

04:20.040 --> 04:29.760
a few topics there, I was impressed that the majority of topics were with back-ends.

04:29.760 --> 04:36.360
But today let's try to avoid getting too deep into particular Kotlin platforms and focus

04:36.360 --> 04:41.680
more on high-level language stuff, what is coming in the next years, or at least what

04:41.680 --> 04:44.760
we can probably predict to come.

04:44.760 --> 04:53.840
It's quite funny that it's possible to describe the whole 2022 and 2023 agenda in the Kotlin

04:53.840 --> 04:56.480
world with just five letters.

04:56.480 --> 04:58.960
And one is common in most of the words.

04:58.960 --> 05:05.560
It's K2, the new Kotlin compiler that's coming, and the Kotlin multiplatform or KMP.

05:05.560 --> 05:08.880
So I'm not very surprised.

05:08.880 --> 05:13.880
And in the past year, we didn't see a lot of Kotlin language features.

05:13.880 --> 05:16.460
And there are a few reasons for this.

05:16.460 --> 05:25.320
And we'll definitely discuss them in the next slides and further in this talk.

05:25.320 --> 05:32.000
But let's try to first understand what is K2 and what is what it's preparing for us

05:32.000 --> 05:38.960
as developers and product owners or Plight engineers.

05:38.960 --> 05:44.720
And then we'll get to KMP later in this presentation.

05:44.720 --> 05:51.880
First of all, there are a few major problems in the whole Kotlin infrastructure.

05:51.880 --> 05:56.080
And they are the stability and performance of the ID.

05:56.080 --> 06:03.440
So Plight, even though probably IntelliJ is one of the greatest product on the market

06:03.440 --> 06:09.720
for developers, it's not great for Kotlin.

06:09.720 --> 06:10.960
I mean, it's fine.

06:10.960 --> 06:15.760
But whenever your project is growing and growing and growing, and I know something about large

06:15.760 --> 06:21.000
project in the industry, it's getting unusable.

06:21.000 --> 06:23.960
The second thing is build speed.

06:23.960 --> 06:31.400
Plight, whenever you try probably Java for its builds before, even if Java is slow, but

06:31.400 --> 06:35.120
overall Kotlin is significantly slower.

06:35.120 --> 06:41.980
And this is like a drawback, especially if you came from the legacy code base whenever

06:41.980 --> 06:46.040
you had five or 10 years of previously Java code.

06:46.040 --> 06:47.280
Yeah, I know, I know.

06:47.280 --> 06:51.480
I tried to say we are not getting deeper into the platforms.

06:51.480 --> 06:53.840
But it is what it is.

06:53.840 --> 06:58.040
And the build setup overall is quite complicated.

06:58.040 --> 07:01.520
So for example, Kotlin multi-platform.

07:01.520 --> 07:05.440
How to run Kotlin multi-platforms from the common line.

07:05.440 --> 07:14.480
If you can give me an answer, I will just take you out for dinner probably.

07:14.480 --> 07:22.920
And currently the overall K2 is developing in the two major Kotlin roadmap milestones.

07:22.920 --> 07:28.880
Like whenever you're interested, what is going on in Kotlin, you can get to the Kotlin roadmap.

07:28.880 --> 07:31.880
Thanks a lot for publishing it to JetBrains.

07:31.880 --> 07:35.160
It's like magic.

07:35.160 --> 07:37.280
There are two key things.

07:37.280 --> 07:39.320
Like getting K2 to better.

07:39.320 --> 07:41.280
K2 is currently in alpha.

07:41.280 --> 07:44.880
And it's the whole rewrite of the compiler front end.

07:44.880 --> 07:51.960
Meaning that if you previously hacked something for the compiler plug-ins or compiler infrastructure,

07:51.960 --> 07:59.760
for you an owner of the libraries like KSP or KPT, you basically have to redo everything

07:59.760 --> 08:03.760
you did in the past three, five years.

08:03.760 --> 08:08.280
And the second part is the IntelliJ based plug-in.

08:08.280 --> 08:16.160
And the story there is like the compiler and the compiler front end especially is very

08:16.160 --> 08:22.680
coupled with whatever Android Studio or IntelliJ ID or your ID of choice is doing with the

08:22.680 --> 08:23.680
language.

08:23.680 --> 08:31.360
Either it's a language server or the index you have locally, your compiler performance

08:31.360 --> 08:38.600
really impacts the experience you have in the ID.

08:38.600 --> 08:43.720
Let's get to the other things.

08:43.720 --> 08:53.040
Like the unfortunate is the deprioritization of the API for compiler plug-ins.

08:53.040 --> 09:01.480
It means that for all of the engineers outside of JetBrains, it will be still very hard to

09:01.480 --> 09:06.120
create tools for a compiler for ID and evolve them over time.

09:06.120 --> 09:12.640
So currently you don't have a stable and you don't have basically a documented API for

09:12.640 --> 09:13.640
the compiler.

09:13.640 --> 09:21.960
So for example, if you're creating a library that changes something, every major or any

09:21.960 --> 09:29.040
even minor release of Kotlin, you need to upgrade it and evolve and maintain the compatibility

09:29.040 --> 09:33.360
of the version for the compiler.

09:33.360 --> 09:43.120
Please get back.

09:43.120 --> 09:44.440
Yes, it's back.

09:44.440 --> 09:51.880
So currently K2 is an alpha, but as far as we understand, the 1.9, Kotlin 1.9 is about

09:51.880 --> 09:54.800
to get us K2 in beta.

09:54.800 --> 10:03.040
For the current numbers, we have the improvement at around a rate of 2X for all the build that

10:03.040 --> 10:13.040
at least JetBrains provided us in their benchmarks and publicly told us about these things.

10:13.040 --> 10:17.600
With Kotlin itself being built in significantly faster.

10:17.600 --> 10:22.880
But if you're impatient, there is the way to bring at least some of the improvements

10:22.880 --> 10:26.960
for the build speed earlier in the pipe.

10:26.960 --> 10:34.920
You can get to Kotlin 1.7 something and it has a probably 10 to 15% improvement in the

10:34.920 --> 10:36.120
build speed.

10:36.120 --> 10:46.520
And you can even experience this in the large scale code bases.

10:46.520 --> 10:55.240
There are a few plans about the K2 going to beta and mainly what JetBrains and Kotlin

10:55.240 --> 11:00.600
wants to achieve, it's the full functional compiler and it should work for the whole

11:00.600 --> 11:04.680
ecosystem, not only the JVM.

11:04.680 --> 11:08.520
It's probably usable for JVM even right now.

11:08.520 --> 11:09.600
I tried it.

11:09.600 --> 11:16.400
It's not a great experience, but you can experiment at least with it.

11:16.400 --> 11:25.560
So there is a need for improvement in various plugins like Kotlin annotation processor,

11:25.560 --> 11:28.920
serializable, KSP and others.

11:28.920 --> 11:33.260
And it will take time.

11:33.260 --> 11:42.400
As of yesterday, there is a well done support for Kotlin X serialization, all open, no arc

11:42.400 --> 11:45.500
plugins and Lombok.

11:45.500 --> 11:50.440
It's already in the source code of Kotlin compiler.

11:50.440 --> 11:52.760
I'm not sure which version they are targeting.

11:52.760 --> 11:58.080
So I was checking 1.9 daily build and it was fine there.

11:58.080 --> 12:04.360
Probably there is something in 1.7.21, but I'm not quite sure.

12:04.360 --> 12:08.620
So unfortunately KAPT is still not working.

12:08.620 --> 12:12.200
So you cannot do any of the annotation processing yet.

12:12.200 --> 12:19.160
And KSP, the simple process in the future of annotation processing for Kotlin also doesn't

12:19.160 --> 12:22.080
work.

12:22.080 --> 12:28.840
But let's get into some details of the annotation processor support.

12:28.840 --> 12:34.200
Like luckily in Utrecht there are tickets for almost everything that works or that doesn't

12:34.200 --> 12:39.340
work and what JetBrains is planning to work on.

12:39.340 --> 12:44.880
So there is the ticket for frontend IR support for KAPT.

12:44.880 --> 12:46.680
It's still in progress.

12:46.680 --> 12:51.720
It should be done in 1.9 or at least it's a current version now.

12:51.720 --> 12:55.640
I try to understand what doesn't work like right now.

12:55.640 --> 13:00.640
And it got me to quite interesting things.

13:00.640 --> 13:06.880
That KAPT currently doesn't support language version 2.0.

13:06.880 --> 13:09.640
This used language version 1.9 or below.

13:09.640 --> 13:12.600
It's just a source code that I saw yesterday.

13:12.600 --> 13:20.840
And I tried to get deeper and saw that there is a Kotlin version introduced that has symbols

13:20.840 --> 13:22.440
both 2 and 0.

13:22.440 --> 13:29.840
I probably don't want to make any judgment here what the version would be, but there

13:29.840 --> 13:38.360
is something suggested that we are going to have some major changes in the future.

13:38.360 --> 13:43.920
Kotlin symbol processing is another thing that doesn't work currently, but it's expected

13:43.920 --> 13:46.800
to get around 1.9.

13:46.800 --> 13:55.280
There is some work going on in the domain in the Google repository for KSP, but still

13:55.280 --> 13:58.840
nothing there done.

13:58.840 --> 14:03.280
And the testing info doesn't work at all currently.

14:03.280 --> 14:10.600
So one of the major libraries for the compile testing doesn't support K2.

14:10.600 --> 14:13.680
I don't know when the support will come there.

14:13.680 --> 14:19.280
There's a pull request getting this support at least partially, but who knows.

14:19.280 --> 14:23.640
Probably will take another six to eight months.

14:23.640 --> 14:30.720
And finally, the IDE support for K2.

14:30.720 --> 14:39.960
So as far as I understand, the plan is to create the K2-based IDE plugin that will probably

14:39.960 --> 14:48.520
start from a quite lightweight one that will support only a few things.

14:48.520 --> 14:57.960
It should have the performance that started it to be everything worked fast and correct,

14:57.960 --> 15:01.080
and likely stable.

15:01.080 --> 15:09.640
The IDE plugin will have a lower number of features, will be lightweight, and will be

15:09.640 --> 15:15.960
released likely after the better or stable of the compiler.

15:15.960 --> 15:24.480
So it's not earlier than 1.9, probably even later.

15:24.480 --> 15:31.480
So as stated currently, it should have all the quote highlighting.

15:31.480 --> 15:38.520
It should have basic code completion, like nothing fancy, probably just the stuff you

15:38.520 --> 15:44.680
use on a regular basis, but not for major refactorings or anything else.

15:44.680 --> 15:51.640
In debugger, there should be breakpoints and some simple stuff, really simple stuff, as

15:51.640 --> 15:53.040
it's declared.

15:53.040 --> 15:58.520
And there should be a limited number of diagnostics.

15:58.520 --> 16:07.080
The last but not the least thing, as you might notice, another big part is the Kotlin multiplatform

16:07.080 --> 16:08.080
support.

16:08.080 --> 16:17.960
This new lightweight plugin is aiming to have the full featured Kotlin multiplatform support

16:17.960 --> 16:19.600
as well.

16:19.600 --> 16:23.120
And yeah.

16:23.120 --> 16:24.120
That's my third.

16:24.120 --> 16:26.000
All right.

16:26.000 --> 16:36.880
So now after some K2 magic, let's try to check what went through this year of Kotlin Multiplatform

16:36.880 --> 16:41.040
and what will come in the future.

16:41.040 --> 16:46.720
So let's start our journey from Kotlin 1.6.20.

16:46.720 --> 16:53.240
And the first magic things, beautiful things that we saw was the hierarchical project structure

16:53.240 --> 16:55.200
become in default.

16:55.200 --> 17:02.120
And this thing was such a blast because you got finally don't need any more to do some

17:02.120 --> 17:10.880
weird magic stuff like symbolic links and things to have to cover multiple architecture

17:10.880 --> 17:19.360
like iOS version and Intel version and X64 version.

17:19.360 --> 17:26.920
So you get automatically shared stuff and you can just use an intermediate target for

17:26.920 --> 17:31.520
the thing, which was really a good thing to start with.

17:31.520 --> 17:39.840
But wasn't the only thing in 6.20 because we got some improvements on Kotlin native

17:39.840 --> 17:44.120
and we got all the improvement that as an engineer you can dream of.

17:44.120 --> 17:48.480
So runtime, compile time and code size.

17:48.480 --> 17:57.320
So it was an interesting update that brought many, many improvements on the developer experience,

17:57.320 --> 18:00.480
which was really nice.

18:00.480 --> 18:09.240
But the very big thing came later in 1.7.20, which was finally the new memory manager for

18:09.240 --> 18:10.680
Kotlin native.

18:10.680 --> 18:13.560
And with that version it's now enabled by default.

18:13.560 --> 18:22.080
And basically it's again a huge win in terms of developer experience because a lot of change

18:22.080 --> 18:25.760
changed and we got better stuff.

18:25.760 --> 18:35.440
Just because the memory manager changed from reference counting garbage collection to tracing

18:35.440 --> 18:43.200
garbage collection because in the past it was just made it quick and dirty.

18:43.200 --> 18:45.640
Let's put it in the way to just get out.

18:45.640 --> 18:51.200
But now that things are getting bigger and people are using it, they realize that some

18:51.200 --> 18:55.440
stuff was not the best choice afterwards.

18:55.440 --> 19:03.280
So what this means in reality is that there are no more restrictions on sharing objects

19:03.280 --> 19:05.880
between threads.

19:05.880 --> 19:14.200
There is more leak free primitives, which means no leaks on the internals but maybe

19:14.200 --> 19:21.200
leaks on stuff that you wrote because we can introduce bad things but at least the tooling

19:21.200 --> 19:25.400
is not sneaking leaks.

19:25.400 --> 19:29.400
What does it mean at the end of the day for developers?

19:29.400 --> 19:33.280
It means that no more freezing.

19:33.280 --> 19:37.960
Finally we get all the beautiful sun because we don't need to freeze objects anymore.

19:37.960 --> 19:41.440
We are really free to use everything.

19:41.440 --> 19:51.840
And yeah, you just don't have to think anymore to freeze stuff and to understand that it's

19:51.840 --> 19:54.360
not crashing, that there's no mutability and stuff.

19:54.360 --> 19:59.240
So all magic now.

19:59.240 --> 20:08.880
And this thing enables a bigger thing, which is finally Kotlin Music Platform mobile, the

20:08.880 --> 20:16.000
mobile part, to reach the beta version, which is a huge milestone.

20:16.000 --> 20:26.560
And this means that the technology is basically done and it is safe to use your project.

20:26.560 --> 20:36.440
The fact that in beta means that there's still some work to do mostly on the toolchain, but

20:36.440 --> 20:40.960
in general thinking you can use this safely.

20:40.960 --> 20:45.240
Maybe there will be some cut corners on setting up the toolchain and stuff like that, but

20:45.240 --> 20:54.920
don't worry, you can start using a learning, your project, and do it because it's fun.

20:54.920 --> 20:58.240
So yeah, do it.

20:58.240 --> 21:00.200
All right.

21:00.200 --> 21:06.760
Now let's move to more close to today.

21:06.760 --> 21:15.200
And with the release of Kotlin 1.8, we got a lot more interesting stuff in the field

21:15.200 --> 21:23.640
of Objective-C and with interoperability, which is something that people always ask because

21:23.640 --> 21:27.120
it could be better sometimes.

21:27.120 --> 21:36.960
So with this release, we got some nice annotations, like Objective-C name, that let us specify

21:36.960 --> 21:47.520
a more beautiful naming for some function that we want to expose to Swift so we can

21:47.520 --> 21:54.640
just change the name without changing the Kotlin object itself.

21:54.640 --> 22:04.000
Another one is hidden from Objective-C, which as the name suggests, we can hide some function

22:04.000 --> 22:14.360
from Objective-C because maybe we want to have an application function that works better

22:14.360 --> 22:21.640
or has a better representation for the Swift word, and we want to just hide the Kotlin

22:21.640 --> 22:31.200
one so we can save precious binary size and have a specific function only for the iOS

22:31.200 --> 22:32.200
part.

22:32.200 --> 22:40.040
And finally, another interesting thing is the should refine in Swift annotation, which

22:40.040 --> 22:49.000
basically is the compiler to mark a function or a property as Swift private.

22:49.000 --> 22:54.640
So basically it's going to be exported on Objective-C with a double underscore.

22:54.640 --> 23:01.920
And so with a double underscore, this function will be invisible because auto-seguestion

23:01.920 --> 23:05.520
doesn't auto-seguest.

23:05.520 --> 23:12.400
On iOS, sometimes stuff are invisible because auto-seguestion doesn't work properly in Xcode,

23:12.400 --> 23:16.800
but that's another thing.

23:16.800 --> 23:25.360
But in this way, it will be possible to hide some function and then rewrite it on Swift

23:25.360 --> 23:33.360
to have a better, a better, um, idea-matics with way of doing things.

23:33.360 --> 23:35.120
All right.

23:35.120 --> 23:41.280
Another experimental thing that we got on Kotlin 1.8 is something that I was dreaming

23:41.280 --> 23:50.360
of because every time I saw I see Android test and Android Android test, my ads explode

23:50.360 --> 23:59.960
because I don't, every time I think that it's a typo or something, but it's not a typo.

23:59.960 --> 24:09.140
But right now, this will change, and there will be a more descriptive things, like instead

24:09.140 --> 24:14.720
of Android test, Android unit test, and instead of Android Android test, Android instrumented

24:14.720 --> 24:15.720
test.

24:15.720 --> 24:25.040
It's going to be more clear, and you've got to understand really what's this thing.

24:25.040 --> 24:29.520
Connected to that, there will be more clarity also to where to put the manifest.

24:29.520 --> 24:39.320
So not in the Android main, but you're going to have a specific folder for the bug and

24:39.320 --> 24:47.560
the release version, so it's going to be more clear, and you've got to understand better.

24:47.560 --> 24:49.800
This thing is still experimental.

24:49.800 --> 24:57.080
Of course, it's going to be enabled by default sometimes in the future, but if you want to

24:57.080 --> 25:04.200
use it, you have to opt in with a gradle option.

25:04.200 --> 25:17.480
Another thing that was in Kotlin 1.8 was the stabilization of the Kotlin JS backend, and

25:17.480 --> 25:24.920
so finally right now, all the three different technologies, so Kotlin for the JVM, Kotlin

25:24.920 --> 25:33.920
native, are using the same backend, which means better handling, less bug, and everything

25:33.920 --> 25:41.760
is works better.

25:41.760 --> 25:53.520
Another interesting goodie that is not specific to a specific version is that since version

25:53.520 --> 26:03.160
1.4 to 1.8, they were experimentally checking binary back to compatibility, which is always

26:03.160 --> 26:13.360
a nice thing, and from now on, there are processes set up on JVM's side to keep binary compatibility

26:13.360 --> 26:23.040
from every release, which is going to alleviate the pain of having stuff broken.

26:23.040 --> 26:34.240
All right, another very interesting thing about Kotlin and the multi-platform world

26:34.240 --> 26:40.640
is the fact that JetBrains is maintaining also a composed version for desktop and the

26:40.640 --> 26:55.640
web, which is a fork from the Android one from Google, and the support is going on,

26:55.640 --> 27:02.240
but it's really neat, it's really beautiful, because you can just use something nicer to

27:02.240 --> 27:11.640
write desktop application and still not have to deal with Java, whatever stuff, so it's

27:11.640 --> 27:15.520
really nice that we have some sort of things.

27:15.520 --> 27:21.760
Of course, it takes time to keep it up with Google releases, because they have to catch

27:21.760 --> 27:32.600
it up, but, for example, a couple of days ago, we got the 1.3.0 release, and, yeah,

27:32.600 --> 27:38.840
so stuff is going forward also on this side.

27:38.840 --> 27:47.280
Last year, we got also some interesting experimental stuff, which is composed for iOS.

27:47.280 --> 27:52.600
Yes, it seems to have, seems happening.

27:52.600 --> 28:01.000
It's still some very experimental and technical preview, so absolutely not ready for production,

28:01.000 --> 28:04.440
but people in the community are playing with that.

28:04.440 --> 28:12.240
For example, folks at Touchlab, they built the draw.con version of the draw.con app for

28:12.240 --> 28:21.720
the iOS version of the draw.con app, which is something amazing, and, yeah, this is something,

28:21.720 --> 28:28.600
as I said, not ready, but it's something to keep an eye on, because it's going to be wild

28:28.600 --> 28:31.760
and interesting.

28:31.760 --> 28:35.760
What is going to come this year?

28:35.760 --> 28:44.360
There will be more improvements on the memory manager, even though it's still already stable,

28:44.360 --> 28:50.720
and it's the default memory manager.

28:50.720 --> 29:00.400
Folks at Jetman will keep increasing and fixing bug and increasing performance on that.

29:00.400 --> 29:06.720
Of course, there will be more improvement on compilation time on Kotlinative, because

29:06.720 --> 29:16.640
it's still sometimes not the fastest thing in the world, and so it has to be improved.

29:16.640 --> 29:22.240
Another point, which is, like I was mentioning before, it's always asked from people, it's

29:22.240 --> 29:30.840
better exporting to Objective-C, so it has better APIs to interact with from the iOS

29:30.840 --> 29:31.840
part.

29:31.840 --> 29:43.120
Also, another thing will be, after confirming that there are tools in place to have backward

29:43.120 --> 29:51.560
binary compatibility for the Kotlin native version, they will describe and add more improvements,

29:51.560 --> 29:58.040
and documentation for library developers to maintain binary compatibility as well.

29:58.040 --> 30:03.640
All of that is going to...

30:03.640 --> 30:11.040
These improvements are connected to having, finally, Kotlin-motive-platform mobile to stable,

30:11.040 --> 30:16.800
which hopefully is going to happen this year, and in order to do that, there are a bunch

30:16.800 --> 30:20.560
of things that need to be addressed.

30:20.560 --> 30:29.360
Like I said before, it's mostly toolchain and infrastructure stuff, but the main thing

30:29.360 --> 30:37.720
is working, and you can start already using it, because it's in beta, and stuff are kind

30:37.720 --> 30:40.080
of working right now.

30:40.080 --> 30:51.320
With that was it, the introduction of the journey into Kotlin from the past year and

30:51.320 --> 30:54.440
for this year.

30:54.440 --> 30:55.920
Thank you very much.

30:55.920 --> 31:02.240
There will be a lot of content today, so feel free to catch it up with all of that, and

31:02.240 --> 31:03.240
have fun.

31:03.240 --> 31:11.840
Thank you very much.

31:11.840 --> 31:17.440
We do have four minutes for questions, so if you have any, raise your hand, I will bring

31:17.440 --> 31:28.760
you the microphone.

31:28.760 --> 31:35.560
Is it okay if I ask three consecutive questions, two of which are related?

31:35.560 --> 31:45.800
First of all, in terms of Kotlin JS and Kotlin native, those are not intended to be a performant

31:45.800 --> 31:48.240
alternative for existing solutions.

31:48.240 --> 31:52.600
Like Kotlin JS wasn't meant to be a challenge to TypeScript, what I heard somewhere, and

31:52.600 --> 32:00.120
Kotlin native wasn't intended to rival things like Rust or Go, etc.

32:00.120 --> 32:04.560
Is there a change in that ambition?

32:04.560 --> 32:06.400
That's my first question.

32:06.400 --> 32:12.920
My second question is, does JetBrains have any plans to use Compose to port their IDEs

32:12.920 --> 32:18.200
to Compose from AWT?

32:18.200 --> 32:41.720
Okay, for the first one, I'm not sure if I heard or read some changes or stuff.

32:41.720 --> 32:56.720
There's just another thing in the ecosystem, probably it's not going to be a place.

32:56.720 --> 33:01.480
I'm not sure what you catch or what not, so I'm going to start.

33:01.480 --> 33:08.440
I haven't read stuff, or here's stuff that changed what you were saying.

33:08.440 --> 33:15.000
Probably there's going to be other tooling to the...

33:15.000 --> 33:22.160
It's another technology to support and not to replace.

33:22.160 --> 33:31.640
So it's going to be another thing to cover in other use cases, not to completely replace.

33:31.640 --> 33:40.160
I don't have more clear guidance or evidence or opinions about that.

33:40.160 --> 33:42.200
The second one was about...

33:42.200 --> 33:44.600
There was no easy, I didn't get it fully.

33:44.600 --> 33:53.760
It's like eating your own doctor, or JetBrains, you should compose to fill their IDEs.

33:53.760 --> 34:00.400
I'm not JetBrains, so I don't know, but probably yes if I have to bet it.

34:00.400 --> 34:10.440
I know that they have their own runtime for UI and stuff like that, but probably yes,

34:10.440 --> 34:31.480
they are going to use it, but I'm not JetBrains, so I don't know.

1
0:00:00.000 --> 0:00:12.720
Hi, everyone. Hi, Fosdem. How are you doing? I hope that you're doing great. Yeah! Let's

2
0:00:12.720 --> 0:00:19.640
go. So I'm really honored to present my talk about how I ported Doom to the browser with

3
0:00:19.640 --> 0:00:26.480
Blazor Wasm. So it's a topic about another language, which is, we will see. So a quick

4
0:00:26.480 --> 0:00:33.880
word about myself. So I'm Ehsin Benabas. I'm a dev rel at Wordline. I'm a teacher also.

5
0:00:33.880 --> 0:00:40.180
And during my spare time, I love to play video games. So that's one of the things that made

6
0:00:40.180 --> 0:00:47.720
me make this port. But before going further, let me explain what is a port. So game porting

7
0:00:47.720 --> 0:00:53.760
consists of making a game run in another platform other than the original one. There are many

8
0:00:53.760 --> 0:00:58.320
ports that are released nowadays. Some are good, some are bad, depending on how they

9
0:00:58.320 --> 0:01:07.040
are developed. And it consists of adapting the source code of the original game into

10
0:01:07.040 --> 0:01:13.640
the new platform. So adapting means that maybe we need to change some bits of the code.

11
0:01:13.640 --> 0:01:19.240
Maybe sometimes it can be a whole rewrite, depending on the differences between the platforms

12
0:01:19.240 --> 0:01:25.080
and how the game has been developed. And using a virtual machine or an emulator is not really

13
0:01:25.080 --> 0:01:31.320
considered as porting. You really need to have access to the source code and adapt it

14
0:01:31.320 --> 0:01:39.080
to the new target platform. So in the beginning, I wasn't really confident with making a port.

15
0:01:39.080 --> 0:01:46.160
I considered it as a complex task, difficult. I didn't have a clear vision on what it is.

16
0:01:46.160 --> 0:01:52.560
And what really gave me the first inspiration to consider porting games is modern vintage

17
0:01:52.560 --> 0:02:00.200
gamer. Who knows about MVG? Yes. So he's a game developer, YouTuber, who makes great

18
0:02:00.200 --> 0:02:06.520
videos. And just didn't expect it, but he made a video where he showed how to port Heart

19
0:02:06.520 --> 0:02:13.320
of Darkness, one of the greatest games of retro gaming. And he showed how he ported

20
0:02:13.320 --> 0:02:20.680
it to the original Xbox. So he made a video where he showed changing includes. So watching

21
0:02:20.680 --> 0:02:27.680
this video really made me more confident in considering porting in one of my activities.

22
0:02:27.680 --> 0:02:33.600
But that's not the only thing that gave me the idea of porting a game. The other thing

23
0:02:33.600 --> 0:02:42.680
is I like to play with.NET framework. I really like this framework because it has many good

24
0:02:42.680 --> 0:02:49.160
things. Some of them is that it's an open source, cross platform, general purpose framework.

25
0:02:49.160 --> 0:02:59.040
So it runs on Linux, Windows, Mac, Android, iOS, a lot of platforms. And even other platforms

26
0:02:59.040 --> 0:03:04.160
that I'll talk about now. And the main language of this framework is C sharp. So C sharp is

27
0:03:04.160 --> 0:03:09.960
really, really good language that keeps evolving over the years. It has some features that

28
0:03:09.960 --> 0:03:15.960
you can find in modern languages, null safety, extension functions, and this kind of stuff.

29
0:03:15.960 --> 0:03:23.000
So it really keeps evolving great language. However, in the beginning of the framework,

30
0:03:23.000 --> 0:03:32.960
the browser was not target. But in 2020, with the release of.NET 5,.NET introduced the

31
0:03:32.960 --> 0:03:41.240
support the Blazor was framework. So it's a component based framework like Angular,

32
0:03:41.240 --> 0:03:48.600
React and Jue with components. But the code of the component is in C sharp. And it runs

33
0:03:48.600 --> 0:03:54.080
locally natively on the browser thanks to a WebAssembly stack, as you can see here.

34
0:03:54.080 --> 0:04:04.760
So Blazor has WebAssembly implementation which allows the developer to access Razor components

35
0:04:04.760 --> 0:04:11.680
and also access the.NET framework and also communicate with the DOM. So this is an example

36
0:04:11.680 --> 0:04:17.280
of a Razor component. It's similar to what you see in Angular or Vue. The difference

37
0:04:17.280 --> 0:04:26.440
is the code below is in C sharp. In addition to that, you can have also CSS, of course,

38
0:04:26.440 --> 0:04:35.600
and you can even call JavaScript and it interoperates with C sharp. So when I saw this C sharp JS

39
0:04:35.600 --> 0:04:43.360
which interoperates, I was like this. I was amazed. I was really happy to see this. And

40
0:04:43.360 --> 0:04:51.920
I told myself it's time to make this port. So now I need to find a game to port. There

41
0:04:51.920 --> 0:04:58.360
are many games with source code available. And the game that I chose, no spoiler here,

42
0:04:58.360 --> 0:05:03.400
it's Doom. So I will tell you next why I chose Doom. But one of the reasons is that it's

43
0:05:03.400 --> 0:05:12.680
one of the most successful first person shooters. And not footers, shooters, sorry.

44
0:05:12.680 --> 0:05:21.000
And also technically speaking, it's well developed, in my opinion, because the logic of the game

45
0:05:21.000 --> 0:05:27.160
is separate from the resources. So you have the famous WAD files of Doom. So it contains

46
0:05:27.160 --> 0:05:33.240
the assets of the game. And you have really what updates the game state, the position

47
0:05:33.240 --> 0:05:40.280
of the character, or the game logic in a separate project. So that allows to have Doom being

48
0:05:40.280 --> 0:05:46.560
portable by design. And in terms of ports, Doom has a lot of them. In video game consoles,

49
0:05:46.560 --> 0:05:51.720
of course. And even anything that has a screen and some processing, as you can see here.

50
0:05:51.720 --> 0:05:58.320
And there are even more. So comes the reason why I chose Doom, because I found that there

51
0:05:58.320 --> 0:06:05.800
is a.NET port already existing of Doom. Of Linux Doom, which is the source code released

52
0:06:05.800 --> 0:06:13.360
by its software. And in GitHub, there is a repository which has developed a port of Doom

53
0:06:13.360 --> 0:06:20.440
in.NET. However, this port uses libraries that communicate with hardware, like graphics,

54
0:06:20.440 --> 0:06:27.440
audio input, which are not compatible with the browser. So that's why my work was to

55
0:06:27.440 --> 0:06:35.040
take this port of Doom and make it work on the browser. So just to be clear, I used the

56
0:06:35.040 --> 0:06:41.560
V1 of managed Doom, because currently they are developing a V2, which uses another library,

57
0:06:41.560 --> 0:06:47.760
but just to be clear on my work. So to summarize, its software released the source code of Doom

58
0:06:47.760 --> 0:06:55.080
for Linux. Since you developed managed Doom, which targets any platform that is targeted

59
0:06:55.080 --> 0:07:04.200
by SFML, desktops mostly. And this is what I intervene to base my work on this port and

60
0:07:04.200 --> 0:07:12.760
make it work on the browser. So before starting work, my porting, I made a strategy which

61
0:07:12.760 --> 0:07:21.040
is this one. So this is an AI image, by the way. I taped Doom monster typing on keyboard

62
0:07:21.040 --> 0:07:27.760
and I got this. So my porting strategy was to get something that works like proof of

63
0:07:27.760 --> 0:07:34.160
concept that works quickly and to demonstrate quickly. So the first step is to take the

64
0:07:34.160 --> 0:07:40.560
source code and compile it with the Blazor framework, as simple as it is. And as soon

65
0:07:40.560 --> 0:07:46.200
as I see a compilation error, I delete the code and I add a to do. So another presentation

66
0:07:46.200 --> 0:07:55.560
with to dos. That's fine. So after that, once the code compiles, I replace little by little

67
0:07:55.560 --> 0:08:01.240
bits of code that are not implemented or the methods or functions that are not implemented

68
0:08:01.240 --> 0:08:06.360
by giving priority to frame rendering. Because it's always nice to see something on the screen

69
0:08:06.360 --> 0:08:15.520
rather than working blindly. And in terms of optimisation, I always left that to later,

70
0:08:15.520 --> 0:08:22.920
unless it's really necessary. And in terms of reading documentation, so it's really well

71
0:08:22.920 --> 0:08:28.160
documented how Doom is implemented, but I only read the parts which are really relevant

72
0:08:28.160 --> 0:08:37.560
and important. Specifically how the Doom image is drawn on the screen when the frame data

73
0:08:37.560 --> 0:08:46.280
is generated by the engine. And with this kind of porting strategy, like two or three

74
0:08:46.280 --> 0:08:52.120
weeks of part time or set project work, I was able to achieve something, a port that

75
0:08:52.120 --> 0:08:58.880
can be run, executed, even if it's not perfect yet, but we'll see in the demo later how it

76
0:08:58.880 --> 0:09:10.160
works. Now let's enter into more details on how I ported more concretely this into the

77
0:09:10.160 --> 0:09:18.160
browser. So first of all, before giving further explanations, let me show you how game is

78
0:09:18.160 --> 0:09:24.600
developed most of the time. So it's a big, big picture of the game algorithm. First of

79
0:09:24.600 --> 0:09:30.680
all, we have a while loop, which is an infinite loop, but it doesn't iterate as soon as possible.

80
0:09:30.680 --> 0:09:36.720
It iterates only when the frame pacing is relevant. For example, if you have 30 FPS

81
0:09:36.720 --> 0:09:43.800
game, this next iteration will wait a little bit if the first, the previous frame was computed

82
0:09:43.800 --> 0:09:51.960
very quickly. So it allows to have frame pacing, which is correct and nice to the eye for the

83
0:09:51.960 --> 0:09:59.080
user. So once the frame is ready, we get the user input compared to his previous frame,

84
0:09:59.080 --> 0:10:08.000
really simple. And after that, we run a frame or we compute the next frame of the game.

85
0:10:08.000 --> 0:10:14.440
So we run the update game state. It's just an example name of the method. It takes the

86
0:10:14.440 --> 0:10:21.840
input of the user, the what file for the doom in this case, and then it advances the game

87
0:10:21.840 --> 0:10:26.920
one frame. So it updates the player position, the monster position, the ammo, the status,

88
0:10:26.920 --> 0:10:32.160
his life, all this kind of stuff. And it also generates to be rendered a frame and some

89
0:10:32.160 --> 0:10:39.760
audio. And this is run. So for each frame, this algorithm is run and it updates the game

90
0:10:39.760 --> 0:10:47.320
each frame. And once we get a frame and some audio, we play them and render them to the

91
0:10:47.320 --> 0:10:54.720
user. So when you see this, you can start guessing which parts. So in the managed doom,

92
0:10:54.720 --> 0:10:59.440
this all is done in C sharp. That's clear. And you can start to see which parts need

93
0:10:59.440 --> 0:11:05.840
to be adapted for the browser, which are not available in C sharp, but need to go to the

94
0:11:05.840 --> 0:11:12.480
JavaScript realm to be able to achieve it. But to show you what what I ported more precisely,

95
0:11:12.480 --> 0:11:19.120
let me show this to the code in another way. So here, so we have the while loop and the

96
0:11:19.120 --> 0:11:26.280
frame pacing step here. Next, the key, the user input is sent to the update game state

97
0:11:26.280 --> 0:11:33.520
with the what file as argument. And then we generate some audio and the frame to be rendered.

98
0:11:33.520 --> 0:11:40.680
And it loops. So this is what needs to be ported. What you see in red. So what you see

99
0:11:40.680 --> 0:11:48.200
on the top is frame pacing. It's not really blazer relevant, but browser relevant. For

100
0:11:48.200 --> 0:11:54.080
game for a frame pacing, there is a better way to base frame in JavaScript, base frames

101
0:11:54.080 --> 0:12:03.240
in JavaScript. And to render, since it's not available in blazer, so this needs to be replaced.

102
0:12:03.240 --> 0:12:09.920
Also the game states, which is also so everything in C sharp, if they can stay state, even though

103
0:12:09.920 --> 0:12:16.280
it's a platform agnostic, it's not 100% the case. So there needs to be some bits that

104
0:12:16.280 --> 0:12:23.200
needed to be adapted to the to the browser. But hopefully, 70% of the code approximately

105
0:12:23.200 --> 0:12:29.520
was a cross platform and runs on the browser without any problem. So after some work, some

106
0:12:29.520 --> 0:12:37.920
coding, some fun, some fails and learning, I achieved this result. So I replaced the

107
0:12:37.920 --> 0:12:45.080
while loop with request animation frame. Anyone knows about request animation frame here?

108
0:12:45.080 --> 0:12:53.600
Yes. So yeah, request animation frame is how you tell the browser, so I want to render

109
0:12:53.600 --> 0:12:58.040
frames in an optimized manner for the browser. For example, when you switch a tab, don't

110
0:12:58.040 --> 0:13:03.040
do anything to optimize energy. So you ask the browser, request a new frame. When you

111
0:13:03.040 --> 0:13:09.120
see it's relevant to compute a new frame for my game, call me back. So it's a callback.

112
0:13:09.120 --> 0:13:18.280
And for each frame, we call it back. After that, so once this has been changed, change

113
0:13:18.280 --> 0:13:24.440
also the rendering. So for the audio, it's the audio context library. And for rendering,

114
0:13:24.440 --> 0:13:33.880
it's the canvas, of course. So audio context is the audio API of the browser. But there

115
0:13:33.880 --> 0:13:40.480
is one thing that I didn't mention yet that you see here is that in this state, since

116
0:13:40.480 --> 0:13:46.440
I was, like I said earlier, Blazor is a component-based framework. It's like Angular view react. You

117
0:13:46.440 --> 0:13:51.960
need to have some kind of main component, which is the entry point of your program or

118
0:13:51.960 --> 0:13:59.560
of your component. So here it's missing. So that's why I added or I had to have a Blazor

119
0:13:59.560 --> 0:14:05.880
component which only serves as the entry point to invoke the JavaScript, which then goes

120
0:14:05.880 --> 0:14:17.320
back to C sharp. So this is C sharp. So when I say C sharp.net, I say them interchangeably.

121
0:14:17.320 --> 0:14:21.400
So this is JavaScript. We go back to C sharp. We go back to JavaScript. So there is a lot

122
0:14:21.400 --> 0:14:29.640
of context switching or language switching. And this is achieved thanks to this API. So

123
0:14:29.640 --> 0:14:35.520
Blazor provides an API that allows to go back and forth from a language to the other. So

124
0:14:35.520 --> 0:14:42.720
this is Blazor way of doing things before.NET 7. Starting.NET 7, there is even better

125
0:14:42.720 --> 0:14:46.680
way to do this. I'll show it at the end of the presentation.

126
0:14:46.680 --> 0:14:54.040
Okay. So now we have something that runs. So I will show you, quickly show you for the

127
0:14:54.040 --> 0:15:01.200
audio parts, some code, and then I will continue the last or maybe just the entry point and

128
0:15:01.200 --> 0:15:09.120
then continue the presentation. So this is the main component, as you can see here, which

129
0:15:09.120 --> 0:15:14.240
in the code, so we have the canvas here. And here we have, we initialize the Doom object

130
0:15:14.240 --> 0:15:20.600
or the game object. And then here we invoke the JavaScript method that calls request animation

131
0:15:20.600 --> 0:15:30.320
frame. So we invoke the JavaScript method here. We here handle the frame pacing. Okay.

132
0:15:30.320 --> 0:15:35.920
Here we handle the frame pacing. And then we call back.NET to run an iteration of the

133
0:15:35.920 --> 0:15:41.080
game, the Doom engine, to run, compute the frame. And then we call request animation

134
0:15:41.080 --> 0:15:46.840
frame to prepare for the next frame. Which calls back this method. So this is like an

135
0:15:46.840 --> 0:15:54.120
infinite loop. And this method that you see here, which invokes.NET code, just invokes

136
0:15:54.120 --> 0:15:58.920
the game object and the request set to render a new, to compute a new frame with the user

137
0:15:58.920 --> 0:16:07.200
input. So this, I will just skip it. So this is how audio and video are rendered. So it's

138
0:16:07.200 --> 0:16:21.800
communication between C sharp and JavaScript. And I continue. So what I learned from this.

139
0:16:21.800 --> 0:16:30.400
In Blazor, avoid copying arrays, big arrays. In the beginning, in the dot manage Doom source

140
0:16:30.400 --> 0:16:38.000
code, the final image is generated by copying, converting a one dimensional array into a

141
0:16:38.000 --> 0:16:42.960
2D array. So this slowed down the game a lot. A lot, a lot. So I removed this part from

142
0:16:42.960 --> 0:16:49.480
the manage Doom source code and I sent it to JavaScript. That's what you, what I was

143
0:16:49.480 --> 0:16:55.360
shown in the previous slide about frame rendering. And I don't have to cover it. But yeah, avoid

144
0:16:55.360 --> 0:17:02.360
copying big arrays in.NET. This is in.NET 5. Maybe in.NET 7 it has been improved. Avoid

145
0:17:02.360 --> 0:17:09.240
extensive logging. And calling JavaScript from Blazor communication can be very fast

146
0:17:09.240 --> 0:17:15.360
if you use the correct API. As I said, however, this, the API that I used is undocumented

147
0:17:15.360 --> 0:17:20.560
and I confirm it because I found no documentation, just some source code or some obscure GitHub

148
0:17:20.560 --> 0:17:28.960
repositories. But hopefully.NET 7 it's improved. In JavaScript, I learned that request animation

149
0:17:28.960 --> 0:17:35.220
frame is the way to paste frames. And to play audio programmatically, you need to have some

150
0:17:35.220 --> 0:17:49.920
user interaction before or the audio context API doesn't work. So here is the demo. Okay.

151
0:17:49.920 --> 0:18:01.160
So I click to enable the audio, the user interaction. And let's see. Yes, of course. Yes. And here

152
0:18:01.160 --> 0:18:15.720
we go. So just to show you that we have sound. So don't be afraid. It's just a game. And

153
0:18:15.720 --> 0:18:19.680
just to show you that you also have secret passages. I don't know if you know this one.

154
0:18:19.680 --> 0:18:31.360
You have 200 hours. But that's another topic. And it runs correct frames. It's 2012 MacBook

155
0:18:31.360 --> 0:18:40.040
and it runs at 30 FPS. No problem. Okay. So that's two slides. The interrupt in.NET

156
0:18:40.040 --> 0:18:45.800
7. So here is how interrupt works now. You don't need Blazor. It means you don't need

157
0:18:45.800 --> 0:18:50.280
to create component if you want to interact between JavaScript and.NET anymore. And I'm

158
0:18:50.280 --> 0:18:55.320
working currently on this part because it's really exciting to see this kind of work.

159
0:18:55.320 --> 0:19:00.920
So to call JavaScript methods from.NET, you just need to export your JavaScript method

160
0:19:00.920 --> 0:19:10.320
as you do in any JavaScript module. And you call here, you just import the method and

161
0:19:10.320 --> 0:19:16.400
you have access to it. And in the opposite sense, you just export your.NET method and

162
0:19:16.400 --> 0:19:22.120
then you import it in JavaScript using this kind of code. And that's it. So I'm working

163
0:19:22.120 --> 0:19:30.240
on changing how the game is ported to this. And in terms of next step, then, it's to migrate

164
0:19:30.240 --> 0:19:37.600
to JS interrupt, update to manage Doom v2. Maybe I will gain some more performance. After

165
0:19:37.600 --> 0:19:43.120
that, I would like to have some game music and also to be able to play otherwise. Currently,

166
0:19:43.120 --> 0:19:50.360
only the Doom one works. I don't know yet why. And as long term, I really also wish

167
0:19:50.360 --> 0:19:59.920
maybe this can be integrated to the official manager Doom project. So as a conclusion,

168
0:19:59.920 --> 0:20:08.760
Wasm makes existing code compatible with browser. It means that, I mean, Wasm is not just the

169
0:20:08.760 --> 0:20:14.960
very fast JavaScript alternative. It also opens the way to make many, many languages,

170
0:20:14.960 --> 0:20:18.840
many, many technologies run on the browser. So that's really what I like. What's really

171
0:20:18.840 --> 0:20:24.600
exciting for me, at least about Wasm, and porting games is fun. Developing is fun. Do

172
0:20:24.600 --> 0:20:38.800
you agree? Yes. Thank you very much. Thank you. So we have time for a couple of questions.

173
0:20:38.800 --> 0:20:51.320
Who wants to ask the first question? Hi. First, thanks a lot. It was really, really

174
0:20:51.320 --> 0:20:56.960
insightful. Thank you. I have a question about request animation frame. I think I saw, so

175
0:20:56.960 --> 0:21:02.200
because request animation frame runs at 60 FPS, right? And then I saw you do something

176
0:21:02.200 --> 0:21:12.240
with timestamps to try to do 30. Yes. Does it ever drop or become inaccurate? Or is that

177
0:21:12.240 --> 0:21:21.720
the right way to achieve 30 FPS? Let me just go back to the, yeah, I guess it's maybe,

178
0:21:21.720 --> 0:21:28.200
I'm not JavaScript specialist on this. Me neither. I'm curious. It's here, I guess.

179
0:21:28.200 --> 0:21:34.840
Yes. It's here. For me, it worked. Yes. I didn't have eyes here. That's what I found

180
0:21:34.840 --> 0:21:39.640
on the internet. I tried it. And everything in the demo doesn't drop. When it drops, it's

181
0:21:39.640 --> 0:21:46.200
really when there is a lot of things happening, when there is a lot of audio, it's still not

182
0:21:46.200 --> 0:21:54.280
optimized a lot, the audio part. But this frame pacing, for me, it works. So you compute

183
0:21:54.280 --> 0:22:00.040
the duration between the last request frame and the new request frame. So for me, it's

184
0:22:00.040 --> 0:22:09.440
okay. Excellent. Thank you very much. You're welcome. Next question. Yeah. The next speaker,

185
0:22:09.440 --> 0:22:17.400
who is speaking after? Nobody? Nobody is speaking after. I mean, who is taking that seat who

186
0:22:17.400 --> 0:22:24.240
are standing there? Okay. We'll call them. It's a follow up to the previous question.

187
0:22:24.240 --> 0:22:30.160
Have you tried removing this check and see how fast you could run the game? Can you do

188
0:22:30.160 --> 0:22:39.720
1,000 FPS? No, no, it's not 1,000. I actually tried to remove, but don't remember, but not

189
0:22:39.720 --> 0:22:46.760
1,000 FPS. For sure. It's certain. It's not really, really fast. Also, like maybe 240,

190
0:22:46.760 --> 0:22:53.560
50 FPS. It depends also on the machine. It depends on the hardware that you have. On

191
0:22:53.560 --> 0:22:58.640
the processor hardware that I have, I don't have gaming computer. It was like maybe 40,

192
0:22:58.640 --> 0:23:06.120
50 FPS. Okay. Thanks. But yeah, yeah, that's a good question because you see when we talk

193
0:23:06.120 --> 0:23:12.600
about good ports, bad ports. For example, this, I mean, it's a quick to achieve port,

194
0:23:12.600 --> 0:23:17.360
but it's not the most optimized one. So that's when you see game companies making ports.

195
0:23:17.360 --> 0:23:23.480
And also, for example, when I said that the array copy on.NET is slow. So same time,

196
0:23:23.480 --> 0:23:27.320
if you don't have time to optimize, you just leave it as it, and you get a crappy port

197
0:23:27.320 --> 0:23:34.320
with slow frame rate. But I did the effort to at least make this part in JavaScript.

198
0:23:34.320 --> 0:23:44.280
Welcome. So next question. He's going to ask more if you don't. So he's ready. Go for it.

199
0:23:44.280 --> 0:23:51.240
Yeah. Another question is what is the size of the wasn't files or whatever that needs

200
0:23:51.240 --> 0:23:57.600
to be downloaded to play this game? It's big. It's big. Let me show you. I don't know. It's

201
0:23:57.600 --> 0:24:06.440
how to, like this. It's a big file. It's a big file. So let me inspect. When you go to

202
0:24:06.440 --> 0:24:17.720
application here, you see the storage. You have like 21 megabytes. It's a big file. It's

203
0:24:17.720 --> 0:24:22.880
not huge. It's not like Windows when you start on DevCorp. It has a little bit of overhead.

204
0:24:22.880 --> 0:24:28.320
But it's not downloaded each time, you know. Maybe the first time. But yeah, that's a good

205
0:24:28.320 --> 0:24:35.840
question. Yeah, that's a... So we can have one last question. And in the

206
0:24:35.840 --> 0:24:41.960
meantime, all people are still thinking, please don't stay on the edge of the lines because

207
0:24:41.960 --> 0:24:46.400
people are standing in the back. People arrive a couple of minutes later. So if you're at

208
0:24:46.400 --> 0:24:53.960
the edge, if you're here and there is an empty seat, you need to shift just a bit. And you

209
0:24:53.960 --> 0:25:00.160
can also optimize this by making a service worker. I did it, but it doesn't work anymore.

210
0:25:00.160 --> 0:25:07.400
But you can also make... catch this as a service worker. So...

211
0:25:07.400 --> 0:25:12.560
And now if you're here, if you're seeing me looking at you, please shift a little bit.

212
0:25:12.560 --> 0:25:15.760
I don't do this for the pleasure of annoying you. It's because there are people who are

213
0:25:15.760 --> 0:25:19.440
going to enter the room. We're going to have more and more people, hopefully, who are going

214
0:25:19.440 --> 0:25:26.440
to ask written questions. So then please let them sit next to you.

215
0:25:26.440 --> 0:25:30.400
Also there is a trash right there. So when you exit the room and if you see something,

216
0:25:30.400 --> 0:25:38.960
even if it's not yours, please pick it up. There is another trash there.

217
0:25:38.960 --> 0:25:39.960
Thank you. Thank you.

218
0:25:39.960 --> 0:25:40.960
Thank you.

219
0:25:40.960 --> 0:25:47.960
Thank you.


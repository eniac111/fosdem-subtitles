1
0:00:00.000 --> 0:00:25.200
So, hi everyone, welcome back to the next talk.

2
0:00:25.200 --> 0:00:31.120
Today we have on stage Anna Labellarte and Paolo Ratolo from Nextome talking about Kotlin

3
0:00:31.120 --> 0:00:36.120
Multiplatform for Android and iOS library developers, I guess it was.

4
0:00:36.120 --> 0:00:39.480
Now, yeah, gonna talk about it.

5
0:00:39.480 --> 0:00:40.480
Thank you.

6
0:00:40.480 --> 0:00:48.280
Yes, I'm Paolo and it's a very pleasure to be here with you.

7
0:00:48.280 --> 0:00:54.280
We come from Italy, we come from a small company in the southern Italy and we decided to introduce

8
0:00:54.280 --> 0:00:58.920
Kotlin Multiplatform in our code about a year ago.

9
0:00:58.920 --> 0:01:04.120
We did this because for us it was easier to develop and also we wanted to share as much

10
0:01:04.120 --> 0:01:05.120
code as possible.

11
0:01:05.120 --> 0:01:13.440
We make libraries so we didn't have the part of UI to transpose in Multiplatform.

12
0:01:13.440 --> 0:01:17.880
And this is our journey in the Multiplatform world.

13
0:01:17.880 --> 0:01:23.480
Now, we've seen during this conference that with Kotlin Multiplatform mobile we can develop

14
0:01:23.480 --> 0:01:28.920
a library that targets both Android and iOS by just writing a single code based in Kotlin.

15
0:01:28.920 --> 0:01:33.920
Now, if you look at what happens when we distribute the jar inside an Android library, we can

16
0:01:33.920 --> 0:01:36.640
say that the process is pretty straightforward.

17
0:01:36.640 --> 0:01:42.720
Now, for an Android developer the language is the same, the ID that uses is the same

18
0:01:42.720 --> 0:01:45.280
and most of the library that we can use are the same.

19
0:01:45.280 --> 0:01:50.280
So we can't tell the difference between a library that was made with Kotlin Multiplatform

20
0:01:50.280 --> 0:01:54.000
mobile and one made with the native tooling.

21
0:01:54.000 --> 0:01:58.720
Now, things are not quite the same when we talk about the iOS part.

22
0:01:58.720 --> 0:02:03.840
So if we distribute a framework, the process is not so straightforward.

23
0:02:03.840 --> 0:02:08.320
And many of the problem arises because the code is converted for some Objective C and

24
0:02:08.320 --> 0:02:13.880
then most of the time we'll be using side projects that has drift as the main language.

25
0:02:13.880 --> 0:02:19.080
Now for a drift developer point of view, sometimes what can happen is that they can find the

26
0:02:19.080 --> 0:02:22.120
API that we expose is just strange.

27
0:02:22.120 --> 0:02:24.160
And this is just a base case scenario.

28
0:02:24.160 --> 0:02:29.400
Other times the app made a crash and this is due to some differences that there are

29
0:02:29.400 --> 0:02:34.580
between the two platforms that aren't automatically translated for us by the compiler.

30
0:02:34.580 --> 0:02:38.640
So we will see during this talk what we can do to what happens when we distribute the

31
0:02:38.640 --> 0:02:45.160
framework and what we can do to make libraries enjoyable also for the iOS part.

32
0:02:45.160 --> 0:02:47.080
Now let's start with a simple example.

33
0:02:47.080 --> 0:02:49.200
So in this case we talk about coroutines.

34
0:02:49.200 --> 0:02:52.800
So inside our common code we can use coroutine.

35
0:02:52.800 --> 0:02:56.560
So we can have a function like this, which is a suspend function because it performs

36
0:02:56.560 --> 0:03:02.440
some operation with the network and some interaction with a persistent layer.

37
0:03:02.440 --> 0:03:07.280
Now on Android we don't have many issues because if we have a coroutine scope we can launch

38
0:03:07.280 --> 0:03:08.280
the coroutine.

39
0:03:08.280 --> 0:03:13.840
But what happens on iOS when we don't have the coroutine library?

40
0:03:13.840 --> 0:03:17.080
Now this function gets converted by two alternatives.

41
0:03:17.080 --> 0:03:22.080
The first one which uses a completion handler, which is basically a callback that gets called

42
0:03:22.080 --> 0:03:27.800
either when we have a result or when in this case the to-do variable would be populated,

43
0:03:27.800 --> 0:03:29.040
or when we have an error.

44
0:03:29.040 --> 0:03:33.680
So in this case I will have the error variable populated.

45
0:03:33.680 --> 0:03:38.440
Now if we don't want to use the callback because it can become cumbersome when we have different

46
0:03:38.440 --> 0:03:43.600
function one inside the other, we can use the second alternative which uses a sync and

47
0:03:43.600 --> 0:03:47.720
a wait, but we have to target the list I use 13.

48
0:03:47.720 --> 0:03:52.160
Now if we go back on Android we launch the coroutine inside the scope and this means

49
0:03:52.160 --> 0:03:58.160
that if I don't need the job anymore what I can do is just cancel the scope and then

50
0:03:58.160 --> 0:04:00.640
also the job gets cancelled.

51
0:04:00.640 --> 0:04:03.160
By default I don't have this power on iOS.

52
0:04:03.160 --> 0:04:06.560
So what we can do is try to use a library which is called coru.

53
0:04:06.560 --> 0:04:13.400
Yes, we fix that problem with coru that is actually a library inspired by a blog post

54
0:04:13.400 --> 0:04:14.400
of touchlab.

55
0:04:14.400 --> 0:04:18.080
So thanks touchlab for this.

56
0:04:18.080 --> 0:04:19.080
Does it work?

57
0:04:19.080 --> 0:04:23.440
Basically you have to include of course in the common dependency of your code.

58
0:04:23.440 --> 0:04:30.280
And using this library it basically introduces you to a new annotation that is to native

59
0:04:30.280 --> 0:04:31.280
class.

60
0:04:31.280 --> 0:04:37.000
So with that annotation you can specify a name for a class that will be generated just

61
0:04:37.000 --> 0:04:40.080
in the iOS implementation of your code.

62
0:04:40.080 --> 0:04:45.920
So if you have a look at the generated class we can see that it is basically a wrapper

63
0:04:45.920 --> 0:04:48.000
of our original repository.

64
0:04:48.000 --> 0:04:50.600
So you have two parameters that are passed.

65
0:04:50.600 --> 0:04:54.960
We have wrapped this original repository and we have a scope provider.

66
0:04:54.960 --> 0:04:57.920
We'll see what a scope provider is later.

67
0:04:57.920 --> 0:05:02.560
And all the methods of that generated class are the same methods that you have in your

68
0:05:02.560 --> 0:05:03.560
original repository.

69
0:05:03.560 --> 0:05:09.040
But the result type list of to do is wrapped in another object.

70
0:05:09.040 --> 0:05:19.120
So if we try to use this on iOS the code that gets generated is something like that.

71
0:05:19.120 --> 0:05:22.400
We have two callbacks asked actually now.

72
0:05:22.400 --> 0:05:28.200
But I can see for example other two problems with that code.

73
0:05:28.200 --> 0:05:33.440
First of all we are exposing a coroutine scope for iOS developers.

74
0:05:33.440 --> 0:05:38.640
And maybe iOS developers are not familiar with that concept of scope like culturally

75
0:05:38.640 --> 0:05:40.240
in developers are.

76
0:05:40.240 --> 0:05:44.720
And also we have that object that now is an SRA.

77
0:05:44.720 --> 0:05:47.280
And it is not a list of to do anymore.

78
0:05:47.280 --> 0:05:53.960
It is because we are wrapped the list of to do in another object that accepts generics.

79
0:05:53.960 --> 0:06:01.160
And the objective C translation of the Kotlin code cannot do that for now so it gets simplified

80
0:06:01.160 --> 0:06:03.520
to an SRA.

81
0:06:03.520 --> 0:06:10.160
To solve this we go back in the common code and we use another function of that library.

82
0:06:10.160 --> 0:06:17.600
This is a luncheon scope so we can define a scope in common code and tell the library

83
0:06:17.600 --> 0:06:21.760
to run all our coroutines in that scope.

84
0:06:21.760 --> 0:06:26.200
So the scope will not be provided by iOS developers anymore.

85
0:06:26.200 --> 0:06:28.960
Also for the second problem is just a work around.

86
0:06:28.960 --> 0:06:30.240
We can define a data class.

87
0:06:30.240 --> 0:06:38.960
We can define a type or something to hide the fact that we are using a list of something.

88
0:06:38.960 --> 0:06:46.600
So if we try to generate a new code for this, this is the final code that is much more readable

89
0:06:46.600 --> 0:06:47.600
and usable.

90
0:06:47.600 --> 0:06:57.320
And of course now we can dismiss the job if we are not interested in the result anymore.

91
0:06:57.320 --> 0:06:58.320
What about flows?

92
0:06:58.320 --> 0:06:59.320
We'll talk about coroutines.

93
0:06:59.320 --> 0:07:00.320
What about flows?

94
0:07:00.320 --> 0:07:06.680
These are an example of a simple flows that emits integers.

95
0:07:06.680 --> 0:07:09.480
Of course, again, on Android it is simple.

96
0:07:09.480 --> 0:07:10.480
You have a scope.

97
0:07:10.480 --> 0:07:12.280
You can start collecting values.

98
0:07:12.280 --> 0:07:17.160
Also if the code gets generated, it's something like that.

99
0:07:17.160 --> 0:07:22.200
We still have a collect function to collect the values of the flow but we have to pass

100
0:07:22.200 --> 0:07:23.200
this.

101
0:07:23.200 --> 0:07:27.920
This is a flow collector so we have to implement the function emit.

102
0:07:27.920 --> 0:07:33.840
Do something with that value that gets emitted and then when we are done, call the competition

103
0:07:33.840 --> 0:07:37.720
handler so we can receive the next value.

104
0:07:37.720 --> 0:07:42.760
Also notice that we don't have the type that we are collecting from the flow.

105
0:07:42.760 --> 0:07:43.760
We just have any.

106
0:07:43.760 --> 0:07:47.200
How we can improve this?

107
0:07:47.200 --> 0:07:54.880
First of all, we tried to make that collector generic so we can use it in more part of our

108
0:07:54.880 --> 0:07:56.800
code.

109
0:07:56.800 --> 0:07:58.880
So we exposed another callback.

110
0:07:58.880 --> 0:08:11.000
We actually casted the value as the one that we wanted.

111
0:08:11.000 --> 0:08:17.200
We found that this is not good enough.

112
0:08:17.200 --> 0:08:20.400
Also because the iOS developer has to do this in his code.

113
0:08:20.400 --> 0:08:25.080
We are not doing it in common so every time he has to use our library, he has to define

114
0:08:25.080 --> 0:08:26.080
this.

115
0:08:26.080 --> 0:08:29.440
So we decided to fix it in common code.

116
0:08:29.440 --> 0:08:31.960
Again, we used this.

117
0:08:31.960 --> 0:08:33.760
That is a common flow.

118
0:08:33.760 --> 0:08:40.480
There is a class found actually in the Kotlin Conf app.

119
0:08:40.480 --> 0:08:47.120
This class wraps a flow and basically emits all the values of the flow and returns a crossable

120
0:08:47.120 --> 0:08:52.160
object so you can dismiss the flow when you don't want to listen to it anymore.

121
0:08:52.160 --> 0:08:58.760
So again, we return now a common flow using the extension function.

122
0:08:58.760 --> 0:09:09.480
On iOS, again, now we have a much more readable code that we can also cancel if we want.

123
0:09:09.480 --> 0:09:13.480
We mentioned before that sometimes the app may crash because of differences between the

124
0:09:13.480 --> 0:09:14.720
two platforms.

125
0:09:14.720 --> 0:09:20.040
One great example of this is our exception handling our handle in two languages.

126
0:09:20.040 --> 0:09:26.360
Kotlin only works with unchecked exception while Swift only works with the checked one.

127
0:09:26.360 --> 0:09:30.400
Now we will see what this means and what happens.

128
0:09:30.400 --> 0:09:34.040
We are bringing back the function from the coroutine that we saw before.

129
0:09:34.040 --> 0:09:39.200
In this case, because I'm calling item have to mark explicitly each throwing function,

130
0:09:39.200 --> 0:09:43.640
I can wrap it inside a tri-catch so if something happens, I will receive the error inside the

131
0:09:43.640 --> 0:09:45.440
callback.

132
0:09:45.440 --> 0:09:51.520
If we bring back also the first alternative that we saw before with coroutine, what I

133
0:09:51.520 --> 0:09:54.240
expect is to have the error in the function.

134
0:09:54.240 --> 0:09:57.400
If I launch the application, it actually crashes.

135
0:09:57.400 --> 0:10:01.440
This is because in Swift, I have to mark explicitly each throwing function.

136
0:10:01.440 --> 0:10:05.520
The fix is actually quite easy because there is an annotation that we can use which is

137
0:10:05.520 --> 0:10:07.280
called throws exception.

138
0:10:07.280 --> 0:10:14.320
By doing this just in the common code, we don't have to make any changes inside the

139
0:10:14.320 --> 0:10:19.160
Swift implementation so in this case, I will receive the error in the callback.

140
0:10:19.160 --> 0:10:22.560
This works also with non-suspending functions.

141
0:10:22.560 --> 0:10:30.600
If I have this function and mark it throws and exception, once I compile the code, the

142
0:10:30.600 --> 0:10:34.480
generated function in Swift will be marked as throwing.

143
0:10:34.480 --> 0:10:40.360
This time will be the compiler to force us to handle the exception.

144
0:10:40.360 --> 0:10:45.160
Another API that is not quite Swift friendly is one of sealed classes.

145
0:10:45.160 --> 0:10:49.560
On Kotlin, we can restrict the concept of inheritance by using sealed classes and sealed

146
0:10:49.560 --> 0:10:51.320
interfaces.

147
0:10:51.320 --> 0:11:03.320
When we use them inside our Android code, we can just make something like this because

148
0:11:03.320 --> 0:11:07.800
we know for sure that those trees are data, error, and loading in this case are the only

149
0:11:07.800 --> 0:11:11.200
cases that we have to handle.

150
0:11:11.200 --> 0:11:16.920
On iOS, it gets converted by just using the concept of inheritance.

151
0:11:16.920 --> 0:11:21.560
When I have to handle the in this case, the status, I have to define also the default

152
0:11:21.560 --> 0:11:25.240
case which I know for sure that will never be called.

153
0:11:25.240 --> 0:11:30.000
On Swift, we actually have a concept which is similar to the concept of sealed classes

154
0:11:30.000 --> 0:11:32.280
which is the concept of enum.

155
0:11:32.280 --> 0:11:35.480
What we want is to map the sealed classes with enum.

156
0:11:35.480 --> 0:11:42.160
To do so, we can use a library which is called, it's quite dark, but MerkleKes-Wift.

157
0:11:42.160 --> 0:11:47.800
In this case, using this library, it automatically detects any sealed classes and sealed interfaces.

158
0:11:47.800 --> 0:11:53.320
The generates in this case would be UISTateKS.

159
0:11:53.320 --> 0:11:59.000
It just takes the status as input and it is actually an enum that I can use.

160
0:11:59.000 --> 0:12:02.640
For a Swift developer, this is much easier to use because I don't have to define a default

161
0:12:02.640 --> 0:12:04.640
case anymore.

162
0:12:04.640 --> 0:12:14.000
If you're writing code that is platform specific from Android, for example, you probably will

163
0:12:14.000 --> 0:12:18.160
need a context to access some system functionalities.

164
0:12:18.160 --> 0:12:21.920
What happens in the library ecosystem?

165
0:12:21.920 --> 0:12:27.520
You may expose an API like this that gets the context from the user of the library.

166
0:12:27.520 --> 0:12:33.160
Of course, you don't have to do this on iOS because you need a context on iOS.

167
0:12:33.160 --> 0:12:38.880
You can improve that and you can unify those APIs.

168
0:12:38.880 --> 0:12:46.240
We try to use Jetpack App startup for this because if you include App startup in your

169
0:12:46.240 --> 0:12:53.440
app, in your library, basically you will be able to get a context that is injected by

170
0:12:53.440 --> 0:13:04.920
the operative system and maybe save it.


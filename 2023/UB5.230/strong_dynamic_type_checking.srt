1
0:00:00.000 --> 0:00:01.000
Okay.

2
0:00:01.000 --> 0:00:02.000
Yes, please.

3
0:00:02.000 --> 0:00:03.000
All right.

4
0:00:03.000 --> 0:00:06.000
Can you bring me in the back?

5
0:00:06.000 --> 0:00:07.000
Yeah?

6
0:00:07.000 --> 0:00:08.000
Okay, perfect.

7
0:00:08.000 --> 0:00:10.000
So, thank you for being here.

8
0:00:10.000 --> 0:00:17.000
I was not expecting such a large room of JavaScript developers, and nothing has been broken yet,

9
0:00:17.000 --> 0:00:18.000
so it's unbelievable.

10
0:00:18.000 --> 0:00:31.000
So, yeah, I'm here to talk about strong dynamic type-shaking for JavaScript, which may sound

11
0:00:31.000 --> 0:00:39.000
a bit weird, because you are not expecting strong type-shaking and JavaScript in the

12
0:00:39.000 --> 0:00:41.000
same sentence, right?

13
0:00:41.000 --> 0:00:44.000
But I will prove that we can do something about it.

14
0:00:44.000 --> 0:00:49.000
So, first, what is strong type-shaking?

15
0:00:49.000 --> 0:00:50.000
What do we mean by that?

16
0:00:50.000 --> 0:00:52.000
So, let's do a bit of vocabulary.

17
0:00:52.000 --> 0:00:57.000
So, I tried to find one definition online of what is strong type-shaking, and couldn't

18
0:00:57.000 --> 0:00:58.000
find any.

19
0:00:58.000 --> 0:01:02.000
It's like a never-ending argument about which one, which language is strong, and which one

20
0:01:02.000 --> 0:01:03.000
isn't.

21
0:01:03.000 --> 0:01:07.000
But I found two definitions, commonly accepted.

22
0:01:07.000 --> 0:01:12.000
The first one is that this strong type-shaking means that you have this kind of explicit

23
0:01:12.000 --> 0:01:16.000
binding between some variable name and some type.

24
0:01:16.000 --> 0:01:19.000
So, this variable and this type are bound together.

25
0:01:19.000 --> 0:01:22.000
That means that every time you are calling a variable by its name, you will get some

26
0:01:22.000 --> 0:01:26.000
reference data that matches the type you expect.

27
0:01:26.000 --> 0:01:33.000
The second definition is more regarding the program-longuaging features, like no lack

28
0:01:33.000 --> 0:01:36.000
of type-safety due to loser typing rules.

29
0:01:36.000 --> 0:01:39.000
For example, for the case of JavaScript, you have implicit type-correction.

30
0:01:39.000 --> 0:01:44.000
That means that it's perfectly fine to get the plus operator between a number and a string.

31
0:01:44.000 --> 0:01:49.000
For JavaScript, it's just string concatenation and automatically casting the number to a

32
0:01:49.000 --> 0:01:50.000
string.

33
0:01:50.000 --> 0:01:53.000
But for other languages, like Python, you will get a type error.

34
0:01:53.000 --> 0:02:00.000
So, that's taken as an example to show that Python is more strong, stronger than JavaScript.

35
0:02:00.000 --> 0:02:05.000
So, when it comes to JavaScript, whatever definition you pick, you might say that JavaScript

36
0:02:05.000 --> 0:02:09.000
is not a strongly typed language, and you will be right.

37
0:02:09.000 --> 0:02:15.000
Because JavaScript is based on dynamic type-shaking, dynamic typing, that means that JavaScript

38
0:02:15.000 --> 0:02:20.000
via a merge, you can assign it to some type and then move to another type and go on.

39
0:02:20.000 --> 0:02:22.000
It doesn't matter.

40
0:02:22.000 --> 0:02:27.000
So, because types can change during program execution, that makes types in JavaScript

41
0:02:27.000 --> 0:02:29.000
quite unpredictable.

42
0:02:29.000 --> 0:02:33.000
So, the creator of the language, Brandon H, justified his choice by saying that developers

43
0:02:33.000 --> 0:02:38.000
can be more expressive when you've got dynamic typing, which means that can get to the result

44
0:02:38.000 --> 0:02:42.000
faster, but he also agrees that it is also more error-prone.

45
0:02:42.000 --> 0:02:48.000
So, that's the image I took for this static versus dynamic typing.

46
0:02:48.000 --> 0:02:52.000
I think it sums up pretty well.

47
0:02:52.000 --> 0:02:56.000
So, yeah, JavaScript and strong type-shaking, not really.

48
0:02:56.000 --> 0:03:00.000
Actually, every time you see someone complaining about JavaScript or mocking JavaScript, it

49
0:03:00.000 --> 0:03:04.000
would be about one of these memes, right?

50
0:03:04.000 --> 0:03:06.000
So, these are some of my favorites.

51
0:03:06.000 --> 0:03:08.000
Maybe you know others.

52
0:03:08.000 --> 0:03:12.000
But, as you can see, almost all these jokes about JavaScript are basically about the lack

53
0:03:12.000 --> 0:03:16.000
of strong type-shaking, which is too bad.

54
0:03:16.000 --> 0:03:22.000
So, some people will decide to just get rid of JavaScript and maybe go to Kotlin or.NET

55
0:03:22.000 --> 0:03:25.000
or whatever language we have seen this morning.

56
0:03:25.000 --> 0:03:31.000
But, I think that's the most common solution to this approach has been TypeScript, right?

57
0:03:31.000 --> 0:03:37.000
I mean, this thing has been invented specifically to address this issue by having some optional

58
0:03:37.000 --> 0:03:41.000
static type-shaking about JavaScript.

59
0:03:41.000 --> 0:03:43.000
So, how many of you are using TypeScript?

60
0:03:43.000 --> 0:03:44.000
Raise your hand.

61
0:03:44.000 --> 0:03:45.000
Wow.

62
0:03:45.000 --> 0:03:46.000
I was expecting that.

63
0:03:46.000 --> 0:03:50.000
Like, almost 100% of these people in this room are using TypeScript.

64
0:03:50.000 --> 0:03:53.000
I mean, why wouldn't we use TypeScript?

65
0:03:53.000 --> 0:03:59.000
Because it's so popular, almost all the ecosystem, all the libraries today on the NPM ecosystem

66
0:03:59.000 --> 0:04:03.000
have been converted to TypeScript or provide TypeScript definition files.

67
0:04:03.000 --> 0:04:08.000
So, we have seen this kind of exponential growth in popularity among the years.

68
0:04:08.000 --> 0:04:09.000
TypeScript is 10 years now.

69
0:04:09.000 --> 0:04:11.000
It would be 11 in five days, actually.

70
0:04:11.000 --> 0:04:15.000
And, it has never been so popular.

71
0:04:15.000 --> 0:04:19.000
So, did we solve the issue of type-shaking JavaScript with TypeScript?

72
0:04:19.000 --> 0:04:23.000
I would say not entirely, and I'll explain why.

73
0:04:23.000 --> 0:04:27.000
Here are some things I learned about TypeScript after 10 years.

74
0:04:27.000 --> 0:04:33.000
The first one is a bit of shock, is that type-shaking is not actually the main selling point of TypeScript.

75
0:04:33.000 --> 0:04:37.000
The main selling point of TypeScript is developer experience.

76
0:04:37.000 --> 0:04:43.000
So, if you have practiced TypeScript, and the whole room has done that, so it's great,

77
0:04:43.000 --> 0:04:47.000
you have seen some improvements in your development experience.

78
0:04:47.000 --> 0:04:52.000
So many things like being able to explore some API by using the autocomplete,

79
0:04:52.000 --> 0:04:56.000
be able to detect some typos that you have done in your code,

80
0:04:56.000 --> 0:05:00.000
be able to refactor your code more easily thanks to the static type annotations,

81
0:05:00.000 --> 0:05:04.000
maybe have some documentation or write inside your IDE.

82
0:05:04.000 --> 0:05:10.000
Some compilers are using static type annotations to bring some compile time optimizations, which is great.

83
0:05:10.000 --> 0:05:13.000
You get type inference, good type inference in TypeScript,

84
0:05:13.000 --> 0:05:17.000
so you don't have to write all the static type annotations at any time.

85
0:05:17.000 --> 0:05:21.000
And we have seen some innovative use of TypeScript.

86
0:05:21.000 --> 0:05:27.000
For example, the Angular community is using a lot type-shaking annotations to make some code generation, which is great.

87
0:05:27.000 --> 0:05:31.000
So, all of this is part of developer experience, and it's great,

88
0:05:31.000 --> 0:05:35.000
but it's not really about type-shaking anymore. It's much more than that.

89
0:05:37.000 --> 0:05:41.000
I figured it out that type-shaking was not the main selling point of TypeScript,

90
0:05:41.000 --> 0:05:45.000
or at least not anymore. When I looked at the ESBuild project,

91
0:05:45.000 --> 0:05:48.000
one of the most important JavaScript projects of these last years,

92
0:05:48.000 --> 0:05:54.000
ESBuild, the famous bundler. So maybe you are using the VIT development server, some people in the room.

93
0:05:54.000 --> 0:05:59.000
So VIT is based on ESBuild. And does ESBuild support TypeScript?

94
0:05:59.000 --> 0:06:01.000
Of course it does. Everyone is using TypeScript.

95
0:06:01.000 --> 0:06:08.000
But the fact is that ESBuild does not actually do any type-shaking when it compiles some TypeScript code.

96
0:06:08.000 --> 0:06:12.000
What it does is look at the TypeScript code, look at the TypeScript part of static type annotations,

97
0:06:12.000 --> 0:06:16.000
and just get rid of it. That's all it does. Nothing else.

98
0:06:16.000 --> 0:06:21.000
And they say that running the whole TypeScript compiler is actually a loss of time today.

99
0:06:21.000 --> 0:06:29.000
Because of this development experience, developers have this whole integrated type-safe environment and development process.

100
0:06:29.000 --> 0:06:34.000
So that means that you don't need to do it twice the second time on compilation.

101
0:06:34.000 --> 0:06:41.000
The second point of TypeScript that I learned about ten years later,

102
0:06:41.000 --> 0:06:45.000
that type-safety in TypeScript can be easily defeated.

103
0:06:45.000 --> 0:06:52.000
What I mean by that is that in many scenarios in your application, you are relying on type-assertions.

104
0:06:52.000 --> 0:06:57.000
That is, these little elements like the ask keyword or the exclamation mark here,

105
0:06:57.000 --> 0:07:00.000
which is, I am sure, the compiler that is not new.

106
0:07:00.000 --> 0:07:05.000
So all these things are not bringing any type-safety. It's just the developers saying to the compiler,

107
0:07:05.000 --> 0:07:10.000
trust me, I know what I'm doing. And most of the time, we do not.

108
0:07:11.000 --> 0:07:17.000
So, yeah, these type-assertions, you can find them easily on any web application.

109
0:07:17.000 --> 0:07:23.000
There are actually many parts where you are forced to use these kind of assertions because of the nature of the web.

110
0:07:23.000 --> 0:07:30.000
You can have your perfectly type-safe TypeScript application and still have to deal with lots of unpredictability.

111
0:07:30.000 --> 0:07:37.000
Unpredictable is like most of the time your job for a front-end web developer.

112
0:07:37.000 --> 0:07:41.000
And what I mean by unpredictable, it is known at runtime.

113
0:07:41.000 --> 0:07:44.000
That means it changes every time at every user and so on.

114
0:07:44.000 --> 0:07:50.000
So, for example, your application may have some back-end services, may call some APIs,

115
0:07:50.000 --> 0:07:57.000
may be some third-party cloud providers, and you are trusting the responses of these servers, right?

116
0:07:57.000 --> 0:08:02.000
You are not validating any of the response of the server from the application side.

117
0:08:02.000 --> 0:08:04.000
So this could break.

118
0:08:04.000 --> 0:08:09.000
You are also relying on a browser, and some browsers have bugs and queries.

119
0:08:09.000 --> 0:08:14.000
They do not fully support Vue JavaScript APIs, the web-standard APIs.

120
0:08:14.000 --> 0:08:17.000
I chose this logo for a reason. Why?

121
0:08:17.000 --> 0:08:22.000
You may also have some client-side store data for your application.

122
0:08:22.000 --> 0:08:30.000
Maybe you are storing on a local storage some user preferences or some file storage used as cache.

123
0:08:30.000 --> 0:08:35.000
So this is likely to break as well because sometimes the cache is outdated.

124
0:08:35.000 --> 0:08:41.000
It comes from an older version of your application, or maybe it has been modified by the user itself. Who knows?

125
0:08:41.000 --> 0:08:47.000
And finally, maybe the most unpredictable part of every developer's job.

126
0:08:47.000 --> 0:08:49.000
Did you guess it?

127
0:08:49.000 --> 0:08:51.000
The user.

128
0:08:51.000 --> 0:08:53.000
The user can be very unpredictable.

129
0:08:53.000 --> 0:08:57.000
If you have some application in production and have a look at the production database,

130
0:08:57.000 --> 0:09:00.000
you will always find some crazy stuff like, how did it get there?

131
0:09:00.000 --> 0:09:02.000
I don't understand.

132
0:09:02.000 --> 0:09:04.000
This is the user.

133
0:09:04.000 --> 0:09:09.000
So, yeah, all these things need to be validated, or otherwise this is a recipe for disaster

134
0:09:09.000 --> 0:09:14.000
and can break your correctly safe application in TypeScript.

135
0:09:15.000 --> 0:09:20.000
So, if you look at TypeScript and wonder, how can I do that?

136
0:09:20.000 --> 0:09:22.000
How can I type check all of these things?

137
0:09:22.000 --> 0:09:27.000
No luck. It's not a compiler problem because all these things happen at runtime.

138
0:09:27.000 --> 0:09:30.000
You cannot anticipate it.

139
0:09:30.000 --> 0:09:33.000
So it's more an applicative problem and not a compiler problem,

140
0:09:33.000 --> 0:09:38.000
which means that TypeScript is completely helpless and it is up to you, the developer,

141
0:09:38.000 --> 0:09:41.000
to find a solution to these problems.

142
0:09:42.000 --> 0:09:45.000
So, how do we deal with runtime errors most of the time?

143
0:09:45.000 --> 0:09:49.000
The truth is that often we don't.

144
0:09:49.000 --> 0:09:54.000
Maybe in the best of scenarios you are doing some custom logic to validate the data

145
0:09:54.000 --> 0:09:57.000
and trying to fix the stuff the best you can,

146
0:09:57.000 --> 0:10:01.000
but most of the time you have so many different possible runtime errors

147
0:10:01.000 --> 0:10:07.000
that you would have like try catch blocks and trying to show some error messages to the user

148
0:10:07.000 --> 0:10:12.000
saying them to call you and send us an email in case something bad happens.

149
0:10:12.000 --> 0:10:18.000
And I also saw that we have some kind of global unexpected exception handler

150
0:10:18.000 --> 0:10:21.000
that is just sending all the runtime errors that you didn't catch

151
0:10:21.000 --> 0:10:25.000
to maybe a monitoring service and it is added to a log file

152
0:10:25.000 --> 0:10:29.000
that you are checking like once in a month, looking at a bunch of errors and say,

153
0:10:29.000 --> 0:10:32.000
it's not worth my time, so it should move to something else.

154
0:10:32.000 --> 0:10:37.000
I don't know if some of you do that, but it happens, right?

155
0:10:37.000 --> 0:10:43.000
So, it's too bad because we could figure a way to solve all these runtime errors.

156
0:10:44.000 --> 0:10:47.000
So, back to this idea of strong dynamic type checking.

157
0:10:47.000 --> 0:10:49.000
How can we do that?

158
0:10:49.000 --> 0:10:54.000
So, I'm just sticking to the definition of a strong binding between variable name and a time here.

159
0:10:54.000 --> 0:10:58.000
What if we could do this kind of strong binding but at runtime?

160
0:10:58.000 --> 0:11:00.000
What would it mean?

161
0:11:00.000 --> 0:11:05.000
First, it would mean that the type errors that we get would still be runtime errors, right?

162
0:11:05.000 --> 0:11:07.000
Because it happens at runtime.

163
0:11:07.000 --> 0:11:11.000
But at least they will be more explicit and more catch early.

164
0:11:11.000 --> 0:11:14.000
That means that instead of having undefined is not a function,

165
0:11:14.000 --> 0:11:18.000
you will get an error message like this variable has been found undefined

166
0:11:18.000 --> 0:11:19.000
and it was not supposed to.

167
0:11:19.000 --> 0:11:23.000
So, instead of pointing to the consequences, it points to the source of the problem.

168
0:11:23.000 --> 0:11:28.000
So, that helps a lot to reduce the investigation job that you have to do as a developer

169
0:11:28.000 --> 0:11:31.000
when doing debugging.

170
0:11:31.000 --> 0:11:36.000
The second thing is that this strong binding, it should not be just a one-time validation pass.

171
0:11:36.000 --> 0:11:40.000
I'm sure that there are plenty of JavaScript libraries that do that.

172
0:11:40.000 --> 0:11:44.000
That is, you are throwing a bunch of data to it and it validates.

173
0:11:44.000 --> 0:11:47.000
They can go true or false or just throwing a type error.

174
0:11:47.000 --> 0:11:49.000
But we need more than that.

175
0:11:49.000 --> 0:11:51.000
We actually need to have this binding.

176
0:11:51.000 --> 0:11:55.000
That means the type information needs to live along with your data.

177
0:11:55.000 --> 0:11:58.000
So, it should be validated, this type-shaking thing,

178
0:11:58.000 --> 0:12:03.000
on every reassignment or mutation of this data.

179
0:12:03.000 --> 0:12:08.000
And finally, the goal of this is to get rid of maybe some silent errors

180
0:12:08.000 --> 0:12:11.000
because we have many mistakes in JavaScript that just are silent.

181
0:12:11.000 --> 0:12:15.000
That is, you are not noticing them until it's too late.

182
0:12:15.000 --> 0:12:18.000
And it can also make runtime errors maybe more predictable

183
0:12:18.000 --> 0:12:23.000
and so more manageable from developers' bottom view.

184
0:12:23.000 --> 0:12:29.000
So, this is the main reasoning I have when I worked on the open source library

185
0:12:29.000 --> 0:12:33.000
that I want to present to you today, which is Object Model.

186
0:12:33.000 --> 0:12:35.000
So, definitely not a new project.

187
0:12:35.000 --> 0:12:38.000
Actually, I've been working on this for the past eight years.

188
0:12:38.000 --> 0:12:43.000
So, I'm a diversion of 4.4.1.

189
0:12:43.000 --> 0:12:47.000
That means that I have rewritten the entire thing like four times now.

190
0:12:47.000 --> 0:12:53.000
It's obviously the most... the hardest thing I had to cut in my life, I would say.

191
0:12:53.000 --> 0:12:57.000
It's very complicated, but it works, so I'm glad.

192
0:12:57.000 --> 0:13:01.000
And I would say, I saw that it is my most used for real open source project.

193
0:13:01.000 --> 0:13:05.000
By used for real, I mean that it is used in business projects.

194
0:13:05.000 --> 0:13:08.000
So, I use it in my professional project.

195
0:13:08.000 --> 0:13:12.000
Over people are using it as a fundamental component of their business project,

196
0:13:12.000 --> 0:13:15.000
and I receive lots of positive feedback about this library.

197
0:13:15.000 --> 0:13:18.000
You've got an example here.

198
0:13:18.000 --> 0:13:21.000
So, what is this library doing?

199
0:13:21.000 --> 0:13:23.000
So, how do you use it?

200
0:13:23.000 --> 0:13:25.000
It's pretty simple, actually.

201
0:13:25.000 --> 0:13:29.000
The first thing you have to do is define the dynamic types, I would say.

202
0:13:29.000 --> 0:13:31.000
I would call them models.

203
0:13:31.000 --> 0:13:33.000
I'll explain the difference later.

204
0:13:33.000 --> 0:13:36.000
But basically, let's say you are working on e-commerce application.

205
0:13:36.000 --> 0:13:40.000
You can declare an object model for the order, for example, the customer order,

206
0:13:40.000 --> 0:13:44.000
saying that you have a product which has a name property, which is a string,

207
0:13:44.000 --> 0:13:49.000
a quantity that is a number, and also an order date.

208
0:13:49.000 --> 0:13:54.000
After I declare this model, you can now bind it to some data.

209
0:13:54.000 --> 0:13:58.000
So, this is where you have this strong binding between the type and the variable.

210
0:13:58.000 --> 0:14:02.000
Here, I used the constructor pattern, so that means you are calling new order.

211
0:14:02.000 --> 0:14:07.000
I think it's probably the most intuitive form of a binding for the developer,

212
0:14:07.000 --> 0:14:12.000
and also it helps to store the type information on the prototype level of the object.

213
0:14:12.000 --> 0:14:14.000
So, that's how I have this strong binding.

214
0:14:14.000 --> 0:14:18.000
We already have a binding between object and prototypes in JavaScript.

215
0:14:18.000 --> 0:14:22.000
And after having done that, you get the myorder object,

216
0:14:22.000 --> 0:14:26.000
which you can manipulate just like you would do with a regular JavaScript object.

217
0:14:26.000 --> 0:14:32.000
But instead, when you are assigning, for example, a quantity to boolean instead of a number,

218
0:14:32.000 --> 0:14:37.000
you will get a dynamic type error at runtime with an explicit message saying,

219
0:14:37.000 --> 0:14:41.000
expecting the quantity to be number and boolean false instead.

220
0:14:41.000 --> 0:14:46.000
So, because this happens, every time you are doing any mutation on an object,

221
0:14:46.000 --> 0:14:51.000
it is really easy to quickly find some mistake that you are doing as a developer,

222
0:14:51.000 --> 0:14:54.000
and so improve the debugging experience.

223
0:14:54.000 --> 0:14:58.000
So, that's great, but how does it work?

224
0:14:58.000 --> 0:15:01.000
So, let's start from a pretty basic example.

225
0:15:01.000 --> 0:15:06.000
Here, I have a class user, having a constructor, taking a name and an age.

226
0:15:06.000 --> 0:15:11.000
And if you want to validate the parameters that are passed to a function

227
0:15:11.000 --> 0:15:14.000
and not rely on static type annotations and type scripts,

228
0:15:14.000 --> 0:15:17.000
that means that you would validate this data at runtime,

229
0:15:17.000 --> 0:15:20.000
maybe this data comes from an API, for example,

230
0:15:20.000 --> 0:15:25.000
what you could do is use these if conditions and check the type of these different variables

231
0:15:25.000 --> 0:15:27.000
and prototype errors like that.

232
0:15:27.000 --> 0:15:28.000
Pretty easy.

233
0:15:28.000 --> 0:15:32.000
The problem with that is that it only works in the constructor.

234
0:15:32.000 --> 0:15:36.000
So, maybe you could decide to declare some setters like set name, set age,

235
0:15:36.000 --> 0:15:39.000
and had this validation process on every single attribute,

236
0:15:39.000 --> 0:15:44.000
but it's a bit tedious and we can do better on that.

237
0:15:44.000 --> 0:15:49.000
So, we can improve this by using a feature of JavaScript, which is the proxy.

238
0:15:49.000 --> 0:15:52.000
So, I don't know if everyone knows about proxies.

239
0:15:52.000 --> 0:15:56.000
This is a feature of JavaScript that has been introduced in 2015

240
0:15:56.000 --> 0:15:58.000
as part of XMAScript 6.

241
0:15:58.000 --> 0:16:03.000
And proxies are actually really great feature, really powerful.

242
0:16:03.000 --> 0:16:08.000
The way proxy works is that they enable you to intercept some operations

243
0:16:08.000 --> 0:16:11.000
that are done on some objects and react to these operations.

244
0:16:11.000 --> 0:16:15.000
So, in this example, I just use the set trap of the proxy,

245
0:16:15.000 --> 0:16:18.000
which means that every time I am reassigning a property,

246
0:16:18.000 --> 0:16:22.000
I can execute some custom logic.

247
0:16:22.000 --> 0:16:27.000
So, I can move my if type of name and different string and so on,

248
0:16:27.000 --> 0:16:34.000
into the set trap and enable to detect the different issues.

249
0:16:34.000 --> 0:16:36.000
So, that's great.

250
0:16:36.000 --> 0:16:39.000
It works both for the constructor and the feature reassignment,

251
0:16:39.000 --> 0:16:41.000
the feature mutations.

252
0:16:41.000 --> 0:16:46.000
What we can do as a first step is try to make a generic function out of this,

253
0:16:46.000 --> 0:16:49.000
like so.

254
0:16:49.000 --> 0:16:55.000
So, now I just move the definition part on this generic type check function argument.

255
0:16:55.000 --> 0:16:57.000
So, the type check function takes two arguments.

256
0:16:57.000 --> 0:16:58.000
First is the data.

257
0:16:58.000 --> 0:17:02.000
Second one is the definition or the type issue prepare.

258
0:17:02.000 --> 0:17:06.000
So, it makes clear that you have this strong binding between objects and types.

259
0:17:06.000 --> 0:17:11.000
And as you can see, it is really easy to make a generic function to do this kind of stuff.

260
0:17:11.000 --> 0:17:18.000
So, the type check function that you see here is a very basic version of what object model is.

261
0:17:18.000 --> 0:17:20.000
Of course, the library is much more complicated than that.

262
0:17:20.000 --> 0:17:25.000
It can cover many other use cases, but you get the idea with this example.

263
0:17:25.000 --> 0:17:35.000
So, as you can see, it is really easy to reuse this type check function to apply to it to many different models.

264
0:17:35.000 --> 0:17:38.000
So, why did I call these models and not types?

265
0:17:38.000 --> 0:17:43.000
Actually, I wanted to find another word just to make a straight that there is a few differences

266
0:17:43.000 --> 0:17:46.000
from the types that you know from TypeScript, for example.

267
0:17:46.000 --> 0:17:51.000
Because everything happens at runtime, this is runtime that are validations,

268
0:17:51.000 --> 0:17:56.000
that means that models are more powerful than just the static types.

269
0:17:56.000 --> 0:18:00.000
For example, they can not only check the types, but also the values.

270
0:18:00.000 --> 0:18:08.000
Let's say I have a short model, which can have a size which is either a number or a letter like m, s, l, x, l, and so on.

271
0:18:08.000 --> 0:18:19.000
I could decide to have this type annotation to have both control that it is either a number or a letter m or a string matching this regular expression.

272
0:18:19.000 --> 0:18:22.000
I can also have some more complex assertions.

273
0:18:22.000 --> 0:18:27.000
For example, if I want integers in JavaScript, yeah, integers in JavaScript.

274
0:18:27.000 --> 0:18:31.000
So, it will be still number in VN because that's how JavaScript handles numbers.

275
0:18:31.000 --> 0:18:33.000
It's a double 64 bits.

276
0:18:33.000 --> 0:18:39.000
But I can have another assertion on this number model to say I need to check that this is an integer.

277
0:18:39.000 --> 0:18:45.000
And maybe if I want it to be a positive integer, I can have another assertion to make sure that it's above zero.

278
0:18:45.000 --> 0:18:48.000
So, this is the kind of stuff of assertions that you can have.

279
0:18:48.000 --> 0:18:57.000
And again, every time you are manipulating this property, for example, the age of the user, it will check all these assertions automatically.

280
0:18:57.000 --> 0:19:03.000
And also, the last difference from models to types is that model validation can affect application logic.

281
0:19:03.000 --> 0:19:10.000
Because it's happening at runtime, that means you need to react to it and have some strategies of how to handle these runtime errors.

282
0:19:10.000 --> 0:19:21.000
For example, if you got some error, some type error on your short model, maybe you just want to cancel the order so that you are making sure that everything is happening correctly on your application.

283
0:19:21.000 --> 0:19:24.000
So, these are the main differences.

284
0:19:24.000 --> 0:19:32.000
So, to get a look at the pros and cons of this library, first the pros.

285
0:19:32.000 --> 0:19:34.000
You get descriptive error messages.

286
0:19:34.000 --> 0:19:37.000
They are pointing to the initial problem and not the consequences.

287
0:19:37.000 --> 0:19:41.000
So, just that saves you a lot of time.

288
0:19:41.000 --> 0:19:46.000
And it means that you now have this kind of continuous data validation as part of your development process.

289
0:19:46.000 --> 0:19:52.000
That means you get faster debugging and more reliable applications in the end.

290
0:19:52.000 --> 0:19:57.000
Regarding how you manage these runtime errors, because you need to do something, right?

291
0:19:57.000 --> 0:20:02.000
Not only showing an error message, but maybe doing some strategies that are planned.

292
0:20:02.000 --> 0:20:08.000
You can define some global or maybe profiteur per model strategies about how to manage these errors.

293
0:20:08.000 --> 0:20:10.000
Maybe some errors can be easily manageable.

294
0:20:10.000 --> 0:20:19.000
For example, clean up an outdated cache, or maybe some of them are more complex, and then you need to maybe log them into a monitoring service.

295
0:20:19.000 --> 0:20:29.000
Some of the cons of this library, one about performance, of course, because since it's happening at runtime, that means that it has a cost, a performance cost.

296
0:20:29.000 --> 0:20:35.000
Don't worry, it's not too much, but if you are doing some heavy mutations, like more than 100 times per second,

297
0:20:35.000 --> 0:20:39.000
maybe you should avoid using dynamic type-shaking for this specific scenario.

298
0:20:39.000 --> 0:20:43.000
But most of the times you don't have to do this, so it's great.

299
0:20:43.000 --> 0:20:49.000
The second problem is that it relies on proxies, so you need support for it.

300
0:20:49.000 --> 0:21:00.000
Today, modern browsers are supporting ES6 proxies very well, but if you have older browsers for some users, this can be an issue.

301
0:21:00.000 --> 0:21:05.000
So, which is better, static type-shaking or dynamic type-shaking?

302
0:21:05.000 --> 0:21:10.000
The correct answer is you should use both, because they address different issues.

303
0:21:10.000 --> 0:21:20.000
TypeScript, we saw it, it's awesome, it improves a lot with the developer experience, it makes you have a coding base which is reliable and makes sense, which is logical.

304
0:21:20.000 --> 0:21:27.000
But you should also take care of all the unpredictable parts that are happening at runtime of your application.

305
0:21:27.000 --> 0:21:32.000
So, my personal recommendation would be to stick to TypeScript for the core application logic,

306
0:21:32.000 --> 0:21:42.000
and also add this object model layer for every external interface that you have to deal with, like the server, user inputs, the local stores, or the browser APIs.

307
0:21:42.000 --> 0:21:47.000
And this can lead to a more reliable application.

308
0:21:47.000 --> 0:21:51.000
That's all I have for you today, so thank you for listening, and I'm taking questions.

309
0:21:51.000 --> 0:22:04.000
Thank you very much. So, we have time for questions. Who would like to ask the first question?

310
0:22:04.000 --> 0:22:22.000
Yeah.

311
0:22:22.000 --> 0:22:34.000
So, using this library with other libraries for, like, how's it called, immutable data or YAP for other validation?

312
0:22:34.000 --> 0:22:46.000
Have you tried using this library with other libraries for dynamic checking, like YAP, or for immutable data like IMA or other libraries?

313
0:22:46.000 --> 0:22:57.000
Yeah. So, immutable should work fine. For other validation libraries, I mean, it's kind of the same thing, the same job, so maybe it doesn't work that well and doesn't make really sense.

314
0:22:57.000 --> 0:23:12.000
But I think it should work perfectly with immutable data structures. So, immutable should work fine.

315
0:23:12.000 --> 0:23:22.000
Do you think it would be possible to generate the object model, like, definitions, I don't know what to call it, object models from TypeScript?

316
0:23:22.000 --> 0:23:30.000
Okay, that's a good question. So, actually, you can do the opposite. That means that if you are using models, it will generate TypeScript types for you.

317
0:23:30.000 --> 0:23:38.000
But because this is more than type checking, and as you saw, this can affect application logic. That means that we cannot do this simple conversion.

318
0:23:38.000 --> 0:23:48.000
If you use it dynamic type checking, just like you would do with TypeScript types, you are just using, like, 10% of the potential of a library, and it wouldn't make any sense to me.

319
0:23:48.000 --> 0:23:55.000
So, you should see the website, maybe to have more examples of that, but yeah, it's a little bit more than that.

320
0:23:55.000 --> 0:24:03.000
Yeah, I see hands. You were there. The next speaker also, could you raise your hand or stand up?

321
0:24:03.000 --> 0:24:12.000
Okay, so we'll have to contact them. Fantastic idea. Love the library.

322
0:24:12.000 --> 0:24:21.000
You mentioned rewriting it four times over eight years. How stable would you consider the project to be? How often does it, breaking changes to the API, get introduced, that kind of thing?

323
0:24:21.000 --> 0:24:33.000
Yeah, it's true that I've written it four times, but the API never changed. That's one thing. And also, I'll use it for professional projects. So, I would be embarrassed if I had to throw it away.

324
0:24:33.000 --> 0:24:45.000
So, it's quite stable for many years now.

325
0:24:45.000 --> 0:24:59.000
Hello. Thank you for the presentation. And I would like to know whether, would you recommend using object model on projects that has not yet TypeScript? Only JavaScript. Thank you.

326
0:24:59.000 --> 0:25:13.000
Yeah, I mean, that could be a thing. Although, if you are into strong type checking, you're probably already using TypeScript. If it's not the case, maybe it's fine. I don't know. But yeah, it's totally possible.

327
0:25:13.000 --> 0:25:17.000
But most of people are using TypeScript.

328
0:25:17.000 --> 0:25:34.000
Thank you very much. We have time still, if you have time for another question. Yeah. You'll have to be loud because people are moving. So, and if you sit down, please make sure there is no space because the room is pretty full.

329
0:25:34.000 --> 0:25:48.000
Hi. Thank you for your project. So, one other approach is using, for example, JSON schemas that then translates to types. Should I speak?

330
0:25:48.000 --> 0:26:08.000
One other approach is using JSON schemas, for example, on the validation side, let's say, in a controller. And the JSON schema then compiles to the, or deduces the TypeScript type that the schema defined.

331
0:26:08.000 --> 0:26:23.000
So, that's one way, for example, to do validation and not have a runtime penalty besides doing the validation itself. Have you considered this approach for your use case?

332
0:26:23.000 --> 0:26:41.000
Yes, good question. So, you can indeed use this kind of type declaration. One problem is that, again, if you are sticking to what can TypeScript do with a static type checking, you are only just using a fraction of what can be done.

333
0:26:41.000 --> 0:26:53.000
For example, I told you about customer sections. I told you about the fact that you can check values along with the types. So, all of these things would not match the model that you are describing with JSON.

334
0:26:53.000 --> 0:27:00.000
So, that means we need to have another API for that. And that's why I have the own API for object model.

335
0:27:00.000 --> 0:27:09.000
Another last question, and then please, everybody, squeeze no MTC. There are a lot of people still standing.

336
0:27:09.000 --> 0:27:20.000
So, JavaScript is executed with V8 and there is a lot of optimization underneath where, like, you have an inlining going on, optimization of the function.

337
0:27:20.000 --> 0:27:35.000
When you use proxies, all of that is going to be gone immediately. Like, the performance hit is not only when you set something and when you would normally go through the proxy, it's not a hook.

338
0:27:35.000 --> 0:27:45.000
How is it called again? Forgot the name. Anyhow, like, when you have the trigger for it. But also for anything that relies upon that data from that point on.

339
0:27:45.000 --> 0:27:53.000
So, it's going to be a huge performance. I would definitely not recommend this pretty much in production.

340
0:27:53.000 --> 0:28:05.000
Yeah, I talk about the performance issues. One thing is that it's only useful for applying to external interfaces, like network requests. You can just validate everything related to one request.

341
0:28:05.000 --> 0:28:14.000
So, the loss of time due to the network request compared to the loss of time due to proxy, it's acceptable, in my opinion.

342
0:28:14.000 --> 0:28:19.000
You can debate after. Don't worry. In his account.

343
0:28:19.000 --> 0:28:27.000
I mean, I run a bunch of assertions and it takes less than one millisecond, so I don't think the loss of time is so much trouble. Thank you very much.

344
0:28:27.000 --> 0:28:55.000
Thanks again.


1
0:00:00.000 --> 0:00:02.000
Now it's 5 refugee season where we discuss our

2
0:00:03.700 --> 0:00:13.280
movements with the

3
0:00:13.280 --> 0:00:06.280
bees

4
0:00:13.280 --> 0:00:15.280
and

5
0:00:15.280 --> 0:00:17.280
monsters

6
0:00:25.260 --> 0:00:27.260
the

7
0:00:27.260 --> 0:00:36.260
All right, so last talk of the day. I am glad that there are safe people in this room.

8
0:00:36.260 --> 0:00:43.260
Usually people tend to go to dinner early or so, but let's close the staff room.

9
0:00:43.260 --> 0:00:50.260
And please welcome Istvan on stage, he's going to talk about how to test your Compose UI.

10
0:00:50.260 --> 0:00:59.260
So, thank you very much. Hello, I'm Istvan from TIR.

11
0:00:59.260 --> 0:01:03.260
And thank you all for still being here. That's really encouraging.

12
0:01:03.260 --> 0:01:10.260
So, let's get started. I'll be talking about testing Jetpack Compose UI on Android.

13
0:01:10.260 --> 0:01:17.260
So, first of all, just a little extra, there is a sample project, which I took all the samples in this talk from.

14
0:01:17.260 --> 0:01:20.260
So, feel free to check it out on my GitHub page.

15
0:01:20.260 --> 0:01:27.260
Okay, so a quick recap on Android testing without Compose, so the regular view system.

16
0:01:27.260 --> 0:01:34.260
With Android, with the regular view system, we have views or view groups, which are objects created from inflating XML,

17
0:01:34.260 --> 0:01:40.260
and they are, of course, from code. And they have rendering and behavior attached to them.

18
0:01:40.260 --> 0:01:47.260
And because of this, or well, because of their actual objects, we have a grasp on them.

19
0:01:47.260 --> 0:01:57.260
We can get the reference from code or reference for them from the view hierarchy by find view by ID or so.

20
0:01:57.260 --> 0:02:00.260
Okay, let's see how Compose compares to that.

21
0:02:00.260 --> 0:02:04.260
Of course, we have a declaration of the UI and not the UI objects themselves.

22
0:02:04.260 --> 0:02:14.260
So, we don't have a grasp on what Compose actually does, what the framework actually translates our description of the UI to.

23
0:02:14.260 --> 0:02:19.260
And, of course, not every composable actually emits UI elements into the composition.

24
0:02:19.260 --> 0:02:25.260
So, that might make our work harder as well.

25
0:02:25.260 --> 0:02:33.260
Okay, so let's see how we, let's see what composables we will be testing in the next few minutes.

26
0:02:33.260 --> 0:02:40.260
First of all, there is an entry list, which is just a simple screen of a list, which will display hydration entry items.

27
0:02:40.260 --> 0:02:52.260
And, yeah, entry list is just a wrapper around the laser column that does just that, that translates hydration entries into hydration item composables.

28
0:02:52.260 --> 0:02:59.260
And the items themselves are just a simple row with two texts to display the data on the screen.

29
0:02:59.260 --> 0:03:06.260
Okay, let's see how we can solve tests in our Android project for these composables.

30
0:03:06.260 --> 0:03:10.260
First of all, we have to just add a few dependencies.

31
0:03:10.260 --> 0:03:12.260
Of course, now we have a nice bomb to do that.

32
0:03:12.260 --> 0:03:19.260
So, after we do that, we add those to our greater files, we can already start writing Compose UI tests.

33
0:03:19.260 --> 0:03:26.260
And how a Compose UI test looks like is just a regular test class, so nothing special there.

34
0:03:26.260 --> 0:03:30.260
If you were writing Android UI tests, this is pretty much the same.

35
0:03:30.260 --> 0:03:41.260
The first thing that you can spot is that there is just another rule that we have to use inside the instrumented test.

36
0:03:41.260 --> 0:03:50.260
And actually, we can create that rule with a built-in create Android Compose rule function, which has a type parameter, which has to be an activity.

37
0:03:50.260 --> 0:03:57.260
So, for that type parameter, we can set main activity or any other activity inside the replication that we want to start.

38
0:03:57.260 --> 0:04:04.260
So, this rule created by this function will start the activity provided in that parameter.

39
0:04:04.260 --> 0:04:11.260
Of course, if we want to test composables in isolation without any specific activity, we can do that as well.

40
0:04:11.260 --> 0:04:15.260
Then we can just pass component activity to that type parameter.

41
0:04:15.260 --> 0:04:21.260
Component activity is just a base class for many AndroidX activities.

42
0:04:21.260 --> 0:04:27.260
It's just a foundation of all the other classes, and it can host composables.

43
0:04:27.260 --> 0:04:29.260
So, that's that.

44
0:04:29.260 --> 0:04:38.260
And if we want to do this, there is actually a shortcut to do that, which is called create Compose rule, which does just the same as you've seen before, but in a multi-platform way.

45
0:04:38.260 --> 0:04:47.260
So, if you want to prepare for a multi-platform project, then you can call this create Compose rule, and on Android, it will translate to what you've seen before.

46
0:04:47.260 --> 0:04:48.260
Okay.

47
0:04:48.260 --> 0:04:51.260
With that out of the way, we can start writing U-ray tests.

48
0:04:51.260 --> 0:04:56.260
The tests themselves are just regular test functions, nothing special there.

49
0:04:56.260 --> 0:05:05.260
The specialty comes when we actually start to write the test, because all of the calls, all of the test calls, has to be made on this test rule.

50
0:05:05.260 --> 0:05:17.260
So, we can actually scope to that, say, scope to that, with apply, because this is just regular Kotlin code, so we can do whatever we want and whatever we know of.

51
0:05:17.260 --> 0:05:25.260
So, we can just scope to this Compose rule and call anything on that.

52
0:05:25.260 --> 0:05:40.260
And the Compose test rule has a subcontent method, which you could have already met as an extension on the activity or as a function of Compose view if you do interoperability.

53
0:05:40.260 --> 0:05:45.260
So, yeah, this is the entrance to the Compose world inside our tests.

54
0:05:45.260 --> 0:05:50.260
And in subcontent, we can actually call anything any composable at this point.

55
0:05:50.260 --> 0:06:01.260
But for this example, we'll call our applications theme and then just call the entry list composable, which we've seen before, with just a fake list of entries.

56
0:06:01.260 --> 0:06:14.260
And if you wonder where those entries can come from, they can come from basically anywhere we're still just writing Kotlin code, so these entries could be just a fake list of entries that you provide to the test suite from everywhere, anywhere.

57
0:06:14.260 --> 0:06:26.260
Okay, so now we know how to set up our tests, but we still have no grasp on that entry list composable or anything that entry list composable actually emits into the composition.

58
0:06:26.260 --> 0:06:30.260
So, let's see how we can fix that problem.

59
0:06:30.260 --> 0:06:32.260
Enter the Semantix tree.

60
0:06:32.260 --> 0:06:38.260
So, the Semantix tree is actually another tree that is built in parallel with the composition.

61
0:06:38.260 --> 0:06:58.260
So, the composition consists of nodes that will be rendered after some processing, of course, and the composable that we write emit nodes into the composition, but they also emit nodes into the Semantix tree, which is used by the accessibility frameworks and also the testing framework.

62
0:06:58.260 --> 0:07:14.260
And just as with the composition, composable that we write can but may not contribute to the Semantix tree in any way, but also that behavior can be modified and we will see how we can do that as well.

63
0:07:14.260 --> 0:07:17.260
Okay, so let's simplify our example a bit.

64
0:07:17.260 --> 0:07:22.260
Now, we just call a simple text composable inside the set content of our test through.

65
0:07:22.260 --> 0:07:27.260
And by doing that, the Semantix tree will look like that on the right.

66
0:07:27.260 --> 0:07:31.260
So, that will always be a root node for the Semantix tree.

67
0:07:31.260 --> 0:07:41.260
And the text composable by default emits its text content into a new Semantix node, which you can see as a green node.

68
0:07:41.260 --> 0:07:43.260
And, yeah, that's it.

69
0:07:43.260 --> 0:07:53.260
So, let's change quickly to the canonical representation that you will see when you will be writing tests and observing this Semantix tree.

70
0:07:53.260 --> 0:08:05.260
Now, it's the root node, of course, and the text contributes a text attribute of 100 milliliters text inside that Semantix node.

71
0:08:05.260 --> 0:08:11.260
Okay, let's add the row because, as you can see, we are building the items of the list.

72
0:08:11.260 --> 0:08:23.260
So, let's add the row and, yeah, that doesn't change the Semantix tree in any way because the row composable is actually a layout composable and it doesn't emit anything into the composition.

73
0:08:23.260 --> 0:08:28.260
And by default, it doesn't emit anything into the Semantix tree either.

74
0:08:28.260 --> 0:08:30.260
Let's add another text.

75
0:08:30.260 --> 0:08:39.260
And, of course, that will create a new Semantix node, which will be a sibling of the previous one and the child of the root node in this example.

76
0:08:39.260 --> 0:08:51.260
Okay, so this is a really easy example, but, of course, when you're writing an application, you will be facing complex screens and complex subcomposables and whatnot.

77
0:08:51.260 --> 0:08:58.260
So, you will be looking at more and more complex Semantix trees as well, which you have to assert on.

78
0:08:58.260 --> 0:09:03.260
So, of course, there must be a way to visualize this.

79
0:09:03.260 --> 0:09:08.260
One thing that we can do in our tests is call the on-root finder method.

80
0:09:08.260 --> 0:09:10.260
We will be talking about those later.

81
0:09:10.260 --> 0:09:14.260
And call print to log on it with a test tag.

82
0:09:14.260 --> 0:09:16.260
Sorry, a log tag.

83
0:09:16.260 --> 0:09:33.260
So, what this will do when you run such a UI test that has this line on it is that it will print this structured log, which you can find by the log tag, and you will see the root node here and all the other nodes structured inside this log entry.

84
0:09:33.260 --> 0:09:37.260
The other way is it might be a bit easier.

85
0:09:37.260 --> 0:09:51.260
So, you can configure the layout inspector, if you have a fully composed screen, of course, to highlight the nodes that are contributing into the Semantix tree and to inspect the attributes of those nodes.

86
0:09:51.260 --> 0:09:55.260
Okay, let's get back to this easy example.

87
0:09:55.260 --> 0:10:00.260
And let's see how we can modify the behavior of how composables emit things into the Semantix tree.

88
0:10:00.260 --> 0:10:06.260
There is a modifier called Semantix because, of course, there are modifiers for everything.

89
0:10:06.260 --> 0:10:14.260
So, yeah, the Semantix modifier by itself does nothing, as you can see on the Semantix tree representation.

90
0:10:14.260 --> 0:10:27.260
So, by default, adding the Semantix tree modifier into the modifier cascade won't do anything special, as long as we start adding some attribute values inside the Semantix modifier.

91
0:10:27.260 --> 0:10:41.260
So, in this example, we add a content description to the row, and as you can see, this will actually modify the behavior of row, and with this row will actually contribute to the Semantix tree with a new Semantix node.

92
0:10:41.260 --> 0:10:46.260
That will be the parent of the two text nodes that are the children of the row, of course.

93
0:10:46.260 --> 0:10:55.260
As you can see, the content description Semantix setting adds a content description attribute into that new node with the text of a list item.

94
0:10:55.260 --> 0:11:07.260
That will be picked up by the accessibility and testing frameworks, but also we can define a test tag which will only be picked up by the testing framework and not the accessibility framework.

95
0:11:07.260 --> 0:11:11.260
And, of course, we will be able to assess on this as well.

96
0:11:11.260 --> 0:11:24.260
As you can see, the test tag attribute actually contributes with a tag attribute inside the accessibility node, and it will be a text as well.

97
0:11:24.260 --> 0:11:33.260
Okay, so with this knowledge, we can already start asserting and exercising our UIs with the Compose UI testing framework.

98
0:11:33.260 --> 0:11:36.260
Let's see what APIs we can use to do so.

99
0:11:36.260 --> 0:11:41.260
We've already seen this first one, the on root, which selects the...

100
0:11:41.260 --> 0:11:49.260
So, we've already seen this first finder, which selects the root node of the whole Semantix tree.

101
0:11:49.260 --> 0:11:55.260
And, yeah, there are a few functions that you can call on them, call on the root node.

102
0:11:55.260 --> 0:12:01.260
One you've already seen, this is the print log, which can be useful when you start writing your UI tests.

103
0:12:01.260 --> 0:12:17.260
There is another family of functions which is called on node with, and there are a few variants on this which can find our nodes based on multiple predefined tags or multiple predefined attributes

104
0:12:17.260 --> 0:12:20.260
that can be present in our Semantix nodes.

105
0:12:20.260 --> 0:12:25.260
In this example, on node with tag selects the node with the tag that matches there.

106
0:12:25.260 --> 0:12:33.260
In the next example, it matches for a content description, and, yeah, in the next one, it matches on the text.

107
0:12:33.260 --> 0:12:36.260
It can be a test tag, and so on and so forth.

108
0:12:36.260 --> 0:12:43.260
Of course, these matchers or finders try to find exactly one matching node.

109
0:12:43.260 --> 0:12:53.260
So, if you don't have a matching node or if you have multiple nodes that would match the criteria, this will fail your UI test.

110
0:12:53.260 --> 0:12:54.260
Okay.

111
0:12:54.260 --> 0:12:57.260
There are another family of functions that you can use to find nodes.

112
0:12:57.260 --> 0:13:11.260
They are called on all nodes with, and they also have the same variants predefined, and these will try to match one or more of the nodes of the criteria.

113
0:13:11.260 --> 0:13:16.260
If they don't find any nodes, of course, they will also fail our tests.

114
0:13:16.260 --> 0:13:17.260
Okay.

115
0:13:17.260 --> 0:13:23.260
And just as in Espresso, if you found a node in Espresso, you can find a view.

116
0:13:23.260 --> 0:13:26.260
Here, you can find the Semantix node.

117
0:13:26.260 --> 0:13:40.260
Yeah, just as in Espresso, you can perform some actions on your found nodes, which will translate to actions in the actual composables that you're referring to by Semantix nodes.

118
0:13:40.260 --> 0:13:42.260
Let's see this example of a button.

119
0:13:42.260 --> 0:13:56.260
It's just a simple button that has a text inside of it, so, yeah, you would expect that it can be clickable, and there is a perform click on the node class that the onNodeWith functions return.

120
0:13:56.260 --> 0:14:01.260
So, if you do this perform click, then the button will be actually clicked in our UI test.

121
0:14:01.260 --> 0:14:22.260
This is because the button, besides many, many attributes that it contributes to the Semantix tribute, it defines an action which is called onClick and performClick checks for this action, and if it's there on the button's Semantix node, then it deems it clickable and it will be clicked.

122
0:14:22.260 --> 0:14:32.260
Okay, for the rest of the APIs, because we don't have much time here, you can check the official Compose Testing Cheat Sheet, which you can find on that link.

123
0:14:32.260 --> 0:14:38.260
Okay, let's dive into the last topic for today, pretty much.

124
0:14:38.260 --> 0:14:42.260
It's hybrid UI testing. So, what's hybrid UI in this context?

125
0:14:42.260 --> 0:14:59.260
Hybrid UI is when you want to include composable content inside the view hierarchy or the other way around, you want to include your existing custom views for whatever reason inside a composition, so like a full screen made with Compose.

126
0:14:59.260 --> 0:15:09.260
And luckily, we have support for this Espresso and the Compose Testing Framework can work together to test such cases.

127
0:15:09.260 --> 0:15:31.260
Let's see our first example here. So, in this example, we will go to the Compose view way, meaning that the container here, the toolbar and the rest of the screen except the button, will be in XML, and we will be trying to include the button which is written in Compose.

128
0:15:31.260 --> 0:15:48.260
So, yeah, this is the context that we will be using. There's a constraint layout with a toolbar with its regular attributes, and there is a Compose view which will be our entry point for Compose inside our layout.

129
0:15:48.260 --> 0:15:58.260
Okay, yeah, here is the fluff that we need to set up this layout. We have an activity that uses view binding to set up its views.

130
0:15:58.260 --> 0:16:13.260
And of course, with the binding, we will be setting up the toolbar title, but the more important thing is that we set up our Compose view, where we can call the set content method that you can see here.

131
0:16:13.260 --> 0:16:20.260
Sorry. And yeah, there is a custom button composable which is written somewhere else. It doesn't really matter.

132
0:16:20.260 --> 0:16:28.260
We can set a text on it, and we won't be clicking it, so we just set its click listener to nothing.

133
0:16:28.260 --> 0:16:45.260
All right. So, how would we test this scenario? First of all, we declare our Compose test rule with starting that Compose view demo activity that we declared previously, and then we scope to the Compose test rule and call our tests.

134
0:16:45.260 --> 0:16:57.260
First of all, this is just a regular Espresso call. Of course, we are acting on a regular view hierarchy, so this is displayed check on the toolbar. It will work. There is nothing special there.

135
0:16:57.260 --> 0:17:16.260
But the next thing that will also work is just calling the Compose testing API on this same layout, in this same activity, and that assertion will actually pass as well because of the interoperability between the Jetpack Compose testing APIs and Espresso.

136
0:17:16.260 --> 0:17:20.260
Okay. That's really nice. Let's see the other way around.

137
0:17:20.260 --> 0:17:37.260
So, in this example, the whole screen you see here, except the button will be in Compose and will be including this custom button here, which is written in the plain old view system. It will be a custom view.

138
0:17:37.260 --> 0:17:47.260
Okay. This is the custom button view. Nothing special is here. The layout is inflated from layout XML. There might be some fluff on it.

139
0:17:47.260 --> 0:18:00.260
And there is a subtext method to set the text, and there is an onClickListener method to set the click listener. Of course, nothing special here. And this is a constraint layout, so this is like a deep custom button.

140
0:18:00.260 --> 0:18:13.260
Of course, there might be better examples than this, like an external SDK's custom view that's still not implemented in Compose.

141
0:18:13.260 --> 0:18:18.260
So, yeah. But for this example, we'll stick to this custom button view.

142
0:18:18.260 --> 0:18:33.260
Okay. And this is the composable that we will be including that button in. It's called AndroidViewDemo, and it has a non-button click parameter to lift up the action handling of the button.

143
0:18:33.260 --> 0:18:48.260
Okay. Of course, we are using a scaffold. We are adding a top-up bar there. That's the fluff here. And there is the interoperability API for including a view inside the composition, and that's called AndroidView.

144
0:18:48.260 --> 0:19:04.260
You can read on it in the documentation. The important part here is that there we call the constructor of the custom button view and set it up like you would with a regular view in code.

145
0:19:04.260 --> 0:19:16.260
Okay. So how do we test this scenario? We will just call the createCompose rule, because we don't need an exact activity to test this composable in isolation.

146
0:19:16.260 --> 0:19:27.260
And then we set up our test, and we do kind of behavioral test pattern there for our AndroidViewDemo composable.

147
0:19:27.260 --> 0:19:37.260
As you can see, the button clicked handler is just setting up an external value outside.

148
0:19:37.260 --> 0:19:47.260
Okay. So if the button will be clicked, then we would expect that button-clicked variable to be set to true, and we will be asserting on that.

149
0:19:47.260 --> 0:20:00.260
So let's start testing first things first. AndroidView, we are testing if the toolbar in the composable is visible, and that will pass.

150
0:20:00.260 --> 0:20:07.260
Then we do the espresso testing for the button to check if it's displayed, and that will pass as well.

151
0:20:07.260 --> 0:20:13.260
Again, this is the power of interoperability between espresso and Compose.

152
0:20:13.260 --> 0:20:21.260
Okay. So let's go forward and try to click that button that we have here as a view.

153
0:20:21.260 --> 0:20:29.260
And we would expect that that assert equals on the button will be passing, but unfortunately, that's not the case as of now.

154
0:20:29.260 --> 0:20:36.260
So yeah, as of now, with the latest Compose bomb and the latest Compose version, this will not pass.

155
0:20:36.260 --> 0:20:38.260
This will not happen, actually.

156
0:20:38.260 --> 0:20:43.260
That perform click won't be clicking the button because of a bug in espresso.

157
0:20:43.260 --> 0:20:51.260
The thing that we can do is to call perform click on the view that's provided by us in espresso.

158
0:20:51.260 --> 0:20:56.260
But the problem with this is that perform click won't be happening inside the context of espresso.

159
0:20:56.260 --> 0:21:04.260
So there might be timing issues, and when you want to run a check after doing this, that might fail because the click is not performed,

160
0:21:04.260 --> 0:21:08.260
or the side effects of the click won't be performed in time.

161
0:21:08.260 --> 0:21:18.260
So with this, yeah, we now have a kind of flaky test, which we could circumvent by doing some more fluff around it with espresso.

162
0:21:18.260 --> 0:21:24.260
But by default, this is the case now. Hopefully it will be fixed soon.

163
0:21:24.260 --> 0:21:27.260
So we're almost done.

164
0:21:27.260 --> 0:21:32.260
There are more topics that you can check out on Compose testing.

165
0:21:32.260 --> 0:21:37.260
The best part of it is the libraries that do screenshot testing, of course.

166
0:21:37.260 --> 0:21:42.260
But yeah, this topic is pretty deep, so yeah, feel free to check out these.

167
0:21:42.260 --> 0:21:46.260
And finally, here are some resources that I use to create this talk.

168
0:21:46.260 --> 0:21:53.260
And also, there is a 40-minute version on my website that you can watch, and multiple instances, actually.

169
0:21:53.260 --> 0:22:03.260
So yeah, if you're interested in this topic and some more tools to use and some more examples, check out those as well.

170
0:22:03.260 --> 0:22:06.260
And yeah, finally, thank you for your attention.

171
0:22:06.260 --> 0:22:10.260
If you have any questions, I guess we have some time.

172
0:22:10.260 --> 0:22:13.260
And yeah, that's it. Thank you.

173
0:22:13.260 --> 0:22:28.260
Thank you.


1
0:00:00.000 --> 0:00:11.160
Hello, everybody. Thanks for being here. I'm so glad to be here for them. That's the first

2
0:00:11.160 --> 0:00:20.160
time in three years we're in person. So, yeah, I'm so glad. So, I'm Julien. I work at Mozilla

3
0:00:20.160 --> 0:00:25.200
for like ten years now. So, you can find me on Mastodon, you can find me on Twitter, you

4
0:00:25.200 --> 0:00:32.120
can find me on Matrix, you can find me in Paris. And of course, Mozilla, you know that

5
0:00:32.120 --> 0:00:40.360
so well. We are responsible for Firefox. It's high performance, open source, privacy conscious.

6
0:00:40.360 --> 0:00:47.440
So I'm sure you already have it on desktop. You have it on your phone. So you link them

7
0:00:47.440 --> 0:00:53.280
together and use your history and your password. You know that already. Mozilla is also famous

8
0:00:53.280 --> 0:01:02.680
for the NGN, of course, for your audio development fantasies. And for the VPN and for Firefox

9
0:01:02.680 --> 0:01:06.800
monitor. Lots of good stuff. But today I want to talk about the Firefox profiler. So you

10
0:01:06.800 --> 0:01:14.640
can find this slide deck here and with the QR code as well. And let's dive in. So this

11
0:01:14.640 --> 0:01:21.640
is the thing I want you to leave the room with today. First, I want you to know what

12
0:01:21.640 --> 0:01:26.960
a profiler is. I want you to know how you capture and how you can share a profile, how

13
0:01:26.960 --> 0:01:30.280
you can share a profile with your colleagues, but also how you can share a profile with

14
0:01:30.280 --> 0:01:36.040
us Mozilla in case you have performance problems with Firefox. And finally, we will do a quick

15
0:01:36.040 --> 0:01:42.880
tour of the UI so that you can have the first glance of how you can analyze a profile. So

16
0:01:42.880 --> 0:01:48.760
first, the Firefox profiler, as is the UI, is just a web app. It's a React-based web

17
0:01:48.760 --> 0:01:54.920
app with no privilege at all. It's used as a service worker so that it works offline.

18
0:01:54.920 --> 0:02:00.120
And it's also an open source project. You can find it on GitHub. You can do contributions.

19
0:02:00.120 --> 0:02:07.200
You can look at the source code. You can even adapt it for your needs. So, yeah, come and

20
0:02:07.200 --> 0:02:17.720
do some React-based contributions with us. So first, what is a profiler? So, oh, yeah.

21
0:02:17.720 --> 0:02:27.440
I was scared by this cat because it's so big here. So, yeah. How do you measure performance?

22
0:02:27.440 --> 0:02:34.360
You can measure it on three different places. You can measure it locally on your computer.

23
0:02:34.360 --> 0:02:41.040
You can measure on the CI with automated tests and benchmarks. And you can measure on your

24
0:02:41.040 --> 0:02:46.280
user's computer. This is called real user monitor. But there are also different timings

25
0:02:46.280 --> 0:02:51.520
characteristic, right? Locally, you get the results right away. New profile, you look

26
0:02:51.520 --> 0:02:57.120
at it, you get the measure. On the CI, you can get the result after maybe one hour. And

27
0:02:57.120 --> 0:03:02.520
with the real user monitor, of course, that takes a few days. And the profiler, this is

28
0:03:02.520 --> 0:03:08.200
locally. So this has some advantages. Of course, you get the result right away. But this also

29
0:03:08.200 --> 0:03:14.880
has some drawbacks that we'll dive into later. So basically, this is a tool. This is just

30
0:03:14.880 --> 0:03:21.680
a tool in your toolbox. This helps you analyze performance issues in your application and

31
0:03:21.680 --> 0:03:27.920
or in Firefox. But here it's more for your application, for your JavaScript or CSS stuff.

32
0:03:27.920 --> 0:03:32.360
This gives you insight and clues. But this is really a detective work. When you have

33
0:03:32.360 --> 0:03:36.960
a bug and when you have a performance bug, that's the same. It's just a detective work.

34
0:03:36.960 --> 0:03:43.480
You have to look at the problem from different angles with different tools with console.log

35
0:03:43.480 --> 0:03:51.080
sometimes. And always this tool can make things easier. But it's just a tool. And, yeah, that's

36
0:03:51.080 --> 0:03:57.880
something I think the most important with performance is that if you try to guess, you

37
0:03:57.880 --> 0:04:04.800
will guess wrong. Very, very commonly. Like, you know the web, right? You get some property

38
0:04:04.800 --> 0:04:09.000
on some DOM element and suddenly you get a full reflow of the whole page and it takes

39
0:04:09.000 --> 0:04:15.880
a few hundred milliseconds. And you can't see that really clearly with the code. So

40
0:04:15.880 --> 0:04:23.040
with the JIT, with the JavaScript virtual machines, the JIT can optimize it for you,

41
0:04:23.040 --> 0:04:28.120
can optimize a lot of good things. And for other things, they will just be very slow.

42
0:04:28.120 --> 0:04:32.720
And it's very difficult to know in advance. So, yeah, do not guess. Try to measure, being

43
0:04:32.720 --> 0:04:37.320
with the Firefox profiler, with the Chrome profiler or anything, even with performance

44
0:04:37.320 --> 0:04:43.720
that measure or with timer in your code. But try to measure because not everything is always

45
0:04:43.720 --> 0:04:49.400
‑‑ it can be confused on the web. All right. So now I'll try to do a live demo.

46
0:04:49.400 --> 0:04:57.120
Let's hopefully that will work. So I will show you how to capture a performance profile.

47
0:04:57.120 --> 0:05:01.320
Let's switch to that view. So this is a view of the profiler. But don't pay attention to

48
0:05:01.320 --> 0:05:08.600
the UI right now. Just because I have a bug. A bug was reported lately. This is very slow

49
0:05:08.600 --> 0:05:14.400
when we do a panning here. Like when I pan here, it's not so slow right now. Because

50
0:05:14.400 --> 0:05:22.720
the resolution is slow. It's smaller here. But it's quite kind of slow here. So I want

51
0:05:22.720 --> 0:05:28.520
to measure this. I want to profile this. So what I'm doing is first I'm going on the profiler

52
0:05:28.520 --> 0:05:36.120
website. And there is this handy button here. Just click here. This has a profiler icon

53
0:05:36.120 --> 0:05:41.320
on the top with a bunch of settings here. So you can use ‑‑ there is a setting

54
0:05:41.320 --> 0:05:46.520
title for web developer here. Or you can profile the whole navigator if you prefer, the whole

55
0:05:46.520 --> 0:05:53.520
browser. You can use nightly. You can also edit settings here. You can change the interval,

56
0:05:53.520 --> 0:05:58.520
for example, if you want to reduce the overhead. Or you can change some features. I will maybe

57
0:05:58.520 --> 0:06:05.080
talk about that later if I have enough time. But now I will just start the recording. And

58
0:06:05.080 --> 0:06:17.760
I will run my scenario. Like that. And then I can capture. And I get a view into what

59
0:06:17.760 --> 0:06:24.040
happened here. So we will dive into the UI a bit later. And I will zoom in also because

60
0:06:24.040 --> 0:06:28.960
maybe it's a bit small for you. But I want to just to show you that you can also upload

61
0:06:28.960 --> 0:06:34.000
the profile then. Of course, there can be personal information in anything you can show

62
0:06:34.000 --> 0:06:39.040
from your browser. There can be things about you and how you visited, about the tab that

63
0:06:39.040 --> 0:06:44.920
you have currently open. Maybe there are some tabs you don't want everybody to know. And

64
0:06:44.920 --> 0:06:53.520
there can be tasks on your local computer. So you can disable some of these things. So,

65
0:06:53.520 --> 0:07:00.800
for example, I will remove the, yes, the thread that I don't see here. I can upload here.

66
0:07:00.800 --> 0:07:08.680
The Wi-Fi works surprisingly well today. And then you have this ND URL. You can take this

67
0:07:08.680 --> 0:07:12.400
URL, give that to your coworkers, and this will open exactly the same view with the same

68
0:07:12.400 --> 0:07:19.480
profile. And so this is very handy to discuss that with your colleagues. And some of you

69
0:07:19.480 --> 0:07:23.920
can have different understanding of different parts of your code. And so you can have different

70
0:07:23.920 --> 0:07:28.760
views like that. You can also share this URL with Gecko developers. If you have a problem

71
0:07:28.760 --> 0:07:34.400
in Firefox, you can open a bug. Put this URL there. And that will help the Firefox developers

72
0:07:34.400 --> 0:07:41.080
solve problems that you may find in the browser. And finally, because that's your data, you

73
0:07:41.080 --> 0:07:46.880
can also delete it. There is a delete button here. You can delete the data that was uploaded.

74
0:07:46.880 --> 0:07:50.280
Because otherwise it's public. You need to understand that it's very public. Of course

75
0:07:50.280 --> 0:07:54.640
you need to know the URL. But otherwise it's public. There is no password, whatever. So

76
0:07:54.640 --> 0:08:06.640
you can delete it when you don't need it anymore. So now I come back to the talk. We'll dive

77
0:08:06.640 --> 0:08:14.000
into the UI a bit later. But first I want to explain how you actually get that. You

78
0:08:14.000 --> 0:08:26.560
need to isolate the problem as much as possible. Like if you have a lot of tabs, lots of websites

79
0:08:26.560 --> 0:08:32.800
in background that are running stuff, the problem you want to test can be isolated and

80
0:08:32.800 --> 0:08:42.280
maybe there will be some different differences just because you have some websites in background.

81
0:08:42.280 --> 0:08:48.040
Because you're building something in background of your computer. And that will skew the result.

82
0:08:48.040 --> 0:08:55.600
So try to isolate the problem. Try to have a computer that is not too busy at that moment.

83
0:08:55.600 --> 0:09:01.080
When you get the data, you try to ensure that the results you get are the ones you kind

84
0:09:01.080 --> 0:09:05.200
of expected. You can look at the screenshots, see if this is the thing you actually wanted.

85
0:09:05.200 --> 0:09:10.520
And you can keep recording. There is not one truth. There is several truths here. Depending

86
0:09:10.520 --> 0:09:17.680
on if your system wasn't in the best shape at that moment, maybe you need to record again

87
0:09:17.680 --> 0:09:23.400
so that you have something that you can work with. So now I want to go into the captured

88
0:09:23.400 --> 0:09:32.560
data. So we have two types of data. The first type of data we do is sampling. So what we

89
0:09:32.560 --> 0:09:38.520
are doing is every interval, every millisecond here, we look at what the current program

90
0:09:38.520 --> 0:09:43.840
is executing. So we look at the stack. Here is an example of a program that starts with

91
0:09:43.840 --> 0:09:49.160
main. This is the main function of a program that we call A, that we call B, that we call

92
0:09:49.160 --> 0:09:54.480
C, C with returns, et cetera. So this is like a normal program calling normal functions.

93
0:09:54.480 --> 0:10:01.800
And every millisecond, we look at where we are. So here we are in A. No, we are in main,

94
0:10:01.800 --> 0:10:06.960
sorry. A, we don't see it here. Here we are in B. So we are in B, but we are also in A,

95
0:10:06.960 --> 0:10:13.040
right? And we are also in main. And then at this point, we are also in B, in B, in A,

96
0:10:13.040 --> 0:10:20.120
in main. Here we are just in main, for example. And here we are both in main, in A, in B,

97
0:10:20.120 --> 0:10:25.640
and in C. And then so we take all this data and then we squish them together, which is

98
0:10:25.640 --> 0:10:34.120
a technical term to mean that we aggregate the data. So we squish them. And so we show

99
0:10:34.120 --> 0:10:38.520
this information as a form of a code tree like that. So that's basically the same. So

100
0:10:38.520 --> 0:10:44.720
if I take, if I come back here, we can see basically main, we spend 100% there, right?

101
0:10:44.720 --> 0:10:52.160
It's the same function in the world program. In A, we spend maybe 70% there. And in B,

102
0:10:52.160 --> 0:10:57.240
we spend maybe 50%. And that's what we see in the code tree then. Here, the one at the

103
0:10:57.240 --> 0:11:07.480
top, we spend like 98% in it. But we spend also 56 samples in, right in this function.

104
0:11:07.480 --> 0:11:12.560
So the difference between this column and this column is that this column is this function

105
0:11:12.560 --> 0:11:19.240
including everything it's called. And this column is this function only, excluding everything

106
0:11:19.240 --> 0:11:25.480
it's called. Another view is the flame graph. The flame graph is the same data. It's just

107
0:11:25.480 --> 0:11:34.400
more visual. The time we spend in one function is the width of a rectangle. The one at the

108
0:11:34.400 --> 0:11:41.520
top are the one where we are at one point. So very visually, we can see where we spend

109
0:11:41.520 --> 0:11:46.920
time. So here we can see we do a lot of convex rendering stuff. This is exactly the scenario

110
0:11:46.920 --> 0:11:51.760
I was playing earlier, by the way. So we see that we're spending some time on the convex.

111
0:11:51.760 --> 0:11:55.640
And we are maybe redrawing too much stuff at that point. So we can dive into that later

112
0:11:55.640 --> 0:12:03.680
also if we have time. I don't know how much time we have. Okay. So yeah, sampling is a

113
0:12:03.680 --> 0:12:10.920
view into the program that is currently executing. But we can miss things. Like you've seen here,

114
0:12:10.920 --> 0:12:15.160
because we do only every millisecond, we can miss some of the codes. And maybe they're

115
0:12:15.160 --> 0:12:19.360
important, right? So in this case, we see only ones because it was a bit longer. But

116
0:12:19.360 --> 0:12:24.720
the small ones here, we don't see that. This can be missed. So that's why we can instrument

117
0:12:24.720 --> 0:12:29.440
the code. So Firefox itself is instrumented for important things like the reflow, the

118
0:12:29.440 --> 0:12:33.800
new styles, or the GC, or things like that. But you can also instrument your own code

119
0:12:33.800 --> 0:12:39.480
with the performance timing API, performance.mark and performance.measure. You will see that

120
0:12:39.480 --> 0:12:44.760
in the profile. So that's what we call markers in our little technical jambons. Some of the

121
0:12:44.760 --> 0:12:52.000
profiler codes are events. And we get, like, another view on what's happening in the program

122
0:12:52.000 --> 0:12:57.240
here. So for example, we see all DOM events here. This one is the mouse movement, because

123
0:12:57.240 --> 0:13:02.960
that's exactly what I was doing, right? I was moving the mouse while I was panning.

124
0:13:02.960 --> 0:13:08.160
So I get mouse movement that are pretty big, actually. 30 milliseconds for one event. That

125
0:13:08.160 --> 0:13:13.640
means we spend maybe too much time there. We also see all the user timing, because the

126
0:13:13.640 --> 0:13:19.440
code of the profiler is instrumented to add performance.measure any time we do some converse

127
0:13:19.440 --> 0:13:24.760
drawing. But you can also see things that's happening inside Firefox. We can see, for

128
0:13:24.760 --> 0:13:32.800
example, the restyles here, the reflow here. We can see some GC. We can see when it's awake,

129
0:13:32.800 --> 0:13:38.680
or when it's idle. So we can see all stuff, more or less complicated. We want to make

130
0:13:38.680 --> 0:13:45.120
this view a bit simpler for web developers. Currently, you have still everything. And

131
0:13:45.120 --> 0:13:49.080
you need to probably ignore part of this and just focus on what's important for you, like

132
0:13:49.080 --> 0:13:58.080
DOM events or restyles and graphic stuff. But it gives a quite... You get all the stuff

133
0:13:58.080 --> 0:14:03.440
here. So you can dive into how Firefox works. You get the animation stuff. I don't have

134
0:14:03.440 --> 0:14:11.720
animations here, but you can see CSS animation. You can see the target of this event. So yeah.

135
0:14:11.720 --> 0:14:21.880
Those are pretty interesting. There are limits. As I said earlier, you're measuring on your

136
0:14:21.880 --> 0:14:26.760
own computer, and this also has drawbacks. Your computer, as a developer, usually it's

137
0:14:26.760 --> 0:14:34.840
very, very performant. You have the best CPU, and you have a sheet load of memory. And so

138
0:14:34.840 --> 0:14:39.040
this means that the performance on your computer might be different than the performance on

139
0:14:39.040 --> 0:14:47.080
your user's computer. And also just the act of profiling itself can skew the results.

140
0:14:47.080 --> 0:14:53.820
Because by inserting markers, for example, we need to lock the memory in some place to

141
0:14:53.820 --> 0:14:58.640
insert the data there, and we need to capture the stack sometimes. And this takes a lot

142
0:14:58.640 --> 0:15:07.120
of time. And so that can skew the results. We try it to be constant override, but it

143
0:15:07.120 --> 0:15:12.440
starts always the case. So there are limits. And you need to sometimes take a step back.

144
0:15:12.440 --> 0:15:16.760
Sometimes what you're looking at, it's not an absolute truth, right? It can be... Yeah.

145
0:15:16.760 --> 0:15:21.240
It's just a tool again. It's not absolute truth. You can take a step back. Maybe what

146
0:15:21.240 --> 0:15:29.320
I'm seeing is not exactly the truth. Yeah. That's about it. So more and more about the

147
0:15:29.320 --> 0:15:41.280
UI now. I will show you how we can navigate in this UI. So you can put that full screen.

148
0:15:41.280 --> 0:15:49.600
It's not this one. Yeah. Full screen. And zooming a bit. Okay. Come back at the first

149
0:15:49.600 --> 0:15:57.680
one. Okay. So what we have at the top... What we have at the top... I can't use the laser

150
0:15:57.680 --> 0:16:02.000
because I have to use the laser that reloads everything on this computer. So I don't use

151
0:16:02.000 --> 0:16:06.560
the laser. I use my finger. So at the top here, you have what we call the timeline.

152
0:16:06.560 --> 0:16:11.280
It's a chronological view of what's happening. At the top, you can see the screenshots. You

153
0:16:11.280 --> 0:16:18.240
can even hover them and get to see what's happening. So here I was on the first tab,

154
0:16:18.240 --> 0:16:22.640
and then I go to the second tab, and here I'm scrolling them, scrolling it and panning

155
0:16:22.640 --> 0:16:29.040
it. And yeah. That makes it possible visually to see what's happening and what was your

156
0:16:29.040 --> 0:16:34.120
scenario. And then you have a bunch of tracks here that are interesting. The first one here

157
0:16:34.120 --> 0:16:39.600
is the parent process. This is the process that is for the UI of Firefox. That's not

158
0:16:39.600 --> 0:16:44.960
very interesting in your case. There is also the localhost here. This is localhost because

159
0:16:44.960 --> 0:16:52.160
I was running my UI on the localhost so that I could get the name of the functions. They

160
0:16:52.160 --> 0:16:56.560
are not minified because we don't support source maps yet. That will happen hopefully

161
0:16:56.560 --> 0:17:01.400
this year. But currently, we're not supporting that. So if we want to see the functions I'm

162
0:17:01.400 --> 0:17:07.240
profiling on the development version of our application, which also has some implications

163
0:17:07.240 --> 0:17:11.240
because, of course, the development version does use the development version of React.

164
0:17:11.240 --> 0:17:16.440
And development version of React is slower than the production version of React. So again,

165
0:17:16.440 --> 0:17:21.640
taking a step back is always a good idea. Knowing that, we can dive into what's happening.

166
0:17:21.640 --> 0:17:26.360
So I can dive into this part because that's where things are happening, right? There is

167
0:17:26.360 --> 0:17:34.360
nothing elsewhere. So here you have what we call the category graph because the colors

168
0:17:34.360 --> 0:17:40.080
might correspond to some categories. Like the blue is dumb stuff. Yellow is JavaScript

169
0:17:40.080 --> 0:17:46.360
stuff. So here we can see that we don't do a lot of JavaScript. We mostly do a lot of

170
0:17:46.360 --> 0:17:52.120
something else. So dumb, in this case, is Canvas stuff. I will switch to JavaScript

171
0:17:52.120 --> 0:17:59.120
actually. Yeah. And then we see that we are doing the field stack stuff. So we see the

172
0:17:59.120 --> 0:18:04.840
stack when we hover, right? So we see this is a full stack of React sheet stuff. And

173
0:18:04.840 --> 0:18:11.640
then at the end, we just call field rect on the Canvas API. That's where we are here.

174
0:18:11.640 --> 0:18:17.360
And so I can hover and have just a sense of what's happening. Also, I'm also setting field

175
0:18:17.360 --> 0:18:26.440
style here, for example. And I can click there and just select whatever is below. So this

176
0:18:26.440 --> 0:18:31.720
is basically a way to navigate into this profile. There is a red stuff here. The red stuff means

177
0:18:31.720 --> 0:18:39.000
we spend more than 50 milliseconds on waiting on the browser to catch up. That's probably

178
0:18:39.000 --> 0:18:45.440
the path where we want to zoom in, by the way. So we can do that. I can click there.

179
0:18:45.440 --> 0:18:55.840
I can zoom in here. And I can look at what's below. So below is what you can see. So there

180
0:18:55.840 --> 0:19:01.160
are a bunch of tabs. The first one is the code. We already explained you a bit of that.

181
0:19:01.160 --> 0:19:07.040
Then there is a flame graph. I can show the flame graph by clicking. It's better. Right?

182
0:19:07.040 --> 0:19:14.400
This is something I was showing up earlier. So I can also hover and see what was the stack

183
0:19:14.400 --> 0:19:21.560
and have an idea of what's happening here. The stack chart is chronological way of looking

184
0:19:21.560 --> 0:19:29.160
at your data. So here we can see, for example, I think we can see that we're rendering twice,

185
0:19:29.160 --> 0:19:36.160
I think, for example. So we're doing twice the same thing. And I think we see that more

186
0:19:36.160 --> 0:19:43.960
here. Like for one mouse move here, I have two render here. So that's how markers are

187
0:19:43.960 --> 0:19:48.080
handy, all right? You can hear it. It's clear. It's clear that for one mouse move, we do

188
0:19:48.080 --> 0:19:57.040
two render. And we shouldn't do that. So I guess I fixed my program here. I need to route

189
0:19:57.040 --> 0:20:01.240
to... So then I need to look at the code. Of course, that doesn't solve everything. But

190
0:20:01.240 --> 0:20:06.160
I have an idea where to look at my code. It means probably that I changed some state and

191
0:20:06.160 --> 0:20:12.440
some React component and that does a new render. So we need to look at the code then and see

192
0:20:12.440 --> 0:20:17.720
what's going on. Because this is just a tool. This doesn't solve everything. But that saves

193
0:20:17.720 --> 0:20:30.200
a shitload of time to find the right data. So let's come back at the slides. Okay.

194
0:20:30.200 --> 0:20:39.200
Some more advanced topics now. We also do... So the advanced topics are less exposed for

195
0:20:39.200 --> 0:20:45.000
a reason because they're also less finished, less polished. You can enable this stuff from

196
0:20:45.000 --> 0:20:50.360
the edit settings button that I was showing earlier. And one thing you can do is memory

197
0:20:50.360 --> 0:20:54.560
allocations. So we have two types of instrumentation for that. And I think this is working only

198
0:20:54.560 --> 0:21:02.920
in Firefox. One of them is you can see every allocation is happening in Firefox. Allocations

199
0:21:02.920 --> 0:21:08.680
and deallocations and things that are written that are not deallocated but they should.

200
0:21:08.680 --> 0:21:13.920
So you can see all these and where they were allocated to. And also another one is the

201
0:21:13.920 --> 0:21:18.840
JavaScript allocation. And that works also in Redis, I think. So you can have a look

202
0:21:18.840 --> 0:21:22.020
at the documentation here.

203
0:21:22.020 --> 0:21:26.680
The one thing that could be interesting for you is we have an importer for Chrome and

204
0:21:26.680 --> 0:21:32.880
Node also. So you can take the JSON of Chrome, put that in the profiler from the profiler

205
0:21:32.880 --> 0:21:39.180
homepage, and then you can do all the things I was showing you earlier. You can share it.

206
0:21:39.180 --> 0:21:46.440
You can zoom in maybe better than in the UI of Chrome and use some transform that I didn't

207
0:21:46.440 --> 0:21:52.120
explain today. But advanced stuff you can do with the UI we do, that Chrome counts.

208
0:21:52.120 --> 0:21:57.440
And that's a parenthesis. Chrome tools are also very good. And that provides a different

209
0:21:57.440 --> 0:22:02.680
angle to your application. So because it's a different browser engine. So on Firefox

210
0:22:02.680 --> 0:22:07.760
and on Chrome, maybe it makes sense that they don't work the same. So they won't show the

211
0:22:07.760 --> 0:22:13.320
same thing. That's interesting to use both tools. And the one in other browsers too.

212
0:22:13.320 --> 0:22:18.840
But you can import in Node tool and share with your colleagues. That's pretty interesting.

213
0:22:18.840 --> 0:22:24.360
And you can also compare profiles. So there are some documentation in Node docs. So that

214
0:22:24.360 --> 0:22:32.760
makes it possible to see the impact of a change. Like you think you fixed a problem, you can

215
0:22:32.760 --> 0:22:38.040
compare the profile before and after and maybe check that you actually fixed your problem.

216
0:22:38.040 --> 0:22:42.340
Because as I said earlier, you need to measure. Sometimes you think you fixed it and you didn't.

217
0:22:42.340 --> 0:22:46.880
Or maybe you fixed one part of it. Like you fixed one state change. But there was another

218
0:22:46.880 --> 0:22:58.320
one elsewhere. And so there is still an update happening. So my conclusion now. Again, the

219
0:22:58.320 --> 0:23:04.040
most important thing is measure don't guess. I think you will remember this sentence. This

220
0:23:04.040 --> 0:23:10.840
is just a tool in your toolbox. And yeah, sometimes you need to take a step back. You

221
0:23:10.840 --> 0:23:16.880
can use a profiler to debug. I don't think it's much on that. But because you can instrument

222
0:23:16.880 --> 0:23:21.480
your code, you can also use it to just debug your code. It's not just for performance.

223
0:23:21.480 --> 0:23:28.180
You can just get a view of what your program looks like. What's happening in your program.

224
0:23:28.180 --> 0:23:31.800
And finally, you can share profiles with your team. Especially when you're distributed,

225
0:23:31.800 --> 0:23:36.760
like we are at Mozilla. You can share it, put it on metrics or ISC or whatever things

226
0:23:36.760 --> 0:23:46.440
you're using. And go to a Zoom call and talk about that together. And thank you for being

227
0:23:46.440 --> 0:24:00.920
here at that time of the Sunday. So you can find a Firefox profiler website here. Documentation

228
0:24:00.920 --> 0:24:07.000
also here. We have a metrics channel. If you have questions, if you have a question about

229
0:24:07.000 --> 0:24:12.200
a profile you want to ask or help to analyze it, come here. Ask us. We will gladly help

230
0:24:12.200 --> 0:24:17.920
you. And this slide you can find them here with this QR code. So happy to answer questions

231
0:24:17.920 --> 0:24:21.480
now. If you have questions. Thank you. So the microphone is here. There

232
0:24:21.480 --> 0:24:30.280
is a question there. I am very curious how you ensure security of the profile information.

233
0:24:30.280 --> 0:24:36.480
Because if I am on my usual admin account and I am debugging and all the network information

234
0:24:36.480 --> 0:24:40.960
is there, it will have all the tokens and everything. All the API responses. Probably

235
0:24:40.960 --> 0:24:47.760
half the API keys because I'm debugging stuff. And somebody nefarious with a strong Russian

236
0:24:47.760 --> 0:24:54.360
accent could be waiting and just iterating over all the possible URLs all the time. And

237
0:24:54.360 --> 0:24:59.520
how do you deal with that? So we, so the question, let me refer to the

238
0:24:59.520 --> 0:25:06.520
question. What about the security? Because you can have API keys in the capture data.

239
0:25:06.520 --> 0:25:13.080
Yeah. Right. For example. So yes, that happens. But you can, when you share a profile, you

240
0:25:13.080 --> 0:25:18.040
can click the, uncheck the thing, include URLs and that will remove everything related

241
0:25:18.040 --> 0:25:23.640
to URLs. So you won't have that anymore. We don't capture our headers and all that currently.

242
0:25:23.640 --> 0:25:28.720
We just capture the URLs. So if you remove. Even in the network configuration?

243
0:25:28.720 --> 0:25:34.840
Yeah. Okay. Okay. So it's not like the normal.

244
0:25:34.840 --> 0:25:41.840
Thanks for the talk. Small question. I believe there is this kind of the same tool in the

245
0:25:41.840 --> 0:25:46.880
performance tab of the Firefox developer edition DevTools. Is there any difference between

246
0:25:46.880 --> 0:25:51.480
the two programs? Good question. I wanted to mention that I

247
0:25:51.480 --> 0:25:57.880
forgot. There used to be a performance panel in DevTools. We removed it. Now it's been

248
0:25:57.880 --> 0:26:02.760
replaced by this one. But we still have a performance panel in the DevTools. The same

249
0:26:02.760 --> 0:26:10.920
thing except that when you open your DevTools, you have some overhead. So our recommendation

250
0:26:10.920 --> 0:26:17.000
is that you use the popup like I've shown here. Okay. So general recommendation, use

251
0:26:17.000 --> 0:26:22.400
the profile, the external profile. Okay. Yeah. You can have to profile your Firefox

252
0:26:22.400 --> 0:26:28.200
on the way and you can profile remotely like that using the DevTools.

253
0:26:28.200 --> 0:26:32.600
Small other question. Are there plans to add support for like flame graphs generated from

254
0:26:32.600 --> 0:26:38.720
perf, for example, for native applications just to use it as a kind of a viewer for other

255
0:26:38.720 --> 0:26:43.280
perf not related to the web? Yes. So we have an importer for Linux perf.

256
0:26:43.280 --> 0:26:48.040
Actually, we have some documentation about that. There is also the fantastic tool by

257
0:26:48.040 --> 0:26:56.920
Marcus, which is somewhere here. Called Simply. That is very well integrated with the profiler

258
0:26:56.920 --> 0:27:04.800
to profile native applications to. So it's called Simply S-A-M-P-E-P-L-Y. You can compile

259
0:27:04.800 --> 0:27:12.960
it on your computer. It's made in Rust. And this is just an amazing tool to profile your

260
0:27:12.960 --> 0:27:20.560
native applications to. So you can try that. Hello. It is the way to profile a full stack

261
0:27:20.560 --> 0:27:29.960
application. I mean the front end and the back end in the same time.

262
0:27:29.960 --> 0:27:39.400
You can't do that in the same time currently. What you can do is you can profile with, of

263
0:27:39.400 --> 0:27:43.440
course, the full stack. So it's probably not in back end maybe.

264
0:27:43.440 --> 0:27:47.920
Not on Python. Or Python. So there is a tool called Function

265
0:27:47.920 --> 0:27:53.640
Trace that I don't know well that is using the FIFR profiler to profile Python applications.

266
0:27:53.640 --> 0:27:59.320
I don't know much about that. So I don't want to say too much things about that. So currently

267
0:27:59.320 --> 0:28:05.600
we can't do what you're saying directly. So sorry.

268
0:28:05.600 --> 0:28:10.800
Last question and then we'll close the room after, of course, all of us pick up all the

269
0:28:10.800 --> 0:28:17.800
trash that would be left if any. Thank you for the talk. Is there any plans

270
0:28:17.800 --> 0:28:22.960
to add support for importing P-prof files, which like some profilers output?

271
0:28:22.960 --> 0:28:31.240
Can you repeat that again? Sorry. Are there any plans to add support for P-prof files,

272
0:28:31.240 --> 0:28:37.680
which like for instance Go produces as an output of the profiler?

273
0:28:37.680 --> 0:28:43.240
You mean to have output of, no, I think I didn't get the question. Sorry.

274
0:28:43.240 --> 0:28:47.720
The output like the P-prof file format, which is used for profiling.

275
0:28:47.720 --> 0:28:51.800
We're looking at P-profs with this viewer. Okay.

276
0:28:51.800 --> 0:28:59.640
We don't have really a plan, but it's easy to, I mean easy. It's not very easy, but it's

277
0:28:59.640 --> 0:29:04.600
possible to write converters for our format. The format is very well documented.

278
0:29:04.600 --> 0:29:12.840
So we have converters for Linux P-prof, for Valgrants for Mac with DHAT, I think, for

279
0:29:12.840 --> 0:29:20.520
Art Trace for Chrome. And currently that's all, but we also have a Next-Time Converter

280
0:29:20.520 --> 0:29:27.400
for ETW from Windows and for I think Gper for GVM stuff.

281
0:29:27.400 --> 0:29:34.880
So it's possible to do converters. We just need somebody to do it.

282
0:29:34.880 --> 0:29:39.720
But if there is enough interest, maybe we can look into it or at least help somebody

283
0:29:39.720 --> 0:29:44.040
do it. Thanks again.

284
0:29:44.040 --> 0:29:47.480
And I don't know if you're going to be hanging around outside if you want to chat.

285
0:29:47.480 --> 0:29:49.480
And there are lots of stickers. And there are stickers.

286
0:29:49.480 --> 0:29:50.480
Thank you.

287
0:29:50.480 --> 0:29:57.480
Thank you.


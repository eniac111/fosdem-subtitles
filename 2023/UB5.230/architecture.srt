1
0:00:00.000 --> 0:00:11.640
All right. Welcome, everyone. We're going to go. Yeah, it's four. So we did kind of

2
0:00:11.640 --> 0:00:15.240
a dry run this morning and we realized that there's too much content. So we're going to

3
0:00:15.240 --> 0:00:20.280
have to skip it. We're going to do the introduction. It's going to be very quick. So this is where

4
0:00:20.280 --> 0:00:24.520
we work. It's called Mirai. Blah, blah, blah. Connect to the website. You're going to see

5
0:00:24.520 --> 0:00:30.640
what we do. We do basically consultancy on a number of different clients on development,

6
0:00:30.640 --> 0:00:37.200
architecture, digitalization, and so on and so forth. This is us. You can tell who's who.

7
0:00:37.200 --> 0:00:42.640
These are our Twitter handles. And this is the Twitter handle of Mirai. If you like to

8
0:00:42.640 --> 0:00:50.120
talk or if you don't like to talk, just be free to share on Twitter. What we're going

9
0:00:50.120 --> 0:00:56.240
to talk about today. So this is the result of a number of lessons learned that we had

10
0:00:56.240 --> 0:01:00.560
on a number of projects where we tried to solve a problem that we see coming up over

11
0:01:00.560 --> 0:01:08.240
and over again. So it's just we just took stock of the situation. We saw what was around

12
0:01:08.240 --> 0:01:12.000
all the mistakes that we made and we kind of condensed it into a presentation that we're

13
0:01:12.000 --> 0:01:16.920
going to give to you. So this is by no means an idea of giving you best practices of any

14
0:01:16.920 --> 0:01:21.440
sort because there's a lot of context that goes behind this kind of problems. But it's

15
0:01:21.440 --> 0:01:26.800
just the way we are approaching the problem, the way we are analyzing the problem right

16
0:01:26.800 --> 0:01:31.840
now and the way we are approaching it. And we're going to talk about this idea of digital

17
0:01:31.840 --> 0:01:36.280
experience platform. You will see that like behind the name there is a thing that you

18
0:01:36.280 --> 0:01:41.320
will know that is this idea that you start to have technical ecosystem that are more

19
0:01:41.320 --> 0:01:45.880
and more complex and this technical ecosystems are done by a number of systems that need

20
0:01:45.880 --> 0:01:50.400
to integrate together and they need to communicate together and they need to give back to the

21
0:01:50.400 --> 0:01:55.520
user in some form or another on one channel or another a number of information, a number

22
0:01:55.520 --> 0:02:02.680
of capabilities and interaction. So that said, what is the state of the art? What is the

23
0:02:02.680 --> 0:02:10.120
thing that is the trendy thing right now? It's kind of synthesized but this idea of

24
0:02:10.120 --> 0:02:16.120
the Mac kind of technologies, there's an organization behind it, you may know it about

25
0:02:16.120 --> 0:02:24.080
it or not, but it's this idea that the new architectures have kind of four major characteristics.

26
0:02:24.080 --> 0:02:28.480
They're based on microservices. We're not going to go into the debate of the microservice,

27
0:02:28.480 --> 0:02:34.880
what micro means and why do we need microservices or not. They're API first, they're cloud native

28
0:02:34.880 --> 0:02:39.800
and they're headless. We talked about headless. I think Alexander talked about headless on

29
0:02:39.800 --> 0:02:44.640
material UI in the previous talk. I think that the two that you have to retain for this

30
0:02:44.640 --> 0:02:50.480
talk are these ones. That you have systems where you don't necessarily care how the information

31
0:02:50.480 --> 0:02:55.200
or how the capabilities are going to be exposed because it can be on a mobile app or it can

32
0:02:55.200 --> 0:03:01.000
be on a web application or it can be on a kiosk that you have on a store or on something

33
0:03:01.000 --> 0:03:06.240
else, you just don't care. The system is capable of giving you this kind of capabilities and

34
0:03:06.240 --> 0:03:11.880
data regardless of the channel that you use and how do they do that precisely by having

35
0:03:11.880 --> 0:03:16.440
an API first approach. You don't have the interface, you have the capabilities, you

36
0:03:16.440 --> 0:03:22.080
can call any kind of HTTP REST service that is behind, the capabilities is there and then

37
0:03:22.080 --> 0:03:26.760
you take care of the visualization or the user interface or the user experience somewhere

38
0:03:26.760 --> 0:03:34.960
else. Am I going too fast? No? That's okay. All right.

39
0:03:34.960 --> 0:03:40.480
There's a kind of a yes but kind of situation. Let's see that you start from a simple website.

40
0:03:40.480 --> 0:03:45.200
This is what happens most of the time. You have a relatively complicated kind of interaction

41
0:03:45.200 --> 0:03:51.040
website. You choose your framework. Here you have React. You may have a number of others.

42
0:03:51.040 --> 0:03:56.120
We basically don't care but that's kind of one of the possible starting points. You say,

43
0:03:56.120 --> 0:04:01.560
okay, I would like to manage this content. What you do, you add a content management

44
0:04:01.560 --> 0:04:07.120
system. That is okay. You connect your content management system to your front end, off you

45
0:04:07.120 --> 0:04:11.720
go, now you have a number of editors that can manage your content. All right. Sounds

46
0:04:11.720 --> 0:04:17.800
good. Then you want to add some commerce because the company is doing good. They want to add

47
0:04:17.800 --> 0:04:25.000
commerce capabilities. Very good. You have a commerce engine that is headless, API first.

48
0:04:25.000 --> 0:04:29.200
You can add your commerce engine and then you start to connect it to your front end.

49
0:04:29.200 --> 0:04:35.400
But you also have to connect it to your CMS because they need to share certain kind of

50
0:04:35.400 --> 0:04:42.720
data. This is the situation that you have. Then you have a lot of products. You start

51
0:04:42.720 --> 0:04:46.800
to need a digital asset management because you need assets for your mobile. You need

52
0:04:46.800 --> 0:04:52.880
assets for your kiosk. You need assets for the web. You can't store them here because

53
0:04:52.880 --> 0:05:00.000
they're not made for this job. They start to see a bit their constraints. You connect

54
0:05:00.000 --> 0:05:04.440
the dam and you connect it with the commerce. You connect it with the CMS. Then you connect

55
0:05:04.440 --> 0:05:09.680
it with your front end as well because it's the ultimate client. Okay. You kind of see

56
0:05:09.680 --> 0:05:16.520
where I'm going with this. Search. You start to have a huge catalog. You need to add search.

57
0:05:16.520 --> 0:05:21.840
You add Algolia or Elasticsearch. We don't care. It's the same kind of concept behind.

58
0:05:21.840 --> 0:05:26.120
Then you connect Algolia and you need to connect it with your commerce layer. You need to connect

59
0:05:26.120 --> 0:05:32.520
it with your CMS. You need to connect it with your front end. Off we go. Then you have a

60
0:05:32.520 --> 0:05:36.680
Netlify because why not? Then at some point somebody says, you know what? I would like

61
0:05:36.680 --> 0:05:40.480
to do some customer relationship management with the data that I have. Then you start

62
0:05:40.480 --> 0:05:47.760
to add the CRM. That's where you end up with the situation.

63
0:05:47.760 --> 0:05:52.080
Now if we remove all the capabilities that are provided by the system, which is a huge

64
0:05:52.080 --> 0:05:56.720
step forward because before you had to do all kinds of plumbing behind. You need to

65
0:05:56.720 --> 0:06:02.640
de-connect your user interface from the system behind. It was very tedious and very complicated.

66
0:06:02.640 --> 0:06:09.000
Now we have all those pieces of software that are capable of doing this by themselves where

67
0:06:09.000 --> 0:06:14.840
you're basically left with this. I was finding it funny. I don't know if you're still here.

68
0:06:14.840 --> 0:06:20.720
I was saying in the previous talk, you go headless and you just remove the problem.

69
0:06:20.720 --> 0:06:24.680
You would see that there's kind of a law of conservation of complexity. You just don't

70
0:06:24.680 --> 0:06:30.840
remove the problem. You just shift it somewhere else. Someone or something still needs to

71
0:06:30.840 --> 0:06:35.200
take care of this. Then of course because we're not stupid and we're good intelligent

72
0:06:35.200 --> 0:06:38.840
developer, what we say is like, okay, this is not possible. We're going to create something

73
0:06:38.840 --> 0:06:44.000
that is going to aggregate this all together. We basically create a layer. This complexity

74
0:06:44.000 --> 0:06:48.960
is still here. You cannot have a tension between the fact of having these Lego blocks and

75
0:06:48.960 --> 0:06:53.480
the modularity and the fact that someone or something still needs to orchestrate all this

76
0:06:53.480 --> 0:07:02.160
kind of stuff. It can get very, very messy and very, very complicated very, very quickly.

77
0:07:02.160 --> 0:07:06.400
This is the first problem, kind of big problem that we were trying to address. The second

78
0:07:06.400 --> 0:07:11.360
kind of problem is that if you take kind of a random e-commerce kind of interface, what

79
0:07:11.360 --> 0:07:16.840
you start to see more and more is that before it was just a matter of your CMS and your

80
0:07:16.840 --> 0:07:22.440
commerce. You had the catalog and the basket. These were coming from the commerce system

81
0:07:22.440 --> 0:07:26.680
and then your content was coming from the CMS. What you start to see right now is that

82
0:07:26.680 --> 0:07:34.640
if you take all the blocks that compose, let's say, a fashion e-commerce, in the same blocks

83
0:07:34.640 --> 0:07:39.480
you have pieces of data that come from different systems and you need to aggregate those and

84
0:07:39.480 --> 0:07:44.680
you need to present them as if they were a unit because that's what the user cares about.

85
0:07:44.680 --> 0:07:48.440
I need to have a catalog and the catalog is normally coming from the search because the

86
0:07:48.440 --> 0:07:52.960
search is optimized so you don't ask it to the CMS and you don't ask it to the commerce

87
0:07:52.960 --> 0:07:57.880
because you want to do all sorts of categorization and classification. But then you don't show

88
0:07:57.880 --> 0:08:02.480
the ideas of the catalog. You show the product and the product comes from the image from

89
0:08:02.480 --> 0:08:07.200
the dam, some content from the CMS and the SKUs from the commerce system.

90
0:08:07.200 --> 0:08:12.400
So, again, you see where we're going with this, it can get very complicated very quickly.

91
0:08:12.400 --> 0:08:16.880
And the problem for us as developers behind is that every time that you need to change

92
0:08:16.880 --> 0:08:23.560
something here, you need to make sure that everything stays coherent and consistent behind

93
0:08:23.560 --> 0:08:29.000
the scenes. And again, this can get very tedious very quickly.

94
0:08:29.000 --> 0:08:34.840
So I hope what I said kind of made sense as an introduction for the context. You raise

95
0:08:34.840 --> 0:08:41.200
your hand if that was not the case. Okay. Everything is clear? Sounds good. I was getting

96
0:08:41.200 --> 0:08:46.840
scared. Okay. So we have the problem. Now what? And that's where I hand it over to Bhuva

97
0:08:46.840 --> 0:08:51.400
that is going to show you what is the situation that we're applying right now.

98
0:08:51.400 --> 0:08:57.400
So full disclaimer, it's an approach that I'm showing you. It's not simple, it's an

99
0:08:57.400 --> 0:09:04.520
exploration. So be with us. It's such perfect. And just trying stuff and trying to see where

100
0:09:04.520 --> 0:09:10.600
we can solve this problem. So first thing that I'm asking you, would you tell me which

101
0:09:10.600 --> 0:09:18.480
framework I'm using? So basically I'm running on 4200 and 4201. And if you look at the two

102
0:09:18.480 --> 0:09:22.720
websites, okay, we're in JavaScript. I have to make a joke about CSS. I'm really bad in

103
0:09:22.720 --> 0:09:26.880
CSS. CSS is dark magic for me. So that's the reason why. Don't bother with the logo. It's

104
0:09:26.880 --> 0:09:33.040
normal. It's okay. Just focus on the product here. Could you tell me on the right or left,

105
0:09:33.040 --> 0:09:43.120
where you are? Who is build with next and the other one is build with next. No? No?

106
0:09:43.120 --> 0:09:54.960
Okay. So let's see on how we... Here. So I will just open it. So if I do an inspect,

107
0:09:54.960 --> 0:10:03.280
if I scroll a bit, so one of them is based on next. Okay? And the second one is based

108
0:10:03.280 --> 0:10:16.440
on... because voila. Next. Okay? So you'll say why I'm asking that. So if I tell you

109
0:10:16.440 --> 0:10:24.880
this two page, use the same base has code, okay? And I just compile it and then I get

110
0:10:24.880 --> 0:10:31.920
a component that works for React, that works for Vue, and this is not a component. Okay?

111
0:10:31.920 --> 0:10:42.840
So do you know a tool that can do that? Nobody? Okay. So I tried. Okay. So let's go. So for

112
0:10:42.840 --> 0:10:47.480
this tool, I will be speaking about some tools that you are using to work with everything.

113
0:10:47.480 --> 0:10:53.840
So the first one is NX. So if you don't know NX, it's kind of like a tool that you can

114
0:10:53.840 --> 0:11:00.040
use to handle all your model repo. Okay? It's really a good tool because I don't want to

115
0:11:00.040 --> 0:11:04.480
set up Webpack guys or Vue or anything else. So I use this kind of tool to handle all the

116
0:11:04.480 --> 0:11:09.520
configuration. Just handling Webpack, handling Cypress, Storyblock, everything is handled

117
0:11:09.520 --> 0:11:14.160
by this tooling. Okay? I just use that plugin and then give you a good basic when you work

118
0:11:14.160 --> 0:11:21.240
with your team and really good standard. Okay? Second tool that we will be showcasing is

119
0:11:21.240 --> 0:11:26.440
Metasis. Metasis will be the basic of how we build a component. Like I said, it's an

120
0:11:26.440 --> 0:11:30.960
exploration. It doesn't solve everything, it's just a base. And we are trying to explore.

121
0:11:30.960 --> 0:11:38.240
So if someone knows something about Metasis, did you hear about it? No? Okay. So give you

122
0:11:38.240 --> 0:11:42.240
some context. Metasis is a kind of like a compiler, a component compiler, created by

123
0:11:42.240 --> 0:11:47.120
the builder IOT team. So builder IOT, they build kind of like a CMS that completely,

124
0:11:47.120 --> 0:11:52.680
I would say visual CMS, where basically they have a lot of history. They would like to

125
0:11:52.680 --> 0:11:58.520
support all the framework that we have in JavaScript. So it's a lot of frameworks. So

126
0:11:58.520 --> 0:12:01.760
they hire multiple people and then they're like, okay, guys, you're hiring too much people.

127
0:12:01.760 --> 0:12:06.000
Okay. Maybe you should find a way to be able to handle all this complexity. So they begin

128
0:12:06.000 --> 0:12:13.080
to create a compiler for components. So they use a common layer, like JS6, and then based

129
0:12:13.080 --> 0:12:19.000
with this common layer, they compile it to natively to React, Vue, as well, or like all

130
0:12:19.000 --> 0:12:24.080
bunch of stuff. Okay? Basically they take the approach of LLVM. So if you don't know

131
0:12:24.080 --> 0:12:28.480
about it, they take the same approach, having a common layer where we can target and then

132
0:12:28.480 --> 0:12:33.960
all the architecture can file for that. So we'll be using that. Frankly speaking, it's

133
0:12:33.960 --> 0:12:38.280
not perfect. It's really at the beginning. What's really nice with that, they are really

134
0:12:38.280 --> 0:12:42.840
pushing the boundary of that because all the SDK, so if you use builder IOT, basically

135
0:12:42.840 --> 0:12:47.680
you are using it to disunder the hood. So they use that to build all the SDK for the

136
0:12:47.680 --> 0:12:51.640
visual editor, like everything that you're using for React Vue is based on that. So it's

137
0:12:51.640 --> 0:12:57.280
not perfect yet. It's improving every time. But it gives you really kind of like a good

138
0:12:57.280 --> 0:13:01.720
code. I will not say it's perfect. A human will be better. Yeah, but at the end you win

139
0:13:01.720 --> 0:13:07.680
time and energy because you write once and you believe you are. Okay, it's a dream since

140
0:13:07.680 --> 0:13:13.200
like 20 years, I know, but voila. Every time, every 10 years we try to do it again and fail

141
0:13:13.200 --> 0:13:19.440
maybe, but voila, someone tried. Okay? So basically if you take back what Maurizio

142
0:13:19.440 --> 0:13:25.120
said, we are going on the headless. So our goal is really to reduce the friction. So

143
0:13:25.120 --> 0:13:29.600
we have multiple frameworks. It's really difficult to go on client and say, hey, you use React,

144
0:13:29.600 --> 0:13:34.200
you use Vue, you use Angular. Okay. And every time rebuilding the button, rebuilding the

145
0:13:34.200 --> 0:13:38.600
same thing. So trying to find like a common layer and using it as this, we can really

146
0:13:38.600 --> 0:13:43.440
focus on what I said most of the time, the presentation component. I don't mean like

147
0:13:43.440 --> 0:13:47.560
for really big components with charts. It's not mean for that. And don't try to do it.

148
0:13:47.560 --> 0:13:52.360
You'll be it hardly and you will hate it and you'll be like this is shit. Okay? It's really

149
0:13:52.360 --> 0:13:57.680
for I would say common component that you will have that will be really simple, mostly

150
0:13:57.680 --> 0:14:04.760
UI based, not too complex, but kind of complex for some stuff. So you can reuse. Basically

151
0:14:04.760 --> 0:14:08.760
it's your, if you're on React, they call it the presentation component. So we shouldn't

152
0:14:08.760 --> 0:14:14.680
say it anymore. Since then, it's bad, but voila, I use the term. Okay? So I will show

153
0:14:14.680 --> 0:14:21.760
you how we did it and what we have built all the advantage issues that I got about it.

154
0:14:21.760 --> 0:14:29.440
So ship. So I'm using upstone. Okay. And basically here on the left side, you can see I'm using

155
0:14:29.440 --> 0:14:35.240
a, it's just a standard, uh, which application on the next. So you have the app folder, the

156
0:14:35.240 --> 0:14:40.600
libs, and then all bunch of stuff that we have every time on every stuff. Okay. The

157
0:14:40.600 --> 0:14:45.040
libs contain all the kind of library. What's cool with enix? So you don't need to publish

158
0:14:45.040 --> 0:14:49.840
it. So you can really put it on the more repo. It under all the configuration. So when you

159
0:14:49.840 --> 0:14:53.840
import it in a react, it's basically user test path under the hood and make the magic

160
0:14:53.840 --> 0:14:59.280
on webpack. It just, it just works. Okay. It's kind of like dark magic, but it's not

161
0:14:59.280 --> 0:15:04.400
too complicated under the hood. It just test path and bring you for import into a webpack

162
0:15:04.400 --> 0:15:11.800
or vids. Okay. So basically we create a library, a core library, okay, using mitosis. Okay.

163
0:15:11.800 --> 0:15:16.200
So if you open here, you can see I have a core library. This is the mitosis. Why I call

164
0:15:16.200 --> 0:15:21.080
the core because it's the basic for everything, all the components we are using. Okay. Then

165
0:15:21.080 --> 0:15:26.000
I create a sub folder called the UI. UIs will be like all my target that I'm pushing for

166
0:15:26.000 --> 0:15:34.400
people. Okay. So I have the UI for react. Okay. And I have a guy for view. Okay. So let's

167
0:15:34.400 --> 0:15:40.320
first focus on the car. So on the car I have like a miss mitosis config. So basically it's

168
0:15:40.320 --> 0:15:46.120
a configuration layer where I basically set up how I want to target and how I want to

169
0:15:46.120 --> 0:15:50.640
compile everything. So you can see it's a bit messy because like I said, it's not perfect

170
0:15:50.640 --> 0:15:59.680
completely. You have some HKs. But behind it's just basically a config that you put

171
0:15:59.680 --> 0:16:04.840
and you say, okay, let me scroll, what do you explore? You put where you put your file,

172
0:16:04.840 --> 0:16:09.360
where you put overwrite, we'll put it after. And then the target is what we like to do.

173
0:16:09.360 --> 0:16:15.320
It gives you also some HKH. Like for example, you can set up if you want to compile to TypeScript,

174
0:16:15.320 --> 0:16:20.520
want to run feature already handling, like for example, how you want to handle a strict

175
0:16:20.520 --> 0:16:26.400
act and have like kind of like plugin system basically to help you to hook into the system

176
0:16:26.400 --> 0:16:31.280
like when decompile. Okay. It's really basic and it's not like a big compiler, just basic,

177
0:16:31.280 --> 0:16:37.760
but it's already to fix some stuff that's not perfect. Okay. Like if I go a bit here,

178
0:16:37.760 --> 0:16:42.160
like rec native, kweep, swalt, like as well, you can see here like, oh, shit, what this

179
0:16:42.160 --> 0:16:47.440
guy is doing? Like basically it's replacing stuff under the hood and patching stuff. Yeah.

180
0:16:47.440 --> 0:16:51.160
Sometimes you have to do it, but voila, it's just like to give you like extend where we

181
0:16:51.160 --> 0:16:55.280
can go. Most of the time you don't need that. This is really like HKs for them, but you

182
0:16:55.280 --> 0:17:01.280
have already code. Okay. So then you have the SRC. The SRC basically is just where we

183
0:17:01.280 --> 0:17:06.800
put all the code. So I will focus mostly on the component. So the convention is really

184
0:17:06.800 --> 0:17:13.520
straightforward. It's just you create a component basically with a dot light dot TS6 is a convention

185
0:17:13.520 --> 0:17:18.880
that will be every time pick automatically by the compiler and then recompile it to view

186
0:17:18.880 --> 0:17:23.560
or react. Okay. So basically here I'm just taking a simple component. This one it's more

187
0:17:23.560 --> 0:17:30.520
tricky. I will open another one. I will say easier. Not this one because this one is all

188
0:17:30.520 --> 0:17:36.560
low. Let's take this one. Okay. So here basically just under the hood is using like kind of

189
0:17:36.560 --> 0:17:44.200
like a JS6, but a more JS6 contrain. So if you know solid JS, you have to play with it.

190
0:17:44.200 --> 0:17:52.920
Not you. Basically solid. It's kind of like a react, which should have been if they write

191
0:17:52.920 --> 0:17:59.920
it now and basically to use like really a constraints JS6 system to make it more performant.

192
0:17:59.920 --> 0:18:05.100
And basically they kind of copy some stuff from solid. Like for example, if you want

193
0:18:05.100 --> 0:18:11.560
to do a maps, you don't do a maps like in React. Like it's just JavaScript. Yeah. Okay.

194
0:18:11.560 --> 0:18:17.720
We know it just JavaScript. Here you have to use the four component. Why? It's because

195
0:18:17.720 --> 0:18:22.880
it makes easier for the compilation basically to be able to say, okay, if I am using in

196
0:18:22.880 --> 0:18:29.960
view, I use a v4. If I'm in React, I use a map. If I'm in Angular, I use an ng4. Okay.

197
0:18:29.960 --> 0:18:32.760
So this reason why they create this contrain to make the compilation easier. If not, I

198
0:18:32.760 --> 0:18:38.960
have to play with the AST. So abstract syntax tree and just make the complexity increase.

199
0:18:38.960 --> 0:18:43.480
So try to make it simpler. Okay. And then they come with some common ground. Like for

200
0:18:43.480 --> 0:18:49.160
example, you store it just kind of like a hook. Basically this will be compiled to a

201
0:18:49.160 --> 0:18:54.960
new state or some similar in view. Okay. So to give you some rules that you have to respect,

202
0:18:54.960 --> 0:18:59.760
it's really strict. It's not easy at the beginning and that's make the complexity of using this

203
0:18:59.760 --> 0:19:04.280
kind of tool. Because you have to really think like when I say if I'm working in Java before,

204
0:19:04.280 --> 0:19:09.680
like an interface development way. Okay. What I mean by that, it's you have to think about

205
0:19:09.680 --> 0:19:15.440
the common ground between all the component and all the frameworks. You cannot just say,

206
0:19:15.440 --> 0:19:19.600
hey, I will write it like that. And basically this does not exist on the other component.

207
0:19:19.600 --> 0:19:24.040
Okay. Or it's not compatible. Okay. You have some degree of flexibility, but it's not every

208
0:19:24.040 --> 0:19:29.640
time the case. Okay. So you have to find really the common ground. But accept that. Okay.

209
0:19:29.640 --> 0:19:34.720
It's kind of like a just a react. Okay. With some stuff. Okay. So basically you get this

210
0:19:34.720 --> 0:19:39.400
component and it will be compiled and you can see it on the output folder here. It will

211
0:19:39.400 --> 0:19:45.600
be compiled automatically on react. So if I take the here, why I have client and server

212
0:19:45.600 --> 0:19:51.880
it because I'm already testing stuff. Whoa, five minutes. Okay. I have to go straight.

213
0:19:51.880 --> 0:19:57.480
So client basically is where we put all the normal component. So where it's when you do

214
0:19:57.480 --> 0:20:03.080
the C and so on and not speak about it. So component here, we have the future section.

215
0:20:03.080 --> 0:20:07.760
So basically it's really, I think this one under the hood, it's looks like really something

216
0:20:07.760 --> 0:20:13.080
that you should have written. Okay. The completion is a perfect, but it's going really well. The

217
0:20:13.080 --> 0:20:17.640
good thing with that, it's like it gives you also an escape age under the hood. Let's get

218
0:20:17.640 --> 0:20:22.760
it is the override system. So if some part of your application, you need to have like

219
0:20:22.760 --> 0:20:27.640
components that's not completely right. It's complicated. You can override it and how you

220
0:20:27.640 --> 0:20:31.120
do that. Basically it just follow the path here. And then you can say on the completion

221
0:20:31.120 --> 0:20:37.480
level when you meet this import, replace the file by this one. Okay. And here, for example,

222
0:20:37.480 --> 0:20:43.120
I do it for like headless UI. Okay. I say, okay, when someone needs the headless disclosure,

223
0:20:43.120 --> 0:20:48.040
basically under the hood is switching to headless UI. And because it was working both in a

224
0:20:48.040 --> 0:20:53.440
directed view, it works fine. Okay. When I have that, I could be completely automatically

225
0:20:53.440 --> 0:21:01.480
on my library here, UI and next. And basically I just create a library, simple library where

226
0:21:01.480 --> 0:21:06.200
the client and I do an export. Simple of that. This more I can take it and publish it in

227
0:21:06.200 --> 0:21:13.420
PM it works. Okay. Then that's, I take it and then I use it in my application directly.

228
0:21:13.420 --> 0:21:16.760
Thanks to Enix, I don't need to do like in PM blah, blah, blah. It's already handled

229
0:21:16.760 --> 0:21:24.080
automatically. So to give you an example on next.js on the page here, I have like my application.

230
0:21:24.080 --> 0:21:30.720
So basically I will introduce now the layer. So do you see here, we speak about the component,

231
0:21:30.720 --> 0:21:34.200
but now we need a layer because everything is connected. So we need a layer to be able

232
0:21:34.200 --> 0:21:38.680
to say, okay, I have a layer in common where I can connect everything and handle it. This

233
0:21:38.680 --> 0:21:44.240
layer is called uniform. Okay. It's a tool that we use and we explore a lot of the teams.

234
0:21:44.240 --> 0:21:52.320
So let me show you. So uniform is basically that. Okay. It's kind of like a visual editor

235
0:21:52.320 --> 0:21:57.360
that you can get. It's, it's such a complete CMS, but it's way more powerful than that

236
0:21:57.360 --> 0:22:01.340
where we can connect a lot of stuff. So here basically I'm connecting my next application

237
0:22:01.340 --> 0:22:07.080
directly with my component. I will show you in two minute and I'm also able to connect

238
0:22:07.080 --> 0:22:13.200
directly to data coming from multiple source if I want. So here, okay, to show you like

239
0:22:13.200 --> 0:22:20.440
the example. So here I have my site map. I have my, what I call like, if I could mesh

240
0:22:20.440 --> 0:22:26.200
it just an example. The effect you mesh basically it's connecting to, I hope it's not connecting

241
0:22:26.200 --> 0:22:33.520
to my CMS. Okay. And you can see here on the content level, I'm clicking on this one. Basically

242
0:22:33.520 --> 0:22:37.840
here we can see, provide me a component called loops that's allowed me to make reasonable

243
0:22:37.840 --> 0:22:43.800
stuff and then it's okay. The first component is the template. Okay. And the template I

244
0:22:43.800 --> 0:22:51.440
can say, okay, I want to connect it to something. The title, the title is connected to something.

245
0:22:51.440 --> 0:22:58.600
Okay. This here, what you see, it's a note from my API from storyboard. Okay. How I get

246
0:22:58.600 --> 0:23:07.800
that? I move uniform, come with a lot of stuff. First thing that you provide you is a component

247
0:23:07.800 --> 0:23:13.960
layer. Okay. All the components that you saw basically are created here. So you can take

248
0:23:13.960 --> 0:23:18.360
them, reuse them and use a building block like a CMS. Then with the component, you can

249
0:23:18.360 --> 0:23:23.840
call what you call a composition. Composition is basically just aggregation of your component

250
0:23:23.840 --> 0:23:28.680
or basically here are created pages. Okay. And then you have a third system called the

251
0:23:28.680 --> 0:23:34.160
data type. Data type is basically your injector. Okay. Do you see all these mess? So they provide

252
0:23:34.160 --> 0:23:40.240
your tool to be able to connect in one way in a standard way, every system that you want.

253
0:23:40.240 --> 0:23:47.320
Here I will show you with my CMS. So basically here I'm configuring my CMS and I can go and

254
0:23:47.320 --> 0:23:53.440
say, okay, I have multiple call and the call is really simple. Basically it's an HTTP request.

255
0:23:53.440 --> 0:23:58.160
I can say what is the name. I can say where I want. I can create variable that can be

256
0:23:58.160 --> 0:24:04.800
reused into the visual editor. And then here I can get that and connect everything. So

257
0:24:04.800 --> 0:24:10.560
when you sort a lot, two minutes ago, what I'm using is basically a connection with that.

258
0:24:10.560 --> 0:24:15.440
This gives you like the full extent completely when you have full power. But if you're lazy

259
0:24:15.440 --> 0:24:19.820
and sometimes you come with an integration that already built, they have some integration.

260
0:24:19.820 --> 0:24:26.640
One of them is you go here, have all these integration already available. You just plug,

261
0:24:26.640 --> 0:24:31.280
unplay and they provide you into your system. You connect, you have access, you put your

262
0:24:31.280 --> 0:24:36.840
credential and you're ready to go. Like for example here, I set up Shopify, blah, blah,

263
0:24:36.840 --> 0:24:42.320
blah, and voila, I will remove stuff. But basically here if I wanted I can connect Shopify,

264
0:24:42.320 --> 0:24:47.800
then basically it provides me information so I can just reuse and pick for example my

265
0:24:47.800 --> 0:24:54.420
product magically, automatically. And then I get one endpoint where I can get the data.

266
0:24:54.420 --> 0:24:59.680
One last thing that I would like to speak. Why this tool is also interesting is about

267
0:24:59.680 --> 0:25:04.200
personalization and testing. So it's already built into the system. Because it's the orchestration

268
0:25:04.200 --> 0:25:10.320
layer, you don't need to add like launch locally next to it because the handler did the personalization

269
0:25:10.320 --> 0:25:19.320
for you, the handler already did the ABI testing for you. Voila. Do you have a question?

270
0:25:19.320 --> 0:25:26.880
Before the question, we'll say thank you.


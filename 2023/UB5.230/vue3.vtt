WEBVTT

00:00.000 --> 00:13.400
Hello, everyone. Today I will talk to you about migrating your old project to, of course,

00:13.400 --> 00:20.480
Python. No, just kidding. How many of you are using Python for work? Okay. We are in

00:20.480 --> 00:26.080
the wrong room. We need to go downstairs. So I will talk to you about migration of your

00:26.080 --> 00:34.440
Vue.js project from version 2 to version 3. And this is not working. Great. Okay. I am

00:34.440 --> 00:41.320
Denly. I work as food stack developer with JavaScript and Python. Not go. Go. It's fake

00:41.320 --> 00:50.000
news. And work as front-end developer also using, of course, Vue.js. And let's start

00:50.000 --> 00:59.640
with a quick walkthrough of the Vue.js versions. They released version 2.6 in 2029, a lot of

00:59.640 --> 01:08.760
time ago. Then in 2020, they released version 3, 3.1, 3.2, one year later. And then last

01:08.760 --> 01:15.760
year in February, version 3 became the new default. So when you install, when you run

01:15.760 --> 01:23.080
npm install Vue.js, you install the version 3 now. And then in July 2022, they released

01:23.080 --> 01:31.360
version 2.7 in maintenance mode. So they want release. They should release a new version

01:31.360 --> 01:39.360
of Vue 2. And it will reach the end of life in the end of this year. So 2023, it will

01:39.360 --> 01:47.200
be the end of Vue.js 2. Then let's do a quick recap of options API. Options API are working

01:47.200 --> 01:55.960
with Vue.js 2 as well as Vue.js 3. And you simply can define a data function. Inside

01:55.960 --> 02:02.640
that you can return an object. And that object will be exposed in the template as well as

02:02.640 --> 02:09.320
methods so you can define functions. And that functions will be exposed to the template

02:09.320 --> 02:17.760
as well. Then again 2020, they officially announced the user history with composition

02:17.760 --> 02:23.600
API, scripts set up, experimental at that moment, but now it's official. And I know

02:23.600 --> 02:29.880
all of you are sad about this. No Internet Explorer support, but now it's dead, so who

02:29.880 --> 02:38.120
is it? Then at that time I was like, oh, wow, nice. Let's drop Vue.js 2 and move everything

02:38.120 --> 02:47.360
to Vue.js 3. Well, it wasn't so simple. So I started to check about the new script set

02:47.360 --> 02:54.960
up in composition API. So you can define a set up function. And if you return a whole

02:54.960 --> 03:00.520
constants and function you define in there, they will be automatically exposed to the

03:00.520 --> 03:08.320
template. So not so clear, but nice, nicer than before. So you can compress constant

03:08.320 --> 03:16.640
and function of a single piece of logic in the component and then return them. So if

03:16.640 --> 03:23.820
you want to use this in Vue.js 2.6, you need to install Vue composition API and use it

03:23.820 --> 03:31.280
like this in this example, importing from composition API, all ref computed and all

03:31.280 --> 03:41.280
functions and you can use a kind of set up script like in Vue.js 3. But spoiler alert,

03:41.280 --> 03:49.840
your test will break because, well, easy fix, you need to use Vue composition API also in

03:49.840 --> 03:57.520
test files, in Vue.js or in the local Vue instance you are using in test. So, well,

03:57.520 --> 04:05.320
easy fix for now. Then the best part about this is the composition API plus script set

04:05.320 --> 04:11.600
up. So you can define a script set up in your single file component and defining constants

04:11.600 --> 04:18.880
and functions. They will be automatically exposed to the template. So, well, is it clearer

04:18.880 --> 04:29.120
than the set up script in my opinion? And everything is clearer and neat. So another

04:29.120 --> 04:37.880
big news, 2022, they released Vue 2.7 with support for composition API and again partial,

04:37.880 --> 04:47.360
but nice, script set up. So again, I was like, whoa, great, let's try Vue.js 2.7 before everything

04:47.360 --> 04:54.720
else. And yeah, it was really nice. Now it's working with basically all components and

04:54.720 --> 05:01.840
you can look at the documentation for this. So you can upgrade your Vue.js dependency

05:01.840 --> 05:13.280
to 2.7 and it should be it. It should work. And you can change in your 2.7 projects your

05:13.280 --> 05:20.240
script set up like this. So removing the script, changing to script step and changing it like

05:20.240 --> 05:28.800
that. And if the component is not too complicated, well, everything should work as expected and

05:28.800 --> 05:38.320
it will be ready for Vue.js 3. Yes. Now we can git commit push and deploy to production.

05:38.320 --> 05:46.880
Well maybe not, because if you are using Vue router, then it will break. So you need to

05:46.880 --> 05:54.400
use the new version of Vue router at least 3.6.5. And you need to import use route and

05:54.400 --> 06:01.600
use router like this. And instead of using this dot route and router, you need to use

06:01.600 --> 06:12.640
route and route like this. Pretty much the same for Vuex store. Well, not the same, but

06:12.640 --> 06:20.080
you need to import your store from your definition and use the store like this. So store.state.property

06:20.080 --> 06:33.120
name and not this.store anymore. Then everything is great. But another problem is test. Well,

06:33.920 --> 06:47.520
test will return a lot of errors because of this Vue.js compatibility with jest.

06:47.520 --> 06:57.280
Jest is not working with the version installed with the UCLI. That is 27 because they released

06:57.280 --> 07:09.200
in September 2022. Support for that, but just for jest 29. So not a good news.

07:09.200 --> 07:18.400
But we have a workaround for this. We can remove the usage of Vue.cliservice and use jest directly.

07:19.120 --> 07:30.160
It's not so nice to do. We need to copy and paste the default jest.config file from the plugin

07:30.160 --> 07:40.320
in use by Vue.cli plugin in our jest.config file. And then we need to update our package.json test

07:40.320 --> 07:49.760
script using jest instead of Vue.cli service test unit. And everything should work kind of like

07:49.760 --> 07:59.680
before. And then we need to remove cli plugin of jest and install everything the cli plugin was

08:00.400 --> 08:07.600
installing automatically. But at version 29, like we can see over there, fix a couple of

08:07.600 --> 08:15.680
deprecation warnings like this one. Just a minor change and that's it. We are ready to

08:15.680 --> 08:23.840
work with Vue.js 2.7 and test working. Now it's time to move to Vue.js 3.

08:25.920 --> 08:33.920
They released an entire whole website for explaining new features, breaking change,

08:33.920 --> 08:42.480
recommendation and migration build. So tonight before going to bed, I suggest you to take a look

08:42.480 --> 08:50.720
at this and maybe every night before going to bed because it's really interesting. And let's skip

08:50.720 --> 09:00.720
breaking changes because there will be a lot, but it depends on the user usage. And let's have a look

09:00.720 --> 09:07.360
at new recommendations. They're recommending to use new version, of course, of router, dev tools,

09:07.360 --> 09:15.840
test utils, all of them with Vue.js 3 support. They have a new build tool chain. So they are

09:15.840 --> 09:25.520
suggesting to use this instead of ucli. And this is great, but not the moment. And they are also

09:25.520 --> 09:34.320
suggesting to use pina instead of ux. And ux is there to remain. But for now they are suggesting

09:34.320 --> 09:41.840
a new default. So move to pina. And a new support. So instead of using Vetour, for example, for VS

09:41.840 --> 09:50.240
Code, you need to use Volar. So easy migrations. Well, dev tools, just update your Dev Tool in

09:50.240 --> 09:59.520
Chrome browser. The support, same as before, just remove or keep Vetour, but install Volar. And

09:59.520 --> 10:06.960
that's it. Then you, of course, have a lot of mandatory migrations. For example, Vue router,

10:06.960 --> 10:15.360
new version compatible with Vue.js 3, Vuex, test utils, and, of course, third-party libraries.

10:16.160 --> 10:24.400
For example, Vue.T5, Quasar, Element UI. Before starting your task to upgrade the Vue.js from 2 to

10:24.400 --> 10:31.840
3, you need to check all your dependencies and check if they release the version compatible with

10:31.840 --> 10:42.160
Vue.js 3. They should, because, well, one year from now. But it depends on the library.

10:42.880 --> 10:52.720
So you need to check that first. For now, you can avoid to migrate from ucli to Vet and from Jest

10:52.720 --> 11:01.120
to Vetest, even if they are great tool. If you just want to move from Vue.js 2 to Vue.js 3,

11:01.840 --> 11:07.520
for the moment, you can avoid to migrate them. But maybe in the future, you should migrate to

11:07.520 --> 11:15.600
them because they are great tool and they are the new default. And now it's time to talk about the

11:15.600 --> 11:25.040
migration build. So they released a new dependency, VueCompat, that is a build of Vue.js 3 with

11:25.040 --> 11:35.680
configurable Vue 2 compatible behavior. And it runs in Vue.js 2 mode by default. And it will display

11:35.680 --> 11:44.720
a lot of runtime warnings about changed and deprecated features used in your code.

11:47.440 --> 11:55.280
It has known limitations, for example, dependencies that rely on Vue.js 2 internal APIs or

11:55.920 --> 12:04.000
undocumented behavior, for example, Vue.js 5. The same for usage of private properties on V-nodes.

12:04.000 --> 12:11.680
Vue.js 5.0, again, Vue.js 5.0, oh, no, Internet Explorer support dropped. Okay.

12:12.640 --> 12:17.840
And server side rendering. So if you are using server side rendering in production,

12:18.480 --> 12:25.280
well, you should complete the migration before releasing to production because, well,

12:25.280 --> 12:35.520
it won't work anymore with VueCompat. And so let's start our workflow of migration. So at first,

12:35.520 --> 12:45.120
we need to upgrade our Vue CLI using this command here or just CLI Vue upgrade. And if you are using

12:45.120 --> 12:53.440
just custom Webpack setup, you need to upgrade your Vue loader to version 16. After upgrading,

12:53.440 --> 13:00.000
you need to update and install your Vue.js instance and install Vue compatibility mode.

13:00.640 --> 13:06.960
You can drop, for the moment, Vue template compiler. It's useful in test too, but for the

13:06.960 --> 13:17.440
moment, we can remove it. And then we need to create an alias for Vue.js. So every time we import

13:17.440 --> 13:27.840
from Vue stuff, we will import instead of Vue.js from Vue compatibility mode. And again, in our

13:27.840 --> 13:34.880
configuration file, we need to enable, of course, compatibility mode via the Vue compiler options

13:35.600 --> 13:46.800
using the version 2 for now. If you are using TypeScript, you need to upgrade your Vue typing

13:46.800 --> 13:54.320
file using this. Again, this is explaining in their website that you will read tonight.

13:56.240 --> 14:06.160
And now you can run your code using npm run serve, for example. And if you see compile time errors,

14:06.160 --> 14:14.960
you should fix them. And when they are fixed, they should be, for example, configuration issues or

14:14.960 --> 14:23.040
what? Small changes. You can switch your compatibility configuration to use Vue.js 3.

14:24.080 --> 14:31.600
And you can run the app. It should work. You can open your DevTools, look at the console.

14:32.720 --> 14:44.160
And you may see a bunch of errors, a lot of them. And now you need to focus on that errors. And you

14:44.160 --> 14:51.920
need to fix them one by one. What I'm suggesting is that you need to focus on fix your own source

14:51.920 --> 15:00.400
code errors and warnings mainly. Because you will have a lot of errors and warnings from Vuex,

15:00.400 --> 15:10.160
router, and so on. But they are from Vuex and from Vue router, for example. And we will update them

15:10.160 --> 15:20.400
in a moment. So, first of all, update your own code warnings. And then update a couple of things that

15:21.600 --> 15:27.520
won't display warnings. For example, transition. If you are using transition, you need to do a

15:27.520 --> 15:39.360
find and replace. And replace them with this. And then, okay, working. You need to update your

15:39.360 --> 15:48.880
application entry in your main.js file. So, instead of using new Vue, you can use create app. Because

15:48.880 --> 15:57.120
this is the Vue 3 way. And for the moment, we can pass to create app, router, store, and everything

15:57.120 --> 16:07.760
else. But we will remove them in a moment. So, now it's time to upgrade Vuex to version 4. It is the

16:07.760 --> 16:16.800
version compatible with Vue.js 3. And we need to upgrade our Vuex store definition using create

16:16.800 --> 16:26.160
store. And moving from an object in state to a function. This is the main change, I think.

16:26.160 --> 16:36.960
And then we can remove the parameter from create app and use the app.use store instead.

16:38.560 --> 16:45.600
And in all components using the store, we need to change to this. So, again, like before,

16:45.600 --> 16:53.760
instead of using this.store, we need to import the store in this way for Vue.js 3. And use it

16:53.760 --> 17:02.560
in the store constant. Same for Vue router. So, we need to upgrade to Vue router version 4.

17:04.720 --> 17:11.200
We need to upgrade our configuration, importing create router and create web history. Because

17:11.200 --> 17:20.720
it's a new breaking change. And change them in this way. Then, again, we can change our main.js,

17:20.720 --> 17:29.520
removing the router from create app parameter and using app.use router. And change everything in the

17:29.520 --> 17:37.840
components. So, importing user router and or user out and using them in the components. And after

17:37.840 --> 17:45.600
this, you should pick off individual warnings if any remaining. And fix them one by one. For example,

17:45.600 --> 17:54.640
upgrading Vue 5, upgrading element UI, or other dependencies. Just solve them one by one in order

17:54.640 --> 18:05.120
to isolate your problem in a single way. After this, you can remove the migration build and

18:05.120 --> 18:13.840
switch everything to the official user history. Just when all warnings are fixed. And if you have

18:13.840 --> 18:20.240
dependencies that rely on Vue.js 2, you may not be able to do so. So, please check

18:20.800 --> 18:28.800
all of your dependencies before doing this last step. And that's it. Now, it's time to git

18:29.520 --> 18:36.560
commit push and deploy to production. Well, maybe not. Maybe not. You should update your

18:36.560 --> 18:48.080
Vue test setup, too. So, you need to remove Vue 2.js and move to Vue 3.js at version 29,

18:48.720 --> 18:57.120
hopefully. And update also Vue test utils to version 2. Changing it in the Jest configuration.

18:57.840 --> 19:05.440
And everything should work. Apart from a couple of breaking changes in Vue test utils, because

19:05.440 --> 19:12.480
now props data, when you force a prop into component mounting, you will have to change

19:12.480 --> 19:19.760
from props data to props. There won't be create local Vue anymore, because everything is a

19:20.480 --> 19:28.800
isolated instance of Vue. You need to move mocks and stubs inside of global options. And findall

19:28.800 --> 19:36.720
.at finally has been removed. So, now you can use findall like a proper array, finally.

19:37.840 --> 19:45.520
And for all other problems in your test, you should go this website and look at

19:47.040 --> 19:53.520
problems and warnings, for example, and solve them with their great documentation.

19:53.520 --> 20:04.160
And that's it. Now, we can be happy with our Vue 3.js instance. So, as a quick recap,

20:04.160 --> 20:13.280
if you want to stick to Vue 2.6, for example, you can use Vue composition API so you can test and

20:13.280 --> 20:24.080
try with composition API in setup only. If you want to try the new composition API in script setup,

20:24.720 --> 20:32.960
you can upgrade to Vue.js 2.7, waiting for dependency to date their compatibility with

20:32.960 --> 20:41.040
Vue.js 3. But if you need to long-term support your code base, your projects, then now it's the

20:41.040 --> 20:49.520
time to migrate from Vue.js 2 to Vue.js 3 properly. So, here's the link to the feedback

20:49.520 --> 20:57.520
for Fosden, if you want to leave a feedback for this talk. And thank you very much for being here.

20:57.520 --> 21:11.520
Thank you. So, if you have a first question, please raise your hand. Higher than this,

21:11.520 --> 21:16.000
because I can't see it. Don't be shy.

21:16.000 --> 21:28.960
While you think if there is a seat that is empty, we aim for this at the center.

21:28.960 --> 21:44.960
Please don't stay at the sides of the ails. Defrag the rows, please. Questions? Hands up.

21:47.120 --> 21:53.200
If you are our next speaker also, please come to the front now. We're waiting for you.

21:53.200 --> 22:06.720
Hello. That was helpful. I haven't really got an app to upgrade. I did one app in Vue 2. Can you

22:06.720 --> 22:17.200
hear me? Sorry? Can you hear me? Yeah, kind of. I did one app in Vue 2 two years ago, which I've

22:17.200 --> 22:24.240
left. And now I'm trying to learn Vue 3. And that was really helpful. And I'll use your links,

22:24.240 --> 22:32.240
because I'm mentally upgrading, if not upgrading the code yet. So, not really a question. But

22:32.800 --> 22:43.040
one of the problems I've found is finding examples that are only Vue 3. And getting mixed up with

22:43.040 --> 22:49.680
examples from Vue 2. Is there a good place to go? I mean, obviously, Vue.js.org is good. But

22:50.320 --> 22:58.000
like Stack Overflow is full of mixed examples and mess. So, any help? Of course, the official Vue

22:58.000 --> 23:07.120
JS 3 Vue JS website contains a lot of examples of composition API and options API. So, you can

23:07.120 --> 23:14.720
switch, I think, in the homepage, your preference, if you prefer options API or composition API.

23:15.280 --> 23:22.560
And all examples in there will be switched to use that kind of option or composition.

23:23.520 --> 23:29.760
But other places, well, it depends. If you go, for example, to Vue.js website,

23:30.400 --> 23:36.640
they have two versions of the website. So, the old version, it's all about Vue.js 2.

23:36.640 --> 23:43.440
So, just options API examples. And instead, the new version contains examples about

23:44.800 --> 23:50.560
options API, but a smaller section of the website contains also composition API examples.

23:51.840 --> 23:59.120
I don't know why they are not upgrading all of their websites to composition API,

23:59.120 --> 24:07.520
because I think it's great. But maybe it's just because now we are also, again, we are in a passage

24:08.080 --> 24:16.640
between Vue.js 2 and Vue.js 3. So, they prefer to leave options API examples just to involve

24:16.640 --> 24:34.400
everyone from Vue.js 2 to Vue.js 3. But I don't have an explanation of this.

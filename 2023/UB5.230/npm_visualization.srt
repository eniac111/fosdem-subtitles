1
0:00:00.000 --> 0:00:26.960
Okay, thank you for coming and thank you to the organizers as well for organizing this

2
0:00:26.960 --> 0:00:33.160
for them and this JavaScript Dev Room. I'm Naviv Moreno. I'm a PhD student at the

3
0:00:33.160 --> 0:00:38.080
Universidad Refon Carlos in Spain in Madrid and I'm going to present you how to visualize

4
0:00:38.080 --> 0:00:44.320
the MPM dependency city ecosystem, original project in virtual reality. I would like to

5
0:00:44.320 --> 0:00:49.200
say that this is not a technical talk, it's just a prototype that I designed. It's more

6
0:00:49.200 --> 0:00:56.160
related to academia and I'm a PhD student so it's kind of showing new things and maybe

7
0:00:56.160 --> 0:01:02.480
have your opinion on probably if this work is useful or not. So first of all, I'm talking

8
0:01:02.480 --> 0:01:10.160
about a city. How many of you know something about Cold City, the Regiocam? Cold City?

9
0:01:10.160 --> 0:01:19.440
No? One, two, three. Okay, so the city metaphor in visualization is just to take the characteristics

10
0:01:19.440 --> 0:01:25.760
and layout of the city and then represent something with them. And the city layout just

11
0:01:25.760 --> 0:01:32.800
means quarters and buildings. And in this case, Cold City is one of the most known tools

12
0:01:32.800 --> 0:01:40.960
that uses this metaphor for visualizing Java software code. In this case, each building

13
0:01:40.960 --> 0:01:50.560
is a source code of the project and the quarter is the level of the source code in the package

14
0:01:50.560 --> 0:02:02.720
of the Java project. So in this case, we developed a new version of this city metaphor of Cold

15
0:02:02.720 --> 0:02:08.480
City visualization using web technologies. It's related to the last talk that Fabian

16
0:02:08.480 --> 0:02:16.880
gave us. We use WebXR and WebGL and everything related to web. In this case, it's A-frame.

17
0:02:16.880 --> 0:02:26.320
How many of you know, say, A-frame? Probably more right. So we changed this metaphor a little

18
0:02:26.320 --> 0:02:32.960
bit, changing the algorithm of the layout of the buildings. We used a spirit algorithm

19
0:02:32.960 --> 0:02:39.360
instead of a trim up layout because we want to reorganize the buildings in a different

20
0:02:39.360 --> 0:02:45.120
way because the layout is, the trim up layout is too fixed. And when you want to add a new

21
0:02:45.120 --> 0:02:52.080
building there, there are many problems. So in this visualization, we have metrics that

22
0:02:52.080 --> 0:02:57.920
we can represent in the buildings and in the quarters. The quarters represent a tree layout

23
0:02:57.920 --> 0:03:02.000
because you have quarters, then you can have quarters at the top of the quarters and then

24
0:03:02.000 --> 0:03:08.000
also. And the buildings have different metrics like the area of the building, the height of

25
0:03:08.000 --> 0:03:13.920
the building, or the color of the building. We are using this metric to represent the

26
0:03:13.920 --> 0:03:40.200
NPM, the

27
0:03:40.200 --> 0:03:47.520
many URL dot com slash barrier for them. Barrier is the name of the tool that I developed in

28
0:03:47.520 --> 0:03:59.680
my thesis. Just a minute. With your mobile phone, you won't have as many as the interesting

29
0:03:59.680 --> 0:04:03.040
that you can have with your computer, but you can have an idea and you can visualize

30
0:04:03.040 --> 0:04:10.920
the city. So this is what you can see in the demo. This is the dependency city of a project.

31
0:04:10.920 --> 0:04:18.080
In this case, it's the user interface of Shorty Hat. That is a project for doing things. It's

32
0:04:18.080 --> 0:04:25.400
under the grammar lab project. So in this case, in this city, each building represents

33
0:04:25.400 --> 0:04:31.800
a dependency of the project. But we can see here is that, okay, there are buildings with

34
0:04:31.800 --> 0:04:36.600
different colors and so on. But the first thing that we can see here is that the quarters

35
0:04:36.600 --> 0:04:45.480
are kind of elevated. We can see here a quarter, what this big quarter, this quarter, this

36
0:04:45.480 --> 0:04:50.480
quarter, this quarter, this quarter, and this quarter. This quarter means the dependency

37
0:04:50.480 --> 0:04:57.200
level that your application has. And the first quarter, the big one, the first one is like

38
0:04:57.200 --> 0:05:03.400
the bottom or the package.json of the NPA project where you define the first level of

39
0:05:03.400 --> 0:05:13.720
dependencies. So we have the elevated city. We have to be clear of this. The second thing

40
0:05:13.720 --> 0:05:23.160
that we can see in this city is where the buildings are. Where the buildings, the quarter

41
0:05:23.160 --> 0:05:30.320
that the building is laying out means that this building or this package is in that level,

42
0:05:30.320 --> 0:05:36.560
in that dependency level. For instance, this building is in the first level of dependency

43
0:05:36.560 --> 0:05:42.440
that you probably define this package in your package.json if you're no project or whatever.

44
0:05:42.440 --> 0:05:47.800
And these three buildings that are laying out in this level belong to the third level

45
0:05:47.800 --> 0:05:53.600
of dependencies of your project. I'm explaining this because it's just a matter of understanding

46
0:05:53.600 --> 0:06:02.600
how this resolution works. And some buildings go through a quarter, which means that the

47
0:06:02.600 --> 0:06:08.120
building that goes through a quarter is the owner of the dependencies that are in that

48
0:06:08.120 --> 0:06:13.720
building, in that quarter, sorry. In other words, this package is going through this

49
0:06:13.720 --> 0:06:19.720
quarter, so the dependencies, this, this, and this are two dependencies of this quarter,

50
0:06:19.720 --> 0:06:28.040
of this building, sorry. Okay? Again, for instance, this package is going through this quarter,

51
0:06:28.040 --> 0:06:34.200
so this dependency, this dependency, are two dependencies of this building, of this package.

52
0:06:34.200 --> 0:06:41.440
It has to be clear because it's kind of the core of this visualization. And if you are

53
0:06:41.440 --> 0:06:48.280
in the demo, you probably noticed that there is kind of some buttons here that are the

54
0:06:48.280 --> 0:06:57.440
metrics available in this visualization. These metrics that are here only change the characteristics

55
0:06:57.440 --> 0:07:07.200
of the buildings. Okay? So we are going to focus on the third, first on this row, that

56
0:07:07.200 --> 0:07:14.800
is the height. I don't know if you can see clear what it says here. Eight days. Okay.

57
0:07:14.800 --> 0:07:21.480
Hey, this means the height of the buildings. And this now, the height of the building represent

58
0:07:21.480 --> 0:07:28.080
the height of the package in number of days. Okay? We have this metric, this numeric metric

59
0:07:28.080 --> 0:07:34.000
in height. The area of the buildings, we have three metrics. Now we selected this one that

60
0:07:34.000 --> 0:07:43.320
is log slash H, which means the lines of code of the package divided by the 18 days. And

61
0:07:43.320 --> 0:07:48.600
you are probably wondering why divided by the H number of days? Because if you divide,

62
0:07:48.600 --> 0:07:53.320
if you multiply the height of the area of a building, of a box, you have the volume.

63
0:07:53.320 --> 0:07:59.920
So if you compute these two metrics, multiplying them, you can have as a third metric, the

64
0:07:59.920 --> 0:08:04.480
volume, as computed metric, in this case, the volume of the buildings will be the lines

65
0:08:04.480 --> 0:08:12.240
of code in total. But we can change this metric into size, into size, in bytes, divided by

66
0:08:12.240 --> 0:08:21.560
age. We can click on the metric, then the visualization is updated. Under third one

67
0:08:21.560 --> 0:08:30.040
is the number of comments that the package has divided by the age. But probably this

68
0:08:30.040 --> 0:08:37.880
is not as important because in this project, on this prototype, we are focused on the color

69
0:08:37.880 --> 0:08:45.880
of the buildings. And now we realize why there are many metrics in the row of code. So by

70
0:08:45.880 --> 0:08:53.960
default, what you see as a color building is the type of license that the package has.

71
0:08:53.960 --> 0:09:00.080
In this case, we can see that there are many packages with a purple color, kind of a purple.

72
0:09:00.080 --> 0:09:07.640
And then on the right, we have this legend that says which license is used. So with this

73
0:09:07.640 --> 0:09:14.160
color and this city, we can have a quick overview of the packages that are used in the same

74
0:09:14.160 --> 0:09:20.200
licenses or license, or if a package is used in a license that we don't want to have in

75
0:09:20.200 --> 0:09:27.960
our projects or so. So that's probably one of the goals of this metric color. Then we

76
0:09:27.960 --> 0:09:35.120
have two metrics that are times installed and times appear. These are not category metrics.

77
0:09:35.120 --> 0:09:43.080
These are numeric metrics. These metrics follow a heat map color from blue to red. And this

78
0:09:43.080 --> 0:09:51.800
is interesting because I think that you know pretty well the NPM ecosystem. When you are

79
0:09:51.800 --> 0:10:02.080
defining when you're installing a package in NPM, if NPM found a dependency more than

80
0:10:02.080 --> 0:10:07.560
once in the same version, NPM will install the dependency once. Right? We always know

81
0:10:07.560 --> 0:10:15.440
that. All of us know that. But if NPM found the same dependency defined in two different

82
0:10:15.440 --> 0:10:23.360
versions, then NPM will install the dependency twice in this case. So this metric represents

83
0:10:23.360 --> 0:10:29.640
the color of the building, how many times the dependency of the package is installed.

84
0:10:29.640 --> 0:10:35.920
In other words, how many times the dependency is defined in different versions. And this

85
0:10:35.920 --> 0:10:44.200
one is how many times the dependency appears in the project. There are less versions. Because

86
0:10:44.200 --> 0:10:53.200
we are using for instance GraphQL and we use GraphQL in many things. Where we define GraphQL,

87
0:10:53.200 --> 0:10:58.520
I don't know a package that uses GraphQL but then we use another package that uses GraphQL

88
0:10:58.520 --> 0:11:06.120
as well. So this represents how many times this package appears. How many times it stands

89
0:11:06.120 --> 0:11:12.440
there. And these two metrics are completely related to the first line that is the attributes

90
0:11:12.440 --> 0:11:21.920
line I call it. And it's used for changing the transparency or the wireframe of the build,

91
0:11:21.920 --> 0:11:26.720
the working features of the buildings. Because now you notice that there are some buildings

92
0:11:26.720 --> 0:11:32.560
that are kind of transparent buildings. Which means that these buildings are not installed.

93
0:11:32.560 --> 0:11:39.680
These buildings are replicas and only the solid ones are the ones that are in this installed.

94
0:11:39.680 --> 0:11:49.400
And if we go with our mouse or with our VR controller over a building, we can see that

95
0:11:49.400 --> 0:11:55.120
if we hover a building with the mouse, we see here that this dependency is GraphQL and

96
0:11:55.120 --> 0:12:00.080
then some other buildings are highlighted in white as well. But only one of them that

97
0:12:00.080 --> 0:12:09.840
is this one is solid. So it means GraphQL is defined in many locations but only is installed

98
0:12:09.840 --> 0:12:22.240
once that is there. But appears nine times. We have also metrics related to the community

99
0:12:22.240 --> 0:12:27.800
of the package of the community behind the repository of the package. The first one is

100
0:12:27.800 --> 0:12:37.080
last at days. Which means the days, the number of days since the last commit. So in a hit

101
0:12:37.080 --> 0:12:42.560
map from blue to red, if the package is red, means that probably this package has no activity

102
0:12:42.560 --> 0:12:52.200
in the last many days. We can see this package here. This is script 002. Two thousand years

103
0:12:52.200 --> 0:12:59.640
since the last commit. So probably this is kind of a smell in this kind of visualization.

104
0:12:59.640 --> 0:13:03.240
Also we have the number of commits in the last year of the package, of the repository

105
0:13:03.240 --> 0:13:09.440
of the package, the number of unique committers in the last year of the repository of the

106
0:13:09.440 --> 0:13:17.360
package, and of course the number of vulnerabilities that we can fund with the npm audit tool as

107
0:13:17.360 --> 0:13:23.560
well. But this visualization has the goal of merge all the information that we can retrieve

108
0:13:23.560 --> 0:13:31.560
from the package and then show it in this city. And the last one is the number of issues

109
0:13:31.560 --> 0:13:37.480
radio that is just the number of issues open of the repository divided by the number of

110
0:13:37.480 --> 0:13:45.480
issues closed in all the story of the package. So this is first overview of the tool. I invite

111
0:13:45.480 --> 0:13:57.360
you to play with it. I was really quick. Of course, where are we? In the slides there

112
0:13:57.360 --> 0:14:04.240
are plenty of QRs with links to the documentation, links to the step by step tutorial in order

113
0:14:04.240 --> 0:14:10.320
to have this visualization with your own project. Because what you need is just to have a project

114
0:14:10.320 --> 0:14:16.920
installed and then run a set of tools that I'm going to spread right now. But I said

115
0:14:16.920 --> 0:14:24.920
that this is for virtual reality. So in academia some researchers validated the city metaphor

116
0:14:24.920 --> 0:14:32.320
in virtual reality, agreeing that the notion of having a city in a table or something like

117
0:14:32.320 --> 0:14:41.480
that helps the user or the participant or whatever to have better information that using

118
0:14:41.480 --> 0:14:49.760
a computer or using a 2D screen. So that's the reason behind this research. So in this

119
0:14:49.760 --> 0:14:55.320
case we are using a Metacrest 2 glasses. This is an experiment and then we have in the left

120
0:14:55.320 --> 0:15:02.680
controller the user interface that we already saw in the demo. And then we can see that

121
0:15:02.680 --> 0:15:10.720
when we click on the buttons you see that the city is updated instantly. I didn't tell

122
0:15:10.720 --> 0:15:20.800
you but there is a second line, the user interface, because the demo, I forgot that, the demo

123
0:15:20.800 --> 0:15:26.760
has four different projects to analyze in this city. Now we select the shortcut that

124
0:15:26.760 --> 0:15:31.320
is the project that we are selecting in this project. But also we have the data from the

125
0:15:31.320 --> 0:15:36.240
PM2 package. If you know PM2 you can click on it. We can click on the PM2 project and

126
0:15:36.240 --> 0:15:45.080
then the city is automatically updated. We have also data from the portender user interface

127
0:15:45.080 --> 0:15:55.080
and the desktop user interface because it's developed in the old. So we are going to focus

128
0:15:55.080 --> 0:16:07.360
on the data just to finish. This QR will redirect you to this repository where I have all the

129
0:16:07.360 --> 0:16:13.800
codes that I use for having the data because this is really, really easy to replicate because

130
0:16:13.800 --> 0:16:20.600
what you saw here is just an HTML using A-frame, using Bavia, that is the tool that I developed,

131
0:16:20.600 --> 0:16:24.440
and then adjacent with all the data. So now we are going to talk about how to produce

132
0:16:24.440 --> 0:16:29.040
the JSON. But you can produce the JSON whatever you want. So it's not another of, you can

133
0:16:29.040 --> 0:16:36.600
follow this tutorial or not. So the first step is to have your MPM package for application

134
0:16:36.600 --> 0:16:42.800
installed, of course, because we are representing the MPM dependencies application. The second

135
0:16:42.800 --> 0:16:47.120
step is to use MPM to have the dependencies list and the vulnerabilities list.

136
0:17:12.800 --> 0:17:19.800
So, we are going to talk about how to use MPM. So, we are going to talk about how to

137
0:17:42.800 --> 0:17:49.800
use MPM. So, we are going to talk about how to use MPM. So, we are going to talk about

138
0:18:12.800 --> 0:18:19.800
how to use MPM. So, we are going to talk about how to use MPM. So, we are going to talk about

139
0:18:42.800 --> 0:18:49.800
how to use MPM. So, we are going to talk about how to use MPM. So, we are going to talk about

140
0:19:12.800 --> 0:19:19.800
how to use MPM. So, we are going to talk about how to use MPM. So, we are going to talk about

141
0:19:42.800 --> 0:19:49.800
how to use MPM. So, we are going to talk about how to use MPM. So, we are going to talk about

142
0:20:12.800 --> 0:20:19.800
how to use MPM. So, we are going to talk about how to use MPM. So, we are going to talk about

143
0:20:42.800 --> 0:20:50.800
how to use MPM. So, we are going to talk about how to use MPM. So, we are going to talk about

144
0:21:12.800 --> 0:21:20.800
how to use MPM. So, we are going to talk about how to use MPM. So, we are going to talk about

145
0:21:42.800 --> 0:21:50.800
how to use MPM. So, we are going to talk about how to use MPM. So, we are going to talk about

146
0:22:12.800 --> 0:22:20.800
how to use MPM. So, we are going to talk about how to use MPM. So, we are going to talk about

147
0:22:42.800 --> 0:22:50.800
how to use MPM. So, we are going to talk about how to use MPM. So, we are going to talk about


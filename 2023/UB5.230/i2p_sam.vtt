WEBVTT

00:00.000 --> 00:13.060
Hello everyone, thank you for joining this event and thank you very much for the organization

00:13.060 --> 00:14.060
of this dev room.

00:14.060 --> 00:17.900
I am much appreciated, I know how much work this is.

00:17.900 --> 00:19.300
Awesome work, thank you.

00:19.300 --> 00:23.580
So thanks a lot to Whole Fast TEMP team, really cool.

00:23.580 --> 00:27.980
This presentation here is mainly about privacy.

00:27.980 --> 00:34.540
And the I2P network is an overlay network which I will shortly introduce.

00:34.540 --> 00:42.860
And I'm the JavaScript TypeScript library maintainer of this library which allows you

00:42.860 --> 00:52.640
as developers, me as developer, to write privacy by design applications.

00:52.640 --> 00:58.340
Privacy by design means a few things which I'm going to talk about shortly after the

00:58.340 --> 01:00.380
introduction.

01:00.380 --> 01:07.700
I'm a totally independent researcher and developer and I'm one of the co-founders behind Deva.exchange.

01:07.700 --> 01:12.220
We're just a loose bunch of developers and researchers spread all over the world.

01:12.220 --> 01:15.660
Very much interested in privacy topics.

01:15.660 --> 01:22.620
And one of the topics is free banking technology for everyone which is not part of the team.

01:22.620 --> 01:27.580
This presentation but it's no centralized model involved in my work.

01:27.580 --> 01:34.620
So there is no business model at all involved because if I'm fully distributed, fully distributed,

01:34.620 --> 01:41.940
not only decentralized, fully distributed, it's totally impossible by design to introduce

01:41.940 --> 01:44.500
business models.

01:44.500 --> 01:48.500
Obviously no coin, no token or things like that.

01:48.500 --> 01:51.160
I'd like to talk quickly about the motivation.

01:51.160 --> 01:53.380
So why I2P SAM?

01:53.380 --> 02:00.500
This SAM got developed and how we set up a completely distributed network like I2P and

02:00.500 --> 02:01.500
overlay network.

02:01.500 --> 02:06.060
And I'd obviously like to talk about creation of applications, so how we do that and how

02:06.060 --> 02:07.060
we can do that.

02:07.060 --> 02:11.780
We look at the use cases and then some questions and take-outs.

02:11.780 --> 02:14.220
All right.

02:14.220 --> 02:15.860
I'm Condret.

02:15.860 --> 02:17.660
I live in Switzerland.

02:17.660 --> 02:20.160
So bonjour, no, grÃ©

02:20.160 --> 02:23.380
to have you here.

02:23.380 --> 02:28.900
And I lecture at the University of Applied Science in Lucerne, central Switzerland a

02:28.900 --> 02:36.820
bit about microservices and fully distributed systems where I'm a bit an alien in this

02:36.820 --> 02:41.580
cloud world because today everything is cloud but I'm not cloud, I'm peer to peer.

02:41.580 --> 02:46.180
And now we're here at this I2P network.

02:46.180 --> 02:47.660
Let me ask you a question.

02:47.660 --> 02:48.820
Please raise your hands.

02:48.820 --> 02:55.780
Who ever got in touch with an overlay peer to peer network like I2P?

02:55.780 --> 03:01.900
Again, I'm not totally lonely, so thank you very much.

03:01.900 --> 03:04.100
There are a few which have heard of it.

03:04.100 --> 03:17.260
And in a nutshell, I2P is a fully anonymous confidentiality-giving messaging system.

03:17.260 --> 03:22.580
You know, it's you have the general internet as you know it and where all the cloud applications

03:22.580 --> 03:25.940
are running somewhere in central services.

03:25.940 --> 03:32.460
And this I2P network is a layer and top, it's a software layer and everybody who's running

03:32.460 --> 03:39.380
such an I2P note is becoming a client and a server.

03:39.380 --> 03:47.140
So when I'm talking about a note, a note which might be run by every one of you, you're a

03:47.140 --> 03:49.660
client and you're a server.

03:49.660 --> 03:54.020
You're both at the same time and you're helping the network.

03:54.020 --> 04:01.900
There are around 34,000 I2P routers in the network, which is a joke.

04:01.900 --> 04:03.220
That's nothing.

04:03.220 --> 04:07.660
That's compared to the internet infrastructure as we know it today.

04:07.660 --> 04:09.340
That's tiny.

04:09.340 --> 04:11.740
That's nothing.

04:11.740 --> 04:16.700
But still these 34,000 routers more or less.

04:16.700 --> 04:23.460
They run this fully anonymous and fully confidential messaging system.

04:23.460 --> 04:27.900
And please, it's an overlay network.

04:27.900 --> 04:33.540
It's not, well some media call it, but it's not a darknet.

04:33.540 --> 04:34.980
It's just an overlay network.

04:34.980 --> 04:35.980
It's a piece of software.

04:35.980 --> 04:38.820
It's a technical solution to a problem.

04:38.820 --> 04:45.260
And the problem is we want anonymity and we want confidentiality because these two things

04:45.260 --> 04:49.820
by definition define total privacy.

04:49.820 --> 04:57.140
And if I want to disclose my private stuff, it's my decision and only my decision.

04:57.140 --> 04:59.100
And that's the point behind privacy.

04:59.100 --> 05:00.300
All right.

05:00.300 --> 05:08.100
So I ask you now, please in this room to be open towards peer-to-peer applications, which

05:08.100 --> 05:13.700
are a bit more complex but not really complicated, and open your mind for something which has

05:13.700 --> 05:15.980
nothing to do with the cloud.

05:15.980 --> 05:19.060
All right.

05:19.060 --> 05:25.660
Why did I do the work and develop a library, an I2P SAM library?

05:25.660 --> 05:34.340
Well the I2P core developers, they are super cool, hard core network guys.

05:34.340 --> 05:52.900
And they love what they do since 20 years.

05:52.900 --> 05:58.100
The DBA chain, which is a fully distributed storage layer, so something to store data

05:58.100 --> 06:05.100
in without trust.

06:28.100 --> 06:44.420
You can't be spied out.

06:44.420 --> 06:47.980
Everything you exchange is totally private and there is no man in the middle.

06:47.980 --> 06:50.260
There is no man in the middle.

06:50.260 --> 06:54.180
Because again, this I2P network works like a garlic.

06:54.180 --> 07:00.660
All the messages which are hopping through this network from node to node, from peer-to-peer,

07:00.660 --> 07:03.540
they're multiple times encrypted.

07:03.540 --> 07:10.580
So you send your message from your application into the network layer and it ends up at a

07:10.580 --> 07:17.700
destination and it's multiple times encrypted just by using the library.

07:17.700 --> 07:22.060
That was the motivation.

07:22.060 --> 07:28.780
When you peer-to-peer, just by definition, you get a bunch of problems you don't really

07:28.780 --> 07:31.100
want.

07:31.100 --> 07:34.380
And it's complicated a bit to get into it.

07:34.380 --> 07:40.860
So at DBA we thought, hey come on, let's build a few docker containers to simplify this process.

07:40.860 --> 07:45.260
And today the students at the University of Applied Science in Lucerne, they were able

07:45.260 --> 07:51.980
to set up a complete test network and a complete developer network within a few minutes.

07:51.980 --> 07:56.140
And that's this docker container you find on GitHub.

07:56.140 --> 07:58.780
And by the way, also mirrored to Codeberg.

07:58.780 --> 08:06.820
But you find it on GitHub and then you can start by initializing these containers with

08:06.820 --> 08:14.020
a simple script and with one go you have your I2P connectivity available, you have, if you

08:14.020 --> 08:21.900
like to, a storage layer available, and you can start programming, you can start developing.

08:21.900 --> 08:31.860
But needing to care about all the complexity of such a peer-to-peer network.

08:31.860 --> 08:40.260
This is a screenshot of GitHub and here I'd like to be totally open.

08:40.260 --> 08:46.100
All we do at DBA and all I'm doing is really, really free Libra software.

08:46.100 --> 08:52.780
There are no strings attached or strange stuff or things you need from somewhere else.

08:52.780 --> 08:57.620
It's really free, it's really Libra and it's very strict licensing which we're doing.

08:57.620 --> 09:05.580
So that's quite important for me personally to have open-source software at its core and

09:05.580 --> 09:07.820
that's very important for me.

09:07.820 --> 09:11.340
So there exists also a simplified version.

09:11.340 --> 09:17.460
I told you, you need a network to communicate between your peers.

09:17.460 --> 09:24.040
You need maybe a storage layer on top but this storage layer is not a necessity.

09:24.040 --> 09:28.940
So if you say, well, I just want to communicate, I do not want to store anything, I do not

09:28.940 --> 09:34.060
want to store data, then you don't need a blockchain because you don't want to store

09:34.060 --> 09:35.300
data.

09:35.300 --> 09:40.540
So if you just need to communicate in your application between peers, then you have this

09:40.540 --> 09:42.620
simpler setup.

09:42.620 --> 09:50.740
You go with npm install, i2p sam and in there is a YAML file, that's the last one.

09:50.740 --> 10:00.340
So this sam deva.itup.yml and you initialize this container in there and you have a very

10:00.340 --> 10:13.660
much simplified application, development environment available without storage capabilities.

10:13.660 --> 10:17.900
The library got quite popular in the last months.

10:17.900 --> 10:24.180
It has to do with one thing we did for the DNS crowd, domain name system, domain name

10:24.180 --> 10:28.160
service and the students at the University of Applied Science, they got the job from

10:28.160 --> 10:38.540
me to create an API for a DNS system for i2p because i2p does not even have a DNS.

10:38.540 --> 10:42.900
So welcome to Stone Age.

10:42.900 --> 10:47.620
And so the library got used by the students and got more popular in the last months which

10:47.620 --> 10:49.980
is nice.

10:49.980 --> 10:53.060
And here we have this, by the way, who's familiar with Docker?

10:53.060 --> 10:55.060
Who's using Docker?

10:55.060 --> 11:00.020
Okay, right, so great, almost everybody.

11:00.020 --> 11:03.140
So yeah, here you have a YAML file, I don't have to say much.

11:03.140 --> 11:10.460
You use it and you have your environment available and everything is available on GitHub on marriage

11:10.460 --> 11:12.820
to Codeberg.

11:12.820 --> 11:22.500
I want to go through theoretically two simple use cases to inspire you to create your own

11:22.500 --> 11:26.220
privacy by design application, your own.

11:26.220 --> 11:29.500
We go through two examples.

11:29.500 --> 11:33.940
One is reading and the other example is writing.

11:33.940 --> 11:39.540
As you said, as I said, every node in the network you are a client and the server at

11:39.540 --> 11:44.260
the same time because you're a router within the i2p network.

11:44.260 --> 11:50.980
So what we're doing first, we're reading something from the network.

11:50.980 --> 11:59.620
Now the documentation on NPM, the documentation on GitHub for this library is quite grown

11:59.620 --> 12:01.180
up.

12:01.180 --> 12:03.980
It's quite complete.

12:03.980 --> 12:07.620
That's my personal view on it.

12:07.620 --> 12:13.740
If you have a different view, please do not hesitate to tell me and improve this documentation

12:13.740 --> 12:18.420
because I can learn that much from you.

12:18.420 --> 12:23.140
So here we have an example of creating a reading stream.

12:23.140 --> 12:29.460
So you want to read some data from another node in the i2p network.

12:29.460 --> 12:36.620
And you can simply use this very first quick start example and then replace only the IP

12:36.620 --> 12:44.140
which points to your docker container which we have seen in the YAML file just before.

12:44.140 --> 12:48.780
And tada, you're communicating through the i2p network.

12:48.780 --> 12:51.180
That's it.

12:51.180 --> 12:59.540
So privacy by design and exchanging private messages, totally confidential and anonymous,

12:59.540 --> 13:03.660
over the existing internet infrastructure isn't difficult anymore.

13:03.660 --> 13:04.860
Here it is.

13:04.860 --> 13:06.340
It's not more.

13:06.340 --> 13:12.740
And the same thing is now also if we're looking into writing data which means nothing else

13:12.740 --> 13:20.460
you're offering a service on the overlay network i2p.

13:20.460 --> 13:26.020
There is the other example in the read me which is doing both things at the same time.

13:26.020 --> 13:30.340
The second example is creating a writing instance.

13:30.340 --> 13:36.100
So serving some data and at the same time that's the very last part here at the end,

13:36.100 --> 13:37.540
it's reading data.

13:37.540 --> 13:43.340
And it's not doing this locally by simply locally connecting from the reading instance

13:43.340 --> 13:44.660
to the writing instance.

13:44.660 --> 13:56.180
No, it goes through the overlay network, through i2p completely and it does its job.

13:56.180 --> 13:59.380
A word of warning.

13:59.380 --> 14:04.100
i2p is not fast.

14:04.100 --> 14:09.740
Latency and total anonymity has a price tag attached.

14:09.740 --> 14:15.540
And this price tag is called speed, latency.

14:15.540 --> 14:21.140
To give you an idea, when we're reading and writing data from the Diva blockchain where

14:21.140 --> 14:26.460
we're exchanging this data over peers distributed all over the network, we have latencies of

14:26.460 --> 14:28.900
three till five seconds.

14:28.900 --> 14:30.740
Three till five seconds.

14:30.740 --> 14:34.140
That feels like 1992 or something.

14:34.140 --> 14:37.100
So that's the cost of privacy.

14:37.100 --> 14:43.220
You don't get privacy for free.

14:43.220 --> 14:44.420
Right a few use cases.

14:44.420 --> 14:46.900
And I'd like to highlight the second one.

14:46.900 --> 14:48.580
The first one is the free banking.

14:48.580 --> 14:51.900
That's where I'm working together with and everybody is invited because we're totally

14:51.900 --> 14:52.900
transparent.

14:52.900 --> 14:55.500
So if banking is your thing, yeah, join in.

14:55.500 --> 15:03.700
If chat is your thing, then the i2p development team is really would be super happy to, would

15:03.700 --> 15:10.380
be super happy that somebody hops into the chat challenge.

15:10.380 --> 15:18.860
You don't have to worry that the chat application is not good enough because i2p simply has

15:18.860 --> 15:19.860
nothing.

15:19.860 --> 15:24.460
So it would be a great thing to start somewhere.

15:24.460 --> 15:28.780
And if you're a good user interface designer or user experience designer, hey, they would

15:28.780 --> 15:31.940
be like in heaven if they get something like that.

15:31.940 --> 15:34.620
That would be wow.

15:34.620 --> 15:40.700
Additionally games could be a topic for some people, but the latency could be a killer

15:40.700 --> 15:41.700
there.

15:41.700 --> 15:44.900
So by its interest, it would be interesting.

15:44.900 --> 15:47.020
Right.

15:47.020 --> 15:52.820
Since I have now around eight minutes left as my colleagues have shown me, which is great,

15:52.820 --> 16:00.860
I'd already like to enter the links, discussions, feedback and questions face of this presentation.

16:00.860 --> 16:04.020
So please, any questions?

16:04.020 --> 16:06.900
Oh yes.

16:06.900 --> 16:11.660
Call to action.

16:11.660 --> 16:15.340
There are some questions and there is a microphone.

16:15.340 --> 16:26.380
Thank you very much.

16:26.380 --> 16:27.380
Test test.

16:27.380 --> 16:28.380
Hi.

16:28.380 --> 16:31.860
Thank you very much for your presentation.

16:31.860 --> 16:38.660
So usually in secure systems, one of the issue is that due to security, there is more friction

16:38.660 --> 16:39.660
for the user.

16:39.660 --> 16:45.060
And that's also part of the cost of implementing secure systems.

16:45.060 --> 16:48.940
So of course here almost everybody used a Docker.

16:48.940 --> 16:50.780
So that's not an issue.

16:50.780 --> 16:55.940
But for, let's say my grandma, that's going to be a bit more difficult.

16:55.940 --> 17:00.980
It's probably also not a target audience, but on the network side, have you tried, for

17:00.980 --> 17:09.940
example, setting up a compatibility layer with WebSockets or WebRTC so that the full

17:09.940 --> 17:12.180
stack could be run from the browser?

17:12.180 --> 17:13.180
Yeah.

17:13.180 --> 17:14.180
Short answer.

17:14.180 --> 17:18.220
Short answer, yes, WebSockets, WebSockets, not WebRTC.

17:18.220 --> 17:24.260
WebSockets is used by Diva, which is a real-time banking exchange system running on your own

17:24.260 --> 17:25.260
device.

17:25.260 --> 17:26.260
Yes.

17:26.260 --> 17:27.260
Yes.

17:27.260 --> 17:33.820
Everything which you as JavaScript developers and TypeScript developers do know is on board.

17:33.820 --> 17:36.260
It just might be sometimes a bit slow.

17:36.260 --> 17:41.340
But I do not believe that there are additional user experience challenge.

17:41.340 --> 17:46.100
Obviously you're totally right, but since you are the developer, I have, I just deliver

17:46.100 --> 17:47.100
the glue.

17:47.100 --> 17:55.540
I just deliver the glue between the privacy network and the end user interfaces, so the

17:55.540 --> 17:59.540
human machine interaction, which we as developers should create.

17:59.540 --> 18:04.300
But this here, this library is just the glue which gives you privacy by design.

18:04.300 --> 18:05.460
Thank you very much for this question.

18:05.460 --> 18:06.460
More questions?

18:06.460 --> 18:07.460
Please.

18:07.460 --> 18:13.060
Hi, thanks for the presentation as well.

18:13.060 --> 18:20.900
How does it compare to other peer-to-peer networks such as IPFS, for instance?

18:20.900 --> 18:23.900
Thank you very much for this question.

18:23.900 --> 18:28.980
There are other presentations in the lightning talk, lightning room just afterwards.

18:28.980 --> 18:34.540
First I have the I2P presentation, and then there are other overlay networks.

18:34.540 --> 18:39.260
Honestly, I can't compare it because I'm the I2P guy.

18:39.260 --> 18:43.100
It says I2P here.

18:43.100 --> 18:46.700
But there is quite some research around which compares these networks.

18:46.700 --> 18:55.540
What I'd like to lay out is on the research gate, which is the academic network for papers,

18:55.540 --> 19:03.340
there are some interesting papers around to read about dark nets, and now I call it dark

19:03.340 --> 19:08.740
net which have storage capabilities suitable for large files.

19:08.740 --> 19:10.260
Please do your own research.

19:10.260 --> 19:13.380
Please think what you're doing.

19:13.380 --> 19:17.540
Privacy is important, but there are also bad actors out there.

19:17.540 --> 19:23.700
Do your own research, and please read the research gate papers and articles about overlay

19:23.700 --> 19:24.700
networks.

19:24.700 --> 19:26.700
Is this okay for you?

19:26.700 --> 19:35.940
It's today the lightning talks.

19:35.940 --> 19:39.460
There will be lightning talks today comparing those different...

19:39.460 --> 19:43.340
Okay, so the speed of the networks, the latencies?

19:43.340 --> 19:44.340
No?

19:44.340 --> 19:45.340
No.

19:45.340 --> 19:46.340
Don't worry.

19:46.340 --> 19:47.340
All right.

19:47.340 --> 19:48.900
I'm going to check the links.

19:48.900 --> 19:49.900
Thank you.

19:49.900 --> 19:52.220
Thank you.

19:52.220 --> 19:53.220
More questions?

19:53.220 --> 19:58.620
Sorry.

19:58.620 --> 19:59.620
I'm chilling.

19:59.620 --> 20:04.380
I had a question about the latency.

20:04.380 --> 20:09.660
The problem is the number of the servers who know that we have the only 34,000, that's

20:09.660 --> 20:10.660
the problem.

20:10.660 --> 20:14.380
If we got more, that would mean that we can speed it up or if it's just taking all of

20:14.380 --> 20:21.100
it that it has a bottleneck and doesn't let it go faster.

20:21.100 --> 20:22.940
Interesting question.

20:22.940 --> 20:31.220
The question is, if there are more nodes in the network, will the network become faster?

20:31.220 --> 20:36.740
By building overlay networks, now by theory, tunnel building is involved.

20:36.740 --> 20:41.540
Tunnel means a message hops over several nodes in the network.

20:41.540 --> 20:50.220
Now, a message comp can be only as fast as the slowest node in this route, so in this

20:50.220 --> 20:52.680
tunnel.

20:52.680 --> 20:59.660
Just by stacking up additional nodes in this network is not necessarily decreasing the

20:59.660 --> 21:02.180
latency of the network.

21:02.180 --> 21:09.380
It depends of the available bandwidth and performance of all the nodes involved within

21:09.380 --> 21:12.020
one tunnel.

21:12.020 --> 21:18.980
The answer to your question is, it depends.

21:18.980 --> 21:23.380
More questions?

21:23.380 --> 21:29.380
Oh, yeah?

21:29.380 --> 21:35.380
Since there's no other questions, could you give some more context about your free banking

21:35.380 --> 21:37.540
use case, the first one?

21:37.540 --> 21:39.100
Right, yeah.

21:39.100 --> 21:42.340
It's a JavaScript, TypeScript application.

21:42.340 --> 21:49.300
It's built to exchange any existing or any future digital value, which can be something

21:49.300 --> 21:54.780
to take an example, which everybody understands, Bitcoin, but also can be something like a

21:54.780 --> 21:58.060
piece of music and art which is digitally available.

21:58.060 --> 22:00.940
Has nothing to do with Ethereum or directly.

22:00.940 --> 22:05.340
It's just an exchange system for all digital values.

22:05.340 --> 22:12.320
Here we require, by definition in our foundation, it has to be private by design, because we

22:12.320 --> 22:13.380
want that.

22:13.380 --> 22:17.980
People decide and not some operation in the center.

22:17.980 --> 22:21.660
That's the context I'd like to give here.

22:21.660 --> 22:26.900
Other questions?

22:26.900 --> 22:28.820
Thank you very much for your time.

22:28.820 --> 22:55.720
Thank you,

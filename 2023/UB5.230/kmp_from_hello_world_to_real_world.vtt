WEBVTT

00:00.000 --> 00:02.000
Thank you.

00:05.140 --> 00:07.140
Hello, everyone. Hello, again.

00:08.240 --> 00:10.260
So we are going to resume. If you are in the back, please come

00:10.260 --> 00:12.260
in.

00:13.360 --> 00:15.360
We have seats in the front. And please make sure to make

00:16.460 --> 00:18.460
yourself comfortable for this next talk.

00:19.680 --> 00:21.680
Where I have the pleasure to introduce Russell.

00:22.780 --> 00:24.780
Russell is coming all the way from the USA to be with us

00:24.780 --> 00:26.780
today. He works at touch labs, knows everything about Kotlin

00:26.780 --> 00:28.780
and the real world.

00:30.080 --> 00:32.080
And we will talk about the real world.

00:33.380 --> 00:35.380
And today, we will tell us about from hello world to the real

00:35.380 --> 00:37.380
world.

00:39.480 --> 00:41.480
Yeah, thanks a lot. Yeah, I'm here from Boston where it's

00:42.580 --> 00:44.580
actually like negative 24 degrees Celsius today.

00:46.680 --> 00:48.680
So I'm all right with the rain.

00:50.780 --> 00:52.780
And yeah, my name is Russell Wolf.

00:52.780 --> 00:56.980
And I'm going to talk a little bit about the basic kind of

00:56.980 --> 00:59.300
hello world example that you might start out with to the

00:59.300 --> 01:02.280
sorts of things that you might need for a production

01:02.280 --> 01:04.280
kind of app.

01:06.580 --> 01:09.200
And I've been part of the work at touch lab, I've been doing

01:09.200 --> 01:13.200
Kotlin multiplatform things since pretty much day one.

01:13.200 --> 01:15.200
In a couple weeks it's going to be five years since I wrote my

01:15.200 --> 01:17.200
first Kotlin multiplatform code.

01:18.560 --> 01:20.560
And I'm going to talk about the other things I've been doing

01:20.560 --> 01:22.560
for a long time.

01:23.860 --> 01:25.860
And I'm going to talk about the first Kotlin multiplatform code.

01:27.760 --> 01:29.760
Which is kind of cool. I don't know. It hopefully means I know

01:29.760 --> 01:31.760
something about what I'm talking about. But you can let me know.

01:35.760 --> 01:37.760
So let's get started.

01:40.060 --> 01:42.060
So quick introduction to Kotlin multiplatform.

01:44.560 --> 01:46.560
And I'm kind of breaking up my talk, breaking up the talk by

01:46.560 --> 01:48.560
the way.

01:49.860 --> 01:51.860
And I'm going to talk about the

01:52.960 --> 01:54.960
Kotlin multiplatform code.

01:56.360 --> 01:58.360
And I'm going to talk about the

01:59.460 --> 02:01.460
Kotlin multiplatform code.

02:04.560 --> 02:06.560
So Kotlin grew up initially as a JVM language.

02:08.660 --> 02:10.660
But it also has back ends on JavaScript and native.

02:12.960 --> 02:14.960
And all of these are actually kind of

02:14.960 --> 02:16.960
a

02:18.260 --> 02:20.260
very different kind of code that you can do.

02:21.560 --> 02:23.560
And it also has a lot of code that

02:24.660 --> 02:26.660
involves but the ability to share code between them.

02:27.760 --> 02:29.760
So you have platform code that runs on a particular target.

02:32.760 --> 02:34.760
And then you have common code that runs on all of them.

02:38.660 --> 02:40.660
Or runs on combinations of them.

02:40.660 --> 02:42.660
And it's a lot of different things.

02:43.960 --> 02:45.960
And you can do it with a lot of different

02:47.260 --> 02:49.260
things that make sense to share.

02:51.360 --> 02:53.360
But you have the ability to drop into

02:54.460 --> 02:56.460
platform code for things that you don't want to share.

02:58.560 --> 03:00.560
And it lets you treat your shared code as basically just

03:00.560 --> 03:02.560
another library.

03:03.660 --> 03:05.660
So you can be writing what would otherwise be a native app and

03:05.660 --> 03:07.660
share just a piece of it.

03:07.660 --> 03:07.780
Just takenowing and telling the

03:07.780 --> 03:09.600
NET

03:09.660 --> 03:25.880
customer and talkinggal V

03:25.880 --> 03:27.520
and

03:27.520 --> 03:29.460
Ear Capitol inside of them.

03:29.760 --> 03:31.760
requirement with cases in Clbusters.

03:31.760 --> 03:36.460
Because KMM in the end is just like parts of KMP,

03:36.460 --> 03:39.040
it's just kind of working on the same technology stack.

03:39.040 --> 03:44.760
But in terms of what they're focused on for the developer experience,

03:44.760 --> 03:47.880
KMM is kind of the piece that's coming first.

03:47.920 --> 03:50.280
And yeah, as I mentioned before,

03:50.280 --> 03:53.420
it's recently moved into beta,

03:53.420 --> 03:56.760
it's planned to go stable this year.

03:56.760 --> 04:01.200
So it's a really good time to get into it,

04:01.200 --> 04:03.520
to start using it if you haven't yet.

04:03.520 --> 04:08.760
And what beta means to

04:08.760 --> 04:12.800
JetBrains can be a little bit different than you might be used to from other projects.

04:12.800 --> 04:16.920
They're very slow about designated things as stable.

04:16.920 --> 04:19.140
They want to be absolutely sure of every little detail.

04:19.140 --> 04:20.920
But even by calling it beta,

04:20.920 --> 04:24.080
they're very strongly committed to keeping things working.

04:24.080 --> 04:28.200
They're just saying there might be some breaking changes in the future.

04:28.200 --> 04:34.680
And to break down how Kotlin Multiplatform code works,

04:34.680 --> 04:40.000
I like to use this Venn diagram and focus on the mobile use case.

04:40.000 --> 04:42.120
So we're talking about Android and iOS.

04:42.120 --> 04:44.960
So if you're an Android developer,

04:44.960 --> 04:48.120
you're used to this diagram.

04:48.120 --> 04:53.200
You have access to all the Kotlin APIs you're used to,

04:53.200 --> 04:57.920
you have access to JVM and Android APIs.

04:57.920 --> 05:01.240
And there's a subset of that,

05:01.240 --> 05:06.080
just the kind of pure Kotlin stuff that in principle you can run on any platform.

05:06.080 --> 05:10.240
Which then means you can take that over to the iOS side,

05:10.240 --> 05:14.280
also add some iOS platform specific code.

05:17.280 --> 05:23.840
So you have your shared bits and your platform bits.

05:23.840 --> 05:28.120
And the KMP tool chain brings all of that together.

05:28.120 --> 05:33.640
So that essentially each of these different colors on the diagram are just

05:33.640 --> 05:37.920
a different source directory and the tool chain knows how to put the right parts together,

05:37.920 --> 05:41.520
so that you get the right code for your platform.

05:41.520 --> 05:47.000
And again, there's more to KMP than just KMM,

05:47.000 --> 05:54.000
but the eight-way Venn diagram and everything is a lot more complicated to draw.

05:54.000 --> 06:02.320
So what does it look like when you're writing your first Hello Worlds in Kotlin Multiplatform?

06:02.320 --> 06:12.040
And one way to get that is to start with the Kotlin Multiplatform mobile plugin for Android Studio.

06:12.040 --> 06:18.640
So you can do a lot of this stuff, I tend to use IntelliJ idea more than Android Studio

06:18.640 --> 06:21.320
when I'm doing my KMP development.

06:21.320 --> 06:27.640
But the new project template in Android Studio is a little bit easier to get started with.

06:27.640 --> 06:35.880
They have these Kotlin Multiplatform application, or Kotlin Multiplatform library.

06:35.880 --> 06:40.680
And what they give you is some code that looks kind of like this.

06:40.680 --> 06:44.240
And don't worry about every little detail of it.

06:44.240 --> 06:50.480
But this is kind of like the Hello World template that it generates for you.

06:50.480 --> 06:54.080
So there is a platform interface in the common code.

06:54.080 --> 07:00.160
So the common code is in the center here, the Android is on the left, the iOS is on the right.

07:00.160 --> 07:07.120
So there's a platform interface that's implemented on each platform as Android platform and iOS platform.

07:07.120 --> 07:09.640
There is a expect function.

07:09.640 --> 07:16.240
So expect and actual are two keywords that Kotlin Multiplatform adds to the language that

07:16.240 --> 07:20.920
essentially let you declare something in your common code but implement it in your platform

07:20.920 --> 07:23.960
code.

07:23.960 --> 07:27.120
Essentially kind of like a header.

07:27.120 --> 07:34.320
I mean, actually they use the header keyword for it before how it was released in 2017,

07:34.320 --> 07:38.000
2018-ish.

07:38.000 --> 07:44.720
And so there's an expect function that you kind of get a default platform that has actual

07:44.720 --> 07:47.320
implications on each platform.

07:47.320 --> 07:50.280
And then there's a greeting class that just kind of brings it all together and prints

07:50.280 --> 07:52.960
the name of the platform that you're on.

07:52.960 --> 07:58.200
And this gives you a little playground to start messing around with Kotlin Multiplatform

07:58.200 --> 08:01.840
code.

08:01.840 --> 08:07.840
And I actually really like there's I like the way that they use expect actual in here.

08:07.840 --> 08:11.640
It's very easy when you have this new tool starting out with Kotlin Multiplatform to kind

08:11.640 --> 08:12.640
of overuse it.

08:12.640 --> 08:17.200
I mean, you start making all these like expect classes and things like that.

08:17.200 --> 08:24.720
I tend to find it's really nice to also use like to hold on to interfaces as well.

08:24.720 --> 08:28.560
So when you define an interface platform rather than an expect class platform, you can substitute

08:28.560 --> 08:36.320
other implementations a lot more easily.

08:36.320 --> 08:41.560
And so this this is kind of like a rough sense of the code structure that you get from this

08:41.560 --> 08:42.560
template.

08:42.560 --> 08:49.360
So the the clue that I showed you is kind of this bottom three boxes.

08:49.360 --> 08:53.080
So there's common code in the middle is the orange orange.

08:53.080 --> 08:58.800
There's Android sources in that that you then compile to an Android library.

08:58.800 --> 09:05.120
There's iOS sources that you then compile to a iOS framework file.

09:05.120 --> 09:10.520
And then if you use one of the application templates, it'll look at you in that player

09:10.520 --> 09:13.840
that consumes that.

09:13.840 --> 09:19.200
There's multiple ways that you can configure configure the iOS app to consume it.

09:19.200 --> 09:23.120
So you can, which essentially there's there's different dependency managers that you can

09:23.120 --> 09:25.960
use in iOS.

09:25.960 --> 09:33.240
The there's a default that's just kind of manually include the framework.

09:33.240 --> 09:37.000
You kind of add a custom it at a custom build step in Xcode that will call into Kotlin and

09:37.000 --> 09:39.160
do that.

09:39.160 --> 09:46.240
There's also a plugin that's part of the Kotlin tool chain that uses CocoaPods.

09:46.240 --> 09:54.400
So CocoaPods is kind of is the has historically been a commonly used dependency manager on

09:54.400 --> 09:55.400
iOS.

09:55.400 --> 10:00.080
It's these days starting to be replaced by Swift package manager.

10:00.080 --> 10:09.360
The Kotlin tool chain doesn't have as good integration into SPM yet.

10:09.360 --> 10:17.840
And then also just call out we at touch lab have a sample called camp kit that can also

10:17.840 --> 10:21.440
be a nice kind of place to start out if you're if you're playing with stuff for the first

10:21.440 --> 10:24.440
time.

10:24.440 --> 10:30.080
It's a somewhat more complicated sample than that hello world.

10:30.080 --> 10:34.400
It has a bit more kind of architecture to it and shows kind of some of our standard

10:34.400 --> 10:37.840
architecture and library practices.

10:37.840 --> 10:41.200
And also has a bunch of documentation kind of explaining why we make some of the choices

10:41.200 --> 10:43.640
that we do.

10:43.640 --> 10:47.240
So check that out also if you're interested.

10:47.240 --> 10:53.040
So what are kind of some common themes around these sorts of starter projects?

10:53.040 --> 10:58.920
And there's a lot more than just those two I should say also.

10:58.920 --> 11:02.440
There's lots of people out there that have kind of put together interesting Kotlin multi

11:02.440 --> 11:05.440
platform samples that you can use when you're first learning.

11:05.440 --> 11:13.320
And something that comes up often in a lot of them is they tend to aim at maximizing

11:13.320 --> 11:16.280
shared code.

11:16.280 --> 11:20.060
Which like in an ideal world is really nice.

11:20.060 --> 11:25.080
In the real world, oftentimes you're starting from two separate native apps and you want

11:25.080 --> 11:29.200
to incrementally move towards more shared.

11:29.200 --> 11:35.440
And you don't always get a good sense of what that looks like from any of the standard samples.

11:35.440 --> 11:42.680
These also tend to be mono repos when you're looking at starter samples.

11:42.680 --> 11:46.040
So what if I already have existing apps that live in different places but I want to start

11:46.040 --> 11:51.200
sharing code between them, what does that look like?

11:51.200 --> 11:58.560
A big piece of a lot of them is there will be some step in your build process in iOS

11:58.560 --> 12:03.520
where Xcode has to manually call and have to exclusively call into Gradle to build your

12:03.520 --> 12:04.520
Kotlin.

12:04.520 --> 12:10.040
But if you're on a larger team, you might not want to have to do that every time.

12:10.040 --> 12:16.000
Your iOS team might not even have a JDK set up if they're not used to using them.

12:16.000 --> 12:23.560
So what do you do in that case?

12:23.560 --> 12:29.840
And they also tend to be single module when you're looking at sample projects.

12:29.840 --> 12:34.360
But what happens when things get bigger?

12:34.360 --> 12:41.640
So that brings us to, yeah, what does it look like when you take all these sorts of things

12:41.640 --> 12:49.120
and start scaling it up to real world projects?

12:49.120 --> 12:53.840
I'm going to talk about some of the ways we tend to think about this at Touchlab as well

12:53.840 --> 13:00.160
as some tools and things that we've put out into the community to help out with some of

13:00.160 --> 13:03.320
these things.

13:03.320 --> 13:06.760
And the first thing I want to talk about is team structure.

13:06.760 --> 13:12.800
This is something we've been talking about a lot internally at Touchlab recently and

13:12.800 --> 13:18.720
building out this sort of taxonomy of different ways that different teams approach the way

13:18.720 --> 13:21.800
that they handle their shared code.

13:21.800 --> 13:29.800
And a common kind of core piece of that is being thoughtful about the ways that the structure

13:29.800 --> 13:35.680
of your team impacts the way that you want to organize your code.

13:35.680 --> 13:42.560
Because lots of teams are very different.

13:42.560 --> 13:47.520
The distinction I'll kind of highlight here, and it kind of works across a couple different

13:47.520 --> 13:48.520
dimensions.

13:48.520 --> 13:53.200
I tend to think of it as kind of small teams versus large teams.

13:53.200 --> 13:58.960
But it's also sometimes teams that work kind of as one unit versus teams that work as multiple

13:58.960 --> 14:01.760
units.

14:01.760 --> 14:08.640
And a key piece of that is often is the group that is writing the shared code the same group

14:08.640 --> 14:12.520
as the people who are consuming the shared code.

14:12.520 --> 14:18.280
So when you're a smaller team or if you're one unit, you tend to have kind of fewer worries

14:18.280 --> 14:22.840
about who's owning what parts of the code.

14:22.840 --> 14:26.320
You're more kind of unified in what your developer setup looks like.

14:26.320 --> 14:30.440
And you're more likely to be in a situation where you're kind of sharing a higher percentage

14:30.440 --> 14:33.880
of things and just kind of wrapping a thin UI around it.

14:33.880 --> 14:39.040
And you're more likely to be doing all of your feature development kind of at once for

14:39.040 --> 14:42.040
both platforms.

14:42.040 --> 14:47.560
On the other hand, when teams get larger, things get a little bit messier.

14:47.560 --> 14:55.520
You're more likely to have IOS specialists who don't want to kind of deal with the Kotlin

14:55.520 --> 14:56.760
directly.

14:56.760 --> 15:02.840
And your Kotlin code, you're more likely to have a larger IOS app than just what the Kotlin

15:02.840 --> 15:03.840
is.

15:03.840 --> 15:09.160
So you might, like your Kotlin is just kind of one more thing in a sea of other native

15:09.160 --> 15:13.840
libraries that your iOS app is using.

15:13.840 --> 15:22.080
And you tend to want to minimize the impact of your Kotlin on the rest of the iOS code.

15:22.080 --> 15:31.720
And what this means in practice is you want to kind of rather than linking your XO build

15:31.720 --> 15:40.920
to your Kotlin directly, you want to kind of publish it as an external library.

15:40.920 --> 15:46.320
And sort of so the diagram that I showed you that kind of diagram on the left earlier,

15:46.320 --> 15:50.400
the way it can look like in a larger team is rather than directly consuming things,

15:50.400 --> 15:54.840
your shared code is being published to some sort of repository.

15:54.840 --> 15:58.920
And then your apps are pulling that artifact down.

15:58.920 --> 16:03.240
And there's kind of more of a two-step process to making updates.

16:03.240 --> 16:10.960
But it lets you kind of work in separate screens more easily.

16:10.960 --> 16:16.400
And we put out a tool to help with this in the fall.

16:16.400 --> 16:18.600
We touch lab.

16:18.600 --> 16:24.160
It's called KMM bridge and it's a gradle plug-in that can essentially manage the publishing

16:24.160 --> 16:28.680
of your iOS framework in a couple different ways.

16:28.680 --> 16:32.720
So it gives you a gradle task to publish a new version when you've made changes.

16:32.720 --> 16:36.640
It has options around how you implement that version and things like that.

16:36.640 --> 16:42.160
Options for where you want to host that binary and the ability to plug in your own.

16:42.160 --> 16:48.160
And then some helpers if you're using so package manager for making that local development

16:48.160 --> 16:50.480
flow a little bit easier.

16:50.480 --> 16:57.400
So sometimes you want to be able to toggle between using the binary that you pulled down

16:57.400 --> 17:03.280
versus building it directly when you're trying to write new code or debug it.

17:03.280 --> 17:05.480
So we have some helpers to make that flow a little bit easier.

17:05.480 --> 17:09.960
There's a bunch of little things that are still kind of a work in progress on here.

17:09.960 --> 17:15.240
If you're a team that's interested in using it, we'd love to talk to you and get some

17:15.240 --> 17:17.120
feedback.

17:17.120 --> 17:23.000
So feel free to find me and let me know if you want to learn more about that.

17:23.000 --> 17:28.200
Another problem that comes up at scale is monetization.

17:28.200 --> 17:32.360
So when you write Hello World, it tends to be one module.

17:32.360 --> 17:35.840
But when you're writing bigger things, you might want to have more than one.

17:35.840 --> 17:39.380
And Kotlin native, it turns out makes this a little bit complicated.

17:39.380 --> 17:47.960
So when you have multiple Kotlin native modules and you export them to iOS, they're essentially

17:47.960 --> 17:49.840
their own kind of separate worlds.

17:49.840 --> 17:55.240
And so each of these modules has its own copy of any internal dependencies, its own copy

17:55.240 --> 17:59.360
of the standard library, its own copy of any third module that you might have underneath

17:59.360 --> 18:00.920
them that you're trying to share between them.

18:00.920 --> 18:06.680
And they can't kind of talk between each other very easily.

18:06.680 --> 18:10.380
And this can be okay if they're doing very distinct things.

18:10.380 --> 18:15.400
So maybe one of them is making all those calls and one of them is running your database.

18:15.400 --> 18:19.220
And they don't really need to interact with each other.

18:19.220 --> 18:22.720
And then having them separate can be okay.

18:22.720 --> 18:29.680
But often you end up wanting to kind of write this umbrella module on top of them so that

18:29.680 --> 18:33.720
in your Kotlin layer, you can have them talk to each other more easily and then you have

18:33.720 --> 18:38.240
sort of a shared module on top that you export as your iOS framework.

18:38.240 --> 18:49.040
And that lets you more easily have that more typical kind of modular structure while working

18:49.040 --> 18:51.800
with the Kotlin native limitations.

18:51.800 --> 18:57.280
There's still some messiness to this because your umbrella framework will have you have

18:57.280 --> 19:05.960
kind of namespace clashes where all of your declarations in here are essentially in one

19:05.960 --> 19:08.640
giant global namespace.

19:08.640 --> 19:12.320
And there's roadmap tickets that will improve this.

19:12.320 --> 19:22.320
But right now it can be a little bit messy when you have a lot of code in there.

19:22.320 --> 19:29.240
Another thing that comes up in real world projects is your binary size.

19:29.240 --> 19:33.280
So hello world tends to be small, real apps tend to be larger.

19:33.280 --> 19:40.000
And real apps have consequences when things are too large where things like the app store

19:40.000 --> 19:44.440
will throttle your downloading or force you to do it on Wi-Fi rather than on mobile if

19:44.440 --> 19:45.440
your app gets too big.

19:45.440 --> 19:52.000
And this can be a significant impact to the amount of downloads that you get.

19:52.000 --> 19:58.240
And it turns out one of the biggest contributors to this is the Objective-C interface that Kotlin

19:58.240 --> 20:04.320
native uses to export your code to iOS.

20:04.320 --> 20:09.120
And the kind of trick to use here is you want to limit the amount of public declarations

20:09.120 --> 20:13.880
that you have in your Kotlin code.

20:13.880 --> 20:17.280
And that will shrink that Objective-C interface because it only needs to be generated for

20:17.280 --> 20:19.120
public declarations.

20:19.120 --> 20:24.880
And that hidden from Objective-C annotation that Mark mentioned earlier can also be a

20:24.880 --> 20:27.640
way to do that.

20:27.640 --> 20:35.200
Or there's kind of different monitoring structures you can sometimes use.

20:35.200 --> 20:46.940
So I'll mention quickly a couple other tools that Taut

20:46.940 --> 20:52.520
that you get out of Kotlin native doesn't export to Swift very well.

20:52.520 --> 20:56.760
So we have this tool called Crash Kaios that will essentially symbolicate your stack traces

20:56.760 --> 20:59.020
better.

20:59.020 --> 21:04.840
We have some updates to that in flight that will clean up different pieces of that story.

21:04.840 --> 21:10.440
But I'm not going to go into detail there because I'm getting low on time.

21:10.440 --> 21:15.880
And we also have an Xcode debugger that lets you debug your Kotlin code from Xcode, which

21:15.880 --> 21:22.200
can be a nicer environment for your iOS developers when you're kind of introducing that.

21:22.200 --> 21:29.560
That recently to be a CLI-based interface, which makes it much easier to update and install.

21:29.560 --> 21:36.340
So if you've tried it out in the past, feel free to give it another look.

21:36.340 --> 21:43.520
One of the things I want to talk about is kind of the shape of your API service.

21:43.520 --> 21:47.000
So how will the app tend to be small?

21:47.000 --> 21:53.000
But as your app gets bigger, you start to care more and more about what sort of the

21:53.000 --> 21:56.000
how would you manage your API?

21:56.000 --> 22:00.160
And Swift and Kotlin tend to want slightly different things with that.

22:00.160 --> 22:07.520
So I just want to point out, like, don't be afraid to kind of need a bit of translation

22:07.520 --> 22:11.840
layer between your shared code and your platform code.

22:11.840 --> 22:15.720
And we have some tooling that we're working on to make some of that easier.

22:15.720 --> 22:16.720
But it's not in the open yet.

22:16.720 --> 22:20.280
So I'm not going to go into detail there.

22:20.280 --> 22:25.440
I'll skip the example because I'm running out of time.

22:25.440 --> 22:31.560
But kind of the overall lesson that I want to highlight is different teams have different

22:31.560 --> 22:35.680
structures and want slightly different things.

22:35.680 --> 22:38.760
Kotlin is all about adaptability.

22:38.760 --> 22:42.680
And so if you're a team that wants to share a lot of code, you can do that.

22:42.680 --> 22:46.840
If you're a team that wants to minimize the impact of the Kotlin on the rest of your domain

22:46.840 --> 22:49.960
team, you can do that.

22:49.960 --> 22:56.880
And you have the flexibility to kind of choose the way that you want to approach all of that.

22:56.880 --> 22:57.880
So thanks.

22:57.880 --> 23:00.280
I think I'm probably out of time for questions.

23:00.280 --> 23:02.840
But I'm definitely happy to answer stuff in person.

23:02.840 --> 23:04.840
Feel free to tap me on the shoulder.

23:04.840 --> 23:06.640
Find me whatever later today.

23:06.640 --> 23:09.680
If I'm staring at my laptop, it's not important because it's Saturday.

23:09.680 --> 23:11.680
So I'd love to chat.

23:11.680 --> 23:37.000
Thanks.

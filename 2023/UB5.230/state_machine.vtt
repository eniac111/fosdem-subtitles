WEBVTT

00:00.000 --> 00:15.000
up to you. Can I start? Okay. Can you hear me? Okay. I am Gabriele Falasca, a front-end

00:15.000 --> 00:23.080
developer working in a company called Surcents and located in Rome. And if you don't understand,

00:23.080 --> 00:32.080
I will speak to you about a finite-state machine with some examples inspired by retro games

00:32.080 --> 00:43.360
of the 90s. Let's start with this slide that is very clear and self-explanatory. A finite-state

00:43.360 --> 00:49.560
machine is an abstract machine that can be exactly in one finite state at any given time.

00:49.560 --> 00:55.360
It can change from a state to another in response to some inputs. This is the Wikipedia definition

00:55.360 --> 01:02.360
of a finite-state machine, and it's a very theoretical definition. But now we will see

01:02.360 --> 01:13.920
how to apply that pattern in programming. For a representative finite-state machine,

01:13.920 --> 01:20.240
you can use the state charts that are sort of graphs where the states, the nodes are

01:20.240 --> 01:29.520
called the states, and the links between the nodes are called the transitions. This is

01:29.520 --> 01:41.960
the state charts of an application that made a fetch call. So we have the state of this

01:41.960 --> 01:49.680
application is idle, loading, success, and failure. And the events that trigger the transition

01:49.680 --> 01:57.520
are fetch event that triggered the transition from idle to loading, react event that triggered

01:57.520 --> 02:04.560
the transition from loading to failure, retrieve event that triggers the transition from failure

02:04.560 --> 02:17.280
to loading, and resolve event that triggered the transition from loading to success. Another

02:17.280 --> 02:26.880
state chart is this, a little bit complex. This is an elevator. An elevator starts in

02:26.880 --> 02:34.760
idle state. When a user calls the elevator, it passes to state to prepare up or prepare

02:34.760 --> 02:46.840
down. When the user selects the floor, elevator passes the state moving until it reaches the

02:46.840 --> 02:55.080
right floor. After it reaches the right floor, elevator passes in state door opening. And

02:55.080 --> 03:05.760
when the user left the cabin, elevator returns to idle state. Now let's create a state chart.

03:05.760 --> 03:15.600
Yes, we are going to create the state chart of this animation. The chart that take off

03:15.600 --> 03:25.120
his panties, military greets, return to idle. So the states of the state chart are idle

03:25.120 --> 03:40.720
state when waiting, panty state, and military state. Before defining transition, I think

03:40.720 --> 03:47.960
I give you some context about this charter. If you don't know, this charter is called

03:47.960 --> 03:57.040
Yakuza Roshimori, a side charter of a arcade game in the 90s called Metaslag. He triggered

03:57.040 --> 04:05.480
this animation when the main character, Marco, worked near to him and he made this animation

04:05.480 --> 04:15.200
for dropping bombs and reward for the main character. So the first event that linked

04:15.200 --> 04:23.760
idle state with the panty state is Marco is near. Second event that connects panty state

04:23.760 --> 04:31.160
with the military state is reward dropped because after dropped the reward, he redress

04:31.160 --> 04:39.720
his panties and greets Marco with the military greets. And after, when Marco is far, he returns

04:39.720 --> 04:47.000
to idle state. Now let's see this event live, but before I want to show you the simplest

04:47.000 --> 04:54.600
code of finite state machine. It's JavaScript because here we are in a room called JavaScript

04:54.600 --> 05:03.000
in the bedroom. But you can apply this pattern in every modern programming language. It's

05:03.000 --> 05:11.560
a simple ES6 class with two methods. One for setting a state and the other one for executing

05:11.560 --> 05:25.680
the routine of the current state. This machine in live we can see here. This is a little

05:25.680 --> 05:36.120
part of Metaslag game in the browser. I made for demo. When you press the arrow right and

05:36.120 --> 05:47.400
left, Marco walks back and forward. And when he's near Yakutaro, in very big screen there

05:47.400 --> 05:56.000
are a lot of iterations. Yakutaro plays his animation, take off the panties and greets

05:56.000 --> 06:03.120
Marco. When Marco returns far, he returns to idle state. Let's see the code of this

06:03.120 --> 06:30.960
demo. We have, you see, I have to zoom. Okay. Okay. This is the HTML page. It's very simple.

06:30.960 --> 06:42.080
It has a shin. That's the shin and two images that are the sprites of two charters. Now

06:42.080 --> 06:49.160
we have a simple entry point of the application that has the HTML list and for the arrow keys.

06:49.160 --> 06:59.880
And initialize the script for Marco and Yakutaro. We have our machine is the same. So in the

06:59.880 --> 07:09.120
slide and the two script for Marco and Yakutaro. Marco is a simple script as just two methods

07:09.120 --> 07:22.400
for going back and forward. And Yakutaro script is as the machine as brain. So it has the

07:22.400 --> 07:30.160
three methods that are the states we have defined before. And another utility method

07:30.160 --> 07:40.440
for observing Marco and trigger the events for change the states of the machine. And

07:40.440 --> 07:58.360
this is just this code. Return to slide. Another type of machine, a bit optimized from this

07:58.360 --> 08:05.560
is the stack based finite state machine. This kind of machine has not a single active state

08:05.560 --> 08:14.160
but a stack of state. And consider active the state on top of the stack. So in this

08:14.160 --> 08:22.440
model you can navigate through the states in back and forward way. Think the history

08:22.440 --> 08:29.960
of the browser like a finite state machine where think to the web pages as the states

08:29.960 --> 08:36.600
and the back and forward event of the browser. The events that trigger the transition. It's

08:36.600 --> 08:44.720
clear. This is the code of stack based finite state machine. It's very similar to the previous

08:44.720 --> 08:50.400
one but we have the stack of the states instead of the active state. And three utility for

08:50.400 --> 09:06.080
pushing and popping the state in the stack. Very simple. If you have to develop more complex

09:06.080 --> 09:18.080
machine there are various tools and framework. In JavaScript the most famous is X8. That

09:18.080 --> 09:27.840
is a series of utility for make state chart and finite state machine. This is the code

09:27.840 --> 09:45.040
of a machine created with X8. It's very functionally way. We have got utility for create the machine.

09:45.040 --> 09:59.520
All configuration based. And the toggle service for sending the event and define the transitions.

09:59.520 --> 10:08.640
My goal in this talk is not to show you a single framework because you can choose one

10:08.640 --> 10:16.320
and study by yourself. I want to explain the theory and the pattern and how to apply to

10:16.320 --> 10:27.720
real life. I introduced X8 because it has a tool called X8 beads that can help you to

10:27.720 --> 10:40.920
test your machine. The tool is this. I don't know if you see. This is the same state chart

10:40.920 --> 10:50.000
of our previous event. And it's interactive. You can trigger the events directly from the

10:50.000 --> 11:01.680
chart and see what's happened. And on the side bar you have three tabs. In the first

11:01.680 --> 11:14.320
one you can put the code of your machine in X8 way. The second tab is the state that contains

11:14.320 --> 11:22.760
all information of the current state of the machine. And from the third tab you can programmatically

11:22.760 --> 11:38.800
send the event for testing your machine. As you can see, I can send the event directly

11:38.800 --> 12:05.560
from here. You can reset the machine. My talk is finished. Have you got any questions?

12:05.560 --> 12:28.760
Okay. Who has the first question? And do raise the hands. Hello. Thank you for your

12:28.760 --> 12:34.120
presentation. What happens to your state if an event is triggered that it can't handle?

12:34.120 --> 12:39.480
Sorry, I don't understand. What happens to your state if an event is triggered that you

12:39.480 --> 12:49.360
can't handle at that state? If they are connected to transition, it doesn't happen. Nothing.

12:49.360 --> 12:58.040
Because the machine responds to the event. So if we are in another state and I send a

12:58.040 --> 13:07.160
resolved event, nothing happens. This depends on the implementation that you use. In X8,

13:07.160 --> 13:17.720
that is the most famous implementation, this thing is safe. So it depends on which machine

13:17.720 --> 13:38.400
you use and how you have implemented. Okay. Another question. Raise your hand very high,

13:38.400 --> 13:45.040
please. What will you think about it? Thank you for the video team up there with the green

13:45.040 --> 14:01.080
T-shirt. They will hear it after. Don't worry. They hear everything. Yeah. How is the animation

14:01.080 --> 14:05.520
graphically that we see on the screen is handled with regard to the state machine? Because

14:05.520 --> 14:16.640
there is some delay. It has some time of duration. Thank you. The animation is how it's made.

14:16.640 --> 14:32.960
I have just the three sprites and every state of the machine set the correct sprite in the

14:32.960 --> 14:44.400
image tag and prepare the machine for the next state. And the observer is update the

14:44.400 --> 15:07.280
state and run the routine of every state. Another question. Okay. Will you be around?

15:07.280 --> 15:19.200
Will you be in the room or outside? There are no more questions. Thanks again. Okay.

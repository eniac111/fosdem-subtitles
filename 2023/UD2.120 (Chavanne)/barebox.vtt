WEBVTT

00:00.000 --> 00:17.320
So, hi everyone, welcome to my talk, welcome to Bearbox and first of all can all of you

00:17.320 --> 00:25.680
raise your hands whoever heard of Bearbox or ok that is quite some and to use it actually

00:25.680 --> 00:35.520
in some projects ok that is what I thought ok as I thought I am Marco, I am from Pentatonix,

00:35.520 --> 00:42.440
I am an embedded software developer, my tasks are related to kernel, to bootloader, to BSP

00:42.440 --> 00:49.400
stuff, graphics stuff and so on and so on. Most of the time I contribute my work to upstream

00:49.400 --> 00:57.960
sometimes not, I live in the north of Germany and that is it and again there is just a brief

00:57.960 --> 01:04.040
introduction to Bearbox who is not becoming familiar with and then let us add a new driver

01:04.040 --> 01:10.240
so an example then add a new board so you can see how you can add your own board and

01:10.240 --> 01:15.600
upstream it to Bearbox because we are always welcome new boards and then we make a short

01:15.600 --> 01:19.840
hands on hopefully we have some time for it.

01:19.840 --> 01:31.640
And yeah ok then welcome to Bearbox, Bearbox started in 2007 as a patchlet of U-Boot and

01:31.640 --> 01:40.120
the patchlet was called U-Boot V2, this patchlet was retracted and then yeah Sasha renamed

01:40.120 --> 01:49.920
it and yeah made an official fork of it in 2009. We have monthly releases, we have mainline

01:49.920 --> 01:55.640
support in PDX test and we have mainline support in Biltwood and we want to have mainline support

01:55.640 --> 02:03.560
in Yokto and Open Emmented Core. I sent patches just yesterday you can find the link below

02:03.560 --> 02:11.000
or in the slides. Please any discussion is welcome and if it is not getting into Open

02:11.000 --> 02:21.320
Embedded Core you can pull it from MetapdX or Metabearbox and ok yeah we have 330 contributors

02:21.320 --> 02:30.840
around and yeah it sounds not that much but we are living, Bearbox is living, we have

02:30.840 --> 02:42.840
around 1400 commits per year and ok the graph is not that optimal, it would be wise all

02:42.840 --> 02:54.240
the time but yeah 1400 it's not that bad and we are live. So let's add a new driver

02:54.240 --> 03:01.400
and what our design decisions in Bearbox. We are coming from Linux, we don't want to

03:01.400 --> 03:08.880
re-render at the third time or the 10th time so we are taking the Linux device driver model

03:08.880 --> 03:15.760
and stripping it down to bootloader use case. All the configuration is done via device tree

03:15.760 --> 03:25.040
since day one, since we get forked and yeah device tree and K config, some of it, most

03:25.040 --> 03:31.920
of it, device tree and we also since we re-use the Linux device driver model we also re-use

03:31.920 --> 03:39.720
the driver frameworks. We just strip it down to met our requirements and then push it and

03:39.720 --> 03:47.920
it's mostly just in copy and paste with small addictions. So then let's add a new driver.

03:47.920 --> 03:52.800
As I said it's in copy and paste, copy it from the Linux source, copy it to the Bearbox

03:52.800 --> 04:00.480
source and then adapt the code. So how does it look? In some example I took the clock

04:00.480 --> 04:08.560
from some workshop and I made a diff, you can see the diff above, it's Linux 6.1 or

04:08.560 --> 04:19.120
6.2 I thought, 6.2 RC blah blah and yeah just adapt the headers because of course Bearbox

04:19.120 --> 04:26.960
does not have all those headers and replace them with some Bearbox headers and then replace

04:26.960 --> 04:35.160
some functions we do not support. That's not very important, it's just replace some functions,

04:35.160 --> 04:43.600
remove it or replace it, yeah. So we adapted the driver, we are finally done. So we have

04:43.600 --> 04:51.920
ported our new clock driver for this workshop. So we have changed 50 lines of code for a

04:51.920 --> 05:01.160
driver of about 171 lines of code, this makes about 1% or 2% of adapted code and we ported

05:01.160 --> 05:09.440
the driver to Bearbox, to a bootloader. Most of the time when you port the driver, clock

05:09.440 --> 05:18.560
drivers are a bit specific but some drivers do IRQ and Bearbox we don't have IRQs so you

05:18.560 --> 05:25.240
need to port it to some polling mechanism but we have headers for that so we are welcome

05:25.240 --> 05:31.640
you to port your driver or your driver of choice you need into a bootloader. So then

05:31.640 --> 05:36.360
after we ported the driver we need to compile it. So let's add a K config in the make file

05:36.360 --> 05:44.440
because we are a kernel related bootloader. So let's add a K config menu entry and at

05:44.440 --> 05:52.840
the make file. It looks like a kernel. So then we are finally done. We need to enable

05:52.840 --> 05:58.800
it, we need to compile it and we have everything. And of course we can test it with what with

05:58.800 --> 06:06.000
the Linux device tree because we are device tree based and since we are using the complete

06:06.000 --> 06:11.280
driver from Linux we also have the complete bindings from Linux so we can use the upstream

06:11.280 --> 06:19.040
Linux device tree. You don't have to do anything just copy and paste. So yeah, feels like writing

06:19.040 --> 06:28.120
a kernel driver isn't it? To me at least. So to sum up this a bit the Bearbox drivers

06:28.120 --> 06:36.520
are just a stripped down Linux version driver and drivers can be ported with little effort.

06:36.520 --> 06:43.760
There may be some more effort if you have more complex drivers or if you port frameworks

06:43.760 --> 06:49.200
but by frameworks that really depends. There are some really easy frameworks and there

06:49.200 --> 06:55.280
are some frameworks which are huge. So I added some examples which frameworks we already

06:55.280 --> 07:05.200
support. A very decent one is the NetDSA. I think some of you know the DSA stuff. This

07:05.200 --> 07:12.360
distributed architecture for switches. I think it's called distributed switch architecture.

07:12.360 --> 07:20.600
And we support it in Bearbox because we are using the NetDSA framework from Linux. So

07:20.600 --> 07:26.760
we can do NetDSA with my bootloader so you can speak with your switch like you do in

07:26.760 --> 07:36.160
Linux. So that's very impressing for a bootloader. And yeah. Then let's move on. We have added

07:36.160 --> 07:42.480
our driver. Let's move on and add a new board. Before we can add a new board I wanted to

07:42.480 --> 07:49.040
explain you some stuff, some internals of Bearbox. I don't want to go into detail because

07:49.040 --> 07:57.800
we don't have that much time. If we have more time at the end I will show some more examples.

07:57.800 --> 08:02.720
And yeah of course you can raise your hand if you have questions in the end. Anyway.

08:02.720 --> 08:09.560
We have a single binary in Bearbox which you flash to the target. But this is composed

08:09.560 --> 08:14.960
of several components. One of it is the sock header. This is really, yeah. One of it is

08:14.960 --> 08:20.920
the sock header. Then we have this pre-bootloader. Then we have some firmware blocks like device

08:20.920 --> 08:30.600
tree like third party firmware blocks, TFA or ATF or DDR firmware. Depends. Depends on

08:30.600 --> 08:37.600
your sock also. And then we have the actual bootloader. So as you can see there is a singleton

08:37.600 --> 08:46.560
image but it is composed of different firmwares or different blocks. In Bearbox we do this

08:46.560 --> 08:53.600
composing for the pre-bootloader and for the firmware and for the actual bootloader we

08:53.600 --> 09:01.800
do link it together and the sock header is appended. So yeah also the sock header is

09:01.800 --> 09:07.720
very sock specific and this appending mechanism depends on this image creation tool which

09:07.720 --> 09:18.200
also sock specific. So then also some booting stuff need to be known before you can add

09:18.200 --> 09:28.680
the board. Most modern socks are booting from a bootworm. So you plug in the check and then

09:28.680 --> 09:33.960
the bootworm comes up, the bootworm loads some stuff from the boot medium you configured

09:33.960 --> 09:42.840
via some TBIOs or some pins and then it is loading some kilobytes into some static RAM

09:42.840 --> 09:47.880
and then it jumps to the static RAM and then executes the pre-bootloader and then the bootloader

09:47.880 --> 09:55.280
and the bootloader finally decurnals. So now look into deeper and add a new bot. So as

09:55.280 --> 10:01.680
I said the bootworm is loading this sock header. It is decoding this sock header, it is really

10:01.680 --> 10:11.840
sock specific and it is executing the software which was loaded from the boot medium. Then

10:11.840 --> 10:19.640
the pre-bootloader gets loaded by the bootworm and set up the DRAM and then it is loading

10:19.640 --> 10:28.920
the real bootloader to the DRAM after it is set up to DRAM and then it jumps to the actual

10:28.920 --> 10:35.880
bootloader or if you have some more decent socks like ARMv8 based socks then it is jumping

10:35.880 --> 10:43.000
to the TFA and the TFA is jumping to the bootloader which we previously loaded to the DRAM. So

10:43.000 --> 10:50.920
okay, now we know it and now we add the pre-bootloader stuff. This pre-bootloader stuff does not

10:50.920 --> 10:57.080
have any support of device pre-orso. It is kind of low level stuff, it is kind of dirty

10:57.080 --> 11:05.440
stuff. Anyway, in Barbox everything starts at the entry function. The entry function

11:05.440 --> 11:15.480
is always the first point where it starts. Okay, let's add a iMIX 8MNEvk. With this entry

11:15.480 --> 11:21.640
function we have some header functions after we load it into the DRAM and then we are calling

11:21.640 --> 11:32.200
the NXP, this is some bot specific code which we get here and this set up the UART. So we

11:32.200 --> 11:40.000
have pre-bootloader, low level debug stuff and then as the function calls startATF, this

11:40.000 --> 11:47.080
function set up the DDR as I said. It loads the Barbox to the DRAM and starts the TFA and

11:47.080 --> 11:54.760
the TFA is then jumping into the loaded image or into the given image, into the image which

11:54.760 --> 12:05.920
we loaded previously at the specific address we told TFA. And after we loaded this we get

12:05.920 --> 12:14.400
started by this last function and that's actually the Barbox entry function. And here you can

12:14.400 --> 12:21.360
see the pre-bootloader is passing the device tree. So the pre-bootloader also loaded the

12:21.360 --> 12:27.320
device tree and it's passing the device tree finally to Barbox. So Barbox is just running

12:27.320 --> 12:34.240
with the device tree. So now let's come into the Barbox to the bootloader. This is the

12:34.240 --> 12:40.440
stuff where all the metric happens, where all your bot specific fix ups does happen

12:40.440 --> 12:47.080
like you have some overlays for some displays, you have different displays, do some detection

12:47.080 --> 12:54.840
and then apply device tree overlays. So your device tree is finally finished, finally fixed

12:54.840 --> 13:02.480
up for the kernel and the kernel don't have to do anything. This can, that stuff can happen

13:02.480 --> 13:13.160
in the board code. And yeah, such a board code is also a driver in Barbox and after

13:13.160 --> 13:18.920
the board code finished to load everything and do all the metric it jumps to the kernel.

13:18.920 --> 13:25.360
So as you can see here, this is the entry function for a board code. Again, this looks

13:25.360 --> 13:32.280
again for me to a kernel, like a kernel driver. You have some driver struct where you can

13:32.280 --> 13:42.960
put all the functions and you have this compatible which is also checked and then depending on

13:42.960 --> 13:51.120
the compatible which is given, the driver is loaded or executed or not. And then you

13:51.120 --> 14:01.040
have the board function and the board function, you do this metric stuff I told. You do detect

14:01.040 --> 14:08.280
where to come from, do some metric stuff and set up this is some kind of special in Barbox.

14:08.280 --> 14:17.680
We have some Barbox update handler. This is some kind of, yeah, you know this metric in

14:17.680 --> 14:24.120
the real submarine where you can have some scripts to load something from MMC to some

14:24.120 --> 14:31.480
metric addresses and here are metric addresses and here are metric addresses and there are

14:31.480 --> 14:36.840
five commands or so. In Barbox we have the Barbox update command and this is the handler

14:36.840 --> 14:43.560
for it. We just forget the handler and in Barbox we can just call Barbox update and

14:43.560 --> 14:52.200
finish. So there is just one command involved. And yeah, then finally the support code is

14:52.200 --> 14:59.960
fixing up the file and then it finishes and starting the kernel. And the kernel is to

14:59.960 --> 15:08.000
all the remaining stuff. So that's not part of my talk. And yeah, okay. So we have added

15:08.000 --> 15:14.800
a driver, we have added a new board and everything apart, the pre-bootloader stuff feels like

15:14.800 --> 15:27.040
a kernel to me. So I hope I can make you a bit excited about and you can visit the link.

15:27.040 --> 15:35.960
This is Barbox hosted online on the tiny emo emulator. Yeah, just click on it and you can

15:35.960 --> 15:47.200
try it out. Yeah, what else? Barbox says now it's coming to the improved part. Barbox has

15:47.200 --> 15:53.880
a rich shell with autocompletion. The shell has history, the shell supports scripting

15:53.880 --> 16:01.000
and so on. The shell is also called out. What you would see when you visit the link. What

16:01.000 --> 16:09.320
do we have also? We do also have virtual file systems. This means no more commands and offsets

16:09.320 --> 16:21.280
like you know from U-B

16:21.280 --> 16:26.880
and you know how to mount from system D where you visit some directory and magic happens

16:26.880 --> 16:35.640
and it gets mounted automatically. We also do have that in our bootloader. And we also

16:35.640 --> 16:44.880
have memory mapped IO access so we can check the memory, we can manipulate the memory via

16:44.880 --> 16:54.680
MD, via memory wide so MB. And yeah, as I said earlier, we have this Barbox update command

16:54.680 --> 17:01.760
which is pretty amazing because it's hiding all the ugly stuff. It's just Barbox update

17:01.760 --> 17:09.840
and you are done. And also pretty amazing in Barbox. We have multi-image support. It's

17:09.840 --> 17:21.080
some language of Barbox. It's something you are compiling Barbox and then with one compile,

17:21.080 --> 17:27.520
with one dev config, we can build 100 or more boards. And this is something I wanted to

17:27.520 --> 17:37.920
show you right now with an hands-on. So now it's, I hope everything works as expected.

17:37.920 --> 18:01.160
So yes. Is it readable or should I increase the size? Okay. So it's just a small script

18:01.160 --> 18:09.320
I wrote. It does nothing. It applies make-dev config and it enters the dev config so I

18:09.320 --> 18:16.880
can show you something about Barbox. So it's like, again, it's like a Linux kernel. And

18:16.880 --> 18:22.000
here you can see system types and here you can see all the boards we have enabled. So

18:22.000 --> 18:31.040
all the boards, not just one board. And okay. Exit. Everything is fine. And then it's calling

18:31.040 --> 18:39.960
make compile. So okay. That's nothing fancy here about. The fancy stuff starts at the

18:39.960 --> 18:59.920
end. Let that happen. And hopefully. So okay. Now we are at the end. We are finished compiling

18:59.920 --> 19:07.640
all the stuff. And now we are building our images. And we are building around 100 images

19:07.640 --> 19:17.040
right now with one command, with one dev config. And that's pretty amazing because I know how

19:17.040 --> 19:28.360
some or I know BSPs where you have just two different U-boot configs to have one U-boot

19:28.360 --> 19:34.480
for an SD card and one U-boot for an EMMC or one U-boot for an spy and one U-boot for

19:34.480 --> 19:42.560
an SD. That's not the kind we are working. We are saying one image will order. And then

19:42.560 --> 19:50.840
also you compile it and you can select as many boards as you want. As soon as. Yeah.

19:50.840 --> 19:58.520
And test some limitations. The sock must be the same. So we. Or the architecture. So this

19:58.520 --> 20:06.560
was at I mix seven. Sorry. I mixed four sevens. So all I mixed six and so on and so on. And

20:06.560 --> 20:33.680
now we can see. So. No.

20:33.680 --> 20:48.000
And then we have built. So we have built. 132 images just in one minute. And that's not

20:48.000 --> 20:55.280
doable with U-boot. At least with my knowledge I can't do it with U-boot. And yeah. Of course.

20:55.280 --> 21:14.520
And then as I said we have this. Or. If it would work. Yeah. We have this. Online mailbox.

21:14.520 --> 21:21.440
And then we also have an editor. We have also VI but VI is not that good working within

21:21.440 --> 21:28.480
the web. But we have also added and then we can edit some stuff like going here and hitting

21:28.480 --> 21:48.120
blah blah or ha ha. Anyway. As you could have seen this script. And. It's nothing special.

21:48.120 --> 21:55.000
It's just a script. Which checks some environment variable and then that's what. That's it.

21:55.000 --> 22:12.400
I wanted just. Yeah. Half an hour ago. And then. We can handle. This. And see. OK. Global

22:12.400 --> 22:21.800
first time. It's not that. And then we can say OK. Since we have history. We can move

22:21.800 --> 22:45.960
up and I didn't edit. OK. Then it's a global. First time. Oh. Nope. Also all the completion.

22:45.960 --> 22:58.360
So global. And. Food for them. And then we say hello for them. 20. Yeah. 23. And yeah.

22:58.360 --> 23:04.960
That was a short head on. It's pretty amazing. There was a really. I really would like it

23:04.960 --> 23:10.600
to see you if you have contributed to books if you send pictures if you bring your board

23:10.600 --> 23:17.160
main line and. Let us enjoy.

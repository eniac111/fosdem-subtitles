WEBVTT

00:00.000 --> 00:08.040
All right, we'll get started with the next talk.

00:08.040 --> 00:12.720
Julien Annon from ParaTools is going to talk about testing and validation.

00:12.720 --> 00:13.720
Hello, everyone.

00:13.720 --> 00:16.720
Thanks, Janet, for the introduction.

00:16.720 --> 00:18.440
So, yes, I'm Julien Annon.

00:18.440 --> 00:20.440
I'm going to talk to you about testing.

00:20.440 --> 00:24.680
As you may notice, I'm a bit happy to have a mic today.

00:24.680 --> 00:32.960
So please let me know if I'm becoming unreadable.

00:32.960 --> 00:36.320
So first of all, a bit of background.

00:36.320 --> 00:45.480
Back some years ago, we were actually, we still had a team developing an MPI runtime.

00:45.480 --> 00:52.760
And while developing this runtime, we had the measure stake to develop a validation

00:52.760 --> 00:58.160
system to assess our software quality, but also to be able to compare our implementation

00:58.160 --> 01:00.120
to others.

01:00.120 --> 01:07.480
So like everybody in each PC field at this time, we started to build our own ultra-specific

01:07.480 --> 01:12.800
shell scripts to validate our implementation, because we were considering that our implementation

01:12.800 --> 01:16.040
were too specific to be able to use some main screen tools.

01:16.040 --> 01:19.680
So we started with search scripts, criteria.

01:19.680 --> 01:26.120
The fact is that with the team growing, people working in separate place, working on multiple

01:26.120 --> 01:33.440
heterogeneous machines, we had a huge issue to make people continue to validate, to use

01:33.440 --> 01:41.240
this validation system, because it was slow, not really efficient, and hard to make it

01:41.240 --> 01:45.000
go, especially about maintenance.

01:45.000 --> 01:49.840
When we wanted to add anything from 2D validation process, it was just a nightmare.

01:49.840 --> 01:52.840
It was really costly in term of time.

01:52.840 --> 02:02.320
But also when our software was evolving, was growing, just adding just even a little test

02:02.320 --> 02:05.520
into this non-recursion base was a nightmare.

02:05.520 --> 02:12.920
So we started to consider why not creating a validation system able to take care of HPC

02:12.920 --> 02:18.560
environments and what it implies, like, validation in multiple architectures, multiple machines

02:18.560 --> 02:23.400
by multiple users with multiple benchmarks.

02:23.400 --> 02:31.460
And we just thought about having a generic tool able to handle all of that at one point.

02:31.460 --> 02:38.520
So what we want in that scenario, we are here in the case of validating an MPI implementation,

02:38.520 --> 02:42.800
which means having a standard API.

02:42.800 --> 02:46.920
So there is a lot of well-known MPI benchmarks already existing.

02:46.920 --> 02:49.040
We don't have to rewrite a whole non-recursion.

02:49.040 --> 02:50.040
We have benchmarks.

02:50.040 --> 02:52.480
You have proxy applications and so on.

02:52.480 --> 03:00.360
So how to scale these benchmarks to any runtime or any project using them to build a proper

03:00.360 --> 03:02.120
validation process?

03:02.120 --> 03:08.520
So what people want, I mean, what users of this validation system want, it's a simple

03:08.520 --> 03:09.520
tool.

03:09.520 --> 03:15.240
And we don't want to have really complex, cute, GTK, any kind of complex architecture

03:15.240 --> 03:17.080
to deploy to this.

03:17.080 --> 03:20.880
So what we want is just a command line interface, basically.

03:20.880 --> 03:27.160
And really, really, really, really if you set up really, really, really few configuration

03:27.160 --> 03:33.980
to deploy to have such test working, because a lot of people, maybe it's not a generality

03:33.980 --> 03:36.880
here, but a lot of people, it tests, basically.

03:36.880 --> 03:40.640
So we have to convince them that testing is good for software quality.

03:40.640 --> 03:46.880
Something really simple, but also able to handle any really complex scenario we may

03:46.880 --> 03:49.960
find in HPC running an MPI application.

03:49.960 --> 03:54.800
It is not that hard, but it may become really, really complex.

03:54.800 --> 04:00.640
And we don't want to have to rewrite this tool every two years because a new technology,

04:00.640 --> 04:05.680
a new approach, a new paradigm is implemented, and the validation process should have to

04:05.680 --> 04:08.280
be rewriting.

04:08.280 --> 04:17.240
So from that state, we decided to write a tool to fit our needs, but to be able to be

04:17.240 --> 04:20.320
used by people meeting the same requirements.

04:20.320 --> 04:27.080
Before going further, I would like to tell you that testing is not a brand new field,

04:27.080 --> 04:32.440
and some other projects are taking such kind of issue until now.

04:32.440 --> 04:37.240
And so please take a look at them if you think that PCVS does not completely fit your needs.

04:37.240 --> 04:42.280
They are really, really powerful tools in the field.

04:42.280 --> 04:47.560
So today I'm here to talk to you about PCVS.

04:47.560 --> 04:50.000
It's a tool maintained by the CEA.

04:50.000 --> 04:51.000
It's written in Python.

04:51.000 --> 04:53.600
Yes, everything is in Python now.

04:53.600 --> 04:57.920
So we are based on Python.

04:57.920 --> 05:00.800
It's a simple command line interface.

05:00.800 --> 05:07.800
And with few configuration files, obviously in YAML, it's a trend.

05:07.800 --> 05:17.160
The design of this framework is to bring simplicity when writing test logic to users.

05:17.160 --> 05:23.400
So we want tests to be simple to write, easy to port, okay?

05:23.400 --> 05:32.080
And these benchmarks, written by the user, we want to be able to be run in multiple environments,

05:32.080 --> 05:36.120
so we don't want to bind a test suite to a given application.

05:36.120 --> 05:38.120
Let's consider MPI runtime.

05:38.120 --> 05:45.520
We don't want to have our LULash or our IMB benchmark bound to a specific MPI implementation

05:45.520 --> 05:49.360
to be run on any kind of architecture.

05:49.360 --> 05:52.520
So this is what we call in PCVS the retargeting approach.

05:52.520 --> 06:00.720
The other approach we want to focus on is the fact that we have heterogeneous test environments.

06:00.720 --> 06:01.720
We have benchmarks.

06:01.720 --> 06:08.120
How to scale, automatically scale this benchmark to the actual test environment, consider,

06:08.120 --> 06:13.680
for example, having users wanting to validate the IMB, but they are working on their workstation.

06:13.680 --> 06:18.520
You don't want to launch up to, I don't know, 100 MPI processes on their workstation.

06:18.520 --> 06:23.640
They are going to be not happy with the use question of their machine.

06:23.640 --> 06:30.040
But once this validation system is run on a real HPC cluster, you want the test suite

06:30.040 --> 06:36.560
to automatically scale to this supercomputer resources without having to rewrite 100 of

06:36.560 --> 06:37.560
configuration files.

06:37.560 --> 06:42.800
Or even one file is already too much, okay?

06:42.800 --> 06:49.240
So this work is maintained by the CEA, which is a French research administration.

06:49.240 --> 06:59.840
We are collaborating with them to make this tool more generic and more generic and attempt

06:59.840 --> 07:06.480
to make as many users happy as possible.

07:06.480 --> 07:16.160
So at a glance, some features provide the idea is to split the test effort into specific

07:16.160 --> 07:17.160
fields.

07:17.160 --> 07:22.960
The first one is the specification of test.

07:22.960 --> 07:25.640
What a benchmark need to expose to build tests.

07:25.640 --> 07:30.960
So this kind of information is carried by the benchmark, obviously, or to build, what

07:30.960 --> 07:34.280
is the program, what are the parameters, and so on.

07:34.280 --> 07:39.880
Even the environment, the testing environment here is carried by the people deploying or

07:39.880 --> 07:42.760
providing the testing resources.

07:42.760 --> 07:55.880
So most of the time it's just a team policy to schedule jobs or system needs, right?

07:55.880 --> 08:01.960
All of this to pursue two goals, still the retargeting of tests automatically when the

08:01.960 --> 08:08.680
user is calling the benchmark, depending on the compiler and runtime you want to target,

08:08.680 --> 08:12.680
and autoscaling tests to test environment.

08:12.680 --> 08:21.160
Obviously, as PCVS is a kind of test framework, we had to add some functionality around testing,

08:21.160 --> 08:27.400
like in-place reporting, because most users are running their tests on HPC cluster where

08:27.400 --> 08:33.880
the set of functionality can be restrained so they don't have access to all their GitLab,

08:33.880 --> 08:36.760
GitHub, Jira, and so on and stuff.

08:36.760 --> 08:42.440
So we had some basic tools to answer this need.

08:42.440 --> 08:52.040
And beyond a single execution validation run, we added a way to make, to build the history

08:52.040 --> 08:58.760
of the validation for a given application by storing results over time and allowing

08:58.760 --> 09:07.200
the user to run simple analysis, still in Pton, to produce statistics over time.

09:07.200 --> 09:15.320
So quickly, the architecture of PCVS is based on files, so by the CLI, so by the file system.

09:15.320 --> 09:24.320
It's parsing some user inputs, and it's run through a dedicated connector to mainly SLURM

09:24.320 --> 09:31.440
currently, mainly SLURM, but we are focusing on supporting the batch manager.

09:31.440 --> 09:36.480
So the idea is that the benchmark express job descriptions and resource requirements

09:36.480 --> 09:39.000
and the environment will provide resources.

09:39.000 --> 09:44.840
Let's consider, for example, a basic component called number of MPI tasks the job is taking

09:44.840 --> 09:52.200
the job will say, okay, my job is only running up to two processes, or it's only taking,

09:52.200 --> 09:55.960
I don't know, cubic value of MPI processes.

09:55.960 --> 10:05.160
People aware of users of the Lulash proxy application will know what I meant by cubic.

10:05.160 --> 10:11.080
So it will describe constraint, and then we will have environment configuration files

10:11.080 --> 10:17.840
called profile in PCVS where the system will say, okay, in that context, I will have up

10:17.840 --> 10:25.560
to 100 nodes, so you will be able to spawn up to 100 MPI processes to run your application.

10:25.560 --> 10:32.760
Based on that, PCVS will cost this information and we'll say, okay, I have MPI jobs, I can

10:32.760 --> 10:38.120
run up to 1,000 MPI processes based on this specification.

10:38.120 --> 10:45.720
By not running the user benchmark 100 times once for each combination.

10:45.720 --> 10:54.360
PCVS has an opt-out approach, so it will consider that every combination provided by the environment

10:54.360 --> 10:57.640
will be used to scale your tests.

10:57.640 --> 11:03.840
So if your test is not able to run up to 1,000 jobs, it's up to you to specify that you can't

11:03.840 --> 11:07.840
reach this limit.

11:07.840 --> 11:13.080
So here is a quick example, I don't know if you can see up there, but we have a really,

11:13.080 --> 11:16.880
really basic environment configuration where you can see that there is what we call an

11:16.880 --> 11:24.320
iterator, this is a variadic component, and it can take up to four values for the NMPI

11:24.320 --> 11:30.920
attributes, and when describing a simple job, we just say, okay, my job just consists in

11:30.920 --> 11:33.920
running a program.

11:33.920 --> 11:43.520
So PCVS will enroll up to four common lines to run four independent tests to execute.

11:43.520 --> 11:54.080
So PCVS will automatically build your test scenarios based on your specification.

11:54.080 --> 11:59.600
So how to basically write a test, but more specifically a compilation test, there is

11:59.600 --> 12:05.200
a lot of fields to customize how you can build your tests, so it looks complicated, but as

12:05.200 --> 12:14.880
you may see on the previous slide, all the keys in that TML are not more data-free.

12:14.880 --> 12:20.080
At least the files, obviously, you have to specify which kind of application you want

12:20.080 --> 12:22.320
to compile.

12:22.320 --> 12:32.080
So the framework will try to auto-detect your language to select the proper compiler, obviously

12:32.080 --> 12:36.200
you have a manually designed approach also.

12:36.200 --> 12:41.960
If you are not based on compiling for files but already using a well-known build system,

12:41.960 --> 12:47.240
we have also an interface to invoke directly build system to build your framework.

12:47.240 --> 12:54.480
I'm thinking about, for example, Lulash, which is using a Mac file, DIMB using a Mac file,

12:54.480 --> 12:59.360
or even the mPitch test suite using a configure-magnet style approach.

12:59.360 --> 13:02.840
So you have many options, all of them are optional.

13:02.840 --> 13:10.200
What I would like to highlight is a variant, it's a capability from PCVS to expose to benchmarks

13:10.200 --> 13:17.680
a specificity, a requirement this job has to be run.

13:17.680 --> 13:23.840
So in that case, the openMP keyword probably means something to everyone here, but it just

13:23.840 --> 13:31.560
a token saying that to run this job, the component openMP is required to be scheduled, and in

13:31.560 --> 13:36.240
the environment, the user will say, okay, what is my variant openMP?

13:36.240 --> 13:43.160
In case of GCC, GCC-like compiler, it would be dash F openMP, if it's intact, it's not

13:43.160 --> 13:44.160
the same option.

13:44.160 --> 13:45.160
You see the ID.

13:45.160 --> 13:54.520
I will add, PCVS will add flavor depending on what you have specified in your environment.

13:54.520 --> 13:57.040
How to write a run test.

13:57.040 --> 14:01.720
So this is where the components, the iterative components take place, we didn't put it yet

14:01.720 --> 14:10.520
on compilation model because we have issues with the rate condition, reaching the same

14:10.520 --> 14:17.320
file on the file system, but we are planning to capitalize, to encapsulate, to isolate

14:17.320 --> 14:23.360
such model to be able to support also combination computation test, I'm sorry.

14:23.360 --> 14:29.040
So what does a user have to do to integrate such tests in your workflow?

14:29.040 --> 14:39.280
You can write a PCVS file, you put it anywhere you want in your benchmark pass, and it looks

14:39.280 --> 14:45.520
like just a red node, and everything below is totally optional.

14:45.520 --> 14:52.560
Here we can see that we restrict our add.out program to specific MPI value because as a

14:52.560 --> 14:58.240
tester, I know that my test has this constraint.

14:58.240 --> 15:06.960
You can even create this variable component for your own application if you want to programmatically

15:06.960 --> 15:15.440
generate a list of scenario that PCVS should integrate to its own process to build multiple

15:15.440 --> 15:16.440
scenarios.

15:16.440 --> 15:20.680
So in that case, we this, sorry, why am I moving?

15:20.680 --> 15:25.920
In the program node, you'll see that with this simple line, it will be able to build

15:25.920 --> 15:36.760
three times the number of scenarios that you are expected to have initially.

15:36.760 --> 15:42.560
And what a test without having a way to express or validate a test, obviously.

15:42.560 --> 15:49.440
So for any test, not only for one, you have a YAML description to say, okay, so I want

15:49.440 --> 15:57.400
my job to exit with this particular return code, having an execution time within this

15:57.400 --> 16:02.160
range, matching or not matching this kind of pattern.

16:02.160 --> 16:08.840
Even here is my script, give him the regular output of my test, and I will tell you if

16:08.840 --> 16:12.440
it's okay or not.

16:12.440 --> 16:13.480
Okay.

16:13.480 --> 16:16.280
So I just write my test.

16:16.280 --> 16:21.840
So to run them now, it's just cell-based, so you just have to call PCVS run.

16:21.840 --> 16:27.720
But before running my benchmark, I just have to create a profile to express the resources

16:27.720 --> 16:29.760
my environment has.

16:29.760 --> 16:36.480
Obviously, in case of MPI, we provided some templates, some basic templates to initiate

16:36.480 --> 16:37.760
the testing process.

16:37.760 --> 16:42.640
So here we are just creating a profile named myMPI-based, just on MPI.

16:42.640 --> 16:50.920
So by quickly running that, I will have a full profile-based MPI running tests for one,

16:50.920 --> 16:54.080
two, three, and four MPI processes combination.

16:54.080 --> 16:59.600
But from that, you can then expand the profile to feature needs.

16:59.600 --> 17:06.040
The whole build of PCVS relies on a single directory, and in that directory, you will

17:06.040 --> 17:15.680
find anything required to analyze the results and even rerun in the same condition the tests

17:15.680 --> 17:17.960
for reproducibility.

17:17.960 --> 17:24.440
You can see on the right, repository we provided alongside with PCVS, which is called PCVS

17:24.440 --> 17:31.440
benchmarks, and we attempt to put in that repository many well-known MPI benchmarks,

17:31.440 --> 17:34.520
PCVS enabled.

17:34.520 --> 17:38.440
So here is a fancy view of PCVS.

17:38.440 --> 17:43.720
Obviously, there is many options when running a validation.

17:43.720 --> 17:49.680
You can have an interactive approach, non-interactive approach, slur-enable, I mean batch manager

17:49.680 --> 17:55.360
enabled, running inside an allocation, outside an allocation.

17:55.360 --> 18:02.120
And once the whole configuration has been generated, we have commands, especially a

18:02.120 --> 18:06.640
database exec, to interact independently, uniquely with your benchmarks.

18:06.640 --> 18:12.240
So for instance, what people are used to do is to run their validation, and after maybe

18:12.240 --> 18:17.600
ten seconds, some failures appear, and they would like without interrupting the non-recursion

18:17.600 --> 18:19.000
system.

18:19.000 --> 18:25.960
Just rerun in an isolated environment their tests to see why it failed.

18:25.960 --> 18:34.000
So we have some extra commands to rerun this special pattern.

18:34.000 --> 18:43.880
Obviously, I'm going to just peel it up, obviously not everything is always perfect, and the

18:43.880 --> 18:46.040
static approach of your MPI is not what you need.

18:46.040 --> 18:50.280
You would like something more dynamic because you have some stuff to integrate to read to

18:50.280 --> 18:54.840
process before knowing what you want to test, even within a benchmark.

18:54.840 --> 18:56.560
So we have a dynamic approach.

18:56.560 --> 19:03.200
Instead of providing a static ML5, you will provide an executable script, an executable

19:03.200 --> 19:09.400
file, whatever it is, and it will produce by itself the actual ML5.

19:09.400 --> 19:17.360
This way you can programmatically generate your benchmark suite without having to know

19:17.360 --> 19:22.600
it in advance, without knowing in which environment your non-recursion base will be run.

19:22.600 --> 19:30.560
Let's consider the NAS framework where within the name of the binary bit, you have the number

19:30.560 --> 19:32.960
of MPI processes.

19:32.960 --> 19:34.600
Cool.

19:34.600 --> 19:41.880
Now we have run our tests, but we would like to see what it looks like.

19:41.880 --> 19:44.640
We have a test framework, just a job runner.

19:44.640 --> 19:56.320
So obviously we had some tools to report results to the user, spoiler, cannot be compared with

19:56.320 --> 19:58.320
a real tool for that.

19:58.320 --> 20:05.400
It is just to offer a way to the user to grab their results directly on their machine in

20:05.400 --> 20:06.400
place.

20:06.400 --> 20:15.600
And essentially it is just a way to look at tests at a glance to be able to rerun if necessary

20:15.600 --> 20:17.680
in the process.

20:17.680 --> 20:26.320
So as I said, we can isolate and rerun independently jobs, which is pretty convenient when some

20:26.320 --> 20:29.720
failure wants to be explored right away.

20:29.720 --> 20:46.760
And in Infinee, we are using a web server to report in a web browser directly offering

20:46.760 --> 20:49.360
more interactivity for your results.

20:49.360 --> 20:53.880
So what it looks like, for example, here gathered by Labelle, you can see that there is some

20:53.880 --> 20:58.600
head, so some failures.

20:58.600 --> 20:59.600
Let's dive into it.

20:59.600 --> 21:03.360
You can see that, oh, some trouble with MPIIO, what a surprise.

21:03.360 --> 21:08.320
And when clicking a job, you will see the complete log of this trial, so the command

21:08.320 --> 21:13.640
line and the actual, so I truncated the actual error.

21:13.640 --> 21:21.080
And you can directly dive into the error without leaving your actual SSH terminal.

21:21.080 --> 21:26.920
So a quick overview of how to configure your site, so the test environment configuration

21:26.920 --> 21:27.920
part.

21:27.920 --> 21:29.480
This is also AML.

21:29.480 --> 21:41.360
You define directly compilers, compiler and run times, and the special variadic components

21:41.360 --> 21:42.360
here.

21:42.360 --> 21:45.520
It's split in five different modules.

21:45.520 --> 21:46.520
Why?

21:46.520 --> 21:51.160
Because this whole profile can be split up to five blocks, independent blocks.

21:51.160 --> 21:57.360
We can be distributed over a cluster because it's not always the same teams who are responsible

21:57.360 --> 21:58.920
of this particular block.

21:58.920 --> 22:02.800
Let's consider, for example, the variadic component.

22:02.800 --> 22:09.840
It's in charge of the team to build this list, while for the compiler and runtime, it may

22:09.840 --> 22:16.800
be in charge of the sys admins of the test environment machines.

22:16.800 --> 22:23.560
And after running a single job, what I would like to see is to have a trend over multiple

22:23.560 --> 22:35.000
runs, how my tests should behave, and in PCVES, we integrated a way of history to stack multiple

22:35.000 --> 22:43.680
runs over time, and then run analysis on them to build stats, to build trends, to have more

22:43.680 --> 22:49.400
things than just a test result, but a test result over time.

22:49.400 --> 23:01.240
So here is an example of what you can do afterwards, running analysis directly on this historic

23:01.240 --> 23:12.000
path, and this is enabled, I would like to call that a DSL, but actually just a Python

23:12.000 --> 23:19.360
API to interact with that, and you can build such beautiful graphics to see over time,

23:19.360 --> 23:29.040
the rates of success inside your test benchmark.

23:29.040 --> 23:34.000
So finally, just a quick glance at Spark and PCVES.

23:34.000 --> 23:39.280
We are not in Spark, but we are supporting Spark, especially to do such things, by specifying

23:39.280 --> 23:47.480
a simple package, a simple spec package, we will be able to check any combination of building

23:47.480 --> 23:53.800
this package to see if there is some curiosity into your package recipe.

23:53.800 --> 24:02.200
For future work, we have many things scheduled, and the most interesting in the capturing

24:02.200 --> 24:11.080
metrics, the capacity to PCVES to capture directly some metadata to be able to then run

24:11.080 --> 24:17.160
analysis on them, and many other things, but I think I'm running out of time.

24:17.160 --> 24:21.560
Thanks for your attention, and two questions.

24:21.560 --> 24:31.560
I'm just going to run a quick demo.

24:31.560 --> 24:37.000
So from your configuration file, I assume you already have control of the cluster, at

24:37.000 --> 24:39.880
least you've allocated some nodes or something.

24:39.880 --> 24:44.960
Do you have some step that then allocates and de-allocates these resources on the fly

24:44.960 --> 24:46.640
for each one of the tests?

24:46.640 --> 24:52.720
So actually, currently, most of our test scenarios have run through an MPI run with Slurman

24:52.720 --> 24:59.120
Evel or Srun command hierarchy, so they are taking care of the resource allocations.

24:59.120 --> 25:06.600
Some other users are just running the whole PCVES inside a given allocation, like resource

25:06.600 --> 25:11.160
allocation, just a dialogue, for example, and then any test doing this Srun does not

25:11.160 --> 25:13.360
pay the cost of waiting the...

25:13.360 --> 25:18.120
Right, but if some tests need some type of CPU, the other tests need other type of CPU,

25:18.120 --> 25:19.440
then you need to...

25:19.440 --> 25:24.080
And if one of them is unavailable because an other user is using, you have to wait instead

25:24.080 --> 25:25.080
of fail.

25:25.080 --> 25:28.080
Yes, this is something we still haven't...

25:28.080 --> 25:35.560
Have a solution for, would be to be able to put a job aside while we add the allocation.

25:35.560 --> 25:38.600
Yes, something we are currently investigating, absolutely.

25:38.600 --> 25:40.600
Thanks for the question.

25:40.600 --> 25:45.040
Any other questions?

25:45.040 --> 25:56.320
Yeah, so one thing that I wanted to ask was kind of, for your future work, you had mentioned

25:56.320 --> 25:59.800
building out a graphical frontend using Textualize.

25:59.800 --> 26:04.320
I was kind of wondering how much assessment have you done into that, because I've done

26:04.320 --> 26:10.560
some work like trying to build GUIs with Textualize, and while I do think that it's very interesting

26:10.560 --> 26:14.960
framework and it's great for making textual GUIs, I think that it still has a bit of a

26:14.960 --> 26:23.240
way to come before it can really make a standalone or comprehensive or textual interface.

26:23.240 --> 26:25.240
So I was just wondering what your thoughts were on that.

26:25.240 --> 26:31.240
I'm not sure, and I understand the whole question, but you mean, why did we choose Textualize?

26:31.240 --> 26:34.800
Yeah, why did you say Textualize?

26:34.800 --> 26:39.840
Absolutely, just we discovered just recently, because we were using Rich to highlight the

26:39.840 --> 26:46.720
output of PCVS within the console, and we are looking for a solution to present the

26:46.720 --> 26:56.240
things graphically in a terminal, and we still are looking for the ideal framework, and as

26:56.240 --> 27:01.160
Rich is already, as Textualize, I'm sorry, is based on that, we are considering Textualize,

27:01.160 --> 27:05.600
but if you have any other offer to propose, I would be happy to discuss with you about

27:05.600 --> 27:06.600
that.

27:06.600 --> 27:07.600
Thank you.

27:07.600 --> 27:10.000
Thank you.

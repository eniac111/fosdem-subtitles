WEBVTT

00:00.000 --> 00:08.800
So, the next lightning talk is Victor, and this should be a really fun talk, I think,

00:08.800 --> 00:09.800
about MLOps.

00:09.800 --> 00:10.800
Yes.

00:10.800 --> 00:11.800
So, hello.

00:11.800 --> 00:15.640
This is probably going to be the least serious talk you have seen today.

00:15.640 --> 00:17.080
So, I'm sorry about that.

00:17.080 --> 00:19.280
We're going to be automating weight loss with AI.

00:19.280 --> 00:23.760
It's a stupid project I made in a weekend, or like in a few weekends, but I want to talk

00:23.760 --> 00:24.760
about it.

00:24.760 --> 00:25.760
So, who am I?

00:25.760 --> 00:26.760
Lightning talk version.

00:26.760 --> 00:27.760
I'm Victor Sunk.

00:27.760 --> 00:28.760
I work at ClearML.

00:28.760 --> 00:29.760
Hi.

00:29.760 --> 00:30.760
Let's make something.

00:30.760 --> 00:33.480
So, that's the reason why I'm here.

00:33.480 --> 00:37.760
The problem statement was I'm working at home, and I'm not working out enough, like probably

00:37.760 --> 00:39.240
a lot of us are.

00:39.240 --> 00:45.800
And so, the problem solution is why not lock my PC every hour and force myself to do push-ups,

00:45.800 --> 00:47.920
and then it automatically opens again.

00:47.920 --> 00:48.920
That was the main idea.

00:48.920 --> 00:53.560
I want to do this with AI, obviously, because over-engineering.

00:53.560 --> 00:58.480
And I'm a machine learning engineer, so if I am a hammer, everything looks like a nail.

00:58.480 --> 01:00.280
This is going to be the diagram.

01:00.280 --> 01:02.400
So, left top is an oak one.

01:02.400 --> 01:03.400
It's an AI camera.

01:03.400 --> 01:05.480
I'll talk about it in a second.

01:05.480 --> 01:09.200
That will run one model, and then because one AI model is not enough, I have two.

01:09.200 --> 01:13.640
So, there is a second model that runs on the Raspberry Pi that will lock my PC.

01:13.640 --> 01:15.120
This is what it looks like.

01:15.120 --> 01:20.800
So, you get like a notification, workout time, lazy bum, and you have to do push-ups.

01:20.800 --> 01:24.080
It's in Raspberry Pi running in the corner of my room.

01:24.080 --> 01:26.360
You can follow along with the diagram at the right top.

01:26.360 --> 01:29.920
So, I'm going to do post-estimation with the oak one.

01:29.920 --> 01:30.920
Now what is the oak one?

01:30.920 --> 01:37.240
The oak one is a 150 bucks open source hardware AI camera, which is really cool.

01:37.240 --> 01:38.720
I highly recommend it.

01:38.720 --> 01:43.680
They run the Intel Mirrored X, so if you look at the speeds there, if you have the oak one,

01:43.680 --> 01:49.040
because it does the AI, like the AI, on the chip itself, on the camera itself, it can

01:49.040 --> 01:53.320
get a lot higher FPS on the Raspberry Pi because it doesn't have to go to the Raspberry Pi

01:53.320 --> 01:55.280
to do anything.

01:55.280 --> 02:00.040
Even when compared to another AI accelerator connected to the Raspberry Pi.

02:00.040 --> 02:04.240
It also has excellent documentation, which is a unicorn these days, but yeah, it really

02:04.240 --> 02:06.440
is a nice library.

02:06.440 --> 02:11.240
So they have a bunch of cool examples that you can try, like there's DeepLop with segmentation,

02:11.240 --> 02:13.160
there's other stuff.

02:13.160 --> 02:17.880
But luckily for me, I didn't have to do any work because they also had post-estimation.

02:17.880 --> 02:21.880
So thanks to GXGX for implementing this.

02:21.880 --> 02:23.120
This is an awesome repository.

02:23.120 --> 02:24.120
It's still being maintained.

02:24.120 --> 02:25.920
If I remember correctly.

02:25.920 --> 02:27.320
So definitely check that out.

02:27.320 --> 02:28.320
That's really cool.

02:28.320 --> 02:31.360
Now, what does this repository do?

02:31.360 --> 02:33.540
It basically gives me post-estimation.

02:33.540 --> 02:36.160
So it films me on that AI camera.

02:36.160 --> 02:39.840
I have one with me, by the way, so after the lightning talks, I can actually give a demo

02:39.840 --> 02:40.840
lightning talk.

02:40.840 --> 02:42.840
I can't do it right now.

02:42.840 --> 02:47.680
Basically it draws a skeleton on top of you in like seven, eight frames a second on the

02:47.680 --> 02:49.800
Raspberry Pi, which is awesome.

02:49.800 --> 02:52.000
And then it even positions them in 3D.

02:52.000 --> 02:53.000
So that's nice.

02:53.000 --> 02:54.000
This is stage one.

02:54.000 --> 02:56.080
We want to go to a push-up detector.

02:56.080 --> 02:57.220
This is stage two.

02:57.220 --> 03:00.480
So we now basically have a skeleton.

03:00.480 --> 03:05.320
If we just throw away the pixels, these are the only points that we actually care about.

03:05.320 --> 03:08.400
And then now it just basically becomes a tabular problem.

03:08.400 --> 03:12.720
So the second part of the machine learning, or like the simple machine learning, is going

03:12.720 --> 03:13.880
to be really simple.

03:13.880 --> 03:17.400
Now we just have a few points and we want to classify them.

03:17.400 --> 03:18.400
Right.

03:18.400 --> 03:22.080
For this second model, though, this is not pre-trained, so I actually have to label.

03:22.080 --> 03:26.040
A few images, it's not a very complex model, but you have to do something.

03:26.040 --> 03:30.240
So what we do, what do we want to do is we want to say, okay, this is a push-up, this

03:30.240 --> 03:34.760
is a push-down, and then we can do some additional logic to actually count them while they're

03:34.760 --> 03:35.760
happening.

03:35.760 --> 03:36.760
Right.

03:36.760 --> 03:42.360
But then the question becomes, how do I take a picture when I'm actually doing my push-ups?

03:42.360 --> 03:45.880
Because like there is a camera there, do I need a button, but then it might overfit on

03:45.880 --> 03:48.180
me pressing the button or like something else.

03:48.180 --> 03:53.400
So if you're a machine learning engineer, the answer is throw more AI at it.

03:53.400 --> 04:00.840
So basically over-engineering using an unnecessary amount of AI, I set up a microphone while

04:00.840 --> 04:02.840
I was pushing up and pushing down.

04:02.840 --> 04:07.560
There's a really cool open source package for Python that can do voice recognition.

04:07.560 --> 04:12.800
It does send it to the proprietary API of Google, but at least the code is there.

04:12.800 --> 04:16.720
And then you can just basically shout label me, and if label, the word label, is actually

04:16.720 --> 04:20.720
found inside of what you said, it will take a picture.

04:20.720 --> 04:22.640
So that's that.

04:22.640 --> 04:26.600
Now we have a third AI model that's really useful.

04:26.600 --> 04:28.760
And then I did a lot with ClearML.

04:28.760 --> 04:31.040
So this is actually the MLOps part.

04:31.040 --> 04:32.120
I now have two models.

04:32.120 --> 04:33.480
I want to be able to train them.

04:33.480 --> 04:35.140
I want to be able to maintain them.

04:35.140 --> 04:36.720
So what did I do?

04:36.720 --> 04:40.840
This is the labeling tool, so left top for you.

04:40.840 --> 04:43.600
Right left top is the Oak one that will take a picture.

04:43.600 --> 04:49.360
When I shout take a picture, it will send it to ClearML, which is actually an open source

04:49.360 --> 04:52.120
MLOps tool, one that I work for.

04:52.120 --> 04:54.400
And they have data versioning, for example.

04:54.400 --> 04:58.920
So every single time I run the labeling tool, it will create a new version of my dataset,

04:58.920 --> 05:00.540
which is very useful.

05:00.540 --> 05:03.200
And then I can use this new version of the dataset.

05:03.200 --> 05:04.200
I can pull it in.

05:04.200 --> 05:07.720
I can use the experiment manager of ClearML to keep track of all my code.

05:07.720 --> 05:12.880
Every single time I run a train, I will get all of my output, all of my plots.

05:12.880 --> 05:14.760
And then you can actually build this into pipelines.

05:14.760 --> 05:16.680
You can run this automatically on remote machines.

05:16.680 --> 05:20.880
So I've already engineered a crap out of it, but I can't really tell everything in

05:20.880 --> 05:22.280
Lightning Talk.

05:22.280 --> 05:27.840
The main idea is you have a lot of different tools in ClearML that can help you with that

05:27.840 --> 05:29.640
and automate a lot of that stuff.

05:29.640 --> 05:31.700
Now training my own model.

05:31.700 --> 05:34.020
So now we have all of those points.

05:34.020 --> 05:38.680
We have for each of those sets of points, we have if it's a push up or a push down,

05:38.680 --> 05:40.400
where do you go from here?

05:40.400 --> 05:44.260
Training my own model, it's this, like it's super simple.

05:44.260 --> 05:46.400
It's just three lines of code these days.

05:46.400 --> 05:50.240
So this is just SK learn, it's an SVM, it's a simple classifier, it takes points in, gives

05:50.240 --> 05:52.900
you one point out, push up, push down.

05:52.900 --> 05:53.900
It's not ideal.

05:53.900 --> 05:56.720
I should do a no class, but I was lazy.

05:56.720 --> 05:59.340
No class basically meaning it's nothing, none of the two.

05:59.340 --> 06:06.400
So now it will say when I walk to it, it will maybe register a push up, but it's not ideal.

06:06.400 --> 06:13.440
So in order to combat that, I made a very simple, even simpler piece of code that basically

06:13.440 --> 06:14.460
primes it.

06:14.460 --> 06:19.200
So here on the plot on the left, you can see one is basically pushed down, two is pushed

06:19.200 --> 06:20.200
up.

06:20.200 --> 06:21.200
And so you can see it happen.

06:21.200 --> 06:24.800
And I think, yeah, you can basically see it happen there in the beginning.

06:24.800 --> 06:29.480
But when I run to my place to start to do the push ups, here you can see that there

06:29.480 --> 06:33.180
is like a bit of jittering going on because it doesn't know the zero class.

06:33.180 --> 06:38.360
So in order to catch that, what you can say is, okay, if the you can basically say if

06:38.360 --> 06:45.000
the length is, yeah, if the length is 10, so if you're at least been doing detection

06:45.000 --> 06:49.440
for some time, then you can check if the last 10 of them were pushed up.

06:49.440 --> 06:53.560
So I'm basically ready in my position, only then prime it.

06:53.560 --> 06:56.580
And then once it's primed, you can start counting.

06:56.580 --> 07:00.120
So that's just a very simple, stupid way of doing it.

07:00.120 --> 07:01.120
Two minutes left.

07:01.120 --> 07:02.120
Excellent.

07:02.120 --> 07:07.320
So I'm going to do one more thing.

07:07.320 --> 07:08.440
Locking the computer.

07:08.440 --> 07:14.200
So I use Linux, which allows you to do everything, which is awesome.

07:14.200 --> 07:19.040
So locking the computer was easy, but unlocking was hard, as it probably should be.

07:19.040 --> 07:21.240
You have to put in a password.

07:21.240 --> 07:25.160
So there was no real way to get a custom password.

07:25.160 --> 07:29.880
I tried thinking of like maybe I should like scramble my password and then fill in that

07:29.880 --> 07:32.120
scrambled password, but never do that.

07:32.120 --> 07:36.480
You will be locked out if your code is buggy and it happened.

07:36.480 --> 07:38.760
So no way to get a custom password.

07:38.760 --> 07:39.960
And there is one big problem.

07:39.960 --> 07:41.120
I know my password.

07:41.120 --> 07:45.880
So if I can't change it and I lock my computer and I really don't want to do pushups, I can

07:45.880 --> 07:47.960
just fill it in and be done with it.

07:47.960 --> 07:54.440
So the best and simple solution I can come up with is just to use Xdo tool and then spam

07:54.440 --> 07:55.780
backspace.

07:55.780 --> 08:01.720
So Xdo tool allows you to type automatically while your computer is locked so you can just

08:01.720 --> 08:06.200
spam backspace, not allow you to fill it in because it's like backspace 20 times a second.

08:06.200 --> 08:10.560
And then when you do the pushups, it just fills in your passwords.

08:10.560 --> 08:11.560
And that's it.

08:11.560 --> 08:17.540
So yeah, a lot of over engineering and I hope you find it interesting and you learned something.

08:17.540 --> 08:26.760
So thank you so much for listening.

08:26.760 --> 08:28.440
One last note before any questions.

08:28.440 --> 08:49.440
There is a YouTube video about it on the channel MLMakin.

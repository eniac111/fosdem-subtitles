WEBVTT

00:00.000 --> 00:27.680
Happy? Hello, everyone. Thanks for attending. We were doing okay. Is that my device or theirs?

00:27.680 --> 00:49.920
I don't know if that's me or... Okay. So today's talk is written by Jacobo

00:49.920 --> 00:56.000
Mondy. Unfortunately, he couldn't attend today. He's his back, so I'm stepping in. So what

00:56.000 --> 01:01.440
I'm talking about today is not work I've done. It's about his experiences working on the

01:01.440 --> 01:16.760
PyCon Pro. I don't want to touch it now. Yeah. So my name's Kieran. Just like Jacobo, I'm

01:16.760 --> 01:21.040
an embedded camera engineer with ideas on board. We've been working on VFRL2, kernel

01:21.040 --> 01:30.760
drivers and for some time now LibCamera. We can be found on IRC, Matrix. Anyway, you want

01:30.760 --> 01:36.480
to get a hold of us at GitHub if you need or after the chat. And today we want to talk

01:36.480 --> 01:45.840
about how we perceive the Linux camera stack on both desktop and mobile environments. And

01:45.840 --> 01:49.840
starting with the kernel, we see LibCamera as being a big part of that to support the

01:49.840 --> 01:56.840
platform abstractions. And on top of LibCamera, we see lots of applications desiring to use

01:56.840 --> 02:04.200
pipewire. So we're going to look through that. And the overall goal is that applications

02:04.200 --> 02:07.680
shouldn't care what platform they're running on. They shouldn't care if they're running

02:07.680 --> 02:15.560
on a PC, a desktop or a Liburn 5 or a PyCon Pro. And equally, any application you want

02:15.560 --> 02:18.680
to run or framework, camera framework, they should all be able to say, hey, I want to

02:18.680 --> 02:25.280
talk to the camera. Give me some pictures, please. And specifically today's talk is about

02:25.280 --> 02:32.840
the PyCon Pro. Yakubo has spent some time over the last three months or so or more trying

02:32.840 --> 02:40.000
to make sure that we can bring up the PyCon Pro with LibCamera and standard applications.

02:40.000 --> 02:44.280
And the PyCon Pro is an interesting device because it's, I think it's promoted as like

02:44.280 --> 02:49.680
a test ground. There's no official software, but it's a good device that people can play

02:49.680 --> 02:58.000
with and develop their own software. Interestingly for us, it has an RK3399, which is a chip that

02:58.000 --> 03:03.440
has an ISP. And it's actually a device that we have already been supporting for several

03:03.440 --> 03:10.920
years now. It pretty much was one of the first devices we started supporting with LibCamera.

03:10.920 --> 03:17.280
And part of why we created LibCamera is because cameras got complex. This is a slide I've

03:17.280 --> 03:22.520
presented a few times. But on the left, we can see that beyond having just a single video

03:22.520 --> 03:26.960
node where you might say, UVC, give me some pictures, cameras started getting more complicated.

03:26.960 --> 03:33.080
They had multiple components and you want to configure them. And the one on the left

03:33.080 --> 03:38.840
has now been removed from the kernel. And the N900, which already has a lot of different

03:38.840 --> 03:43.240
nodes, that's 13 years ago. So if you can imagine, there's a lot of cameras out there

03:43.240 --> 03:47.960
now that are even more complicated than all the components there, particularly lots of

03:47.960 --> 03:59.000
Qualcomm phones. And with all those new components, it's very difficult for applications to know

03:59.000 --> 04:03.440
what to do with each of those things. Suddenly every application has to be aware of every

04:03.440 --> 04:10.000
platform. And that's going to lead to a lot of replication of code. Each camera application

04:10.000 --> 04:13.720
is going to have to deal with media controller to configure the pipeline, has to talk to

04:13.720 --> 04:21.160
V4L2 to get frames, has to talk to sub devices to configure parameters on the sensor itself.

04:21.160 --> 04:24.600
And that changes for every platform. It's different on a Rockchip, it's different on

04:24.600 --> 04:30.400
Raspberry Pi, it's different on an Intel. So LibCamera's goal really is to fill the

04:30.400 --> 04:37.280
gap of that abstraction so that applications only have to look at one API again. And it

04:37.280 --> 04:43.960
sits on top of V4L2. It's not a replacement for V4L2. But what we have is a pipeline handler

04:43.960 --> 04:49.240
which deals with the platform abstraction. And we have a component called the IPA. And

04:49.240 --> 04:55.160
that's crucial for devices like the PinePone Pro with an ISP and raw Bea sensors because

04:55.160 --> 05:02.360
you need control algorithms. And the IPA in LibCamera provides a space to do that. On

05:02.360 --> 05:11.440
top of LibCamera itself we have a native LibCamera API which is C++. We've got Python bindings,

05:11.440 --> 05:15.680
there's people developing Rust bindings. The Rust bindings are actually giving us C bindings

05:15.680 --> 05:20.520
I believe. Aside from that we've got Android HAL integration which is important and comes

05:20.520 --> 05:29.920
up later. And integration into frameworks like GStreamer. And as I said, the Rockchip

05:29.920 --> 05:36.600
LK3399 is one of the devices we started supporting when we started LibCamera, particularly on

05:36.600 --> 05:41.760
the Chromebook, ChromeTab. But it's actually a really interesting platform because it's

05:41.760 --> 05:46.120
in a lot of small-board computers as well. So it's readily available hardware. You can

05:46.120 --> 05:52.840
plug in off-the-shelf cameras from Raspberry Pi and play with it. And what I actually really

05:52.840 --> 05:59.880
like is recently we've been working on the IMAX8M+, which has the same ISP core in the

05:59.880 --> 06:09.280
chip. So the same code that we've written for Rockchip also works on the IMAX8M+. So

06:09.280 --> 06:12.160
I've mentioned that these cameras are now complex and we've got this thing called an

06:12.160 --> 06:16.760
ISP which is kind of getting in the way of people getting images out of their cameras.

06:16.760 --> 06:22.640
And the reason for that is the cameras themselves are now raw biosensors and that needs a lot

06:22.640 --> 06:28.760
more processing and support to get good images from. Particularly the underlying format is

06:28.760 --> 06:32.920
in a Bayer format which most applications don't want to process. So that data is fed

06:32.920 --> 06:37.960
into the ISP but the ISP needs to be managed. It produces something called, well, it produces

06:37.960 --> 06:43.320
statistics usually custom to each platform. And there has to be code or an algorithm to

06:43.320 --> 06:48.400
process those statistics to then generate control parameters to configure the ISP for

06:48.400 --> 06:54.680
the next frame. And ultimately then that will process in a loop and produce you some images

06:54.680 --> 07:01.920
that the applications will expect either YUV or RGB. And we already have an implementation

07:01.920 --> 07:05.480
of this. This is one of the things we started early. I believe a lot of this implementation

07:05.480 --> 07:09.720
is derived from Raspberry Pi so it's quite compatible with the implementation that Raspberry

07:09.720 --> 07:15.200
Pi have at the moment. But we've got various components like AGC to handle how bright the

07:15.200 --> 07:22.520
image is automatically or set manually. White balance is important then lens shading of

07:22.520 --> 07:27.320
the kind of three that you have to start with. But all that code is open and already existing

07:27.320 --> 07:35.320
in libcamera. The kernel driver itself has been in the mainline kernel now since I believe

07:35.320 --> 07:45.160
2020 and it was de-staged in 21. Helen from Calabra was working on that. And since then

07:45.160 --> 07:49.920
it still had active development. There's fixes that go up and we've been working on it to

07:49.920 --> 08:00.160
extend support for the IMX8 and plus. And so the kernel side and the libcamera side

08:00.160 --> 08:05.640
is looking pretty good. We've got support for processing the images. We've got the kernel

08:05.640 --> 08:11.560
drivers. But when we go back to the PineFoam Pro for quite a long time there's no driver

08:11.560 --> 08:18.240
in the mainline kernel for the front camera, 8858. And even though there was a camera,

08:18.240 --> 08:22.520
a driver for the back camera, it wasn't tuned and it wasn't supported very well. It wasn't

08:22.520 --> 08:29.760
tuned really. So PineFoam Pro has been left behind from libcamera for quite some time because

08:29.760 --> 08:35.440
no one was actively working on this and it just meant that you couldn't use libcamera

08:35.440 --> 08:40.800
on a PineFoam Pro. And then Yakubo has been working on this in collaboration with others

08:40.800 --> 08:46.720
who wanted to push this forward and make it work again. And Nicholas Roth started this

08:46.720 --> 08:51.560
back in October, I think, where he wanted to get way droid running on a PineFoam Pro.

08:51.560 --> 08:54.960
So he was trying to find out what are the missing pieces, what do we need to up-stream.

08:54.960 --> 09:04.000
And this taught really drive from the work that he kick-started. So he submitted support

09:04.000 --> 09:14.360
for the rear camera, front camera, to libcamera. And he based that on the kernel driver that

09:14.360 --> 09:24.080
was in the PineFoam Pro self-hosted driver, not self-hosted, Meggie's tree. And interestingly,

09:24.080 --> 09:29.840
the driver was, it hadn't been posted upstream, so it hadn't had any kind of review process.

09:29.840 --> 09:39.600
And it exposed itself as a name with M00F underscore OV8858. So it was encoding properties

09:39.600 --> 09:45.120
in the sensor name about where it is and its location. And that's not very good for libcamera

09:45.120 --> 09:51.360
because it's not generic because then we can't have a handle that says only match the front

09:51.360 --> 09:57.720
camera in location zero when we want it to support every device that has the sensor.

09:57.720 --> 10:05.320
So the upstreaming process actually highlights where things need to be cleaned up. This has

10:05.320 --> 10:08.600
gone through some iterations. And Yakubo, who would have been talking, has taken this

10:08.600 --> 10:15.120
on to completion and will land in 6.3. It's accepted in the notes media tree now. So that's

10:15.120 --> 10:25.160
getting in in March, I think. The support required for libcamera, we moved that and made

10:25.160 --> 10:31.120
a release last week for 004. So now we've got a kernel with the ISP driver. We've got

10:31.120 --> 10:39.800
the sensor drivers and the camera support all upstream and mainline. The other sensor

10:39.800 --> 10:45.200
needs a lot of work still. Interestingly, it's supported by Raspberry Pi and the Raspberry

10:45.200 --> 10:50.240
Pi kernel has a lot of downstream patches. So if anyone wants to get involved, this is

10:50.240 --> 10:54.600
a really good opportunity to look at what is in the Raspberry Pi tree, take some of

10:54.600 --> 11:01.440
those cleanups, get them suitable for mainline and post them up.

11:01.440 --> 11:08.400
So if everything's there, what's next to make it good? There's lots of patches so upstream,

11:08.400 --> 11:17.640
build for the 258. The next stages really are about camera tuning. And that's part of the

11:17.640 --> 11:21.160
process that we're trying to provide in libcamera as a framework. We've got a camera tuning

11:21.160 --> 11:26.920
tool. And that's really about helping the control loops know how to process the images.

11:26.920 --> 11:31.320
So we have a camera tuning tool which is being developed and can be used already. You can

11:31.320 --> 11:36.120
tune the cameras at home, simple things like taking pictures of white wall. Ideally you

11:36.120 --> 11:40.560
want a color card that was on one of the earlier slides. But with very inexpensive tools you

11:40.560 --> 11:45.840
can do some pretty basic, an initial start at camera tuning. So if you've got devices

11:45.840 --> 11:50.560
and you want to investigate this, that's a great place to get started.

11:50.560 --> 11:58.120
So that is not my work here is done, but it's Yakubo's. That's front and back cameras from

11:58.120 --> 12:05.640
running on the device. This is using, captured using CAM, which is just a pure test tool

12:05.640 --> 12:09.480
in the camera. We have CAM and QCAM. They're not meant for end users really. It's just

12:09.480 --> 12:15.640
for helping us develop the framework. The images probably need more work on the lens

12:15.640 --> 12:22.280
shading and white balance. But that's part of the tuning process that we mentioned. But

12:22.280 --> 12:28.280
users don't want to stop using test tools. So what's also been going on and progressing

12:28.280 --> 12:35.560
nicely is support for application layers on top. And Robert Mater, I met back in Prague,

12:35.560 --> 12:41.760
and since then has been also working on this with his device, trying to get the desktop

12:41.760 --> 12:47.440
environment to be suitable. The same experience you get on the desktop to work on mobile.

12:47.440 --> 12:53.040
And that's building up the camera portal in pipe wire, extending support in G streamer

12:53.040 --> 13:01.240
to handle controls and mapping that all through the camera portals. So from pipe wire's perspective,

13:01.240 --> 13:06.400
this is what the media stack looks like for desktop environments or anything using pipe

13:06.400 --> 13:12.960
wire, where pipe wire sits on top of lib camera, knows how to look at cameras that are V4L2

13:12.960 --> 13:16.720
as well, but if it needs lib camera, it already has that integration. And then G streamer

13:16.720 --> 13:22.280
and applications can sit on top of pipe wire. And Robert has been doing quite a lot of work

13:22.280 --> 13:30.640
trying to clean up and finish that integration of that pipeline, application pipeline, particularly

13:30.640 --> 13:37.840
in getting the known camera app to work all the way through. And I remember when I first

13:37.840 --> 13:41.480
saw the known camera app, I saw it and thought, great, there's a standard design for a desktop.

13:41.480 --> 13:45.280
I want this to work on the camera. So this has made me really happy seeing that people

13:45.280 --> 13:52.280
have pushed this forward. The known camera is a design, I've forgotten which team was designing it,

13:52.280 --> 13:56.920
but then James Westman took that design and created an application for it, which can be

13:56.920 --> 14:02.600
part of the standard known environment, and also run on mobile devices, which is the key point.

14:02.600 --> 14:17.480
If I could have put that in the slide. So,

14:17.480 --> 14:32.680
he couldn't be here today, but he did manage to record on his PineFone Pro with a screen

14:32.680 --> 14:39.880
grab and encode on the device, running known camera on the PineFone Pro, running through

14:39.880 --> 14:46.720
pipe wire into lib camera, running lib camera algorithms and through the ISP. So this is

14:46.720 --> 14:52.800
hardware accelerated camera. He's taking a picture. He, in a moment, will change the

14:52.800 --> 15:01.560
camera to the front camera. There. And one of the things I like is, quite interestingly,

15:01.560 --> 15:07.600
you can see the algorithms kick in. So you can see it starts out green and then it corrects

15:07.600 --> 15:13.000
itself. So you can see that real time action from the algorithms that are in place in the

15:13.000 --> 15:19.640
lib camera. In consumer devices, that still happens on a UVC web cam, but usually you

15:19.640 --> 15:22.960
hide those frames. In the camera, with these up here, we're just not hiding them, so you

15:22.960 --> 15:39.280
can see it. Excellent. So we can have real live demos instead of video ones. Can I get

15:39.280 --> 16:05.360
a back? So, thank you. That demo was running known camera through the pipe wire camera

16:05.360 --> 16:13.120
portal. And thanks to Robert, if you have a device running pipe wire, you can install

16:13.120 --> 16:17.120
this flat pack, get that application and run it on your device. I believe that will just

16:17.120 --> 16:30.240
all work. The instruction from Robert over there. Okay. I went with what I had. So that's

16:30.240 --> 16:37.120
great. We can now run camera application that's exactly the same on desktop and mobile. But

16:37.120 --> 16:43.360
there's more that we want to do on our phones or with communications nowadays. So getting

16:43.360 --> 16:51.200
browser support is really important there. But now we've got pipe wire integration and

16:51.200 --> 16:57.800
portals. Browsers, which will most of them use WebRTC, it would be really helpful if

16:57.800 --> 17:06.240
we had integration of WebRTC that could talk to pipe wire. And Michael from Pangutronics

17:06.240 --> 17:10.320
has been working on that. There we are. I want to see you later. Has been working on

17:10.320 --> 17:17.280
that tirelessly for a year or more, I think. And I don't think I can point that far out.

17:17.280 --> 17:20.760
But what was fantastic is last week it went green and that part has merged. There's still

17:20.760 --> 17:26.680
a few more series to get in. But the core support is now there. So in some months, it's

17:26.680 --> 17:34.080
a very wishy number. We should be able to see browsers able to handle this pipeline

17:34.080 --> 17:41.320
and you could make a video call on your Python probe, which is fantastic. It's not me. It's

17:41.320 --> 17:50.240
other people. I do talk a lot about other people's work. So I don't want to take credit.

17:50.240 --> 17:55.120
Talking to some of the distros, I know that even once the code's ready, I believe we can

17:55.120 --> 18:01.120
start getting early PPA-type packages available so that we don't have to wait for it to filter

18:01.120 --> 18:08.000
through all the upstream processes. But that's up to the distros, not me. So there's actually

18:08.000 --> 18:11.040
‑‑ it's quite exciting. There's a lot of development going on with LibCamera at the

18:11.040 --> 18:17.800
moment. Lots of application-side development. And another one that's been being supported

18:17.800 --> 18:24.480
lately since the last three or four months is Adam Piggs is working on Sailfish OS. And

18:24.480 --> 18:29.880
he had an application called Harbor Camera that ran there. And he's ported that to run

18:29.880 --> 18:38.120
on LibCamera. So he's been working on that on the PinePhone. And it's QT‑based. So I've

18:38.120 --> 18:45.400
been running it on my desktop, my laptop, and an Intel device. But even though he's

18:45.400 --> 18:50.640
developing it on the PinePhone, because it's based on LibCamera, the platform is abstracted.

18:50.640 --> 18:54.280
So it will work on every platform that's supported by LibCamera. So the same application is now

18:54.280 --> 18:59.480
going to run just the same as known camera will run on all the supported platforms. Unmodified,

18:59.480 --> 19:07.560
which is brilliant. I've run it, as I said, on the Surface Go's and my desktop. He has

19:07.560 --> 19:11.200
already started plumbing in manual controls so you can do things that you expect from

19:11.200 --> 19:15.960
your mobile phone camera app to control the exposure and brightness that you might want

19:15.960 --> 19:24.240
to play around with. And then autofocus and manual focus should be coming up soon.

19:24.240 --> 19:29.440
That is a screen capture from Raphael, who is one of the other LibCamera community members

19:29.440 --> 19:38.160
who is just testing Adam's work on the PinePhone. But that's actually running on MIMO-LEST, whereas

19:38.160 --> 19:45.120
Adam's working directly on Cellfish. So, again, it's nice to see that the distribution doesn't

19:45.120 --> 19:50.680
matter. It's all across the platform. The talk started ‑‑ a lot of this work

19:50.680 --> 19:54.560
here started because Nicholas Roth was trying to get Waidroid support working. He wanted

19:54.560 --> 20:00.720
to run Waidroid to get the Android applications running on his phone. And so that is a way

20:00.720 --> 20:07.800
of running an Android environment in a contained ‑‑ in a containerized solution on your device,

20:07.800 --> 20:15.080
on a regular Linux system such as we can now run on the phones. And I said earlier that

20:15.080 --> 20:19.360
LibCamera already provides an Android camera help. So we've already got integration there

20:19.360 --> 20:24.720
for telling Android how to talk to the camera, which is great, so that can be reused. There's

20:24.720 --> 20:30.520
still a fair bit of work there, unfortunately. Nicholas has got it working in Waidroid. He

20:30.520 --> 20:36.040
can capture frames. But due to the format that the buffers are captured in, he can't

20:36.040 --> 20:43.040
display them. So that's going to need some more work in Mesa. And look at how the buffer

20:43.040 --> 20:52.120
management is being handled. There may be some updates from ‑‑ excellent. So there's

20:52.120 --> 20:59.200
recent developments that may improve this in the near future with pan frost driver development.

20:59.200 --> 21:03.880
But might be an opportunity if anyone wants to get dug into those layers to work on.

21:03.880 --> 21:13.360
Sorry, Millipixels is a fork from Dorota where she's been supporting the Libram 5. And the

21:13.360 --> 21:19.560
interesting part there is she's working on a GPU‑based ISP. So on devices where we

21:19.560 --> 21:26.800
don't have support for managing the ISP such as Qualcomm or devices that don't have one,

21:26.800 --> 21:33.160
that work would be really interesting to see extend LibCamera to work on those devices.

21:33.160 --> 21:38.680
And Pavel's talk earlier was about sharp photos on a mobile phone who's creating a software

21:38.680 --> 21:47.960
CPU‑based implementation which will help get things started as well.

21:47.960 --> 21:55.760
These are lessons Yakima wanted to highlight that he's learnt. But they do apply widely.

21:55.760 --> 21:59.400
Fragmentation when it's all split with lots of different stacks from vendors, it's very

21:59.400 --> 22:08.320
difficult to use that generically. So LibCamera's goal is to try and pull this all together.

22:08.320 --> 22:14.280
And to do that, it needs mainlining. We have to have a single definition of what is true.

22:14.280 --> 22:19.600
And mainlining is difficult. It takes a lot of effort. My friend that I travelled up on

22:19.600 --> 22:25.320
the train with to FOSDEM, he was saying he posted patches to one of the Linux lists.

22:25.320 --> 22:31.240
And after four or six weeks he had no reply and found that really demotivating. So it

22:31.240 --> 22:35.560
is important that you consider mainlining from the start. You've got to get in so early.

22:35.560 --> 22:46.400
It takes a lot of time. And it's always slower than when you've got control of your own repositories.

22:46.400 --> 22:49.880
We've definitely learnt more lessons from developing LibCamera. A lot of us are derived

22:49.880 --> 22:54.400
from kernel developers, we've been on the other side. And now we're seeing just how

22:54.400 --> 23:01.960
important it is on the user space side that these controls and interfaces need to be standardised

23:01.960 --> 23:06.720
and have a reference implementation. Since we've created LibCamera, we're finding that

23:06.720 --> 23:12.200
the sensor drivers in Linux are improving rapidly, we hope. We've started saying that

23:12.200 --> 23:16.040
controls have to be defined by the sensors. There's so many missing parts to the drivers

23:16.040 --> 23:22.760
that are already upstream and they need more work to get them supported generically. But

23:22.760 --> 23:31.920
doing so means it will all be more consistent and improve the experience for everyone. Thank

23:31.920 --> 23:42.160
you. I think I might have two minutes. Excellent. So two minutes if you do have any questions.

23:42.160 --> 23:47.560
It already does. I think there may be. Just to repeat the question, the question was will

23:47.560 --> 23:56.240
LibCamera support the original PinePhone? So, Pavel is brilliant to answer that. Wait,

23:56.240 --> 24:06.000
wait, wait. There's a mic coming. And there is kernel on original PinePhone doesn't have

24:06.000 --> 24:12.080
required APIs for LibCamera. So you can either break the LibCamera to work anyway or you

24:12.080 --> 24:18.320
can fix the kernel and people are doing both at the moment. It's in development. But Adam

24:18.320 --> 24:26.320
Pigs who was doing the pinhole camera app, he is working on PinePhone. So, no, on PinePhone.

24:26.320 --> 24:41.440
So it's one of the active platforms being used. So I believe so, yes. Any more questions?

24:41.440 --> 24:47.800
After you talked about releasing 0.0.4, what's on your roadmap for an 0.1 release? What do

24:47.800 --> 24:58.560
you want to get done? I'm sorry. I couldn't hear the question. For LibCamera 1.0. He's

24:58.560 --> 25:06.400
ducking. He's getting out of the way. We want to. There's key features that we want to support

25:06.400 --> 25:12.000
in LibCamera and it will break the API. So we already know exactly how we want to break

25:12.000 --> 25:19.600
things. I started tagging releases so that we had defined points before Christmas. So

25:19.600 --> 25:25.440
trying to do it every two months at the moment. It is in the plan. There's a big reconfiguration

25:25.440 --> 25:33.480
API that wanted to try and get in first before we go for 1.0. But we need testing and app

25:33.480 --> 25:39.400
to know how to get it right. Once we go 1.0, it feels like we're going to say that's it.

25:39.400 --> 25:47.400
But I think some ways, some of it is more psychological. But that's versioning. So we're

25:47.400 --> 25:51.240
working on it. I'm trying to make sure we handle API breakages automatically now so

25:51.240 --> 25:55.920
we'll be able to improve on release management. We kind of always just said use the latest

25:55.920 --> 26:01.160
because we were trying to iterate so fast. And that is hopefully improving. So we're

26:01.160 --> 26:05.240
working on it. And I'm out of time. Thank you. Thank you for a great talk.

WEBVTT

00:00.000 --> 00:12.160
Okay.

00:12.160 --> 00:15.680
Welcome to the next session.

00:15.680 --> 00:22.600
So I will be talking about Kooksaval and in-vehicle access to standardised VSS signals.

00:22.600 --> 00:24.080
I will tell you what it is.

00:24.080 --> 00:28.040
I hope I can convince you that it's a good thing and you want it, but let's see.

00:28.040 --> 00:33.440
I'm Sebastian. I'm part of the Kooksa project and when I'm working, I'm working for Eaters

00:33.440 --> 00:37.920
on vehicle software. So Eaters belongs to Bosch, if that is something that's more familiar

00:37.920 --> 00:42.080
to you. So yeah, this is about automotive software.

00:42.080 --> 00:46.600
So let's get started. We will start like very high, you know, like sky high and then I promise

00:46.600 --> 00:51.000
we go down to code. So there should be something for everyone.

00:51.000 --> 00:54.600
First thing is what Kooksa is an open source software project. So I'm not totally at the

00:54.600 --> 01:00.320
wrong place here. First time for me, first time for Kooksa, I think.

01:00.320 --> 01:05.640
Kooksa doesn't stand alone. Actually, it's part of the Eclipse software defined vehicle

01:05.640 --> 01:10.400
working group. So Eclipse is one of those many happy homes that exist for open source

01:10.400 --> 01:16.840
software. And the Eclipse STV working group, that's basically a bunch of companies and

01:16.840 --> 01:20.420
people interested in automotive open source software and a couple of other interesting

01:20.420 --> 01:24.120
projects beside Kooksa, but we're focusing on Kooksa.

01:24.120 --> 01:29.000
You could say Eclipse STV, it shares the software defined vehicle mindset. So what is that?

01:29.000 --> 01:33.400
I mean, later just Google it. You will see that's basically the latest and greatest type

01:33.400 --> 01:37.960
in automotive. So whenever somebody tries to sell you automotive software these days,

01:37.960 --> 01:43.560
they will probably put their STV stamp on it. So what does it mean? That's also, I can

01:43.560 --> 01:47.360
only give you a very broad thing. So it's a little bit of a marketing thing.

01:47.360 --> 01:52.320
But what it normally promises is faster updates. Like, I mean, today maybe you have a phone

01:52.320 --> 01:56.920
and you get a stream of updates for two years and if it stops after two years, you're pissed.

01:56.920 --> 02:00.320
If you have a vehicle, it's a bit different. Maybe if you're lucky, after two years, you

02:00.320 --> 02:04.240
get an update with some emergency patches and you should feel pleasantly surprised about

02:04.240 --> 02:10.000
that. And STV is a little bit about making this better in cars that you have more like

02:10.000 --> 02:13.760
these apps and software functionalities added later and not so much big block of firmware

02:13.760 --> 02:19.160
that we only update in emergencies. It's often you hear this term 10 times faster development,

02:19.160 --> 02:23.320
not 10 times faster than you are maybe as IT guys, but 10 times faster than automotive

02:23.320 --> 02:28.600
is currently. Because a lot of software there comes rightfully so from the mindset of like

02:28.600 --> 02:32.520
deeply embedded stuff, you know, embedded for real men and women, engine controllers,

02:32.520 --> 02:36.760
real time issues. And there, I mean, of course it is harder and it's lower process to develop

02:36.760 --> 02:41.560
software. But somehow it has taken over also to the higher levels of your vehicle now.

02:41.560 --> 02:45.080
So even your infotainment doesn't update as fast as maybe your Android phone. And that

02:45.080 --> 02:49.880
is something STV promises to change. Many companies promising that so that will make

02:49.880 --> 02:53.880
you as a user of vehicles more happy, developers more happy because finally they can write

02:53.880 --> 02:58.520
software for vehicles or it gets cheaper, makes corporations happy. So that's STV is

02:58.520 --> 03:03.880
awesome. Just Google it. Lots of press releases about it. So how do we do it? So I, well,

03:03.880 --> 03:09.560
the point is in IT, we can already do it. So it's pretty easy. Actually, we take all our favorite

03:09.560 --> 03:13.960
tech stacks. We know and laugh, which are super productive. We put a bunch of beefy

03:13.960 --> 03:17.320
hardware. Okay. We need a little bit more hardware, but that is some understanding that's coming to

03:17.320 --> 03:21.800
automotive. It might make sense to invest a little bit more on hardware to get cheaper and

03:21.800 --> 03:28.840
more productive on the software side. And we put it all in a vehicle. Done. Problem is, I mean,

03:28.840 --> 03:32.760
we do it. It's pretty cool, right? I mean, maybe you have your Kubernetes cluster in cars and I'm

03:32.760 --> 03:37.240
not joking. People think about that and doing that so you can probably deploy WordPress easily.

03:37.240 --> 03:42.280
Right. And if you put good enough hardware, I think your doom framework will be pretty acceptable.

03:42.280 --> 03:48.200
Of course, there are challenges, right? I mean, it's a vehicle where you drive around yourself

03:48.200 --> 03:51.720
with your family and things like that. So probably thinking about safety and security

03:51.720 --> 03:58.040
is a good idea. And we come to that a little bit later in the talk. But the problem is,

03:59.080 --> 04:02.840
if you put all these in your computer, if you don't have any access to the vehicle's hardware,

04:02.840 --> 04:05.720
if you can't actually interact with the sensors and actuators in the vehicle,

04:06.440 --> 04:10.360
yeah, then maybe it ends at deploying WordPress, right? You can't do all these fancy automotive

04:10.360 --> 04:14.120
applications you have in mind. And that is sort of the challenge. It doesn't help you just putting

04:14.120 --> 04:20.520
all these tech stacks on there. What does it, let's see, we are stuck here.

04:26.120 --> 04:30.920
Okay. So what does it mean to access vehicle hardware? So mostly the most interesting part

04:30.920 --> 04:35.560
on a vehicle is really signal based on a very low level. And you have maybe two kinds of interesting

04:35.560 --> 04:40.520
things. Sensors, how fast am I? And simple actuators. Maybe you want to open the trunk, open the door,

04:40.520 --> 04:46.200
engage the wipers. Now you might think, no problem. I read about Linux. It has CAN interface,

04:46.200 --> 04:51.240
Automotive. I just enabled it and off I go. But of course, it should be pretty clear that it's

04:51.240 --> 04:55.560
maybe not a clever way to just let anybody who deploy some software in my vehicle interact with

04:55.560 --> 04:59.320
all the bus systems and all the hardware in the vehicle just for safety reasons alone. And of

04:59.320 --> 05:03.960
course, you want your vehicle still to move. So that's probably not a good idea. Second challenge

05:03.960 --> 05:09.160
is just the way how automotive software evolved in a vehicle. Let's say the serialization, the

05:09.160 --> 05:13.480
data formats are very much not standardized. So even a simple concept like vehicle speed,

05:14.040 --> 05:18.920
how it's represented in bits and what's the data type and what's the unit and things like that.

05:18.920 --> 05:23.080
That is different from each manufacturer to each manufacturer from model to model, from model year

05:23.080 --> 05:28.280
to model year. So that's a big pain if you want to write a piece of software that runs in more than

05:28.280 --> 05:34.680
just one vehicle. Luckily, because we don't have so much time, challenge two, the second one is

05:34.680 --> 05:39.240
solved or is in the process of being solved. There's something called the Covisa vehicle

05:39.240 --> 05:44.520
signal specification link at the end of the talk. So yeah, there's some homework maybe for you.

05:45.080 --> 05:50.920
The point is that's a very simple data model describing signals in a vehicle. It uses like

05:50.920 --> 05:54.760
identifiers which are based on a tree. That's just an example. In fact, it's much more complex,

05:54.760 --> 06:00.360
but you can already see the gist of it. Like here we have something like path like vehicle chassis

06:00.360 --> 06:04.120
actually will tie up pressure. So you already have an idea of what it is, what it might be.

06:04.680 --> 06:09.480
And the VSS defines then also like what would be the data type of this would be the unit,

06:09.480 --> 06:15.240
maybe hectopascals. I don't know. Don't quote me on that. And if you have that and if your software

06:15.240 --> 06:19.720
stack integrates it somehow, then interoperability and portability would get much easier.

06:20.440 --> 06:24.040
But the question is, that's a data model. So it's actually a nice YAML based file format.

06:24.040 --> 06:28.200
You convert it however you like, but it's not live software. So how do you bring it to life?

06:29.240 --> 06:33.240
And that's a question where would you use these kinds of nice abstracted model?

06:33.800 --> 06:38.760
And two things talk again about these real embedded layer, probably not. Because down there,

06:38.760 --> 06:42.200
where you have the super small, you know, microcontrollers, few kilobytes of RAM, safety

06:42.200 --> 06:48.040
critical stuff, maybe you can't or don't want to invest in this cost of abstraction. Because that

06:48.040 --> 06:52.440
it costs. I mean, it's nice and neat, but it costs. Then I mean, all the other way,

06:52.440 --> 06:56.760
somewhere in the cloud backend systems that the manufacturer might have or that a fleet operator

06:56.760 --> 07:01.960
might have. There might be a good idea to have an abstracted data model. And that is also the place

07:01.960 --> 07:07.880
where VSS is already in production today at several different companies. You can even go to AWS by a

07:07.880 --> 07:11.800
generic service for that if you want. So there are solutions there because that is where at first

07:11.800 --> 07:17.080
yeah, has taken root. And the question is like on the way between the sensors, which are very

07:17.080 --> 07:20.680
deep in your vehicle up to the cloud, where would you do this transformation? Where would you move

07:20.680 --> 07:27.400
from these proprietary signals and very different variants to the standardized thing? And I think

07:27.400 --> 07:33.000
it's no surprise that an SDV, the answer is still in vehicle because you want to be better in vehicle.

07:33.000 --> 07:39.240
But the point is do it not on a microcontroller, do it in a vehicle computer. I use the term very

07:39.240 --> 07:44.440
broadly, but that will be any computing unit in your car that actually has a processor and has a

07:44.440 --> 07:49.240
real, let's say POSIX style operating system. So Linux, for example, maybe the actual expense here

07:49.240 --> 07:54.920
would also work, but not like not microcontrollers, but a microprocessor platform. And that actually

07:54.920 --> 07:56.120
is exactly what Cook's

07:56.120 --> 08:00.520
our values cooks about is an open source software component that can do just that sit on a vehicle

08:00.520 --> 08:07.240
computer and provide access to the standardized signals. How does it look like in an architecture

08:07.240 --> 08:13.400
kind of view? So basically you have something we call the Cook's our data broker. That's like,

08:13.400 --> 08:18.600
you can see that like a small server, it can run on your computer. It provides a gRPC based

08:18.600 --> 08:23.320
interface or network based interface you can connect to. You can get set, read, subscribe,

08:23.320 --> 08:28.360
all these nice signals, these abstracted signals from the VSS tree. So it means the applications

08:28.360 --> 08:33.240
on top, they would be portable. They work on standardized signals. Of course, you need to get

08:33.240 --> 08:38.280
them in and out somehow because down there, I mean, we have the nonstandardized signals. So there we

08:38.280 --> 08:44.600
have something we call it VSS provider or VSS feeder is a term you often see in our documentation.

08:44.600 --> 08:49.720
And this is a software component that would transform basically the data from the proprietary

08:49.720 --> 08:55.320
things in a given vehicle to the standardized form as required by Cook's our own as required by VSS

08:56.280 --> 09:01.720
important some architecture decisions. So this data broker is it's written in rust, pretty

09:01.720 --> 09:05.800
lightweight. It does not have many features. So no, no history or things like that. I mean,

09:05.800 --> 09:09.800
currently it's like less than four megabytes. That's statically compiled, you know, everything

09:09.800 --> 09:15.320
all in. And that's how we want to keep it so that it could really run on even the smallest one of

09:15.320 --> 09:20.680
these vehicle computers. And there's also I'm not sure if we have old cooks or users there. There's a

09:21.720 --> 09:26.840
version of cooks also in C++, but currently I'm focusing on the rust version for this talk.

09:26.840 --> 09:32.200
But architecture is the same. So how would it look like, let's say, if you really want to write an

09:32.200 --> 09:36.040
application that can basically open your trunk, pretty simple, right? User presses the button,

09:36.040 --> 09:40.600
open the trunk, and you maybe also want to see whether the trunk is open or not. And VSS terms

09:40.600 --> 09:45.000
is pretty simple. I mean, you talk to Cook's our data broker, you say, I want to subscribe to the

09:45.000 --> 09:50.440
state of the trunk because then you can show this fancy graphic if it changes. You might have to use

09:50.440 --> 09:55.640
a process that he wants to open the trunk in this app in or somewhere you want to set the target

09:55.640 --> 10:01.320
position of the trunk. So you want to state the intent that you want the trunk to be opened. If

10:01.320 --> 10:07.160
it ends there, nice. I mean, you talk to a database, nothing happens. So in the end, you need these two

10:07.160 --> 10:12.120
VSS providers. We talk about feeder and control service. So feeder would be the component that

10:12.120 --> 10:16.760
checks actually what is the state of the trunk, feeds this back to Cook's our vials so everybody

10:16.760 --> 10:21.880
can get an updated state of subscribe. And the control service would run the other way around.

10:21.880 --> 10:26.440
If the target value is set, the control service would be triggered. And then it can do basically

10:26.440 --> 10:31.400
something. I mean, you can write a can frame or some IP that some of these standards which are

10:31.400 --> 10:37.720
an automotive. I can make it a little bit more specific because for these toy examples,

10:37.720 --> 10:42.760
because now it's just PowerPoint engineering. But I think people sitting here, they want to see code

10:42.760 --> 10:49.640
or at least want to see if it exists. So the point is how would we make these feeder and how would we

10:49.640 --> 10:54.680
make this provider? And I show you examples now in Python, two reasons. Python is compatible with

10:54.680 --> 11:00.360
PowerPoint. I can fit every single one slide. And second, we have a very nice Python library on

11:00.360 --> 11:05.320
Cook's that makes it easy. But as I said before, the interface is GRPC based and you can generate

11:05.320 --> 11:11.000
in every language. If you want to write this in Rust or C++ or C or Go or whatever, you can just

11:11.000 --> 11:18.440
generate it. So feeder example, pretty simple. So here in this example, because then you can run it

11:18.440 --> 11:21.880
on your computer, we just simulate the vehicle access. Normally there you will need to have some

11:21.880 --> 11:26.280
interface to can or some outer side API or something like this. So we just pretend whether

11:26.280 --> 11:31.960
there's a file or not that states whether trunk is open or not. We just check for that. And if it

11:31.960 --> 11:37.960
changes, we just set this vehicle body trunk as open data point to the current state. And that is

11:37.960 --> 11:42.440
literally, I mean, this code, if you get the slide, you can copy it. It's a picture. You can type it,

11:42.440 --> 11:46.840
you know, like in the magazines 20 years ago, you can type the code and run it. But this code will

11:46.840 --> 11:51.960
run. So I didn't leave anything out for simplicity. Maybe error handling, but if you do everything

11:51.960 --> 11:56.760
right, it will run. Control service is basically the same thing. The control service is now that

11:56.760 --> 12:00.840
thing where we say we want to listen whether actually somebody wants to change the state of

12:00.840 --> 12:06.600
the trunk. And if I see somebody wants to open it or close it, then we would enact the changes

12:06.600 --> 12:13.240
in the architecture of the vehicle here. Again, we simulate it via the file. And let me check. I

12:13.240 --> 12:19.000
think they're not so bad in time. So I think I can, I didn't dare to show it live. I'm not that

12:20.440 --> 12:29.720
hard to say crazy here, but I can show you semi-live. Same code you have just seen.

12:35.880 --> 12:40.840
So we start off by just starting data brokers. So this component that will always run,

12:40.840 --> 12:45.000
then we use something called the data broker CLI. So we can just simulate what an app would do. I

12:45.000 --> 12:50.600
mean, it's CLI for that. So you see, I will just query the state of the trunk. And it's not

12:50.600 --> 12:55.720
surprising that it will say, I don't know, because we just started the cook survival book. How should

12:55.720 --> 13:01.480
it know? We can now simulate feeding this value. I mean, it's again CLI. We just pretend that the

13:01.480 --> 13:08.600
trunk might be open. So I said that. It says, okay, that's a good sign normally. And now if I

13:08.600 --> 13:14.200
correct again, okay, the data is there. So yeah, hell yeah, we can make a database. Now let's look

13:14.200 --> 13:20.760
again. That is exactly the code you saw before on the slide. We simulate whether the trunk is open

13:20.760 --> 13:28.200
or not, depending on whether this file in the temp exists. And you see, there's no extra code. I'm

13:28.200 --> 13:35.240
just running it now. It actually says trunk is not open anymore because we don't have this file. And

13:35.240 --> 13:42.360
if we query again in the CLI, you see that it's reflected already. Now we can also, I mean, now

13:42.360 --> 13:46.360
assume you have a user in a vehicle, right? I mean, he opens a trunk, he closes the trunk,

13:46.360 --> 13:52.360
something like this. So again, we do this here with our mockup. And you see this is immediately

13:52.360 --> 13:56.920
picked up. You can see from the logs of the feeder. And again, on the CLI, you see that

13:56.920 --> 14:01.720
the state changes. And that would already be all you need if you want to have these fancy graphics

14:01.720 --> 14:07.000
in there, right? Your car can just show you what is. I can do the same stuff now with the control

14:07.000 --> 14:12.520
service. Also, same code as you saw on the PowerPoint. Basically it subscribes for state

14:12.520 --> 14:17.080
changes. That's important. We always have the differentiation between current value and target

14:17.080 --> 14:24.600
value because, yeah, that's important to see because some operations take longer and we

14:24.600 --> 14:30.440
start it. Of course, first nothing happens because nobody requests anything. But now again, we are

14:30.440 --> 14:36.360
back in the CLI. So now I can do a set call which basically is telling me I have the intent now to

14:36.360 --> 14:44.440
open the trunk. I'm not good at slower typing. There it is. I type it, but now it's fast. Yeah,

14:44.440 --> 14:49.160
don't blink. So you see the trunk control service immediately opens the trunk. You could see the

14:49.160 --> 14:54.440
feeder also picked it up immediately because in this example it worked. And then, of course, we

14:54.440 --> 14:59.240
can again get the state in CLI. Now we're closing the trunk. Our trunk is fancy. It can close by

14:59.240 --> 15:06.600
itself. Again, pick it up. The feeder picked it up and you see it. So that's round trip. But,

15:06.600 --> 15:13.880
yeah, that you can also do at home. So it's all the links you need in it.

15:19.080 --> 15:21.800
Now I need to get my mouse back to set sec.

15:21.800 --> 15:29.720
So that we just saw. So now I think one important thing I want to talk about is now, I mean,

15:29.720 --> 15:33.320
that's fine and it works. And I mean, probably you believe me, it could also work if you know

15:33.320 --> 15:37.880
the magic can commands or something like this. But the question is, would you want to run this

15:37.880 --> 15:43.960
in your vehicle or should you do it? So the question of safety and security I think is very

15:43.960 --> 15:50.520
important. So the thing is, no matter what your application is, at one point you need to think

15:50.520 --> 15:54.600
about it. I mean, security is already the aspect that probably you don't even want to give all

15:54.600 --> 15:59.640
applications access to all the data you might have. If you support the whole S3, I think it has like

16:00.280 --> 16:05.160
700 to 1,000 signals already just in the standard thing. So maybe not every app should access it.

16:05.160 --> 16:09.560
And the other thing is, again, like opening a trunk is maybe not a good idea if you're on

16:09.560 --> 16:16.520
the highway and driving this 100 kilometers per hour. And so I'm very sorry to tell you that I

16:16.520 --> 16:16.840
cannot magically solve it. I would love to tell you download Cook's

16:16.840 --> 16:24.360
server and everything is fine. Of course not. But it's important to look at the architecture.

16:24.360 --> 16:29.080
So the Cook's server, it's written that something in automotive, you call it the QM domain.

16:29.080 --> 16:33.080
That's basically, yeah, maybe it's a well-tested software, but we don't trust it much for any

16:33.640 --> 16:37.800
safety-related things. So what we do there is, okay, we can have authorization, right?

16:37.800 --> 16:41.960
An application needs to prove that I am allowed to write this value or read this value of things

16:41.960 --> 16:49.080
like that. That's a security aspect. Same like now these feeder and service we saw on the example.

16:49.880 --> 16:54.360
Of course you could add some extra security there if you want. But the ones I showed you,

16:54.360 --> 17:00.040
the Pysan things, they cannot give you any safety. At least not in the midterm.

17:00.040 --> 17:06.520
I think now there are some, let's say, activities to try to make a safe Linux

17:06.520 --> 17:10.920
kernel. And of course, I mean, the data broker is written. You could test a lot of it. You can wait

17:10.920 --> 17:16.040
until you have certified Rust compilers. Maybe in the future that could also carry some safety

17:16.040 --> 17:21.800
load. But for now, it's just hopefully well-tested Linux software. But the point is, once you go into,

17:21.800 --> 17:26.520
let's say, now you write on the Canvas or something, right? Or you do a summary request.

17:26.520 --> 17:30.440
So then you cross this boundary, and then there are several patterns that might happen.

17:30.440 --> 17:35.400
So maybe you talk to some deeply embedded ECU that actually is controlling the trunk lock or

17:35.400 --> 17:39.480
the door lock or something like this. Those things already have safety guard rails in them,

17:39.480 --> 17:44.760
right? Even today when this is designed automotive, it's not that they will just blindly do whatever

17:46.040 --> 17:49.320
you tell them. So there would already be something in it that will check,

17:49.320 --> 17:52.440
I don't do it if I am on a highway with 100 kilometers per hour.

17:53.160 --> 17:57.240
Of course, in line of this architecture, you might do rethink if it really captures all the things.

17:57.240 --> 18:02.680
But anyway, on this layer, you have it. Another thing is, since the interface is GRPC, it's just

18:02.680 --> 18:08.600
a network-based interface. So these feeder and the service, so the things that do the actual

18:08.600 --> 18:12.920
conversion, instead of running them on the same Linux domain, the same Linux machine,

18:14.280 --> 18:18.360
you could, of course, also run them on a more powerful vehicle computer that might be able

18:18.360 --> 18:23.960
to carry safety loads. So like in automotive, we say that's maybe an SLB, SLC kind of thing.

18:23.960 --> 18:29.800
So maybe something that run QNX and only certified software. So maybe if you implement your feeder

18:29.800 --> 18:34.600
and services there, then they would be able to carry some safety loads. And of course, you can

18:34.600 --> 18:39.080
always use underlying security concepts as you want. It's always a good idea for defense in depth.

18:39.080 --> 18:45.400
So the thing is, as I said, we don't give you the magic bullet, but instead of now giving every

18:45.400 --> 18:50.440
random application access to any kind of vehicle hardware, vehicle buses, one thing you have,

18:51.000 --> 18:55.800
data broker, a single entry point, and basically you can do all the security you want there.

18:55.800 --> 18:59.960
And then, since this is your control point, and you control what kind of feeders and services you

18:59.960 --> 19:04.520
build, depending on your application, you can see where you need to put some safety loads and where

19:04.520 --> 19:08.120
you need to deal with safety. Because there are issues where maybe you don't need to do,

19:08.120 --> 19:12.200
because in automotive, we have lots of these gateway things everywhere we like them. So if

19:12.200 --> 19:17.000
you have an application that's just doing telemetry and receives the data from some interface,

19:17.000 --> 19:19.880
where you basically already have a data data that you can't even write,

19:19.880 --> 19:25.160
right, maybe it's fine to do everything on the Linux one safety site. But the moment you want

19:25.160 --> 19:33.160
to actuate something in a vehicle, you need to think about it. That's the most important thing,

19:33.160 --> 19:39.480
but I think we give you all the knobs you need. So regarding to enabling STV, just to

19:40.680 --> 19:45.240
repeat a little bit. So yeah, if you want any application to access vehicle buses,

19:45.240 --> 19:50.120
that's probably a pretty stupid or insane thing to do. As we've just seen, at least with KUKSAR

19:50.120 --> 19:55.560
you have the single control point where you can already solve the security issues due to

19:55.560 --> 20:00.360
these architecture with the feeders and providers and these very generic interface, you can choose

20:00.360 --> 20:06.840
where you put those and you can choose where you put them and the safety control points in.

20:06.840 --> 20:11.160
So that enables you to really build a safe system depending on your application.

20:12.040 --> 20:17.160
Other thing, what I said before, I mean, another big challenge is that the signals in your common

20:17.160 --> 20:22.360
vehicle, they are all different. I mean, vehicle speed in five different vehicles is encoded in

20:22.360 --> 20:29.400
five different ways. But as in KUKSAR, you can use the KOVISA VSS specification. You're

20:29.400 --> 20:33.240
basically on the safe side there. You can use the standard signals, they're really standardized. You

20:33.240 --> 20:38.760
can also describe your own ones if you want. That depends on how you want to apply it. But the point

20:38.760 --> 20:42.360
is you have a common language for that and you can use this throughout your whole tech stack. So if

20:42.360 --> 20:46.760
you really go to the cloud or things like that, you do the transformation already KUKSAR-wise site

20:46.760 --> 20:51.240
on the vehicle. Everything else is just piping through and you don't need to deal with some

20:51.240 --> 20:57.800
weird bits and bytes from Canvas up in your cloud level. So that is, I mean, as KUKSAR, we can't solve

20:57.800 --> 21:02.680
everything in the software-defined vehicle because we want to leave something for other people. But

21:02.680 --> 21:08.520
the interface problem that you have same safe and same interfaces in the secure and safe way,

21:08.520 --> 21:14.120
I think that's a very good starting point. And the thing is in the vehicle, everything starts with

21:14.120 --> 21:18.120
those low-level signals because the whole data fabric of the vehicle down there is built like this.

21:20.040 --> 21:25.320
To learn more, yeah, I mean, you can ask me all you want now or grab me outside, otherwise a couple

21:25.320 --> 21:33.800
of helpful links. So our GitHub, where the main KUKSAR data broker sits, if you don't find me here

21:33.800 --> 21:37.560
or don't dare to approach me, you can also click the link and then you find my contract address.

21:37.560 --> 21:43.320
I would invite you to check out Eclipse STV. As I said, there are other interesting projects in there.

21:44.040 --> 21:48.520
Koveza VSS, which is gaining adoption throughout the industry as a data model. It's a super

21:48.520 --> 21:53.640
interesting thing. And some advertising plugs to one of our sister projects in Eclipse STV,

21:53.640 --> 21:58.520
Eclipse Velocitas. So I show you this very bare-bone Python examples if you want to have

21:58.520 --> 22:02.920
something more fancy in regard to how you write vehicle applications, like a whole development

22:02.920 --> 22:07.960
framework with generating deployable containers and things in CI, then Velocitas might be very

22:07.960 --> 22:13.160
interesting. Why you make advertisement for this? Not only because it's cool people, but they also

22:13.160 --> 22:17.480
integrate KUKSAR, so if you are a Velocitas app developer, you also get everything that KUKSAR can

22:17.480 --> 22:22.040
do. Yeah, that's all I have to say. And if there are any questions, I'm still here for...

22:23.400 --> 22:29.800
Three more minutes, I guess. Okay, so we have a question from the chat room.

22:29.800 --> 22:37.640
I'm going to pick one. There's a couple. Are there available CAN or CAN FD data providers

22:37.640 --> 22:45.960
for some cars in an open repository? Yes. So what we have is something called a CAN feeder or DBC

22:45.960 --> 22:50.680
feeder. That's a very generic component to get CAN signals in. Basically what you need is something

22:50.680 --> 22:55.720
called a DBC file. That's the industry standard how you describe CAN signals and do a mapping.

22:55.720 --> 23:00.440
And it's always hard in the industry to get example traces out, but for the CAN feeder,

23:00.440 --> 23:05.160
we have a trace from a Tesla Model 3, not because they give us, but because the community

23:05.160 --> 23:09.720
reverse-engineated quite a lot. So basically you get a big trace of a Tesla and the mappings to

23:09.720 --> 23:16.840
VSS, which you can try out directly. My question, and from OBD, it is open OBD has some definition

23:16.840 --> 23:23.000
of something else from the pen, so can you move this? Could you repeat the question, please?

23:23.000 --> 23:29.880
Okay. I think the question was with regard to OBD. So the answer to that is it is pretty

23:29.880 --> 23:34.600
trivial to build an OBD feeder and you can do it at home with, let's say, the Python examples.

23:34.600 --> 23:38.680
And if you're in a Python world, yeah, there's something called Python OBD, which is like a very

23:38.680 --> 23:45.800
simple library for all the standard on signals. The challenge why we have not in our repositories

23:45.800 --> 23:51.480
is we are all Apache 2 license on a Kips Foundation. And the Python OBD, just one example,

23:51.480 --> 23:56.440
that's a GPL based code, so we can't put it in the repo, but you can, I mean, nothing stops you

23:56.440 --> 24:05.400
basically to do that. Thank you for the presentation. It was quite inspiring. And actually,

24:05.400 --> 24:10.280
my question is relating to this one. So let's say if I go home and would like to implement

24:10.280 --> 24:17.560
something, then what hardware and software I would need and how much it would cost me to start

24:17.560 --> 24:22.680
develop something. So if you start with your own vehicle, which is basically your own responsibility,

24:22.680 --> 24:29.000
then what we just heard, like if you buy these OBD adapters, like from AliExpress for five bucks,

24:29.000 --> 24:33.320
right, you can get them. And you can, with a few lines of code in several languages,

24:33.320 --> 24:38.360
get already some interesting information about, let's say, your current vehicle speed, engine

24:38.360 --> 24:44.920
loads, oil temperatures. Yeah. So that would be, I think, the coolest way if you just hack around,

24:44.920 --> 24:50.600
and we actually have many people, also students who do that. Hardware vice, I mean, if you want

24:50.600 --> 24:55.080
to go into real vehicle, I think you need to dare to cut some can lines and go deeper, but then you

24:55.080 --> 25:00.280
go into, let's say, if you're not working with, if I would like to use your stack, so I would like

25:00.280 --> 25:08.600
to use KUKSA. Basically, you can use, so hardware vice, I think there's also KUKSA, also has

25:08.600 --> 25:15.480
hardware. I hadn't signed to present it yet, KUKSA hardware, which is a base module for a Raspberry

25:15.480 --> 25:22.760
Pi compute module, and it includes two KANF-D interfaces and OBD. Currently, the challenge is,

25:22.760 --> 25:27.080
we can't sell them to you yet, because we have the manufacturing files, like online. So if you

25:27.080 --> 25:43.320
add electronics shops, you can do it, but yeah, they're not just, you cannot buy them.

WEBVTT

00:00.000 --> 00:13.360
So, good morning everybody. I'm happy to see such a large crowd here. I hope I can stand

00:13.360 --> 00:22.800
up for that. So, I will talk a little bit today about, a little bit about matter and

00:22.800 --> 00:29.240
threat as a connectivity solution for embedded here. So, the agenda I have, I mean, giving

00:29.240 --> 00:33.760
a little bit of a scope for the talk, then give you like an overview about matter. So,

00:33.760 --> 00:37.600
I don't know how is time-love is set, how is time-love is open-thread and so on. So,

00:37.600 --> 00:42.680
we'll start a little bit with that. And then how I'm using it or what we are doing using

00:42.680 --> 00:49.800
it on Yocto as well as on ZFire. And then also how we are using matter on top of open-thread.

00:49.800 --> 00:56.240
Talking about the more generic mesh capabilities that thread is offering you and the border

00:56.240 --> 01:00.440
router that is needed to get it all hooked together. And then about one more detail that

01:00.440 --> 01:07.320
is just have been introduced about like multicast DNS discovery proxy as well as service into

01:07.320 --> 01:19.000
the service-re

01:19.000 --> 01:32.160
the

01:32.160 --> 01:43.640
power budget. So, having for example small sensor device that can run on a coin cell

01:43.640 --> 01:49.360
battery for whatever six months, a year, maybe two years depending on the use cases and the

01:49.360 --> 01:54.320
usage. And having mesh capabilities that don't have only like direct connections but we like

01:54.320 --> 01:59.880
being able to extend the network over time by adding more devices and so on. And for

01:59.880 --> 02:04.560
the situation with the power budget, sleepy end devices that really only wake up if they

02:04.560 --> 02:09.200
are being interrupted for a specific use case or only waking up for a short amount of time

02:09.200 --> 02:14.080
to querying the parent to get data that is also something I considered here. All the

02:14.080 --> 02:18.320
stuff I'm talking about here are obviously open source solutions. Thread as well as matter

02:18.320 --> 02:25.720
have found a consortium around them to like do products and do like testing and verification

02:25.720 --> 02:29.320
as well as getting a certification and so on. This is definitely something different.

02:29.320 --> 02:33.200
So, if you want to build a product you might need to pay for some specific parts but all

02:33.200 --> 02:36.280
the software side or the engineering side that is open source here and that's what I'm

02:36.280 --> 02:43.080
going to talk about. So, matter. Some people might have heard about it before. It was formerly

02:43.080 --> 02:51.600
known as connected home or IP or ship in short. It is part of the now so-called CSI connected

02:51.600 --> 02:55.400
with standard alliance. That on the other hand was called Zigbee alliance before. I

02:55.400 --> 03:00.840
think that is something that rings the bell with more people than CSA. They have an open

03:00.840 --> 03:08.400
source SDK for matter. It is an application layer so you are basically like not doing

03:08.400 --> 03:13.680
any of these. It is built on top of IP version 6 and then does all the talk about like how

03:13.680 --> 03:18.080
devices access, how the data is expressed and so on. What kind of device types are there.

03:18.080 --> 03:22.120
It is more like they call it like the language for IoT. I don't know if I sign off on that

03:22.120 --> 03:27.560
but that is like the basic idea we are having here. So, the 1.0 release for the spec as

03:27.560 --> 03:33.280
well as the SDK was done in October last year. One of the interesting part why it got so

03:33.280 --> 03:38.040
much hype was like the industry was that a lot of the big players are set together and

03:38.040 --> 03:43.080
doing that here. So, getting like groups like Google, Apple, Amazon and so on in one room

03:43.080 --> 03:48.320
and working together on this standard to actually try to get all the devices to talk together

03:48.320 --> 03:53.080
even by keeping their own platforms. That is like a very interesting part and that could

03:53.080 --> 04:00.200
be something that a lot of smaller companies could take as a leverage to get into these

04:00.200 --> 04:05.680
kind of platforms to be supported instead of working with each and every platform individually

04:05.680 --> 04:10.080
and get it enabled. So, you don't need to get your device worked with home kit and then

04:10.080 --> 04:15.120
with Google Home or what Amazon has there and so on. So, you can just do it as a matter

04:15.120 --> 04:20.680
device and then it should work in all of them. They also have a feature called multi-admin

04:20.680 --> 04:26.800
which is something that would allow you to have like an, for example, you have an Android

04:26.800 --> 04:31.040
device and your wife has an iPhone or whatever and both could control the same IoT devices

04:31.040 --> 04:35.720
in the same network running the native platforms they are using. So, this is something you

04:35.720 --> 04:43.960
can share the devices by using on different platforms as well. So, Meta and Yocto and

04:43.960 --> 04:50.960
Open and Better. So, the Meta SDK, the way they are building that and so on, it's not

04:50.960 --> 04:55.120
so, I'm not so familiar with that before I started it. So, they're using something called

04:55.120 --> 04:59.880
Gen which is just generate Ninja. So, basically, it just does a whole run and then generate

04:59.880 --> 05:04.960
all the Ninja files to get it all built and they have something called Pickweet that they,

05:04.960 --> 05:09.480
it's like their abstraction how you get like all different kind of vendor SDK supported

05:09.480 --> 05:15.160
and like different coscompile two chains and so on. This is like difficult to get that

05:15.160 --> 05:20.840
into something like Yocto and Better which just focus on the coscompiling part here.

05:20.840 --> 05:26.280
So, that was quite a bit of work. So, we had to do like a Gen base class to get it supported

05:26.280 --> 05:31.480
and did a lot of like work around here. But anyway, we got that part working. So, we have

05:31.480 --> 05:36.080
the core libraries building, we have the examples that are part of the SDK building, we have

05:36.080 --> 05:41.360
that all in the in our own new layer. But there's also a different layer from an XP

05:41.360 --> 05:46.920
Meta, MetaMeter which does it a little bit differently but in the end you're getting

05:46.920 --> 05:51.920
the same result. You have like integration to run that on a Linux system. So, this is

05:51.920 --> 05:57.880
a, that is all there. You can take that and then build on top of the library and take

05:57.880 --> 06:04.080
the examples, the devices to like do whatever you want there. On the Meta, on the Z-Files

06:04.080 --> 06:08.800
side. So, on here is a project that runs not only on Linux but we also run it on the Z-Files

06:08.800 --> 06:12.760
side. So, we have like multiple kernels there. So, we also need to make sure that we want

06:12.760 --> 06:17.680
to have the integration part there as well. I have been working on a proof of concept

06:17.680 --> 06:25.640
to get Meta as a sub module or as a Z-Files module integrated. So, the build system would

06:25.640 --> 06:30.640
inside the Meta SDK there is like a platform abstraction for Z-Files which is based on

06:30.640 --> 06:36.080
two SDKs from Asignotic and T-Link. Their SDKs are based on Z-Files as well and they

06:36.080 --> 06:41.600
have like a generic Z-Files abstraction now. And then we have the integration part where

06:41.600 --> 06:48.000
we have a CMake file and so on to hook that into the Z-Files build system. We are an external

06:48.000 --> 06:53.640
module and you have like a specific module, a JAML file that just tells where the CMake

06:53.640 --> 06:59.200
file is, how is the setup, how the build setup is and so on. And then you're setting things

06:59.200 --> 07:25.820
like Open

07:25.820 --> 07:32.640
and we are going this approach. So, Meta devices. So, the device types that are available in

07:32.640 --> 07:36.600
the SDK coming from the 1.0 release are very limited. I think they only have like five

07:36.600 --> 07:41.080
device types specified right now. There are definitely a lot more coming and will come

07:41.080 --> 07:45.480
in the next upcoming releases. So, Meta is doing like two releases per year in spring

07:45.480 --> 07:51.600
and autumn. So, there should be a lot more going on there. They're using the ZigBeat cluster

07:51.600 --> 07:55.920
library so in case you're familiar with that from all the projects or something, so they're

07:55.920 --> 08:00.040
basing the device types and abstraction on that one, extending it a little bit and then

08:00.040 --> 08:04.720
using it. But it should be a very good base for your own devices. It doesn't mean it cover

08:04.720 --> 08:09.320
all the nitty details. It has to be on your product or something but it could be a good

08:09.320 --> 08:15.520
entry point for cover the basic functionality and then for details you might leave that

08:15.520 --> 08:20.280
out and have like an out of band situation. Or you go to the Meta working group and work

08:20.280 --> 08:27.120
with them to extend that over time. As usual, like set up is the QR codes you might know

08:27.120 --> 08:32.360
from other devices already like HomeKit and so on. You can also use have a pin and then

08:32.360 --> 08:37.560
you have NFC that is upcoming that you can use it as well. So, in terms of connectivity

08:37.560 --> 08:42.920
layers what they are supporting in the beginning, that is Ethernet and Wi-Fi, there's no much

08:42.920 --> 08:49.040
need to like adapt it or anything. For Wi-Fi they're working on a better soft, so right

08:49.040 --> 08:54.360
now it's a soft IP set up if you want to bring a device in but that means you would need,

08:54.360 --> 08:59.200
for example, if you do the soft IP with your phone and then you leave the connectivity

08:59.200 --> 09:03.840
to your normal data. So they're working with the Wi-Fi alliance to change that as a neighboring

09:03.840 --> 09:10.320
service. So that is good. Brutus or energy is also available for device onboarding. It's

09:10.320 --> 09:15.520
not a connectivity layer they're using on for data transmission but it's just only for

09:15.520 --> 09:21.200
onboarding. And as I mentioned before, they have like these, if you're not, if your device

09:21.200 --> 09:26.000
supports more than the device type expressions they are doing, you either need to work together

09:26.000 --> 09:31.040
with them to extend that or you need to find a way to have that as an out of bound connectivity.

09:31.040 --> 09:35.480
But here comes the beauty of being IP version 6. You have like end-to-end connectivity to

09:35.480 --> 09:40.080
the device and if you, for example, have like a mobile application or something that would

09:40.080 --> 09:44.560
control this, you could still do all the work with META to support the basic functionality

09:44.560 --> 09:51.280
and then hand over to the IP, to the end device over IP version 6 and then control the device

09:51.280 --> 09:58.160
for like an extended API you might offer on the device. But Ethernet and Wi-Fi are not

09:58.160 --> 10:02.360
really the ones I was looking into when looking at the power budget and designing devices

10:02.360 --> 10:07.520
that are really power budget friendly and can run for like a year or so on a battery.

10:07.520 --> 10:12.440
So I was looking into threat for that. So OpenThread is the open source implementation

10:12.440 --> 10:20.240
of the threat specification. Threat group is the governance body, again, membership.

10:20.240 --> 10:23.680
You have to pay fee if you want to get certified in Seron, but you don't have to do that if

10:23.680 --> 10:30.720
you're just going for the implementation of this OpenThread. It's BSD3 license, so that's

10:30.720 --> 10:35.960
all easy for you to integrate in your products in Seron. It's mostly driven by Google and

10:35.960 --> 10:41.480
formerly Nest and it's a very established code base already in products and running

10:41.480 --> 10:48.760
in the millions of the world already. So threat is a mesh network. So what does it

10:48.760 --> 10:53.560
cover here? So you have like different types of devices that are part of the mesh network.

10:53.560 --> 10:57.680
You have full threat devices which are normally devices that have like a good amount of power

10:57.680 --> 11:03.720
budget being either line powered or having like a big battery that they can operate on.

11:03.720 --> 11:07.680
These are like often like routers that can like take the packet forward to another one

11:07.680 --> 11:11.680
to make sure that everything, the whole data keeps flowing. And then you have like router

11:11.680 --> 11:17.080
electrical devices which is something that will become a router if the mesh network needs

11:17.080 --> 11:21.560
them later on to make sure that the data keeps flowing or if they are like in a corner of

11:21.560 --> 11:28.000
the mesh network where they need to increase the quality for all the other nodes available.

11:28.000 --> 11:31.960
Or there could be just a simple full end device which is just operating there not doing any

11:31.960 --> 11:36.760
routing or something but still being a full end device. And then for the power constraint

11:36.760 --> 11:41.480
devices you have like minimal threat devices which are minimal end devices and they can

11:41.480 --> 11:47.560
be sleepy devices. So basically they would like spend most of their lifetime just being

11:47.560 --> 11:53.080
asleep not drawing or drawing as little power as possible and only wake up if they are getting

11:53.080 --> 11:56.520
an interrupt like when you open your window or something like that you want to send the

11:56.520 --> 12:02.520
notification out for that or you just have a short poll to a parent and ask if there

12:02.520 --> 12:09.120
is any data left for you. So they are using 15.4 as a base layer, a file layer and they

12:09.120 --> 12:13.680
have a functionality where you send out a packet if there is any data available for you

12:13.680 --> 12:17.880
and even in the act frame already you have like a bit set where it says there is data

12:17.880 --> 12:22.200
waiting for you don't go asleep, poll me again and then you are getting all the data and

12:22.200 --> 12:27.640
if not you can fall asleep already again. You can also have like in the newer specifications

12:27.640 --> 12:33.960
you have something that is like synchronized schedules but that would mean you need a newer

12:33.960 --> 12:38.280
type of like ships available not all of them do that so you would have to need like 15.4

12:38.280 --> 12:44.280
yeah the 2015 release for that so you need to find like the silicon ships that actually

12:44.280 --> 12:52.920
support that and then you can get that running as well.

12:52.920 --> 12:57.920
I talked about the router things before you have router device, you have end devices and

12:57.920 --> 13:01.840
then you have a leader of the threat network. This one is in charge of making sure that

13:01.840 --> 13:06.920
all the key material for example is distributed to all the networks, all the keys are getting

13:06.920 --> 13:11.080
wrote over if they are running out of frame counter and so on that really makes sure that

13:11.080 --> 13:16.320
all the stuff is available and all the devices get the need information and then you obviously

13:16.320 --> 13:20.200
have like a standby leader if the leader is like running out of battery or like someone

13:20.200 --> 13:23.800
tripped over the power cable or something like that so you have all of that covered

13:23.800 --> 13:29.840
in the mesh functionality as well. And the other important device that is available in

13:29.840 --> 13:35.080
such a network is the border router because you want to have these kind of things obviously

13:35.080 --> 13:39.360
connected to at least to your home network. Maybe even to the internet that's up to you

13:39.360 --> 13:43.680
but you want to have like more devices than only within the threat network and that is

13:43.680 --> 13:47.400
where the border router comes in. I will talk about that a little bit later because it's

13:47.400 --> 13:53.760
also relevant to the meta part for the integration. In terms of addressing, there are like three

13:53.760 --> 13:57.680
different types of addresses. We have like the link local, what you can reach directly

13:57.680 --> 14:04.080
within your range, in your wireless receiving range or transmitting range and then you have

14:04.080 --> 14:07.840
mesh local addressing which is like available in the whole mesh network and then you have

14:07.840 --> 14:12.860
like the global addresses. It's all IP, one of six addresses and they have like allow

14:12.860 --> 14:18.280
you to like individually target specific parts of the mesh. I'm rushing through that a little

14:18.280 --> 14:23.360
bit because it's too much to go into all the details here in 20 minutes but it's a little

14:23.360 --> 14:29.080
bit more in the slides. So in terms of the software they're having there available, there's

14:29.080 --> 14:29.980
the OpenS

14:29.980 --> 14:33.280
core library which is used for all of them. Then you have abstractions for like all the

14:33.280 --> 14:37.680
different silicon vendors integrating with their SDKs and so on. So you can see them

14:37.680 --> 14:42.920
all there listed. If you have a specific device for example running that you could, you would

14:42.920 --> 14:47.760
bare metal on that as well or you could go and run it for example as an OpenStrand module

14:47.760 --> 14:54.160
on Zifier being supported. On the link side they have like two basic services they're

14:54.160 --> 14:58.920
running. There's the OT daemon which is like the basically only a full enterprise which

14:58.920 --> 15:03.920
could operate as a normal enterprise in the network and then you have the OpenStrand border

15:03.920 --> 15:09.720
router POSIX, how they call it, that is the full border router set up that you would run

15:09.720 --> 15:15.720
on your Linux device if it's the border router and engaging there.

15:15.720 --> 15:21.240
So talking about all the power constraints you are having, so there are two advancements

15:21.240 --> 15:26.440
that have been happening driven by meta mostly but falling back to Shred to make it even

15:26.440 --> 15:31.600
more power efficient. This is a multicast DNS discovery proxy and the service registration

15:31.600 --> 15:40.120
protocol. So I talked before the border router is like the central part here to shield the

15:40.120 --> 15:46.480
mesh network from the rest of the network or the other way around. And this is, so if

15:46.480 --> 15:51.760
you look at a lot of the IT devices you have maybe in your home you know about, these are

15:51.760 --> 15:56.400
often like vendors where you have like one specific hub for your specific device types

15:56.400 --> 16:00.520
and so on. Then you have the next hub for the other types and so on. This is all crowded

16:00.520 --> 16:07.000
and so on. And for the border router this is often more a software component that can

16:07.000 --> 16:13.120
be updated in devices already available. So the 15.4 radius they are used for Shred that

16:13.120 --> 16:18.040
are the same radius that are used for Zigbee. That means all the hubs that you might have

16:18.040 --> 16:22.240
already have Zigbee support, it is up to the hardware vendor if they want to change that

16:22.240 --> 16:26.360
over to a different firmware and then all the other software around it to make sure

16:26.360 --> 16:30.480
they can also support Shred. It's also possible to run like both of them in parallel if you

16:30.480 --> 16:34.960
do like multi-protocol on the firmware level where you have like Zigbee device support

16:34.960 --> 16:39.520
as well as Shred device support. That's a bit more complicated but it is possible as

16:39.520 --> 16:46.320
well. But nowadays one of the problems I saw when I worked with Shred the first time was

16:46.320 --> 16:51.200
like everybody needs to get like another device being the hub and so on. But if you look around

16:51.200 --> 16:56.320
now there's tons of devices already available that offer border router functionality. All

16:56.320 --> 17:00.920
the Apple devices like the HomePod, the HomePod mini, Apple TV, or the Google Nest device,

17:00.920 --> 17:04.960
Echo and so on. All these things are like the if you have them in your house already

17:04.960 --> 17:09.800
or like people your target audience have them in the house already it's already sorted out.

17:09.800 --> 17:14.400
And then there's a lot more hubs doing the support as well. The new IKEA hubs have support

17:14.400 --> 17:18.760
for it. I think that the smart things hub is going to plan support for it and so on.

17:18.760 --> 17:23.080
Then a lot of these smaller vendors as well are coming out hopefully over the year. So

17:23.080 --> 17:26.480
that means if you bring home an Open Shred device or a Shred device you shouldn't be

17:26.480 --> 17:33.440
worried to get it onboard as long as you have some of these. So it's not as easy support

17:33.440 --> 17:37.760
as Wi-Fi for example right now but it's good to get traction there. But coming back to

17:37.760 --> 17:43.200
the situation about the discovery proxy. So this kind of wireless networks they don't

17:43.200 --> 17:48.440
have any multicast support. So whatever you send in as a multicast there will end up as

17:48.440 --> 17:52.800
a broadcast in the whole mesh network. Which is obviously not a good thing if you want

17:52.800 --> 17:57.280
to be like if you're constrained in power and need to listen in and wonder what's going

17:57.280 --> 18:00.800
on. I mean the sleepy end device for them it's not too difficult because they would

18:00.800 --> 18:05.520
sleep and the parents would just discard whatever they have for them if it's not targeted directly

18:05.520 --> 18:09.520
for the specific device. But all the other ones would still like draw on the batteries

18:09.520 --> 18:14.160
they're having to do that. So on the other hand multicast DNS discovery is something

18:14.160 --> 18:18.880
that is very much used in the industry for all kind of service discovery in networks.

18:18.880 --> 18:24.120
So we want to address that support as well. So there's a component now that has been specified

18:24.120 --> 18:29.000
as an ITF of C draft. But just sitting there and doing basically the proxy what what's

18:29.000 --> 18:32.760
the name suggests right on the one hand if you have like Wi-Fi or Ethernet you do multicast

18:32.760 --> 18:38.840
DNS on the other hand you do a unicast DNS service discovery and so on. So that is like

18:38.840 --> 18:43.440
basically proxying back and forth. That doesn't mean depending on the bottle where you're

18:43.440 --> 18:47.640
using you don't you're not forced to that. So the end to end principle of IP version

18:47.640 --> 18:55.880
still stands. But it's like an optimization you maybe don't want to miss out on. And on

18:55.880 --> 18:59.840
the other hand so that is mostly covering the side where you have like Wi-Fi and Ethernet

18:59.840 --> 19:03.320
flooding into in a threat network. But on the threat side you also want to make sure

19:03.320 --> 19:07.600
that you announce the device that are available and so on. That is like the service registration

19:07.600 --> 19:13.120
protocol where you go and say I have the service available as DNS. So this is like what I'm

19:13.120 --> 19:18.280
offering here. And they can register on the border router service for that. So that would

19:18.280 --> 19:27.040
mean and would distribute that again as multicast DNS on the Wi-Fi Ethernet side. Yeah. So transparent

19:27.040 --> 19:31.360
gateway. So that is like how I knit all the things together. So we have a blueprint that

19:31.360 --> 19:35.800
is like in a neuro hobby. We talk about like proof of concept demos we are doing and we

19:35.800 --> 19:39.680
have a layer where we do all the integration parts here or the open threat stuff. I upstream

19:39.680 --> 19:45.600
already they are in meta-o-e networking and the meta stuff that is still very much work

19:45.600 --> 19:50.160
in progress going on as well as the ZIFI outside. But if you're interested in that I mean it's

19:50.160 --> 19:54.400
not I'm not hiding anything here it's just not not ready to show. But if you're interested

19:54.400 --> 19:58.920
we can talk about like where these things are. So this is like an old example I had

19:58.920 --> 20:02.720
where I had like just a threat device being on border to it could like go ahead have like

20:02.720 --> 20:07.240
secure our code for this specific device and then you have even have an Android application

20:07.240 --> 20:11.640
to onboard on the network and so on and do all the stuff and then in the end this is

20:11.640 --> 20:16.640
all the components together you have like IP version 6 connectivity and on top of that

20:16.640 --> 20:21.480
this meta you would have like a real device abstraction and offering all kind of platform

20:21.480 --> 20:49.920
integration and so on. And with that I'm done and I should have like a few minutes for questions.

20:49.920 --> 20:58.320
Hi there thank you very much for that. We're currently looking at developing a meta cellular

20:58.320 --> 21:04.880
gateway using some of the new ESP32 chips that are coming out. What I'm having trouble

21:04.880 --> 21:15.920
getting my head around is the underlying physical layer in terms of 802.15.4 versus Wi-Fi 802.11.

21:15.920 --> 21:20.840
And so what I'm trying to understand is if I buy a meta device it might be a meta device

21:20.840 --> 21:27.760
that supports Wi-Fi or it might be a meta device that supports Fred over 802.15.4 which

21:27.760 --> 21:32.680
to my mind feels like it's going to be really confusing for people. And I'm asking as we

21:32.680 --> 21:38.360
go to develop this border router should we focus on supporting sensor like devices that

21:38.360 --> 21:44.780
are Wi-Fi devices or 802.15.4 devices or is it not that simple?

21:44.780 --> 21:50.400
I think it's sensible to make sure that you have at least a 1.5.4 radio in the device

21:50.400 --> 21:54.840
because I think all the sensor devices you will see coming are most likely to use Fred

21:54.840 --> 22:00.000
because just power budget wise I mean at least the feedback I saw in the working groups and

22:00.000 --> 22:06.400
so the feedback I got in the working groups. Excuse me if you're moving in or out of the

22:06.400 --> 22:12.480
room can you please do that quietly whilst we're doing the Q&A and try and keep the noise

22:12.480 --> 22:18.840
down to a minimum because it's getting very difficult to be heard here. So please be considerate

22:18.840 --> 22:19.840
to others.

22:19.840 --> 22:29.520
Okay so I think you really need to make sure that you have that available because all the

22:29.520 --> 22:33.360
companies that are looking into that they want to be conservative in power or something

22:33.360 --> 22:39.000
they're definitely going for that. So and I mean if you do the hardware setup make sure

22:39.000 --> 22:43.480
you have the radio available. If you enable that by default from the beginning it's up

22:43.480 --> 22:48.320
to you right. I mean you can always have like the firmware available and then do ship the

22:48.320 --> 22:52.920
device and then enable it later on that I've seen tons of devices doing that but having

22:52.920 --> 22:57.560
it available for the hardware perspective I would not ditch that. It's like yes it's

22:57.560 --> 23:02.920
like a few euro maybe depending on the volume and so on but I'm pretty sure that most of

23:02.920 --> 23:04.320
the device will come with that.

23:04.320 --> 23:13.280
Okay I've got a question from online here. I'm over here. Online we have a question.

23:13.280 --> 23:17.520
What's the rationale for a non-router end device if it doesn't have any power management

23:17.520 --> 23:25.320
requirements? What's the rationale for a non-router end device if it doesn't have any power management

23:25.320 --> 23:26.560
requirements?

23:26.560 --> 23:31.520
Okay I mean the thing is it could be a router. Normally in that case it would be like a read

23:31.520 --> 23:36.000
like a router a leisure device but you maybe you don't need all the routers available in

23:36.000 --> 23:39.200
your network right. I mean you have like if you have a mesh network and depending on how

23:39.200 --> 23:45.120
the topology is and like maybe your house or your how the environment is basically you

23:45.120 --> 23:50.360
have maybe enough routers available at that point. So all of the full end devices can

23:50.360 --> 23:55.040
do that but you might don't choose for that so.

23:55.040 --> 24:02.040
Okay any more questions?

24:02.040 --> 24:11.040
Can you put your hand up?

24:11.040 --> 24:16.040
Hi. So one of the most controversial parts from this back.

24:16.040 --> 24:19.040
A little bit louder sorry very noisy.

24:19.040 --> 24:23.640
So one of the most controversial parts of this back when it was released was they were

24:23.640 --> 24:31.480
talking about authentication onto the network like onboarding via blockchain. Can you discuss

24:31.480 --> 24:32.480
that a little bit?

24:32.480 --> 24:36.640
Okay so what I think what you reference to is like the distributed ledger. So having

24:36.640 --> 24:40.720
so one of the ideas that is like work around the in the meta-working group is like the

24:40.720 --> 24:45.440
distributed ledger where you can authenticate the devices that are like so you're basically

24:45.440 --> 24:49.680
not getting fake device in the network and so on. That's definitely something that could

24:49.680 --> 24:54.560
be could be problematic for if you want to like do your own devices in your own home

24:54.560 --> 24:59.680
for example and get them onboarded. I still have to see if that is really enforced or

24:59.680 --> 25:06.080
not. That is really depending on the platform and so on how you're using that together.

25:06.080 --> 25:10.320
Yeah but I need I need to hear some microphone or something.

25:10.320 --> 25:16.560
Have you managed to get a DIY device onto an actual Google matter network yet?

25:16.560 --> 25:20.360
Not on a Google network now. I was able to like get it all working together on my own

25:20.360 --> 25:23.760
setup but I didn't work against the platform since around.

25:23.760 --> 25:26.960
Yeah that sort of seems like one of the problems.

25:26.960 --> 25:31.320
Well we have to see I wouldn't rule it out right now but I can I can confirm that it's

25:31.320 --> 25:36.320
possible but it really depends on how you do it. But it's definitely the concern you're

25:36.320 --> 25:37.320
right.

25:37.320 --> 25:38.320
It's possible.

25:38.320 --> 25:45.320
It's possible? Okay so yes someone said it's possible here. So okay. Okay thank you everybody.

25:45.320 --> 25:47.320
Okay thank you very much.

25:47.320 --> 25:49.320
Thank you.

25:49.320 --> 25:54.320
Check the chat room. There's one more question on the chat room you can answer.

25:54.320 --> 25:55.320
Okay.

25:55.320 --> 25:56.320
Okay.

25:56.320 --> 26:25.320
Thank you.

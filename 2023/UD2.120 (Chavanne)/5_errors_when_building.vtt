WEBVTT

00:00.000 --> 00:13.920
It's good to learn at the errors of someone else, I would say.

00:13.920 --> 00:22.160
We all do errors, but if we can avoid doing all of them on our own, that's a little bit

00:22.160 --> 00:24.000
better.

00:24.000 --> 00:32.160
That's why I'm going to share with you today a set of my favorite errors I have seen in

00:32.160 --> 00:35.960
embedded products.

00:35.960 --> 00:39.760
If you have worked with me in the past, don't worry.

00:39.760 --> 00:45.760
I'm changing details of all of the examples that you cannot figure out which project it

00:45.760 --> 00:48.640
exactly was.

00:48.640 --> 00:51.520
No panic.

00:51.520 --> 01:03.280
But before we start, a disclaimer, I'm a security person, so I have my bias.

01:03.280 --> 01:08.920
And now a task for you, an important task for you.

01:08.920 --> 01:11.400
Concentrate.

01:11.400 --> 01:18.320
Concentrate and think about an embedded product or project you have been working on.

01:18.320 --> 01:24.680
It may be something that you are working on right now, or it may be something you have

01:24.680 --> 01:28.520
been working with in the past.

01:28.520 --> 01:30.520
Concentrate.

01:30.520 --> 01:34.000
You have one?

01:34.000 --> 01:36.040
Keep it.

01:36.040 --> 01:43.480
We are staying honest with ourselves because count one point for every single error on my

01:43.480 --> 01:46.480
list that was in your project.

01:46.480 --> 01:48.480
Okay?

01:48.480 --> 01:52.480
You stay honest with yourself.

01:52.480 --> 01:54.480
The first one.

01:54.480 --> 01:56.480
Easy.

01:56.480 --> 01:59.480
Binary Synget.

01:59.480 --> 02:09.480
When we are thinking about this, we probably would say...

02:09.480 --> 02:16.480
I think your microphone is muted.

02:16.480 --> 02:18.480
No, it's not muted.

02:18.480 --> 02:20.480
It's green.

02:20.480 --> 02:21.480
Okay.

02:21.480 --> 02:30.280
When we get to binary Synget, what you think about at the beginning is some beginner developer

02:30.280 --> 02:35.400
that got the application, compiled it, and then everything to get.

02:35.400 --> 02:36.400
Right?

02:36.400 --> 02:40.200
But it's not the whole truth.

02:40.200 --> 02:45.600
I have seen binaries in Git for different reasons, too.

02:45.600 --> 02:50.920
One important example, firmware.

02:50.920 --> 02:59.200
For a big project, and I started talking to the team about why do we have that binary

02:59.200 --> 03:00.600
in Git.

03:00.600 --> 03:01.600
But it's hard to compile.

03:01.600 --> 03:04.080
You need that to change the distribution version.

03:04.080 --> 03:07.600
Then you have to patch this and that.

03:07.600 --> 03:08.840
So it was too complicated.

03:08.840 --> 03:11.600
They just put it in Git.

03:11.600 --> 03:15.160
And in the to-do list, we are going to compile it later.

03:15.160 --> 03:23.760
That later, it took some time to arrive.

03:23.760 --> 03:25.000
Right?

03:25.000 --> 03:33.640
My suggestion, if you are thinking about putting binaries in Git, first thing.

03:33.640 --> 03:43.320
And then what you can do is at the minimum, put a script that compiles that binary.

03:43.320 --> 03:49.080
At the maximum, in your CI, that of course you have one.

03:49.080 --> 03:56.920
In your CI, put a different job that is doing all the complicated work to compile that firmware

03:56.920 --> 04:01.520
binary whatever.

04:01.520 --> 04:12.000
This binary, if it can be compiled from source, would make sure that Alberto, who is here,

04:12.000 --> 04:19.320
for people who don't know Alberto, you should know him, Alberto won't be crying when he

04:19.320 --> 04:26.880
audits your repository for license compliance.

04:26.880 --> 04:33.800
And for me, as a security person, when I see binaries in Git, I tell myself, what do we

04:33.800 --> 04:34.800
have here?

04:34.800 --> 04:41.880
Probably five years versions of everything with all the CVs from the last five years.

04:41.880 --> 04:43.280
Great.

04:43.280 --> 04:49.320
Try to avoid binaries in Git except if you really know what you are doing.

04:49.320 --> 04:52.480
But really know what you are doing.

04:52.480 --> 04:57.560
Okay, forgotten dependencies number four.

04:57.560 --> 05:00.440
Do you know what you have in your project?

05:00.440 --> 05:01.440
Really?

05:01.440 --> 05:02.440
No?

05:02.440 --> 05:03.440
Yeah.

05:03.440 --> 05:04.440
Yeah.

05:04.440 --> 05:05.440
Yeah.

05:05.440 --> 05:12.320
Not knowing what you have in your project that quite often happens for embedded project

05:12.320 --> 05:23.560
that use one Git repo and they copy everything in this library's configuration files and

05:23.560 --> 05:30.840
then after 10 or 15 years, nobody knows what is in there.

05:30.840 --> 05:40.000
But it may also happen when you are using more advanced systems like Yocto because there

05:40.000 --> 05:46.200
are quite few people looking into the Yocto dependency list to figure out what they have

05:46.200 --> 05:48.040
in their build.

05:48.040 --> 05:56.120
And when they do, they look for the first time they start shouting and running away.

05:56.120 --> 05:58.240
I test for you.

05:58.240 --> 06:03.840
In your project, the same project that we are honestly counting points for, how many

06:03.840 --> 06:08.560
open SSL versions are there?

06:08.560 --> 06:13.280
Are you really sure there's zero?

06:13.280 --> 06:14.280
Okay.

06:14.280 --> 06:16.280
We are going to add it.

06:16.280 --> 06:17.280
That could be fun.

06:17.280 --> 06:18.280
One copy.

06:18.280 --> 06:24.080
Yeah, there are some people that may be this one.

06:24.080 --> 06:26.880
Okay, let's go forward.

06:26.880 --> 06:31.000
Less than three, more than three.

06:31.000 --> 06:33.000
Some people think that may be more than three.

06:33.000 --> 06:35.200
And I think most of the people are not really sure.

06:35.200 --> 06:37.760
Okay, how many people are not sure?

06:37.760 --> 06:41.320
Yeah.

06:41.320 --> 06:44.480
And it's not only open SSL.

06:44.480 --> 06:52.760
For a security researcher, open SSL thinks that you need to update frequently.

06:52.760 --> 06:56.600
But there are other libraries like that.

06:56.600 --> 07:04.440
If you do not know what you have as dependencies, have a look and think how you can improve

07:04.440 --> 07:07.440
yourself here.

07:07.440 --> 07:16.200
And for those who have managers who do not understand why looking for dependencies is

07:16.200 --> 07:20.880
important, use the word S-bomb.

07:20.880 --> 07:24.920
We are generating an S-bomb.

07:24.920 --> 07:31.560
For those who do not know what an S-bomb is yet, I assume that in 24 months you are going

07:31.560 --> 07:33.120
to learn that.

07:33.120 --> 07:37.280
The hard way.

07:37.280 --> 07:39.440
Number three.

07:39.440 --> 07:46.600
Number three is not considering vendor support for everything you use in your project from

07:46.600 --> 07:49.920
the beginning.

07:49.920 --> 07:58.520
A classical example is not very open source friendly support for a processor or not completely

07:58.520 --> 07:59.600
up to date.

07:59.600 --> 08:04.720
But this is going and getting better.

08:04.720 --> 08:12.400
What I would like to give you an example is an embedded product I was working with.

08:12.400 --> 08:18.240
They were using some quite specialized devices.

08:18.240 --> 08:19.240
Good quality.

08:19.240 --> 08:24.720
The product itself was very good quality.

08:24.720 --> 08:31.080
With one asterisk.

08:31.080 --> 08:36.080
The chip itself was done by a company of three.

08:36.080 --> 08:38.840
Including people doing drivers.

08:38.840 --> 08:42.040
So of course the driver wasn't upstreamed when I looked into it.

08:42.040 --> 08:46.920
It wasn't in the state to being upstreamed any time soon.

08:46.920 --> 08:52.720
With if-defs all around the place in the code.

08:52.720 --> 08:56.400
They were very welcome to accept patches.

08:56.400 --> 09:01.240
But you had to write all of them and test yourself.

09:01.240 --> 09:06.120
I recommend everyone starting an embedded product.

09:06.120 --> 09:11.160
When you have the first list of components that you want to use, have a look of them

09:11.160 --> 09:17.400
and figure out how much it's going to cost to put that chip.

09:17.400 --> 09:24.800
Maybe choosing a different chip, even if the chip is a little bit more expensive or harder

09:24.800 --> 09:34.640
to get, it's going to be less expensive at the end.

09:34.640 --> 09:35.640
Number two.

09:35.640 --> 09:42.480
Update added last minute.

09:42.480 --> 09:49.160
That is one of my favorites.

09:49.160 --> 09:55.920
It has a pretty important impact on the system quite usually.

09:55.920 --> 10:02.800
It means quite often that the flash size is too small.

10:02.800 --> 10:06.560
That the partitioning scheme has to be changed.

10:06.560 --> 10:11.600
That you need to change the whole boot process.

10:11.600 --> 10:17.480
And you need to retest all that from the beginning.

10:17.480 --> 10:28.200
With the legislation lurking behind the scenes, if you are starting working on an embedded

10:28.200 --> 10:40.280
project, and update system is not yet on the requirement list, it's good to have a look.

10:40.280 --> 10:47.040
Because for some of you, what's going to happen just before the release, the management comes

10:47.040 --> 10:51.480
and we have a checklist here for you before we release.

10:51.480 --> 10:58.040
And on the checklist, update as bomb.

10:58.040 --> 11:10.240
If you are not prepared, it may be a good idea to get vacation before that.

11:10.240 --> 11:14.920
And now, my favorite.

11:14.920 --> 11:21.760
Working on a bad system on the life system.

11:21.760 --> 11:31.480
My real example of that were people working on a system with a very expensive FPGA.

11:31.480 --> 11:33.520
And very expensive peripherals.

11:33.520 --> 11:38.000
So they basically had one piece.

11:38.000 --> 11:45.000
The team was small, so they were working all on the same system.

11:45.000 --> 11:48.840
In addition, it was based on Ubuntu.

11:48.840 --> 11:55.480
So what they did, they were installing packages, creating sim links because something didn't

11:55.480 --> 12:02.040
want to compile, changing configuration files, and of course there was no single place when

12:02.040 --> 12:04.360
they documented it all.

12:04.360 --> 12:10.280
Imagine what happened when they started building the second prototype.

12:10.280 --> 12:15.440
That was a little bit complex.

12:15.440 --> 12:19.700
Why not developing on the life system when you are prototyping, you do not know how it's

12:19.700 --> 12:28.280
going to work during later on if you are not going to change the approach you are going

12:28.280 --> 12:29.280
to take.

12:29.280 --> 12:30.280
Why not?

12:30.280 --> 12:35.000
In this case, DevOps.

12:35.000 --> 12:39.400
It's not a catchy word to get more views of the video.

12:39.400 --> 12:41.640
It's really something that you can use.

12:41.640 --> 12:48.640
Use the DevOps tools as answerable, for example, in this case, so that you have a script that

12:48.640 --> 12:52.880
exactly deploys the system as it needs to be.

12:52.880 --> 12:54.520
And the right moment.

12:54.520 --> 13:03.160
And keep the script in a version control system so then you can work on it and update during

13:03.160 --> 13:07.760
the system life.

13:07.760 --> 13:13.320
We are getting to the end of my favorite list.

13:13.320 --> 13:16.560
And now I would like to make a check.

13:16.560 --> 13:21.720
How many of you have projects with five points?

13:21.720 --> 13:23.000
All five points.

13:23.000 --> 13:25.000
We have some.

13:25.000 --> 13:27.000
Okay.

13:27.000 --> 13:32.640
Congratulations for your honesty.

13:32.640 --> 13:34.960
Congratulations for your honesty.

13:34.960 --> 13:37.960
To yourself.

13:37.960 --> 13:47.360
That's the decision of our managers.

13:47.360 --> 13:54.800
I could do a little bit of explanation how to explain to managers, but I think that would

13:54.800 --> 14:00.720
be another talk of how to explain that to managers.

14:00.720 --> 14:13.440
What I would recommend you today, in a new project you are working on, take the list,

14:13.440 --> 14:23.640
use one of the subjects, one of the problems that happens in this project, and remove that

14:23.640 --> 14:30.200
single one for now.

14:30.200 --> 14:40.120
For quite many of them, talking about legislations, IP compliance, S-bombs, stuff like that, works

14:40.120 --> 14:44.160
with the management.

14:44.160 --> 14:51.240
If you are a short talk to Albert again.

14:51.240 --> 14:55.480
For some other cases, it may be a little bit more complicated.

14:55.480 --> 15:07.320
But in my experience, talking about legal, talking about cost, maintenance has cost.

15:07.320 --> 15:16.400
If you choose something that is hard to maintain, it's going to cost expenses, but for company

15:16.400 --> 15:20.680
finances and related expressions.

15:20.680 --> 15:29.640
That helps.

15:29.640 --> 15:36.240
I hope that was helpful for you, that you have learned something, you learned some techniques,

15:36.240 --> 15:43.240
and now I have planned some time to get a little bit of feedback from the audience.

15:43.240 --> 15:49.960
We have a question here.

15:49.960 --> 16:00.480
On the other side.

16:00.480 --> 16:07.640
In the front row.

16:07.640 --> 16:08.640
Thank you.

16:08.640 --> 16:11.840
Thanks for the talk.

16:11.840 --> 16:18.320
Your first point was binaries and GITs.

16:18.320 --> 16:29.440
When we are developing an embedded system and compiling firmware, what's a good solution

16:29.440 --> 16:37.120
when we are not making releases but in between, if we need to have access to the binary file

16:37.120 --> 16:48.320
and make sure that it's the last version, what's the solution about putting just the

16:48.320 --> 16:51.120
binary in GIT?

16:51.120 --> 16:56.440
If I understand the question correctly, your question was, when you have a firmware in

16:56.440 --> 17:03.680
your product, you want to know that you always have the latest version?

17:03.680 --> 17:04.680
Yes.

17:04.680 --> 17:10.400
That's not a release.

17:10.400 --> 17:14.480
I don't think it's doable with CICT.

17:14.480 --> 17:19.480
I can see two cases in such a situation.

17:19.480 --> 17:23.080
Either you are compiling the firmware yourself.

17:23.080 --> 17:24.080
Yes.

17:24.080 --> 17:26.840
Or you are getting from the vendor.

17:26.840 --> 17:30.600
If you are getting from the vendor because there's some feature they have added that's

17:30.600 --> 17:32.600
a little bit more complex.

17:32.600 --> 17:36.480
In this case, you don't really have an option.

17:36.480 --> 17:38.320
If you are computing yourself.

17:38.320 --> 17:43.960
And it's hard to compile.

17:43.960 --> 17:51.240
I prefer to have a separate build stage for the firmware itself.

17:51.240 --> 17:54.960
You may have different branches for the firmware.

17:54.960 --> 17:59.000
You are using every single dependency from a different report.

17:59.000 --> 18:07.360
A different build system when you are using multi-stage CI.

18:07.360 --> 18:08.360
We can chat.

18:08.360 --> 18:09.360
Okay.

18:09.360 --> 18:10.360
Maybe I'm not as advanced as this.

18:10.360 --> 18:14.320
Maybe you can chat about the details of setting it up later.

18:14.320 --> 18:15.320
Thanks.

18:15.320 --> 18:16.320
Yeah.

18:16.320 --> 18:17.320
Okay.

18:17.320 --> 18:18.320
Any other questions?

18:18.320 --> 18:25.320
We have someone in the middle.

18:25.320 --> 18:29.320
In the front.

18:29.320 --> 18:31.320
Yes.

18:31.320 --> 18:35.960
Thank you very much for the presentation.

18:35.960 --> 18:44.040
I wanted to ask if you have a product which is really long running, like several years,

18:44.040 --> 18:49.760
and then regarding this vendor support for hardware components.

18:49.760 --> 18:54.800
Sometimes on our project, it is like some of these components are running into end of

18:54.800 --> 18:57.560
life.

18:57.560 --> 19:02.680
Is there a strategy or something like that where you can anticipate this kind of scenario

19:02.680 --> 19:09.680
where your product really has a long life cycle and then you have to really think about

19:09.680 --> 19:14.760
what is some of our hardware components having end of life or something like that?

19:14.760 --> 19:15.760
Okay.

19:15.760 --> 19:18.880
Unfortunately, the micro level wasn't great.

19:18.880 --> 19:21.080
I'm not sure I cached everything.

19:21.080 --> 19:30.920
If I do a summary of what you have said, you have an example of a project using components

19:30.920 --> 19:34.840
that may be reaching end of life.

19:34.840 --> 19:43.360
And you want to support, in general, you want to support it for a very long time.

19:43.360 --> 19:51.320
So what to do in this case?

19:51.320 --> 19:54.920
It depends if it's about drivers, about other components.

19:54.920 --> 20:01.960
If you are about drivers, drivers in Linux get removed really, really, really late.

20:01.960 --> 20:05.880
So normally the driver should still be there in the latest system.

20:05.880 --> 20:14.080
There may be some changes that are not exactly compatible with what you are using.

20:14.080 --> 20:15.080
That's true.

20:15.080 --> 20:21.880
You may have vendor BSP that they stopped upgrading, and when that happens, that's a

20:21.880 --> 20:22.880
big problem.

20:22.880 --> 20:31.400
One solution is stuck with the vendor, but if they do not want to understand what you

20:31.400 --> 20:48.360
need, I would probably try to create some abstraction layers and keep some parts on

20:48.360 --> 20:57.080
the older versions and migrate the newer parts, things that you can maintain actually.

20:57.080 --> 21:04.000
Then in this case, it will depend exactly on the case, on the situation, which component

21:04.000 --> 21:05.000
it is.

21:05.000 --> 21:06.000
It will depend.

21:06.000 --> 21:07.000
Yeah.

21:07.000 --> 21:08.000
Complicated.

21:08.000 --> 21:09.000
Okay.

21:09.000 --> 21:10.000
I've got a second.

21:10.000 --> 21:20.000
Could you put your hands up again just so I can see who is there.

21:20.000 --> 21:29.640
Thank you for your talk.

21:29.640 --> 21:34.200
What if you had to convince your colleagues to follow these practices?

21:34.200 --> 21:39.280
You put them in place, but management doesn't really care much about them and doesn't enforce

21:39.280 --> 21:40.280
them.

21:40.280 --> 21:41.280
Okay.

21:41.280 --> 21:48.320
The question was how to convince the colleagues, even if the management is quite okay with

21:48.320 --> 21:53.000
those practice.

21:53.000 --> 21:58.520
What I use is a set of horror stories from my past.

21:58.520 --> 22:06.480
When people did like that, six months later, what happened?

22:06.480 --> 22:08.760
Developers like developing new stuff.

22:08.760 --> 22:17.000
They do not like fixing old bugs, looking into history, so using the argument of if

22:17.000 --> 22:22.800
we do it messy this time, then we'll have to maintain it and it is you who is going

22:22.800 --> 22:25.240
to maintain that stuff.

22:25.240 --> 22:27.240
They have to get burned at least one time.

22:27.240 --> 22:29.240
That can help.

22:29.240 --> 22:30.240
Thank you.

22:30.240 --> 22:31.240
Okay.

22:31.240 --> 22:34.240
I think we'll be done now.

22:34.240 --> 22:36.240
One more minute.

22:36.240 --> 22:37.240
Yeah.

22:37.240 --> 22:38.240
Anyone else?

22:38.240 --> 22:43.320
Next to you, Chris.

22:43.320 --> 22:46.000
Just one comment on one of the earlier questions.

22:46.000 --> 22:51.680
I think a good approach would be to look at the vendor, how they support Linux.

22:51.680 --> 23:00.200
Some vendors provide, I looked at one processor, it had 500 patches to a five-year-old kernel,

23:00.200 --> 23:03.600
and another vendor, they push everything to mainstream.

23:03.600 --> 23:07.440
You might want to think who you want to choose.

23:07.440 --> 23:08.800
Absolutely agree with that.

23:08.800 --> 23:15.720
When I'm looking into the chip to use, I'm looking at the vendor's mainstream support,

23:15.720 --> 23:19.640
and that's one of the criteria to start with, basically.

23:19.640 --> 23:21.040
I think it's a great point.

23:21.040 --> 23:24.840
I think we should all boycott vendors who don't have upstream drivers.

23:24.840 --> 23:26.360
Yeah, that's a separate...

23:26.360 --> 23:27.360
Just say no.

23:27.360 --> 23:28.360
Okay.

23:28.360 --> 23:29.360
Thank you all.

23:29.360 --> 23:30.360
Thank you.

23:30.360 --> 23:31.360
Thank you very much.

23:31.360 --> 23:32.360
Thank you.

23:32.360 --> 23:33.360
Thank you very much.

23:33.360 --> 23:34.360
Thank you.

23:34.360 --> 23:35.360
Thank you.

23:35.360 --> 23:36.360
Thank you.

23:36.360 --> 23:37.360
Thank you.

23:37.360 --> 23:38.360
Thank you.

23:38.360 --> 23:39.360
Thank you.

23:39.360 --> 23:40.360
Thank you.

23:40.360 --> 23:41.360
Thank you.

23:41.360 --> 23:42.360
Thank you.

23:42.360 --> 23:43.360
Thank you.

23:43.360 --> 23:44.360
Thank you.

23:44.360 --> 23:45.360
Thank you.

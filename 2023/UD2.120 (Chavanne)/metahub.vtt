WEBVTT

00:00.000 --> 00:01.000
Cool.

00:01.000 --> 00:06.880
First lightning talk is Christian.

00:06.880 --> 00:09.280
Yeah, thanks, Ganes.

00:09.280 --> 00:11.280
Connor said that he has a relaxed talk.

00:11.280 --> 00:14.320
I have only 10 minutes, so I need to speed up.

00:14.320 --> 00:18.920
What I would like to talk today is about the HPC container conformance, which is a project

00:18.920 --> 00:24.560
that came out of the HPC container advisory council, which is every first Thursday.

00:24.560 --> 00:29.240
And we try to provide guidance on how to build and annotate HPC containers.

00:29.240 --> 00:32.720
So conformance, what you might ask, so what are we trying to achieve?

00:32.720 --> 00:37.620
We focus on two applications, maybe a third, but mainly Gromex and PyTorch.

00:37.620 --> 00:45.600
And we want to go through an exercise of providing best practices on how to build or shape the

00:45.600 --> 00:48.040
container and also how to annotate the container.

00:48.040 --> 00:51.720
And I think that's the most important part, is the annotation part, by the way.

00:51.720 --> 00:56.740
Anyhow, what we don't want to achieve is we don't want to boil the ocean by making everything

00:56.740 --> 00:57.780
work everywhere.

00:57.780 --> 01:00.400
So that's why we focus on these two applications.

01:00.400 --> 01:04.960
And we want also to allow for generic and also highly optimized images and make with

01:04.960 --> 01:12.040
annotations, make sure that people can actually discover those and also provide some expectation

01:12.040 --> 01:13.520
management for those.

01:13.520 --> 01:18.640
We're going to focus on OCI images and most likely on Docker files.

01:18.640 --> 01:22.880
If people throw a lot of singularity build recipes at me, then maybe I will change my

01:22.880 --> 01:23.880
mind.

01:23.880 --> 01:28.480
But first, for starters, we're going with Docker files and OCI images.

01:28.480 --> 01:33.920
And if we have a Docker file that is derived from other artifacts, like a spec YAML file

01:33.920 --> 01:39.160
or an easy build recipe or an HPCM recipe, then of course we also want to include those

01:39.160 --> 01:44.460
to make it easy for people to reproduce and tweak the actual container.

01:44.460 --> 01:50.500
When going through this research or this project, I was like, I'm in touch with the bio container

01:50.500 --> 01:55.600
community and they created a paper in 2019 which is pretty interesting where they provide

01:55.600 --> 02:00.080
some recommendation on how to package and containerize bioinformatics software.

02:00.080 --> 02:06.080
Of course, they don't compile for different targets and they don't use MPI a lot.

02:06.080 --> 02:09.560
It's just a baseline, I think, for our work in HPC, but it's a good baseline.

02:09.560 --> 02:14.720
And I highly recommend this paper to be read by people.

02:14.720 --> 02:20.360
So the first thing in the HPC container conformance project is the expected image behavior.

02:20.360 --> 02:23.720
So I think we have all been there where we have different images we wanted to swap out

02:23.720 --> 02:28.340
and then we realize, oh, the entry point is different or the container does not use an

02:28.340 --> 02:30.160
entry point but the application name.

02:30.160 --> 02:35.360
And so we want to make sure that at the end of the day, all the containers that we produce

02:35.360 --> 02:39.720
in the HPC world are built in a way that they behave the same way.

02:39.720 --> 02:41.800
So that you can just swap out the container.

02:41.800 --> 02:43.360
You want to run GROMACS.

02:43.360 --> 02:47.600
You try out multiple different containers and you don't need to change your submit script,

02:47.600 --> 02:48.600
but only the name.

02:48.600 --> 02:52.600
At the end of the day, the container should drop you into a shell like you are logging

02:52.600 --> 02:54.880
into an SSH node.

02:54.880 --> 03:01.520
And it should also have a very small, ideally small or even no entry point so that it's

03:01.520 --> 03:02.880
easy to debug as well.

03:02.880 --> 03:08.600
So if the entry point takes forever or makes a lot of changes, then it's hard to debug

03:08.600 --> 03:09.600
the container.

03:09.600 --> 03:17.680
So the container should be, has a very small or even no entry point and maybe it changes

03:17.680 --> 03:21.520
some environment variables to pick up the application that is installed maybe by EasyBuild

03:21.520 --> 03:24.800
or Spec, but it should be very small.

03:24.800 --> 03:29.200
The main part is annotations for this project.

03:29.200 --> 03:33.720
And my annotations, so the basic ideas, and we have all been there, so everyone who's

03:33.720 --> 03:40.720
done HPC containers, that we encode the information about the specific implementation of the image

03:40.720 --> 03:42.280
in the tag or in the name.

03:42.280 --> 03:44.080
And we don't want to do this anymore, right?

03:44.080 --> 03:48.920
So we want the information to be annotated to the image and not part of the name because

03:48.920 --> 03:50.720
the name might change.

03:50.720 --> 03:53.540
So what do we want to do with these annotations?

03:53.540 --> 03:56.120
We want two things.

03:56.120 --> 04:00.880
First, kind of describe the image, the content of the image and how the image is expected

04:00.880 --> 04:05.360
to be used so that sysadmins and end users know what to expect.

04:05.360 --> 04:08.560
So what user land is provided by the image?

04:08.560 --> 04:12.300
What tools are installed on the image?

04:12.300 --> 04:15.080
How is the main application compiled?

04:15.080 --> 04:16.400
Like for what target?

04:16.400 --> 04:18.520
For what microarchitecture of the CPU?

04:18.520 --> 04:19.720
For which GPU?

04:19.720 --> 04:21.580
Which MPI is used and so on?

04:21.580 --> 04:28.480
So that we can take this information and make like maybe configuration examples for different

04:28.480 --> 04:32.760
container runtimes that hooks can react to those annotations.

04:32.760 --> 04:36.480
Like Potman and Seros, for instance, they can already react to annotations.

04:36.480 --> 04:41.360
So depending on what the image provides as information, the runtime can adapt and say,

04:41.360 --> 04:46.120
I have an open MPI container, I do this hook, I have an AMP-based container, I take this

04:46.120 --> 04:47.120
hook.

04:47.120 --> 04:53.320
So I think that would be great if we can agree on certain annotations and agreeing on certain

04:53.320 --> 04:54.320
annotations.

04:54.320 --> 04:57.480
I think it's a huge task, but I'm hopeful that we can achieve this.

04:57.480 --> 05:03.680
And then make sure that the configuration is done so that the application is tweaked

05:03.680 --> 05:04.960
the right way.

05:04.960 --> 05:09.960
And another piece that we can achieve here is that we create maybe a smoke test that

05:09.960 --> 05:14.840
looks at the host that is running on, looks at the annotations of the container that you

05:14.840 --> 05:18.760
want to run, and just tells you, okay, this thing will segfold anyway.

05:18.760 --> 05:23.760
You are on a SIN2 and you have an application that's compiled for Skylake, it won't work.

05:23.760 --> 05:29.920
So that you don't download 30 gigabytes of images of layers just to realize that your

05:29.920 --> 05:30.920
image won't work.

05:30.920 --> 05:34.200
So I think that's also a very important part that we can do this.

05:34.200 --> 05:40.040
Another part as well is not just describe the image, but make it easy for end users

05:40.040 --> 05:41.760
to discover what images are around.

05:41.760 --> 05:46.660
So you want to run Gromex and you know or don't know the system you're on.

05:46.660 --> 05:52.040
So maybe you can just run a tool or have a website that tells you you want to run Gromex.

05:52.040 --> 05:55.880
I have looked through all the annotations, I know a little bit about your system, here

05:55.880 --> 05:57.600
we go, this is the image that you want to use.

05:57.600 --> 06:00.960
So also for discovery, I think that's important.

06:00.960 --> 06:05.040
Of course we will have mandatory and optional annotations.

06:05.040 --> 06:09.660
So mandatory ones might be what CPU architecture is it compiled for, I think that's the obvious

06:09.660 --> 06:10.660
one.

06:10.660 --> 06:16.160
And optional ones of course if you want to add a CUDA version because your image has

06:16.160 --> 06:18.900
a CUDA installed, then of course that's an optional one.

06:18.900 --> 06:24.860
Or you want to annotate the whole software bill of material, maybe it's too much information

06:24.860 --> 06:25.960
but maybe not.

06:25.960 --> 06:30.080
So there are optional and mandatory annotations, I think that's pretty clear.

06:30.080 --> 06:37.000
Okay, and I created a couple of groups, like annotation groups that I think we should think

06:37.000 --> 06:38.000
about.

06:38.000 --> 06:43.360
I won't go through every single line item here because I only have 10 minutes and it's

06:43.360 --> 06:44.940
three minutes left.

06:44.940 --> 06:49.760
So just maybe grab the slides afterwards and then go through it and it's not written in

06:49.760 --> 06:55.480
stone, it's just a proposal so happy to have feedback on this as well.

06:55.480 --> 06:58.800
So the first big one and I talked about it already is of course hardware annotations

06:58.800 --> 07:06.240
so what is the target optimized for, the architecture, generic architecture or the real microarchitecture

07:06.240 --> 07:10.520
and then a key version, a value for this.

07:10.520 --> 07:15.440
As I said, CUDA versions, driver versions and so on, I think that's obvious that we

07:15.440 --> 07:20.800
need to annotate the container so that it defines what the actual execution environment

07:20.800 --> 07:22.920
should look like.

07:22.920 --> 07:30.000
Also obvious HPC things like the MPI and interconnect annotations so that you define what the implementation

07:30.000 --> 07:34.440
of the container is, is it open MPI, is it ampeach based, is it even threat MPI because

07:34.440 --> 07:37.120
you only want to run single node.

07:37.120 --> 07:41.120
What framework is used, lip fabrics, UCX, what have you and now I'm going through all

07:41.120 --> 07:43.060
the line items so maybe I should stop.

07:43.060 --> 07:46.000
But at the end I think the last line is also important.

07:46.000 --> 07:49.360
What is the container, two minutes left even.

07:49.360 --> 07:54.880
What is the container actually, how is it expecting to be tweaked so is the MPI being

07:54.880 --> 07:57.800
replaced, lip fabric injected and so on.

07:57.800 --> 08:02.120
That's also I think important so that the sysadmin or the runtime knows what to do with

08:02.120 --> 08:05.920
the container to make it work on line speed.

08:05.920 --> 08:10.200
System annotations I think is also important so that we know what the container expects

08:10.200 --> 08:16.480
from the kernel, what the modules are introduced and so on and also what the end user can expect

08:16.480 --> 08:21.200
what tools are installed, is JQ installed, is WGet installed and so on.

08:21.200 --> 08:26.520
Another annotation is of course documentation would be nice as well, base64 encoded markdown

08:26.520 --> 08:32.160
would be great so that you can render how to's and build tweaks and so on directly.

08:32.160 --> 08:35.000
Okay, one minute.

08:35.000 --> 08:38.520
How to annotate, I think that's obvious as well, that's a layered approach.

08:38.520 --> 08:43.560
Of course the base image should have annotations that we can carry over and if you build subsequent

08:43.560 --> 08:50.680
images at the annotations that are important and after the image is already built you can

08:50.680 --> 08:56.320
use things like crane or builder or podman I think or builder to annotate images at the

08:56.320 --> 09:02.040
end without even rebuilding them, just repurposing them or we could also collect annotations

09:02.040 --> 09:06.080
offline in another format and then annotate it.

09:06.080 --> 09:12.520
Okay, ideally and that's like Kenneth and of course Todd as well, easybuild, spec, they

09:12.520 --> 09:17.520
should annotate it correctly so that we don't need to teach everyone to annotate but the

09:17.520 --> 09:20.640
tools just annotate the image for us.

09:20.640 --> 09:27.760
And that's the external piece, so I created a tool, MetaHup, where we define images for

09:27.760 --> 09:32.680
different use cases and we can also annotate those images without actually changing the

09:32.680 --> 09:33.920
image but just with this.

09:33.920 --> 09:37.440
So okay, ten seconds, last one.

09:37.440 --> 09:44.920
We need of course a fingerprint of the system to match the annotations against the host

09:44.920 --> 09:50.720
itself, so there needs to be a tool, time is up and yeah, so we need to discover the

09:50.720 --> 09:58.000
right image, need to have a smoke test and help tweak the container.

09:58.000 --> 10:06.160
That's like the last bit.

10:06.160 --> 10:10.360
Thank you for the excellent example and how to do a lightning talk on time.

10:10.360 --> 10:13.520
We'll take one question.

10:13.520 --> 10:15.680
Any questions for Christian?

10:15.680 --> 10:22.680
Do you need a clicker?

10:22.680 --> 10:23.680
Thank you for your presentation.

10:23.680 --> 10:31.400
I would like to ask how does this relate to existing software supply chain metadata databases

10:31.400 --> 10:32.400
like Graph.js?

10:32.400 --> 10:34.400
Does this complement their functionality?

10:34.400 --> 10:37.240
Is this something different?

10:37.240 --> 10:41.080
We are good at HPC to build our own thing and then just say that everyone should adopt

10:41.080 --> 10:42.080
it.

10:42.080 --> 10:43.440
I think we want to complement it, right?

10:43.440 --> 10:48.400
We want to use these two applications and go through the exercise and then maybe learn

10:48.400 --> 10:53.880
from what we did with this project and try to push this ideas also in other things.

10:53.880 --> 10:59.600
But I think the AIML folks, they maybe didn't realize that they won't have this problem,

10:59.600 --> 11:04.440
so we try also to not only think about HPC here but also think about other communities

11:04.440 --> 11:05.680
as well.

11:05.680 --> 11:11.000
I'm open to everyone and the project is as well.

11:11.000 --> 11:12.000
Thank you very much.

11:12.000 --> 11:15.840
Christian, if you want to chat with Christian, he'll be around probably outside the door

11:15.840 --> 11:18.000
for the rest of the day or in the room.

11:18.000 --> 11:32.440
And we'll switch it over to the next.

1
0:00:00.000 --> 0:00:26.000
Okay, let's start off then.

2
0:00:26.000 --> 0:00:31.000
Okay.

3
0:00:31.000 --> 0:01:00.000
So,

4
0:01:00.000 --> 0:01:29.000
Okay.

5
0:01:29.000 --> 0:01:58.000
Okay.

6
0:01:58.000 --> 0:02:27.000
Okay.

7
0:02:27.000 --> 0:02:53.000
Okay.

8
0:02:53.000 --> 0:02:57.000
Now it's working.

9
0:02:57.000 --> 0:02:59.000
Okay.

10
0:02:59.000 --> 0:03:04.000
So, we're going to talk first about what is WAM.

11
0:03:04.000 --> 0:03:07.000
WAM stands for Web Application Manager.

12
0:03:07.000 --> 0:03:11.000
It's the LG WebOS web runtime.

13
0:03:11.000 --> 0:03:15.000
It's built on top of Chromium nowadays.

14
0:03:15.000 --> 0:03:21.000
WebOS, it's the operating system for embedded products.

15
0:03:21.000 --> 0:03:22.000
It's web-centric.

16
0:03:22.000 --> 0:03:33.000
So, the idea is that web applications are first-class citizens to the same level of native applications or even more prominent in WebOS.

17
0:03:33.000 --> 0:03:36.000
The components is built on top of Jockto.

18
0:03:36.000 --> 0:03:44.000
It uses Wayland for graphics with QML for the Wayland compositing and Malit for vtokibos.

19
0:03:44.000 --> 0:03:47.000
It has a unified media server.

20
0:03:47.000 --> 0:03:56.000
And for IPC, between applications, it has a JSON protocol that is named Luna.

21
0:03:56.000 --> 0:04:05.000
So, yeah, WAM is the centerpiece of the web experience in WebOS.

22
0:04:05.000 --> 0:04:17.000
So, places where it was used, HP touch path a long time ago, some platforms, when WebOS was part of the palm offering.

23
0:04:17.000 --> 0:04:23.000
Nowadays, it's the key part of the WebOS, the LG Smart TVs.

24
0:04:23.000 --> 0:04:28.000
From 2013, that's the main WebOS to use for those TVs.

25
0:04:28.000 --> 0:04:35.000
So, we have hundreds of millions of users using this.

26
0:04:35.000 --> 0:04:43.000
Other products we have implemented in the WebOS and RoS integration.

27
0:04:43.000 --> 0:04:55.000
So, we have some robot experiments, digital signage, some appliances like this fridge, and web hours like this clock.

28
0:04:55.000 --> 0:05:01.000
It is used from 2018 in the WebOS open source edition.

29
0:05:01.000 --> 0:05:10.000
So, basically, it's a party distribution with open source basing all these components.

30
0:05:10.000 --> 0:05:15.000
It is used nowadays also on the ADL, on the automated Linux.

31
0:05:15.000 --> 0:05:19.000
It's the web runtime for ADL.

32
0:05:19.000 --> 0:05:28.000
So, there was support of the LG WebOS web runtime to the ADL that is not WebOS.

33
0:05:28.000 --> 0:05:30.000
How it works.

34
0:05:30.000 --> 0:05:33.000
So, this is the architecture.

35
0:05:33.000 --> 0:05:39.000
The reddish areas have what is implemented by Chrome.

36
0:05:39.000 --> 0:05:46.000
Orange part is the, nowadays it's also part of Chrome, but it's the integration with Wayland.

37
0:05:46.000 --> 0:05:53.000
There's the blue parts that are provided by WebOS that are the Wayland Compostor and the IPC.

38
0:05:53.000 --> 0:05:55.000
And one is the green part.

39
0:05:55.000 --> 0:06:09.000
So, it's built on top of Chromium that handles the running web applications in the system in an efficient way.

40
0:06:09.000 --> 0:06:19.000
So, the thing, why we want to put one in, is basically the ADL is having high support for the web platform nowadays.

41
0:06:19.000 --> 0:06:28.000
Web platform moves fast, so if you want to get up to date to the latest standards, you need something that provides the web standards

42
0:06:28.000 --> 0:06:37.000
and moves as the Chrome baseline moves, get the latest web standards.

43
0:06:37.000 --> 0:06:38.380
It controls the application like

44
0:06:38.380 --> 0:06:47.000
ICON, so basically when you run a web application, one takes care of running it, of closing it, of reducing the saving memory resources,

45
0:06:47.000 --> 0:07:00.000
CPU resources, GPU resources, so they are properly distributed on the system, saving CPU and battery when applications are not visible to the user.

46
0:07:00.000 --> 0:07:15.000
So, yeah, that's one of the great advantages is this single-world runtime gives some performance improvements because we are sharing as much possible resources for running web content.

47
0:07:15.000 --> 0:07:24.000
Thus, the last one, launch time optimization, it's also quite critical because running a web stack is quite heavy thing nowadays.

48
0:07:24.000 --> 0:07:39.000
So, being able to have things pre-launched, pre-worked, is quite important for having a seamless web experience where application launching is very fast and applications switching is also fast.

49
0:07:39.000 --> 0:08:01.000
Our security, well, it has all the web standards about how to run remote content and also local content through security origins. Security origins basically is the sum of a scheme, the port, and the host part of the URL.

50
0:08:01.000 --> 0:08:13.000
We have some permissions declaring an application manifest so we can determine which parts of the system web application can use.

51
0:08:13.000 --> 0:08:28.000
And about developer tools, we have basically the same we will have on a Chrome browser, so we have the web inspector on developer tools, and we have the chromium tracer for having performance analysis in the system.

52
0:08:28.000 --> 0:08:46.000
I think that one of the important things is that it's been running for a long time in millions of LG TVs on all the devices, so 10 years of experience, it's proven, it's running, it's stable, and it's used for a long time.

53
0:08:46.000 --> 0:08:51.000
And now it's also adopted in the AGL reference platform too.

54
0:08:51.000 --> 0:09:07.000
So we have here some links for open source, the open source flavor of WebOS, and all the components are the same we have in smart TVs, we have one WebOS service.

55
0:09:07.000 --> 0:09:17.000
So basically you use WebOS service, you can try all these components in your own devices.

56
0:09:17.000 --> 0:09:21.000
Okay, so let's move to the retrospective part.

57
0:09:21.000 --> 0:09:26.000
As I said, it's been 10 years.

58
0:09:26.000 --> 0:09:34.000
The main caveat here is that I joined the WebOS project in October 2012.

59
0:09:34.000 --> 0:09:45.000
The history of one WebOS start before 2008, but I will mostly focus on what I lived and not what happened before.

60
0:09:45.000 --> 0:09:48.000
Anyway, it's just lesson learned.

61
0:09:48.000 --> 0:09:54.000
I hope some of them may be useful or insightful for you.

62
0:09:54.000 --> 0:09:59.000
Okay, so a bit of history.

63
0:09:59.000 --> 0:10:13.000
WebOS was developed by Palm that was acquired by HP in 2010, and then on 2011, HP decides that they don't want to develop any other WebOS product anymore.

64
0:10:13.000 --> 0:10:20.000
So the last device is a tablet that is HP.com.

65
0:10:20.000 --> 0:10:31.000
But in 2012, there's a start of a partnership between HP and LG for pouring WebOS for the LG Smart TV boards.

66
0:10:31.000 --> 0:10:39.000
The idea was that WebOS could be the basis for the future Smart TV offered by LG.

67
0:10:39.000 --> 0:10:52.000
They had something that was named Netcast before, and it was hard to maintain, and it was hard to keep moving with what was required for the future Smart TV OS,

68
0:10:52.000 --> 0:11:02.000
whether you have model one Web application running at the same time, that switch, that WebOS were already providing at that time.

69
0:11:02.000 --> 0:11:11.000
So in 2013, basically what happened was that LG acquired the business unit that was Palm before.

70
0:11:11.000 --> 0:11:17.000
So basically the business unit that owns WebOS.

71
0:11:17.000 --> 0:11:24.000
That business unit was renamed to the LG Silicon Valley Labs at that time.

72
0:11:24.000 --> 0:11:35.000
I'm from 2014. LG WebOS-based TV is introduced in computer entertainment show in Las Vegas, and then the TV were released a few months later.

73
0:11:35.000 --> 0:11:43.000
I think it's April 2014, the first LG Smart TV based on WebOS.

74
0:11:43.000 --> 0:11:48.000
Okay, more about open source.

75
0:11:48.000 --> 0:12:06.000
As I said, HP Palm decided to scrap all the WebOS new products, so they stopped doing new products, and they published most of the source calls open WebOS.

76
0:12:06.000 --> 0:12:22.000
With the idea, I think, well, the feeling at the right time, at that time, that nowadays is the same, and they opened it to attract interesting WebOS, to attract investors.

77
0:12:22.000 --> 0:12:39.000
Basically, they were already considering selling the business unit. But when LG acquired the Palm business unit, they stopped maintaining open WebOS.

78
0:12:39.000 --> 0:12:54.000
So they came back to the no open source developing model. That was kind of a strong problem, but it was very, very hard.

79
0:12:54.000 --> 0:13:00.000
They worked to put WebOS for mass TVs and released into products.

80
0:13:00.000 --> 0:13:08.000
That is something that sometimes it's not very clear, but when you have something like an open source product, some upstreaming, some public products,

81
0:13:08.000 --> 0:13:14.000
but then you want to get to release quality for a product for millions of users, it's not easy.

82
0:13:14.000 --> 0:13:27.000
That's how to work, to stabilize, to mature things, to even pass controls by authorities about quality. It's not very easy.

83
0:13:27.000 --> 0:13:39.000
So we all decided to focus on first having the smart TVs run WebOS, and then open sourcing again would be an afterthought after that.

84
0:13:39.000 --> 0:13:50.000
Usually, that doesn't happen in the end. This kind of afterthought never happened, but in this case, it happens.

85
0:13:50.000 --> 0:14:01.000
So in 2018, like six years after open WebOS was stopped, basically, this is WebOS open source edition.

86
0:14:01.000 --> 0:14:11.000
The focus was in this case allowing people to take this, to prototype ideas, do experiments, make things around WebOS,

87
0:14:11.000 --> 0:14:20.000
because basically you would have UI, just to experience a way to integrate this in Web components.

88
0:14:20.000 --> 0:14:27.000
The idea is students, independent developers, would have a way to prototype and do things with that.

89
0:14:27.000 --> 0:14:32.000
So again, the idea is creating a community around it.

90
0:14:32.000 --> 0:14:40.000
So OSC is acting nowadays. After five years, it's still there, so it's not something that is going away.

91
0:14:40.000 --> 0:14:47.000
The Hermitage, that's very high, and nowadays it's a high four model.

92
0:14:47.000 --> 0:14:52.000
My view, it simplifies testing new ideas.

93
0:14:52.000 --> 0:15:03.000
It allows to start things like integrating one WebOS part in ROSH for robotics and in EDL for automotive.

94
0:15:03.000 --> 0:15:21.000
So it was quite a success in that regard, but there are tons of experiments that have been happening that are quite useful for prototyping product ideas.

95
0:15:21.000 --> 0:15:30.000
So if you want to integrate WebUI in your experimental product, OSC can help.

96
0:15:30.000 --> 0:15:39.000
It's very easy to integrate Web applications, Web contents, both are even running locally.

97
0:15:39.000 --> 0:15:48.000
Okay, so how it happens, we have WebOS, we have open source edition.

98
0:15:48.000 --> 0:15:57.000
There was an idea at the SBL that it would be interesting to part of Chromium,

99
0:15:57.000 --> 0:16:10.000
the work runtime we have in WebOS to put it to EDL, so it would have a runtime with all the advantages we talked about.

100
0:16:10.000 --> 0:16:19.000
So it has been a collaboration between EDL and IGALIA, and then presented to the Linux Foundation.

101
0:16:19.000 --> 0:16:23.000
So in the end, a collaboration among the three.

102
0:16:23.000 --> 0:16:33.000
Before 2018, GALIA was assisting in putting Chrome browser adaptation to Wayland on the Chrome browser, so it was running in EDL.

103
0:16:33.000 --> 0:16:43.000
But in May, in 2018, my team in LG Silicon Valley Labs did this experiment to port one to EDL.

104
0:16:43.000 --> 0:16:55.000
It was actually one month, but it was mostly working in two weeks, and then we started maintaining it from 2019 to present.

105
0:16:55.000 --> 0:17:10.000
Okay, the thing is that the experiment proved it was possible, and now the focus is always moving to be able to run EDL with only WebUI.

106
0:17:10.000 --> 0:17:21.000
So basically, the main UI at that time in EDL was using KIUT, and the idea was that if you didn't want to run on top of it,

107
0:17:21.000 --> 0:17:29.000
you could run on top of one and half of the system UI and don't ask for applications.

108
0:17:29.000 --> 0:17:37.000
It also allowed to integrate with other applications, add with the system services as per EDL item,

109
0:17:37.000 --> 0:17:45.000
and that's part of the continuous adaptation as EDL evolves with different system protocols and system services.

110
0:17:45.000 --> 0:17:48.000
We need to evolve to catch up with that.

111
0:17:48.000 --> 0:17:51.000
So that was what happened in the last four years.

112
0:17:51.000 --> 0:17:55.000
We did one adaptation to EDL.

113
0:17:55.000 --> 0:17:58.000
Okay, another evolution.

114
0:17:58.000 --> 0:18:02.000
In 2012, we were using KIUT WebKit.

115
0:18:02.000 --> 0:18:10.000
We moved to KIUT WebKit 2 in the first two years, and the first mobile HDVs were using KIUT WebKit 2.

116
0:18:10.000 --> 0:18:17.000
Then we moved to use KIUT Web Engine.

117
0:18:17.000 --> 0:18:27.000
The idea was that everybody was moving to Blink, and it was not much more than that.

118
0:18:27.000 --> 0:18:40.000
It is that we had the feeling that Chromium and Blink were moving faster while doing more for the web platform,

119
0:18:40.000 --> 0:18:48.000
so it would save costs for maintenance to use an engine based on Blink and Chromium.

120
0:18:48.000 --> 0:18:57.000
So yeah, we used KIUT Web Engine, KIUT already has a part that would save us time for doing that part.

121
0:18:57.000 --> 0:19:09.000
But from 2015, we moved to create our own binding layer and drop KIUT Web Engine.

122
0:19:09.000 --> 0:19:20.000
So this WebWiz Review is a new component that replaces KIUT Web Engine, and one is built now on top of that.

123
0:19:20.000 --> 0:19:21.000
Why?

124
0:19:21.000 --> 0:19:31.000
The main reason, there are a few reasons, but there was a concern about the licensing model on KIUT Web Engine at that time.

125
0:19:31.000 --> 0:19:36.000
It was one of the first components that moved to LGPL v3.

126
0:19:36.000 --> 0:19:45.000
So the way they're content about the pattern clauses and for a TB vendor, that was kind of a problem.

127
0:19:45.000 --> 0:19:50.000
And not only a TB vendor, we found several others that would have some concerns on that.

128
0:19:50.000 --> 0:19:59.000
So there was no other KIUT Web Engine use at that time.

129
0:19:59.000 --> 0:20:08.000
So in the end, we did this, we removed that dependency, at least in the Web Engine integration side.

130
0:20:08.000 --> 0:20:15.000
It also allowed to simplify the continuous algorithm to track upstream Chromium at that time,

131
0:20:15.000 --> 0:20:21.000
because at least the media stack in WebWiz is way different.

132
0:20:21.000 --> 0:20:25.000
So maintaining a different Web Stack on top of KIUT Web Engine on top of Chromium,

133
0:20:25.000 --> 0:20:35.000
and tried to keep that baseline, tried to keep upstream, it started to become quite hard.

134
0:20:35.000 --> 0:20:41.000
Then we did something different, and that's more recent.

135
0:20:41.000 --> 0:20:49.000
One was based on KIUT for a long time, but there was concern from some stakeholders, not LG,

136
0:20:49.000 --> 0:20:55.000
that has a partnership with KIUT that is strong, so it was not a problem.

137
0:20:55.000 --> 0:21:01.000
But for other stakeholders, the ECPL dependency was kind of a problem.

138
0:21:01.000 --> 0:21:11.000
And the other reason for using KIUT diminishes a bit, because basically C++ and STL grow a lot,

139
0:21:11.000 --> 0:21:16.000
improved a lot, and simplified things.

140
0:21:16.000 --> 0:21:28.000
So it was not that important to have all the pieces that KIUT was providing for free as part of the bundle.

141
0:21:28.000 --> 0:21:35.000
So last year, two years ago, we moved to not depend on KIUT anymore,

142
0:21:35.000 --> 0:21:39.000
and now it's based on STL, and other C++ libraries for JSON passing,

143
0:21:39.000 --> 0:21:42.000
and Avital G-Live for the main loop.

144
0:21:42.000 --> 0:21:47.000
And we moved from QMake to CMake.

145
0:21:47.000 --> 0:21:51.000
Okay, but the thing is about stability.

146
0:21:51.000 --> 0:21:58.000
One didn't change a lot in the last 10 years, so the main ideas that we had running 10 years ago

147
0:21:58.000 --> 0:22:03.000
are still there, the way we handled the way running web applications, etc.

148
0:22:03.000 --> 0:22:14.000
It has been useful, the architecture has been flexible enough to adapt to the web engine changes we explained,

149
0:22:14.000 --> 0:22:18.000
dependency changes, new products, and even always changes.

150
0:22:18.000 --> 0:22:26.000
So we've been able to port one to different devices, different web engines, and it adapts very well.

151
0:22:26.000 --> 0:22:33.000
So first, about the future, WorldWash is still here to stay.

152
0:22:33.000 --> 0:22:45.000
It's just spending lots of money on making it the main part for the WorldWash TV offering,

153
0:22:45.000 --> 0:22:57.000
and they've been even allowing it to be used for third-party TV vendors through the WorldWash app.

154
0:22:57.000 --> 0:23:00.000
And there are some future discussions.

155
0:23:00.000 --> 0:23:02.000
We are now using GCC for building.

156
0:23:02.000 --> 0:23:08.000
We may move in the future to reduce clang, basically because it's the toolchain that Kermit supports,

157
0:23:08.000 --> 0:23:12.000
so maintaining a bottle change is kind of problematic.

158
0:23:12.000 --> 0:23:15.000
And we want to improve the upgrade cycles.

159
0:23:15.000 --> 0:23:27.000
We want to be closer to apps in Chromium, so there are many refactoring that's happening nowadays to improve this also.

160
0:23:27.000 --> 0:23:30.000
So these are the final remarks.

161
0:23:30.000 --> 0:23:34.000
Yeah, 10 years of the project, more to come.

162
0:23:34.000 --> 0:23:36.000
It's in millions of products.

163
0:23:36.000 --> 0:23:43.000
It proved to be useful, and it allows to create products offering.

164
0:23:43.000 --> 0:23:45.000
I mean, don't put this in Arduino.

165
0:23:45.000 --> 0:23:47.000
It's not going to work.

166
0:23:47.000 --> 0:24:04.080
But for products with 512 MB, even 250 cc

167
0:24:04.080 --> 0:24:16.080
Thank you.

168
0:24:16.080 --> 0:24:20.080
We have a few questions, starting with the online questions.

169
0:24:20.080 --> 0:24:29.080
The question online was, if I have an LG TV and they want to rebuild the firmware from sources, is that possible?

170
0:24:29.080 --> 0:24:31.080
I don't think you're going to know the answer to that one.

171
0:24:31.080 --> 0:24:36.080
No, LG's TV is proprietary OS.

172
0:24:36.080 --> 0:24:44.080
I say that maybe around 10% of the software is proprietary, but you cannot be the firmware.

173
0:24:44.080 --> 0:24:50.080
And actually, the TV industry is quite bad in that regard,

174
0:24:50.080 --> 0:25:01.080
because of DRM and of the requirements of the TV content providers like Netflix,

175
0:25:01.080 --> 0:25:03.080
Disney+, all these kind of things.

176
0:25:03.080 --> 0:25:08.080
They want to have a strong hold on how the contents are delivered

177
0:25:08.080 --> 0:25:12.080
and when the contents are possible to be delivered and paid and whatever.

178
0:25:12.080 --> 0:25:17.080
So it's not all a thing about LG.

179
0:25:17.080 --> 0:25:20.080
Samsung has the same problem, other vendors have the same problem.

180
0:25:20.080 --> 0:25:28.080
It's that the industry that will deliver contents to the TV are quite problematic in that regard.

181
0:25:28.080 --> 0:25:32.080
That's something that I would like to see it improve.

182
0:25:32.080 --> 0:25:37.080
Google has done a lot for a little reducing the path that is related to the DRM,

183
0:25:37.080 --> 0:25:44.080
but that's a problem of the TV industry that we need to deal with it.

184
0:25:44.080 --> 0:25:56.080
So we manufacture OEM boards and over the years I've found it really difficult to know what kind of platforms.

185
0:25:56.080 --> 0:26:01.080
I find it really difficult to recommend UX platforms to our clients.

186
0:26:01.080 --> 0:26:05.080
So nowadays we're starting to look at Flutter.

187
0:26:05.080 --> 0:26:08.080
That seems to be something people are talking about.

188
0:26:08.080 --> 0:26:10.080
I'm really not a UX person.

189
0:26:10.080 --> 0:26:16.080
So when would you say we should be recommending this and WebOS as opposed to other alternatives?

190
0:26:16.080 --> 0:26:18.080
What are the sort of pros and cons, as it were?

191
0:26:18.080 --> 0:26:22.080
Actually, there are different lines.

192
0:26:22.080 --> 0:26:25.080
For system UI, you can choose whatever you want.

193
0:26:25.080 --> 0:26:27.080
Flutter is quite efficient.

194
0:26:27.080 --> 0:26:28.080
Qt is quite good.

195
0:26:28.080 --> 0:26:30.080
Web is possible.

196
0:26:30.080 --> 0:26:39.080
If that's not a job decision, the main thing is that do you need web applications on top of the web?

197
0:26:39.080 --> 0:26:47.080
You need applications on top of that because you may want to play separate contents like Twitter application that is web,

198
0:26:47.080 --> 0:26:49.080
like YouTube, silly that.

199
0:26:49.080 --> 0:26:53.080
If you need separate contents, you may also want to have a run time.

200
0:26:53.080 --> 0:26:56.080
So you already have the needs.

201
0:26:56.080 --> 0:27:00.080
You may want to still use web also for the system UI.

202
0:27:00.080 --> 0:27:02.080
It's your choice.

203
0:27:02.080 --> 0:27:13.080
The tooling is a great advantage of Web Content because there are tons of ways to do UI in web,

204
0:27:13.080 --> 0:27:16.080
and it's pretty much a common standard for that.

205
0:27:16.080 --> 0:27:19.080
But yeah, it's a choice.

206
0:27:19.080 --> 0:27:21.080
Thanks, everybody.

207
0:27:21.080 --> 0:27:46.080
Thank you.


1
0:00:00.000 --> 0:00:08.800
So, the next lightning talk is Victor, and this should be a really fun talk, I think,

2
0:00:08.800 --> 0:00:09.800
about MLOps.

3
0:00:09.800 --> 0:00:10.800
Yes.

4
0:00:10.800 --> 0:00:11.800
So, hello.

5
0:00:11.800 --> 0:00:15.640
This is probably going to be the least serious talk you have seen today.

6
0:00:15.640 --> 0:00:17.080
So, I'm sorry about that.

7
0:00:17.080 --> 0:00:19.280
We're going to be automating weight loss with AI.

8
0:00:19.280 --> 0:00:23.760
It's a stupid project I made in a weekend, or like in a few weekends, but I want to talk

9
0:00:23.760 --> 0:00:24.760
about it.

10
0:00:24.760 --> 0:00:25.760
So, who am I?

11
0:00:25.760 --> 0:00:26.760
Lightning talk version.

12
0:00:26.760 --> 0:00:27.760
I'm Victor Sunk.

13
0:00:27.760 --> 0:00:28.760
I work at ClearML.

14
0:00:28.760 --> 0:00:29.760
Hi.

15
0:00:29.760 --> 0:00:30.760
Let's make something.

16
0:00:30.760 --> 0:00:33.480
So, that's the reason why I'm here.

17
0:00:33.480 --> 0:00:37.760
The problem statement was I'm working at home, and I'm not working out enough, like probably

18
0:00:37.760 --> 0:00:39.240
a lot of us are.

19
0:00:39.240 --> 0:00:45.800
And so, the problem solution is why not lock my PC every hour and force myself to do push-ups,

20
0:00:45.800 --> 0:00:47.920
and then it automatically opens again.

21
0:00:47.920 --> 0:00:48.920
That was the main idea.

22
0:00:48.920 --> 0:00:53.560
I want to do this with AI, obviously, because over-engineering.

23
0:00:53.560 --> 0:00:58.480
And I'm a machine learning engineer, so if I am a hammer, everything looks like a nail.

24
0:00:58.480 --> 0:01:00.280
This is going to be the diagram.

25
0:01:00.280 --> 0:01:02.400
So, left top is an oak one.

26
0:01:02.400 --> 0:01:03.400
It's an AI camera.

27
0:01:03.400 --> 0:01:05.480
I'll talk about it in a second.

28
0:01:05.480 --> 0:01:09.200
That will run one model, and then because one AI model is not enough, I have two.

29
0:01:09.200 --> 0:01:13.640
So, there is a second model that runs on the Raspberry Pi that will lock my PC.

30
0:01:13.640 --> 0:01:15.120
This is what it looks like.

31
0:01:15.120 --> 0:01:20.800
So, you get like a notification, workout time, lazy bum, and you have to do push-ups.

32
0:01:20.800 --> 0:01:24.080
It's in Raspberry Pi running in the corner of my room.

33
0:01:24.080 --> 0:01:26.360
You can follow along with the diagram at the right top.

34
0:01:26.360 --> 0:01:29.920
So, I'm going to do post-estimation with the oak one.

35
0:01:29.920 --> 0:01:30.920
Now what is the oak one?

36
0:01:30.920 --> 0:01:37.240
The oak one is a 150 bucks open source hardware AI camera, which is really cool.

37
0:01:37.240 --> 0:01:38.720
I highly recommend it.

38
0:01:38.720 --> 0:01:43.680
They run the Intel Mirrored X, so if you look at the speeds there, if you have the oak one,

39
0:01:43.680 --> 0:01:49.040
because it does the AI, like the AI, on the chip itself, on the camera itself, it can

40
0:01:49.040 --> 0:01:53.320
get a lot higher FPS on the Raspberry Pi because it doesn't have to go to the Raspberry Pi

41
0:01:53.320 --> 0:01:55.280
to do anything.

42
0:01:55.280 --> 0:02:00.040
Even when compared to another AI accelerator connected to the Raspberry Pi.

43
0:02:00.040 --> 0:02:04.240
It also has excellent documentation, which is a unicorn these days, but yeah, it really

44
0:02:04.240 --> 0:02:06.440
is a nice library.

45
0:02:06.440 --> 0:02:11.240
So they have a bunch of cool examples that you can try, like there's DeepLop with segmentation,

46
0:02:11.240 --> 0:02:13.160
there's other stuff.

47
0:02:13.160 --> 0:02:17.880
But luckily for me, I didn't have to do any work because they also had post-estimation.

48
0:02:17.880 --> 0:02:21.880
So thanks to GXGX for implementing this.

49
0:02:21.880 --> 0:02:23.120
This is an awesome repository.

50
0:02:23.120 --> 0:02:24.120
It's still being maintained.

51
0:02:24.120 --> 0:02:25.920
If I remember correctly.

52
0:02:25.920 --> 0:02:27.320
So definitely check that out.

53
0:02:27.320 --> 0:02:28.320
That's really cool.

54
0:02:28.320 --> 0:02:31.360
Now, what does this repository do?

55
0:02:31.360 --> 0:02:33.540
It basically gives me post-estimation.

56
0:02:33.540 --> 0:02:36.160
So it films me on that AI camera.

57
0:02:36.160 --> 0:02:39.840
I have one with me, by the way, so after the lightning talks, I can actually give a demo

58
0:02:39.840 --> 0:02:40.840
lightning talk.

59
0:02:40.840 --> 0:02:42.840
I can't do it right now.

60
0:02:42.840 --> 0:02:47.680
Basically it draws a skeleton on top of you in like seven, eight frames a second on the

61
0:02:47.680 --> 0:02:49.800
Raspberry Pi, which is awesome.

62
0:02:49.800 --> 0:02:52.000
And then it even positions them in 3D.

63
0:02:52.000 --> 0:02:53.000
So that's nice.

64
0:02:53.000 --> 0:02:54.000
This is stage one.

65
0:02:54.000 --> 0:02:56.080
We want to go to a push-up detector.

66
0:02:56.080 --> 0:02:57.220
This is stage two.

67
0:02:57.220 --> 0:03:00.480
So we now basically have a skeleton.

68
0:03:00.480 --> 0:03:05.320
If we just throw away the pixels, these are the only points that we actually care about.

69
0:03:05.320 --> 0:03:08.400
And then now it just basically becomes a tabular problem.

70
0:03:08.400 --> 0:03:12.720
So the second part of the machine learning, or like the simple machine learning, is going

71
0:03:12.720 --> 0:03:13.880
to be really simple.

72
0:03:13.880 --> 0:03:17.400
Now we just have a few points and we want to classify them.

73
0:03:17.400 --> 0:03:18.400
Right.

74
0:03:18.400 --> 0:03:22.080
For this second model, though, this is not pre-trained, so I actually have to label.

75
0:03:22.080 --> 0:03:26.040
A few images, it's not a very complex model, but you have to do something.

76
0:03:26.040 --> 0:03:30.240
So what we do, what do we want to do is we want to say, okay, this is a push-up, this

77
0:03:30.240 --> 0:03:34.760
is a push-down, and then we can do some additional logic to actually count them while they're

78
0:03:34.760 --> 0:03:35.760
happening.

79
0:03:35.760 --> 0:03:36.760
Right.

80
0:03:36.760 --> 0:03:42.360
But then the question becomes, how do I take a picture when I'm actually doing my push-ups?

81
0:03:42.360 --> 0:03:45.880
Because like there is a camera there, do I need a button, but then it might overfit on

82
0:03:45.880 --> 0:03:48.180
me pressing the button or like something else.

83
0:03:48.180 --> 0:03:53.400
So if you're a machine learning engineer, the answer is throw more AI at it.

84
0:03:53.400 --> 0:04:00.840
So basically over-engineering using an unnecessary amount of AI, I set up a microphone while

85
0:04:00.840 --> 0:04:02.840
I was pushing up and pushing down.

86
0:04:02.840 --> 0:04:07.560
There's a really cool open source package for Python that can do voice recognition.

87
0:04:07.560 --> 0:04:12.800
It does send it to the proprietary API of Google, but at least the code is there.

88
0:04:12.800 --> 0:04:16.720
And then you can just basically shout label me, and if label, the word label, is actually

89
0:04:16.720 --> 0:04:20.720
found inside of what you said, it will take a picture.

90
0:04:20.720 --> 0:04:22.640
So that's that.

91
0:04:22.640 --> 0:04:26.600
Now we have a third AI model that's really useful.

92
0:04:26.600 --> 0:04:28.760
And then I did a lot with ClearML.

93
0:04:28.760 --> 0:04:31.040
So this is actually the MLOps part.

94
0:04:31.040 --> 0:04:32.120
I now have two models.

95
0:04:32.120 --> 0:04:33.480
I want to be able to train them.

96
0:04:33.480 --> 0:04:35.140
I want to be able to maintain them.

97
0:04:35.140 --> 0:04:36.720
So what did I do?

98
0:04:36.720 --> 0:04:40.840
This is the labeling tool, so left top for you.

99
0:04:40.840 --> 0:04:43.600
Right left top is the Oak one that will take a picture.

100
0:04:43.600 --> 0:04:49.360
When I shout take a picture, it will send it to ClearML, which is actually an open source

101
0:04:49.360 --> 0:04:52.120
MLOps tool, one that I work for.

102
0:04:52.120 --> 0:04:54.400
And they have data versioning, for example.

103
0:04:54.400 --> 0:04:58.920
So every single time I run the labeling tool, it will create a new version of my dataset,

104
0:04:58.920 --> 0:05:00.540
which is very useful.

105
0:05:00.540 --> 0:05:03.200
And then I can use this new version of the dataset.

106
0:05:03.200 --> 0:05:04.200
I can pull it in.

107
0:05:04.200 --> 0:05:07.720
I can use the experiment manager of ClearML to keep track of all my code.

108
0:05:07.720 --> 0:05:12.880
Every single time I run a train, I will get all of my output, all of my plots.

109
0:05:12.880 --> 0:05:14.760
And then you can actually build this into pipelines.

110
0:05:14.760 --> 0:05:16.680
You can run this automatically on remote machines.

111
0:05:16.680 --> 0:05:20.880
So I've already engineered a crap out of it, but I can't really tell everything in

112
0:05:20.880 --> 0:05:22.280
Lightning Talk.

113
0:05:22.280 --> 0:05:27.840
The main idea is you have a lot of different tools in ClearML that can help you with that

114
0:05:27.840 --> 0:05:29.640
and automate a lot of that stuff.

115
0:05:29.640 --> 0:05:31.700
Now training my own model.

116
0:05:31.700 --> 0:05:34.020
So now we have all of those points.

117
0:05:34.020 --> 0:05:38.680
We have for each of those sets of points, we have if it's a push up or a push down,

118
0:05:38.680 --> 0:05:40.400
where do you go from here?

119
0:05:40.400 --> 0:05:44.260
Training my own model, it's this, like it's super simple.

120
0:05:44.260 --> 0:05:46.400
It's just three lines of code these days.

121
0:05:46.400 --> 0:05:50.240
So this is just SK learn, it's an SVM, it's a simple classifier, it takes points in, gives

122
0:05:50.240 --> 0:05:52.900
you one point out, push up, push down.

123
0:05:52.900 --> 0:05:53.900
It's not ideal.

124
0:05:53.900 --> 0:05:56.720
I should do a no class, but I was lazy.

125
0:05:56.720 --> 0:05:59.340
No class basically meaning it's nothing, none of the two.

126
0:05:59.340 --> 0:06:06.400
So now it will say when I walk to it, it will maybe register a push up, but it's not ideal.

127
0:06:06.400 --> 0:06:13.440
So in order to combat that, I made a very simple, even simpler piece of code that basically

128
0:06:13.440 --> 0:06:14.460
primes it.

129
0:06:14.460 --> 0:06:19.200
So here on the plot on the left, you can see one is basically pushed down, two is pushed

130
0:06:19.200 --> 0:06:20.200
up.

131
0:06:20.200 --> 0:06:21.200
And so you can see it happen.

132
0:06:21.200 --> 0:06:24.800
And I think, yeah, you can basically see it happen there in the beginning.

133
0:06:24.800 --> 0:06:29.480
But when I run to my place to start to do the push ups, here you can see that there

134
0:06:29.480 --> 0:06:33.180
is like a bit of jittering going on because it doesn't know the zero class.

135
0:06:33.180 --> 0:06:38.360
So in order to catch that, what you can say is, okay, if the you can basically say if

136
0:06:38.360 --> 0:06:45.000
the length is, yeah, if the length is 10, so if you're at least been doing detection

137
0:06:45.000 --> 0:06:49.440
for some time, then you can check if the last 10 of them were pushed up.

138
0:06:49.440 --> 0:06:53.560
So I'm basically ready in my position, only then prime it.

139
0:06:53.560 --> 0:06:56.580
And then once it's primed, you can start counting.

140
0:06:56.580 --> 0:07:00.120
So that's just a very simple, stupid way of doing it.

141
0:07:00.120 --> 0:07:01.120
Two minutes left.

142
0:07:01.120 --> 0:07:02.120
Excellent.

143
0:07:02.120 --> 0:07:07.320
So I'm going to do one more thing.

144
0:07:07.320 --> 0:07:08.440
Locking the computer.

145
0:07:08.440 --> 0:07:14.200
So I use Linux, which allows you to do everything, which is awesome.

146
0:07:14.200 --> 0:07:19.040
So locking the computer was easy, but unlocking was hard, as it probably should be.

147
0:07:19.040 --> 0:07:21.240
You have to put in a password.

148
0:07:21.240 --> 0:07:25.160
So there was no real way to get a custom password.

149
0:07:25.160 --> 0:07:29.880
I tried thinking of like maybe I should like scramble my password and then fill in that

150
0:07:29.880 --> 0:07:32.120
scrambled password, but never do that.

151
0:07:32.120 --> 0:07:36.480
You will be locked out if your code is buggy and it happened.

152
0:07:36.480 --> 0:07:38.760
So no way to get a custom password.

153
0:07:38.760 --> 0:07:39.960
And there is one big problem.

154
0:07:39.960 --> 0:07:41.120
I know my password.

155
0:07:41.120 --> 0:07:45.880
So if I can't change it and I lock my computer and I really don't want to do pushups, I can

156
0:07:45.880 --> 0:07:47.960
just fill it in and be done with it.

157
0:07:47.960 --> 0:07:54.440
So the best and simple solution I can come up with is just to use Xdo tool and then spam

158
0:07:54.440 --> 0:07:55.780
backspace.

159
0:07:55.780 --> 0:08:01.720
So Xdo tool allows you to type automatically while your computer is locked so you can just

160
0:08:01.720 --> 0:08:06.200
spam backspace, not allow you to fill it in because it's like backspace 20 times a second.

161
0:08:06.200 --> 0:08:10.560
And then when you do the pushups, it just fills in your passwords.

162
0:08:10.560 --> 0:08:11.560
And that's it.

163
0:08:11.560 --> 0:08:17.540
So yeah, a lot of over engineering and I hope you find it interesting and you learned something.

164
0:08:17.540 --> 0:08:26.760
So thank you so much for listening.

165
0:08:26.760 --> 0:08:28.440
One last note before any questions.

166
0:08:28.440 --> 0:08:49.440
There is a YouTube video about it on the channel MLMakin.


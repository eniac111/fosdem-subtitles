WEBVTT

00:00.000 --> 00:12.000
Hello, I'm Frederick Denis, software engineer at Collabroix and I will present you the Bluetooth

00:12.000 --> 00:16.080
test in wire plumber and perp wire and wire plumber.

00:16.080 --> 00:24.400
Pypewire is a low latency, graph-based processing engine that attempts to handle the audio and

00:24.400 --> 00:26.200
video streams.

00:26.200 --> 00:36.800
It is intended to replace both pulse audio and jack audio systems.

00:36.800 --> 00:43.360
Wire plumbers in charge of creating the audio and video nodes and the link between the nodes

00:43.360 --> 00:51.480
according to the policies defined by the system or the users.

00:51.480 --> 00:59.280
Most of them are designed for desktop, main distributions are switching to them or to

00:59.280 --> 01:01.560
the embedded.

01:01.560 --> 01:08.080
More specifically for Bluetooth, the Bluetooth classic audio profiles are divided in two

01:08.080 --> 01:10.200
main categories.

01:10.200 --> 01:21.160
The mono, the stereo and mostly unidirectional audio streaming called H2DP and the mono and

01:21.160 --> 01:29.960
bidirectional profiles which is entry profile and it's a profile, the letter less and less

01:29.960 --> 01:35.400
used.

01:35.400 --> 01:40.720
For the Bluetooth classic audio profiles, H2DP stands for advanced audio distribution

01:40.720 --> 01:51.400
profiles, it aims to manage audio streaming between media player and headset or speakers

01:51.400 --> 01:58.520
and in this table you can see the supported codecs.

01:58.520 --> 02:09.040
The first one is SBC codec which is low complexity fast and low C but is implemented on all

02:09.040 --> 02:10.040
devices.

02:10.040 --> 02:20.040
The H2DP specification allows other codecs like AAC which is optional and not implemented

02:20.040 --> 02:28.520
on all devices and this specification allows also other codecs not defined in the specification.

02:28.520 --> 02:35.160
Most of them have been implemented to improve the audio quality but are not supported by

02:35.160 --> 02:36.600
all devices.

02:36.600 --> 02:47.840
For example, the EPTX family of codecs can be found on Qualcomm devices or need licensing

02:47.840 --> 02:54.680
from Qualcomm or the LDAC codec is found on Sony devices.

02:54.680 --> 03:02.260
In

03:02.260 --> 03:08.280
the LD3+, which is an enhanced version of the codec used in LED audio which we'll talk

03:08.280 --> 03:11.280
later.

03:11.280 --> 03:20.080
Some founders have the ability to do bidirectional audio on H2DP with the fast stream codec which

03:20.080 --> 03:30.880
is an evolution of the SBC codec or the EPTX lossless codec which is one of the EPTX family.

03:30.880 --> 03:39.680
Just one I was saying, last year we were able to pass the Bluetooth qualification using

03:39.680 --> 03:44.680
both PIPEWIR and WYER PUBBLER on the Steam Deck.

03:44.680 --> 03:54.800
HFP stands for hands-free profile, it is used for communication usage but unlike the H2DP1,

03:54.800 --> 04:02.680
it also defines the commands to interact with telephony using a set of AT commands.

04:02.680 --> 04:09.360
This can be done with external demands like HSP, HFPD or Ophono, Ophono adding a complete

04:09.360 --> 04:17.440
support for the modem or with a native backhand which is only set, a limited set of AT commands

04:17.440 --> 04:29.040
allowing to complete the connection with Bluetooth devices.

04:29.040 --> 04:34.080
This can be used with configurating application.

04:34.080 --> 04:38.960
Last year we had the native backhand, the support for modem manager allowing to have

04:38.960 --> 04:48.480
a complete telephony usage from inside the Bluetooth, from inside PIPEWIR.

04:48.480 --> 04:55.600
So with Ophono or modem manager, PIPEWIR adds a complete telephony support to the mobile

04:55.600 --> 05:00.480
distribution device, device distribution.

05:00.480 --> 05:11.280
HFP supports two codecs, the mountatory one which is CVSD which is an arabian audio connection.

05:11.280 --> 05:24.440
In this case, yes for the CVSD the audio is sent directly to the Bluetooth chipset which

05:24.440 --> 05:35.600
will anchor the data through the Bluetooth circuit and the second codec is MSBC which

05:35.600 --> 05:46.600
is optionally a fixed configuration of SBC but it needs both support from kernel and

05:46.600 --> 05:56.800
the chipset and it is automatically detected during runtime by PIPEWIR.

05:56.800 --> 06:07.640
But on some hardware devices the chipset has a direct audio link connected to a nodial card

06:07.640 --> 06:09.240
or to the modem.

06:09.240 --> 06:17.120
To be able to support it we had a hardware score of 1.2 mode which allows PIPEWIR to

06:17.120 --> 06:24.520
use the score socket to create and connect and configure the remote, the link to the

06:24.520 --> 06:27.520
remote device.

06:27.520 --> 06:34.160
While Wirepambert will create a pass-through node allowing the user to select the Bluetooth

06:34.160 --> 06:44.880
remote device as an audio output and then the data are sent to the audio card which

06:44.880 --> 06:50.560
plays them to the Bluetooth chipset which will at the end encode and send the data over

06:50.560 --> 06:53.320
the year.

06:53.320 --> 06:59.800
Now we'll do a quick overview of the new low energy audio specifications.

06:59.800 --> 07:11.240
The idea is to unify the stereo and mono audio profile and replace both H2DP and HFP.

07:11.240 --> 07:20.320
It has a better sound quality with the new ICTC codec and it has an ease-of-colluse

07:20.320 --> 07:31.080
radio channel to guarantee bandwidth and minimal delay.

07:31.080 --> 07:37.560
By default it is able to support bid bidirectional audio for every usage.

07:37.560 --> 07:42.560
It supports multi-stream support replacing two wireless.

07:42.560 --> 07:47.720
It also supports hearing aids and with the new hourcast mode you are able to broadcast

07:47.720 --> 07:53.560
audio without interaction between the transmitter and the receivers.

07:53.560 --> 07:59.200
This handles in a lot of new profiles and specifications.

07:59.200 --> 08:09.120
The one in blue are already supported by BlueZ and Pipewire but there are not so many devices

08:09.120 --> 08:10.880
on the market to test with.

08:10.880 --> 08:16.800
They are still set as experimental in both BlueZ and Pipewire and in some configuration

08:16.800 --> 08:20.920
to be set if you want to use them.

08:20.920 --> 08:25.320
Regarding the broadcast support, it is already supported, the low level is already supported

08:25.320 --> 08:32.360
in the kernel but there is still some work to do in BlueZ and Pipewire and mostly find

08:32.360 --> 08:38.400
the correct euix to be able to share audio or to select the broadcast you want to listen

08:38.400 --> 08:40.120
to.

08:40.120 --> 08:41.120
Thank you.

08:41.120 --> 08:50.840
Thank you.

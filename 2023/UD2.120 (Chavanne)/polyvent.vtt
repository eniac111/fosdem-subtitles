WEBVTT

00:00.000 --> 00:08.680
Thank you everybody for being here.

00:08.680 --> 00:10.520
I know it's the end of the day.

00:10.520 --> 00:12.520
It's been a long day.

00:12.520 --> 00:13.520
So thank you.

00:13.520 --> 00:18.360
I'd like to talk about the Polyvent Free Libre Open Source ventilator.

00:18.360 --> 00:22.080
This is hardware in a little different sense than is used in this room.

00:22.080 --> 00:26.080
Normally when you say hardware at this conference you mean chips and VLSI stuff, but this is

00:26.080 --> 00:29.440
an electromechanical hardware device.

00:29.440 --> 00:32.480
This talk is co-authored with Dr. Victor Soutrin.

00:32.480 --> 00:34.360
Victor, can you raise your hand?

00:34.360 --> 00:40.580
And Antal Zidarwick is our chief mechanical engineer for the chassis part.

00:40.580 --> 00:44.400
If you meet us after the talk we'll be happy to answer questions for you.

00:44.400 --> 00:48.800
And we are trying to recruit software engineers and electrical and mechanical engineers to

00:48.800 --> 00:52.520
work on the project as well.

00:52.520 --> 00:54.560
So I am Robert Reed.

00:54.560 --> 00:59.200
I'm the founder of Public Invention, which is a U.S. 501c3 public charity.

00:59.200 --> 01:02.280
Our motto is to invent in the public for the public.

01:02.280 --> 01:06.520
I think this conference will appreciate that we're trying to take the principles of open

01:06.520 --> 01:12.060
source software development and apply it not only to chip design but to actual hardware

01:12.060 --> 01:14.900
inventions.

01:14.900 --> 01:17.480
So I'd like to create a setting.

01:17.480 --> 01:25.200
In the spring of 2020 in the United States so many people had died of COVID-19 so quickly

01:25.200 --> 01:32.440
in New York that they had to use refrigerated trucks as temporary morgues for that purpose.

01:32.440 --> 01:38.280
At that time there was a genuine belief that the western world might need a million mechanical

01:38.280 --> 01:41.100
ventilators to try to keep people alive.

01:41.100 --> 01:46.560
That turned out not to be true but it wasn't erroneous at the time based on what we knew

01:46.560 --> 01:49.760
from the disease progression in northern Italy.

01:49.760 --> 01:56.760
What we didn't know at the time was that social distancing and lockdowns would work and also

01:56.760 --> 02:02.720
doctors decided they didn't need to ventilate people as early with COVID as they had previously

02:02.720 --> 02:03.720
thought.

02:03.720 --> 02:09.840
Nonetheless, a very large number of humanitarian engineering teams all over the world attempted

02:09.840 --> 02:13.600
to make emergency ventilators to solve this problem.

02:13.600 --> 02:21.800
It was kind of a global effort and Victor and a young man who was 16 at the time started

02:21.800 --> 02:26.480
working on their own ventilator in the same effort.

02:26.480 --> 02:29.600
Now they started with a bellows based design.

02:29.600 --> 02:31.600
We're going to talk about that.

02:31.600 --> 02:38.160
The thing they designed, the Polyvent was specifically designed to talk about fragile

02:38.160 --> 02:39.240
supply chains.

02:39.240 --> 02:44.040
So it was designed to be constructible within a low and middle income country.

02:44.040 --> 02:48.240
That's one reason they went with bellows in the initial design.

02:48.240 --> 02:53.640
Originally they weren't necessarily embracing open source licensing because they didn't

02:53.640 --> 02:55.240
know that much about it.

02:55.240 --> 02:59.480
Everyone sort of believed, well, we're going to need large firms to make a lot of money

02:59.480 --> 03:04.720
and if you have an open source license on it they won't want to use your product.

03:04.720 --> 03:09.640
How do we know that 100 humanitarian engineering teams started?

03:09.640 --> 03:16.760
We made a spreadsheet which evaluated all of the open source ventilators along a wide

03:16.760 --> 03:21.680
variety of dimensions here.

03:21.680 --> 03:27.240
Now, at the time and still today what we're trying to do is create open source medical

03:27.240 --> 03:28.740
devices.

03:28.740 --> 03:34.480
That is harder than making open source hardware, which is harder than making open source software,

03:34.480 --> 03:39.600
which is harder than copywriting text, both from a legal point of view and from an intellectual

03:39.600 --> 03:40.600
point of view.

03:40.600 --> 03:45.320
The cost of development for medical things goes up because you're attempting to produce

03:45.320 --> 03:47.160
regulated devices.

03:47.160 --> 03:54.120
Now originally the Polyvent team was attempting to do that, but at that time in the United

03:54.120 --> 03:57.360
States there was an emergency use authorization.

03:57.360 --> 04:03.080
So there was a belief that we might not need to do all the things that the FDA would normally

04:03.080 --> 04:07.080
require.

04:07.080 --> 04:12.880
So while this was going on, public invention published the Open Medical Technology Manifesto,

04:12.880 --> 04:18.560
which is the open, shareable, repairable medical technology will make us all healthier.

04:18.560 --> 04:25.200
The Polyvent ventilator is aligned with that and I invite you all to find this and sign

04:25.200 --> 04:28.320
it if you agree with it.

04:28.320 --> 04:36.320
So the Polyvent team began working on a ventilator and they had some success in LENSE and they

04:36.320 --> 04:41.200
designed a very extensible system that we're going to talk about.

04:41.200 --> 04:47.240
But the global pandemic urgency was dissipating by about six months from that spring.

04:47.240 --> 04:53.360
So by October of that first year people were no longer excited about the idea.

04:53.360 --> 04:57.600
So the thing that I'm most proud of, perhaps, of this team is that they just kept going

04:57.600 --> 05:01.680
and continued to develop the ventilator.

05:01.680 --> 05:05.640
So at that time they joined public invention.

05:05.640 --> 05:09.760
Basically in exchange for making it fully open source, public invention began to start

05:09.760 --> 05:15.360
paying for parts and manual labor to support the development of the ventilator.

05:15.360 --> 05:19.360
It's also the case that I'm mostly a software guy.

05:19.360 --> 05:23.080
Another nonprofit, Helpful Engineering, had the ventilest software, which we're going to

05:23.080 --> 05:26.620
talk about, and the existing team didn't have any software.

05:26.620 --> 05:29.160
So it was a nice alliance.

05:29.160 --> 05:30.620
This is their original system.

05:30.620 --> 05:32.400
This was a fully functional ventilator.

05:32.400 --> 05:36.240
It uses dual bellows here.

05:36.240 --> 05:41.560
Bellows can be manufactured with 3D printers, so they can presumably be made in any country,

05:41.560 --> 05:42.560
was the idea.

05:42.560 --> 05:44.040
However, there were some problems.

05:44.040 --> 05:50.560
The bearings to drive the bellows up and down tended to wear out and there were some other

05:50.560 --> 05:52.120
improvements possible.

05:52.120 --> 05:54.440
We started to make those improvements.

05:54.440 --> 05:59.280
The big switch we made was to switch to a proportional valve-based system that used

05:59.280 --> 06:03.320
pressurized air and pressurized oxygen.

06:03.320 --> 06:08.000
This was inspired by Smith College in the United States, which is probably the premier

06:08.000 --> 06:10.620
women's college in the United States.

06:10.620 --> 06:13.880
They had made an award-winning ventilator called the Smith vent.

06:13.880 --> 06:14.880
They stopped.

06:14.880 --> 06:22.080
I don't know why, but we continued and have used the same basic technology.

06:22.080 --> 06:27.400
Now we already had a spirometer, the vent lawn, which was made by public invention.

06:27.400 --> 06:34.080
We sort of used that as part of our system, and eventually we started to redesign for

06:34.080 --> 06:38.360
education.

06:38.360 --> 06:44.640
So we started with the proportional valve on the left, which is a Burkitt proportional

06:44.640 --> 06:45.640
valve.

06:45.640 --> 06:49.480
It was really kind of an engineering mistake because it was larger than what we needed

06:49.480 --> 06:52.840
and the airflow was not as precise as what we needed.

06:52.840 --> 06:55.200
The valve on the right is difficult to source.

06:55.200 --> 06:57.240
It's made in the United States by IQ valve.

06:57.240 --> 07:02.520
It's a very precisely controlled proportional valve.

07:02.520 --> 07:05.600
Like all projects, we learned as we went along.

07:05.600 --> 07:11.120
This was what we called the Polyvent 1, even though it's after the bellows module.

07:11.120 --> 07:13.400
This was, again, fully functional.

07:13.400 --> 07:20.040
We performed some tests with professors of education in biomedical engineering.

07:20.040 --> 07:28.960
This system worked, but we decided to redesign it for education.

07:28.960 --> 07:33.720
So while this was going on, the COVID pandemic continues.

07:33.720 --> 07:38.800
In India around this time, there was a terrible, terrible spike of death.

07:38.800 --> 07:42.000
Now this was not due to a lack of ventilators.

07:42.000 --> 07:46.080
People say it was due to a lack of oxygen.

07:46.080 --> 07:49.680
We have also, public convention, have also worked on an oxygen concentrated.

07:49.680 --> 07:56.480
The reason I bring it up is that what we're attempting to do and what many of you are attempting

07:56.480 --> 08:00.840
to do in the software that you produce is to make the world better for a lot of people.

08:00.840 --> 08:07.520
Making open source medical devices is a new way, a new avenue for open source philosophy

08:07.520 --> 08:10.960
to make the world better for a very large number of people.

08:10.960 --> 08:15.240
It's quite a technical challenge, but that's why we're doing it.

08:15.240 --> 08:21.000
So based on educator feedback, we made a lighter single deck design.

08:21.000 --> 08:22.560
We made a transparent case.

08:22.560 --> 08:28.080
We made the inside spacious and modular so that students could look at it and you could

08:28.080 --> 08:29.680
also repair it more easily.

08:29.680 --> 08:32.320
You didn't have to take the whole thing apart.

08:32.320 --> 08:37.880
That is very different than the way professionally designed medical equipment is made.

08:37.880 --> 08:39.840
It's not made to be easy to repair.

08:39.840 --> 08:41.960
It's not made to be easy to understand.

08:41.960 --> 08:53.400
So it's quite a departure from what you would see in a normal for-profit sort of made device.

08:53.400 --> 08:59.120
We also, Nathaniel, did a really good job designing a modular card-based electronic

08:59.120 --> 09:00.360
control system.

09:00.360 --> 09:05.840
And this actually paid off when a second public convention team created a card that we were

09:05.840 --> 09:11.080
able to put into the device to control a general purpose alarm device which we're working on.

09:11.080 --> 09:17.080
And he did that, that team did that with no interaction with Victor's team just based

09:17.080 --> 09:19.720
on the documentation that we have.

09:19.720 --> 09:25.720
So this is the timeline and we've been getting, you know, better and better as we go along

09:25.720 --> 09:27.520
like most projects.

09:27.520 --> 09:32.160
In October, we did a classroom evaluation with 12 biomedical engineering students at

09:32.160 --> 09:36.320
Rice University in Houston, Texas in the United States.

09:36.320 --> 09:38.760
This is the device as it stands today.

09:38.760 --> 09:40.240
This is the Polyvent 2.

09:40.240 --> 09:43.680
That's what the students looked, used.

09:43.680 --> 09:50.000
As you can see, it actually uses an acrylic case so you can see all of the components.

09:50.000 --> 09:54.760
And I don't have a good layout diagram, but it's laid out in a way where it's physically

09:54.760 --> 09:59.040
modular as well as being electronically modular.

09:59.040 --> 10:03.720
The software is 2, of course, because we learned a lot from the open source software community

10:03.720 --> 10:05.320
on how to do this.

10:05.320 --> 10:11.920
So it's now our intention with the Polyvent to continue to eventually make a design basis

10:11.920 --> 10:15.200
that can be used for a medical ventilator.

10:15.200 --> 10:22.840
But we believe that by sort of infiltrating the research and education community, we have

10:22.840 --> 10:25.280
a better shot of eventually accomplishing that.

10:25.280 --> 10:31.640
So the Polyvent platform right now is for medical and veterinary doctors, but really

10:31.640 --> 10:34.560
it's for biomedical engineering students.

10:34.560 --> 10:38.160
Even you can teach business school classes on it.

10:38.160 --> 10:42.280
You can certainly do mechanical, electrical engineering, software engineering, and we

10:42.280 --> 10:50.160
consider ourselves firmly part of the emerging discipline of humanitarian engineering.

10:50.160 --> 10:54.360
So what we did to make the classroom instructor.

10:54.360 --> 10:56.240
I am not a teacher.

10:56.240 --> 10:58.600
I'm mostly a computer programmer.

10:58.600 --> 11:02.600
We made fake broken parts and we asked the students to turn their backs and we would

11:02.600 --> 11:07.360
install a fake broken part and then they would attempt to find it.

11:07.360 --> 11:11.760
Now this class they were taking is in fact a troubleshooting class.

11:11.760 --> 11:19.000
So it worked rather well and of the 12 students who were there, they really strongly believed

11:19.000 --> 11:21.680
that this would be useful in other universities.

11:21.680 --> 11:28.920
So it's our hope to sort of sell this at cost even though it's completely open source.

11:28.920 --> 11:30.560
Somebody could make it if they wanted to.

11:30.560 --> 11:34.400
All the physical designs, all the software designs are completely open.

11:34.400 --> 11:40.200
But making things like this in hardware requires, as one of the gentlemen in the previous talk,

11:40.200 --> 11:42.280
a certain amount of tooling and so forth.

11:42.280 --> 11:47.640
So people like a graduate school may find it easier to pay us $5,000 for one of these,

11:47.640 --> 11:54.320
which is sort of the hardware costs are about $2,000 and it takes some labor to put it together.

11:54.320 --> 11:57.880
It's kind of the cost for us to make it rather than build one themselves.

11:57.880 --> 11:59.420
But they could.

11:59.420 --> 12:04.760
They can build it and modify it themselves based on licenses that I'm sure you're all

12:04.760 --> 12:06.480
familiar with.

12:06.480 --> 12:11.560
So this is kind of a schematic of the design that you saw there physically.

12:11.560 --> 12:15.560
And the thing that's most important is Nathaniel did a really good job designing an electronic

12:15.560 --> 12:17.960
extensible card system.

12:17.960 --> 12:21.600
And this is based on an IEEE standard I'm not familiar with.

12:21.600 --> 12:27.840
But basically you plug slots into it and it exposes pins of the ESP32.

12:27.840 --> 12:34.160
So if you have a device that you would like to add to the ventilator, like a humidifier,

12:34.160 --> 12:41.920
a nebulizer, a heater, an additional set of instrumentation, you can just design a card

12:41.920 --> 12:43.600
and stick it in there.

12:43.600 --> 12:48.080
And that's what the general purpose alarm device team of public invention did.

12:48.080 --> 12:53.080
This is a physical photograph of how those things slide in there.

12:53.080 --> 12:59.440
This card right here is a card with a bunch of power transistors which control the solenoid

12:59.440 --> 13:02.600
valves which are in the system.

13:02.600 --> 13:05.640
Because obviously it takes 24 volts to do that.

13:05.640 --> 13:09.720
So now I'd like to talk about software.

13:09.720 --> 13:13.160
The software system is called ventOS.

13:13.160 --> 13:14.560
I didn't name it.

13:14.560 --> 13:16.800
Really it's not an operating system.

13:16.800 --> 13:19.120
But we kind of think of it that way.

13:19.120 --> 13:24.840
It runs on an ESP32 and it was created by a different nonprofit which I'm a board member

13:24.840 --> 13:30.280
of helpful engineering and some other people worked on it in particular Ben Coons.

13:30.280 --> 13:35.600
Now interestingly this was forked to make an oxygen concentrator which we have since

13:35.600 --> 13:37.880
quit working on called the OX.

13:37.880 --> 13:46.520
But that was forked to be used by me for NASA, the US National Aeronautics and Space Administration,

13:46.520 --> 13:50.160
to make a control system for a high tech ceramic oxygen generator.

13:50.160 --> 13:56.400
So a lot of times as I'm sure you guys understand open source code lives even if its initial

13:56.400 --> 13:58.360
purpose is not met.

13:58.360 --> 14:02.960
If you write good code that's documented with a good license you can use it for some other

14:02.960 --> 14:05.560
purpose and we're trying to do that.

14:05.560 --> 14:10.240
In fact Ben made a number of improvements that really need to come back into ventOS

14:10.240 --> 14:15.120
and I kind of need a volunteer to help me do that because there's always more software

14:15.120 --> 14:16.760
work to be done.

14:16.760 --> 14:21.160
So the ventOS architecture and this is where we're really talking about an embedded system

14:21.160 --> 14:27.360
that you guys will understand is a simple Arduino platform compiled with platform I.O.

14:27.360 --> 14:31.400
Configuration modes in platform I.O. set preprocessed and compiled time switches which give us

14:31.400 --> 14:37.120
a wide variety of hardware architectures we can compile into although the poly vent is

14:37.120 --> 14:43.680
effectively the only machine on which it really runs today but we could support other architectures.

14:43.680 --> 14:48.280
It almost doesn't run on an Arduino UNO because it's too big but technically it will run on

14:48.280 --> 14:49.800
an UNO.

14:49.800 --> 14:55.400
We use an ESP32, we have a pretty good hardware abstraction layer, the basic architecture

14:55.400 --> 15:01.240
is what's called a super loop or simple loop architecture and we believe that's appropriate

15:01.240 --> 15:08.560
for a life critical medical device like the one that we're designing.

15:08.560 --> 15:16.800
So ventOS claims to be a operating system that is universal.

15:16.800 --> 15:21.200
It's a universal platform for mechanical human ventilation.

15:21.200 --> 15:23.800
How is that possible?

15:23.800 --> 15:28.800
Well it's possible because all ventilators do almost exactly the same thing.

15:28.800 --> 15:33.760
They're relatively straightforward, they're simple devices.

15:33.760 --> 15:37.920
Simple doesn't mean easy because if you do something wrong the patient dies but they

15:37.920 --> 15:40.880
are still relatively simple devices.

15:40.880 --> 15:42.720
Thank you.

15:42.720 --> 15:48.560
In particular doctors normally want to vary the breaths per minute.

15:48.560 --> 15:51.680
As you become sicker you require more breaths per minute.

15:51.680 --> 15:53.480
You hope that doesn't happen.

15:53.480 --> 16:00.840
The inhalation time and the exhalation time ratio is varied for the comfort of the patient.

16:00.840 --> 16:05.800
If you are approaching death they may have to make that what would be very uncomfortable

16:05.800 --> 16:10.960
for a healthy person to try to keep you alive.

16:10.960 --> 16:15.200
Pressure controlled ventilation keeps constant pressure through the inhalation.

16:15.200 --> 16:21.360
You want that pressure to be low because high pressure can cause damage to your lungs but

16:21.360 --> 16:26.200
as you approach death that pressure may have to go up to try to keep you alive.

16:26.200 --> 16:32.280
Doctors I'm not a medical doctor, Victor is a physiologist not a medical doctor.

16:32.280 --> 16:34.280
Clinicians know how to balance these things.

16:34.280 --> 16:37.520
It's our desire to give them the power to do that.

16:37.520 --> 16:45.280
So basically you just blow air into the patient's lungs and then you stop and the lungs deflate

16:45.280 --> 16:46.280
on their own.

16:46.280 --> 16:49.360
That's the way positive pressure ventilation works.

16:49.360 --> 16:59.360
It's simple but you have to control all these things.

16:59.360 --> 17:03.840
So this is sort of a diagram of a universal ventilator.

17:03.840 --> 17:06.960
All ventilators are sort of the same in this sense.

17:06.960 --> 17:12.800
There's an air drive which produces air in one way or another and that's the most mechanical

17:12.800 --> 17:14.320
system that's part of it.

17:14.320 --> 17:19.160
There's a sense module and ours is completely separated in the sense that we use the vent

17:19.160 --> 17:22.760
mon which is a separate device that we would like to productize.

17:22.760 --> 17:24.120
It's not really a product.

17:24.120 --> 17:29.840
We gave a bunch away because we had a grant to give them away but it's basically a spirometer.

17:29.840 --> 17:33.800
It measures everything about human breath and if you connect it to the ventilator it

17:33.800 --> 17:36.920
allows you to see what the ventilator is doing.

17:36.920 --> 17:41.280
A controller is what this room would think of as the embedded system.

17:41.280 --> 17:43.680
That's where VentOS runs.

17:43.680 --> 17:51.640
Our interface is we use an Internet of Things based public data cloud and we're still working

17:51.640 --> 17:57.260
on aspects of the clinical interface.

17:57.260 --> 18:03.120
So if we think about philosophy, the Unix way, and of course I didn't write this, this

18:03.120 --> 18:07.800
is on Wikipedia, you can find this, is to write programs that do one thing and do it

18:07.800 --> 18:08.800
well.

18:08.800 --> 18:13.240
Write programs to work together and write programs to handle text streams because they're

18:13.240 --> 18:14.600
a universal interface.

18:14.600 --> 18:16.080
This is from the 70s.

18:16.080 --> 18:23.020
This is very old philosophy which has served the world in good stead because Linux and

18:23.020 --> 18:26.380
open source software is eating the world.

18:26.380 --> 18:31.200
How do you apply the same things to the kind of electro-mechanical devices that we're building?

18:31.200 --> 18:32.460
There aren't even chips.

18:32.460 --> 18:34.440
They're moving air around.

18:34.440 --> 18:37.400
Well, you attempt to do the same thing.

18:37.400 --> 18:40.600
You build machines that do one thing and do it well.

18:40.600 --> 18:43.960
That is not the way Johnson & Johnson would build a ventilator.

18:43.960 --> 18:47.000
They would put everything in the same case.

18:47.000 --> 18:49.420
But we're not Johnson & Johnson.

18:49.420 --> 18:50.880
We can do something different.

18:50.880 --> 18:57.680
So we make a physically separated device where physical components handle one component at

18:57.680 --> 19:01.000
a time and then they're integrated in a soft way.

19:01.000 --> 19:07.440
So by using digital control, we make them all sort of roboticizable or controllable

19:07.440 --> 19:11.800
by a controller so that we can use them and they can be reused in that way.

19:11.800 --> 19:15.920
And then in my experience, instead of handling text streams, the modern way to do this is

19:15.920 --> 19:21.120
you handle JSON objects that are communicated either via SBI or I2C.

19:21.120 --> 19:26.760
And that's kind of a universal control language that's easy for both programmers and the

19:26.760 --> 19:30.680
hardware devices to understand.

19:30.680 --> 19:32.680
So how realistic is this?

19:32.680 --> 19:38.160
I mean, that's debatable because we're nowhere close to having an FDA-based ventilator at

19:38.160 --> 19:39.160
the moment.

19:39.160 --> 19:42.360
However, we have done a lot with very little money.

19:42.360 --> 19:49.040
We built the Ventmon, which is kind of our most realized device because it's much easier

19:49.040 --> 19:50.920
than a ventilator, right?

19:50.920 --> 19:54.160
VentOS is an existing operating system.

19:54.160 --> 19:56.160
PolyVent is a ventilator.

19:56.160 --> 20:01.260
I'm very proud that we've defined two data standards based on JSON, the public invention

20:01.260 --> 20:05.600
respiratory data standard and the public convention respiratory control standard.

20:05.600 --> 20:07.200
Now, as you guys...

20:07.200 --> 20:11.000
I'm going to come back to this, but as you guys know, progress is often made through

20:11.000 --> 20:12.640
defining standards.

20:12.640 --> 20:17.240
It's often not very glamorous to do so, but the work of defining the standards is really

20:17.240 --> 20:22.360
what allows other people to take your work and utilize it in a standard way.

20:22.360 --> 20:25.840
In this case, we've done work that has not been recognized.

20:25.840 --> 20:30.100
No one else is using these standards yet, but I hope that will change.

20:30.100 --> 20:32.440
We tried to build an oxygen concentrator.

20:32.440 --> 20:34.840
We sort of stopped working on that.

20:34.840 --> 20:41.560
We also have vent display, which gives a complete dynamic display of breath plots and the things

20:41.560 --> 20:44.760
that clinicians need to do.

20:44.760 --> 20:50.400
If we map that to our diagram here, what we find is that the device that we're calling

20:50.400 --> 20:54.160
the ventilator really could be thought of as an air drive.

20:54.160 --> 20:56.400
It's the part that makes the air.

20:56.400 --> 21:01.240
We have a separate device, the ventmon, which can be used as the sense module, and we have

21:01.240 --> 21:06.840
a separate set of programs, which happens to be an IoT-defined public lake and some

21:06.840 --> 21:17.880
JavaScript that runs in a browser to do the clinical GUI aspects of the system.

21:17.880 --> 21:24.140
We're also designing a general purpose alarm device, as I'm sure you understand, in any

21:24.140 --> 21:32.160
intensive care unit situation, you have to produce alarms when the patient needs care.

21:32.160 --> 21:37.720
Now, that can occur because your machine has broken, or the battery has failed, or you've

21:37.720 --> 21:42.680
run out of power, or someone has tripped over a hose.

21:42.680 --> 21:43.680
That happens a lot.

21:43.680 --> 21:49.640
But it also can occur simply because the patient's condition is deteriorating.

21:49.640 --> 21:54.880
In any case, you have to be able to produce a device which can generically alert people

21:54.880 --> 21:58.520
to the fact that something has to be done.

21:58.520 --> 22:03.160
Following the Unix way adopted the hardware, our idea is to make a separately packageable

22:03.160 --> 22:08.520
device that could be used for a cat door, or a burglar alarm, or all kinds of other

22:08.520 --> 22:14.080
devices in hopes that we can build a community of practice using that, which will strengthen

22:14.080 --> 22:25.480
the use for medical alerts.

22:25.480 --> 22:34.960
Okay.

22:34.960 --> 22:38.200
So this is the software that I was talking about.

22:38.200 --> 22:39.660
This runs in a driver.

22:39.660 --> 22:42.960
This is what a browser, this is what is produced by the Ventmon.

22:42.960 --> 22:46.440
I probably should be showing a video, but this is actually dynamic.

22:46.440 --> 22:52.000
As the machine breathes or the patient breathes, you're seeing the pressure flow and various

22:52.000 --> 22:57.360
events like the measurement of the humidity and temperature, the end of the breath, the

22:57.360 --> 22:58.480
beginning of the breath.

22:58.480 --> 23:03.240
What you have on the right here is what a doctor in an ICU would typically compute about

23:03.240 --> 23:04.400
the breath traces.

23:04.400 --> 23:05.400
Okay.

23:05.400 --> 23:10.400
This is not super sophisticated, but the thing that I really like about it is it runs in

23:10.400 --> 23:14.400
a browser, so it's distributed generally.

23:14.400 --> 23:18.880
And then secondly, the software functionality of doing all these computations completely

23:18.880 --> 23:20.920
separated from the ventilator.

23:20.920 --> 23:25.240
In most devices, this is built into the panel of the ventilator and cannot be reused in

23:25.240 --> 23:35.520
any other way.

23:35.520 --> 23:41.000
So because of the things we've been talking about, VentoS can claim to be a universal

23:41.000 --> 23:48.840
system because it implements a hardware abstraction layer that lets you interface to turbines,

23:48.840 --> 23:57.400
fans, in our case proportional valves, bellows, other ways of producing gas.

23:57.400 --> 24:03.400
So following the open source methodology, it's not so much a machine as an ecosystem.

24:03.400 --> 24:08.360
We're trying to build a respiration ecosystem.

24:08.360 --> 24:15.120
And so as we've said, we've already seen that one piece of functionality has been added

24:15.120 --> 24:21.680
as a PCB that's put into the control module, and that is an SBI interface to the general

24:21.680 --> 24:28.240
purpose alarm device, which I mentioned previously.

24:28.240 --> 24:33.800
So you might say, well, why on earth would we ever have a respiration ecosystem?

24:33.800 --> 24:39.080
Well, there's a good reason from kind of a patient point of view, which is all of these

24:39.080 --> 24:47.000
devices which accomplish various medical purposes, a ventilator, an O2 concentrator, a bi-level

24:47.000 --> 24:53.360
positive pressure airway machine, a CPAP machine, a PAPR, a back valve mass monitor, all of

24:53.360 --> 24:59.240
those essentially need standards of respiration data exchange, which we have developed but

24:59.240 --> 25:00.960
nobody else has used.

25:00.960 --> 25:05.480
And many of them need the same SINCE module that we've been talking about in the vent

25:05.480 --> 25:06.480
model.

25:06.480 --> 25:13.200
In that sense, if you think of the way open source software has made components that work

25:13.200 --> 25:19.640
together really effectively, what we're trying to do is to create hardware and software components

25:19.640 --> 25:26.640
integrated which work together as effectively in the realm of human respiration.

25:26.640 --> 25:32.400
So in a sense, we're trying to democratize the field of medical respiration and education

25:32.400 --> 25:33.680
around it.

25:33.680 --> 25:37.040
So open source software has already shown us the way.

25:37.040 --> 25:40.280
We're just taking things that were developed by open source software and attempting to

25:40.280 --> 25:42.440
apply them to hardware.

25:42.440 --> 25:47.960
In particular, as I'm sure you guys know, the development of standards like HTTP, HTML,

25:47.960 --> 25:55.160
JSON, et cetera, are absolutely critical to the progress and interaction of multiple components

25:55.160 --> 26:00.320
in the embedded architecture world, but open source software more generally.

26:00.320 --> 26:08.920
We're trying to accomplish the same thing by producing respiration standards.

26:08.920 --> 26:11.320
These of course exist in GitHub repos.

26:11.320 --> 26:12.320
Thank you very much.

26:12.320 --> 26:18.080
In short, we built the most open extensible ecosystem for a classroom.

26:18.080 --> 26:21.120
It's the most open, best documented system.

26:21.120 --> 26:24.520
I can claim that because I evaluated all of the other ones.

26:24.520 --> 26:29.280
There are other open source ventilators, but you cannot find their designs online.

26:29.280 --> 26:30.760
So they're not really open.

26:30.760 --> 26:34.240
They're just thinking about being open.

26:34.240 --> 26:35.720
And that concludes my talk.

26:35.720 --> 26:36.720
Thank you very much.

26:36.720 --> 26:45.880
Thank you.

WEBVTT

00:00.000 --> 00:08.640
Hey everyone, thanks for coming.

00:08.640 --> 00:14.680
And yeah, today I would like to talk a little bit about the Bluetooth mesh and what we did

00:14.680 --> 00:22.260
in the Rust ecosystem to basically support it both on the embedded and on the Linux side.

00:22.260 --> 00:26.880
And it's a good continuation on the topic that we had in the previous session because

00:26.880 --> 00:29.960
it's a little bit comparable.

00:29.960 --> 00:35.880
And there's a lot of material, so basically what I will end a little time, 20 minutes,

00:35.880 --> 00:41.360
so what I will basically give you today is a lot of teasers and a lot of pointers and

00:41.360 --> 00:51.120
I hope you'll get interested and could follow the links to further investigate things.

00:51.120 --> 00:58.200
So let's get started with what the Bluetooth mesh is.

00:58.200 --> 01:07.360
Bluetooth mesh is based on the BLE, so Bluetooth Low Energy Technology, but it's designed to

01:07.360 --> 01:16.440
create a mesh network or devices on top of it, meaning that you should be able to connect

01:16.440 --> 01:26.820
nodes or devices directly in dynamic hierarchies basically.

01:26.820 --> 01:33.640
What's different between the Bluetooth mesh and the thread, for example, is that Bluetooth

01:33.640 --> 01:37.880
mesh doesn't use any routing.

01:37.880 --> 01:42.460
It's based on the managed flooding principle, meaning that the device will try to publish

01:42.460 --> 01:49.920
messages to all the devices in the range and those devices will then figure out what to

01:49.920 --> 01:54.480
do next with those messages that have been received.

01:54.480 --> 02:01.240
And it supports publish, subscribe model as we will see in a minute.

02:01.240 --> 02:05.320
So this is how it basically looks like.

02:05.320 --> 02:09.680
And it's similar to what Stefan showed us with the thread.

02:09.680 --> 02:15.080
So we have a regular node that can send and receive messages.

02:15.080 --> 02:21.360
We have relay nodes which are only there to extend the range of the network, so they're

02:21.360 --> 02:25.680
just relaying things that they are receiving.

02:25.680 --> 02:32.920
And in a similar fashion as thread, we can have a low power node that are mostly sweeping

02:32.920 --> 02:42.640
and are not active and which are accompanied by the friend nodes which will buffer messages

02:42.640 --> 02:50.400
addressed over these low power nodes.

02:50.400 --> 02:54.240
The stack looks something like this.

02:54.240 --> 02:59.200
So as I said, we have a Bluetooth low energy as a basic layer.

02:59.200 --> 03:04.880
There's a networking layer that's responsible for creating networks and exchanging keys

03:04.880 --> 03:07.360
and all that kind of things.

03:07.360 --> 03:14.400
And then we have an application layer which is completely defined in the Bluetooth mesh,

03:14.400 --> 03:22.720
meaning that all our models are predefined and we can use it as we will see now.

03:22.720 --> 03:27.520
So as I said, the models are defined.

03:27.520 --> 03:36.080
So for example, all the things that are talking like a sensor or on-off features are defined

03:36.080 --> 03:45.080
as a model on the application level on the mesh.

03:45.080 --> 03:48.040
And we can have a client and a server.

03:48.040 --> 03:56.960
Models meaning that the client and the server will exchange the messages and communicate

03:56.960 --> 03:58.760
like that.

03:58.760 --> 04:09.040
So how does it work then is that each device, each node can have multiple elements and those

04:09.040 --> 04:15.280
elements can have multiple client or server models between them.

04:15.280 --> 04:25.240
And each element has its own unique address that can be used to address an element within

04:25.240 --> 04:26.640
the device.

04:26.640 --> 04:35.080
We can also create more complex hierarchies by defining a group of addresses and defining

04:35.080 --> 04:43.760
the virtual addresses which provides us with a way to create more complex topologies and

04:43.760 --> 04:50.960
to have like a full power of published subscriber architectures on the mesh level.

04:50.960 --> 05:00.880
And every device is part of a particular network and a particular application within that network,

05:00.880 --> 05:05.920
meaning that all the messages that are exchanged between the devices are double encrypted with

05:05.920 --> 05:11.360
the network and the application key.

05:11.360 --> 05:17.440
To onboard device onto the network, we need to go through something like a provisioning

05:17.440 --> 05:25.040
process meaning that we need to have a special node that will behave like a provisioner of

05:25.040 --> 05:26.640
the network.

05:26.640 --> 05:36.160
And that node will be responsible for creating and managing the keys, setting the addresses

05:36.160 --> 05:40.240
and things like that.

05:40.240 --> 05:46.120
So what are the use cases on top of the Bluetooth low energy?

05:46.120 --> 05:54.440
We can have extended range and more flexible topologies.

05:54.440 --> 05:59.760
But we can also have existing hardware.

05:59.760 --> 06:05.720
So this is just another application on existing Bluetooth low energy hardware that can be

06:05.720 --> 06:15.960
applied but with more flexible technologies and providing an option to connect larger

06:15.960 --> 06:18.640
number of devices.

06:18.640 --> 06:24.760
So I don't want to go too deep into this because it's probably a session of its own.

06:24.760 --> 06:28.640
We heard a lot about thread here.

06:28.640 --> 06:38.600
But this is just a small comparison between all the competing technologies in the space,

06:38.600 --> 06:46.280
and their respective solutions in all the different layers.

06:46.280 --> 06:53.320
So when we started playing with this, we had one goal in mind.

06:53.320 --> 07:01.480
And that is to create a full stack, meaning that we can create application based on the

07:01.480 --> 07:08.800
Bluetooth mesh that will cover the full stack, going from the embedded microcontrollers to

07:08.800 --> 07:17.920
the Linux and having support for these applications in the cloud and try to do all that in Rust.

07:17.920 --> 07:23.840
We will talk about that a bit more in a moment.

07:23.840 --> 07:30.800
And the idea was to create a platform that could be easy to build these applications,

07:30.800 --> 07:39.080
build on both the devices and on the cloud side, but also provide a way to ease the management

07:39.080 --> 07:46.080
of the Bluetooth mesh networks.

07:46.080 --> 07:57.120
But before we dive into what we did in Rust, let's go a little bit through the current

07:57.120 --> 07:58.400
state.

07:58.400 --> 08:05.560
And on the embedded side, the ZFR is the only thing that I found in the open source that

08:05.560 --> 08:08.120
had support for the Bluetooth mesh.

08:08.120 --> 08:17.240
Of course, all the vendors had their own support, as the case that can be used out of the box.

08:17.240 --> 08:23.960
On the Linux side, everything related to the Bluetooth is basically under the BlueZ project.

08:23.960 --> 08:33.000
And the BlueZ defines the D-Bus APIs for communicating with the Bluetooth daemon on the different

08:33.000 --> 08:34.240
kind of things.

08:34.240 --> 08:39.320
And of course, they have the mesh API as well for the D-Bus.

08:39.320 --> 08:46.000
And it's used to send messages between the Bluetooth daemon and the applications that

08:46.000 --> 08:50.720
want to talk Bluetooth mesh on the Linux side.

08:50.720 --> 08:53.740
But the daemon is different.

08:53.740 --> 09:01.760
So if you want to use the mesh on the Linux box, you need to install the different package

09:01.760 --> 09:12.560
and basically disable and stop the regular Bluetooth daemon and enable the specific Bluetooth

09:12.560 --> 09:17.560
mesh daemon.

09:17.560 --> 09:24.960
There's also a provisioner tool included, which is called the Mesh CFG Client.

09:24.960 --> 09:30.080
And it's an interactive tool that allows us to do all the provisioning things.

09:30.080 --> 09:36.040
So create new networks, scan for the unprovisioned devices, add those devices to the network

09:36.040 --> 09:41.360
and create addresses for their models.

09:41.360 --> 09:45.940
One of the downsides of this tool is that it's too interactive.

09:45.940 --> 09:48.620
So it's not that easily scriptable.

09:48.620 --> 09:59.360
And it's making it hard to create reproducible networks and environments that you want to

09:59.360 --> 10:02.280
do.

10:02.280 --> 10:08.000
And the final state is then how do we create these applications on the Linux side that

10:08.000 --> 10:11.120
will do this.

10:11.120 --> 10:19.520
And there's even less examples of that on the network.

10:19.520 --> 10:25.040
All that I could find when I started looking into it was some of the Python examples done

10:25.040 --> 10:27.960
in the Bluetooth white papers.

10:27.960 --> 10:35.360
And basically those are just simple Python applications that use the D-Bus interface

10:35.360 --> 10:42.200
to basically communicate with the Mesh daemon over it.

10:42.200 --> 10:53.560
So coming from this kind of state, you could see the end goal that we try to do is to try

10:53.560 --> 11:02.720
to see how far can we go with this stack and try to re-implement most of these things in

11:02.720 --> 11:03.840
Rust.

11:03.840 --> 11:08.360
And now the question is why Rust, of course.

11:08.360 --> 11:14.800
And we found it a very good solution for system programming.

11:14.800 --> 11:23.600
So it basically allows us to create a statically compiled and strongly type, which means that

11:23.600 --> 11:38.680
it has a strong performance.

11:38.680 --> 11:43.320
We save programs without introducing runtimes and VMs.

11:43.320 --> 11:48.480
Again, very suitable for system programming for these kind of applications.

11:48.480 --> 11:53.800
And finally, it's a fairly modern language with a lot of good tooling.

11:53.800 --> 12:03.200
So people coming from other areas, for example, I don't consider myself an embedded programmer,

12:03.200 --> 12:12.200
but I feel much more comfortable playing with Rust for these use cases than I would be if

12:12.200 --> 12:17.440
I would try to do the same thing in a C.

12:17.440 --> 12:22.520
So first thing we did is to create a bit in Mesh create.

12:22.520 --> 12:31.840
And that's a basic create that we try to do is to implement all the traits that are needed

12:31.840 --> 12:35.240
for implementing the Bluetooth Mesh specification.

12:35.240 --> 12:44.120
So as you remember, all the layers of the Bluetooth Mesh, so everything needed for representing

12:44.120 --> 12:52.640
the application models or the networking layer traits should be defined in this one create.

12:52.640 --> 13:02.160
And as you can see, you will see we will be able to reuse that in all different layers

13:02.160 --> 13:03.360
of the stack.

13:03.360 --> 13:12.400
But in order to be able to reuse it in the embedded space, this create needs to be no

13:12.400 --> 13:19.880
STD meaning that it shouldn't rely on a standard library.

13:19.880 --> 13:32.520
And this is a kind of go to example to show how the sensor data representation could look

13:32.520 --> 13:41.120
like in defined by the BT Mesh create.

13:41.120 --> 13:44.240
So Rust embedded, I think is going.

13:44.240 --> 13:50.360
So how many people here are using Rust today for embedded programming?

13:50.360 --> 13:51.720
Let's go.

13:51.720 --> 13:55.560
So what's the goal here?

13:55.560 --> 14:02.680
There's a Rust embedded working group that are dedicated to this task and its goal is

14:02.680 --> 14:08.600
to enable people to run firmware using Rust.

14:08.600 --> 14:19.640
So we're targeted to the microcontrollers with the small ROM capabilities without operating

14:19.640 --> 14:23.560
system and without memory allocator.

14:23.560 --> 14:27.720
As I said, we have only 20 minutes and there's a lot of things.

14:27.720 --> 14:30.640
So I'm just giving you the pointers.

14:30.640 --> 14:38.240
So there's a lot more to be said about embedded Rust, but we don't have that much time.

14:38.240 --> 14:44.560
And the next thing, next cool thing, as I said, doing embedded with Rust is that it

14:44.560 --> 14:50.040
enables you to do quite a lot of programming things even for the firmware.

14:50.040 --> 14:55.680
So there's a project called Embassy which allows us to use basically async programming

14:55.680 --> 14:56.680
for the firmers.

14:56.680 --> 15:06.200
It provides a scheduler and the hardware obstructions that we can use to build quite capable asynchronous

15:06.200 --> 15:09.160
applications in Rust.

15:09.160 --> 15:14.520
And it has a hardware support for all the major hardware platforms today.

15:14.520 --> 15:23.400
On top of that, the project that we are involved in is building on top of the Embassy and trying

15:23.400 --> 15:28.460
to add more IoT things on top of the basic embedded developments.

15:28.460 --> 15:35.740
So communication with the cloud in terms of MQTT or HTTP, trying to support use cases

15:35.740 --> 15:47.840
like Blotot Mesh and try to create a more advanced application like OTA firmware updates.

15:47.840 --> 15:56.440
And you can see here one of the examples from the workshop that we did that I'll mention

15:56.440 --> 16:03.200
later on is, for example, how we can use the bit.image.create on the firmware to basically

16:03.200 --> 16:09.600
every time we read the sensor data, we can package that sensor data in the proper sensor

16:09.600 --> 16:15.320
Blotot Mesh message and send it over the Blotot.

16:15.320 --> 16:26.080
Then on the Linux side, there's a project called Blur which is part of the Blusie Linux

16:26.080 --> 16:34.600
official group which tries to implement all the Linux Blotot protocol stack in Rust.

16:34.600 --> 16:42.000
And at the moment, it provides support for all the major features of the Blotot, like

16:42.000 --> 16:44.700
GET or Blotot Love Energy.

16:44.700 --> 16:52.720
So what we try to do here is to provide support for the Blotot Mesh in a similar way as the

16:52.720 --> 16:56.560
rest of the Blur works.

16:56.560 --> 17:04.680
So again, nice thing about Rust is that you can use a lot of crates and existing technologies

17:04.680 --> 17:07.560
that are there for different use cases.

17:07.560 --> 17:16.280
So for example, a Blur uses a Tokyo runtime, a very frequently used runtime for building

17:16.280 --> 17:24.760
all kind of server applications in Rust and communicates with the Mesh daemon over the

17:24.760 --> 17:27.800
using the deepest crate.

17:27.800 --> 17:32.240
The good thing is, and that was the part of the plan, is to use the bit.image.create here

17:32.240 --> 17:38.880
as well to use for the Mesh traits that we would need it.

17:38.880 --> 17:44.360
So this is the quick architecture of how things work on the Linux.

17:44.360 --> 17:46.900
So I hope you can see it well.

17:46.900 --> 17:53.000
So you have a Mesh daemon which communicates directly with the devices.

17:53.000 --> 18:00.760
It has its own state in the Mesh config and the Mesh storage volumes.

18:00.760 --> 18:08.920
And it communicates using the system D-Bus to a random application, being the gateway

18:08.920 --> 18:15.800
application or some device simulator on the Linux as well.

18:15.800 --> 18:22.880
But the good thing is that you can see here is that, and this is one of the things that

18:22.880 --> 18:28.000
I personally like a lot about using Rust for these use cases, is that this code running

18:28.000 --> 18:33.800
on Linux looks pretty much similar, like the code running on the firmware.

18:33.800 --> 18:36.840
So here we are receiving the Blotot message.

18:36.840 --> 18:38.520
We are parsing it.

18:38.520 --> 18:44.520
We are creating a JSON out of it and sending it over the MQTT to the cloud.

18:44.520 --> 18:53.720
But it's very easy for a single person to jump back and forth over the different stack

18:53.720 --> 18:59.360
layers and using the similar crates and similar style code.

18:59.360 --> 19:09.520
Then it would be if we go from writing a C for the firmware and then a Python code for

19:09.520 --> 19:13.080
the gateway and then doing something in Java in the cloud, for example.

19:13.080 --> 19:16.320
So the Mesh support is not officially landed in Blur.

19:16.320 --> 19:22.720
And this is all my fault due to my laziness and other priorities.

19:22.720 --> 19:28.640
But hopefully this PR will be merged in the coming weeks, let's say.

19:28.640 --> 19:36.760
The final part of the project that we have been building is to build a kind of IoT friendly

19:36.760 --> 19:41.720
cloud platform, again, done in Rust.

19:41.720 --> 19:46.840
Here we try to provide all the services that your typical IoT application is needing.

19:46.840 --> 19:53.440
So being able to do a lot of connectivity, having a capable device registry, and being

19:53.440 --> 20:01.280
able to integrate further into the cloud applications and using digital training and all these kind

20:01.280 --> 20:04.840
of things on the other side.

20:04.840 --> 20:10.240
But again, I'm coming back to the same thing.

20:10.240 --> 20:16.840
So there's a thing called payload converter in the cloud that can actually intercept our

20:16.840 --> 20:19.320
messages coming from the gateways.

20:19.320 --> 20:27.680
And if you can remember, in the previous example, we already parsed the Bluetooth messages and

20:27.680 --> 20:28.800
sent them as a JSON.

20:28.800 --> 20:34.760
But if your gateway is sending just the row bytes, you can do that thing on the cloud,

20:34.760 --> 20:38.960
again with the same crates and with a very similar code.

20:38.960 --> 20:47.440
So we will parse the bytes, get the message, do some JSON processing and forward that message

20:47.440 --> 20:53.040
deeper, deeper into the cloud.

20:53.040 --> 20:56.280
So we were playing with this for a while.

20:56.280 --> 21:02.680
And then there was a chance to actually try to put this all into the work.

21:02.680 --> 21:09.600
At the EclipseCon, we had a hackathon and a workshop where we tried to do something

21:09.600 --> 21:16.200
to cover the whole area with a Bluetooth mesh network, provide the micro bits for people

21:16.200 --> 21:24.560
to play around with, and provide some basic applications in the cloud that will talk to

21:24.560 --> 21:25.560
each other.

21:25.560 --> 21:30.560
But the basic big architecture looked like this.

21:30.560 --> 21:37.680
So we have a public sandbox for our drug cloud consisting of Kafka and all this kind of stuff.

21:37.680 --> 21:40.320
And we wrote a gateway based on the bluer.

21:40.320 --> 21:51.040
We provided some examples of how to use micro bits with the Rust embedded drug device and

21:51.040 --> 21:57.080
the embassy and provided a couple of applications that will talk to the cloud using the Web

21:57.080 --> 21:59.920
socket in the background.

21:59.920 --> 22:07.000
So just a quick recap of how this architecture looks on the firmware.

22:07.000 --> 22:15.280
So you have a couple of layers, the embassy and the Bluetooth radio on the bottom.

22:15.280 --> 22:20.320
Then we have a drug device and the BT mesh support next one.

22:20.320 --> 22:30.800
And on top of that, we can write our own application that will do things with these messages.

22:30.800 --> 22:37.840
On the gateway side, we implemented the gateway using the bluer and we also tried to use some

22:37.840 --> 22:44.480
of the latest edge technologies to deploy and manage those gateways.

22:44.480 --> 22:50.320
So trying to use a micro shift which is the latest version of the single node Kubernetes

22:50.320 --> 22:59.880
cluster paired with the open cluster management to deploy these gateways to appropriate nodes.

22:59.880 --> 23:05.440
And I must say to my surprise, it all worked pretty well.

23:05.440 --> 23:11.120
So we had a four or five gateways based on the Intel Nux and some Raspberry Pis.

23:11.120 --> 23:14.200
Those Raspberry Pis didn't run the Kubernetes.

23:14.200 --> 23:19.520
We used the basic Podman and the Docker images to run the gateways.

23:19.520 --> 23:24.320
And that provided a very good coverage of a very large space.

23:24.320 --> 23:28.440
What we needed to do is to provide a couple of relay nodes.

23:28.440 --> 23:36.560
You can see on this other picture is to just to basically extend the range over some longer

23:36.560 --> 23:39.680
corridors that were there.

23:39.680 --> 23:48.340
But everything worked pretty good from this perspective.

23:48.340 --> 23:53.440
So that's all what I have to cover today.

23:53.440 --> 23:59.040
So as I said, there's a lot of teasers, we didn't get into anything too much deeply.

23:59.040 --> 24:00.540
But these are the communities.

24:00.540 --> 24:03.880
So hit us on the DrawGaioty Metrics channel.

24:03.880 --> 24:09.160
That's where we all hang and are happy to talk about these things.

24:09.160 --> 24:13.880
If you're interested in EBCI, I would suggest to take a look at that and the bluer thing,

24:13.880 --> 24:18.680
hopefully with the official bit image support very soon.

24:18.680 --> 24:19.680
Thanks.

24:19.680 --> 24:26.880
Thank you.

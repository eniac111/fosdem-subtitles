WEBVTT

00:00.000 --> 00:06.640
Thank you.

01:00.000 --> 01:19.280
Hello, everyone.

01:19.280 --> 01:21.280
Silence.

01:21.280 --> 01:22.280
Hello, everyone.

01:22.280 --> 01:28.040
I told my talk about building FPGA bit streams with open source tools.

01:28.040 --> 01:34.480
The important part here is open source tools, because building bit streams for FPGAs was

01:34.480 --> 01:35.880
quite a pain in the ass.

01:35.880 --> 01:40.400
A while ago, you had vendor tools which were large.

01:40.400 --> 01:41.760
You had to install them.

01:41.760 --> 01:43.320
Some of them were working on Linux.

01:43.320 --> 01:49.560
Some were working on specific distributions, if you have the right version.

01:49.560 --> 01:50.880
It wasn't fun.

01:50.880 --> 01:59.720
A few years ago, there were more developments on open source tool chains for FPGAs.

01:59.720 --> 02:05.960
Since then, a colleague of mine, Stefan, and I, I'm fiddling around with these tools and

02:05.960 --> 02:09.960
trying them out and doing stuff with FPGAs.

02:09.960 --> 02:15.880
The experience of that I will be showing today.

02:15.880 --> 02:18.240
About me, I'm Michel Trettar.

02:18.240 --> 02:24.200
I work at Pangotronics as an embedded Linux developer in the graphics team.

02:24.200 --> 02:32.440
Usually I'm doing software in Linux, sometimes user space, sometimes drivers.

02:32.440 --> 02:35.560
That's my background.

02:35.560 --> 02:39.640
Why am I doing FPGAs first?

02:39.640 --> 02:40.640
Agenda first.

02:40.640 --> 02:45.240
I will show you the open source FPGA tool chain.

02:45.240 --> 02:50.240
Then I will show you an example FPGA-based system.

02:50.240 --> 02:55.400
In the end, I will show you the insights and pain points we had when we were developing

02:55.400 --> 03:05.920
the system and give you a conclusion and an outlook on the next steps that we are tackling.

03:05.920 --> 03:08.320
Use cases for FPGAs.

03:08.320 --> 03:15.080
You want to use them if you have real-time requirements and you need a high data throughput.

03:15.080 --> 03:18.360
That's two things that you need in graphics as well.

03:18.360 --> 03:22.640
You have high data throughput because you need to push all the image data from one point

03:22.640 --> 03:24.040
to another.

03:24.040 --> 03:29.940
You have real-time requirements because you have 30 FPS, 60 FPS that you have to address,

03:29.940 --> 03:35.360
so you have a limited time span for each frame where the frame must be finished.

03:35.360 --> 03:41.520
And another use case, or you would also use them for prototyping such systems because

03:41.520 --> 03:51.000
you can fiddle around and start experimenting with different implementations.

03:51.000 --> 03:56.120
The FPGA open source tool chain is basically these four steps.

03:56.120 --> 04:01.120
You start with some HDL or description of your bit stream.

04:01.120 --> 04:05.560
Usually it's very low or VHDL.

04:05.560 --> 04:12.000
Then you have users which synthesizes the code into a netlist.

04:12.000 --> 04:18.440
Next PNR routes and places the netlist for your specific FPGA implementation.

04:18.440 --> 04:24.760
Next PNR needs to know about your FPGA architecture and which vendor you're using.

04:24.760 --> 04:32.400
This is different for Xilinx, for Altera, which is Intel now, or Lattice.

04:32.400 --> 04:37.880
You need to know something about your FPGA internal working for that.

04:37.880 --> 04:44.520
In the end you have a packer which takes the router bit stream with the configuration and

04:44.520 --> 04:50.800
writes an actual bit stream which consists of all the bits that configure the FPGA.

04:50.800 --> 04:56.000
That was quick and I won't go deeper into this because as I said we were working on

04:56.000 --> 04:59.560
this for a while and had several talks on that.

04:59.560 --> 05:03.880
One by Stefan you find it on YouTube.

05:03.880 --> 05:08.640
It's about the whose and what was of open source FPGA tools.

05:08.640 --> 05:14.400
There he will go deeper into how these tools work and how you can interact with them, how

05:14.400 --> 05:19.640
you can call them and how all of this stuff is working.

05:19.640 --> 05:26.200
The second talk of building open hardware with open software by me as well on YouTube,

05:26.200 --> 05:34.160
here I go into details how we automated this and put the FPGA toolchain into a Yocto-based

05:34.160 --> 05:41.880
BSP so that we have reproducibility on the bit streams, the tools that I used, our configuration

05:41.880 --> 05:48.040
and other providers of libraries that we are using so we can run a specific checkout of

05:48.040 --> 05:57.360
the bit repository of our BSP and be sure that we get the same build as the last time.

05:57.360 --> 06:05.680
This is also now in our SCI so we have some CI running that takes the status of the bit

06:05.680 --> 06:14.160
stream and gives us working bit stream again from the previous day.

06:14.160 --> 06:16.440
So what's in the bit stream?

06:16.440 --> 06:22.520
Basically if you come as a Linux developer you want to run Linux on your bit stream.

06:22.520 --> 06:28.120
That's where you take RISC-V, a soft core CPU.

06:28.120 --> 06:31.140
Some of them are able to run Linux.

06:31.140 --> 06:39.840
Most of them are able to synthesize for your FPGA so you have quite a few of these.

06:39.840 --> 06:47.640
So BEX with 5 is one implemented in spinal HDL, BOOM implemented in chisel, ROCKET implemented

06:47.640 --> 06:52.760
in chisel or CVA6 implemented in system very low.

06:52.760 --> 06:59.800
I said previously you could take code for your FPGA in some hardware description language.

06:59.800 --> 07:01.480
I said it's very low.

07:01.480 --> 07:07.240
Here you can see that the four cores are implemented in three different languages.

07:07.240 --> 07:19.040
So this is quite a few of different languages and each of these cores takes some periphery

07:19.040 --> 07:22.360
to make it actually work, also implemented in the same language.

07:22.360 --> 07:27.760
So once you decide for a core you more or less decide for which hardware description

07:27.760 --> 07:30.600
language and tools you are using.

07:30.600 --> 07:34.880
That's not something that's really flexible for us.

07:34.880 --> 07:39.520
And this is a point where LITEX comes in.

07:39.520 --> 07:46.880
LITEX is implemented in MEGAN, which is another hardware description language, which is based

07:46.880 --> 07:50.240
on Python.

07:50.240 --> 08:00.120
And it supports Linux on LITEX and gives various pre-configured FPGA bit streams that contain

08:00.120 --> 08:07.400
a sumrisk 5 core and support various FPGA boards that you can just run.

08:07.400 --> 08:15.740
So here you see an example from the LITEX Git repository.

08:15.740 --> 08:20.040
It shows an ACON base board with a multiple Linux SOC.

08:20.040 --> 08:22.880
You have some access to DDR.

08:22.880 --> 08:28.760
You have some access to SATA and UART.

08:28.760 --> 08:35.880
So this is basically an SOC that's able to run Linux with enough periphery to actually

08:35.880 --> 08:38.360
make it work.

08:38.360 --> 08:46.440
So there is an example for that available.

08:46.440 --> 08:52.920
The question that arises was, okay, we have this example system, but we want to fiddle

08:52.920 --> 08:59.680
around with the FPGA and want to run our own bit stream in there or at least be able to

08:59.680 --> 09:01.920
customize it to some point.

09:01.920 --> 09:08.600
So our starting question for this was, can we add our own custom cores that are written

09:08.600 --> 09:16.720
in BERILOOK into the bit stream that falls out of LITEX?

09:16.720 --> 09:19.720
For that, we decided to come up with a demo system.

09:19.720 --> 09:28.000
So the requirements for that were we are using a lambda concept ECP IX5 board.

09:28.000 --> 09:37.440
You saw it before with an ECP5 FPGA by LITES, which is supported by users and the entire

09:37.440 --> 09:38.560
tool chain.

09:38.560 --> 09:42.180
So support there is great.

09:42.180 --> 09:51.120
We want to put VEXORUS 5 with Linux into the FPGA to run Linux.

09:51.120 --> 09:54.440
And because it's already there, so the demo systems have it.

09:54.440 --> 10:01.260
And we want to add to our system an LED ring because LEDs are flashy, LEDs attract people,

10:01.260 --> 10:03.800
so it's something nice.

10:03.800 --> 10:07.320
And we want to have interaction with the system.

10:07.320 --> 10:12.160
That's why we put hand wheel there as well so you can, as a user, do it.

10:12.160 --> 10:22.320
Do some inputs to the system and get some feedback from the system.

10:22.320 --> 10:30.240
It didn't work probably because it didn't have power.

10:30.240 --> 10:37.080
So starting with VEXORUS 5 with Linux, as said, LITEX already supports this.

10:37.080 --> 10:43.080
You can go to the Linux on LITEX repository, look for this file, and you'll see an implementation

10:43.080 --> 10:49.080
for VEXORUS 5 running on the LITES ECP IX5.

10:49.080 --> 10:56.880
VEXORUS 5 is written in spinal HDL.

10:56.880 --> 11:02.760
That's neither my gun nor very look.

11:02.760 --> 11:09.320
In LITEX or in preparation for using it in LITEX, you generate the very look code for

11:09.320 --> 11:15.320
this VEXORUS 5 core rapid in Python or my gun.

11:15.320 --> 11:22.760
And after that, LITEX can just integrate the newly created core or generated core into

11:22.760 --> 11:26.840
the SOC.

11:26.840 --> 11:33.320
Here's an example target which supports light DRAM for memory access and light SD card for

11:33.320 --> 11:39.960
using an SD card.

11:39.960 --> 11:48.360
The LED ring supports the WS2812 protocol, which is a single wire protocol to control

11:48.360 --> 11:52.440
LEDs or more than one LED.

11:52.440 --> 12:00.280
It's usually used in other fruit LED stripes, but you can find various cheap clones on Alibaba

12:00.280 --> 12:02.680
and forever.

12:02.680 --> 12:07.440
There is already a core for controlling this protocol implemented in LITEX.

12:07.440 --> 12:12.280
So it's there, coded in Megan.

12:12.280 --> 12:16.000
It works as an IOM mapped bus slave.

12:16.000 --> 12:25.040
So from Linux, you just write to the registers and LEDs flash and change the colors.

12:25.040 --> 12:37.800
And on the bus, you have four bytes per LED, so that's the three colors plus whatever.

12:37.800 --> 12:46.400
Code is done via hand wheel, which is from Amazon, which is usually used for CNC stuff,

12:46.400 --> 12:56.680
so it has 100 steps and you just can turn it around and it gives you a rotary encoder

12:56.680 --> 13:03.640
with two signals where you can find the direction of rotation.

13:03.640 --> 13:07.320
We took some code of the Internet for that.

13:07.320 --> 13:09.560
It's implemented in Verilog.

13:09.560 --> 13:12.520
There are various examples for that.

13:12.520 --> 13:17.120
We wrapped it in Python so that we can use it in LITEX.

13:17.120 --> 13:26.320
And this one runs as a bus master and is able to control the LED core via this connection.

13:26.320 --> 13:35.600
So it just sends right this color to this LED on the bus.

13:35.600 --> 13:42.440
So if you put all of it together, in the middle we have the FPGA.

13:42.440 --> 13:50.280
On the right side, we have the already existing system with the VEXRIS 5 running Linux, the

13:50.280 --> 13:55.800
light SD card, which is connected to the SD card, the light DRAM, which is connected to

13:55.800 --> 13:58.720
our memory.

13:58.720 --> 14:07.320
All of these are put together via a bus, details are not important, it's a memory bus to communicate

14:07.320 --> 14:09.320
between cores.

14:09.320 --> 14:20.520
On the left-hand side, you see the encoder, which is implemented in Verilog, which is

14:20.520 --> 14:22.280
connected to the hand wheel.

14:22.280 --> 14:30.280
So this is one thing we added to the bit stream, and we have the LED.py, which is my gun for

14:30.280 --> 14:43.800
the LED controller, which is also added to the bit stream and controls the LED ring.

14:43.800 --> 14:49.080
So how this is integrated into LITEX?

14:49.080 --> 14:55.320
We created a new LITEX target, LITEX distinguishes between targets and platforms.

14:55.320 --> 15:02.640
Platforms are the actual boards, targets are the SOC that you synthesize into your FPGA.

15:02.640 --> 15:10.320
So we took the existing platform and added a new target for our own SOC.

15:10.320 --> 15:12.680
Because it's Python, we have inheritance.

15:12.680 --> 15:22.440
We just inherited from the example base SOC with the LITEX core and the other, the VEXWIS5

15:22.440 --> 15:24.080
core and the other stuff.

15:24.080 --> 15:31.040
We configured it, instantiated it, reconfigured the pins so that we can actually connect our

15:31.040 --> 15:41.560
own peripherals, so the hand wheel and the LEDs, to the connector of the board.

15:41.560 --> 15:50.320
Add the LED core and add the rotary encoder, in our case it's a decoder for interacting

15:50.320 --> 15:53.480
with the hand wheel, and we are done.

15:53.480 --> 16:04.160
All of this customization is about 200 lines of Python code.

16:04.160 --> 16:12.040
So what we encountered and fixed during this process, after we added our custom cores,

16:12.040 --> 16:16.760
suddenly Linux was booting but it was not able to access the SD card anymore.

16:16.760 --> 16:25.920
We were suspecting various problems in the end, like timing or that our bit stream generation

16:25.920 --> 16:27.960
failed or something.

16:27.960 --> 16:35.960
In the end, it turned out, due to adding our new custom cores, the memory map on the bus

16:35.960 --> 16:41.600
has changed and the SD RAM controller has changed its base address.

16:41.600 --> 16:48.240
And Linux didn't know about that, because we were using just the device tree that we

16:48.240 --> 16:50.280
took from the example.

16:50.280 --> 16:59.800
So we changed our Yacht build to take the configuration for the Litex core, generate

16:59.800 --> 17:06.600
a device tree from that and give it to Linux, and that way Linux took the correct base address

17:06.600 --> 17:15.360
and uses the correct base address and is able to use the SD card again.

17:15.360 --> 17:21.760
So that's something that will come up later as well, because if you reconfigure your base

17:21.760 --> 17:27.920
system and device tree changes, you have to make sure that your device tree matches your

17:27.920 --> 17:30.600
system that you're using.

17:30.600 --> 17:39.840
And one other thing is there is some boot loader in the FPGA or in the bit stream for

17:39.840 --> 17:46.160
early bring up, which corresponds to the ROM code or the ROM boot loader that Marco mentioned

17:46.160 --> 17:47.240
previously.

17:47.240 --> 17:50.880
So it's in the bit stream.

17:50.880 --> 17:58.560
And it usually requires, so we compiled the boot loader and then it started to re-synthesize

17:58.560 --> 18:01.840
the bit stream, run place and route again.

18:01.840 --> 18:07.640
So this is quite fast, but it's still, in our case, six to eight minutes.

18:07.640 --> 18:13.280
That's not something you want to have if you're just compiling a really small binary.

18:13.280 --> 18:24.000
So we changed our Yacht build to synthesize and keep enough space in the ROM, in the area

18:24.000 --> 18:28.760
and compiled the ROM boot loader and just put it together afterwards.

18:28.760 --> 18:38.240
So this works a lot faster if you're fiddling around there.

18:38.240 --> 18:41.120
Pain points.

18:41.120 --> 18:43.360
Megan is not really maintained anymore.

18:43.360 --> 18:45.080
There is a successor for it.

18:45.080 --> 18:50.080
It's Amaranth.

18:50.080 --> 18:58.040
LightX is currently still using Megan, migrating it to Amaranth is not really feasible.

18:58.040 --> 19:03.120
There are ideas to change it to a new hardware description language.

19:03.120 --> 19:09.120
I'm not sure what's happening there, but we saw, especially for simulation, we saw that

19:09.120 --> 19:16.560
Megan generates invalid Verilog code or code you wouldn't want to assimilate.

19:16.560 --> 19:17.560
That's something.

19:17.560 --> 19:21.480
Currently, we have to live with it.

19:21.480 --> 19:29.160
Another observation was that the Yacht environment wasn't as reproducible as we expected.

19:29.160 --> 19:31.920
We're not sure what's the cause for that.

19:31.920 --> 19:39.520
If we are missing it somewhere, that there's some seed for compiling or for a place and

19:39.520 --> 19:43.160
route which we haven't fixed.

19:43.160 --> 19:49.920
So we saw that there's sometimes a failing bit stream falling out of the Yacht build

19:49.920 --> 19:54.120
that should be actually reproducible.

19:54.120 --> 20:01.960
And we wanted to use JTAG to debug the early boot of the VexRisk 5 and look into it.

20:01.960 --> 20:09.120
We are already flashing our bit stream via JTAG on the FPGA.

20:09.120 --> 20:14.800
So we have a JTAG connected to the board, but we were not able to connect it to the

20:14.800 --> 20:23.920
VexRisk 5 JTAG connector so that we could add the VexRisk 5 core to our JTAG chain.

20:23.920 --> 20:26.400
That's something we can work around.

20:26.400 --> 20:31.160
We can just use different pins, but we have to use a second JTAG for that.

20:31.160 --> 20:40.480
So that's something that's not that great and we haven't figured out yet.

20:40.480 --> 20:50.960
According to the conclusion, adding and customizing LightX targets is really convenient.

20:50.960 --> 20:52.840
It's something you have to figure out.

20:52.840 --> 20:59.320
You have to work into it.

20:59.320 --> 21:06.720
But once you're in there, I said it's 200 lines for configuring.

21:06.720 --> 21:09.920
So that is nice.

21:09.920 --> 21:16.800
The step from Blinky to just get an LED flashing to an SOC is really large.

21:16.800 --> 21:20.600
It's not really surprising because it's much more.

21:20.600 --> 21:26.880
But also from things that you have to configure, things where you've misconfigured something

21:26.880 --> 21:33.760
and it's just not working, you have really many knobs that you can turn and your system

21:33.760 --> 21:38.560
will surprise you.

21:38.560 --> 21:44.520
And with all this tool chain, LightX, there are different modules in LightX.

21:44.520 --> 21:46.720
All of them have to be in sync.

21:46.720 --> 21:53.080
Sometimes it happens that if you just update one component, you will run into surprises.

21:53.080 --> 21:58.280
So it's really important to make sure that you have something around this entire tool

21:58.280 --> 22:04.760
chain that keeps all your tools fixed on a specific version that you know which version

22:04.760 --> 22:11.040
you are using also for reporting bugs.

22:11.040 --> 22:17.920
That's what Yopto is doing for us or is the plan to have.

22:17.920 --> 22:25.480
So the next steps are maybe we want to run a kernel CI on the Linux on LightX system

22:25.480 --> 22:30.400
so that we can just take Linux kernel and run it against the system.

22:30.400 --> 22:36.840
Here comes the problem that kernel CI expects a device feed that's upstream which is kind

22:36.840 --> 22:43.400
of a conflict with the generation of the device that has to match your target.

22:43.400 --> 22:50.560
Then we see that Linux takes ages to boot on the Vexarisk 5, about two minutes.

22:50.560 --> 22:58.360
Not sure if that's because the core is just slow or if there is something we are waiting

22:58.360 --> 23:04.680
for in user space that just can be fixed.

23:04.680 --> 23:07.680
The Vexarisk 5 actually supports multi-core systems.

23:07.680 --> 23:11.880
We weren't able to boot this yet.

23:11.880 --> 23:19.800
And maybe we want to look into using the same system on the concept with different Vexarisk

23:19.800 --> 23:20.800
5 cores.

23:20.800 --> 23:23.600
I said before there are four different cores in different languages.

23:23.600 --> 23:29.880
All of them usually generate very low code so it should be possible to integrate it into

23:29.880 --> 23:35.360
LightX.

23:35.360 --> 23:37.240
Show me the source.

23:37.240 --> 23:38.240
It's on GitHub.

23:38.240 --> 23:49.360
This is Yopto meta layer where you can find the code for the LED ring or the entire SOC

23:49.360 --> 23:56.120
configuration, the code for the handwheel and a few other fixes that we did.

23:56.120 --> 24:02.640
So you can add this to a Yopto workspace and should be able to reproduce the bitstream

24:02.640 --> 24:07.240
that we built.

24:07.240 --> 24:10.120
So thank you for your attention.

24:10.120 --> 24:11.120
That's me.

24:11.120 --> 24:12.120
That's my colleague Stefan.

24:12.120 --> 24:19.920
You can find us, send us an email if you have questions or just ask me and find me somewhere.

24:19.920 --> 24:21.440
Thank you.

24:21.440 --> 24:22.440
Okay.

24:22.440 --> 24:31.840
We have time for literally one question.

24:31.840 --> 24:39.800
And this person here was the first one.

24:39.800 --> 24:40.800
Thank you for your talk.

24:40.800 --> 24:49.400
I had one question about the address changing in the device tree.

24:49.400 --> 24:56.280
In microcontroller world you can have a lot of microcontrollers with the same addresses

24:56.280 --> 25:00.440
for the common devices like for SCM32.

25:00.440 --> 25:16.320
All the SCM32 have the same base address for RAM.

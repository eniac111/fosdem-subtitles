1
0:00:00.000 --> 0:00:13.920
It's good to learn at the errors of someone else, I would say.

2
0:00:13.920 --> 0:00:22.160
We all do errors, but if we can avoid doing all of them on our own, that's a little bit

3
0:00:22.160 --> 0:00:24.000
better.

4
0:00:24.000 --> 0:00:32.160
That's why I'm going to share with you today a set of my favorite errors I have seen in

5
0:00:32.160 --> 0:00:35.960
embedded products.

6
0:00:35.960 --> 0:00:39.760
If you have worked with me in the past, don't worry.

7
0:00:39.760 --> 0:00:45.760
I'm changing details of all of the examples that you cannot figure out which project it

8
0:00:45.760 --> 0:00:48.640
exactly was.

9
0:00:48.640 --> 0:00:51.520
No panic.

10
0:00:51.520 --> 0:01:03.280
But before we start, a disclaimer, I'm a security person, so I have my bias.

11
0:01:03.280 --> 0:01:08.920
And now a task for you, an important task for you.

12
0:01:08.920 --> 0:01:11.400
Concentrate.

13
0:01:11.400 --> 0:01:18.320
Concentrate and think about an embedded product or project you have been working on.

14
0:01:18.320 --> 0:01:24.680
It may be something that you are working on right now, or it may be something you have

15
0:01:24.680 --> 0:01:28.520
been working with in the past.

16
0:01:28.520 --> 0:01:30.520
Concentrate.

17
0:01:30.520 --> 0:01:34.000
You have one?

18
0:01:34.000 --> 0:01:36.040
Keep it.

19
0:01:36.040 --> 0:01:43.480
We are staying honest with ourselves because count one point for every single error on my

20
0:01:43.480 --> 0:01:46.480
list that was in your project.

21
0:01:46.480 --> 0:01:48.480
Okay?

22
0:01:48.480 --> 0:01:52.480
You stay honest with yourself.

23
0:01:52.480 --> 0:01:54.480
The first one.

24
0:01:54.480 --> 0:01:56.480
Easy.

25
0:01:56.480 --> 0:01:59.480
Binary Synget.

26
0:01:59.480 --> 0:02:09.480
When we are thinking about this, we probably would say...

27
0:02:09.480 --> 0:02:16.480
I think your microphone is muted.

28
0:02:16.480 --> 0:02:18.480
No, it's not muted.

29
0:02:18.480 --> 0:02:20.480
It's green.

30
0:02:20.480 --> 0:02:21.480
Okay.

31
0:02:21.480 --> 0:02:30.280
When we get to binary Synget, what you think about at the beginning is some beginner developer

32
0:02:30.280 --> 0:02:35.400
that got the application, compiled it, and then everything to get.

33
0:02:35.400 --> 0:02:36.400
Right?

34
0:02:36.400 --> 0:02:40.200
But it's not the whole truth.

35
0:02:40.200 --> 0:02:45.600
I have seen binaries in Git for different reasons, too.

36
0:02:45.600 --> 0:02:50.920
One important example, firmware.

37
0:02:50.920 --> 0:02:59.200
For a big project, and I started talking to the team about why do we have that binary

38
0:02:59.200 --> 0:03:00.600
in Git.

39
0:03:00.600 --> 0:03:01.600
But it's hard to compile.

40
0:03:01.600 --> 0:03:04.080
You need that to change the distribution version.

41
0:03:04.080 --> 0:03:07.600
Then you have to patch this and that.

42
0:03:07.600 --> 0:03:08.840
So it was too complicated.

43
0:03:08.840 --> 0:03:11.600
They just put it in Git.

44
0:03:11.600 --> 0:03:15.160
And in the to-do list, we are going to compile it later.

45
0:03:15.160 --> 0:03:23.760
That later, it took some time to arrive.

46
0:03:23.760 --> 0:03:25.000
Right?

47
0:03:25.000 --> 0:03:33.640
My suggestion, if you are thinking about putting binaries in Git, first thing.

48
0:03:33.640 --> 0:03:43.320
And then what you can do is at the minimum, put a script that compiles that binary.

49
0:03:43.320 --> 0:03:49.080
At the maximum, in your CI, that of course you have one.

50
0:03:49.080 --> 0:03:56.920
In your CI, put a different job that is doing all the complicated work to compile that firmware

51
0:03:56.920 --> 0:04:01.520
binary whatever.

52
0:04:01.520 --> 0:04:12.000
This binary, if it can be compiled from source, would make sure that Alberto, who is here,

53
0:04:12.000 --> 0:04:19.320
for people who don't know Alberto, you should know him, Alberto won't be crying when he

54
0:04:19.320 --> 0:04:26.880
audits your repository for license compliance.

55
0:04:26.880 --> 0:04:33.800
And for me, as a security person, when I see binaries in Git, I tell myself, what do we

56
0:04:33.800 --> 0:04:34.800
have here?

57
0:04:34.800 --> 0:04:41.880
Probably five years versions of everything with all the CVs from the last five years.

58
0:04:41.880 --> 0:04:43.280
Great.

59
0:04:43.280 --> 0:04:49.320
Try to avoid binaries in Git except if you really know what you are doing.

60
0:04:49.320 --> 0:04:52.480
But really know what you are doing.

61
0:04:52.480 --> 0:04:57.560
Okay, forgotten dependencies number four.

62
0:04:57.560 --> 0:05:00.440
Do you know what you have in your project?

63
0:05:00.440 --> 0:05:01.440
Really?

64
0:05:01.440 --> 0:05:02.440
No?

65
0:05:02.440 --> 0:05:03.440
Yeah.

66
0:05:03.440 --> 0:05:04.440
Yeah.

67
0:05:04.440 --> 0:05:05.440
Yeah.

68
0:05:05.440 --> 0:05:12.320
Not knowing what you have in your project that quite often happens for embedded project

69
0:05:12.320 --> 0:05:23.560
that use one Git repo and they copy everything in this library's configuration files and

70
0:05:23.560 --> 0:05:30.840
then after 10 or 15 years, nobody knows what is in there.

71
0:05:30.840 --> 0:05:40.000
But it may also happen when you are using more advanced systems like Yocto because there

72
0:05:40.000 --> 0:05:46.200
are quite few people looking into the Yocto dependency list to figure out what they have

73
0:05:46.200 --> 0:05:48.040
in their build.

74
0:05:48.040 --> 0:05:56.120
And when they do, they look for the first time they start shouting and running away.

75
0:05:56.120 --> 0:05:58.240
I test for you.

76
0:05:58.240 --> 0:06:03.840
In your project, the same project that we are honestly counting points for, how many

77
0:06:03.840 --> 0:06:08.560
open SSL versions are there?

78
0:06:08.560 --> 0:06:13.280
Are you really sure there's zero?

79
0:06:13.280 --> 0:06:14.280
Okay.

80
0:06:14.280 --> 0:06:16.280
We are going to add it.

81
0:06:16.280 --> 0:06:17.280
That could be fun.

82
0:06:17.280 --> 0:06:18.280
One copy.

83
0:06:18.280 --> 0:06:24.080
Yeah, there are some people that may be this one.

84
0:06:24.080 --> 0:06:26.880
Okay, let's go forward.

85
0:06:26.880 --> 0:06:31.000
Less than three, more than three.

86
0:06:31.000 --> 0:06:33.000
Some people think that may be more than three.

87
0:06:33.000 --> 0:06:35.200
And I think most of the people are not really sure.

88
0:06:35.200 --> 0:06:37.760
Okay, how many people are not sure?

89
0:06:37.760 --> 0:06:41.320
Yeah.

90
0:06:41.320 --> 0:06:44.480
And it's not only open SSL.

91
0:06:44.480 --> 0:06:52.760
For a security researcher, open SSL thinks that you need to update frequently.

92
0:06:52.760 --> 0:06:56.600
But there are other libraries like that.

93
0:06:56.600 --> 0:07:04.440
If you do not know what you have as dependencies, have a look and think how you can improve

94
0:07:04.440 --> 0:07:07.440
yourself here.

95
0:07:07.440 --> 0:07:16.200
And for those who have managers who do not understand why looking for dependencies is

96
0:07:16.200 --> 0:07:20.880
important, use the word S-bomb.

97
0:07:20.880 --> 0:07:24.920
We are generating an S-bomb.

98
0:07:24.920 --> 0:07:31.560
For those who do not know what an S-bomb is yet, I assume that in 24 months you are going

99
0:07:31.560 --> 0:07:33.120
to learn that.

100
0:07:33.120 --> 0:07:37.280
The hard way.

101
0:07:37.280 --> 0:07:39.440
Number three.

102
0:07:39.440 --> 0:07:46.600
Number three is not considering vendor support for everything you use in your project from

103
0:07:46.600 --> 0:07:49.920
the beginning.

104
0:07:49.920 --> 0:07:58.520
A classical example is not very open source friendly support for a processor or not completely

105
0:07:58.520 --> 0:07:59.600
up to date.

106
0:07:59.600 --> 0:08:04.720
But this is going and getting better.

107
0:08:04.720 --> 0:08:12.400
What I would like to give you an example is an embedded product I was working with.

108
0:08:12.400 --> 0:08:18.240
They were using some quite specialized devices.

109
0:08:18.240 --> 0:08:19.240
Good quality.

110
0:08:19.240 --> 0:08:24.720
The product itself was very good quality.

111
0:08:24.720 --> 0:08:31.080
With one asterisk.

112
0:08:31.080 --> 0:08:36.080
The chip itself was done by a company of three.

113
0:08:36.080 --> 0:08:38.840
Including people doing drivers.

114
0:08:38.840 --> 0:08:42.040
So of course the driver wasn't upstreamed when I looked into it.

115
0:08:42.040 --> 0:08:46.920
It wasn't in the state to being upstreamed any time soon.

116
0:08:46.920 --> 0:08:52.720
With if-defs all around the place in the code.

117
0:08:52.720 --> 0:08:56.400
They were very welcome to accept patches.

118
0:08:56.400 --> 0:09:01.240
But you had to write all of them and test yourself.

119
0:09:01.240 --> 0:09:06.120
I recommend everyone starting an embedded product.

120
0:09:06.120 --> 0:09:11.160
When you have the first list of components that you want to use, have a look of them

121
0:09:11.160 --> 0:09:17.400
and figure out how much it's going to cost to put that chip.

122
0:09:17.400 --> 0:09:24.800
Maybe choosing a different chip, even if the chip is a little bit more expensive or harder

123
0:09:24.800 --> 0:09:34.640
to get, it's going to be less expensive at the end.

124
0:09:34.640 --> 0:09:35.640
Number two.

125
0:09:35.640 --> 0:09:42.480
Update added last minute.

126
0:09:42.480 --> 0:09:49.160
That is one of my favorites.

127
0:09:49.160 --> 0:09:55.920
It has a pretty important impact on the system quite usually.

128
0:09:55.920 --> 0:10:02.800
It means quite often that the flash size is too small.

129
0:10:02.800 --> 0:10:06.560
That the partitioning scheme has to be changed.

130
0:10:06.560 --> 0:10:11.600
That you need to change the whole boot process.

131
0:10:11.600 --> 0:10:17.480
And you need to retest all that from the beginning.

132
0:10:17.480 --> 0:10:28.200
With the legislation lurking behind the scenes, if you are starting working on an embedded

133
0:10:28.200 --> 0:10:40.280
project, and update system is not yet on the requirement list, it's good to have a look.

134
0:10:40.280 --> 0:10:47.040
Because for some of you, what's going to happen just before the release, the management comes

135
0:10:47.040 --> 0:10:51.480
and we have a checklist here for you before we release.

136
0:10:51.480 --> 0:10:58.040
And on the checklist, update as bomb.

137
0:10:58.040 --> 0:11:10.240
If you are not prepared, it may be a good idea to get vacation before that.

138
0:11:10.240 --> 0:11:14.920
And now, my favorite.

139
0:11:14.920 --> 0:11:21.760
Working on a bad system on the life system.

140
0:11:21.760 --> 0:11:31.480
My real example of that were people working on a system with a very expensive FPGA.

141
0:11:31.480 --> 0:11:33.520
And very expensive peripherals.

142
0:11:33.520 --> 0:11:38.000
So they basically had one piece.

143
0:11:38.000 --> 0:11:45.000
The team was small, so they were working all on the same system.

144
0:11:45.000 --> 0:11:48.840
In addition, it was based on Ubuntu.

145
0:11:48.840 --> 0:11:55.480
So what they did, they were installing packages, creating sim links because something didn't

146
0:11:55.480 --> 0:12:02.040
want to compile, changing configuration files, and of course there was no single place when

147
0:12:02.040 --> 0:12:04.360
they documented it all.

148
0:12:04.360 --> 0:12:10.280
Imagine what happened when they started building the second prototype.

149
0:12:10.280 --> 0:12:15.440
That was a little bit complex.

150
0:12:15.440 --> 0:12:19.700
Why not developing on the life system when you are prototyping, you do not know how it's

151
0:12:19.700 --> 0:12:28.280
going to work during later on if you are not going to change the approach you are going

152
0:12:28.280 --> 0:12:29.280
to take.

153
0:12:29.280 --> 0:12:30.280
Why not?

154
0:12:30.280 --> 0:12:35.000
In this case, DevOps.

155
0:12:35.000 --> 0:12:39.400
It's not a catchy word to get more views of the video.

156
0:12:39.400 --> 0:12:41.640
It's really something that you can use.

157
0:12:41.640 --> 0:12:48.640
Use the DevOps tools as answerable, for example, in this case, so that you have a script that

158
0:12:48.640 --> 0:12:52.880
exactly deploys the system as it needs to be.

159
0:12:52.880 --> 0:12:54.520
And the right moment.

160
0:12:54.520 --> 0:13:03.160
And keep the script in a version control system so then you can work on it and update during

161
0:13:03.160 --> 0:13:07.760
the system life.

162
0:13:07.760 --> 0:13:13.320
We are getting to the end of my favorite list.

163
0:13:13.320 --> 0:13:16.560
And now I would like to make a check.

164
0:13:16.560 --> 0:13:21.720
How many of you have projects with five points?

165
0:13:21.720 --> 0:13:23.000
All five points.

166
0:13:23.000 --> 0:13:25.000
We have some.

167
0:13:25.000 --> 0:13:27.000
Okay.

168
0:13:27.000 --> 0:13:32.640
Congratulations for your honesty.

169
0:13:32.640 --> 0:13:34.960
Congratulations for your honesty.

170
0:13:34.960 --> 0:13:37.960
To yourself.

171
0:13:37.960 --> 0:13:47.360
That's the decision of our managers.

172
0:13:47.360 --> 0:13:54.800
I could do a little bit of explanation how to explain to managers, but I think that would

173
0:13:54.800 --> 0:14:00.720
be another talk of how to explain that to managers.

174
0:14:00.720 --> 0:14:13.440
What I would recommend you today, in a new project you are working on, take the list,

175
0:14:13.440 --> 0:14:23.640
use one of the subjects, one of the problems that happens in this project, and remove that

176
0:14:23.640 --> 0:14:30.200
single one for now.

177
0:14:30.200 --> 0:14:40.120
For quite many of them, talking about legislations, IP compliance, S-bombs, stuff like that, works

178
0:14:40.120 --> 0:14:44.160
with the management.

179
0:14:44.160 --> 0:14:51.240
If you are a short talk to Albert again.

180
0:14:51.240 --> 0:14:55.480
For some other cases, it may be a little bit more complicated.

181
0:14:55.480 --> 0:15:07.320
But in my experience, talking about legal, talking about cost, maintenance has cost.

182
0:15:07.320 --> 0:15:16.400
If you choose something that is hard to maintain, it's going to cost expenses, but for company

183
0:15:16.400 --> 0:15:20.680
finances and related expressions.

184
0:15:20.680 --> 0:15:29.640
That helps.

185
0:15:29.640 --> 0:15:36.240
I hope that was helpful for you, that you have learned something, you learned some techniques,

186
0:15:36.240 --> 0:15:43.240
and now I have planned some time to get a little bit of feedback from the audience.

187
0:15:43.240 --> 0:15:49.960
We have a question here.

188
0:15:49.960 --> 0:16:00.480
On the other side.

189
0:16:00.480 --> 0:16:07.640
In the front row.

190
0:16:07.640 --> 0:16:08.640
Thank you.

191
0:16:08.640 --> 0:16:11.840
Thanks for the talk.

192
0:16:11.840 --> 0:16:18.320
Your first point was binaries and GITs.

193
0:16:18.320 --> 0:16:29.440
When we are developing an embedded system and compiling firmware, what's a good solution

194
0:16:29.440 --> 0:16:37.120
when we are not making releases but in between, if we need to have access to the binary file

195
0:16:37.120 --> 0:16:48.320
and make sure that it's the last version, what's the solution about putting just the

196
0:16:48.320 --> 0:16:51.120
binary in GIT?

197
0:16:51.120 --> 0:16:56.440
If I understand the question correctly, your question was, when you have a firmware in

198
0:16:56.440 --> 0:17:03.680
your product, you want to know that you always have the latest version?

199
0:17:03.680 --> 0:17:04.680
Yes.

200
0:17:04.680 --> 0:17:10.400
That's not a release.

201
0:17:10.400 --> 0:17:14.480
I don't think it's doable with CICT.

202
0:17:14.480 --> 0:17:19.480
I can see two cases in such a situation.

203
0:17:19.480 --> 0:17:23.080
Either you are compiling the firmware yourself.

204
0:17:23.080 --> 0:17:24.080
Yes.

205
0:17:24.080 --> 0:17:26.840
Or you are getting from the vendor.

206
0:17:26.840 --> 0:17:30.600
If you are getting from the vendor because there's some feature they have added that's

207
0:17:30.600 --> 0:17:32.600
a little bit more complex.

208
0:17:32.600 --> 0:17:36.480
In this case, you don't really have an option.

209
0:17:36.480 --> 0:17:38.320
If you are computing yourself.

210
0:17:38.320 --> 0:17:43.960
And it's hard to compile.

211
0:17:43.960 --> 0:17:51.240
I prefer to have a separate build stage for the firmware itself.

212
0:17:51.240 --> 0:17:54.960
You may have different branches for the firmware.

213
0:17:54.960 --> 0:17:59.000
You are using every single dependency from a different report.

214
0:17:59.000 --> 0:18:07.360
A different build system when you are using multi-stage CI.

215
0:18:07.360 --> 0:18:08.360
We can chat.

216
0:18:08.360 --> 0:18:09.360
Okay.

217
0:18:09.360 --> 0:18:10.360
Maybe I'm not as advanced as this.

218
0:18:10.360 --> 0:18:14.320
Maybe you can chat about the details of setting it up later.

219
0:18:14.320 --> 0:18:15.320
Thanks.

220
0:18:15.320 --> 0:18:16.320
Yeah.

221
0:18:16.320 --> 0:18:17.320
Okay.

222
0:18:17.320 --> 0:18:18.320
Any other questions?

223
0:18:18.320 --> 0:18:25.320
We have someone in the middle.

224
0:18:25.320 --> 0:18:29.320
In the front.

225
0:18:29.320 --> 0:18:31.320
Yes.

226
0:18:31.320 --> 0:18:35.960
Thank you very much for the presentation.

227
0:18:35.960 --> 0:18:44.040
I wanted to ask if you have a product which is really long running, like several years,

228
0:18:44.040 --> 0:18:49.760
and then regarding this vendor support for hardware components.

229
0:18:49.760 --> 0:18:54.800
Sometimes on our project, it is like some of these components are running into end of

230
0:18:54.800 --> 0:18:57.560
life.

231
0:18:57.560 --> 0:19:02.680
Is there a strategy or something like that where you can anticipate this kind of scenario

232
0:19:02.680 --> 0:19:09.680
where your product really has a long life cycle and then you have to really think about

233
0:19:09.680 --> 0:19:14.760
what is some of our hardware components having end of life or something like that?

234
0:19:14.760 --> 0:19:15.760
Okay.

235
0:19:15.760 --> 0:19:18.880
Unfortunately, the micro level wasn't great.

236
0:19:18.880 --> 0:19:21.080
I'm not sure I cached everything.

237
0:19:21.080 --> 0:19:30.920
If I do a summary of what you have said, you have an example of a project using components

238
0:19:30.920 --> 0:19:34.840
that may be reaching end of life.

239
0:19:34.840 --> 0:19:43.360
And you want to support, in general, you want to support it for a very long time.

240
0:19:43.360 --> 0:19:51.320
So what to do in this case?

241
0:19:51.320 --> 0:19:54.920
It depends if it's about drivers, about other components.

242
0:19:54.920 --> 0:20:01.960
If you are about drivers, drivers in Linux get removed really, really, really late.

243
0:20:01.960 --> 0:20:05.880
So normally the driver should still be there in the latest system.

244
0:20:05.880 --> 0:20:14.080
There may be some changes that are not exactly compatible with what you are using.

245
0:20:14.080 --> 0:20:15.080
That's true.

246
0:20:15.080 --> 0:20:21.880
You may have vendor BSP that they stopped upgrading, and when that happens, that's a

247
0:20:21.880 --> 0:20:22.880
big problem.

248
0:20:22.880 --> 0:20:31.400
One solution is stuck with the vendor, but if they do not want to understand what you

249
0:20:31.400 --> 0:20:48.360
need, I would probably try to create some abstraction layers and keep some parts on

250
0:20:48.360 --> 0:20:57.080
the older versions and migrate the newer parts, things that you can maintain actually.

251
0:20:57.080 --> 0:21:04.000
Then in this case, it will depend exactly on the case, on the situation, which component

252
0:21:04.000 --> 0:21:05.000
it is.

253
0:21:05.000 --> 0:21:06.000
It will depend.

254
0:21:06.000 --> 0:21:07.000
Yeah.

255
0:21:07.000 --> 0:21:08.000
Complicated.

256
0:21:08.000 --> 0:21:09.000
Okay.

257
0:21:09.000 --> 0:21:10.000
I've got a second.

258
0:21:10.000 --> 0:21:20.000
Could you put your hands up again just so I can see who is there.

259
0:21:20.000 --> 0:21:29.640
Thank you for your talk.

260
0:21:29.640 --> 0:21:34.200
What if you had to convince your colleagues to follow these practices?

261
0:21:34.200 --> 0:21:39.280
You put them in place, but management doesn't really care much about them and doesn't enforce

262
0:21:39.280 --> 0:21:40.280
them.

263
0:21:40.280 --> 0:21:41.280
Okay.

264
0:21:41.280 --> 0:21:48.320
The question was how to convince the colleagues, even if the management is quite okay with

265
0:21:48.320 --> 0:21:53.000
those practice.

266
0:21:53.000 --> 0:21:58.520
What I use is a set of horror stories from my past.

267
0:21:58.520 --> 0:22:06.480
When people did like that, six months later, what happened?

268
0:22:06.480 --> 0:22:08.760
Developers like developing new stuff.

269
0:22:08.760 --> 0:22:17.000
They do not like fixing old bugs, looking into history, so using the argument of if

270
0:22:17.000 --> 0:22:22.800
we do it messy this time, then we'll have to maintain it and it is you who is going

271
0:22:22.800 --> 0:22:25.240
to maintain that stuff.

272
0:22:25.240 --> 0:22:27.240
They have to get burned at least one time.

273
0:22:27.240 --> 0:22:29.240
That can help.

274
0:22:29.240 --> 0:22:30.240
Thank you.

275
0:22:30.240 --> 0:22:31.240
Okay.

276
0:22:31.240 --> 0:22:34.240
I think we'll be done now.

277
0:22:34.240 --> 0:22:36.240
One more minute.

278
0:22:36.240 --> 0:22:37.240
Yeah.

279
0:22:37.240 --> 0:22:38.240
Anyone else?

280
0:22:38.240 --> 0:22:43.320
Next to you, Chris.

281
0:22:43.320 --> 0:22:46.000
Just one comment on one of the earlier questions.

282
0:22:46.000 --> 0:22:51.680
I think a good approach would be to look at the vendor, how they support Linux.

283
0:22:51.680 --> 0:23:00.200
Some vendors provide, I looked at one processor, it had 500 patches to a five-year-old kernel,

284
0:23:00.200 --> 0:23:03.600
and another vendor, they push everything to mainstream.

285
0:23:03.600 --> 0:23:07.440
You might want to think who you want to choose.

286
0:23:07.440 --> 0:23:08.800
Absolutely agree with that.

287
0:23:08.800 --> 0:23:15.720
When I'm looking into the chip to use, I'm looking at the vendor's mainstream support,

288
0:23:15.720 --> 0:23:19.640
and that's one of the criteria to start with, basically.

289
0:23:19.640 --> 0:23:21.040
I think it's a great point.

290
0:23:21.040 --> 0:23:24.840
I think we should all boycott vendors who don't have upstream drivers.

291
0:23:24.840 --> 0:23:26.360
Yeah, that's a separate...

292
0:23:26.360 --> 0:23:27.360
Just say no.

293
0:23:27.360 --> 0:23:28.360
Okay.

294
0:23:28.360 --> 0:23:29.360
Thank you all.

295
0:23:29.360 --> 0:23:30.360
Thank you.

296
0:23:30.360 --> 0:23:31.360
Thank you very much.

297
0:23:31.360 --> 0:23:32.360
Thank you.

298
0:23:32.360 --> 0:23:33.360
Thank you very much.

299
0:23:33.360 --> 0:23:34.360
Thank you.

300
0:23:34.360 --> 0:23:35.360
Thank you.

301
0:23:35.360 --> 0:23:36.360
Thank you.

302
0:23:36.360 --> 0:23:37.360
Thank you.

303
0:23:37.360 --> 0:23:38.360
Thank you.

304
0:23:38.360 --> 0:23:39.360
Thank you.

305
0:23:39.360 --> 0:23:40.360
Thank you.

306
0:23:40.360 --> 0:23:41.360
Thank you.

307
0:23:41.360 --> 0:23:42.360
Thank you.

308
0:23:42.360 --> 0:23:43.360
Thank you.

309
0:23:43.360 --> 0:23:44.360
Thank you.

310
0:23:44.360 --> 0:23:45.360
Thank you.


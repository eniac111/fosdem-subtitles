WEBVTT

00:00.000 --> 00:08.080
Okay, so hi everyone.

00:08.080 --> 00:09.320
Awesome that you're all here.

00:09.320 --> 00:14.440
I'm Jadka, this is Jens, and we will now present Snap, a programming language that we work

00:14.440 --> 00:18.560
on together with Bernat and a few other people that I'll mention in a second.

00:18.560 --> 00:23.520
And what we want to do with you today, or what you have to listen to, is first I'll

00:23.520 --> 00:27.900
explain shortly what Snap is and why we care about it.

00:27.900 --> 00:33.120
Then we'll show our three guiding principles, and if we have time in the end Jens will show

00:33.120 --> 00:36.520
what's under the hood of Snap as well.

00:36.520 --> 00:42.680
Okay, so Snap is a visual blocks-based programming language, and I'll show that to you in a second.

00:42.680 --> 00:47.600
It's also like micro blocks live and parallel, and we develop it together with people at

00:47.600 --> 00:49.920
UC Berkeley in California.

00:49.920 --> 00:54.880
So we have three people, us three working together with three people from UC Berkeley

00:54.880 --> 00:56.720
developing this thing together.

00:56.720 --> 01:00.600
Snap is a blocks-based programming language, but it's aimed at high school and college

01:00.600 --> 01:01.800
students.

01:01.800 --> 01:06.440
But as you will see in a second, you can basically start whenever you want with it.

01:06.440 --> 01:13.800
Okay, our three guiding principles, let's start with the first one, is low floor.

01:13.800 --> 01:19.520
So this means that we really want to have engaging activities for entry-level programmers

01:19.520 --> 01:24.240
so you don't get scared away, and that we really want to have fun activities that they

01:24.240 --> 01:26.080
can do.

01:26.080 --> 01:31.560
To show you that, I've built a super simple, what we call a micro world, so this is an

01:31.560 --> 01:39.480
extension of Snap that I customized myself, and this only has these three blocks here.

01:39.480 --> 01:43.040
And as you can see, you don't even have to read to use them.

01:43.040 --> 01:45.120
We can just try them out and see what happens.

01:45.120 --> 01:47.840
So let me increase the stage size a bit.

01:47.840 --> 01:50.200
So I can click on that.

01:50.200 --> 01:53.480
As you can see, it's live, so I'm clicking on it while it's in the palette and it's still

01:53.480 --> 01:55.560
doing things.

01:55.560 --> 01:57.000
I can click on that.

01:57.000 --> 01:58.000
Nothing happens.

01:58.000 --> 02:00.180
I see, oh wow, there's an input slot here.

02:00.180 --> 02:02.320
Maybe I could type a number in here.

02:02.320 --> 02:03.800
Let's see what happens now.

02:03.800 --> 02:06.040
Ooh, okay, it's doing something.

02:06.040 --> 02:09.760
This is stamping a flower, and this one is supposed to be a sponge.

02:09.760 --> 02:11.580
It's clearing the stage again.

02:11.580 --> 02:17.400
So since we're working with flowers, let me draw a beautiful petal real quick using the

02:17.400 --> 02:21.400
costume editor.

02:21.400 --> 02:23.320
Let's do a yellow one.

02:23.320 --> 02:27.760
Oh, that's brown.

02:27.760 --> 02:29.920
And then let me draw something.

02:29.920 --> 02:34.680
Jip, jip, and let me even fill it maybe.

02:34.680 --> 02:37.720
Yeah, wow, this is very beautiful.

02:37.720 --> 02:41.800
And then let's make this even more beautiful.

02:41.800 --> 02:46.400
And then let's also, that's important, move the rotation center, jip, and let's try the

02:46.400 --> 02:48.240
same thing again.

02:48.240 --> 02:51.440
Ah, okay, this is pretty cool.

02:51.440 --> 02:54.680
So now if I want more flowers, I can build a larger script.

02:54.680 --> 02:59.200
So I can use the central area of Snap to build more complex programs.

02:59.200 --> 03:03.680
So I could go to a random position and draw another flower there, and go to a random position,

03:03.680 --> 03:05.080
and draw another flower there.

03:05.080 --> 03:08.720
And I could click on that forever.

03:08.720 --> 03:11.600
But it would also be cool to just have a forever loop that does that.

03:11.600 --> 03:15.840
So computers are really good at doing things automatically very often, so why don't I make

03:15.840 --> 03:17.120
a loop?

03:17.120 --> 03:23.600
So I already prepared this page here, and let's look for the infinity sign, because

03:23.600 --> 03:26.800
what I want to build is an infinite loop.

03:26.800 --> 03:29.760
And let's just copy that.

03:29.760 --> 03:35.800
And then let's build our own control structure by just hiding it in the actual, ah no, we

03:35.800 --> 03:37.560
don't hide it, let's just do it.

03:37.560 --> 03:43.400
So this is going to be a control block, and I'm calling it infinity.

03:43.400 --> 03:45.200
And this is going to have two inputs.

03:45.200 --> 03:50.040
One is going to be, no it's only having one input, it's going to be the action.

03:50.040 --> 03:53.160
So let me build this block, I already have it here.

03:53.160 --> 03:56.640
So okay, no, let's do that again.

03:56.640 --> 03:57.640
Jip.

03:57.640 --> 04:01.520
Sorry, I'll just delete that and start over again.

04:01.520 --> 04:05.800
Okay, I want to make a control structure, it's called infinity.

04:05.800 --> 04:10.960
I want to add a parameter to that, and this is the action that I'm going to run.

04:10.960 --> 04:17.800
I can even decide what I want this to look like, so as you might know from scratch, our

04:17.800 --> 04:23.200
loops have the C-shaped, or from snap, our loops have the C-shaped command structure,

04:23.200 --> 04:28.880
so I can click on that, and when I apply that, you see that I have the C-shaped block with

04:28.880 --> 04:33.000
this infinity sign on it, and now I need to decide what I want to do with this block.

04:33.000 --> 04:39.040
So first I want to run the action, I don't have a run block here, so let me just open

04:39.040 --> 04:44.760
the hide block section, because I hit all the actual blocks from snap, and I'll show

04:44.760 --> 04:54.560
you how to do that in a second, and let me drag out one of the run blocks, Jip, and what

04:54.560 --> 04:59.760
I want to do is I want to run the action, and then I want to repeat the same thing,

04:59.760 --> 05:01.520
and I want to run the action again.

05:01.520 --> 05:04.920
So I think that's correct, let's try it.

05:04.920 --> 05:08.920
So I made myself a forever loop, and let's clear the stage so we can actually see what's

05:08.920 --> 05:13.320
happened, or what's happening, and let me drag this around here, and now I can run my

05:13.320 --> 05:17.040
program and I built myself my own control structure, and it still looks very simple

05:17.040 --> 05:20.560
for kids, but all of you obviously could do that.

05:20.560 --> 05:25.880
So this is one thing that we really care about, we want really simple entry-level engaging

05:25.880 --> 05:32.240
activities, and this is one of my favorite starter projects, but we also want teachers

05:32.240 --> 05:37.440
to be able, educators to be able to build these micro-verts very easily, and we want

05:37.440 --> 05:44.160
them to be able to customize Snap in a way that they can use it for their needs.

05:44.160 --> 05:49.360
What I also wanted to show you in this project, let me make this stage a bit smaller again,

05:49.360 --> 05:55.000
you can have several what we call scenes in a project, so this is basically a project

05:55.000 --> 05:59.280
in another project, so I can now switch to that scene, and here I already prepared a

05:59.280 --> 06:04.600
petal, and you see that I have more blocks than I had before, I also have a separate

06:04.600 --> 06:10.000
stage so I can switch between scenes, and we can use that idea to build something like

06:10.000 --> 06:16.640
language levels, so in the first micro-world I used, I just had that block that draws a

06:16.640 --> 06:17.920
flower.

06:17.920 --> 06:24.480
In the second micro-world, I want learners to be able to build this flower block themselves,

06:24.480 --> 06:28.760
so we gave them all the tools that they need for that, so here for example, we only have

06:28.760 --> 06:36.600
this block that stamps a leaf, so one of the petals, so what else do I need to build the

06:36.600 --> 06:42.840
flower, I want to do that several times, so I might need a loop, and this one as you can

06:42.840 --> 06:48.120
see has a number as an input, so I can specify the number of repeats, and of course I need

06:48.120 --> 06:54.600
to turn in between, so what we want to do is we want to stamp, let's do a flower with

06:54.600 --> 07:00.880
6 petals, and then I need to turn in between, and also I built this block myself, and I

07:00.880 --> 07:08.720
want to turn 60 degrees each time, so let's clear before we draw a flower, jeep, and then

07:08.720 --> 07:14.120
let's do one, so this is how the flower block was actually built in the first thing, so

07:14.120 --> 07:22.560
we can help learners to gradually get new ideas, and then which I find pretty cool,

07:22.560 --> 07:26.800
it's also super simple in Snap to prepare your own libraries, so I made one if you have

07:26.800 --> 07:32.960
a kid in class that is just faster than the other kids, you can export a library and just

07:32.960 --> 07:39.000
let them add more blocks, so here I added a few more blocks, for example these ones

07:39.000 --> 07:44.480
let me change the appearance of the petal that I have, so this one for example changes

07:44.480 --> 07:50.000
the size of it, let's set this to 100, and then you see the petal becomes super huge,

07:50.000 --> 07:55.160
I can set that to 10, let's clear again, then it becomes super small, so maybe you want

07:55.160 --> 08:00.840
to pick something in between, and we could even do that randomly, so for example I could

08:00.840 --> 08:08.880
add this here, and I want the size to be between 20 and 40, and then I get differently sized

08:08.880 --> 08:16.600
petals each time I do that, so if I do it like this, you see that this changes, and

08:16.600 --> 08:22.600
I really like that about Snap that you can easily expand projects with fun ideas, so

08:22.600 --> 08:27.440
they look differently and are more engaging, but you only need like one or two more ideas,

08:27.440 --> 08:33.080
this one for example switches to the next costume, so if I wanted to add another petal,

08:33.080 --> 08:42.720
let's draw one, let's do the one that I did before, but in blue this time, let's fill

08:42.720 --> 08:51.000
it with something, okay, and then again let's move the rotation center to one of the tips,

08:51.000 --> 08:59.440
and we can now use that, and each time we draw something, we draw a different flower,

08:59.440 --> 09:04.880
so the next one in line, and then again we can combine that with what we had before,

09:04.880 --> 09:15.200
and just create a beautiful flower field with the blocks that we made.

09:15.200 --> 09:20.080
How do you do that if you want to create a micro world?

09:20.080 --> 09:24.640
Let me go to the third one I prepared, so this is not actually a micro world, this is

09:24.640 --> 09:29.280
regular Snap with all the blocks that you have, so as in other blocks best programming

09:29.280 --> 09:32.800
languages we have different categories here, we have the palette on the left where you

09:32.800 --> 09:37.440
find all the blocks for a specific category, as I mentioned before it's a live programming

09:37.440 --> 09:43.000
language, so you can just click them and something happens immediately, and what I also added

09:43.000 --> 09:49.160
here, or what I thought I added here but didn't, oh that's unfortunate, is the, so let's just

09:49.160 --> 09:54.960
build it, is the project, so again we want to have all the blocks that we used last time,

09:54.960 --> 10:02.560
so what we had was the next costume block, we had the set size tool block, we had the

10:02.560 --> 10:11.520
pick random block, we also need a division block, we had a repeat block, we had a forever

10:11.520 --> 10:22.720
block, we had a stamp block, and we had a turn block, and what was the last one?

10:22.720 --> 10:26.960
The second to last one was clear, and what was the last one?

10:26.960 --> 10:32.880
Go to random position, awesome, and we need to go to random position and let's assemble

10:32.880 --> 10:38.040
these so that we actually can make sure that our script is working, so for a flower we

10:38.040 --> 10:45.240
want to repeat a specific number of times, let's do six times, then we want a stamp,

10:45.240 --> 10:55.000
then we want to turn the number of degrees, that's 360 divided by the number of petals

10:55.000 --> 10:59.520
that I want, so six in this case, and before we wanted to do that we wanted to go to a

10:59.520 --> 11:05.000
random position, so let's check that, that seems to work awesome, we wanted to do that

11:05.000 --> 11:12.000
forever and so that all flowers don't look the same, we wanted to set the size to a random

11:12.000 --> 11:19.320
position, a random size, a random number, let's do 20 to 30 maybe, and we need a second

11:19.320 --> 11:30.720
costume so let's just duplicate that one and let's change the color a bit, yeah this is

11:30.720 --> 11:41.920
very different, awesome, this is exactly what I, oh wow, okay, and so we have two costumes

11:41.920 --> 11:45.920
so we can actually also use the next costume block and so we start with a clear stage,

11:45.920 --> 11:50.160
let's add that at the beginning and let's see whether this works, okay awesome, and

11:50.160 --> 11:56.040
now if you want to build your own micro world you can just go to the file menu and select

11:56.040 --> 12:03.560
hide blocks and then that's the awesome thing that we added in the second last, like the

12:03.560 --> 12:11.600
previous release, you can hide all the unused blocks and if I do that I only have the blocks

12:11.600 --> 12:16.720
left in the palette that I used for my project and they are in these categories here and

12:16.720 --> 12:21.360
I can even make the single palette that I had before by clicking on the settings menu

12:21.360 --> 12:25.720
and then selecting the single palette and now you have all the blocks in like one palette

12:25.720 --> 12:32.440
and you can make your own micro worlds that have all the blocks that you need for your

12:32.440 --> 12:36.480
project that you want to do in class or with your kids or with some other people who want

12:36.480 --> 12:41.240
to learn programming and then you can delete that and then you have your perfect Parsons

12:41.240 --> 12:48.400
puzzle generator and so this is again the low floor idea that I mentioned, we really

12:48.400 --> 12:53.560
want to have engaging activities that have a cool artifact that looks beautiful or is

12:53.560 --> 12:59.400
fun to do but we also want to help teachers and educators to create these fun engaging

12:59.400 --> 13:02.080
activities in a simple way.

13:02.080 --> 13:08.080
Okay, the second idea that I wanted to present or that we think is or that we care about

13:08.080 --> 13:13.960
is white walls so we want to allow for a huge variety of projects and the ones that we care

13:13.960 --> 13:21.040
most about are media projects so we love this idea of media computation meaning you learn

13:21.040 --> 13:28.720
general purpose programming by playing with sounds, images, texts and one example of your

13:28.720 --> 13:34.320
project for that is for example from Snap you can access the microphone of your computer

13:34.320 --> 13:39.000
so in this case if it's running it should be this for example is a visualization of

13:39.000 --> 13:44.280
the frequency spectrum of my voice that's just picked up through the microphone so this

13:44.280 --> 13:49.200
looks beautiful at the same time as it's interesting because you can talk about sounds from a physical

13:49.200 --> 13:55.560
and computational perspective and we love to do stuff with the camera so this is another

13:55.560 --> 13:58.560
project that I like very much.

13:58.560 --> 14:06.240
This is pasting the webcam of my computer to the stage right now I set the transparency

14:06.240 --> 14:12.600
to 50 percent let's make it fully transparent so the video is still there but you can't

14:12.600 --> 14:18.340
see it anymore because all the pixels are transparent and then I'm sending a message

14:18.340 --> 14:25.200
to the other sprite and what's that doing is it's drawing dots on the stage which size

14:25.200 --> 14:32.640
corresponds to the brightness that it's measuring in the image that it picks up from the camera

14:32.640 --> 14:37.800
and this is actually a pretty cool technique it's called dithering and this is how images

14:37.800 --> 14:42.320
were made in newspapers back in the days when you weren't able to print different colors

14:42.320 --> 14:49.280
so you just did differently sized dots to get like a more deep color space so this is

14:49.280 --> 14:55.440
what we mean with white walls allow a variety of projects that are engaging and fun and

14:55.440 --> 15:02.680
that also kids who don't necessarily like Fibonacci might find interesting and the last

15:02.680 --> 15:09.520
idea for that I will hand over to Jens is no ceiling so as I said snap is a programming

15:09.520 --> 15:15.640
language that's aimed for high schoolers and early college students so it's scratch

15:15.640 --> 15:34.520
but with all the awesome ideas that make programming fun and Jens is going to show you these now

15:34.520 --> 15:40.120
thank you Jens.

15:40.120 --> 15:45.040
We're having kind of a conflict here because we want to have this low floor and the wide

15:45.040 --> 15:52.800
walls for the kids but we're also having this idealist notion of blow of the ceiling like

15:52.800 --> 16:00.120
we don't want to constrain kids we don't want to dumb down the language so it's okay for

16:00.120 --> 16:07.800
kids and this is kind of coming from the 60s when you know some of you might remember logo

16:07.800 --> 16:13.520
had the idea that you know you don't you don't make stuff easy for kids but you make it welcoming

16:13.520 --> 16:21.360
for kids but you don't constrain it you let kids express everything they can and this

16:21.360 --> 16:27.240
is only one part of the pedagogy the other part of the pedagogy is geared as Marx said

16:27.240 --> 16:34.000
towards teachers towards educators because if you look at these micro worlds that Jager

16:34.000 --> 16:41.600
has shown let me again go to oh yeah this is mine already so here is a bunch of blocks

16:41.600 --> 16:50.000
like these aren't the regular blocks these are the ones that we made okay I need to stay

16:50.000 --> 16:58.040
more in the center of so y'all at home can see me we want teachers to be able to build

16:58.040 --> 17:03.360
these exercises to build these micro worlds for their kids so it's not just us you know

17:03.360 --> 17:07.480
building something here's an exercise you can do with their kids but there's a teacher

17:07.480 --> 17:12.600
there's an educator wants to teach something as yet got it about what was then called you

17:12.600 --> 17:17.760
remember the total turtle trip theorem that was kind of what he had got showed you about

17:17.760 --> 17:23.200
so we build a micro world to that which language are they going to build this sub language

17:23.200 --> 17:28.400
in are they going to have to learn another language to build these little domain specific

17:28.400 --> 17:34.720
languages no you saw yet got build these blocks in snap itself and so we want to take this

17:34.720 --> 17:47.320
even further and find out whether we can maybe even invent a language that lets us build

17:47.320 --> 17:53.160
a block space language inside the block space language and for this we really kind of want

17:53.160 --> 17:59.480
to do things that we can do in the UI we only be able to do it in the language so in this

17:59.480 --> 18:06.800
palette here I made a little block and it shows me some tools so if I click on this

18:06.800 --> 18:12.480
I'm getting some more blocks and I can again hide these it's a very simple block I can

18:12.480 --> 18:18.480
build myself that just shows and hides me some blocks and now I can kind of explore

18:18.480 --> 18:28.800
some of these things so I can for example look at this block that the flower block and

18:28.800 --> 18:35.840
I can see how it is defined and see it is defined with its own blocks so I can open

18:35.840 --> 18:42.040
this and edited but I can also get the definition of this in a program so now I'm getting the

18:42.040 --> 18:47.640
definition of this block and I can see that it's a function I can take this out and I

18:47.640 --> 18:52.900
can do some other interesting things with that so here is our split block for example

18:52.900 --> 19:00.840
I can split hello world by the space and I get hello and world I can split it by letters

19:00.840 --> 19:14.840
and I get each letter so what happens if I split a script by blocks?

19:14.840 --> 19:21.360
If I split a script by blocks I'm getting a syntax tree a table of the syntax elements

19:21.360 --> 19:30.240
in there so I can do this with you know the definition of my flower block and oh wow so

19:30.240 --> 19:38.240
I can so this is a table so I can also flatten this so I'm not saying I don't want the length

19:38.240 --> 19:43.560
of this I want it flattened so now I'm getting a list of all the syntax elements that make

19:43.560 --> 19:48.720
up the definition of this flower block and that's kind of interesting because now I can

19:48.720 --> 19:56.840
find out for example so here I can take out the turn block and I can say you know do all

19:56.840 --> 20:10.240
of these does this list contain this turn block and says yes the turn block is part

20:10.240 --> 20:18.600
of the definition of this list so but what about for example the clear block is that

20:18.600 --> 20:19.600
also in there?

20:19.600 --> 20:26.440
No it's not present in there so this is interesting I could maybe discover something else so

20:26.440 --> 20:33.800
what I can I can look at all the blocks that I have in this micro world this is a list

20:33.800 --> 20:40.240
of all the blocks in this micro world so I'd like to find out which blocks contain this

20:40.240 --> 20:52.680
turn block so I could say you know I want to keep I want to filter from my blocks those

20:52.680 --> 21:02.200
that contain this block let's see whether that works yeah so I'm getting a list of two

21:02.200 --> 21:09.480
blocks that all use this block now I can turn this into its own block I make a block that

21:09.480 --> 21:19.680
says this is the collars of a block block and the block should be an input so I'm saying

21:19.680 --> 21:28.520
this is a block and in order to define this well I just did define this I just dragged

21:28.520 --> 21:36.000
this in and I say okay this should work for any block so not just this block but for any

21:36.000 --> 21:46.880
block and so now I have this block that gives me the collars of for example this block let

21:46.880 --> 21:56.520
me see whether it works so this block is used by two other blocks and this block isn't used

21:56.520 --> 22:05.680
by any other block and huh let me see maybe I can get a whole report by looking at all

22:05.680 --> 22:17.840
the blocks and by mapping over all the blocks I want to see the block and I want to see

22:17.840 --> 22:25.680
its collars right so what we're now doing is really an introspection of the system of

22:25.680 --> 22:33.440
the block system in itself so if I map this I'm sort of getting this interesting structure

22:33.440 --> 22:42.880
so data structure it's a table and it's a graph really a reverse dependency graph of

22:42.880 --> 22:50.920
all the blocks and the blocks it uses and I get a report of the overall structure of

22:50.920 --> 22:56.480
my micro world and folks this is something interesting as you think about this so we're

22:56.480 --> 23:03.160
starting with this easy simple thing that we can build worlds for kids and we want to

23:03.160 --> 23:07.720
build these little domain specific languages but we want to have a language that actually

23:07.720 --> 23:15.280
lets us build these things in itself and this is why we build introspection and kind of

23:15.280 --> 23:19.900
all the goodies of functional programming into this language but we didn't want to make

23:19.900 --> 23:24.400
it so that you kind of have to go down to memory addresses but we want to represent

23:24.400 --> 23:31.880
everything in blocks and this is kind of the idea of no ceiling because at one point you

23:31.880 --> 23:37.080
know we start doing this with kids but we actually build it for the University of California

23:37.080 --> 23:40.160
at Berkeley and they're using it for their introductory course of computer science for

23:40.160 --> 23:46.520
non-majors and you know this goes up quite a long way so we actually want to be able

23:46.520 --> 23:53.880
to do scheme in this and to really teach abstraction so at one point you really want to blow off

23:53.880 --> 23:58.800
the ceiling and we don't want to do just only this imperative style programming where you

23:58.800 --> 24:02.960
know one follows the other and you've got the puzzle pieces but we actually do a high

24:02.960 --> 24:09.080
order function you do kind of recursive you build your own control structures you build

24:09.080 --> 24:17.560
your own language it's a little stiff and it's challenging to try to accommodate you

24:17.560 --> 24:24.200
know the let's draw a flower with a bunch of three blocks to let's invent our own programming

24:24.200 --> 24:31.940
language in the same environment and in order to build such an environment the whole thing

24:31.940 --> 24:38.580
that you see here your nerds I can show you right the whole thing you see here isn't using

24:38.580 --> 24:43.680
blockly or library but what you're seeing here is actually an operating system that

24:43.680 --> 24:50.640
runs inside a single canvas element in the browser and there's sort of a pill you can

24:50.640 --> 24:57.800
take to switch to dev mode and you're sort of inside this environment that some of you

24:57.800 --> 25:05.040
might recognize looks a lot like squeak so anybody you know squeak and so it's kind of

25:05.040 --> 25:11.520
the same morphing environment where you could just get you know any things you can directly

25:11.520 --> 25:21.240
manipulate them for example you can make this bold but you can also use this to you know

25:21.240 --> 25:29.240
let's make a slider I can attach the slider set the target to the string morph to the

25:29.240 --> 25:39.720
font size I can change it I can make it horizontal and now my slider governs for examples the

25:39.720 --> 25:49.840
size the font size of this I can make other elements like for example color palette and

25:49.840 --> 25:54.520
I could set the target of the color palette also to the string and now I can change the

25:54.520 --> 26:03.640
color and the size I can still edit it so this is basically our own system that is kind

26:03.640 --> 26:11.680
of self sustained in the browser and everything that you see in snap is sort of an application

26:11.680 --> 26:20.320
inside this really OS inside the browser and comes with its own green threading model which

26:20.320 --> 26:28.000
is how we do parallelism so in order to go up on the ladder of abstraction on the back

26:28.000 --> 26:36.000
hand side we have to go kind of down to not the metal but to kind of a metal of sorts

26:36.000 --> 26:51.760
of the browser okay this was kind of our ideas if you'd like to check it out it runs on snap.berkeley.edu

26:51.760 --> 26:58.560
give it a try yourself you'll find lots of material there is it's open source by the

26:58.560 --> 27:03.600
way it's free and open source it's an AGPL license so if you want to know so it's copy

27:03.600 --> 27:10.480
left it so you know everything is open source about it we write the front end the back end

27:10.480 --> 27:18.640
the community side it's not as big as some other languages but we've got a vibrant community

27:18.640 --> 27:25.040
it's all hosted on github please do contribute please do fork it many people have forked

27:25.040 --> 27:39.920
it please let us know what you think and thanks for coming.

27:39.920 --> 27:44.960
So I found that really fascinating and as a list programmer I couldn't help but think

27:44.960 --> 27:51.560
about macros when you were showing the exploding of blocks so would it be possible once you

27:51.560 --> 27:56.800
get the abstract syntax tree to annotate it let's say add a sound between each step and

27:56.800 --> 28:02.240
then recreate a new block from an existing block.

28:02.240 --> 28:07.400
Yes if we had more time I could show you this we do have macros okay yes so I showed you

28:07.400 --> 28:14.920
the split block which takes apart the stuff we has a join block that you can pass in a

28:14.920 --> 28:18.040
text and text trace but yeah.

28:18.040 --> 28:28.560
Well this is running in the web in a browser so your phone can run the thing in a browser

28:28.560 --> 28:34.760
what you get here is you can publish it as a URL and yes and then you can run it on the

28:34.760 --> 28:39.220
phone and it's something I like to do with kids a lot it's also interesting if you do

28:39.220 --> 28:48.160
stuff on touch devices like on tablets or stuff like that you kind of need to be considerate

28:48.160 --> 28:54.160
of which gestures to use because you don't have mouse over or you know so yeah it's fun.

28:54.160 --> 28:59.440
And you can also embed it on iFrames in your website.

28:59.440 --> 29:00.440
Yes please.

29:00.440 --> 29:03.440
I was wondering like in your mind about the future do you see anything like that this

29:03.440 --> 29:10.440
is becoming more mainstream and also for adults like one programmer building their own stuff

29:10.440 --> 29:15.600
with something like this.

29:15.600 --> 29:21.800
That's a good question I really have this dream that I think blocks based programming

29:21.800 --> 29:32.640
if we take away the kitty stigma of it and if we dare move on from this sometimes horrible

29:32.640 --> 29:39.740
imperative paradigm to the beauty and joy of functional programming that you know we

29:39.740 --> 29:44.880
get these expressions that actually make things easier to understand that make things more

29:44.880 --> 29:52.520
accessible and that this is a great way to be to actually you know express many things

29:52.520 --> 29:58.400
inside professional development so we write the software in a way that we like to use

29:58.400 --> 30:05.840
it ourselves and we hope that it might convince others to actually build and embed this into

30:05.840 --> 30:10.160
enterprise applications because often enough if you think about these low code no code

30:10.160 --> 30:15.160
things you know you move you click together some pre-configured stuff but then you need

30:15.160 --> 30:20.840
to write some glue code and the glue code often enough is terrible and awful and this

30:20.840 --> 30:25.520
is where I would love to see a blocks based environment that has no ceiling.

30:25.520 --> 30:32.720
Yes.

30:32.720 --> 30:34.640
It is this scheme in the browser.

30:34.640 --> 30:35.640
Yes.

30:35.640 --> 30:36.640
Yes.

30:36.640 --> 30:37.640
Exactly.

30:37.640 --> 30:47.240
And we do have stickers and buttons here take all you want.

30:47.240 --> 30:48.240
Yeah.

30:48.240 --> 30:49.240
Yeah.

30:49.240 --> 30:50.240
Thank you very much again.

30:50.240 --> 30:57.120
Thank you.

1
0:00:00.000 --> 0:00:07.000
Please welcome the next speaker, Gova.

2
0:00:07.000 --> 0:00:19.240
Hi, so my name is Gova Todionia, the H. Dawes Satoruya, which is a really not name, so you

3
0:00:19.240 --> 0:00:20.240
can just call me Gova.

4
0:00:20.240 --> 0:00:23.600
And I'm going to talk about this great thing called Futon.

5
0:00:23.600 --> 0:00:30.360
So before that, I was sponsored by the Internet Foundation with a grant that is financed through

6
0:00:30.360 --> 0:00:34.020
the European Commission called NGISU, and Generation Internet.

7
0:00:34.020 --> 0:00:37.360
So if you have ideas and just want money, just apply to it.

8
0:00:37.360 --> 0:00:39.000
It's actually a really cool thing.

9
0:00:39.000 --> 0:00:42.000
So now, what is before?

10
0:00:42.000 --> 0:00:48.080
So I guess the academic definition would be the programming protocol independent packet

11
0:00:48.080 --> 0:00:49.080
processor.

12
0:00:49.080 --> 0:00:52.160
It's a domain specific language for network devices.

13
0:00:52.160 --> 0:00:56.480
Trying out data plane devices, switches, new equipment filters, etc.

14
0:00:56.480 --> 0:00:57.480
Processed packets.

15
0:00:57.480 --> 0:00:58.480
Okay, great.

16
0:00:58.480 --> 0:00:59.760
But what does this actually mean?

17
0:00:59.760 --> 0:01:05.880
Okay, so it's an upgrade basically for hardware optimized network processing.

18
0:01:05.880 --> 0:01:11.040
Like, things seem different network, so you can just have like those FPGAs, DPUs, whatever,

19
0:01:11.040 --> 0:01:15.840
and you can make them process network packets for you at an accelerated rate compared to

20
0:01:15.840 --> 0:01:17.680
software.

21
0:01:17.680 --> 0:01:23.040
So it roughly looks like C in a way.

22
0:01:23.040 --> 0:01:27.640
As you can see, it has the same kind of syntax, like arguments, whatnot.

23
0:01:27.640 --> 0:01:31.400
The thing is, there's a few things, there's a few how-to's.

24
0:01:31.400 --> 0:01:35.440
You can see it has the state thing, it doesn't have a return.

25
0:01:35.440 --> 0:01:38.640
You have transition select, what is this?

26
0:01:38.640 --> 0:01:39.640
It looks a bit weird.

27
0:01:39.640 --> 0:01:44.120
So let's explain this a bit.

28
0:01:44.120 --> 0:01:49.560
This in P4 are replaced mostly by things called parser control packet.

29
0:01:49.560 --> 0:01:50.880
So what is parser?

30
0:01:50.880 --> 0:01:55.800
A parser is a function that is going to pass an incoming packet according to, well, the

31
0:01:55.800 --> 0:02:00.600
same thing as in C, which means struct, type def, etc.

32
0:02:00.600 --> 0:02:04.720
Say I'm going to define a struct, I'm going to say, if this element of a struct is this,

33
0:02:04.720 --> 0:02:06.400
then I'm going to call this function.

34
0:02:06.400 --> 0:02:08.160
Basically that's what the parser function does.

35
0:02:08.160 --> 0:02:10.920
You have then the control functions.

36
0:02:10.920 --> 0:02:17.600
What if I pass the packet, say, for example, you have this really long packet which says

37
0:02:17.600 --> 0:02:22.400
I have up X, Y, Z, and then you want to remove the up X because you're on up X.

38
0:02:22.400 --> 0:02:25.440
You're going to do this in a control function.

39
0:02:25.440 --> 0:02:30.120
And then you have package, which defines basically the binding logic between the hardware.

40
0:02:30.120 --> 0:02:32.920
Like oh, am I going, say I implement a firewall.

41
0:02:32.920 --> 0:02:35.880
Oh, am I going to have new rules?

42
0:02:35.880 --> 0:02:40.120
Or am I going to load new definitions and whatnot?

43
0:02:40.120 --> 0:02:41.880
So that's basically it.

44
0:02:41.880 --> 0:02:47.080
There are interesting keywords, there are other things, like, that I'm not going to

45
0:02:47.080 --> 0:02:53.480
explain all of this because P4 is kind of like, this would basically be out of scope

46
0:02:53.480 --> 0:02:57.920
for the talk and P4 is already complex enough as is.

47
0:02:57.920 --> 0:03:02.240
So how do you want to use P4 in Nix?

48
0:03:02.240 --> 0:03:04.240
There's a few ideas.

49
0:03:04.240 --> 0:03:06.440
My take on it is let's make a transpiler.

50
0:03:06.440 --> 0:03:07.440
Why?

51
0:03:07.440 --> 0:03:14.040
Because transpiler allows you to use concepts within Nix, say, because P4 is a bit verbose,

52
0:03:14.040 --> 0:03:18.120
because say you want to pass this IP TCP packet.

53
0:03:18.120 --> 0:03:22.080
You need each time to redefine the IP header thingies.

54
0:03:22.080 --> 0:03:26.000
So you want to redefine this truck, you want then to have it passed in a way, and then

55
0:03:26.000 --> 0:03:30.080
sometimes you want this thing, sometimes you have this other IP struct because you don't

56
0:03:30.080 --> 0:03:35.240
want to pass some optional data in the header that would slow down the process, et cetera.

57
0:03:35.240 --> 0:03:39.920
So it's a bit verbose, let's just use Nix to basically reimplement parts of it and have

58
0:03:39.920 --> 0:03:42.200
it in a nice packet.

59
0:03:42.200 --> 0:03:45.040
So what is a transpiler?

60
0:03:45.040 --> 0:03:51.040
In our case, it's Nix to P4 translator, which means you can define things in Nix, structs,

61
0:03:51.040 --> 0:03:55.120
enums, whatnot, and it generates P4 code.

62
0:03:55.120 --> 0:03:59.720
Then you have the P4 compiler, which actually processes the code that's generated, followed

63
0:03:59.720 --> 0:04:06.960
by the target compiler, which in this case allows you to deploy your thing to, say, an

64
0:04:06.960 --> 0:04:10.680
FPGA, a DPU, et cetera.

65
0:04:10.680 --> 0:04:14.080
Basically the thing that allows you to run your thing, your program.

66
0:04:14.080 --> 0:04:18.880
So what does it look like in action?

67
0:04:18.880 --> 0:04:25.920
Basically this is a Nix file which allows you to define some P4 concept.

68
0:04:25.920 --> 0:04:30.720
In this case, I defined a header flag which contains a few counts, like max ops, standards,

69
0:04:30.720 --> 0:04:31.920
ops, et cetera.

70
0:04:31.920 --> 0:04:34.120
And then a few headers.

71
0:04:34.120 --> 0:04:40.880
In this case, I'm just defining SADATI, which has two flags, source and destination, both

72
0:04:40.880 --> 0:04:44.240
of type bit eight.

73
0:04:44.240 --> 0:04:49.000
That's basically just a way to redefine the annoying thing of P4.

74
0:04:49.000 --> 0:04:51.080
Then you can also have include.

75
0:04:51.080 --> 0:04:56.440
All of this is processed then by this function called run thread spire, mcat transpire, whatever

76
0:04:56.440 --> 0:04:58.480
I called it now.

77
0:04:58.480 --> 0:05:01.440
You just run this and it generates code for you.

78
0:05:01.440 --> 0:05:03.200
And that's great.

79
0:05:03.200 --> 0:05:10.120
So, we can simplify this, obviously, because that's a bit annoying to each time type this

80
0:05:10.120 --> 0:05:12.080
header, this header, et cetera.

81
0:05:12.080 --> 0:05:16.200
And the whole point of making this whole thing is to make it less verbose and to reuse code

82
0:05:16.200 --> 0:05:20.800
so you can just have your own infra, mostly in Nix and a few bits and packages in P4 so

83
0:05:20.800 --> 0:05:24.360
you can basically put everything in the same place.

84
0:05:24.360 --> 0:05:28.760
In this case, you can just innovate things that I define in helpers and you can do the

85
0:05:28.760 --> 0:05:30.960
same thing and you get your P4 source.

86
0:05:30.960 --> 0:05:35.160
So that's a lot simpler and we don't have to define it each time.

87
0:05:35.160 --> 0:05:38.920
We don't have to define market versus each time, which is a thing in P4 because if you

88
0:05:38.920 --> 0:05:45.040
don't use standard P4, it's going to make you have to redefine all this as its program

89
0:05:45.040 --> 0:05:47.800
you make.

90
0:05:47.800 --> 0:05:52.760
It is thanks to helpers that I wrote down in my packages.

91
0:05:52.760 --> 0:05:53.760
Great.

92
0:05:53.760 --> 0:05:55.480
So, what does the hand-wistle look like?

93
0:05:55.480 --> 0:05:59.160
Because I'm saying, oh, this is the Nix code, this is what it looks like, et cetera.

94
0:05:59.160 --> 0:06:00.160
Yeah, it's great.

95
0:06:00.160 --> 0:06:01.160
Okay.

96
0:06:01.160 --> 0:06:05.760
So, this is basically the transpire.

97
0:06:05.760 --> 0:06:09.200
It's kind of dirty Nix in a way.

98
0:06:09.200 --> 0:06:12.520
You can see it's a lot of message functions.

99
0:06:12.520 --> 0:06:18.080
But basically, the idea is that I define a module, a NixOS module, which verifies the

100
0:06:18.080 --> 0:06:20.080
types of what I give it in this case, the header.

101
0:06:20.080 --> 0:06:21.760
I give it a default type.

102
0:06:21.760 --> 0:06:26.880
Then you can have the union, the content, the one-art, et cetera, which are then parsed

103
0:06:26.880 --> 0:06:34.480
by the transpire, which are these huge nested functions, which basically just map strokes

104
0:06:34.480 --> 0:06:41.120
like Nix, Nix, and H2S, I mean, into just P4 materials and then just write it.

105
0:06:41.120 --> 0:06:42.880
Which is soft to search transpire.

106
0:06:42.880 --> 0:06:46.680
It's nothing fancy, but it's fine.

107
0:06:46.680 --> 0:06:51.120
And so, what does the hand-wistle look like after the transpire?

108
0:06:51.120 --> 0:06:52.840
It looks like P4 code.

109
0:06:52.840 --> 0:06:59.400
But pretty clean, you have the includes, the define, the maps, maxups, standard metadata,

110
0:06:59.400 --> 0:07:01.200
then you have your access, et cetera.

111
0:07:01.200 --> 0:07:09.360
And then you can include your own code.

112
0:07:09.360 --> 0:07:17.040
And then this rule, P4 code, is then processed by the target compiler, which then processes

113
0:07:17.040 --> 0:07:18.800
it to its own platform.

114
0:07:18.800 --> 0:07:23.440
Say it can actually generate, like, say, eBPF code, so it runs on Linux.

115
0:07:23.440 --> 0:07:30.480
eBPF is basically like this kernel thingy that you can run to have more privileges.

116
0:07:30.480 --> 0:07:32.760
I'll explain it later if I have the time.

117
0:07:32.760 --> 0:07:34.440
And this is BMPV2.

118
0:07:34.440 --> 0:07:36.720
And BMPV2 is just a simplified model architecture.

119
0:07:36.720 --> 0:07:38.400
I'll also talk about it later.

120
0:07:38.400 --> 0:07:42.640
So basically, it's a soft to search transpiler that has multiple stages and allows you to

121
0:07:42.640 --> 0:07:45.800
specify P4 functions and reuse concepts.

122
0:07:45.800 --> 0:07:49.040
It's nothing fancy, but it's useful.

123
0:07:49.040 --> 0:07:53.160
So now that I talked about BMPV2, I think I have the time to do it.

124
0:07:53.160 --> 0:07:54.720
So what is it?

125
0:07:54.720 --> 0:07:56.560
Glad you asked.

126
0:07:56.560 --> 0:08:02.360
So the simple switch architecture is the defacto architecture that is used to basically test

127
0:08:02.360 --> 0:08:04.840
P4C, which is the main compiler.

128
0:08:04.840 --> 0:08:10.720
So it's basically like this kind of standard test setup that you can use to just see if

129
0:08:10.720 --> 0:08:11.840
your code works.

130
0:08:11.840 --> 0:08:12.840
But it's not fast.

131
0:08:12.840 --> 0:08:14.500
You can't really target it to anywhere.

132
0:08:14.500 --> 0:08:19.160
It's basically like this low user length thing that you can use to just test your program

133
0:08:19.160 --> 0:08:24.680
that is not fast, but does mostly what you want.

134
0:08:24.680 --> 0:08:28.280
It's basically just like this interface for targeting the switch.

135
0:08:28.280 --> 0:08:30.080
It's an abstract interface.

136
0:08:30.080 --> 0:08:35.160
And it's also used to just verify how P4C works.

137
0:08:35.160 --> 0:08:40.800
So now to continue a bit more on P4, to set up, like to use P4, you need a target.

138
0:08:40.800 --> 0:08:47.080
And the main targets that are currently implemented in P4C are user length, which is in this case

139
0:08:47.080 --> 0:08:48.120
eBPF.

140
0:08:48.120 --> 0:08:51.200
Some people are going to criticize this because eBPF is a click click channel.

141
0:08:51.200 --> 0:08:54.800
But what I mean by user length is I mean it runs on a computer.

142
0:08:54.800 --> 0:09:00.560
DPDK, which has, and this is why I'm saying it's user length, its own user length code

143
0:09:00.560 --> 0:09:01.560
that can run.

144
0:09:01.560 --> 0:09:07.680
But the DPDK also is like this, how do you call that?

145
0:09:07.680 --> 0:09:08.680
An API, I guess.

146
0:09:08.680 --> 0:09:11.320
It's an API that can target a bunch of devices.

147
0:09:11.320 --> 0:09:15.080
So it's not only user length, but it has a user length point.

148
0:09:15.080 --> 0:09:18.960
Then hardware, because you can use DPDK to also target hardware.

149
0:09:18.960 --> 0:09:24.080
Say FPGAs, which are like for people that don't know things that you can use to say

150
0:09:24.080 --> 0:09:25.600
program CPUs or whatnot.

151
0:09:25.600 --> 0:09:30.120
You can basically just reconfigure the electrical level, electrical gates, etc.

152
0:09:30.120 --> 0:09:51.520
And then custom

153
0:09:51.520 --> 0:09:58.400
with a few better devices changes and like some say some some control functions usually

154
0:09:58.400 --> 0:10:01.720
have a definition specific for eBPF and the like.

155
0:10:01.720 --> 0:10:06.400
So there are a few changes, but overall you can target basically all of these with mostly

156
0:10:06.400 --> 0:10:09.000
the same code, which is great.

157
0:10:09.000 --> 0:10:11.000
But this also needs changes to be transpiler.

158
0:10:11.000 --> 0:10:15.320
So you need to have more options so you can target every different one.

159
0:10:15.320 --> 0:10:20.260
So you can say, have the role mess auto generated by transpiler.

160
0:10:20.260 --> 0:10:25.080
So say you can just in Nix define, hey, I want target X and it's going to do it automatically

161
0:10:25.080 --> 0:10:29.140
for you without having to change the P4 code, which is mess.

162
0:10:29.140 --> 0:10:32.600
So now introducing FPGAs on Nix.

163
0:10:32.600 --> 0:10:34.760
And I'm actually not kidding.

164
0:10:34.760 --> 0:10:37.640
The thing is I forgot to actually take the picture before going to for them.

165
0:10:37.640 --> 0:10:39.200
So imagine it's really hard.

166
0:10:39.200 --> 0:10:44.040
Basically an FPGA connected to a computer who say USB or whatnot and then connected

167
0:10:44.040 --> 0:10:45.820
to the network for Ethernet.

168
0:10:45.820 --> 0:10:51.880
The idea is that we are not running Nix on an FPGA.

169
0:10:51.880 --> 0:10:54.880
We are using Nix to define what the FPGA wants.

170
0:10:54.880 --> 0:10:56.920
In this case, the network stack.

171
0:10:56.920 --> 0:11:02.840
So we need to define like say the devices we have in Nix directly.

172
0:11:02.840 --> 0:11:09.920
So say I'm going to have like a hardware dot, I know, a last order that type is my FPGA.

173
0:11:09.920 --> 0:11:15.120
And then I'm going to explain how I can define it.

174
0:11:15.120 --> 0:11:18.080
And you need some kind of auto reload deployment mechanism.

175
0:11:18.080 --> 0:11:23.280
Usually like most FPGA providers just provide you a way through USB.

176
0:11:23.280 --> 0:11:28.080
You can also have just an auto reload of fools through the control plane in P4 directly if

177
0:11:28.080 --> 0:11:34.320
you want to go this way, which means basically no downtime network stack, which is nice.

178
0:11:34.320 --> 0:11:38.080
And yeah, you can have a data plane mechanism for feeding data to your host.

179
0:11:38.080 --> 0:11:41.860
All of this is a work in progress for now.

180
0:11:41.860 --> 0:11:44.000
So the transpiler is down.

181
0:11:44.000 --> 0:11:51.480
Basically most of the source to source transpiler, including the target sub package, you can

182
0:11:51.480 --> 0:11:55.240
use BMP2 nowadays, you can use DPDK and whatnot.

183
0:11:55.240 --> 0:11:57.480
But the hardware definitions are currently work in progress.

184
0:11:57.480 --> 0:12:02.720
I haven't had the time to work on them yet, but it's close enough.

185
0:12:02.720 --> 0:12:03.720
And software works.

186
0:12:03.720 --> 0:12:07.360
So yeah, that's basically it.

187
0:12:07.360 --> 0:12:08.360
Any questions?

188
0:12:08.360 --> 0:12:09.360
Yeah.

189
0:12:09.360 --> 0:12:12.120
How can you get a switch that runs P4?

190
0:12:12.120 --> 0:12:21.880
So the question is, how can I get a switch that runs P4?

191
0:12:21.880 --> 0:12:25.960
So you don't technically need a switch that runs P4.

192
0:12:25.960 --> 0:12:31.240
You can just use any say FPGA or DPDU that you can reprogram and that is targeted by

193
0:12:31.240 --> 0:12:32.240
DPDK.

194
0:12:32.240 --> 0:12:36.000
You also have like some routers that have ASICs that are reprogrammable.

195
0:12:36.000 --> 0:12:41.520
As long as you can target it with DPDK, which is basically the API you can target, you can

196
0:12:41.520 --> 0:12:46.360
just use it and run P4 on it basically.

197
0:12:46.360 --> 0:12:47.360
Yeah.

198
0:12:47.360 --> 0:12:48.360
Okay.

199
0:12:48.360 --> 0:13:06.240
So the question is, what makes Nix particularly nice in this case for P4?

200
0:13:06.240 --> 0:13:11.620
So what makes Nix in this case useful is that it's at the border of basically like this

201
0:13:11.620 --> 0:13:15.040
Boeing code to generate per target.

202
0:13:15.040 --> 0:13:18.720
And you also need to actually target an infrastructure.

203
0:13:18.720 --> 0:13:23.760
And basically, Nix is this great thing where you can just define an interface, an infrastructure

204
0:13:23.760 --> 0:13:28.040
I mean, and you can then write automated code.

205
0:13:28.040 --> 0:13:32.120
So Nix in this case has two key roles.

206
0:13:32.120 --> 0:13:37.280
Just allowing you to write code with less, not having to rewrite every time thing.

207
0:13:37.280 --> 0:13:39.680
Making it just basically this handy source tool.

208
0:13:39.680 --> 0:13:44.280
And the thing is to define your network stack in the same place as you would define your

209
0:13:44.280 --> 0:13:47.400
standard infrastructure, which means say, I want to define this server.

210
0:13:47.400 --> 0:13:48.400
Okay, cool.

211
0:13:48.400 --> 0:13:51.560
But now my server has like 100 million requests.

212
0:13:51.560 --> 0:13:54.800
And I need to actually like upload this for some degree.

213
0:13:54.800 --> 0:13:59.240
So I'm just going to say, hey, hardware definition.fpga is my PGA.

214
0:13:59.240 --> 0:14:00.960
And now I have my speed magically.

215
0:14:00.960 --> 0:14:11.320
Well, you need to pay for the PGA and pull anything but yeah, magically.

216
0:14:11.320 --> 0:14:12.320
Any other questions?

217
0:14:12.320 --> 0:14:13.320
Yeah.

218
0:14:13.320 --> 0:14:15.320
This is useful for things that are not that work quite straight.

219
0:14:15.320 --> 0:14:18.320
So you could do things that have nothing to do with networking for your targeting your

220
0:14:18.320 --> 0:14:19.320
PGA.

221
0:14:19.320 --> 0:14:25.040
Is there a scope for this or is it basically just the networking?

222
0:14:25.040 --> 0:14:30.440
So the question is, is this going to be useful for other things than networking?

223
0:14:30.440 --> 0:14:31.800
The answer is yes or no.

224
0:14:31.800 --> 0:14:37.040
So the FPGA deployment mechanism, yes, is going to be useful in this case.

225
0:14:37.040 --> 0:14:40.840
Because you can just reuse this thing and use it outside of the scope of PFA.

226
0:14:40.840 --> 0:14:45.200
The reason to know is that everything else is basically PFA specific.

227
0:14:45.200 --> 0:14:51.200
But yes, the last part is probably going to be reusable for other things than PFA, first

228
0:14:51.200 --> 0:14:52.200
of all.

229
0:14:52.200 --> 0:14:57.360
And second of all, there's going to be a few different FPGA targets probably.

230
0:14:57.360 --> 0:15:01.800
Like there's always going to be proprietary ones with DPDK that have their own, say, deployment

231
0:15:01.800 --> 0:15:04.120
binaries that are clusters that are pain.

232
0:15:04.120 --> 0:15:10.320
But you can always see, like, try to implement, say, your these fingers and whatnot to have

233
0:15:10.320 --> 0:15:13.240
an open source FPGA setup.

234
0:15:13.240 --> 0:15:18.880
So yeah, you can use it outside of PFA, basically.

235
0:15:18.880 --> 0:15:19.880
Yes?

236
0:15:19.880 --> 0:15:35.560
If I can answer that in the first place, the P4 language is heavily exposed to the own

237
0:15:35.560 --> 0:15:36.560
networking.

238
0:15:36.560 --> 0:15:40.560
Like, a lot of people who are using it, like, Western Digital, like, the cache coherent

239
0:15:40.560 --> 0:15:53.280
process in a way that you can do process.

240
0:15:53.280 --> 0:15:56.880
That's a really good point, just for the live people.

241
0:15:56.880 --> 0:16:00.520
Basically what was said is that you can use P4 to process any kind of stream and modify

242
0:16:00.520 --> 0:16:01.520
it.

243
0:16:01.520 --> 0:16:06.600
And it's used by companies to process this in an accelerated fashion, which is very true

244
0:16:06.600 --> 0:16:08.120
and very handy.

245
0:16:08.120 --> 0:16:13.120
It's not the most common user before, but before it's already not the weak commands.

246
0:16:13.120 --> 0:16:15.120
We have two steps.

247
0:16:15.120 --> 0:16:16.120
Yeah.

248
0:16:16.120 --> 0:16:17.120
Did you want to do people?

249
0:16:17.120 --> 0:16:18.120
Okay, let's do that.

250
0:16:18.120 --> 0:16:19.120
So.

251
0:16:19.120 --> 0:16:24.120
So, thank you, that was me, going to the party.

252
0:16:24.120 --> 0:16:29.120
Here's my website, here's my email, and yeah, we have one last thing to show.

253
0:16:29.120 --> 0:16:30.120
So.

254
0:16:30.120 --> 0:16:34.120
I want to take a photo of your own.

255
0:16:34.120 --> 0:16:35.120
Ah, sure.

256
0:16:35.120 --> 0:16:38.120
It should be recorded so.

257
0:16:38.120 --> 0:16:40.120
Yeah, I've got one online.

258
0:16:40.120 --> 0:16:41.120
Okay.

259
0:16:41.120 --> 0:16:42.120
Okay.

260
0:16:42.120 --> 0:16:44.120
Did I expect people to actually care about me, honestly?

261
0:16:44.120 --> 0:16:45.120
DIMU.

262
0:16:45.120 --> 0:16:46.120
So.

263
0:16:46.120 --> 0:16:50.120
DIMU is a bit of a strange thing because the next talk is about secure boot.

264
0:16:50.120 --> 0:16:51.120
Yes.

265
0:16:51.120 --> 0:16:53.120
So it's a DIMU about secure boot?

266
0:16:53.120 --> 0:16:55.120
There's, yeah, there's one thing I forgot to mention.

267
0:16:55.120 --> 0:16:59.120
I'm working with people on this, but I'm also working on the secure boot thing is a bit,

268
0:16:59.120 --> 0:17:00.120
at least.

269
0:17:00.120 --> 0:17:03.120
So, what I wanted to show you is that.

270
0:17:03.120 --> 0:17:05.120
Let me just do that.

271
0:17:05.120 --> 0:17:06.120
Do that.

272
0:17:06.120 --> 0:17:07.120
So, I can just do this.

273
0:17:07.120 --> 0:17:13.120
I started this small PR the other day, which is like, grab support for secure boot.

274
0:17:13.120 --> 0:17:19.120
So, yeah, I think now we can actually boot secure boot on XOS using grab.

275
0:17:19.120 --> 0:17:26.120
And to head on to that, let me just show it there because it's, I have too many windows.

276
0:17:26.120 --> 0:17:28.120
Ah, there we go.

277
0:17:28.120 --> 0:17:30.120
Let me just.

278
0:17:30.120 --> 0:17:32.120
Yeah, there we go.

279
0:17:32.120 --> 0:17:33.120
Welcome to grab.

280
0:17:33.120 --> 0:17:38.120
And I'm going to, I'm just going to zoom for the live.

281
0:17:38.120 --> 0:17:39.120
Okay.

282
0:17:39.120 --> 0:17:40.120
Yeah.

283
0:17:40.120 --> 0:17:41.120
There we go.

284
0:17:41.120 --> 0:17:46.120
And basically just this whole thing is working on a secure boot.

285
0:17:46.120 --> 0:17:48.120
And as you can see, it's panicking, but it's close enough.

286
0:17:48.120 --> 0:17:49.120
It's close enough.

287
0:17:49.120 --> 0:17:52.120
So now.

288
0:17:52.120 --> 0:17:55.120
So now.

289
0:17:55.120 --> 0:18:05.120
I'm going to leave in a speaker explaining what Lensa Booty is.


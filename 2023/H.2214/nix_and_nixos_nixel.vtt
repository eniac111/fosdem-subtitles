WEBVTT

00:00.000 --> 00:09.280
Thank you.

00:09.280 --> 00:12.400
Hello, Fuzzdam.

00:12.400 --> 00:13.960
I'm Yanem Dawey.

00:13.960 --> 00:17.480
I'm working on a twig on a project called Nickel.

00:17.480 --> 00:20.840
Nickel is a configuration language.

00:20.840 --> 00:25.600
And is it?

00:25.600 --> 00:26.600
Okay.

00:26.600 --> 00:32.000
Okay.

00:32.000 --> 00:37.200
So in this talk, I want to talk about Nixcel, which is framework to use Nickel as an alternative

00:37.200 --> 00:39.680
front-end language for Nix.

00:39.680 --> 00:45.160
And my dear friend and colleague, Guillaume, who just got off stage, has a strange morning

00:45.160 --> 00:51.280
routine where he stands in front of me and says, I have a question.

00:51.280 --> 00:52.280
When?

00:52.280 --> 00:54.480
So when can I use Nickel for Nix?

00:54.480 --> 00:59.680
And so my primary motivation is just to be able to enjoy my morning coffee in peace.

00:59.680 --> 01:04.400
And my second motivation is to try to get you as excited as Guillaume is about Nickel

01:04.400 --> 01:11.040
or at least 10% would be ready for it because he's a very enthusiastic man.

01:11.040 --> 01:16.000
So beside may be a few people who got lost because Fuzzdam is huge.

01:16.000 --> 01:18.720
I think we all agree in this room that Nix is a powerful tool.

01:18.720 --> 01:22.960
There are a bunch of things that only Nix is capable of.

01:22.960 --> 01:25.560
And my personal favorites are dev shells.

01:25.560 --> 01:27.440
So you need to hack on a project.

01:27.440 --> 01:33.160
You just enter the directory, type Nix develop, you have all your tools you need, then you

01:33.160 --> 01:36.720
exit the directory, everything is back to normal.

01:36.720 --> 01:39.720
NixOS, we've talked about that.

01:39.720 --> 01:45.320
Being able to manage your whole configuration in.files, rollbacks, competing version of

01:45.320 --> 01:47.200
the same packages.

01:47.200 --> 01:48.760
Pretty nice.

01:48.760 --> 01:53.800
And I guess each one of you has their own usage for embedded or whatever of Nix, either

01:53.800 --> 01:55.720
personal or professional.

01:55.720 --> 02:02.280
And if that's the case, one of the main interface you have with Nix is the language, Nix expressions.

02:02.280 --> 02:03.800
And in fact, it's a pretty simple language.

02:03.800 --> 02:09.520
It's mostly JSON plus functions plus bit of more strange things, but mostly.

02:09.520 --> 02:11.920
And paradoxically, the language is simple.

02:11.920 --> 02:14.080
I find it quite hard to use actually.

02:14.080 --> 02:22.840
Yes, it's two with only one O to use in practice for a bench and resin at least for Nix.

02:22.840 --> 02:26.000
And one of the main issue is error reporting.

02:26.000 --> 02:31.720
And I think it's a pretty fundamental problem in the language, which is dynamically typed

02:31.720 --> 02:36.760
and lazy, is that when you make a mistake, your little mistake travel all around the

02:36.760 --> 02:37.760
code base.

02:37.760 --> 02:41.680
And only when something consumes your value, then everything blows up.

02:41.680 --> 02:46.520
And the error usually points out deep inside Nix code because that's what is consuming

02:46.520 --> 02:47.520
your value.

02:47.520 --> 02:53.240
And I would like the error to point out the point when I made the mistake originally.

02:53.240 --> 02:56.240
My favorite one is infinite recursion in the module system.

02:56.240 --> 02:58.080
So I was a newbie at Nix.

02:58.080 --> 03:01.240
I tried to move my Nix size config to flakes.

03:01.240 --> 03:04.000
I made a typo on an argument to a simple module.

03:04.000 --> 03:06.880
And I got infinite recursion, but nothing was recursive.

03:06.880 --> 03:11.660
I didn't know what was happening at all.

03:11.660 --> 03:15.240
Something can be said about discoverability, in particular when you're writing code.

03:15.240 --> 03:17.160
So I'm writing some Nix code.

03:17.160 --> 03:20.680
I would like to know what are the standard library functions that are available?

03:20.680 --> 03:23.360
What are the list functions from Nix packages that I can use?

03:23.360 --> 03:24.360
What are their type?

03:24.360 --> 03:25.920
What argument should I put there?

03:25.920 --> 03:27.860
I'm writing a flake.

03:27.860 --> 03:29.160
What is the schema of a flake?

03:29.160 --> 03:34.000
Could I have some completion or at least some in-code information to know what field I'm

03:34.000 --> 03:38.680
supposed or attribute I'm supposed to fit?

03:38.680 --> 03:42.280
And the last point is that Nix is simple.

03:42.280 --> 03:44.880
And usually it's a good thing in language design.

03:44.880 --> 03:49.800
Like you build a rock-solid core and then the rest can be done as library function.

03:49.800 --> 03:52.400
But Nix is not a general purpose language.

03:52.400 --> 03:54.000
It's a domain-specific language.

03:54.000 --> 03:59.520
And if users of your domain found themselves having to solve the same problem again and

03:59.520 --> 04:04.880
again and again, then maybe the domain-specific language should provide a native list way

04:04.880 --> 04:06.980
to solve this problem.

04:06.980 --> 04:08.960
And one example is overriding.

04:08.960 --> 04:15.160
Something that you do a lot in Nix is taking a module or a configuration or whatever object,

04:15.160 --> 04:20.440
tweaking a parameter and get the new result with all the dependency updated and so on.

04:20.440 --> 04:22.840
And it's pretty not trivial to do in Nix.

04:22.840 --> 04:26.800
There are a lot of different ways, a lot of different abstractions implemented by different

04:26.800 --> 04:27.800
people.

04:27.800 --> 04:36.040
And that makes for hard experience, in my opinion, especially as a newbie.

04:36.040 --> 04:37.840
And it's not me saying that.

04:37.840 --> 04:43.120
It's actually Alco, the creator of Nix, who wrote a gist some long time ago, which is

04:43.120 --> 04:47.600
partly one of the origin of Nix about the deficiencies of the Nix language.

04:47.600 --> 04:51.680
And one thing he says is that Nix is a DSL for package and configuration management,

04:51.680 --> 04:56.440
but it doesn't have any notion of package nor configuration.

04:56.440 --> 05:01.760
So to recap, one of the main things is developer experience in general.

05:01.760 --> 05:05.920
Error reporting is one of the main interfaces with the language, but something goes wrong.

05:05.920 --> 05:06.920
It's important.

05:06.920 --> 05:12.240
There is something to be said about Nix being too simple somehow or too barebone for its

05:12.240 --> 05:13.240
own good.

05:13.240 --> 05:16.680
And so people reinvent the wheel in a lot of different ways.

05:16.680 --> 05:21.280
And I mean, sometimes it's fine to have competing libraries and so on.

05:21.280 --> 05:26.960
But for fundamental things, it's like when you want to put something in a standard library

05:26.960 --> 05:27.960
of a long wait.

05:27.960 --> 05:29.960
Like, that should be only one way to do it.

05:29.960 --> 05:34.820
And it's efficient and so on.

05:34.820 --> 05:36.560
So what can we do about it?

05:36.560 --> 05:39.520
Well, I propose to do nickel.

05:39.520 --> 05:45.960
Nickel is a general purpose domain-specific language, if that makes sense, for configuration.

05:45.960 --> 05:48.320
And what nickel has, it has sound gradual typing.

05:48.320 --> 05:52.760
It has optin static typing with higher rank polymorphism, structural typing with low polymorphism.

05:52.760 --> 05:55.120
Contract is like, I've been found that, yeah, no.

05:55.120 --> 05:58.240
I mean, yes, in fact, but that's not the point.

05:58.240 --> 06:01.440
The point, I mean, those are means to an end.

06:01.440 --> 06:04.560
And the end is that your practice is nice.

06:04.560 --> 06:08.280
So here it's a little video demo.

06:08.280 --> 06:10.920
On the right, we have something called a contract.

06:10.920 --> 06:17.400
It's like a NixOS type, something that is checked at one time by the nickel interpreter.

06:17.400 --> 06:19.840
And you write it actually pretty much like a type or a schema.

06:19.840 --> 06:22.480
You say, oh, nickel derivation, this is taken from Nixl.

06:22.480 --> 06:24.320
It's a contract defined by Nixl.

06:24.320 --> 06:28.240
It should have a name, a version, dependencies, system, and so on.

06:28.240 --> 06:32.120
You can attach other contracts and metadata in general to this field.

06:32.120 --> 06:35.400
You can say, oh, name must be a string, version must be a string.

06:35.400 --> 06:37.280
Dependency should be an array of derivation.

06:37.280 --> 06:39.760
Derevation is another contract that you'll define somewhere.

06:39.760 --> 06:41.720
You can attach default value.

06:41.720 --> 06:43.600
Dependencies are empty by default.

06:43.600 --> 06:48.680
You can attach, you can say that the field is optional, for example, because I think

06:48.680 --> 06:54.680
Nix is not strictly required by building the derivation that version is defined.

06:54.680 --> 06:58.880
And the thing is that all this metadata can be leveraged by the tooling.

06:58.880 --> 07:02.800
On the left, we are trying to write something looking like a derivation that doesn't matter

07:02.800 --> 07:04.000
at this point.

07:04.000 --> 07:06.040
But we define an output field.

07:06.040 --> 07:09.200
Field is just nickel name for attributes.

07:09.200 --> 07:10.600
And we apply this contract.

07:10.600 --> 07:12.440
We just import it.

07:12.440 --> 07:14.760
And let's see how it turns out.

07:14.760 --> 07:20.840
It turns out that we get completion for what we should put inside this output stuff, like

07:20.840 --> 07:24.760
name, okay, we have documentation, we have the type, actually, type in the string is

07:24.760 --> 07:27.280
name, whatever, the contract.

07:27.280 --> 07:31.960
We get completion for building command and for nested recall, like, oh, what should I

07:31.960 --> 07:34.880
put inside the building command?

07:34.880 --> 07:39.360
You can leverage also this information, not only from DSP, but from the CLI.

07:39.360 --> 07:41.040
Oh, no, sorry, I forgot.

07:41.040 --> 07:45.000
You get completion for the standard library, and actually any library.

07:45.000 --> 07:48.800
Those functions are statically typed, but that's another subject.

07:48.800 --> 07:52.040
You can read this information from the CLI.

07:52.040 --> 07:55.800
Using nickel query, you can say, oh, what's inside contract that's name?

07:55.800 --> 07:57.080
What is the field nickel derivation?

07:57.080 --> 08:00.280
We get documentation and what are the available fields?

08:00.280 --> 08:02.760
You can say, oh, okay, what is build command in particular?

08:02.760 --> 08:05.320
I get documentation and field.

08:05.320 --> 08:09.880
Now what happens if I make a silly mistake and build command which should be a record

08:09.880 --> 08:14.480
of strings, I just made it a string, like, instead of an attribute set.

08:14.480 --> 08:17.920
I tried to run nickel on that.

08:17.920 --> 08:20.240
What I get is a normal message.

08:20.240 --> 08:23.840
The first blue part says, what is a contract that I just broke?

08:23.840 --> 08:26.360
You should have a record with args and so on.

08:26.360 --> 08:29.920
The second light points at where it defines the value, not where it's used.

08:29.920 --> 08:32.680
It's red, and it says, oh, this is wrong.

08:32.680 --> 08:34.920
This doesn't respect this contract.

08:34.920 --> 08:39.440
The third part is not really useful there, but it's giving you the evaluated value, which

08:39.440 --> 08:43.440
means that if build command was a complex expression but out of map and fold, you still

08:43.440 --> 08:46.880
get the final stuff that it builds.

08:46.880 --> 08:52.120
And this green thing here is taking who the L is imposing this contract.

08:52.120 --> 08:56.920
So these points to build command field inside the nickel derivation contract, inside the

08:56.920 --> 08:59.320
nixl library.

08:59.320 --> 09:01.600
And so this is just runtime validation.

09:01.600 --> 09:08.400
You could do it with libraries, nixos does it, but first I think this kind of nice structural

09:08.400 --> 09:13.160
syntax for it, as well as this advanced error reporting, is really hard, if not impossible,

09:13.160 --> 09:17.160
to achieve purely in library code because there are special things in the nickel interpreter

09:17.160 --> 09:22.400
to handle contract application and track argument and the stack and so on.

09:22.400 --> 09:30.800
So what nix is about is relevant, thorough, and early error reporting as much as possible.

09:30.800 --> 09:36.640
Discourability, you can attach all those meta information to fields, and they are understood

09:36.640 --> 09:38.720
by the tooling.

09:38.720 --> 09:43.400
And in particular by the LSP, giving you interactive development process.

09:43.400 --> 09:49.840
And then arguably the language is more sophisticated than nix, but as a user, I find it easier.

09:49.840 --> 09:51.280
Okay, great.

09:51.280 --> 09:54.560
That's fine, that's just me great 80,000 package.

09:54.560 --> 09:56.120
No big deal.

09:56.120 --> 09:58.400
Nope, not going to happen.

09:58.400 --> 10:01.200
Nix package is a huge behemoth.

10:01.200 --> 10:06.440
It's probably the, I mean, the most important thing in nix, I mean, the value of nix is

10:06.440 --> 10:11.560
all this domain knowledge on how to build package, encoded in a code that can be action

10:11.560 --> 10:13.880
by the machine and is not going anywhere.

10:13.880 --> 10:21.200
So whatever we do, if we want to use an alternative frontend, we have to be able to use nix packages.

10:21.200 --> 10:24.320
So meet your first nickel derivation.

10:24.320 --> 10:26.160
It's a dev shell.

10:26.160 --> 10:31.160
And from a distance, I want you to notice that there is no function at the top.

10:31.160 --> 10:34.600
So usually nix packages, the first thing you do when you define a package is to define

10:34.600 --> 10:35.600
a function.

10:35.600 --> 10:40.200
This has a number of problems, one being that before doing anything with it, like getting

10:40.200 --> 10:43.120
the name or the version, you have to apply it to some arguments.

10:43.120 --> 10:46.160
And this argument may be packages, so you need to apply them and so on.

10:46.160 --> 10:48.880
So you need to evaluate the transitive dependency before doing anything.

10:48.880 --> 10:50.800
Here is just a flat record.

10:50.800 --> 10:53.440
Record are recursive by default in nix.

10:53.440 --> 10:56.200
So line one, we import some thing called builders.

10:56.200 --> 10:58.760
We'll see later what is from the nix cell.

10:58.760 --> 11:01.540
Builders is given by nix cell.

11:01.540 --> 11:06.960
And line four to six, for now, our API is that you need to declare a bit like a flake,

11:06.960 --> 11:10.440
but at the level of the derivation what you are going to take from the nix world.

11:10.440 --> 11:14.400
But here I say I want to take CRL from nix packages.

11:14.400 --> 11:23.320
Line nine to 12, I'm defining the actual derivation, so to speak, even if it seems way smaller.

11:23.320 --> 11:24.860
So I give a name.

11:24.860 --> 11:28.560
And then I put this input.crol in the pass.

11:28.560 --> 11:32.320
So this funny looking string, I won't have time to detail, but it's called a symbolic

11:32.320 --> 11:39.680
string is a way to simulate nix string context, but not only actually, it's a pretty generic

11:39.680 --> 11:43.920
mechanism, but to have the same entities like input.crol is not actually a string, it's

11:43.920 --> 11:46.600
a derivation which has a store pass and so on.

11:46.600 --> 11:51.040
And you do that in nix and it's not trivial to do it in a different language, but yeah,

11:51.040 --> 11:53.240
this is a solution to that.

11:53.240 --> 11:58.520
And we are using this input.crol, but we haven't seen any inputs yet.

11:58.520 --> 12:01.160
The other was called input spec.

12:01.160 --> 12:06.880
So input is defined, not really, but it's defined line seven.

12:06.880 --> 12:09.960
This is just a field without a definition.

12:09.960 --> 12:14.960
And in nickel, the idea is that we call a recursive and we have something called merge

12:14.960 --> 12:16.960
operation, which is the ampersand.

12:16.960 --> 12:22.840
It's a bit like the slash slash of nix that is combining records, but it doesn't give

12:22.840 --> 12:24.760
priority to the left hand side or right hand side.

12:24.760 --> 12:28.520
It's just try to combine and see if there is a conflict, you have to use priorities.

12:28.520 --> 12:30.740
A bit like the nix or the module system.

12:30.740 --> 12:35.160
But it does what you expect naively when you start nix, that it works on nested record

12:35.160 --> 12:37.480
and that it works on recursive record.

12:37.480 --> 12:41.360
That is, if you override something there, everything that depends on it recursively

12:41.360 --> 12:43.800
will be automatically overridden.

12:43.800 --> 12:49.160
So what we do, line seven is a bit like defining a function argument.

12:49.160 --> 12:54.200
So we're just doing function in different way, so to speak, but in a way that is way

12:54.200 --> 12:58.200
nicer for nix because it just looks like configuration.

12:58.200 --> 13:01.960
Combining is trivial, I just add one line and I merge with something that redefines

13:01.960 --> 13:03.260
the value.

13:03.260 --> 13:04.360
Combining stuff is trivial.

13:04.360 --> 13:10.320
So for example, line 14 and 15, I use some predefined builders which are mostly looking

13:10.320 --> 13:15.800
like this derivation and that has rest, they have environments and they see the virtual

13:15.800 --> 13:17.720
environment in my shell.

13:17.720 --> 13:24.440
So I will end up with a shell that has here well all the rest we can and see.

13:24.440 --> 13:31.560
So I think I won't have time to dwell into the detail too much, but it's a bit convoluted

13:31.560 --> 13:32.560
right now.

13:32.560 --> 13:35.320
We have a lot of back and forth between nix and nikl.

13:35.320 --> 13:37.560
Nix is a driver.

13:37.560 --> 13:42.320
What's important is that these parts will get improved, but somehow it's naturally,

13:42.320 --> 13:47.720
it's a bit orthogonal to all the design of the nikl style, what do the API look like,

13:47.720 --> 13:49.760
what are the builders, how we do overriding.

13:49.760 --> 13:50.760
It's orthogonal.

13:50.760 --> 13:53.600
This part is just how do we communicate with nix packages.

13:53.600 --> 13:58.480
Right now, nix is leading and everything that cross the boundaries can be functions.

13:58.480 --> 14:01.760
It has to be data, so in practice it's JSON.

14:01.760 --> 14:05.640
And so you have a bit of back and forth like what you input or I will extract that from

14:05.640 --> 14:08.720
nix packages, I give you the derivation JSON.

14:08.720 --> 14:12.960
Nikl has almost everything to build the derivation, but it cannot build it, so it cannot give

14:12.960 --> 14:16.960
the argument to nix saying, hey, please can you call derivation for me.

14:16.960 --> 14:20.080
But that works for now at least.

14:20.080 --> 14:22.360
So it's something.

14:22.360 --> 14:25.880
So the limitation of this model is that you have a lot of back and forth and the error

14:25.880 --> 14:28.320
messages at the boundary are pretty bad.

14:28.320 --> 14:32.880
If you try to import the packages that don't exist in nix packages, that's going to be

14:32.880 --> 14:35.080
ugly.

14:35.080 --> 14:38.120
And you can't override the nix package from within nikl.

14:38.120 --> 14:44.640
That's kind of an important limitation because the only thing you can get is data.

14:44.640 --> 14:48.960
You can do it on the nix side in the overarching flake, but it can't defeat the purpose.

14:48.960 --> 14:51.840
We like to be able to do that from nikl.

14:51.840 --> 14:57.760
The roadmap to solve that is to be able to import and involve nix expression directly

14:57.760 --> 14:58.760
in nikl.

14:58.760 --> 15:02.920
It's actually not that in reasonable because nix is simple and close to being a subset

15:02.920 --> 15:03.920
of nikl.

15:03.920 --> 15:08.520
So we are already able to transpire most of nix as far as the language is concerned, but

15:08.520 --> 15:13.680
we are missing all the built-in dot atrof derivation and things like that to make it

15:13.680 --> 15:14.680
work.

15:14.680 --> 15:17.680
And I think it's the hardest part actually.

15:17.680 --> 15:23.000
Having nikl built-in to build derivation would probably piggyback on nix, but so that at

15:23.000 --> 15:25.840
least we don't have to do the last back and forth.

15:25.840 --> 15:27.840
Okay, but...

15:27.840 --> 15:39.040
Okay, we can do all the things and nikl becomes a driver and you don't have to go through

15:39.040 --> 15:42.480
those back and forths you can override from nikl.

15:42.480 --> 15:43.480
For nix, what does it mean?

15:43.480 --> 15:47.920
I hope it means an improved developer experience, unified approach to configuration.

15:47.920 --> 15:49.760
These look like configuration more than nix.

15:49.760 --> 15:53.720
I find you just define a batch of fields and you merge stuff together.

15:53.720 --> 15:56.960
And a smoother learning curve for the newcomers.

15:56.960 --> 16:02.840
I didn't cover performance, but also having the merging being native and not a library

16:02.840 --> 16:06.240
function has more room for optimizations.

16:06.240 --> 16:11.480
And beyond, my secret dream is that nikl is a general purpose for configuration.

16:11.480 --> 16:16.480
So you could use the same language with the same notion, same contracts, same data model

16:16.480 --> 16:24.180
for all of your stack, terraform, Kubernetes, nix, exchange instinct between the layer.

16:24.180 --> 16:27.400
And something we are working on is incremental evaluation.

16:27.400 --> 16:33.280
It's a bit like incremental build, but at the level of evaluation I have this huge nix-OS

16:33.280 --> 16:34.280
configuration.

16:34.280 --> 16:35.280
I change one option.

16:35.280 --> 16:41.240
I want the interpreter to only propagate the changes to what needs to be actually reconputed.

16:41.240 --> 16:45.440
So to answer the initial question, nikl nix when?

16:45.440 --> 16:50.000
Well now we can already do this stuff, well next week because we haven't merged everything.

16:50.000 --> 16:51.800
But nixl will be released in 0.1.

16:51.800 --> 16:55.120
You could do the variation in basic dev shells.

16:55.120 --> 16:59.520
Nikl itself will reach 1.0 in the coming months.

16:59.520 --> 17:01.440
And it's still rough around the edge.

17:01.440 --> 17:04.520
You can't do everything you would like to do in nix.

17:04.520 --> 17:07.080
But the point is that I think we did the hardest.

17:07.080 --> 17:12.400
Like arriving at the first iteration was really complex and now everything is aligned and

17:12.400 --> 17:16.480
somehow we just have to build the same to polish the API and so on.

17:16.480 --> 17:19.000
And there is the same for terraform nikl.

17:19.000 --> 17:20.000
Thank you.

17:20.000 --> 17:45.840
So not yet.

17:45.840 --> 17:46.840
Not yet.

17:46.840 --> 17:51.680
Okay, sorry, did you finish your question?

17:51.680 --> 17:55.080
So I'm asking if we are transpiling nix to nikl.

17:55.080 --> 17:59.560
Right now, no, we are doing this back and forth with nix and JSON and so on.

17:59.560 --> 18:01.840
But that's the plan in the end.

18:01.840 --> 18:02.840
To transpile nix.

18:02.840 --> 18:06.840
You could import foo.nix from nikl and that would give you a nikl value and then you can

18:06.840 --> 18:12.840
do whatever you want with it.

18:12.840 --> 18:13.840
Yes?

18:13.840 --> 18:16.840
Yeah.

18:16.840 --> 18:26.680
Yeah, it's true.

18:26.680 --> 18:28.800
I guess you could.

18:28.800 --> 18:34.640
But probably the idea here is to reuse a nikl overriding mechanism which is we hope way

18:34.640 --> 18:35.640
simpler somehow.

18:35.640 --> 18:40.560
You don't have to do anything to get your things to be overrideable easily.

18:40.560 --> 18:45.920
So if I think terraform nix is not using a module-like system.

18:45.920 --> 18:46.920
Yeah.

18:46.920 --> 18:49.800
And there is terra nix maybe that is doing that.

18:49.800 --> 18:51.720
I don't remember, yes.

18:51.720 --> 18:52.720
But yeah, you could do that.

18:52.720 --> 18:57.480
Actually, you could wrap any nix package with a nikl interface somehow like FFI.

18:57.480 --> 19:03.480
Or you could redo it a bit to have a more, both are possible, I guess.

19:03.480 --> 19:08.480
One more round of applause, please.

19:08.480 --> 19:15.480
Thank you.

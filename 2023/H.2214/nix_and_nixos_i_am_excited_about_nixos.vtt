WEBVTT

00:00.000 --> 00:05.000
How many of you have used the two boxes?

00:05.000 --> 00:11.000
Those two are two half boxes because the other half is in, you know, in Havana there.

00:11.000 --> 00:14.000
But I guarantee those are two boxes.

00:14.000 --> 00:18.000
So one for the networking and one for the computing.

00:18.000 --> 00:20.000
I bought it years ago on eBay.

00:20.000 --> 00:28.000
I think some startups run out of business and they had like many full-size rack full of nooks

00:28.000 --> 00:31.000
and, you know, Nvidia boards.

00:31.000 --> 00:34.000
So I bought one and I started to play with it.

00:34.000 --> 00:39.000
So now I have ten nooks lying around at home, five GPU and I don't know what to do with them.

00:39.000 --> 00:41.000
So this is how everything started.

00:41.000 --> 00:47.000
So I have a single point of failure and all the SREs and DevOps here, you know, will hate it.

00:47.000 --> 00:50.000
But it's my single point of failure and I love it.

00:50.000 --> 00:53.000
And I call it Snowflake because it's unique.

00:53.000 --> 00:56.000
And what it does, it does a very minimal setup.

00:56.000 --> 01:00.000
It's the only long-living server or nooks, if I can call it server.

01:00.000 --> 01:01.000
I will call it server.

01:01.000 --> 01:04.000
So it's my only long-living server I have.

01:04.000 --> 01:07.000
And it runs a DHCP server.

01:07.000 --> 01:15.000
It runs Pixiboot, a TCP server and is the core of my home lab.

01:15.000 --> 01:21.000
It runs there and it distributes the, you know, the Nix OS derivation that I want to netboot

01:21.000 --> 01:25.000
on the other servers when I hook them to the network.

01:25.000 --> 01:33.000
As you know, because you are here and you are like me, I tend to automate everything I can.

01:33.000 --> 01:40.000
So as I said, this is the code that I wrote in the Nix OS derivation for the Snowflake server.

01:40.000 --> 01:43.000
I start OpenSSH, I configure my keys.

01:43.000 --> 01:48.000
I didn't, you know, paste that, the public key there because it was too long and not great,

01:48.000 --> 01:51.000
but you know how to do it.

01:51.000 --> 02:00.000
And I start PixiCore and I configure it with a package called Blackhole that is the distribution

02:00.000 --> 02:01.000
I use for net booting.

02:01.000 --> 02:04.000
And I'm going to, you know, get to net booting later on.

02:04.000 --> 02:10.000
I have my.5 shared with the Nix OS configuration, so you can check that if you want.

02:10.000 --> 02:17.000
So what is, my Snowflake server is used to do Pixibooting and NetBooting,

02:17.000 --> 02:21.000
to distribute the images I want on my female labs.

02:21.000 --> 02:23.000
And PixiCore is a tool that helps with that.

02:23.000 --> 02:26.000
It can be used standalone, is a Go project that you run.

02:26.000 --> 02:36.000
It expose a DHCP server, a proxy, an HTTP server to download the, you know,

02:36.000 --> 02:38.000
the kernel and the initram disk.

02:38.000 --> 02:40.000
And then this is Blackhole.

02:40.000 --> 02:46.000
So Blackhole is the, when you do net booting, you need an operating system

02:46.000 --> 02:48.000
to run on the new servers.

02:48.000 --> 02:52.000
And I generate that from an Nix OS derivation.

02:52.000 --> 02:56.000
It's also very lightweight because it says in RAM, so it's not persistent on disk,

02:56.000 --> 02:58.000
so it needs to be as small as it can be.

02:58.000 --> 03:02.000
So I use the net boot based profile and I change to minimal,

03:02.000 --> 03:03.000
but I didn't update my slides.

03:03.000 --> 03:09.000
So if the image is too big, you can use the installer minimal that is a bit smaller.

03:09.000 --> 03:15.000
And then I install OpenSSH because this is what I use to enter into the server when it boots.

03:15.000 --> 03:17.000
But what is net booting?

03:17.000 --> 03:25.000
So from zero to zero in one minute because that's how good I am with Nix booting.

03:25.000 --> 03:31.000
And so every server or many computers boots and they look for, you know,

03:31.000 --> 03:33.000
an operating system on disk.

03:33.000 --> 03:37.000
And if there is not an operating system on disk, they look for a USB one.

03:37.000 --> 03:43.000
And if there is not a USB, the world becomes way bigger and they try to send a DHCP request

03:43.000 --> 03:48.000
to the DHCP server, says, oh, I'm alive. What can I do?

03:48.000 --> 03:54.000
And if you have a smart enough DHCP server, it replies with a package containing the IP address

03:54.000 --> 04:00.000
for the server and then an address that can be used to download an init RAM disk

04:00.000 --> 04:02.000
and a kernel and boot the server.

04:02.000 --> 04:06.000
So this is, you know, very old style, but still in use.

04:06.000 --> 04:11.000
You know, all the cloud providers that I had the opportunity to work with use this

04:11.000 --> 04:14.000
because hardware doesn't change that quickly.

04:14.000 --> 04:19.000
So, pixi booting is still there and this is the same things I use.

04:19.000 --> 04:27.000
So I download the two binaries and the two packages and my server is ready to boot.

04:27.000 --> 04:35.000
So for me, I take the compute modules out from my boxes, I hook it to the network

04:35.000 --> 04:42.000
and they power on DHCP, kernel and I'm ready to SSH.

04:42.000 --> 04:47.000
This is kind of the log you get from pixi core when it detects like a new server

04:47.000 --> 04:50.000
ready to handle an installation process.

04:50.000 --> 04:56.000
So, you know, the IP is assigned 162 and it downloads the kernel, the init RAM disk

04:56.000 --> 05:02.000
that I generated with the black hole scripts that you just need to access the revision that you just see.

05:02.000 --> 05:09.000
And it boots. So at the end of the booting process, you have an address that you can SSH into

05:09.000 --> 05:11.000
and you have a server to play with.

05:11.000 --> 05:14.000
Obviously, this is not persisted.

05:14.000 --> 05:20.000
So when you reboot the server, the dance would start again and again forever

05:20.000 --> 05:22.000
and you would get a fresh new server to use.

05:22.000 --> 05:25.000
But for my ephemeral homelab, this is what I need.

05:25.000 --> 05:27.000
I just need a quick way to prototype.

05:27.000 --> 05:36.000
You can get enough RAM to be happy and for me, 8 gigabytes of RAM is happier than ever.

05:36.000 --> 05:37.000
I can play with that.

05:37.000 --> 05:44.000
Obviously, all the nooks can have, you know, disk attached to it and you can decide to persist the operating system on it.

05:44.000 --> 05:51.000
So you can write a systemd script that does nixo X install at the end of the when the server is booted

05:51.000 --> 05:53.000
and you don't need to touch anything.

05:53.000 --> 06:03.000
When the black hole starts, it will run the system, the scripts and it will have a new persisted and flashed operating system.

06:03.000 --> 06:10.000
As I said, I don't do that because I don't need it, but that's how the full cycle, lifecycle of the machine can be managed.

06:10.000 --> 06:21.000
And how do you, if you persist a disk, how do you reboot the server and get back to the pixie dance is all on you.

06:21.000 --> 06:26.000
In my case, I don't have, like the nooks doesn't really have a board, a BMC to control the server.

06:26.000 --> 06:30.000
So I can't force the bootloader to netboot.

06:30.000 --> 06:32.000
So I wipe the disk and I break the disk.

06:32.000 --> 06:33.000
So it will go to that booting.

06:33.000 --> 06:37.000
A bit rough, but, you know, homelabs, that's how it is.

06:37.000 --> 06:41.000
So service discovery, in my case, it's way simpler than what it should be.

06:41.000 --> 06:44.000
You can use console, core DNS or whatever you want, tiescale even.

06:44.000 --> 06:49.000
So you can, you know, in black hole, you can register a tiescale daemon and have it registered there.

06:49.000 --> 06:53.000
And you see that in the UI, I use my router.

06:53.000 --> 07:02.000
So when I see that there are new servers with a NixOS host name, I know that there is a server ready to be to use and that is booted.

07:02.000 --> 07:10.000
In the meantime, when it does the pixie dancing, the host name is pixie and a random MAC address.

07:10.000 --> 07:18.000
So it kind of gives me enough control and I don't need to run anything else, but you can get fancier if you want.

07:18.000 --> 07:21.000
So what is netbooting used for?

07:21.000 --> 07:23.000
Only for ephemeral homelabs?

07:23.000 --> 07:24.000
As I said, no.

07:24.000 --> 07:33.000
Cloud providers or, you know, people managing data centers that I think you know more than me, but you can do that for inventory management.

07:33.000 --> 07:36.000
So when you buy a shiny new server, it doesn't do much.

07:36.000 --> 07:38.000
It doesn't know what to do.

07:38.000 --> 07:42.000
So you just hook it to the network and the pixie then starts.

07:42.000 --> 07:53.000
And instead of running a script that persists an operating system, you run a daemon that registers the server to an inventory management like Netbox or others.

07:53.000 --> 07:58.000
So you know how much RAM it is, the model, whatever you can get from the system.

07:58.000 --> 08:05.000
You inspect the system, you push the blob and you register a brand new server and you have it available in your system.

08:05.000 --> 08:11.000
So it's kind of the same process I do for mine, but way cooler because the hardware is way more expensive.

08:11.000 --> 08:13.000
You can do that for provisioning.

08:13.000 --> 08:19.000
So as I told you before, I don't do provisioning because I don't want a persistent operating system on my homelab.

08:19.000 --> 08:29.000
But you can format and partition disks using system if you want or any other way to run a script and you're ready to go.

08:29.000 --> 08:31.000
For recovery is the same way.

08:31.000 --> 08:39.000
As I said, I don't have a BMC, but you can break your disk and get back on pixie booting.

08:39.000 --> 08:44.000
Some of the hardware have disk attached, but I don't really use disk much.

08:44.000 --> 08:47.000
And even if you don't because I don't need it.

08:47.000 --> 08:57.000
So my operating system is small enough and I do simple stuff that don't require me to swap or go on the disk.

08:57.000 --> 08:59.000
So I can use the entire disk.

08:59.000 --> 09:03.000
I can format it just for the data if I need to store some data.

09:03.000 --> 09:13.000
In order to do orchestration, pixie core, you can declare MAC addresses and the images you want to push to.

09:13.000 --> 09:21.000
So if you know the MAC address of your Ethernet cable, you can say, oh, on this MAC address, distribute this image.

09:21.000 --> 09:28.000
Otherwise, distribute a different image so you can have servers running different net booting images.

09:28.000 --> 09:30.000
And it's very convenient.

09:30.000 --> 09:35.000
So now when it comes to electric wiring, I'm also not really an expert.

09:35.000 --> 09:47.000
So what I have, I have a really powerful enough DC that is connected to a few fuse so I don't blow up all the nukes at the same time.

09:47.000 --> 09:49.000
One at a time maybe, but not all together.

09:49.000 --> 09:51.000
So that's why I have the fuse there.

09:51.000 --> 09:53.000
Easy, cheap, it works.

09:53.000 --> 10:00.000
And then to control the power consumption, I just cut the power at the beginning.

10:00.000 --> 10:07.000
So I have a Raspberry Pi connected to a board of 16 relays that I control over an API.

10:07.000 --> 10:16.000
So if I want to stop the Nuke number one, I just stop, cut the energy and the power for that Nuke and goodbye Nuke.

10:16.000 --> 10:21.000
And playing with the GPIO, the Raspberry Pi is very easy and convenient.

10:21.000 --> 10:24.000
So the prototype is good enough.

10:24.000 --> 10:32.000
I want to change from a Raspberry Pi from ESP32 to experiment a little bit, but it's not really for NixOS because it doesn't run an operating system.

10:32.000 --> 10:34.000
So just there.

10:34.000 --> 10:43.000
And I got two new fancy boxes that I want to replace with the IKEA one because I think that will play a better role with my ambient there.

10:43.000 --> 10:47.000
And I don't know if I'm late or earlier, but that's it.

10:47.000 --> 10:52.000
OK, so yeah, this is my home lab and what I'm playing with.

10:52.000 --> 11:02.000
So if you have any question or if you want to know more, I will just go back to the if I can.

11:02.000 --> 11:06.000
My invite is to have a look at the dot file repo if I can.

11:06.000 --> 11:11.000
Oh, I can do that.

11:11.000 --> 11:17.000
The dot file because it has all the all the codes in there and you can play with it.

11:17.000 --> 11:28.000
So coming back to these slides, the what is what I really like is the is the convenience of, you know, I have my NixOS derivation for this for these experiments.

11:28.000 --> 11:32.000
I'm building two NixOS derivations and the the flake.

11:32.000 --> 11:38.000
There's no flake one encapsulates the the other one so I can distribute it conveniently.

11:38.000 --> 11:42.000
And it's a single flake file that contains and run both.

11:42.000 --> 11:48.000
So it's you know, it's very easy and it's very easy when you get to it to get there.

11:48.000 --> 11:51.000
It took me 135 questions on this course.

11:51.000 --> 11:53.000
Thirty six thousand messages on metrics.

11:53.000 --> 11:55.000
But I'm there as is there for you.

11:55.000 --> 11:57.000
So play with it if you want.

11:57.000 --> 12:15.000
So thank you. Yep.

12:15.000 --> 12:18.000
Yeah, because it's very.

12:18.000 --> 12:25.000
Yeah. How NixOS plays with the pizza booting and, you know, a net booting you have.

12:25.000 --> 12:34.000
I didn't find there are other packages or other projects that helps you to package and operate in system like HashiCorp Packard is another one.

12:34.000 --> 12:37.000
There is infra kit from Docker and all this kind of stuff.

12:37.000 --> 12:43.000
So but NixOS gives you a full control on the on the distribution that you want to provide.

12:43.000 --> 12:47.000
So, for example, at the beginning, I wasn't really looking at the size of the image.

12:47.000 --> 12:49.000
So I was pushing in there everything I needed.

12:49.000 --> 12:59.000
But then I started to realize that my image was like four gigabytes and my RAM I didn't have enough RAM or I didn't have enough RAM left to do the actual work.

12:59.000 --> 13:02.000
So I started to iterate and play on what I was able to remove.

13:02.000 --> 13:06.000
So I started to investigate about how to do a minimal operating system.

13:06.000 --> 13:11.000
So I see that the minimal profiles I disabled the documentation I disabled, you know, everything I don't need it.

13:11.000 --> 13:18.000
And I went back to like now the image is 400 megabytes in RAM when it's fully unpacked.

13:18.000 --> 13:21.000
And it works. So it's going to stop.

13:21.000 --> 13:26.000
I think that's really the power you get from NixOS compared with other systems.

13:26.000 --> 13:28.000
Or getting questions answered.

13:28.000 --> 13:32.000
I can also suggest the disk server, which is pretty great.

13:32.000 --> 13:35.000
OK. Yeah, I would look at it. Thank you.

13:35.000 --> 14:04.000
One more round of applause, please. Thank you.

14:05.000 --> 14:07.000
Thank you.

14:35.000 --> 14:37.000
Thank you.

15:05.000 --> 15:07.000
Thank you.

15:35.000 --> 15:37.000
Thank you.

16:05.000 --> 16:07.000
Thank you.

16:35.000 --> 16:37.000
Thank you.

17:05.000 --> 17:06.000
Thank you.

17:36.000 --> 17:37.000
We ready for the next.

17:51.000 --> 17:53.000
Yes. Hi, I'm Philip.

17:53.000 --> 17:56.000
I'm here on behalf of Selkrull, a company.

17:56.000 --> 18:08.000
So we specialize on software delivery, customized to the clients, you know, what people want.

18:08.000 --> 18:10.000
This talk is about Nix.

18:10.000 --> 18:14.000
So like, you know, I'm here in Boston, 2023, of course.

18:14.000 --> 18:18.000
And my talk is Pitfossil Nix and how to avoid them.

18:18.000 --> 18:22.000
Right. So at Selkrull, we use NixOS for infrastructure.

18:22.000 --> 18:27.000
We use Nix for CI, CD and setting up deaf environments.

18:27.000 --> 18:33.000
Basically everywhere you can use Nix, we try to adopt it just because, you know, Nix is great.

18:33.000 --> 18:37.000
You have all the repusability and everything that comes with that.

18:37.000 --> 18:39.000
Right. So it is me.

18:39.000 --> 18:40.000
All my socials are here.

18:40.000 --> 18:44.000
If you want to reach out to me, my GitHub.

18:44.000 --> 18:45.000
Right.

18:47.000 --> 18:48.000
Right. Yes.

18:48.000 --> 18:56.000
So Selkrull, I said, is, you know, a software company focused on creating customized high performance solutions.

18:56.000 --> 18:58.000
Yes, I can. Right. Sorry.

18:58.000 --> 19:05.000
So this is mainly in like the like functional programming realm of like Hestrel and stuff like that,

19:05.000 --> 19:10.000
where, you know, people want customized solutions for certain problems.

19:10.000 --> 19:13.000
Exactly. Right. So again, this hurts what Nix.

19:13.000 --> 19:16.000
And this is right.

19:16.000 --> 19:20.000
The goal of this talk is to make Nix more approachable.

19:20.000 --> 19:26.000
Right. So when we adopted Nix, I mean, I wasn't there then.

19:26.000 --> 19:30.000
All the developers weren't using Nix. Right.

19:30.000 --> 19:33.000
And they still, you know, they tried to. Right.

19:33.000 --> 19:38.000
So they asked the developers, they're not that into Nix. Right.

19:38.000 --> 19:40.000
And they had some issues.

19:40.000 --> 19:50.000
And I want to touch on that just so that, you know, a case study of how Nix works in Selkrull.

19:50.000 --> 19:52.000
Right. Sorry. Right.

19:52.000 --> 20:00.000
So I'm pretty new at Selkrull and I'm part of the SIU team.

20:00.000 --> 20:10.000
So I try to push Nix to and oftentimes we have developers.

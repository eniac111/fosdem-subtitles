1
0:00:00.000 --> 0:00:16.780
Okay, please welcome our next speaker Ivan to talk about contracts for free.

2
0:00:16.780 --> 0:00:24.400
Hi everyone, it's a really quick talk about the Akitoi project and some unpopular opinion

3
0:00:24.400 --> 0:00:28.980
about using runtime types.

4
0:00:28.980 --> 0:00:35.000
So the thing is there is an old issue, maybe you know it in Nix which was closed since

5
0:00:35.000 --> 0:00:40.120
because it will never be implemented, which is a bit embarrassing about the fact that

6
0:00:40.120 --> 0:00:45.200
Nix have no any static type system.

7
0:00:45.200 --> 0:00:54.920
The thing is I changed my mindset relatively recently about that, but I will talk about

8
0:00:54.920 --> 0:00:59.080
it later because what's the issue about the type system?

9
0:00:59.080 --> 0:01:04.680
It's the lack of a static type system, it's the error you get, you get them at the last

10
0:01:04.680 --> 0:01:11.080
moment it's really inconsistent regarding where the mistake were made and when you read

11
0:01:11.080 --> 0:01:17.480
your stack trace you get hard time to find where else the actual error and that is really

12
0:01:17.480 --> 0:01:22.740
not helpless for example beginners trying to work on Nix expression or people trying

13
0:01:22.740 --> 0:01:27.080
to debug Nix expression right then by other person.

14
0:01:27.080 --> 0:01:36.920
So I changed my mindset because Nix is a really simple language and it should be a simple

15
0:01:36.920 --> 0:01:43.300
language and it invites us to build construct in library space and if you look at Nix built-ins

16
0:01:43.300 --> 0:01:48.660
for example, it's really few built-ins and a lot of things that could be built-ins are

17
0:01:48.660 --> 0:01:54.800
actually implemented as Nix package libsing and there is a Nix package libtypes maybe

18
0:01:54.800 --> 0:02:02.240
without a nest which is what you use when you define Nix option to say the option could

19
0:02:02.240 --> 0:02:05.040
be that or that and everything.

20
0:02:05.040 --> 0:02:12.680
And so I changed my mindset because Nix is made in two steps, you know, so it's the first

21
0:02:12.680 --> 0:02:21.000
step that you evaluate the language and produce things in Nix, you symbolize Nix store and

22
0:02:21.000 --> 0:02:27.280
after you build, you made your package but the instantiate part is guaranteed to terminate.

23
0:02:27.280 --> 0:02:33.540
You know you will, the computation will always terminate which is what you expect for type

24
0:02:33.540 --> 0:02:40.400
system actually and which is not the case of some type system or most of macro systems

25
0:02:40.400 --> 0:02:47.080
that are not expected to terminate so actually it's a good guarantee and that's why we could

26
0:02:47.080 --> 0:02:51.680
do a lot of things in Nix.

27
0:02:51.680 --> 0:02:58.080
You can see it as, I changed my mind because I see that Nix is not really about the runtime

28
0:02:58.080 --> 0:03:05.160
and programming language so we could do a check at runtime and I wrote a thing while

29
0:03:05.160 --> 0:03:11.160
vacation and realized later that Ozerforsch already did it which is touched him, maybe

30
0:03:11.160 --> 0:03:18.240
you know him, he worked on Twix right now and he also writes Nix one pager, one of the

31
0:03:18.240 --> 0:03:25.680
best Nix starting guide at some point and the thing is it's really simple, you define

32
0:03:25.680 --> 0:03:32.840
the data you want, just validator function so you say I want something like that and

33
0:03:32.840 --> 0:03:38.120
you check at this point of your Nix expression what it evaluates, that's its respect to a

34
0:03:38.120 --> 0:03:46.120
contract or validator function and that's help actually there to fail early where you

35
0:03:46.120 --> 0:03:52.640
want it to fail and there is differences in implementation I will not talk really about

36
0:03:52.640 --> 0:03:58.480
but I really simply by wrote didn't rely on Nix package and it's fully compatible with

37
0:03:58.480 --> 0:04:10.280
Nix so you can define a thing and share them and the last thing is those compose, I go

38
0:04:10.280 --> 0:04:16.160
back inside, you can define types, you can define validator, instruct, that became validator

39
0:04:16.160 --> 0:04:22.600
and you can compose really complex things because it's really expressive and also the

40
0:04:22.600 --> 0:04:29.280
nice things with runtime types is you can produce recoverable error which does the case

41
0:04:29.280 --> 0:04:35.960
for type servers that exist in Nix itself so for example this will be unrecoverable

42
0:04:35.960 --> 0:04:41.720
but if you use the runtime type you will recover this situation.

43
0:04:41.720 --> 0:04:49.680
Last thing is I try to advertise this kind of technique because it helps a lot to debug

44
0:04:49.680 --> 0:04:58.280
your application and to have assertion about this respect that and everything it doesn't

45
0:04:58.280 --> 0:05:06.640
really solve the problem because it's not a real type system actually but if you're

46
0:05:06.640 --> 0:05:12.080
not starting something from scratch if you are working on an existing Nix expression

47
0:05:12.080 --> 0:05:17.680
Nix expression could be actually really large I think personally it helps if you're starting

48
0:05:17.680 --> 0:05:23.480
and using from scratch there's really cool things that Q, Dal, Nikhael generate JSON

49
0:05:23.480 --> 0:05:29.360
and you use that live in Nix package so you can use it really easily and there is also

50
0:05:29.360 --> 0:05:37.720
I like personally ProNix because it generates Nix outputs rather than JSON.

51
0:05:37.720 --> 0:05:44.200
Okay I think I said most of what I would say so don't hesitate if you have a question or

52
0:05:44.200 --> 0:05:53.200
I want to share your opinion.


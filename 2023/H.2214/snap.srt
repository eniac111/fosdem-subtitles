1
0:00:00.000 --> 0:00:08.080
Okay, so hi everyone.

2
0:00:08.080 --> 0:00:09.320
Awesome that you're all here.

3
0:00:09.320 --> 0:00:14.440
I'm Jadka, this is Jens, and we will now present Snap, a programming language that we work

4
0:00:14.440 --> 0:00:18.560
on together with Bernat and a few other people that I'll mention in a second.

5
0:00:18.560 --> 0:00:23.520
And what we want to do with you today, or what you have to listen to, is first I'll

6
0:00:23.520 --> 0:00:27.900
explain shortly what Snap is and why we care about it.

7
0:00:27.900 --> 0:00:33.120
Then we'll show our three guiding principles, and if we have time in the end Jens will show

8
0:00:33.120 --> 0:00:36.520
what's under the hood of Snap as well.

9
0:00:36.520 --> 0:00:42.680
Okay, so Snap is a visual blocks-based programming language, and I'll show that to you in a second.

10
0:00:42.680 --> 0:00:47.600
It's also like micro blocks live and parallel, and we develop it together with people at

11
0:00:47.600 --> 0:00:49.920
UC Berkeley in California.

12
0:00:49.920 --> 0:00:54.880
So we have three people, us three working together with three people from UC Berkeley

13
0:00:54.880 --> 0:00:56.720
developing this thing together.

14
0:00:56.720 --> 0:01:00.600
Snap is a blocks-based programming language, but it's aimed at high school and college

15
0:01:00.600 --> 0:01:01.800
students.

16
0:01:01.800 --> 0:01:06.440
But as you will see in a second, you can basically start whenever you want with it.

17
0:01:06.440 --> 0:01:13.800
Okay, our three guiding principles, let's start with the first one, is low floor.

18
0:01:13.800 --> 0:01:19.520
So this means that we really want to have engaging activities for entry-level programmers

19
0:01:19.520 --> 0:01:24.240
so you don't get scared away, and that we really want to have fun activities that they

20
0:01:24.240 --> 0:01:26.080
can do.

21
0:01:26.080 --> 0:01:31.560
To show you that, I've built a super simple, what we call a micro world, so this is an

22
0:01:31.560 --> 0:01:39.480
extension of Snap that I customized myself, and this only has these three blocks here.

23
0:01:39.480 --> 0:01:43.040
And as you can see, you don't even have to read to use them.

24
0:01:43.040 --> 0:01:45.120
We can just try them out and see what happens.

25
0:01:45.120 --> 0:01:47.840
So let me increase the stage size a bit.

26
0:01:47.840 --> 0:01:50.200
So I can click on that.

27
0:01:50.200 --> 0:01:53.480
As you can see, it's live, so I'm clicking on it while it's in the palette and it's still

28
0:01:53.480 --> 0:01:55.560
doing things.

29
0:01:55.560 --> 0:01:57.000
I can click on that.

30
0:01:57.000 --> 0:01:58.000
Nothing happens.

31
0:01:58.000 --> 0:02:00.180
I see, oh wow, there's an input slot here.

32
0:02:00.180 --> 0:02:02.320
Maybe I could type a number in here.

33
0:02:02.320 --> 0:02:03.800
Let's see what happens now.

34
0:02:03.800 --> 0:02:06.040
Ooh, okay, it's doing something.

35
0:02:06.040 --> 0:02:09.760
This is stamping a flower, and this one is supposed to be a sponge.

36
0:02:09.760 --> 0:02:11.580
It's clearing the stage again.

37
0:02:11.580 --> 0:02:17.400
So since we're working with flowers, let me draw a beautiful petal real quick using the

38
0:02:17.400 --> 0:02:21.400
costume editor.

39
0:02:21.400 --> 0:02:23.320
Let's do a yellow one.

40
0:02:23.320 --> 0:02:27.760
Oh, that's brown.

41
0:02:27.760 --> 0:02:29.920
And then let me draw something.

42
0:02:29.920 --> 0:02:34.680
Jip, jip, and let me even fill it maybe.

43
0:02:34.680 --> 0:02:37.720
Yeah, wow, this is very beautiful.

44
0:02:37.720 --> 0:02:41.800
And then let's make this even more beautiful.

45
0:02:41.800 --> 0:02:46.400
And then let's also, that's important, move the rotation center, jip, and let's try the

46
0:02:46.400 --> 0:02:48.240
same thing again.

47
0:02:48.240 --> 0:02:51.440
Ah, okay, this is pretty cool.

48
0:02:51.440 --> 0:02:54.680
So now if I want more flowers, I can build a larger script.

49
0:02:54.680 --> 0:02:59.200
So I can use the central area of Snap to build more complex programs.

50
0:02:59.200 --> 0:03:03.680
So I could go to a random position and draw another flower there, and go to a random position,

51
0:03:03.680 --> 0:03:05.080
and draw another flower there.

52
0:03:05.080 --> 0:03:08.720
And I could click on that forever.

53
0:03:08.720 --> 0:03:11.600
But it would also be cool to just have a forever loop that does that.

54
0:03:11.600 --> 0:03:15.840
So computers are really good at doing things automatically very often, so why don't I make

55
0:03:15.840 --> 0:03:17.120
a loop?

56
0:03:17.120 --> 0:03:23.600
So I already prepared this page here, and let's look for the infinity sign, because

57
0:03:23.600 --> 0:03:26.800
what I want to build is an infinite loop.

58
0:03:26.800 --> 0:03:29.760
And let's just copy that.

59
0:03:29.760 --> 0:03:35.800
And then let's build our own control structure by just hiding it in the actual, ah no, we

60
0:03:35.800 --> 0:03:37.560
don't hide it, let's just do it.

61
0:03:37.560 --> 0:03:43.400
So this is going to be a control block, and I'm calling it infinity.

62
0:03:43.400 --> 0:03:45.200
And this is going to have two inputs.

63
0:03:45.200 --> 0:03:50.040
One is going to be, no it's only having one input, it's going to be the action.

64
0:03:50.040 --> 0:03:53.160
So let me build this block, I already have it here.

65
0:03:53.160 --> 0:03:56.640
So okay, no, let's do that again.

66
0:03:56.640 --> 0:03:57.640
Jip.

67
0:03:57.640 --> 0:04:01.520
Sorry, I'll just delete that and start over again.

68
0:04:01.520 --> 0:04:05.800
Okay, I want to make a control structure, it's called infinity.

69
0:04:05.800 --> 0:04:10.960
I want to add a parameter to that, and this is the action that I'm going to run.

70
0:04:10.960 --> 0:04:17.800
I can even decide what I want this to look like, so as you might know from scratch, our

71
0:04:17.800 --> 0:04:23.200
loops have the C-shaped, or from snap, our loops have the C-shaped command structure,

72
0:04:23.200 --> 0:04:28.880
so I can click on that, and when I apply that, you see that I have the C-shaped block with

73
0:04:28.880 --> 0:04:33.000
this infinity sign on it, and now I need to decide what I want to do with this block.

74
0:04:33.000 --> 0:04:39.040
So first I want to run the action, I don't have a run block here, so let me just open

75
0:04:39.040 --> 0:04:44.760
the hide block section, because I hit all the actual blocks from snap, and I'll show

76
0:04:44.760 --> 0:04:54.560
you how to do that in a second, and let me drag out one of the run blocks, Jip, and what

77
0:04:54.560 --> 0:04:59.760
I want to do is I want to run the action, and then I want to repeat the same thing,

78
0:04:59.760 --> 0:05:01.520
and I want to run the action again.

79
0:05:01.520 --> 0:05:04.920
So I think that's correct, let's try it.

80
0:05:04.920 --> 0:05:08.920
So I made myself a forever loop, and let's clear the stage so we can actually see what's

81
0:05:08.920 --> 0:05:13.320
happened, or what's happening, and let me drag this around here, and now I can run my

82
0:05:13.320 --> 0:05:17.040
program and I built myself my own control structure, and it still looks very simple

83
0:05:17.040 --> 0:05:20.560
for kids, but all of you obviously could do that.

84
0:05:20.560 --> 0:05:25.880
So this is one thing that we really care about, we want really simple entry-level engaging

85
0:05:25.880 --> 0:05:32.240
activities, and this is one of my favorite starter projects, but we also want teachers

86
0:05:32.240 --> 0:05:37.440
to be able, educators to be able to build these micro-verts very easily, and we want

87
0:05:37.440 --> 0:05:44.160
them to be able to customize Snap in a way that they can use it for their needs.

88
0:05:44.160 --> 0:05:49.360
What I also wanted to show you in this project, let me make this stage a bit smaller again,

89
0:05:49.360 --> 0:05:55.000
you can have several what we call scenes in a project, so this is basically a project

90
0:05:55.000 --> 0:05:59.280
in another project, so I can now switch to that scene, and here I already prepared a

91
0:05:59.280 --> 0:06:04.600
petal, and you see that I have more blocks than I had before, I also have a separate

92
0:06:04.600 --> 0:06:10.000
stage so I can switch between scenes, and we can use that idea to build something like

93
0:06:10.000 --> 0:06:16.640
language levels, so in the first micro-world I used, I just had that block that draws a

94
0:06:16.640 --> 0:06:17.920
flower.

95
0:06:17.920 --> 0:06:24.480
In the second micro-world, I want learners to be able to build this flower block themselves,

96
0:06:24.480 --> 0:06:28.760
so we gave them all the tools that they need for that, so here for example, we only have

97
0:06:28.760 --> 0:06:36.600
this block that stamps a leaf, so one of the petals, so what else do I need to build the

98
0:06:36.600 --> 0:06:42.840
flower, I want to do that several times, so I might need a loop, and this one as you can

99
0:06:42.840 --> 0:06:48.120
see has a number as an input, so I can specify the number of repeats, and of course I need

100
0:06:48.120 --> 0:06:54.600
to turn in between, so what we want to do is we want to stamp, let's do a flower with

101
0:06:54.600 --> 0:07:00.880
6 petals, and then I need to turn in between, and also I built this block myself, and I

102
0:07:00.880 --> 0:07:08.720
want to turn 60 degrees each time, so let's clear before we draw a flower, jeep, and then

103
0:07:08.720 --> 0:07:14.120
let's do one, so this is how the flower block was actually built in the first thing, so

104
0:07:14.120 --> 0:07:22.560
we can help learners to gradually get new ideas, and then which I find pretty cool,

105
0:07:22.560 --> 0:07:26.800
it's also super simple in Snap to prepare your own libraries, so I made one if you have

106
0:07:26.800 --> 0:07:32.960
a kid in class that is just faster than the other kids, you can export a library and just

107
0:07:32.960 --> 0:07:39.000
let them add more blocks, so here I added a few more blocks, for example these ones

108
0:07:39.000 --> 0:07:44.480
let me change the appearance of the petal that I have, so this one for example changes

109
0:07:44.480 --> 0:07:50.000
the size of it, let's set this to 100, and then you see the petal becomes super huge,

110
0:07:50.000 --> 0:07:55.160
I can set that to 10, let's clear again, then it becomes super small, so maybe you want

111
0:07:55.160 --> 0:08:00.840
to pick something in between, and we could even do that randomly, so for example I could

112
0:08:00.840 --> 0:08:08.880
add this here, and I want the size to be between 20 and 40, and then I get differently sized

113
0:08:08.880 --> 0:08:16.600
petals each time I do that, so if I do it like this, you see that this changes, and

114
0:08:16.600 --> 0:08:22.600
I really like that about Snap that you can easily expand projects with fun ideas, so

115
0:08:22.600 --> 0:08:27.440
they look differently and are more engaging, but you only need like one or two more ideas,

116
0:08:27.440 --> 0:08:33.080
this one for example switches to the next costume, so if I wanted to add another petal,

117
0:08:33.080 --> 0:08:42.720
let's draw one, let's do the one that I did before, but in blue this time, let's fill

118
0:08:42.720 --> 0:08:51.000
it with something, okay, and then again let's move the rotation center to one of the tips,

119
0:08:51.000 --> 0:08:59.440
and we can now use that, and each time we draw something, we draw a different flower,

120
0:08:59.440 --> 0:09:04.880
so the next one in line, and then again we can combine that with what we had before,

121
0:09:04.880 --> 0:09:15.200
and just create a beautiful flower field with the blocks that we made.

122
0:09:15.200 --> 0:09:20.080
How do you do that if you want to create a micro world?

123
0:09:20.080 --> 0:09:24.640
Let me go to the third one I prepared, so this is not actually a micro world, this is

124
0:09:24.640 --> 0:09:29.280
regular Snap with all the blocks that you have, so as in other blocks best programming

125
0:09:29.280 --> 0:09:32.800
languages we have different categories here, we have the palette on the left where you

126
0:09:32.800 --> 0:09:37.440
find all the blocks for a specific category, as I mentioned before it's a live programming

127
0:09:37.440 --> 0:09:43.000
language, so you can just click them and something happens immediately, and what I also added

128
0:09:43.000 --> 0:09:49.160
here, or what I thought I added here but didn't, oh that's unfortunate, is the, so let's just

129
0:09:49.160 --> 0:09:54.960
build it, is the project, so again we want to have all the blocks that we used last time,

130
0:09:54.960 --> 0:10:02.560
so what we had was the next costume block, we had the set size tool block, we had the

131
0:10:02.560 --> 0:10:11.520
pick random block, we also need a division block, we had a repeat block, we had a forever

132
0:10:11.520 --> 0:10:22.720
block, we had a stamp block, and we had a turn block, and what was the last one?

133
0:10:22.720 --> 0:10:26.960
The second to last one was clear, and what was the last one?

134
0:10:26.960 --> 0:10:32.880
Go to random position, awesome, and we need to go to random position and let's assemble

135
0:10:32.880 --> 0:10:38.040
these so that we actually can make sure that our script is working, so for a flower we

136
0:10:38.040 --> 0:10:45.240
want to repeat a specific number of times, let's do six times, then we want a stamp,

137
0:10:45.240 --> 0:10:55.000
then we want to turn the number of degrees, that's 360 divided by the number of petals

138
0:10:55.000 --> 0:10:59.520
that I want, so six in this case, and before we wanted to do that we wanted to go to a

139
0:10:59.520 --> 0:11:05.000
random position, so let's check that, that seems to work awesome, we wanted to do that

140
0:11:05.000 --> 0:11:12.000
forever and so that all flowers don't look the same, we wanted to set the size to a random

141
0:11:12.000 --> 0:11:19.320
position, a random size, a random number, let's do 20 to 30 maybe, and we need a second

142
0:11:19.320 --> 0:11:30.720
costume so let's just duplicate that one and let's change the color a bit, yeah this is

143
0:11:30.720 --> 0:11:41.920
very different, awesome, this is exactly what I, oh wow, okay, and so we have two costumes

144
0:11:41.920 --> 0:11:45.920
so we can actually also use the next costume block and so we start with a clear stage,

145
0:11:45.920 --> 0:11:50.160
let's add that at the beginning and let's see whether this works, okay awesome, and

146
0:11:50.160 --> 0:11:56.040
now if you want to build your own micro world you can just go to the file menu and select

147
0:11:56.040 --> 0:12:03.560
hide blocks and then that's the awesome thing that we added in the second last, like the

148
0:12:03.560 --> 0:12:11.600
previous release, you can hide all the unused blocks and if I do that I only have the blocks

149
0:12:11.600 --> 0:12:16.720
left in the palette that I used for my project and they are in these categories here and

150
0:12:16.720 --> 0:12:21.360
I can even make the single palette that I had before by clicking on the settings menu

151
0:12:21.360 --> 0:12:25.720
and then selecting the single palette and now you have all the blocks in like one palette

152
0:12:25.720 --> 0:12:32.440
and you can make your own micro worlds that have all the blocks that you need for your

153
0:12:32.440 --> 0:12:36.480
project that you want to do in class or with your kids or with some other people who want

154
0:12:36.480 --> 0:12:41.240
to learn programming and then you can delete that and then you have your perfect Parsons

155
0:12:41.240 --> 0:12:48.400
puzzle generator and so this is again the low floor idea that I mentioned, we really

156
0:12:48.400 --> 0:12:53.560
want to have engaging activities that have a cool artifact that looks beautiful or is

157
0:12:53.560 --> 0:12:59.400
fun to do but we also want to help teachers and educators to create these fun engaging

158
0:12:59.400 --> 0:13:02.080
activities in a simple way.

159
0:13:02.080 --> 0:13:08.080
Okay, the second idea that I wanted to present or that we think is or that we care about

160
0:13:08.080 --> 0:13:13.960
is white walls so we want to allow for a huge variety of projects and the ones that we care

161
0:13:13.960 --> 0:13:21.040
most about are media projects so we love this idea of media computation meaning you learn

162
0:13:21.040 --> 0:13:28.720
general purpose programming by playing with sounds, images, texts and one example of your

163
0:13:28.720 --> 0:13:34.320
project for that is for example from Snap you can access the microphone of your computer

164
0:13:34.320 --> 0:13:39.000
so in this case if it's running it should be this for example is a visualization of

165
0:13:39.000 --> 0:13:44.280
the frequency spectrum of my voice that's just picked up through the microphone so this

166
0:13:44.280 --> 0:13:49.200
looks beautiful at the same time as it's interesting because you can talk about sounds from a physical

167
0:13:49.200 --> 0:13:55.560
and computational perspective and we love to do stuff with the camera so this is another

168
0:13:55.560 --> 0:13:58.560
project that I like very much.

169
0:13:58.560 --> 0:14:06.240
This is pasting the webcam of my computer to the stage right now I set the transparency

170
0:14:06.240 --> 0:14:12.600
to 50 percent let's make it fully transparent so the video is still there but you can't

171
0:14:12.600 --> 0:14:18.340
see it anymore because all the pixels are transparent and then I'm sending a message

172
0:14:18.340 --> 0:14:25.200
to the other sprite and what's that doing is it's drawing dots on the stage which size

173
0:14:25.200 --> 0:14:32.640
corresponds to the brightness that it's measuring in the image that it picks up from the camera

174
0:14:32.640 --> 0:14:37.800
and this is actually a pretty cool technique it's called dithering and this is how images

175
0:14:37.800 --> 0:14:42.320
were made in newspapers back in the days when you weren't able to print different colors

176
0:14:42.320 --> 0:14:49.280
so you just did differently sized dots to get like a more deep color space so this is

177
0:14:49.280 --> 0:14:55.440
what we mean with white walls allow a variety of projects that are engaging and fun and

178
0:14:55.440 --> 0:15:02.680
that also kids who don't necessarily like Fibonacci might find interesting and the last

179
0:15:02.680 --> 0:15:09.520
idea for that I will hand over to Jens is no ceiling so as I said snap is a programming

180
0:15:09.520 --> 0:15:15.640
language that's aimed for high schoolers and early college students so it's scratch

181
0:15:15.640 --> 0:15:34.520
but with all the awesome ideas that make programming fun and Jens is going to show you these now

182
0:15:34.520 --> 0:15:40.120
thank you Jens.

183
0:15:40.120 --> 0:15:45.040
We're having kind of a conflict here because we want to have this low floor and the wide

184
0:15:45.040 --> 0:15:52.800
walls for the kids but we're also having this idealist notion of blow of the ceiling like

185
0:15:52.800 --> 0:16:00.120
we don't want to constrain kids we don't want to dumb down the language so it's okay for

186
0:16:00.120 --> 0:16:07.800
kids and this is kind of coming from the 60s when you know some of you might remember logo

187
0:16:07.800 --> 0:16:13.520
had the idea that you know you don't you don't make stuff easy for kids but you make it welcoming

188
0:16:13.520 --> 0:16:21.360
for kids but you don't constrain it you let kids express everything they can and this

189
0:16:21.360 --> 0:16:27.240
is only one part of the pedagogy the other part of the pedagogy is geared as Marx said

190
0:16:27.240 --> 0:16:34.000
towards teachers towards educators because if you look at these micro worlds that Jager

191
0:16:34.000 --> 0:16:41.600
has shown let me again go to oh yeah this is mine already so here is a bunch of blocks

192
0:16:41.600 --> 0:16:50.000
like these aren't the regular blocks these are the ones that we made okay I need to stay

193
0:16:50.000 --> 0:16:58.040
more in the center of so y'all at home can see me we want teachers to be able to build

194
0:16:58.040 --> 0:17:03.360
these exercises to build these micro worlds for their kids so it's not just us you know

195
0:17:03.360 --> 0:17:07.480
building something here's an exercise you can do with their kids but there's a teacher

196
0:17:07.480 --> 0:17:12.600
there's an educator wants to teach something as yet got it about what was then called you

197
0:17:12.600 --> 0:17:17.760
remember the total turtle trip theorem that was kind of what he had got showed you about

198
0:17:17.760 --> 0:17:23.200
so we build a micro world to that which language are they going to build this sub language

199
0:17:23.200 --> 0:17:28.400
in are they going to have to learn another language to build these little domain specific

200
0:17:28.400 --> 0:17:34.720
languages no you saw yet got build these blocks in snap itself and so we want to take this

201
0:17:34.720 --> 0:17:47.320
even further and find out whether we can maybe even invent a language that lets us build

202
0:17:47.320 --> 0:17:53.160
a block space language inside the block space language and for this we really kind of want

203
0:17:53.160 --> 0:17:59.480
to do things that we can do in the UI we only be able to do it in the language so in this

204
0:17:59.480 --> 0:18:06.800
palette here I made a little block and it shows me some tools so if I click on this

205
0:18:06.800 --> 0:18:12.480
I'm getting some more blocks and I can again hide these it's a very simple block I can

206
0:18:12.480 --> 0:18:18.480
build myself that just shows and hides me some blocks and now I can kind of explore

207
0:18:18.480 --> 0:18:28.800
some of these things so I can for example look at this block that the flower block and

208
0:18:28.800 --> 0:18:35.840
I can see how it is defined and see it is defined with its own blocks so I can open

209
0:18:35.840 --> 0:18:42.040
this and edited but I can also get the definition of this in a program so now I'm getting the

210
0:18:42.040 --> 0:18:47.640
definition of this block and I can see that it's a function I can take this out and I

211
0:18:47.640 --> 0:18:52.900
can do some other interesting things with that so here is our split block for example

212
0:18:52.900 --> 0:19:00.840
I can split hello world by the space and I get hello and world I can split it by letters

213
0:19:00.840 --> 0:19:14.840
and I get each letter so what happens if I split a script by blocks?

214
0:19:14.840 --> 0:19:21.360
If I split a script by blocks I'm getting a syntax tree a table of the syntax elements

215
0:19:21.360 --> 0:19:30.240
in there so I can do this with you know the definition of my flower block and oh wow so

216
0:19:30.240 --> 0:19:38.240
I can so this is a table so I can also flatten this so I'm not saying I don't want the length

217
0:19:38.240 --> 0:19:43.560
of this I want it flattened so now I'm getting a list of all the syntax elements that make

218
0:19:43.560 --> 0:19:48.720
up the definition of this flower block and that's kind of interesting because now I can

219
0:19:48.720 --> 0:19:56.840
find out for example so here I can take out the turn block and I can say you know do all

220
0:19:56.840 --> 0:20:10.240
of these does this list contain this turn block and says yes the turn block is part

221
0:20:10.240 --> 0:20:18.600
of the definition of this list so but what about for example the clear block is that

222
0:20:18.600 --> 0:20:19.600
also in there?

223
0:20:19.600 --> 0:20:26.440
No it's not present in there so this is interesting I could maybe discover something else so

224
0:20:26.440 --> 0:20:33.800
what I can I can look at all the blocks that I have in this micro world this is a list

225
0:20:33.800 --> 0:20:40.240
of all the blocks in this micro world so I'd like to find out which blocks contain this

226
0:20:40.240 --> 0:20:52.680
turn block so I could say you know I want to keep I want to filter from my blocks those

227
0:20:52.680 --> 0:21:02.200
that contain this block let's see whether that works yeah so I'm getting a list of two

228
0:21:02.200 --> 0:21:09.480
blocks that all use this block now I can turn this into its own block I make a block that

229
0:21:09.480 --> 0:21:19.680
says this is the collars of a block block and the block should be an input so I'm saying

230
0:21:19.680 --> 0:21:28.520
this is a block and in order to define this well I just did define this I just dragged

231
0:21:28.520 --> 0:21:36.000
this in and I say okay this should work for any block so not just this block but for any

232
0:21:36.000 --> 0:21:46.880
block and so now I have this block that gives me the collars of for example this block let

233
0:21:46.880 --> 0:21:56.520
me see whether it works so this block is used by two other blocks and this block isn't used

234
0:21:56.520 --> 0:22:05.680
by any other block and huh let me see maybe I can get a whole report by looking at all

235
0:22:05.680 --> 0:22:17.840
the blocks and by mapping over all the blocks I want to see the block and I want to see

236
0:22:17.840 --> 0:22:25.680
its collars right so what we're now doing is really an introspection of the system of

237
0:22:25.680 --> 0:22:33.440
the block system in itself so if I map this I'm sort of getting this interesting structure

238
0:22:33.440 --> 0:22:42.880
so data structure it's a table and it's a graph really a reverse dependency graph of

239
0:22:42.880 --> 0:22:50.920
all the blocks and the blocks it uses and I get a report of the overall structure of

240
0:22:50.920 --> 0:22:56.480
my micro world and folks this is something interesting as you think about this so we're

241
0:22:56.480 --> 0:23:03.160
starting with this easy simple thing that we can build worlds for kids and we want to

242
0:23:03.160 --> 0:23:07.720
build these little domain specific languages but we want to have a language that actually

243
0:23:07.720 --> 0:23:15.280
lets us build these things in itself and this is why we build introspection and kind of

244
0:23:15.280 --> 0:23:19.900
all the goodies of functional programming into this language but we didn't want to make

245
0:23:19.900 --> 0:23:24.400
it so that you kind of have to go down to memory addresses but we want to represent

246
0:23:24.400 --> 0:23:31.880
everything in blocks and this is kind of the idea of no ceiling because at one point you

247
0:23:31.880 --> 0:23:37.080
know we start doing this with kids but we actually build it for the University of California

248
0:23:37.080 --> 0:23:40.160
at Berkeley and they're using it for their introductory course of computer science for

249
0:23:40.160 --> 0:23:46.520
non-majors and you know this goes up quite a long way so we actually want to be able

250
0:23:46.520 --> 0:23:53.880
to do scheme in this and to really teach abstraction so at one point you really want to blow off

251
0:23:53.880 --> 0:23:58.800
the ceiling and we don't want to do just only this imperative style programming where you

252
0:23:58.800 --> 0:24:02.960
know one follows the other and you've got the puzzle pieces but we actually do a high

253
0:24:02.960 --> 0:24:09.080
order function you do kind of recursive you build your own control structures you build

254
0:24:09.080 --> 0:24:17.560
your own language it's a little stiff and it's challenging to try to accommodate you

255
0:24:17.560 --> 0:24:24.200
know the let's draw a flower with a bunch of three blocks to let's invent our own programming

256
0:24:24.200 --> 0:24:31.940
language in the same environment and in order to build such an environment the whole thing

257
0:24:31.940 --> 0:24:38.580
that you see here your nerds I can show you right the whole thing you see here isn't using

258
0:24:38.580 --> 0:24:43.680
blockly or library but what you're seeing here is actually an operating system that

259
0:24:43.680 --> 0:24:50.640
runs inside a single canvas element in the browser and there's sort of a pill you can

260
0:24:50.640 --> 0:24:57.800
take to switch to dev mode and you're sort of inside this environment that some of you

261
0:24:57.800 --> 0:25:05.040
might recognize looks a lot like squeak so anybody you know squeak and so it's kind of

262
0:25:05.040 --> 0:25:11.520
the same morphing environment where you could just get you know any things you can directly

263
0:25:11.520 --> 0:25:21.240
manipulate them for example you can make this bold but you can also use this to you know

264
0:25:21.240 --> 0:25:29.240
let's make a slider I can attach the slider set the target to the string morph to the

265
0:25:29.240 --> 0:25:39.720
font size I can change it I can make it horizontal and now my slider governs for examples the

266
0:25:39.720 --> 0:25:49.840
size the font size of this I can make other elements like for example color palette and

267
0:25:49.840 --> 0:25:54.520
I could set the target of the color palette also to the string and now I can change the

268
0:25:54.520 --> 0:26:03.640
color and the size I can still edit it so this is basically our own system that is kind

269
0:26:03.640 --> 0:26:11.680
of self sustained in the browser and everything that you see in snap is sort of an application

270
0:26:11.680 --> 0:26:20.320
inside this really OS inside the browser and comes with its own green threading model which

271
0:26:20.320 --> 0:26:28.000
is how we do parallelism so in order to go up on the ladder of abstraction on the back

272
0:26:28.000 --> 0:26:36.000
hand side we have to go kind of down to not the metal but to kind of a metal of sorts

273
0:26:36.000 --> 0:26:51.760
of the browser okay this was kind of our ideas if you'd like to check it out it runs on snap.berkeley.edu

274
0:26:51.760 --> 0:26:58.560
give it a try yourself you'll find lots of material there is it's open source by the

275
0:26:58.560 --> 0:27:03.600
way it's free and open source it's an AGPL license so if you want to know so it's copy

276
0:27:03.600 --> 0:27:10.480
left it so you know everything is open source about it we write the front end the back end

277
0:27:10.480 --> 0:27:18.640
the community side it's not as big as some other languages but we've got a vibrant community

278
0:27:18.640 --> 0:27:25.040
it's all hosted on github please do contribute please do fork it many people have forked

279
0:27:25.040 --> 0:27:39.920
it please let us know what you think and thanks for coming.

280
0:27:39.920 --> 0:27:44.960
So I found that really fascinating and as a list programmer I couldn't help but think

281
0:27:44.960 --> 0:27:51.560
about macros when you were showing the exploding of blocks so would it be possible once you

282
0:27:51.560 --> 0:27:56.800
get the abstract syntax tree to annotate it let's say add a sound between each step and

283
0:27:56.800 --> 0:28:02.240
then recreate a new block from an existing block.

284
0:28:02.240 --> 0:28:07.400
Yes if we had more time I could show you this we do have macros okay yes so I showed you

285
0:28:07.400 --> 0:28:14.920
the split block which takes apart the stuff we has a join block that you can pass in a

286
0:28:14.920 --> 0:28:18.040
text and text trace but yeah.

287
0:28:18.040 --> 0:28:28.560
Well this is running in the web in a browser so your phone can run the thing in a browser

288
0:28:28.560 --> 0:28:34.760
what you get here is you can publish it as a URL and yes and then you can run it on the

289
0:28:34.760 --> 0:28:39.220
phone and it's something I like to do with kids a lot it's also interesting if you do

290
0:28:39.220 --> 0:28:48.160
stuff on touch devices like on tablets or stuff like that you kind of need to be considerate

291
0:28:48.160 --> 0:28:54.160
of which gestures to use because you don't have mouse over or you know so yeah it's fun.

292
0:28:54.160 --> 0:28:59.440
And you can also embed it on iFrames in your website.

293
0:28:59.440 --> 0:29:00.440
Yes please.

294
0:29:00.440 --> 0:29:03.440
I was wondering like in your mind about the future do you see anything like that this

295
0:29:03.440 --> 0:29:10.440
is becoming more mainstream and also for adults like one programmer building their own stuff

296
0:29:10.440 --> 0:29:15.600
with something like this.

297
0:29:15.600 --> 0:29:21.800
That's a good question I really have this dream that I think blocks based programming

298
0:29:21.800 --> 0:29:32.640
if we take away the kitty stigma of it and if we dare move on from this sometimes horrible

299
0:29:32.640 --> 0:29:39.740
imperative paradigm to the beauty and joy of functional programming that you know we

300
0:29:39.740 --> 0:29:44.880
get these expressions that actually make things easier to understand that make things more

301
0:29:44.880 --> 0:29:52.520
accessible and that this is a great way to be to actually you know express many things

302
0:29:52.520 --> 0:29:58.400
inside professional development so we write the software in a way that we like to use

303
0:29:58.400 --> 0:30:05.840
it ourselves and we hope that it might convince others to actually build and embed this into

304
0:30:05.840 --> 0:30:10.160
enterprise applications because often enough if you think about these low code no code

305
0:30:10.160 --> 0:30:15.160
things you know you move you click together some pre-configured stuff but then you need

306
0:30:15.160 --> 0:30:20.840
to write some glue code and the glue code often enough is terrible and awful and this

307
0:30:20.840 --> 0:30:25.520
is where I would love to see a blocks based environment that has no ceiling.

308
0:30:25.520 --> 0:30:32.720
Yes.

309
0:30:32.720 --> 0:30:34.640
It is this scheme in the browser.

310
0:30:34.640 --> 0:30:35.640
Yes.

311
0:30:35.640 --> 0:30:36.640
Yes.

312
0:30:36.640 --> 0:30:37.640
Exactly.

313
0:30:37.640 --> 0:30:47.240
And we do have stickers and buttons here take all you want.

314
0:30:47.240 --> 0:30:48.240
Yeah.

315
0:30:48.240 --> 0:30:49.240
Yeah.

316
0:30:49.240 --> 0:30:50.240
Thank you very much again.

317
0:30:50.240 --> 0:30:57.120
Thank you.


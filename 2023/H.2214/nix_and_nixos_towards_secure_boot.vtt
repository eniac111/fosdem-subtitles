WEBVTT

00:00.000 --> 00:10.840
Please get another round of applause for the next speaker of the day.

00:14.840 --> 00:19.920
Awesome. Thank you. So my voice was destroyed yesterday in the pub.

00:19.920 --> 00:23.240
So everyone has to be very quiet.

00:23.240 --> 00:27.120
Awesome. Good job. Okay.

00:27.120 --> 00:32.240
Awesome. Awesome surprise with the secure demo.

00:32.240 --> 00:35.200
Super awesome. I did not know about it.

00:35.200 --> 00:37.520
Yeah. We'll talk about secure boot on Nixos.

00:37.520 --> 00:41.080
So this was a team effort by

00:41.080 --> 00:44.280
this fine gentleman and the other one over there,

00:44.280 --> 00:50.000
who were happily coding while we were sitting on a boat while I was enjoying life.

00:51.680 --> 00:56.480
All of this happened mostly at the ocean sprint in Lancer Roto,

00:56.480 --> 00:59.880
which was also epic event for getting stuff done in the Nix world.

00:59.880 --> 01:03.200
I can totally recommend going there.

01:03.200 --> 01:06.040
Yeah. So secure boot.

01:06.040 --> 01:14.160
I thought I introduced the shortest possible introduction to it that I can make.

01:14.160 --> 01:20.960
Then we go on what is this Lancer boot thing and what status is it and how can you contribute?

01:20.960 --> 01:24.240
But what's secure boot?

01:24.240 --> 01:25.080
So what's the problem?

01:25.080 --> 01:27.160
So imagine you're here at Fostem,

01:27.160 --> 01:29.040
your laptop is encrypted.

01:29.040 --> 01:34.160
Then you go out to the pub where you scream too loud and you can't talk afterwards.

01:34.160 --> 01:36.080
While that is going on,

01:36.080 --> 01:38.080
your laptop sits in your hotel room alone,

01:38.080 --> 01:41.120
minding its own business and then many hours later,

01:41.120 --> 01:42.840
you come back and type your passwords in there.

01:42.840 --> 01:47.440
So is this still the software you think it is on your laptop?

01:47.440 --> 01:51.520
Without secure boot, you don't really know.

01:51.520 --> 01:56.800
So secure boot is one solution to this.

01:56.800 --> 01:58.640
It's not a complete solution,

01:58.640 --> 02:00.360
but it mitigates some of it.

02:00.360 --> 02:04.200
The way it works in a very tiny nutshell is that

02:04.200 --> 02:10.520
your UEFI firmware just verifies what it's booting.

02:10.520 --> 02:12.600
So it just takes the bootloader,

02:12.600 --> 02:14.820
checks the cryptographic signature on it,

02:14.820 --> 02:19.800
and then the bootloader has then to look at operating system,

02:19.800 --> 02:22.400
it boots and also check a cryptographic signature on it.

02:22.400 --> 02:27.640
So you have like a chain of trust from your firmware all the way to your operating system.

02:27.640 --> 02:35.120
If this all works, then someone else can't easily replace the operating system.

02:35.120 --> 02:38.360
It's something that your laptop doesn't trust.

02:39.240 --> 02:41.240
Now, the question is, okay,

02:41.240 --> 02:45.440
it verifies cryptographic signatures with what?

02:45.440 --> 02:48.160
Typically, if you buy a laptop,

02:48.160 --> 02:55.200
it will trust the Microsoft CA and some OEM CA.

02:55.200 --> 02:57.800
This is fine for Windows obviously,

02:57.800 --> 03:00.960
and it's also fine for some of the other big distro.

03:00.960 --> 03:04.240
So you can take Ubuntu and it works on a secure boot laptop.

03:04.240 --> 03:06.400
You can take Fedora, it just works.

03:06.400 --> 03:10.240
Unfortunately, for NixOS, it does not.

03:10.240 --> 03:17.880
So what's the issue with secure boot and NixOS?

03:17.880 --> 03:24.040
I think fundamentally, it's a very different model from other Linux distributions.

03:24.040 --> 03:29.800
There is like a thing that centrally builds packets and you can download it from somewhere,

03:29.800 --> 03:33.160
but it's mostly a build cache and you don't have to use it.

03:33.160 --> 03:36.240
You can build all of this locally.

03:36.240 --> 03:40.640
So and also, it's so configurable.

03:40.640 --> 03:46.200
So it's very easy to end up with an init rd that is not cached,

03:46.200 --> 03:49.960
or with a kernel that's not cached on cache.nixos,

03:49.960 --> 03:53.000
and then you will obviously not get signed binaries even if

03:53.000 --> 03:58.280
cache.nixos would sign them which it does not for secure boot.

03:58.280 --> 04:04.200
So for now, we're targeting your own CA.

04:04.200 --> 04:06.280
So you can just say, fuck it,

04:06.280 --> 04:09.560
I will enroll my own keys to the firmware.

04:09.560 --> 04:13.160
This is scary. It also looks scary if you do it,

04:13.160 --> 04:15.720
but it works reasonably well.

04:15.720 --> 04:20.400
But then comes the question every time I change the software on my laptop,

04:20.400 --> 04:23.000
I just have to manually sign it and that sucks.

04:23.000 --> 04:24.680
No one wants to do it.

04:24.680 --> 04:29.000
So now we come to what is this Lancer boot thing actually.

04:29.000 --> 04:32.560
This is actually the tooling that makes all of this convenient for NixOS.

04:32.560 --> 04:38.200
So Lancer boot takes care of automatically resigning your system,

04:38.200 --> 04:44.080
the boot, your kernel whenever you do a NixOS rebuild.

04:44.080 --> 04:46.480
This is a one-line description of it.

04:46.480 --> 04:49.880
It does not take care of generating keys initially,

04:49.880 --> 04:53.840
it does not take care of enrolling them in the firmware.

04:53.840 --> 04:57.960
This is something the user has to do once right now.

04:57.960 --> 05:00.280
We have quick start documentation for that.

05:00.280 --> 05:05.360
So I've heard that it has worked for other people.

05:06.640 --> 05:10.440
Dooben has secure boot on his laptop.

05:11.640 --> 05:16.440
Not bad. I have also heard that it did not work for other people.

05:16.440 --> 05:22.320
But so far, I think the likelihood of trashing your system with it has been very low.

05:22.320 --> 05:28.920
NixOS was very busy fixing the onboarding device.

05:28.920 --> 05:34.960
Yeah. All of this revolves around unified kernel images.

05:34.960 --> 05:38.880
This is a pretty recent technology out of the system,

05:38.880 --> 05:40.880
the sphere.

05:40.880 --> 05:45.880
A unified kernel image is a normal UFIPE file that can

05:45.880 --> 05:49.360
just be booted by the firmware with some extra bits.

05:49.360 --> 05:53.920
So it's basically a tiny archive of Linux kernel,

05:53.920 --> 05:57.040
the Linux kernel's command line and the end RDE,

05:57.040 --> 05:59.400
and then also container in some meta information.

05:59.400 --> 06:02.120
So there's an OS release file in there,

06:02.120 --> 06:05.160
and it has the name of this thing, the version.

06:05.160 --> 06:09.440
This is basically used to generate the entry in the menu

06:09.440 --> 06:13.960
when you select what to boot in system de-boot.

06:13.960 --> 06:16.160
Then because it's all self-contained,

06:16.160 --> 06:20.600
you just sign this one thing and you're good with secure boot.

06:20.600 --> 06:27.800
Yeah. SVC grub support is nearing completion.

06:27.800 --> 06:33.880
Also, Ryan keeps telling me that Linux support is also planned.

06:33.880 --> 06:37.640
But so far, system de-boot is the thing to go.

06:37.680 --> 06:42.440
Now, there's a PE stub.

06:42.440 --> 06:45.200
So to form a unified kernel image,

06:45.200 --> 06:50.000
you have to stub on some PE binary at the front.

06:50.000 --> 06:53.160
There's one from system de-root called system de-stub.

06:53.160 --> 06:56.840
It basically does exactly what I just told you.

06:56.840 --> 06:58.240
So you have the stub at the front,

06:58.240 --> 06:59.800
then the command line, the kernel,

06:59.800 --> 07:04.360
init RDE and OS release which I ignored on this picture.

07:04.360 --> 07:08.600
It works. The problem for NixOS is that

07:08.600 --> 07:12.880
this kernel command line basically contains

07:12.880 --> 07:17.320
a store path that changes for every NixOS generation.

07:17.320 --> 07:21.560
So whenever you do NixOS rebuild,

07:21.560 --> 07:23.920
if you experiment with your system a bit,

07:23.920 --> 07:30.320
you will have a new one of these files in your slash boot directory.

07:30.320 --> 07:34.920
This is problematic because you also have to kernel it in this one blob.

07:34.920 --> 07:38.360
At least for me, they're around 40 megabytes.

07:38.360 --> 07:42.120
The typical system partition,

07:42.120 --> 07:45.560
the slash boot thing is like half a gigabyte.

07:45.560 --> 07:52.000
I've seen NixOS systems with many generations.

07:52.000 --> 07:54.520
I pointed you.

07:56.960 --> 08:00.440
So in running out of space in your boot partitions,

08:00.440 --> 08:01.680
very uncomfortable.

08:01.680 --> 08:05.920
So that's why we wrote the Lancer boot stub.

08:05.920 --> 08:09.800
It does the same as the system de-stub,

08:09.800 --> 08:14.720
just that you don't have to embed the file,

08:14.720 --> 08:18.320
the content of kernel and init RDE anymore.

08:18.320 --> 08:23.600
You just embed a path to the file and the cryptographic hash to it.

08:23.600 --> 08:29.600
So basically, just point somewhere and say what you expect to be at that location.

08:29.600 --> 08:31.880
So then on the boot partition,

08:31.880 --> 08:34.360
you also have these files and then you're good.

08:34.360 --> 08:38.760
So the stub will get the file name,

08:38.760 --> 08:40.280
load the file, check the hash,

08:40.280 --> 08:42.040
and if everything works out,

08:42.040 --> 08:45.240
it gets booted and since the hashes are assigned,

08:45.240 --> 08:48.360
this is as secure as before.

08:48.360 --> 08:54.240
Now, the nice thing is that this stub is now only like 100 kilobytes in size,

08:54.240 --> 08:58.080
and you can have another one that has a different command line,

08:58.080 --> 09:03.240
but may use the same kernel and same init RDE and for this new generation,

09:03.240 --> 09:07.560
you just get another 100 kilobytes instead of 40 megabytes.

09:07.560 --> 09:11.000
Now, Ryan can have his 600 generations.

09:11.000 --> 09:14.200
Again, it is put folder.

09:14.200 --> 09:21.880
Yeah. So obviously, maintaining our own stub is not something that we enjoy too much.

09:21.880 --> 09:26.480
So there are discussions ongoing in the system D bug tracker

09:26.480 --> 09:30.360
to upstream dysfunctionality that you can

09:30.360 --> 09:35.720
just reference files on the boot partition instead of embedding them in the system D stub.

09:35.720 --> 09:39.200
Then system D stub would just supersede

09:39.200 --> 09:43.360
the Lancer-Botor stub and everyone is happy.

09:43.360 --> 09:47.160
You know, the other, I said.

09:47.760 --> 09:52.120
Awesome. The German is strong.

09:52.120 --> 09:56.960
Yeah. So this is like the boot part of the whole secure boot tool chain,

09:56.960 --> 10:00.720
but then there's also like the Nix part of it.

10:00.720 --> 10:04.600
Big thing is the Lancer-Botor tool.

10:04.600 --> 10:08.160
This is what is being called when you call Nixo as

10:08.160 --> 10:13.480
rebuild and what it basically does is it takes

10:13.480 --> 10:18.520
all the different generations you have in your NixoS

10:18.520 --> 10:28.080
and assembles the Lancer-Botor stubs and prepares the boot partition and signs everything.

10:28.080 --> 10:32.880
This is pretty involved due to non-reproducibility of kernels.

10:32.880 --> 10:37.800
So it's a bit tricky at times and we had some issues with that.

10:37.800 --> 10:44.720
But I think we're basically down to some polishing at this point to get this right.

10:44.720 --> 10:48.240
Yeah. So we also depend on the boot spec RFC,

10:48.240 --> 10:54.160
which is at the moment an experimental feature in Nix packages,

10:54.160 --> 11:00.520
in NixoS where for each generation you get a nice JSON file describing which kernel,

11:00.520 --> 11:04.880
which init RDE you want to boot and then the bootloader tooling can just take

11:04.880 --> 11:07.320
the JSON and do whatever it needs to do.

11:07.320 --> 11:10.080
So this has been also pretty nice.

11:10.680 --> 11:15.920
Yeah. How to use this?

11:15.920 --> 11:19.640
As I said, you have to do some manual step to onboard.

11:19.640 --> 11:26.600
Yeah, we've tried to document them as user-friendly as possible given the topic.

11:26.600 --> 11:30.000
If you are expected to be able to use NixoS,

11:30.000 --> 11:35.440
you are expected to be able to restore your system from a backup if everything goes wrong.

11:35.440 --> 11:37.560
But other than that,

11:37.560 --> 11:41.120
you should be able to set this up if you want to.

11:41.120 --> 11:45.600
Of course, if you want this to be an actual security feature,

11:45.600 --> 11:47.520
then you may want to come back later.

11:47.520 --> 11:50.320
But if you really, really want to use it as a security feature,

11:50.320 --> 11:52.280
you definitely need a BIOS password,

11:52.280 --> 11:55.280
otherwise someone can just turn secure would often.

11:55.280 --> 11:58.440
Then you also need full disk encryption because otherwise,

11:58.440 --> 12:02.360
someone can just read the private keys from your disk.

12:02.360 --> 12:07.160
Yeah. But that being said,

12:07.160 --> 12:08.880
when it all works,

12:08.880 --> 12:13.360
it's not much more than SPC to create keys,

12:13.360 --> 12:24.880
enrolling them after going to the BIOS menu and some very benign Nix configuration.

12:24.880 --> 12:29.200
NixoS configuration. Yeah, that's it.

12:29.200 --> 12:31.880
So I didn't want to go into too much technical things.

12:31.880 --> 12:33.960
You can ask me about stuff.

12:33.960 --> 12:35.960
Otherwise, you can use it today.

12:35.960 --> 12:38.320
So I have this running.

12:38.320 --> 12:42.640
So if I type device security,

12:42.640 --> 12:45.840
then you don't see anything,

12:45.840 --> 12:48.080
then I have to exit this.

12:48.080 --> 12:51.320
You see that for me,

12:51.920 --> 12:55.800
secure boot is active.

12:56.560 --> 13:00.640
Yeah. As far as collaboration goes,

13:00.640 --> 13:03.440
I have to find the button again.

13:03.440 --> 13:07.320
The discussion mostly happens on the GitHub repository.

13:07.320 --> 13:11.880
Open issues, we respond reasonably fast.

13:11.880 --> 13:18.320
We're currently in the process of fixing all the bugs.

13:18.320 --> 13:20.600
I think when we're bug-free,

13:20.600 --> 13:23.360
we will just call it 1.0 and then afterwards,

13:23.360 --> 13:27.800
there's like a million features that people want and they will all be very cool.

13:27.800 --> 13:30.480
But bugs needs to be fixed first.

13:30.480 --> 13:34.000
We discussed on matrix in the secure boot channel.

13:34.000 --> 13:35.320
There are a couple of other matrix.

13:35.320 --> 13:38.800
There are too many security related matrix channels.

13:38.800 --> 13:41.200
You just join all of them and then it's fine.

13:41.200 --> 13:43.080
There's one about boots back then,

13:43.080 --> 13:47.120
there's one about NixoS and TPMs that I forgot to put on the slide.

13:47.120 --> 13:52.880
Rust OS stuff has been helpful for the Rust UEFI development.

13:52.880 --> 13:58.560
There's a very nice community over there for Rust UEFI programming.

13:58.560 --> 14:04.520
You can also just ping me personally on matrix or on Mastodon.

14:04.520 --> 14:10.000
You should also not be hard to find my Twitter handle somewhere.

14:10.000 --> 14:14.600
That's it. I'm happy to take questions.

14:14.600 --> 14:15.920
So many.

14:15.920 --> 14:35.040
So what I personally find very nice is unlock.

14:35.040 --> 14:36.720
Well, yeah, sorry.

14:36.720 --> 14:41.200
The question was whether I can speculate on the cool features that are about to come.

14:41.200 --> 14:45.240
Personally, I find all the TPM stuff very exciting.

14:45.240 --> 14:49.520
The problem is mostly that the tooling is completely horrific and all the documentation

14:49.520 --> 14:59.000
and terminology is like it's annoying on purpose.

14:59.000 --> 15:03.880
So I'm really eager to make this usable for people

15:03.880 --> 15:06.720
that don't want to know all the details about TPMs.

15:06.720 --> 15:11.760
So for example, you want your disk encryption to be

15:11.760 --> 15:14.880
unlocked if your system has not been tampered with.

15:14.880 --> 15:16.840
This is like a, I mean,

15:16.840 --> 15:19.520
not tampered with is complicated thing to define.

15:19.520 --> 15:21.400
So and the usability aspects are hard,

15:21.400 --> 15:22.760
but this is something I would really want.

15:22.760 --> 15:27.680
So if my laptop is in good condition and my TPM believes everything is good,

15:27.680 --> 15:31.400
then I don't want to type in my password again.

15:31.480 --> 15:34.760
Yeah, then the whole.

15:34.760 --> 15:36.240
Next question.

15:36.240 --> 15:37.640
Yeah, yeah. Okay. Yeah.

15:37.640 --> 15:39.000
There was a question here.

15:39.000 --> 15:39.920
Yeah.

15:39.920 --> 15:43.280
Have you tested this call boot also?

15:43.280 --> 15:47.840
The question is whether we have tested it with core boot.

15:47.840 --> 15:51.360
No, if you deploy core boot with a UFI payload,

15:51.360 --> 15:52.440
it should just work.

15:52.440 --> 15:56.280
I mean, it worked for buggy with limitations.

15:56.280 --> 15:59.600
It worked for good.

16:00.200 --> 16:01.840
Sorry, sir.

16:01.840 --> 16:03.440
Not necessarily.

16:03.440 --> 16:06.400
I don't want to hear that story now.

16:06.400 --> 16:16.720
We are complaining to I think.

16:16.720 --> 16:20.440
So the independent buyers vendors,

16:20.440 --> 16:25.240
which implement UFI for most of the platforms actually implement buggy.

16:25.240 --> 16:27.160
Please come to the issue tracker.

16:27.160 --> 16:31.600
So if you use the Tiana core EDK2 on core boot,

16:31.600 --> 16:35.000
it should work because this is also what we use in QMU for testing.

16:35.000 --> 16:37.840
So another question.

16:37.840 --> 16:41.320
Yeah. I mean, do you have a person as you?

16:41.320 --> 16:43.320
I had a different question.

16:43.320 --> 16:45.520
Okay. The person.

16:45.520 --> 16:46.040
Yeah.

16:46.040 --> 16:48.880
Could you use this with an encrypted disk?

16:48.880 --> 16:54.680
But to verify it all next door and only the state of things in a separate.

16:54.680 --> 16:59.040
So using it without an encrypted disk.

16:59.040 --> 17:02.400
So first issue, if you don't put a private key on it and do

17:02.400 --> 17:06.720
assigning some way somehow else, which we don't support right now,

17:06.720 --> 17:10.320
you could at least avoid this problem.

17:10.320 --> 17:12.040
But then there's the issue.

17:12.040 --> 17:16.040
If you don't have integrity protection for your disk,

17:16.040 --> 17:22.040
someone can just replace whatever is on your disk and put some other kernel.

17:24.040 --> 17:27.160
You could use the MBRT for that.

17:27.160 --> 17:31.400
But I'm not sure like the threat model makes sense overall.

17:31.400 --> 17:32.680
It's hard to check.

17:32.680 --> 17:36.920
So the thing is, so secure boot is like one aspect of a secure system.

17:36.920 --> 17:38.880
Whenever we start to talk about it,

17:38.880 --> 17:41.640
someone comes and wants a whole flower bouquet.

17:42.160 --> 17:45.200
So what you say is definitely possible,

17:45.200 --> 17:49.000
but somewhat out of scope for the secure boot effort.

17:49.000 --> 17:51.520
We don't have any time for question anymore.

17:51.520 --> 17:53.720
Okay. The next people also come up.

17:53.720 --> 17:58.720
Thanks.

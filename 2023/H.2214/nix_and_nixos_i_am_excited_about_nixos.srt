1
0:00:00.000 --> 0:00:05.000
How many of you have used the two boxes?

2
0:00:05.000 --> 0:00:11.000
Those two are two half boxes because the other half is in, you know, in Havana there.

3
0:00:11.000 --> 0:00:14.000
But I guarantee those are two boxes.

4
0:00:14.000 --> 0:00:18.000
So one for the networking and one for the computing.

5
0:00:18.000 --> 0:00:20.000
I bought it years ago on eBay.

6
0:00:20.000 --> 0:00:28.000
I think some startups run out of business and they had like many full-size rack full of nooks

7
0:00:28.000 --> 0:00:31.000
and, you know, Nvidia boards.

8
0:00:31.000 --> 0:00:34.000
So I bought one and I started to play with it.

9
0:00:34.000 --> 0:00:39.000
So now I have ten nooks lying around at home, five GPU and I don't know what to do with them.

10
0:00:39.000 --> 0:00:41.000
So this is how everything started.

11
0:00:41.000 --> 0:00:47.000
So I have a single point of failure and all the SREs and DevOps here, you know, will hate it.

12
0:00:47.000 --> 0:00:50.000
But it's my single point of failure and I love it.

13
0:00:50.000 --> 0:00:53.000
And I call it Snowflake because it's unique.

14
0:00:53.000 --> 0:00:56.000
And what it does, it does a very minimal setup.

15
0:00:56.000 --> 0:01:00.000
It's the only long-living server or nooks, if I can call it server.

16
0:01:00.000 --> 0:01:01.000
I will call it server.

17
0:01:01.000 --> 0:01:04.000
So it's my only long-living server I have.

18
0:01:04.000 --> 0:01:07.000
And it runs a DHCP server.

19
0:01:07.000 --> 0:01:15.000
It runs Pixiboot, a TCP server and is the core of my home lab.

20
0:01:15.000 --> 0:01:21.000
It runs there and it distributes the, you know, the Nix OS derivation that I want to netboot

21
0:01:21.000 --> 0:01:25.000
on the other servers when I hook them to the network.

22
0:01:25.000 --> 0:01:33.000
As you know, because you are here and you are like me, I tend to automate everything I can.

23
0:01:33.000 --> 0:01:40.000
So as I said, this is the code that I wrote in the Nix OS derivation for the Snowflake server.

24
0:01:40.000 --> 0:01:43.000
I start OpenSSH, I configure my keys.

25
0:01:43.000 --> 0:01:48.000
I didn't, you know, paste that, the public key there because it was too long and not great,

26
0:01:48.000 --> 0:01:51.000
but you know how to do it.

27
0:01:51.000 --> 0:02:00.000
And I start PixiCore and I configure it with a package called Blackhole that is the distribution

28
0:02:00.000 --> 0:02:01.000
I use for net booting.

29
0:02:01.000 --> 0:02:04.000
And I'm going to, you know, get to net booting later on.

30
0:02:04.000 --> 0:02:10.000
I have my.5 shared with the Nix OS configuration, so you can check that if you want.

31
0:02:10.000 --> 0:02:17.000
So what is, my Snowflake server is used to do Pixibooting and NetBooting,

32
0:02:17.000 --> 0:02:21.000
to distribute the images I want on my female labs.

33
0:02:21.000 --> 0:02:23.000
And PixiCore is a tool that helps with that.

34
0:02:23.000 --> 0:02:26.000
It can be used standalone, is a Go project that you run.

35
0:02:26.000 --> 0:02:36.000
It expose a DHCP server, a proxy, an HTTP server to download the, you know,

36
0:02:36.000 --> 0:02:38.000
the kernel and the initram disk.

37
0:02:38.000 --> 0:02:40.000
And then this is Blackhole.

38
0:02:40.000 --> 0:02:46.000
So Blackhole is the, when you do net booting, you need an operating system

39
0:02:46.000 --> 0:02:48.000
to run on the new servers.

40
0:02:48.000 --> 0:02:52.000
And I generate that from an Nix OS derivation.

41
0:02:52.000 --> 0:02:56.000
It's also very lightweight because it says in RAM, so it's not persistent on disk,

42
0:02:56.000 --> 0:02:58.000
so it needs to be as small as it can be.

43
0:02:58.000 --> 0:03:02.000
So I use the net boot based profile and I change to minimal,

44
0:03:02.000 --> 0:03:03.000
but I didn't update my slides.

45
0:03:03.000 --> 0:03:09.000
So if the image is too big, you can use the installer minimal that is a bit smaller.

46
0:03:09.000 --> 0:03:15.000
And then I install OpenSSH because this is what I use to enter into the server when it boots.

47
0:03:15.000 --> 0:03:17.000
But what is net booting?

48
0:03:17.000 --> 0:03:25.000
So from zero to zero in one minute because that's how good I am with Nix booting.

49
0:03:25.000 --> 0:03:31.000
And so every server or many computers boots and they look for, you know,

50
0:03:31.000 --> 0:03:33.000
an operating system on disk.

51
0:03:33.000 --> 0:03:37.000
And if there is not an operating system on disk, they look for a USB one.

52
0:03:37.000 --> 0:03:43.000
And if there is not a USB, the world becomes way bigger and they try to send a DHCP request

53
0:03:43.000 --> 0:03:48.000
to the DHCP server, says, oh, I'm alive. What can I do?

54
0:03:48.000 --> 0:03:54.000
And if you have a smart enough DHCP server, it replies with a package containing the IP address

55
0:03:54.000 --> 0:04:00.000
for the server and then an address that can be used to download an init RAM disk

56
0:04:00.000 --> 0:04:02.000
and a kernel and boot the server.

57
0:04:02.000 --> 0:04:06.000
So this is, you know, very old style, but still in use.

58
0:04:06.000 --> 0:04:11.000
You know, all the cloud providers that I had the opportunity to work with use this

59
0:04:11.000 --> 0:04:14.000
because hardware doesn't change that quickly.

60
0:04:14.000 --> 0:04:19.000
So, pixi booting is still there and this is the same things I use.

61
0:04:19.000 --> 0:04:27.000
So I download the two binaries and the two packages and my server is ready to boot.

62
0:04:27.000 --> 0:04:35.000
So for me, I take the compute modules out from my boxes, I hook it to the network

63
0:04:35.000 --> 0:04:42.000
and they power on DHCP, kernel and I'm ready to SSH.

64
0:04:42.000 --> 0:04:47.000
This is kind of the log you get from pixi core when it detects like a new server

65
0:04:47.000 --> 0:04:50.000
ready to handle an installation process.

66
0:04:50.000 --> 0:04:56.000
So, you know, the IP is assigned 162 and it downloads the kernel, the init RAM disk

67
0:04:56.000 --> 0:05:02.000
that I generated with the black hole scripts that you just need to access the revision that you just see.

68
0:05:02.000 --> 0:05:09.000
And it boots. So at the end of the booting process, you have an address that you can SSH into

69
0:05:09.000 --> 0:05:11.000
and you have a server to play with.

70
0:05:11.000 --> 0:05:14.000
Obviously, this is not persisted.

71
0:05:14.000 --> 0:05:20.000
So when you reboot the server, the dance would start again and again forever

72
0:05:20.000 --> 0:05:22.000
and you would get a fresh new server to use.

73
0:05:22.000 --> 0:05:25.000
But for my ephemeral homelab, this is what I need.

74
0:05:25.000 --> 0:05:27.000
I just need a quick way to prototype.

75
0:05:27.000 --> 0:05:36.000
You can get enough RAM to be happy and for me, 8 gigabytes of RAM is happier than ever.

76
0:05:36.000 --> 0:05:37.000
I can play with that.

77
0:05:37.000 --> 0:05:44.000
Obviously, all the nooks can have, you know, disk attached to it and you can decide to persist the operating system on it.

78
0:05:44.000 --> 0:05:51.000
So you can write a systemd script that does nixo X install at the end of the when the server is booted

79
0:05:51.000 --> 0:05:53.000
and you don't need to touch anything.

80
0:05:53.000 --> 0:06:03.000
When the black hole starts, it will run the system, the scripts and it will have a new persisted and flashed operating system.

81
0:06:03.000 --> 0:06:10.000
As I said, I don't do that because I don't need it, but that's how the full cycle, lifecycle of the machine can be managed.

82
0:06:10.000 --> 0:06:21.000
And how do you, if you persist a disk, how do you reboot the server and get back to the pixie dance is all on you.

83
0:06:21.000 --> 0:06:26.000
In my case, I don't have, like the nooks doesn't really have a board, a BMC to control the server.

84
0:06:26.000 --> 0:06:30.000
So I can't force the bootloader to netboot.

85
0:06:30.000 --> 0:06:32.000
So I wipe the disk and I break the disk.

86
0:06:32.000 --> 0:06:33.000
So it will go to that booting.

87
0:06:33.000 --> 0:06:37.000
A bit rough, but, you know, homelabs, that's how it is.

88
0:06:37.000 --> 0:06:41.000
So service discovery, in my case, it's way simpler than what it should be.

89
0:06:41.000 --> 0:06:44.000
You can use console, core DNS or whatever you want, tiescale even.

90
0:06:44.000 --> 0:06:49.000
So you can, you know, in black hole, you can register a tiescale daemon and have it registered there.

91
0:06:49.000 --> 0:06:53.000
And you see that in the UI, I use my router.

92
0:06:53.000 --> 0:07:02.000
So when I see that there are new servers with a NixOS host name, I know that there is a server ready to be to use and that is booted.

93
0:07:02.000 --> 0:07:10.000
In the meantime, when it does the pixie dancing, the host name is pixie and a random MAC address.

94
0:07:10.000 --> 0:07:18.000
So it kind of gives me enough control and I don't need to run anything else, but you can get fancier if you want.

95
0:07:18.000 --> 0:07:21.000
So what is netbooting used for?

96
0:07:21.000 --> 0:07:23.000
Only for ephemeral homelabs?

97
0:07:23.000 --> 0:07:24.000
As I said, no.

98
0:07:24.000 --> 0:07:33.000
Cloud providers or, you know, people managing data centers that I think you know more than me, but you can do that for inventory management.

99
0:07:33.000 --> 0:07:36.000
So when you buy a shiny new server, it doesn't do much.

100
0:07:36.000 --> 0:07:38.000
It doesn't know what to do.

101
0:07:38.000 --> 0:07:42.000
So you just hook it to the network and the pixie then starts.

102
0:07:42.000 --> 0:07:53.000
And instead of running a script that persists an operating system, you run a daemon that registers the server to an inventory management like Netbox or others.

103
0:07:53.000 --> 0:07:58.000
So you know how much RAM it is, the model, whatever you can get from the system.

104
0:07:58.000 --> 0:08:05.000
You inspect the system, you push the blob and you register a brand new server and you have it available in your system.

105
0:08:05.000 --> 0:08:11.000
So it's kind of the same process I do for mine, but way cooler because the hardware is way more expensive.

106
0:08:11.000 --> 0:08:13.000
You can do that for provisioning.

107
0:08:13.000 --> 0:08:19.000
So as I told you before, I don't do provisioning because I don't want a persistent operating system on my homelab.

108
0:08:19.000 --> 0:08:29.000
But you can format and partition disks using system if you want or any other way to run a script and you're ready to go.

109
0:08:29.000 --> 0:08:31.000
For recovery is the same way.

110
0:08:31.000 --> 0:08:39.000
As I said, I don't have a BMC, but you can break your disk and get back on pixie booting.

111
0:08:39.000 --> 0:08:44.000
Some of the hardware have disk attached, but I don't really use disk much.

112
0:08:44.000 --> 0:08:47.000
And even if you don't because I don't need it.

113
0:08:47.000 --> 0:08:57.000
So my operating system is small enough and I do simple stuff that don't require me to swap or go on the disk.

114
0:08:57.000 --> 0:08:59.000
So I can use the entire disk.

115
0:08:59.000 --> 0:09:03.000
I can format it just for the data if I need to store some data.

116
0:09:03.000 --> 0:09:13.000
In order to do orchestration, pixie core, you can declare MAC addresses and the images you want to push to.

117
0:09:13.000 --> 0:09:21.000
So if you know the MAC address of your Ethernet cable, you can say, oh, on this MAC address, distribute this image.

118
0:09:21.000 --> 0:09:28.000
Otherwise, distribute a different image so you can have servers running different net booting images.

119
0:09:28.000 --> 0:09:30.000
And it's very convenient.

120
0:09:30.000 --> 0:09:35.000
So now when it comes to electric wiring, I'm also not really an expert.

121
0:09:35.000 --> 0:09:47.000
So what I have, I have a really powerful enough DC that is connected to a few fuse so I don't blow up all the nukes at the same time.

122
0:09:47.000 --> 0:09:49.000
One at a time maybe, but not all together.

123
0:09:49.000 --> 0:09:51.000
So that's why I have the fuse there.

124
0:09:51.000 --> 0:09:53.000
Easy, cheap, it works.

125
0:09:53.000 --> 0:10:00.000
And then to control the power consumption, I just cut the power at the beginning.

126
0:10:00.000 --> 0:10:07.000
So I have a Raspberry Pi connected to a board of 16 relays that I control over an API.

127
0:10:07.000 --> 0:10:16.000
So if I want to stop the Nuke number one, I just stop, cut the energy and the power for that Nuke and goodbye Nuke.

128
0:10:16.000 --> 0:10:21.000
And playing with the GPIO, the Raspberry Pi is very easy and convenient.

129
0:10:21.000 --> 0:10:24.000
So the prototype is good enough.

130
0:10:24.000 --> 0:10:32.000
I want to change from a Raspberry Pi from ESP32 to experiment a little bit, but it's not really for NixOS because it doesn't run an operating system.

131
0:10:32.000 --> 0:10:34.000
So just there.

132
0:10:34.000 --> 0:10:43.000
And I got two new fancy boxes that I want to replace with the IKEA one because I think that will play a better role with my ambient there.

133
0:10:43.000 --> 0:10:47.000
And I don't know if I'm late or earlier, but that's it.

134
0:10:47.000 --> 0:10:52.000
OK, so yeah, this is my home lab and what I'm playing with.

135
0:10:52.000 --> 0:11:02.000
So if you have any question or if you want to know more, I will just go back to the if I can.

136
0:11:02.000 --> 0:11:06.000
My invite is to have a look at the dot file repo if I can.

137
0:11:06.000 --> 0:11:11.000
Oh, I can do that.

138
0:11:11.000 --> 0:11:17.000
The dot file because it has all the all the codes in there and you can play with it.

139
0:11:17.000 --> 0:11:28.000
So coming back to these slides, the what is what I really like is the is the convenience of, you know, I have my NixOS derivation for this for these experiments.

140
0:11:28.000 --> 0:11:32.000
I'm building two NixOS derivations and the the flake.

141
0:11:32.000 --> 0:11:38.000
There's no flake one encapsulates the the other one so I can distribute it conveniently.

142
0:11:38.000 --> 0:11:42.000
And it's a single flake file that contains and run both.

143
0:11:42.000 --> 0:11:48.000
So it's you know, it's very easy and it's very easy when you get to it to get there.

144
0:11:48.000 --> 0:11:51.000
It took me 135 questions on this course.

145
0:11:51.000 --> 0:11:53.000
Thirty six thousand messages on metrics.

146
0:11:53.000 --> 0:11:55.000
But I'm there as is there for you.

147
0:11:55.000 --> 0:11:57.000
So play with it if you want.

148
0:11:57.000 --> 0:12:15.000
So thank you. Yep.

149
0:12:15.000 --> 0:12:18.000
Yeah, because it's very.

150
0:12:18.000 --> 0:12:25.000
Yeah. How NixOS plays with the pizza booting and, you know, a net booting you have.

151
0:12:25.000 --> 0:12:34.000
I didn't find there are other packages or other projects that helps you to package and operate in system like HashiCorp Packard is another one.

152
0:12:34.000 --> 0:12:37.000
There is infra kit from Docker and all this kind of stuff.

153
0:12:37.000 --> 0:12:43.000
So but NixOS gives you a full control on the on the distribution that you want to provide.

154
0:12:43.000 --> 0:12:47.000
So, for example, at the beginning, I wasn't really looking at the size of the image.

155
0:12:47.000 --> 0:12:49.000
So I was pushing in there everything I needed.

156
0:12:49.000 --> 0:12:59.000
But then I started to realize that my image was like four gigabytes and my RAM I didn't have enough RAM or I didn't have enough RAM left to do the actual work.

157
0:12:59.000 --> 0:13:02.000
So I started to iterate and play on what I was able to remove.

158
0:13:02.000 --> 0:13:06.000
So I started to investigate about how to do a minimal operating system.

159
0:13:06.000 --> 0:13:11.000
So I see that the minimal profiles I disabled the documentation I disabled, you know, everything I don't need it.

160
0:13:11.000 --> 0:13:18.000
And I went back to like now the image is 400 megabytes in RAM when it's fully unpacked.

161
0:13:18.000 --> 0:13:21.000
And it works. So it's going to stop.

162
0:13:21.000 --> 0:13:26.000
I think that's really the power you get from NixOS compared with other systems.

163
0:13:26.000 --> 0:13:28.000
Or getting questions answered.

164
0:13:28.000 --> 0:13:32.000
I can also suggest the disk server, which is pretty great.

165
0:13:32.000 --> 0:13:35.000
OK. Yeah, I would look at it. Thank you.

166
0:13:35.000 --> 0:14:04.000
One more round of applause, please. Thank you.

167
0:14:05.000 --> 0:14:07.000
Thank you.

168
0:14:35.000 --> 0:14:37.000
Thank you.

169
0:15:05.000 --> 0:15:07.000
Thank you.

170
0:15:35.000 --> 0:15:37.000
Thank you.

171
0:16:05.000 --> 0:16:07.000
Thank you.

172
0:16:35.000 --> 0:16:37.000
Thank you.

173
0:17:05.000 --> 0:17:06.000
Thank you.

174
0:17:36.000 --> 0:17:37.000
We ready for the next.

175
0:17:51.000 --> 0:17:53.000
Yes. Hi, I'm Philip.

176
0:17:53.000 --> 0:17:56.000
I'm here on behalf of Selkrull, a company.

177
0:17:56.000 --> 0:18:08.000
So we specialize on software delivery, customized to the clients, you know, what people want.

178
0:18:08.000 --> 0:18:10.000
This talk is about Nix.

179
0:18:10.000 --> 0:18:14.000
So like, you know, I'm here in Boston, 2023, of course.

180
0:18:14.000 --> 0:18:18.000
And my talk is Pitfossil Nix and how to avoid them.

181
0:18:18.000 --> 0:18:22.000
Right. So at Selkrull, we use NixOS for infrastructure.

182
0:18:22.000 --> 0:18:27.000
We use Nix for CI, CD and setting up deaf environments.

183
0:18:27.000 --> 0:18:33.000
Basically everywhere you can use Nix, we try to adopt it just because, you know, Nix is great.

184
0:18:33.000 --> 0:18:37.000
You have all the repusability and everything that comes with that.

185
0:18:37.000 --> 0:18:39.000
Right. So it is me.

186
0:18:39.000 --> 0:18:40.000
All my socials are here.

187
0:18:40.000 --> 0:18:44.000
If you want to reach out to me, my GitHub.

188
0:18:44.000 --> 0:18:45.000
Right.

189
0:18:47.000 --> 0:18:48.000
Right. Yes.

190
0:18:48.000 --> 0:18:56.000
So Selkrull, I said, is, you know, a software company focused on creating customized high performance solutions.

191
0:18:56.000 --> 0:18:58.000
Yes, I can. Right. Sorry.

192
0:18:58.000 --> 0:19:05.000
So this is mainly in like the like functional programming realm of like Hestrel and stuff like that,

193
0:19:05.000 --> 0:19:10.000
where, you know, people want customized solutions for certain problems.

194
0:19:10.000 --> 0:19:13.000
Exactly. Right. So again, this hurts what Nix.

195
0:19:13.000 --> 0:19:16.000
And this is right.

196
0:19:16.000 --> 0:19:20.000
The goal of this talk is to make Nix more approachable.

197
0:19:20.000 --> 0:19:26.000
Right. So when we adopted Nix, I mean, I wasn't there then.

198
0:19:26.000 --> 0:19:30.000
All the developers weren't using Nix. Right.

199
0:19:30.000 --> 0:19:33.000
And they still, you know, they tried to. Right.

200
0:19:33.000 --> 0:19:38.000
So they asked the developers, they're not that into Nix. Right.

201
0:19:38.000 --> 0:19:40.000
And they had some issues.

202
0:19:40.000 --> 0:19:50.000
And I want to touch on that just so that, you know, a case study of how Nix works in Selkrull.

203
0:19:50.000 --> 0:19:52.000
Right. Sorry. Right.

204
0:19:52.000 --> 0:20:00.000
So I'm pretty new at Selkrull and I'm part of the SIU team.

205
0:20:00.000 --> 0:20:10.000
So I try to push Nix to and oftentimes we have developers.


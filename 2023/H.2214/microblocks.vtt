WEBVTT

00:00.000 --> 00:22.160
Let's just fetch our micro blocks here.

00:22.160 --> 00:24.560
This happened to me before.

00:24.560 --> 00:26.400
Why did that go away?

00:26.400 --> 00:27.880
Let's try this.

00:27.880 --> 00:32.040
Let me just quit micro blocks a second.

00:32.040 --> 00:33.040
Oh, there it goes.

00:33.040 --> 00:35.200
No, I don't want to quit.

00:35.200 --> 00:37.800
Okay, so the cable wasn't quite plugged in.

00:37.800 --> 00:41.400
For some reason I lost my displays to something.

00:41.400 --> 00:46.920
So I said basic sensors, just like that Heti language.

00:46.920 --> 00:49.160
Actually let me just quit micro blocks really quick.

00:49.160 --> 00:51.080
This cable is being a little flaky.

00:51.080 --> 00:54.720
No, no, no.

00:54.720 --> 00:55.920
And also in the display.

00:55.920 --> 00:56.920
Okay.

00:56.920 --> 00:58.320
This is what it looks like.

00:58.320 --> 01:02.800
And you have outputs, you have inputs, and then you can do all the pins.

01:02.800 --> 01:07.560
You have your control variables, operators, all sorts of stuff like that.

01:07.560 --> 01:09.720
But I plugged in this board.

01:09.720 --> 01:10.720
It showed a green here.

01:10.720 --> 01:11.880
It's already connected.

01:11.880 --> 01:14.680
So it already knows what this board is.

01:14.680 --> 01:22.080
And when I click temperature, it tells me it's 19 degrees C. If I want to see the display,

01:22.080 --> 01:25.160
I simply turn on the display.

01:25.160 --> 01:26.520
Oh, let's see.

01:26.520 --> 01:29.000
I need this quick camera.

01:29.000 --> 01:33.160
So for those of you at home, there's my happy face.

01:33.160 --> 01:35.880
And then I click temperature.

01:35.880 --> 01:38.480
There it is there.

01:38.480 --> 01:41.960
Keep losing this connection.

01:41.960 --> 01:43.440
Okay.

01:43.440 --> 01:46.440
All right.

01:46.440 --> 01:57.080
Every time the HDMI pops in and out, it's causing micro blocks to be unhappy.

01:57.080 --> 01:59.080
Sorry about that.

01:59.080 --> 02:01.080
What's that?

02:01.080 --> 02:02.080
Okay.

02:02.080 --> 02:03.480
All right.

02:03.480 --> 02:08.280
Let's just try this one more time.

02:08.280 --> 02:11.280
Load micro blocks.

02:11.280 --> 02:19.600
And another particularly cool.

02:19.600 --> 02:22.280
It's okay.

02:22.280 --> 02:24.720
It's very flaky.

02:24.720 --> 02:26.040
Oh, I lost it.

02:26.040 --> 02:28.040
Let me see.

02:28.040 --> 02:33.520
What happened to my power?

02:33.520 --> 02:52.440
So HDMI is lost.

02:52.440 --> 02:53.840
Don't touch anything.

02:53.840 --> 02:54.840
Yeah.

02:54.840 --> 02:57.840
We might have a few screen issues here.

02:57.840 --> 03:05.800
Let me just try really quickly if I can quit and open again.

03:05.800 --> 03:09.480
Okay.

03:09.480 --> 03:17.080
Quite briefly, I wanted to show you that you can graph something like the light level.

03:17.080 --> 03:30.320
And you can also see the data of an input value and it will put zero at the bottom.

03:30.320 --> 03:32.480
And I can watch this in real time.

03:32.480 --> 03:36.640
And if I close my hand over it, it gets reflections on stuff.

03:36.640 --> 03:41.520
But so you can see, you can plot data in real time, X, Y, and Z.

03:41.520 --> 03:43.980
It has an accelerometer.

03:43.980 --> 03:45.320
So that's very cool.

03:45.320 --> 03:46.880
All right.

03:46.880 --> 03:48.440
Now, we're going to go back.

03:48.440 --> 03:49.880
So that's liveness.

03:49.880 --> 03:51.240
There's no compile download.

03:51.240 --> 03:54.200
It's just happening.

03:54.200 --> 03:58.300
Next point is that you can do things in parallel.

03:58.300 --> 04:07.860
So I'm going to show you a quick, how multitasking is handled through just opening the two button

04:07.860 --> 04:10.120
blink program right here.

04:10.120 --> 04:13.200
And I open this.

04:13.200 --> 04:17.040
And if I press button, let me get my camera.

04:17.040 --> 04:24.400
If I press button A, while I'm pressing it, it's going to repeat and blink 100 milliseconds.

04:24.400 --> 04:26.780
While I press B, it does the same thing.

04:26.780 --> 04:32.660
I can actually press A and B. And I can try to get them in sync or I can try to get them

04:32.660 --> 04:33.660
on and off.

04:33.660 --> 04:35.160
But it takes too long.

04:35.160 --> 04:40.900
So just as Hetty has variables, I can do something like a delay.

04:40.900 --> 04:44.560
So I can try to play around with it in real time.

04:44.560 --> 04:50.040
And I set the delay to like 500.

04:50.040 --> 04:58.800
And then I drag this delay variable in so I can play around with a slower blink time

04:58.800 --> 05:03.180
and change it all I want while I'm experimenting.

05:03.180 --> 05:08.680
And now, if I set that delay variable, you can also use say block.

05:08.680 --> 05:14.580
So it's nice to just set a variable and say it.

05:14.580 --> 05:16.680
Now I know what it is.

05:16.680 --> 05:24.160
And if I'm pressing the A, now you see it's every 500.

05:24.160 --> 05:29.280
And now I can more like get them on, off, on, off.

05:29.280 --> 05:33.200
And if you were in an Arduino loop, just one Continue Forever loop, this would be a lot

05:33.200 --> 05:43.480
harder to have either these different multitasking done for you, which is very, very cool.

05:43.480 --> 05:45.960
The next thing is that it's autonomous.

05:45.960 --> 05:59.320
So if I am programming and I'm doing these blocks on my IDE, then what happens is there's

05:59.320 --> 06:07.880
actually an opcode, it looks a bit like assembly language representation of those blocks that

06:07.880 --> 06:08.880
you can see.

06:08.880 --> 06:15.760
And then in the actual board, it's actually in bytecode.

06:15.760 --> 06:23.960
So if I were to turn on advanced blocks, I could show you the instructions.

06:23.960 --> 06:31.880
You can see that, and then I could actually see the bytecode.

06:31.880 --> 06:35.980
And the bytecode is then what is inside the virtual machine.

06:35.980 --> 06:43.400
So that will have cool ramifications about sharing our files when we get to that point.

06:43.400 --> 06:47.280
OK, so blocks equate to bytecode.

06:47.280 --> 06:54.360
So it's autonomous in the sense that if I unplug it from my laptop and I plug it back

06:54.360 --> 07:02.000
in, then what happened?

07:02.000 --> 07:05.840
Did I lose my connection?

07:05.840 --> 07:11.140
OK, I just, oh, I know what happened.

07:11.140 --> 07:13.400
For autonomy, I made a mistake.

07:13.400 --> 07:19.200
I actually need a when started block to set that delay because there was delay of zero.

07:19.200 --> 07:22.280
So I actually needed this to be set.

07:22.280 --> 07:26.680
We have to show our errors.

07:26.680 --> 07:34.360
And now down here, there we go.

07:34.360 --> 07:41.240
And I love having a co-speaker.

07:41.240 --> 07:48.200
And then another very awesome aspect of it is its portability.

07:48.200 --> 07:54.320
So microblocks, if you look at how we build the virtual machine, we have a platform I.O.

07:54.320 --> 07:57.400
script with an any file that I looked last night.

07:57.400 --> 08:00.320
There were up to 43 different boards.

08:00.320 --> 08:05.400
And there's kind of about nine varieties that if you go into microblocks itself and you

08:05.400 --> 08:11.920
want to update the firmware on a board, it will show you well, this is plugged in now.

08:11.920 --> 08:14.360
I'm just updating the firmware on it.

08:14.360 --> 08:18.360
But let me just unplug this for a moment.

08:18.360 --> 08:22.720
And if you want to update the firmware on a board, there's like micro bits, caliope,

08:22.720 --> 08:23.720
the ESP32.

08:23.720 --> 08:27.980
There's some new electroph

08:27.980 --> 08:29.600
a whole bunch of boards.

08:29.600 --> 08:31.600
But there's also in the platform I.O.

08:31.600 --> 08:36.960
any file, a whole bunch of Arduino boards and other stuff that's there.

08:36.960 --> 08:39.520
So it's portable.

08:39.520 --> 08:49.680
And I want to do a quick display of that where I take this quick ham.

08:49.680 --> 08:55.080
I'm going to make it big.

08:55.080 --> 08:57.820
And we apply power.

08:57.820 --> 09:00.720
So I have a whole bunch of boards plugged into a USB strip.

09:00.720 --> 09:03.640
So we don't lose the HDMI.

09:03.640 --> 09:09.040
And Bernat's going to turn that on.

09:09.040 --> 09:16.160
And now you can see I have the heartbeat program running on a whole bunch of different boards.

09:16.160 --> 09:21.500
So I kind of cheated on a couple of boards that are new and didn't have full support

09:21.500 --> 09:23.880
like this Mbits board.

09:23.880 --> 09:27.380
But and of course the circuit playground doesn't have the same thing.

09:27.380 --> 09:33.080
But on some of these OLED displays, you can actually use the micro bit type style display

09:33.080 --> 09:35.320
box and it still works.

09:35.320 --> 09:39.440
And then go around and push the A button on everything.

09:39.440 --> 09:44.280
So the A buttons turn them all to smiles.

09:44.280 --> 09:46.240
And whoops.

09:46.240 --> 09:48.440
Dang.

09:48.440 --> 09:52.240
Just so now they're all happy face.

09:52.240 --> 09:59.720
And of course if they have B buttons, we can go back to our heart.

09:59.720 --> 10:03.240
And this is the only one that has a side B button.

10:03.240 --> 10:08.120
Voila.

10:08.120 --> 10:12.720
So as you know, like getting used to a programming environment, when you pick up a different

10:12.720 --> 10:16.040
board, do you want to get a different programming environment every time?

10:16.040 --> 10:17.680
No, clearly not.

10:17.680 --> 10:23.880
So portability is really cool.

10:23.880 --> 10:26.440
Did I lose it completely?

10:26.440 --> 10:28.000
All right.

10:28.000 --> 10:29.760
I'm about to hand this off.

10:29.760 --> 10:32.360
So that's good.

10:32.360 --> 10:34.840
All right.

10:34.840 --> 10:37.160
Let's hear.

10:37.160 --> 10:38.480
Okay.

10:38.480 --> 10:44.280
And then the last part to explain is shareability.

10:44.280 --> 10:52.800
So yeah, I could do the same program.

10:52.800 --> 10:57.960
So shareability is there's a few ways to deal with this.

10:57.960 --> 11:01.920
Let me go in the slide show mode because I'm basically wrapped up.

11:01.920 --> 11:08.200
One is like you can go to the file open save menu with micro blocks.

11:08.200 --> 11:13.220
Let me just show you in real time here.

11:13.220 --> 11:19.220
So you can just go in here and say file, save file open.

11:19.220 --> 11:25.000
And then there's these other options like encoded in the URL.

11:25.000 --> 11:29.380
So you can say file copy project URL to a clipboard.

11:29.380 --> 11:32.320
And then you can open it, give that URL out.

11:32.320 --> 11:39.540
And we do this, you know, embed a you just put a hyperlink on some documentation.

11:39.540 --> 11:41.800
And you can open that right in the Chrome browser.

11:41.800 --> 11:43.680
Chrome or Edge browser support the serial mode.

11:43.680 --> 11:45.080
You can't unfortunately use Firefox.

11:45.080 --> 11:46.960
I used to work from Mozilla.

11:46.960 --> 11:47.960
Okay.

11:47.960 --> 11:49.440
And then encoded in the picture.

11:49.440 --> 11:55.120
So our documentation, we have pictures on the websites in the wiki in the learn section.

11:55.120 --> 11:57.200
And the code is actually embedded in the picture.

11:57.200 --> 12:02.920
So you drag the picture into your Chrome browser and or into your IDE standalone or Chrome

12:02.920 --> 12:05.520
browser and it will actually load the code.

12:05.520 --> 12:11.160
And then the last part is it's shareable by opening from the board.

12:11.160 --> 12:20.120
And so I'm going to have Bernat demonstrate that as we hand off to more cool demo for

12:20.120 --> 12:24.120
part two.

12:24.120 --> 12:27.160
Okay.

12:27.160 --> 12:30.440
Can you hear me?

12:30.440 --> 12:33.800
Yes, of course you can.

12:33.800 --> 12:37.800
So yeah, we were talking about portability.

12:37.800 --> 12:43.160
And one of the aspects of portability is not just that the code is portable across boards,

12:43.160 --> 12:45.680
but the board itself is an example of portability.

12:45.680 --> 12:53.120
The board is actually it contains the program that you are seeing here, right?

12:53.120 --> 12:57.880
In any other microcontroller environment, once the code is here, the code is here and

12:57.880 --> 12:58.880
it's it's gone.

12:58.880 --> 13:03.280
If you've lost your program, if you've lost your source, the source is gone.

13:03.280 --> 13:04.520
Right?

13:04.520 --> 13:12.000
And microblocks, we have a way, oops, not this, yeah, yeah, this microlock, sorry, that's

13:12.000 --> 13:13.000
open from board.

13:13.000 --> 13:15.060
Now, I'm in the browser version.

13:15.060 --> 13:19.040
We have versions, we haven't mentioned that, but we have versions for the browser and for

13:19.040 --> 13:24.240
Mac, Windows, Linux, and Chromebook and Raspberry Pi, etc.

13:24.240 --> 13:27.200
So we have many platforms that we support.

13:27.200 --> 13:29.480
This is the browser version.

13:29.480 --> 13:37.840
And now it says plug in the board and connect and click the USB icon to connect.

13:37.840 --> 13:41.440
So I'll just connect as it's set.

13:41.440 --> 13:44.520
Now I select the USB port.

13:44.520 --> 13:46.880
And now it's actually reading back the code.

13:46.880 --> 13:49.560
And it's not like we embedded the blocks inside the board.

13:49.560 --> 13:54.480
It's actually for the, I know this is a slightly geekier audience than our usual.

13:54.480 --> 14:01.920
So we actually have a decompiler that John built in that's inspired in this quick decompiler

14:01.920 --> 14:03.640
that John also worked on.

14:03.640 --> 14:08.320
And what it does is it takes these bytecodes and it retranslates them into what we see

14:08.320 --> 14:09.320
here.

14:09.320 --> 14:10.320
Right?

14:10.320 --> 14:16.520
And just to prove that it still works, it does.

14:16.520 --> 14:23.440
And you know, we like to joke that micrologs is so portable that we could even port it

14:23.440 --> 14:26.720
to a board that does not exist.

14:26.720 --> 14:28.560
And that's actually a joke, but it's true.

14:28.560 --> 14:31.920
Like we have a board that doesn't exist and can run micrologs.

14:31.920 --> 14:36.520
Since micrologs is VM based, you could compile this VM for something that does not exist,

14:36.520 --> 14:37.920
that is virtual.

14:37.920 --> 14:41.560
And that's why we made Borde.

14:41.560 --> 14:44.240
Borde is a result of the pandemic.

14:44.240 --> 14:50.800
We were doing online classes and it was really hard to get hardware to kids.

14:50.800 --> 14:58.880
So that was an idea like my boss and Jan's and Yatka's boss at SAP, she had this idea

14:58.880 --> 15:04.520
that we needed something virtual so that kids who don't have access to hardware could still

15:04.520 --> 15:06.360
at least try micrologs.

15:06.360 --> 15:07.880
And that's why we made Borde.

15:07.880 --> 15:10.600
And Borde, as you can see, can run the same code.

15:10.600 --> 15:11.600
It's not a simulator.

15:11.600 --> 15:12.600
That's very important.

15:12.600 --> 15:13.600
It's not a simulator.

15:13.600 --> 15:15.760
It's running the exact same VM.

15:15.760 --> 15:18.140
So it's a virtual board, not a simulator.

15:18.140 --> 15:20.080
It has its own capabilities.

15:20.080 --> 15:21.400
It has a couple of buttons.

15:21.400 --> 15:23.240
It has a speaker.

15:23.240 --> 15:24.680
It has a touchscreen.

15:24.680 --> 15:25.800
It has a file system.

15:25.800 --> 15:28.600
It can do HTTP client operation.

15:28.600 --> 15:31.000
So it's a different sort of board.

15:31.000 --> 15:33.700
Yeah, right.

15:33.700 --> 15:39.600
So it does the same things.

15:39.600 --> 15:44.520
But you know, this is nice, but micrologs was always about physical computing.

15:44.520 --> 15:45.520
This is nice.

15:45.520 --> 15:47.860
If you don't have a board, that's a good way to get started.

15:47.860 --> 15:53.160
But our aim was always to teach physical computing, to do tangible things in the real world, in

15:53.160 --> 15:54.620
the physical world.

15:54.620 --> 15:59.240
So let me show you one thing that you would not be able to do with boarding.

15:59.240 --> 16:02.000
And that's connecting external sensors to your board.

16:02.000 --> 16:08.420
So just this funny sensor that I have in here, that's an RFID sensor.

16:08.420 --> 16:12.080
That's the technical Mambo Jumbo for the thing that's in your credit card that lets you pay

16:12.080 --> 16:19.720
contactlessly or on your subway card or your gym membership card or whatever.

16:19.720 --> 16:28.480
And I happen to have some of these cards with me, as you all do, I'm sure.

16:28.480 --> 16:29.480
So for example,

16:29.480 --> 16:33.480
Do you want cards up here?

16:33.480 --> 16:34.480
Yeah.

16:34.480 --> 16:37.480
And maybe I need, yeah, I need a cable.

16:37.480 --> 16:38.480
Oops.

16:38.480 --> 16:39.480
It's physical.

16:39.480 --> 16:50.360
So this board has a battery, but it's that that's the problems of the physical world

16:50.360 --> 16:51.360
as well.

16:51.360 --> 16:56.040
So I'm connecting an external battery to it.

16:56.040 --> 16:58.960
Okay.

16:58.960 --> 17:03.200
And now I'm just going to try.

17:03.200 --> 17:12.600
This has a micro box program in it, by the way, that I can show later, maybe.

17:12.600 --> 17:14.120
But I'll show it later.

17:14.120 --> 17:22.880
So okay, so I made it so it recognizes this particular card and it plays a tone.

17:22.880 --> 17:24.680
Okay, that's interesting.

17:24.680 --> 17:26.960
Let's try another card.

17:26.960 --> 17:29.880
Okay.

17:29.880 --> 17:31.680
Let's try this one.

17:31.680 --> 17:33.600
Okay.

17:33.600 --> 17:35.120
Okay.

17:35.120 --> 17:37.360
Cool.

17:37.360 --> 17:40.920
I'm missing some.

17:40.920 --> 17:43.760
No, wait.

17:43.760 --> 17:46.360
Yes, we'll talk later.

17:46.360 --> 17:51.560
I'll need a special number that comes with it as well.

17:51.560 --> 17:57.760
Let's try with my bank ones and this one as well.

17:57.760 --> 17:59.480
Okay.

17:59.480 --> 18:03.600
So we have a bunch of cards and we've seen that each of them can make a note.

18:03.600 --> 18:05.600
Let's try to maybe.

18:05.600 --> 18:09.080
Oh yeah.

18:09.080 --> 18:13.200
Where is it?

18:13.200 --> 18:17.760
I know it's somewhere.

18:17.760 --> 18:20.920
Oh, maybe.

18:20.920 --> 18:23.440
Yeah.

18:23.440 --> 18:33.400
You know, when you're having trouble paying, that's why.

18:33.400 --> 18:35.880
Because it's okay.

18:35.880 --> 18:38.640
Okay.

18:38.640 --> 18:45.360
I'll try to play a song.

18:45.360 --> 18:48.360
Where is it?

18:48.360 --> 19:03.320
The second part.

19:03.320 --> 19:15.120
Cathy, can you hand me your keys?

19:15.120 --> 19:21.240
Okay.

19:21.240 --> 19:25.240
So I was to show that programming is fun, but programming the real world and touching

19:25.240 --> 19:32.520
actual things is a very engaging way to get kids and people that are not hardcore gigs

19:32.520 --> 19:38.040
interested in what we do, which is programming computers.

19:38.040 --> 19:39.040
That was all.

19:39.040 --> 19:40.040
Go to the.

19:40.040 --> 19:41.240
Oh yeah.

19:41.240 --> 19:47.000
Go to the micro blocks website if you want to learn more about it.

19:47.000 --> 19:48.000
Microblocks.fun.

19:48.000 --> 19:52.760
Small, fast, human friendly.

19:52.760 --> 19:53.760
That's our website.

19:53.760 --> 20:00.160
We have a very nice, if I may say so, learn page with a lot of tutorials.

20:00.160 --> 20:01.920
Microblocks is also translated to a lot of language.

20:01.920 --> 20:03.800
I forgot how many.

20:03.800 --> 20:06.120
The code is also translated just like Eddie.

20:06.120 --> 20:09.360
And a little more translators just like Eddie.

20:09.360 --> 20:10.720
Yeah.

20:10.720 --> 20:17.080
And if you want to help out in our site, there is a whole section about how to contribute

20:17.080 --> 20:22.400
and we have a space for everyone who wants to help out.

20:22.400 --> 20:23.400
Thank you.

20:23.400 --> 20:31.640
Do you have time for questions?

20:31.640 --> 20:36.040
Just maybe one or two, right?

20:36.040 --> 20:37.040
Any questions?

20:37.040 --> 20:45.240
Is it expensive?

20:45.240 --> 20:51.560
I was getting asked that a lot at the booth yesterday.

20:51.560 --> 20:58.960
Because we were doing some demos in the SFC booth and the range, if I can pull it, this

20:58.960 --> 20:59.960
how much was this?

20:59.960 --> 21:03.800
Maybe $25 M5 stack.

21:03.800 --> 21:06.840
Probably even less than $10 for the M5 atom.

21:06.840 --> 21:11.560
The micro bits were retail at $15 until the pandemic supply and change shortage.

21:11.560 --> 21:13.400
Now they're $20 or more.

21:13.400 --> 21:15.800
The M bits, what was this one now?

21:15.800 --> 21:18.360
$12, $25.

21:18.360 --> 21:19.880
The Pico Ed is maybe $10.

21:19.880 --> 21:20.880
This is maybe $25.

21:20.880 --> 21:25.320
So I would say they range less than $50.

21:25.320 --> 21:28.360
And then you can buy some of these educational boards.

21:28.360 --> 21:31.920
Let me just show you.

21:31.920 --> 21:38.120
Like some of the small boards with stuff already included, so you don't have to learn, but

21:38.120 --> 21:43.120
the new Robatistan.com Pico Ed board, this is like $50.

21:43.120 --> 21:44.880
But it has all these sensors and actuators.

21:44.880 --> 21:49.480
And then you can pull apart the bricks, as they're called, and use cables to put them

21:49.480 --> 21:50.480
back together.

21:50.480 --> 21:54.480
I want to say the board is free, though.

21:54.480 --> 21:58.400
We have other ranges from zero to...

21:58.400 --> 22:03.280
And the cheapest of the ESP8266 is there a couple dollars.

22:03.280 --> 22:05.280
But then you have to buy the sensors and actuators.

22:05.280 --> 22:09.520
I actually find for teaching you probably want to buy something with integrated stuff.

22:09.520 --> 22:13.920
And then you can buy all these kits and plug them together and run robots and the robotic

22:13.920 --> 22:14.920
kits.

22:14.920 --> 22:16.680
There's a ton of hardware out there.

22:16.680 --> 22:17.680
Next question.

22:17.680 --> 22:21.520
So do you have a free-made sort of workshop material?

22:21.520 --> 22:26.480
Oh, hold on.

22:26.480 --> 22:32.520
So first of all, in the learn site, you're going to find some resources that are like

22:32.520 --> 22:39.540
full classes, like let's say this one that teaches you about main enumerals.

22:39.540 --> 22:44.840
We also try to do activities that are not just about technology, right?

22:44.840 --> 22:47.720
So we can get a more diverse audience interested.

22:47.720 --> 22:52.840
If you make a project about bits and bytes, that's going to interest probably the people

22:52.840 --> 22:53.840
in this room.

22:53.840 --> 22:58.080
But you're already interested with... you're not the target audience, right?

22:58.080 --> 23:02.840
But if we talk about main enumerals, maybe people who are interested in history or culture

23:02.840 --> 23:09.160
are going to see the value in programming and microcontrollers.

23:09.160 --> 23:11.760
So that's a whole activity.

23:11.760 --> 23:12.760
And then you have actually...

23:12.760 --> 23:19.720
And again, you drag the screenshots, pictures into the IDE and they will load.

23:19.720 --> 23:24.320
And then you have a teacher's guide with extra information about what's being talked about.

23:24.320 --> 23:26.320
And then there's...

23:26.320 --> 23:28.880
We've done these things called activity cards.

23:28.880 --> 23:34.520
And I put together a kit with a manufacturer and they included these activity cards, 10

23:34.520 --> 23:36.920
two-sided cards in the kit.

23:36.920 --> 23:43.840
And there's things like flashlight tag and sound and two-button texting.

23:43.840 --> 23:48.960
It uses two microbits and use tilt to find the letters and punctuation and button A and

23:48.960 --> 23:52.040
button B to find the letters and add.

23:52.040 --> 23:57.560
And you can actually text messages directly between two microbits, for example, or clues

23:57.560 --> 24:03.120
or other boards.

24:03.120 --> 24:07.840
What do you mean, can you code...

24:07.840 --> 24:10.560
We don't want people to have to go through this hard-on.

24:10.560 --> 24:12.280
That's why we're making microblocks.

24:12.280 --> 24:17.200
So you don't have to care about bits and byte codes.

24:17.200 --> 24:20.240
No, this is coding.

24:20.240 --> 24:26.240
You can see the off codes if you want and you can build other editors to the VM if you

24:26.240 --> 24:28.520
want a text-based editor on top.

24:28.520 --> 24:29.520
Go ahead.

24:29.520 --> 24:37.520
I'm wondering, I'm familiar a bit with microbits.

24:37.520 --> 24:45.520
And so what you do is you add sensors or you put them in little robot cars, I think, like

24:45.520 --> 24:46.520
that.

24:46.520 --> 24:47.520
Yes.

24:47.520 --> 24:48.520
And?

24:48.520 --> 24:49.520
Yes.

24:49.520 --> 24:53.280
If you go to the learn side again, there's...

24:53.280 --> 24:57.600
You can select the microbit here and you'll see all these activities for the microbit.

24:57.600 --> 25:02.200
And a lot of them are using external sensors, like this one uses motors to make a microbit

25:02.200 --> 25:03.840
robot.

25:03.840 --> 25:09.240
This one uses a ready-made robot car.

25:09.240 --> 25:12.240
A lot of them use external sensors and activators.

25:12.240 --> 25:17.760
So, for example, you ask, I deliver.

25:17.760 --> 25:26.040
There's just five commands at the end of the radio.

25:26.040 --> 25:28.080
Forward, back, left, right, and stop.

25:28.080 --> 25:30.960
Every time the buttons go up, I stop.

25:30.960 --> 25:34.440
And this one's running out of battery.

25:34.440 --> 25:36.960
So the other one's faster.

25:36.960 --> 25:37.960
We're over time, Kathy.

25:37.960 --> 25:38.960
Okay.

25:38.960 --> 25:39.960
Thank you, everyone.

25:39.960 --> 25:46.600
Thank you.

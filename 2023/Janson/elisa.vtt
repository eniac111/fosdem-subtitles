WEBVTT

00:00.000 --> 00:10.600
Okay, there's next talk.

00:10.600 --> 00:13.840
Please be silent.

00:13.840 --> 00:19.560
Okay, this will get an interesting thing.

00:19.560 --> 00:23.860
Normally I'm used to move my arms a lot while I'm talking, so I try to get the microphone

00:23.860 --> 00:27.320
always close to my body now.

00:27.320 --> 00:31.280
I will give you some information about the ELISA project.

00:31.280 --> 00:35.400
ELISA stands for Enabling Linux and Safety Applications.

00:35.400 --> 00:41.000
Maybe a quick question up front, who is aware of safety-critical software?

00:41.000 --> 00:43.200
So shall we raise the hand?

00:43.200 --> 00:47.560
Hi, that's good, maybe 25-30%.

00:47.560 --> 00:52.960
I hope you will also learn something new then.

00:52.960 --> 00:59.640
See before we start fully, I just give you a short view on which project context I'm

00:59.640 --> 01:00.640
working.

01:00.640 --> 01:04.880
So as you can see, my project is mainly focusing on embedded IoT Linux at Bosch.

01:04.880 --> 01:09.900
And what you try to do is utilizing a lot of open source projects, see how they fit

01:09.900 --> 01:16.320
into a landscape, and can be of value for very, very different device classes because

01:16.320 --> 01:22.720
normally you don't believe it, but in all of these kind of products you will find Linux

01:22.720 --> 01:27.520
in there are also embedded real-time OS and so on.

01:27.520 --> 01:31.760
So that's all about this part, shortly about myself.

01:31.760 --> 01:33.640
Who am I?

01:33.640 --> 01:36.120
I'm a technical business development manager.

01:36.120 --> 01:41.000
I'm focusing on embedded open source mainly, doing this for the Bosch.

01:41.000 --> 01:42.960
And in parallel, that's also why I'm speaking here.

01:42.960 --> 01:48.120
I'm the technical steering committee chair and working group lead for the Linux Foundation

01:48.120 --> 01:49.880
ELISA project.

01:49.880 --> 01:54.880
I bring a past history of 15 years plus, I guess I started in, we'll see, Ubuntu 6.

01:54.880 --> 02:00.440
10 more or less to set it up on old PCs sharing it to exchange students, so like a distributed

02:00.440 --> 02:02.560
hub of PCs.

02:02.560 --> 02:06.340
And since 10 years I'm more or less in the automotive space with Linux.

02:06.340 --> 02:09.920
We had our first product with 2.6 kernel out.

02:09.920 --> 02:14.000
And yeah, I guess now we can start on the real things.

02:14.000 --> 02:20.760
So if we talk about Linux in safety critical systems, we first need to get an understanding

02:20.760 --> 02:23.120
what a system really means.

02:23.120 --> 02:29.260
And a critical system maybe, first you say assessing whether the system is safe requires

02:29.260 --> 02:31.560
understanding sufficiently.

02:31.560 --> 02:35.920
And you can see here's nothing about Linux in there because a system always goes beyond

02:35.920 --> 02:42.280
the scope of a pure operating system, beyond maybe a single component.

02:42.280 --> 02:48.700
And in this one you have a system context in which Linux plays a role.

02:48.700 --> 02:53.160
And you need to understand the system context and how this is used because if you don't

02:53.160 --> 02:57.800
get the understanding how Linux operates, you cannot see in which components you're

02:57.800 --> 03:01.720
interested and which features you may need or which not.

03:01.720 --> 03:08.240
And then you can evaluate what kind of these features are really relevant for safety.

03:08.240 --> 03:16.080
And while you're doing so, we'll most likely identify gaps that exist and you'll definitely

03:16.080 --> 03:19.300
need more and more work to get this done.

03:19.300 --> 03:27.440
So if you look into the Linux ecosystem, which we have already, there's a good reason also

03:27.440 --> 03:33.680
to take Linux because there is a large variety of devices.

03:33.680 --> 03:34.880
The ecosystem is strong.

03:34.880 --> 03:39.680
You have good tools around this, an incredible amount of hardware support.

03:39.680 --> 03:42.600
It runs on many, many devices.

03:42.600 --> 03:47.600
And also very important, you have a broad set of experts in there.

03:47.600 --> 03:55.320
If you see what's sometimes taken as the benefit of a certified safety critical OS, often it

03:55.320 --> 03:58.040
comes with hard real-time requirements and capabilities.

03:58.040 --> 04:02.120
We know that the pre-empt RT patches are in good shape and in the kernel.

04:02.120 --> 04:08.440
But hard real-time maybe goes even further down the road and then there is a development

04:08.440 --> 04:10.040
process.

04:10.040 --> 04:15.080
And if you see these two sites, if you come and want to address very complex products

04:15.080 --> 04:20.000
like in the automotive field or maybe you can even call your robot vacuum cleaner a

04:20.000 --> 04:24.740
more complex product, then you come from two perspectives.

04:24.740 --> 04:29.480
On the one side, you could go with a traditional small component driven RTOS and you have to

04:29.480 --> 04:34.720
handle all the complexity so you need to have more hardware involved, you have more multi-core

04:34.720 --> 04:37.640
support, not everything works out there.

04:37.640 --> 04:40.560
Or you go the other way around and you come with a Linux where you all have these kind

04:40.560 --> 04:44.760
of things but you need to improve and see what do you do about the development process,

04:44.760 --> 04:47.520
what do you do about the real-time capabilities and so on.

04:47.520 --> 04:52.680
So anyway, when you build a more complex product, you need to find a way to tackle these kind

04:52.680 --> 04:54.680
of challenges.

04:54.680 --> 04:59.000
And also bring the difference closer to each other.

04:59.000 --> 05:03.600
While we were looking at Linux, I'll take the part in the beginning, it's a little bit

05:03.600 --> 05:06.560
like a disclaimer in a little more text.

05:06.560 --> 05:11.000
In this collaboration of Elisa, we said we cannot engineer your system to be safe.

05:11.000 --> 05:16.240
We're talking about functional safety, not about cyber security, but if we just take

05:16.240 --> 05:20.520
this example, there's always a strong risk also that you have security breaches in your

05:20.520 --> 05:21.520
system.

05:21.520 --> 05:23.200
So it's similar here also with safety.

05:23.200 --> 05:28.960
If you build a system, it's still your responsibility for it and just because we provide a little

05:28.960 --> 05:34.440
bit of guidance or engineering principles and so on, it's still in your responsibility

05:34.440 --> 05:37.680
as someone producing a product to make things safe.

05:37.680 --> 05:44.200
And also that way to make sure you really have the prescribed processes in use, use

05:44.200 --> 05:49.680
the methodologies and one of the core questions which typically could come is like, oh, so

05:49.680 --> 05:54.880
you're from Elisa, you make a safe Linux, will you certify a kernel version?

05:54.880 --> 05:58.920
And that's not what will work because we all know you have to move forward.

05:58.920 --> 06:02.320
There's continuous improvement there, sync and vulnerabilities fixed so you need to go

06:02.320 --> 06:06.480
on and this gives an additional challenge which is continuous certification.

06:06.480 --> 06:11.240
So we will definitely not have a version and we will also not certify Linux in this project.

06:11.240 --> 06:14.480
We just give the tools and other elements in there.

06:14.480 --> 06:16.160
So here are the last part of it.

06:16.160 --> 06:20.440
There's still responsibility, legal obligations, liability and so on which is also in your

06:20.440 --> 06:21.440
role.

06:21.440 --> 06:25.800
Nevertheless, we find a good set of partners already which are willing to support this

06:25.800 --> 06:31.960
mission and they subscribe and say we would like to bring the whole thing forward and

06:31.960 --> 06:37.080
seeing this there is the mission statement which we have drawn.

06:37.080 --> 06:38.760
It's lengthy.

06:38.760 --> 06:42.040
Basically you can read that there's set of elements, processes, tools.

06:42.040 --> 06:45.000
It should be amenable to safety certification.

06:45.000 --> 06:49.600
We look into software and documentation development and in the end that we aid the development,

06:49.600 --> 06:59.400
deployment, operation or the adoption of a project into another project.

06:59.400 --> 07:04.400
If you look at this mission, you see basically four key parts which we will also talk later

07:04.400 --> 07:05.400
about.

07:05.400 --> 07:09.960
You have elements and software which is concrete implementation of what we're doing and you

07:09.960 --> 07:12.680
also have the processes.

07:12.680 --> 07:16.480
A development process always falls into safety critical, into security system wherever you

07:16.480 --> 07:18.120
look at.

07:18.120 --> 07:23.240
And if you start to automate things, if you would like to analyze, there's always a strong

07:23.240 --> 07:25.840
involvement of tools in there.

07:25.840 --> 07:32.160
And the last thing is when you do all this kind of work, you need to document it.

07:32.160 --> 07:37.480
And actually there's a lot of documentation work needed in any place.

07:37.480 --> 07:40.880
So how we do all this kind of things?

07:40.880 --> 07:46.120
We take it in our ELISA working groups.

07:46.120 --> 07:50.800
We split this depending on different topics, on different contexts, they're growing depending

07:50.800 --> 07:53.440
on demands of certain sizes reached.

07:53.440 --> 07:55.040
We're extending this.

07:55.040 --> 08:01.960
And if we take a first look, we have a safety architecture work group.

08:01.960 --> 08:08.800
This is a group which actively looks inside the kernel and takes, for example, a watchdog

08:08.800 --> 08:13.620
subsystem because watchdog is one of the crucial elements which we have in use.

08:13.620 --> 08:16.480
It looks what are potential safety related functionality.

08:16.480 --> 08:19.280
Is there something in the kernel which is non-safety related?

08:19.280 --> 08:21.600
How would these kind of things interfere?

08:21.600 --> 08:27.900
And by this, the safety architecture work group does a lot of analysis, try to improve

08:27.900 --> 08:30.820
documentation in the kernel, provide new tools.

08:30.820 --> 08:34.020
So that's a strong set in there.

08:34.020 --> 08:39.120
Basically driven by use cases and demands of products.

08:39.120 --> 08:45.840
And a little more broader approach is brought in by the Linux features.

08:45.840 --> 08:49.580
And actually the full name is Linux features for safety critical systems.

08:49.580 --> 08:54.520
So it's not about generic features, it's about the safety criticality part in there.

08:54.520 --> 08:59.120
You can imagine this a little bit like if you're familiar with security measures like

08:59.120 --> 09:07.360
namespaces or other parts, that we're looking for elements in here which could improve safety.

09:07.360 --> 09:12.720
So which means if you take this special kernel configuration, a feature, turn it off on whatever

09:12.720 --> 09:17.640
you do and say, okay, this will come up as a blueprint, this is something how you better

09:17.640 --> 09:23.120
work with memory, how you not work with memory, all these kind of things are tackled in the

09:23.120 --> 09:24.580
Linux features.

09:24.580 --> 09:30.400
And then it's a nice group because with the results which are in there, if you're already

09:30.400 --> 09:34.600
in a process of enhancing Linux and don't want to wait for all the results of the use

09:34.600 --> 09:39.800
work group and so on, you can have incremental steps here, just take some part of it and

09:39.800 --> 09:44.420
make your system more robust, more dependable and you can also judge it against how does

09:44.420 --> 09:47.600
it compare to security things which you're doing.

09:47.600 --> 09:51.120
And so here, that's the big value of this group.

09:51.120 --> 09:58.800
It's more on a direct use base and serving a long-term safety argumentation, but not

09:58.800 --> 10:00.600
that it's something which develops for years or so.

10:00.600 --> 10:04.400
It's basically assess what's there.

10:04.400 --> 10:07.920
This also the improvement of code quality is very important.

10:07.920 --> 10:11.680
We have tools investigation code improvement work group.

10:11.680 --> 10:16.320
The code improvements could be, for example, done with doing fuzzy testing on the kernel

10:16.320 --> 10:24.400
using tools like CodeChecker or Syscaller and then bring them also into a set up where

10:24.400 --> 10:30.600
we have a server kind of a CI which runs on Linux Next or whatever kernel configuration

10:30.600 --> 10:36.080
to identify issues to get the kernel more robust, more dependable, reliable and serve

10:36.080 --> 10:40.520
also the argumentation about the quality of the kernel.

10:40.520 --> 10:45.280
And what was also on the right side in some of the challenges part was on the engineering

10:45.280 --> 10:49.720
process and as you know, there are rigorous methods within the kernel development.

10:49.720 --> 10:55.600
So there are a lot of reviews, patches are rejected and you see that there's strong demand

10:55.600 --> 11:02.320
from traditional project management when it comes to safety products and not every process

11:02.320 --> 11:04.240
complies with it directly.

11:04.240 --> 11:10.440
So we need to find an argumentation how is there an equivalence to the open source development

11:10.440 --> 11:18.360
process compared to what, for example, an ISO 26262 requests for automotive products.

11:18.360 --> 11:23.560
On top, what is very interesting to understand here is also that if we look into open source,

11:23.560 --> 11:30.000
you basically cannot easily buy a maintainer or developer there.

11:30.000 --> 11:38.680
So you cannot buy features directly or so you get more an unbiased view or maybe a personal

11:38.680 --> 11:44.720
view but a maintainer who is really committed for the component for this power subsystem

11:44.720 --> 11:46.040
of the kernel and so on.

11:46.040 --> 11:50.600
And with this strong commitment, for example, you already fulfilled a little bit of independent

11:50.600 --> 11:56.040
view because in safety systems, whenever it comes later on, the developer needs to commit

11:56.040 --> 11:59.400
to what has been done but of course it's not written down.

11:59.400 --> 12:00.400
It's not written down.

12:00.400 --> 12:02.360
The maintainer fully commits to whatever it does.

12:02.360 --> 12:08.380
So this is some part, for example, where you can start argumenting on it.

12:08.380 --> 12:12.840
And as the different elements need to get somewhere and need to be visible, we figured

12:12.840 --> 12:17.120
this out because we were running quite in parallel with different streams on this but

12:17.120 --> 12:21.320
never brought this forward, we came up with the systems work group and the system work

12:21.320 --> 12:26.700
group actually should take all these different elements, bring them together, works cross-functional

12:26.700 --> 12:31.600
and maybe even cross-project and combine the elements.

12:31.600 --> 12:35.560
In order to tailor the system properly, we have vertical use cases.

12:35.560 --> 12:41.320
A newly created one, so there's not much information in this presentation about the aerospace work

12:41.320 --> 12:42.760
group yet.

12:42.760 --> 12:46.280
The overall idea is it should address everything which flies and you know that in aerospace

12:46.280 --> 12:51.720
there are many safety standards, safety integrity standards, various levels in there.

12:51.720 --> 12:55.840
What you may not know and that's at least what we have heard so far was there is already

12:55.840 --> 13:01.240
Linux in use and also in certified product there's Linux use but it's only on a very

13:01.240 --> 13:09.520
low safety level so it's not on a very higher upper level of safety certification.

13:09.520 --> 13:13.800
What's an obvious thing if you see the member there is like 50 to 60 percent is from the

13:13.800 --> 13:19.620
field of automotive and therefore we have an automotive use case in there.

13:19.620 --> 13:24.620
If you drive a car, if you have a scooter or whatever you may see sometimes that there

13:24.620 --> 13:29.960
is an oil pressure sign, oil temperature sign, check engine, whatever basically when you

13:29.960 --> 13:34.200
put on the ignition you can see all these little LEDs and this is also the use case

13:34.200 --> 13:39.400
which we are using in the automotive work group.

13:39.400 --> 13:43.800
Basically what we said digital or cluster, instrument cluster, the speedometer, everything

13:43.800 --> 13:48.720
becomes digital, everyone has a display in your cars and that gives a good chance because

13:48.720 --> 13:55.040
there are more complex system in there, a lot of rendering, graphics rendering involved

13:55.040 --> 13:57.320
and this is actually safety critical function.

13:57.320 --> 14:02.600
Even if you are in driving or in rear gear mode this has to be properly displayed and

14:02.600 --> 14:05.000
it has a safety criticality assigned.

14:05.000 --> 14:09.960
Because showing the check engine part is a safety criticality.

14:09.960 --> 14:18.000
The third group which we have is from the medical devices and here this is something

14:18.000 --> 14:22.360
from a completely different perspective while automotive has the commercial element in mind

14:22.360 --> 14:27.960
maybe want to have cost savings driving topics forward with the open APS, APS the artificial

14:27.960 --> 14:30.840
pancreas system.

14:30.840 --> 14:35.840
It's driven by open source so there were open standards, chances to interact with your insulin

14:35.840 --> 14:39.680
pump and you see that this can become very uncomfortable.

14:39.680 --> 14:43.760
There's a nice TED talk from Dan M. Lewis, I recommend this, I put the link also in the

14:43.760 --> 14:46.400
slide that you can download them and check it.

14:46.400 --> 14:52.480
You can see that you basically need to track your glucose level and certain dose of your

14:52.480 --> 14:58.040
insulin depending on your glucose level and this is also with warnings and so on and it's

14:58.040 --> 15:05.240
very basically event triggered so you see the blood pressure goes up so you set the

15:05.240 --> 15:10.680
dose it has a certain delay until it reacts and what came in here was to add the raspberry

15:10.680 --> 15:17.360
pie in the middle writing some scripting around it getting it stabilized and create a product

15:17.360 --> 15:18.520
out of it.

15:18.520 --> 15:24.560
And why I want to stress this is this is not to any IEC ISO certification done, it was

15:24.560 --> 15:30.520
done by an open source engineer, started this project and if you download this, if you use

15:30.520 --> 15:37.080
it, you use it on your own risk and therefore the work of Elisa was basically also the first

15:37.080 --> 15:40.840
use case we put directly in the beginning of the workshop to say let's take a deeper

15:40.840 --> 15:43.080
look let's analyze what's in there.

15:43.080 --> 15:47.680
It's running for thousands of people, it has never been certified, they are very happy

15:47.680 --> 15:52.740
and you see it's increasing quality of their life but it's not certified.

15:52.740 --> 15:56.760
This is safety critical product not certified and we are not targeting to do the direct

15:56.760 --> 15:58.440
certification of it.

15:58.440 --> 16:02.520
In the first step we are looking into the different levels of the analysis, see what

16:02.520 --> 16:06.640
is involved, what workloads are in there, is there something which could make this fail,

16:06.640 --> 16:11.720
is there a risk in there, what potentially could go wrong here and this is basically

16:11.720 --> 16:17.600
the completion of the use cases and I've drawn this basically together as you can see an

16:17.600 --> 16:23.400
inner part which is very common for almost all the different projects which get fed then

16:23.400 --> 16:28.480
by the use cases feeding and say this is how you need to configure, how you need to specialize

16:28.480 --> 16:34.320
because you cannot create a full safety critical item completely out of the context, you cannot

16:34.320 --> 16:39.880
have this generic safety argumentation, you always need to judge it towards assumed context

16:39.880 --> 16:44.160
and this then turns into Elisa deliverables.

16:44.160 --> 16:49.840
A little bit on another view here you can see also an exemplary system architecture

16:49.840 --> 16:54.320
mainly how we triggered it in the systems work group.

16:54.320 --> 16:59.760
It's not only Linux involved in these latest products so if you come and you of course

16:59.760 --> 17:04.840
in the medical devices open APS system it's a pure raspberry on it.

17:04.840 --> 17:08.840
There is not the direct archers involved if you don't treat the sensor or the insulin

17:08.840 --> 17:15.080
pump as the archers next to it but if you come to more complex products you always need

17:15.080 --> 17:20.360
to face that there are archers involved, there are microcontroller, microprocesses, container

17:20.360 --> 17:25.240
technology come into picture, everybody talks about containers and embedded these days and

17:25.240 --> 17:31.160
also virtualization technologies like Big Zen or the KVM so this is something which

17:31.160 --> 17:39.040
gets in there easily and for this part if you see on the working group site this Linux

17:39.040 --> 17:44.080
features, architecture, code improvement this directly go into the Linux work.

17:44.080 --> 17:50.280
So the main outcome of this is for the Linux ecosystem, the Linux kernel and a lot of this

17:50.280 --> 17:58.080
work is also not directly related to the hypervisor or the archers but there are things also

17:58.080 --> 18:01.540
which going a little bit further like the tools and the engineering process things which

18:01.540 --> 18:07.320
are coming out there may also have a good value for other products which you build on

18:07.320 --> 18:14.120
so if you have a Yachta involved in there you can build a file also with a meter layer

18:14.120 --> 18:19.040
and then it may be good to have this tooling parts in there or also code improvements

18:19.040 --> 18:25.280
can come into picture there, certain tools which we make use of in your CI for testing,

18:25.280 --> 18:30.040
QA system or others this is an element to be considered here and lastly the use cases

18:30.040 --> 18:35.400
to further completeness they basically tailor down this system to whatever you need so for

18:35.400 --> 18:40.320
example in the automotive work we for now tailor the system down for getting a better

18:40.320 --> 18:44.600
Linux kernel understanding and we get rid of the endear originally from the container

18:44.600 --> 18:50.600
the virtualization the archers but we know once we have solved some parts of our work

18:50.600 --> 18:56.880
we need to get the system context and the system context involve all these kind of things

18:56.880 --> 19:03.480
right and saying this we also do a certain outreach to other projects so I put in the

19:03.480 --> 19:09.560
Zephyr community we have the automotive Linux which is already in there there could be other

19:09.560 --> 19:15.120
Linux versions and also strong involvement of the Yachta project and said I didn't know

19:15.120 --> 19:20.960
where to put the SPDX properly on this picture but we see it later on how we interact so

19:20.960 --> 19:27.600
far we already are in discussions with Zephyr and Xen we have weekly meetings also where

19:27.600 --> 19:33.800
Xen members pop up where Zephyr is present with some representative and we saw that these

19:33.800 --> 19:38.920
are safety critical open source projects so they basically save the share the same burden

19:38.920 --> 19:43.400
they need to show how the development process is done how do we guarantee certain quality

19:43.400 --> 19:47.120
levels where is the testing done where are the requirements management and the trace

19:47.120 --> 19:53.640
abilities to everything this is something which pops in there quite good if we take

19:53.640 --> 19:58.760
this architecture and as I'm coming from the automotive part we have different projects

19:58.760 --> 20:04.080
which share these architectural sorts and there is a large group on the Eclipse SDV

20:04.080 --> 20:07.920
project there is a SOF initiative from ARM basically having similar members like the

20:07.920 --> 20:14.240
SDV and then we have a large automotive grade Linux which also is so nice to provide us

20:14.240 --> 20:18.520
with the reference implementation for the automotive use case so they share very similar

20:18.520 --> 20:25.760
architectures lastly not directly related to safety but having safety considerations

20:25.760 --> 20:30.800
in there and being part of the system is the Yachta project for some building part to get

20:30.800 --> 20:36.240
this into a CI reproducible here for example the S-bomb generation suddenly plays into

20:36.240 --> 20:41.160
the game which you can do with the Yachta project and while we were discussing we figured

20:41.160 --> 20:48.440
out that there is also like data needed into system S-bomb and for this we reached out

20:48.440 --> 20:55.480
to the SPDX and there is actually SPDX special interest group on FUSA meeting weekly to extend

20:55.480 --> 21:02.680
this scope there is also later on talk where parts of it get presented why do we do all

21:02.680 --> 21:07.200
this I like this statement from George Bernard Shaw he said if I have an apple and you have

21:07.200 --> 21:11.000
an apple if we exchange the apple we have still one apple but if I have an idea and

21:11.000 --> 21:15.680
you have an idea and we exchange these ideas and we have two ideas and that is basically

21:15.680 --> 21:18.960
where it goes about we need to get a good understanding we need to bring the things

21:18.960 --> 21:26.320
together and by this we of course need to look into certain activities so now we come

21:26.320 --> 21:34.720
into the part what the different work groups do and if we check for example the elements

21:34.720 --> 21:39.640
process tools documentation not every work group acts in the same amount as the others

21:39.640 --> 21:46.200
do so just put some bubbles in here to see where our mainly our work is going so we have

21:46.200 --> 21:49.320
a lot of things of course on the software part that people are interested in the Linux

21:49.320 --> 21:55.200
kernel and the process part is maybe not so strong because it needs to be centralized

21:55.200 --> 22:00.240
and the usage of this process goes into the other work groups so the OSAP the medical

22:00.240 --> 22:04.800
part architecture a little bit also they work on these kind of processes and bring this

22:04.800 --> 22:11.240
into the other work groups tools seem to be pop out on multiple work groups because here

22:11.240 --> 22:15.800
tools are handy tools pop up we bring it into the into repo you might tell about it get

22:15.800 --> 22:21.160
it used and if we want to go into continuous certification at some point of time there

22:21.160 --> 22:25.600
will be a need of having a lot of tool support in there and basically every work group does

22:25.600 --> 22:31.320
documentation I want to give you some examples on this from the process perspective there

22:31.320 --> 22:36.040
is a system theoretic process analysis that the first topic I will tell a little bit more

22:36.040 --> 22:43.040
about so it's the dry stuff about the systems architecture it's not the code level on this

22:43.040 --> 22:47.400
but we figured out when you do this kind of STPA analysis at some point of time you reach

22:47.400 --> 22:51.960
also a level where you need to understand more about the kernel so I'll tell you something

22:51.960 --> 22:57.480
a little bit about the workload tracing which we have done and also here supporting from

22:57.480 --> 23:01.880
the another work group here of a call tree tool that's self not in basically utilizing

23:01.880 --> 23:08.000
tools and approving things but writing something also from scratch and this all then later

23:08.000 --> 23:14.760
on fits into the meta ELISA which is basically the Yachtel layer for the automotive use case

23:14.760 --> 23:19.920
enhancing the automotive grade Linux demo alright we also did something without modification

23:19.920 --> 23:24.080
like the code checker implementation syscall I will not tell that much about it but just

23:24.080 --> 23:30.600
to give some examples of our work on and all our information is public so we are quite

23:30.600 --> 23:35.960
spread it up to GitHub part there's some parts on G drive we do regular blog posts and have

23:35.960 --> 23:39.960
some white papers published so it always depends on whom do you want to have as audience or

23:39.960 --> 23:47.280
readers so we share this is also YouTube channel but I don't judge this as documentation okay

23:47.280 --> 23:56.920
as at first we look into STPA so STPA stands for system theoretic process analysis what's

23:56.920 --> 24:01.640
interesting to see is if you're coming from safety criticality maybe automotive you know

24:01.640 --> 24:09.040
hazard analysis risk assessment FMAs you may grow with watch spreadsheets drawing cases

24:09.040 --> 24:13.640
checking your API interfaces and all these kind of things and the nice thing about the

24:13.640 --> 24:18.520
STPA is you go a little more in a graphical approach like on the left part of the picture

24:18.520 --> 24:25.480
some basics here it's still relatively new I say this because the old analysis part come

24:25.480 --> 24:31.240
from microcontroller worlds up down to the 60 70 I guess 70s is more or less so there

24:31.240 --> 24:35.080
was a long time where a lot of these analysis techniques came in and they haven't been much

24:35.080 --> 24:40.400
improved but the systems which have been a lot of analyzed have increased complexity

24:40.400 --> 24:47.640
and this is something which need to be considered and this system theoretic process on STPA is

24:47.640 --> 24:54.800
able to handle very complex systems the reason for this is that you can start from a quite

24:54.800 --> 24:59.240
broad view and maybe you don't know all the elements so you have something you just get

24:59.240 --> 25:02.880
a name for it you don't know how it really looks like and you have another blob where

25:02.880 --> 25:09.080
you have more details so you can connect all these different blocks and these analysis

25:09.080 --> 25:14.640
will still survive even if you know not the whole block of some specific part yet and

25:14.640 --> 25:19.280
then you will go in a very iterative approach and just go there step by step you figure

25:19.280 --> 25:22.960
something out you go to one level down going deeper into the system figure out that your

25:22.960 --> 25:28.600
assumption didn't hold true so you do these kind of things for the analysis and what's

25:28.600 --> 25:32.920
also good if you have certain analysis it basically looks on an API level it looks under

25:32.920 --> 25:37.880
definitions or so but this one explicitly goes on the system context and it includes

25:37.880 --> 25:45.880
human interaction the human operation and this is also what's not there for other parts

25:45.880 --> 25:48.880
in parallel you directly get a good while you do the analysis you already improve your

25:48.880 --> 25:53.520
documentation you get a good standard standing of the system and you can even if you are

25:53.520 --> 25:58.960
in a QA department so you can even integrate it properly with existing systems model based

25:58.960 --> 26:06.160
approaches the principles of it to get the very very high level it's quite easy there

26:06.160 --> 26:14.520
are four key elements there is the controller on top this one sends a control action to

26:14.520 --> 26:21.680
a controlled process and this provides typically a feedback well that's not enough in the end

26:21.680 --> 26:26.800
there's also important to know that the controlled process as such may also control something

26:26.800 --> 26:33.120
else so that's how things get more grown up and the question now in the end is what could

26:33.120 --> 26:39.680
go wrong what are unsafe control actions you can use these methodology for maybe understanding

26:39.680 --> 26:45.480
how your water pipes flow in a building or how people walk through certain so you can

26:45.480 --> 26:50.560
always attach this to whatever use case you like you always the same approach but for

26:50.560 --> 26:56.600
our case and the main idea of it was for safety criticality for risk assessments and that's

26:56.600 --> 27:01.920
why we say let's look under unsafe control action a little bit of warning and the next

27:01.920 --> 27:08.440
slide is in a way that you will not read it's level one analysis of this open APS use case

27:08.440 --> 27:13.320
and well yeah that's how it looks like in the middle there's the open APS system you

27:13.320 --> 27:19.400
have a view from the top level so it's a developer view it's not the full user view here so you

27:19.400 --> 27:24.120
have infrastructure people if algorithm developer you release the software then they come to

27:24.120 --> 27:30.480
human operator who uses the software installs it further on this goes in the system we don't

27:30.480 --> 27:34.320
know yet what the system is this is what I mean with the very first level you don't care if

27:34.320 --> 27:39.720
it's the Linux system or whatever is an easy just so this is my open APS system and when you

27:39.720 --> 27:45.040
have understood what is your critical part in there how the system context looks like you

27:45.040 --> 27:51.920
may go into the next level and now we zoom in into this open APS system and go on the next level

27:51.920 --> 27:55.880
and in this you see there is an actually a Raspberry Pi involved we know this from the

27:55.880 --> 28:01.960
hardware part and the OS and there's a Raspbian you have an open APS toolkit involved the

28:01.960 --> 28:07.720
actual algorithm this may control the insulin pump the night scout part is also an edge

28:07.720 --> 28:12.960
external command you see all these kind of things and the work group has been on this

28:12.960 --> 28:18.760
level for some time and then try to write down the next level going deeper and then

28:18.760 --> 28:25.960
actually needed support so that's where workload tracing came into picture we used the

28:25.960 --> 28:30.160
mentorship project here and had support so someone fully concentrating on the activity

28:30.160 --> 28:34.960
of workload tracing that's another little table which you can only read therefore the

28:34.960 --> 28:41.960
main things to be known is we use S trace and C scope as the main tools for the analysis

28:41.960 --> 28:46.320
but there are stressors in there like stress and G, Paks, TES and other parts this may depend

28:46.320 --> 28:50.960
on your workload which you use once you are challenged with the system and in this one

28:50.960 --> 28:56.000
the information which is coming in there now our system calls how often are these system

28:56.000 --> 29:00.200
calls coming in the frequency of it which subsystem does they belong to that you know

29:00.200 --> 29:04.720
okay where is my critical parts where is the system call entry point and by this you can

29:04.720 --> 29:09.600
more deep dive into the different system and this causes a lot of refinement into the upper

29:09.600 --> 29:13.200
layers again because now you have iteration and see maybe you have a wrong assumption

29:13.200 --> 29:18.880
but still before everything was correct as you understood now you just improve it related

29:18.880 --> 29:25.240
to this cause of the call tree tool that's something basically rewritten and own part

29:25.240 --> 29:31.920
so the idea was to see here is a system call what else of course what are the ways how

29:31.920 --> 29:36.280
to interact there how to visualize things because if you just see something and grow

29:36.280 --> 29:41.840
through the code you cannot really grab the complexity and this was just the first shots

29:41.840 --> 29:46.520
also here it's not worth the reason but you can see there is a file system part and the

29:46.520 --> 29:52.480
very interesting part is this is quite a static thing so you will see all the potential options

29:52.480 --> 29:56.880
while in the previous view if you have a call if you have the workload tracing you basically

29:56.880 --> 30:01.960
see where has the pass gone but you don't directly uncover the untraced passes and here

30:01.960 --> 30:05.440
you see all the passes but you have the part chance that you meet something completely

30:05.440 --> 30:09.760
irrelevant because you're not on this with your workload and this is a compromise or

30:09.760 --> 30:15.120
complementing element of this and well you get a good insights on the kernel construction

30:15.120 --> 30:22.840
and it can help you to analyze more workload in there right we bring all these things together

30:22.840 --> 30:29.840
in the meta-aliasing instrument cluster it looks like the AGL instrument cluster we saw

30:29.840 --> 30:35.840
this picture before I highlighted the change which we did we write danger in there and

30:35.840 --> 30:41.200
this made us the whole thing safe which well is of course not the full story the full story

30:41.200 --> 30:47.920
is that we just needed a use case to which we can analyze which has safety relevance and

30:47.920 --> 30:52.960
it was a good QT based demo so we could make use of it it was running on QM0.

30:52.960 --> 30:58.760
The kernel has a little drawbacks on this I'll come to this very soon but with this

30:58.760 --> 31:05.760
you can start analysis tracing workloads and also add a watchtruck mechanism yeah watchtruck

31:06.640 --> 31:13.400
would be the next part of it basically what we like use of in a lot of concept is an external

31:13.400 --> 31:18.200
watchtruck even if you don't see it directly in the open APS system for example there's

31:18.200 --> 31:24.480
still an external monitoring involved which gives emergency data if the Raspberry Pi would

31:24.480 --> 31:28.000
do something wrong in the one or the other direction not that it happens but there is

31:28.000 --> 31:33.600
a monitor there which controls which will give a beep or so and inform the user similar

31:33.600 --> 31:40.160
you do it in the automotive case where you have this telltale environment and you want

31:40.160 --> 31:47.160
to have something which is traced in your workload so yeah this challenge response watchtruck

31:47.840 --> 31:52.480
challenge response make basically it's not simply looking for something but it gives

31:52.480 --> 31:58.120
a little challenge to the workload while the workload process process other parts and it

31:58.120 --> 32:03.200
gets a response in there so that you know okay yeah that's really alive and it's not

32:03.200 --> 32:09.600
just replying and it's the demand here comes basically that we for a lot of use cases cannot

32:09.600 --> 32:15.200
fully guarantee that the workload comes in the proper time that a process doesn't hang

32:15.200 --> 32:19.440
and this release a lot of responsibility from you by checking this was an external

32:19.440 --> 32:24.120
workouts and it's mainly looking into the safety critical workload I know there are

32:24.120 --> 32:29.000
ideas to say well let's put this watchtruck thing and let's watch everything in there

32:29.000 --> 32:32.560
this typically doesn't work out so you really concentrate on the things and say this is

32:32.560 --> 32:39.560
safety critical and all the other parts are related to user experience so if you're drawing

32:40.680 --> 32:45.440
rendering engine it and God's lucky and you see a lot of delay and touch screen or whatever

32:45.440 --> 32:50.160
that's nothing which you want to experience from a user perspective but as long as the

32:50.160 --> 32:55.080
warning signs come in time and improper from safety perspective this is all fine so it's

32:55.080 --> 32:59.560
good to split up here between what is the intended functionality what is the safety

32:59.560 --> 33:05.040
criticality of it what do I need to monitor and what not and for this this is just the

33:05.040 --> 33:09.680
safety net in there here I said this is used widely in automotive there are other industries

33:09.680 --> 33:15.080
basically always have your safety net somewhere around which monitor sinks and what we try

33:15.080 --> 33:21.800
to do is we want to get more responsibility to Linux and by this you can start where with

33:21.800 --> 33:28.800
a lot of elements in this safety critical part and yeah so that's the main thing on

33:29.120 --> 33:36.120
this part and the last message is very important for me it's not that you consider your watchtruck

33:37.960 --> 33:44.400
in this design as being there or need to be there you basically start creating your system

33:44.400 --> 33:48.240
that you never need to trigger the watchtruck because you don't want this this is just your

33:48.240 --> 33:54.120
system functionality and it has to work and in best case this gets not triggered into

33:54.120 --> 34:01.120
a safe state for a total use case for example this could mean that the screen is turned

34:01.920 --> 34:05.840
off or that you do a restart basically you would maybe make a black screen or so that

34:05.840 --> 34:10.600
people directly recognize the driver oh it's not going right here that could be also be

34:10.600 --> 34:14.640
be a warning message or what else but depending on what's your safety passes you need to make

34:14.640 --> 34:18.840
sure that this is really also triggered so their safety criticality comes in picture

34:18.840 --> 34:25.840
again I prepared a one minute video but I never know how these kind of things properly

34:26.240 --> 34:33.240
work if you do a demonstration so I just put the YouTube link on the material and if you

34:33.280 --> 34:38.680
are brave enough or even not I guess it's nice a straightforward thing we have a good

34:38.680 --> 34:45.680
documentation how to experience this demo because when we started with the Elisa work

34:45.680 --> 34:52.080
we saw that we basically start building our topics from scratch we documented everything

34:52.080 --> 34:56.840
right good as best on our standing and then someone came and said well but I'm not using

34:56.840 --> 35:02.640
Ubuntu I'm using an open sousa tumbleweed and we figure oh we need a little bit more

35:02.640 --> 35:05.880
maybe that we have more environment set up that people can reproduce things so we came

35:05.880 --> 35:11.440
up with a docker container which basically gets the things packages installed which you

35:11.440 --> 35:15.720
need the right version of it to make it easier for people then the next thing we observed

35:15.720 --> 35:21.720
was oh okay the people do a yukto build yukto consumes a lot of space and a lot of compilation

35:21.720 --> 35:27.280
maybe the cache binaries would be a good option and so we also enabled the estate in there

35:27.280 --> 35:32.240
so that you cannot can now build like in the parts which are still buildable or needed

35:32.240 --> 35:37.760
to be built in a roughly 40 minutes on a poor laptop it's basically depends on your download

35:37.760 --> 35:43.120
speed also right it's quite amount of download which you typically have with the yukto build

35:43.120 --> 35:46.840
on long one we also see if we can extend the two other systems that we are maybe also Debian

35:46.840 --> 35:51.160
version of it or so but for now it's the yukto star the last thing which we figured out there

35:51.160 --> 35:55.800
are also use cases maybe where you want to deep dive into the system and this would be

35:55.800 --> 35:58.920
the complementing part to this demo if you don't want to see the video and you want to

35:58.920 --> 36:06.040
just try it out directly if you have qm on your system installed just download the binaries

36:06.040 --> 36:11.680
directly they get built nightly so really nightly so every night you get a new one it

36:11.680 --> 36:16.000
always goes to the latest version of the AGL with a little bit of problems last week but

36:16.000 --> 36:20.320
it's up and running again does a build check does a boot check so that you can really experience

36:20.320 --> 36:25.240
it and it basically uses the instructions which are written down in the github readme

36:25.240 --> 36:34.960
markdown file right yeah this is about this some next steps the stpa is continued so we're

36:34.960 --> 36:40.960
getting into deeper levels of it we need to see that we get the workload tracing properly

36:40.960 --> 36:45.280
reflected in the different diagrams this was heavily driven by the medical devices work

36:45.280 --> 36:50.560
with the automotive has not used the workload tracing that much but we bring this in there

36:50.560 --> 36:58.560
the call tree also got extended with another tool which was uh ks called ks naf does certain

36:58.560 --> 37:03.600
kernel static navigation tool so to get a better analysis on better view on this um

37:03.600 --> 37:07.440
therefore the meta eliza as i was talking about qm where everybody wants to see real

37:07.440 --> 37:13.240
hardware so we also are on a pass on bringing this on an arm based hardware for now so we

37:13.240 --> 37:18.200
have the x86 in qm with simulation and an arm underneath is mainly driven by systems

37:18.200 --> 37:23.720
work group and what is very important so far this display checking in there so we are not

37:23.720 --> 37:27.080
normally you would check what the rendering of a telltale but there's so many different

37:27.080 --> 37:31.760
kind of implementation so that we mock a lot of things there and we want to improve this

37:31.760 --> 37:37.560
so that we have proper display checks and also a lot of monitoring this is basically

37:37.560 --> 37:45.080
on the four topics which we have seen uh additionally we work on the system as bomb we enabled the

37:45.080 --> 37:51.520
s bomb part for generating material in the demo we want to improve kernel configuration

37:51.520 --> 37:58.480
trimmed on the size of the image then uh have the rt documentation updated have more complex

37:58.480 --> 38:06.080
cluster demo involved and that's mainly it so summarizing what you have seen uh we talked

38:06.080 --> 38:10.720
about the challenges in the beginning basically what a difference between the traditional

38:10.720 --> 38:14.600
safety critical arthas and the new one what's this is what the collaboration can and what

38:14.600 --> 38:21.080
cannot achieve you heard about the goals and the way of the strategy which tools we analyzed

38:21.080 --> 38:26.560
or which which elements we looked into and also then uh you could see how the different

38:26.560 --> 38:30.980
work groups interacted how they put into a system how we outreach to wider community

38:30.980 --> 38:36.600
parts i talk about the contributions of the different work groups what is shared with

38:36.600 --> 38:43.600
the community also in form of usable use case downloadable then you could see methodologies

38:43.600 --> 38:50.960
of our stpa workload tracing and lastly uh we got a little bit of view on what's coming

38:50.960 --> 39:08.080
next and i guess we're good from the time from the questioning part

39:08.080 --> 39:21.280
does anyone have a question there's one above coming down you have a question okay

39:21.280 --> 39:27.520
thanks for the interesting talk uh you mentioned certification uh as one big problem so uh

39:27.520 --> 39:35.720
where uh can we improve things so that certification processes become more open source friendly

39:35.720 --> 39:41.520
and open source software becomes more certification friendly so what has to be done or can be

39:41.520 --> 39:47.400
done there yeah i i guess some part from the certificate so you're asking how can uh open

39:47.400 --> 39:52.720
source and certification come closer to each other from both sides right and um one thing

39:52.720 --> 39:59.400
could be for example done in the documentation in improving tracing down having tools supporting

39:59.400 --> 40:04.280
how do certain features get from the mailing list into the system if there's a test around

40:04.280 --> 40:10.440
it so this gives a lot of confidence and trust in what it's doing um from another perspective

40:10.440 --> 40:15.680
there's not much in the safety integrity standards which allow the usage of pre-existing software

40:15.680 --> 40:20.960
and so for this there's also an iso pass currently which allows more usage i mean depends on

40:20.960 --> 40:25.800
the safety standard which you're in if you're some relaxed medical standards it's less requirements

40:25.800 --> 40:31.800
on this but for automotive it's very strong and prohibitive on this um so i would say

40:31.800 --> 40:37.400
doing careful work and explaining design decisions and so on making this visible and more structured

40:37.400 --> 40:41.840
having maybe centralized bug tracking and so on this this can help a lot from this perspective

40:41.840 --> 40:53.160
it will be good for the certification authorities and we do a lot of clearance also yeah if i

40:53.160 --> 40:58.240
heard you correctly said from supporting the um assessments and authorities in there we

40:58.240 --> 41:04.600
also have uh company support where we really are in the working groups and get from certification

41:04.600 --> 41:08.160
authorities input in the continuous work which we are doing so they are directly working

41:08.160 --> 41:17.720
within the work groups as well yeah chin as well thank you very much for your talk um

41:17.720 --> 41:21.480
i had a i had a just uh quick question i want to get a feel for what your opinion on on

41:21.480 --> 41:29.200
this is um do you think there's space as um a certification for for something like linux

41:29.200 --> 41:33.240
improves can you move the mic a little closer because it's for me i hear the people louder

41:33.240 --> 41:41.320
leaving so just a little sorry yeah oh oh wow yeah see the difference um as as um as

41:41.320 --> 41:47.600
uh process for certification and for validation of uh linux kind of improve and and change

41:47.600 --> 41:52.040
over time do you think there's ever going to be space for for linux to be used in in

41:52.040 --> 41:57.440
kind of a critical component on vehicles or do you think that space is completely reserved

41:57.440 --> 42:04.120
for for something that's actually using real time uh the main part which i heard was if

42:04.120 --> 42:10.200
there's i got the real time part in the end yeah like do you think there is it's already

42:10.200 --> 42:27.960
there fair thank you okay was there someone else have a question you have a question yeah

42:27.960 --> 42:34.320
so what is the place for linux itself in um let's say what does safety integrate and to

42:34.320 --> 42:39.200
integrate the level of linux itself in this model because if i take let's say i saw two

42:39.200 --> 42:45.960
six two six two um there's a v model requirements for development this but linux already has

42:45.960 --> 42:52.960
source code there are no you know there is no coverage this test with all these memcdc

42:52.960 --> 43:00.960
coverage etc etc so what's the place of linux and how to keep it maintain it without forking

43:00.960 --> 43:06.160
yeah so um you say where's the space and the place of linux if you see the v model for

43:06.160 --> 43:09.800
example the iso two six two six two where does things fit in there a lot of demands

43:09.800 --> 43:19.080
like uh car coverage parts tracing and so on so what you can see is that um first of

43:19.080 --> 43:23.520
all speaking about a level you will not directly go to an azl d level which puts much more

43:23.520 --> 43:28.480
requirement on the tools that's for sure so you should start on the lower azl ab level

43:28.480 --> 43:33.320
that's also what we did uh we relaxed some part also for automotive cases let's don't

43:33.320 --> 43:37.800
start with two complex parts maybe get a real-time criticality out there because then you have

43:37.800 --> 43:48.080
to review much more parts and um so the space which i see is that you should argue equivalence

43:48.080 --> 43:53.160
for certain things that you are in close collaboration with successors and explain how things are

43:53.160 --> 43:59.880
done because when the iso was originally prepared it was not considering a complex system as

43:59.880 --> 44:04.680
linux being in use and the large amount of pre-existing software so from this if you

44:04.680 --> 44:09.400
are in an assessment if you are there if you can show and show the credibility by requirements

44:09.400 --> 44:16.440
work by good concepts you may in the first and come up which to system which is arguably

44:16.440 --> 44:24.280
safe but not directly certifiable to your iso two six two part but uh this already showed

44:24.280 --> 44:29.440
you the perfect discussion room also right because then you see well you cannot tell

44:29.440 --> 44:34.640
me this is not working but you still say it's not certifiable and then you see also the

44:34.640 --> 44:39.440
glitch of the standard and if you reach this point you have a lot of good support when

44:39.440 --> 44:43.480
you go with certification authorities early if you have internal assessments and you can

44:43.480 --> 44:48.840
judge it and in the end it's also your responsibility where you say oh i argue foreign equivalence

44:48.840 --> 44:53.720
because it's not saying in this book you have to it says recommended highly recommended

44:53.720 --> 44:59.000
leaving you also trace for showing equivalence to this model i'm using this and on top i'm

44:59.000 --> 45:03.120
adding this and by this you can get an iron and of course getting feedback from your developers

45:03.120 --> 45:10.040
that the work which you're doing also into kernel mainline and so on so maybe also it's

45:10.040 --> 45:17.920
possible to somehow affect how iso two six two six two is developed because it's a bit

45:17.920 --> 45:26.280
outdated in some way some of the members in elisa have people in these iso committees

45:26.280 --> 45:30.920
that are basically taking it back into that direction for the future revs of the standards

45:30.920 --> 45:34.240
i we don't have visibility at least i don't because i'm not in those committees but we

45:34.240 --> 45:39.560
do know that um some of those member companies you saw up there um are there and they are

45:39.560 --> 45:49.820
advocating for things to work a little bit better in future revs okay is there anyone

45:49.820 --> 45:57.760
else who has a question um okay well thank you for your talk

45:57.760 --> 46:24.160
uh

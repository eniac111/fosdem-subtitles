WEBVTT

00:00.000 --> 00:11.480
Welcome everybody, my name is Hannes JÃ¶hnila, I've worked with OpenTree Planner, which

00:11.480 --> 00:18.720
is an open source journey planner, quite similar to the MOTUS project for almost 10 years now,

00:18.720 --> 00:24.960
a bit on and off, so with other projects as well, and for one kind of different organizations,

00:24.960 --> 00:33.120
both in Finland and now at the moment in Norway. But before we talk about the project itself,

00:33.120 --> 00:37.960
I would like to say a couple of words about Entour. So I don't think Entour is as famous

00:37.960 --> 00:42.080
company as some of the other ones that we have today, but it's actually, it used to

00:42.080 --> 00:49.480
be a part of the Norwegian State Railway Company, and it was carved out when competition was

00:49.480 --> 00:54.880
introduced in the Norwegian railway system. And nowadays it takes care of all ticketing,

00:54.880 --> 01:02.840
all public transit timetable information in the whole country of Norway. And we use almost

01:02.840 --> 01:10.600
exclusively open source software, at least in our team, which handles the incoming transit

01:10.600 --> 01:17.200
data, all the journey planning, all the APIs that we provide for all of the railway companies,

01:17.200 --> 01:23.240
all of the other hobbyists that want to have a journey planner API or like a screen at

01:23.240 --> 01:30.400
their home, any kind of API we can provide that. And here in the middle is OpenTree Planner,

01:30.400 --> 01:36.780
which is quite a key component. So first, I will talk a bit about the past.

01:36.780 --> 01:43.680
So how did we come here? What was OpenTree Planner in the origin? How has it evolved

01:43.680 --> 01:49.360
over the years? What were some pain points in the history? Then I will spend most of

01:49.360 --> 01:54.760
the time with OpenTree Planner 2, which we released two years ago and have since continued

01:54.760 --> 02:00.560
to develop. And finally, I will have a couple of minutes to discuss some topics that we

02:00.560 --> 02:06.680
will be implementing in the future. But before I start, I'd like to see in the

02:06.680 --> 02:11.640
audience how many of you have heard about the project before? Can I have some hands?

02:11.640 --> 02:17.080
So about a half, I would say. How many of you have actually tested it yourself?

02:17.080 --> 02:22.600
So almost as many, which is a good sign because I think it's very important for an open source

02:22.600 --> 02:29.000
project that it's easy to get going with this. It's easy to take into use.

02:29.000 --> 02:35.720
And yeah, as I mentioned already in the beginning, OpenTree Planner or OTP, as I will probably

02:35.720 --> 02:41.040
reference it, is quite similar project to the MODIS project that we have had presenting.

02:41.040 --> 02:50.080
So it's a passenger information system for transit data and other multimodal services.

02:50.080 --> 02:56.720
And it handles journey planning, but it also has APIs for just querying the data.

02:56.720 --> 03:04.120
So here we can see how the number of commits to the repository has been over the years.

03:04.120 --> 03:13.400
So it started in 2009 in Portland, Oregon in the US. And they wanted to build a journey

03:13.400 --> 03:18.640
planner that was open source. So they took in people that had been contributing

03:18.640 --> 03:24.160
to other libraries or projects that involved journey planning, transit data, other kinds

03:24.160 --> 03:29.680
of projects and took them into the room and said, OK, we'll give you money.

03:29.680 --> 03:32.120
Just build us this software.

03:32.120 --> 03:38.680
And then about a year later, it was put into production. And in 2013, the people involved

03:38.680 --> 03:44.280
started a company called Conveil, which took over the maintenance.

03:44.280 --> 03:52.520
But over the years, that company has actually gone more towards the direction of transit

03:52.520 --> 03:59.120
analysis. So doing software for the different cities, the different transit authorities,

03:59.120 --> 04:02.240
similar to what we actually have already seen today.

04:02.240 --> 04:09.520
But in 2013, a really important step was taken. There was a big project with the Dutch government

04:09.520 --> 04:13.600
for improving multimodal transit data and real time data.

04:13.600 --> 04:19.400
But at the same time, there was a second project that was included in the bigger Dutch project

04:19.400 --> 04:26.680
called R4, which was implementing the Raptor algorithm in a OpenS.

04:26.680 --> 04:32.640
And then it was later rewritten in R5, which is a software by Conveil.

04:32.640 --> 04:41.160
2016, there was new deployments in Washington, D.C., the New York State, Oslo, Helsinki,

04:41.160 --> 04:49.400
so a bit all over the place. And there were some trials with nationwide scaling.

04:49.400 --> 04:58.680
But then the project kind of stagnated until 2018, 2019, when N2R and R2R two Norwegian

04:58.680 --> 05:05.440
companies took over the responsibility and ported over the Raptor algorithm from the

05:05.440 --> 05:14.480
R5 project into OpenSri Planner. And then in 2020, we released the OpenSri Planner 2.

05:14.480 --> 05:20.320
And here you can see if I overlay the commits for the R5 project, you can see that, well,

05:20.320 --> 05:24.960
it was the project that took the focus in the meantime.

05:24.960 --> 05:32.360
So what were the main pain points with OpenSri Planner 1? The core issue is the journey

05:32.360 --> 05:37.240
planning algorithm that was selected. So there was a time dependent A-star search with trip

05:37.240 --> 05:43.160
banning that used over the whole network. So both street network, transit network, the

05:43.160 --> 05:49.680
multimodal stuff, everything was in the same algorithm. And how it worked is that you run

05:49.680 --> 05:56.040
a search, then you get results, you ban all the trips that you were using, and then you

05:56.040 --> 06:02.200
rerun. So it didn't scale that well when you wanted to have more results or a longer or

06:02.200 --> 06:10.320
larger graph. And also it was more focused towards research capabilities. But these were

06:10.320 --> 06:17.480
then later on taken over by R5. And we removed quite a lot of this from OpenSri Planner 2

06:17.480 --> 06:22.920
focusing on the journey planning part. Also, there was a lack of kind of vision of where

06:22.920 --> 06:28.680
it should go, how it should be structured, everything. And also there was development

06:28.680 --> 06:35.800
happening in many different repositories, and it was not really well coordinated. So

06:35.800 --> 06:42.560
for example, HSL, where the Digitransit project is, or who owns the Digitransit project, they

06:42.560 --> 06:48.960
have their own fork of the project that has quite a lot of other development. But that

06:48.960 --> 06:55.560
has now been mostly ported back to OpenSri Planner 2.

06:55.560 --> 07:00.320
So let's take a quick look how it works. I think this is the main difference between

07:00.320 --> 07:10.120
OTP1 and OTP2. In OTP1, as I said, all of the routing was done inside one single search.

07:10.120 --> 07:17.000
In OTP2, we first get a request from the API. Then we run a street search. It's basically

07:17.000 --> 07:23.600
an A-star search, but just with a single mode or with different modes if you want to have

07:23.600 --> 07:30.720
rental bicycle, rental scooters, parking your car, or anything like that. Then we enrich

07:30.720 --> 07:38.120
this with flexible transit results for the last and first mile. Then we do a transit

07:38.120 --> 07:44.960
search using the Raptor algorithm. And finally, we have two post-processing steps that I will

07:44.960 --> 07:51.480
talk a bit about later on. And then we send the result out in the API.

07:51.480 --> 07:58.120
So the street search is actually pretty much the same as it was in OpenSri Planner 1. There

07:58.120 --> 08:03.560
are some improvements. There are, for example, free-floating vehicles, new types of vehicles,

08:03.560 --> 08:11.760
so scooters, real-time parking information so that if you do a park-and-ride search,

08:11.760 --> 08:17.080
it will actually only be suggested to park at a place where we know that there probably

08:17.080 --> 08:24.320
will be space. And also, there is improved focus on this kind of quality of the routing.

08:24.320 --> 08:30.320
So there is a walk safety score so that we prefer, for example, walking through nice

08:30.320 --> 08:35.920
gardens or other paths that are not next to a big motorway.

08:35.920 --> 08:44.600
Yeah, so I mentioned flexible routes. So most of you would assume that this is, or think

08:44.600 --> 08:49.520
about this when you think about transit timetables, so that you have a fixed set of stops, fixed

08:49.520 --> 08:55.160
set of times. But there are many other ways that transit can be structured. So you can

08:55.160 --> 08:59.280
have, for example, hail-and-ride sections where you actually don't have any stops, but you

08:59.280 --> 09:06.360
can just flag the bus anywhere you want. Or you can have areas, just one, two, or as many

09:06.360 --> 09:14.040
as you like. And the bus will deviate from its pre-assigned route and just drop you home

09:14.040 --> 09:25.280
or pick you up from the door. Or it can be a group of stops, some kind of feeder services

09:25.280 --> 09:33.040
that take you to the nearest railway station if there is no regular transit in the village.

09:33.040 --> 09:40.000
Or it can be as complex services as we like with any kind of combination.

09:40.000 --> 09:47.080
So after we have added the flex results, we do a Raptor search where we insert all the

09:47.080 --> 09:55.160
street routing results, all the flexible results, and then we operate only on trips with fixed

09:55.160 --> 10:02.560
schedules and fixed stops. So there is actually multiple levels of Raptor. So Raptor is an

10:02.560 --> 10:10.360
algorithm that was introduced in 2012 by a researcher from Microsoft Research. And the

10:10.360 --> 10:16.240
basic Raptor, it has two criteria. So it has arrival time, a number of transit, and it

10:16.240 --> 10:24.080
departs at a fixed time. Basically what you do is that you find all of the stops that

10:24.080 --> 10:32.000
you can walk to or make the street routing to. Then you board all the vehicles from those

10:32.000 --> 10:36.960
stops, then you alight at every possible stop and find where you have arrived. Then you

10:36.960 --> 10:43.080
find all of the transfers from those stops to all other stops, and then you continue

10:43.080 --> 10:51.240
this in new rounds. So this finds your results with the two criteria, the one with the shortest

10:51.240 --> 10:59.880
arrival time and the one with the least transfers. Then you can run this Range Raptor, which is

10:59.880 --> 11:04.680
basically just running the Raptor algorithm, but you start at the minute and then you run

11:04.680 --> 11:11.280
it backwards and adding new results to the beginning as you go. And then you get this

11:11.280 --> 11:18.000
three criteria result that has the departure time, arrival time, and number of transfers.

11:18.000 --> 11:23.240
And that creates this kind of set where you have the departure time, arrival time, number

11:23.240 --> 11:30.400
of transfers are all optimal. Then you can insert one or more criteria, like we're talking

11:30.400 --> 11:37.920
about that you want to optimize for CO2 usage or wheelchair accessibility or comfort that

11:37.920 --> 11:46.600
you only want to use transit that is not too crowded, any kind of numerical value you can

11:46.600 --> 11:52.960
add as a criteria, but that unfortunately has the downside that it quite heavily affects

11:52.960 --> 11:59.880
the performance. Yeah, so this is basically how we do it. This is the result of the one

11:59.880 --> 12:06.360
round of Raptor search. This is of the two, three, you only add a few other leaves and

12:06.360 --> 12:11.960
then the last you just basically prune the result so that there is some where it's optimal

12:11.960 --> 12:21.760
to actually not use a trip with just one transfer, but you need to transfer many, many times.

12:21.760 --> 12:28.640
Then we do a process called transfer optimization. And this is especially in the railways where

12:28.640 --> 12:35.040
you can transit transfer between two trips at multiple stations. And it's actually the

12:35.040 --> 12:41.560
end result will be the same independently of where you transfer. You will get home at

12:41.560 --> 12:49.040
the same time, but it might be nice to transfer somewhere where you have a roof over you,

12:49.040 --> 12:53.320
or maybe you have if you have like one hour of time, you want to spend somewhere where

12:53.320 --> 12:58.440
you have access to a cafe, or then you want to make sure that you have a high probability

12:58.440 --> 13:08.040
of getting your transfers. So the one that is has the longest waiting time. And a specific

13:08.040 --> 13:12.000
type is this kind of back travel that you want to avoid that if you go from the blue

13:12.000 --> 13:16.800
dot to the red dot, you don't want to ride all over the last stop and then all the way

13:16.800 --> 13:23.640
back because that is most probably quite expensive. Then we do itinerary filtering and decorating.

13:23.640 --> 13:29.280
So the aim from the Raptor is to get as much results as possible. And then here we can

13:29.280 --> 13:35.320
make more intricate comparison between different results. And we can prune results that might

13:35.320 --> 13:41.760
be optimal, but are really bad compared to other ones. So for example, you might want

13:41.760 --> 13:46.200
to have or you might have a result where you have just one track like no transfers, but

13:46.200 --> 13:51.880
you are expected to walk 45 minutes. And that's not really you probably want to do if you

13:51.880 --> 14:01.120
have a like possibility to do it to do it in 50 minutes less. Then a big thing in Open

14:01.120 --> 14:08.680
Century Planner 2 was the inclusion of a separate data model. So prior in OTP1, the data model

14:08.680 --> 14:15.720
was based on the GTFS vocabulary and all the data was imported as the GTFS objects. But

14:15.720 --> 14:23.040
in OTP2, we have a internal data model that is built so that we can import transit data

14:23.040 --> 14:32.920
from both NetX and GTFS. So it's independent of data source and we can easily add new data

14:32.920 --> 14:40.400
sources. So there was, for example, a Swiss data set that somebody was looking at in importing

14:40.400 --> 14:48.400
into Open Tree Planner. Then something that became really popular is the sandbox extensions.

14:48.400 --> 14:54.000
So we introduced a mechanism for plugging in a optional plugin into Open Tree Planner

14:54.000 --> 15:01.560
2 and this has been really successful with currently 22 different extensions existing.

15:01.560 --> 15:07.680
So you can provide new APIs, new data formats, new functionality that you may be that is

15:07.680 --> 15:12.240
maybe not ready to take into the core Open Tree Planner, but there's something that

15:12.240 --> 15:19.840
is in the process of development. Or you might want to have some functionality that is custom

15:19.840 --> 15:24.880
for your deployment, but you want to make sure that it keeps up to date and that it's

15:24.880 --> 15:34.400
maintained and that if you do some changes in the data model or any code that we have,

15:34.400 --> 15:43.960
we will keep those updated. So one extension is that we now have two GraphQL APIs, one

15:43.960 --> 15:49.720
that is based on GTFS vocabulary and one that is based on trans model vocabulary. And you

15:49.720 --> 15:55.440
can use import data, for example, in Skone in the south of Sweden. They import Swedish

15:55.440 --> 16:04.760
timetables in NetX and Danish timetables that they use for trips to Copenhagen in GTFS.

16:04.760 --> 16:10.960
And then you can use this unified API where you provide the data in standard format so

16:10.960 --> 16:15.360
that if you want to have the results in GTFS vocabulary, you can get that, but you can

16:15.360 --> 16:22.360
also get in trans model vocabulary if you want it. And also GraphQL is really useful

16:22.360 --> 16:27.160
for this kind of journey planning purposes because usually you want to fetch little information

16:27.160 --> 16:34.120
about very many objects. And if you have this traditional, very rest pure way, you end up

16:34.120 --> 16:42.400
having like hundreds of queries that you need to do. But with GraphQL, you can fetch exactly

16:42.400 --> 16:49.360
the things that you need and only those. And that also saves quite a lot of space for mobile

16:49.360 --> 16:56.320
apps where you can limit the number of downloaded bytes.

16:56.320 --> 17:02.920
Then we have vector tiles. So you can query all the geometric information that we have,

17:02.920 --> 17:08.840
just spatial information. So all the stop stations, rental stations, even individual

17:08.840 --> 17:15.240
rental vehicles, car and bike parking and so on. And you can add real time information

17:15.240 --> 17:20.800
for those so that you can easily show them up where you have like the live availability

17:20.800 --> 17:26.000
of all the rental systems.

17:26.000 --> 17:31.560
And then one feature that actually we bought back from OTP2 was that that was removed as

17:31.560 --> 17:37.480
a sandbox extension. And that is the travel time analysis. And this is a feature that

17:37.480 --> 17:43.040
sits somewhere between pure journey planning and pure research applications, because this

17:43.040 --> 17:48.480
is really useful for some applications where you, for example, you're looking to buy a

17:48.480 --> 17:54.160
house and you can easily see, okay, like on the web page of the seller, they can show

17:54.160 --> 17:59.640
like this map that, okay, this is the area where you actually can get into with public

17:59.640 --> 18:07.600
transit in 15 minutes or by car in 15 minutes or by rental bikes in 15 minutes. So all of

18:07.600 --> 18:13.360
this is multimodal and you can export both geojasons, so the borders of the areas, or

18:13.360 --> 18:19.480
you can get a geotive with actual second values of how many seconds does it take to get to

18:19.480 --> 18:25.640
this pixel on the map.

18:25.640 --> 18:31.760
One other big improvement that we did with OTP2 is that we simplified the operations.

18:31.760 --> 18:37.400
OTP1 expected that you always have a local file system and that you always have all the

18:37.400 --> 18:45.440
files on the local file system. But we abstracted this into a data source that can be input or

18:45.440 --> 18:50.880
can be output or can be both. And currently we have local file system, so you can still

18:50.880 --> 18:56.960
have everything in the local file system if you wish. You can fetch files over HTTPS and

18:56.960 --> 19:03.240
you can load and save data to all cloud storage services or at least all the major ones and

19:03.240 --> 19:07.760
it's really easy to create your own if you want.

19:07.760 --> 19:15.680
Yeah, also there is improved monitoring support so you can get all the timing data of the

19:15.680 --> 19:21.440
internal algorithms really easily.

19:21.440 --> 19:27.360
We improved quite a lot of the documentation, so you can find the link over there. And actually

19:27.360 --> 19:34.080
with that new configuration structure, this is all that you need in order to fetch all

19:34.080 --> 19:40.960
the data and build the graph for the entirety of the Belgian country.

19:40.960 --> 19:46.640
So you have four different operators. You just say that these are the paths. You can

19:46.640 --> 19:51.640
also say if you would have, for example, the German NetX feed you could have there as well

19:51.640 --> 19:58.680
and multiple open street map files. And with different tag mapping, so different countries

19:58.680 --> 20:03.240
have different rules and regulations of whether you are allowed, for example, to walk on a

20:03.240 --> 20:09.560
bike path or if you are allowed to drive on the street if there is a bike path next to

20:09.560 --> 20:15.760
it and so on. And that's why we have this customizable tag mapping so that each country

20:15.760 --> 20:23.080
or even city can have their own rules about how these things should be mapped.

20:23.080 --> 20:29.880
Yeah, then a bit about the future, what we are planning to do next. We, of course, continue

20:29.880 --> 20:36.000
all the time with feature development. So we have built now during the winter via search

20:36.000 --> 20:43.160
that was not part of the initial OTP to release so that you can say that, oh, I want to go

20:43.160 --> 20:49.120
from here. I want to go to my hotel, but actually I want to visit this bar in the between. So

20:49.120 --> 20:53.920
you can get all the connections that are from here to the bar. Then you say that, OK, I

20:53.920 --> 20:58.640
want to spend about two hours in the bar and then you will get the results about two hours

20:58.640 --> 21:06.320
later from the bar to your hotel. The second one is GBFS geofencing areas so that you can

21:06.320 --> 21:11.720
limit where you can actually use your scooter. If there is some places where you don't if

21:11.720 --> 21:17.200
you can't park it, you will be instructed to actually park it just before the zone starts.

21:17.200 --> 21:25.840
Or if you have speed limits, it might be beneficial to drive around those speed limits. Then performance

21:25.840 --> 21:31.720
is something that we think is very important. We have been focusing more and more of it

21:31.720 --> 21:38.440
and we started actually measuring it. So we run a set of queries after each commit and

21:38.440 --> 21:44.240
we store them in a Postgres database. And then we have a nice dashboard that's where

21:44.240 --> 21:50.960
you can go to and see how we have been doing over time. And we have multiple data sets.

21:50.960 --> 21:55.640
It's so that if somebody is using this in production, we can add their data set so that

21:55.640 --> 22:01.520
they can see how their data set is performing because different data sets have quite different

22:01.520 --> 22:08.800
performance characteristics because you might have a very large network or you might have

22:08.800 --> 22:14.800
a network with very strange timing conditions or other things that might affect it.

22:14.800 --> 22:21.760
Yeah, we are also working on new internal data model for the timetable data that is

22:21.760 --> 22:27.880
better suited for Raptor that uses a virtual trip for heuristic calculations so that you

22:27.880 --> 22:34.160
don't actually need to do any timetable lookups and it's better memory or it's more memory

22:34.160 --> 22:38.720
efficient. So, for example, we noticed that, okay, most timetables actually only operate

22:38.720 --> 22:44.360
on full minutes and are less than four hours and a quarter. So you can store them in just

22:44.360 --> 22:52.680
one daytime and an array of bytes. Yeah. And then one thing that is actually touching,

22:52.680 --> 22:59.960
there was a question about the international deployment. So we run currently in Norway,

22:59.960 --> 23:06.380
we run a Nordic graph that contains data for all the Nordic countries, but we are working

23:06.380 --> 23:12.260
on this kind of segmented or tiered model where we actually separate the transit networks

23:12.260 --> 23:20.200
into local and long distance. And then we split those into smaller and we only take

23:20.200 --> 23:27.640
in the routing data that you need for your search. Then there is this competition of

23:27.640 --> 23:34.040
relatives in Norway. We have commercial bus operators and we have their data. And unfortunately,

23:34.040 --> 23:39.160
they do some awful tricks. So, for example, they might schedule a trip that starts one

23:39.160 --> 23:43.840
minute later than the competitors and arrives one minute earlier. And that way you actually

23:43.840 --> 23:52.160
drop the other operator completely from the results. So what we are planning is to add

23:52.160 --> 23:58.500
a Raptor criteria where we have a bit set of the commercial operators used and that

23:58.500 --> 24:04.200
makes it so that we will always suggest all the available options, even though they are

24:04.200 --> 24:11.400
not optimal, as long as they use a different carrier. And we are also planning for a unified

24:11.400 --> 24:16.600
graphical API where we would have one data model, one structure, but two dialects, one

24:16.600 --> 24:26.600
for GTFS and one for trans model in order to lower the overhead. So that was it. Thank

24:26.600 --> 24:35.600
you very much.

24:35.600 --> 24:50.960
I think we might have time for one, two questions. So if there is anybody in the audience. Yeah.

24:50.960 --> 24:57.520
So we take the data from OpenStreetMap and some areas have it better, some have it worse.

24:57.520 --> 25:06.480
We also use, if you have in your GTFS, we use this pathways extension so you can model

25:06.480 --> 25:14.240
inside of the railway station and then we just link not the inwards of the railway station,

25:14.240 --> 25:20.980
but the entrances and then the inner model comes from the pathways. There is also something

25:20.980 --> 25:24.640
similar available in NetX, but that we don't import at the moment. Yeah.

25:24.640 --> 25:31.360
Do you understand correctly that you have demand responsive transit also?

25:31.360 --> 25:37.660
So that was the part about the flex search. That is the second part before the timetable.

25:37.660 --> 25:40.640
So at the moment we only use it for first and last mile.

25:40.640 --> 25:46.320
But you only interface with external APIs to do their calculations?

25:46.320 --> 25:52.680
We don't do any availability. So we just say that it might be possible to take this, but

25:52.680 --> 25:57.440
you need to plan. But that is something that you can implement in a filter so that the

25:57.440 --> 26:03.720
filter actually does the query of, okay, is this possible? And then you can enhance the

26:03.720 --> 26:06.560
result with that data. Yeah.

26:06.560 --> 26:09.040
Very short question because there is no time. Yeah.

26:09.040 --> 26:18.320
I have been trying to be short. So what's your international point of view with different

26:18.320 --> 26:26.480
aspects of optimization, transport and speed of transport. With high speed train between

26:26.480 --> 26:36.080
Brussels and Italy, you pay a lot. When you go with the train and with pedestrian, you

26:36.080 --> 26:42.240
have the cheaper solution. And when it's a bicycle, it's an optimal solution for me.

26:42.240 --> 26:47.640
Yeah. But I can just transfer quickly. Price is something that you can use as a Poreto

26:47.640 --> 26:54.440
criteria. But the big problem is that there is so much dynamic fares that exist today

26:54.440 --> 27:17.920
that it's impossible to use it because there would be.

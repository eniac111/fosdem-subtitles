WEBVTT

00:00.000 --> 00:08.840
Hi, everybody.

00:08.840 --> 00:12.640
Welcome to my presentation about KITAI's tract.

00:12.640 --> 00:14.960
I am Peter Puccio,

00:14.960 --> 00:17.160
and I have a question.

00:17.160 --> 00:21.960
How many of you have any experience with KITAI?

00:22.080 --> 00:26.200
Okay, so there are a few of you.

00:26.200 --> 00:30.040
What is KITAI's tract?

00:31.480 --> 00:36.880
It's a tool for dealing with binary formats,

00:36.880 --> 00:39.720
especially parsing.

00:39.720 --> 00:43.920
It is based on a declarative language,

00:43.920 --> 00:45.720
KITAI's tract YAML,

00:45.720 --> 00:50.920
that can be used to specify arbitrary binary formats.

00:50.920 --> 00:53.920
It works as a parser generator,

00:53.920 --> 00:59.920
and it currently supports 11 target programming languages.

01:02.320 --> 01:09.240
Parsing means to convert the binary data you see above,

01:09.240 --> 01:13.160
to the structured data and object tree,

01:13.160 --> 01:16.640
so that you can work with it later.

01:17.360 --> 01:22.080
Today, I will also introduce a new functionality,

01:22.080 --> 01:24.680
which is serialization,

01:24.680 --> 01:28.960
and I've been working on it for the last six months,

01:28.960 --> 01:34.640
and it currently works in Java.

01:37.280 --> 01:41.200
Serialization means, I didn't mention that,

01:41.200 --> 01:44.400
that basically the inverse process.

01:44.400 --> 01:50.040
So you want to create a binary file from an object tree.

01:50.040 --> 01:53.920
Something about this story.

01:55.680 --> 02:01.440
So the author of KITAI's tract is Michael Action,

02:01.440 --> 02:06.240
and the project started in 2014.

02:06.240 --> 02:10.720
In 2016, Michael decided to

02:10.720 --> 02:13.360
release the project as open source,

02:13.360 --> 02:15.280
and at that time,

02:13.460 --> 02:20.360
and at that time, the only supported languages were Java and True.

02:15.280 --> 02:20.360
the only supported languages were Java and True

02:20.360 --> 02:27.000
In 2017, Michael presented KITAI's tract at FOSDEM,

02:27.000 --> 02:30.160
and by then it already supported eight languages

02:30.160 --> 02:35.680
and had over 400 stars on GitHub.

02:35.680 --> 02:38.360
And Michael also wanted to come today,

02:38.360 --> 02:40.720
but unfortunately he couldn't,

02:40.720 --> 02:44.160
but if there is some chat or something,

02:44.160 --> 02:49.320
I think he should be there so you can ask him some questions or whatever.

02:49.320 --> 02:50.920
And how is it today?

02:50.920 --> 03:00.000
So we have 11 target languages and over 3,000 stars on GitHub,

03:00.000 --> 03:05.920
and KITAI is used in more than 500 GitHub projects.

03:05.920 --> 03:12.360
So let me share how I discovered KITAI's tract.

03:13.240 --> 03:16.600
This was in 2019,

03:16.600 --> 03:21.600
and I was playing electronic keyboard with a band,

03:21.600 --> 03:25.760
and I wanted to create a MIDI editor so that I

03:25.760 --> 03:31.800
could record the songs on the keyboard and edit them on the computer.

03:31.800 --> 03:37.080
And I wanted the user to be able to upload

03:37.080 --> 03:41.880
a sound bank in the Soundfont2 binary format so that

03:41.880 --> 03:45.720
they could control how the song could sound.

03:45.720 --> 03:50.600
And I wanted a web-based MIDI editor,

03:50.600 --> 03:56.920
so I searched for a JavaScript parsing library of the.sf2 format,

03:56.920 --> 04:01.040
but I couldn't find one that would work for me.

04:01.040 --> 04:04.640
So I started writing my own parser,

04:04.640 --> 04:10.600
but it was really hard and a lot of debugging had to be done,

04:10.600 --> 04:12.720
and it was just not fun.

04:12.720 --> 04:16.880
And when I finished,

04:16.880 --> 04:25.240
I came across KITAI's tract and I found that my two months of work I spent on this

04:25.240 --> 04:28.640
could be done in just one day with KITAI.

04:28.640 --> 04:33.040
So KITAI impressed me with its concept,

04:33.040 --> 04:35.960
simplicity, and versatility,

04:35.960 --> 04:39.520
and I started contributing a lot.

04:39.520 --> 04:45.520
And KITAI also helped me in my personal development because until then,

04:45.520 --> 04:48.640
I'd only programmed in JavaScript,

04:48.640 --> 04:51.280
PHP, and a little bit of Python.

04:51.280 --> 04:52.720
And within a few months,

04:52.720 --> 04:54.840
I was able to work in

04:54.840 --> 04:58.720
14 programming languages that were used in KITAI.

04:58.720 --> 05:07.880
And in 2020, I accepted an offer from Michael to become an administrator of the project.

05:09.480 --> 05:16.440
So in my story, I showed what options there are to get a parser.

05:16.680 --> 05:23.240
So the most convenient way that you are probably familiar with is to

05:23.240 --> 05:28.240
use a dedicated format library in the given language.

05:28.240 --> 05:35.640
So it will probably have a user-friendly API and can be optimized for a format.

05:35.640 --> 05:41.880
But sometimes it may be of poor quality and incomplete,

05:41.880 --> 05:45.880
and it may be difficult to debug and fix it.

05:45.880 --> 05:51.680
And also for the most common formats like JPEG,

05:51.680 --> 05:57.640
L4ZIP, you can find even several libraries and you can choose.

05:57.640 --> 06:00.840
But for less common formats,

06:00.840 --> 06:05.920
some obscure ones, there will simply be no library in your language.

06:05.920 --> 06:09.040
So we need to look into other options.

06:09.040 --> 06:15.240
And another option is to simply write your own parser.

06:15.240 --> 06:17.080
But in my experience,

06:17.080 --> 06:23.560
this is the worst option because it takes a lot of time

06:23.560 --> 06:31.680
and you need to do a lot of debugging using some debug prints and dumps,

06:31.680 --> 06:34.200
and it's just not fun.

06:34.200 --> 06:38.200
But it's what most people do,

06:38.200 --> 06:40.600
often because they just don't know any better.

06:40.600 --> 06:43.160
So that's why I'm here today.

06:43.160 --> 06:53.080
And well, the problem is that if you have already written a parser for your format in Python,

06:53.080 --> 06:59.720
for example, and then after some time you are asked to create a Java parser for the same format,

06:59.720 --> 07:03.720
you basically need to start again.

07:05.600 --> 07:11.440
So a bit better way is to parse a combinator,

07:11.440 --> 07:16.040
which means that you are essentially still writing your own parser,

07:16.040 --> 07:20.600
but you are using some building blocks from a library.

07:20.600 --> 07:28.360
And a parser combinator typically allows you to declaratively define some substructures,

07:28.360 --> 07:31.320
but still in the code.

07:31.320 --> 07:38.920
And like in C, you can define structs for the fixed size pieces of the format,

07:38.920 --> 07:45.880
and then you can directly interpret some block of bytes with that struct.

07:45.880 --> 07:50.480
And there are many parser combinators,

07:50.480 --> 07:55.640
perhaps dozens in popular languages,

07:55.640 --> 08:00.000
but as with the two previous options,

08:00.000 --> 08:07.520
you have still the disadvantage that the parser will get this way,

08:07.520 --> 08:10.960
is still bound to a particular language.

08:10.960 --> 08:16.040
And it may be even bound to an application, for example,

08:16.040 --> 08:20.360
if it was developed for a graphical editor.

08:20.360 --> 08:29.960
So it may be difficult to separate just the parser from that application to use it somewhere else.

08:29.960 --> 08:35.880
And the fourth option is to use a parser generator,

08:35.880 --> 08:42.400
which means that you are not writing the parsing code directly in the programming language,

08:42.400 --> 08:51.720
but instead you describe it in a domain, describe the format structure in a domain-specific language.

08:51.720 --> 08:58.800
And this description can be then automatically translated into a parser.

08:58.800 --> 09:08.440
Yeah, so Katai struct falls into this category, and the Kata struct language is designed

09:08.440 --> 09:18.080
so that it's independent of both the application and the programming language.

09:18.080 --> 09:22.560
Here I will show you how to work with Katai.

09:22.560 --> 09:26.160
The first stage is compilation.

09:26.160 --> 09:32.920
So you take this Katai struct specification of the format,

09:32.920 --> 09:38.000
and in this case this is a format that has one byte,

09:38.000 --> 09:45.680
because this u1 type means unsigned integer of one byte.

09:45.680 --> 09:53.480
And you take this Katai struct specification and you compile it using the Katai struct compiler,

09:53.480 --> 10:01.320
which is a command-line tool, and as output you get the source code of the parser,

10:01.320 --> 10:06.280
in this case in Python.

10:06.280 --> 10:11.080
The main stage is parsing.

10:11.080 --> 10:18.720
You give the input binary file to the generated parser,

10:18.720 --> 10:27.680
you get in the first step, and you give the input binary file to the parser as input,

10:27.680 --> 10:34.720
and you get parse data as output, so an object tree.

10:34.720 --> 10:43.080
And in case of Katai struct, the generated parser works with the runtime library,

10:43.080 --> 10:50.440
so you need to include it also into your application.

10:50.440 --> 10:56.200
Why use Katai? What are the advantages?

10:56.200 --> 11:06.680
So as I already mentioned, the advantage is that you write the KSI specification once,

11:06.680 --> 11:09.160
and you can use it everywhere.

11:09.160 --> 11:20.600
It standardizes the way we describe binary formats, and there are already many formats described in the Katai format gallery,

11:20.600 --> 11:28.120
and any described format can be visualized automatically in a graphics diagram,

11:28.120 --> 11:32.920
and the Katai struct language is simple, you will see.

11:32.920 --> 11:41.160
There are also several visualization and dumping tools available in Katai struct.

11:41.160 --> 11:54.920
So the Write Once, Use Everywhere feature means that you get parses in 11 programming languages for free

11:54.920 --> 12:06.040
from a single KSI specification, so in this case I've had the compiler generate Java, Python and Ruby parsers

12:06.040 --> 12:13.880
from a simple KSI specification you see on the left.

12:13.880 --> 12:21.960
When you look for specifications of binary formats, you will find that each one looks different,

12:21.960 --> 12:28.760
and there is no single standard to how to document formats.

12:28.760 --> 12:40.680
Katai is intended primarily for creating parses, but some people write KSI specification

12:40.680 --> 12:46.120
just to document a format in an easy to understand way,

12:46.120 --> 12:53.480
because you don't even have to be a programmer to understand a KSI specification, and it's often easier than

12:53.480 --> 12:59.720
to read these long PDF documents.

12:59.720 --> 13:07.800
The Katai project includes an extensive gallery of described formats.

13:07.800 --> 13:19.160
At the moment there are 181 formats described by 76 contributors, and

13:21.160 --> 13:36.360
there are also several hundreds more format specifications in various Katai projects.

13:36.360 --> 13:45.400
The Katai format gallery contains formats of various kinds, for example,

13:45.400 --> 13:54.040
as you see archive files, for example, executables, file systems, game data files,

13:54.040 --> 14:04.280
multimedia files and network protocols. You can go to this page, and I took it from there,

14:04.280 --> 14:10.440
and this suggests the wide applicability of Katai.

14:10.440 --> 14:18.840
It offers an idea to create an international database of formats, where various

14:18.840 --> 14:26.520
obscure and historical formats would be documented in a uniform way for future preservation.

14:26.520 --> 14:43.560
This would guarantee that we could read the binary files we write now in 100 or 200 years from now.

14:43.560 --> 14:49.960
The fact that the Katai struct language is declarative makes it possible to automatically

14:49.960 --> 15:01.400
visualize the described format in a Gravis diagram.

15:01.400 --> 15:10.280
The Katai struct language is simple but powerful. You can describe pretty much any binary format with it.

15:10.280 --> 15:16.120
A KSA specification starts with the meta section,

15:16.120 --> 15:22.600
and this sets the little and then byte order as default.

15:22.600 --> 15:33.960
The SEQ section is a sequence of attributes. The attribute name is in the ID key.

15:33.960 --> 15:44.840
The type u4 means that, in this case, num underscore files will be an unsigned 4-byte integer.

15:44.840 --> 15:50.200
You can define your own types in the type section.

15:50.200 --> 15:59.320
A field can also be repeated. So in this case, the files attribute will be a list or an array

15:59.320 --> 16:03.800
of base type file.

16:03.800 --> 16:13.160
In the instances section, you can define attributes that start at an arbitrary byte position.

16:13.160 --> 16:19.880
You can also use a powerful expression language in many places.

16:19.880 --> 16:27.480
Another built-in type is a character string in a certain encoding.

16:27.480 --> 16:37.800
If you omit the type and only specify the size, the result is a byte array.

16:37.800 --> 16:44.440
There are several visualization and dumping tools available for inspecting files.

16:44.440 --> 16:53.080
This can be useful for finding errors, forensic analysis, or debugging.

16:53.080 --> 17:03.240
The visualizers allow us to view the structured data, parts from the input file,

17:03.240 --> 17:14.040
based on a Kitex track specification. You can use the console visualizer

17:14.040 --> 17:21.560
or also the command line to ksdump is available, which can give you the same structured data

17:21.560 --> 17:30.360
as you can see in JSON format. This can be useful for automation.

17:30.360 --> 17:42.760
The most popular visualization tool is the Web IDE. You can check it out on this URL.

17:42.760 --> 17:49.960
At the top right is an example of the input binary file. In this case,

17:49.960 --> 17:56.920
I selected this.png file in the file tree on the left.

17:56.920 --> 18:06.120
At the top left is the Kitex track specification editor, a ksya spec editor.

18:06.120 --> 18:12.600
According to the Kitex track specification, the input file is parsed.

18:12.600 --> 18:19.720
The result is the structured data that you see in the object tree at the bottom left.

18:19.720 --> 18:26.840
When you edit the Kitex track specification, the input file is automatically parsed again.

18:26.840 --> 18:33.320
The object tree is updated.

18:33.320 --> 18:38.760
Serialization is a new feature in Kitex track.

18:38.760 --> 18:47.560
It's being developed thanks to the financial support of the Analet Foundation.

18:47.560 --> 18:54.120
While parsing allows you to read binary data to an object,

18:54.120 --> 19:05.400
serialization is all about the inverse process. We want to write an object to binary data.

19:05.400 --> 19:16.360
Currently, in Kitex track, the serialization for Java is fully working

19:16.360 --> 19:22.840
and C-sharp and Python are in development.

19:22.840 --> 19:27.080
There are basically two use cases of serialization.

19:27.080 --> 19:34.680
You can edit an existing file or you can create a new file from scratch.

19:34.680 --> 19:43.160
The support for serialization greatly extends the use of all written format specifications

19:43.160 --> 19:48.840
because now you can use them not only for parsing but also for serialization.

19:48.840 --> 19:56.520
This has many uses. For example, you can convert one format into another

19:56.520 --> 20:05.800
or it can be used for fuzzing or video games modding and so on.

20:05.800 --> 20:12.440
The serialization process in Kitex track can be divided into four phases.

20:12.440 --> 20:20.520
First, you need to create a ks object and then you fill it with data.

20:20.520 --> 20:27.640
So you set its individual fields or attributes using setters.

20:27.640 --> 20:31.480
Then you should call the underscore check method

20:31.480 --> 20:38.120
to check the consistency of the data with the format constraints.

20:38.120 --> 20:50.280
Finally, we can call underscore write and pass the stream where to write.

20:50.280 --> 21:04.360
You can actually check out more details of how to use serialization in Java on this page.

21:04.360 --> 21:12.120
Currently, the serialization support in Kitex track is designed for the general case

21:12.120 --> 21:16.440
so that it works for every conceivable format specification.

21:16.440 --> 21:23.880
While a simple solution would work for perhaps most specifications,

21:23.880 --> 21:28.760
well, the solution that works for all of them was chosen.

21:28.760 --> 21:33.400
Even at the cost of delegating some task to the user.

21:33.400 --> 21:42.040
In the future, I would like to automate these tasks that need to be done manually at the moment

21:42.040 --> 21:47.240
so that it's more convenient for the user.

21:47.240 --> 21:52.600
The basic idea is that the user sets everything,

21:52.600 --> 22:01.560
including lengths of sets, magic signatures and Kitex track checks for consistency.

22:01.560 --> 22:05.800
Also, only fixed length streams are considered.

22:05.800 --> 22:13.480
So once you create a stream, you cannot resize it.

22:13.480 --> 22:19.800
Finally, I would like to talk about the plans for the future.

22:19.800 --> 22:30.520
Serialization for C sharp and Python is in development and they should be ready in two months.

22:30.520 --> 22:37.400
There is also interest in adding Rust, C and Julia as target languages.

22:37.400 --> 22:42.200
I would also like to see Warshak de-sectors as a target.

22:42.200 --> 22:48.280
Because the concept of Kite is not limited to programming languages,

22:48.280 --> 22:50.040
a target can be anything.

22:50.040 --> 22:55.160
For example, we already have a target for construct,

22:55.160 --> 23:04.280
which is Python library for parsing and serialization of binary data.

23:04.280 --> 23:06.040
Thanks for listening.

23:06.040 --> 23:08.600
Now it's time for our questions.

23:08.600 --> 23:29.960
In the English KSI language, how much room do you have for explanations if you want to use it as a for-proof file format description?

23:29.960 --> 23:31.960
You also need a lot of those texts.

23:31.960 --> 23:33.960
Yes, yes you can.

23:33.960 --> 23:47.800
There are, I don't know if I, yeah, there is a doc key for which you can use on attributes and types and in many places.

23:47.800 --> 23:57.560
And you can use it, you can write some documentation of the specific element.

23:57.560 --> 24:09.320
And in some languages, it doesn't work like 100% of the time, but the idea is that it should,

24:10.600 --> 24:18.440
these documentation should translate to the generated parser as the blocks.

24:18.440 --> 24:31.240
And then you can, then the IDs and tools like tools for development should auto-complete usually this documentation.

24:31.240 --> 24:43.240
Do you support in the English when generating source code, depending on the part of the machine?

24:43.240 --> 24:50.440
Yes, there is a feature for calculated NDNS.

24:50.440 --> 25:04.280
It is called and it will, you can switch the NDNS or the default NDNS based on the value of an arbitrary expression basically.

25:04.280 --> 25:07.160
So this can, yeah.

25:07.160 --> 25:11.960
But do you support like host NDNS and target NDNS?

25:11.960 --> 25:20.840
Well, not really, but it's not that of a limitation because you can, for example,

25:22.520 --> 25:30.200
you can use parameters, for example, to pass it from your application basically.

25:30.200 --> 25:41.080
Because I don't know if I can, I don't know if it's a good idea, but another feature of Kiteastrack is

25:41.080 --> 25:51.640
that you can define that types can have parameters and even the top level, yeah, I should probably at least,

25:53.400 --> 26:03.880
well, never mind, yeah, and you can define parameters and you can easily pass a parameter from your application

26:03.880 --> 26:10.360
that will somehow change the behavior of the specification.

26:10.360 --> 26:14.280
Yeah, so it's possible.

26:14.280 --> 26:23.880
With KSI you seem to aim to define specification for certain languages or formats,

26:23.880 --> 26:31.880
but for languages and formats that already have a specification, how can you ensure that these two specs are actually the same

26:31.880 --> 26:36.040
and that you're not passing differently than other passwords?

26:36.040 --> 26:47.000
Either, well, you mean that there is already an implementation of some, or...

26:47.000 --> 26:55.800
For example, someone's passing zip files out there, how do you guarantee that Kiteastrack will pass zip files the same way?

26:55.800 --> 27:12.120
Well, you don't basically, but, well, it's from this point of view, it's just another implementation,

27:12.120 --> 27:19.400
well, if you compare it to other parsers, for example, so there is, for example, a zip parser

27:19.400 --> 27:30.120
in every language, so zip parser library and this Kiteastrack specification is just another implementation, so...

27:30.120 --> 27:37.080
Well, it needs to be developed carefully so that it works well or...

27:37.080 --> 27:44.680
I guess you would need a way to translate from a written specification to the Kiteastrack structure

27:44.680 --> 27:53.480
or the other way around to validate that what you wrote as the script actually corresponds to the actual specification.

27:53.480 --> 28:01.480
For example, if a specification is already match machine readable, I mean, it's not clear,

28:01.480 --> 28:09.000
we should have a tool to convert from one to the other, so that would ensure that the parsing is correct.

28:09.000 --> 28:12.120
But it doesn't have, because the implementation is done by humans.

28:12.120 --> 28:15.320
It's impossible, it's just an interop.

28:15.320 --> 28:16.920
You have to run all those tests.

28:16.920 --> 28:18.920
One of the performance...

28:18.920 --> 28:28.120
If the process is generated from a specific data, this is not impossible, this is not impossible.

28:28.120 --> 28:32.920
Right, but only if the other part is automated by the same...

28:32.920 --> 28:34.920
By the same science.

28:34.920 --> 28:35.720
Yes.

28:35.720 --> 28:41.720
One of the questions is, I am wondering if it would be possible to have

28:41.720 --> 28:44.520
some functionality to do that.

28:44.520 --> 28:47.720
Not only parsing, but some very common functional.

28:47.720 --> 28:51.720
Can you add that in the higher...

28:51.720 --> 28:54.520
Common functionalities, so...

28:54.520 --> 29:01.320
Like, for example, there is a binary format and there is a very common functional that everybody uses on that.

29:01.320 --> 29:10.120
Let's say, like, I don't know, cutting a part of it or getting, calculating some, I don't know, value,

29:10.120 --> 29:12.920
magic value or hash value, something.

29:12.920 --> 29:18.120
Could you add some extra functionality other than parsing in there?

29:18.120 --> 29:30.120
Well, so the question was that if you can, if we can add some common functionality in addition to the format specification,

29:30.120 --> 29:40.920
and the answer is that, well, you can do this to a certain extent because there are...

29:40.920 --> 29:50.920
I didn't mention them, or talk about them, but there are value instances and you can prepare some...

29:50.920 --> 29:52.920
You can...

29:52.920 --> 29:57.720
This is like a calculated attribute.

29:57.720 --> 30:04.520
So you can write an arbitrary expression to it and this can calculate, for example, some...

30:04.520 --> 30:15.720
Like, I wrote a BMP specification or I extended it and I used this, for example, to...

30:15.720 --> 30:25.320
Well, in the BMP format, there are, like, color masks in different places depending on the header version.

30:25.320 --> 30:32.520
And I used a value instance to get it from...

30:32.520 --> 30:40.520
So depending on the version, so either get it from here or here, or if it's a fixed...

30:40.520 --> 30:42.520
Fixed...

30:42.520 --> 30:48.520
I don't know if it's a fixed color palette or what is it called?

30:48.520 --> 30:51.320
So, yeah, we can do this to a certain extent.

30:51.320 --> 30:56.520
But some common functionality, like, I don't know some...

30:56.520 --> 31:06.520
Well, if it would require, like, a programming language or something like that...

31:06.520 --> 31:20.120
So this would be infeasible, basically, because then we would have to some...

31:20.120 --> 31:28.920
Programming language that translates to all targets, which is basically impossible, I think.

31:28.920 --> 31:30.920
Yeah.

31:30.920 --> 31:36.920
There is a tool that is called Diffoscopes that explains the differences between the two binaries.

31:36.920 --> 31:46.120
And it's very inconvenient so that you can prove that a specific build system generates the same results.

31:46.120 --> 31:56.920
And you can explain the differences. How would it be possible with these tools or these tools set to write a comprehensive...

31:56.920 --> 32:12.920
Diff tools that explain the differences between two binaries and that can leverage the existing descriptions to explain what the difference became to find?

32:12.920 --> 32:19.320
Yeah, so I think you can compute some diff.

32:19.320 --> 32:26.120
Basically, I would do it. I showed the ksdump tool here.

32:26.120 --> 32:34.920
So I think you could generate the JSON dumps of the two files and compare them.

32:34.920 --> 32:48.920
But when I did this, it was usually very, very massive. You can probably improve that somehow.

32:48.920 --> 32:50.920
I don't know.

32:50.920 --> 32:52.920
But it's...

32:52.920 --> 33:06.920
Thanks and...

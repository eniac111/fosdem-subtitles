WEBVTT

00:00.000 --> 00:10.760
So, in this presentation, I will try to show you the project, what's the current state,

00:10.760 --> 00:14.800
the features, most used plugins, and which are the main features.

00:14.800 --> 00:18.280
Okay, so first of all, a quick presentation.

00:18.280 --> 00:20.180
I'm Sergio Alvarez.

00:20.180 --> 00:21.920
Everybody knows me by my nickname, which is Pancake.

00:21.920 --> 00:23.320
I'm the author of her tool.

00:23.320 --> 00:29.720
I live in Barcelona and I work at NowSecure, which is a company from US, which we basically

00:29.720 --> 00:33.640
use different static and dynamic instrumentation tools for analyzing applications and find

00:33.640 --> 00:39.000
out privacy issues like identifying if the application is leaking data, stuff like that,

00:39.000 --> 00:45.040
and then generate some reports for the customers and developers to improve the quality of the

00:45.040 --> 00:46.040
applications.

00:46.040 --> 00:50.000
So, I work as a senior mobile security analyst.

00:50.000 --> 00:51.400
I like command line tools.

00:51.400 --> 00:54.440
I like command text interfaces.

00:54.440 --> 01:00.800
I brought many open source software, so my first goal is basically publishing all the

01:00.800 --> 01:05.120
stuff that I'm doing, so I like free software.

01:05.120 --> 01:11.960
I'm maintaining the whole R2 ecosystem nowadays, so I'm basically focusing on R2, but I also

01:11.960 --> 01:18.200
maintain R2Kedra, R2FREEDA, and many other plugins that work with R2.

01:18.200 --> 01:21.840
We have to reduce the font size here.

01:21.840 --> 01:26.680
This slide is a little bit...

01:26.680 --> 01:33.160
So it's a 17-year-old project, so I started this tool basically as a forensic tool.

01:33.160 --> 01:38.440
I wanted to recover some files that are lost in the hard drive.

01:38.440 --> 01:44.200
The thing is that I was working as forensic analyst, but I was not going to use the private

01:44.200 --> 01:47.960
software that was in the company, so I wrote a simple external editor that was able to

01:47.960 --> 01:54.600
find some patterns in the disk and then dump a one megabyte from there.

01:54.600 --> 01:59.000
After this, I was interested in participating in some CTF and different competitions for

01:59.000 --> 02:03.840
recent engineering, and I found out that there were so many tools that didn't really solve

02:03.840 --> 02:04.840
my problem.

02:04.840 --> 02:09.000
So starting by, for example, GDB, it was not possible to script it at the time and typing

02:09.000 --> 02:13.200
comments all the time was tedious, and I just wanted to automate many things.

02:13.200 --> 02:16.320
Also, there was extremely similar details, but it was not possible to extend them with

02:16.320 --> 02:19.760
plugins or anything like this.

02:19.760 --> 02:24.200
There was disassemblers, but object dump is cool, but it's not interactive, and the only

02:24.200 --> 02:27.320
interactive tool was private, which is IDA.

02:27.320 --> 02:33.880
Anyway, there was no real ecosystem for open source to solve any of these problems at once.

02:33.880 --> 02:38.000
There were so many little tools that were solving one problem, but not really being

02:38.000 --> 02:41.240
able to integrate with the rest of the ecosystem or other tools.

02:41.240 --> 02:45.560
So I decided to start picking ideas, picking tools, developing everything from scratch.

02:45.560 --> 02:50.040
That's why I did R2, because R2 is not depending on anything, so you can only depend on the

02:50.040 --> 02:54.000
plastics like Slipsy, and all the rest of the dependencies are written from scratch,

02:54.000 --> 03:00.200
like console handling, red line interface, all the socket interface, parsing libraries,

03:00.200 --> 03:02.960
disassembling things, etc.

03:02.960 --> 03:08.960
It's less sensitive than the LGPL3.

03:08.960 --> 03:12.800
The focus of the project is basically to read other tools and be useful for hackers.

03:12.800 --> 03:18.360
It's not going to be a general purpose solution for all the problems, because, for example,

03:18.360 --> 03:21.040
I don't plan to write disassemblers from scratch.

03:21.040 --> 03:25.520
I think that there are better projects for this, so I'm integrating them into R2.

03:25.520 --> 03:27.960
Same goes for Lipoke.

03:27.960 --> 03:31.840
It's one of the tools that is able to use R2.

03:31.840 --> 03:36.360
It's fully written in C. I mainly focus on portability, because I like the things that

03:36.360 --> 03:38.360
I write to run everywhere.

03:38.360 --> 03:45.600
So the only option nowadays is C. I mean, there are some rasp haters around that.

03:45.600 --> 03:51.200
The thing is that R2 can be compiled into WebAssembly, so you can run R2 inside your

03:51.200 --> 03:52.200
browser.

03:52.200 --> 03:56.840
You can also build it in a static-linked single binary, so you can drop it in a router.

03:56.840 --> 04:01.520
This year I plan to port it to UFE, so you can run R2 inside your bootloader, and then

04:01.520 --> 04:06.640
you can use it in the panoparenting system to use R2, non-file systems, and things like

04:06.640 --> 04:07.640
that.

04:07.640 --> 04:12.480
There are some really high constraints on all the code that R should be in R2.

04:12.480 --> 04:14.800
So there is a CI that is basically verifying everything.

04:14.800 --> 04:20.080
There is a 24-7 fuzzer that is running and finding bugs and fixing them.

04:20.080 --> 04:25.560
So my policy is I don't let bugs stay for more than one day.

04:25.560 --> 04:31.440
So the code cannot contain set jump or aborts or hazards or anything like this, because

04:31.440 --> 04:38.120
if you are doing something in hot, you don't want things to crash or to break.

04:38.120 --> 04:43.680
So the idea is that all the code that is running in R2 must be used from a library, so I don't

04:43.680 --> 04:44.960
want to use, like, double variables.

04:44.960 --> 04:49.400
I don't want to depend on something that if it's not parsing properly, I don't want to

04:49.400 --> 04:50.400
crash.

04:50.400 --> 04:56.000
If the malloc is failing, I want the program to still run.

04:56.000 --> 04:57.000
Things like this.

04:57.000 --> 05:01.800
So there are some concerns that I have when I write code for R2.

05:01.800 --> 05:07.040
It's developing a single repo, but it's separated in different models.

05:07.040 --> 05:11.760
So it's like a big project in one repository, but there is a bunch of libraries.

05:11.760 --> 05:17.320
Each library has a bunch of plugins, and many of these plugins are integrated or exposed

05:17.320 --> 05:20.240
interfaces for extending it with scripting languages.

05:20.240 --> 05:26.400
So at the end, it's basically like a different line of capabilities that can be extended

05:26.400 --> 05:29.120
pretty easily at different layers.

05:29.120 --> 05:30.400
So there is a command line interface.

05:30.400 --> 05:31.400
You have a prompt.

05:31.400 --> 05:32.400
You can type things.

05:32.400 --> 05:38.080
There is a visual mode, which is basically a list of commands that you execute every

05:38.080 --> 05:39.640
time that you press a key.

05:39.640 --> 05:43.200
And then you have the panels mode, which is like you can make splits.

05:43.200 --> 05:44.360
You can have different tabs.

05:44.360 --> 05:48.000
You can have different frames and so on.

05:48.000 --> 05:49.320
And then there is web interface.

05:49.320 --> 05:54.200
There is some people writing graphical interfaces for it, like Yaito, which is the Qt interface

05:54.200 --> 05:56.040
for it.

05:56.040 --> 06:01.280
For scripting, the easiest way for scripting R2 is R2Pipe, which is basically the simplest

06:01.280 --> 06:05.360
interface for interfacing with anything, which is basically you run something.

06:05.360 --> 06:10.320
You pass a string with a command, and then you get the output of the command as a string.

06:10.320 --> 06:13.160
But there is also bindings for the CAPI.

06:13.160 --> 06:17.600
There's automated bindings for Python, for Rust, et cetera.

06:17.600 --> 06:24.720
And there is also support for using these bindings from different scripting languages.

06:24.720 --> 06:29.240
So, what are the libraries implementing or exposing?

06:29.240 --> 06:33.420
So you have the IO library, which is basically abstracting the access to the IO.

06:33.420 --> 06:37.600
This basically defines how you access a file.

06:37.600 --> 06:38.600
Everything is abstract.

06:38.600 --> 06:42.440
This means that a file doesn't need to be anything physical.

06:42.440 --> 06:43.440
There is support.

06:43.440 --> 06:48.040
I mean, you cannot map a full file in memory and then work on it, because this is abstracted

06:48.040 --> 06:49.120
by the IO.

06:49.120 --> 06:56.520
So you can map a remote file running in a remote instance of R2, so you can run R2 as

06:56.520 --> 06:58.120
an instance.

06:58.120 --> 07:01.760
And then you can map, for example, like a ptrace backend, which is basically reading

07:01.760 --> 07:03.520
and writing memory from another process.

07:03.520 --> 07:06.480
And this is another IO interface.

07:06.480 --> 07:08.600
And all that stuff is just the file descriptor.

07:08.600 --> 07:14.160
So when you have one IO open, then you can map this file descriptor into separate maps.

07:14.160 --> 07:18.480
A map is basically a portion of the memory taken from the file descriptor.

07:18.480 --> 07:23.040
So you say that from this offset to this offset from this file descriptor, we'll be mapping

07:23.040 --> 07:27.080
this virtual address in the IO space of R2.

07:27.080 --> 07:29.040
And then there are IO banks.

07:29.040 --> 07:30.940
And the IO banks are basically a bunch of maps.

07:30.940 --> 07:36.020
So you can have separate memory spaces, like, for example, you want to manipulate a thread

07:36.020 --> 07:37.100
local stretch.

07:37.100 --> 07:42.400
You can have one IO space that only contains the contents of the thread local stretch.

07:42.400 --> 07:48.100
But then there is another bank that contains all the memory layout of the processing memory.

07:48.100 --> 07:50.440
And you can do that just by typing comments.

07:50.440 --> 07:52.440
You can do this also by using the API.

07:52.440 --> 07:57.600
But anyway, it's also possible to create, like, secret memory maps, memory layouts.

07:57.600 --> 08:04.520
For example, B850 is like an architecture that is used for auto mobile and things like

08:04.520 --> 08:05.520
that.

08:05.520 --> 08:09.280
And this architecture basically relies on having, like, some solid infrastructure.

08:09.280 --> 08:12.480
So you see there are some models that have, like, two CPUs executing the same code at

08:12.480 --> 08:13.480
the same time.

08:13.480 --> 08:20.280
And there is, like, a verification that two CPUs are doing exactly the same at runtime.

08:20.280 --> 08:22.840
And the memory of this CPU is basically circular.

08:22.840 --> 08:25.600
So there is some references that are going backward.

08:25.600 --> 08:30.280
So you have, like, one instruction at the zero address that is referencing something

08:30.280 --> 08:31.280
up.

08:31.280 --> 08:35.280
And this something up is basically going to the negative of other space.

08:35.280 --> 08:38.840
And this negative other space is not 52-bit in size.

08:38.840 --> 08:41.260
It's 26, for example.

08:41.260 --> 08:44.120
So you can basically configure these kind of things inside the root.

08:44.120 --> 08:49.420
And you can basically get emulation, all the flags, which are basically naming offsets,

08:49.420 --> 08:50.620
in all these things.

08:50.620 --> 08:53.440
And everything will be shaped properly.

08:53.440 --> 08:59.440
You can also define bit size at memory spaces, like, seven bit bytes and things like this.

08:59.440 --> 09:02.000
It's also able to parse binary formats.

09:02.000 --> 09:06.340
This works on any of the memory layouts that I said before.

09:06.340 --> 09:07.340
So you can parse from memory.

09:07.340 --> 09:08.980
You can parse from disk.

09:08.980 --> 09:17.240
There is support for the most known formats, from console binary, from headers, like, etc.

09:17.240 --> 09:21.440
But there is also for LP, Markov, etc.

09:21.440 --> 09:26.480
It's also parsing, DWARF, PDB, and other debug information.

09:26.480 --> 09:31.480
This is only for getting, like, others of memory, taking, like, a file name and so on.

09:31.480 --> 09:34.240
It's not really exporting all the structures and so on.

09:34.240 --> 09:38.600
But it's also possible to do that in the future or using external libraries.

09:38.600 --> 09:46.600
It's also parsing, like, class information from Swift, Objective-C, or C++ binaries.

09:46.600 --> 09:50.000
And all that stuff is integrated inside of those.

09:50.000 --> 09:56.280
So you can, it's subtracting all the information from all these final formats into single naming.

09:56.280 --> 10:01.560
So for example, imports in a P is not the same as, like, an import in ELF.

10:01.560 --> 10:02.600
But for, or two is the same.

10:02.600 --> 10:06.960
So when you're, when it leaves what the, a binary is importing from other libraries,

10:06.960 --> 10:08.760
you can just use give me the imports.

10:08.760 --> 10:13.600
You don't have to use, like, different APIs or different comments depending on the, on

10:13.600 --> 10:14.860
the file format.

10:14.860 --> 10:19.880
So it's unifying all the formats into a single naming.

10:19.880 --> 10:22.200
It's also for disassembling and assembling.

10:22.200 --> 10:24.800
It's using, like, one API.

10:24.800 --> 10:28.440
So there is, like, a library that exposes an interface for doing this.

10:28.440 --> 10:30.840
And this library exposes plugins.

10:30.840 --> 10:33.680
So there's, like, plugins that are used by this API.

10:33.680 --> 10:39.240
And then you can basically implement, like, new architectures, like, writing plugins for,

10:39.240 --> 10:41.080
for this library.

10:41.080 --> 10:44.400
But it's not, not only used for assembling and disassembling, which is basically text

10:44.400 --> 10:45.520
bytes.

10:45.520 --> 10:47.960
There is more low level detailed information.

10:47.960 --> 10:53.640
Like you can, for some architectures you can get, like, a structure metadata, like, which

10:53.640 --> 10:57.740
is the first operand, which is the size of the second argument, things like this.

10:57.740 --> 10:59.040
But it's also exposing a seal.

10:59.040 --> 11:04.400
A seal is, like, a very simple text interface for explaining what an instruction is doing

11:04.400 --> 11:05.400
at low level.

11:05.400 --> 11:07.560
So it's kind of, it's very similar to fourth.

11:07.560 --> 11:09.440
Like a stack-based machine.

11:09.440 --> 11:11.560
And it's basically one statement separated by comma.

11:11.560 --> 11:18.680
So you have, like, o, comma, a x, comma, equals means that it will be pushing the number,

11:18.680 --> 11:22.720
then pushing the resistor name, and then pushing the operation, which is the equal, and then

11:22.720 --> 11:28.300
popping up from the operation to execute the statement.

11:28.300 --> 11:34.520
The reason for that is because there are so many ways to extend or to define an architecture,

11:34.520 --> 11:39.400
and there are some really fucked up things that can be done in so many architectures.

11:39.400 --> 11:44.880
So I was not going to define, like, extensible structures or doing some really complex things

11:44.880 --> 11:49.560
because at the end I was always finding, like, something that was not compatible with another

11:49.560 --> 11:50.560
architecture.

11:50.560 --> 11:54.800
And I end up, like, saying, okay, I just can't define, like, a comma-separated string that

11:54.800 --> 11:59.120
it's just allocated in a single memory chunk, and I can just split it by comma and then

11:59.120 --> 12:00.840
emulate that.

12:00.840 --> 12:05.800
So there is a bunch of tools or libraries that are using a seal to extract this information

12:05.800 --> 12:10.600
and then use that for emulation, use that for extracting information from a specific

12:10.600 --> 12:16.160
instruction, or even for the compiling.

12:16.160 --> 12:20.160
It's very portable, so it works on, supports debugging also.

12:20.160 --> 12:23.080
So you can do local and remote debugging.

12:23.080 --> 12:29.960
This means that you can run R2 as a local debugger in your Linux Mac or iOS device,

12:29.960 --> 12:34.800
but you can also attach to a remote GDB or one DBG, etc.

12:34.800 --> 12:37.360
It's a functionality for searching for different patterns.

12:37.360 --> 12:39.920
So you can search for strings, access the minimal values.

12:39.920 --> 12:44.760
You can also find, like, find me something that is repeated multiple times, and then

12:44.760 --> 12:48.120
it will be finding, like, if there is any pattern that is repeated many times and give

12:48.120 --> 12:50.480
you the offset of these things.

12:50.480 --> 12:56.200
It's also able to generate function signatures, so by taking all the whole analysis for the

12:56.200 --> 12:59.200
program, it will identify all the functions, basic blocks, etc.

12:59.200 --> 13:02.780
And then you can generate, like, metadata for each of these functions.

13:02.780 --> 13:07.160
And this metadata can be imported again to search for this information in another binary.

13:07.160 --> 13:12.240
So you have, like, one binary with dwarf information or debug symbols, then you can re-import this

13:12.240 --> 13:16.760
into a binary that is a strip it, and then you can basically identify these data structures

13:16.760 --> 13:21.640
or functions in another binary that is not containing this data.

13:21.640 --> 13:26.400
It's also possible to give code level, but you can also give data.

13:26.400 --> 13:31.880
You can find, like, using delta diffing, so you have, like, two binaries that contain

13:31.880 --> 13:37.000
the same data, but in different offsets, it will identify which offset is the ship at

13:37.000 --> 13:39.800
the end of the binary and which is the main difference from that.

13:39.800 --> 13:44.360
It's not byte per byte level instruction checking.

13:44.360 --> 13:48.560
You can also give basic blocks, like, you can take the two control flow graphs and then

13:48.560 --> 13:53.080
identifying which basic block is added, which is removed, or if there is, like, a percentage

13:53.080 --> 13:57.600
of difference, so you can use that for bind diffing.

13:57.600 --> 14:02.200
And you can also find differences, like, A, B, D, for getting, like, there is new symbols

14:02.200 --> 14:06.280
removed or things like that.

14:06.280 --> 14:12.800
And I also took code from GRAP group, which is basically the bootloader, and I used that

14:12.800 --> 14:15.880
for parsing file systems.

14:15.880 --> 14:20.840
Things at GRAP is doing a lot of things for, like, assuming that the file system is correct,

14:20.840 --> 14:23.200
and R2 will never assume that anything is correct.

14:23.200 --> 14:27.680
So if there is, like, a corrupted file system, I want to be able to mount it.

14:27.680 --> 14:30.800
So R2 is using this code basically for mounting file systems.

14:30.800 --> 14:35.880
You can have, like, a fake or, like, a virtual file system interface in Sartre 2, and you

14:35.880 --> 14:38.480
can use that for mounting local or remote file systems.

14:38.480 --> 14:39.480
You can use R2 free.

14:39.480 --> 14:42.760
I will show that later, but I don't have time for showing it, but anyway, I will...

14:42.760 --> 14:44.760
You can use Free.

14:44.760 --> 14:49.000
Which is, like, a tool for injecting code in remote applications, and you can use TCP

14:49.000 --> 14:51.600
or USB for communicating with that.

14:51.600 --> 14:52.600
And then Free.

14:52.600 --> 14:55.120
That can expose, like, an interface for accessing files remotely.

14:55.120 --> 14:59.920
So you can mount zips in a remote file system, extract the zip contents from one binary,

14:59.920 --> 15:06.320
parse the binary in local, mount that memory layout in local, and then whatever you would

15:06.320 --> 15:08.520
like to do with these things.

15:08.520 --> 15:14.400
Okay, obviously there is, like, a huge amount of things that can be done with that, so there

15:14.400 --> 15:16.000
is a need for a package manager.

15:16.000 --> 15:17.080
So I wrote R2-PM.

15:17.080 --> 15:21.560
It was like a 200-line shell script, so it's not really a big thing.

15:21.560 --> 15:25.480
But one year ago, they started to write it in C, so this way you can basically run the

15:25.480 --> 15:28.840
package manager anywhere, even in Windows.

15:28.840 --> 15:33.760
So it doesn't depend on anything that is not the same R2.

15:33.760 --> 15:38.480
So this package manager is basically pulling a zip repository, and this repository can

15:38.480 --> 15:39.840
contain, like, scripts.

15:39.840 --> 15:44.160
And this script is basically defining a very simple way for installing and uninstalling.

15:44.160 --> 15:48.560
So it defines instructions for compiling and installing the plugin.

15:48.560 --> 15:54.200
And, yeah, there is, like, basically a amount of tools that are installed in your home,

15:54.200 --> 15:58.120
and also plugins that are loaded by R2.

15:58.120 --> 16:03.920
So the most common or most used plugins for R2 are, for example, about the compilers.

16:03.920 --> 16:04.920
You have, like, R2-DEG.

16:04.920 --> 16:07.280
You have R2-GIDRA, R2-RED-DEG.

16:07.280 --> 16:11.040
So if you know GIDRA, for example, they provide, like, a compiler.

16:11.040 --> 16:16.320
There is, like, a part of the compiler which is written in C++, not in Java.

16:16.320 --> 16:21.800
And this code can be reused for writing at a compiler, so depending on the whole Java

16:21.800 --> 16:22.800
thing.

16:22.800 --> 16:29.560
Then there is RED-DEG, which is the compiler based on LLVM and a bunch of parallel scripts

16:29.560 --> 16:31.200
that mess the thing.

16:31.200 --> 16:36.760
And they basically use the compiler toolchain to do the backwards steps to get from the

16:36.760 --> 16:42.080
binary disassembly to get, like, C-like code for the compiling.

16:42.080 --> 16:44.120
Then you can also use the afra.

16:44.120 --> 16:46.920
There is support for signatures for IDA.

16:46.920 --> 16:48.800
There is, like, native signatures.

16:48.800 --> 16:52.720
There is, like, some repository for people writing this.

16:52.720 --> 16:54.220
And then there is support for to Frida.

16:54.220 --> 16:58.320
If you know Frida, who knows Frida?

16:58.320 --> 16:59.720
Raise your hand.

16:59.720 --> 17:00.720
Okay, half of the room.

17:00.720 --> 17:02.240
It's not the compiler, right?

17:02.240 --> 17:03.240
No.

17:03.240 --> 17:08.720
Frida is a tool that basically injects code in a remote process.

17:08.720 --> 17:11.960
And then there is an agent that is running in a separate thread inside the process.

17:11.960 --> 17:14.760
So you can basically instrument the process at runtime.

17:14.760 --> 17:19.900
And you can basically inject JavaScript code or C or assembly inside the remote process

17:19.900 --> 17:21.760
and instrument that.

17:21.760 --> 17:22.760
You can use that for profiling.

17:22.760 --> 17:24.480
You can use that for modifying behavior.

17:24.480 --> 17:29.080
You can use that for tracing APIs, identifying when the specific function is called with

17:29.080 --> 17:34.640
some arguments and then execute some code inside the remote process.

17:34.640 --> 17:36.640
Most people use JavaScript for doing this.

17:36.640 --> 17:41.720
But you can also use C or with libgam or whatever.

17:41.720 --> 17:46.560
We basically use that for documentation on iOS and Android applications.

17:46.560 --> 17:50.520
So you can use R2 Frida to have, like, an R2 interface for interfacing with Frida, which

17:50.520 --> 17:53.640
means that you don't need to type long JavaScript one-liners.

17:53.640 --> 17:59.280
You can also use R2 comments, like, which are pretty mnemonic and easy to type if you

17:59.280 --> 18:00.280
know them.

18:00.280 --> 18:09.560
And there is also support for external assemblers, like NuGAS or the unicorn library, which is

18:09.560 --> 18:12.560
kind of like a stripping code from LLVM.

18:12.560 --> 18:18.760
And there is also problem solvers, like Radios, as you saw for anger, that are plugins that

18:18.760 --> 18:20.280
basically you define some constraints.

18:20.280 --> 18:23.840
You have a function and you define, OK, I want to know which are the arguments that

18:23.840 --> 18:27.000
I need to pass to this function to reach these specific others.

18:27.000 --> 18:32.840
Like you want to know, for example, if it's possible to create a buffer overflow in a

18:32.840 --> 18:35.520
specific variable in a local stack.

18:35.520 --> 18:38.600
Or you want to define which, or you want to know which is the password that matches a

18:38.600 --> 18:40.120
specific crypto algorithm.

18:40.120 --> 18:45.320
So you can use that to define, OK, I want to know which is the block of bytes of one

18:45.320 --> 18:48.800
specific length that generate this hash, for example.

18:48.800 --> 18:49.800
Things like that.

18:49.800 --> 18:51.480
And these won't be brute forcing.

18:51.480 --> 18:54.480
It's like using problem solvers like Z3 and so on.

18:54.480 --> 18:59.440
So there is like different plugins that are integrated in R2 to use from R2 comments.

18:59.440 --> 19:03.080
And then you can define the preconditions, post-conditions and the boundaries of the

19:03.080 --> 19:04.080
function to emulate.

19:04.080 --> 19:07.320
Then there is also support for parsing data structure.

19:07.320 --> 19:09.680
There is support for Kaitai, there is support for Polk.

19:09.680 --> 19:14.840
This was integrated last week because I didn't know it was possible to have like a library

19:14.840 --> 19:15.840
of Polk.

19:15.840 --> 19:18.760
I was seeing it as a program, not a library.

19:18.760 --> 19:21.180
So it's integrated, but it's not fully integrated.

19:21.180 --> 19:28.520
So I plan to continue integrating it to use like for disassembling, for parsing, headers,

19:28.520 --> 19:30.420
etc.

19:30.420 --> 19:32.760
So what can you do with R2Frieda?

19:32.760 --> 19:38.240
R2Frieda is basically, as I said before, is front-end for R2Frieda.

19:38.240 --> 19:40.700
You can run scripts in your host, in your agent site.

19:40.700 --> 19:46.440
So you can write a JavaScript program that runs in R2, but it can be also loaded in the

19:46.440 --> 19:47.440
remote site.

19:47.440 --> 19:49.400
And you can load and unload plugins.

19:49.400 --> 19:53.960
So you can basically extend the R2Frieda comment set with JavaScript plugins that are loaded

19:53.960 --> 19:56.040
and unloaded at runtime.

19:56.040 --> 19:57.320
It's also scriptable with R2Pipe.

19:57.320 --> 20:03.120
So you can write a program in Python, JavaScript or the language you like that interacts and

20:03.120 --> 20:09.140
automates comments and actions in the host site or the remote site of the R2Frieda site.

20:09.140 --> 20:14.000
So you can spawn applications, you can attach to local remote processes, you can use different

20:14.000 --> 20:18.080
protocol or communication channels like USB, TCP, etc.

20:18.080 --> 20:21.480
And you can promote the file systems.

20:21.480 --> 20:27.840
You can use that for interfacing with tracing, APIs, profiling, and also supports extracting

20:27.840 --> 20:34.840
metadata from Java, Dalvik, Objective-C, and Swift support will be ready by the end of

20:34.840 --> 20:39.000
this year because right now it's supported but it's kind of unstable and the API is changing.

20:39.000 --> 20:41.680
So yeah, certainly it will get better.

20:41.680 --> 20:45.400
Okay, so let's talk about R2Pipe.

20:45.400 --> 20:53.200
Since the first release that I did this year was the 580, I plan to keep ABI stable.

20:53.200 --> 20:54.940
Actually I use ABI in the CI.

20:54.940 --> 20:59.480
So every commit or port records that people send to the project, they verify that it's

20:59.480 --> 21:00.480
ABI stable.

21:00.480 --> 21:02.760
This means that I'm not breaking the ABI.

21:02.760 --> 21:08.280
You can rebuild or update R2 without recompiling all the plugins or the tools that are using

21:08.280 --> 21:10.040
R2Libraries.

21:10.040 --> 21:11.040
This is pretty cool.

21:11.040 --> 21:16.320
And the thing is that I was having some kind of like a contract with myself that I don't

21:16.320 --> 21:20.480
break ABI but this is something that you end up like doing in Ruby when code by hand.

21:20.480 --> 21:25.920
I'm having like a tool that can automate this is great.

21:25.920 --> 21:31.520
But I wanted to have like a runtime, something that can you run from R2 like interpreter

21:31.520 --> 21:38.560
that is not a custom language or like an external library that needs to be integrated and it's

21:38.560 --> 21:39.560
really big.

21:39.560 --> 21:43.680
So I was experimenting for some time with different languages and I ended up like realizing

21:43.680 --> 21:45.600
that QuickJS is the only option.

21:45.600 --> 21:47.640
So I mean Lua is using SetJump.

21:47.640 --> 21:52.520
So you cannot compile with Lua as a WebAssembly plugin.

21:52.520 --> 21:55.560
Also if you want to use SetJump with threads is kind of a mess.

21:55.560 --> 22:00.120
So I end up like picking QuickJS which is the same JavaScript runtime that Frida is

22:00.120 --> 22:01.120
using.

22:01.120 --> 22:05.880
I pick the code from there and as long as every commit in R2 is verifying with fuzzers,

22:05.880 --> 22:08.960
other sanitizers and so on, I end up like finding a lot of issues there.

22:08.960 --> 22:11.240
I send like 12 patches to the project.

22:11.240 --> 22:16.280
So it's basically the fork that is used by Frida.

22:16.280 --> 22:19.280
So all these patches are upstream now.

22:19.280 --> 22:25.040
And the idea is basically that you can use TypeScript and JavaScript from R2 and you can

22:25.040 --> 22:26.120
write code like this.

22:26.120 --> 22:30.480
So you basically have like an R2 pipe interface but it's running inside R2.

22:30.480 --> 22:31.760
You can use this from WebAssembly.

22:31.760 --> 22:38.760
So you can basically open RadaR2.online and then you have like a terminal that you can

22:38.760 --> 22:39.760
run R2.

22:39.760 --> 22:45.600
You can drop a binary inside the browser and use JavaScript to automate a bunch of actions

22:45.600 --> 22:48.400
for analyzing the binary.

22:48.400 --> 22:51.480
Basically as I said before, you have like a command that you run and then you get the

22:51.480 --> 22:55.560
output of the command in exchange.

22:55.560 --> 23:01.440
As long as most of the commands in R2 spit out JSON, you can basically use the CMDJ which

23:01.440 --> 23:05.760
basically get the output of the command and pass the output as JSON.

23:05.760 --> 23:10.520
And then you get like a structured data that you can use for extracting it or processing

23:10.520 --> 23:12.160
it with the tools you like.

23:12.160 --> 23:16.760
I think that JavaScript and JSON are quite standard and useful nowadays.

23:16.760 --> 23:19.480
So you don't need to learn new things.

23:19.480 --> 23:22.040
But there is support for so many other languages.

23:22.040 --> 23:27.640
Like I said here, there is Python support, Rust, Node.js, Rabi, Guile, Nivlisp, Haskell,

23:27.640 --> 23:29.280
Delang, Swift, etc.

23:29.280 --> 23:34.520
So it's very easy to write this simple interface and you can use basically different interfaces

23:34.520 --> 23:35.920
to communicate with R2.

23:35.920 --> 23:41.680
So you can use like a fork and a pipe or you can also use like a TCP socket or an HTTP

23:41.680 --> 23:44.400
interface, WebSockets, whatever you like.

23:44.400 --> 23:48.840
And for the TypeScript thing, it's pretty cool because I'm writing like a types description

23:48.840 --> 23:55.480
that basically defines the APIs of R2 and also the structures that the commands are

23:55.480 --> 23:57.520
returning in JSON format.

23:57.520 --> 24:02.320
This means that you can get the JSON of a command and then you can generate a schema

24:02.320 --> 24:03.320
out of that.

24:03.320 --> 24:05.120
And this schema can be used like a types.

24:05.120 --> 24:14.080
So if you use TypeScript, Lisp server, like the language service that autocompletes the

24:14.080 --> 24:19.520
code, you can basically use that for using tap to autocomplete all the code.

24:19.520 --> 24:24.680
So for example, you can analyze function, you press p.i and then you'll get all the

24:24.680 --> 24:25.720
function name.

24:25.720 --> 24:27.120
You can get all the basic blocks.

24:27.120 --> 24:30.760
For each basic block, you can use tap to get all the fields of this basic block like the

24:30.760 --> 24:35.720
address, the amount of instructions, et cetera.

24:35.720 --> 24:39.000
And for each instruction, you can get the mnemonics, et cetera.

24:39.000 --> 24:40.000
And everything runs.

24:40.000 --> 24:45.680
I mean, you can just like Visual Studio Code or Nailbeam or whatever you like, or MX, I

24:45.680 --> 24:51.960
guess that's also SuperSellows P. And use that for automating and scripting using these

24:51.960 --> 24:53.760
languages.

24:53.760 --> 24:59.000
So R2 is able to visualize that and code in so many different ways.

24:59.000 --> 25:09.260
So all this, I mean, I can press e so you can get the source code of the slides.

25:09.260 --> 25:13.140
So you can see here, this is the content of the slide.

25:13.140 --> 25:18.760
So it's running a bunch of comments in R2 and the output is generated inside the visual

25:18.760 --> 25:22.240
mode that you saw before.

25:22.240 --> 25:23.600
So you can generate graph.

25:23.600 --> 25:28.920
You can, from the control flow graph, you can also generate like a vertical or horizontal

25:28.920 --> 25:31.080
line graph like frame things.

25:31.080 --> 25:37.000
You can disassemble, you can render pictures in bit formats, in RGB format.

25:37.000 --> 25:43.040
You can also generate like a different, like comparing data and identifying which bytes

25:43.040 --> 25:44.640
are changing by changing colors.

25:44.640 --> 25:49.420
You can define like a color for a specific bunch of addresses.

25:49.420 --> 25:54.100
So when you are disassembling, you can mark some regions like hot code or this is like

25:54.100 --> 25:55.960
a portion of code that you're interested in.

25:55.960 --> 25:59.440
And then you get highlights for one specific register.

25:59.440 --> 26:04.080
So you want to highlight SP and then you get SP highlighted in the whole disassembly, things

26:04.080 --> 26:05.840
like that.

26:05.840 --> 26:13.160
But also there is also UIs, but I'm like common line guy, so I prefer to use the shell.

26:13.160 --> 26:18.000
But there is like a Qt interface, but also I started to write like a new graphic interface

26:18.000 --> 26:25.620
using WX widgets because I mean, Qt is great because it's big and it's also so many things.

26:25.620 --> 26:28.920
But I don't like the license, it's so huge.

26:28.920 --> 26:34.960
It's getting like a really huge and it's not handy for the kind of things that I like to

26:34.960 --> 26:35.960
do.

26:35.960 --> 26:39.540
So when I'm developing, I like to have fun and I don't want to be suffering because of

26:39.540 --> 26:43.360
license or companies that are developing things in the background.

26:43.360 --> 26:54.560
So I wrote so many UIs for it too, like in GTK, in using Imble, also other HTML, CSS for

26:54.560 --> 26:58.600
the web UI because I have like a web server inside.

26:58.600 --> 27:04.320
So at the end I want to have fun and I don't want to spend time like learning new APIs

27:04.320 --> 27:05.320
and so on.

27:05.320 --> 27:12.640
So I'm writing like a WG widgets API, a user interface and the idea for this is to not

27:12.640 --> 27:17.680
follow the same flow of interaction flows that people use.

27:17.680 --> 27:21.600
So I want to have like a common line interface but integrated in the UI.

27:21.600 --> 27:25.560
So I want to be able to have multiple windows using multiple sessions or drag and drop things

27:25.560 --> 27:30.760
from one window to another one instead of having like a big thing with panels and the

27:30.760 --> 27:33.280
common interaction ways.

27:33.280 --> 27:35.000
So what's the future?

27:35.000 --> 27:38.240
So there is short and long term plans.

27:38.240 --> 27:44.680
It all depends on my time because most of the things I maintain it or done by me.

27:44.680 --> 27:50.360
There is a lot of contributors but they come and leave so there is like not really a core

27:50.360 --> 27:57.040
developer team or there is no really big plans for having like big organizations and so on.

27:57.040 --> 28:01.960
But the things that I want to be able to keep pushing like stable releases, I want to have

28:01.960 --> 28:07.160
like a stability mainly because there is some people or companies or users that are writing

28:07.160 --> 28:10.800
tools on top of this and I don't want them to write things every time that I make a release

28:10.800 --> 28:13.120
or break without updating this.

28:13.120 --> 28:18.720
I want to have like a create, so which is a rushed API that you can basically specify

28:18.720 --> 28:23.360
the version of Erto that you want to ship and then this create will build Erto inside

28:23.360 --> 28:28.280
with a specific version and then you can use your Erto esthetic link inside your program.

28:28.280 --> 28:34.240
So you don't need to depend on system installations or depend on other things like that.

28:34.240 --> 28:38.720
I want to basically reduce the tech depth because as long as I'm alone doing most of

28:38.720 --> 28:42.880
the things I don't want to depend on humans so I want to reduce the amount of things that

28:42.880 --> 28:44.320
are done manually.

28:44.320 --> 28:50.560
So for example a friend of me wrote the Flatpak integration so there is like a bot that basically

28:50.560 --> 28:55.720
detects when there is like a new release in Erto or in Yaito and when this happens it's

28:55.720 --> 29:00.040
basically pulling the code from all the projects, generating a change log generating a new build

29:00.040 --> 29:03.360
and publishing that automatically.

29:03.360 --> 29:10.600
And you basically get like a graphical interface for Linux and Windows for free.

29:10.600 --> 29:17.360
I want to improve the code coverage and all the testing for fuzzing and yeah, there is

29:17.360 --> 29:23.840
like a lot of things that you can see and if you have questions please let me know after

29:23.840 --> 29:24.840
the talk with some viewers.

29:24.840 --> 29:26.840
I guess that everybody is hungry so.

29:26.840 --> 29:54.340
All right, thank you guys Cam from phased

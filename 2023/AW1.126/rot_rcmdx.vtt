WEBVTT

00:00.000 --> 00:19.720
So, we are ready for the second talk.

00:19.720 --> 00:25.720
And yeah, I'm happy to have Joel here from SPP talking about Rayc audition monitoring

00:25.720 --> 00:28.520
and how to do that with open source software.

00:28.520 --> 00:29.520
Hello everybody.

00:29.520 --> 00:31.760
I'm happy to see that it's this crowded.

00:31.760 --> 00:34.720
I wasn't expecting that, but I'm pleasantly surprised.

00:34.720 --> 00:41.120
So I'm going to talk to you today from a very niche department of SBB, which is measurement

00:41.120 --> 00:42.520
and diagnostics.

00:42.520 --> 00:46.760
We're basically part of the infrastructure like Eloy before.

00:46.760 --> 00:50.440
We're trying to maintain and run the infrastructure in Switzerland.

00:50.440 --> 00:54.800
It's not such a big country, but a very dense train network.

00:54.800 --> 00:59.600
So the problems we face is basically that we have shallow train passing times and a

00:59.600 --> 01:02.760
lot of maintenance to do.

01:02.760 --> 01:10.920
And to be able to do this maintenance at the right moment, we have the measurement and

01:10.920 --> 01:14.280
diagnostics department, which I am part of.

01:14.280 --> 01:20.360
And we basically have two major goals.

01:20.360 --> 01:26.840
One is to maintain the safety of the system and the other one is to gather data of the

01:26.840 --> 01:32.880
infrastructure assets in order to be able to do predictive maintenance or maintenance

01:32.880 --> 01:37.720
at the right moment and just to make sure that the money spent is well spent in order

01:37.720 --> 01:46.680
that assets can live the most long without breaking down.

01:46.680 --> 01:52.120
Here you can see two of our measurement trains, they're typically sensor-based measurements,

01:52.120 --> 01:58.640
typically optically made measurements, and we'll go a little bit deeper into that afterwards.

01:58.640 --> 02:03.000
Normally I was planning to be here with one of my colleagues, Jean Frederick.

02:03.000 --> 02:09.360
Unfortunately he got sick, catch the cold, so I'm here alone, but I thought I will still

02:09.360 --> 02:16.000
have his picture on a slide in case somebody is interested in what we're doing later on.

02:16.000 --> 02:19.360
You will know him by faith at least.

02:19.360 --> 02:24.720
He is the guy who is doing a lot of the technical implementation, solving a lot of the technical

02:24.720 --> 02:31.760
problems and I'm more on the strategic part of the project.

02:31.760 --> 02:36.280
And yeah, we'll leave it by that.

02:36.280 --> 02:43.080
Such a measurement from sensor to information is quite a long way, so it's a very complex

02:43.080 --> 02:44.680
thing, such a measurement system.

02:44.680 --> 02:51.560
I've drawn here a couple of steps from beginning to end for track geometry measurement.

02:51.560 --> 02:57.920
As I said before, most of them are optical by now, so what you actually do is you have

02:57.920 --> 03:03.000
a laser plane that shines on your track and then you have a camera that makes a photo,

03:03.000 --> 03:08.920
and the first picture is basically a digital photo of the rail.

03:08.920 --> 03:15.480
And then you extract this contrast change and you do a lot of software and you get the

03:15.480 --> 03:18.920
second photo, which is a half profile of your rail.

03:18.920 --> 03:22.320
Then you do the same thing for the second half of your rail and you get a full profile

03:22.320 --> 03:24.360
and you start measuring on it.

03:24.360 --> 03:30.040
And you do, for instance, it may be a bit difficult to see, but there's a lot of little

03:30.040 --> 03:35.200
crosses on the profile and those are the points that you're interested in, the top of your

03:35.200 --> 03:41.160
rail or there's 1.14 millimeters below the top of your rail.

03:41.160 --> 03:45.440
And from this, if you have both rails, you can deduce your track geometry.

03:45.440 --> 03:48.000
An instance, the gauge and the...

03:48.000 --> 03:49.000
Louder.

03:49.000 --> 03:50.000
Okay.

03:50.000 --> 03:54.040
I will talk louder.

03:54.040 --> 04:00.360
You will have the possibility to deduce the gauge or the elevation or the longitudinal

04:00.360 --> 04:03.160
levels of your tracks.

04:03.160 --> 04:10.520
And you can then print them in form of the fourth picture, like as 1D plots.

04:10.520 --> 04:17.080
Afterwards, you've gathered this information, you have to deduce what to do with it.

04:17.080 --> 04:25.200
So in SBB and I think in a lot of other countries in Europe now too, you try to do analysis

04:25.200 --> 04:31.920
over time to see how the track geometry or other parameters in your railway system change

04:31.920 --> 04:40.560
over time and find critical passes to where you know in some time in the future that asset

04:40.560 --> 04:41.720
will break.

04:41.720 --> 04:45.920
And then you can do maintenance in the right moment and assure that it won't break or that

04:45.920 --> 04:51.400
it stays safe a little bit longer or you can deduce, oh, I'm too late, I have to change

04:51.400 --> 04:53.720
that.

04:53.720 --> 05:02.160
And RCM, our software suite that we built ourselves is basically an acronym for rail

05:02.160 --> 05:10.880
condition monitoring saying this whole first part of the value chain here up to the fourth

05:10.880 --> 05:12.640
picture.

05:12.640 --> 05:18.840
And we try to automate that and to make it a bit more generic.

05:18.840 --> 05:26.400
And we're currently trying to do that with the now shown architecture.

05:26.400 --> 05:29.000
So we have the measurement platform on the left side.

05:29.000 --> 05:35.720
It gets from the administrative tools, for instance, topology, like to know what kind

05:35.720 --> 05:38.680
of tracks exist in Switzerland.

05:38.680 --> 05:41.100
We've talked yesterday with Infra-Bell.

05:41.100 --> 05:42.200
It's quite similar.

05:42.200 --> 05:47.460
And I've also talked to people from SNCF, I've also talked to people from Network Rail.

05:47.460 --> 05:58.800
At the end, you need a topology to put your measurement data to an asset, to a certain

05:58.800 --> 06:01.000
location in the physical world.

06:01.000 --> 06:05.640
And while before I was not sure, before we started with this project, I was not sure

06:05.640 --> 06:11.320
if this will be a big problem, if the topologies will be vastly different from country to country.

06:11.320 --> 06:17.640
But at the end, since the requirements are very similar from country to country, I came

06:17.640 --> 06:21.680
to observe that the solutions that came up are also very similar.

06:21.680 --> 06:30.020
And I do believe that it's possible to have a generic topology description between countries.

06:30.020 --> 06:35.960
And this will be, we'll see later on, a bit crucial for this project to work in different

06:35.960 --> 06:39.720
countries.

06:39.720 --> 06:48.280
Once we gathered the measurement on the measurement platform, we have this automated data cleansing

06:48.280 --> 06:51.080
and quality control processing platform.

06:51.080 --> 06:54.720
And the first, basically the first thing is the positioning.

06:54.720 --> 06:58.960
As I said before, that would be to tie the measurements to a physical location on your

06:58.960 --> 07:00.260
topology.

07:00.260 --> 07:02.760
And the second thing that we do is a conversion.

07:02.760 --> 07:10.040
So whatever comes into one of those measurement, whatever comes from one of those measurement

07:10.040 --> 07:16.960
platforms, one of those measurement trains, we convert it into our open data format.

07:16.960 --> 07:19.880
And this is the first thing I would like to talk to you about.

07:19.880 --> 07:25.920
How do you say that?

07:25.920 --> 07:28.520
We'll talk about a bit more detail afterwards.

07:28.520 --> 07:35.200
Once we have it in an open format, we do a standardization like the different measurement

07:35.200 --> 07:40.000
systems provide the same measurement in different flavors.

07:40.000 --> 07:45.240
Let's say the gauge ones come in an absolute number, 1.35 meters.

07:45.240 --> 07:49.480
The second system shows it as a deviation from zero.

07:49.480 --> 07:50.520
One shows it in meters.

07:50.520 --> 07:51.520
One shows it in millimeters.

07:51.520 --> 07:56.420
You have to standardize that a little bit in order to be able to compare it afterwards.

07:56.420 --> 08:00.280
We do a consistency check, and then we do a persistence.

08:00.280 --> 08:06.160
And once we persist that data, we have, at least in Switzerland, regulations to follow,

08:06.160 --> 08:13.960
especially on the duration and on the capacity to be able to read the data again in the future.

08:13.960 --> 08:16.400
In Switzerland, this is about 15 years.

08:16.400 --> 08:23.360
So if we do a measurement, we have to guarantee that for the next 15 years, we are able not

08:23.360 --> 08:30.680
only to show the measurement, but also to open it and to read the data.

08:30.680 --> 08:35.840
And this, again, something that is much easier to do if you have an open data format, which

08:35.840 --> 08:42.120
is not proprietary, which is not tied to a specific software or a specific software version

08:42.120 --> 08:46.960
that you have to maintain to.

08:46.960 --> 08:54.200
Then it goes to the presentation layer, and the presentation layer typically can be various

08:54.200 --> 08:55.640
different programs.

08:55.640 --> 09:00.840
In our case in Switzerland, we use E-Rises from Eertman in Germany.

09:00.840 --> 09:04.720
I think there's a couple of other countries in Europe that do that too.

09:04.720 --> 09:09.880
But we also use our own viewing software, which we call RCM Viewer, which will be the

09:09.880 --> 09:15.400
second part of the open source project I would like to talk about, and which can show, obviously,

09:15.400 --> 09:19.800
the open data format that we use.

09:19.800 --> 09:28.320
So once this data is gathered, typically now if you buy a system on the market, there are

09:28.320 --> 09:31.700
different enterprises that sell such systems.

09:31.700 --> 09:37.800
For instance, Mermeck in southern Italy or Placer & Toiler from Austria, which are two

09:37.800 --> 09:39.000
of the biggest players.

09:39.000 --> 09:43.480
Also there's Ensco in the United States.

09:43.480 --> 09:46.520
You get a proprietary format from them.

09:46.520 --> 09:51.360
You may or may not be able to read it, depending on how your contract is.

09:51.360 --> 09:58.920
So I know as NCF had in the past some problems with that, that the contract did not state

09:58.920 --> 10:06.680
that you are allowed to actually know the data format your data comes to you.

10:06.680 --> 10:12.200
Once you've figured that out and that you are able to read it, you will free yourself

10:12.200 --> 10:18.120
from the use of the software that they impose on you if they sell you the measurement system.

10:18.120 --> 10:20.680
We've done that in Switzerland over the last years.

10:20.680 --> 10:23.840
We've had the same issues, don't worry.

10:23.840 --> 10:28.960
Are now at the point where all our measurement systems are either directly delivering an

10:28.960 --> 10:36.440
open data format or at least that we have a full specification of the data format that

10:36.440 --> 10:40.480
is delivered to us in binary.

10:40.480 --> 10:46.920
We're now trying to transpose that into our open format.

10:46.920 --> 10:54.480
For that, with the last measurement train that we acquired, we specified such a format

10:54.480 --> 11:00.960
based on an open standard, which is HDF5, Hierarchical Data Format 5.

11:00.960 --> 11:02.640
You can find it online.

11:02.640 --> 11:05.360
It exists since, I think, 20 years.

11:05.360 --> 11:07.360
It's widely used in the academic world.

11:07.360 --> 11:11.640
It's also the base of MATLAB's.m files, for instance.

11:11.640 --> 11:17.400
It has the advantage that most programming languages and most measurement data programs

11:17.400 --> 11:25.160
like R or the ADM or all others that are out there already have stops or libraries to read

11:25.160 --> 11:28.040
it.

11:28.040 --> 11:36.680
They themselves, HDF5 themselves, says their key features and advantages are metadata with

11:36.680 --> 11:42.360
data, fast IO, big data, and the other stuff that you can read here.

11:42.360 --> 11:49.400
What we try to do is to write a specification upon the HDF5 that is specific for railway

11:49.400 --> 11:57.000
data, but generic enough that it can handle all type of measurement systems.

11:57.000 --> 12:02.720
Basically you have the advantages of HDF5 and on the same time the possibility if you

12:02.720 --> 12:11.080
follow this specification that we wrote that you can find on GitHub that a software like

12:11.080 --> 12:15.820
the one that we built can read it whatever your measurement systems are.

12:15.820 --> 12:19.640
If you buy it from Mermic, if you buy it from Placer Interior, if it's Track Geometry, or

12:19.640 --> 12:26.360
if it's, I don't know, from Sperry, ultrasonic measurements, or whatever else is out there,

12:26.360 --> 12:31.480
as long as you follow the specification, you can use the software to display it.

12:31.480 --> 12:37.520
You can use the software to overlay it, and so on.

12:37.520 --> 12:43.760
We named it RCMDX, Rail Condition Monitoring Data Exchange.

12:43.760 --> 12:50.500
Our key features for it is that it includes the metadata like configuration, but also

12:50.500 --> 12:55.440
the topology, and it makes it completely self-contained.

12:55.440 --> 12:57.860
In 15 years you take one file.

12:57.860 --> 13:03.040
You do not need anything else than the file itself and the specification of the data to

13:03.040 --> 13:07.400
be able to reproduce a view of the data.

13:07.400 --> 13:16.000
On the track, in the system as it was in the moment that the data was gathered, and this

13:16.000 --> 13:18.600
I think helps a lot.

13:18.600 --> 13:23.400
As I said before, it's accessible through the standard HDF5 tools, so you can download

13:23.400 --> 13:27.720
an HDF5 library from their website and directly access the data.

13:27.720 --> 13:31.320
You can also build your own using the programming language.

13:31.320 --> 13:36.920
Python has a stop, and Java, and C++ and C Sharp also.

13:36.920 --> 13:42.900
On the other side, you still have the generosity in order to use whatever measurement system

13:42.900 --> 13:45.200
you want.

13:45.200 --> 13:53.880
Let's see one of the benefits that you would get if you decide to use such a thing.

13:53.880 --> 14:00.880
For us, one of the main benefits is that if it gets adopted by more than one country,

14:00.880 --> 14:07.320
let's say, you get the advantage that in Open Tender where you have to specify what you

14:07.320 --> 14:14.980
want to buy, you can handle the whole data part with just one single phrase.

14:14.980 --> 14:17.880
Please deliver the data in this specification.

14:17.880 --> 14:19.520
You can find it on GitHub.

14:19.520 --> 14:29.520
As soon as more than one tender writes it inside, I think it's basically close to standard

14:29.520 --> 14:31.840
because this market is very small.

14:31.840 --> 14:41.160
The companies that I told you before are basically covering over 80% of the whole market.

14:41.160 --> 14:48.240
As soon as they start to see that it is necessary to deliver their data in this format, you

14:48.240 --> 14:50.120
can get it for free.

14:50.120 --> 14:59.000
I think it's quite a big advantage that could be resulting out of using that.

14:59.000 --> 15:02.000
Of course, then as a result, you have a complete open data.

15:02.000 --> 15:09.640
We will see now I'm switching from the data format to the viewing software.

15:09.640 --> 15:20.240
This also is available already as freeware and will be in future as open source.

15:20.240 --> 15:24.760
Once you have your data in the RCMDX format, as soon as you follow the specification, you

15:24.760 --> 15:27.680
can basically use the software to display it.

15:27.680 --> 15:34.800
It's highly generic in the case that everything that you see now here is a workspace that

15:34.800 --> 15:38.120
can be easily configured by the user.

15:38.120 --> 15:42.640
You can drag and drop every little window inside that workspace, put it somewhere else.

15:42.640 --> 15:45.520
You can configure it to show whatever data you want.

15:45.520 --> 15:47.920
You can change the parameters that are shown.

15:47.920 --> 15:49.880
You can change the boundaries that are shown.

15:49.880 --> 15:55.120
You can change the limits that you want to display.

15:55.120 --> 16:01.920
You can show in parallel and synchronous in time, in space, and also on your topology

16:01.920 --> 16:03.560
different measurement systems.

16:03.560 --> 16:08.200
You can show data from the track geometry system together with video data, together

16:08.200 --> 16:15.280
with optical data, together with ultrasonic data, whatever you think might benefit you

16:15.280 --> 16:16.840
the most.

16:16.840 --> 16:23.480
You can easily do it very complicated or you can try to build new views that are less generic

16:23.480 --> 16:24.840
for an end user.

16:24.840 --> 16:33.340
For instance, for a maintenance manager, if he has to do a specific job, like in our case,

16:33.340 --> 16:42.000
the lower right part, like this part with optical data, he has to find surface defects.

16:42.000 --> 16:48.000
You can put on a specific mask on the viewing software in order to help him to do that more

16:48.000 --> 16:52.000
efficiently.

16:52.000 --> 16:53.000
You've seen it play.

16:53.000 --> 16:56.560
It's like a video that I made before.

16:56.560 --> 17:05.000
This viewing software is currently done in C-sharp and we're trying to put it open source

17:05.000 --> 17:08.640
since I don't know, a bit more than a year.

17:08.640 --> 17:16.480
The main problems that we are facing is we have begun building it like seven years ago

17:16.480 --> 17:23.160
together with a new measurement coach and it has some proprietary libraries in it.

17:23.160 --> 17:29.600
The main ones are Sidechart and Telerik for C-sharp and we're now trying to find a way

17:29.600 --> 17:38.560
to use open source while having those libraries inside because it's very difficult to throw

17:38.560 --> 17:40.400
them out and especially Sidechart.

17:40.400 --> 17:47.800
There's no good alternative for the moment in order to be a performant viewing software.

17:47.800 --> 17:53.280
That's basically where we are right now.

17:53.280 --> 17:56.680
You can already download it on GitHub.

17:56.680 --> 17:58.080
Here's the link.

17:58.080 --> 18:01.520
There's also an overview later on.

18:01.520 --> 18:07.640
We also have a couple of measurement files from Switzerland that you can download to

18:07.640 --> 18:13.160
a couple of workspaces and like that you can see how the data format works, how the viewing

18:13.160 --> 18:18.360
software works, how they interact together and in case of implement your own version

18:18.360 --> 18:23.600
of it.

18:23.600 --> 18:31.280
Of course, the benefit of the viewing software would then be that you are able to do massively

18:31.280 --> 18:39.920
complex views with Synchron, I don't know how you say that in English, display data

18:39.920 --> 18:47.960
at the same time and at the same position or at the same point in the physical world.

18:47.960 --> 18:52.800
Basically the viewing software allows you to include the topology also if it's not exactly

18:52.800 --> 18:54.360
the same.

18:54.360 --> 18:59.620
We have in Switzerland twice a year an update on the topology and obviously some things

18:59.620 --> 19:07.400
changed due to maintenance work, due to new building of the tracks and so on.

19:07.400 --> 19:11.520
The viewing software can handle that in order if you have different states in different

19:11.520 --> 19:13.520
files.

19:13.520 --> 19:19.120
As I said before, every file includes your topology too so then you can display the data

19:19.120 --> 19:24.920
where it is taken on tracks that did not have changes and it will show you where it had

19:24.920 --> 19:33.400
changes and do not display the data in the same way if the track changes were applied.

19:33.400 --> 19:40.560
You can in the viewing software change from one topology view to another one.

19:40.560 --> 19:47.720
You have an easy and powerful presentation layer I think if you do so.

19:47.720 --> 19:51.120
Of course, we talked yesterday about the detail.

19:51.120 --> 19:56.280
If you take a measurement run and you run from 8 o'clock in the morning till noon and

19:56.280 --> 20:01.280
you do a 100 kilometer and you do a circle, then if you show it in time you will have

20:01.280 --> 20:06.140
a straight 1D chart of your measurement data.

20:06.140 --> 20:15.040
If you show it in distance you will have the same thing, a straight chart with a distance

20:15.040 --> 20:17.560
based on the x-axis instead of time.

20:17.560 --> 20:23.100
If you show it in topology then you have a much shorter bit showing an overlay of how

20:23.100 --> 20:26.700
many circles you have run through in the morning.

20:26.700 --> 20:36.080
This is quite an interesting thing to do and it is basically what most easily accessible

20:36.080 --> 20:37.840
viewing software lack.

20:37.840 --> 20:47.220
So this possibility to tie it to your physical location like that.

20:47.220 --> 20:49.800
Then we have the licensing.

20:49.800 --> 20:56.920
We worked a lot together with Cornelius, together with Mahalia and also with Christian which

20:56.920 --> 21:01.240
is sitting back there on the licensing that we will be using.

21:01.240 --> 21:07.800
We decided to use an Eclipse public license after some discussions on what would make

21:07.800 --> 21:11.920
sense mainly because it is a weak copyleft license.

21:11.920 --> 21:20.520
I can imagine a future where a measurement system company uses this software directly.

21:20.520 --> 21:25.520
Say you are a startup company, you built your own measurement system, you need a presentation

21:25.520 --> 21:26.520
layer.

21:26.520 --> 21:34.800
You can take the RCMDx data format and the viewing software and create your own possibly

21:34.800 --> 21:42.280
commercial version of it by adding your own flavor to it and still be able to sell it

21:42.280 --> 21:47.600
as long as the core functionality, if you improve it, you send it back upstream.

21:47.600 --> 21:54.800
That would be like the ideal version that we could attend in the future.

21:54.800 --> 21:57.640
That is basically one of the reasons why I am here too.

21:57.640 --> 22:02.460
Hope that all of you will go home and use it and spread it and bring your own companies

22:02.460 --> 22:05.560
to use it too.

22:05.560 --> 22:09.760
Let's see an overview.

22:09.760 --> 22:14.680
Right now the most important link is the first one.

22:14.680 --> 22:19.720
SBB has since one week now a project website for this.

22:19.720 --> 22:25.240
If you click on it, maybe something happens.

22:25.240 --> 22:31.120
You will directly get to a website where you can find the...

22:31.120 --> 22:33.160
It does not show.

22:33.160 --> 22:40.080
Thank you.

22:40.080 --> 22:42.320
Why is it so big?

22:42.320 --> 22:47.800
At least you can read it.

22:47.800 --> 22:53.120
You can see the website and there is a couple of links somewhere.

22:53.120 --> 22:55.880
You have sample data that you can download directly.

22:55.880 --> 23:00.880
I think it is more or less one kilometer of data but gives a good impression how the whole

23:00.880 --> 23:02.920
system can work.

23:02.920 --> 23:07.000
If you are really interested in having more data, you can still contact me or Jean Frederick

23:07.000 --> 23:11.480
and we can give you access to it.

23:11.480 --> 23:13.400
There is more on topic.

23:13.400 --> 23:17.680
Normally if it would not be so zoomed out, it would be a bit nicer and on the top right

23:17.680 --> 23:18.960
of the site.

23:18.960 --> 23:24.520
You can directly download the installer for the viewing software and you can directly

23:24.520 --> 23:32.840
go to the GitHub page with the format description.

23:32.840 --> 23:37.080
You also have the workspaces that you have to load into the viewing software.

23:37.080 --> 23:38.640
You can also create your own ones.

23:38.640 --> 23:44.040
That is just a help if you want to play around with it.

23:44.040 --> 23:49.480
That is basically what I wanted to say.

23:49.480 --> 23:50.840
Thank you very much for listening.

23:50.840 --> 23:57.840
I think we have a couple of minutes for questions too.

23:57.840 --> 24:03.840
Thank you.

24:03.840 --> 24:24.840
Thank you very much.

24:24.840 --> 24:53.560
Please.

24:53.560 --> 24:54.560
That is the neat point.

24:54.560 --> 24:57.760
It needs to have the corresponding software if you don't want to.

24:57.760 --> 25:04.520
As soon as your data is described properly, it is self-contained so you can build at any

25:04.520 --> 25:06.760
moment a new software to access it.

25:06.760 --> 25:09.760
You can of course keep your software too but you don't need to.

25:09.760 --> 25:11.640
You have the specification.

25:11.640 --> 25:21.880
You can build the tool to read it within a couple of days.

25:21.880 --> 25:22.880
Time is up.

25:22.880 --> 25:23.880
Okay.

25:23.880 --> 25:25.160
Thank you very much.

WEBVTT

00:00.000 --> 00:01.000
Hello.

00:01.000 --> 00:02.000
Hello, yeah, sorry.

00:02.000 --> 00:13.000
As the slide says, so my name's Neil Coffey.

00:13.000 --> 00:23.960
I'm a Java developer.

00:23.960 --> 00:27.280
Of course I'm a Java developer with that surname.

00:27.280 --> 00:32.600
And so this is a talk about a little side project that I started a couple of years ago.

00:32.600 --> 00:39.200
It was kind of, I was just keen to see in Java how far I would get with developing an

00:39.200 --> 00:40.200
emulator.

00:40.200 --> 00:45.880
This is the first emulator that I've developed from scratch.

00:45.880 --> 00:50.520
And it kind of started, you know, had a bit of time, you know, we had a lockdown and I

00:50.520 --> 00:54.160
kind of thought, well, what do I need to write an emulator?

00:54.160 --> 01:01.320
Well, one of the things I might try and do to start with is get a ROM reader to kind

01:01.320 --> 01:02.880
of start from scratch.

01:02.880 --> 01:06.240
And then I found, I don't know if you've heard, but my country left the EU a couple of years

01:06.240 --> 01:07.240
ago.

01:07.240 --> 01:12.520
And so I actually found it hard to source the ROM reader from Germany.

01:12.520 --> 01:15.440
So the first thing I did for this new work is I built my own.

01:15.440 --> 01:17.080
Obviously, that's the first thing.

01:17.080 --> 01:23.320
And then so by the time I'd done this, I was kind of committed at that point.

01:23.320 --> 01:28.240
So what I'm going to go through then is my experiences of writing an emulator and kind

01:28.240 --> 01:32.320
of, as I say, first one I've written, the decisions, challenges.

01:32.320 --> 01:37.080
It's going to be a little bit mature through some of the APIs that there are now in the

01:37.080 --> 01:40.040
Java platform, this kind of thing.

01:40.040 --> 01:45.440
And in all honesty, some kind of, there are some pros and cons that I'll talk about.

01:45.440 --> 01:49.360
And above all, some kind of little, little tricks in the APIs that aren't always very

01:49.360 --> 01:53.480
well documented that can kind of help us.

01:53.480 --> 01:54.480
So why Java?

01:54.480 --> 01:56.080
So I'll be completely honest.

01:56.080 --> 02:00.040
The main reason for me was it's the language I'm most familiar with.

02:00.040 --> 02:02.840
So I've been using Java now for about 20 years.

02:02.840 --> 02:06.840
The first JRE that I used came on floppy disk.

02:06.840 --> 02:08.560
That's how long.

02:08.560 --> 02:10.560
These days, it's obviously cross-platform.

02:10.560 --> 02:16.160
And these days, it's got quite a rich set of APIs, hopefully everything we need to develop

02:16.160 --> 02:18.840
an emulator.

02:18.840 --> 02:23.640
It's got good longevity, so you tend not to have this thing in Java that you sometimes

02:23.640 --> 02:29.280
get in Swift, for example, where you kind of come in one morning, try and recompile

02:29.280 --> 02:33.880
your code and find it won't compile anymore because Apple's changed something.

02:33.880 --> 02:35.760
Java tends not to have that.

02:35.760 --> 02:39.240
It's maintained good backwards compatibility over the years.

02:39.240 --> 02:42.400
And so hopefully, anything I write moving forward will also run.

02:42.400 --> 02:47.560
I don't have to have an emulation a few years' time to emulate the emulator.

02:47.560 --> 02:51.760
There are, as well from a person's point of view, there's some APIs coming up that I was

02:51.760 --> 02:58.920
kind of keen to have a benchmark to see, well, in a couple of years' time, things like the

02:58.920 --> 03:04.240
foreign function and memory API that's kind of just about to kind of hit stability.

03:04.240 --> 03:08.400
I was kind of interested to see, well, what will I be able to do with that when it comes

03:08.400 --> 03:10.160
out?

03:10.160 --> 03:17.300
So I set myself some goals that I wanted my emulator to be accurate enough to allow

03:17.300 --> 03:19.360
most software to run on.

03:19.360 --> 03:24.000
In all honesty, for kind of version one of my first emulator, there were some things

03:24.000 --> 03:30.440
that I decided not to emulate, things like memory contention issues.

03:30.440 --> 03:34.280
There are some weird things that you can get that I'll maybe have time to talk about on

03:34.280 --> 03:39.060
the spectrum with kind of glitches in the video display.

03:39.060 --> 03:46.140
So essentially, my kind of overall goal was anything that software uses that isn't a kind

03:46.140 --> 03:51.200
of bug in the hardware that people might accidentally get around or use.

03:51.200 --> 03:52.760
I'll try and emulate that.

03:52.760 --> 03:58.440
So I already mentioned one thing I was trying to do is get a baseline from the basic Java

03:58.440 --> 04:04.360
APIs and try not to bring in additional libraries as a kind of starting point.

04:04.360 --> 04:09.600
I wanted to be a cooperative application, not necessarily just full screen, performant

04:09.600 --> 04:10.600
enough.

04:10.600 --> 04:15.800
Yeah, as I say, I'm not trying to write a one gigahertz Z80 for my kind of first project.

04:15.800 --> 04:18.200
These machines I tried to emulate.

04:18.200 --> 04:20.320
So I went for the trusty old ZX Spectrum.

04:20.320 --> 04:21.920
So apologies to Steve.

04:21.920 --> 04:27.880
I'm adding to the pile of emulators now available for ZX Spectrum.

04:27.880 --> 04:30.080
And I also thought that the Sega Master System.

04:30.080 --> 04:31.840
So why these two together?

04:31.840 --> 04:35.120
A, these are the machines I had as a kid.

04:35.120 --> 04:41.080
But B, if we look at the technical specs, there are actually some similarities that are going

04:41.080 --> 04:42.080
to help us.

04:42.080 --> 04:49.840
So the video resolution is similar, although the video chips and formats that they use

04:49.840 --> 04:51.080
are very different.

04:51.080 --> 04:54.480
The CPU essentially is Z80 around 3.5.

04:54.480 --> 04:59.040
So around 3.5 actually, there are different models of the Spectrum with different speeds

04:59.040 --> 05:00.040
and the Master System.

05:00.040 --> 05:05.000
I think it was 3.58 for the Master System.

05:05.000 --> 05:10.040
You can see then here, probably everybody in this room is fairly familiar with machines,

05:10.040 --> 05:11.120
but for those who aren't.

05:11.120 --> 05:16.560
So you can see that the ZX Spectrum in comparison was all about saving money.

05:16.560 --> 05:23.280
So you had one custom ULA here that was handling the video and the sound and was also the memory

05:23.280 --> 05:28.760
controller compared to the Master System that had a bit more on board hardware that we're

05:28.760 --> 05:33.160
going to have to try and emulate.

05:33.160 --> 05:37.800
So just a little bit more detail of some of the difficulties again for people.

05:37.800 --> 05:45.600
It made it familiar, so the ZX Spectrum, it renders its video all from RAM, essentially

05:45.600 --> 05:50.360
with kind of no acceleration as such.

05:50.360 --> 05:56.200
And it's got this format that really kind of gives the ZX Spectrum its look and feel.

05:56.200 --> 06:03.840
Yes, you have essentially a one bit per pixel bitmap and then over the top of that, you're

06:03.840 --> 06:08.920
allowed two colors essentially per 8x8 cell.

06:08.920 --> 06:12.640
This kind of gave the Spectrum a bit of a unique look and feel.

06:12.640 --> 06:16.840
It was bright and flash as well per cell.

06:16.840 --> 06:24.240
Compare that to the Master System where you've got an actual dedicated graphics chip, but

06:24.240 --> 06:27.680
this was all tile based.

06:27.680 --> 06:36.520
So you have a 34x24 tile display, each tile can be 8x8 pixels.

06:36.520 --> 06:42.720
So the eagle-eyed amongst you will notice that you can't actually define enough unique

06:42.720 --> 06:49.720
tiles to give each pixel in that display a unique pixel.

06:49.720 --> 06:56.600
So anything that looks like it does, you'll see you get these kind of almost like little

06:56.600 --> 06:59.400
manga cards for some games.

06:59.400 --> 07:04.440
But here where we tried to fill the screen but obviously secretly around the edges, we've

07:04.440 --> 07:07.080
actually got blank space.

07:07.080 --> 07:16.080
There wasn't actually enough memory to have unique tiles for every space on the screen.

07:16.080 --> 07:24.920
But despite that, it did have features that were actively kind of advocated by Sega to

07:24.920 --> 07:31.760
its developers to make the most possible use of the video chip.

07:31.760 --> 07:37.560
So the way it worked, you have a series of registers to control things like the scrolling,

07:37.560 --> 07:39.360
the colors.

07:39.360 --> 07:44.520
And there was a mechanism via an interrupt to actually on each scan line or on every

07:44.520 --> 07:49.480
nth scan line, depending on how you programmed it, you could actually change those registers.

07:49.480 --> 07:55.000
Yes, you could change the scroll position at different parts of the screen, you could

07:55.000 --> 07:59.280
switch off the screen, you could potentially change the color palette.

07:59.280 --> 08:01.920
And so that's something when we're doing our video rendering, we're going to have to have

08:01.920 --> 08:06.680
a little think about how we can kind of optimize that a little bit.

08:06.680 --> 08:08.200
I'll just give a very quick example.

08:08.200 --> 08:13.120
So we're going to see here we've got some parallax scrolling where you see how on different

08:13.120 --> 08:17.520
scan lines we're setting a different x position.

08:17.520 --> 08:21.480
And then that's quite a nice fact, that's a game called Chop Lifter.

08:21.480 --> 08:29.960
On the next example, we're actually going to have a case where here we're actually,

08:29.960 --> 08:33.920
it's not literally turning off the screen, but it's changing the base address of the

08:33.920 --> 08:37.960
screen memory to effectively turn it off at that bottom part.

08:37.960 --> 08:43.080
And this is kind of probably the most, well an extreme example here, where literally on

08:43.080 --> 08:48.480
kind of every other scan line, we're changing the scroll position to kind of give that effect

08:48.480 --> 08:50.240
there.

08:50.240 --> 08:55.760
So very briefly, I'll just give a little bit of the overall organization of the emulator,

08:55.760 --> 08:58.320
it's kind of the first thing you really need to think about.

08:58.320 --> 09:02.960
So it's how we kind of turn this, this is very high level obviously, but this is essentially

09:02.960 --> 09:03.960
what the hardware looks like.

09:03.960 --> 09:08.640
We've got an address bus at the top with the ROM and the RAM connector, we've got a data

09:08.640 --> 09:13.400
bus at the bottom with any peripherals, which on the spectrum were fairly minimal, there

09:13.400 --> 09:17.200
was a one to eight version with the sound chip.

09:17.200 --> 09:23.040
And then on the master system, you can see again, similar idea, but notice that the ROM

09:23.040 --> 09:25.160
essentially is the cartridge that you plug in.

09:25.160 --> 09:30.840
Yes, when you plug a cartridge in, you're kind of directly communicating with the Z80

09:30.840 --> 09:36.160
and any logic for things like memory paging, you can have that on the cartridge.

09:36.160 --> 09:40.680
And then a few more peripherals going on the data bus, we've got the video processor there,

09:40.680 --> 09:46.720
the programmable sound generator, there's also an FM unit, which I'll touch on briefly, and

09:46.720 --> 09:47.880
the controllers.

09:47.880 --> 09:51.600
So then what I tried to do, I'm sorry, there was the emulator clock there as well.

09:51.600 --> 09:57.120
And what I tried to do is to abstract that down so that I'm going to organize a program

09:57.120 --> 10:03.560
this way, we've obviously got the Z80 implementation, is obviously a kind of fairly fundamental part.

10:03.560 --> 10:10.200
But then what I've actually done is, in my implementation, I've separated out the Z80

10:10.200 --> 10:17.520
decoder from the actual instruction loop.

10:17.520 --> 10:22.280
This is quite nice and we want to add a debugger as well, then you can go through the same

10:22.280 --> 10:28.000
code to decode the instructions for the debugger.

10:28.000 --> 10:32.600
And we've got an abstract IOBUS, from which again, then on the master system, we'll have

10:32.600 --> 10:38.920
our master system IOBUS on the spectrum IOB, etc.

10:38.920 --> 10:44.920
A memory similar idea, so we have subclasses of these overall base classes.

10:44.920 --> 10:49.240
And the clock, which is actually working the other way round to the way the hardware is

10:49.240 --> 10:53.280
working, the clock is effectively going to be a kind of break on the CPU thread and is

10:53.280 --> 11:00.200
going to tell it when to pause to keep things at the right rate of instructions.

11:00.200 --> 11:06.440
And there'll be a little bit of feedback as well between the video thread so that it can

11:06.440 --> 11:12.640
interact with the CPU to do the things I've just mentioned about accurately timing the

11:12.640 --> 11:15.920
scroll register and things.

11:15.920 --> 11:20.440
So just an example, I end up with interfaces like this.

11:20.440 --> 11:26.080
And then to the Z80, it's effectively, it doesn't care whether it's a master system

11:26.080 --> 11:32.760
or a spectrum it's communicating with, it just goes through these abstract interfaces.

11:32.760 --> 11:38.800
A little bit of detail just on, I've just mentioned about the CPU.

11:38.800 --> 11:43.800
The implantation that I went for, which isn't necessarily the most kind of popular of the

11:43.800 --> 11:49.920
traditional emulators, I tried to really break down the instruction set into more of an object

11:49.920 --> 11:50.920
oriented form.

11:50.920 --> 11:57.280
So you've got instruction types you'll see there and then for each type the individual

11:57.280 --> 12:01.240
instruction is kind of returned as an object that says well it's this type and it's from

12:01.240 --> 12:03.080
this source, this destination.

12:03.080 --> 12:10.120
So I've tried to kind of not have to write 900 different routines for all the various

12:10.120 --> 12:13.800
combinations that the Z80 have.

12:13.800 --> 12:15.160
And that gives quite nice code.

12:15.160 --> 12:20.200
There's a little bit of a performance trade-off obviously but it turns out not to be too

12:20.200 --> 12:21.200
bad.

12:21.200 --> 12:22.200
Okay.

12:22.200 --> 12:31.000
And then the other decision I made was well we're now writing in Java in 2023 now.

12:31.000 --> 12:34.460
So I decide well I want to make the most of multithreading.

12:34.460 --> 12:42.240
So the various of the components I've just mentioned will actually sit in their own thread.

12:42.240 --> 12:47.320
That's kind of nice organizationally and also in terms of monitoring the performance of

12:47.320 --> 12:51.960
the app it means we can break down a little bit more easily what resources are being used

12:51.960 --> 12:55.000
for each component.

12:55.000 --> 12:59.040
So just to give a little bit of an overview of this.

12:59.040 --> 13:02.960
So we'll have at the top kind of got our, is that good?

13:02.960 --> 13:11.360
So we've got our CPU thread at the top there which is going to be interacting with the

13:11.360 --> 13:18.800
clock and it's periodic on the site and I've done this many instruction cycles.

13:18.800 --> 13:19.800
How am I doing?

13:19.800 --> 13:27.680
Do I need to pause to kind of maintain the correct instruction rate?

13:27.680 --> 13:34.100
Then we've got the video controller which is going to be sending periodically sending

13:34.100 --> 13:39.860
V blank instructions every frame to the CPU to notify it.

13:39.860 --> 13:47.240
We've got then also a separate rendering thread which is going to do any of the kind of heavy

13:47.240 --> 13:50.120
lifting rendering that we need to do.

13:50.120 --> 13:56.440
So anything like scaling, calculating what the actual pixels are and then the idea is

13:56.440 --> 14:01.600
that here in the event dispatch thread which is a single threaded at that point we have

14:01.600 --> 14:08.120
to kind of have our ducks in a row and know what we're actually going to render.

14:08.120 --> 14:12.720
And then additional complication is, it's going to be an audio service in its own thread

14:12.720 --> 14:13.720
as well.

14:13.720 --> 14:16.120
So a bit of choreography going here.

14:16.120 --> 14:20.360
So different APIs that we're going to use.

14:20.360 --> 14:25.960
There's a standard Java swing API so there's no additional OpenGL plugins here.

14:25.960 --> 14:34.040
A couple of the Java sounds I mentioned, monitoring, kind of a little hidden one but when we're

14:34.040 --> 14:38.760
emulating data, when we're emulating kind of cartridge saves and we want to write data,

14:38.760 --> 14:44.200
actually open a mapped file for that to save the data and threading is often important.

14:44.200 --> 14:48.600
I'm not going to really mention too much but there are also desktop and taskbar integration

14:48.600 --> 14:55.280
APIs that help with integrating into desktop with system menus and things.

14:55.280 --> 14:57.440
So we'll start with the graphics.

14:57.440 --> 15:03.160
The standard swing Java 2D APIs we're maybe familiar with, the idea is that you override

15:03.160 --> 15:12.440
the JComponent class and you implement a paint component method and in here in principle

15:12.440 --> 15:18.360
we can set various options to hint with what we want, quality, speed, etc.

15:18.360 --> 15:26.440
And then finally we can render an image and it will be rendered with these different settings.

15:26.440 --> 15:27.640
But some caveats for that.

15:27.640 --> 15:34.880
Unfortunately it turns out that some of those options effectively end up turning off GPU

15:34.880 --> 15:40.560
acceleration and they can be quite CPU hungry and efficient.

15:40.560 --> 15:49.320
It's not clearly documented which ones actually run on the CPU and the GPU but effectively

15:49.320 --> 15:56.680
ends up that the fast options without any quality interpolation are the ones that run

15:56.680 --> 16:01.120
that just go straight to the GPU.

16:01.120 --> 16:07.040
So we're going to have to be a little bit careful not to use too much CPU time for each

16:07.040 --> 16:08.640
frame render.

16:08.640 --> 16:14.360
And then there's also an additional problem that the standard API to set and get pixels

16:14.360 --> 16:21.160
from buffered images actually is quite inefficient for setting individual pixels.

16:21.160 --> 16:22.360
But we have a workaround.

16:22.360 --> 16:25.640
So this will be the standard API that we'd use.

16:25.640 --> 16:30.080
We create our image like this, lovely, and we set different types, about 15 different

16:30.080 --> 16:36.520
types that we could use and then we can set RGB and whether that backing store is an int

16:36.520 --> 16:42.840
per pixel or bytes per pixel or whatever, it will work out how to set the RGB, lovely.

16:42.840 --> 16:49.160
But in practice we're probably never going to have anything other than an int per pixel.

16:49.160 --> 16:55.840
So this is the least efficient way we could possibly imagine to set the pixel data.

16:55.840 --> 17:03.240
Luckily we can actually, with a little bit of jiggery-pokery, we can ask Java2D for the

17:03.240 --> 17:08.040
underlying int array and then we can just directly write to that.

17:08.040 --> 17:12.600
The advantage being then things like array, fill, array copy, array.fill, sorry, they

17:12.600 --> 17:13.600
then become available.

17:13.600 --> 17:19.720
There's a caveat that normally you wouldn't do this because if you've got static images

17:19.720 --> 17:25.800
that you're rendering lots of times, what would normally happen is that Java2D sends

17:25.800 --> 17:30.840
that to the GPU you want and then subsequent renders are effectively free.

17:30.840 --> 17:33.040
But we don't really need that for our purposes.

17:33.040 --> 17:36.160
We're going to be rendering a different image on each frame effectively.

17:36.160 --> 17:40.000
So that's not such a problem for us.

17:40.000 --> 17:47.080
So then just to come back to what I was showing you earlier with the different scroll per

17:47.080 --> 17:52.160
on different raster lines, we kind of want to get the best of both worlds with how we

17:52.160 --> 17:55.640
then end up structuring things.

17:55.640 --> 18:04.920
So what I do is I basically I kind of break down the image and say, well, for this frame,

18:04.920 --> 18:10.560
where are the points where the things like the scroll registers actually change?

18:10.560 --> 18:15.800
On some games that will they will just have one setting per frame and I can then just

18:15.800 --> 18:24.680
efficiently render the entire frame without having to worry about clips per section, et

18:24.680 --> 18:25.760
cetera.

18:25.760 --> 18:31.520
So I don't kind of literally go through pixel by pixel kind of chasing the beam.

18:31.520 --> 18:34.120
Just yes, just a kind of brief example here.

18:34.120 --> 18:39.040
So I'll split into sections and then I can say for that section, get me the relevant

18:39.040 --> 18:46.640
settings and then go through and fetch from the tile map data and render it kind of almost

18:46.640 --> 18:50.240
as you expect.

18:50.240 --> 18:58.120
So by doing that and by using this trick of getting the raw kind of inter-ray, this does

18:58.120 --> 19:02.120
allow us to get quite a good speed up on the rendering.

19:02.120 --> 19:07.680
So if there's kind of one thing you're doing in Java, the one kind of speed up to think

19:07.680 --> 19:11.400
about is probably this.

19:11.400 --> 19:17.000
Mention so having known about that trick, there's some little tricks that we can do.

19:17.000 --> 19:23.800
Obviously people familiar with CRTs where they were actually the way these systems work,

19:23.800 --> 19:27.600
they kind of render every other scan line.

19:27.600 --> 19:31.800
And if you've got a really good quality monitor like that, most people's monitor is a bit

19:31.800 --> 19:36.720
more that, you kind of have bleed in between the scan lines and you also kind of get ghosting

19:36.720 --> 19:38.620
effects this kind of thing.

19:38.620 --> 19:43.920
So we can try and give a little bit of that look and feel.

19:43.920 --> 19:50.840
So I'm literally going to do here in the Java is I'm going to render every other kind of

19:50.840 --> 19:56.200
scan line, I'm going to render the kind of darkened version of that scan line so I can

19:56.200 --> 19:58.320
kind of produce something like this.

19:58.320 --> 20:02.960
And just have to be a little bit careful with the scaling because you can get more effects

20:02.960 --> 20:06.200
if you've got kind of odd scale factor.

20:06.200 --> 20:11.040
So I do a little bit of extra interpolation to try and get around that.

20:11.040 --> 20:18.000
Then another effect that we can do in Java is to make these kind of ghosting effects.

20:18.000 --> 20:24.840
If we can define our effect in terms of a convolution matrix, which you may have seen,

20:24.840 --> 20:29.840
then we get native library built in that will allow us to render that efficiently and that

20:29.840 --> 20:33.960
will also access the integer data under the hood.

20:33.960 --> 20:38.240
It won't go through that set RGB every time.

20:38.240 --> 20:42.080
So we can get effects like this.

20:42.080 --> 20:45.240
Again we're kind of at low rendering time.

20:45.240 --> 20:50.680
And then this is for my favorite Spectrum games from a child.

20:50.680 --> 20:56.440
Something like this, combining the kind of CRT effects on there.

20:56.440 --> 21:01.040
Another issue we just have is there are multiple ways to scale images in Java.

21:01.040 --> 21:07.840
And depending on which one we pick, we kind of get different performance characteristics.

21:07.840 --> 21:12.800
So the thing I'm actually looking at, which is kind of most stable, is to actually just

21:12.800 --> 21:19.920
hard code the scaling myself because then I can go through this, you know, access the

21:19.920 --> 21:21.720
inter-a directly.

21:21.720 --> 21:27.240
Some of these other built-in APIs, unfortunately, you know, they go through that get RGB, set

21:27.240 --> 21:30.840
RGB to support different formats.

21:30.840 --> 21:34.080
But we don't really need that.

21:34.080 --> 21:35.320
Okay.

21:35.320 --> 21:38.440
Let's talk about sound.

21:38.440 --> 21:44.520
So the mass system and the Spectrum had quite different ways of producing sound.

21:44.520 --> 21:47.600
The Spectrum obviously was this kind of very simple speaker.

21:47.600 --> 21:52.920
It could effectively be a one or a zero and you kind of control a square wave literally

21:52.920 --> 21:56.000
from the CPU to produce your sound.

21:56.000 --> 22:00.920
But then something like the Master System that had an actual sound chip, you would control

22:00.920 --> 22:05.920
the sound by setting register to say I want tone one to be this frequency, etc.

22:05.920 --> 22:15.140
So we want to abstract those two ways of producing sound so that we can just have one generate

22:15.140 --> 22:21.080
sample data method and then our audio service is going to call into that.

22:21.080 --> 22:23.680
And so it's just a brief step here of what I do.

22:23.680 --> 22:29.760
So I've got the subclass, for example, for the Spectrum type sound there.

22:29.760 --> 22:34.600
And then here, a bit more complicated, but we effectively do a similar thing.

22:34.600 --> 22:39.400
We're going to be, whenever we're asked for some sample data, we're going to calculate

22:39.400 --> 22:42.480
that sample data and split it back.

22:42.480 --> 22:48.120
And then the question becomes, well, given that sample data production, how do we actually

22:48.120 --> 22:51.880
pipe it down to the audio output?

22:51.880 --> 22:59.480
Java has this slightly quirky model where you have a notional mixer that's got inputs

22:59.480 --> 23:00.480
and outputs.

23:00.480 --> 23:07.400
And the slightly perverse thing is that everything is seen in terms of this notional mixer.

23:07.400 --> 23:13.760
So when you want to output sound, you're actually sending it to an input of the mixer.

23:13.760 --> 23:19.400
So we call it a source line.

23:19.400 --> 23:22.660
Whereas to us, it's not really a source.

23:22.660 --> 23:23.660
It's a target.

23:23.660 --> 23:26.080
But that's the reason for that.

23:26.080 --> 23:31.480
So if I, you see here, they're also tied to particular drivers.

23:31.480 --> 23:34.200
I can enumerate the different drivers on my machine.

23:34.200 --> 23:39.040
I found out, for example, that my Mac can listen through my iPhone microphone.

23:39.040 --> 23:42.440
That was the first time I found that out.

23:42.440 --> 23:47.720
So yeah, so we created available mixers, and then we query them for their available source

23:47.720 --> 23:50.520
lines.

23:50.520 --> 23:54.280
And then we can write the data to the source line.

23:54.280 --> 23:57.040
We open it with a format that we want.

23:57.040 --> 23:58.680
We write the data.

23:58.680 --> 24:04.800
And so this is now where I can call my generate sample data method when there's some frames

24:04.800 --> 24:05.800
to send.

24:05.800 --> 24:07.160
I send them.

24:07.160 --> 24:10.200
People might have spotted a slight flaw with that.

24:10.200 --> 24:12.240
I've got a nice infinite loop there.

24:12.240 --> 24:16.640
Because on something like the spectrum, I need to be able to tell the difference between

24:16.640 --> 24:21.560
there's no audio and there's no audio yet, but there's some on the way.

24:21.560 --> 24:25.120
And I don't want to sit in an infinite loop in the meantime.

24:25.120 --> 24:32.080
So this is where, so yeah, this was just code examples of how I get, we output those ones

24:32.080 --> 24:36.360
and zeros, and then we translate them.

24:36.360 --> 24:38.720
So I'll just skip quickly.

24:38.720 --> 24:42.400
So we get those ones and zeros, and then what we're actually going to do is we're going

24:42.400 --> 24:49.720
to use a condition object, which is part of the Java concurrency API, so that we can basically,

24:49.720 --> 24:56.960
in our audio service thread, we can wait for a notification that there's actually some

24:56.960 --> 24:59.880
audio that we want to send.

24:59.880 --> 25:03.240
There we go.

25:03.240 --> 25:04.240
Okay.

25:04.240 --> 25:12.720
There's also a little bit that we can do with hybrid buffering is basically where we want

25:12.720 --> 25:18.520
to ideally have a small buffer to fill to send.

25:18.520 --> 25:24.240
But that then induces a problem of we run the risk that if we can't fill our buffer

25:24.240 --> 25:27.040
in time, we end up with choppy audio.

25:27.040 --> 25:30.920
And so in practice, what we can actually do is have a larger buffer and detect when it's

25:30.920 --> 25:33.520
half full and kind of keep topping it up.

25:33.520 --> 25:35.720
So that's basically how I do it.

25:35.720 --> 25:38.880
The FM synth, which I'll mention briefly, I never had one of these.

25:38.880 --> 25:41.280
I think they're quite rare, you can only get them in Japan.

25:41.280 --> 25:45.280
But the master system, this was an option for the master system.

25:45.280 --> 25:49.560
And what I actually do for this, I cheat slightly.

25:49.560 --> 25:54.560
I use Java's built-in MIDI software synthesizer.

25:54.560 --> 26:00.120
So I translate the instructions to that FM synth into MIDI commands.

26:00.120 --> 26:01.920
And I send these to the soft synth.

26:01.920 --> 26:06.320
And I don't know if this is going to play on the projector, but I'll turn up the audio

26:06.320 --> 26:07.320
here and just see.

26:07.320 --> 26:12.120
So you'll hear the normal PSG sound chip.

26:12.120 --> 26:15.560
And then you will hear the FM kind of synth.

26:15.560 --> 26:20.760
Oh, don't even hear that.

26:20.760 --> 26:32.840
It's probably too quiet.

26:32.840 --> 26:37.320
And you see there, we can then start playing about with things like the voices that we

26:37.320 --> 26:39.240
assign to those.

26:39.240 --> 26:45.400
OK, so I'll just touch on very briefly, because time is getting to the end.

26:45.400 --> 26:49.520
So I'll just touch very briefly on the timing and concurrency.

26:49.520 --> 26:56.760
So the CP, obviously, we need to maintain it at our desired instruction rate.

26:56.760 --> 27:01.240
So the way I do this is I introduce pauses.

27:01.240 --> 27:05.880
But then we want to be able to accurately measure those pauses.

27:05.880 --> 27:10.960
We also need to accurately measure the timings between the frames that we're sending.

27:10.960 --> 27:16.160
And there's obviously standard APIs in Java to do this.

27:16.160 --> 27:21.800
A little issue that I did come across, the standard executor framework that we'd normally

27:21.800 --> 27:22.800
use for doing this.

27:22.800 --> 27:27.760
So here we say, OK, I want a frame every 60th of a second.

27:27.760 --> 27:35.400
Depending on your platform, you can actually, in practice, get quite erratic intervals between

27:35.400 --> 27:38.000
the events.

27:38.000 --> 27:44.520
So you can see, in particular, on Mac OS, you could get this kind of 20% error.

27:44.520 --> 27:48.080
So this is just one experiment, for example.

27:48.080 --> 27:57.040
What I luckily found was that if we request low sleep interval, the accuracy is actually

27:57.040 --> 28:02.040
better for low sleep intervals than the higher sleep intervals.

28:02.040 --> 28:05.880
And it seems to max out a particular amount.

28:05.880 --> 28:08.920
I'm not exactly sure of the underlying reason for that.

28:08.920 --> 28:10.520
I must admit, in Darwin.

28:10.520 --> 28:14.160
But then what this leads to is we can kind of come with, depending on the platform, we

28:14.160 --> 28:18.840
can come up with a different strategy for maintaining accurate timing.

28:18.840 --> 28:25.560
And a challenge, a perpetual challenge with Java really is that the best strategy will

28:25.560 --> 28:29.600
depend on the platform.

28:29.600 --> 28:35.840
Very briefly, data manipulation, which sometimes something a bit scared of.

28:35.840 --> 28:40.520
In Java, all of the types, well, they're generally signed.

28:40.520 --> 28:42.480
Chari is unsigned.

28:42.480 --> 28:44.400
But they're generally fixed width and signed.

28:44.400 --> 28:48.660
We can't do what we can in C and other languages defining our own types.

28:48.660 --> 28:52.200
So one way to work around this when we want to do things like register access, send the

28:52.200 --> 28:58.280
audio data, is the byte buffer is generally the easiest way to do that.

28:58.280 --> 29:04.880
You'll notice when we want bytes, because byte, the byte type is signed.

29:04.880 --> 29:09.400
So if on an unsigned byte, then we would normally promote it to an int.

29:09.400 --> 29:16.720
And then we can basically undo the FF and lop off the lowest byte.

29:16.720 --> 29:20.640
And then, so there's just a, I'll just skip forward.

29:20.640 --> 29:25.240
Then there's just a question with that about, well, how do we check that the JIT compiler

29:25.240 --> 29:27.240
is doing what we need to do?

29:27.240 --> 29:29.120
So I'll just step forward slightly.

29:29.120 --> 29:33.120
And what we can actually do, we can ask it.

29:33.120 --> 29:37.440
So we can ask it to dump out the JIT compiled assembler.

29:37.440 --> 29:42.960
And then we can check if some of those optimizations are actually going in.

29:42.960 --> 29:45.320
So this was a very simple test I set up.

29:45.320 --> 29:51.160
It's basically, it's iterating through repeatedly, effectively, writing a word and then reading

29:51.160 --> 29:53.640
it from a byte buffer.

29:53.640 --> 29:55.400
This obviously is slightly contrived.

29:55.400 --> 29:58.720
This is really the kind of the contrived corner case example.

29:58.720 --> 30:01.360
But it kind of illustrates the kind of thing that's possible, yeah?

30:01.360 --> 30:06.840
So I'm effectively, that BTF, effectively writing a two byte unsigned value into there

30:06.840 --> 30:07.840
via a byte buffer.

30:07.840 --> 30:12.320
So it looks like I'm creating a byte buffer, setting values on it, calling a method on

30:12.320 --> 30:13.420
it.

30:13.420 --> 30:19.560
But by the time we get down to the actual JIT compiled assembly code, in the best case

30:19.560 --> 30:20.560
we're actually not.

30:20.560 --> 30:25.480
That just compiles down into we are storing a half word in there.

30:25.480 --> 30:29.920
So that's the kind of thing that we can do to kind of check for those things.

30:29.920 --> 30:30.920
Okay?

30:30.920 --> 30:33.080
I think we're skipped to the end.

30:33.080 --> 30:34.080
There we go.

30:34.080 --> 30:35.080
So mentions, yeah.

30:35.080 --> 30:38.120
Those method calls are completely optimized out.

30:38.120 --> 30:39.120
Okay.

30:39.120 --> 30:40.240
So there you go.

30:40.240 --> 30:45.600
So in conclusion, using those various APIs together, we can write an emulation in Java.

30:45.600 --> 30:50.880
A few pros and cons, caveats around the different platform behavior.

30:50.880 --> 30:53.160
Few things that still to add in here.

30:53.160 --> 30:56.000
This is very much kind of version one.

30:56.000 --> 31:03.720
However, it was at the point where it will actually run quite a lot of the spectrum master

31:03.720 --> 31:04.720
system software.

31:04.720 --> 31:09.640
If anyone's curious, I've got an initial release there on GitHub.

31:09.640 --> 31:12.680
There's going to be source codes and further improvements on the way.

31:12.680 --> 31:14.840
So watch that repo as they say.

31:14.840 --> 31:18.520
A few references there that people may or may not have come across.

31:18.520 --> 31:24.160
This book here by Chris Smith is I think kind of a remarkable piece of work about the kind

31:24.160 --> 31:30.560
of the very kind of low level details of how the spectrum works and the usual kind of reference

31:30.560 --> 31:35.480
guides that over the years have surfaced on the web.

31:35.480 --> 31:40.840
So with that, I think I'll hand back.

31:40.840 --> 31:47.280
Thank you.

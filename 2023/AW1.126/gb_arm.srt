1
0:00:00.000 --> 0:00:12.000
All right, so yeah, our last speaker for today, for this year actually, is Cerman Gomez.

2
0:00:12.000 --> 0:00:20.000
And this is his first time doing a talk in general, so he's very nervous.

3
0:00:20.000 --> 0:00:32.000
He has a very low voice, so if you could stop breathing.

4
0:00:32.000 --> 0:00:35.000
Okay, do you want to start now?

5
0:00:35.000 --> 0:00:37.000
Okay, hello?

6
0:00:37.000 --> 0:00:39.000
So this is a title of my talk.

7
0:00:39.000 --> 0:00:41.000
It's a bit long, but the short version is at the bottom.

8
0:00:41.000 --> 0:00:42.000
I'm just going to talk to you.

9
0:00:42.000 --> 0:00:49.000
I spent some time a couple of years ago making a gimbal emulator, and I'm going to talk to you about it.

10
0:00:49.000 --> 0:00:56.000
So wanting some introductions, but that's my name, and if you want to reach out to me after the conference,

11
0:00:56.000 --> 0:00:57.000
those are some of the ways.

12
0:00:57.000 --> 0:00:59.000
I work as a software engineer.

13
0:00:59.000 --> 0:01:01.000
I don't work on emulators.

14
0:01:01.000 --> 0:01:04.000
I use them sometimes, but it's not part of my work.

15
0:01:04.000 --> 0:01:06.000
This is mostly just a hobby.

16
0:01:06.000 --> 0:01:13.000
So I've done all of these on my own time, and I can emulate the gimbal camera as well.

17
0:01:13.000 --> 0:01:16.000
So this is what I'm going to talk about today.

18
0:01:16.000 --> 0:01:19.000
So points one, two, three are going to be...

19
0:01:19.000 --> 0:01:25.000
I'm going to talk to you about my particular emulator, how you can run it if you want to do so.

20
0:01:25.000 --> 0:01:32.000
And afterwards, I'm going to talk more generally about gimbal emulation and how you can build your own emulator.

21
0:01:32.000 --> 0:01:38.000
I'll give some tips that I found that are useful for debugging.

22
0:01:38.000 --> 0:01:45.000
And at the end, some lessons learned, and hopefully if there is time, some demo.

23
0:01:45.000 --> 0:01:50.000
So this is what my target audience here is mostly...

24
0:01:50.000 --> 0:01:55.000
for this talk is mostly going to be emulator beginners, emulator development beginners.

25
0:01:55.000 --> 0:01:59.000
I find the gimbal to be quite beginner-friendly.

26
0:01:59.000 --> 0:02:02.000
One of the reasons is because it's very heavily documented,

27
0:02:02.000 --> 0:02:06.000
and there are other reasons as well that I'll get to later.

28
0:02:06.000 --> 0:02:11.000
If you're interested in Rust and WebAssembly, you're going to see a use case.

29
0:02:11.000 --> 0:02:19.000
And if you're just generally a fan of this device, then you might enjoy that also.

30
0:02:19.000 --> 0:02:23.000
So why make this in the first place?

31
0:02:23.000 --> 0:02:29.000
The main reason I'm sure many people here will relate, or people making emulators, is the nostalgia.

32
0:02:29.000 --> 0:02:34.000
I used to own one of these, so I want to know how it works.

33
0:02:34.000 --> 0:02:40.000
Another reason, more generally speaking, this system is very attractive to emulate

34
0:02:40.000 --> 0:02:45.000
because there's a huge amount of software out there, so you can spend many hours

35
0:02:45.000 --> 0:02:48.000
just trying games and seeing if they work.

36
0:02:48.000 --> 0:02:52.000
And if they don't work, then you can spend many more hours trying to fix them.

37
0:02:52.000 --> 0:02:55.000
And it's just something I do for fun.

38
0:02:55.000 --> 0:03:04.000
I did it mostly... I don't work on it much these days, but every time I do, it's a lot of fun.

39
0:03:04.000 --> 0:03:06.000
So it's made in Rust.

40
0:03:06.000 --> 0:03:09.000
The selling points for Rust are performance and memory safe.

41
0:03:09.000 --> 0:03:15.000
My main selling point is that it has a very useful package manager and build tool.

42
0:03:15.000 --> 0:03:22.000
It's very quick to prototype things, and I was able to put this together very quickly, actually.

43
0:03:22.000 --> 0:03:27.000
And one of the other main reasons I want to use it is because of WebAssembly.

44
0:03:27.000 --> 0:03:35.000
The support in Rust is great, so you almost get WebAssembly for free if you use Rust.

45
0:03:35.000 --> 0:03:37.000
The tools are very nice.

46
0:03:37.000 --> 0:03:42.000
And it runs on the website because it's WebAssembly, it can run on the browser, so it's very portable.

47
0:03:42.000 --> 0:03:46.000
That's my phone. That's my PC.

48
0:03:46.000 --> 0:03:49.000
It also runs natively. It's not just WebAssembly.

49
0:03:49.000 --> 0:03:53.000
So if you want to run it, these are the commands you need to run.

50
0:03:53.000 --> 0:03:56.000
There's a native build, single command.

51
0:03:56.000 --> 0:03:59.000
You give it the ROM and it will emulate it.

52
0:03:59.000 --> 0:04:04.000
The web build is just a few more commands because you have to deploy a web application.

53
0:04:04.000 --> 0:04:09.000
So it's just very straightforward. It just works.

54
0:04:09.000 --> 0:04:14.000
And that's the link if you want to try it.

55
0:04:14.000 --> 0:04:17.000
So I'm going to talk about the architecture and emulation.

56
0:04:17.000 --> 0:04:20.000
So these are the two devices that I emulate.

57
0:04:20.000 --> 0:04:23.000
The original game board came out in 1989.

58
0:04:23.000 --> 0:04:27.000
It was extremely popular. It was designed to be as cheap as possible.

59
0:04:27.000 --> 0:04:31.000
So lots of games were made for it, and it lasted close to 10 years.

60
0:04:31.000 --> 0:04:35.000
There were a few revisions in between, but it was mostly the same system.

61
0:04:35.000 --> 0:04:40.000
And then almost 10 years later, the Nintendo released the color version,

62
0:04:40.000 --> 0:04:43.000
which has still a very similar shape.

63
0:04:43.000 --> 0:04:46.000
And also internally, the system is also very similar.

64
0:04:46.000 --> 0:04:51.000
So the game board color is like a superset of the original game board.

65
0:04:51.000 --> 0:04:55.000
So these are the two devices that I target.

66
0:04:55.000 --> 0:04:58.000
And I have to mention the game board advance.

67
0:04:58.000 --> 0:05:01.000
It's a completely different system. It's ARM-based.

68
0:05:01.000 --> 0:05:05.000
It was still backwards compatible, but it's very different under the hood.

69
0:05:05.000 --> 0:05:11.000
So I don't support it for the time being.

70
0:05:11.000 --> 0:05:13.000
So I'm going to talk about the architecture.

71
0:05:13.000 --> 0:05:17.000
So if you open the original game board, you'll see a bunch of stuff.

72
0:05:17.000 --> 0:05:21.000
But for emulation purposes, we only care about those three chips.

73
0:05:21.000 --> 0:05:24.000
One of them has the CPU and the pixel processing unit,

74
0:05:24.000 --> 0:05:27.000
and the other chips are memory.

75
0:05:27.000 --> 0:05:31.000
So I'm going to limit this section to just talking about the CPU,

76
0:05:31.000 --> 0:05:35.000
the pixel processing unit, which does graphics.

77
0:05:35.000 --> 0:05:40.000
And at the end, to wrap it all up, I'll talk about the memory map.

78
0:05:42.000 --> 0:05:44.000
Which is what allows the CPU and the pixel processing unit

79
0:05:44.000 --> 0:05:47.000
to talk to each other, basically.

80
0:05:47.000 --> 0:05:50.000
So some basic stats about the CPU.

81
0:05:50.000 --> 0:05:53.000
It has 8-bit registers and 16-bit registers.

82
0:05:53.000 --> 0:05:58.000
It can do 500 things, has 500 instructions,

83
0:05:58.000 --> 0:06:02.000
a 16-bit address bus and an 8-bit data bus,

84
0:06:02.000 --> 0:06:05.000
and it can run at two different speeds.

85
0:06:05.000 --> 0:06:07.000
The original game board could only run at 4 MHz,

86
0:06:07.000 --> 0:06:11.000
but the game board caller could choose between either of those two speeds.

87
0:06:14.000 --> 0:06:18.000
So about the registers, some general information.

88
0:06:18.000 --> 0:06:20.000
It has general purpose registers.

89
0:06:20.000 --> 0:06:26.000
These are here for intermediate calculations.

90
0:06:26.000 --> 0:06:31.000
There's also a flag register, which has information about

91
0:06:31.000 --> 0:06:34.000
the last arithmetic instruction that they run.

92
0:06:34.000 --> 0:06:38.000
So if you add two numbers together, or subtract numbers together,

93
0:06:38.000 --> 0:06:43.000
and the result is zero, this register will tell you and other things.

94
0:06:45.000 --> 0:06:49.000
The 16-bit registers are basically just the 8-bit ones,

95
0:06:49.000 --> 0:06:52.000
but used in combinations of two.

96
0:06:53.000 --> 0:06:55.000
Mostly just for pointers.

97
0:06:55.000 --> 0:06:59.000
The general purpose ones, it has the normal program counter

98
0:06:59.000 --> 0:07:03.000
with the address of in-memory of the next instruction.

99
0:07:03.000 --> 0:07:06.000
A stack pointer for implemented subroutines,

100
0:07:06.000 --> 0:07:09.000
and there's a global switch for interrupts.

101
0:07:09.000 --> 0:07:12.000
It's boolean, so when you set it to zero,

102
0:07:12.000 --> 0:07:14.000
the CPU will stop listening to interrupts,

103
0:07:14.000 --> 0:07:19.000
such as problem presses, until you set it back to one.

104
0:07:21.000 --> 0:07:24.000
So how can you model this in Rust?

105
0:07:24.000 --> 0:07:25.000
It's very simple.

106
0:07:25.000 --> 0:07:28.000
This is exactly what it looks like on mine.

107
0:07:28.000 --> 0:07:30.000
The state is very simple.

108
0:07:30.000 --> 0:07:34.000
It's just a few fields for the registers.

109
0:07:34.000 --> 0:07:38.000
So I'm going to talk about instructions.

110
0:07:38.000 --> 0:07:42.000
This CPU has 500 instructions.

111
0:07:42.000 --> 0:07:45.000
It has your typical instructions that you would expect,

112
0:07:45.000 --> 0:07:49.000
so memory reads and writes, arithmetic, and branch instructions,

113
0:07:49.000 --> 0:07:51.000
so jumps and calling to subroutines.

114
0:07:51.000 --> 0:07:56.000
Some of the instructions can be conditional using the F register.

115
0:07:56.000 --> 0:08:01.000
On this website, you can see them color coded in a very nice table.

116
0:08:03.000 --> 0:08:06.000
This is at the core of the CPU.

117
0:08:06.000 --> 0:08:08.000
This is how you implement instructions.

118
0:08:08.000 --> 0:08:10.000
You have to do three things.

119
0:08:10.000 --> 0:08:15.000
First, you have to fetch the instruction from memory using the PC register.

120
0:08:15.000 --> 0:08:18.000
Afterwards, you have to decode the instruction,

121
0:08:18.000 --> 0:08:21.000
so that means figuring out what instruction to run

122
0:08:21.000 --> 0:08:23.000
based on that byte that you just read.

123
0:08:23.000 --> 0:08:25.000
You can do this with a, in C++,

124
0:08:25.000 --> 0:08:27.000
you would use a switch statement.

125
0:08:27.000 --> 0:08:30.000
In Rust, you can use a match statement.

126
0:08:30.000 --> 0:08:33.000
After you decode the instructions, you have to run it,

127
0:08:33.000 --> 0:08:35.000
so those are the three things you do.

128
0:08:35.000 --> 0:08:37.000
You fetch the code and you run,

129
0:08:37.000 --> 0:08:41.000
and you run it in a loop, and that's what the CPU does.

130
0:08:41.000 --> 0:08:44.000
This is one example of an instruction.

131
0:08:44.000 --> 0:08:46.000
The code is very simple.

132
0:08:46.000 --> 0:08:48.000
This is a memory instruction.

133
0:08:48.000 --> 0:08:52.000
I'm only going to comment on the return statement.

134
0:08:52.000 --> 0:08:56.000
This particular instruction on the real CPU would take eight cycles of the clock,

135
0:08:56.000 --> 0:08:59.000
and we need to keep track of this because afterwards,

136
0:08:59.000 --> 0:09:04.000
we need this information to synchronize all of the emulator.

137
0:09:04.000 --> 0:09:06.000
Otherwise, it will need to box,

138
0:09:06.000 --> 0:09:08.000
so that's why I returned the number.

139
0:09:08.000 --> 0:09:11.000
Another example of instruction,

140
0:09:11.000 --> 0:09:14.000
an arithmetic instruction and XOR operation.

141
0:09:14.000 --> 0:09:18.000
This one takes four cycles and it's arithmetic,

142
0:09:18.000 --> 0:09:22.000
so it modify the contents of the F register.

143
0:09:22.000 --> 0:09:28.000
You can look at how to implement every instruction on this PDF.

144
0:09:29.000 --> 0:09:32.000
You do this for 500 times.

145
0:09:32.000 --> 0:09:35.760
You might make mistakes,

146
0:09:35.760 --> 0:09:37.160
but there are ways to fix those.

147
0:09:37.160 --> 0:09:39.400
I'll get to those later.

148
0:09:39.400 --> 0:09:42.200
So you do it 500 times and you will end up with

149
0:09:42.200 --> 0:09:45.760
a massive match statement or a switch statement.

150
0:09:45.760 --> 0:09:49.080
But the code inside of each of the branches is very simple,

151
0:09:49.080 --> 0:09:51.560
but it's still error-prone.

152
0:09:51.560 --> 0:09:54.520
This is an optional thing you can do,

153
0:09:54.520 --> 0:09:56.720
because this is going to run very frequently.

154
0:09:56.720 --> 0:10:00.080
It doesn't hard to turn that into binary search,

155
0:10:00.080 --> 0:10:03.760
so you can optimize the code a bit using in Rust.

156
0:10:03.760 --> 0:10:07.960
This is very straightforward using the match statements.

157
0:10:09.760 --> 0:10:13.440
So that's pretty much the CPU.

158
0:10:13.680 --> 0:10:17.200
I'm going to switch to the Pixel Processing Unit.

159
0:10:17.200 --> 0:10:20.240
This is the chip responsible for graphics.

160
0:10:20.560 --> 0:10:25.200
So the Game Boy had an LCD panel.

161
0:10:25.200 --> 0:10:29.720
The size is 160 pixels by 144.

162
0:10:29.720 --> 0:10:31.800
Total of four colors,

163
0:10:31.800 --> 0:10:33.800
more on Game Boy color, of course.

164
0:10:33.800 --> 0:10:37.480
It runs at roughly 60 Hertz.

165
0:10:37.480 --> 0:10:41.480
The way graphics works on this particular system

166
0:10:41.480 --> 0:10:43.040
is by a composition of three layers.

167
0:10:43.040 --> 0:10:45.480
You have the window layer,

168
0:10:45.480 --> 0:10:47.480
the sprite layer, and the background layer.

169
0:10:47.480 --> 0:10:50.640
Then there are like the CPU has registers,

170
0:10:50.640 --> 0:10:52.840
this device also has registers to program

171
0:10:52.840 --> 0:10:57.240
the how you composite these layers together.

172
0:10:57.240 --> 0:11:00.280
So I'm going to go layer by layer.

173
0:11:00.280 --> 0:11:04.800
So the first layer is the window layer.

174
0:11:05.480 --> 0:11:10.320
This is usually reserved for things like game stats.

175
0:11:10.320 --> 0:11:12.080
It's fixed on the LCD,

176
0:11:12.080 --> 0:11:13.480
you can move it around,

177
0:11:13.480 --> 0:11:15.960
but the graphics within the layer are not movable,

178
0:11:15.960 --> 0:11:18.160
they are constrained to a grid.

179
0:11:18.400 --> 0:11:21.600
Can anybody guess this game?

180
0:11:22.080 --> 0:11:25.240
Yes, Link's Awakening.

181
0:11:25.240 --> 0:11:30.200
So that's Link. Link is a sprite on the sprite layer.

182
0:11:30.200 --> 0:11:34.800
So sprites are basically freely movable objects on the LCD.

183
0:11:34.800 --> 0:11:37.240
You can have 40 in total,

184
0:11:37.240 --> 0:11:39.360
and they come in two different sizes,

185
0:11:39.360 --> 0:11:41.960
programmable by registers again,

186
0:11:41.960 --> 0:11:44.640
along with other things like color,

187
0:11:44.640 --> 0:11:47.520
imposition, and orientation, and things like that.

188
0:11:47.520 --> 0:11:49.520
Finally, the background layer,

189
0:11:49.520 --> 0:11:51.800
what I think is the most interesting one.

190
0:11:51.800 --> 0:11:56.560
It's basically a grid of 32 by 32 tiles.

191
0:11:56.560 --> 0:11:58.840
The total size, each star is eight by eight,

192
0:11:58.840 --> 0:12:01.640
so the total size is 256 by 256.

193
0:12:01.640 --> 0:12:03.800
So it doesn't fit on the LCD screen,

194
0:12:03.800 --> 0:12:06.480
but you can scroll it using registers.

195
0:12:07.440 --> 0:12:11.160
Also furthermore, the scrolling wraps around,

196
0:12:11.160 --> 0:12:16.040
so you can be clever and implement infinite scrolling that way.

197
0:12:16.360 --> 0:12:19.360
So it cannot this.

198
0:12:19.360 --> 0:12:21.720
So there are more registers.

199
0:12:21.720 --> 0:12:24.320
I don't have time to talk about all of them,

200
0:12:24.320 --> 0:12:26.600
but there's a link.

201
0:12:28.000 --> 0:12:30.360
So by today's standards,

202
0:12:30.360 --> 0:12:33.800
this graphic-wise, this system cannot do much,

203
0:12:33.800 --> 0:12:38.360
but there are games that are quite clever using these limitations.

204
0:12:38.360 --> 0:12:39.560
So this is one example.

205
0:12:39.560 --> 0:12:40.480
It's not really a game,

206
0:12:40.480 --> 0:12:43.680
it's more of a technical demo, but still.

207
0:12:43.680 --> 0:12:47.760
So this particular example is using the background layer only,

208
0:12:47.760 --> 0:12:50.520
and it's modifying the scrolling register.

209
0:12:50.520 --> 0:12:52.280
So it's actually moving it around the screen.

210
0:12:52.280 --> 0:12:57.280
However, it's changing the value of the register on every single line.

211
0:12:57.280 --> 0:13:01.120
This accomplishes is like a vertical stretching effect.

212
0:13:01.120 --> 0:13:05.760
At the same time, they are stretching the internal logo horizontally in memory.

213
0:13:05.760 --> 0:13:07.440
You can see it right there.

214
0:13:07.440 --> 0:13:12.520
In combination, these two things looks like they are assuming in the internal logo,

215
0:13:12.520 --> 0:13:15.600
which is something that the Game Boy cannot do in hardware,

216
0:13:15.600 --> 0:13:19.640
but they work around this by combining hardware and software.

217
0:13:19.640 --> 0:13:21.880
So I think it's quite interesting.

218
0:13:21.880 --> 0:13:25.600
There are many more examples of games being clever to this one.

219
0:13:27.720 --> 0:13:31.160
So implementation-wise,

220
0:13:31.160 --> 0:13:38.160
this pixel processing unit is a bit more tricky to implement than the CPU.

221
0:13:38.160 --> 0:13:41.800
Because of that, it is a source of most of my bugs.

222
0:13:41.800 --> 0:13:44.400
This game is easy to recognize.

223
0:13:44.400 --> 0:13:47.080
It's tiny hot.

224
0:13:47.640 --> 0:13:52.440
So the reason it's tricky to implement correctly is because we need to keep

225
0:13:52.440 --> 0:13:55.920
the CPU and the pixel processing unit in constant sync.

226
0:13:55.920 --> 0:14:00.840
That's the reason I was returning the number of cycles on each instruction before.

227
0:14:00.840 --> 0:14:03.640
If you don't do it accurately enough,

228
0:14:03.640 --> 0:14:06.320
it would lead to stuff like this happening.

229
0:14:06.320 --> 0:14:10.880
However, I found that most games don't really care.

230
0:14:10.880 --> 0:14:14.320
Most games are quite forgiving of inaccuracies.

231
0:14:14.320 --> 0:14:17.000
Every now and then, you will encounter a situation like this.

232
0:14:17.000 --> 0:14:18.200
In this particular example,

233
0:14:18.200 --> 0:14:19.600
the rest of the game looks fine.

234
0:14:19.600 --> 0:14:24.680
It's only the inter-screen that is glitchy.

235
0:14:24.680 --> 0:14:28.080
I think this is one of the reasons why the Game Boy is

236
0:14:28.080 --> 0:14:32.840
a good beginner-friendly emulation project

237
0:14:32.840 --> 0:14:41.560
because you don't need to be super accurate to emulate most games.

238
0:14:41.560 --> 0:14:44.720
This is how you would implement the synchronization.

239
0:14:44.720 --> 0:14:46.000
This is how I do it.

240
0:14:46.000 --> 0:14:48.840
So first, on each iteration step,

241
0:14:48.840 --> 0:14:53.360
you implement, you run the CPU for an instruction.

242
0:14:53.360 --> 0:14:56.000
It will give you the number of cycles that it will take.

243
0:14:56.000 --> 0:14:58.720
Then you use that to synchronize the rest of the components.

244
0:14:58.720 --> 0:15:02.680
So you feed it to the rest of the components so that they catch up to the CPU.

245
0:15:02.680 --> 0:15:05.160
So you do this forever.

246
0:15:05.160 --> 0:15:08.880
Basically, this loop right here is the core of this emulator.

247
0:15:08.880 --> 0:15:11.280
It's where the emulator looks like.

248
0:15:11.280 --> 0:15:14.120
There are a few things like getting the image from the screen and so on.

249
0:15:14.120 --> 0:15:20.400
But conceptually, this is an emulator. It's very simple.

250
0:15:23.360 --> 0:15:27.440
So I've talked about the CPU and the big processing unit.

251
0:15:27.440 --> 0:15:29.120
Both have registers,

252
0:15:29.120 --> 0:15:34.800
but they are separate things on the circuit board.

253
0:15:34.800 --> 0:15:39.400
So the CPU needs to be able to modify the registers of the pixel processing unit.

254
0:15:39.400 --> 0:15:43.360
The way this is done is through memory because

255
0:15:43.360 --> 0:15:47.880
every register that is not a CPU register is exposed in memory.

256
0:15:47.880 --> 0:15:50.000
So by reading and writing

257
0:15:50.000 --> 0:15:52.400
particular values to a particular address in memory,

258
0:15:52.400 --> 0:15:56.880
you can modify the registers of these devices.

259
0:15:56.880 --> 0:16:01.000
In this, you can map the memory map a bit like this.

260
0:16:01.000 --> 0:16:03.120
You have the cartridge right there.

261
0:16:03.120 --> 0:16:06.440
The video RAM and work RAM are the same size because they

262
0:16:06.440 --> 0:16:09.400
are those two chips on the circuit board, those two other chips.

263
0:16:09.400 --> 0:16:11.920
They are the exact same chip.

264
0:16:12.320 --> 0:16:14.480
There are other things.

265
0:16:14.480 --> 0:16:18.800
The buttons themselves are inside of these registers IO.

266
0:16:18.800 --> 0:16:23.280
So yeah, there are some regions that are a bit special.

267
0:16:23.280 --> 0:16:26.520
You are not allowed to write to this region for some reason.

268
0:16:26.520 --> 0:16:29.880
There are other details.

269
0:16:29.880 --> 0:16:34.520
This link has a technical recommendation of the rest of the map in detail.

270
0:16:36.680 --> 0:16:41.160
So implementing the memory is quite easy.

271
0:16:41.160 --> 0:16:46.880
You just list every single component and every single register a bit like this.

272
0:16:46.880 --> 0:16:50.000
So you get the cartridge, the video RAM,

273
0:16:50.000 --> 0:16:52.800
pixel processing unit's registers,

274
0:16:52.800 --> 0:16:55.640
the buttons, sound registers,

275
0:16:55.640 --> 0:17:00.920
interrupt controller, and then you need to be able to read from them.

276
0:17:00.920 --> 0:17:03.360
So based on the address range,

277
0:17:03.360 --> 0:17:07.360
you route it to the appropriate device,

278
0:17:07.480 --> 0:17:11.400
and you need a similar method for writing values.

279
0:17:11.400 --> 0:17:15.160
Some of the values will be read only, so keep that in mind.

280
0:17:20.440 --> 0:17:24.120
So at this point, maybe you'll have a working emulator,

281
0:17:24.120 --> 0:17:26.440
but if it's your first emulators,

282
0:17:26.440 --> 0:17:27.720
as it was my case,

283
0:17:27.720 --> 0:17:29.560
then you'll run into bugs.

284
0:17:31.560 --> 0:17:36.520
They can be a bit tricky compared to other types of software I found.

285
0:17:36.520 --> 0:17:41.800
So there are a few strategies that I- Sorry.

286
0:17:41.800 --> 0:17:45.480
So there are a few strategies you can follow in order to track them bugs.

287
0:17:45.480 --> 0:17:49.720
The first one I could give is just because there's so much documentation about the Game Boy,

288
0:17:49.720 --> 0:17:52.840
you can turn it into unit tests,

289
0:17:52.840 --> 0:17:57.840
to unit tests, particular sections of the hardware.

290
0:17:59.680 --> 0:18:04.360
The other reason why the Game Boy is so beginner-friendly,

291
0:18:04.360 --> 0:18:07.280
is you can actually run the diagnostics.

292
0:18:07.280 --> 0:18:09.160
There are available ROMs you can run,

293
0:18:09.160 --> 0:18:12.520
and it will tell you where you have issues.

294
0:18:12.520 --> 0:18:16.160
So if you make a mistake on the CPU, which is likely,

295
0:18:16.160 --> 0:18:20.520
then this particular ROM will tell you what the mistake was.

296
0:18:20.520 --> 0:18:23.920
You can also integrate this into your testing framework to run in

297
0:18:23.920 --> 0:18:27.680
CIO for extra credit.

298
0:18:28.040 --> 0:18:32.040
So the next one, the next step is debugging.

299
0:18:32.040 --> 0:18:36.280
I'm going to show debugging using an example.

300
0:18:36.640 --> 0:18:38.800
After you have an emulator,

301
0:18:38.800 --> 0:18:42.160
the logical step is to build a debugger for it,

302
0:18:42.160 --> 0:18:46.400
because it will allow you to see how it will teach you things about the games running,

303
0:18:46.400 --> 0:18:50.120
but it will also teach you where you might be making mistakes.

304
0:18:50.120 --> 0:18:52.320
So in this particular example,

305
0:18:52.320 --> 0:18:55.400
when I run this game at the moment, it doesn't work.

306
0:18:55.400 --> 0:18:57.760
So basically, this is what it looks like.

307
0:18:57.760 --> 0:19:00.760
It just gives you a black screen,

308
0:19:00.760 --> 0:19:02.640
so there's nothing going on.

309
0:19:02.640 --> 0:19:06.840
But if you spend time making a debugger,

310
0:19:06.840 --> 0:19:09.440
then you can start finding clues.

311
0:19:09.440 --> 0:19:15.560
In this case, I spent some time just getting the instructions,

312
0:19:15.560 --> 0:19:18.600
the registers, the disassembly, very useful.

313
0:19:18.600 --> 0:19:20.560
In this particular example, thanks to that,

314
0:19:20.560 --> 0:19:23.360
I know what the issue with this game is.

315
0:19:23.360 --> 0:19:30.720
So it's reading a value from this address and expecting a value that is never there.

316
0:19:30.720 --> 0:19:35.240
So this address corresponds to something called a DMA transfer.

317
0:19:35.240 --> 0:19:38.600
What this tells me is that I have made a mistake in this emulation.

318
0:19:38.600 --> 0:19:42.440
So I can go to that particular section of my project and fix it.

319
0:19:42.440 --> 0:19:45.880
But I haven't fixed it yet because I found it quite recently.

320
0:19:45.880 --> 0:19:48.800
Also, I found that it's already more fun to add

321
0:19:48.800 --> 0:19:54.560
debugging features than it is fixing the issues themselves.

322
0:19:54.840 --> 0:19:57.600
I think I'll be busy recently.

323
0:19:57.600 --> 0:19:59.880
So that's the end of my technical talk,

324
0:19:59.880 --> 0:20:03.080
and I'm going to finish with some conclusions.

325
0:20:03.080 --> 0:20:06.120
This is my favorite glitch by the way.

326
0:20:06.200 --> 0:20:09.720
Only happens when you set the name to a particular name.

327
0:20:09.720 --> 0:20:13.720
This is very weird. So writing an emulator,

328
0:20:13.720 --> 0:20:15.480
at least on a Game Boy emulator,

329
0:20:15.480 --> 0:20:18.760
is the easy part of emulating Game Boy.

330
0:20:18.760 --> 0:20:21.120
Like I said, there's tons of documentation,

331
0:20:21.120 --> 0:20:22.920
and the hard part of the work has been done by

332
0:20:22.920 --> 0:20:26.720
other people who have been kindly enough to write down their findings.

333
0:20:26.720 --> 0:20:29.640
So I just have to read the information,

334
0:20:29.640 --> 0:20:32.120
interpret it, and turn it into a program.

335
0:20:32.120 --> 0:20:38.640
So I'll keep that in mind when I move to the next system to emulate,

336
0:20:38.640 --> 0:20:41.400
because it might not be as easy.

337
0:20:41.400 --> 0:20:46.840
So most games, as I said, are forgiving of inaccuracies.

338
0:20:46.840 --> 0:20:50.040
This is more of an issue with my emulator.

339
0:20:50.040 --> 0:20:53.280
Most games are forgiving of inaccuracies in the graphic,

340
0:20:53.280 --> 0:20:58.440
so this is yet one other reason why it's friendly for beginners.

341
0:20:58.440 --> 0:21:02.600
Finally, WebAssembly and Rust are great.

342
0:21:02.600 --> 0:21:06.760
If you use Rust, using WebAssembly is very natural,

343
0:21:06.760 --> 0:21:08.440
and the support is great.

344
0:21:08.440 --> 0:21:17.960
I have a small demo. It runs on the browser.

345
0:21:20.040 --> 0:21:30.080
So that's the LCD.

346
0:21:30.080 --> 0:21:34.520
I'm also drawing the video memory and the color parts.

347
0:21:34.520 --> 0:21:39.160
One of the things you can emulate on the Game Boy is,

348
0:21:39.160 --> 0:21:41.800
it came with a camera.

349
0:21:42.360 --> 0:21:46.200
So if you load the camera on this application,

350
0:21:46.200 --> 0:21:48.280
it will request permission for the camera.

351
0:21:48.280 --> 0:21:49.960
But I've shown the picture at the beginning.

352
0:21:49.960 --> 0:21:57.560
So if you cancel the permission, it will still boot.

353
0:21:57.560 --> 0:22:07.160
So it has a fallback. That's the Game Boy camera.

354
0:22:07.160 --> 0:22:11.240
So it cannot get the webcam because I haven't given you permissions,

355
0:22:11.240 --> 0:22:15.080
but you can still put the first demo in there.

356
0:22:15.080 --> 0:22:29.240
So yeah. I don't know how to use this.

357
0:22:29.240 --> 0:22:36.280
I think you can play games with it,

358
0:22:36.280 --> 0:22:37.480
but I don't know how it works.

359
0:22:37.480 --> 0:22:38.960
But that's the demo.

360
0:22:38.960 --> 0:22:51.240
So that's it from me.

361
0:22:51.240 --> 0:22:54.840
We got permission for like five minutes extra for questions.

362
0:22:54.840 --> 0:22:57.600
So people, please leave quiet.

363
0:22:57.600 --> 0:22:59.960
Can I just break in? I'm leaving immediately.

364
0:22:59.960 --> 0:23:04.360
But if you go out or please continue your questions and your discussion,

365
0:23:04.360 --> 0:23:08.360
please look around you and take any garbage that you see from the room here

366
0:23:08.360 --> 0:23:09.680
and put it in the back.

367
0:23:09.680 --> 0:23:11.600
If a lot of people help, it's not much work.

368
0:23:11.600 --> 0:23:15.120
Otherwise, we will be here forever. Thank you.

369
0:23:15.120 --> 0:23:18.280
I have a question. With the emulator,

370
0:23:18.280 --> 0:23:22.280
is it easy to add like a three or more like the actual replay?

371
0:23:22.280 --> 0:23:27.760
Like you can do unlimited drives and you can add other levels?

372
0:23:29.160 --> 0:23:32.800
So the question was if I can

373
0:23:32.800 --> 0:23:36.920
just to make sure that I understood the question correctly.

374
0:23:36.920 --> 0:23:43.880
Can I modify it in such a way that I can mess with the logic of the game?

375
0:23:43.880 --> 0:23:44.320
Was that?

376
0:23:44.320 --> 0:23:47.320
Yes. Like actually playing garbage,

377
0:23:47.320 --> 0:23:50.960
I can recognize when you have like three drives and you get built,

378
0:23:50.960 --> 0:23:54.840
you get two drives and it is probably the memory location.

379
0:23:54.840 --> 0:23:55.520
Okay.

380
0:23:55.520 --> 0:23:58.640
That's the functionality that you can use.

381
0:23:58.640 --> 0:24:02.760
Yeah. So the question was,

382
0:24:02.760 --> 0:24:08.840
can I identify particular things happening on the different games?

383
0:24:10.520 --> 0:24:13.280
Sorry?

384
0:24:13.280 --> 0:24:17.600
Use that in trainers.

385
0:24:17.600 --> 0:24:19.360
Do you know about trainers?

386
0:24:19.360 --> 0:24:20.800
No, I don't.

387
0:24:20.800 --> 0:24:22.360
To cheat basically.

388
0:24:22.360 --> 0:24:24.520
Oh, so can I point?

389
0:24:24.520 --> 0:24:28.520
You can change the value of a register,

390
0:24:28.520 --> 0:24:33.240
actually play what the user had actually played.

391
0:24:33.240 --> 0:24:36.400
You also had action.

392
0:24:36.400 --> 0:24:38.560
I know GameShark again.

393
0:24:38.560 --> 0:24:40.560
You can leave this right.

394
0:24:40.560 --> 0:24:43.560
Yeah. So the emulator is,

395
0:24:43.560 --> 0:24:45.600
so the question is,

396
0:24:45.600 --> 0:24:50.400
can I implement something like a GameShark to cheat on games?

397
0:24:50.400 --> 0:24:54.440
Yes, I could. The emulator is built as a library.

398
0:24:54.440 --> 0:24:56.560
So you can use it as a library and read

399
0:24:56.560 --> 0:24:59.560
arbitrary bytes to arbitrary addresses.

400
0:24:59.560 --> 0:25:02.440
So you could potentially build something like that. Yes.

401
0:25:02.440 --> 0:25:03.960
Was your first talk right?

402
0:25:03.960 --> 0:25:04.520
Yeah.

403
0:25:04.520 --> 0:25:06.040
Yeah. Well done.

404
0:25:06.040 --> 0:25:06.440
Thank you.

405
0:25:06.440 --> 0:25:07.440
Very good actually.

406
0:25:07.440 --> 0:25:08.080
Thank you.

407
0:25:08.080 --> 0:25:09.000
Thank you.

408
0:25:09.000 --> 0:25:11.880
This is the last presentation I ate today.

409
0:25:11.880 --> 0:25:12.880
You're welcome.

410
0:25:12.880 --> 0:25:14.600
Thank you.

411
0:25:14.600 --> 0:25:01.400
I also had a co-op

412
0:25:19.400 --> 0:25:24.080
Yeah, you have a single loop where every hardware like

413
0:25:24.080 --> 0:25:27.080
this is a single loop.

414
0:25:27.080 --> 0:25:28.080
What?

415
0:25:28.080 --> 0:25:31.080
I know, but this is a real part of the system.

416
0:25:31.080 --> 0:25:35.080
No, my question was that you have a single loop

417
0:25:35.080 --> 0:25:38.080
that has processes on the CPU.

418
0:25:38.080 --> 0:25:40.080
Yes, it's, yeah.

419
0:25:40.080 --> 0:25:45.080
What if you are emulating with Rust system

420
0:25:45.080 --> 0:25:48.080
where you want to have different threads for different peripherals,

421
0:25:48.080 --> 0:25:50.080
but they are all accessing the memory.

422
0:25:50.080 --> 0:25:53.080
Will the Rust memory save you the fuel with that?

423
0:25:53.080 --> 0:25:59.080
So can I use Rust to, can I run things in different threads

424
0:25:59.080 --> 0:26:01.080
and would the first problems?

425
0:26:01.080 --> 0:26:06.080
And probably yes, but that was a kind of worms I didn't want to open.

426
0:26:06.080 --> 0:26:10.080
And also if the system was simple enough like this one,

427
0:26:10.080 --> 0:26:13.080
you don't really need to optimize like that.

428
0:26:13.080 --> 0:26:16.080
You can all run in a single thread.

429
0:26:16.080 --> 0:26:18.080
But for a more complex device, sure,

430
0:26:18.080 --> 0:26:20.080
I would have to investigate more on that.

431
0:26:20.080 --> 0:26:23.080
But I didn't have to do that on this one.

432
0:26:23.080 --> 0:26:26.080
Question, why did you pick Rust?

433
0:26:26.080 --> 0:26:30.080
Was there any reason that you did not select C++?

434
0:26:30.080 --> 0:26:32.080
I mean C++ also does well for some.

435
0:26:32.080 --> 0:26:37.080
Yeah, why did I pick Rust over something like C++?

436
0:26:37.080 --> 0:26:40.080
It's what I use Rust for my personal projects.

437
0:26:40.080 --> 0:26:43.080
It's what I like using it.

438
0:26:43.080 --> 0:26:44.080
It's what I like using.

439
0:26:44.080 --> 0:26:46.080
And you know Rust better than C++?

440
0:26:46.080 --> 0:26:48.080
I think I do, yeah.

441
0:26:48.080 --> 0:26:51.080
And the processor is 6502 for a ZD?

442
0:26:51.080 --> 0:26:55.080
So the question was what the processor is.

443
0:26:55.080 --> 0:26:58.080
It's not a 6502.

444
0:26:58.080 --> 0:27:04.080
I think it's a mix of a Psylog Z80 and an Intel 8080.

445
0:27:04.080 --> 0:27:06.080
So it's like a combination of the two.

446
0:27:06.080 --> 0:27:08.080
Something specific custom?

447
0:27:08.080 --> 0:27:11.080
I think it is specific. I'm not really sure.

448
0:27:11.080 --> 0:27:13.080
The audio is good today.

449
0:27:13.080 --> 0:27:15.080
How is this thing recorded?

450
0:27:15.080 --> 0:27:20.080
You split your match up into a binary set.

451
0:27:20.080 --> 0:27:21.080
Did you actually benchmark that?

452
0:27:21.080 --> 0:27:25.080
Because I thought the compiler would have just translated it into a job table.

453
0:27:25.080 --> 0:27:27.080
On mic, you know.

454
0:27:27.080 --> 0:27:29.080
And we're going to get kicked out.

455
0:27:29.080 --> 0:27:31.080
I'll be honest, I didn't benchmark that.

456
0:27:31.080 --> 0:27:49.080
That is why they're very loose in change.


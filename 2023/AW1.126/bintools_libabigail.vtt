WEBVTT

00:00.000 --> 00:08.220
Okay, hello everybody.

00:08.220 --> 00:11.880
So, my name is Doji.

00:11.880 --> 00:16.320
I work in the tools group at Red Hat.

00:16.320 --> 00:19.320
And so we're here today to, okay, first of all,

00:19.320 --> 00:21.840
thank you for staying.

00:21.960 --> 00:26.920
So, yeah, I wanted to talk about

00:26.920 --> 00:30.440
application binary interface analysis today.

00:30.440 --> 00:33.840
And okay, first of all,

00:33.840 --> 00:39.680
who doesn't know about the Babigail and ABI stuff?

00:39.680 --> 00:46.040
So, okay, so I think we'll have something for you guys.

00:46.040 --> 00:49.580
So, what are we going to talk about?

00:49.580 --> 00:52.400
So, first of all, I'll introduce what

00:52.400 --> 00:57.240
Abigail is and we'll look at how it works,

00:57.240 --> 01:00.880
what the projects brought recently,

01:00.880 --> 01:05.840
and what we're looking for as far as the future goes.

01:05.840 --> 01:10.280
So, Abigail is about

01:10.280 --> 01:14.440
doing analysis of application binary interfaces.

01:14.440 --> 01:20.920
So, it's a set of tools that can do things like compare

01:20.920 --> 01:26.080
the ABI of two binaries or store the ABI of

01:26.080 --> 01:30.760
a binary onto a disk format.

01:30.840 --> 01:37.720
Can do a comparison of binaries that are in packages,

01:37.720 --> 01:42.680
like Debian packages, RPMs, star files, etc.

01:42.680 --> 01:47.600
And it is also a shared library that you can

01:47.600 --> 01:50.800
use to write more tools if you want.

01:50.800 --> 01:56.200
So, that's all well and nice as far as marketing goes,

01:56.200 --> 02:00.560
but then let's look at what we mean by ABI.

02:00.560 --> 02:06.720
So, suppose you have a simple binary which has,

02:06.720 --> 02:09.800
okay, simple, no, very complicated, let's say,

02:09.800 --> 02:15.080
which has three functions that are here.

02:15.080 --> 02:20.680
The types of the functions are defined here in a simple hierarchy.

02:20.680 --> 02:23.200
Here you have the first type that inherit,

02:23.200 --> 02:26.480
S0 which inherits base type,

02:26.480 --> 02:32.200
and let's say another type here that inherits S0.

02:32.200 --> 02:38.440
Okay. So, that's the first version of it.

02:38.640 --> 02:43.600
Let's see if, I don't know if it compiles.

02:43.600 --> 02:45.240
Yes, it does.

02:45.240 --> 02:49.920
Then I have a second version of it which looks quite the same.

02:49.920 --> 02:52.720
But okay, what does it do?

02:52.720 --> 02:55.200
Okay. What's the difference between the two?

02:55.200 --> 02:57.120
Very simple. I just inserted

02:57.120 --> 03:01.440
a data member in the base class,

03:01.440 --> 03:07.960
and we want to know what the impact of this is on the ABI as far as the binary goes.

03:07.960 --> 03:09.280
So, where am I here?

03:09.280 --> 03:12.200
I'm in the source code of the project,

03:12.200 --> 03:16.040
and so I've built a version of it.

03:16.040 --> 03:21.200
So, here we have one of the tools which name is ABI diff,

03:21.200 --> 03:24.600
which does what you think it does.

03:25.120 --> 03:29.680
So, if I run it, what does it say?

03:29.680 --> 03:38.200
Basically, there are two changes as far as ABI goes in that battery due to the change of scene.

03:38.200 --> 03:41.920
So, the first change is about the first function,

03:41.920 --> 03:43.040
which is here.

03:43.040 --> 03:50.320
So, it is telling us basically that that function has a parameter type that changed,

03:50.320 --> 03:55.280
and the change is about this structure.

03:55.280 --> 03:59.920
Remember, something is interesting.

03:59.920 --> 04:01.280
The size hasn't changed,

04:01.280 --> 04:04.200
even though I've added a data member in there.

04:04.200 --> 04:07.320
So, you know the drill, right?

04:07.320 --> 04:10.680
If you don't, I can explain it more.

04:10.680 --> 04:12.640
But size hasn't changed,

04:12.640 --> 04:15.360
the base class has changed,

04:15.360 --> 04:21.680
and the change here is a data member insertion at a certain offset, blah, blah, blah.

04:21.680 --> 04:31.120
So, this is the impact of the change of the first type on the first interface.

04:31.120 --> 04:36.680
So, there is another interface that got impacted.

04:36.680 --> 04:45.480
And the parameter of that function, which was struct S1, changed as well.

04:45.480 --> 04:48.200
It base class changed.

04:48.200 --> 04:51.960
The base class was struct S0, right?

04:51.960 --> 04:56.520
And the details of S0 change were reported earlier.

04:56.520 --> 05:00.000
So, we don't have to repeat it again, right?

05:00.000 --> 05:06.320
So, here you see that we compute the changes, right?

05:06.320 --> 05:10.760
And we also analyze those changes so that we can detect

05:10.760 --> 05:14.000
if things have been reported earlier or not.

05:14.000 --> 05:21.920
And also, we mess up with more stuff because here we say,

05:21.920 --> 05:24.920
for instance, that there were two changes, for instance,

05:24.920 --> 05:28.520
but one got filtered out.

05:28.520 --> 05:31.560
What does that mean? So, let's see, for instance,

05:31.560 --> 05:37.000
if I recall the...

05:42.240 --> 05:48.400
Okay, I'll add a special...

05:48.400 --> 05:54.160
So, I've asked ABI-DIF to show me redundant changes

05:54.160 --> 05:56.520
because by default it removes redundant changes.

05:56.520 --> 06:00.800
And we see that we have the third function that was impacted as well

06:00.800 --> 06:04.000
by the change we created.

06:04.000 --> 06:10.560
And so, well, all the changes that impact function three

06:10.560 --> 06:12.080
were already reported.

06:12.080 --> 06:17.680
So, this is why it was suppressed.

06:17.680 --> 06:20.840
That change was suppressed by default because it was redundant.

06:20.840 --> 06:22.800
So, it's not just...

06:22.800 --> 06:24.320
We're not just diffing things.

06:24.320 --> 06:30.160
We're analyzing the diffs and we're trying to massage those diffs

06:30.160 --> 06:36.040
so that they can be consumed by human beings.

06:36.040 --> 06:42.880
So, this is what we mean by analyzing ABIs, basically.

06:42.880 --> 06:46.400
So, how it works.

06:46.400 --> 06:47.880
Libaby-Gal has...

06:47.880 --> 06:51.400
So, the library used to implement the tools has a front-end

06:51.400 --> 06:53.440
which is kind of backward.

06:53.440 --> 06:56.160
The front-end reads the binary.

06:56.160 --> 06:58.920
Usually it is backends that write binaries,

06:58.920 --> 07:00.280
okay, here, backward.

07:00.280 --> 07:05.320
So, we read the binary which has to be in the ELF format right now

07:05.320 --> 07:09.320
and we build an internal representation of it.

07:09.320 --> 07:16.400
We look at the publicly defined and exported symbols of,

07:16.400 --> 07:20.680
you know, declarations, basically functions and variables.

07:20.680 --> 07:23.440
We build a representation of them and their types.

07:23.440 --> 07:28.280
And then we construct the graph of the types like that

07:28.280 --> 07:31.400
and their subtypes and we pull all that together

07:31.400 --> 07:33.160
and we call that an ABI corpus.

07:33.160 --> 07:37.840
A corpus is an artifact for us that represent the ABI

07:37.840 --> 07:41.720
of the binary we're looking at.

07:41.720 --> 07:45.000
And so, there is a middle-end that acts

07:45.000 --> 07:47.320
on that internal representation.

07:47.320 --> 07:50.240
Said otherwise, it acts on ABI corpora.

07:50.240 --> 07:54.680
Corpora being the plural of corpus in Latin, right?

07:54.680 --> 07:55.880
Let's be pedantic.

07:55.880 --> 07:59.680
So, we can, as you've seen,

07:59.680 --> 08:04.320
compare two instances of ABI corpus.

08:04.320 --> 08:06.360
Then we build an internal representation

08:06.360 --> 08:09.120
of the results of the comparison.

08:09.120 --> 08:10.840
We call that a DIF IR.

08:10.840 --> 08:13.080
So, it's a different IR.

08:13.080 --> 08:18.880
And then we perform transformations on that DIF IR.

08:18.880 --> 08:23.680
Like categorization, so we will walk the graph and say, okay,

08:23.680 --> 08:26.520
this DIF node, we've seen it before,

08:26.520 --> 08:30.200
so we'll mark it as being redundant to this other one.

08:30.200 --> 08:36.120
And then there can be transformations

08:36.120 --> 08:38.200
that are suppression as well.

08:38.200 --> 08:38.920
Well, suppression.

08:38.920 --> 08:43.560
We will mark the nodes as being suppressed.

08:43.560 --> 08:46.840
For instance, because the user wrote something

08:46.840 --> 08:51.480
that we call a suppression specification file requiring

08:51.480 --> 08:57.200
that some type's changes might not be reported.

08:57.200 --> 09:02.680
So, once we have that well-massaged DIF IR,

09:02.680 --> 09:08.720
we have backends that work that DIF IR, obviously,

09:08.720 --> 09:12.760
or the initial IR, and do useful stuff.

09:12.760 --> 09:16.800
Like writing, you know, emitting reports, for instance,

09:16.800 --> 09:22.720
or emitting the representation of the ABI corpus

09:22.720 --> 09:28.320
in a disk saved format that we called ABI XML.

09:28.320 --> 09:35.800
So, what we've done recently, so I'm going a bit fast

09:35.800 --> 09:39.640
because to let time for questions and stuff,

09:39.640 --> 09:44.000
and we can go on and let's say not very structured discussion

09:44.000 --> 09:45.880
afterwards, if you like.

09:45.880 --> 09:52.600
So, yeah, in the recent times, what we've done is, well,

09:52.600 --> 09:53.600
you know DWARF.

09:53.600 --> 09:56.360
You know that it changes all the time

09:56.360 --> 09:59.280
with new versions of DWARF producers.

09:59.280 --> 10:06.600
So, with GCC 11 and LLVM 14, the default DWARF version

10:06.600 --> 10:10.600
was bumped to the version 5, which is quite ancient,

10:10.600 --> 10:11.080
actually.

10:11.080 --> 10:15.240
I think it was released in 2017 or something.

10:15.240 --> 10:19.280
So, yeah, we support most of that right now.

10:19.280 --> 10:23.720
And another major thing that happened recently

10:23.720 --> 10:29.600
was that, thanks to folks in this room that I won't,

10:29.600 --> 10:34.000
don't worry, I won't give your name,

10:34.000 --> 10:38.000
new debug info format were added because, yeah, we

10:38.000 --> 10:39.920
started with DWARF only.

10:39.920 --> 10:43.160
And so the CTF debug info format was, support

10:43.160 --> 10:44.640
was added to libabigail.

10:44.640 --> 10:51.120
So basically now, if you have a binary having CTF N or DWARF,

10:51.120 --> 10:57.240
you can choose whatever you want to use as a source of type

10:57.240 --> 10:59.600
information.

10:59.600 --> 11:06.280
So things being how they are, the code

11:06.280 --> 11:12.920
got changed a bit to be turned into a multi-frontend

11:12.920 --> 11:15.200
architecture.

11:15.200 --> 11:18.680
We also have a multi-backend architecture,

11:18.680 --> 11:23.680
basically, because we have different types of reports.

11:23.680 --> 11:25.560
The one I've shown you is the default one,

11:25.560 --> 11:26.840
which is quite verbose.

11:26.840 --> 11:29.480
So some people like it more terse.

11:29.480 --> 11:36.240
So, yeah, and who knows whatever weird request users might

11:36.240 --> 11:37.480
come with in the future.

11:37.480 --> 11:42.120
So, yeah, different report backends.

11:42.120 --> 11:45.360
And well, it doesn't stop there.

11:45.360 --> 11:50.240
We are still working on new stuff

11:50.240 --> 11:52.880
while coming from user request.

11:52.880 --> 11:57.600
So, yeah, apparently the new kids on the block,

11:57.600 --> 12:01.920
well, new kids in town now, cool stuff is BPF, right?

12:01.920 --> 12:09.560
And with BPF comes BTF, which is the type description

12:09.560 --> 12:11.440
format of BPF.

12:11.440 --> 12:17.440
And so there were some requests to support that.

12:17.440 --> 12:23.360
So it is now in mainline, even though it's not

12:23.360 --> 12:27.560
in the labial mainline, but it's not released yet.

12:27.560 --> 12:30.120
It should be released in the next version.

12:30.120 --> 12:31.360
So what do we do with that?

12:31.360 --> 12:32.760
What's that thing?

12:32.760 --> 12:39.560
Basically, because BPF describes the C types,

12:39.560 --> 12:47.040
basically, we are using that to compare the interface exposed

12:47.040 --> 12:48.880
by the kernel to its modules.

12:48.880 --> 12:53.280
So we're doing that with CTF already, with BPF now,

12:53.280 --> 12:55.800
and also with Dwarf.

12:55.800 --> 13:02.000
With Dwarf, it is much less fast, shall we say,

13:02.000 --> 13:07.000
than with the CTF support and BPF.

13:07.000 --> 13:19.000
So people are using that feature to analyze the KABI,

13:19.000 --> 13:23.600
basically, kernel ABI, that thing that doesn't exist.

13:23.600 --> 13:28.320
And then we've had weird project-specific requests

13:28.320 --> 13:29.560
over the year.

13:29.560 --> 13:35.800
And the last one that came in last month, I say,

13:35.800 --> 13:43.320
or last month in January, was to have a,

13:43.320 --> 13:45.200
I call that the library-set ABI analysis.

13:45.200 --> 13:51.160
So basically, it's a project that has a huge library,

13:51.160 --> 13:53.600
shared library, and they're planning

13:53.600 --> 13:57.160
to split it in different libraries.

13:57.160 --> 14:03.080
But then they keep ABI compatibility,

14:03.080 --> 14:04.240
they're supposed to.

14:04.240 --> 14:09.600
And so they would like to ensure that the set of broken-down

14:09.600 --> 14:14.480
libraries has an ABI that is equivalent or compatible

14:14.480 --> 14:16.560
with the first initial one.

14:16.560 --> 14:19.520
This is what I call library-set ABI analysis.

14:19.520 --> 14:22.960
So we're going to add support for that.

14:25.680 --> 14:28.480
I don't know if it's going to be in the next version or not.

14:28.480 --> 14:34.560
So yeah, these are the kinds of things we are working on.

14:34.560 --> 14:42.360
So yeah, and now I'll let you ask questions if you have any.

14:42.360 --> 14:44.560
Yeah?

14:44.560 --> 14:46.120
Does the library have any support

14:46.120 --> 14:47.800
for language-specific API?

14:47.800 --> 14:50.800
So languages are used on top of C, for example,

14:50.800 --> 14:53.120
where they have main means cubes?

14:53.120 --> 14:54.040
Yeah, exactly.

14:54.040 --> 15:03.720
So yes, of course, dwarf is multi-language.

15:03.720 --> 15:08.640
So if the compiler of that language emits dwarf,

15:08.640 --> 15:09.600
then we're good to go.

15:09.600 --> 15:13.720
There is a small layer of language-specific stuff

15:13.720 --> 15:17.720
we add for reporting so that we can report stuff

15:17.720 --> 15:21.280
in the native language of the programmer who

15:21.280 --> 15:22.600
wrote the thing.

15:22.600 --> 15:25.200
So to give you a concrete example,

15:25.200 --> 15:30.160
right now we support C++, C, Fortran.

15:30.160 --> 15:32.960
Someone asked me for Rust support.

15:32.960 --> 15:34.880
So we had that, basically.

15:34.880 --> 15:37.200
We have some crashes on OCaml.

15:37.200 --> 15:38.760
So I thought we were supporting it too,

15:38.760 --> 15:40.160
but I need to do some stuff.

15:40.160 --> 15:42.680
So yeah, basically, yeah, it needs work.

15:42.680 --> 15:44.240
But the new language, I just have

15:44.240 --> 15:48.480
to define a small layer for the mangling logic.

15:48.480 --> 15:52.560
The mangling logic, so OK, I can show you.

15:52.560 --> 15:53.920
Let me show you an example.

15:53.920 --> 16:00.680
So yeah, I was writing.

16:00.680 --> 16:01.720
So yeah, let's see.

16:01.720 --> 16:07.240
So you see, for instance, in C++, we'll compare.

16:07.240 --> 16:13.120
So here, you see this function, the function 3.

16:13.120 --> 16:17.840
I'll change it in the second version here, function 3,

16:17.840 --> 16:23.560
and I'll add an integer here, right?

16:23.560 --> 16:26.920
Yes, let's, whoops, we compile that.

16:34.680 --> 16:42.240
And whoops, weird stuff happened.

16:42.240 --> 16:48.400
So look at what it is saying here.

16:48.400 --> 16:51.920
So you see here, because we are in C++,

16:51.920 --> 16:55.920
I changed function 3 in the source code.

16:55.920 --> 16:59.200
Let me just, yeah, see?

16:59.200 --> 17:02.720
I changed function 3 here, and I added a parameter.

17:02.720 --> 17:06.400
That's what the programmer would say.

17:06.400 --> 17:10.320
But then, from the binary standpoint, what we're seeing

17:10.320 --> 17:13.600
is that the first function was removed,

17:13.600 --> 17:15.440
and then another one got added.

17:15.440 --> 17:21.400
This is because in C++, the name of the symbols

17:21.400 --> 17:24.400
of the two functions, the two versions of functions,

17:24.400 --> 17:25.080
are different.

17:25.080 --> 17:27.960
They have a different mangling.

17:27.960 --> 17:32.880
So we go from the name of the symbol

17:32.880 --> 17:36.480
to the name of the declaration.

17:36.480 --> 17:42.440
But if I do the same in C, then, like, yeah,

17:42.440 --> 17:43.960
I knew you would ask that question.

17:43.960 --> 17:47.680
I don't know you, but.

17:47.680 --> 17:50.640
So and I have a second version here.

17:55.320 --> 17:56.000
Boom, boom, boom.

17:58.880 --> 18:03.680
And so here, some, oh, sorry.

18:03.680 --> 18:09.520
I changed the parameter of the function there,

18:09.520 --> 18:11.840
but this is in C, OK?

18:11.840 --> 18:21.400
And so if I go in the shell, and I look at the two.

18:25.800 --> 18:30.720
The first one was hello, and this one is bye, of course,

18:30.720 --> 18:37.840
because I think this is going to be the last C here.

18:37.840 --> 18:42.360
Because in C, the name of the two symbols are the same.

18:42.360 --> 18:45.040
Now we say that the function has changed.

18:45.040 --> 18:47.320
So these are the kind of things that we'll

18:47.320 --> 18:48.600
have to adapt, basically.

18:48.600 --> 18:51.120
But there is not much to do.

18:51.120 --> 18:52.960
In some cases, you have mangling,

18:52.960 --> 18:56.640
and in the other cases, you don't.

18:56.640 --> 19:00.320
So you don't have anything to do with them for the mangling.

19:00.320 --> 19:02.040
Does that answer your question?

19:02.040 --> 19:04.240
Roughly.

19:04.240 --> 19:09.080
You have this part of the code which decodes the mangled name

19:09.080 --> 19:10.000
to a non-readable name?

19:10.000 --> 19:14.880
No, because the matching is done by dwarf.

19:14.880 --> 19:18.320
So we know that this symbol is for this declaration.

19:18.320 --> 19:21.120
So we don't have to do the mangling or demangling.

19:21.120 --> 19:23.200
We look at the addresses, and we know

19:23.200 --> 19:25.080
that this symbol is for that one.

19:25.080 --> 19:28.960
So yeah, we don't really care about that.

19:28.960 --> 19:30.440
Yeah, please go ahead.

19:30.440 --> 19:32.840
Do you think it's more about performance

19:32.840 --> 19:34.560
to keep when you analyze your results?

19:34.560 --> 19:37.760
Like, are they the one?

19:37.760 --> 19:39.160
Well, there is none.

19:39.160 --> 19:41.200
No, no, no, no.

19:41.200 --> 19:42.320
No, no, no, no.

19:42.320 --> 19:47.800
It's so yeah, just to repeat the question for them.

19:50.600 --> 19:53.480
What are the performance issues when

19:53.480 --> 19:57.640
we analyze big libraries like he said LLVM,

19:57.640 --> 20:01.720
but there is WebKit, Geko, et cetera, et cetera.

20:01.720 --> 20:09.680
So when we're looking at dwarf, we

20:09.680 --> 20:11.480
have a fundamental problem, which

20:11.480 --> 20:15.080
is the duplication of types.

20:15.080 --> 20:17.880
Here we are in the business of comparing things.

20:17.880 --> 20:23.480
And so when we compare types, basically we

20:23.480 --> 20:27.600
are in the land of quadratic algorithms.

20:27.600 --> 20:32.480
So things are inherently slow if we do them naively.

20:32.480 --> 20:38.400
And so the thing is in dwarf, every single type unit

20:38.400 --> 20:40.040
is represented.

20:40.040 --> 20:44.080
But then when you have the final binary, the final shell

20:44.080 --> 20:47.120
library, for instance, and you have, I don't know,

20:47.120 --> 20:51.200
1,000 translation units, and in every single translation unit

20:51.200 --> 20:54.960
you had the string type, for instance, that was used,

20:54.960 --> 20:59.800
then you will have the string type represented 1,000 times,

20:59.800 --> 21:02.760
at least in the dwarf.

21:02.760 --> 21:09.480
And so we must be sure that those 100 occurrences of string

21:09.480 --> 21:11.280
are the one and the same.

21:11.280 --> 21:13.880
We can't just look at the name and say they're the same

21:13.880 --> 21:16.800
because they could be otherwise.

21:16.800 --> 21:20.640
And so we have to compare them and make sure they're the same.

21:20.640 --> 21:22.720
And then we'll say, OK, I'll just keep one

21:22.720 --> 21:24.840
and throw away the others.

21:24.840 --> 21:28.040
This is the duplication of type, it is called.

21:28.040 --> 21:35.360
And so this process takes a huge amount of time, which is, well,

21:35.360 --> 21:39.240
for huge libraries, it can take forever.

21:39.240 --> 21:46.720
So we have heuristics to make this thing be faster.

21:46.720 --> 21:49.800
But then it takes time.

21:49.800 --> 21:52.640
So we have some of the heuristics

21:52.640 --> 21:59.160
that we're using now is in the land of partitioning.

21:59.160 --> 22:05.560
We will do things piecewise so that we

22:05.560 --> 22:07.000
can do things in parallel.

22:10.760 --> 22:12.800
It is not main line yet, but this

22:12.800 --> 22:16.240
is the future we're thinking about.

22:16.240 --> 22:20.400
Another approach is to have the types be deduplicated

22:20.400 --> 22:22.400
before we intervene.

22:22.400 --> 22:25.920
This is what, for instance, the CTF guys do with C.

22:25.920 --> 22:29.880
So they will do the deduplication at debug info

22:29.880 --> 22:31.360
production time.

22:31.360 --> 22:34.520
And then in that case, we're golden.

22:34.520 --> 22:38.680
There is another case where we're doing that

22:38.680 --> 22:41.880
is when we are building distribution packages,

22:41.880 --> 22:43.120
like, for instance, I don't know,

22:43.120 --> 22:46.040
RPM or Debian package or whatever,

22:46.040 --> 22:50.240
there is a tool which is called DWZ, which

22:50.240 --> 22:54.400
does the deduplication to one extent.

22:54.400 --> 22:56.560
Well, when it works, it works.

22:56.560 --> 22:57.800
It does the deduplication.

22:57.800 --> 23:01.280
But the problem is DWZ has the same issue as us.

23:01.280 --> 23:08.080
And sometimes when the binary is too big, DWZ will just give up.

23:08.080 --> 23:11.360
And in that case, well, we have to use our little hands

23:11.360 --> 23:13.720
and do the deduplication in line.

23:13.720 --> 23:15.280
And then, well, we'll spend time.

23:15.280 --> 23:16.600
But this because someone should get

23:16.600 --> 23:20.680
the DWZ turned into a library and put it in the linker.

23:20.680 --> 23:21.160
Yes.

23:21.160 --> 23:22.160
And yes.

23:22.160 --> 23:23.600
Do it in link time.

23:23.600 --> 23:24.160
Yeah, we can.

23:24.160 --> 23:29.320
Yeah, that's something that one of the things

23:29.320 --> 23:31.600
that we need to do to improve the entire ecosystem

23:31.600 --> 23:33.080
of these things.

23:33.080 --> 23:34.840
And yeah, that's definitely.

23:34.840 --> 23:37.320
So someone comes for free time and.

23:37.320 --> 23:38.120
Yeah.

23:38.120 --> 23:39.680
So yeah.

23:39.680 --> 23:46.240
So as I'm, do we have other questions?

23:46.240 --> 23:48.240
Or?

23:48.240 --> 23:48.740
Yeah.

23:48.740 --> 23:52.880
So are there any other formats that are on your roadmap?

23:52.880 --> 23:54.800
Right now, no.

23:54.800 --> 23:59.280
But three months ago, BTF was not on my roadmap.

23:59.280 --> 24:01.440
So the future is not what it used to be.

24:01.440 --> 24:03.240
So I don't know.

24:03.240 --> 24:04.240
Yeah.

24:04.240 --> 24:08.240
Anyway, so yeah, we are hosted on Sourceware.

24:08.240 --> 24:09.760
We still use mailing lists.

24:09.760 --> 24:12.560
You send us patches.

24:12.560 --> 24:18.920
And yeah, you can find us on IRC on the OfTeeC network.

24:18.920 --> 24:42.880
And well, thank you very much.

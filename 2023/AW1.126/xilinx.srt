1
0:00:00.000 --> 0:00:06.480
All right.

2
0:00:06.480 --> 0:00:08.160
We are ready.

3
0:00:08.160 --> 0:00:09.200
We fix it.

4
0:00:09.200 --> 0:00:10.520
We broke again and we fix it again.

5
0:00:10.520 --> 0:00:11.400
I didn't do anything.

6
0:00:11.400 --> 0:00:12.560
The green shirts did.

7
0:00:12.560 --> 0:00:15.000
All right. So next we have Francisco Iglesias.

8
0:00:15.000 --> 0:00:16.240
No, but we're going to start good.

9
0:00:16.240 --> 0:00:16.840
Yes, sir.

10
0:00:16.840 --> 0:00:19.880
To me at least, just going to rant.

11
0:00:19.880 --> 0:00:22.160
But to me, it's always interesting to see how

12
0:00:22.160 --> 0:00:24.800
Imlation is used in the enterprise.

13
0:00:24.800 --> 0:00:26.800
People say money world.

14
0:00:26.800 --> 0:00:31.320
So we're not.

15
0:00:31.320 --> 0:00:33.000
So let's see how it goes.

16
0:00:33.000 --> 0:00:33.720
All right.

17
0:00:33.720 --> 0:00:40.760
Okay. Hi everybody and welcome to this presentation.

18
0:00:40.760 --> 0:00:42.840
My name is Francisco Denan.

19
0:00:42.840 --> 0:00:50.560
I work at AMD with QMU Development and System C Development.

20
0:00:50.560 --> 0:00:52.120
Can you speak up a bit?

21
0:00:52.120 --> 0:00:53.200
Yes, can you speak?

22
0:00:53.200 --> 0:01:01.040
Okay. So I'll try.

23
0:01:01.040 --> 0:01:03.480
I have a little threat problem.

24
0:01:03.480 --> 0:01:07.840
But okay. So today I will be speaking about

25
0:01:07.840 --> 0:01:13.440
our open source co-simulation solution.

26
0:01:13.440 --> 0:01:16.800
The agenda of the talk then.

27
0:01:16.800 --> 0:01:21.240
It is first I will give a short introduction into

28
0:01:21.240 --> 0:01:25.960
what co-simulation is and thereafter I will be speaking a little

29
0:01:25.960 --> 0:01:33.320
about AMD Xilinx QMU itself and proceed with introducing

30
0:01:33.320 --> 0:01:37.680
Live System C, LM-SOC and

31
0:01:37.680 --> 0:01:43.720
the sister repository System C, LM CoSim demo.

32
0:01:43.720 --> 0:01:50.000
Lastly, I will show a short demo where QMU is co-simulating

33
0:01:50.000 --> 0:01:53.840
with a couple of RTL memories

34
0:01:53.840 --> 0:01:56.120
using the infrastructure in

35
0:01:56.120 --> 0:01:58.840
the system C, LM-SOC.

36
0:01:58.840 --> 0:02:01.080
Sorry, can you speak up a little bit more?

37
0:02:01.080 --> 0:02:03.600
Even more. Yes.

38
0:02:05.600 --> 0:02:07.760
Yes. In this slide,

39
0:02:07.760 --> 0:02:13.320
I tried to capture one of the trade-offs that is done when

40
0:02:13.320 --> 0:02:16.600
you choose simulation technique for your RTL

41
0:02:16.600 --> 0:02:23.280
and it is the trade-off between speed and design capacity visibility.

42
0:02:23.280 --> 0:02:28.680
We see that the three techniques that is used for RTL development,

43
0:02:28.680 --> 0:02:31.160
RTL simulation or remulation,

44
0:02:31.160 --> 0:02:36.440
FPGA prototyping, they all come with a different cost on the simulation speed.

45
0:02:36.440 --> 0:02:39.600
On the left side here also,

46
0:02:39.600 --> 0:02:43.920
we have the virtual platforms that are fast and great for software development,

47
0:02:43.920 --> 0:02:51.360
but they do not help with pure RTL debugging or development.

48
0:02:51.360 --> 0:02:58.280
So an approach that can be used here to try to leverage from the two worlds here is

49
0:02:58.280 --> 0:03:06.400
to place a portion of interest in the portion of the RTL,

50
0:03:06.400 --> 0:03:10.840
on one of the RTL simulation techniques,

51
0:03:10.840 --> 0:03:19.920
and then keep the rest of their system modeled in one of the virtual platforms.

52
0:03:19.920 --> 0:03:31.240
This way, you will then keep most of the system simulated at a quite fast speed,

53
0:03:31.240 --> 0:03:38.560
while still keeping the visibility to this portion of RTL that is in focus.

54
0:03:38.560 --> 0:03:44.320
So this is what we mean with co-simulation that you're mixing these two worlds.

55
0:03:49.120 --> 0:03:53.720
In our open source co-sim solution,

56
0:03:53.720 --> 0:04:01.400
we have the Xilinx Q-mu where we model the processing systems of the FPGAs,

57
0:04:01.400 --> 0:04:10.560
and then we have System C that we use for modeling the programmable logic,

58
0:04:10.560 --> 0:04:15.240
and LIM System C, the LAM System C,

59
0:04:15.240 --> 0:04:21.680
it has bridges that allows us to connect the System C models of RTL,

60
0:04:21.680 --> 0:04:28.720
and also FPGA prototypes and the hardware emulators.

61
0:04:28.720 --> 0:04:32.720
I will be speaking more about the bridges shortly.

62
0:04:35.320 --> 0:04:43.400
But first, a little about the AMD Xilinx Q-mu fork.

63
0:04:43.400 --> 0:04:55.600
So this is where we have our improved support and modeling for the Xilinx platform system,

64
0:04:55.600 --> 0:05:03.200
and today it is based on the mainland Q-mu version 7.1.0,

65
0:05:03.200 --> 0:05:10.600
and we upgrade it around once a year to a more recent mainland version,

66
0:05:10.600 --> 0:05:16.960
and the AMD Xilinx Q-mu then has some extra functionality.

67
0:05:16.960 --> 0:05:22.800
One of these is that it can create machines through a hardware machine,

68
0:05:22.800 --> 0:05:33.280
a hardware DTB, and this allows us for having a more flexible machine creation and modification process.

69
0:05:33.280 --> 0:05:40.200
And the AMD Xilinx Q-mu also has an implementation of the remote port protocol.

70
0:05:40.200 --> 0:05:51.440
This protocol is the protocol that is used when we co-simulate both different Q-mu architectures,

71
0:05:51.440 --> 0:05:58.400
and also when we co-simulate with System C.

72
0:05:58.400 --> 0:06:06.160
This is an overview of this, where we see an AR-64 Q-mu co-simulating with a micro-blaze Q-mu,

73
0:06:06.160 --> 0:06:15.640
and also with a System C application on the side.

74
0:06:15.640 --> 0:06:19.840
Continuing with the LIB System C, the LMSSC,

75
0:06:19.840 --> 0:06:29.360
this is a project that was started by Edgar Iglesias 2016, and the license is MIT.

76
0:06:29.360 --> 0:06:36.040
One of the core features is that it has the remote port protocol implementation in System C,

77
0:06:36.040 --> 0:06:42.720
that is then used for connecting with Q-mu and co-simulating with Q-mu.

78
0:06:42.720 --> 0:06:49.360
And going together with this, it also has System C wrappers, what we call...

79
0:06:49.360 --> 0:06:54.960
these are wrappers for our syncs in Campi Versa, for also Net-10.

80
0:06:54.960 --> 0:07:02.320
And the short description of a wrapper is that it wraps Q-mu into a System C module,

81
0:07:02.320 --> 0:07:11.920
so that for the rest of the System C application, the interaction from the other modules with Q-mu

82
0:07:11.920 --> 0:07:24.080
is done through the standard System C interfaces, as TLM and signals, etc.

83
0:07:24.080 --> 0:07:39.600
The library also has TLM bridges into Axi 4, Axi 3, Axi 4i, TPB, A-slide, CHI6X, CXS, TLP, XDM-II.

84
0:07:39.600 --> 0:07:50.880
And a bridge converts the communication from the TLM side into the protocol-specific side.

85
0:07:50.880 --> 0:07:59.840
So here's an example of the TLM-II Axi bridge, which translates TLM-II Axi.

86
0:07:59.840 --> 0:08:13.920
And this bridge is what allows us to co-simulate, for example, in this case an Axi, DUT,

87
0:08:13.920 --> 0:08:20.000
that has been generated from RTL.

88
0:08:20.000 --> 0:08:27.040
So we see here that the System C wrapper communicates through TLM to the bridge,

89
0:08:27.040 --> 0:08:38.400
that then converts this TLM to Axi signaling, and communicates through this Axi signaling with the DUT.

90
0:08:38.400 --> 0:08:52.640
And this is how Q-mu on the left-hand side can access the DUT.

91
0:08:52.640 --> 0:09:01.680
There are also RTL bridges in the library for Axi 4, 3, Axi 4i, CHI, and CXS.

92
0:09:01.680 --> 0:09:05.360
And the RTL bridges have two components.

93
0:09:05.360 --> 0:09:14.240
The first one is the bridge itself that is placed on the FPGA or in a hardware emulator.

94
0:09:14.240 --> 0:09:21.920
And the other component is the driver of the bridge that is placed on the System C application software side.

95
0:09:21.920 --> 0:09:26.480
So the way it goes is that the TLM transaction enters the driver,

96
0:09:26.480 --> 0:09:34.320
which then configures the RTL bridge to replicate this transaction as an Axi transaction, for example,

97
0:09:34.320 --> 0:09:41.360
inside the FPGA or the hardware emulator.

98
0:09:41.360 --> 0:09:51.440
And this is an example of when these bridges are used with an Albeio U250 card,

99
0:09:51.440 --> 0:10:00.480
where we have between the bridge and the bridge driver and the bridge,

100
0:10:00.480 --> 0:10:07.840
we have some infrastructure there, a PCIe that the FIGO PCIe next to the emulator.

101
0:10:07.840 --> 0:10:11.760
And one can see these components as a transport channel

102
0:10:11.760 --> 0:10:21.920
for where the driver accesses go through towards the RTL bridge.

103
0:10:21.920 --> 0:10:33.040
And looking at how it looks inside a hardware emulator is very similar.

104
0:10:33.040 --> 0:10:50.240
But instead of PCIe, here the vendor bridges are used for this transport.

105
0:10:50.240 --> 0:11:00.880
In the library, we also have protocol checkers for Axi 4, Axi 3, Axi 4 Lite and A-Slite CHI.

106
0:11:00.880 --> 0:11:07.120
And the protocol checkers, they are connected to the signals and monitor the signals

107
0:11:07.120 --> 0:11:24.000
and try to find issues, violations to the protocols.

108
0:11:24.000 --> 0:11:30.400
Also in the library, we have modules that can be used for generating ACE traffic.

109
0:11:30.400 --> 0:11:35.760
So we have ACE, ACE Lite masters and ACE interconnect.

110
0:11:35.760 --> 0:11:39.760
So the masters here, they generate ACE transactions towards the interconnect.

111
0:11:39.760 --> 0:11:46.800
And the interconnect will then, when required, snoop the other masters

112
0:11:46.800 --> 0:11:57.440
and otherwise forward the transaction to the TLA memory at the bottom.

113
0:11:57.440 --> 0:12:07.600
We have a similar setup for a CHI where we have request nodes that generate CHI traffic.

114
0:12:07.600 --> 0:12:13.680
And a CHI interconnect that does snooping when required

115
0:12:13.680 --> 0:12:25.280
or forwards the request to a slave node at the bottom.

116
0:12:25.280 --> 0:12:28.480
Also in the library, we have a tool called PySimGen

117
0:12:28.480 --> 0:12:33.520
that can generate simulations from IP exec descriptions.

118
0:12:33.520 --> 0:12:39.440
And there's a basic TLM traffic generator that one can configure to generate randomized traffic

119
0:12:39.440 --> 0:12:46.640
or provide a description of transactions to issue.

120
0:12:46.640 --> 0:12:51.920
And there are some simple easy co-simulation examples

121
0:12:51.920 --> 0:12:56.560
that one can have a look at as a starting point.

122
0:12:56.560 --> 0:12:59.440
There's a lot of documentation for all the components

123
0:12:59.440 --> 0:13:09.840
and we also have an extensive test suite.

124
0:13:09.840 --> 0:13:18.240
The system seat, the LEM co-sim demo is also a project that was started by Edgar Iglesias, 2008-16.

125
0:13:18.240 --> 0:13:27.600
And the license is MIT and this contains several Q-MU co-simulation demos

126
0:13:27.600 --> 0:13:38.160
where we co-simulate the CMP Q-MU and Versal Q-MU with PL model on the system seat side.

127
0:13:38.160 --> 0:13:50.880
And there's also a RISC-V demo where a RISC-V Q-MU is co-simulating with an open source

128
0:13:50.880 --> 0:13:57.760
Ethernet controller core on the system seat side.

129
0:13:57.760 --> 0:14:05.280
We have several x86 Q-MU that co-simulate with PCA endpoint models on the system seat side.

130
0:14:05.280 --> 0:14:13.040
And there is also a PI-SimGen demo where the system seat side of the co-simulation

131
0:14:13.040 --> 0:14:18.400
has been completely generated from IP exact.

132
0:14:18.400 --> 0:14:27.040
And this demos they demonstrate how to embed the LEM system seat library in an own project

133
0:14:27.040 --> 0:14:34.640
and how to use it.

134
0:14:34.640 --> 0:14:43.120
So for the demo that I'll show now, it is a...

135
0:14:43.120 --> 0:14:47.840
Here I will be launching a Linux system on the SYNC-MP Q-MU.

136
0:14:47.840 --> 0:14:56.480
And it will be co-simulating with a system seat app where that includes a couple of RTL memories.

137
0:14:56.480 --> 0:15:01.760
One of the RTL memories is has an ACSE-4 interface.

138
0:15:01.760 --> 0:15:08.480
And the second one has an ACSE-4 light interface.

139
0:15:08.480 --> 0:15:12.480
On the ACSE-4 light signals, there's a protocol checker connected.

140
0:15:12.480 --> 0:15:20.560
And I also modified the ACSE-4 light memory here and injected an error so that we can

141
0:15:20.560 --> 0:15:25.760
see that the protocol checker finds this.

142
0:15:25.760 --> 0:15:34.400
So let's see them.

143
0:15:34.400 --> 0:15:36.400
I'll have to...

144
0:15:36.400 --> 0:16:01.440
So we see here that on the...

145
0:16:01.440 --> 0:16:02.440
This is the left terminal.

146
0:16:02.440 --> 0:16:05.600
This is where Q-MU is being launched.

147
0:16:05.600 --> 0:16:14.880
And on the yellow terminal on the top is where the system seat application has been launched.

148
0:16:14.880 --> 0:16:23.120
And we will start by doing some accesses to the ACSE-4 memory.

149
0:16:23.120 --> 0:16:29.760
And thereafter, here comes the accesses for ACSE-4 memory.

150
0:16:29.760 --> 0:16:35.440
And then thereafter, we will do an access towards the ACSE-4 light memory that has

151
0:16:35.440 --> 0:16:38.720
an error in it.

152
0:16:38.720 --> 0:16:43.560
And here we see that the protocol checker found the error and outputted some description

153
0:16:43.560 --> 0:16:46.480
message.

154
0:16:46.480 --> 0:16:51.760
After the simulation, you get a trace that we can inspect.

155
0:16:51.760 --> 0:17:04.880
And we can see here, follow the ACSE signals and look at the transactions just issued.

156
0:17:04.880 --> 0:17:09.840
See that it is the expected data that we're seeing in here.

157
0:17:09.840 --> 0:17:14.960
And you can see those at the bottom here.

158
0:17:14.960 --> 0:17:21.160
That these are the data that we were writing to the memory.

159
0:17:21.160 --> 0:17:27.000
Then the protocol checker's error is also connected to a signal in this case.

160
0:17:27.000 --> 0:17:37.920
So for a transaction that failed, it can be found when this signal has been asserted.

161
0:17:37.920 --> 0:17:46.120
So this is seen at the bottom here, where there is the asserted signal.

162
0:17:46.120 --> 0:17:50.720
And then we can look into the transaction here and find the problem.

163
0:17:50.720 --> 0:18:07.920
And that is all about what I had today.

164
0:18:07.920 --> 0:18:30.200
And so thank you for listening.

165
0:18:30.200 --> 0:18:42.080
We were here today and

166
0:18:42.080 --> 0:18:56.340
we knew you were here and again.

167
0:18:56.340 --> 0:19:03.900
with me. Yes. So how do we decide the features that we implement? And it's

168
0:19:03.900 --> 0:19:10.380
actually the demand that drives this. So if we see that some team

169
0:19:10.380 --> 0:19:18.420
internally at AMD Xilinx needs a feature in QMU then we implement it. Or if we see

170
0:19:18.420 --> 0:19:27.860
this a feature that might be useful later going forward, not

171
0:19:27.860 --> 0:19:33.260
right now but perhaps in a year or so, then we will consider implementing it too.

172
0:19:33.260 --> 0:19:43.500
And often it ends up that our demands are pretty similar to all other

173
0:19:43.500 --> 0:19:50.420
developers or all other demands. So if we implement a feature it

174
0:19:50.420 --> 0:19:55.340
often becomes useful for others as well, not only for the Xilinx, AMD Xilinx.

175
0:19:55.340 --> 0:20:02.340
And a small follow-up, do you guys probably do agile like the rest of the world?

176
0:20:02.340 --> 0:20:08.340
I'm curious about how do you guys refine the story like this in agile terms.

177
0:20:08.340 --> 0:20:15.420
Yeah, okay. How do we use agile development in this?

178
0:20:15.420 --> 0:20:21.140
I don't care about agile, I really care about refinements. I don't like agile action.

179
0:20:21.140 --> 0:20:25.860
How do you guys brainstorm together on a feature? What do you put on paper?

180
0:20:25.860 --> 0:20:32.340
It needs to be this, but how do we do this? Because it's not

181
0:20:32.340 --> 0:20:37.220
always comparable to something that already exists with AMD Xilinx.

182
0:20:37.220 --> 0:20:41.220
It's usually something that's never been done before.

183
0:20:41.220 --> 0:20:44.220
I'm really sorry about this question.

184
0:20:44.220 --> 0:20:52.060
Yeah, no, it's a very good question and I have to admit that I'm not sure if we have such a process

185
0:20:52.060 --> 0:20:58.060
that we're probably looking at here. We get a request in our group implement.

186
0:20:58.060 --> 0:21:03.940
We need this feature from, for example, one of the RTL groups. They need a feature

187
0:21:03.940 --> 0:21:10.260
where they ask us and we implement it. So we don't have really a process where we

188
0:21:10.260 --> 0:21:18.940
kind of do this very agile in that sense. This is our team. It might be different in other teams.

189
0:21:18.940 --> 0:21:32.140
So Chris, how do you get the System C model from Verilog and does that also work for

190
0:21:32.140 --> 0:21:37.140
Cogen generated IP which might be encrypted?

191
0:21:37.140 --> 0:21:43.140
So how do we get the System C model from Verilog?

192
0:21:43.140 --> 0:21:50.140
There's an open source tool named Verilator that will Verilog and create the model for you.

193
0:21:50.140 --> 0:21:57.140
But that's not going to work for the Cogen generated IP which is encrypted and which Verilog can't process it.

194
0:21:57.140 --> 0:22:02.140
For that time I'm not sure how to do that. Sorry for that.

195
0:22:02.140 --> 0:22:07.140
There's no free line.

196
0:22:07.140 --> 0:22:26.140
I don't have to speak on that because I have to admit that I'm mostly on the QEMU development side.

197
0:22:26.140 --> 0:22:33.140
But if you pick me up afterwards I can take your card and see if I can contact you, give you a correct contact.

198
0:22:33.140 --> 0:22:40.140
Is there something for VHDL as well?

199
0:22:40.140 --> 0:22:45.140
I think there are tools that do this.

200
0:22:45.140 --> 0:22:53.140
But if there is a tool that automatically generates the System C model from VHDL,

201
0:22:53.140 --> 0:22:59.140
there are tools apparently. I'm pretty sure there are too. But we have not used it.

202
0:22:59.140 --> 0:23:08.140
Are you limiting yourself to the synthesable subset of System C or do you not care?

203
0:23:08.140 --> 0:23:20.140
No, we don't limit ourselves to System C now.

204
0:23:20.140 --> 0:23:33.140
I'm coming from the world of open source software defined radio. So I have low graphs where I have data processing blocks that are running in software on an MP SoXR64 core.

205
0:23:33.140 --> 0:23:44.140
And what I want to do is I want to take a block, accelerate it by implementing it in some RTL and getting it to run on the FPGA card and getting the data in and all.

206
0:23:44.140 --> 0:23:54.140
So how does that work? I have some part of software that I want to be accelerated by an FPGA accelerator. What's the workflow using this tool?

207
0:23:54.140 --> 0:23:55.140
Yes.

208
0:23:55.140 --> 0:24:16.140
Yes. So in that case you could repeat. Yes. How do you get a random acceleration implementation of software?

209
0:24:16.140 --> 0:24:26.140
How do I go from software acceleration to hardware implementation?

210
0:24:26.140 --> 0:24:40.140
Yes. So I have to admit that I'm not an expert hardware engineer, but I think that the way I would have done it is just to go ahead and create the Verlut code.

211
0:24:40.140 --> 0:24:57.140
And with this tool it's very it's pretty sweet because you can connect it to the system.

212
0:24:57.140 --> 0:25:02.140
You can launch your real software in QMU that interacts with it.

213
0:25:02.140 --> 0:25:11.140
How do I exchange data with the library? What's the interface? I see internally it's QMU because of system C, right?

214
0:25:11.140 --> 0:25:12.140
Yes.

215
0:25:12.140 --> 0:25:16.140
And what's on the surface? How do I get data in and out?

216
0:25:16.140 --> 0:25:21.140
How do you get data in and out of the simulators?

217
0:25:21.140 --> 0:25:32.140
Perhaps I would have needed a better overview picture, but you can get how you get data in into your system C application.

218
0:25:32.140 --> 0:25:50.140
We don't have any magic for this.

219
0:25:50.140 --> 0:26:04.140
The remote port protocol is just a protocol that transfers transactions from QMU into the system C side or to another QMU.

220
0:26:04.140 --> 0:26:14.140
And so it's not really a way to that will allow you to load in a bunch of data into the system C application.

221
0:26:14.140 --> 0:26:34.140
Yes.

222
0:26:34.140 --> 0:26:35.140
Yes.

223
0:26:35.140 --> 0:26:44.140
And I think afterwards and I can.


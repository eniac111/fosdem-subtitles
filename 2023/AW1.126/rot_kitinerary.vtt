WEBVTT

00:00.000 --> 00:27.080
Please have a seat. We have to begin. Do as you can. All right. Hi, everybody again.

00:27.080 --> 00:33.200
We meet Fokker Kose. He will explain to us what he's doing in KDE and he's come from Germany.

00:33.200 --> 00:46.160
We're very pleased to welcome him. Go on. Thank you.

00:46.160 --> 00:56.280
Hello. I'll talk a bit about how we use public transport information in KDE itinerary. What

00:56.280 --> 01:07.440
is this? KDE is a big open source community. So not a transport operator for once here.

01:07.440 --> 01:13.200
We do all kinds of stuff. You can find us in the K building on the second level to look

01:13.200 --> 01:20.040
at a few things we do. And one of the things we do is a transport assistance app called

01:20.040 --> 01:29.920
itinerary. So in that you can import any kind of travel related things like flights, train

01:29.920 --> 01:35.800
trips, bus trips, hotel reservations, event tickets, et cetera. And then group together

01:35.800 --> 01:39.880
and put it into a timeline so you have all the relevant information at hand when you

01:39.880 --> 01:46.960
need them. And we augment that with whatever might be helpful along the way, like the weather

01:46.960 --> 01:52.480
forecast as the obvious example. Since we don't really have a lot of time, I'll have

01:52.480 --> 01:58.400
to dive right into what we do with public transport data. You'll see some of the features

01:58.400 --> 02:08.040
along the way then. So the first problem is we need to actually understand where you want

02:08.040 --> 02:13.520
to go, ideally without you having to enter that manually, but by reusing documents or

02:13.520 --> 02:21.320
material you already have. In the best case scenario, that material has machine readable

02:21.320 --> 02:29.560
annotations about your trip. That is something that Gmail has been promoting. But outside

02:29.560 --> 02:34.240
of airlines, I think in Europe at least, we have only seen that for Flix, bus and train

02:34.240 --> 02:41.820
line. So none of the major railway operators, for example, have that. But there is a second

02:41.820 --> 02:50.300
best thing, and that is the ticket barcodes. Most, not all of them, but luckily most contain

02:50.300 --> 02:59.040
some information about the trip. And especially in international use, they are somewhat standardized.

02:59.040 --> 03:07.040
So we actually have a chance to understand what's in them. The probably most well-known

03:07.040 --> 03:13.480
one is the one from airline boarding passes that is a single standard that works globally.

03:13.480 --> 03:18.920
So that is the absolute best case scenario. Only one thing we have to implement. For railways,

03:18.920 --> 03:24.640
we don't have that luxury. But the European Railway Agency has at least defined a few

03:24.640 --> 03:34.240
standards that are in use in Europe for international travel and in some countries also domestically.

03:34.240 --> 03:43.400
The complexity of those standards varies greatly. The airline boarding passes, for example,

03:43.400 --> 03:50.520
that is a simple ASCII string that is almost human readable. That's as easy as it gets.

03:50.520 --> 03:56.880
The latest iteration from the European Railway Agency for the international tickets here,

03:56.880 --> 04:05.960
the flexible content barcode, that is 2,000 lines of ASN1 specification defining 300 or

04:05.960 --> 04:11.840
so mostly optional fields with some underlying packed encoding representation. So awesome

04:11.840 --> 04:22.960
to debug, but extremely powerful. That's the ultimate other end of complexity then. Just

04:22.960 --> 04:30.320
because it is standardized doesn't automatically mean this is also all openly available. Again,

04:30.320 --> 04:34.520
your railway agency is the good example here. They have that on the website. If something

04:34.520 --> 04:43.320
is missing, you ask them, they put it on the website. Perfect. Some of the other organizations

04:43.320 --> 04:50.240
ask you for unreasonable amounts of money to get a PDF or require you to be a member.

04:50.240 --> 04:57.040
And for that, you need to be an airline or railway agency, which we are not. Some of

04:57.040 --> 05:02.720
those systems have cryptographic signatures, which we usually don't care about because

05:02.720 --> 05:08.320
we only care where you travel, not if the ticket is actually valid. But in one case,

05:08.320 --> 05:15.760
the FOWE ticket used in some areas in Germany, Luxembourg, the signature and the content

05:15.760 --> 05:21.640
is somewhat intermixed. So we actually need to decode that. And just because something

05:21.640 --> 05:28.680
is called a public key doesn't mean it's actually public on the website. In this case,

05:28.680 --> 05:34.960
we got lucky. Extensive internet search found a 100 page PDF in a location where at pro

05:34.960 --> 05:39.640
we shouldn't have been containing a screenshot where we found an URL pointing to an LDAP

05:39.640 --> 05:48.680
server on which we found the keys. So it can be quite messy to work with this stuff. Most

05:48.680 --> 05:56.840
of the standards have operator specific extensions. Those, of course, are not documented. For

05:56.840 --> 06:03.880
the final point, is there anyone from China, Talya here? Too bad I have questions for them.

06:03.880 --> 06:17.080
Then, of course, there's also a set of proprietary codes where our only option is reverse engineering.

06:17.080 --> 06:25.440
For that, we rely on donations of sample tickets because everything we do is very much focused

06:25.440 --> 06:33.960
on privacy. So once on your own device, we never get your actual tickets. So we need

06:33.960 --> 06:43.840
them donated to work with them. There were ones listed here. For those we have more or

06:43.840 --> 06:50.280
less understanding. Some we get enough out of it to work already. For some we can barely

06:50.280 --> 06:54.440
prove that there is actually travel relevant data in there, but we have no way of decoding

06:54.440 --> 07:00.760
that. For me, the most frustrating one is SBB because that is a fairly comprehensive

07:00.760 --> 07:06.320
format. We understand most of it apart from the daytime fields. And without of that, it

07:06.320 --> 07:13.000
is pretty much useless. So if there's anyone here from SVP who has hints or information

07:13.000 --> 07:22.560
on how those tickets work, I would be very interested. Then, once we actually know where

07:22.560 --> 07:30.120
you're going, and we have that in the timeline, we augment that with real-time public transport

07:30.120 --> 07:40.160
information. The most obvious example is delays and disruptions, cancellations, platform

07:40.160 --> 07:50.240
changes, that kind of stuff. We notify you about that. Another thing we do is filling

07:50.240 --> 07:56.720
gaps in the itinerary. To get here, I book a train from Berlin to Brussels, but I actually

07:56.720 --> 08:02.840
need to go from my home to the station, then take the train, and then in Brussels, somehow

08:02.840 --> 08:08.880
get from the station to my hotel with using the respective local public transport. That

08:08.880 --> 08:16.320
is something we can fill in automatically. And then the third thing is when you miss

08:16.320 --> 08:24.920
a connection, we offer you to find alternatives for getting to the same destination. In order

08:24.920 --> 08:33.000
to implement that kind of stuff, we need to get to that data. And there is unfortunately

08:33.000 --> 08:40.320
not a single global service that gives us to us. So we need to query many, many different

08:40.320 --> 08:47.840
sources depending on where we currently are, which can actually provide us this information.

08:47.840 --> 08:57.080
So we have a bit of an abstraction layer over all those sources, which basically offers

08:57.080 --> 09:04.120
three basic operations. Searching for locations by name or coordinate, searching for arrival

09:04.120 --> 09:10.920
and departures at a specific stop, and searching for journeys from A to B. And on top of that,

09:10.920 --> 09:20.520
we then build the higher level features. In terms of supported backends, that is basically

09:20.520 --> 09:26.200
three different categories. The fully open source ones, those are the easiest ones to

09:26.200 --> 09:34.840
work with, like Narisha, OpenTrip planner. Motus is still missing on that list simply

09:34.840 --> 09:42.640
because there is currently no production deployment we have access to as soon as there is one.

09:42.640 --> 09:51.440
We'll add that as well. Second category is things where the protocol is at least documented,

09:51.440 --> 09:59.040
like the Open Journey planner used in Switzerland. And the third one, the most annoying ones

09:59.040 --> 10:08.240
to work with, the proprietary legacy backends. But just having the protocols, of course,

10:08.240 --> 10:14.000
is not enough. We also need to know where exactly are those respective services for

10:14.000 --> 10:23.080
that. For that, there is the Transport API Registry. That's a collaboration with others

10:23.080 --> 10:31.600
having that same problem, like Janice. And that is basically a collection of machine-readable

10:31.600 --> 10:38.000
information about those services. Both where exactly do I need to connect there, which

10:38.000 --> 10:44.880
protocol do they use, specific parameters I need to use. But also information like the

10:44.880 --> 10:55.760
coverage area. Because for most of those services, that is kind of implied. If I have the Belgian

10:55.760 --> 11:02.800
Transport app, the scope of that is implicit. Narisha is the exception that actually has

11:02.800 --> 11:12.920
API for querying this. But if I want to pick the right backend, I of course need that information.

11:12.920 --> 11:20.640
Very similar problem. All of what you see here is what Journey Query would describe

11:20.640 --> 11:30.040
as Metro line one. But the signage is very, very different depending on where you are.

11:30.040 --> 11:35.920
And the signage is something that is very prominent locally. So if I should show the

11:35.920 --> 11:45.720
right thing in the app in order to help the user to find the right thing. But this isn't

11:45.720 --> 11:52.320
really unique. So finding the right logo is somewhat tricky. What we do there is we get

11:52.320 --> 11:59.920
the logo and the colors and all of that information from Vicky Data. The Vicky Data entry is linked

11:59.920 --> 12:04.880
to an OpenStreetMap route relation. From that we get the geographic bounding box. And the

12:04.880 --> 12:12.080
combination of geographic bounding area, name and mode of transport is mostly unique. And

12:12.080 --> 12:21.920
that is then good enough to find the right locus. Okay. Then a few more things we integrate.

12:21.920 --> 12:28.920
One is available rental vehicles. So rental bikes, electric kicks, scooters, that kind

12:28.920 --> 12:38.840
of stuff. What you maybe can see in the screenshot here is a few available kickskooters. Some

12:38.840 --> 12:45.340
shown in green, some shown in yellow. The yellow ones are those with a remaining range

12:45.340 --> 12:55.760
of less than five kilometers. All of this is coming from GBFS. That is a nicely developing

12:55.760 --> 13:03.760
open standard for that kind of information. And it is very actively evolving. Just one

13:03.760 --> 13:10.080
or two years ago we wouldn't have that level of detail available. So that's a very nice

13:10.080 --> 13:18.600
example of open standards and open source in that field. Coverage for that is somewhat

13:18.600 --> 13:25.240
biased towards Europe and North America, though. I know that those systems exist in Asia as

13:25.240 --> 13:33.240
well, but I have no idea if they use GBFS as well or if there's any other systems. So

13:33.240 --> 13:41.280
again something where I would be interested in information. Another thing we integrate

13:41.280 --> 13:49.520
on the train station maps is the real time status of elevators and escalators. So I think

13:49.520 --> 13:55.840
in this case they're all shown in green, so they're actually functional. This is of course

13:55.840 --> 14:00.960
something very relevant if you're traveling, say, with heavy luggage, a stroller or in

14:00.960 --> 14:10.480
a wheelchair. The data source for that is Accessibility Cloud. That is the backend behind

14:10.480 --> 14:17.440
realmap.org. That's also free software and they aggregate these kind of information from

14:17.440 --> 14:29.400
many different sources. There is a bit of coverage bias towards Germany, so similar

14:29.400 --> 14:41.160
data from other countries would be more than welcome. Another thing where we have a coverage

14:41.160 --> 14:48.760
problem is train coach layouts. I think there's currently two or three countries where we

14:48.760 --> 14:55.880
are getting this. Still it's widely different data models, so it's not quite clear yet how

14:55.880 --> 15:08.200
we best abstract that. That is also somewhat relevant, especially on the long distance

15:08.200 --> 15:13.000
trains which can get up to 400 meters. You want to know where exactly you need to go

15:13.000 --> 15:22.880
on a platform, especially if you're in a hurry. One challenge there is that, especially in

15:22.880 --> 15:28.760
the countries where we have that, OpenStreetMap doesn't contain many of the platform section

15:28.760 --> 15:36.360
informations. That is the key to match those two datasets together, to have the proper

15:36.360 --> 15:42.720
train layout displayed correctly on the actual station map. If you think further towards

15:42.720 --> 15:49.640
the indoor navigation in a train station, that is kind of relevant. Pushing this topic

15:49.640 --> 15:56.160
even further would be to also show insights of the train. At least Deutsche Bahn has very

15:56.160 --> 16:04.520
detailed PDFs for human consumption of the interior. But there is currently, to my knowledge,

16:04.520 --> 16:13.760
no machine readable format, say like OSM for trains. That is again relevant for accessibility,

16:13.760 --> 16:24.560
for example. I need to know which parts I can go to and which parts I can't go to.

16:24.560 --> 16:31.880
The last part that is very, very recent, a lot of work on that happened just yesterday,

16:31.880 --> 16:41.200
is using the onboard APIs on trains. If you connect to the onboard Wi-Fi, there is often

16:41.200 --> 16:45.800
some kind of portal page showing you information about the current trip. That's powered by

16:45.800 --> 16:54.560
some API that we can use as well. Typically, this gives you current position, speed, and

16:54.560 --> 17:02.480
heading, and information about the journey with delays on each stop. Just showing that

17:02.480 --> 17:08.720
is of course the easiest way to integrate that. But the real value comes when we use

17:08.720 --> 17:14.360
that for higher level features again. For example, checking if you are on the right

17:14.360 --> 17:20.920
train. It might seem obvious, but if you are travelling in a country where you don't speak

17:20.920 --> 17:34.840
the local language, or in case of a multi-set train that splits up along the way, it's

17:34.840 --> 17:41.160
quite helpful if the software double checks that. Same for detecting if we have arrived

17:41.160 --> 17:46.000
yet. That is something very, very easy to realise for the human, but it's actually surprisingly

17:46.000 --> 17:56.840
tricky for the software to know. All of these things I've shown you are not

17:56.840 --> 18:06.080
tied to the app specifically, but are available as reusable libraries. For example, Nextcloud

18:06.080 --> 18:12.360
is using the ticket data extraction in the email client so you can automatically add

18:12.360 --> 18:20.800
calendar entries for your ticket when you get them by email. I think there is much more

18:20.800 --> 18:29.040
that can be built on top of all this. The itinerary app is basically for the irregular,

18:29.040 --> 18:36.560
explicitly booked kind of travel, but doesn't touch the commute use case at all.

18:36.560 --> 18:42.440
If you happen to know about any kind of relevant APIs or data sets, or have the documentation

18:42.440 --> 18:49.400
for those, or for ticket formats, we would be very, very much interested. Same if you

18:49.400 --> 18:57.600
have travel documents past, present or future that you are willing to donate to develop

18:57.600 --> 19:07.960
the X Factor or not, we are happy to take those as well. Thank you.

19:07.960 --> 19:37.640
Right. The position information we get on the train is essentially GPS, just like the

19:37.640 --> 19:43.920
GPS receiver on the train. In theory, you could do that from the phone. The problem

19:43.920 --> 19:50.120
is that reception inside a metal train is somewhat limited, so you usually get better

19:50.120 --> 19:57.360
results by using the API for that. But it is essentially GPS data you get there, so

19:57.360 --> 19:58.360
it's the same. Yeah.

19:58.360 --> 20:08.720
How do you handle sometimes like conflicting labels of certain modalities, and imagine

20:08.720 --> 20:16.040
before that the icon is a different type of transport? I think in Germany, actually, for

20:16.040 --> 20:20.040
example, the sun's subsets return, the modality is like a tram, but people describe it as

20:20.040 --> 20:28.480
a way of moving on. Yeah. That is an annoyingly complicated topic.

20:28.480 --> 20:38.240
The modality is awfully undefined. I mean, there's neither a technical nor like a product-level

20:38.240 --> 20:43.960
definition on what is a subway or metro or a tram, and it can be all kinds of hybrid

20:43.960 --> 20:54.880
things. That is one of the metadata we carry from Wikidata alongside the logos and so on,

20:54.880 --> 21:04.680
so if in doubt, we use that. But even that is there is some loss in there. I mean, there's

21:04.680 --> 21:10.360
some cities where you have trams that go on long-distance railway outside of the city.

21:10.360 --> 21:19.160
Yeah. I mean, we will never be able to capture these extreme special cases that a region

21:19.160 --> 21:28.840
or operator-specific app can capture. So, I mean, that is the price we pay for that abstraction

21:28.840 --> 21:32.840
and the one app that works everywhere approach. Yeah.

21:32.840 --> 21:42.640
One question. You showed the data about the scooters and how it has, you said it's getting

21:42.640 --> 21:48.040
better and the coverage is better. What is driving this improvement? Is that regulation

21:48.040 --> 21:56.440
or why it's getting better? That is a good question. I don't know for sure.

21:56.440 --> 22:02.560
I know that in some cities it is regulation. So, if you want a permit to operate your rental

22:02.560 --> 22:12.320
system in that city, you are required to publish your feeds as GBFS and we then happily consume

22:12.320 --> 22:22.720
that. I think another part is that somehow started very early by some US cities requiring

22:22.720 --> 22:28.760
that to give out the permits for those systems and then that kind of became the standard

22:28.760 --> 22:35.880
mode of operation for those services. So, if you get in very early, that works. I don't

22:35.880 --> 22:42.320
think there is like national or new-wide regulation. So, this is usually something that differs

22:42.320 --> 22:44.320
from city to city.

22:44.320 --> 23:02.440
How many pictures have you integrated such on-demand buses? Regarding on-demand traffic,

23:02.440 --> 23:08.720
some of the routing engines have that in their results. So, we can show that. But we currently

23:08.720 --> 23:18.880
have nothing regarding actively booking things on-demand or otherwise because that is something

23:18.880 --> 23:28.560
where there is practically no API available for external users. I don't think the railway

23:28.560 --> 23:38.080
operators or especially the inverse with the private operators, they give that to smaller

23:38.080 --> 23:42.800
businesses like us if they give it to anyone at all.

23:42.800 --> 23:48.560
You mentioned computing. What about the case when I don't yet have a ticket but I want

23:48.560 --> 23:52.880
to make the journey? So, for instance, in Germany I had a bank card 100. Is there a

23:52.880 --> 23:55.680
possibility already to enter that somehow?

23:55.680 --> 24:01.160
We also have like a general route search. So, you just specify where you want to go

24:01.160 --> 24:08.120
and it offers you depending on where you start, the options from Virgin Barn, where

24:08.120 --> 24:14.680
is in CF or wherever you are and then you can add that to the timeline as well. So,

24:14.680 --> 24:20.320
there is the ability to do manual entry for that scenario. But that would be quite cumbersome

24:20.320 --> 24:26.120
to do this every day for your commute. So, there you would want something that I know

24:26.120 --> 24:32.120
I usually go to the office between 8 and 9 in the morning. So, inform me if there is

24:32.120 --> 24:38.120
any deviation on my usual route but not necessarily make me enter this.

24:38.120 --> 24:48.120
How is the checking done? Is it a push from the server or do you do this locally in the

24:48.120 --> 24:54.120
app? Because I think if the app is continuously doing the checks in the background then is

24:54.120 --> 25:00.600
it energy draining? You mean the checks for delays? Yeah, that is polling. There is none

25:00.600 --> 25:25.600
of those services we use has a push service that we could use.

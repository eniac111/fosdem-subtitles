1
0:00:00.000 --> 0:00:20.880
Hello, everyone, and welcome to this presentation where we talk about automated short-term trend

2
0:00:20.880 --> 0:00:25.560
planning, what it means, and how we handle it in OSRD.

3
0:00:25.560 --> 0:00:27.120
So what is the problem?

4
0:00:27.120 --> 0:00:31.480
Let's say a train wants to go from station 4 to station 4.

5
0:00:31.480 --> 0:00:36.680
We could easily just find a path, but the problem is there's many trains that have already

6
0:00:36.680 --> 0:00:43.180
been scheduled, and we need to find a path that doesn't just work havoc on a timetable.

7
0:00:43.180 --> 0:00:47.480
We can be completely realistic in our simulation.

8
0:00:47.480 --> 0:00:49.480
We assume everything is on time.

9
0:00:49.480 --> 0:00:55.000
We know where every train is going to be located at any time.

10
0:00:55.000 --> 0:01:01.560
So there's a few rules we have to follow to make our blue train go to station bar.

11
0:01:01.560 --> 0:01:05.400
We can't add the trains that would be delayed by other trains.

12
0:01:05.400 --> 0:01:14.960
So in those examples, I use a signal system pretty simple where signal is red if there's

13
0:01:14.960 --> 0:01:21.080
a train behind it and the signal is yellow, meaning slow down, if the next signal is red.

14
0:01:21.080 --> 0:01:27.780
What I mean here is that our train cannot ever see a yellow signal, meaning slow down.

15
0:01:27.780 --> 0:01:34.880
We can add delay before it reaches a signal, but once the blue train sees a yellow signal,

16
0:01:34.880 --> 0:01:35.880
it's game over.

17
0:01:35.880 --> 0:01:38.080
The solution is invalid.

18
0:01:38.080 --> 0:01:39.600
The opposite is, of course, true.

19
0:01:39.600 --> 0:01:44.920
We cannot cause delay on other scheduled trains, meaning by being here, our blue train cannot

20
0:01:44.920 --> 0:01:50.800
cause another train to see a yellow signal, or red, of course.

21
0:01:50.800 --> 0:01:55.320
This means that we need to handle all the weird behaviors of the signal systems, which

22
0:01:55.320 --> 0:01:58.760
can become pretty chaotic quite quickly.

23
0:01:58.760 --> 0:02:03.800
So in these examples, there's one truck with signals going both ways.

24
0:02:03.800 --> 0:02:11.560
What happens here actually is that the signals change around the train, but what really matters

25
0:02:11.560 --> 0:02:13.280
is on the white.

26
0:02:13.280 --> 0:02:18.720
The other train cannot actually enter the main track at all, even if it's really far

27
0:02:18.720 --> 0:02:21.920
away, because otherwise it goes face to face.

28
0:02:21.920 --> 0:02:23.320
So the last signal would be red.

29
0:02:23.320 --> 0:02:30.080
The signal behind that would be yellow, and as soon as we see it, it's over.

30
0:02:30.080 --> 0:02:32.400
There's some other weird behavior.

31
0:02:32.400 --> 0:02:37.120
Sometimes we even have to know in advance where we will go next to know if we would

32
0:02:37.120 --> 0:02:38.120
be delayed.

33
0:02:38.120 --> 0:02:44.280
So in this example, if the train continues straightforward, it would see a green signal.

34
0:02:44.280 --> 0:02:50.120
But if it would turn to the white to the other train, it would see a yellow signal.

35
0:02:50.120 --> 0:02:56.200
Before we even reach the point where we need to take a decision.

36
0:02:56.200 --> 0:03:02.880
This may seem pretty minor here, but in some signals systems, we need to know like kilometers

37
0:03:02.880 --> 0:03:03.880
in advance.

38
0:03:03.880 --> 0:03:07.400
But there are some things we can do.

39
0:03:07.400 --> 0:03:14.120
The train can take detours to avoid busy areas, and we can also sometimes not go at maximum

40
0:03:14.120 --> 0:03:15.120
speed.

41
0:03:15.120 --> 0:03:19.800
Like if we need to fit between two trains that would go slower than our train, we can

42
0:03:19.800 --> 0:03:21.400
just slow down.

43
0:03:21.400 --> 0:03:26.880
What this means is that this is actually not a good thing for us, because we can't just

44
0:03:26.880 --> 0:03:30.820
find the shortest path and then find the departure time.

45
0:03:30.820 --> 0:03:37.840
We need to actually consider all the possibilities that we have.

46
0:03:37.840 --> 0:03:39.600
So that's the problem.

47
0:03:39.600 --> 0:03:43.600
And in OSRD, we are currently working on a solution to this problem.

48
0:03:43.600 --> 0:03:50.960
So OSRD, meaning open source railway designer, is an open source tool that can be used to

49
0:03:50.960 --> 0:03:57.320
edit railway infrastructure and run all kinds of simulations on them.

50
0:03:57.320 --> 0:04:02.000
Keep in mind that on these specific features, we've come a long way, but it's still very

51
0:04:02.000 --> 0:04:03.360
much a work in progress.

52
0:04:03.360 --> 0:04:08.960
So not everything is properly handled for now, and we're still currently working on

53
0:04:08.960 --> 0:04:10.640
it.

54
0:04:10.640 --> 0:04:13.560
So how do we deal with this?

55
0:04:13.560 --> 0:04:18.080
The main problem is that the solution space has a lot of dimensions.

56
0:04:18.080 --> 0:04:24.320
There's, of course, position, because we do need to find paths that go from origin to

57
0:04:24.320 --> 0:04:25.320
destination.

58
0:04:25.320 --> 0:04:34.160
There's also time, because the constraints caused by other trains depends on a certain

59
0:04:34.160 --> 0:04:38.600
time interval when the other train is here.

60
0:04:38.600 --> 0:04:44.560
The tricky one is speed, because unlike cars and bikes and most means of transportation,

61
0:04:44.560 --> 0:04:47.920
a train cannot just speed up really fast.

62
0:04:47.920 --> 0:04:53.320
It can take dozens of kilometers to just speed up or slow down.

63
0:04:53.320 --> 0:04:57.880
So if we find, for example, a solution that does reach our destination, avoiding all other

64
0:04:57.880 --> 0:05:02.800
trains, but where we reach the destination that, say, is 300 kilometers per hour, this

65
0:05:02.800 --> 0:05:03.800
is not a good solution.

66
0:05:03.800 --> 0:05:06.300
It's not even a good approximation of a solution.

67
0:05:06.300 --> 0:05:10.960
So we do need to keep track of the speed that can be reached by the train.

68
0:05:10.960 --> 0:05:17.640
So the way we do that is that we represent the search space as a graph that considers

69
0:05:17.640 --> 0:05:24.080
all those dimensions as well as all the constraints, because once we do have a graph like that,

70
0:05:24.080 --> 0:05:26.200
we can just find a path.

71
0:05:26.200 --> 0:05:29.400
And at this step, it becomes pretty simple.

72
0:05:29.400 --> 0:05:33.620
The main challenge is defining the problem itself as a graph.

73
0:05:33.620 --> 0:05:38.200
So in this case, a node would have a position, a time, and a speed to consider those three

74
0:05:38.200 --> 0:05:44.440
dimensions and must not be defined implicitly.

75
0:05:44.440 --> 0:05:49.720
To get the speed and times, we want train simulations, which we already know how to

76
0:05:49.720 --> 0:05:51.220
do in other parts of the project.

77
0:05:51.220 --> 0:05:57.640
So we consider everything we need to, like slope, curves, the rolling stock data, and

78
0:05:57.640 --> 0:06:01.480
everything we need to.

79
0:06:01.480 --> 0:06:04.000
So I have a small question.

80
0:06:04.000 --> 0:06:08.360
Is there a speed derivable from the position and time?

81
0:06:08.360 --> 0:06:18.120
Yes, but we actually compute the speed to get the position and the time.

82
0:06:18.120 --> 0:06:22.200
So I have a small graphical representation to explain really what I mean by that when

83
0:06:22.200 --> 0:06:25.080
we add time to our solution.

84
0:06:25.080 --> 0:06:29.200
So we start from a simple graph that represents the physical infrastructure.

85
0:06:29.200 --> 0:06:32.280
In this case, that would be, for example, track sections.

86
0:06:32.280 --> 0:06:37.440
And what we do is, in a way, we duplicate all nodes of the graph at different times,

87
0:06:37.440 --> 0:06:42.880
meaning that the point A always represents a specific point in space.

88
0:06:42.880 --> 0:06:48.560
But there's a different node for A at t equals 0 and another node for A at t equals 1 and

89
0:06:48.560 --> 0:06:50.080
so on.

90
0:06:50.080 --> 0:06:54.800
And then we link them in a way that actually reflects the travel time.

91
0:06:54.800 --> 0:07:02.480
So meaning that we start at A at t equals 0 and we can reach C at a certain time after.

92
0:07:02.480 --> 0:07:09.160
And yeah, we can, for example, go from A to F at the same time because we can't just teleport

93
0:07:09.160 --> 0:07:12.320
there.

94
0:07:12.320 --> 0:07:14.320
So this graph is constructed.

95
0:07:14.320 --> 0:07:19.280
As we explore it, it would be too expensive to just build a whole graph on the whole country

96
0:07:19.280 --> 0:07:20.960
at first.

97
0:07:20.960 --> 0:07:27.440
So it's all implicitly defined at first, but then we actually run simulations when we move

98
0:07:27.440 --> 0:07:31.440
forward in the graph.

99
0:07:31.440 --> 0:07:35.840
It's also discretized in time, but only when we evaluate visited location.

100
0:07:35.840 --> 0:07:41.720
What I mean by that is that when we run simulations, we actually keep full track of the time at

101
0:07:41.720 --> 0:07:43.520
full accuracy.

102
0:07:43.520 --> 0:07:49.760
But once we reach a point that has already been visited, if we've visited it at too close

103
0:07:49.760 --> 0:07:54.320
in time, we consider that it's already visited.

104
0:07:54.320 --> 0:08:02.200
Once we have that graph, we just run an A star on the result, a resulting on the graph.

105
0:08:02.200 --> 0:08:04.720
So A star means we have two functions to define.

106
0:08:04.720 --> 0:08:07.920
We have a cost function and an optimization heuristic.

107
0:08:07.920 --> 0:08:13.520
In this case, a cost function would be the travel time of the train from start to the

108
0:08:13.520 --> 0:08:15.080
current point.

109
0:08:15.080 --> 0:08:22.440
And the optimization heuristic is based on geographical data.

110
0:08:22.440 --> 0:08:31.280
And because our heuristic doesn't overestimate the remaining cost, we are going to find the

111
0:08:31.280 --> 0:08:32.480
optimal solution.

112
0:08:32.480 --> 0:08:38.280
So we will find the path that takes the least amount of time.

113
0:08:38.280 --> 0:08:43.520
But I've talked about how we add time to the graph, but I haven't really talked about speed

114
0:08:43.520 --> 0:08:44.520
yet.

115
0:08:44.520 --> 0:08:51.240
So the default behavior is that we always go at full speed unless we need to.

116
0:08:51.240 --> 0:08:55.560
By full speed, I mean not just the maximum allowed speed, like the train speed up as

117
0:08:55.560 --> 0:09:00.560
much as it can and always stays at maximum speed.

118
0:09:00.560 --> 0:09:04.920
But so in this slide, we have a space-time chart.

119
0:09:04.920 --> 0:09:10.920
So we have time on the horizontal axis and distance on a given path on the vertical axis.

120
0:09:10.920 --> 0:09:15.640
And there's an area that is unavailable, meaning there's another train, for example, in this

121
0:09:15.640 --> 0:09:18.680
specific area at a given time.

122
0:09:18.680 --> 0:09:23.120
And I've shown the edges, the arrows represent edges of the graph.

123
0:09:23.120 --> 0:09:27.800
So in this case, we can just, if we speed up as much as we can, we can go before that

124
0:09:27.800 --> 0:09:34.200
other train, but we also could go after that train, which would lead to different solutions.

125
0:09:34.200 --> 0:09:39.800
So in this case, we actually create several edges that are all considered as valid paths.

126
0:09:39.800 --> 0:09:45.480
In a way, you can see it as a decision tree, except we can actually reach the same point

127
0:09:45.480 --> 0:09:48.800
through different paths.

128
0:09:48.800 --> 0:09:55.960
Okay, so, oops, good matter.

129
0:09:55.960 --> 0:09:59.520
So I've talked about the general principle of the solution.

130
0:09:59.520 --> 0:10:04.600
Now I'll talk about a few problems we faced on how we handle them, this problem, what

131
0:10:04.600 --> 0:10:08.920
are them, concern, speed, because it's actually a pain to manage.

132
0:10:08.920 --> 0:10:15.280
So as I said, we want simulation to get the speed of the train, but we do that only one

133
0:10:15.280 --> 0:10:19.360
edge at a time when we explore the graph.

134
0:10:19.360 --> 0:10:22.440
What that means is that we don't know what comes after.

135
0:10:22.440 --> 0:10:31.080
So when we reach our destination, we only know that when we explore the graph, the edge

136
0:10:31.080 --> 0:10:34.520
that contains that destination.

137
0:10:34.520 --> 0:10:43.200
That doesn't always leave enough distance to properly break.

138
0:10:43.200 --> 0:10:49.640
So in this example, we have speed plotted with a distance, and we start in the first

139
0:10:49.640 --> 0:10:53.680
stage by going at full speed, and then we see that we need to stop there.

140
0:10:53.680 --> 0:10:56.520
We start breaking, and there's a discontinuity.

141
0:10:56.520 --> 0:11:00.200
This is not a valid solution.

142
0:11:00.200 --> 0:11:05.960
So in the next slide, it's mostly the same situation, but represented differently.

143
0:11:05.960 --> 0:11:12.200
Here we have edges of the graph, where in red, we have edges where we speed up, and

144
0:11:12.200 --> 0:11:16.200
in blue where we try to slow down, and we have the same discontinuity here.

145
0:11:16.200 --> 0:11:20.680
To stop at the end of section four, we need to enter that section at 10 kilometer per

146
0:11:20.680 --> 0:11:25.520
hour, but because we've been speeding up, we are at 50 kilometer per hour.

147
0:11:25.520 --> 0:11:30.880
So the way we do this, we handle this case, is that we go back in the graph, we backtrack

148
0:11:30.880 --> 0:11:36.280
to back propagate the constraints.

149
0:11:36.280 --> 0:11:40.320
So we see that there's a discontinuity there, and what we actually do is that we go over

150
0:11:40.320 --> 0:11:46.800
the previous section, and we create a new graph edge, but this time slowing down, and

151
0:11:46.800 --> 0:11:51.600
we know that we need to enter the last section at 10 kilometer per hour, so we create an

152
0:11:51.600 --> 0:11:54.880
edge where we end at 10 kilometer per hour.

153
0:11:54.880 --> 0:11:58.520
We notice that to do that, we need to enter that section at 20 kilometer per hour, which

154
0:11:58.520 --> 0:12:05.240
is still not the same as the previous edge, so we keep going, and we continue creating

155
0:12:05.240 --> 0:12:11.980
new edges going over the previous section until we have something that look like that.

156
0:12:11.980 --> 0:12:17.200
We have a valid path that actually stops there.

157
0:12:17.200 --> 0:12:23.040
The two different paths still exist in the graph, because if we go another direction

158
0:12:23.040 --> 0:12:30.600
or something like that, we can still find paths that would take the top path.

159
0:12:30.600 --> 0:12:32.560
Then there's another problem.

160
0:12:32.560 --> 0:12:39.440
I've talked about adding delay previously to go after another train, but I haven't explained

161
0:12:39.440 --> 0:12:41.440
how we do that.

162
0:12:41.440 --> 0:12:48.720
So when we can, as soon as we can, we shift the departure time, meaning that the train,

163
0:12:48.720 --> 0:12:55.040
for example, needs to leave not just at 10 AM, but between 10 and 12 or something like

164
0:12:55.040 --> 0:12:56.040
that.

165
0:12:56.040 --> 0:13:01.760
So if we notice that the train reached the final station 15 minutes too early, and the

166
0:13:01.760 --> 0:13:08.720
other train is already still there, we just make the new train leave 15 minutes later,

167
0:13:08.720 --> 0:13:10.120
and this fixes the problem.

168
0:13:10.120 --> 0:13:16.000
But it is not always possible, like in this example.

169
0:13:16.000 --> 0:13:22.240
If we try to shift the departure time to avoid the problems on the section three, we would

170
0:13:22.240 --> 0:13:24.360
cause new problem on section one.

171
0:13:24.360 --> 0:13:30.920
So we actually need to add delay between two specific points of the path without affecting

172
0:13:30.920 --> 0:13:33.040
the rest.

173
0:13:33.040 --> 0:13:39.560
The way we handle this is actually the same way as the other problem, meaning that we

174
0:13:39.560 --> 0:13:48.480
go back, we backtrack on the graph to propagate the, to add the delay.

175
0:13:48.480 --> 0:13:54.720
So we actually have the old edges that go at maximum speed, but we have a new edges

176
0:13:54.720 --> 0:13:59.560
going from section one to three that has what we call an engineering allowance.

177
0:13:59.560 --> 0:14:04.040
I can't go too much into details in how it's computed, but basically the idea is that we

178
0:14:04.040 --> 0:14:09.680
can do, precisely what we need to do, we add delay between two points of the path by slowing

179
0:14:09.680 --> 0:14:14.000
the train down without affecting the rest of the path.

180
0:14:14.000 --> 0:14:17.200
So this edges here isn't changed.

181
0:14:17.200 --> 0:14:24.240
This one is actually the same, but this one is slowed down.

182
0:14:24.240 --> 0:14:28.360
So we're in the end of the presentation.

183
0:14:28.360 --> 0:14:34.640
So to conclude what we can do, we can find paths that avoid delay on any train, the one

184
0:14:34.640 --> 0:14:36.640
we add and any other.

185
0:14:36.640 --> 0:14:43.200
We can take detours, we can slow down, we can have all kinds of way to avoid any scheduled

186
0:14:43.200 --> 0:14:44.200
train.

187
0:14:44.200 --> 0:14:48.440
There are some features I haven't really talked about because I didn't have the time, but

188
0:14:48.440 --> 0:14:53.120
for example, the user can input allowance parameter, what it means is that the train

189
0:14:53.120 --> 0:14:57.880
generally go a bit slower than they can at fastest.

190
0:14:57.880 --> 0:15:01.120
So as they can catch up, their delay is being delayed.

191
0:15:01.120 --> 0:15:06.600
And as far as performances go, it takes up to about five seconds.

192
0:15:06.600 --> 0:15:09.640
So it's not instant, but not really a problem for now.

193
0:15:09.640 --> 0:15:11.720
This is good enough.

194
0:15:11.720 --> 0:15:15.960
And some features that we still need to work on.

195
0:15:15.960 --> 0:15:21.280
For example, the signaling systems, for now we only support the simplest signaling systems.

196
0:15:21.280 --> 0:15:27.840
The reason for that is because we are currently refactoring the signaling engine in our system.

197
0:15:27.840 --> 0:15:33.880
We are already, which is actually really amazing and we would have loved to talk about it today.

198
0:15:33.880 --> 0:15:39.840
But it's almost finished and when it is done, we need to plug the two systems together.

199
0:15:39.840 --> 0:15:45.800
There's some features a bit more minor, like for now, the user can set the departure time

200
0:15:45.800 --> 0:15:48.320
and leave the overall time unspecified.

201
0:15:48.320 --> 0:15:52.480
We also need to do the opposite, meaning we need to arrive at a given time and we don't

202
0:15:52.480 --> 0:15:54.520
know when we leave.

203
0:15:54.520 --> 0:15:59.120
And we also need the user to be able to say we want to stop there, there, and there on

204
0:15:59.120 --> 0:16:02.120
the path.

205
0:16:02.120 --> 0:16:09.520
Okay, so I've been faster than I thought.

206
0:16:09.520 --> 0:16:15.600
So what I'm going to do is that I'll show a small video demonstration of the project.

207
0:16:15.600 --> 0:16:22.520
This is a few months old, but it shows generally what we do, what we can do with this tool.

208
0:16:22.520 --> 0:16:29.760
So we are on the Brittany region of France and we have the trains that go from Lorient

209
0:16:29.760 --> 0:16:32.680
to Breist.

210
0:16:32.680 --> 0:16:34.120
We just set the schedule.

211
0:16:34.120 --> 0:16:37.360
We have several trains going there, which we can see here.

212
0:16:37.360 --> 0:16:44.200
I won't go too much into details in what the boxes are, but generally it's like, is this

213
0:16:44.200 --> 0:16:45.200
box overlap?

214
0:16:45.200 --> 0:16:48.960
A train is slowed down.

215
0:16:48.960 --> 0:16:58.960
So now we ask for a last minute train that starts from Rennes to Breist.

216
0:16:58.960 --> 0:17:01.920
And we do find the path.

217
0:17:01.920 --> 0:17:04.280
So I'll explain it a bit.

218
0:17:04.280 --> 0:17:05.280
I do have time.

219
0:17:05.280 --> 0:17:06.680
I do have time.

220
0:17:06.680 --> 0:17:11.480
What we see here, horizontal axis is a time, vertical axis is distance.

221
0:17:11.480 --> 0:17:15.840
And previous trains we already had it at the end of the path.

222
0:17:15.840 --> 0:17:24.400
So we see them at the top and the new train goes over the whole path.

223
0:17:24.400 --> 0:17:27.040
Now we add some other trains.

224
0:17:27.040 --> 0:17:29.320
No, we don't add other trains.

225
0:17:29.320 --> 0:17:37.520
We move one of the trains so that it blocks one, actually, the path we took at first.

226
0:17:37.520 --> 0:17:44.640
So if we ask for another train, what we'll see is that it will be shifted to avoid the

227
0:17:44.640 --> 0:17:53.440
previous one.

228
0:17:53.440 --> 0:17:58.200
And we notice that it leaves around 720, something like that.

229
0:17:58.200 --> 0:18:10.200
So what we'll do is that we'll add another train, this time going to Qibron, called

230
0:18:10.200 --> 0:18:20.120
the Qibron, and we'll make it leave around that time.

231
0:18:20.120 --> 0:18:33.480
We add a few of them.

232
0:18:33.480 --> 0:18:39.240
And what we see here is that the train started before, before all those trains that have

233
0:18:39.240 --> 0:18:43.720
been added on the first, actually, I'll explain a bit more.

234
0:18:43.720 --> 0:18:46.920
The trains we have added diverge here.

235
0:18:46.920 --> 0:18:50.280
From here they move away from the path we used to Qibron.

236
0:18:50.280 --> 0:18:54.320
But so we only see them up to here.

237
0:18:54.320 --> 0:19:05.760
And the train we add starts before, then it slows down to enter in this section here.

238
0:19:05.760 --> 0:19:09.560
And we can see the speed of the trains.

239
0:19:09.560 --> 0:19:22.200
So it, anyway, I'll just move on to the questions.

240
0:19:22.200 --> 0:19:32.880
I have also a kind of links, website for the project, GitHub link, an email.

241
0:19:32.880 --> 0:19:33.880
Yes?

242
0:19:33.880 --> 0:19:41.760
Does this kind of solution is used to create schedules in the advance?

243
0:19:41.760 --> 0:19:44.600
It's not used to create the schedules, actually.

244
0:19:44.600 --> 0:19:46.600
It's used once the schedule is set.

245
0:19:46.600 --> 0:19:48.600
Like in the last minute?

246
0:19:48.600 --> 0:19:49.600
Yeah.

247
0:19:49.600 --> 0:19:51.600
You need to add a train on the train?

248
0:19:51.600 --> 0:19:52.600
Yeah, that's it.

249
0:19:52.600 --> 0:19:58.120
There's a given date where the, it's something I wanted to talk about, but I didn't really

250
0:19:58.120 --> 0:19:59.840
have time in this position.

251
0:19:59.840 --> 0:20:08.800
So there's a train railway manager offers some pass for trains.

252
0:20:08.800 --> 0:20:16.000
And at a given time, those pass are assigned to trains, like train operators who want their

253
0:20:16.000 --> 0:20:18.800
trains on those paths.

254
0:20:18.800 --> 0:20:25.160
And once this is set, all the, there's still room for more trains.

255
0:20:25.160 --> 0:20:30.400
And this is what we do here, we find the room for new trains.

256
0:20:30.400 --> 0:20:31.400
Yes?

257
0:20:31.400 --> 0:20:34.400
Five seconds response time.

258
0:20:34.400 --> 0:20:35.400
Yes.

259
0:20:35.400 --> 0:20:40.040
For how many nodes and trains?

260
0:20:40.040 --> 0:20:41.200
Not a lot of trains.

261
0:20:41.200 --> 0:20:46.680
We don't have the tools yet to import the whole, what we call SR.

262
0:20:46.680 --> 0:20:52.600
I'm not sure what the English, like the whole set of trains on the line.

263
0:20:52.600 --> 0:21:02.120
And there's generally we test with a few trains here on the, like the kind of things I showed

264
0:21:02.120 --> 0:21:04.680
and the pass of a few hundred kilometers.

265
0:21:04.680 --> 0:21:08.040
And we do know that it doesn't scale that well with a number of trains.

266
0:21:08.040 --> 0:21:14.120
And we'll work on that kind of questions once we have something actually working and finished.

267
0:21:14.120 --> 0:21:15.120
Yep.

268
0:21:15.120 --> 0:21:25.480
My question about sharing that because we live in France for me, I'm quite concerned

269
0:21:25.480 --> 0:21:28.480
with the security, from cost, et cetera.

270
0:21:28.480 --> 0:21:35.480
When you go from France after Paris to me, you are coming from several countries.

271
0:21:35.480 --> 0:21:41.480
In the France you don't have a go in the railway in between Paris and Lyon.

272
0:21:41.480 --> 0:21:45.600
You can have some stuff that can block the train, et cetera.

273
0:21:45.600 --> 0:21:48.600
Why is the problem you have in local countries?

274
0:21:48.600 --> 0:21:54.600
And especially in Canada, you share that that train for the stuff you see?

275
0:21:54.600 --> 0:21:57.600
I actually didn't really hear your question that well.

276
0:21:57.600 --> 0:21:58.600
Sorry.

277
0:21:58.600 --> 0:22:05.800
If I got it right, like you asked about the troubles we can find along the way.

278
0:22:05.800 --> 0:22:16.840
Mostly, we assume at this step that everything is on time and works as expected.

279
0:22:16.840 --> 0:22:22.040
When people work on the trucks or something like that, we know in advance that it's unavailable.

280
0:22:22.040 --> 0:22:23.040
Yeah.

281
0:22:23.040 --> 0:22:26.040
It's not real time.

282
0:22:26.040 --> 0:22:28.440
Not real time.

283
0:22:28.440 --> 0:22:29.440
Yeah.

284
0:22:29.440 --> 0:22:30.440
It's not real time.

285
0:22:30.440 --> 0:22:36.240
It's actually not exactly last minute, it's generally a few days before the train's actually

286
0:22:36.240 --> 0:22:37.240
won.

287
0:22:37.240 --> 0:22:40.600
So, yeah, it's a fair assumption to just...

288
0:22:40.600 --> 0:22:42.600
Theoretical timetable.

289
0:22:42.600 --> 0:22:43.600
Yeah.

290
0:22:43.600 --> 0:22:44.600
Theoretical timetable.

291
0:22:44.600 --> 0:22:53.600
There was one question on the chat that this problem might be a good candidate for an artificial

292
0:22:53.600 --> 0:22:54.600
intelligent plan to solve.

293
0:22:54.600 --> 0:22:55.600
I have to consider that.

294
0:22:55.600 --> 0:23:02.600
Please repeat the question.

295
0:23:02.600 --> 0:23:04.480
Oh, yeah.

296
0:23:04.480 --> 0:23:10.640
Someone has got a chat if artificial intelligence have been considered for this problem.

297
0:23:10.640 --> 0:23:17.880
We do have considered them in the project in general, but not specifically in this context.

298
0:23:17.880 --> 0:23:26.040
I personally don't think it would tell that much.

299
0:23:26.040 --> 0:23:30.120
I mean, it would be a good heuristic to know which path to evaluate before another, but

300
0:23:30.120 --> 0:23:35.280
if we want to still find a good path towards the end, we do need to explore all the kinds

301
0:23:35.280 --> 0:23:36.880
of solutions.

302
0:23:36.880 --> 0:23:41.800
The place where we thought about using artificial intelligence is a decision like which train

303
0:23:41.800 --> 0:23:44.280
goes before one another.

304
0:23:44.280 --> 0:23:51.880
So the context where we really thought about this is not in this case, but when train are

305
0:23:51.880 --> 0:23:57.880
actually running late, which one do we favor over one over the other?

306
0:23:57.880 --> 0:24:04.160
I think it could be a good heuristic in this case, but not really that important.

307
0:24:04.160 --> 0:24:08.560
There was another question.

308
0:24:08.560 --> 0:24:12.200
What are the biggest remaining challenges to be solved?

309
0:24:12.200 --> 0:24:18.640
There is a signaling interface plugging the things together because as I showed in this

310
0:24:18.640 --> 0:24:23.880
slide, this problem, this is a pain.

311
0:24:23.880 --> 0:24:30.600
We do have some leads, like some intuitions that we could do things in some way, but I

312
0:24:30.600 --> 0:24:35.840
won't go too much into details because we don't know if that's true, if the solution

313
0:24:35.840 --> 0:24:40.040
we are thinking about are valid or not.

314
0:24:40.040 --> 0:24:42.760
But we'll work on that in the next few months anyway.

315
0:24:42.760 --> 0:24:54.400
I'm working in an international organization, but an end link aviation, so same kind of

316
0:24:54.400 --> 0:24:57.400
problems, but we have a different dimension.

317
0:24:57.400 --> 0:25:07.800
I'm asking how have you managed or your organization has managed to say we will do that open source

318
0:25:07.800 --> 0:25:12.560
in a region if this type of solution available for others.

319
0:25:12.560 --> 0:25:20.320
So I guess you are working for SNCF, so you had to get some money from SNCF and make open

320
0:25:20.320 --> 0:25:21.320
source.

321
0:25:21.320 --> 0:25:26.040
How have you got agreement on that?

322
0:25:26.040 --> 0:25:30.160
So the question is how we manage to make the project open source in SNCF.

323
0:25:30.160 --> 0:25:35.080
So I'm not actually the one taking those decisions or even negotiating them.

324
0:25:35.080 --> 0:25:41.520
But the general idea, I think, that's my vision of it, is that we don't have any competition

325
0:25:41.520 --> 0:25:43.080
or something like that.

326
0:25:43.080 --> 0:25:47.760
We want the infrastructure for France and I think no one else will.

327
0:25:47.760 --> 0:25:53.240
So maybe the other countries nearby have the same kind of problem and maybe they could

328
0:25:53.240 --> 0:26:00.120
use our solution and maybe contribute to that solution, to these tools.

329
0:26:00.120 --> 0:26:07.120
And generally it makes more sense to contribute than to compete in this context.

330
0:26:07.120 --> 0:26:09.120
Thank you.

331
0:26:09.120 --> 0:26:11.120
Yeah, cool.

332
0:26:11.120 --> 0:26:17.120
Thank you for the spread.

333
0:26:17.120 --> 0:26:20.120
Thank you.

334
0:26:20.120 --> 0:26:30.120
So the presentation has arrived on time.

335
0:26:30.120 --> 0:26:38.120
We are starting in a few minutes with the next panel.

336
0:26:38.120 --> 0:26:55.120
Thank you.


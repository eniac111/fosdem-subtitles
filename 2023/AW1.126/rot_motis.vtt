WEBVTT

00:00.000 --> 00:07.000
So, we start with three presentations. It's like a routing topic now from three different

00:12.800 --> 00:18.060
countries. We present you three different routing topics, and I think all of us can

00:18.060 --> 00:23.680
relate to this topic, at least as a customer. And it's a pleasure to me to introduce Felix

00:23.680 --> 00:30.680
Gintling from Germany. He's introducing MODIS as a door-to-door platform, what is going

00:31.760 --> 00:38.440
open source in 2020, and is already used by some companies for internal use cases. And

00:38.440 --> 00:45.440
we are really pleased to hear what is MODIS about.

00:45.440 --> 00:52.440
Thank you very much for introducing me. Today I will talk about MODIS project.

01:03.120 --> 01:09.640
This is a very rough overview of MODIS. I think I could talk hours about all the details,

01:09.640 --> 01:16.000
but I tried to make it short, so to give an overview, MODIS is a mobility platform and

01:16.000 --> 01:22.240
is modular, so it has different modules for different purposes, and you can mix and match

01:22.240 --> 01:28.560
all those modules for your use case. But I think the main functionality of MODIS is

01:28.560 --> 01:35.560
the door-to-door routing that involves all kinds of means of transportation. So, this

01:35.560 --> 01:42.560
includes walking, trains, buses, flights, or we have also experiments for ride-sharing

01:43.560 --> 01:49.240
or on-demand integration, basically you name it. Everything that brings you from A to B,

01:49.240 --> 01:56.240
we can use it in MODIS. And to display the data, like the connections, we have also our

01:57.480 --> 02:03.560
own tile server, so this is a very easy way to get your own tile server. Also, if you're

02:03.560 --> 02:10.560
only interested in displaying connections or anything on the map. And of course, for

02:11.120 --> 02:17.600
the user to be able to enter their wish from where to where they want to go, we can also

02:17.600 --> 02:24.600
autocomplete places and it's open source. So, a short history of MODIS or a long history,

02:24.600 --> 02:31.600
basically it started in 1996 when I was still in primary school. So, I cannot tell you much

02:32.480 --> 02:39.480
about it, but there were first experiments about timetable data models and also the first

02:40.000 --> 02:46.000
routing algorithms. And in 2003, it became a multi-criteria optimization algorithm and

02:46.000 --> 02:53.000
I will go into some details later. In 2007, MODIS was the first platform that already

02:54.840 --> 02:59.080
had real-time information and could find connections on this real-time information. So, basically

02:59.080 --> 03:06.080
if you had delays or cancellations or reroutings, this was the first time that you could actually

03:06.080 --> 03:13.080
find alternatives that would work in real-time. Then, 2013, we had a very, very, very, very

03:13.080 --> 03:19.600
important topic. Then, 2013, we started to work on the door-to-door routing and this

03:19.600 --> 03:26.600
is actually my main topic. And there we have all kinds of special topics. For example,

03:28.080 --> 03:35.080
we had one guy working on reliability. So, to find especially reliable connections where

03:35.760 --> 03:40.200
you also consider the reliability of all the alternatives. So, if something breaks, you

03:40.200 --> 03:45.280
find still an alternative that brings you to your destination before your deadline with

03:45.280 --> 03:52.280
a high percentage of reliability considering the data from the past regarding the delays.

03:54.120 --> 03:59.780
Currently, one of our main topics is accessibility. So, we are aiming at finding connections not

03:59.780 --> 04:06.780
just for everybody who has no problems, but for all people who have some disability. And

04:06.780 --> 04:12.220
there are different profiles. So, this is a profile-based approach where you can give

04:12.220 --> 04:18.900
us the information, what profile you have and motors will find those connections regarding

04:18.900 --> 04:25.900
your profile. Additionally, we are working on park and ride. So, if you don't want to

04:27.660 --> 04:32.700
just go from A to B, but you want to go back and you have your car parked somewhere, then

04:32.700 --> 04:38.100
you have dependencies between the outward trip and the return trip. And you cannot plan

04:38.100 --> 04:44.860
those journeys easily with the algorithms that are available on the market because your

04:44.860 --> 04:51.860
outward trip and return trip would not necessarily contain the same parking place. And motors

04:51.900 --> 04:58.180
has an integrated optimization algorithm that optimizes the park and ride problem. Additionally,

04:58.180 --> 05:05.180
we are working on integrating ride hailing and ride sharing. So, different kinds of mobility

05:06.220 --> 05:12.500
and we are mixing everything together and find optimal journeys from door to door using

05:12.500 --> 05:19.500
all of them. Basically, in 2020, then came the time that we made it open source. And

05:21.260 --> 05:25.900
the open source version doesn't contain all of our experiments because those experiments

05:25.900 --> 05:31.900
were like branched from the master branch and it's a lot of work to combine everything

05:31.900 --> 05:38.060
into one version. And so, currently we are working on making all those experiments also

05:38.060 --> 05:44.100
open source and to maintain them all in one consistent version where you can also mix

05:44.100 --> 05:51.100
all the features together. Since we made it open source, we gained some interest also

05:51.100 --> 05:57.420
by other companies. So, our primary partner for all the time since 1996 was Deutsche Bahn,

05:57.420 --> 06:04.420
German Railway. And since then, since we made it open source, also other companies became

06:04.460 --> 06:09.460
interested in using our software and some of them are already using motors in production.

06:09.460 --> 06:16.460
So, and yeah, that's the path and we will be like, I'm happy to see even more usage

06:16.460 --> 06:22.460
of motors in production. Yeah, so you might also be interested who is developing motors.

06:22.460 --> 06:29.460
This is mainly the Technical University of Darmstadt. And we have at currently we have

06:29.460 --> 06:36.460
three researchers that are working on motors. That's me and to others and all the time we

06:38.460 --> 06:44.460
have a lot of students doing their thesis projects or lab topics. And so, we have a

06:44.460 --> 06:51.460
lot of like churn in developers. It's not always the same team. But yeah, that's the

06:51.460 --> 06:56.460
research topic. And as mentioned before, I want to talk a little bit about multi-criteria

06:56.460 --> 07:03.460
optimization because that's one, the main difference between rooting on the street and

07:04.460 --> 07:10.460
rooting with all kinds of transportation means is that, you know, we have a lot of

07:10.460 --> 07:16.460
rooting with all kinds of transportation means is that usually it's not sufficient to only

07:16.460 --> 07:22.460
optimize the travel time or the distance traveled, but you have also other criteria like the

07:22.460 --> 07:29.460
number of transfers or some people are like want to travel cheap or some want to travel

07:29.460 --> 07:36.460
sustainable so they don't want to have a lot of CO2 produced. And yeah, so there are

07:36.460 --> 07:43.460
different criteria and we actually don't know exactly what mix of criteria the user currently

07:43.460 --> 07:50.460
using our software has. So, this is a difficult problem to solve and since we don't know this,

07:51.460 --> 07:57.460
we give them all the optimal solutions regarding the criteria. So, basically we do multi-criteria

07:57.460 --> 08:06.460
optimization and find the Pareto set of all optimal solutions that form an optimal trade-off.

08:06.460 --> 08:13.460
And currently, the main version of MOTIS has the three criteria, departure time, arrival

08:13.460 --> 08:20.460
time, and number of transfers. So, it's better to depart later, arrive earlier, and we want

08:20.460 --> 08:27.460
also to have the number of transfers. So, in this example, we have three connections and

08:27.460 --> 08:38.460
basically, for example, the nine o'clock connection that goes to 10-15 has two transfers, but

08:38.460 --> 08:43.460
it takes longer. And then nine to ten connection has three transfers, but it's faster. And since

08:43.460 --> 08:49.460
we don't know exactly who wants which connection, we just show all of the connections. So, if

08:49.460 --> 08:55.460
we look at those criteria, we would show the optimal connection for the fastest connection

08:55.460 --> 09:05.460
for all number of transfers. And, yeah, basically the approach can be adapted to optimize a

09:05.460 --> 09:13.460
set of all criteria that you can basically measure in math that you can count in a way.

09:13.460 --> 09:21.460
So, how does it work? How do we make the door-to-door routing? Basically, we have two steps.

09:21.460 --> 09:28.460
One step is to compute the connections from the actual address where you start to all the

09:28.460 --> 09:35.460
stations that could connect you to public transport or in general, time-table-based means

09:35.460 --> 09:40.460
of transportation. And we do the same on the destination side. So, we look at all the stations

09:40.460 --> 09:48.460
in proximity to the destination, and we route basically from all those to the destination.

09:48.460 --> 09:57.460
So, we convert these options to go from the start to the station or from the destination

09:57.460 --> 10:04.460
to the destination to a set of edges. And all these edges are then inserted temporarily

10:04.460 --> 10:09.460
in the data model of our main routing algorithm. And for those main routing algorithms, we

10:09.460 --> 10:16.460
support a variety of routing algorithms that optimize the connection, the overall door-to-door

10:16.460 --> 10:21.460
connection. So, here we have, for example, the Raptor routing algorithm, the trip-based

10:21.460 --> 10:33.460
routing algorithm, or just a graph-based solution that is Dijkstra based. And, yeah, so this

10:33.460 --> 10:40.460
is the optimization approach. And it's a nice approach because it guarantees optimality,

10:40.460 --> 10:47.460
and all those algorithms that are named are producing exactly the same results. So, this

10:47.460 --> 10:53.460
is basically our quality assurance that we want to make sure that all the algorithms

10:53.460 --> 10:57.460
that we have in our system produce exactly the same results because they have the same

10:57.460 --> 11:06.460
definition. We are, like, the department at Technical University of Darmstadt that is

11:06.460 --> 11:12.460
producing or working on motors is the algorithm department. So, our focus is basically on

11:12.460 --> 11:17.460
the algorithms. But to be able to show the platform, we have some front-ends, and we

11:17.460 --> 11:24.460
have an Android app. We can show the timetable data on a live map, and we have also an interface

11:24.460 --> 11:30.460
to search the connections and actually use the routing. But those front-ends are currently

11:30.460 --> 11:37.460
not capable to display all the functionality that the backend has. So, our focus is more

11:37.460 --> 11:45.460
on the backend and algorithms. And I want to talk a little bit also about our roadmaps.

11:45.460 --> 11:54.460
So, we are currently working on making those accessible door-to-door routings possible.

11:54.460 --> 12:04.460
That's our main focus. And therefore, we are working on a new data model that is also

12:04.460 --> 12:16.460
capable of displaying or saving the timetable data in a compressed way. So, we don't have

12:16.460 --> 12:23.460
one object per connection. But if a connection takes place on several days of the year and

12:23.460 --> 12:31.460
at the same time, then we store the connection with a bit field that has a one if the connection

12:31.460 --> 12:36.460
takes place at that day and the zero if not. So, this is a very efficient way of encoding

12:36.460 --> 12:46.460
the timetable. So, additionally, we use for the street routing currently OSRM, which is

12:46.460 --> 12:54.460
very intense in memory usage. But there are alternatives, and we are trying to integrate

12:54.460 --> 13:00.460
those two. And of course, as I said before, we are working on bringing more and more of

13:00.460 --> 13:06.460
the research functionality that we have in different branches into the mainline motors

13:06.460 --> 13:15.460
so you can use them together and bring the research into production. That's it about

13:15.460 --> 13:20.460
motors. If there are questions, I'm happy to answer, or I could also make a short demo

13:20.460 --> 13:35.460
because, yeah. So, maybe questions first. Yeah.

13:35.460 --> 13:43.460
Currently, we ask the user to give us the maximum time he would like to use for the

13:43.460 --> 13:49.460
first and last part of the journey for each means of transport. So, he would say,

13:49.460 --> 13:55.460
I would like to travel maximum 20 minutes by car, and that's basically our limit. But

13:55.460 --> 13:58.460
of course, this is only one way to do it, and this is the back end functionality. So,

13:58.460 --> 14:03.460
if you would use this as a user in an app or on a website, this doesn't need to be the

14:03.460 --> 14:09.460
way that the user interacts with the system.

14:09.460 --> 14:16.460
Compared to, for instance, or maybe you were heard of that algorithm, use apparently more

14:16.460 --> 14:22.460
sophisticated for special needs, et cetera, but fundamentally, are there differences in

14:22.460 --> 14:28.460
the approach? I didn't look, like I think their algorithm is not open source, so I couldn't

14:28.460 --> 14:35.460
look into the very details. But from what I've seen, I think they are not doing their

14:35.460 --> 14:39.460
computations in one data model. Like we have basically then one data model where we do

14:39.460 --> 14:44.460
the overall optimization so we can guarantee the optimality on this data model because

14:44.460 --> 14:49.460
it's all included. And from what I've seen, what they do is that they have different

14:49.460 --> 14:56.460
routings and they try to combine the routing results in a post-processing step. And I think

14:56.460 --> 15:02.460
this doesn't guarantee optimality but produces probably reasonable results for the end user.

15:02.460 --> 15:14.460
Thank you. Are you able to take into account like a traffic jam or all the end? What kind

15:14.460 --> 15:22.460
of data do you have inside your app? We have the option to use GTFS RT real-time data for

15:22.460 --> 15:28.460
the timetable-based means of transportation. And currently we are using for the street

15:28.460 --> 15:35.460
and also our arm or like we are planning to support Valhalla. And those can or cannot

15:35.460 --> 15:41.460
depending on how you configure them. So this is not our main focus but this basically depends

15:41.460 --> 15:46.460
on which algorithm you use to compute those first and last edges.

15:46.460 --> 15:58.460
I'm interested in the connection with the APIs so obviously you have to collect a lot

15:58.460 --> 16:08.460
of data for these three-time points, real-time data and so on. And how do you deal with that

16:08.460 --> 16:14.460
within these sizes of data? Do you connect to each and every API of different transport

16:14.460 --> 16:22.460
points that you download all the data, put it all in one folder on your server and give

16:22.460 --> 16:31.460
that folder to Motus. So it has all the timetables in the GTFS format or Hafwah's Hordaten format

16:31.460 --> 16:37.460
and you give it the open street map data and you can give it for the real-time data API

16:37.460 --> 16:44.460
endpoints where Motus will pull regularly like in a one minute or 30 second interval

16:44.460 --> 16:49.460
the real-time data. And so this is basically how all the data comes together in one data

16:49.460 --> 16:57.460
model. So Motus loads all the static timetable data at boot time and possibly does some

16:57.460 --> 17:03.460
pre-processing on it and then in the real-time it pulls real-time data from the sources that

17:03.460 --> 17:09.460
you have configured it to pull. And a proper data model, is trans model of any relevance

17:09.460 --> 17:15.460
in your works? Trans model? Sorry I didn't, I haven't heard about it. Okay, it's the

17:15.460 --> 17:21.460
CN standard concerning data modeling for multimodal transport, this is why I thought that might

17:21.460 --> 17:27.460
be an association, but it's independent. Okay, it's independent. Thank you.

17:27.460 --> 17:33.460
We have more time for questions, but I think Felix is here and you can ask more questions

17:33.460 --> 18:01.460
if you have it. Thank you Felix.

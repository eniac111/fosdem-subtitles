WEBVTT

00:00.000 --> 00:12.000
All right, so yeah, our last speaker for today, for this year actually, is Cerman Gomez.

00:12.000 --> 00:20.000
And this is his first time doing a talk in general, so he's very nervous.

00:20.000 --> 00:32.000
He has a very low voice, so if you could stop breathing.

00:32.000 --> 00:35.000
Okay, do you want to start now?

00:35.000 --> 00:37.000
Okay, hello?

00:37.000 --> 00:39.000
So this is a title of my talk.

00:39.000 --> 00:41.000
It's a bit long, but the short version is at the bottom.

00:41.000 --> 00:42.000
I'm just going to talk to you.

00:42.000 --> 00:49.000
I spent some time a couple of years ago making a gimbal emulator, and I'm going to talk to you about it.

00:49.000 --> 00:56.000
So wanting some introductions, but that's my name, and if you want to reach out to me after the conference,

00:56.000 --> 00:57.000
those are some of the ways.

00:57.000 --> 00:59.000
I work as a software engineer.

00:59.000 --> 01:01.000
I don't work on emulators.

01:01.000 --> 01:04.000
I use them sometimes, but it's not part of my work.

01:04.000 --> 01:06.000
This is mostly just a hobby.

01:06.000 --> 01:13.000
So I've done all of these on my own time, and I can emulate the gimbal camera as well.

01:13.000 --> 01:16.000
So this is what I'm going to talk about today.

01:16.000 --> 01:19.000
So points one, two, three are going to be...

01:19.000 --> 01:25.000
I'm going to talk to you about my particular emulator, how you can run it if you want to do so.

01:25.000 --> 01:32.000
And afterwards, I'm going to talk more generally about gimbal emulation and how you can build your own emulator.

01:32.000 --> 01:38.000
I'll give some tips that I found that are useful for debugging.

01:38.000 --> 01:45.000
And at the end, some lessons learned, and hopefully if there is time, some demo.

01:45.000 --> 01:50.000
So this is what my target audience here is mostly...

01:50.000 --> 01:55.000
for this talk is mostly going to be emulator beginners, emulator development beginners.

01:55.000 --> 01:59.000
I find the gimbal to be quite beginner-friendly.

01:59.000 --> 02:02.000
One of the reasons is because it's very heavily documented,

02:02.000 --> 02:06.000
and there are other reasons as well that I'll get to later.

02:06.000 --> 02:11.000
If you're interested in Rust and WebAssembly, you're going to see a use case.

02:11.000 --> 02:19.000
And if you're just generally a fan of this device, then you might enjoy that also.

02:19.000 --> 02:23.000
So why make this in the first place?

02:23.000 --> 02:29.000
The main reason I'm sure many people here will relate, or people making emulators, is the nostalgia.

02:29.000 --> 02:34.000
I used to own one of these, so I want to know how it works.

02:34.000 --> 02:40.000
Another reason, more generally speaking, this system is very attractive to emulate

02:40.000 --> 02:45.000
because there's a huge amount of software out there, so you can spend many hours

02:45.000 --> 02:48.000
just trying games and seeing if they work.

02:48.000 --> 02:52.000
And if they don't work, then you can spend many more hours trying to fix them.

02:52.000 --> 02:55.000
And it's just something I do for fun.

02:55.000 --> 03:04.000
I did it mostly... I don't work on it much these days, but every time I do, it's a lot of fun.

03:04.000 --> 03:06.000
So it's made in Rust.

03:06.000 --> 03:09.000
The selling points for Rust are performance and memory safe.

03:09.000 --> 03:15.000
My main selling point is that it has a very useful package manager and build tool.

03:15.000 --> 03:22.000
It's very quick to prototype things, and I was able to put this together very quickly, actually.

03:22.000 --> 03:27.000
And one of the other main reasons I want to use it is because of WebAssembly.

03:27.000 --> 03:35.000
The support in Rust is great, so you almost get WebAssembly for free if you use Rust.

03:35.000 --> 03:37.000
The tools are very nice.

03:37.000 --> 03:42.000
And it runs on the website because it's WebAssembly, it can run on the browser, so it's very portable.

03:42.000 --> 03:46.000
That's my phone. That's my PC.

03:46.000 --> 03:49.000
It also runs natively. It's not just WebAssembly.

03:49.000 --> 03:53.000
So if you want to run it, these are the commands you need to run.

03:53.000 --> 03:56.000
There's a native build, single command.

03:56.000 --> 03:59.000
You give it the ROM and it will emulate it.

03:59.000 --> 04:04.000
The web build is just a few more commands because you have to deploy a web application.

04:04.000 --> 04:09.000
So it's just very straightforward. It just works.

04:09.000 --> 04:14.000
And that's the link if you want to try it.

04:14.000 --> 04:17.000
So I'm going to talk about the architecture and emulation.

04:17.000 --> 04:20.000
So these are the two devices that I emulate.

04:20.000 --> 04:23.000
The original game board came out in 1989.

04:23.000 --> 04:27.000
It was extremely popular. It was designed to be as cheap as possible.

04:27.000 --> 04:31.000
So lots of games were made for it, and it lasted close to 10 years.

04:31.000 --> 04:35.000
There were a few revisions in between, but it was mostly the same system.

04:35.000 --> 04:40.000
And then almost 10 years later, the Nintendo released the color version,

04:40.000 --> 04:43.000
which has still a very similar shape.

04:43.000 --> 04:46.000
And also internally, the system is also very similar.

04:46.000 --> 04:51.000
So the game board color is like a superset of the original game board.

04:51.000 --> 04:55.000
So these are the two devices that I target.

04:55.000 --> 04:58.000
And I have to mention the game board advance.

04:58.000 --> 05:01.000
It's a completely different system. It's ARM-based.

05:01.000 --> 05:05.000
It was still backwards compatible, but it's very different under the hood.

05:05.000 --> 05:11.000
So I don't support it for the time being.

05:11.000 --> 05:13.000
So I'm going to talk about the architecture.

05:13.000 --> 05:17.000
So if you open the original game board, you'll see a bunch of stuff.

05:17.000 --> 05:21.000
But for emulation purposes, we only care about those three chips.

05:21.000 --> 05:24.000
One of them has the CPU and the pixel processing unit,

05:24.000 --> 05:27.000
and the other chips are memory.

05:27.000 --> 05:31.000
So I'm going to limit this section to just talking about the CPU,

05:31.000 --> 05:35.000
the pixel processing unit, which does graphics.

05:35.000 --> 05:40.000
And at the end, to wrap it all up, I'll talk about the memory map.

05:42.000 --> 05:44.000
Which is what allows the CPU and the pixel processing unit

05:44.000 --> 05:47.000
to talk to each other, basically.

05:47.000 --> 05:50.000
So some basic stats about the CPU.

05:50.000 --> 05:53.000
It has 8-bit registers and 16-bit registers.

05:53.000 --> 05:58.000
It can do 500 things, has 500 instructions,

05:58.000 --> 06:02.000
a 16-bit address bus and an 8-bit data bus,

06:02.000 --> 06:05.000
and it can run at two different speeds.

06:05.000 --> 06:07.000
The original game board could only run at 4 MHz,

06:07.000 --> 06:11.000
but the game board caller could choose between either of those two speeds.

06:14.000 --> 06:18.000
So about the registers, some general information.

06:18.000 --> 06:20.000
It has general purpose registers.

06:20.000 --> 06:26.000
These are here for intermediate calculations.

06:26.000 --> 06:31.000
There's also a flag register, which has information about

06:31.000 --> 06:34.000
the last arithmetic instruction that they run.

06:34.000 --> 06:38.000
So if you add two numbers together, or subtract numbers together,

06:38.000 --> 06:43.000
and the result is zero, this register will tell you and other things.

06:45.000 --> 06:49.000
The 16-bit registers are basically just the 8-bit ones,

06:49.000 --> 06:52.000
but used in combinations of two.

06:53.000 --> 06:55.000
Mostly just for pointers.

06:55.000 --> 06:59.000
The general purpose ones, it has the normal program counter

06:59.000 --> 07:03.000
with the address of in-memory of the next instruction.

07:03.000 --> 07:06.000
A stack pointer for implemented subroutines,

07:06.000 --> 07:09.000
and there's a global switch for interrupts.

07:09.000 --> 07:12.000
It's boolean, so when you set it to zero,

07:12.000 --> 07:14.000
the CPU will stop listening to interrupts,

07:14.000 --> 07:19.000
such as problem presses, until you set it back to one.

07:21.000 --> 07:24.000
So how can you model this in Rust?

07:24.000 --> 07:25.000
It's very simple.

07:25.000 --> 07:28.000
This is exactly what it looks like on mine.

07:28.000 --> 07:30.000
The state is very simple.

07:30.000 --> 07:34.000
It's just a few fields for the registers.

07:34.000 --> 07:38.000
So I'm going to talk about instructions.

07:38.000 --> 07:42.000
This CPU has 500 instructions.

07:42.000 --> 07:45.000
It has your typical instructions that you would expect,

07:45.000 --> 07:49.000
so memory reads and writes, arithmetic, and branch instructions,

07:49.000 --> 07:51.000
so jumps and calling to subroutines.

07:51.000 --> 07:56.000
Some of the instructions can be conditional using the F register.

07:56.000 --> 08:01.000
On this website, you can see them color coded in a very nice table.

08:03.000 --> 08:06.000
This is at the core of the CPU.

08:06.000 --> 08:08.000
This is how you implement instructions.

08:08.000 --> 08:10.000
You have to do three things.

08:10.000 --> 08:15.000
First, you have to fetch the instruction from memory using the PC register.

08:15.000 --> 08:18.000
Afterwards, you have to decode the instruction,

08:18.000 --> 08:21.000
so that means figuring out what instruction to run

08:21.000 --> 08:23.000
based on that byte that you just read.

08:23.000 --> 08:25.000
You can do this with a, in C++,

08:25.000 --> 08:27.000
you would use a switch statement.

08:27.000 --> 08:30.000
In Rust, you can use a match statement.

08:30.000 --> 08:33.000
After you decode the instructions, you have to run it,

08:33.000 --> 08:35.000
so those are the three things you do.

08:35.000 --> 08:37.000
You fetch the code and you run,

08:37.000 --> 08:41.000
and you run it in a loop, and that's what the CPU does.

08:41.000 --> 08:44.000
This is one example of an instruction.

08:44.000 --> 08:46.000
The code is very simple.

08:46.000 --> 08:48.000
This is a memory instruction.

08:48.000 --> 08:52.000
I'm only going to comment on the return statement.

08:52.000 --> 08:56.000
This particular instruction on the real CPU would take eight cycles of the clock,

08:56.000 --> 08:59.000
and we need to keep track of this because afterwards,

08:59.000 --> 09:04.000
we need this information to synchronize all of the emulator.

09:04.000 --> 09:06.000
Otherwise, it will need to box,

09:06.000 --> 09:08.000
so that's why I returned the number.

09:08.000 --> 09:11.000
Another example of instruction,

09:11.000 --> 09:14.000
an arithmetic instruction and XOR operation.

09:14.000 --> 09:18.000
This one takes four cycles and it's arithmetic,

09:18.000 --> 09:22.000
so it modify the contents of the F register.

09:22.000 --> 09:28.000
You can look at how to implement every instruction on this PDF.

09:29.000 --> 09:32.000
You do this for 500 times.

09:32.000 --> 09:35.760
You might make mistakes,

09:35.760 --> 09:37.160
but there are ways to fix those.

09:37.160 --> 09:39.400
I'll get to those later.

09:39.400 --> 09:42.200
So you do it 500 times and you will end up with

09:42.200 --> 09:45.760
a massive match statement or a switch statement.

09:45.760 --> 09:49.080
But the code inside of each of the branches is very simple,

09:49.080 --> 09:51.560
but it's still error-prone.

09:51.560 --> 09:54.520
This is an optional thing you can do,

09:54.520 --> 09:56.720
because this is going to run very frequently.

09:56.720 --> 10:00.080
It doesn't hard to turn that into binary search,

10:00.080 --> 10:03.760
so you can optimize the code a bit using in Rust.

10:03.760 --> 10:07.960
This is very straightforward using the match statements.

10:09.760 --> 10:13.440
So that's pretty much the CPU.

10:13.680 --> 10:17.200
I'm going to switch to the Pixel Processing Unit.

10:17.200 --> 10:20.240
This is the chip responsible for graphics.

10:20.560 --> 10:25.200
So the Game Boy had an LCD panel.

10:25.200 --> 10:29.720
The size is 160 pixels by 144.

10:29.720 --> 10:31.800
Total of four colors,

10:31.800 --> 10:33.800
more on Game Boy color, of course.

10:33.800 --> 10:37.480
It runs at roughly 60 Hertz.

10:37.480 --> 10:41.480
The way graphics works on this particular system

10:41.480 --> 10:43.040
is by a composition of three layers.

10:43.040 --> 10:45.480
You have the window layer,

10:45.480 --> 10:47.480
the sprite layer, and the background layer.

10:47.480 --> 10:50.640
Then there are like the CPU has registers,

10:50.640 --> 10:52.840
this device also has registers to program

10:52.840 --> 10:57.240
the how you composite these layers together.

10:57.240 --> 11:00.280
So I'm going to go layer by layer.

11:00.280 --> 11:04.800
So the first layer is the window layer.

11:05.480 --> 11:10.320
This is usually reserved for things like game stats.

11:10.320 --> 11:12.080
It's fixed on the LCD,

11:12.080 --> 11:13.480
you can move it around,

11:13.480 --> 11:15.960
but the graphics within the layer are not movable,

11:15.960 --> 11:18.160
they are constrained to a grid.

11:18.400 --> 11:21.600
Can anybody guess this game?

11:22.080 --> 11:25.240
Yes, Link's Awakening.

11:25.240 --> 11:30.200
So that's Link. Link is a sprite on the sprite layer.

11:30.200 --> 11:34.800
So sprites are basically freely movable objects on the LCD.

11:34.800 --> 11:37.240
You can have 40 in total,

11:37.240 --> 11:39.360
and they come in two different sizes,

11:39.360 --> 11:41.960
programmable by registers again,

11:41.960 --> 11:44.640
along with other things like color,

11:44.640 --> 11:47.520
imposition, and orientation, and things like that.

11:47.520 --> 11:49.520
Finally, the background layer,

11:49.520 --> 11:51.800
what I think is the most interesting one.

11:51.800 --> 11:56.560
It's basically a grid of 32 by 32 tiles.

11:56.560 --> 11:58.840
The total size, each star is eight by eight,

11:58.840 --> 12:01.640
so the total size is 256 by 256.

12:01.640 --> 12:03.800
So it doesn't fit on the LCD screen,

12:03.800 --> 12:06.480
but you can scroll it using registers.

12:07.440 --> 12:11.160
Also furthermore, the scrolling wraps around,

12:11.160 --> 12:16.040
so you can be clever and implement infinite scrolling that way.

12:16.360 --> 12:19.360
So it cannot this.

12:19.360 --> 12:21.720
So there are more registers.

12:21.720 --> 12:24.320
I don't have time to talk about all of them,

12:24.320 --> 12:26.600
but there's a link.

12:28.000 --> 12:30.360
So by today's standards,

12:30.360 --> 12:33.800
this graphic-wise, this system cannot do much,

12:33.800 --> 12:38.360
but there are games that are quite clever using these limitations.

12:38.360 --> 12:39.560
So this is one example.

12:39.560 --> 12:40.480
It's not really a game,

12:40.480 --> 12:43.680
it's more of a technical demo, but still.

12:43.680 --> 12:47.760
So this particular example is using the background layer only,

12:47.760 --> 12:50.520
and it's modifying the scrolling register.

12:50.520 --> 12:52.280
So it's actually moving it around the screen.

12:52.280 --> 12:57.280
However, it's changing the value of the register on every single line.

12:57.280 --> 13:01.120
This accomplishes is like a vertical stretching effect.

13:01.120 --> 13:05.760
At the same time, they are stretching the internal logo horizontally in memory.

13:05.760 --> 13:07.440
You can see it right there.

13:07.440 --> 13:12.520
In combination, these two things looks like they are assuming in the internal logo,

13:12.520 --> 13:15.600
which is something that the Game Boy cannot do in hardware,

13:15.600 --> 13:19.640
but they work around this by combining hardware and software.

13:19.640 --> 13:21.880
So I think it's quite interesting.

13:21.880 --> 13:25.600
There are many more examples of games being clever to this one.

13:27.720 --> 13:31.160
So implementation-wise,

13:31.160 --> 13:38.160
this pixel processing unit is a bit more tricky to implement than the CPU.

13:38.160 --> 13:41.800
Because of that, it is a source of most of my bugs.

13:41.800 --> 13:44.400
This game is easy to recognize.

13:44.400 --> 13:47.080
It's tiny hot.

13:47.640 --> 13:52.440
So the reason it's tricky to implement correctly is because we need to keep

13:52.440 --> 13:55.920
the CPU and the pixel processing unit in constant sync.

13:55.920 --> 14:00.840
That's the reason I was returning the number of cycles on each instruction before.

14:00.840 --> 14:03.640
If you don't do it accurately enough,

14:03.640 --> 14:06.320
it would lead to stuff like this happening.

14:06.320 --> 14:10.880
However, I found that most games don't really care.

14:10.880 --> 14:14.320
Most games are quite forgiving of inaccuracies.

14:14.320 --> 14:17.000
Every now and then, you will encounter a situation like this.

14:17.000 --> 14:18.200
In this particular example,

14:18.200 --> 14:19.600
the rest of the game looks fine.

14:19.600 --> 14:24.680
It's only the inter-screen that is glitchy.

14:24.680 --> 14:28.080
I think this is one of the reasons why the Game Boy is

14:28.080 --> 14:32.840
a good beginner-friendly emulation project

14:32.840 --> 14:41.560
because you don't need to be super accurate to emulate most games.

14:41.560 --> 14:44.720
This is how you would implement the synchronization.

14:44.720 --> 14:46.000
This is how I do it.

14:46.000 --> 14:48.840
So first, on each iteration step,

14:48.840 --> 14:53.360
you implement, you run the CPU for an instruction.

14:53.360 --> 14:56.000
It will give you the number of cycles that it will take.

14:56.000 --> 14:58.720
Then you use that to synchronize the rest of the components.

14:58.720 --> 15:02.680
So you feed it to the rest of the components so that they catch up to the CPU.

15:02.680 --> 15:05.160
So you do this forever.

15:05.160 --> 15:08.880
Basically, this loop right here is the core of this emulator.

15:08.880 --> 15:11.280
It's where the emulator looks like.

15:11.280 --> 15:14.120
There are a few things like getting the image from the screen and so on.

15:14.120 --> 15:20.400
But conceptually, this is an emulator. It's very simple.

15:23.360 --> 15:27.440
So I've talked about the CPU and the big processing unit.

15:27.440 --> 15:29.120
Both have registers,

15:29.120 --> 15:34.800
but they are separate things on the circuit board.

15:34.800 --> 15:39.400
So the CPU needs to be able to modify the registers of the pixel processing unit.

15:39.400 --> 15:43.360
The way this is done is through memory because

15:43.360 --> 15:47.880
every register that is not a CPU register is exposed in memory.

15:47.880 --> 15:50.000
So by reading and writing

15:50.000 --> 15:52.400
particular values to a particular address in memory,

15:52.400 --> 15:56.880
you can modify the registers of these devices.

15:56.880 --> 16:01.000
In this, you can map the memory map a bit like this.

16:01.000 --> 16:03.120
You have the cartridge right there.

16:03.120 --> 16:06.440
The video RAM and work RAM are the same size because they

16:06.440 --> 16:09.400
are those two chips on the circuit board, those two other chips.

16:09.400 --> 16:11.920
They are the exact same chip.

16:12.320 --> 16:14.480
There are other things.

16:14.480 --> 16:18.800
The buttons themselves are inside of these registers IO.

16:18.800 --> 16:23.280
So yeah, there are some regions that are a bit special.

16:23.280 --> 16:26.520
You are not allowed to write to this region for some reason.

16:26.520 --> 16:29.880
There are other details.

16:29.880 --> 16:34.520
This link has a technical recommendation of the rest of the map in detail.

16:36.680 --> 16:41.160
So implementing the memory is quite easy.

16:41.160 --> 16:46.880
You just list every single component and every single register a bit like this.

16:46.880 --> 16:50.000
So you get the cartridge, the video RAM,

16:50.000 --> 16:52.800
pixel processing unit's registers,

16:52.800 --> 16:55.640
the buttons, sound registers,

16:55.640 --> 17:00.920
interrupt controller, and then you need to be able to read from them.

17:00.920 --> 17:03.360
So based on the address range,

17:03.360 --> 17:07.360
you route it to the appropriate device,

17:07.480 --> 17:11.400
and you need a similar method for writing values.

17:11.400 --> 17:15.160
Some of the values will be read only, so keep that in mind.

17:20.440 --> 17:24.120
So at this point, maybe you'll have a working emulator,

17:24.120 --> 17:26.440
but if it's your first emulators,

17:26.440 --> 17:27.720
as it was my case,

17:27.720 --> 17:29.560
then you'll run into bugs.

17:31.560 --> 17:36.520
They can be a bit tricky compared to other types of software I found.

17:36.520 --> 17:41.800
So there are a few strategies that I- Sorry.

17:41.800 --> 17:45.480
So there are a few strategies you can follow in order to track them bugs.

17:45.480 --> 17:49.720
The first one I could give is just because there's so much documentation about the Game Boy,

17:49.720 --> 17:52.840
you can turn it into unit tests,

17:52.840 --> 17:57.840
to unit tests, particular sections of the hardware.

17:59.680 --> 18:04.360
The other reason why the Game Boy is so beginner-friendly,

18:04.360 --> 18:07.280
is you can actually run the diagnostics.

18:07.280 --> 18:09.160
There are available ROMs you can run,

18:09.160 --> 18:12.520
and it will tell you where you have issues.

18:12.520 --> 18:16.160
So if you make a mistake on the CPU, which is likely,

18:16.160 --> 18:20.520
then this particular ROM will tell you what the mistake was.

18:20.520 --> 18:23.920
You can also integrate this into your testing framework to run in

18:23.920 --> 18:27.680
CIO for extra credit.

18:28.040 --> 18:32.040
So the next one, the next step is debugging.

18:32.040 --> 18:36.280
I'm going to show debugging using an example.

18:36.640 --> 18:38.800
After you have an emulator,

18:38.800 --> 18:42.160
the logical step is to build a debugger for it,

18:42.160 --> 18:46.400
because it will allow you to see how it will teach you things about the games running,

18:46.400 --> 18:50.120
but it will also teach you where you might be making mistakes.

18:50.120 --> 18:52.320
So in this particular example,

18:52.320 --> 18:55.400
when I run this game at the moment, it doesn't work.

18:55.400 --> 18:57.760
So basically, this is what it looks like.

18:57.760 --> 19:00.760
It just gives you a black screen,

19:00.760 --> 19:02.640
so there's nothing going on.

19:02.640 --> 19:06.840
But if you spend time making a debugger,

19:06.840 --> 19:09.440
then you can start finding clues.

19:09.440 --> 19:15.560
In this case, I spent some time just getting the instructions,

19:15.560 --> 19:18.600
the registers, the disassembly, very useful.

19:18.600 --> 19:20.560
In this particular example, thanks to that,

19:20.560 --> 19:23.360
I know what the issue with this game is.

19:23.360 --> 19:30.720
So it's reading a value from this address and expecting a value that is never there.

19:30.720 --> 19:35.240
So this address corresponds to something called a DMA transfer.

19:35.240 --> 19:38.600
What this tells me is that I have made a mistake in this emulation.

19:38.600 --> 19:42.440
So I can go to that particular section of my project and fix it.

19:42.440 --> 19:45.880
But I haven't fixed it yet because I found it quite recently.

19:45.880 --> 19:48.800
Also, I found that it's already more fun to add

19:48.800 --> 19:54.560
debugging features than it is fixing the issues themselves.

19:54.840 --> 19:57.600
I think I'll be busy recently.

19:57.600 --> 19:59.880
So that's the end of my technical talk,

19:59.880 --> 20:03.080
and I'm going to finish with some conclusions.

20:03.080 --> 20:06.120
This is my favorite glitch by the way.

20:06.200 --> 20:09.720
Only happens when you set the name to a particular name.

20:09.720 --> 20:13.720
This is very weird. So writing an emulator,

20:13.720 --> 20:15.480
at least on a Game Boy emulator,

20:15.480 --> 20:18.760
is the easy part of emulating Game Boy.

20:18.760 --> 20:21.120
Like I said, there's tons of documentation,

20:21.120 --> 20:22.920
and the hard part of the work has been done by

20:22.920 --> 20:26.720
other people who have been kindly enough to write down their findings.

20:26.720 --> 20:29.640
So I just have to read the information,

20:29.640 --> 20:32.120
interpret it, and turn it into a program.

20:32.120 --> 20:38.640
So I'll keep that in mind when I move to the next system to emulate,

20:38.640 --> 20:41.400
because it might not be as easy.

20:41.400 --> 20:46.840
So most games, as I said, are forgiving of inaccuracies.

20:46.840 --> 20:50.040
This is more of an issue with my emulator.

20:50.040 --> 20:53.280
Most games are forgiving of inaccuracies in the graphic,

20:53.280 --> 20:58.440
so this is yet one other reason why it's friendly for beginners.

20:58.440 --> 21:02.600
Finally, WebAssembly and Rust are great.

21:02.600 --> 21:06.760
If you use Rust, using WebAssembly is very natural,

21:06.760 --> 21:08.440
and the support is great.

21:08.440 --> 21:17.960
I have a small demo. It runs on the browser.

21:20.040 --> 21:30.080
So that's the LCD.

21:30.080 --> 21:34.520
I'm also drawing the video memory and the color parts.

21:34.520 --> 21:39.160
One of the things you can emulate on the Game Boy is,

21:39.160 --> 21:41.800
it came with a camera.

21:42.360 --> 21:46.200
So if you load the camera on this application,

21:46.200 --> 21:48.280
it will request permission for the camera.

21:48.280 --> 21:49.960
But I've shown the picture at the beginning.

21:49.960 --> 21:57.560
So if you cancel the permission, it will still boot.

21:57.560 --> 22:07.160
So it has a fallback. That's the Game Boy camera.

22:07.160 --> 22:11.240
So it cannot get the webcam because I haven't given you permissions,

22:11.240 --> 22:15.080
but you can still put the first demo in there.

22:15.080 --> 22:29.240
So yeah. I don't know how to use this.

22:29.240 --> 22:36.280
I think you can play games with it,

22:36.280 --> 22:37.480
but I don't know how it works.

22:37.480 --> 22:38.960
But that's the demo.

22:38.960 --> 22:51.240
So that's it from me.

22:51.240 --> 22:54.840
We got permission for like five minutes extra for questions.

22:54.840 --> 22:57.600
So people, please leave quiet.

22:57.600 --> 22:59.960
Can I just break in? I'm leaving immediately.

22:59.960 --> 23:04.360
But if you go out or please continue your questions and your discussion,

23:04.360 --> 23:08.360
please look around you and take any garbage that you see from the room here

23:08.360 --> 23:09.680
and put it in the back.

23:09.680 --> 23:11.600
If a lot of people help, it's not much work.

23:11.600 --> 23:15.120
Otherwise, we will be here forever. Thank you.

23:15.120 --> 23:18.280
I have a question. With the emulator,

23:18.280 --> 23:22.280
is it easy to add like a three or more like the actual replay?

23:22.280 --> 23:27.760
Like you can do unlimited drives and you can add other levels?

23:29.160 --> 23:32.800
So the question was if I can

23:32.800 --> 23:36.920
just to make sure that I understood the question correctly.

23:36.920 --> 23:43.880
Can I modify it in such a way that I can mess with the logic of the game?

23:43.880 --> 23:44.320
Was that?

23:44.320 --> 23:47.320
Yes. Like actually playing garbage,

23:47.320 --> 23:50.960
I can recognize when you have like three drives and you get built,

23:50.960 --> 23:54.840
you get two drives and it is probably the memory location.

23:54.840 --> 23:55.520
Okay.

23:55.520 --> 23:58.640
That's the functionality that you can use.

23:58.640 --> 24:02.760
Yeah. So the question was,

24:02.760 --> 24:08.840
can I identify particular things happening on the different games?

24:10.520 --> 24:13.280
Sorry?

24:13.280 --> 24:17.600
Use that in trainers.

24:17.600 --> 24:19.360
Do you know about trainers?

24:19.360 --> 24:20.800
No, I don't.

24:20.800 --> 24:22.360
To cheat basically.

24:22.360 --> 24:24.520
Oh, so can I point?

24:24.520 --> 24:28.520
You can change the value of a register,

24:28.520 --> 24:33.240
actually play what the user had actually played.

24:33.240 --> 24:36.400
You also had action.

24:36.400 --> 24:38.560
I know GameShark again.

24:38.560 --> 24:40.560
You can leave this right.

24:40.560 --> 24:43.560
Yeah. So the emulator is,

24:43.560 --> 24:45.600
so the question is,

24:45.600 --> 24:50.400
can I implement something like a GameShark to cheat on games?

24:50.400 --> 24:54.440
Yes, I could. The emulator is built as a library.

24:54.440 --> 24:56.560
So you can use it as a library and read

24:56.560 --> 24:59.560
arbitrary bytes to arbitrary addresses.

24:59.560 --> 25:02.440
So you could potentially build something like that. Yes.

25:02.440 --> 25:03.960
Was your first talk right?

25:03.960 --> 25:04.520
Yeah.

25:04.520 --> 25:06.040
Yeah. Well done.

25:06.040 --> 25:06.440
Thank you.

25:06.440 --> 25:07.440
Very good actually.

25:07.440 --> 25:08.080
Thank you.

25:08.080 --> 25:09.000
Thank you.

25:09.000 --> 25:11.880
This is the last presentation I ate today.

25:11.880 --> 25:12.880
You're welcome.

25:12.880 --> 25:14.600
Thank you.

25:14.600 --> 25:19.400
I also had a co-op

25:19.400 --> 25:24.080
Yeah, you have a single loop where every hardware like

25:24.080 --> 25:27.080
this is a single loop.

25:27.080 --> 25:28.080
What?

25:28.080 --> 25:31.080
I know, but this is a real part of the system.

25:31.080 --> 25:35.080
No, my question was that you have a single loop

25:35.080 --> 25:38.080
that has processes on the CPU.

25:38.080 --> 25:40.080
Yes, it's, yeah.

25:40.080 --> 25:45.080
What if you are emulating with Rust system

25:45.080 --> 25:48.080
where you want to have different threads for different peripherals,

25:48.080 --> 25:50.080
but they are all accessing the memory.

25:50.080 --> 25:53.080
Will the Rust memory save you the fuel with that?

25:53.080 --> 25:59.080
So can I use Rust to, can I run things in different threads

25:59.080 --> 26:01.080
and would the first problems?

26:01.080 --> 26:06.080
And probably yes, but that was a kind of worms I didn't want to open.

26:06.080 --> 26:10.080
And also if the system was simple enough like this one,

26:10.080 --> 26:13.080
you don't really need to optimize like that.

26:13.080 --> 26:16.080
You can all run in a single thread.

26:16.080 --> 26:18.080
But for a more complex device, sure,

26:18.080 --> 26:20.080
I would have to investigate more on that.

26:20.080 --> 26:23.080
But I didn't have to do that on this one.

26:23.080 --> 26:26.080
Question, why did you pick Rust?

26:26.080 --> 26:30.080
Was there any reason that you did not select C++?

26:30.080 --> 26:32.080
I mean C++ also does well for some.

26:32.080 --> 26:37.080
Yeah, why did I pick Rust over something like C++?

26:37.080 --> 26:40.080
It's what I use Rust for my personal projects.

26:40.080 --> 26:43.080
It's what I like using it.

26:43.080 --> 26:44.080
It's what I like using.

26:44.080 --> 26:46.080
And you know Rust better than C++?

26:46.080 --> 26:48.080
I think I do, yeah.

26:48.080 --> 26:51.080
And the processor is 6502 for a ZD?

26:51.080 --> 26:55.080
So the question was what the processor is.

26:55.080 --> 26:58.080
It's not a 6502.

26:58.080 --> 27:04.080
I think it's a mix of a Psylog Z80 and an Intel 8080.

27:04.080 --> 27:06.080
So it's like a combination of the two.

27:06.080 --> 27:08.080
Something specific custom?

27:08.080 --> 27:11.080
I think it is specific. I'm not really sure.

27:11.080 --> 27:13.080
The audio is good today.

27:13.080 --> 27:15.080
How is this thing recorded?

27:15.080 --> 27:20.080
You split your match up into a binary set.

27:20.080 --> 27:21.080
Did you actually benchmark that?

27:21.080 --> 27:25.080
Because I thought the compiler would have just translated it into a job table.

27:25.080 --> 27:27.080
On mic, you know.

27:27.080 --> 27:29.080
And we're going to get kicked out.

27:29.080 --> 27:31.080
I'll be honest, I didn't benchmark that.

27:31.080 --> 27:49.080
That is why they're very loose in change.

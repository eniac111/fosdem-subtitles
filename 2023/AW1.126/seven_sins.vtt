WEBVTT

00:00.000 --> 00:12.080
Yep, okay, then we'll start. Well, everyone's now seen all the slides, so we can just go

00:12.080 --> 00:17.320
down the pub. So, as this part of the slide says, my name is Steve, and as that part of

00:17.320 --> 00:21.060
the slide says, I'm a bit of a geek. Now, if we've all turned up to the right room,

00:21.060 --> 00:25.080
this is a talk about old computers and emulation and things that I've learned about old computers

00:25.080 --> 00:28.640
through emulation. Over the course of the next 20 minutes or so, I'm going to look at

00:28.640 --> 00:32.480
why emulation is really quite fun. I want to mention these seven things that I've learned

00:32.480 --> 00:36.920
over the last year or so, and then the honoree mentions just some other stuff that I found

00:36.920 --> 00:42.040
that was too good to go to waste. So, before all of that, who am I? What have I done to

00:42.040 --> 00:46.920
earn a place on this stage? Or is this slide should really be called? It's the ego slide,

00:46.920 --> 00:52.720
where the speaker brags about themselves for 10 minutes while everyone else gets bored.

00:52.720 --> 01:01.600
My slide has that on it. That's not a computer, that's Lego. Yeah. So, who am I? Well, I'm

01:01.600 --> 01:06.000
a game developer. I've been a developer for quite a few years. I've written console games,

01:06.000 --> 01:10.720
I've written mobile games. I've written a book,

01:10.720 --> 01:15.400
which was crowdfunded last year. And it's a very good book on old computers, because

01:15.400 --> 01:21.200
that's essentially all I do. I've spoken at this conference a few times before, and I

01:21.200 --> 01:28.440
still haven't got it right. So, everything that's on that slide is not really that useful.

01:28.440 --> 01:33.320
It's about what's not on that slide. I'm not a professional retro developer. I haven't

01:33.320 --> 01:40.360
built the Vega. I've not built the new Commodore 64 machine. Everything that I have done with

01:40.360 --> 01:46.160
retro has been just me having a fiddle around with electronics. Essentially, that's a long-winded

01:46.160 --> 01:52.320
way of saying, if I can do this, anyone can. So, why is emulation useful? Well, it just

01:52.320 --> 01:57.880
is. And it isn't necessarily about games. It's about being able to see the machine.

01:57.880 --> 02:02.480
How does it boot up? How does it start? What goes on behind the hood? And you can do it

02:02.480 --> 02:07.960
safely. You can't break anything when you're running this stuff through an emulator. So,

02:07.960 --> 02:13.800
where should we start? The Jupiter race. Each of these, I'm going to mention a couple of

02:13.800 --> 02:18.120
emulators that I've used and experimented with. Obviously, MAME has probably got all

02:18.120 --> 02:22.440
of these anyway, but MAME is just too big for me to compile. I like the smaller emulators

02:22.440 --> 02:26.720
because I can compile them easier and I can actually see. That way, I've got the development

02:26.720 --> 02:32.320
environment of the emulator and I can then run it through GCC as well. So, what did I

02:32.320 --> 02:37.400
know about the Jupiter race before all of this? Well, it uses fourth. The first thing

02:37.400 --> 02:41.520
anyone will say about the Jupiter race, well, it programs in fourth. And it's just like

02:41.520 --> 02:47.600
the ZX81 because the guys, Vickers and Alvasa, worked on the ZX81. They also worked on the

02:47.600 --> 02:51.680
beginning of the spectrum. And they said, why is Clive Sinclair making all this money

02:51.680 --> 02:55.920
on our computer? We could build a computer ourselves and we could make all the money.

02:55.920 --> 03:00.400
And they did. Unfortunately, they didn't sell any machines. So, they made all the money

03:00.400 --> 03:05.520
of about 4,000 quid. But it's a very nice machine and the prices on the old eBay are

03:05.520 --> 03:10.240
just stupid. It is why I don't have one. And when I said it's like the ZX81, it's very

03:10.240 --> 03:16.480
like the ZX81. This is the code from two different emulators that reads the keyboard. Can you

03:16.480 --> 03:27.160
spot the difference? No. There is one difference. Jupiter 8 added an extra shift button in the

03:27.160 --> 03:33.600
bottom right. And that's the only change between the two machines' keyboard code. One thing.

03:33.600 --> 03:38.800
What else do we know? Oh, it's got a font which is stored in memory. And this was really

03:38.800 --> 03:44.280
interesting. Because the font is stored in memory. But this is the font. But it's not

03:44.280 --> 03:51.400
stored like that. Well, if you have a look, look at some of the, it's stored here. That's

03:51.400 --> 03:57.400
not a very big memory location for the code. So, what's it actually doing? Well, if you

03:57.400 --> 04:02.640
look at letters, you know, some of these, they could go below the line. But most don't.

04:02.640 --> 04:07.160
So and you've got some things which go to the top and some that don't. So, if you've

04:07.160 --> 04:11.240
got a capital letter that doesn't go above a line and go below the line, why do you need

04:11.240 --> 04:17.760
all eight bytes to store that letter? You don't. You just chop the top off. And then

04:17.760 --> 04:23.400
you write a piece of code that puts that byte back in before you render it. So they managed

04:23.400 --> 04:28.120
to save a whole chunk of code, the graphics symbols you see at the top. They're not stored

04:28.120 --> 04:33.520
in memory. They're generated by code. Again, you've saved another 200 something bytes by

04:33.520 --> 04:40.760
doing that. In fact, the only symbol in the whole font which is copied in its entirety

04:40.760 --> 04:47.280
is the copyright symbol. It's the only one that uses all eight bytes. And everything

04:47.280 --> 04:53.240
else is just modified some way. And it took only 64 bytes of code to do all this munging.

04:53.240 --> 04:59.160
So that's quite a big saving over every single top and every single bottom of each letter.

04:59.160 --> 05:06.680
This machine. Oh, there's a couple of murmurs for that one. Good. It's one of my favorites.

05:06.680 --> 05:11.720
Obviously, when anyone mentions the Welsh computer industry, they have to mention the

05:11.720 --> 05:16.360
dragon because it's pretty much the only one that existed. But it's a great machine. The

05:16.360 --> 05:22.480
6.9 processor is a phenomenal piece of work. Wonderful machine. It's also told it's a bit

05:22.480 --> 05:27.640
of a rip off for the Tandy Coco. It isn't. Both the dragon and the Tandy Coco were based

05:27.640 --> 05:32.480
on the same reference design that Motorola put out to basically sell their chips. So

05:32.480 --> 05:37.200
they both both used exactly the same setup. The other thing that people know about the

05:37.200 --> 05:44.600
dragon other than the fact it uses Microsoft basic is green. The video chip defaults to

05:44.600 --> 05:54.520
green. Which color green? That's color green. Seriously, dudes. Why who thought that was

05:54.520 --> 06:07.760
a good thing to boot up to in the morning? It means your games look like this. Now, luckily,

06:07.760 --> 06:13.800
someone had the bright idea that you could actually just not use the color. Build all

06:13.800 --> 06:16.840
your games in black and white because then they look a bit better. And they look like

06:16.840 --> 06:25.680
this, which is fairly respectable for a machine from 1982. This one is Jet Set Willy. Very

06:25.680 --> 06:32.680
well known that the 48K spectrum had Jet Set Willy, but the much smaller Dragon 32 had

06:32.680 --> 06:37.200
Jet Set Willy with more rooms in it. Because they did all the graphics in black and white,

06:37.200 --> 06:40.880
so there was less color needed, so they got more data space. And of course, the processor

06:40.880 --> 06:44.600
was a lot better than the Z80. What else do we know about the dragon? Yeah, that's its

06:44.600 --> 06:50.440
font. It's not very pretty, I'm afraid. But this is the bit that I found interesting.

06:50.440 --> 06:58.400
This sets up the graphics mode. At no point are you actually sending data across the bus.

06:58.400 --> 07:05.720
If you write to a memory address, FFC6, for example, it will set a bit. Doesn't matter

07:05.720 --> 07:11.240
what data is on the data bus, it's just not read. If you write to C6, it writes a zero

07:11.240 --> 07:18.320
bit. If you write to C7, it writes a one bit. You can send data by just writing anything

07:18.320 --> 07:23.560
to an address. That, I thought, was a really interesting approach. Turns out it's not the

07:23.560 --> 07:29.960
only machine to do it. Turns out Arm did it as well. The Archimedes, they just said, right,

07:29.960 --> 07:34.360
we're not going to connect the data bus to this chip, it'll be cheaper. And then we'll

07:34.360 --> 07:40.600
write data to it just by toggling addresses. Nice, clever way. So what computer's coming

07:40.600 --> 07:47.280
next, everybody? It's the Game Boy. Pretty sure most people have had one of these. They're

07:47.280 --> 07:52.080
a bit like the Nokia phones of their era. You drop it on the pavement and the pavement

07:52.080 --> 07:58.040
cracks. That sort of thing. So what did I know about the Game Boy? Well, there are so

07:58.040 --> 08:03.800
many emulators out there that emulate this and some variation of it. Four Shades of Green

08:03.800 --> 08:09.920
and had a version of DRM. Now, I know where we are, so I'm pretty safe in saying DRM is

08:09.920 --> 08:17.160
a bad thing. But this is what they did. Now, that code is obviously too small for you to

08:17.160 --> 08:21.160
be able to see, but that's not important. What's important is that it's all on the screen.

08:21.160 --> 08:26.900
That's the first 256 bytes of the Nintendo Game Boy ROM. And in this lot, it has to set

08:26.900 --> 08:30.800
up the graphics system, the sound system, it has to do its copy protection on the cartridge

08:30.800 --> 08:35.720
you put in to make sure it's an official cartridge. And it does that in that 256 bytes of code.

08:35.720 --> 08:40.760
And then this is the bit that does the check. You put two pointers into memory, one into

08:40.760 --> 08:47.520
the cartridge that's been inserted, and one into the 256 bytes of ROM. And it says, okay,

08:47.520 --> 08:51.800
if all of these bytes in the cartridge match all of these bytes in the ROM, then it's a

08:51.800 --> 08:57.560
legitimate cartridge. You're allowed to play and the game then continues. But what bytes

08:57.560 --> 09:02.400
are these? Well, there's not many of them. You can see it goes around the loop. And if

09:02.400 --> 09:06.920
it doesn't match, the machine just locks up. That's fine. Well, these are the bytes that

09:06.920 --> 09:14.840
it checks. Can anyone spot the pattern in those bytes? Let me show you in a graphical

09:14.840 --> 09:23.120
form. Anyone spot the pattern in those bytes? The logo that comes up when you switch on

09:23.120 --> 09:31.160
the Game Boy is that it's in code. So it checks for the Game Boy Nintendo logo at the start.

09:31.160 --> 09:36.320
This means if you're doing a dodgy cartridge, you have to copy the Nintendo logo into your

09:36.320 --> 09:40.520
cartridge. This means you are committing a copyright law infringement. And because it's

09:40.520 --> 09:47.720
a logo, it's a trademark law as well. Yeah, as much as I hit the down thing, whoever came

09:47.720 --> 09:55.280
up with that idea, that was a smart idea. I just disagree with it. Pac-Man. Originally

09:55.280 --> 10:00.780
called Puckman, I can't think why they would change the name. It's a lovely little machine

10:00.780 --> 10:07.360
and it's incredible when you consider how much memory it has. 3K of memory for a full

10:07.360 --> 10:12.600
screen of color graphics. Now the way that does this is through tiling and through a

10:12.600 --> 10:18.280
lot of clever hardware. But the bit that's interesting is how it's laid out. Again, you

10:18.280 --> 10:22.120
don't really need to look at this, but if you come up close, the memory goes in this

10:22.120 --> 10:26.560
direction, then in that direction, then in that direction, then down the other side.

10:26.560 --> 10:36.000
It's a weird way of mapping. But it means that when you get to level 256, this happens.

10:36.000 --> 10:40.080
I don't expect anyone to have got there, but thanks to emulation, I can write one byte

10:40.080 --> 10:46.360
and I can actually play level 256. Now it looks like the screen is all corrupt because

10:46.360 --> 10:52.200
some kind of, it's not. You know when you're playing the game and you get oranges and strawberry

10:52.200 --> 10:57.520
and fruit in the middle a bit here, that's what it's trying to draw. They never thought

10:57.520 --> 11:01.480
anyone would get to level 256, so they never had a piece of code that checked the number

11:01.480 --> 11:05.640
of pieces of fruit that it should draw. And this is just running over all memory, drawing

11:05.640 --> 11:12.680
all the fruit that it can find and then the rest of memory that it can find. That bit

11:12.680 --> 11:20.480
there, that's brilliant. So, Pac-Man done. ZX81. Any fans of the ZX81? I was expecting

11:20.480 --> 11:27.280
a bigger cheer to be honest. We've got two fans over there. First machine I ever had.

11:27.280 --> 11:34.960
Don't worry, that's not one of my security questions. 1K of memory. One kilobyte. No

11:34.960 --> 11:41.200
colour, no sound. It's a complete moot. But we had a chess program that ran in 1K. There

11:41.200 --> 11:48.280
was a 3D monster mice, not 1K, but still 3D games on a piece of plastic, basically a black

11:48.280 --> 11:56.720
plastic cheese wedge. You can go 16K RAM pack. Wow, think of all that extra memory. What

11:56.720 --> 12:03.280
can you do with that? And a very interesting fact that I found out completely by accident.

12:03.280 --> 12:08.440
I was taking a photograph of this for the book and there's a big story about the ZX81

12:08.440 --> 12:12.240
RAM pack wobble. And because this RAM pack is set on the back of the machine, it does

12:12.240 --> 12:18.400
this and then it crashes. Well, people solve this problem by blue tack and with glue. Some

12:18.400 --> 12:24.200
people solve the problem by just buying a better machine. I solve the problem by actually

12:24.200 --> 12:28.400
sticking the two together with screws and really folding it in nice and tight. I thought

12:28.400 --> 12:32.320
I'm going to get a picture of this and this famous RAM pack wobble thing. So I measured

12:32.320 --> 12:43.160
the angle between the ZX81 case and the 16K RAM pack. It's 16 degrees. So what did I find

12:43.160 --> 12:48.120
about ZX81? Well, how does it know there's a 16K RAM pack in there or not? Well, it just

12:48.120 --> 12:52.040
tries everything. It just writes to every memory address it can find. And when it slowly

12:52.040 --> 12:55.320
says, oh, well, I've got no memory addresses over here. It says, well, that's where your

12:55.320 --> 13:00.520
memory stops. Just writes data into it and then reads it back again. Very simple, but

13:00.520 --> 13:08.040
effective. The grown up version of ZX81 was the spectrum. This one did have color of sorts.

13:08.040 --> 13:16.600
It had sound of sorts. It went beep. But what a machine. There are so many emulators for

13:16.600 --> 13:22.800
this machine, it's not even funny. Even I've written one. But what can we say about the

13:22.800 --> 13:28.000
machine or the keyboard other than being rubbery dead flesh thing is how the keyboard's red.

13:28.000 --> 13:35.760
It's kind of interesting. And it works this way. A Z80 machine has an input output system

13:35.760 --> 13:40.720
using memory and an input output system using ports. So you can communicate with systems

13:40.720 --> 13:45.680
that aren't based on a memory bus. So what does it do to read the keyboard? It does an

13:45.680 --> 13:50.880
out request onto a port. And if there was a zero in any one of these bit positions, it

13:50.880 --> 13:55.000
means the key is down. What a traditional thing at a lot of these machines are the early

13:55.000 --> 14:00.240
keys. It would always be negative logic. So if you have zero, zero, zero, zero, for example

14:00.240 --> 14:04.800
in that, it means all of those keys are down. Which funnily enough means it's quicker to

14:04.800 --> 14:09.640
check for five keys being down than it is to check for one key. Because if you want

14:09.640 --> 14:14.120
to check for a very specific key, you've got to check the individual bit. Whereas if you

14:14.120 --> 14:18.440
just don't care about it, you just say, right, well, if it's not, if it isn't one, one, one,

14:18.440 --> 14:22.720
if it's, you know, it will just trigger as one of these keys is down. That's all it needs

14:22.720 --> 14:28.240
to worry about. And finally, of our seven, the Commodore 64, which I'm kind of contractually

14:28.240 --> 14:34.680
obliged to sort of put in since I put in Sinclair as well before. Commodore 64, what can we

14:34.680 --> 14:39.320
say? Well, it's a bread bin. And there are far too many emulators as well to mention.

14:39.320 --> 14:43.760
It was originally called the Vic 40, because the one before this was the Vic 20. And by

14:43.760 --> 14:52.040
a nice coincidence, 40 and hex is also 64. A lot of memory, 64 kilobytes of memory, 64K

14:52.040 --> 14:55.640
of memory. Hang on. Wait a minute. How does that work? How can you have a machine with

14:55.640 --> 15:07.200
64K of memory in the address range is always 64K. So you've got 64K of memory. And that's

15:07.200 --> 15:11.280
all you could ever get. Where's everything stored? Where's your basic interpreter? Where's

15:11.280 --> 15:17.160
the system? If you've got 64K of memory, there's not enough room to store the system. Well,

15:17.160 --> 15:22.520
this is what it did. It gave you all the memory and they said, actually, no, I need this bit

15:22.520 --> 15:27.780
for my ROM. I need this bit for the SID chip to do the sound. I need this bit for my kernel.

15:27.780 --> 15:34.200
So essentially, you don't have 64K of memory. It's all hidden by the ROMs. But there was

15:34.200 --> 15:41.920
an instruction you could call, which was that. And it would basically say, yeah, I know there's

15:41.920 --> 15:48.040
a basic ROM over there. But really, I know machine code. So just ignore the ROM. And

15:48.040 --> 15:53.640
it just switches the whole ROM off. If you don't want to use the kernel or the system

15:53.640 --> 15:58.080
ROMs there to do the rendering to the screen, you can just say, well, I know where the screen

15:58.080 --> 16:02.960
data is, I'll just write to it directly. So you can turn that one off as well. And essentially,

16:02.960 --> 16:05.880
if you're prepared to go the whole machine code route, you can just turn it all off.

16:05.880 --> 16:12.160
And you've got 64K of memory. It was the only way you could have done it. So what are the

16:12.160 --> 16:17.800
other mentions that we should do? Well, I should probably mention the X81 again, because

16:17.800 --> 16:22.760
it is just an amazing machine. I also have to mention the Game Boy again, obviously,

16:22.760 --> 16:27.040
not because it's a brilliant emulator, but one of the talks later on is about the Game

16:27.040 --> 16:34.800
Boy emulator. And they're in the room and I don't want to offend them. Isn't that right?

16:34.800 --> 16:38.760
The Spectrum, the jet pack game. There's a couple of things I'm using about this game.

16:38.760 --> 16:46.840
One very good game. The people who wrote it later became rare, but did golden eye. This

16:46.840 --> 16:52.440
drew the screen backwards. Most people think when you draw a screen, you start at the top

16:52.440 --> 16:57.200
and you go down to the bottom, right? That's how you do it. Well, they couldn't do that

16:57.200 --> 17:01.520
because their code was a bit slow. So what they realized is if I'm drawing the screen

17:01.520 --> 17:06.200
this way, if you don't get to the bottom of the screen before the TV gets to the bottom

17:06.200 --> 17:11.440
of the screen, you only ever get half a screen. So what they did is they drew it backwards.

17:11.440 --> 17:14.640
You start at the bottom and go up to the top. That way it doesn't matter if your game's

17:14.640 --> 17:21.020
too slow. You're only ever going to get the crossover once beflamed. Worst case scenario.

17:21.020 --> 17:24.240
So as the screen is refreshing this way, you're rendering that way. And if you ever see a

17:24.240 --> 17:28.560
little black line when you play jet pack, that's what it is. It couldn't render the

17:28.560 --> 17:33.560
screen quick enough. And it's just missed the flyback code. The other thing is it's

17:33.560 --> 17:39.760
also 16K game, which means you can fit it onto a cartridge and this cartridge can take

17:39.760 --> 17:45.720
the place of the Spectrum ROM. And this was a very unpopular thing. I mean, you think,

17:45.720 --> 17:49.440
you know, games lady, look, who remembers cassette tapes? I've suddenly realized we

17:49.440 --> 17:55.360
might have an audience that have no idea what cassette tape is. These games were loaded

17:55.360 --> 17:59.560
off cassette and they would make a screechy noise. Yeah, that sort of thing. That's a

17:59.560 --> 18:04.760
good rendition. Let's play. I'm sure somewhere somewhere can actually sing the sound tunes

18:04.760 --> 18:09.200
from the Spectrum and actually load them into a machine. That's probably possible. I don't

18:09.200 --> 18:12.960
have pitch perfect, but I'm sure it's possible. So they think, why would I want to listen

18:12.960 --> 18:17.200
to seven minutes of screechy noises? Sure, I just want to put a cartridge in. So Sinclair

18:17.200 --> 18:22.800
made a cartridge system. It had 10 games on it. And that was it flop. But because it fitted

18:22.800 --> 18:27.200
in 16K, it could be done as a cartridge. And because it fits in the same memory as the

18:27.200 --> 18:35.440
ROM means you can't use any of the Spectrum ROM capabilities in your code. The Acorn BBC

18:35.440 --> 18:40.400
Micro, popular for anyone who was in the UK during the 80s, because this was the computer

18:40.400 --> 18:46.080
we had at school. It was deemed educational enough to be allowed in the classroom. What's

18:46.080 --> 18:51.280
nice about this one is that they have a little credits page in the ROM. Now it's very difficult

18:51.280 --> 18:57.040
to see that on an actual real world machine. Because when I showed you the Commodore 64

18:57.040 --> 19:02.560
and the ROM was overlapping the RAM, the same thing is true of the BBC. Its ROM was overlapped

19:02.560 --> 19:08.720
by something else. So you can't read the thanks to page. But because of emulation, you can.

19:08.720 --> 19:13.560
And you can see all the people they thank. Pretty much everyone and their wife. And they

19:13.560 --> 19:24.480
thank the city of Cambridge. No, nop. No operation. No operation. It doesn't do anything. It's

19:24.480 --> 19:29.280
an assembler instruction that pretty much every machine has. Just does nothing. So why

19:29.280 --> 19:38.200
would you ever code that? Well, when you're poor, like what I is, you don't have an assembler.

19:38.200 --> 19:41.720
Most people, you know, you have an assembler, you type in some reasonably Englishy type

19:41.720 --> 19:45.120
things into the assembler, it would convert it into machine code and then the machine

19:45.120 --> 19:51.000
code would run on the machine. I didn't have an assembler. So I had to hand assemble everything

19:51.000 --> 19:55.280
by looking up in a reference book and saying I want to do this instruction. This is the

19:55.280 --> 19:59.680
number I need to do. And I typed that number in manually to my machine. Now when you do

19:59.680 --> 20:05.080
a jump that goes backwards, you have to write it in two's complement. And a jump like that,

20:05.080 --> 20:10.840
say f0 is back about, what is it, about 16 instructions about. But I can never remember

20:10.840 --> 20:17.160
if it includes the instruction itself or not. So this instruction is two bytes. So is this

20:17.160 --> 20:25.080
going back 16 or 14? No idea. So all I would do is I'd put a big stack of nops. So wherever

20:25.080 --> 20:30.680
it jumped to, it's going to be a safe instruction. And it's not going to mess up the machine.

20:30.680 --> 20:39.560
Turns out I wasn't the only person to have ever done that. Microsoft basic. If you type

20:39.560 --> 20:47.040
wait 6502, it prints Microsoft on the screen. Because these bytes are hidden in the computation

20:47.040 --> 20:53.880
for the sign function. But that's not ASCII. If you mask off those bits, shift them around

20:53.880 --> 21:01.320
a bit, subtract something else, then it's Microsoft but backwards. And it was Microsoft

21:01.320 --> 21:07.480
and Apple put a lot of these sort of things. Steve Jobs was very scared. And quite rightly

21:07.480 --> 21:12.920
so. Loads of people were trying to copy the Apple 2. Very, very popular computer, particularly

21:12.920 --> 21:17.360
in America. So Steve Jobs put a thing in there where if you went up and you pressed a special

21:17.360 --> 21:23.440
combination of keys, it would put up a big icon saying stolen from Apple. I was going

21:23.440 --> 21:28.640
to put that on the slide. Unfortunately, copyright means I can't put it on the slide. But I can

21:28.640 --> 21:33.400
show you Microsoft's, one of Microsoft's many little things they put in there. So with

21:33.400 --> 21:39.040
that I shall end. My beer is getting seriously low. I will update my FOSDEM scorecard. There

21:39.040 --> 21:44.240
we go. You'd think after 23 I'd be good at this by now, right? So with that in mind,

21:44.240 --> 21:49.640
I'll open the floor to questions or even if you've got nice stories about old computers,

21:49.640 --> 21:53.360
this is a talk where it's acceptable to use the phrase, this is more of a comment than

21:53.360 --> 21:58.360
a question. So with that in mind, I'll say thank you very much and over to you.

21:58.360 --> 22:13.480
How are we doing? Yeah, we've got eight minutes for questions. All general chit chat. Whatever

22:13.480 --> 22:22.920
we have. There is one over there. Can I tell you on the what's right? Oh, yes. So I'm

22:22.920 --> 22:32.000
not going to be able to do that. So what about Amstrad? Amstrad as a company, if you loved

22:32.000 --> 22:37.080
Amstrad on I think the fifth of June 1984, you hated them the day after because they

22:37.080 --> 22:42.560
bought Sinclair. In America there's a show called The Apprentice. In the UK we have a

22:42.560 --> 22:49.240
version where Alan Sugar, who created Amstrad, essentially, he bought he had his own range

22:49.240 --> 22:55.320
of machines, CPC 6664s and things like that. They are surprisingly good machines for a

22:55.320 --> 23:00.880
machine that sold a couple of million copies. It doesn't sound like a lot nowadays. But

23:00.880 --> 23:07.800
back then that it was a really good, well made machine, surprisingly enough. Unfortunately,

23:07.800 --> 23:18.440
I don't have one. You have and keep it so. Yes, they did. There was meant to be that

23:18.440 --> 23:26.440
their chips are called Roland and Dave, I think, named after the designers. Yeah, so

23:26.440 --> 23:32.040
it's another that I do machine. Yeah, the spectrum and what it spawned really did sort

23:32.040 --> 23:35.680
of say, well, we already know that at so we're going to go and set up our own computer company

23:35.680 --> 23:40.640
and use the ZT again. It's not that it was the best machine or the best processor, but

23:40.640 --> 23:47.080
the ZT did get used in so many things. So it's this is kind of disproportional to its

23:47.080 --> 24:08.520
value as a chip. But it's good to hear some Amstrad here. Yes. Yes, it was. So the question

24:08.520 --> 24:17.680
is about the I didn't I didn't realize I was doing funnies. Yes. So the Commodore 64 was

24:17.680 --> 24:23.800
called Vic 40 in sort of pre production prototyping. ZX Spectrum was called ZT2 during its prototyping

24:23.800 --> 24:30.520
stage. Not unsurprisingly, it came after the ZX80 and ZX81. The bits which I'm so glad

24:30.520 --> 24:34.480
you brought it up because it's something I forgot to mention earlier. The ZX80 that Sinclair

24:34.480 --> 24:39.920
produced was named because of the Z80 chip. It was Z80 chip with the extra special ingredient

24:39.920 --> 24:45.880
ZX for extra. ZX81 was called 81 because it came out the year after and was therefore

24:45.880 --> 24:52.320
was related to the year not ZX80. The spectrum was called the spectrum because it had colour.

24:52.320 --> 24:59.520
Therefore, ZX81 is probably the only computer ever named for its year of release. I've never

24:59.520 --> 25:08.960
found another one. Except probably a gateway 2000. But that's a PC and they're boring.

25:08.960 --> 25:17.560
So I have a feeling that it's predominantly Western devices. You also know some like non-Western

25:17.560 --> 25:24.720
one like Russia. Yes. So the question is, do I know anything about non-Western machines,

25:24.720 --> 25:33.040
Russian Chinese machines? And the answer is no. Because I'm of that sort of age, I remember

25:33.040 --> 25:36.320
when there was an iron curtain and it was called an iron curtain, whether that's politically

25:36.320 --> 25:41.600
correct or not, I don't know. But we couldn't get those machines into the West and they

25:41.600 --> 25:47.600
couldn't get our machines across. So they would essentially either smuggle some in or

25:47.600 --> 25:52.060
they would find circuit diagrams and then rebuild their own. And there is a massive

25:52.060 --> 25:59.080
scenario of clones and copies and variations from what used to be the whole sort of Eastern

25:59.080 --> 26:05.160
block. They are all impressive. They look like they're homemade and they just look

26:05.160 --> 26:11.240
amazing. It's just the physicality of the machine. You know, they are carbon copies

26:11.240 --> 26:14.840
of the other spectrums and things of their ilk, but they are lovely.

26:14.840 --> 26:26.840
In Japan, I think Japan was Western enough. Apparently the company, which was known for

26:26.840 --> 26:33.840
making mechanical games also released the console, was supposed to be an electrical

26:33.840 --> 26:38.840
console but was an electronic mechanical. It was a home console actually. So I can't remember

26:38.840 --> 26:44.680
the name. So repeating the question for the cloud, something, something, something, Japanese

26:44.680 --> 26:52.880
stuff, tell me, electromechanical computer. How do we do? Okay. I think you're about to

26:52.880 --> 26:55.000
kick me off, aren't you? Almost.

26:55.000 --> 27:02.000
Just a comment. I don't know if you are aware, but reading the keyboard on the spectrum,

27:02.000 --> 27:07.000
the last eight beats actually select each of each row of the keyboard. So you can do

27:07.000 --> 27:16.000
very simple routine to read. Is any key pressed by just doing a single read?

27:16.000 --> 27:24.680
Yes, press any key. If it's quick, think.

27:24.680 --> 27:35.520
The youngest machine I've made an emulator for. Tricky. It probably is a spectrum or

27:35.520 --> 27:42.960
something like that. Yeah, I mean, one of the first ones I did was a chip eight emulator,

27:42.960 --> 27:46.000
which is an interesting one. Everyone, if you want to write an emulator, write chip

27:46.000 --> 27:50.320
eight emulator, because the machine never existed. There was things like the COSMAC

27:50.320 --> 27:57.440
that was it back in the 1970s. This machine would actually run a sort of a simulator or

27:57.440 --> 28:02.920
an emulator inside itself to run the chip eight code. Chip eight doesn't exist in the

28:02.920 --> 28:07.640
machine. It was an interpreted language that was being run on a 70s processor. If you see

28:07.640 --> 28:11.920
any little TV games where you'd sort of play a version of punk, the chip inside that is

28:11.920 --> 28:20.000
probably an RCA 1802, which would run the simulated chip eight language. So sorry, I

28:20.000 --> 28:26.400
went the other way with the question from the youngest to oldest, but maybe. OK, any

28:26.400 --> 28:37.880
other we got? We got two possums.

29:26.400 --> 29:38.760
It was an Apple one story I wanted to get in, but I didn't think I could get that in

29:38.760 --> 29:45.120
in the time frame. And it's about the Apple two ROM. Sorry, the Apple one ROM, it doesn't

29:45.120 --> 29:49.960
do much. It's just basically write data into memory, read data from memory and execute

29:49.960 --> 30:06.360
a program. Use a jump if carry flag, because the carry flag is always going to be set in

30:06.360 --> 30:10.560
one particular way. So it acts like a different type of jump because that different type of

30:10.560 --> 30:15.840
jump didn't exist. But yeah, I didn't have quite the room to include everything because

30:15.840 --> 30:24.640
my time is up. Get lost. Go home.

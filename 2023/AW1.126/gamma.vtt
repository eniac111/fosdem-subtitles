WEBVTT

00:00.000 --> 00:13.560
So, our museum is located in Namur, so it's not far from here, so if you have some time

00:13.560 --> 00:15.840
to come, you're welcome.

00:15.840 --> 00:18.720
So, we have different mission, of course.

00:18.720 --> 00:25.600
One of it is to preserve all machines, to show them to the public, and also to study

00:25.600 --> 00:27.880
those machines, to keep understanding them.

00:27.880 --> 00:32.000
So, I might talk more precisely about that.

00:32.000 --> 00:35.880
And actually, why this machine?

00:35.880 --> 00:44.280
Actually we have a big collection, part of our museum is actually a big mechano-graphic

00:44.280 --> 00:48.600
collection, you can see it's here.

00:48.600 --> 00:58.720
So, we have a whole bunch of machine, electro-mechanical machines that are still being maintained.

00:58.720 --> 01:06.200
Unfortunately we don't have the bull, Gemma Trois, it's very rare, but it was connected

01:06.200 --> 01:07.200
with those machines.

01:07.200 --> 01:15.480
So, we have many documentation about those machines, and we were interested to study

01:15.480 --> 01:17.000
that machine more specifically.

01:17.000 --> 01:23.040
So, I will go through the historical context, make you discover the machine, and then go

01:23.040 --> 01:30.400
into it to try to emulate it, looking at some existing emulators, and then detailing our

01:30.400 --> 01:33.600
own emulator and what we learned with it.

01:33.600 --> 01:40.200
So, let's go back in time, so you know we are here now, in 2023.

01:40.200 --> 01:51.800
So, if we go back, how long is it, 70 years ago, in the 50s, just after World War I, the

01:51.800 --> 01:57.160
first generation of computer was developed.

01:57.160 --> 02:05.000
So, at that time the technology was very different than today, because there were no integrated

02:05.000 --> 02:10.160
circuits, there were no CPU, microprocessor, they were developed in the 1980s.

02:10.160 --> 02:18.080
In the 70s, there were no TTL circuit, there were no transistors, there were no magnetic

02:18.080 --> 02:19.080
core.

02:19.080 --> 02:25.000
Actually, when you really want to build a computer, you had technology like vacuum tubes

02:25.000 --> 02:29.040
and delay lines to try to store some memory and drums.

02:29.040 --> 02:36.440
So, it was really a very different technology, and of course you can imagine the memory was

02:36.440 --> 02:39.160
very small.

02:39.160 --> 02:49.520
And so, another point is that at that time, well, most of the processing was made because

02:49.520 --> 02:55.320
of course there was automation before the computer, so most of the automation was done

02:55.320 --> 02:58.320
through electromechanical machines.

02:58.320 --> 03:05.160
So, tabulating machine, you know it was developed in the end of the 19th century with the, oh,

03:05.160 --> 03:12.480
with the tabulating machine and then it became the IBM company.

03:12.480 --> 03:19.200
And you can see here that there was some kind of transition between that area and those

03:19.200 --> 03:24.280
machines, those computers that were starting to be developed.

03:24.280 --> 03:31.240
And actually, the interesting point is that one that I will show you actually, at the

03:31.240 --> 03:37.920
beginning it was not really a computer, it was still some kind of auxiliary calculator

03:37.920 --> 03:42.640
for tabulating machine, that one that you can see in our museum.

03:42.640 --> 03:53.160
And after, actually, it began to improve and the dependency between the machine were reversed.

03:53.160 --> 04:01.520
So, the gamma 3 became the computer and the tabulating became the peripheral.

04:01.520 --> 04:07.960
So, you can see other machine after, of course, you can see that will develop also a gamma

04:07.960 --> 04:15.360
60, gamma 30 machine, but in the second generation, so I will not focus on that.

04:15.360 --> 04:19.880
So, maybe in the next for them.

04:19.880 --> 04:23.680
And so, how did we study the machine?

04:23.680 --> 04:27.120
Of course, we have documentation at the museum.

04:27.120 --> 04:33.480
There is also a number of existing examples of that machine, one in OrgÃ© where it was

04:33.480 --> 04:36.640
built by Beaul, in Grenoble.

04:36.640 --> 04:41.160
They acquired one and they preserved it and one in Frankfurt.

04:41.160 --> 04:48.520
So, of course, we don't have one, but we have those documentation and we have also many

04:48.520 --> 04:55.560
documentation that was also provided by Acornis, which is another museum located in Grenoble.

04:55.560 --> 05:00.600
And there are a few emulators, so we'll come back to that later.

05:00.600 --> 05:02.600
Have a look at the hardware.

05:02.600 --> 05:06.960
So, as I told you, it's a first generation computer.

05:06.960 --> 05:11.080
It's based on vacuum tube delay lines.

05:11.080 --> 05:15.640
Actually, the code was stored in a connection panel.

05:15.640 --> 05:19.960
So, you can see it on the top there.

05:19.960 --> 05:28.760
So, in order to program it, actually, you had to plug the instruction to say, well,

05:28.760 --> 05:36.760
the first instruction, it has four characters, but the first character, it's that exact

05:36.760 --> 05:37.760
decimal code.

05:37.760 --> 05:39.880
The second one is that code and so on.

05:39.880 --> 05:42.560
So, it's really like the spaghetti coding.

05:42.560 --> 05:48.640
And for that reason, actually, the spaghetti coding was also used in a tabulating machine.

05:48.640 --> 05:53.000
So, it was the way to code at that time.

05:53.000 --> 05:58.240
And that's also the reason why we cannot really call it a computer in that form because it

05:58.240 --> 06:03.440
does not follow the von Neumann architecture because in that architecture, you have to

06:03.440 --> 06:06.920
have the code inside the main memory.

06:06.920 --> 06:14.160
Although some old that panel was memory mapped, so you could consider it like some kind of

06:14.160 --> 06:16.560
read-only memory.

06:16.560 --> 06:18.560
What about the memory?

06:18.560 --> 06:22.920
Memory itself, actually, it was only seven registers.

06:22.920 --> 06:29.920
And in order to keep the information, actually, the information, it was the equivalent of

06:29.920 --> 06:38.080
six bytes, so it's 12 characters of four bits.

06:38.080 --> 06:47.360
It was just circulating in a line with a regeneration system, so it's a LC circuit.

06:47.360 --> 06:55.000
And for just one word, so for six bytes, you can see the device here, it's more than eight

06:55.000 --> 06:56.000
kilograms.

06:56.000 --> 07:05.040
So, you imagine the start of the...

07:05.040 --> 07:08.320
It was really very big.

07:08.320 --> 07:14.280
About the computation, it was also based more on the data, so we'll not go into all the

07:14.280 --> 07:15.280
details.

07:15.280 --> 07:17.920
It was mostly addition and subtraction, as I will see.

07:17.920 --> 07:24.080
The multiplication and division were implemented through iterative addition and subtraction.

07:24.080 --> 07:26.200
And what about the frequency?

07:26.200 --> 07:29.000
The frequency was 2.5 hertz.

07:29.000 --> 07:30.000
Why that?

07:30.000 --> 07:31.640
Actually, it could go...

07:31.640 --> 07:36.680
The inner could go faster, but it was just because it was synchronized with the mechanical

07:36.680 --> 07:43.920
machine that we've bunched car, so it was limited by that part.

07:43.920 --> 07:46.200
And you can see also there is a nice drawer.

07:46.200 --> 07:51.920
It's really easy to open, of course, for the maintenance because when a vacuum cube had

07:51.920 --> 07:59.760
a problem, you had to replace it and it was designed for that.

07:59.760 --> 08:02.280
So is it a computer or a calculator?

08:02.280 --> 08:11.800
Well, in French, we have different tapes, but as I told you, we cannot really consider

08:11.800 --> 08:17.160
it as a computer first time because of that.

08:17.160 --> 08:25.080
It was not following the von Neumann architecture, and it was really designed as auxiliary machine

08:25.080 --> 08:27.360
for the tabulating.

08:27.360 --> 08:36.240
So as you can see there, a quote from a guy who designed the machine in 1953.

08:36.240 --> 08:39.040
So it's really an extension.

08:39.040 --> 08:48.000
And the good point is that that computation was so fast that there was no delay by the

08:48.000 --> 08:53.600
calculation, so it was really transparent for the tabulating.

08:53.600 --> 08:59.240
And actually at that time, well, the programs inside the machine were more like auxiliary

08:59.240 --> 09:04.280
computation that were augmenting the capability of the tabulating machine.

09:04.280 --> 09:05.280
And there there were evolutions.

09:05.280 --> 09:06.800
That's the interesting point.

09:06.800 --> 09:14.480
There was a version, of course, that first version is only adding a substring integer,

09:14.480 --> 09:20.240
so there was a version that was able to do floating points.

09:20.240 --> 09:25.800
And then in 1957, there was a dynamic extension.

09:25.800 --> 09:26.800
That's the interesting point.

09:26.800 --> 09:33.560
It's about 100 kilobytes, and it could store the program.

09:33.560 --> 09:38.680
So from that time, we can say then that it's really the first French computer, and it's

09:38.680 --> 09:47.880
also the transition between the electromechanical device, the electromechanical area, and the

09:47.880 --> 09:52.200
computer area.

09:52.200 --> 10:06.440
Also, another interesting point is that those first computers were not using binary or hexadecimal

10:06.440 --> 10:07.440
representation.

10:07.440 --> 10:11.160
They were still computing in decimal.

10:11.160 --> 10:16.560
So it's interesting because I found it's in front of this transition there.

10:16.560 --> 10:25.720
And there is a whole discussion about should we use decimal or should we use binary or

10:25.720 --> 10:28.320
hexadecimal for computation.

10:28.320 --> 10:34.400
So there was some advantage, benefit, and some disadvantage.

10:34.400 --> 10:36.880
So you can see the advantage.

10:36.880 --> 10:38.560
Two figures, zero and one.

10:38.560 --> 10:41.080
It's really powerful for the relay.

10:41.080 --> 10:44.360
It's ideal to map.

10:44.360 --> 10:48.920
And for the disadvantage where binary, it's become very long, very long word, and we need

10:48.920 --> 10:52.560
to translate back and forth with the decimal.

10:52.560 --> 10:55.440
So the conclusion, it's quite funny.

10:55.440 --> 11:00.560
We will use semi decimal, which actually is the name for binary coded decimal, and then

11:00.560 --> 11:06.160
introduce those coding on a four bit for the binary coded decimal.

11:06.160 --> 11:07.920
So that was for the first version.

11:07.920 --> 11:15.280
Also they came back on that decision and actually an update for the drum extension was able

11:15.280 --> 11:22.680
to support the binary mode.

11:22.680 --> 11:24.560
So what do we have as memory?

11:24.560 --> 11:27.040
As I told you, we have those registers.

11:27.040 --> 11:30.480
Actually, we have seven main registers.

11:30.480 --> 11:33.460
You can see here a bit more because there were extensions.

11:33.460 --> 11:40.040
So a register is one word of 12 digits, 12 characters.

11:40.040 --> 11:43.680
So those four bit.

11:43.680 --> 11:46.960
So it's actually six bytes.

11:46.960 --> 11:51.480
So the main memory was only 42 bytes.

11:51.480 --> 11:56.920
So you see it's very, very limited.

11:56.920 --> 12:03.160
And if you look at the full architecture here, the full, the gamma 3 with all the extensions,

12:03.160 --> 12:10.960
you can see on the top left, the panel.

12:10.960 --> 12:17.320
The main register are on the left.

12:17.320 --> 12:22.320
The top one, the M1 actually is the only one where you can read and write.

12:22.320 --> 12:24.960
So all the computation will be performing that one.

12:24.960 --> 12:34.920
And the other one, M2 to M7 will be used as a register to read operands.

12:34.920 --> 12:40.600
And the instruction you can see, the decoding of the instruction, the structure of the instruction

12:40.600 --> 12:42.080
is composed of four parts.

12:42.080 --> 12:44.440
I will detail them after.

12:44.440 --> 12:48.220
It's called TO, AD, OD, and OF.

12:48.220 --> 12:49.680
And the rest are extensions.

12:49.680 --> 12:52.520
So this is more memory.

12:52.520 --> 12:58.720
So you can switch those registers with those ones.

12:58.720 --> 13:10.240
And the drum extension can also map on those octets.

13:10.240 --> 13:19.320
So you can load a part of program from the drum to those parts and then execute them

13:19.320 --> 13:23.160
into the computer.

13:23.160 --> 13:30.880
So about the instruction set, you can see that there are four parts.

13:30.880 --> 13:32.280
So the first is quite natural.

13:32.280 --> 13:36.400
It's just the type of operation.

13:36.400 --> 13:37.880
So you can have addition, subtraction.

13:37.880 --> 13:39.080
I will detail after.

13:39.080 --> 13:41.080
The second part is also quite natural.

13:41.080 --> 13:43.600
It's just the address.

13:43.600 --> 13:46.040
It means which operand we will use.

13:46.040 --> 13:55.200
So for the addition, for AOE, we can see it means M4, the register number four.

13:55.200 --> 14:05.400
And what's a bit different and word is that then we have two other pieces of information

14:05.400 --> 14:12.040
in the instruction that will tell you which range in the register you will manipulate.

14:12.040 --> 14:16.240
Because the reason is that the memory was scarce.

14:16.240 --> 14:21.400
And so if you wanted to store two different information in the same register, you can

14:21.400 --> 14:23.600
then address one part of it.

14:23.600 --> 14:29.560
And you could really select if it was two bits and then 10 bits and things like that.

14:29.560 --> 14:35.440
So we can see here a very simple addition.

14:35.440 --> 14:37.760
So I can record it with you.

14:37.760 --> 14:50.960
So this means a transfer from one register to the accumulator, so the M0 register.

14:50.960 --> 14:53.520
So it's from M4.

14:53.520 --> 15:00.840
So you can see in M4 we have two parts, A and B. So A is from six to nine and B is from

15:00.840 --> 15:02.000
one to five.

15:02.000 --> 15:09.600
So the first thing is that we will load the part six to nine into the accumulator.

15:09.600 --> 15:16.320
Then we will ask to perform an addition with what we can find in the same register four

15:16.320 --> 15:19.160
in part one, five.

15:19.160 --> 15:20.520
You can see one, five here.

15:20.520 --> 15:30.120
And you can see that as an internal flag, it also remembers the part that is used for

15:30.120 --> 15:33.760
the shift part that it should use for the addition.

15:33.760 --> 15:40.440
And then you can perform the addition and we'll have A plus B inside the register.

15:40.440 --> 15:42.400
And then you will put back the result.

15:42.400 --> 15:48.760
So it's a reverse instead of B or it's OB to store back the result in M4.

15:48.760 --> 15:52.420
And of course, here you have to think, oh, I've done an addition.

15:52.420 --> 15:58.640
So maybe there is one category overflow.

15:58.640 --> 16:03.400
So you can see here that we have provisioned one byte more to be able to store the result

16:03.400 --> 16:04.400
back.

16:04.400 --> 16:14.360
So you can see all the, in mental gymnastics you have to do to be able to program with

16:14.360 --> 16:20.140
that kind of range in the registers.

16:20.140 --> 16:25.120
So it means that when you are coding, you have to use that kind of sheet.

16:25.120 --> 16:27.360
You can see, of course, the mnemonic.

16:27.360 --> 16:34.160
You see here the translation where you have to think about those range and you have then

16:34.160 --> 16:40.240
to facilitate that for the range, you have to allocate your range and reason about your

16:40.240 --> 16:42.680
range also on this sheet.

16:42.680 --> 16:47.320
So you can see here the problem is computing that formula.

16:47.320 --> 16:57.240
And then you will just perform the different calculation, multiplication, shift to one

16:57.240 --> 17:04.400
to have the right power and then divide by the square root of three.

17:04.400 --> 17:08.840
Okay, quickly, this is the full instruction set.

17:08.840 --> 17:11.480
As you can see, it's not very regular.

17:11.480 --> 17:17.320
Well, a natural thing is that no operation is still zero.

17:17.320 --> 17:20.640
It was already zero.

17:20.640 --> 17:27.800
You have operations to different kinds of jumps, there was an inner flag to remember

17:27.800 --> 17:31.080
how to jump.

17:31.080 --> 17:34.200
You have different memory transfers.

17:34.200 --> 17:36.600
I will not go into details.

17:36.600 --> 17:45.280
Of course, to set memory to zero or to load a value to make the transfer between different

17:45.280 --> 17:48.880
kinds of registers.

17:48.880 --> 17:50.200
There is a logical and.

17:50.200 --> 17:52.080
I didn't find any logical or.

17:52.080 --> 17:54.320
I don't know if there was one.

17:54.320 --> 17:57.120
It's a bit weird, but okay.

17:57.120 --> 18:04.520
Different comparison and then of course the most important one from ABCDEF, the addition

18:04.520 --> 18:07.840
and the arithmetic operation.

18:07.840 --> 18:13.840
And you can see there are two flavor for the multiplication and division because there

18:13.840 --> 18:20.600
was one what's called reduced multiplication and reduced division that was faster but that

18:20.600 --> 18:28.880
we will not operate on a double register because of course if you have a big tool, the result

18:28.880 --> 18:35.360
of multiplication can of course take twice as much as space.

18:35.360 --> 18:38.320
Okay, so this is the code.

18:38.320 --> 18:49.760
So it summarizes the whole instruction set and it reflects the complexity of its organization.

18:49.760 --> 18:52.840
You can point just three things.

18:52.840 --> 18:54.560
First, it's called ordenator.

18:54.560 --> 19:02.920
So in French, the name was ordenator but the name ordenator was coined one year after for

19:02.920 --> 19:03.920
a IBM machine.

19:03.920 --> 19:06.080
So it was not, it didn't exist yet.

19:06.080 --> 19:10.040
So you have to think about all that.

19:10.040 --> 19:21.280
You can see here the different arithmetic operation for 12 to, well A2F, so 12, 13,

19:21.280 --> 19:22.280
14, 15.

19:22.280 --> 19:27.880
And you can see the order is not always in the order.

19:27.880 --> 19:39.680
The seven is presented higher because just the shift and operation and the two is not

19:39.680 --> 19:43.320
represented because it was an extension for the drum.

19:43.320 --> 19:48.640
Okay, let me go quickly.

19:48.640 --> 19:50.300
So about existing emulator.

19:50.300 --> 20:02.400
So this one was written in 1995 by Vincent Gauguin, sorry, in x86 assembly code.

20:02.400 --> 20:08.160
And it still runs but, well, thanks for the emulators because you need those bugs to run

20:08.160 --> 20:09.160
it.

20:09.160 --> 20:12.800
We don't have the source code.

20:12.800 --> 20:15.880
You can just see there but it's just emulating everything.

20:15.880 --> 20:18.360
So it's quite good, complete.

20:18.360 --> 20:22.120
And you can see there that it's just loading some information.

20:22.120 --> 20:29.720
So it's just loading 0, 9, 4, 2, 7 in the memory tree register.

20:29.720 --> 20:37.320
And then you can, well, there is a drum emulated and then you have a number of programs on

20:37.320 --> 20:39.320
the drum you can try.

20:39.320 --> 20:43.360
A more recent one, it's a variable online.

20:43.360 --> 20:47.000
So this one is very interesting because it's very well documented.

20:47.000 --> 20:53.480
And you can even play with the panel.

20:53.480 --> 20:59.000
There is a full console where you can step in.

20:59.000 --> 21:07.280
And actually it was one of the sources of inspiration of our work because that one was

21:07.280 --> 21:16.120
in Java 6 and our is in Java so we kind of transposed and first studied that code.

21:16.120 --> 21:22.640
There is also an extension, a visualization, 3D visualization, which is funny because

21:22.640 --> 21:24.040
you can explore inside the machine.

21:24.040 --> 21:28.320
You can see here the connection and there are big cables to connect the machine with

21:28.320 --> 21:32.280
the tabulating.

21:32.280 --> 21:38.120
Okay about the emulation structure, of course, what we have modeled is all the components.

21:38.120 --> 21:43.480
So you have the machine, you have the different kind of memories, banal memories, it's just

21:43.480 --> 21:48.880
the registers, different series, groups, and then a special one which is the panel which

21:48.880 --> 21:54.080
is actually, as you can see, memory mapped to one of the series.

21:54.080 --> 21:57.840
And of course you can also have connected machines and the drum.

21:57.840 --> 22:03.160
Then of course the whole instruction set, you can see there the modeling, the way the

22:03.160 --> 22:06.680
instructions are structured depending on the kind.

22:06.680 --> 22:16.720
If it's for drum transfers, all the arithmetic operations have some common parts so we have

22:16.720 --> 22:17.720
some here.

22:17.720 --> 22:27.120
And of course there is some execution management and tests and you can see the code there on

22:27.120 --> 22:29.480
GitHub.

22:29.480 --> 22:35.000
And what's interesting from also the emulation point of view, of course, all operations will

22:35.000 --> 22:44.040
have to specify the different information.

22:44.040 --> 22:51.240
So for the addition, this is an inner operation just to show you how it's implemented.

22:51.240 --> 22:56.560
So of course you have to specify the range where you are performing the addition.

22:56.560 --> 23:10.760
And this is quite standard implementation where you just loop over the different bit

23:10.760 --> 23:14.600
and then you propagate the query.

23:14.600 --> 23:22.480
What is interesting is just that you have the base so that code would work both for

23:22.480 --> 23:31.280
the binary and for the decimal implementation actually, variant of the machine.

23:31.280 --> 23:38.440
So this is trying to mimic the whole operations.

23:38.440 --> 23:42.880
Another one very simple is just to use the Java operations.

23:42.880 --> 23:47.600
For example, for the subtraction, we just translate everything in decimal, perform the

23:47.600 --> 23:52.960
subtraction and then store the result.

23:52.960 --> 24:00.000
There is only one thing that must be careful is that we have to use long in Java because

24:00.000 --> 24:09.400
those 12 numbers are more than 32 bits in Java.

24:09.400 --> 24:10.440
We skip the division.

24:10.440 --> 24:16.720
So the current implementation, while we have our prototype just in Java, so we are just

24:16.720 --> 24:25.880
using the Eclipse as an environment and running the test.

24:25.880 --> 24:26.880
So this is just test.

24:26.880 --> 24:29.880
We have a small interface, not yet finished.

24:29.880 --> 24:40.120
And you can see here a quick code that just showed Fibonacci suite.

24:40.120 --> 24:44.880
And while you can see the result here, I will not go into detail, but you can see there

24:44.880 --> 24:50.840
is actually a loop, so there is a jump for 10 iterations and then you have the different

24:50.840 --> 24:51.840
number.

24:51.840 --> 24:54.040
You can see the number after a few iterations.

24:54.040 --> 24:59.960
You have 13 and things like that which are being computed.

24:59.960 --> 25:02.320
So it's working.

25:02.320 --> 25:03.800
And now I will finish.

25:03.800 --> 25:07.040
So what did we learn?

25:07.040 --> 25:13.360
So it was quite funny and strange to look at that machine.

25:13.360 --> 25:18.080
It's not so complex to code, but there are many, many implementation details you see

25:18.080 --> 25:20.600
about those range manipulation.

25:20.600 --> 25:23.600
And we still have a lot to explore.

25:23.600 --> 25:28.440
For example, all the floating points, improving the user interface.

25:28.440 --> 25:36.040
And of course, we have the start, so we would like to really to study what was used as code

25:36.040 --> 25:37.920
at that time.

25:37.920 --> 25:44.480
So in summary, it was very neat, it's still very rewarding from the technical, but also

25:44.480 --> 25:49.320
from the historical and cultural point of view.

25:49.320 --> 25:50.320
Thank you.

25:50.320 --> 25:53.040
And if you have questions, you're welcome.

25:53.040 --> 25:57.800
Some reference there about all the guys who have worked on that machine.

25:57.800 --> 26:09.280
We have maybe five minutes for questions.

26:09.280 --> 26:10.280
Yeah.

26:10.280 --> 26:17.280
Simulate the core memory and the reading that was required to rewrite it again once you

26:17.280 --> 26:18.280
read it.

26:18.280 --> 26:21.960
So the question is about the read.

26:21.960 --> 26:23.760
The core memory.

26:23.760 --> 26:26.000
Simulating the reading of the memory.

26:26.000 --> 26:34.920
So it's a good question because I don't know how to call this a simulator or an emulator,

26:34.920 --> 26:45.920
but the component, well, the machine is quite, quite also at what we are emulating.

26:45.920 --> 26:51.800
It's kind of an abstraction of the machine, I would say.

26:51.800 --> 26:58.280
So one limitation is that we don't really know the physics of the reading.

26:58.280 --> 27:06.720
So we are assuming that we can read reliably the information and that we don't have any

27:06.720 --> 27:11.440
timing issue with the things that are bothering you.

27:11.440 --> 27:15.640
But of course, we don't have a working machine to compare with.

27:15.640 --> 27:24.320
So we can only compare with expected result or with what other, the older emulator is

27:24.320 --> 27:25.320
delivering.

27:25.320 --> 27:27.120
Actually, the older emulator had a problem.

27:27.120 --> 27:30.120
We discovered there was a mistake discovered.

27:30.120 --> 27:34.920
So it was corrected by the guy who's still maintaining it somehow.

27:34.920 --> 27:36.160
But yeah.

27:36.160 --> 27:45.360
So the point would be really to be able to study the electronic circuitry if we would

27:45.360 --> 27:47.320
like to go to that level.

27:47.320 --> 27:49.440
But we don't have one, sorry.

27:49.440 --> 27:50.440
Yeah.

27:50.440 --> 27:52.920
There's a question from the stream.

27:52.920 --> 27:56.040
Is there a compiler for gamma 3?

27:56.040 --> 27:57.040
A compiler?

27:57.040 --> 28:01.200
Well, is there a compiler for the gamma 3?

28:01.200 --> 28:07.200
So you could see, well, assembly code was, assembly language was invented two years before,

28:07.200 --> 28:10.080
I think by Booth.

28:10.080 --> 28:14.480
And the assembly was done manually at that time.

28:14.480 --> 28:18.640
So at that time, the answer is no, there were no compiler.

28:18.640 --> 28:27.320
But no, today, actually, the guys from McConit have developed a compiler from a language

28:27.320 --> 28:30.240
that looks like Java, I think.

28:30.240 --> 28:39.080
So you can, actually, yes, you can compile from that pseudo code language into the gamma

28:39.080 --> 28:40.080
3.

28:40.080 --> 28:42.720
Yeah, it was done.

28:42.720 --> 28:44.720
I didn't try it, but I did.

28:44.720 --> 28:45.720
Yeah.

28:45.720 --> 28:51.720
Was the program done in the case with the wires spaghetti code?

28:51.720 --> 28:58.320
Or could you load instructions from the drums?

28:58.320 --> 29:07.640
The question is, was the program, the program that I showed was in code date, was executed

29:07.640 --> 29:10.160
from the panel.

29:10.160 --> 29:16.160
So the panel is just a way to specify the content of the memory.

29:16.160 --> 29:20.480
It's the same, but just with wire.

29:20.480 --> 29:23.200
But the emulator supports the drum.

29:23.200 --> 29:26.480
The original machine, could it load in front?

29:26.480 --> 29:28.960
Yeah, it could load instructions.

29:28.960 --> 29:33.680
So the drum could contain instructions, or it could contain data.

29:33.680 --> 29:34.680
Yeah.

29:34.680 --> 29:35.680
Last question.

29:35.680 --> 29:36.680
Yeah.

29:36.680 --> 29:44.160
Do you have any detailed information about the cycle count of the initial instructions?

29:44.160 --> 29:45.160
Yeah.

29:45.160 --> 29:48.720
So the question is about the cycle count of the different instructions.

29:48.720 --> 30:00.040
So we have time, timing about the addition, subtraction, and different kinds of multiplication.

30:00.040 --> 30:02.680
So that's available.

30:02.680 --> 30:07.840
And that's a good point because the emulator is not taking that into account.

30:07.840 --> 30:14.040
So it would probably be a good point to try to reproduce that behavior.

30:14.040 --> 30:17.040
Thank you very much.

30:17.040 --> 30:19.040
So maybe a last time go.

30:19.040 --> 30:20.040
Thank you.

30:20.040 --> 30:21.040
Thank you.

30:21.040 --> 30:47.040
Thank you.

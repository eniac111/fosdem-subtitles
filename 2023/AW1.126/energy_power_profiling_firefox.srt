1
0:00:00.000 --> 0:00:09.360
Hello everybody, I will be talking about power profiling with a Firefox profiler.

2
0:00:09.360 --> 0:00:15.640
And Chris mentioned it briefly, but I will go in many more details about how this works.

3
0:00:15.640 --> 0:00:20.800
So the outline of the talk, I will first explain what the Firefox profiler is, because I don't

4
0:00:20.800 --> 0:00:22.880
want to assume that everybody knows.

5
0:00:22.880 --> 0:00:28.280
And then I will go into the topic, which is explain why we care about this, how this thing

6
0:00:28.280 --> 0:00:33.480
runs, where we support it, and show examples of which kind of information gives us.

7
0:00:33.480 --> 0:00:37.880
And if I have some time left, I have a few more things I could share.

8
0:00:37.880 --> 0:00:39.920
So what's a Firefox profiler?

9
0:00:39.920 --> 0:00:43.640
You can find it as a web application at this address.

10
0:00:43.640 --> 0:00:47.480
It's a built-in profiler inside Firefox, web browser.

11
0:00:47.480 --> 0:00:52.600
And by built-in there, I mean that the part that collects the data is inside the web browser

12
0:00:52.600 --> 0:00:53.600
itself.

13
0:00:53.600 --> 0:00:58.600
And the place where you see the data is a web application.

14
0:00:58.600 --> 0:01:05.240
It was initially created for performance work, especially when Mozilla and Firefox started

15
0:01:05.240 --> 0:01:11.160
caring a lot about making things go fast, because our competition said that we are faster

16
0:01:11.160 --> 0:01:14.000
and we could compete on that.

17
0:01:14.000 --> 0:01:17.600
So especially for Firefox 57, Firefox Quantum, we worked a lot with the profiler, and the

18
0:01:17.600 --> 0:01:20.480
question was always, why is this thing so slow?

19
0:01:20.480 --> 0:01:21.480
Can we make it faster?

20
0:01:21.480 --> 0:01:28.240
Over time, it had expanded, and now we can use it for many more things, a lot of debugging.

21
0:01:28.240 --> 0:01:32.560
It's a great way to get data about what a piece of software is doing.

22
0:01:32.560 --> 0:01:37.320
And it has multiple sources of data, but the two main sources are something, which is we

23
0:01:37.320 --> 0:01:42.400
have a timer, and at a fixed interval, we interrupt the program and capture data, but

24
0:01:42.400 --> 0:01:47.080
getting stacks of threads, for example, while also getting the values of counters, for example,

25
0:01:47.080 --> 0:01:49.080
counting memory locations.

26
0:01:49.080 --> 0:01:52.760
And the other thing is markers, where we just record what happened at any specific point

27
0:01:52.760 --> 0:01:55.080
in time.

28
0:01:55.080 --> 0:02:00.400
And this is useful for things that happened very quickly, but we still want to see.

29
0:02:00.400 --> 0:02:05.000
So if you want to get started with a profiler, as I said, you go to this address, where you

30
0:02:05.000 --> 0:02:08.560
click the big button, and it will Firefox profiler.

31
0:02:08.560 --> 0:02:09.560
You get this, that appears.

32
0:02:09.560 --> 0:02:14.440
Basically, clicking the button just made the toolbar icon appear here on your browser,

33
0:02:14.440 --> 0:02:17.960
but you could also find it by customizing the toolbar.

34
0:02:17.960 --> 0:02:19.720
Then you can customize the preset.

35
0:02:19.720 --> 0:02:21.920
Here it says nightly.

36
0:02:21.920 --> 0:02:24.960
It's a good default for general profiling.

37
0:02:24.960 --> 0:02:28.080
And then you can start recording.

38
0:02:28.080 --> 0:02:29.600
It will show something like this.

39
0:02:29.600 --> 0:02:33.240
Then you can do whatever you would like to measure, for example, loading a website.

40
0:02:33.240 --> 0:02:37.240
Very often people would like their website to load faster, so that's a good example.

41
0:02:37.240 --> 0:02:40.120
Do it, and a few seconds later, when you click the capture button, you will see something

42
0:02:40.120 --> 0:02:42.040
like this in a tab that appears.

43
0:02:42.040 --> 0:02:46.000
So here what I profiled is loading the Wikipedia homepage.

44
0:02:46.000 --> 0:02:49.680
And we can see there's many things in the user interface.

45
0:02:49.680 --> 0:02:55.720
It might be a little bit overwhelming at the beginning, but we get used to it very quickly.

46
0:02:55.720 --> 0:02:59.360
You can move the marks around, and there will almost always be a tooltip like this that

47
0:02:59.360 --> 0:03:01.320
explains what you are looking at.

48
0:03:01.320 --> 0:03:04.720
So first half here is what we call the timeline.

49
0:03:04.720 --> 0:03:08.020
It's things happening across the time.

50
0:03:08.020 --> 0:03:09.020
We can see markers.

51
0:03:09.020 --> 0:03:11.040
It was small things here that we noted.

52
0:03:11.040 --> 0:03:14.720
It was on network request, but also some kind of markers.

53
0:03:14.720 --> 0:03:18.560
And here we are hovering here on this yellow thing, and we see here the stack of what we

54
0:03:18.560 --> 0:03:20.760
are hovering.

55
0:03:20.760 --> 0:03:23.400
The stack include JavaScript, C++.

56
0:03:23.400 --> 0:03:26.880
You can know everything about what was happening at this time.

57
0:03:26.880 --> 0:03:30.880
And then there's the bottom half that's showing data in various different ways.

58
0:03:30.880 --> 0:03:36.080
Here the code tree is just showing what the samples look like.

59
0:03:36.080 --> 0:03:44.200
This is a memory counter here, for counter, just counting how many locations we did.

60
0:03:44.200 --> 0:03:47.280
And we also have markers here in the marker chart where we can see actually which network

61
0:03:47.280 --> 0:03:48.480
request we did.

62
0:03:48.480 --> 0:03:52.560
So this is a tool again that we developed to make things faster.

63
0:03:52.560 --> 0:03:58.840
Then we will see how we can use it to make things more efficient.

64
0:03:58.840 --> 0:04:02.000
So now we'll talk about power profiling.

65
0:04:02.000 --> 0:04:04.280
And first say why we care about this.

66
0:04:04.280 --> 0:04:07.360
Why we care, and also why do I care.

67
0:04:07.360 --> 0:04:12.240
So my work has been utilized to make Firefox more efficient to understand how it uses power

68
0:04:12.240 --> 0:04:13.920
and reduce the power we use.

69
0:04:13.920 --> 0:04:15.240
And there are two main sets of reasons.

70
0:04:15.240 --> 0:04:20.040
First one is still performance, because resource use is still a performance topic.

71
0:04:20.040 --> 0:04:25.800
And users care about power use actually, because the fun is noisy, the laptop is too hot to

72
0:04:25.800 --> 0:04:28.840
type on, the battery life is too short.

73
0:04:28.840 --> 0:04:32.440
So all very good reasons, but at the individual level.

74
0:04:32.440 --> 0:04:35.560
And we also care at a more global level for sustainability.

75
0:04:35.560 --> 0:04:40.000
Mozilla made climate commitments.

76
0:04:40.000 --> 0:04:43.280
Some interesting things I will mention here is that we want to lead openly and share our

77
0:04:43.280 --> 0:04:46.880
tools and improve our products from a sustainability perspective.

78
0:04:46.880 --> 0:04:50.160
So sharing the tools, this is what I'm doing with the power profiling stuff.

79
0:04:50.160 --> 0:04:55.040
The reason why we want to improve our product is that when we did a greenhouse gas assessment

80
0:04:55.040 --> 0:05:01.080
for Mozilla, it turns out the use of our product is 98%.

81
0:05:01.080 --> 0:05:02.920
That should not really be a surprise.

82
0:05:02.920 --> 0:05:08.120
We have a product that's used by multiple hundred millions of people.

83
0:05:08.120 --> 0:05:14.960
So anything else we do, even if it's not clean, it's still a tiny portion.

84
0:05:14.960 --> 0:05:20.640
So power profiling is to understand the local power use of Firefox, our website, and a computer

85
0:05:20.640 --> 0:05:25.240
that's typically in front of us.

86
0:05:25.240 --> 0:05:29.560
I will explain the journey I followed to try to understand how much power we are using.

87
0:05:29.560 --> 0:05:34.200
So the first step was, OK, I know what we are doing, I know how much CPU we are using,

88
0:05:34.200 --> 0:05:37.120
but I have no idea what that means in what and where we can save power.

89
0:05:37.120 --> 0:05:41.200
And the first step was to buy one of those wattmeters that are always recommended for

90
0:05:41.200 --> 0:05:45.800
people who want to save energy by figuring out how much power is used by what in their

91
0:05:45.800 --> 0:05:46.800
house.

92
0:05:46.800 --> 0:05:52.240
It's easy, it's affordable, pretty accurate, but not that useful for software because you

93
0:05:52.240 --> 0:05:53.840
construct what happens over time.

94
0:05:53.840 --> 0:05:55.840
Then I found something better.

95
0:05:55.840 --> 0:05:59.920
It's still a wattmeter, but it's sending data to a computer over Bluetooth.

96
0:05:59.920 --> 0:06:02.520
There I can see the history of what happens.

97
0:06:02.520 --> 0:06:05.560
It's much better, but still, how do I match this with what actually happened?

98
0:06:05.560 --> 0:06:07.280
I need to remember what I did.

99
0:06:07.280 --> 0:06:09.000
It's not as convenient.

100
0:06:09.000 --> 0:06:12.440
Maybe I could record a video of what happened on the computer, but still, it's painful to

101
0:06:12.440 --> 0:06:13.440
use.

102
0:06:13.440 --> 0:06:16.800
And I kept wondering, what are other people doing?

103
0:06:16.800 --> 0:06:18.840
And then I found this article by Microsoft.

104
0:06:18.840 --> 0:06:23.800
They were very happy to say that Edge was the most efficient on bragging about it.

105
0:06:23.800 --> 0:06:25.200
And blah, blah, blah, blah, blah, blah, blah.

106
0:06:25.200 --> 0:06:26.560
One sentence caught my attention.

107
0:06:26.560 --> 0:06:30.840
Power was measured on the surface book, so Microsoft device, because it has integrated

108
0:06:30.840 --> 0:06:32.680
hardware instrumentation.

109
0:06:32.680 --> 0:06:36.280
So what Microsoft did is they built their own computers with instrumentation so they

110
0:06:36.280 --> 0:06:38.800
could measure how much power is being used.

111
0:06:38.800 --> 0:06:40.600
And they explained about what this thing is.

112
0:06:40.600 --> 0:06:43.600
Can I get one of those machines?

113
0:06:43.600 --> 0:06:44.600
Sure.

114
0:06:44.600 --> 0:06:46.720
They are old.

115
0:06:46.720 --> 0:06:52.920
They were released in 2015, so getting old now, but we can still play with those.

116
0:06:52.920 --> 0:06:58.480
So one of those machines is what they use when they compare Edge with everything else.

117
0:06:58.480 --> 0:07:03.920
The way they looked at it was with the Windows performance monitor, so it's this application

118
0:07:03.920 --> 0:07:04.920
here.

119
0:07:04.920 --> 0:07:11.600
And we can see, indeed, that I have power for the battery, CPU cores, GPU, and the Wi-Fi.

120
0:07:11.600 --> 0:07:12.600
Very interesting.

121
0:07:12.600 --> 0:07:14.400
And I looked for more recent devices.

122
0:07:14.400 --> 0:07:18.880
I spent multiple weeks searching for devices that might have those power meters, because

123
0:07:18.880 --> 0:07:20.720
that was very interesting.

124
0:07:20.720 --> 0:07:23.640
And the devices on the picture here, they are the only two that I found that actually

125
0:07:23.640 --> 0:07:25.680
have working power meters.

126
0:07:25.680 --> 0:07:30.680
And they are both Microsoft Surface devices.

127
0:07:30.680 --> 0:07:36.760
This is what the UI looks like if you look at the Windows performance monitor.

128
0:07:36.760 --> 0:07:38.440
So those things, they are here.

129
0:07:38.440 --> 0:07:40.480
And they report data and its numbers.

130
0:07:40.480 --> 0:07:41.920
Good luck if you understand what that means.

131
0:07:41.920 --> 0:07:42.920
I have no idea.

132
0:07:42.920 --> 0:07:47.400
Well, I do have some idea, but it took away to understand.

133
0:07:47.400 --> 0:07:50.720
And when I had a good surprise, I noticed on some machines that they were, those things

134
0:07:50.720 --> 0:07:53.240
reported as energy meters.

135
0:07:53.240 --> 0:07:54.400
And the names are pretty familiar.

136
0:07:54.400 --> 0:07:58.640
They are the same names that we see if we use a piece of software called Intel Power

137
0:07:58.640 --> 0:08:05.320
Gadget that reports the power used by the CPU, an integrated GPU, those kind of things.

138
0:08:05.320 --> 0:08:10.400
And after some correlation, I realized that all the machines on which I noticed this were

139
0:08:10.400 --> 0:08:11.800
running Windows 11.

140
0:08:11.800 --> 0:08:13.960
And they all had Intel CPUs.

141
0:08:13.960 --> 0:08:19.040
And I verified this because I found a Windows 10 machine.

142
0:08:19.040 --> 0:08:20.040
It didn't have this.

143
0:08:20.040 --> 0:08:21.600
I updated to Windows 11.

144
0:08:21.600 --> 0:08:22.920
And then those things appeared.

145
0:08:22.920 --> 0:08:25.760
So it's really Windows 11 that brought those things.

146
0:08:25.760 --> 0:08:28.760
Intel CPUs are recorded as power meters.

147
0:08:28.760 --> 0:08:34.200
And the very nice thing is there's a documented API to use those power meters.

148
0:08:34.200 --> 0:08:36.400
It's probably used by perf monitor or something like that.

149
0:08:36.400 --> 0:08:37.740
The UI I don't want to use.

150
0:08:37.740 --> 0:08:41.200
But with the documentation, I could understand how to make use of this.

151
0:08:41.200 --> 0:08:43.320
What the unit was, Pico et.

152
0:08:43.320 --> 0:08:44.320
O.

153
0:08:44.320 --> 0:08:45.320
So that was the answer.

154
0:08:45.320 --> 0:08:47.960
And we can create many times per second.

155
0:08:47.960 --> 0:08:51.080
It doesn't have to be only once per second.

156
0:08:51.080 --> 0:08:55.280
And it's accessible in user alone, which is something I care a lot for Firefox because

157
0:08:55.280 --> 0:08:58.280
I don't want people using Firefox as root or things like that.

158
0:08:58.280 --> 0:09:00.960
That would be absolutely terrible.

159
0:09:00.960 --> 0:09:03.560
And no requirement to install a specific driver.

160
0:09:03.560 --> 0:09:07.760
Before that, in our test infrastructure, when we were interested in measuring power, we

161
0:09:07.760 --> 0:09:09.280
installed a power gadget.

162
0:09:09.280 --> 0:09:12.400
But we don't want to require users to do that.

163
0:09:12.400 --> 0:09:15.160
And it's not open source.

164
0:09:15.160 --> 0:09:19.160
So I started working on a prototype to include this in the Firefox profiler because, as I

165
0:09:19.160 --> 0:09:22.160
said, we record memory counters.

166
0:09:22.160 --> 0:09:26.080
And it looks like this API is totally usable for profiler counters.

167
0:09:26.080 --> 0:09:28.600
And this is the bug where I worked on it.

168
0:09:28.600 --> 0:09:30.600
And this is the first prototype I got.

169
0:09:30.600 --> 0:09:33.260
So the names, they match what we saw.

170
0:09:33.260 --> 0:09:36.720
And then we have those power tracks in addition to memory counters, network traffic, and all

171
0:09:36.720 --> 0:09:37.720
the other stuff.

172
0:09:37.720 --> 0:09:40.480
And it actually looked pretty reasonable.

173
0:09:40.480 --> 0:09:42.460
So this is a profiler Firefox starting up.

174
0:09:42.460 --> 0:09:45.960
So we use a lot of CPU at startup and then almost nothing because we are done starting

175
0:09:45.960 --> 0:09:47.480
up.

176
0:09:47.480 --> 0:09:50.240
And here this is the CPU being used.

177
0:09:50.240 --> 0:09:52.120
And here this is the GPU.

178
0:09:52.120 --> 0:09:54.520
We use it at the beginning when we start showing something.

179
0:09:54.520 --> 0:09:57.000
And then only every once in a while, pretty reasonable.

180
0:09:57.000 --> 0:10:01.440
So I kept working on it and polished it enough that it would really work and be something

181
0:10:01.440 --> 0:10:04.940
would be a partnership.

182
0:10:04.940 --> 0:10:08.840
So I thought the prototype now will say where it actually works, where we managed to get

183
0:10:08.840 --> 0:10:15.180
it working because that's not everywhere, but still it's almost everywhere at this point.

184
0:10:15.180 --> 0:10:19.600
It works on Windows 11 on those specific devices I mentioned before.

185
0:10:19.600 --> 0:10:21.680
It works on Windows 10, sorry.

186
0:10:21.680 --> 0:10:24.840
It works on Windows 11 with Intel CPUs.

187
0:10:24.840 --> 0:10:27.800
And I've recently had reports that with AMD CPUs it started working.

188
0:10:27.800 --> 0:10:31.640
I don't know exactly when, but I suspect it's with this update.

189
0:10:31.640 --> 0:10:34.200
And I will try to verify soon.

190
0:10:34.200 --> 0:10:38.040
And one thing that's very interesting with AMD CPUs is that we have one power track per

191
0:10:38.040 --> 0:10:45.160
core, which might let us make much better creation about what's actually using the power.

192
0:10:45.160 --> 0:10:52.080
On Mac, two different architectures on Mac, mostly undocumented or poorly documented

193
0:10:52.080 --> 0:10:53.080
API.

194
0:10:53.080 --> 0:10:56.080
Like poorly documented means the name of the API is there, there's no explanation about

195
0:10:56.080 --> 0:10:58.680
what it does or how to use it.

196
0:10:58.680 --> 0:11:03.440
But the kind of open source, so by reversing a little bit I could figure out that this

197
0:11:03.440 --> 0:11:07.320
task energy thing was a value in nano drill.

198
0:11:07.320 --> 0:11:13.960
And for Intel CPUs, specific C scroll code with magic assembly code that we had implemented

199
0:11:13.960 --> 0:11:17.600
eight years ago I didn't know anything about but someone pointed me to it, great, we can

200
0:11:17.600 --> 0:11:20.680
also support Intel Macs.

201
0:11:20.680 --> 0:11:22.560
And then Linux.

202
0:11:22.560 --> 0:11:25.640
So on Linux we can use RAPL Perf Events.

203
0:11:25.640 --> 0:11:27.360
So RAPL is running average power limit.

204
0:11:27.360 --> 0:11:31.400
It's the data that's reported by Intel CPUs.

205
0:11:31.400 --> 0:11:36.360
One issue on Linux is the data is not available as a user.

206
0:11:36.360 --> 0:11:39.960
And the reason is it used to be available directly.

207
0:11:39.960 --> 0:11:46.600
There was a side channel attack where people noticed that by querying power used very repeatedly

208
0:11:46.600 --> 0:11:50.680
they could actually figure out what data was being processed.

209
0:11:50.680 --> 0:11:53.080
The way they addressed it was to restrict the access.

210
0:11:53.080 --> 0:11:56.600
So you need to run this before starting power profiling.

211
0:11:56.600 --> 0:12:00.760
And it's actually the same command that you need to run to run Linux Perf to profile in

212
0:12:00.760 --> 0:12:01.760
general on Linux.

213
0:12:01.760 --> 0:12:04.000
So it's probably fine.

214
0:12:04.000 --> 0:12:09.920
As long as it's just this and I don't require Firefox to be run as root, I think it's okay.

215
0:12:09.920 --> 0:12:17.360
So MDCQs are supported since newer version of the Linux kernel but it's a few years old

216
0:12:17.360 --> 0:12:19.480
at this point, probably fine.

217
0:12:19.480 --> 0:12:23.960
And if you try it, it doesn't work on Ubuntu, Firefox Snap packages but if you download

218
0:12:23.960 --> 0:12:31.320
Firefox on the Mozilla site and don't use the Snap package, it works on Ubuntu too.

219
0:12:31.320 --> 0:12:32.520
Here's how you configure it.

220
0:12:32.520 --> 0:12:38.120
So I showed the profiler UIB4 where you could use the nightly preset.

221
0:12:38.120 --> 0:12:39.920
I said it was fine for most cases.

222
0:12:39.920 --> 0:12:44.640
If you want to profile power, we have a power preset that's configuring the profiler.

223
0:12:44.640 --> 0:12:47.280
The two thing it does is enabling power profiling.

224
0:12:47.280 --> 0:12:50.360
So with this feature we have here in the configuration page.

225
0:12:50.360 --> 0:12:54.520
And the other thing is adjusting the configuration to reduce the amount of overhead.

226
0:12:54.520 --> 0:12:58.800
Because if we have a lot of profiler overhead, the thing we will see in the profile will

227
0:12:58.800 --> 0:12:59.800
be meaningless.

228
0:12:59.800 --> 0:13:03.760
And actually we already tried to do power profiling a couple of years ago.

229
0:13:03.760 --> 0:13:08.160
There was supposed to be a picture here.

230
0:13:08.160 --> 0:13:09.160
That's strange.

231
0:13:09.160 --> 0:13:15.480
I see the picture on my screen but it's not here.

232
0:13:15.480 --> 0:13:19.520
So I was saying we are afraid that the profiler overhead would make it impossible to get any

233
0:13:19.520 --> 0:13:23.800
useful data out of power profiles because the profiler is actually using a lot of power

234
0:13:23.800 --> 0:13:29.900
itself to like, interrupt sample the stacks and do all that thing.

235
0:13:29.900 --> 0:13:33.720
So we can reduce that overhead by using longer intervals between samples and ensuring that

236
0:13:33.720 --> 0:13:40.600
when we sample we only capture the values of the contours and not the actual stacks.

237
0:13:40.600 --> 0:13:42.000
It appeared quickly.

238
0:13:42.000 --> 0:13:44.120
So yeah, we see the features here that were enabled.

239
0:13:44.120 --> 0:13:49.760
Power profiling, markers for all threads, sampling every 10 milliseconds instead of

240
0:13:49.760 --> 0:13:53.400
every 1 millisecond.

241
0:13:53.400 --> 0:13:57.720
Now that I explained how we got this power profiling thing, I will show examples of what

242
0:13:57.720 --> 0:14:00.260
it looks like when a power profile is something.

243
0:14:00.260 --> 0:14:06.120
So loading Wikipedia homepage again, this time with the power profiling preset.

244
0:14:06.120 --> 0:14:11.040
And we can see exactly how much power was used by the content process loading Wikipedia.

245
0:14:11.040 --> 0:14:16.760
So we can select a range here and we see in the tooltip how much power was used by this

246
0:14:16.760 --> 0:14:19.920
process during that amount of time.

247
0:14:19.920 --> 0:14:26.240
This profile is captured on Mac so we have a track per process.

248
0:14:26.240 --> 0:14:31.680
Another example, by the way, the profiler is very easy to explore by looking and moving

249
0:14:31.680 --> 0:14:34.520
the mouse around and looking at the tooltips.

250
0:14:34.520 --> 0:14:38.280
It's not so great for screenshots so all my slides include a link to the profile that

251
0:14:38.280 --> 0:14:39.280
I'm showing.

252
0:14:39.280 --> 0:14:41.880
So if you want to look at the slides later and click the links, that will be a lot more

253
0:14:41.880 --> 0:14:44.240
fun for you I think.

254
0:14:44.240 --> 0:14:49.080
This time it's Firefox startup Windows 11 and we can see how much power was used by

255
0:14:49.080 --> 0:14:52.580
starting Firefox here by the CPU.

256
0:14:52.580 --> 0:14:57.280
So we can see it here.

257
0:14:57.280 --> 0:15:01.200
And this is an example I really like because it's really pushing the limit of what we can

258
0:15:01.200 --> 0:15:02.200
profile.

259
0:15:02.200 --> 0:15:06.320
And I had never thought we could profile this, especially when I was afraid about the overhead.

260
0:15:06.320 --> 0:15:12.920
But if we profile, we see that when we do nothing with Firefox, literally nothing, like

261
0:15:12.920 --> 0:15:15.080
I was profiling Firefox string about blank.

262
0:15:15.080 --> 0:15:17.560
So literally nothing, no websites.

263
0:15:17.560 --> 0:15:21.680
The one thing that's left is the cursor that blinks in the address bar.

264
0:15:21.680 --> 0:15:26.040
And every 500 milliseconds there's a power spike and we can see exactly how much power

265
0:15:26.040 --> 0:15:30.200
it uses to show or hide the cursor in the address bar.

266
0:15:30.200 --> 0:15:33.640
So yeah, very detailed.

267
0:15:33.640 --> 0:15:36.920
And then I will show some examples where we used power profiling to validate fixes we've

268
0:15:36.920 --> 0:15:37.920
done.

269
0:15:37.920 --> 0:15:41.920
So this is something we did specifically for Windows 11.

270
0:15:41.920 --> 0:15:46.480
They have a new feature that they call efficiency mode.

271
0:15:46.480 --> 0:15:50.120
And it's visible in the task manager by looking at this icon here.

272
0:15:50.120 --> 0:15:55.440
This green leaf thing looks a lot like a green washing, but it actually does something.

273
0:15:55.440 --> 0:16:00.200
It means we let the operating system know that this process is doing nothing that the

274
0:16:00.200 --> 0:16:03.000
user cares about immediately because it's probably invisible.

275
0:16:03.000 --> 0:16:05.880
It's probably in the background.

276
0:16:05.880 --> 0:16:10.640
What we want instead of doing the work as fast as possible is do it with as little energy

277
0:16:10.640 --> 0:16:12.320
as we can.

278
0:16:12.320 --> 0:16:15.440
It's typically doing this by doing two different things.

279
0:16:15.440 --> 0:16:20.480
One is ensuring we use the lowest possible CPU frequency, which uses less power.

280
0:16:20.480 --> 0:16:26.320
And the second thing is on hybrid CPUs that have both efficiency and performance cores,

281
0:16:26.320 --> 0:16:28.520
always use efficiency cores.

282
0:16:28.520 --> 0:16:31.880
And this power profile was captured on a modern Intel laptop.

283
0:16:31.880 --> 0:16:36.920
So we have an ultra-like CPU with efficiency cores.

284
0:16:36.920 --> 0:16:39.480
And this is a web page that I did for testing.

285
0:16:39.480 --> 0:16:45.280
It's using 100% of the CPU, just a busy loop, but there's nothing except burning CPU.

286
0:16:45.280 --> 0:16:47.440
The process here is in the foreground.

287
0:16:47.440 --> 0:16:51.000
Here we see a process priority change because we go into the background.

288
0:16:51.000 --> 0:16:53.360
And here you see how much power we use.

289
0:16:53.360 --> 0:16:56.520
It's about 10 watts for the CPU since down to two.

290
0:16:56.520 --> 0:17:00.960
So we divide it by five, the power used by just ensuring that we let Windows know that

291
0:17:00.960 --> 0:17:02.720
this process is for something in the background.

292
0:17:02.720 --> 0:17:05.880
Don't worry about speed.

293
0:17:05.880 --> 0:17:11.920
And things actually run slower, by the way, but use less power.

294
0:17:11.920 --> 0:17:15.320
And then I have a few fun examples of things that were...

295
0:17:15.320 --> 0:17:18.080
So the previous example where stuff, where it actually works, and power profiling was

296
0:17:18.080 --> 0:17:20.640
useful to show the stuff we cared about.

297
0:17:20.640 --> 0:17:24.880
And I wanted to share a few funny examples of things I absolutely didn't expect.

298
0:17:24.880 --> 0:17:32.480
This profile is from one of the Microsoft Surface machines I put before on the picture.

299
0:17:32.480 --> 0:17:35.320
I said we profile the CPU, the GPU, the Wi-Fi chip there.

300
0:17:35.320 --> 0:17:41.360
And that's the only machine where I can profile the power used by the Wi-Fi.

301
0:17:41.360 --> 0:17:48.040
And I noticed that Wi-Fi chip power used is almost always half a watt, so 500 milliwatts,

302
0:17:48.040 --> 0:17:50.760
yeah, when the machine is plugged to a charger.

303
0:17:50.760 --> 0:17:53.560
And what happened here is I unplugged the charger.

304
0:17:53.560 --> 0:17:55.920
There was a poor broadcast event.

305
0:17:55.920 --> 0:18:01.120
And now we only use power when there's probably network traffic.

306
0:18:01.120 --> 0:18:02.840
And I had no idea that Windows was doing this.

307
0:18:02.840 --> 0:18:10.240
I think it's to reduce latency, but it keeps the Wi-Fi chip alive all the time.

308
0:18:10.240 --> 0:18:15.240
More Wi-Fi profiling, because CPU profiling, you can do all you like, because it's easy

309
0:18:15.240 --> 0:18:16.240
to do.

310
0:18:16.240 --> 0:18:20.480
Wi-Fi profiling, you need specific hardware, so I will share the fun.

311
0:18:20.480 --> 0:18:23.960
This time I was power profiling what it looks like to do a bandwidth test.

312
0:18:23.960 --> 0:18:28.240
So it was very upset, speedtest.net.

313
0:18:28.240 --> 0:18:29.240
It's a single profile.

314
0:18:29.240 --> 0:18:30.240
There's a link here.

315
0:18:30.240 --> 0:18:33.160
But I zoomed on two different parts of the profile.

316
0:18:33.160 --> 0:18:37.240
The top half is when I actually run the test on the machine.

317
0:18:37.240 --> 0:18:40.840
So we still use 500 milliwatts here.

318
0:18:40.840 --> 0:18:43.400
And we have peaks that go up to two watts for the Wi-Fi chip.

319
0:18:43.400 --> 0:18:45.200
We push it to the limit.

320
0:18:45.200 --> 0:18:48.520
It was actually not really testing the bandwidth of my internet connection, more of the Wi-Fi

321
0:18:48.520 --> 0:18:51.200
chip of that machine.

322
0:18:51.200 --> 0:18:58.120
And the second chart is I did the exact same tests, but on this laptop that was on the

323
0:18:58.120 --> 0:18:59.120
same desk.

324
0:18:59.120 --> 0:19:03.840
And here it's stable at the beginning, 500 milliwatts, stable at the end.

325
0:19:03.840 --> 0:19:09.560
And for about the same duration, we have almost the same shape, but it only goes up to 700

326
0:19:09.560 --> 0:19:11.900
milliwatts or 800 milliwatts.

327
0:19:11.900 --> 0:19:17.000
So we can see that just if there's computers in the room or very close proximity that use

328
0:19:17.000 --> 0:19:21.360
the Wi-Fi, it looks like there's more Wi-Fi packets that the machine needs to discount

329
0:19:21.360 --> 0:19:24.360
because they are not meant for this machine to get.

330
0:19:24.360 --> 0:19:25.360
And that actually uses power.

331
0:19:25.360 --> 0:19:30.360
And I think we can actually look at network traffic by looking at how much power is used

332
0:19:30.360 --> 0:19:32.040
on the Wi-Fi.

333
0:19:32.040 --> 0:19:34.640
And when I tried to get this, I was getting very confused results.

334
0:19:34.640 --> 0:19:39.240
And then I realized someone was trimming something in a different room in the house on the same

335
0:19:39.240 --> 0:19:40.240
Wi-Fi network.

336
0:19:40.240 --> 0:19:44.280
So we closed that computer, and then I got better screenshots.

337
0:19:44.280 --> 0:19:49.480
And yes, also when I worked on that, I put wired network on all the other computers on

338
0:19:49.480 --> 0:19:50.480
my office.

339
0:19:50.480 --> 0:19:51.480
Otherwise, it was a mess.

340
0:19:51.480 --> 0:19:58.200
And another one that's still puzzling to me, I said on Mac we have a power track per process.

341
0:19:58.200 --> 0:20:02.200
I don't exactly know how they do it, but I suspect it's because they control both the

342
0:20:02.200 --> 0:20:04.200
CPU hardware and the kernel.

343
0:20:04.200 --> 0:20:09.080
And I suspect what they do is they have a power meter internally for each core.

344
0:20:09.080 --> 0:20:13.040
And whenever they context switch, they very likely take the value of the control at this

345
0:20:13.040 --> 0:20:17.520
point so they can know exactly how much power is used by each process.

346
0:20:17.520 --> 0:20:19.040
And this example I still can't explain.

347
0:20:19.040 --> 0:20:22.920
So I was using a test web page again that's using 100% of the CPU core.

348
0:20:22.920 --> 0:20:23.920
And we see it's using four watts.

349
0:20:23.920 --> 0:20:26.720
By the way, it's three different screenshots that I imagined to one so that you can see

350
0:20:26.720 --> 0:20:30.760
different tooltips, but yeah, if it's not perfectly aligned, it's because I'm not so

351
0:20:30.760 --> 0:20:33.080
good at image editing.

352
0:20:33.080 --> 0:20:37.640
So using four watts here with a process that's just burning CPU.

353
0:20:37.640 --> 0:20:40.280
And then the whole process is they do literally nothing.

354
0:20:40.280 --> 0:20:44.000
So you will have to trust me on this or look at the profile, but I looked in the marker

355
0:20:44.000 --> 0:20:45.000
chart, there's literally nothing.

356
0:20:45.000 --> 0:20:46.760
The threads don't wake up.

357
0:20:46.760 --> 0:20:52.000
So the only thing we are profiling here is the actual power overhead of a profiler.

358
0:20:52.000 --> 0:20:56.480
And if you compare the numbers, we are talking about four watts here, two milliwatts here.

359
0:20:56.480 --> 0:20:57.480
That's probably fine.

360
0:20:57.480 --> 0:21:00.480
Profile overhead is probably not distorting too much information.

361
0:21:00.480 --> 0:21:05.800
But the one thing that's really strange is when you stop burning CPU here, a few milliseconds

362
0:21:05.800 --> 0:21:13.040
later, the power overhead of a profiler drops dramatically, about 10 times lower.

363
0:21:13.040 --> 0:21:15.240
I still don't have the correct explanation for this.

364
0:21:15.240 --> 0:21:17.520
I have ideas about what it could be.

365
0:21:17.520 --> 0:21:22.280
I suspect it is that when we are actually busy with a CPU, the protein system uses a

366
0:21:22.280 --> 0:21:23.920
higher frequency.

367
0:21:23.920 --> 0:21:28.040
So it's likely that it's actually correct and it's just we are using a CPU at a higher

368
0:21:28.040 --> 0:21:29.040
frequency here.

369
0:21:29.040 --> 0:21:31.560
So the same operations took more power.

370
0:21:31.560 --> 0:21:32.560
But I'm not sure.

371
0:21:32.560 --> 0:21:33.560
It's just a guess.

372
0:21:33.560 --> 0:21:37.560
Memory contention or something or core contention, there's lots of things you can be serving

373
0:21:37.560 --> 0:21:38.560
across the system.

374
0:21:38.560 --> 0:21:44.560
Yeah, there are lots of possible explanations, but I don't have a way to conclude about what

375
0:21:44.560 --> 0:21:46.200
the thing actually is.

376
0:21:46.200 --> 0:21:49.640
Another idea was we also have efficiency cores on both machines.

377
0:21:49.640 --> 0:21:53.880
It could be that we are switching to efficiency cores, but I'm not sure it's a good explanation.

378
0:21:53.880 --> 0:21:57.960
Especially given I have that many processes on only two efficiency cores.

379
0:21:57.960 --> 0:22:03.240
So yeah, I don't know, but it's fun things to look at in profiles.

380
0:22:03.240 --> 0:22:06.040
And if I have a few more minutes, I have three more slides.

381
0:22:06.040 --> 0:22:08.840
One thing I wanted to share is the Firefox task manager.

382
0:22:08.840 --> 0:22:12.880
Very often when you care about power profiling, it's because something is using too much power

383
0:22:12.880 --> 0:22:13.880
on your Firefox.

384
0:22:13.880 --> 0:22:18.360
And the good way to look at it is to look at the task manager here.

385
0:22:18.360 --> 0:22:23.080
That will give you all the processes used by Firefox, but in addition to showing just

386
0:22:23.080 --> 0:22:27.400
the process IDs and how many percent of the CPU it's using, it will tell you which tabs

387
0:22:27.400 --> 0:22:29.520
are loaded in which process.

388
0:22:29.520 --> 0:22:32.800
So you can figure out if you want to close a specific tab by choosing too much.

389
0:22:32.800 --> 0:22:37.240
But also there's this profiler button here that appears when you hover the line next

390
0:22:37.240 --> 0:22:38.360
to the PID.

391
0:22:38.360 --> 0:22:43.080
If you click it, five seconds later you get a profiler tab with everything that happened

392
0:22:43.080 --> 0:22:44.080
in that process.

393
0:22:44.080 --> 0:22:48.480
So in most cases you just need to close a tab because you have one tab in the background

394
0:22:48.480 --> 0:22:50.920
that you don't care about that's doing crazy stuff.

395
0:22:50.920 --> 0:22:55.400
But if something really looks not the way it should be, you can do one click profiling.

396
0:22:55.400 --> 0:23:01.120
And if your machine supports power profiling, the power tracks will be there.

397
0:23:01.120 --> 0:23:05.200
Another thing I wanted to mention, it was also visible a little bit in Chris's presentation.

398
0:23:05.200 --> 0:23:07.440
But I worked on power profiling.

399
0:23:07.440 --> 0:23:09.480
I didn't work on adding the CO2 equivalent.

400
0:23:09.480 --> 0:23:14.000
This was a very welcome contribution from Chris and Thiershad from the Green Web Foundation.

401
0:23:14.000 --> 0:23:18.280
We are very happy about that.

402
0:23:18.280 --> 0:23:20.520
And the last thing I wanted to share here.

403
0:23:20.520 --> 0:23:23.760
So I explained all of this presentation how great it is to power profile.

404
0:23:23.760 --> 0:23:27.240
And I will explain why you don't really need it.

405
0:23:27.240 --> 0:23:30.680
In most cases what's using most of your power is the CPU.

406
0:23:30.680 --> 0:23:34.920
And without power profiling we can already profile CPU use.

407
0:23:34.920 --> 0:23:36.720
So we have CPU use per thread here.

408
0:23:36.720 --> 0:23:38.920
That's how we make the shape here.

409
0:23:38.920 --> 0:23:41.800
But sometimes we don't look at all the threads at once and something else might be using

410
0:23:41.800 --> 0:23:44.880
power or CPU.

411
0:23:44.880 --> 0:23:47.600
And we also record the CPU for the entire process.

412
0:23:47.600 --> 0:23:48.600
It's also a counter.

413
0:23:48.600 --> 0:23:49.840
So we call it in the same way.

414
0:23:49.840 --> 0:23:52.760
We don't show it by default because we're not too sure about the user interface we want

415
0:23:52.760 --> 0:23:54.480
to put for it.

416
0:23:54.480 --> 0:23:57.040
But you can access it from the DevTools console here.

417
0:23:57.040 --> 0:24:00.200
You type experimental unable process CPU tracks.

418
0:24:00.200 --> 0:24:03.640
And you see those process CPU tracks that appear here.

419
0:24:03.640 --> 0:24:07.520
And the shape they are extremely similar.

420
0:24:07.520 --> 0:24:08.520
Usually they are slightly different.

421
0:24:08.520 --> 0:24:11.080
This is mostly when we use the GPU a lot.

422
0:24:11.080 --> 0:24:12.880
The shape is slightly different here.

423
0:24:12.880 --> 0:24:13.880
Slightly different here.

424
0:24:13.880 --> 0:24:16.240
Overall it's mostly the same.

425
0:24:16.240 --> 0:24:23.640
And CPU profiling you can get on all machines.

426
0:24:23.640 --> 0:24:25.760
That's all I wanted to share for today.

427
0:24:25.760 --> 0:24:28.680
If you have, first thanks for your attention.

428
0:24:28.680 --> 0:24:36.960
If you have questions, I think we have a little bit of time.

429
0:24:36.960 --> 0:24:48.880
I think we have time.

430
0:24:48.880 --> 0:24:58.400
I didn't.

431
0:24:58.400 --> 0:25:00.560
So the question was you said the screenshots are public.

432
0:25:00.560 --> 0:25:03.000
Is there any data set that's so public?

433
0:25:03.000 --> 0:25:04.320
So I didn't say the screenshots are public.

434
0:25:04.320 --> 0:25:05.840
I said the profiles are public.

435
0:25:05.840 --> 0:25:10.440
And there's a link at the bottom of the slides to open the profiles.

436
0:25:10.440 --> 0:25:11.840
But you can really get your own profile.

437
0:25:11.840 --> 0:25:15.280
And it's a lot more fun when you profile something you actually use on your own computer.

438
0:25:15.280 --> 0:25:25.120
Okay, but it could be useful to make a community data set correlated to typical images.

439
0:25:25.120 --> 0:25:32.640
As you said, it's a blank page linking process until typical very below website.

440
0:25:32.640 --> 0:25:43.360
And then try to make a loop back to the website to give them information about what is significant.

441
0:25:43.360 --> 0:25:45.320
Okay, so it was more common than a question.

442
0:25:45.320 --> 0:25:50.200
It would be useful to publish examples of what's using power.

443
0:25:50.200 --> 0:25:52.880
One thing I should have probably mentioned is that when looking at the power numbers,

444
0:25:52.880 --> 0:25:56.760
they don't mean a lot in terms of what your actual users will experience.

445
0:25:56.760 --> 0:26:01.160
Because the typical power use of a computer varies a lot.

446
0:26:01.160 --> 0:26:04.600
Some of the machine I was showing in the picture, they have four watt CPUs.

447
0:26:04.600 --> 0:26:07.840
Some people have 200 watt CPUs.

448
0:26:07.840 --> 0:26:11.960
The most common, because we also have telemetry at Mozilla and we look at the power use of

449
0:26:11.960 --> 0:26:16.480
our user's CPU, the most common CPU power is 15 watts.

450
0:26:16.480 --> 0:26:17.480
That's typical for laptops.

451
0:26:17.480 --> 0:26:20.440
And the second most power is 65.

452
0:26:20.440 --> 0:26:21.840
And that's typical for desktop machines.

453
0:26:21.840 --> 0:26:46.440
So the question was, is it precise enough to verify if constant time crypto algorithm

454
0:26:46.440 --> 0:26:51.800
also constant energy use algorithm?

455
0:26:51.800 --> 0:26:55.760
If you can run the algorithm multiple times in a row long enough that you can power profile

456
0:26:55.760 --> 0:26:57.760
it, maybe.

457
0:26:57.760 --> 0:27:00.880
So we did many times with different inputs.

458
0:27:00.880 --> 0:27:04.360
I'm not completely sure honestly, but you can try.

459
0:27:04.360 --> 0:27:10.640
And the sampling rate that we get is at most every millisecond on some operating systems.

460
0:27:10.640 --> 0:27:14.000
And the issue I mentioned about the side channel attack.

461
0:27:14.000 --> 0:27:17.560
So on Linux, it was worked around by making it restricted access.

462
0:27:17.560 --> 0:27:21.040
On other platforms, the way they work around it is by ensuring we don't access it more

463
0:27:21.040 --> 0:27:23.080
than once every millisecond.

464
0:27:23.080 --> 0:27:26.760
So if we access it more than once every millisecond, we get the same data again.

465
0:27:26.760 --> 0:27:31.080
So you can't do a profile more than every millisecond.

466
0:27:31.080 --> 0:27:32.680
Thanks.

467
0:27:32.680 --> 0:27:51.400
Audience Bot Here.

468
0:27:51.400 --> 0:27:58.040
All right.


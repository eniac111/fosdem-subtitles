WEBVTT

00:00.000 --> 00:12.400
I'm Matthias Waldmann, I'm the author of this FQ tool.

00:12.400 --> 00:18.080
I'm not going to be able to show all slides, I think.

00:18.080 --> 00:22.480
I want to do a lot of demo because I think it's a good tool to demo.

00:22.480 --> 00:24.520
Can you talk a bit louder?

00:24.520 --> 00:28.720
I can try.

00:28.720 --> 00:35.240
There is FQ, it's a tool and the language and a group of set of decoders to work with

00:35.240 --> 00:36.240
data more or less.

00:36.240 --> 00:38.680
It used to be binary data, but now it's also text data.

00:38.680 --> 00:42.400
Well, I guess it's binary also in a sense.

00:42.400 --> 00:51.120
So it's heavily inspired by JQ, both as an easy JQ, the language, but it's also the CLI

00:51.120 --> 00:52.120
tool.

00:52.120 --> 00:57.000
It's inspired by how the arguments work and everything.

00:57.000 --> 01:01.880
And it's a tool for querying and displaying data exactly like JQ.

01:01.880 --> 01:07.280
But it also has an interactive weapon so you can work with it in a more interactive way.

01:07.280 --> 01:12.320
It has auto completion and a lot of other bells and whistles to make it very nice to

01:12.320 --> 01:14.080
work with.

01:14.080 --> 01:17.160
And it's available for a lot of operating systems.

01:17.160 --> 01:20.560
So I like to call it like a debugger for files.

01:20.560 --> 01:24.080
That's how I use it.

01:24.080 --> 01:29.560
So while JQ, it's a very CLI friendly language.

01:29.560 --> 01:30.720
You don't need any new lines.

01:30.720 --> 01:35.600
It's like the syntax is very, very tears.

01:35.600 --> 01:38.920
You can do a lot with a little syntax.

01:38.920 --> 01:40.000
And it's very composable.

01:40.000 --> 01:44.880
You have this pipe, it's more or less like shell pipes.

01:44.880 --> 01:46.520
But it has these generators.

01:46.520 --> 01:50.960
You can even do loops and iterate and recurse using these pipes.

01:50.960 --> 01:58.080
So you see these square brackets like that to iterate and dot dot is to recurse it through

01:58.080 --> 02:01.160
three of values, you can say.

02:01.160 --> 02:09.400
And it's also kind of like DSL for selecting and transforming JSON.

02:09.400 --> 02:10.400
You can call it JSON.

02:10.400 --> 02:13.400
It just happens to have JSON as an input output.

02:13.400 --> 02:16.560
Internally, you can call it JQ values.

02:16.560 --> 02:24.360
It has arrays and objects and numbers and strings and boots.

02:24.360 --> 02:27.480
So it's kind of like a super set of JSON.

02:27.480 --> 02:32.280
And I have an example here that you build a new object that has a key A that is an array

02:32.280 --> 02:34.920
that is one plus two plus three and empty.

02:34.920 --> 02:41.400
And you see that it becomes the object with just A and array one five.

02:41.400 --> 02:43.680
And empty was just a function that does nothing.

02:43.680 --> 02:46.800
It outputs no value at all.

02:46.800 --> 02:51.960
And you can also select values from the input.

02:51.960 --> 02:56.640
So here we have the object with A and B and then you create a new object that has the

02:56.640 --> 03:02.200
sum key and then that's the sum of A plus B. So that's point three.

03:02.200 --> 03:06.520
And it's purely function language based on generators and backtracking.

03:06.520 --> 03:13.640
But it has conditioners, it has function, it has bindings, it has all things you need.

03:13.640 --> 03:22.120
And the default is that you had one JQ filter or program that you run individually on each

03:22.120 --> 03:23.320
input file.

03:23.320 --> 03:27.120
But then it has functions to tell it to not behave like that.

03:27.120 --> 03:32.920
So you can run one filter on a group of files, for example.

03:32.920 --> 03:37.920
And FQ has support currently for 113 formats.

03:37.920 --> 03:43.760
And it has most of, I guess, half of them are media related because I work with media.

03:43.760 --> 03:47.280
So just like MP3, MP4, or Flack.

03:47.280 --> 03:52.120
And they also have support for like the de-muxing some of these forms.

03:52.120 --> 03:55.320
Some of these containers they have support for segmenting, I think.

03:55.320 --> 04:02.320
So you can kind of recombine it and then decode the de-muxed sample and things.

04:02.320 --> 04:05.700
But there have been other people added other things.

04:05.700 --> 04:09.320
So executable formats, archiving, networking.

04:09.320 --> 04:11.120
So you can do PP cap nowadays.

04:11.120 --> 04:13.440
You can do TCP reassembly even.

04:13.440 --> 04:16.720
And even decode the TCP stream.

04:16.720 --> 04:22.240
So it has support for RTMP, for example.

04:22.240 --> 04:30.080
And it also has support for some serialization forms like message pack and ASN1BR and C-BOR.

04:30.080 --> 04:33.080
And it also has support for some text format.

04:33.080 --> 04:35.440
Some of them you can even decode ending code.

04:35.440 --> 04:42.840
So you can decode it into a JQ or JSON value, transform it with JQ and then encode it back

04:42.840 --> 04:44.800
to some other text format.

04:44.800 --> 04:47.200
You can't do it with the binary formats.

04:47.200 --> 04:54.080
I will see if I get to that to explain why that is not easy.

04:54.080 --> 04:56.320
So what does it mean when you decode?

04:56.320 --> 04:58.720
What does it mean that the FQ support the format?

04:58.720 --> 05:03.200
It means that it can, there is some code, it's written in Go.

05:03.200 --> 05:08.680
So there's like a kind of a DSL for writing decoders.

05:08.680 --> 05:12.440
And that produces a structure that is JSON compatible.

05:12.440 --> 05:20.240
But each value in this structure also have a know which bit range they come from.

05:20.240 --> 05:24.400
And they also have an option that it can have symbolic mappings.

05:24.400 --> 05:30.040
You can map the number to a string or string to a string or a Boolean.

05:30.040 --> 05:33.760
In binary formats we usually encode some number that means something.

05:33.760 --> 05:38.960
Like this is the app level, you will get that.

05:38.960 --> 05:44.760
And for media this usually means that it's, you decode everything except the pixels or

05:44.760 --> 05:50.120
the audio because it's like, ah, then you can use it as a fanpape or whatever you want.

05:50.120 --> 05:52.560
There are some format that actually decodes to the samples.

05:52.560 --> 05:56.080
Flack, for example, we have support for actually decoding.

05:56.080 --> 06:03.680
So there is a full Flack decoder in Flack Cube, but you can't listen to the sound.

06:03.680 --> 06:05.960
And some format can use other formats.

06:05.960 --> 06:06.960
That's how they are.

06:06.960 --> 06:09.920
They are like hierarchy that they use.

06:09.920 --> 06:14.480
So you can use like a PPA uses Ethernet decoder using IPV.

06:14.480 --> 06:18.120
And then you can even end up with the loops here that they like zip files in the zip file

06:18.120 --> 06:21.960
and yeah.

06:21.960 --> 06:25.160
And there's also support for formats to pass.

06:25.160 --> 06:29.680
You can even return value, you can return like values from a decoder into another decoder.

06:29.680 --> 06:36.400
You don't see this from the outside, but then for example MP4 has some boxes that have like

06:36.400 --> 06:41.320
information about how the samples should be decoded, like how long or some fields or things.

06:41.320 --> 06:50.960
So then MP4 and MP4 decoder can pass that information down to another sample decoder.

06:50.960 --> 06:52.960
So how do I use?

06:52.960 --> 06:59.000
I use it because of this, because I work in media, so all more or less the whole MP4 file

06:59.000 --> 07:02.320
is metadata about how to play this.

07:02.320 --> 07:07.320
How to see, how to sing, how to yeah, everything.

07:07.320 --> 07:16.680
And I guess Derek had a good talk about why this multimedia is basically endless pain.

07:16.680 --> 07:24.880
And I guess FQ can't really fix the pain, but it can locate the pain, I guess.

07:24.880 --> 07:26.080
So this is what I use it for.

07:26.080 --> 07:31.760
I debug query assist when I work in media files and it's used for someone that is usually

07:31.760 --> 07:37.160
at work, there's a media file that has broken, it doesn't transcode or it's not in sync or

07:37.160 --> 07:39.960
and they say what is wrong with this file?

07:39.960 --> 07:42.080
And we have to figure out like what is it?

07:42.080 --> 07:45.040
Is it a decoder problem, the moxer problem, is it an encoder?

07:45.040 --> 07:46.040
Is it corrupt?

07:46.040 --> 07:48.360
Is it whatever?

07:48.360 --> 07:56.360
So FQ is very useful to quickly triage a lot of broken media files.

07:56.360 --> 07:58.360
Let's see.

07:58.360 --> 08:01.480
And I can just short, what is the time?

08:01.480 --> 08:02.880
Short like, well, what can it not do?

08:02.880 --> 08:03.880
Or what is not good?

08:03.880 --> 08:08.160
It's not good for encoding, like to change things.

08:08.160 --> 08:14.520
You can change things, but it's more about slicing binaries into and then concatenate

08:14.520 --> 08:17.760
them together and then write them out to a new file.

08:17.760 --> 08:21.000
So there's no like you can't just change the value in some JSON structure and just

08:21.000 --> 08:25.960
serialize it back because it's like a quick sample.

08:25.960 --> 08:29.840
I gave an example here with the MP4 moxer.

08:29.840 --> 08:34.160
But what would it mean to add or remove a sample in MP4 file?

08:34.160 --> 08:39.280
Then you would have to change all the boxes that describe how big the samples are and

08:39.280 --> 08:41.680
it just cascades away into.

08:41.680 --> 08:42.680
Yeah.

08:42.680 --> 08:52.720
And you can see that MP4, FFmpeg's MP4 implementation is 17,000 lines of C code, very dense C code.

08:52.720 --> 08:58.360
So it's used FFmpeg if you want to do those kind of things.

08:58.360 --> 09:03.920
And I think you see and Pietter will talk about more about encoding, I guess, and why

09:03.920 --> 09:10.600
this is complicated.

09:10.600 --> 09:16.680
And you can repair media files with FQ, but you probably have to be more or less an expert

09:16.680 --> 09:20.080
in the format that you're fixing.

09:20.080 --> 09:26.840
I usually do like I have, you can fix things by kind of testing the code, the configurations,

09:26.840 --> 09:33.400
or you use some kind of, you encode something and borrow from another media file and somehow

09:33.400 --> 09:36.000
stitch together to see what it is.

09:36.000 --> 09:43.260
So there is, I have some FQ code to build like ADTS headers and whatever, if you want.

09:43.260 --> 09:47.720
If you find an AC frame somewhere, you don't even know what, because an AC frame has to

09:47.720 --> 09:55.240
have metadata about like what, how many channels it has and what profile it is and things.

09:55.240 --> 09:58.620
And it doesn't do any decoders in runtime at the moment.

09:58.620 --> 10:02.880
You can't write the decoder, you have to write it in Go now and then compile it.

10:02.880 --> 10:03.880
So we'll see.

10:03.880 --> 10:05.280
Maybe in the future it will have characterised support.

10:05.280 --> 10:09.840
I have to have a prototype for K-Type, but it is complicated.

10:09.840 --> 10:11.120
It has an expression language.

10:11.120 --> 10:12.720
I have to write a parser for that.

10:12.720 --> 10:17.880
Maybe I will talk to you about this and see.

10:17.880 --> 10:21.200
There is more slides here, but I will, you can read them.

10:21.200 --> 10:23.680
I want to do a demo instead.

10:23.680 --> 10:31.440
So is it big enough?

10:31.440 --> 10:38.560
So FQ is just a CLI tool, works like this and you can do, if you want to list all the

10:38.560 --> 10:43.840
format that it supports.

10:43.840 --> 10:49.280
So if you run FQ, let's see, it has a pickup if you do.

10:49.280 --> 10:55.600
So the first argument is the filter that you want to run and dot in the AQ is just an identity

10:55.600 --> 11:00.760
function that is just, it gives you what you put in to get the root, kind of.

11:00.760 --> 11:02.320
So here we see that it's a pickup.

11:02.320 --> 11:10.060
It has a header, it has packets and some TCP or some TCP connections and things.

11:10.060 --> 11:15.560
So you can do dash I, actually I want to do a cache course in the JQ.

11:15.560 --> 11:19.120
I don't know how many people know how the JQ works.

11:19.120 --> 11:28.680
So I can do a short version how, just to show the particularities of JQ.

11:28.680 --> 11:32.960
So now I started JQ with dash I, which gives you just a null input.

11:32.960 --> 11:35.280
You get one input that is just null.

11:35.280 --> 11:41.200
So it's just a way of, you can at least just execute JQ values because it needs to have

11:41.200 --> 11:43.120
input somehow, out all ways.

11:43.120 --> 11:50.420
So now you can just write, yeah, strings or whatever you want to do.

11:50.420 --> 11:53.760
And if you do dot there, you just get null.

11:53.760 --> 12:02.080
And I guess the most special thing about JQ is the comma operator and that outputs a value.

12:02.080 --> 12:04.600
So you can do one comma one, two, three.

12:04.600 --> 12:07.080
It gives you one, two, three.

12:07.080 --> 12:13.200
But then in JQ you can, there are some special forms like this collect, which sounds, this

12:13.200 --> 12:19.640
looks very familiar to us as an array that then collects those values into something.

12:19.640 --> 12:28.760
But then in JQ you could, you could just write the expressions here or whatever you want.

12:28.760 --> 12:35.200
So let's say we can define a function, for example.

12:35.200 --> 12:41.320
So and then you can just collect that function or you can call it two times or you can map

12:41.320 --> 12:42.320
those values.

12:42.320 --> 12:49.960
But you see how, maybe it was too fast to, but you see how you can define function, you

12:49.960 --> 12:50.960
can have bindings.

12:50.960 --> 12:58.480
So it's a full function language that's, it's very, I like it a lot how it works.

12:58.480 --> 13:05.040
So let's back to that pcap file.

13:05.040 --> 13:11.760
So let's see, you can do, for example, if you want to see, look at the first packet,

13:11.760 --> 13:12.760
you can do this.

13:12.760 --> 13:19.320
You can pipe it to D which is, shows more recursively all the, like if you, if you just

13:19.320 --> 13:24.080
give it, when you do this, you actually run D also, but it also show, it only shows one

13:24.080 --> 13:25.080
level.

13:25.080 --> 13:29.340
So if you do D it, it will show you all of it.

13:29.340 --> 13:32.700
So here you can see, like you can write on the AQU expression here that is like, show

13:32.700 --> 13:35.420
me the first and the last packet and it will do this.

13:35.420 --> 13:37.600
And then you can say both of them.

13:37.600 --> 13:38.600
Yeah.

13:38.600 --> 13:43.040
So you can do things like that.

13:43.040 --> 13:48.720
So let's see, we can go into the GCP connection and we take the first one.

13:48.720 --> 13:58.480
We can do D and we see that this is a, so it seems to be HTTP request.

13:58.480 --> 14:02.840
Someone has downloaded the file.

14:02.840 --> 14:08.840
So let's see, we can go to the server stream.

14:08.840 --> 14:12.360
Let's see.

14:12.360 --> 14:17.320
And there's one thing about the AQ is that the AQ doesn't have binary support.

14:17.320 --> 14:19.400
It only has strings.

14:19.400 --> 14:27.080
So FQ has, to support binary, you can, there is some special functions in FQ to tell it

14:27.080 --> 14:28.080
up.

14:28.080 --> 14:33.760
So that this string is actually binary or I want it as binary if it's possible.

14:33.760 --> 14:39.840
So then you can say like this string, for example, if I would just do type just a string,

14:39.840 --> 14:45.640
but if I do two bytes, you will actually get the row bytes.

14:45.640 --> 14:52.720
And then I can say like, I want to maybe 400 first and DD is something that shows the whole,

14:52.720 --> 14:54.120
it doesn't truncate out.

14:54.120 --> 14:58.560
So here we see that this is some kind of HTTP request.

14:58.560 --> 15:01.000
Let's see.

15:01.000 --> 15:04.320
It's torch.

15:04.320 --> 15:07.720
Class 10.

15:07.720 --> 15:10.240
Class 7.

15:10.240 --> 15:15.640
So let's say we want to get the bytes for this.

15:15.640 --> 15:17.440
Okay.

15:17.440 --> 15:20.440
Plus.

15:20.440 --> 15:23.800
So here I think I have the body of the whole request.

15:23.800 --> 15:31.800
So in YAQ you can more than do, for example, this, all the coders in FQ are YAQ functions.

15:31.800 --> 15:36.120
You can do this now and it will decode this MP4 file.

15:36.120 --> 15:41.560
So now you can start with a sub-repl, for example, and now you're inside the MP4 inside

15:41.560 --> 15:43.800
the PCAP.

15:43.800 --> 15:50.680
And now you can do, and here you have the whole box tree for MP4 file.

15:50.680 --> 15:52.920
And you can, for example, go into the samples.

15:52.920 --> 16:00.920
I think this is some kind of subtitles MP4 file that I found somewhere.

16:00.920 --> 16:03.720
And here you have the tracks.

16:03.720 --> 16:06.560
It has samples.

16:06.560 --> 16:10.600
So this is like the raw bytes for that sample.

16:10.600 --> 16:15.480
And you see it's some kind of weird XML subtitle.

16:15.480 --> 16:21.200
And FQ has support for XML, so you can do this.

16:21.200 --> 16:24.320
And then you get a JSON version of the XML.

16:24.320 --> 16:31.840
I see we can see that most, there is some, let's see, I can write something that takes

16:31.840 --> 16:39.160
out all the, this is probably not how you write the TTML subtitle parser, but we can

16:39.160 --> 16:42.840
do a quick, quick version of it.

16:42.840 --> 16:49.480
And there is some functions like grep by that recurs with look for some condition.

16:49.480 --> 16:59.840
So here, for example, you can look for, I did not work.

16:59.840 --> 17:00.840
Why?

17:00.840 --> 17:01.840
I see.

17:01.840 --> 17:11.520
Ah, this should be XML dot.

17:11.520 --> 17:18.040
So, so now it recurs to define all those texts, the objects that had the text field and then

17:18.040 --> 17:21.160
just took that text field.

17:21.160 --> 17:33.600
So now you can, for example, take this expression, go out to the, where did you have the rectum?

17:33.600 --> 17:35.480
Here.

17:35.480 --> 17:42.560
And then you can go out to the prompt again and then remove the interactive and then do

17:42.560 --> 17:43.560
this instead.

17:43.560 --> 17:48.320
Or you can do this if you only want to have text.

17:48.320 --> 17:54.240
And we can even, let's say we want all samples.

17:54.240 --> 17:59.720
So here is all the, that's the thing you can do with all these decoders, the codes and

17:59.720 --> 18:00.720
blah, blah.

18:00.720 --> 18:03.440
And then you can iteratively do all this.

18:03.440 --> 18:06.840
It's like, yeah, it's nice.

18:06.840 --> 18:10.680
So let's see.

18:10.680 --> 18:15.960
And I also want to show that you can, you can actually, you don't have to write this,

18:15.960 --> 18:16.960
all this.

18:16.960 --> 18:20.280
When after a while you maybe with your expression starts to get very long.

18:20.280 --> 18:22.120
So you want to have more structures.

18:22.120 --> 18:27.360
I can show you, I have some helpers for MP4 files, for example.

18:27.360 --> 18:30.080
Maybe you know, so I spent a lot of times in MP4 files.

18:30.080 --> 18:33.760
Of course that's like what is used everywhere nowadays.

18:33.760 --> 18:38.680
So here is some helpers, for example, that can be written in a more structured way with

18:38.680 --> 18:39.800
the indentation and things.

18:39.800 --> 18:42.560
So you, you don't go crazy.

18:42.560 --> 18:53.560
And I can show here, for example, this, this is a bit long, but for example, here is an

18:53.560 --> 19:02.520
expression that loads this MP4.yq and it finds the video track and then it uses some yaky

19:02.520 --> 19:05.640
code to produce a GNU plot output.

19:05.640 --> 19:12.200
And it uses GNU plot and then I have my weird tool I have for producing images in the terminal.

19:12.200 --> 19:18.760
So here's the bit rate for the video, bit rate per, bits per second in this video.

19:18.760 --> 19:25.520
And you see that it's probably the, this top there up over the iframes in the MP4 file.

19:25.520 --> 19:31.640
So that was, maybe we can take questions.

19:31.640 --> 19:33.160
I think.

19:33.160 --> 19:34.160
Yes.

19:34.160 --> 19:42.960
Yeah, you can use that as a hexa tool also.

19:42.960 --> 19:46.520
Maybe it's not very convenient as a hexa tool, but you can, for example, you can do dash

19:46.520 --> 19:49.840
D bytes or bits.

19:49.840 --> 19:53.560
Then you get like a, it's just a dummy decoder kind of.

19:53.560 --> 19:59.760
So you can do, for example, bytes, file.bcap.

19:59.760 --> 20:08.160
So, so now you just get bits, so now you can do.

20:08.160 --> 20:14.680
So and then you can concatenate this into, you can, you can build this like a binary

20:14.680 --> 20:15.680
array cycle.

20:15.680 --> 20:19.200
They are like IELTS in Erlan, if you have used that.

20:19.200 --> 20:25.040
That you can, it's just an array with things that can become binary and then it can, and

20:25.040 --> 20:30.440
you can kind of pipe this to two bytes and then you get back.

20:30.440 --> 20:31.440
So you can kind of do this.

20:31.440 --> 20:36.440
You can, yeah, I'll bet you don't see it now.

20:36.440 --> 20:40.040
Yeah, so you see that you can, you can build this.

20:40.040 --> 20:44.880
That's how you can, how you can repair things with FQ that you take the samples and then

20:44.880 --> 20:48.280
add on some header and then you concatenate the bytes.

20:48.280 --> 20:50.400
And you can even decode it with the AQ again.

20:50.400 --> 20:55.280
You can, I mean, you could, you could try the code this as an MP3 file for example,

20:55.280 --> 20:57.280
but it won't work.

20:57.280 --> 20:58.280
Yes.

20:58.280 --> 21:13.200
I would like to have some more timey version.

21:13.200 --> 21:20.880
I can show how there's one slide show actually how the DSL, how the, how the Golang DSL looks

21:20.880 --> 21:21.880
like.

21:21.880 --> 21:28.520
Yeah, here, here is how kind of how the go DSL works.

21:28.520 --> 21:35.720
That you, there's like a D function of this kind of like the context for the keep structure

21:35.720 --> 21:40.040
where you are and then you create like new structs and fields and then, and you have

21:40.040 --> 21:46.600
these mappers that say like, this is a binary for made up binary format for like binary

21:46.600 --> 21:51.200
open source licenses that I was going to the moment there.

21:51.200 --> 21:53.840
So that's how, how most of the code looks like.

21:53.840 --> 21:57.200
So you can do, you can write any go code.

21:57.200 --> 22:02.080
I mean, I prefer to write them to make them look very declarative, like don't use too

22:02.080 --> 22:03.080
many.

22:03.080 --> 22:04.080
Yeah.

22:04.080 --> 22:06.680
Too much weird coding.

22:06.680 --> 22:07.840
Keep them simple.

22:07.840 --> 22:10.840
Any other questions?

22:10.840 --> 22:11.840
Yes.

22:11.840 --> 22:29.440
I'm going to say that it's probably hard to write the code.

22:29.440 --> 22:32.560
I think it creates a lot of options.

22:32.560 --> 22:36.000
How about what, what does the user mean when they change something?

22:36.000 --> 22:43.480
Like do they want, yeah, it's also like, do you, do you want the check sums to be recalculated

22:43.480 --> 22:44.480
or not?

22:44.480 --> 22:50.240
Do you want, what happens if you change something in a, if you have the max something and then

22:50.240 --> 22:51.240
you change the size.

22:51.240 --> 22:54.240
So now the segmenting becomes different.

22:54.240 --> 22:57.080
So then it cascades to change the whole file.

22:57.080 --> 22:59.160
So it's like, do you want that to happen?

22:59.160 --> 23:07.160
It's also like, there are encodings that are, there are like many ways to encode the same

23:07.160 --> 23:08.160
integer, for example.

23:08.160 --> 23:11.600
VAR ints can be encoded in many, many ways.

23:11.600 --> 23:18.040
So you would encode it and normalize all that, or should it be, should it remember, try to

23:18.040 --> 23:22.600
remember how, how the original thing was decoded.

23:22.600 --> 23:23.600
Yeah.

23:23.600 --> 23:29.080
So it's, it's complicated.

23:29.080 --> 23:30.080
Any other questions?

23:30.080 --> 23:31.080
Well, thank you.

23:31.080 --> 23:32.080
Yes, thank you.

23:32.080 --> 23:33.080
Thank you.

23:33.080 --> 23:34.080
Thank you.

23:34.080 --> 23:35.080
Thank you.

23:35.080 --> 23:59.800
Thank you very much.

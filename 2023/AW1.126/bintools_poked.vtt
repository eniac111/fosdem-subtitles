WEBVTT

00:00.000 --> 00:02.060
you

01:00.000 --> 01:03.760
somewhere here

01:03.760 --> 01:06.560
and yes what is group poke?

01:06.560 --> 01:10.160
so the project has

01:10.160 --> 01:13.160
you can say that it has many components

01:13.160 --> 01:17.720
on the way you counted but in a simple way you can say okay it's a leap poke

01:17.720 --> 01:22.120
which has the incremental compiler for the

01:22.120 --> 01:26.360
poke programming language by incremental

01:26.360 --> 01:30.920
you can add stuff you know redefine thing redefine types redefine variables

01:30.920 --> 01:36.320
over the time and it also had the other part is the pvm poke virtual machine

01:36.320 --> 01:39.640
which is powered by GNUjitter

01:39.640 --> 01:42.400
a project by Luca Sayou

01:42.400 --> 01:45.840
and yeah it's a

01:45.840 --> 01:50.320
virtual machine generator which is fun but no time for talking about that

01:50.320 --> 01:54.360
sorry Luca and the other part is the IOSpace

01:54.360 --> 01:58.200
which is the abstraction to make things you know you can address

01:58.200 --> 02:03.680
bits from the IODevices so these are the main components of the leap poke

02:03.680 --> 02:08.960
the other component we have in the GNU poke project is the poke the CLI

02:08.960 --> 02:10.240
application

02:10.240 --> 02:12.200
which is based on

02:12.200 --> 02:17.240
user leap poke and you can using read line

02:17.240 --> 02:22.040
you can write to the std in and then it gives you error on std error and

02:22.040 --> 02:24.400
output on stdout

02:24.400 --> 02:27.840
but the third thing is we have is the poke d

02:27.840 --> 02:30.200
poke daemon

02:30.200 --> 02:33.480
you know daemon in the term of server or in the background

02:33.480 --> 02:38.520
it's a program that exists we don't see it but it's doing something

02:38.520 --> 02:42.800
so it's a daemon for me but some people believe that okay daemon is only

02:42.800 --> 02:46.200
system things but I don't think so so

02:46.200 --> 02:49.040
I like to call it poke d

02:49.040 --> 02:51.400
so a very brief

02:51.400 --> 02:54.280
looking at the components inside the leap poke

02:54.280 --> 02:58.400
so if you go to the leap poke.h

02:58.400 --> 03:01.480
file you will see three op-h types

03:01.480 --> 03:05.960
the pk compiler which presents the interaction with the compiler

03:05.960 --> 03:08.720
the pvm pkval

03:08.720 --> 03:12.080
it is the values from the

03:12.080 --> 03:15.440
poke virtual machine and you have the pikios

03:15.440 --> 03:20.840
which is the abstraction over different devices like we have

03:20.840 --> 03:25.280
network block device we have zero device we have sub device file

03:25.280 --> 03:28.680
stream like std in stdout and

03:28.680 --> 03:32.360
process which is you can poke other processes

03:32.360 --> 03:36.600
you attach using the PID or memory which is a you know

03:36.600 --> 03:41.240
in process memory for doing

03:41.240 --> 03:46.280
temporary things and we have also a foreign dev which you can introduce a new

03:46.280 --> 03:50.360
device like you have like as an example I have

03:50.360 --> 03:54.160
I can show that but like reading from packets

03:54.160 --> 03:57.400
and writing to memory and then in poke you can

03:57.400 --> 04:00.760
poke the packets no network packets given from like

04:00.760 --> 04:04.400
network or for example at my

04:04.400 --> 04:09.720
job I have to work with Bluetooth things so we verify the data formats we read them

04:09.720 --> 04:13.160
and then we verify with the poke that we are

04:13.160 --> 04:16.920
we get what we expect to so

04:16.920 --> 04:20.720
and the language the language is procedural of course

04:20.720 --> 04:23.760
statically type of course interpreted because of

04:23.760 --> 04:26.760
you know pvm stuff and it's interactive

04:26.760 --> 04:31.160
DSL for binary data you know it is designed to specifically

04:31.160 --> 04:35.400
be expressed be enough powerful to express

04:35.400 --> 04:38.480
binary formats and yeah

04:38.480 --> 04:42.440
so we can have variables var a equals something

04:42.440 --> 04:46.760
we can have a weird integers

04:46.760 --> 04:51.080
like I have here and int 32

04:51.080 --> 04:55.240
literal which I'm casting to you int 13

04:55.240 --> 04:58.280
we have strings which are null terminated there is no

04:58.280 --> 05:04.680
non-null terminated string in poke if you want to use you can use arrays

05:04.680 --> 05:10.120
this is the offset so in size and

05:10.120 --> 05:13.720
offsets in the poke are magnitude which is

05:13.720 --> 05:17.320
an integer and a unit which you can define

05:17.320 --> 05:23.000
the the basic unit is bit but you can define your own unit like

05:23.000 --> 05:27.480
let me know let me not yeah here we have

05:27.480 --> 05:31.240
a a REPL which is poke REPL

05:31.240 --> 05:35.880
so I can say okay I have unit

05:35.880 --> 05:42.040
foo equals three and then I can define

05:42.040 --> 05:48.920
one foo which is here in the this is the output you know the

05:48.920 --> 05:52.600
output of the result so which is one three

05:52.600 --> 05:56.280
an offset one magnet one thing of this

05:56.280 --> 06:01.400
foo things which is three bits white

06:05.400 --> 06:09.560
13 here it's the bits of this integer it's an

06:09.560 --> 06:14.760
integer of size 13 yeah I'm casting to that from 32

06:14.760 --> 06:21.240
and yeah this is syntax for arrays so for literals

06:21.240 --> 06:24.600
for unsigned byte things you have to specify the ub

06:24.600 --> 06:30.440
so this is an array of I can copy actually

06:30.440 --> 06:38.280
var e equals 0 1 ub and then e which we can see here that 0 1 so

06:38.280 --> 06:43.400
it's an array so units like you can define if you go

06:43.400 --> 06:48.440
to the is that pk in the our repo it's it's there you know

06:48.440 --> 06:53.320
b uppercase b is eight kb and kilobyte the stuff we have in

06:53.320 --> 06:57.240
managing so you can also define types like

06:57.240 --> 07:02.200
you have an structure which is consists of a three bits width integer

07:02.200 --> 07:08.840
followed by an offset and int signed int 40 bit number

07:08.840 --> 07:15.720
which represents offsets in unit byte of and we call it j

07:15.720 --> 07:21.960
and then we have three strings you know null terminated strings

07:21.960 --> 07:28.840
and functions you can use the syntax fun my function equals

07:28.840 --> 07:32.440
this is the signature input signature output column and then

07:32.440 --> 07:39.640
you can do the this thing here is for attributes of of this value like

07:39.640 --> 07:43.240
the lengths you the is it mapped or not or stuff like

07:43.240 --> 07:47.160
that so the application the poke it's a ripple

07:47.160 --> 07:52.760
you can you know declare stuff like what you see here but it's not deep

07:52.760 --> 07:57.560
poke application it is something else so and it provides a bunch of

07:57.560 --> 08:04.440
utilities so here i switch the i'm opening a new terminal here i open

08:04.440 --> 08:08.040
the poke the program the cli so you we have here

08:08.040 --> 08:13.000
something like dot dot commands start with dots so dot help

08:13.000 --> 08:16.600
you see here that we have a bunch of you know things here

08:16.600 --> 08:19.720
or look for example dot set if you said okay you can

08:19.720 --> 08:24.360
do printing or here you can very define variables

08:24.360 --> 08:28.920
like you can change the set output base to 10

08:28.920 --> 08:31.880
okay this kind of things also possible here so

08:31.880 --> 08:36.200
uh you can do anything and you can redefine a again to be

08:36.200 --> 08:44.360
hello and it will be hello and yeah so uh the next thing is

08:44.360 --> 08:47.560
also okay i can run these things which i ran so i

08:47.560 --> 08:51.800
don't go over there so uh if we want to know how

08:51.800 --> 08:57.720
poke the the cli works a very simply oversimplified view is that it uses

08:57.720 --> 09:01.880
these two um uh p uh leap poke functions pk

09:01.880 --> 09:07.000
compile buffer and compile statement uh

09:07.000 --> 09:10.520
the trick in poke application is if the input

09:10.520 --> 09:14.920
starts with these keywords like where you need type find immutable

09:14.920 --> 09:18.840
if you compile and run the thing using this disfunction

09:18.840 --> 09:22.360
which expects you know arbitrary poke code

09:22.360 --> 09:27.080
but otherwise it uses a statement which assumes that you are passing in a

09:27.080 --> 09:32.680
statement in the refold and and despite the name both of

09:32.680 --> 09:38.680
them compile and run the poke program so yeah and this is an example of

09:38.680 --> 09:42.600
uh because this thing started with var so you can

09:42.600 --> 09:46.200
add more than one statement to it here is a

09:46.200 --> 09:50.360
statement because there is nowhere immutable form and but and this is also

09:50.360 --> 09:55.320
a syntax error in the poke ripple i can show you yeah there is error

09:55.320 --> 10:02.840
because it expects a statement not uh uh arbitrary code uh so

10:02.840 --> 10:09.160
you see that there are some limitations so uh what is this uh thing called

10:09.160 --> 10:15.000
let me yeah yeah so we read from terminal it gives a

10:15.000 --> 10:18.280
structure called input somehow the first where we

10:18.280 --> 10:25.080
compare it with these things if it's that compile buffer uh this check macro

10:25.080 --> 10:28.360
uh this is also pseudo code it's not real code so

10:28.360 --> 10:32.520
uh checks for first the output of this compile buffer function

10:32.520 --> 10:39.240
which is compile time error and also the exception during the execution of

10:39.240 --> 10:43.240
this program and if it's not okay check things and then you know in

10:43.240 --> 10:45.880
the compile statement you get the value back

10:45.880 --> 10:52.600
and besides this exception so but what is poke d so

10:52.600 --> 10:56.920
here in the poke application we have this

10:56.920 --> 11:01.080
layer of std in std out and std error over the lib poke

11:01.080 --> 11:07.240
so what about uh you know generalizing this abstraction to Unix sockets

11:07.240 --> 11:10.120
instead of getting information from the input

11:10.120 --> 11:14.280
uh we can get information from Unix socket

11:14.280 --> 11:21.320
it's a daemon acts like a broker so uh it listens on uh on this socket

11:21.320 --> 11:25.480
and it has a concept of channels like you have input channels and output

11:25.480 --> 11:31.000
channels and or completely independent and

11:31.000 --> 11:34.920
then a client we call them pokelets connects to this

11:34.920 --> 11:41.640
poke d it should it should tell the uh uh the poke d that what is its

11:41.640 --> 11:47.560
uh role so the role is an eight bit thing which is integral

11:47.560 --> 11:50.200
struct you know the syntax is this is different from

11:50.200 --> 11:56.120
normal structs but um yeah should i explain that no i don't

11:56.120 --> 11:59.800
know no so it's a the the the most significant

11:59.800 --> 12:03.800
bit is a direction followed by seven bit of channel

12:03.800 --> 12:07.160
which is limited we reserved them for future

12:07.160 --> 12:10.600
upgrades so when you connect to this again you have to

12:10.600 --> 12:15.000
write this byte to the poke d then he knows that okay your input so expect

12:15.000 --> 12:19.000
something from you or it's an output channel

12:19.000 --> 12:23.320
then when some user code write to this channel

12:23.320 --> 12:26.360
you will get the data and it's distributed to all

12:26.360 --> 12:30.520
and there is no addressing thing it's a broadcasting

12:30.520 --> 12:33.720
so uh for the you know if you want to know

12:33.720 --> 12:38.600
how these things work there is a pickel i can show

12:38.600 --> 12:46.040
why not if we go to the gnu poke poke program okay here in the

12:46.040 --> 12:52.840
oh i have to sorry i have to enable the syntax highlighter which i have so yeah

12:52.840 --> 12:58.280
vim pickels pdap so all this communication

12:58.280 --> 13:02.840
poke the application protocol and i see here you can see the description here

13:02.840 --> 13:06.760
okay this this rolls what is the outcome stage what is the

13:06.760 --> 13:11.000
all of them are there so if you are curious you can go there and study

13:11.000 --> 13:14.920
so but we will now go to the more detail so

13:14.920 --> 13:20.840
here is the poke d oversimplified view so here we have reading from input

13:20.840 --> 13:24.840
channels and we have a concept of iteration

13:24.840 --> 13:29.000
you know when you start sending something because

13:29.000 --> 13:33.720
you know you can have different print of statements so it should you know

13:33.720 --> 13:36.920
it's you know partially send data in chunks so

13:36.920 --> 13:39.960
we have to somehow notify our user that okay

13:39.960 --> 13:43.400
here you're starting a new iteration of compiling or something

13:43.400 --> 13:48.840
and so if it's from input channel which is channel number one

13:48.840 --> 13:53.320
it's simpler i think it gives to the pk compile buffer

13:53.320 --> 13:59.320
and if it's from command input which is input channel number two it will give it

13:59.320 --> 14:02.040
to the statement and here we have this check

14:02.040 --> 14:05.800
publish instead of print it it publishes to all this subscriber

14:05.800 --> 14:11.240
all the clients are said that okay we are interested in getting data from this

14:11.240 --> 14:15.240
output channel so any question regarding the things

14:15.240 --> 14:21.240
poke the poke poke the cli pickles nothing great

14:21.240 --> 14:28.760
nobody is following so that's great so let's talk about pacme so question

14:28.760 --> 14:34.280
where no if you i'll open the questions

14:34.760 --> 14:42.280
what okay i'm trying to my best to answer questions

14:42.280 --> 14:46.680
okay so now let's talk about pacme

14:46.680 --> 14:52.200
which is the title of this talk so it's an acme inspired you know poke

14:52.200 --> 14:57.000
interface it's not acme acme let me explain it

14:57.000 --> 15:00.680
the reason is because text rocks and anything else like graphical interstices

15:00.680 --> 15:05.320
sucks really seriously i'm not this is in the

15:05.320 --> 15:09.720
line of code of conduct of postum or not i don't know

15:09.720 --> 15:15.080
anything else sucks yeah good thank you for the support

15:15.080 --> 15:21.480
so examples of good interfaces in my opinion are list machines

15:21.480 --> 15:26.840
small talk environments oborone which is a desktop computer system

15:26.840 --> 15:30.680
written scratch from nikolas birt the creator of the pasco

15:30.680 --> 15:35.080
for the students but it's a very interesting text oriented interface

15:35.080 --> 15:39.240
and the acme which is the editor of a great operating system called

15:39.240 --> 15:44.360
plan 9 from bell labs written by rutpike the co-inventor of co-program language

15:44.360 --> 15:52.520
which is also inspired by oborone the good thing is text is the

15:52.520 --> 15:58.600
is the main thing there so you can select text and execute text so it is

15:58.600 --> 16:02.040
very it is very interactive but also you have

16:02.040 --> 16:06.680
the text so you can compose things and then okay put them to in a function and

16:06.680 --> 16:09.800
this kind of things you know it's much powerful than you know

16:09.800 --> 16:13.480
this dumb button you have to click on that and oh you don't you cannot even

16:13.480 --> 16:17.000
change it you know if it's not useful for you

16:17.000 --> 16:23.400
so the reason is okay easy to compose automation friendly you can have

16:23.400 --> 16:27.640
explore it's very useful for binary data you you are exploring you know different

16:27.640 --> 16:30.200
things and then over the time you have it

16:30.200 --> 16:33.720
scraped so copy paste it in a function and then call it later

16:33.720 --> 16:38.360
why not and it's extensible you know you need something more

16:38.360 --> 16:41.400
which we don't know you develop your own program

16:41.400 --> 16:44.760
which is you know a very simple thing you can do that

16:44.760 --> 16:48.680
and for your information i'm not against graphics graphics is awesome

16:48.680 --> 16:52.680
the way that we currently use you know graphical interfaces is bad like

16:52.680 --> 16:56.040
i have a button i cannot change the function attached to it i cannot

16:56.040 --> 17:00.280
you know remove this button put two buttons which is more useful to my

17:00.280 --> 17:03.800
case so yeah i love graphics like formulas

17:03.800 --> 17:07.160
visualization because the best pattern matcher

17:07.160 --> 17:09.960
we already have on plan there's our brain so

17:09.960 --> 17:15.880
why not visualization is cool so but this

17:15.880 --> 17:21.400
yeah never mind yeah it's it's getting out of conduct so

17:21.400 --> 17:27.000
kind of so okay pack me is pokelets plus tbox

17:27.000 --> 17:31.640
so the idea is okay um okay this terminal thing is not the

17:31.640 --> 17:36.040
best thing we have it's from 60s but yes it's it's by far the

17:36.040 --> 17:40.840
best thing we have today so let's leave there so the option is

17:40.840 --> 17:44.520
one option is to to implement everything from scratch which is

17:44.520 --> 17:48.840
i'm too lazy to do that so we have already programs like tmux

17:48.840 --> 17:53.160
and screen which you can do you do interesting stuff with them

17:53.160 --> 17:57.320
like let me um if you don't know about it let me

17:57.320 --> 18:05.320
okay this is a normal x term thing and i say like um let me use one

18:05.320 --> 18:08.920
a specific configuration for that thing so here i'm opening

18:08.920 --> 18:15.960
this thing so i can like this i have um there is a prefix so you want to

18:15.960 --> 18:21.320
say that okay please uh you know do this thing or

18:21.320 --> 18:26.040
like resizing things you know running commands you can

18:26.040 --> 18:32.120
do many cool things here i'm not you know this is good you know we have

18:32.120 --> 18:36.600
this kind of thing so we can use this infrastructure and

18:36.600 --> 18:43.480
with the power of little programs the pokelets which talk with the

18:43.480 --> 18:48.600
poke the over uh the the socket we can create a user

18:48.600 --> 18:53.560
interface which is dynamic you know not the best but yeah we can

18:53.560 --> 18:57.320
improve it it's it's more interactive and also because of

18:57.320 --> 19:01.160
this the there is no limit here pack me i'm talking about terminals

19:01.160 --> 19:04.200
but you can run on emacs which is we have

19:04.200 --> 19:09.320
these things can coexist together you have pick me here emacs here and even i

19:09.320 --> 19:13.720
have an implementation in web socket but it's still in python so like i'm not

19:13.720 --> 19:18.040
allowed to publish it unless i have some C implementation for it

19:18.040 --> 19:26.120
yeah i'm not looking at you yeah and in future we will have uh

19:26.120 --> 19:29.640
support for screen i chose tmux because i use it all

19:29.640 --> 19:37.160
all on a daily basis also why not and okay so i showed the the tmux for

19:37.160 --> 19:42.120
you so let me show you the pack me if you

19:42.120 --> 19:49.000
like type pack me it's here so home user bin pack me

19:49.000 --> 19:54.600
but uh this is it so it's uh called the tmux on a specific

19:54.600 --> 19:57.720
unique circuit which is a tmux thing not important for us

19:57.720 --> 20:04.040
with this specifically so pack me is uh this tmux configuration file so

20:04.040 --> 20:13.000
let's look at what is it so here share pack me yeah here

20:13.000 --> 20:18.520
so here like we are uh you know the default key because you

20:18.520 --> 20:22.360
when you want to do something to the instruct the tmux you have to

20:22.360 --> 20:26.360
send the key combination that okay now i'm talking to you tmux

20:26.360 --> 20:32.680
so by default ctrl b here we are unbinding it and here i chose

20:32.680 --> 20:36.520
ctrl g you can choose whatever you want in my

20:36.520 --> 20:42.120
favorite one is ctrl o because it doesn't conflict with anything anything

20:42.120 --> 20:45.480
else b a g are conflicting with the gnu

20:45.480 --> 20:51.240
uh read line which i hate but this is for you people so you can change it

20:51.240 --> 20:57.960
and so we are like we can have uh ctrl o so if i press ctrl g

20:57.960 --> 21:03.800
and uppercase o i now automatically split the window

21:03.800 --> 21:07.720
send uh these literal things like p let out

21:07.720 --> 21:11.960
enter this is you know what you see here and then select

21:11.960 --> 21:16.440
you know go back to my cursor to my current pane which is this one

21:16.440 --> 21:21.080
uh the the upper one so you can now if i go to the

21:21.080 --> 21:29.400
okay i can uh new one p let echo print

21:29.400 --> 21:35.080
it's better to be coated hello fustum

21:35.080 --> 21:39.480
and i guess with this one i have a very little program

21:39.480 --> 21:42.760
which reads from stit in and writes to the poketie

21:42.760 --> 21:49.080
so you see here this uh 73 is the iteration number and that's the

21:49.080 --> 21:54.680
execute the results of execution it's there so i if i rerun it again uh a new

21:54.680 --> 22:00.600
thing so here in this pack plet out i decided to use this but you can use

22:00.600 --> 22:07.080
anything you are interested in and uh just for the record this

22:07.080 --> 22:14.360
uh slide thing it's a pokelet 2 and i can show the code to you like

22:14.360 --> 22:22.360
user bin p let slides it's like p let out channel number 60

22:22.360 --> 22:26.920
uh don't put the length so it's not important and this is the terminal

22:26.920 --> 22:33.720
uh code escape code for clearing the this thing so it just instead of writing

22:33.720 --> 22:36.920
this slash slash the number it just clears

22:36.920 --> 22:41.720
this so i have this slides here uh so

22:41.720 --> 22:46.200
the other thing i'm and i can show you so uh let me finish this thing

22:46.200 --> 22:49.960
so now key bindings normal key bindings like

22:49.960 --> 22:58.040
i have this power here to like let me this is also cool let's out

22:58.040 --> 23:05.880
okay here in in my think i think uh let's define a variable echo

23:05.880 --> 23:11.080
var a equals hundred and send it to the

23:11.080 --> 23:19.400
poke okay so we know that it it has so but with the power of uh

23:19.400 --> 23:27.000
t mux i can go and select this a and i i'm i'm telling that this is a key

23:27.000 --> 23:31.640
binding okay execute it the e upper e this this key

23:31.640 --> 23:37.080
binding so pipe and cancel put a semicolon at the end and get give it to

23:37.080 --> 23:41.240
the pokelet in channel two which is for the

23:41.240 --> 23:45.320
command so if i press shift e hundred you have

23:45.320 --> 23:49.080
c so it executes this a it's like that you you've written the

23:49.080 --> 23:54.520
a on the command in the ripple so uh

23:54.520 --> 24:02.360
very simple thing so i have also for because i love users so i provided

24:02.360 --> 24:08.680
predefined layouts for you so you can here control g f1 like it's opened your

24:08.680 --> 24:14.280
editor here which is hell yeah this is using

24:14.280 --> 24:18.600
this editor thing so you can just use your favorite

24:18.600 --> 24:21.880
editor you have here the pickel which i write

24:21.880 --> 24:25.960
a you see the logic is in the poke d so when you can

24:25.960 --> 24:29.640
connect disconnect everything is there and

24:29.640 --> 24:36.280
another layout is uh f2 yeah it worked so let's show let me show

24:36.280 --> 24:39.480
you something maybe a little bit more interesting

24:39.480 --> 24:46.200
yeah yeah yeah where let's open the file

24:46.200 --> 24:53.320
which i have somewhere no this is error i

24:53.880 --> 24:56.680
okay home

24:56.680 --> 25:01.800
oh drone i don't remember that

25:01.800 --> 25:10.680
called runia test zero one elf okay it's an elf file

25:10.680 --> 25:14.920
uh you see here the number zero this is the

25:14.920 --> 25:22.360
handle to this i think this file so i can load

25:22.360 --> 25:29.080
elf module and uh okay and i know that it's a risk five

25:29.080 --> 25:37.000
elf so let's load this risk v module we call module pickles

25:37.080 --> 25:45.320
if you wonder why i came and uh so var file equals elf it's a elf

25:45.320 --> 25:49.000
sixty i know that it's a elf third oh i can

25:49.000 --> 25:55.240
like do the view here you get a dump and you can the fun thing is you can

25:55.240 --> 25:59.400
add as many as viewer you want so it's the same thing you can have a viewer in

25:59.400 --> 26:02.200
web so here you instruct your thing and you in

26:02.200 --> 26:06.760
the web you get your things you highlighting stuff anything you want

26:06.760 --> 26:14.680
uh yeah and uh so let's do elf 64 file

26:14.680 --> 26:20.280
at this iospace at offset zero so i'm telling that okay

26:20.280 --> 26:25.320
uh consider look go to this iospace number zero go to that

26:25.320 --> 26:29.560
offset and give me the elf file there there's an elf file there

26:29.560 --> 26:37.320
and it's okay oh and if i here not very oh yeah

26:37.320 --> 26:41.640
in the i can zoom in so here you see that you get

26:41.640 --> 26:48.200
all the elf insta stuff here like e-edence and all type machine

26:48.200 --> 26:53.640
section header and others so let's

26:54.040 --> 27:00.120
let's get the text section of this thing elf32

27:00.120 --> 27:08.440
um no we have the file get sections by name

27:08.440 --> 27:12.760
dot tags i know that this elf file only has one so

27:12.760 --> 27:16.520
it's gets all the sections so i have one so sub zero

27:16.520 --> 27:23.320
if i write text so he at the end you you see you you get this this section

27:23.320 --> 27:28.760
header with the offset in and and size right

27:28.760 --> 27:33.480
so this is the address where the code the actual execution code

27:33.480 --> 27:39.000
resides in the binary so oh but you know you can say okay give me

27:39.000 --> 27:44.200
the bytes give me how much bytes text sh

27:44.200 --> 27:50.520
size bytes is uh is an here this is an offset i'm telling that

27:50.520 --> 27:57.080
okay i need bytes of this size at this iospace and at this offset you

27:57.080 --> 28:03.400
know go to this offset sh offset so you get all the bytes here

28:03.400 --> 28:12.520
i can vm set output base to 16 and do it again so in

28:12.520 --> 28:18.440
more interesting thing so but it is bytes what else can we do you can say

28:18.440 --> 28:23.480
okay i know that these are risks we risk 532

28:23.480 --> 28:31.160
uh i instructions you know this is a subset you know this basic

28:31.160 --> 28:34.760
base component of this risk machine so i'm

28:34.760 --> 28:41.720
give me that amount of uh element of instructions at this

28:41.720 --> 28:47.320
offset so here if we go to the end so you get

28:47.320 --> 28:52.200
all these instructions risk five instructions which be

28:52.200 --> 28:56.120
written in poke the description of the this instruction that's the extensible

28:56.120 --> 28:58.440
thing so for example here we have an

28:58.440 --> 29:03.800
instruction of format i which immediate of this value rs1

29:03.800 --> 29:07.320
functionality zero rd this one and opcode stuff like

29:07.320 --> 29:13.240
i can show you the uh i think i'm done you know i don't have

29:13.240 --> 29:17.800
any time so let me just show this one and then to

29:17.800 --> 29:23.960
radare so poke uh what what was yeah

29:23.960 --> 29:30.760
pickles what

29:30.760 --> 29:36.920
yeah yeah yeah yeah he i didn't pay for them you can it's

29:36.920 --> 29:40.440
free from my point of view

29:42.680 --> 29:46.920
you have to handle him you know so this is a risk five you see

29:46.920 --> 29:50.360
we define the opcodes uh different instructions like

29:50.360 --> 29:57.560
this is the instruction type b it's a it's a integral strike so you can read

29:57.560 --> 30:01.640
about this so we can have very complex things we have pretty printers

30:01.640 --> 30:06.280
nice thing is we have also i want to show this this is from

30:06.280 --> 30:12.520
uh okay i can put it into incense variable incense

30:12.520 --> 30:15.880
uh incense

30:15.880 --> 30:23.240
zero which is let me close this view dumb view yeah yeah here i have the

30:23.240 --> 30:29.240
thing so you can give the this is the actual

30:29.240 --> 30:33.160
number which is there in the memory it is stored

30:33.160 --> 30:37.240
in the little indian so 13 80 something like that

30:37.240 --> 30:45.800
and one what what yeah as as so we have a method

30:45.800 --> 30:50.520
uh you you call this method you you don't need to

30:50.520 --> 30:54.520
parent put the parenthesis if there is no argument so it gives you

30:54.520 --> 30:59.480
uh real valid instruction for the assembler so this is part of the

30:59.480 --> 31:04.040
whole story so you can add more pokelets next year i will come back with more

31:04.040 --> 31:09.400
interesting things no gui but the right way and uh yeah

31:09.400 --> 31:19.400
thank you thank you if there's any question

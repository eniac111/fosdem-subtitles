WEBVTT

00:00.000 --> 00:13.200
All right. Hello, everyone. Thanks for coming. My name is Adam. I work for Red Hat and I

00:13.200 --> 00:19.240
do CentroStream for Day Job. I'm the CentroStream lead. And I want to talk to you about CentroStream

00:19.240 --> 00:26.200
and how we, Red Hat, use it to get work done on RHEL and how you can use it to participate

00:26.200 --> 00:33.160
but also build your stuff. We'll see. Okay. So just to set the context, before CentroStream

00:33.160 --> 00:41.320
we did something like this, like when we created RHEL, we took what's in Fedora, that's where

00:41.320 --> 00:47.480
the innovation happens, and then we had a long process to build RHEL out of some of

00:47.480 --> 00:55.640
that and when that got out somewhere later, CentroStream, Centro's Linux happened. And

00:55.640 --> 01:01.240
yeah, that was interesting but the problem was that when you find something in that rebuild,

01:01.240 --> 01:07.480
you can't really change much because the goal was to be a rebuild of RHEL. So what we did

01:07.480 --> 01:14.040
with CentroStream, we kind of switched it a little bit. Now the process is like there's

01:14.040 --> 01:19.000
more steps. So we have Fedora still. There's nothing changing about Fedora, that's still

01:19.000 --> 01:24.440
the primary place. Where innovation happened, that's the upstream. Where something called

01:24.440 --> 01:31.040
Fedora ELN, which is like a subset of the content, rebuilt with RHEL configuration,

01:31.040 --> 01:36.160
and that's the next major RHEL release. So if you go out and look at Fedora ELN, that's

01:36.160 --> 01:47.360
what RHEL 10 is sort of right now. Then CentroStream happens, this is where the development of

01:47.360 --> 01:52.360
RHEL happens in public. And if you talk to Red Hatters, they will sort of somehow combine

01:52.360 --> 01:56.520
these together, CentroStream and RHEL, because this is really our development space. And

01:56.520 --> 02:01.360
I'll have more details later. So this is tracking the next minor version of RHEL, and this is

02:01.360 --> 02:06.560
what you can use, but you can also contribute to it, and we'll get into details. So this

02:06.560 --> 02:11.880
is basically if you heard Fedora ELN and CentroStream, this is what it is. And I have some more details

02:11.880 --> 02:18.880
here. This is Fedora, Fedora-wide sources. This has its own sources, and this is the

02:18.880 --> 02:23.440
real build flag. And you can also see there's a different amount of packages. This is like

02:23.440 --> 02:29.080
more information there. Okay, so let's talk about how we get work done, or how you can

02:29.080 --> 02:36.760
get work done in CentroStream, how that works. So there's this diagram, and we're not going

02:36.760 --> 02:43.280
to go box after box, no worries, but I just want to demonstrate that you see that we have

02:43.280 --> 02:50.760
Bugzilla where work tracking happens, there's a merge request coming to the GitLab, and

02:50.760 --> 02:56.000
then basically everything is synced. So the upper part is the CentroStream infrastructure.

02:56.000 --> 03:02.560
This is RHEL internal infrastructure. And as change happens, it gets built in both,

03:02.560 --> 03:08.400
it gets tested in both, and when that passes test, both get released further to the process,

03:08.400 --> 03:14.320
and finally it gets into both RHEL and Centro. There's something called Centro's development

03:14.320 --> 03:22.780
compose and production compose, which is basically when this compose is sort of like a repo and

03:22.780 --> 03:29.520
ISO and container images, it's like a snapshot that you can consume. And, yeah, there's one

03:29.520 --> 03:34.960
that happens after the test, that happens every day, and then the verification, this

03:34.960 --> 03:39.560
is like an internal process paperwork and stuff, and then that goes to the production

03:39.560 --> 03:47.160
compose. And I can even show you how that happens in the system. So this is what a Bugzilla

03:47.160 --> 03:52.840
bug looks like, someone was adding, this is like half a year ago, a multi-pass TCP to

03:52.840 --> 03:58.640
RHEL, so they created this, they did the merge request in GitLab, everything was visible

03:58.640 --> 04:04.880
publicly, and they submitted a build first in CentroStream, that got through, got built

04:04.880 --> 04:10.040
in RHEL as well, if I scroll down there's tags, that was like the multiple steps, the

04:10.040 --> 04:17.560
gate pending candidate, that's how you can know where it's in the process, and it basically

04:17.560 --> 04:20.840
got through that, and now if you're using CentroStream, you already have it installed,

04:20.840 --> 04:28.600
because that's half a year ago for that change, but this is basically the flow, how it works.

04:28.600 --> 04:35.800
Let's talk about contributions now. For some context, I'm starting with RHEL 8, Red Hat

04:35.800 --> 04:41.600
publicly said that we'll do minor releases of RHEL every six months, and major releases

04:41.600 --> 04:53.080
of RHEL every three years, and this is what we've been sort of doing, 8 and 9, and something

04:53.080 --> 04:58.960
called ABI, I got that as a note for myself, with RHEL we make some promises to customers

04:58.960 --> 05:04.040
about ABI guarantees and support statements, et cetera, basically whatever you would expect

05:04.040 --> 05:10.160
from Enterprise OS, so we don't want to break things for customers in the major version,

05:10.160 --> 05:17.080
and this will influence what contributions we can take, so the easiest one is bug fixes,

05:17.080 --> 05:24.480
if you find a bug and you can fix it, feel free to do so, we'll be very happy to take

05:24.480 --> 05:29.320
it, test it, and if it doesn't break things for the customers, merge it, get it in, and

05:29.320 --> 05:36.920
that's the easiest way to contribute. You can also contribute stable updates from upstream,

05:36.920 --> 05:43.480
and by stable, that gets to the promises, basically as RHEL ages, it gets further from

05:43.480 --> 05:50.560
the upstream, because we need to keep things sort of stable in the ABI way, so we still

05:50.560 --> 05:58.080
release updates, like every single minor release, but most of them are backwards, so again,

05:58.080 --> 06:03.680
welcome to contribute updates, our stable will fix them, fix and test them, build them

06:03.680 --> 06:11.520
and get them in, but yeah, and backported features, this is what I mentioned, basically

06:11.520 --> 06:18.800
already, I just have a slide for that, okay, what we can take is the ABI noncompatible

06:18.800 --> 06:24.520
updates, and if you're wondering about details, there's the document called RHEL application

06:24.520 --> 06:28.680
compatibility guide, you can find it online on Red Hat's website, and it will explain

06:28.680 --> 06:35.480
exactly how it works, but most packages have the ABI stable for the entire ten years of

06:35.480 --> 06:40.940
the life cycle, and we take it pretty seriously at Red Hat, because customers build applications

06:40.940 --> 06:45.040
and they want them to run forever without changing them, so we don't want to break this

06:45.040 --> 06:52.000
for them, so please don't submit things that would break ABI, we would need to politely

06:52.000 --> 06:57.960
explain why not, and reject it, that's what you can contribute to Fedora, ELN, for example,

06:57.960 --> 06:59.440
we'll get to that.

06:59.440 --> 07:06.360
Okay, I have maybe for docs, typos, man pages, there's a thing for customers, if they go

07:06.360 --> 07:11.160
to the customer portal and they have a bug with documentation, they can report an issue

07:11.160 --> 07:16.760
and get it fixed that way, otherwise we tend to batch them together, so they land all at

07:16.760 --> 07:22.720
once, so maintainers can focus more on actual feature development, backporting and stuff,

07:22.720 --> 07:28.640
so these are welcome, but they might take longer to get in because of this.

07:28.640 --> 07:38.540
And this is a detailed image of the life cycle, if you want to get your change into a specific

07:38.540 --> 07:44.840
minor version of RHEL, we don't have a way in the bugzilla to really communicate it,

07:44.840 --> 07:49.840
you can get in touch with the maintainer, you can anticipate, by the way, minor release,

07:49.840 --> 07:54.920
this is the dark blue, extended update support, this is the light blue, and then update services

07:54.920 --> 08:00.640
for SAP, so even like we're done with minor, we're still maybe supposing it for up to four

08:00.640 --> 08:07.200
years, and the arrows is where the syntax framework happens, so it tracks all of them

08:07.200 --> 08:14.680
and just changes make it to the minor releases, and yeah, you can sort of anticipate what

08:14.680 --> 08:20.320
it gets, but there's no communication, like where exactly, so if you really need to, you

08:20.320 --> 08:23.120
would need to talk to the maintainer.

08:23.120 --> 08:28.880
We have this for eight, and there's also seven, there's a lot of things going in the background.

08:28.880 --> 08:33.240
And if you want to contribute, let's talk about how.

08:33.240 --> 08:39.720
So you can open bugs in bugzilla, you can test stream, if you find something, you can

08:39.720 --> 08:47.680
open bugs and hopefully get it into the next minor release, you can open merge requests

08:47.680 --> 08:52.040
in GitLab, create a GitLab account, but first please make sure that you have a bug, so you

08:52.040 --> 08:57.840
start the conversation with the maintainer, so they know what's coming, and they can also

08:57.840 --> 09:00.120
help you with the change.

09:00.120 --> 09:04.560
And then you can track the change, this is again from the diagram, we have these three

09:04.560 --> 09:12.840
tags in Koji, which we use to track the process, and you can preview things in the production

09:12.840 --> 09:19.000
compose page where it gets.

09:19.000 --> 09:26.320
You can get the composites on this URL, and there's slash production slash development,

09:26.320 --> 09:31.040
but otherwise they go to the mirror, so if you go to Centos or you will find Centos stream

09:31.040 --> 09:32.040
there.

09:32.040 --> 09:42.320
Okay, let's have a look at use of Centos stream, of course you can use it to preview rel test

09:42.320 --> 09:48.600
features that are in development, see what's coming before it actually gets to rel.

09:48.600 --> 09:54.000
I think one of the interesting part is that you can use it, if you build something on

09:54.000 --> 10:00.840
top of rel, you can use Centos stream in your CI to preview how it would work on the future

10:00.840 --> 10:05.320
rel, so you can get ready for the next minor release.

10:05.320 --> 10:10.360
One advantage, like compared to a rebuild, is that if you find a bug in Centos stream

10:10.360 --> 10:16.680
you can actually get it fixed for you and get it in rel proper, so this is like what

10:16.680 --> 10:21.760
we're trying to do there.

10:21.760 --> 10:27.440
And this is actually one of the most interesting for me, so we have special interest groups,

10:27.440 --> 10:34.120
there's like the Hyperscale SIG, there's Cloud SIG, there's the K-mode SIG, and they work

10:34.120 --> 10:38.680
in the Centos stream community and they build their own stuff on top of Centos stream, so

10:38.680 --> 10:44.240
they have like a stable enterprise platform, but again compared to a rebuild they can actually

10:44.240 --> 10:49.080
influence what's happening, they can submit changes and break things for them and get

10:49.080 --> 10:54.160
it into rel proper, I know the Hyperscale SIG they're maintaining a bunch of stuff before

10:54.160 --> 10:58.640
they actually merge it, and there's really interesting stuff going on, you're welcome

10:58.640 --> 11:02.900
to come in and create your own SIG and use the community build system to build everything

11:02.900 --> 11:09.280
and Centos stream is definitely there as the primer build targets.

11:09.280 --> 11:17.160
So that was mostly Centos stream, I have something about Centos stream 10 and rel 10 as well,

11:17.160 --> 11:22.120
basically we've saw this diagram and with rel 10 we're right here, so if you want to

11:22.120 --> 11:29.600
contribute towards rel 10, get it in Fedora rawhide, which means it gets in Fedora ELN

11:29.600 --> 11:36.440
if it's within the rel package set, and at this point you can change ABIs, you can do

11:36.440 --> 11:42.560
whatever Fedora would normally do through Fedora changes, so this is like the most flexible

11:42.560 --> 11:51.600
time of contribution to, towards Centos stream 10 and rel 10, and later when we get to do

11:51.600 --> 12:00.280
stream, this is from rel 9, but the process is the same, we have rawhide and Fedora ELN,

12:00.280 --> 12:05.120
imagine this like get branches and Fedora rawhide is the rebuild ELN, follows it and

12:05.120 --> 12:12.760
we branch Centos stream from that and then later start doing rel, and yeah, we call that

12:12.760 --> 12:21.280
bootstrap that phase that will be happening somewhere later, and yeah, that's how it happens,

12:21.280 --> 12:27.400
so you can get your changes to Fedora ELN right now, and that was a different

12:51.280 --> 12:52.280
process.

12:52.280 --> 13:19.880
yangud

13:19.880 --> 13:21.940
you

13:49.880 --> 13:51.940
you

14:19.880 --> 14:21.940
you

14:49.880 --> 14:51.940
you

15:19.880 --> 15:21.940
you

15:49.880 --> 15:51.940
you

16:19.880 --> 16:21.940
you

16:49.880 --> 16:51.940
you

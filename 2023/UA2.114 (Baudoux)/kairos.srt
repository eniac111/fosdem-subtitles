1
0:00:00.000 --> 0:00:11.400
Let me just quickly introduce myself.

2
0:00:11.400 --> 0:00:12.600
My name is Mauro Morales.

3
0:00:12.600 --> 0:00:15.440
I'm originally from Guatemala, but now living in Belgium.

4
0:00:15.440 --> 0:00:18.040
Really like it here.

5
0:00:18.040 --> 0:00:22.880
Just some random thing about me.

6
0:00:22.880 --> 0:00:25.280
The first distro I used was Mephis.

7
0:00:25.280 --> 0:00:31.480
I really liked it when I was going to university and never went away from Linux.

8
0:00:31.480 --> 0:00:35.040
My current daily driver is OpenSUSE Tumbleweed.

9
0:00:35.040 --> 0:00:40.280
I am a Ruby and Go developer, and there are some places you can reach out if you have

10
0:00:40.280 --> 0:00:44.040
questions about the talk or anything afterwards.

11
0:00:44.040 --> 0:00:47.960
I want to talk about how we build Kyros, but for that I need to tell you what Kyros is

12
0:00:47.960 --> 0:00:48.960
first.

13
0:00:48.960 --> 0:00:54.620
If you go to our website, you will see that we sell or advertise ourselves as the immutable

14
0:00:54.620 --> 0:00:58.480
Linux meta-distribution for edge communities.

15
0:00:58.480 --> 0:01:03.620
That sounds like a handful, so let me dive a little bit deeper into that.

16
0:01:03.620 --> 0:01:06.680
What is edge computing?

17
0:01:06.680 --> 0:01:15.720
There is a trend right now into moving the operational aspects from the data center outside.

18
0:01:15.720 --> 0:01:16.720
What does that mean?

19
0:01:16.720 --> 0:01:19.120
That you might have nodes in certain places.

20
0:01:19.120 --> 0:01:24.840
Say you have a grocery store producing a lot of information about all the sales that are

21
0:01:24.840 --> 0:01:27.520
happening, all the different products.

22
0:01:27.520 --> 0:01:34.280
Instead of sending all the bulk of data up to the server and do some processing just

23
0:01:34.280 --> 0:01:39.360
to send it back to all those nodes, what you do is that you do the heavy processing already

24
0:01:39.360 --> 0:01:40.920
at the node.

25
0:01:40.920 --> 0:01:45.440
The only thing that you send all the way to the server is the summary or the calculations

26
0:01:45.440 --> 0:01:48.560
that you are producing in these nodes.

27
0:01:48.560 --> 0:01:58.120
This is useful for doing some machine learning, some artificial intelligence stuff like this.

28
0:01:58.120 --> 0:02:03.920
The thing is if you don't pass all the raw data, first of all you reduce a lot the latency

29
0:02:03.920 --> 0:02:10.320
of the end result because you don't have to pass through the wire all this information.

30
0:02:10.320 --> 0:02:17.560
Second is a lot more private because you are not putting all your eggs in one basket.

31
0:02:17.560 --> 0:02:21.520
For some reason the main data center gets attacked.

32
0:02:21.520 --> 0:02:24.080
They don't have access to all the raw information.

33
0:02:24.080 --> 0:02:29.640
Instead the data is distributed across the different nodes and the only thing that they

34
0:02:29.640 --> 0:02:34.320
might have access to is the resulting calculations for example.

35
0:02:34.320 --> 0:02:39.120
Or even if a certain specific node gets attacked then that doesn't mean they can access the

36
0:02:39.120 --> 0:02:42.240
rest of the network.

37
0:02:42.240 --> 0:02:50.640
It's a very interesting concept that is being formulated right now and Kyros wants to be

38
0:02:50.640 --> 0:02:55.840
a solution for those nodes that are being run there.

39
0:02:55.840 --> 0:02:57.200
How does Kyros do that?

40
0:02:57.200 --> 0:03:03.480
First of all Kyros is immutable and that means that the operating system is read only.

41
0:03:03.480 --> 0:03:10.560
The user data of course can be written but if for some reason someone takes a hold of

42
0:03:10.560 --> 0:03:16.400
the machine they cannot install any packages, they cannot change any configuration.

43
0:03:16.400 --> 0:03:21.240
Even if they manage to do it as soon as the machine gets rebooted you still get the same

44
0:03:21.240 --> 0:03:25.600
original image that you used to have.

45
0:03:25.600 --> 0:03:31.560
If we go even a little bit deeper into that what does it mean that the OS is immutable

46
0:03:31.560 --> 0:03:39.600
because there are for example some cases where the root partition is immutable but some other

47
0:03:39.600 --> 0:03:41.480
areas are not.

48
0:03:41.480 --> 0:03:46.560
Kyros in this case is an image, we distribute it as an image as a whole.

49
0:03:46.560 --> 0:03:52.640
So that means that all the OS components including the kernel and the initRD they are all immutable.

50
0:03:52.640 --> 0:03:54.120
You cannot change it.

51
0:03:54.120 --> 0:04:00.760
initRD is not built at the moment of installation but it's already there when we ship it in

52
0:04:00.760 --> 0:04:04.080
the image.

53
0:04:04.080 --> 0:04:09.280
Let's see another interesting video of Kyros is that it's distribution agnostic or I guess

54
0:04:09.280 --> 0:04:14.600
better said is we are friendly to every other distribution.

55
0:04:14.600 --> 0:04:20.960
We don't want you to lose the distribution that you already like and love for some reason.

56
0:04:20.960 --> 0:04:25.680
It could be that you already have a big know how that you have built onto your distribution

57
0:04:25.680 --> 0:04:29.260
so you don't want to change to a different distribution.

58
0:04:29.260 --> 0:04:34.440
It could be that you already have a licensing that you're paying for a central company and

59
0:04:34.440 --> 0:04:40.400
you don't want to switch that because of costs or something else or it might just be that

60
0:04:40.400 --> 0:04:47.280
your operational team has decided on working on certain golden images and we don't want

61
0:04:47.280 --> 0:04:52.940
you to have to go away from any of these just because you want the goodies that Kyros can

62
0:04:52.940 --> 0:04:55.160
offer you.

63
0:04:55.160 --> 0:05:01.760
Right now Kyros can play well with OpenSUSE, Alpine, Fedora, Debian, Rocky Linux and Ubuntu

64
0:05:01.760 --> 0:05:06.800
and we're trying to add more different distributions on top of that.

65
0:05:06.800 --> 0:05:11.120
Another interesting thing that Kyros does is it tries to be really easy to configure

66
0:05:11.120 --> 0:05:13.240
and maintain.

67
0:05:13.240 --> 0:05:19.960
For that what we do is that we have YAML where you can define the way you want your

68
0:05:19.960 --> 0:05:21.760
system to look.

69
0:05:21.760 --> 0:05:27.320
In this case for example I am creating a user called Kyros with the password Kyros.

70
0:05:27.320 --> 0:05:35.800
I want SSH keys, I want to go and grab from the user modeler his public SSH key and I

71
0:05:35.800 --> 0:05:41.640
also want to put this particular SSH key in text that I want inside of the system.

72
0:05:41.640 --> 0:05:45.280
I also want for example in this case K3S enabled.

73
0:05:45.280 --> 0:05:51.600
As you can see it's very easy to use, it's very easy to keep version inside your Git

74
0:05:51.600 --> 0:05:58.160
repositories so you don't have to break the current flow that you already have if you're

75
0:05:58.160 --> 0:06:02.840
already doing DevOps.

76
0:06:02.840 --> 0:06:07.060
Like I'm saying we want to make it really easy to configure and maintain.

77
0:06:07.060 --> 0:06:13.400
We provide new web UI that was just introduced in version 1.5 for Kyros where you can take

78
0:06:13.400 --> 0:06:19.080
that configuration that I was showing you, you go to a certain node so you look for the

79
0:06:19.080 --> 0:06:21.040
IP of the node.

80
0:06:21.040 --> 0:06:25.440
This is the node has just been booted, there's nothing else running in it, there's no installation

81
0:06:25.440 --> 0:06:26.440
yet in it.

82
0:06:26.440 --> 0:06:30.560
You just go to the IP of the node, you paste that configuration that you want, you say

83
0:06:30.560 --> 0:06:37.200
install and the node gets installed the way you requested.

84
0:06:37.200 --> 0:06:42.280
We want to make Kyros easy to configure and maintain but when you have a machine at the

85
0:06:42.280 --> 0:06:48.720
edge that might sometimes mean that you don't have the person that is in charge of doing

86
0:06:48.720 --> 0:06:52.160
the configuration there physically.

87
0:06:52.160 --> 0:06:59.520
Sometimes you have someone who is maybe not technically that savvy to do the work or that

88
0:06:59.520 --> 0:07:02.000
for some reason you don't have the trust of that.

89
0:07:02.000 --> 0:07:05.680
It could be in this case the manager of the store let's say.

90
0:07:05.680 --> 0:07:10.800
For that what we provide is that Kyros will present itself on installation with a QR code

91
0:07:10.800 --> 0:07:16.000
and then all they need to do is send a picture of that QR code and then whoever is doing

92
0:07:16.000 --> 0:07:22.760
the installation or the configuration can use a command line and then take the configuration

93
0:07:22.760 --> 0:07:29.800
in YAML and also pass the image with the QR code and Kyros will be doing the configuration

94
0:07:29.800 --> 0:07:32.680
itself.

95
0:07:32.680 --> 0:07:33.680
What else?

96
0:07:33.680 --> 0:07:37.520
So, Kyros also performs AV upgrades, what does this mean?

97
0:07:37.520 --> 0:07:42.120
Like I was telling you Kyros is distributed as a full image so whenever we are doing an

98
0:07:42.120 --> 0:07:45.240
upgrade we switch the image completely.

99
0:07:45.240 --> 0:07:49.720
So whatever image you have on active mode that is being run on the system right now

100
0:07:49.720 --> 0:07:55.920
we download the new image for the upgrade and then after we boot we do a transition

101
0:07:55.920 --> 0:07:59.480
in which the new image becomes the active one.

102
0:07:59.480 --> 0:08:04.280
That is helpful because if for some reason we cannot really start that new image there

103
0:08:04.280 --> 0:08:09.000
is still your old version of the OS that can still run, right?

104
0:08:09.000 --> 0:08:15.800
So it's a little bit more reliable we could say.

105
0:08:15.800 --> 0:08:22.480
Of course things can go bad and even if you have your two versions of the OS you could

106
0:08:22.480 --> 0:08:29.120
still screw things up and for that we also provide a recovery partition also in this

107
0:08:29.120 --> 0:08:34.720
OS part which is immutable that you can access to so that you can do manually whatever fixes

108
0:08:34.720 --> 0:08:39.840
you might need to do to one of those two partitions.

109
0:08:39.840 --> 0:08:47.240
Another goodie that Kyros provides is it has TPM encryption so nowadays a lot of machines

110
0:08:47.240 --> 0:08:53.560
or IoT devices comes with another chip generally which can do TPM encryption.

111
0:08:53.560 --> 0:09:01.880
This is useful because you can imagine it's just like having a UB key or I don't know

112
0:09:01.880 --> 0:09:07.280
there are other providers right now inside of your system and that way you can trust

113
0:09:07.280 --> 0:09:13.960
that only this machine for example is the one that is going to be able to un-encrypt

114
0:09:13.960 --> 0:09:15.480
the data of the user.

115
0:09:15.480 --> 0:09:20.000
This is useful because like I was saying if you are at the edge of the network if for

116
0:09:20.000 --> 0:09:24.960
some reason someone steals your hard drive and they put it into some other machine they

117
0:09:24.960 --> 0:09:30.720
are not able to un-encrypt it because they don't have that chip on their machine.

118
0:09:30.720 --> 0:09:37.400
There are multiple facets in which TPM encryption can work I'm not going to detail all of them.

119
0:09:37.400 --> 0:09:41.800
I think if you're interested in that you should check there was a talk yesterday by

120
0:09:41.800 --> 0:09:51.600
Leonard Pottering about TPM encryption was very interesting but it can get a lot more

121
0:09:51.600 --> 0:09:52.760
complex we could say.

122
0:09:52.760 --> 0:09:58.680
You could even say for example that not only you need the machine so the chip with your

123
0:09:58.680 --> 0:10:04.400
data but you also need a Kubernetes approval in order to do that.

124
0:10:04.400 --> 0:10:10.520
It will really depend on your model of security that you want to have of course.

125
0:10:10.520 --> 0:10:16.320
If you put all of these things together we believe that Kairos makes it a great distribution

126
0:10:16.320 --> 0:10:20.400
to be wrong at the edge.

127
0:10:20.400 --> 0:10:28.680
What I wanted to tell you about is now how do we build that kind of distribution ourselves

128
0:10:28.680 --> 0:10:33.400
and for that we use something that we call the Kairos factory and just to give you an

129
0:10:33.400 --> 0:10:39.360
idea of how this works we start by having Linux container images that are provided by

130
0:10:39.360 --> 0:10:41.280
the distributions.

131
0:10:41.280 --> 0:10:46.960
We base our work on the amazing work that the distributions are doing of course.

132
0:10:46.960 --> 0:10:48.800
We don't want to reinvent the wheel.

133
0:10:48.800 --> 0:10:54.560
When we take that container image we pass it through the Kairos factory and as a result

134
0:10:54.560 --> 0:10:57.880
what is at the end is what we call the Kairos images.

135
0:10:57.880 --> 0:11:00.760
Right now we offer two different types.

136
0:11:00.760 --> 0:11:04.720
One is the Kairos core which provides the immutability.

137
0:11:04.720 --> 0:11:10.400
It has an agent which can be used for upgrades for installation and many other things.

138
0:11:10.400 --> 0:11:16.000
It comes with the kernel and the initrd like I was mentioning and we also provide what

139
0:11:16.000 --> 0:11:21.200
is called the Kairos standard which brings everything from the Kairos core but on top

140
0:11:21.200 --> 0:11:29.840
we also add K3S Kubernetes flavor and also Hbpn uses it for peer to peer networking and

141
0:11:29.840 --> 0:11:33.360
Bpn and other things.

142
0:11:33.360 --> 0:11:35.920
The way you consume these ones is we have releases.

143
0:11:35.920 --> 0:11:41.360
If you go to our GitHub page you can download for example an ISO and you can install this

144
0:11:41.360 --> 0:11:47.680
in bare metal or we also have in our docs we have all the different distributions that

145
0:11:47.680 --> 0:11:56.000
we support and links to the OCI images, the container images which you can use for upgrades.

146
0:11:56.000 --> 0:12:01.080
Not only you can use those for upgrades but you can also use them for customization and

147
0:12:01.080 --> 0:12:05.880
this is where I guess it gets most interesting to the people who are going to be using Kairos

148
0:12:05.880 --> 0:12:13.000
at the edge because it's very simple to extend the image that we provide you.

149
0:12:13.000 --> 0:12:19.040
If you're already using Docker which is probably the case if you're used to using Docker files

150
0:12:19.040 --> 0:12:25.280
which is probably the case if you're using Kubernetes well you don't have to learn anything

151
0:12:25.280 --> 0:12:26.280
new.

152
0:12:26.280 --> 0:12:33.640
All you have to do is say the front part you use our image and then you do whatever you

153
0:12:33.640 --> 0:12:34.640
want to do.

154
0:12:34.640 --> 0:12:40.480
For example I'm installing the application figlet and then I just have to tag the version

155
0:12:40.480 --> 0:12:48.120
of the OS that I want to distribute then you can have whatever release cadence of your

156
0:12:48.120 --> 0:12:53.000
own that you might want to have.

157
0:12:53.000 --> 0:12:57.360
Now you might tell me okay that sounds good but maybe I want something a lot more complex

158
0:12:57.360 --> 0:13:02.680
maybe I want to do a release like the way you guys do Kairos standard no problem we

159
0:13:02.680 --> 0:13:08.200
also provide we also have this thing called providers in which we allow you to do a lot

160
0:13:08.200 --> 0:13:13.320
more complex things on the Kairos machine that you are building that's exactly how we

161
0:13:13.320 --> 0:13:19.240
do the Kairos standard that's how we put K3S and HVPN in it and you can basically just

162
0:13:19.240 --> 0:13:25.320
start from any of the ones that we have and build your own.

163
0:13:25.320 --> 0:13:31.120
So that's pretty much the process that I was explaining let me talk a little bit about

164
0:13:31.120 --> 0:13:38.160
the challenges of starting with the different distributions all over.

165
0:13:38.160 --> 0:13:43.880
First of all it's not so easy with the packages because some distributions come with certain

166
0:13:43.880 --> 0:13:48.200
packages some with others sometimes they are named differently sometimes they come in different

167
0:13:48.200 --> 0:13:49.720
versions.

168
0:13:49.720 --> 0:13:55.020
Another problem is that the base configuration is not the same in all the distributions.

169
0:13:55.020 --> 0:14:03.720
So for example we recently had a bug related to QR codes not being easily displayed because

170
0:14:03.720 --> 0:14:07.200
the configuration in Ubuntu was a little bit different.

171
0:14:07.200 --> 0:14:12.240
Another thing that is quite different is the init system right now we only support system

172
0:14:12.240 --> 0:14:19.680
D because it's basically the most mainstream one I would say on the mainstream distributions

173
0:14:19.680 --> 0:14:22.200
and open RC.

174
0:14:22.200 --> 0:14:27.560
That's problematic because we have to maintain two different flows of code right just for

175
0:14:27.560 --> 0:14:36.160
these two systems but it is what it is and we also have issues with the C standard library

176
0:14:36.160 --> 0:14:43.800
like for most distributions that we consume right now they come with the GLib C but there

177
0:14:43.800 --> 0:14:48.920
are distributions like Alpine that comes with Mosul and that makes it a little bit challenging

178
0:14:48.920 --> 0:14:58.440
for those distributions we cannot provide a kernel or init RD from that particular distribution

179
0:14:58.440 --> 0:15:04.320
so if you check for example the image that we put out there for Alpine it will have open

180
0:15:04.320 --> 0:15:14.880
source kernel or an Ubuntu kernel because we need to be able to build it somehow.

181
0:15:14.880 --> 0:15:19.000
So let's dig a little bit deeper now that we know the challenges that we have how do

182
0:15:19.000 --> 0:15:24.760
we try to address them well again starting from a Docker file we in that first from that

183
0:15:24.760 --> 0:15:31.160
you see on the left we put the distribution image so let's say open source is tumbled

184
0:15:31.160 --> 0:15:39.280
with latest and then after that we install certain packages that way we cannot base out

185
0:15:39.280 --> 0:15:42.520
all the different distributions that we have out there so if there are some packages that

186
0:15:42.520 --> 0:15:47.200
are not there in open source we install them or if it's in Ubuntu we install them so that

187
0:15:47.200 --> 0:15:51.800
they are kind of balanced out so that we can do everything that we need to do and we also

188
0:15:51.800 --> 0:15:58.200
do a little bit of system configuration mainly it is about ensuring that certain init processes

189
0:15:58.200 --> 0:16:01.360
get started properly.

190
0:16:01.360 --> 0:16:09.000
Then the result of that we put into container image one thing I want to mention is that

191
0:16:09.000 --> 0:16:15.240
we are agnostic we use any OCI building engine if you're using Docker great if you want to

192
0:16:15.240 --> 0:16:25.040
use spotman great whatever works for you right but yeah we start building that new image

193
0:16:25.040 --> 0:16:32.760
then we install Kyros binaries this can be for example the agent the agent is used for

194
0:16:32.760 --> 0:16:39.640
installation for upgrades and other things we then install Kyros packages this is different

195
0:16:39.640 --> 0:16:44.160
from the distribution packages this is packages that are specific for Kyros they are mainly

196
0:16:44.160 --> 0:16:54.360
for tooling and the really cool thing there is that they are completely agnostic

197
0:16:54.360 --> 0:17:02.760
the OCI building engine so that means that we can be building fedora image and we can

198
0:17:02.760 --> 0:17:09.560
be using packages from open source and Ubuntu at the same time to do this I personally find

199
0:17:09.560 --> 0:17:15.960
that really cool and then after that we do certain system configuration this can be about

200
0:17:15.960 --> 0:17:23.040
how we're going to for example mount the different systems in the disk and stuff like that the

201
0:17:23.040 --> 0:17:29.360
result of it is going to be a container image an OCI image that you can download for like

202
0:17:29.360 --> 0:17:34.920
I was saying because you might want to do certain configuration on top of it you can

203
0:17:34.920 --> 0:17:41.320
use it also for doing upgrades or we pass it through something that we call the OS builder

204
0:17:41.320 --> 0:17:47.280
which will convert that OCI image into an image that you can actually boot and you know

205
0:17:47.280 --> 0:17:58.400
you burn it into a USB and you can put it into hardware or netbooted and of course all

206
0:17:58.400 --> 0:18:05.240
of these changes are prone to issues to errors to breaking things to avoid having that kind

207
0:18:05.240 --> 0:18:13.120
of situation we have a CI system that is ensuring that we can build every one of those distributions

208
0:18:13.120 --> 0:18:20.760
if something fails there we go and fix it before it can be released and once every image

209
0:18:20.760 --> 0:18:27.760
has been built we run a certain acceptance criteria tests like I don't know we're sure

210
0:18:27.760 --> 0:18:34.400
that we can do an upgrade we're sure that we can do an installation of kyros etc etc

211
0:18:34.400 --> 0:18:42.480
yeah and well putting it all together that's how you can have a really nice secure distribution

212
0:18:42.480 --> 0:18:49.720
running at the edge of your network talking to your Kubernetes cluster so if you're interested

213
0:18:49.720 --> 0:18:57.120
into testing it out please you can go to our website there's a lot of documentation there

214
0:18:57.120 --> 0:19:01.360
you can download the different releases try it out you can try it out on your raspberry

215
0:19:01.360 --> 0:19:09.880
pi it's quite fun to do you can talk to us via matrix github discussions and we have

216
0:19:09.880 --> 0:19:16.240
even office hours so every Wednesday 5 30 p.m. European time you can chat to us if you

217
0:19:16.240 --> 0:19:23.120
want and that's all I have for you today if you have any questions please let me know

218
0:19:23.120 --> 0:19:40.560
or by the end if you have any interested in stickers please come and grab one or more


1
0:00:00.000 --> 0:00:01.000
Hi.

2
0:00:01.000 --> 0:00:02.000
Hi, everybody.

3
0:00:02.000 --> 0:00:03.000
Yes.

4
0:00:03.000 --> 0:00:14.720
So, talking about debug packages and distributing debug packages.

5
0:00:14.720 --> 0:00:17.280
So, my name is Morten Lindreu.

6
0:00:17.280 --> 0:00:19.600
I go by the nickname of Foxburn on the internet.

7
0:00:19.600 --> 0:00:23.520
I have been a contributor to the Arch Linux distribution since 2016.

8
0:00:23.520 --> 0:00:28.720
I've been doing sort of open source development since, I don't know, 2013.

9
0:00:28.720 --> 0:00:31.480
I do sort of security teamwork, rep-use-builds.

10
0:00:31.480 --> 0:00:35.200
My care is sort of about usable security, supply chain security, and all of that stuff.

11
0:00:35.200 --> 0:00:38.760
And a lot of secure boots.

12
0:00:38.760 --> 0:00:42.720
But today I'm going to sort of talk about what I've been spending over two years of

13
0:00:42.720 --> 0:00:47.400
my life working on, which is debug packages in Arch Linux.

14
0:00:47.400 --> 0:00:48.400
So in...

15
0:00:48.400 --> 0:00:51.320
Let's scale this correctly.

16
0:00:51.320 --> 0:00:53.840
So one of the sort of...

17
0:00:53.840 --> 0:00:59.240
Especially when you sort of get some crashes at some point, you will see this fancy little

18
0:00:59.240 --> 0:01:01.120
sack trace.

19
0:01:01.120 --> 0:01:09.280
And if you use system D, you will at some point have the crash handlers getting you

20
0:01:09.280 --> 0:01:12.000
about seg volts, which happens.

21
0:01:12.000 --> 0:01:17.040
And then you can sort of just debug this with GDB.

22
0:01:17.040 --> 0:01:20.760
And if you do look at the back trace, you just see nonsense.

23
0:01:20.760 --> 0:01:23.320
There's nothing here that makes sense at all.

24
0:01:23.320 --> 0:01:24.440
You can't figure out what happened.

25
0:01:24.440 --> 0:01:25.440
You don't know what crashed.

26
0:01:25.440 --> 0:01:27.720
And you have no idea.

27
0:01:27.720 --> 0:01:33.240
So if you actually do this on an Arch Linux system today, what you'll actually see is

28
0:01:33.240 --> 0:01:35.320
not that nonsense back trace.

29
0:01:35.320 --> 0:01:37.320
You'll instead see...

30
0:01:37.320 --> 0:01:38.320
No.

31
0:01:38.320 --> 0:01:44.680
Let's cross Y.

32
0:01:44.680 --> 0:01:47.680
And you'll instead get this, which has a lot more information.

33
0:01:47.680 --> 0:01:49.720
You'll see what happened, what crashed it.

34
0:01:49.720 --> 0:01:50.720
You'll get all the symbols.

35
0:01:50.720 --> 0:01:51.720
And you did nothing.

36
0:01:51.720 --> 0:01:53.680
You did not download any debug packages.

37
0:01:53.680 --> 0:01:54.680
You didn't think about it.

38
0:01:54.680 --> 0:01:57.120
It just happens behind the scenes.

39
0:01:57.120 --> 0:02:04.040
And if we ask what actually happened, you see that there's some internal syscall that

40
0:02:04.040 --> 0:02:05.520
crashed it.

41
0:02:05.520 --> 0:02:06.520
So this is super nice.

42
0:02:06.520 --> 0:02:11.920
This is a lot better than sort of what the D-Bring experience has been on Arch Linux previously.

43
0:02:11.920 --> 0:02:16.280
And it took me, I don't know, three years, two and a half years, implementing a little

44
0:02:16.280 --> 0:02:17.840
bit on and off.

45
0:02:17.840 --> 0:02:20.760
So why do we care about debug packages?

46
0:02:20.760 --> 0:02:26.080
So if we, for instance, have Pacman, which is a fairly simple and small binary, it's

47
0:02:26.080 --> 0:02:30.240
like half a meg of size if you build it.

48
0:02:30.240 --> 0:02:36.160
But if you strip away all the debug information, you can almost half the size, which is nice.

49
0:02:36.160 --> 0:02:40.240
So if you don't need all of that information on your disk, it's nice to sort of have some

50
0:02:40.240 --> 0:02:41.960
space savings.

51
0:02:41.960 --> 0:02:46.480
And in more extreme cases, like in keypad, had some sole name inside of Python.

52
0:02:46.480 --> 0:02:48.360
It's like half a gig.

53
0:02:48.360 --> 0:02:53.560
And if you strip away the debug information, it's 33 megabytes.

54
0:02:53.560 --> 0:02:58.280
It's sort of nice to have the opportunity to still sort of debug all of this.

55
0:02:58.280 --> 0:03:03.520
And this can all be sort of very large.

56
0:03:03.520 --> 0:03:08.200
So what people do instead is that GDB implements what we call detached debug symbols.

57
0:03:08.200 --> 0:03:12.440
And that allows us to sort of separate out the debug symbols from the binaries and sort

58
0:03:12.440 --> 0:03:16.160
of relink it together on the system.

59
0:03:16.160 --> 0:03:21.080
And one of the sort of key elements for this is this fancy little build ID which gets stamped

60
0:03:21.080 --> 0:03:24.080
into every binary on your system.

61
0:03:24.080 --> 0:03:29.560
And we use that to sort of link, we define the build ID.

62
0:03:29.560 --> 0:03:32.480
We can make some standard directory on your system.

63
0:03:32.480 --> 0:03:40.200
We can split out the debug symbols from the binary, move it to that directory, add some

64
0:03:40.200 --> 0:03:43.120
debug link to the binary, and everything just works.

65
0:03:43.120 --> 0:03:47.560
It will be as if the binary was as the debug sections were still on the binaries.

66
0:03:47.560 --> 0:03:48.560
And this is nice.

67
0:03:48.560 --> 0:03:55.040
And this is sort of what Debian, Ubuntu, Fedora, all of them do to make those debug packages.

68
0:03:55.040 --> 0:03:56.120
And that's nice.

69
0:03:56.120 --> 0:04:01.280
But one of the things that you saw in the demonstration is that you also have the source

70
0:04:01.280 --> 0:04:03.160
code of the binaries.

71
0:04:03.160 --> 0:04:08.160
And that's more of a hack which some distributions have support for and some distribution doesn't

72
0:04:08.160 --> 0:04:09.160
support.

73
0:04:09.160 --> 0:04:13.960
And then Ubuntu does not have source listings, I believe, while Fedora, SUSE, and now Arch

74
0:04:13.960 --> 0:04:17.440
as well has source listings.

75
0:04:17.440 --> 0:04:21.200
And the way this sort of works is sort of you do a little bit of hacking.

76
0:04:21.200 --> 0:04:27.040
So if we build Pacman just normally and we run gdb on it and we ask what the sources

77
0:04:27.040 --> 0:04:32.200
were, you'll have your embedded project path in those binaries.

78
0:04:32.200 --> 0:04:37.000
So what you can do then instead is to use debug edit.

79
0:04:37.000 --> 0:04:41.600
Historically, this has been part of the RPM upstream.

80
0:04:41.600 --> 0:04:47.160
So Pacman didn't want to have a dependency on RPM to support debug packages, which is

81
0:04:47.160 --> 0:04:48.160
a bit weird.

82
0:04:48.160 --> 0:04:52.440
But this was split out now in a separate project back in 2001.

83
0:04:52.440 --> 0:04:55.400
No, yeah, 2021.

84
0:04:55.400 --> 0:04:59.400
Which is now separate project which is quite nice and it makes more sort of accessible

85
0:04:59.400 --> 0:05:02.240
for other package managers.

86
0:05:02.240 --> 0:05:06.980
So instead of sort of using the current working directory to embed stuff, we can rewrite all

87
0:05:06.980 --> 0:05:12.440
of those paths inside the binary to some standard path on the file system.

88
0:05:12.440 --> 0:05:18.040
So in Arch we use source debug and we do them spacing so we can have sources from multiple

89
0:05:18.040 --> 0:05:21.240
versions of Pacman.

90
0:05:21.240 --> 0:05:27.120
And if you sort of do this dance, you'll have rewritten all of those source listings which

91
0:05:27.120 --> 0:05:29.680
is part of the binary.

92
0:05:29.680 --> 0:05:30.680
Which is super nice.

93
0:05:30.680 --> 0:05:34.760
And then you can sort of get all the source code associated with binary.

94
0:05:34.760 --> 0:05:43.560
So before debug edit was available as a sort of normal thing, Pacman also had support for

95
0:05:43.560 --> 0:05:44.560
source listings.

96
0:05:44.560 --> 0:05:45.920
But he didn't use debug edit.

97
0:05:45.920 --> 0:05:48.640
He decided to use awk instead.

98
0:05:48.640 --> 0:05:54.360
So it then tried to parse out all of the file paths, I don't know, from read-off, try to

99
0:05:54.360 --> 0:05:57.320
figure out whatever was there and sort of try to get it out.

100
0:05:57.320 --> 0:06:00.400
And this worked for like simple C programs.

101
0:06:00.400 --> 0:06:05.680
But if you threw like Rust or Go at it, it had no clue what that was at all.

102
0:06:05.680 --> 0:06:08.200
So it was a hack.

103
0:06:08.200 --> 0:06:09.200
It worked.

104
0:06:09.200 --> 0:06:12.120
It was in the source code for six years maybe.

105
0:06:12.120 --> 0:06:15.440
So I ripped that out last year.

106
0:06:15.440 --> 0:06:18.880
So this, yes.

107
0:06:18.880 --> 0:06:24.000
So when these packages get built and you have the debug symbols and have all the source

108
0:06:24.000 --> 0:06:31.160
listings, we can then sort of compile all this to some package and then distribute it

109
0:06:31.160 --> 0:06:33.000
to our distributions.

110
0:06:33.000 --> 0:06:40.560
So all our packages in Arch Linux goes to this repo.arch.org, which is the tier zero mirror.

111
0:06:40.560 --> 0:06:44.440
That's where all the packages get distributed from to all our mirrors.

112
0:06:44.440 --> 0:06:46.640
And on this there's two package pools.

113
0:06:46.640 --> 0:06:48.160
There is from Corn Extra.

114
0:06:48.160 --> 0:06:51.280
There's a package just fash debug pool.

115
0:06:51.280 --> 0:06:59.200
And for community, there's a big community debug packages.

116
0:06:59.200 --> 0:07:02.560
But these are done, it can be fetched and distributed to all mirrors.

117
0:07:02.560 --> 0:07:07.040
But it's a huge amount of packages.

118
0:07:07.040 --> 0:07:10.680
So what we do instead is that we are syncing over this to something called a debug info

119
0:07:10.680 --> 0:07:18.160
instance we have, which allows us to fetch everything of HTTP instead.

120
0:07:18.160 --> 0:07:25.880
So debug info is a very cool microservice which is capable of getting you the source code

121
0:07:25.880 --> 0:07:28.240
and the symbols from binaries over HTTP.

122
0:07:28.240 --> 0:07:32.640
So you don't have to think about which debug packages do you need, which ones you have

123
0:07:32.640 --> 0:07:34.960
to download to get full back trace.

124
0:07:34.960 --> 0:07:40.080
You can just point gdb at this instance and it will just fetch everything for us, which

125
0:07:40.080 --> 0:07:42.880
is quite nice.

126
0:07:42.880 --> 0:07:46.560
So it's written, maintained by ELF, utils maintainers.

127
0:07:46.560 --> 0:07:51.160
Use a web server in C in the year 2020.

128
0:07:51.160 --> 0:07:55.840
So it's running on like I think a few distributions like I think void Linux has one, Debian has

129
0:07:55.840 --> 0:08:00.600
one, Debian and Ubuntu got one past six months.

130
0:08:00.600 --> 0:08:05.880
And there's Fedora and SUSE also has several of these.

131
0:08:05.880 --> 0:08:07.920
So it's super simple.

132
0:08:07.920 --> 0:08:10.200
We can just use the debug info.

133
0:08:10.200 --> 0:08:15.840
We can give it that this is on tar archives that you want to parse and give it a package

134
0:08:15.840 --> 0:08:21.800
for and we just set the debug info URLs variable and then we can run gdb on the binaries and

135
0:08:21.800 --> 0:08:22.800
it works.

136
0:08:22.800 --> 0:08:28.120
That's all you have to do to sort of make gdb read those files instead of having to distribute

137
0:08:28.120 --> 0:08:30.200
them.

138
0:08:30.200 --> 0:08:31.560
So yes.

139
0:08:31.560 --> 0:08:37.360
And then you can have this debug info find command line thing to fetch stuff for you or

140
0:08:37.360 --> 0:08:41.240
you can use it as a library instead.

141
0:08:41.240 --> 0:08:49.720
But yeah, so running a web server in C in 2020 is a little bit iffy.

142
0:08:49.720 --> 0:08:58.360
So we sort of wrote this in sort of system hardener system def file so if something gets

143
0:08:58.360 --> 0:09:02.960
exploited or something happening in that C code, you never know.

144
0:09:02.960 --> 0:09:06.960
It still sort of only really contained to some fairly restrictive set of policies.

145
0:09:06.960 --> 0:09:11.920
So you can't ask for privileges, you can't write anything to the system, but you can

146
0:09:11.920 --> 0:09:16.960
sort of just read stuff, which is quite nice.

147
0:09:16.960 --> 0:09:23.160
So the only really two paths it has access to in production system is just these two

148
0:09:23.160 --> 0:09:28.960
package pools and some cache directory and that's everything it sees.

149
0:09:28.960 --> 0:09:30.960
So that's fairly quite nice.

150
0:09:30.960 --> 0:09:35.520
Been planning to upstream it and I think you've bumped to and Debian uses this as well but

151
0:09:35.520 --> 0:09:41.200
I'm upstreamed it properly yet, sadly.

152
0:09:41.200 --> 0:09:49.160
So you know, we have debug packages, we distribute it, people can use them, but we can also parse

153
0:09:49.160 --> 0:09:53.580
metrics from people accessing this server.

154
0:09:53.580 --> 0:09:55.760
So I spent a little bit of time.

155
0:09:55.760 --> 0:09:59.680
I'm quite sure how this renders.

156
0:09:59.680 --> 0:10:10.040
Yeah, okay, it does not like that at all.

157
0:10:10.040 --> 0:10:12.040
No.

158
0:10:12.040 --> 0:10:14.040
What?

159
0:10:14.040 --> 0:10:25.160
I can't zoom out.

160
0:10:25.160 --> 0:10:31.080
I hate this.

161
0:10:31.080 --> 0:10:37.720
So what you sort of see here is just some basic statistics.

162
0:10:37.720 --> 0:10:43.640
So what people have been doing on it, we enabled debug packages for all our packages fairly

163
0:10:43.640 --> 0:10:44.640
recently this year.

164
0:10:44.640 --> 0:10:48.960
So that's why I see the biggest corpus spike going straight up because we have more symbols

165
0:10:48.960 --> 0:10:49.960
now.

166
0:10:49.960 --> 0:10:55.520
We also see that we reached two terabytes of data being sent out to different users the

167
0:10:55.520 --> 0:10:56.520
past month.

168
0:10:56.520 --> 0:10:59.000
So that's the last 30 days with two terabytes out.

169
0:10:59.000 --> 0:11:04.480
And I can see some statistics on how much data people are fetching, the errors, some

170
0:11:04.480 --> 0:11:05.480
through-bout statistics.

171
0:11:05.480 --> 0:11:07.480
And it's sort of quite nice.

172
0:11:07.480 --> 0:11:13.200
And you sort of get this one free from hosting it.

173
0:11:13.200 --> 0:11:17.000
Yes.

174
0:11:17.000 --> 0:11:23.000
So all of this infrastructure that we put up in Arch, of course, is all open source.

175
0:11:23.000 --> 0:11:24.960
There's no proprietary infrastructure.

176
0:11:24.960 --> 0:11:26.600
There's no hidden files.

177
0:11:26.600 --> 0:11:31.720
So all the stuff we use to distribute debug info is all in our infrastructure repository

178
0:11:31.720 --> 0:11:33.040
under the rules of debug info.

179
0:11:33.040 --> 0:11:39.680
That's sort of how we fetch all of the packages, how we do the service management stuff, and

180
0:11:39.680 --> 0:11:43.360
all of those things.

181
0:11:43.360 --> 0:11:44.860
Yes.

182
0:11:44.860 --> 0:11:49.680
So probably have more time.

183
0:11:49.680 --> 0:11:55.160
So one of the things I also did because, you know, debug packages is usually done on C

184
0:11:55.160 --> 0:12:00.120
applications and stuff, but I don't actually know C. I do Python and Go instead.

185
0:12:00.120 --> 0:12:04.840
So what I also spent a lot of time on doing is to sort of try to get better debug info

186
0:12:04.840 --> 0:12:08.580
support in Go because that's cool.

187
0:12:08.580 --> 0:12:14.720
So here, just to sort of give an example, here we're going to crash the tail scale SSH

188
0:12:14.720 --> 0:12:18.760
client because that's a nice example, I think.

189
0:12:18.760 --> 0:12:22.600
So this instructs the Go compiler to actually give us a core dump.

190
0:12:22.600 --> 0:12:28.760
And then we can use the Delve debugger in Go.

191
0:12:28.760 --> 0:12:34.080
And it actually, with a few patches, is able to read out all the debug symbols, all of

192
0:12:34.080 --> 0:12:38.520
the source code, which is fetched from the debug info server as well, which is quite

193
0:12:38.520 --> 0:12:45.400
nice as it will give us the more opportunities to sort of debug Go applications.

194
0:12:45.400 --> 0:12:46.400
It also works on Rust.

195
0:12:46.400 --> 0:12:51.400
It also works on Julia and whatever sort of programming languages you want, which is quite

196
0:12:51.400 --> 0:12:52.400
nice.

197
0:12:52.400 --> 0:12:57.160
So it's sort of an improvement for the entire ecosystem as well.

198
0:12:57.160 --> 0:12:58.160
Yes.

199
0:12:58.160 --> 0:13:01.160
That was it.

200
0:13:01.160 --> 0:13:14.360
I probably have a lot of time for questions if anybody has any of anything.

201
0:13:14.360 --> 0:13:27.360
There's a question there.

202
0:13:27.360 --> 0:13:31.840
So I'm wondering what you actually store for the source.

203
0:13:31.840 --> 0:13:40.080
Is it the build tree or are you trying to remove some things to save storage?

204
0:13:40.080 --> 0:13:44.160
Because I mean, you have like a package, you have an upstream source, you have patches

205
0:13:44.160 --> 0:13:48.280
on top of the upstream source, and then maybe even the build process might generate sources

206
0:13:48.280 --> 0:13:50.320
itself.

207
0:13:50.320 --> 0:13:58.640
So I don't quite know how, but this is just a binary which sort of generates the source

208
0:13:58.640 --> 0:14:01.400
listing as part of the dwarf metadata, I think.

209
0:14:01.400 --> 0:14:05.680
So this is all the, there's some generated optimized out sources, I think, and there's

210
0:14:05.680 --> 0:14:09.640
some sort of things that points around to different sources.

211
0:14:09.640 --> 0:14:15.960
But it will mostly just be sort of the patched up generated done sources, which gets embedded

212
0:14:15.960 --> 0:14:16.960
there.

213
0:14:16.960 --> 0:14:21.440
So it's the source listing is a nice bonus, but it's not necessarily some would normally

214
0:14:21.440 --> 0:14:23.200
distributing with the binary.

215
0:14:23.200 --> 0:14:26.720
That answers the question.

216
0:14:26.720 --> 0:14:27.920
Yes.

217
0:14:27.920 --> 0:14:40.600
Any more questions?

218
0:14:40.600 --> 0:14:41.800
Thanks for using it.

219
0:14:41.800 --> 0:14:45.200
Could you upstream the system, the surface files?

220
0:14:45.200 --> 0:14:48.160
Yes, it's been on the to do list for a long time.

221
0:14:48.160 --> 0:14:51.120
It's a little bit problematic though, because you need to figure out sort of how the path

222
0:14:51.120 --> 0:14:54.960
paths and stuff needs to get into the service file with some configuration file, but it

223
0:14:54.960 --> 0:14:55.960
can probably be done.

224
0:14:55.960 --> 0:14:58.640
And I think that that people use it as well.

225
0:14:58.640 --> 0:15:02.640
So yes, it should be, it should be fit upstream.

226
0:15:02.640 --> 0:15:03.640
Yes.

227
0:15:03.640 --> 0:15:04.640
Yeah.

228
0:15:04.640 --> 0:15:13.680
So, and we normally hide the HTTP server behind the proxy.

229
0:15:13.680 --> 0:15:18.120
It's written in C++, if that helps.

230
0:15:18.120 --> 0:15:23.360
Yeah, no, yes, it's actually C++ is not C it's the other stuff that's mostly written

231
0:15:23.360 --> 0:15:24.360
in C, I think.

232
0:15:24.360 --> 0:15:25.360
Yeah.

233
0:15:25.360 --> 0:15:38.920
So it's a C++ program that uses lib micro HSPD and SQLite to store our data.

234
0:15:38.920 --> 0:15:44.360
So we have it behind the reverse proxy to sort of get the TLS configuration going and

235
0:15:44.360 --> 0:15:48.760
outside, but we also just wanted the hardening there because it just, it's easy with CSPD

236
0:15:48.760 --> 0:15:49.760
to just get the hardening there.

237
0:15:49.760 --> 0:15:51.760
It's just no reason to sort of knock.

238
0:15:51.760 --> 0:15:55.280
It's just quite nice, but I'll try to upstream it.

239
0:15:55.280 --> 0:15:56.280
Thanks.

240
0:15:56.280 --> 0:15:57.280
Yes.

241
0:15:57.280 --> 0:16:19.120
Are those statistics on your dashboard pulled from, uh, the HTTP server he was describing

242
0:16:19.120 --> 0:16:22.760
or those from like your engine X or whatever proxy you're using?

243
0:16:22.760 --> 0:16:24.320
What sorry.

244
0:16:24.320 --> 0:16:31.440
Are the statistics you had on your dashboard earlier, are those pulled from the backend

245
0:16:31.440 --> 0:16:33.680
or are they from like a proxy in front?

246
0:16:33.680 --> 0:16:37.860
So the debug info has a slash metrics, which is all promtail.

247
0:16:37.860 --> 0:16:42.000
So it just exports a bunch of metrics and you just pull point promtail Prometheus on

248
0:16:42.000 --> 0:16:43.560
it and it will just parse it.

249
0:16:43.560 --> 0:16:47.760
So that dashboard is something we made internally, which I just spent two weeks making.

250
0:16:47.760 --> 0:16:49.440
And that's also open source.

251
0:16:49.440 --> 0:16:53.400
So you can just fetch the adjacent file for the dashboard on the Grafama and everything

252
0:16:53.400 --> 0:16:54.800
there's all sort of open.

253
0:16:54.800 --> 0:16:59.880
So you can go look at it, but it's all, it's just this sort of flash metrics, uh, endpoint

254
0:16:59.880 --> 0:17:01.360
of debug info.

255
0:17:01.360 --> 0:17:06.080
So the red hat people, uh, actually watches this for all the debugging for the servers,

256
0:17:06.080 --> 0:17:09.960
uh, that has been employed and they can like look at the statistics and errors from all

257
0:17:09.960 --> 0:17:15.440
of different servers and see how, uh, the traffic between all of those are, uh, so how

258
0:17:15.440 --> 0:17:19.280
much is, how much is fedora distributing compared to arch and stuff, which is quite nice.

259
0:17:19.280 --> 0:17:21.160
Uh, but that, that was not public.

260
0:17:21.160 --> 0:17:22.160
I think.

261
0:17:22.160 --> 0:17:23.160
It's cool.

262
0:17:23.160 --> 0:17:24.160
Okay.

263
0:17:24.160 --> 0:17:42.680
Can you tell us a bit about, um, the requirements in terms of storage?

264
0:17:42.680 --> 0:17:46.720
Because I recently looked at another distribution and they didn't build all the packages because

265
0:17:46.720 --> 0:17:48.680
of lack of storage.

266
0:17:48.680 --> 0:17:54.080
Uh, so that's what I'm trying to figure out now because we, we enable debug symbols for

267
0:17:54.080 --> 0:17:57.480
all the packages, but they're not currently distributing it to our mirrors.

268
0:17:57.480 --> 0:18:03.120
So arch, the total mirror size for arch is like 60, 70, 80 gigabytes, I think, uh, of

269
0:18:03.120 --> 0:18:06.640
data, but I assume like that would be several hundreds.

270
0:18:06.640 --> 0:18:13.120
Uh, if we actually upload all the debug packages, but I think fedora in total is like three,

271
0:18:13.120 --> 0:18:14.640
four terabytes or something.

272
0:18:14.640 --> 0:18:21.080
Uh, so it's, it, it, I assume it will grow out inside, go inside three, four times and

273
0:18:21.080 --> 0:18:22.080
stuff.

274
0:18:22.080 --> 0:18:26.960
I know like the LLVM stuff takes like, is that two gigabytes package, I think with symbols

275
0:18:26.960 --> 0:18:32.120
and people try to optimize it a little bit so you get a better, uh, this fast to upload.

276
0:18:32.120 --> 0:18:35.840
So it's, it's, it's, uh, it's, it's yeah.

277
0:18:35.840 --> 0:18:40.120
The one sort of main issue with debug edit and sort of debug influence stuff is that

278
0:18:40.120 --> 0:18:45.800
you have a dwarf five has support for compressed sections, but debug edit does not understand

279
0:18:45.800 --> 0:18:47.000
the compressed sections.

280
0:18:47.000 --> 0:18:51.440
Uh, so you have to decompress the sections before you leave out the paths and there's

281
0:18:51.440 --> 0:18:54.320
no good way to sort of recompress everything again.

282
0:18:54.320 --> 0:19:00.160
So getting better support for sort of compressed, uh, dwarf info would sort of help, uh, fix

283
0:19:00.160 --> 0:19:05.760
a few of those sort of space requirements, I think, uh, on the mirrors.

284
0:19:05.760 --> 0:19:07.440
Can I ask another question?

285
0:19:07.440 --> 0:19:10.880
Is there work on data application instead of compression?

286
0:19:10.880 --> 0:19:15.200
Uh, because you have different version of packages as well.

287
0:19:15.200 --> 0:19:22.240
Uh, so it's not that relevant for us because we, we, we don't keep those, uh, versions

288
0:19:22.240 --> 0:19:25.060
and we don't really do Delta files, uh, on the packages.

289
0:19:25.060 --> 0:19:30.960
So on the arch side of things, I don't think that's really relevant for us, but, uh, I

290
0:19:30.960 --> 0:19:31.960
don't know.

291
0:19:31.960 --> 0:19:37.840
It's probably could probably be done at some, some level, at least like, uh, the door, uh,

292
0:19:37.840 --> 0:19:44.000
Debian that keeps multiple versions of the same package.

293
0:19:44.000 --> 0:19:54.000
Yes.

294
0:19:54.000 --> 0:20:09.800
Uh, small question for which architectures are you generating this, those debugging for

295
0:20:09.800 --> 0:20:10.800
binaries?

296
0:20:10.800 --> 0:20:15.480
Uh, so arch only really supports, uh, except the six, six to four.

297
0:20:15.480 --> 0:20:18.240
We don't really have any other architectures.

298
0:20:18.240 --> 0:20:24.040
So uh, but, but because we have, uh, the era, we have the 32 bit port and we have the ARM,

299
0:20:24.040 --> 0:20:28.200
uh, people and I think they're just pulling our packages and probably building the begin

300
0:20:28.200 --> 0:20:32.440
full for them, but arch itself is not really distributing anything else.

301
0:20:32.440 --> 0:20:46.160
Some x eight to six, six to four currently.

302
0:20:46.160 --> 0:20:48.800
So you mentioned different architectures.

303
0:20:48.800 --> 0:20:55.120
Do you know if there's plan to upstream that book in for D and in general risk five, because

304
0:20:55.120 --> 0:20:57.680
I know Felix Yan is working on this.

305
0:20:57.680 --> 0:20:58.680
Yes.

306
0:20:58.680 --> 0:21:01.600
I don't feel he's just working on it.

307
0:21:01.600 --> 0:21:05.840
Uh, we want to, this is more an arch thing, but we don't have built.

308
0:21:05.840 --> 0:21:08.180
We don't have traditional build farm server set up.

309
0:21:08.180 --> 0:21:12.560
So it's a bit hard for us to sort of do, uh, multiple architectures because one package

310
0:21:12.560 --> 0:21:16.960
maintainer has to build that package for each architecture.

311
0:21:16.960 --> 0:21:22.320
So currently want to have support more architectures and better support like, uh, six, like the

312
0:21:22.320 --> 0:21:28.320
V two, V three, V four versions of X that you see now supporting, uh, but you currently

313
0:21:28.320 --> 0:21:32.160
haven't really solved that in a good way currently.

314
0:21:32.160 --> 0:21:33.160
Okay.

315
0:21:33.160 --> 0:21:34.160
Thanks.

316
0:21:34.160 --> 0:21:51.000
Thank you.


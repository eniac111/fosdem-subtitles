WEBVTT

00:00.000 --> 00:09.160
So today we will talk about Trustful

00:09.160 --> 00:14.080
Free Platform Module Project.

00:14.080 --> 00:15.880
So hello, I'm Mache.

00:15.880 --> 00:19.040
I am currently Engineering Manager at 3M DEP.

00:19.040 --> 00:22.480
I'm an apostles contributor for several years.

00:22.480 --> 00:25.880
I'm interested in various stuff, build systems.

00:25.880 --> 00:29.520
I enjoy build-rebrosivity especially.

00:29.520 --> 00:32.880
I like embedded systems in general.

00:32.880 --> 00:36.440
I work to several layers with embedded Linux projects.

00:36.440 --> 00:42.200
Now I'm also working with some stuff with Cardboard.

00:42.200 --> 00:46.760
Also, security aspects is what I'm interested in.

00:46.760 --> 00:49.640
You can have some compact information on the slide

00:49.640 --> 00:52.800
if you want to reach me.

00:52.800 --> 00:54.800
Some of you already heard that.

00:54.800 --> 00:58.320
We are a free and deb, a parent-based company

00:58.320 --> 01:00.200
of various variants in the market.

01:00.200 --> 01:03.520
We work mostly in open-source firmware and embedded Linux

01:03.520 --> 01:04.020
areas.

01:06.640 --> 01:11.960
And we are a part of various organizations, various open

01:11.960 --> 01:16.200
source initiatives like Corebook Listener Service Providers

01:16.200 --> 01:17.360
or Reactor Participants.

01:20.600 --> 01:27.520
So to the agenda, so let's start with explaining

01:27.520 --> 01:35.120
what the TWPM project is, why we decided to start one.

01:35.120 --> 01:37.720
We'll talk some stuff about TPM modules.

01:40.440 --> 01:44.880
Then we'll explain how we started such project, what

01:44.880 --> 01:48.320
challenges do we expect, what roadmap we have,

01:48.320 --> 01:50.120
and what's the current state of the project.

01:53.680 --> 01:55.720
So trustful reverse trusted.

01:55.720 --> 02:00.440
So you probably know the trusted platform modules.

02:00.440 --> 02:05.160
So we came up with a trust world free platform module.

02:05.160 --> 02:09.400
So to indicate that the goal would

02:09.400 --> 02:13.480
be to make it a bit more trustworthy than it is today

02:13.480 --> 02:19.600
by providing the open-source firmware for that one.

02:19.600 --> 02:23.560
And the goal also would be to be compliant with the TCGPC client

02:23.560 --> 02:26.960
specification, which might be, in fact, quite difficult

02:26.960 --> 02:28.600
or maybe even impossible.

02:28.600 --> 02:29.200
We'll see.

02:29.200 --> 02:30.520
We will discuss also that later.

02:33.120 --> 02:35.440
But yeah, that's the goal.

02:35.440 --> 02:41.320
The project is funded by the internet, by NGI Azure Fund.

02:44.800 --> 02:49.240
So why we came up with the idea?

02:49.240 --> 02:54.360
The traditional TPMs are dedicated microcontrollers.

02:54.360 --> 03:00.120
And not typically, they always have proprietary firmware,

03:00.120 --> 03:05.200
which can be easily audited, at least not by regular users,

03:05.200 --> 03:09.280
maybe by some governance, maybe.

03:12.520 --> 03:15.400
If there are bugs, they might not

03:15.400 --> 03:19.680
be fixed depending on what the vendor is planning for,

03:19.680 --> 03:24.760
site line TPM module, TPM chip.

03:24.760 --> 03:27.800
There are also capabilities which

03:27.800 --> 03:29.360
might be limited in some cases.

03:29.360 --> 03:31.960
And if there is no firmware update from vendor,

03:31.960 --> 03:36.160
they might not be modified by a user.

03:36.160 --> 03:40.200
There are also several different interfaces,

03:40.200 --> 03:45.640
LPC, which is present mostly on older motherboards,

03:45.640 --> 03:48.040
but it's still commonly used.

03:48.040 --> 03:50.440
There is also SPI, which is typically

03:50.440 --> 03:55.000
present on newer PCs.

03:55.000 --> 03:58.800
And there is also I2RC, which is present mostly

03:58.800 --> 04:01.400
on mobile devices, or also on TALOS.

04:01.400 --> 04:11.000
So another problem is that if you at some point

04:11.000 --> 04:13.000
wanted to buy a TPM module, you probably

04:13.000 --> 04:16.000
know that there are a bunch of different types of connectors

04:16.000 --> 04:21.760
need to get one which is compatible with your mainboard.

04:21.760 --> 04:24.880
Even if they look the same, they are really not.

04:24.880 --> 04:27.280
And if you plug an incompatible one,

04:27.280 --> 04:33.280
you may even break your module or even your mainboard.

04:33.280 --> 04:41.080
For example, we can see LPC connectors for MSI and Asus.

04:41.080 --> 04:41.920
They look the same.

04:41.920 --> 04:44.040
The MTP is in the same place.

04:44.040 --> 04:47.680
But the ground and power is swapped,

04:47.680 --> 04:53.520
so some smoke may happen if you look at Asus to MSI

04:53.520 --> 04:58.160
or all the way around.

04:58.160 --> 05:00.760
Similar stuff for SPI.

05:00.760 --> 05:03.360
Also, connectors look the same at the first glance,

05:03.360 --> 05:05.360
but they are very, very different

05:05.360 --> 05:07.880
for different motherboards.

05:07.880 --> 05:10.560
Even for the same vendor, you can

05:10.560 --> 05:12.720
have different type of connectors,

05:12.720 --> 05:14.000
and there are many, many more.

05:17.840 --> 05:22.600
So at first, we wanted also to address the hardware problem.

05:22.600 --> 05:27.720
But it looks too complex.

05:27.720 --> 05:30.360
We want to focus on just the firmware for start.

05:33.080 --> 05:37.440
The variety of connectors is huge, bigger than anticipated.

05:41.840 --> 05:45.760
So at the state of the project, we focus purely on the firmware

05:45.760 --> 05:50.000
and connect it even by some jumper wires to the motherboard

05:50.000 --> 05:52.080
just to have some proof of concept in the firmware.

05:52.080 --> 05:55.840
And then we can worry about some other stuff.

05:59.600 --> 06:01.560
So how can we start with the project?

06:01.560 --> 06:09.320
We need some code to process our TPM2 commands.

06:09.320 --> 06:14.200
There are a few simulators or command processors out there.

06:14.200 --> 06:19.640
At least we know of two of them, the Microsoft implementation,

06:19.640 --> 06:24.960
which provides simulator code for various OSs.

06:24.960 --> 06:29.080
There are also some interesting samples in that repository.

06:29.080 --> 06:30.960
There is FTP and trusted application

06:30.960 --> 06:33.640
for us, Parham TransZone.

06:33.640 --> 06:40.000
And there are also some samples for STM32, Nucleo,

06:40.000 --> 06:46.560
which is what we will be interested the most.

06:46.560 --> 06:51.440
And then we also have a simulator from IBM.

06:51.440 --> 06:52.720
Maybe there is some more.

06:52.720 --> 06:56.280
I think these two are the most popular ones.

06:59.600 --> 07:02.520
So we took a look at the Nucleo sample

07:02.520 --> 07:07.720
we just mentioned just before from the Microsoft TPM reference

07:07.720 --> 07:09.840
stack.

07:09.840 --> 07:13.160
So it was created like four years ago,

07:13.160 --> 07:18.320
contributed, and it's not either maintained or tested.

07:18.320 --> 07:22.840
So there is no single person who knows if it ever worked,

07:22.840 --> 07:23.400
basically.

07:27.000 --> 07:29.880
It looks like it was developed in a Tonic True Studio, which

07:29.880 --> 07:32.400
is another existing software.

07:32.400 --> 07:38.360
Currently, it was replaced by some other STM32 integrated

07:38.360 --> 07:39.480
development environment.

07:39.480 --> 07:46.760
And we also asked about the status in general of the sample

07:46.760 --> 07:47.800
codes.

07:47.800 --> 07:51.680
So the answer is that these are just

07:51.680 --> 07:53.120
contributed at some point in time

07:53.120 --> 07:55.680
and may or may not work currently.

07:59.000 --> 08:03.400
So we took a closer look at that piece of code.

08:03.400 --> 08:07.680
We have converted the project into the newer programs.

08:07.680 --> 08:11.320
We're able to build at least to a certain point

08:11.320 --> 08:16.000
to at least run it on the Nucleo board.

08:16.000 --> 08:18.360
We noticed there is some VCOM application.

08:18.360 --> 08:20.640
It was presumably used for testing the solution

08:20.640 --> 08:25.080
on the application for Windows.

08:25.080 --> 08:28.440
We haven't even tried to bother with that.

08:28.440 --> 08:32.120
In fact, as we know, what kind it might be

08:32.120 --> 08:38.600
to build some old Visual Studio stuff.

08:38.600 --> 08:39.720
But we look at the code.

08:39.720 --> 08:44.960
We saw that the STM32 code can accept TPM commands via USB

08:44.960 --> 08:46.200
CDC.

08:46.200 --> 08:47.160
It can process it.

08:47.160 --> 08:53.440
It can return some response, or some simple command response

08:53.440 --> 08:56.160
was there.

08:56.160 --> 08:58.840
But what was important is some custom protocol

08:58.840 --> 09:00.720
was involved here.

09:00.720 --> 09:03.600
So there was no interoperability with existing tools,

09:03.600 --> 09:08.720
such as TPM tools stack, or with existing TPM interfaces,

09:08.720 --> 09:11.080
because it was a very custom one.

09:11.080 --> 09:14.840
And the interoperability is a major goal of this project

09:14.840 --> 09:15.340
as well.

09:18.320 --> 09:25.200
Also, the resources on the NCEU was quite low.

09:25.200 --> 09:27.200
So at this point, we had a rough idea

09:27.200 --> 09:31.720
of what we have to face with.

09:31.720 --> 09:38.760
So we want to also show how different the flow is

09:38.760 --> 09:45.160
for the TPM2 simulator versus the TPM2 actual hardware.

09:45.160 --> 09:47.720
The block on the top is, we can say,

09:47.720 --> 09:52.760
what Microsoft or IBM reference implementation provides.

09:52.760 --> 09:56.720
It just provides TPM2 command processing.

09:56.720 --> 09:58.400
For the simulator, that's fine.

09:58.400 --> 10:05.240
It uses sockets and communicates with the TPM2 software

10:05.240 --> 10:07.880
stack in the OS directly.

10:07.880 --> 10:09.440
But in case of the hardware, you need

10:09.440 --> 10:11.720
to plug in the actual module to the motherboard.

10:11.720 --> 10:13.880
So we need all of the plumbing.

10:13.880 --> 10:17.760
So there are also dedicated specifications

10:17.760 --> 10:19.040
on that in the TCG.

10:19.040 --> 10:24.800
So those are the orange blocks that

10:24.800 --> 10:28.880
needs to be implemented in the firmware.

10:28.880 --> 10:32.160
So we need all of the plumbing to pass the commands

10:32.160 --> 10:37.440
from the microcontroller through the motherboard connectors

10:37.440 --> 10:43.240
to the OS drivers, and then at last to the TPM2 software

10:43.240 --> 10:44.640
stack in the operating system.

10:48.560 --> 10:53.840
What are the challenges, current and expected?

10:53.840 --> 10:57.520
One of the first was the global chip shortage,

10:57.520 --> 10:59.280
which happened in the meantime.

10:59.280 --> 11:04.200
So even if you wanted to use the STM32L4,

11:04.200 --> 11:08.200
it was no longer available to the source.

11:08.200 --> 11:14.120
The other microcontroller was also quite difficult to get.

11:14.120 --> 11:19.680
And the project in the samples was developed

11:19.680 --> 11:26.360
using the hardware abstraction layer from STM.

11:26.360 --> 11:28.520
And if you wanted to switch to another hardware,

11:28.520 --> 11:32.400
you would need to rewrite that thing at least to some point

11:32.400 --> 11:34.080
to another hardware abstraction layer,

11:34.080 --> 11:37.080
and then the chip becomes unavailable,

11:37.080 --> 11:41.040
and that would go on forever.

11:41.040 --> 11:45.200
Also, we do not have the requirements

11:45.200 --> 11:47.960
clarified that were at that point.

11:47.960 --> 11:50.800
So we believe that what must be done

11:50.800 --> 11:55.240
is to have some OS handling the TPM stack.

11:55.240 --> 12:01.880
So we are looking into ZFRA OS to have some better hardware

12:01.880 --> 12:08.720
coverage and just implement the TPM stack in the ZFRA OS.

12:08.720 --> 12:10.680
So we can switch between boards more easily.

12:10.680 --> 12:18.320
Another challenge is different types of timing problems.

12:18.320 --> 12:24.720
The TCG specification requires some timing

12:24.720 --> 12:27.640
at different levels on the hardware level.

12:27.640 --> 12:34.880
For example, some registers must respond in some milliseconds

12:34.880 --> 12:35.360
and so on.

12:35.360 --> 12:40.560
It might be difficult to achieve such responsiveness

12:40.560 --> 12:43.640
on just a microcontroller.

12:43.640 --> 12:48.480
Maybe we will need to fall back to FPGA in some cases.

12:48.480 --> 12:52.160
Definitely, we need to fall back to FPGA for LPC interface,

12:52.160 --> 12:56.360
which is not existent on general purpose microcontrollers.

12:56.360 --> 13:01.080
So we are developing a hardware block in FPGA for that.

13:04.200 --> 13:06.480
There are also some NVRAM improvements

13:06.480 --> 13:11.000
which can be made, and as said before,

13:11.000 --> 13:13.400
a full compliance might be quite difficult

13:13.400 --> 13:17.320
or might be even impossible to achieve.

13:17.320 --> 13:21.280
For example, in case of the strict initialization time

13:21.280 --> 13:24.920
and power requirements, because the power requirements are

13:24.920 --> 13:28.720
quite low, I don't remember the exact value right now,

13:28.720 --> 13:34.360
but typical microcontroller plus FPGA and also the boot time

13:34.360 --> 13:36.040
might be challenging here.

13:36.040 --> 13:37.840
It's a lot of moving parts.

13:37.840 --> 13:39.280
We are still looking into that.

13:43.440 --> 13:50.000
So the roadmap, the first step on the project plan

13:50.000 --> 13:52.040
was public side view to documentation.

13:52.040 --> 13:55.560
So that one is already live, although there is not

13:55.560 --> 13:56.960
much content there yet.

13:56.960 --> 14:01.240
We are just starting, we can say.

14:01.240 --> 14:02.960
But what's there is already there.

14:02.960 --> 14:05.000
We have already some structure.

14:05.000 --> 14:10.000
And the roadmap is also public.

14:10.000 --> 14:13.320
Then the hardware, as mentioned before,

14:13.320 --> 14:15.840
we started with the nuclear as it was supported

14:15.840 --> 14:19.560
by the Microsoft samples.

14:19.560 --> 14:22.960
We're still exploring that, but just probably not

14:22.960 --> 14:25.040
enough of a hardware to accomplish

14:25.040 --> 14:26.880
the goals of this project.

14:26.880 --> 14:28.800
Another one we are exploring right now

14:28.800 --> 14:33.960
is one which is based on the EOS S3 SoC.

14:33.960 --> 14:39.360
It combines Cortex-M4 and FPGA in a single chip.

14:39.360 --> 14:44.280
That might be interesting to have a Cortex-M4 for TPM to stack

14:44.280 --> 14:50.360
and to have some FPGA for fast response and LPC communication.

14:55.160 --> 14:58.480
The far point which we are working on right now

14:58.480 --> 15:05.600
is LPC implementation, FPGA.

15:05.600 --> 15:10.000
So that's required to target the mainboards which

15:10.000 --> 15:15.440
are currently in the market, which have only the LPC

15:15.440 --> 15:16.080
interface.

15:18.880 --> 15:21.880
Then we need to implement also all of the plumbing I showed

15:21.880 --> 15:25.280
before on the slides.

15:25.280 --> 15:29.360
So TPM registers as defined in the specification.

15:29.360 --> 15:32.480
Also there is some specialized FIFA protocol

15:32.480 --> 15:41.640
to pass the commands between the TPM and the host.

15:45.840 --> 15:51.920
So that's a screenshot of some testing at the LPC module.

15:51.920 --> 15:58.400
We are using Verilock Ecos, I believe, for creating the data

15:58.400 --> 16:02.600
and GTK way for drawing that out currently.

16:06.000 --> 16:08.720
Then some testing is also necessary.

16:08.720 --> 16:12.200
We are already preparing some test cases.

16:12.200 --> 16:15.840
We can start preparing them based on the regular TPM

16:15.840 --> 16:16.400
modules.

16:16.400 --> 16:20.360
And we want to expect that our module will

16:20.360 --> 16:22.560
meet the same criteria.

16:22.560 --> 16:26.240
Of course, we'll add some specific test cases later on

16:26.240 --> 16:28.880
as well.

16:28.880 --> 16:32.320
SPI protocol is also tricky, even though it

16:32.320 --> 16:37.280
should be simpler in theory because the typical MCUs have

16:37.280 --> 16:38.640
SPI.

16:38.640 --> 16:45.000
But typically they are tested, let's say, in master mode,

16:45.000 --> 16:46.680
not in the slave mode.

16:46.680 --> 16:49.600
That's the most common case.

16:49.600 --> 16:51.640
And also the frequency is limited.

16:51.640 --> 16:55.840
The frequency of SPI on motherboards

16:55.840 --> 16:59.560
is like 40, can be 40 megahertz or more.

16:59.560 --> 17:04.600
But typical SPI on, for example, the STM32

17:04.600 --> 17:07.160
is advertised to up to 24 megahertz.

17:07.160 --> 17:10.440
But in reality, we have not been able to achieve that event

17:10.440 --> 17:11.400
so far.

17:11.400 --> 17:17.400
So that also might be difficult. And maybe also

17:17.400 --> 17:21.120
FPGA can help you to achieve the timing requirements we need.

17:25.840 --> 17:28.280
The eight point is exactly exploring

17:28.280 --> 17:32.120
the usage of simpler hardware platforms.

17:32.120 --> 17:36.200
So maybe we were hoping that maybe we

17:36.200 --> 17:41.760
can achieve at least SPI connection on a board

17:41.760 --> 17:42.680
without FPGA.

17:42.680 --> 17:47.880
That would be simpler and would give more users

17:47.880 --> 17:52.600
ability to test that out, at least on even Raspberry Pi

17:52.600 --> 17:58.440
or with the motherboard so they can push that forward

17:58.440 --> 18:03.760
and have some TPM module on some regular development boards

18:03.760 --> 18:04.260
even.

18:04.260 --> 18:16.780
So I already mentioned some TPM stack improvements.

18:16.780 --> 18:21.020
Sorry, the flash drive for TPM stack improvements.

18:24.020 --> 18:28.820
For example, the more test suites,

18:28.820 --> 18:32.660
there are some problems we already seen with what was there.

18:32.660 --> 18:35.220
There is no Redundancy at least.

18:35.220 --> 18:40.700
Maybe also encryption because the SPI could be read out

18:40.700 --> 18:42.420
from the board.

18:42.420 --> 18:45.260
But we may leave the encryption for later.

18:45.260 --> 18:48.140
But at least we would like to have the Redundancy

18:48.140 --> 18:53.100
because otherwise it would be quite easy to pick the TPM

18:53.100 --> 18:55.300
boards, which is not what we want.

18:58.140 --> 19:00.680
We also need some unique identification

19:00.680 --> 19:03.460
and some source of entropy.

19:03.460 --> 19:09.580
That would be required to have some unique ID for each device.

19:09.580 --> 19:14.620
And we need some entropy for cryptographic operations.

19:14.620 --> 19:15.740
This is left for later.

19:15.740 --> 19:17.420
We will see what kind of hardware

19:17.420 --> 19:19.620
we will end up in the end.

19:19.620 --> 19:23.340
We might use some hardware specific features.

19:23.340 --> 19:32.740
And if not, maybe we can use FPGA finally.

19:32.740 --> 19:36.380
Manufacturing, as you might know,

19:36.380 --> 19:41.260
each TPM must contain unique key, endorsement key,

19:41.260 --> 19:45.780
and also certificate related to that.

19:45.780 --> 19:49.500
So we might provide a way for a user

19:49.500 --> 19:55.860
to generate the endorsement key for their TPM.

19:55.860 --> 19:58.740
So just to provide some scripts and procedures

19:58.740 --> 20:02.460
how they can provision the TPM device.

20:07.720 --> 20:11.020
And then also we imagine that it would

20:11.020 --> 20:14.580
be nice to have some nice built system

20:14.580 --> 20:19.140
so we can configure what kind of interface I want to target.

20:19.140 --> 20:22.940
I have a motherboard with SPI, so I just

20:22.940 --> 20:25.580
flip the SPI switch, rebuild the project.

20:25.580 --> 20:30.100
I check the hash algorithm I'm interested in.

20:30.100 --> 20:37.060
I choose what kind of hardware entropy I'm interested in.

20:37.060 --> 20:39.020
And the goal here is to make the transition

20:39.020 --> 20:40.460
between the boards more easy.

20:40.460 --> 20:44.900
I can plug out my TPM, flush another firmware,

20:44.900 --> 20:48.540
and use it on my new motherboard, which now supports SPI

20:48.540 --> 20:50.860
and previously it was like LPC.

20:55.540 --> 20:59.420
What's currently in progress is the LPC module

20:59.420 --> 21:00.940
I showed the screenshot from.

21:04.540 --> 21:10.180
The next TPM registers will be implemented.

21:10.180 --> 21:13.460
We want to pursue as much as we can in the FPGA,

21:13.460 --> 21:15.940
also in the simulation, before we

21:15.940 --> 21:18.860
stick to serving hardware.

21:18.860 --> 21:23.220
And we also need to determine how big of the FPGAs

21:23.220 --> 21:24.300
would be required here.

21:27.100 --> 21:30.440
We also in the parallel exploring the path of not using

21:30.440 --> 21:38.100
FPGA and using SPI for on the STM or under microcontroller.

21:38.100 --> 21:41.700
Maybe even if we could reduce the frequency to lower,

21:41.700 --> 21:44.420
use it with the Raspberry Pi as a proof of concept that

21:44.420 --> 21:48.540
would already be quite an achievement, I believe.

21:48.540 --> 21:53.980
Maybe even if it wouldn't work with the regular mainboards,

21:53.980 --> 21:55.860
maybe after some time it could be improved.

21:55.860 --> 22:00.860
But it could be a nice step forward.

22:00.860 --> 22:03.020
And dogs, we are working on the dogs.

22:03.020 --> 22:07.980
They will be progressively filled with the results

22:07.980 --> 22:09.660
of our parallel to work.

22:09.660 --> 22:16.260
Yes, if you are interested in the progress

22:16.260 --> 22:18.300
and maybe want to contribute, maybe

22:18.300 --> 22:22.140
want to discuss about the project and create it,

22:22.140 --> 22:29.020
start you can join our communication channels.

22:29.020 --> 22:35.580
On the other hand, if you want to join the team or work daily

22:35.580 --> 22:38.340
on open source signal projects, you

22:38.340 --> 22:42.180
might approach me directly or use contact information

22:42.180 --> 22:45.020
from the next slide.

22:45.020 --> 22:46.700
So that would be it.

22:46.700 --> 22:49.340
And we might have some questions.

22:52.940 --> 22:53.980
Yes.

22:53.980 --> 22:56.940
You mentioned the timing of problems.

22:56.940 --> 23:03.140
Have you looked into how the system behaves if you delay?

23:03.140 --> 23:05.540
Maybe they are.

23:05.540 --> 23:08.660
Will things not work if you are too late

23:08.660 --> 23:11.300
answering some things?

23:11.300 --> 23:13.780
So I'm not sure if I follow exactly.

23:13.780 --> 23:19.220
You're asking about some timing issues we had.

23:19.220 --> 23:23.060
There are some timings defined by the TCG specification.

23:23.060 --> 23:26.700
So for example, they say the given command,

23:26.700 --> 23:31.620
TPM to command, must respond with the given time.

23:31.620 --> 23:33.380
So that's one.

23:33.380 --> 23:36.860
If you don't respond in that time, what happens?

23:36.860 --> 23:39.620
And did you look into that?

23:39.620 --> 23:42.860
We are not at the stage even currently.

23:42.860 --> 23:44.620
We are at the lower layer.

23:44.620 --> 23:47.740
So we are trying to get the planning done

23:47.740 --> 23:50.340
so we can even send one command.

23:50.340 --> 23:52.380
But on the lower level, yes, there

23:52.380 --> 23:55.420
are also problems with timing.

23:55.420 --> 23:57.980
At least on the SPI part, for example,

23:57.980 --> 24:02.980
we had a problem that the STM32 we've been using

24:02.980 --> 24:06.300
doesn't give us the enough flexibility

24:06.300 --> 24:10.100
that we needed to follow this back in some cases.

24:10.100 --> 24:14.540
There is SPI IP block, which can just send and receive

24:14.540 --> 24:16.740
some data over the SPI.

24:16.740 --> 24:23.540
But if you would want to specify some more,

24:23.540 --> 24:26.780
like at the start of the transmission,

24:26.780 --> 24:30.740
pull that line down or up, that might be more tricky to do

24:30.740 --> 24:31.300
as well.

24:31.300 --> 24:34.500
So maybe the FPGA would also help here.

24:37.980 --> 24:38.500
Yes?

24:38.500 --> 24:41.980
I have a couple questions about FPGA.

24:41.980 --> 24:45.460
Have you selected an FPGA?

24:45.460 --> 24:49.060
So the question was, if we selected FPGA, no.

24:49.060 --> 24:53.780
As I said, we are just exploring the hardware on the right.

24:53.780 --> 24:56.340
So they use S3 SOC.

24:56.340 --> 25:01.220
So that one has Cortex M4 and FPGA integrated.

25:01.220 --> 25:07.300
We need the one SOC, and that's the one we are analyzing right

25:07.300 --> 25:07.780
now.

25:07.780 --> 25:12.500
Maybe it would be fit for the project.

25:12.500 --> 25:17.180
If you wanted to use FPGA only, because what is also important

25:17.180 --> 25:22.980
here is that we require we need CPU to process the TPM stack

25:22.980 --> 25:24.180
commands.

25:24.180 --> 25:33.460
So either we can use hard CPU like that with FPGA combined,

25:33.460 --> 25:39.180
or we need to use full-blown FPGA, soft call, and so on.

25:39.180 --> 25:41.380
And that's another complexity.

25:41.380 --> 25:44.780
We might be not also not that much experience with that,

25:44.780 --> 26:02.900
because we need to run the TPM stack on the CPU.

26:02.900 --> 26:06.740
So the question is, if we need to use internal flash

26:06.740 --> 26:09.700
so that flash is not pampered with,

26:09.700 --> 26:11.460
yes, that would be preferable, of course.

26:11.460 --> 26:14.940
But at this point, we are flexible enough

26:14.940 --> 26:16.980
to just have anything working, prove

26:16.980 --> 26:20.020
that it's even feasible with some limitations,

26:20.020 --> 26:21.540
even if the flash is separate.

26:21.540 --> 26:23.780
It can be read out.

26:23.780 --> 26:25.300
We might not care right now.

26:25.300 --> 26:29.020
We focus on the most important part

26:29.020 --> 26:32.620
to even prove that it's feasible or not.

26:32.620 --> 26:39.660
And maybe other stuff can be handled later

26:39.660 --> 26:42.740
once we prove that we can do it or not.

26:42.740 --> 26:45.260
Yeah?

26:45.260 --> 26:45.740
The hardware?

26:45.740 --> 26:47.580
It's actually right that your problem

26:47.580 --> 26:51.140
is that you're trying to receive data over SPI.

26:51.140 --> 26:55.660
Essentially, your device tries to be an SPI slave,

26:55.660 --> 26:59.620
but the SDM 32 SPI is not flexible enough.

26:59.620 --> 27:05.260
And you want to report that M. Is that right?

27:05.260 --> 27:08.980
So yes, it's right that we want to be a SPI slave,

27:08.980 --> 27:10.940
because the main board is master.

27:10.940 --> 27:11.460
Yeah?

27:11.460 --> 27:11.960
Right.

27:11.960 --> 27:20.940
So are you aware of chip lineup from Cypress of the feedback?

27:20.940 --> 27:25.980
It's like a perfect tab plus a little bit of not really

27:25.980 --> 27:31.940
FPGA but programmable code, which you can configure to some degree.

27:31.940 --> 27:32.420
Probably.

27:32.420 --> 27:39.340
If you implement your custom SPI handling in the M,

27:39.340 --> 27:42.340
you will still get the perfect M to handle all the actual

27:42.340 --> 27:42.940
processing stuff.

27:42.940 --> 27:43.460
OK.

27:43.460 --> 27:45.820
So there is a suggestion from the audience on the Cypress

27:45.820 --> 27:46.340
series.

27:46.340 --> 27:47.740
BSoC.

27:47.740 --> 27:49.140
BSoC, yeah?

27:49.140 --> 27:51.860
So I don't think we have considered that so far.

27:51.860 --> 27:54.700
So thank you for that.

27:54.700 --> 28:02.260
From the hardware with hard CPU plus FPGA,

28:02.260 --> 28:05.940
we found so far like the EOS S3, which we're looking into.

28:05.940 --> 28:09.980
It has some support, which is a plus, of course.

28:09.980 --> 28:14.420
There are, I think, also one board from Goin, like Tank

28:14.420 --> 28:15.100
Nano.

28:15.100 --> 28:17.820
It was the name, I think.

28:17.820 --> 28:22.740
So thanks for checking out the Cypress BSoC.

28:22.740 --> 28:23.980
Yeah?

28:23.980 --> 28:29.140
Did you consider trying to get an emulator-based development

28:29.140 --> 28:33.620
environment working, maybe using some like QMU so that you are

28:33.620 --> 28:36.700
sort of decoupling your hardware debug from your software

28:36.700 --> 28:37.700
debug.

28:37.700 --> 28:42.420
And depending on that QMU, you can implement the virtual LPC

28:42.420 --> 28:45.700
and SPI devices.

28:45.700 --> 28:50.940
And it also has a Cortex-M emulator, QMU as well.

28:50.940 --> 28:54.540
So perhaps you're just thinking perhaps that might be a

28:54.540 --> 28:56.060
possibility.

28:56.060 --> 28:59.220
So the question is if we consider some emulator

28:59.220 --> 29:02.180
development environments.

29:02.180 --> 29:08.460
So as I showed, we are right now exploring some, at least

29:08.460 --> 29:11.860
for the FPGA part, we start with simulation.

29:11.860 --> 29:15.020
And we developed like LPC slave and host.

29:15.020 --> 29:18.700
And we can test that out in a simulation for simulating the

29:18.700 --> 29:23.540
whole Cortex-M. We have not done so far.

29:23.540 --> 29:26.300
Maybe that's also something to consider.

29:33.260 --> 29:34.100
Any more questions?

29:34.100 --> 29:35.380
We can have one more, I believe.

29:38.500 --> 29:39.740
OK.

29:39.740 --> 29:41.020
OK.

29:41.020 --> 29:54.180
It's a big risk to, let's say, move away from the hardware

29:54.180 --> 29:55.180
part first.

29:55.180 --> 30:01.180
Because a big part of using a TPM is actually being a trusted

30:01.180 --> 30:04.180
device, somewhere you come back, and it's usable, though

30:04.180 --> 30:05.180
it's virtual.

30:05.180 --> 30:08.180
And by now, putting a lot of folks in the software and just

30:08.180 --> 30:09.180
kind of ignoring the hardware part.

30:09.180 --> 30:23.900
So the question is, I believe, if we have, let's say, software

30:23.900 --> 30:28.980
film-aligning on the STM32, and how we can make sure that the

30:28.980 --> 30:31.220
software was not tampered with, for example.

30:31.220 --> 30:32.220
Yeah?

30:32.220 --> 30:36.220
Yeah, tampered or maybe extracted or whatever.

30:36.220 --> 30:36.940
OK.

30:36.940 --> 30:40.380
Also, we know there are existing mechanisms, for

30:40.380 --> 30:45.100
example, for different vectors have already microcontrollers,

30:45.100 --> 30:47.900
different types of secure boots, and so on.

30:47.900 --> 30:51.340
So we can verify if it's our firmware, if it's signed.

30:51.340 --> 30:54.620
User can sign its own firmware, and otherwise the

30:54.620 --> 30:56.820
firmware wouldn't boot, for example.

30:56.820 --> 30:59.060
I believe, once we have the functionality, there are

30:59.060 --> 31:04.300
already existing mechanisms that can prove that the

31:04.300 --> 31:08.140
firmware was not tampered with.

31:08.140 --> 31:11.580
But that's my understanding.

31:11.580 --> 31:13.300
OK, so we are out of time.

31:13.300 --> 31:36.460
Thank you.

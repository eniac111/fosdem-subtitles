WEBVTT

00:00.000 --> 00:08.580
Hello everyone.

00:08.580 --> 00:12.260
I'm kind of nervous because it's been three years of no conference on my side so I'm really

00:12.260 --> 00:17.980
happy to be here today because, wow.

00:17.980 --> 00:23.680
Just a quick screencap of what it was like last time Ed was really presented just for

00:23.680 --> 00:29.540
the project because I did a conference like at the last post that was in person and it

00:29.540 --> 00:31.200
was more of a call for collaboration.

00:31.200 --> 00:36.240
I still need collaboration but today's presentation is more like what happened since that moment

00:36.240 --> 00:39.720
which is 2016.

00:39.720 --> 00:42.400
This is what it looks like right now.

00:42.400 --> 00:46.240
For people using it, they're aware but this is it.

00:46.240 --> 00:48.960
This is the plan for the presentation today.

00:48.960 --> 00:53.160
Who I am, what is Ed's, why Ed's, what's new and what's next.

00:53.160 --> 00:58.040
I saw that most of the people here already knows what Ed's is so I will try to go faster

00:58.040 --> 01:02.360
there so that we have more time to talk at the end.

01:02.360 --> 01:05.360
Who I am, I'm Cérie L'Oréon.

01:05.360 --> 01:08.080
I come from Canada.

01:08.080 --> 01:15.600
I started DancerGo Open Technologies in 2017.

01:15.600 --> 01:16.600
This is me.

01:16.600 --> 01:20.760
I'm currently the main S maintainer.

01:20.760 --> 01:25.960
I certified the Privacy Beast and years are passing so fast.

01:25.960 --> 01:32.920
I'm 2019 and since that moment, I'm actually trying my best getting funding and being paid

01:32.920 --> 01:39.840
to actually move the things forward in the mission of facilitating accessibility to security

01:39.840 --> 01:42.640
and confidentiality for most people.

01:42.640 --> 01:47.880
This is a challenge because everybody needs confidentiality and privacy but they're not

01:47.880 --> 01:49.440
necessarily tax-a-d.

01:49.440 --> 01:54.920
The goal of Ed's right now is more to bring it accessible to everyone, reducing the friction

01:54.920 --> 01:57.760
and that's it.

01:57.760 --> 01:58.760
What is Ed's?

01:58.760 --> 02:01.640
Ed's can be seen as two different things.

02:01.640 --> 02:07.280
It's basically a built system, I would say, and the outcome is a runtime environment.

02:07.280 --> 02:13.920
The runtime environment is based on core boot as of now but it could be inside of UEFI and

02:13.920 --> 02:19.160
the DXE but what I'm testing is more core boot payload.

02:19.160 --> 02:24.440
So Ed's right now is more core boot payload and as of now, we will call it a runtime environment.

02:24.440 --> 02:30.480
It's core boot and Linux has a payload.

02:30.480 --> 02:37.600
When you configure core boot, you can configure it like to have Linux as its payload and basically,

02:37.600 --> 02:42.680
like I said before, Ed is the built system preparing the kernel and the init rd.

02:42.680 --> 02:48.520
In the init rd, you have all the tools needed and the scripts which are boot policies which

02:48.520 --> 02:56.280
actually creates the user interface and everything that is behind to make it usable.

02:56.280 --> 03:04.160
Core boot here, Ed does an abstraction outside of the core boot configuration.

03:04.160 --> 03:13.160
And basically, Ed's actually core boot as a configuration that is inside of the GitHub

03:13.160 --> 03:21.640
trees and it defines also the Linux configuration that will be used to define only the needed

03:21.640 --> 03:27.360
kernel modules that will be compiled in and if there is outside modules that are needed,

03:27.360 --> 03:34.320
let's say the wired card or anything else, it's loaded on demand.

03:34.320 --> 03:41.040
So the most important part for us right now is to define Ed's.

03:41.040 --> 03:43.600
This is the only thing I want to say about core boot.

03:43.600 --> 03:49.120
Unfortunately, the openness and ownership and the auditability of the core boot part

03:49.120 --> 03:52.720
of the code will depend on how core boot is open.

03:52.720 --> 04:00.120
As we heard in the previous conference that was given by Michael, we have a problem because

04:00.120 --> 04:04.640
less and less platforms are actually completely open source without blogs.

04:04.640 --> 04:10.040
So unfortunately, we shift the responsibility to the user to define his own threat model

04:10.040 --> 04:16.120
and decide which platform is going to use to attain the privacy and confidentiality

04:16.120 --> 04:17.880
that is there.

04:17.880 --> 04:22.560
The idea here is that if you don't have native initialization of the hardware, if you depend

04:22.560 --> 04:30.320
on FSP and memory initialization blogs, you have to have faith in those blogs to actually

04:30.320 --> 04:34.280
do what is expected.

04:34.280 --> 04:41.760
On the models that we have there, like the IP bridge, again, the laptop, the X230, soon

04:41.760 --> 04:48.080
there's going to be as well the 300, 440 P will be supported with native RAM initialization.

04:48.080 --> 04:49.080
It's coming.

04:49.080 --> 04:54.480
Other than that, then we have the TGP 16, which Michael again talked about, which was

04:54.480 --> 05:01.400
dropped mainstream, but the Chiro core boot, I think, is based on 4.16.

05:01.400 --> 05:02.560
I think so.

05:02.560 --> 05:07.920
So a lot of other features that were there until 4.16 are merged in.

05:07.920 --> 05:09.800
Core boot changed their release cycle.

05:09.800 --> 05:11.900
So now it's like every three months.

05:11.900 --> 05:16.200
So release are going faster, but it doesn't mean that so much happened in between release.

05:16.200 --> 05:19.680
It's just that the release are going faster.

05:19.680 --> 05:23.480
Power 9 is now supported by core boot.

05:23.480 --> 05:25.280
It's going to be supported inside of ads.

05:25.280 --> 05:26.400
I came in and fuzzed them.

05:26.400 --> 05:31.900
Now I will have the TPM modules to be able to test this at home.

05:31.900 --> 05:36.200
And it will land inside of ads later on.

05:36.200 --> 05:42.840
As opposed to an open source firmware, this is what you would have inside of a closed

05:42.840 --> 05:47.200
source supply chain environment.

05:47.200 --> 05:48.200
So this is complicated.

05:48.200 --> 05:50.880
I'm just doing that as a reference.

05:50.880 --> 05:59.960
Normally you have to have, like I said, the FSP, the Tino core to implement the UFI implementation.

05:59.960 --> 06:05.320
After that, all the companies are doing a little part, and the OEM is actually responsible

06:05.320 --> 06:08.160
for 10% of the code that is there.

06:08.160 --> 06:14.680
So this is true for all computers, but Apple that is there, which is responsible to actually

06:14.680 --> 06:16.640
develop the firmware completely.

06:16.640 --> 06:22.480
And this gives a good posture because they support the hardware longer.

06:22.480 --> 06:27.740
For other firmware, for other company vendors, the firmware is not that long supported.

06:27.740 --> 06:31.200
And we saw it with the X230, which is not maintained anymore.

06:31.200 --> 06:32.760
There is no microcode update.

06:32.760 --> 06:37.520
This kind of stuff is happening for the firmware level.

06:37.520 --> 06:43.400
So on the other side, with ads as an open source firmware, we have completed the BLET

06:43.400 --> 06:46.040
for the platforms that are completely open source.

06:46.040 --> 06:50.000
So the core boot source code is auditable.

06:50.000 --> 06:51.800
The Linux kernel is auditable.

06:51.800 --> 06:56.520
You can see the source code for that version, plus the configuration that is pushed inside

06:56.520 --> 06:58.360
of ads.

06:58.360 --> 07:02.440
We depend on Linux tools only to do the magic of ads.

07:02.440 --> 07:07.760
So basically, you have module dependencies.

07:07.760 --> 07:11.800
You will see links later on to actually go directly and source code to see where the

07:11.800 --> 07:15.240
modules are and what they do.

07:15.240 --> 07:21.880
And this permits us to have really streamlined policy, which is right now GUI init inside

07:21.880 --> 07:31.200
of ads, and GUI init is responsible to take Linux as init and then point directly in the

07:31.200 --> 07:32.600
policy that you want.

07:32.600 --> 07:37.320
The reason why Trimone did this is because anybody here that could want the policy, which

07:37.320 --> 07:42.760
is basically a bash script, to do something else, could do it and customize it super easy.

07:42.760 --> 07:49.000
Bash is easy to read and understand, as opposed to compiling stuff.

07:49.000 --> 07:52.400
Sometimes the tools are there, basically your policy is just saying, OK, I want to show

07:52.400 --> 07:53.400
this.

07:53.400 --> 07:54.600
And when you click that, it does that.

07:54.600 --> 08:00.800
So for developers, it's easy to review and see and collaborate as well.

08:00.800 --> 08:05.320
So the small note that I put there is that the reason why Linux is really interesting

08:05.320 --> 08:12.120
inside of a firmware is that you can reduce the size of the kernel to only do what you

08:12.120 --> 08:13.400
want it to do.

08:13.400 --> 08:22.680
So on ads, it's a really small kernel, like only containing what is needed to initialize

08:22.680 --> 08:25.720
the platform outside of Corebook.

08:25.720 --> 08:32.320
And since we are able to also build models, we can support, for example, USB, as storage,

08:32.320 --> 08:33.320
as model.

08:33.320 --> 08:37.640
And then when we need storage from a USB, we call it on demand.

08:37.640 --> 08:38.800
So we load the modules.

08:38.800 --> 08:41.280
We measure the modules, and after that, we load them.

08:41.280 --> 08:43.300
And the same thing for a USB keyboard.

08:43.300 --> 08:45.760
If you don't need a USB keyboard, it should not be there.

08:45.760 --> 08:48.200
So that's what happens for laptops.

08:48.200 --> 08:54.920
That permits to remove a complete old class of attacks, because if you don't have USB

08:54.920 --> 08:59.840
keyboard and you don't have HID as a driver, then you cannot have a rubber-ducky attack,

08:59.840 --> 09:01.840
simply because the kernel drivers are not there.

09:01.840 --> 09:10.360
So you can reduce the stack, the get-attack surface as needed as well.

09:10.360 --> 09:11.360
So this is it.

09:11.360 --> 09:16.360
So here we are going to talk about Linux as a bootloader.

09:16.360 --> 09:18.120
What is a bootloader real quick?

09:18.120 --> 09:22.880
It's what is between the firmware and the OS to actually parse configuration and boot

09:22.880 --> 09:24.880
inside of it.

09:24.880 --> 09:27.960
Sorry, my mouth is dry.

09:27.960 --> 09:30.760
I'm not used to the conference anymore.

09:30.760 --> 09:38.520
So yeah, if you use the kernel as a bootloader, then you're able to bypass completely C bias

09:38.520 --> 09:42.040
or grub as we see normally.

09:42.040 --> 09:46.520
So if you have Linux, again, and you have scripts, you're able to parse the grub configuration

09:46.520 --> 09:50.440
and you're able to display it and boot inside of it.

09:50.440 --> 09:53.960
And the Linux tools that are there are actually the basic ones that are needed.

09:53.960 --> 10:00.640
So we have Busybox, we have Crip Setup, LVM, the TPM tool stack, and Wiptail, and FBM

10:00.640 --> 10:03.360
with tail, which permits us to have something like that.

10:03.360 --> 10:07.920
So once you're having an operating system installed, and if you don't have an operating

10:07.920 --> 10:11.680
system installed, Edge will detect that nothing is on the hard drive and will propose you

10:11.680 --> 10:15.080
to boot from a USB disk.

10:15.080 --> 10:20.960
And that USB disk could be just plain ESO and the detached signature if the distribution

10:20.960 --> 10:22.400
is providing that.

10:22.400 --> 10:25.320
And you can verify the ESO prior of booting inside of it.

10:25.320 --> 10:26.600
Again, it's Crip.

10:26.600 --> 10:27.800
We can do whatever we want.

10:27.800 --> 10:30.840
So that's what we can do.

10:30.840 --> 10:33.640
Year in action is the main policy that is there.

10:33.640 --> 10:39.200
Like I said, everything inside of ESOS right now is based on one policy, which is GUI init.

10:39.200 --> 10:40.800
It's not really clear.

10:40.800 --> 10:46.200
So basically up here, what you see is that the normal boot policy is GUI init.

10:46.200 --> 10:50.720
Basically we're mounting the slash boot in read-only.

10:50.720 --> 10:57.760
We're verifying here because since we have an open source, we have Linux and the tools,

10:57.760 --> 11:03.960
we're based on GPG to stack to be able to actually first when you own the platform,

11:03.960 --> 11:05.520
you inject your public key.

11:05.520 --> 11:13.840
If you don't have a public key and private key, you have to have a USB GPD smart card.

11:13.840 --> 11:17.040
And Edge will say, OK, please inject your public key.

11:17.040 --> 11:22.480
And if you don't have one, it will help you to own your USB smart card.

11:22.480 --> 11:26.400
Once this is done, the public key will be injected inside of the firmware.

11:26.400 --> 11:30.640
And that permits us to actually sign the content of slash boot.

11:30.640 --> 11:34.240
So here what you see is that it was signed with my key.

11:34.240 --> 11:37.720
So all the content of slash boot is verified.

11:37.720 --> 11:39.840
The default boot configuration is also signed.

11:39.840 --> 11:42.600
So it's verified prior of jumping inside of it.

11:42.600 --> 11:48.000
So all you see there is the verification of the content prior of trusting it.

11:48.000 --> 11:55.440
And once this is done, it asks us for the TPM disk unlock key.

11:55.440 --> 11:56.800
I think I will cover that later.

11:56.800 --> 11:59.000
But this is an example of what can happen.

11:59.000 --> 12:04.080
Our recent change inside of Edge is that instead of trying to craft a cryptad entry,

12:04.080 --> 12:08.840
we extract the initrd to see what the operating system is trying to do.

12:08.840 --> 12:11.960
There are some operating system that we're implementing, for some reason,

12:11.960 --> 12:13.200
two cryptads.

12:13.200 --> 12:18.280
So instead of trying to craft one, we copy the form of what is expected

12:18.280 --> 12:19.440
by the operating system.

12:19.440 --> 12:28.280
And we just inject inside of it the place where the secret is supposed to be.

12:28.280 --> 12:31.440
The TPM will unseal the secret if all the measurements are good.

12:31.440 --> 12:32.680
So the firmware is good.

12:32.680 --> 12:37.080
After that, if the drivers loaded are the same as when we sealed the secret inside

12:37.080 --> 12:41.200
of it, it verifies also that the looks header is exactly the same.

12:41.200 --> 12:47.280
And if all of those things are as expected, an additional initrd is created,

12:47.280 --> 12:49.240
including the cryptad in question.

12:49.240 --> 12:51.200
And the secret.

12:51.200 --> 12:55.640
And this is passed to the initrd of the operating system.

12:55.640 --> 13:01.760
So we're able to actually boot inside of an operating system without typing

13:01.760 --> 13:06.600
your passphrase from a boot prompt that you don't know if you should trust or not.

13:06.600 --> 13:09.080
So Edge is trustable because everything is measured.

13:09.080 --> 13:10.200
It has tested to you.

13:10.200 --> 13:14.440
And then you can type your passphrase there because you're trusting it.

13:14.440 --> 13:18.440
So that's basically what we can see.

13:18.440 --> 13:21.240
I have laptops here if you want to talk later on.

13:21.240 --> 13:25.560
The demo that is there real quick is something that I can launch on my laptop.

13:25.560 --> 13:28.120
I acted last week to be able to present it right now.

13:28.120 --> 13:33.000
But you can have a flat partition with Iso inside of it.

13:33.000 --> 13:34.880
Now you can just say, OK, media scan.

13:34.880 --> 13:39.440
You point it to the partition containing your Iso in question.

13:39.440 --> 13:42.440
It will ask you what Iso you want to boot.

13:42.440 --> 13:44.280
Tails provides detached signatures.

13:44.280 --> 13:50.240
So basically at that point, what you see is again, it's verifying the Iso

13:50.240 --> 13:54.840
with the detached signature that guarantees the authenticity of the Iso

13:54.840 --> 13:55.920
and the integrity.

13:55.920 --> 14:01.680
Once that is done, it provides you a list of the grub entries that are there.

14:01.680 --> 14:02.960
You select it.

14:02.960 --> 14:06.320
And at that moment, you see the boot options that were passed inside

14:06.320 --> 14:07.680
of the grub configuration.

14:07.680 --> 14:11.680
And at that point, a minute later, you're inside of Tails.

14:11.680 --> 14:15.800
So it permits you to actually sign Iso that you did yourself.

14:15.800 --> 14:16.800
You created yourself.

14:16.800 --> 14:21.280
Any live Iso that you have, once you verify the integrity of it,

14:21.280 --> 14:23.520
you sign it with your key because you already have it.

14:23.520 --> 14:27.880
And at that point, you can guarantee that a USB drive that you have with multiple Iso

14:27.880 --> 14:29.960
will be bootable whenever you want.

14:29.960 --> 14:32.480
And in that case, it permits you to boot inside of Tails.

14:32.480 --> 14:36.520
And Tails guarantees you that microindumization will be done.

14:36.520 --> 14:37.760
It's in the memory.

14:37.760 --> 14:42.640
So if you're in an emergency situation or you're in a coffee that you don't trust,

14:42.640 --> 14:43.640
you remove your battery.

14:43.640 --> 14:45.240
You work as you want to.

14:45.240 --> 14:48.040
And at last minute, you just unplug your power cable.

14:48.040 --> 14:49.960
And there is nothing in memory anymore.

14:49.960 --> 14:51.080
You left no trace.

14:51.080 --> 14:52.160
You did what you had to do.

14:52.160 --> 14:55.600
And that's really important for a lot of customers.

14:55.600 --> 14:59.160
And this is one of the most important features of Eds.

14:59.160 --> 15:03.680
It permits you to guarantee that what you're going to boot inside

15:03.680 --> 15:06.320
is going to be as expected.

15:06.320 --> 15:08.160
So I covered that already.

15:08.160 --> 15:12.760
Linux Journal, Linux ID, it contains the standard Linux tools that we need.

15:12.760 --> 15:18.360
And the policy is what is responsible to fixate the user experience.

15:18.360 --> 15:21.680
As a development system, most of your people are developers.

15:21.680 --> 15:26.680
This is a slide pointing exactly in what you should be looking at if you're interested

15:26.680 --> 15:30.640
into contributing or customizing it for yourself.

15:30.640 --> 15:37.440
One of the good things that we have right now is that we produce runs for the platforms

15:37.440 --> 15:38.440
that we support.

15:38.440 --> 15:42.960
So every time that there is a commit made inside of Eds, CircleCI is actually watching

15:42.960 --> 15:43.960
the repository.

15:43.960 --> 15:48.280
And it builds all the runs for all the platforms with different cache systems and everything.

15:48.280 --> 15:49.700
I won't cover that today.

15:49.700 --> 15:51.040
But this is what is cool.

15:51.040 --> 15:57.000
If there is just a change in the policies, the runs will be created inside of five minutes

15:57.000 --> 16:01.600
if we have cache of what was built before.

16:01.600 --> 16:02.600
And that's it.

16:02.600 --> 16:03.960
It contains the ash as well.

16:03.960 --> 16:05.680
Sorry, it's cut at the bottom.

16:05.680 --> 16:11.320
But each run that is produced contains ash of everything that was built.

16:11.320 --> 16:13.880
And it's supposed to be reproducible.

16:13.880 --> 16:18.840
There's funding to make sure that Eds is back as being reproducible.

16:18.840 --> 16:21.400
John Mollison is helping me on that.

16:21.400 --> 16:24.600
It will come in the next year as well.

16:24.600 --> 16:28.960
Why Eds? I think I covered it already.

16:28.960 --> 16:38.280
The main problem that we have with proprietary firmware is that there is duplication of code

16:38.280 --> 16:39.960
in multiple parts.

16:39.960 --> 16:42.280
So we're trying to recreate the wheel.

16:42.280 --> 16:47.240
And the idea behind Eds is that we should not do that if we have already a kernel that

16:47.240 --> 16:50.320
permits us to drive the hardware that we want.

16:50.320 --> 16:58.080
So instead of duplicating at that part here, the drivers to be able to drive the graphics,

16:58.080 --> 17:02.920
to be able to control your keyboard, the bus and everything, the kernel is able to do it

17:02.920 --> 17:05.600
and does it really efficiently.

17:05.600 --> 17:10.440
Another reason why we love dealing with the kernel instead is that we can control the

17:10.440 --> 17:14.720
IOMMU directly at the moment that the kernel is launched from Core Boot.

17:14.720 --> 17:20.280
So at that moment, if we specify that we want to have the graphic card not having the IOMMU

17:20.280 --> 17:24.600
because we're going to boot inside of CubesOS, for example, it can be defined there and it's

17:24.600 --> 17:27.600
going to be properly set up for us.

17:27.600 --> 17:31.240
Okay, 10 minutes.

17:31.240 --> 17:35.400
Yeah, so again, links here if you want to click.

17:35.400 --> 17:39.120
The policy that we use, as I said, is during it right now.

17:39.120 --> 17:43.160
I will cover that more in details later on.

17:43.160 --> 17:49.000
And one of the important changes, I will cover it in what is new in the next slide, is that

17:49.000 --> 17:55.760
we have maximized ROM, maximized ROM or actually complete, it's a valid complete ROM.

17:55.760 --> 18:02.120
It includes Intel ME, it includes an unlike IFD, it includes Core Boot and the packed

18:02.120 --> 18:03.360
kernel.

18:03.360 --> 18:09.960
So the image that are there inside of circle CI as artifacts are actually externally flashable.

18:09.960 --> 18:11.920
We create like top and bottom image.

18:11.920 --> 18:16.860
So if, for example, the X230, when you open it up, there's two SPI chips that you need

18:16.860 --> 18:18.880
to reprogram externally.

18:18.880 --> 18:21.760
Once that is done, you can update internally.

18:21.760 --> 18:26.260
Flash ROM is inside of Edge as well, so you have control and you're able to upgrade as

18:26.260 --> 18:29.000
you want.

18:29.000 --> 18:30.720
Why Edge?

18:30.720 --> 18:32.400
There's extensive TPM usage.

18:32.400 --> 18:42.320
The reason why we like Edge is that there is two sealed secrets inside of the TPM.

18:42.320 --> 18:46.720
The first one is happening the first time that you flash your firmware and it's sealing

18:46.720 --> 18:51.080
like all the measurements that are created from Core Boot.

18:51.080 --> 18:59.160
Core Boot is configured to be in measured boot mode and it extends the TPM, PCR to a

18:59.160 --> 19:00.160
PCR.

19:00.160 --> 19:03.640
Everybody knows what PCRs are in TPM basically.

19:03.640 --> 19:09.440
So all the measurements are being done in the PCR2 from the Core Boot part.

19:09.440 --> 19:14.480
And after that, when Edge starts, when the payload is actually loaded, which was measured

19:14.480 --> 19:20.400
inside of the PCR2, Edge extends a couple of other PCRs which are then used to make

19:20.400 --> 19:26.360
sure that the integrity of the runtime environment is actually the same as expected.

19:26.360 --> 19:29.640
So the first sealed secret when you flash your firmware, the next time you're going

19:29.640 --> 19:35.760
to reboot it, Edge will say, okay, you either don't own the TPM, so you have to own it,

19:35.760 --> 19:39.600
or otherwise it will say, okay, we have a couple of measurements that were provided

19:39.600 --> 19:43.420
by Core Boot in measured boot mode, so we have to seal them.

19:43.420 --> 19:47.960
When you seal them, it will create a QR code which you can scan on your phone, or if you

19:47.960 --> 19:55.080
have like a NutriKey Pro or a Librium key and you use like the HOTP version of the firmware,

19:55.080 --> 20:00.880
it will ask you to seal that secret as well inside of your USB security dongle.

20:00.880 --> 20:10.000
So at that point, you have the measurements of the PCR4, 5, no, it's another slide, sorry.

20:10.000 --> 20:12.580
No, it's not another slide.

20:12.580 --> 20:20.760
So basically you have like the measurements of PCR0123 and 4 that will be like inside

20:20.760 --> 20:25.900
of the first sealed secret which guarantees like the attestation of the firmware.

20:25.900 --> 20:30.400
So you boot your machine, you plug your USB key, it will flash green if the measurements

20:30.400 --> 20:32.860
are good from the firmware alone.

20:32.860 --> 20:36.940
And after that, if you set the default boot configuration, you're actually using all the

20:36.940 --> 20:43.240
other PCR measurements to seal the secret plus the LUX header that is extracted because

20:43.240 --> 20:45.360
we have Crip set up.

20:45.360 --> 20:50.660
And you're going to seal it with a passphrase that you define at that moment, at the moment

20:50.660 --> 20:52.260
of sealing the secret.

20:52.260 --> 20:56.760
So when you're booting, it's what I showed you before like in the other screen that was

20:56.760 --> 21:05.060
here, when it's asking you to type your passphrase, it's making sure that all the measurements

21:05.060 --> 21:10.400
of the PCRs are exactly the same in an attempt of unsealing the secret inside of the TPM.

21:10.400 --> 21:15.040
So at that point, either if your password is bad or the measurements are bad, as will

21:15.040 --> 21:17.260
just refuse to boot your system.

21:17.260 --> 21:22.720
And it will say to you PCR mismatch and at that point you should be worried and investigate.

21:22.720 --> 21:26.520
So that's it for that.

21:26.520 --> 21:27.760
Why is it important?

21:27.760 --> 21:33.120
Because yeah, the secrets that are sealed inside of the TPM memory are actually making

21:33.120 --> 21:38.320
you sure that you're in the state that you expect prior of typing a passphrase.

21:38.320 --> 21:41.700
We're used of typing passphrase in weird environment.

21:41.700 --> 21:43.740
This is an environment that is trusted.

21:43.740 --> 21:48.280
So at that point, like anything that you do inside of ads and that opens the door like

21:48.280 --> 21:53.240
to add more feature will work as defined.

21:53.240 --> 21:56.880
I will go faster because I have only five minutes.

21:56.880 --> 22:03.080
The reason why maximize boards are important is actually that on a OEM version of the firmware,

22:03.080 --> 22:04.840
this is what we have.

22:04.840 --> 22:07.720
The Intel IFD is locked.

22:07.720 --> 22:14.080
The IFD is basically the description of the region inside of the firmware as defined there.

22:14.080 --> 22:16.940
And EMI is also locked.

22:16.940 --> 22:21.360
So if you want to take advantage of all the firmware space that is there to add tools,

22:21.360 --> 22:24.400
you have to unlock the IFD and you have to unlock EMI.

22:24.400 --> 22:30.360
So the reason why the maximized, this is a configuration of the maximized board.

22:30.360 --> 22:34.280
This is the extraction that we have here of the important part.

22:34.280 --> 22:38.960
So flash run here like on the legacy board or if you're coming from IV rain for those

22:38.960 --> 22:43.560
who are interested in that project is that you can only flash the BIOS region.

22:43.560 --> 22:50.040
And the BIOS region is only having eight megabytes by default on the legacy or the OEM version.

22:50.040 --> 22:56.760
So if we externally flash and we nurture any, we're getting more than four megabytes additional.

22:56.760 --> 23:03.800
So if we add that inside of the bias region, we're having like 11.5 or nearly 12 megabytes

23:03.800 --> 23:06.760
of usable space where we can add more feature.

23:06.760 --> 23:10.640
We could even add Python there if we wanted, which is something that I want for a really

23:10.640 --> 23:12.480
long time.

23:12.480 --> 23:15.520
So this is what it looks when it's modified.

23:15.520 --> 23:20.480
Actually you see that the bias region is equivalent like of XBE4FFF.

23:20.480 --> 23:23.640
So basically it's near of 12 megabytes.

23:23.640 --> 23:26.560
Yeah, I covered that.

23:26.560 --> 23:33.760
Basically, the reason why we love it for the redistribution, the issue that we have on

23:33.760 --> 23:38.880
blood redistribution is that inside of the Edge repo, we always the scripts.

23:38.880 --> 23:44.840
The scripts are being called by CircleCI to actually download the images from Lenovo.

23:44.840 --> 23:47.320
We extract them directly on the CI.

23:47.320 --> 23:49.160
We're about to extract ME from there.

23:49.160 --> 23:51.860
We're about to nurture ME from there.

23:51.860 --> 23:57.600
And then CircleCI is responsible to build Corboot, use the module that we extracted,

23:57.600 --> 23:59.260
validated and everything.

23:59.260 --> 24:04.640
And from that moment, we're able from a simple script like that to build a complete run image

24:04.640 --> 24:07.620
and we just dodge the legal issues.

24:07.620 --> 24:15.320
So whatever CircleCI is building like that, I gave it as an example here, provides like

24:15.320 --> 24:18.080
artifacts.

24:18.080 --> 24:20.480
This is a build from CircleCI.

24:20.480 --> 24:24.520
This is like the output of Corboot, which was able to stitch everything together.

24:24.520 --> 24:27.480
And at the end of the build, you have the image I was talking about.

24:27.480 --> 24:31.680
So you have the 12 megabyte full image that is internally flashable.

24:31.680 --> 24:36.960
And you have two images for each commit, which are there provided by the CircleCI for 30

24:36.960 --> 24:39.680
days after the moment of the build.

24:39.680 --> 24:44.520
And that permits you to externally flash and then it permits you to internally flash forever

24:44.520 --> 24:49.240
after.

24:49.240 --> 24:50.760
The OEM was...

24:50.760 --> 24:56.400
Sorry, the Whiptail support is for either servers and BMC.

24:56.400 --> 25:00.160
So it would be usable on the KTP 16.

25:00.160 --> 25:03.640
This is what it would look like from a remote serial connection.

25:03.640 --> 25:09.560
So if you're connected on the BMC remotely, this is exactly what you would see.

25:09.560 --> 25:15.760
The HOTP card dongle could be in your server and the TOTP is what you could check remotely

25:15.760 --> 25:16.840
if the time is good.

25:16.840 --> 25:20.080
And then you have the same option, but console based.

25:20.080 --> 25:26.720
This is what we see if we're having graphical frame buffer on laptops and desktop.

25:26.720 --> 25:33.120
The OEM factory reset, OEM factory reset ownership wizard was upstream.

25:33.120 --> 25:38.020
So it looks like that, asking you what you want to do, giving you options that are really

25:38.020 --> 25:42.200
important if it's not you who have installed your operating system.

25:42.200 --> 25:47.200
This is what I pushed forward because if you don't install your operating system yourself,

25:47.200 --> 25:52.520
then the LUX encryption key could be intercepted.

25:52.520 --> 25:54.880
So you want to reencrypt the content of your drive.

25:54.880 --> 25:59.320
And once again, since we have Unix, we can do that directly inside of it.

25:59.320 --> 26:01.200
You will have like to look at that for yourself.

26:01.200 --> 26:03.960
I won't have time to cover that, but this is what it is.

26:03.960 --> 26:09.160
And the main thing that is really nice for developers is that we now have QMU and QVM

26:09.160 --> 26:12.640
supports with software TPM support.

26:12.640 --> 26:19.560
So all the images, mostly all of the images that I provided were taken from the QMU version.

26:19.560 --> 26:21.840
This is what it looks like when you build it.

26:21.840 --> 26:25.280
So you can inject your key and then after that you can run it.

26:25.280 --> 26:26.280
That's how it looks.

26:26.280 --> 26:31.280
And then you can have your recovery shell directly from the terminal and you will see

26:31.280 --> 26:36.520
the output of WithTale and you can develop and test as you go.

26:36.520 --> 26:37.520
And this is what next.

26:37.520 --> 26:43.000
I'm sorry I won't be able to cover it directly, but I gave link on everything that the work

26:43.000 --> 26:44.000
is happening right now.

26:44.000 --> 26:48.520
TPM2 support is coming, so new boards will be able to have it.

26:48.520 --> 26:53.640
Clean room, GPD key generation is the next thing I'm working on to be able to remove

26:53.640 --> 26:58.360
the need of having your USB security dongle because people want to test it but don't necessarily

26:58.360 --> 27:02.320
want to buy any tricky, which was a problem before.

27:02.320 --> 27:07.120
Right protection is coming, so if you want to look at this and poke me there or any question,

27:07.120 --> 27:10.320
SPI right protection was developed by Triem Dev.

27:10.320 --> 27:15.720
It is now in the PR that is supposed to be merged in the next couple of days when I will

27:15.720 --> 27:17.400
have a time.

27:17.400 --> 27:20.880
International keyboard support will come because right now it's just US keyboard, which is

27:20.880 --> 27:23.240
a problem for a lot of people.

27:23.240 --> 27:28.520
And randomization of the MAC address will be possible directly in the GB partition inside

27:28.520 --> 27:31.120
of Elz and being reflashed.

27:31.120 --> 27:34.000
And this is it folks.

27:34.000 --> 27:35.720
Reference.

27:35.720 --> 27:42.480
I really recommend to watch the original talk on Elz if you have more in-depth questions

27:42.480 --> 27:48.600
because the background didn't change and that's it.

27:48.600 --> 27:49.600
Thank you.

27:49.600 --> 27:55.600
Do we have time for questions?

27:55.600 --> 28:22.920
You said the Talus 2 platform supported?

28:22.920 --> 28:27.600
The question is does the Talus 2 have a TPM chip?

28:27.600 --> 28:29.600
There was a connector that was a really big adventure.

28:29.600 --> 28:31.680
I will try to make it really short.

28:31.680 --> 28:36.160
The port was done like with Triem Dev here and actually there is a TPM connector but

28:36.160 --> 28:38.600
it was not working properly.

28:38.600 --> 28:44.800
So we had like to do research to be able to actually make it work on the pen-out.

28:44.800 --> 28:49.560
But yes, there is no TPM inside because it's against their mentality but you can connect

28:49.560 --> 28:53.240
one but it will be the one that you buy from Triem Dev because...

28:53.240 --> 28:56.200
So you have to add a TPM chip?

28:56.200 --> 28:57.200
You have to add a TPM chip.

28:57.200 --> 29:00.600
But it's available from their shop.

29:00.600 --> 29:01.600
Another question?

29:01.600 --> 29:06.400
Do you do remote attestation if you don't or are you interested in it?

29:06.400 --> 29:08.600
It's something that I don't have.

29:08.600 --> 29:10.720
Do you do remote attestation?

29:10.720 --> 29:12.760
Actually Volbut did it.

29:12.760 --> 29:16.520
Volbut is actually a fork of Elz.

29:16.520 --> 29:21.640
I'm looking into upstreaming the code but I would say that any person that is interested

29:21.640 --> 29:26.720
into that kind of feature, I would guide you to see what they did because they have approval

29:26.720 --> 29:32.920
concept that is really interesting on the Raspberry Pi for remote attestation and there

29:32.920 --> 29:36.400
is a board config for Corboot there as well and everything is there.

29:36.400 --> 29:40.480
It's just trying to upstream but I'm not against it.

29:40.480 --> 29:45.880
But Elz as of right now is more targeting users to actually own and being able to verify

29:45.880 --> 29:46.880
for themselves.

29:46.880 --> 29:47.880
But remote attestation...

29:47.880 --> 29:50.880
Remote attestation server running on your phone via Bluetooth.

29:50.880 --> 29:51.880
Okay.

29:51.880 --> 30:03.080
So the question here would be like is remote attestation possible?

30:03.080 --> 30:06.640
Yes, someone is suggesting to do it remotely on the phone.

30:06.640 --> 30:08.080
It would be totally possible.

30:08.080 --> 30:12.600
Please contact me.

30:12.600 --> 30:14.160
Another question maybe?

30:14.160 --> 30:15.160
No?

30:15.160 --> 30:19.160
Sorry for this dense presentation.

30:19.160 --> 30:22.240
Next presentation I will be better.

30:22.240 --> 30:45.520
Thank you everybody.

1
0:00:00.000 --> 0:00:09.160
So today we will talk about Trustful

2
0:00:09.160 --> 0:00:14.080
Free Platform Module Project.

3
0:00:14.080 --> 0:00:15.880
So hello, I'm Mache.

4
0:00:15.880 --> 0:00:19.040
I am currently Engineering Manager at 3M DEP.

5
0:00:19.040 --> 0:00:22.480
I'm an apostles contributor for several years.

6
0:00:22.480 --> 0:00:25.880
I'm interested in various stuff, build systems.

7
0:00:25.880 --> 0:00:29.520
I enjoy build-rebrosivity especially.

8
0:00:29.520 --> 0:00:32.880
I like embedded systems in general.

9
0:00:32.880 --> 0:00:36.440
I work to several layers with embedded Linux projects.

10
0:00:36.440 --> 0:00:42.200
Now I'm also working with some stuff with Cardboard.

11
0:00:42.200 --> 0:00:46.760
Also, security aspects is what I'm interested in.

12
0:00:46.760 --> 0:00:49.640
You can have some compact information on the slide

13
0:00:49.640 --> 0:00:52.800
if you want to reach me.

14
0:00:52.800 --> 0:00:54.800
Some of you already heard that.

15
0:00:54.800 --> 0:00:58.320
We are a free and deb, a parent-based company

16
0:00:58.320 --> 0:01:00.200
of various variants in the market.

17
0:01:00.200 --> 0:01:03.520
We work mostly in open-source firmware and embedded Linux

18
0:01:03.520 --> 0:01:04.020
areas.

19
0:01:06.640 --> 0:01:11.960
And we are a part of various organizations, various open

20
0:01:11.960 --> 0:01:16.200
source initiatives like Corebook Listener Service Providers

21
0:01:16.200 --> 0:01:17.360
or Reactor Participants.

22
0:01:20.600 --> 0:01:27.520
So to the agenda, so let's start with explaining

23
0:01:27.520 --> 0:01:35.120
what the TWPM project is, why we decided to start one.

24
0:01:35.120 --> 0:01:37.720
We'll talk some stuff about TPM modules.

25
0:01:40.440 --> 0:01:44.880
Then we'll explain how we started such project, what

26
0:01:44.880 --> 0:01:48.320
challenges do we expect, what roadmap we have,

27
0:01:48.320 --> 0:01:50.120
and what's the current state of the project.

28
0:01:53.680 --> 0:01:55.720
So trustful reverse trusted.

29
0:01:55.720 --> 0:02:00.440
So you probably know the trusted platform modules.

30
0:02:00.440 --> 0:02:05.160
So we came up with a trust world free platform module.

31
0:02:05.160 --> 0:02:09.400
So to indicate that the goal would

32
0:02:09.400 --> 0:02:13.480
be to make it a bit more trustworthy than it is today

33
0:02:13.480 --> 0:02:19.600
by providing the open-source firmware for that one.

34
0:02:19.600 --> 0:02:23.560
And the goal also would be to be compliant with the TCGPC client

35
0:02:23.560 --> 0:02:26.960
specification, which might be, in fact, quite difficult

36
0:02:26.960 --> 0:02:28.600
or maybe even impossible.

37
0:02:28.600 --> 0:02:29.200
We'll see.

38
0:02:29.200 --> 0:02:30.520
We will discuss also that later.

39
0:02:33.120 --> 0:02:35.440
But yeah, that's the goal.

40
0:02:35.440 --> 0:02:41.320
The project is funded by the internet, by NGI Azure Fund.

41
0:02:44.800 --> 0:02:49.240
So why we came up with the idea?

42
0:02:49.240 --> 0:02:54.360
The traditional TPMs are dedicated microcontrollers.

43
0:02:54.360 --> 0:03:00.120
And not typically, they always have proprietary firmware,

44
0:03:00.120 --> 0:03:05.200
which can be easily audited, at least not by regular users,

45
0:03:05.200 --> 0:03:09.280
maybe by some governance, maybe.

46
0:03:12.520 --> 0:03:15.400
If there are bugs, they might not

47
0:03:15.400 --> 0:03:19.680
be fixed depending on what the vendor is planning for,

48
0:03:19.680 --> 0:03:24.760
site line TPM module, TPM chip.

49
0:03:24.760 --> 0:03:27.800
There are also capabilities which

50
0:03:27.800 --> 0:03:29.360
might be limited in some cases.

51
0:03:29.360 --> 0:03:31.960
And if there is no firmware update from vendor,

52
0:03:31.960 --> 0:03:36.160
they might not be modified by a user.

53
0:03:36.160 --> 0:03:40.200
There are also several different interfaces,

54
0:03:40.200 --> 0:03:45.640
LPC, which is present mostly on older motherboards,

55
0:03:45.640 --> 0:03:48.040
but it's still commonly used.

56
0:03:48.040 --> 0:03:50.440
There is also SPI, which is typically

57
0:03:50.440 --> 0:03:55.000
present on newer PCs.

58
0:03:55.000 --> 0:03:58.800
And there is also I2RC, which is present mostly

59
0:03:58.800 --> 0:04:01.400
on mobile devices, or also on TALOS.

60
0:04:01.400 --> 0:04:11.000
So another problem is that if you at some point

61
0:04:11.000 --> 0:04:13.000
wanted to buy a TPM module, you probably

62
0:04:13.000 --> 0:04:16.000
know that there are a bunch of different types of connectors

63
0:04:16.000 --> 0:04:21.760
need to get one which is compatible with your mainboard.

64
0:04:21.760 --> 0:04:24.880
Even if they look the same, they are really not.

65
0:04:24.880 --> 0:04:27.280
And if you plug an incompatible one,

66
0:04:27.280 --> 0:04:33.280
you may even break your module or even your mainboard.

67
0:04:33.280 --> 0:04:41.080
For example, we can see LPC connectors for MSI and Asus.

68
0:04:41.080 --> 0:04:41.920
They look the same.

69
0:04:41.920 --> 0:04:44.040
The MTP is in the same place.

70
0:04:44.040 --> 0:04:47.680
But the ground and power is swapped,

71
0:04:47.680 --> 0:04:53.520
so some smoke may happen if you look at Asus to MSI

72
0:04:53.520 --> 0:04:58.160
or all the way around.

73
0:04:58.160 --> 0:05:00.760
Similar stuff for SPI.

74
0:05:00.760 --> 0:05:03.360
Also, connectors look the same at the first glance,

75
0:05:03.360 --> 0:05:05.360
but they are very, very different

76
0:05:05.360 --> 0:05:07.880
for different motherboards.

77
0:05:07.880 --> 0:05:10.560
Even for the same vendor, you can

78
0:05:10.560 --> 0:05:12.720
have different type of connectors,

79
0:05:12.720 --> 0:05:14.000
and there are many, many more.

80
0:05:17.840 --> 0:05:22.600
So at first, we wanted also to address the hardware problem.

81
0:05:22.600 --> 0:05:27.720
But it looks too complex.

82
0:05:27.720 --> 0:05:30.360
We want to focus on just the firmware for start.

83
0:05:33.080 --> 0:05:37.440
The variety of connectors is huge, bigger than anticipated.

84
0:05:41.840 --> 0:05:45.760
So at the state of the project, we focus purely on the firmware

85
0:05:45.760 --> 0:05:50.000
and connect it even by some jumper wires to the motherboard

86
0:05:50.000 --> 0:05:52.080
just to have some proof of concept in the firmware.

87
0:05:52.080 --> 0:05:55.840
And then we can worry about some other stuff.

88
0:05:59.600 --> 0:06:01.560
So how can we start with the project?

89
0:06:01.560 --> 0:06:09.320
We need some code to process our TPM2 commands.

90
0:06:09.320 --> 0:06:14.200
There are a few simulators or command processors out there.

91
0:06:14.200 --> 0:06:19.640
At least we know of two of them, the Microsoft implementation,

92
0:06:19.640 --> 0:06:24.960
which provides simulator code for various OSs.

93
0:06:24.960 --> 0:06:29.080
There are also some interesting samples in that repository.

94
0:06:29.080 --> 0:06:30.960
There is FTP and trusted application

95
0:06:30.960 --> 0:06:33.640
for us, Parham TransZone.

96
0:06:33.640 --> 0:06:40.000
And there are also some samples for STM32, Nucleo,

97
0:06:40.000 --> 0:06:46.560
which is what we will be interested the most.

98
0:06:46.560 --> 0:06:51.440
And then we also have a simulator from IBM.

99
0:06:51.440 --> 0:06:52.720
Maybe there is some more.

100
0:06:52.720 --> 0:06:56.280
I think these two are the most popular ones.

101
0:06:59.600 --> 0:07:02.520
So we took a look at the Nucleo sample

102
0:07:02.520 --> 0:07:07.720
we just mentioned just before from the Microsoft TPM reference

103
0:07:07.720 --> 0:07:09.840
stack.

104
0:07:09.840 --> 0:07:13.160
So it was created like four years ago,

105
0:07:13.160 --> 0:07:18.320
contributed, and it's not either maintained or tested.

106
0:07:18.320 --> 0:07:22.840
So there is no single person who knows if it ever worked,

107
0:07:22.840 --> 0:07:23.400
basically.

108
0:07:27.000 --> 0:07:29.880
It looks like it was developed in a Tonic True Studio, which

109
0:07:29.880 --> 0:07:32.400
is another existing software.

110
0:07:32.400 --> 0:07:38.360
Currently, it was replaced by some other STM32 integrated

111
0:07:38.360 --> 0:07:39.480
development environment.

112
0:07:39.480 --> 0:07:46.760
And we also asked about the status in general of the sample

113
0:07:46.760 --> 0:07:47.800
codes.

114
0:07:47.800 --> 0:07:51.680
So the answer is that these are just

115
0:07:51.680 --> 0:07:53.120
contributed at some point in time

116
0:07:53.120 --> 0:07:55.680
and may or may not work currently.

117
0:07:59.000 --> 0:08:03.400
So we took a closer look at that piece of code.

118
0:08:03.400 --> 0:08:07.680
We have converted the project into the newer programs.

119
0:08:07.680 --> 0:08:11.320
We're able to build at least to a certain point

120
0:08:11.320 --> 0:08:16.000
to at least run it on the Nucleo board.

121
0:08:16.000 --> 0:08:18.360
We noticed there is some VCOM application.

122
0:08:18.360 --> 0:08:20.640
It was presumably used for testing the solution

123
0:08:20.640 --> 0:08:25.080
on the application for Windows.

124
0:08:25.080 --> 0:08:28.440
We haven't even tried to bother with that.

125
0:08:28.440 --> 0:08:32.120
In fact, as we know, what kind it might be

126
0:08:32.120 --> 0:08:38.600
to build some old Visual Studio stuff.

127
0:08:38.600 --> 0:08:39.720
But we look at the code.

128
0:08:39.720 --> 0:08:44.960
We saw that the STM32 code can accept TPM commands via USB

129
0:08:44.960 --> 0:08:46.200
CDC.

130
0:08:46.200 --> 0:08:47.160
It can process it.

131
0:08:47.160 --> 0:08:53.440
It can return some response, or some simple command response

132
0:08:53.440 --> 0:08:56.160
was there.

133
0:08:56.160 --> 0:08:58.840
But what was important is some custom protocol

134
0:08:58.840 --> 0:09:00.720
was involved here.

135
0:09:00.720 --> 0:09:03.600
So there was no interoperability with existing tools,

136
0:09:03.600 --> 0:09:08.720
such as TPM tools stack, or with existing TPM interfaces,

137
0:09:08.720 --> 0:09:11.080
because it was a very custom one.

138
0:09:11.080 --> 0:09:14.840
And the interoperability is a major goal of this project

139
0:09:14.840 --> 0:09:15.340
as well.

140
0:09:18.320 --> 0:09:25.200
Also, the resources on the NCEU was quite low.

141
0:09:25.200 --> 0:09:27.200
So at this point, we had a rough idea

142
0:09:27.200 --> 0:09:31.720
of what we have to face with.

143
0:09:31.720 --> 0:09:38.760
So we want to also show how different the flow is

144
0:09:38.760 --> 0:09:45.160
for the TPM2 simulator versus the TPM2 actual hardware.

145
0:09:45.160 --> 0:09:47.720
The block on the top is, we can say,

146
0:09:47.720 --> 0:09:52.760
what Microsoft or IBM reference implementation provides.

147
0:09:52.760 --> 0:09:56.720
It just provides TPM2 command processing.

148
0:09:56.720 --> 0:09:58.400
For the simulator, that's fine.

149
0:09:58.400 --> 0:10:05.240
It uses sockets and communicates with the TPM2 software

150
0:10:05.240 --> 0:10:07.880
stack in the OS directly.

151
0:10:07.880 --> 0:10:09.440
But in case of the hardware, you need

152
0:10:09.440 --> 0:10:11.720
to plug in the actual module to the motherboard.

153
0:10:11.720 --> 0:10:13.880
So we need all of the plumbing.

154
0:10:13.880 --> 0:10:17.760
So there are also dedicated specifications

155
0:10:17.760 --> 0:10:19.040
on that in the TCG.

156
0:10:19.040 --> 0:10:24.800
So those are the orange blocks that

157
0:10:24.800 --> 0:10:28.880
needs to be implemented in the firmware.

158
0:10:28.880 --> 0:10:32.160
So we need all of the plumbing to pass the commands

159
0:10:32.160 --> 0:10:37.440
from the microcontroller through the motherboard connectors

160
0:10:37.440 --> 0:10:43.240
to the OS drivers, and then at last to the TPM2 software

161
0:10:43.240 --> 0:10:44.640
stack in the operating system.

162
0:10:48.560 --> 0:10:53.840
What are the challenges, current and expected?

163
0:10:53.840 --> 0:10:57.520
One of the first was the global chip shortage,

164
0:10:57.520 --> 0:10:59.280
which happened in the meantime.

165
0:10:59.280 --> 0:11:04.200
So even if you wanted to use the STM32L4,

166
0:11:04.200 --> 0:11:08.200
it was no longer available to the source.

167
0:11:08.200 --> 0:11:14.120
The other microcontroller was also quite difficult to get.

168
0:11:14.120 --> 0:11:19.680
And the project in the samples was developed

169
0:11:19.680 --> 0:11:26.360
using the hardware abstraction layer from STM.

170
0:11:26.360 --> 0:11:28.520
And if you wanted to switch to another hardware,

171
0:11:28.520 --> 0:11:32.400
you would need to rewrite that thing at least to some point

172
0:11:32.400 --> 0:11:34.080
to another hardware abstraction layer,

173
0:11:34.080 --> 0:11:37.080
and then the chip becomes unavailable,

174
0:11:37.080 --> 0:11:41.040
and that would go on forever.

175
0:11:41.040 --> 0:11:45.200
Also, we do not have the requirements

176
0:11:45.200 --> 0:11:47.960
clarified that were at that point.

177
0:11:47.960 --> 0:11:50.800
So we believe that what must be done

178
0:11:50.800 --> 0:11:55.240
is to have some OS handling the TPM stack.

179
0:11:55.240 --> 0:12:01.880
So we are looking into ZFRA OS to have some better hardware

180
0:12:01.880 --> 0:12:08.720
coverage and just implement the TPM stack in the ZFRA OS.

181
0:12:08.720 --> 0:12:10.680
So we can switch between boards more easily.

182
0:12:10.680 --> 0:12:18.320
Another challenge is different types of timing problems.

183
0:12:18.320 --> 0:12:24.720
The TCG specification requires some timing

184
0:12:24.720 --> 0:12:27.640
at different levels on the hardware level.

185
0:12:27.640 --> 0:12:34.880
For example, some registers must respond in some milliseconds

186
0:12:34.880 --> 0:12:35.360
and so on.

187
0:12:35.360 --> 0:12:40.560
It might be difficult to achieve such responsiveness

188
0:12:40.560 --> 0:12:43.640
on just a microcontroller.

189
0:12:43.640 --> 0:12:48.480
Maybe we will need to fall back to FPGA in some cases.

190
0:12:48.480 --> 0:12:52.160
Definitely, we need to fall back to FPGA for LPC interface,

191
0:12:52.160 --> 0:12:56.360
which is not existent on general purpose microcontrollers.

192
0:12:56.360 --> 0:13:01.080
So we are developing a hardware block in FPGA for that.

193
0:13:04.200 --> 0:13:06.480
There are also some NVRAM improvements

194
0:13:06.480 --> 0:13:11.000
which can be made, and as said before,

195
0:13:11.000 --> 0:13:13.400
a full compliance might be quite difficult

196
0:13:13.400 --> 0:13:17.320
or might be even impossible to achieve.

197
0:13:17.320 --> 0:13:21.280
For example, in case of the strict initialization time

198
0:13:21.280 --> 0:13:24.920
and power requirements, because the power requirements are

199
0:13:24.920 --> 0:13:28.720
quite low, I don't remember the exact value right now,

200
0:13:28.720 --> 0:13:34.360
but typical microcontroller plus FPGA and also the boot time

201
0:13:34.360 --> 0:13:36.040
might be challenging here.

202
0:13:36.040 --> 0:13:37.840
It's a lot of moving parts.

203
0:13:37.840 --> 0:13:39.280
We are still looking into that.

204
0:13:43.440 --> 0:13:50.000
So the roadmap, the first step on the project plan

205
0:13:50.000 --> 0:13:52.040
was public side view to documentation.

206
0:13:52.040 --> 0:13:55.560
So that one is already live, although there is not

207
0:13:55.560 --> 0:13:56.960
much content there yet.

208
0:13:56.960 --> 0:14:01.240
We are just starting, we can say.

209
0:14:01.240 --> 0:14:02.960
But what's there is already there.

210
0:14:02.960 --> 0:14:05.000
We have already some structure.

211
0:14:05.000 --> 0:14:10.000
And the roadmap is also public.

212
0:14:10.000 --> 0:14:13.320
Then the hardware, as mentioned before,

213
0:14:13.320 --> 0:14:15.840
we started with the nuclear as it was supported

214
0:14:15.840 --> 0:14:19.560
by the Microsoft samples.

215
0:14:19.560 --> 0:14:22.960
We're still exploring that, but just probably not

216
0:14:22.960 --> 0:14:25.040
enough of a hardware to accomplish

217
0:14:25.040 --> 0:14:26.880
the goals of this project.

218
0:14:26.880 --> 0:14:28.800
Another one we are exploring right now

219
0:14:28.800 --> 0:14:33.960
is one which is based on the EOS S3 SoC.

220
0:14:33.960 --> 0:14:39.360
It combines Cortex-M4 and FPGA in a single chip.

221
0:14:39.360 --> 0:14:44.280
That might be interesting to have a Cortex-M4 for TPM to stack

222
0:14:44.280 --> 0:14:50.360
and to have some FPGA for fast response and LPC communication.

223
0:14:55.160 --> 0:14:58.480
The far point which we are working on right now

224
0:14:58.480 --> 0:15:05.600
is LPC implementation, FPGA.

225
0:15:05.600 --> 0:15:10.000
So that's required to target the mainboards which

226
0:15:10.000 --> 0:15:15.440
are currently in the market, which have only the LPC

227
0:15:15.440 --> 0:15:16.080
interface.

228
0:15:18.880 --> 0:15:21.880
Then we need to implement also all of the plumbing I showed

229
0:15:21.880 --> 0:15:25.280
before on the slides.

230
0:15:25.280 --> 0:15:29.360
So TPM registers as defined in the specification.

231
0:15:29.360 --> 0:15:32.480
Also there is some specialized FIFA protocol

232
0:15:32.480 --> 0:15:41.640
to pass the commands between the TPM and the host.

233
0:15:45.840 --> 0:15:51.920
So that's a screenshot of some testing at the LPC module.

234
0:15:51.920 --> 0:15:58.400
We are using Verilock Ecos, I believe, for creating the data

235
0:15:58.400 --> 0:16:02.600
and GTK way for drawing that out currently.

236
0:16:06.000 --> 0:16:08.720
Then some testing is also necessary.

237
0:16:08.720 --> 0:16:12.200
We are already preparing some test cases.

238
0:16:12.200 --> 0:16:15.840
We can start preparing them based on the regular TPM

239
0:16:15.840 --> 0:16:16.400
modules.

240
0:16:16.400 --> 0:16:20.360
And we want to expect that our module will

241
0:16:20.360 --> 0:16:22.560
meet the same criteria.

242
0:16:22.560 --> 0:16:26.240
Of course, we'll add some specific test cases later on

243
0:16:26.240 --> 0:16:28.880
as well.

244
0:16:28.880 --> 0:16:32.320
SPI protocol is also tricky, even though it

245
0:16:32.320 --> 0:16:37.280
should be simpler in theory because the typical MCUs have

246
0:16:37.280 --> 0:16:38.640
SPI.

247
0:16:38.640 --> 0:16:45.000
But typically they are tested, let's say, in master mode,

248
0:16:45.000 --> 0:16:46.680
not in the slave mode.

249
0:16:46.680 --> 0:16:49.600
That's the most common case.

250
0:16:49.600 --> 0:16:51.640
And also the frequency is limited.

251
0:16:51.640 --> 0:16:55.840
The frequency of SPI on motherboards

252
0:16:55.840 --> 0:16:59.560
is like 40, can be 40 megahertz or more.

253
0:16:59.560 --> 0:17:04.600
But typical SPI on, for example, the STM32

254
0:17:04.600 --> 0:17:07.160
is advertised to up to 24 megahertz.

255
0:17:07.160 --> 0:17:10.440
But in reality, we have not been able to achieve that event

256
0:17:10.440 --> 0:17:11.400
so far.

257
0:17:11.400 --> 0:17:17.400
So that also might be difficult. And maybe also

258
0:17:17.400 --> 0:17:21.120
FPGA can help you to achieve the timing requirements we need.

259
0:17:25.840 --> 0:17:28.280
The eight point is exactly exploring

260
0:17:28.280 --> 0:17:32.120
the usage of simpler hardware platforms.

261
0:17:32.120 --> 0:17:36.200
So maybe we were hoping that maybe we

262
0:17:36.200 --> 0:17:41.760
can achieve at least SPI connection on a board

263
0:17:41.760 --> 0:17:42.680
without FPGA.

264
0:17:42.680 --> 0:17:47.880
That would be simpler and would give more users

265
0:17:47.880 --> 0:17:52.600
ability to test that out, at least on even Raspberry Pi

266
0:17:52.600 --> 0:17:58.440
or with the motherboard so they can push that forward

267
0:17:58.440 --> 0:18:03.760
and have some TPM module on some regular development boards

268
0:18:03.760 --> 0:18:04.260
even.

269
0:18:04.260 --> 0:18:16.780
So I already mentioned some TPM stack improvements.

270
0:18:16.780 --> 0:18:21.020
Sorry, the flash drive for TPM stack improvements.

271
0:18:24.020 --> 0:18:28.820
For example, the more test suites,

272
0:18:28.820 --> 0:18:32.660
there are some problems we already seen with what was there.

273
0:18:32.660 --> 0:18:35.220
There is no Redundancy at least.

274
0:18:35.220 --> 0:18:40.700
Maybe also encryption because the SPI could be read out

275
0:18:40.700 --> 0:18:42.420
from the board.

276
0:18:42.420 --> 0:18:45.260
But we may leave the encryption for later.

277
0:18:45.260 --> 0:18:48.140
But at least we would like to have the Redundancy

278
0:18:48.140 --> 0:18:53.100
because otherwise it would be quite easy to pick the TPM

279
0:18:53.100 --> 0:18:55.300
boards, which is not what we want.

280
0:18:58.140 --> 0:19:00.680
We also need some unique identification

281
0:19:00.680 --> 0:19:03.460
and some source of entropy.

282
0:19:03.460 --> 0:19:09.580
That would be required to have some unique ID for each device.

283
0:19:09.580 --> 0:19:14.620
And we need some entropy for cryptographic operations.

284
0:19:14.620 --> 0:19:15.740
This is left for later.

285
0:19:15.740 --> 0:19:17.420
We will see what kind of hardware

286
0:19:17.420 --> 0:19:19.620
we will end up in the end.

287
0:19:19.620 --> 0:19:23.340
We might use some hardware specific features.

288
0:19:23.340 --> 0:19:32.740
And if not, maybe we can use FPGA finally.

289
0:19:32.740 --> 0:19:36.380
Manufacturing, as you might know,

290
0:19:36.380 --> 0:19:41.260
each TPM must contain unique key, endorsement key,

291
0:19:41.260 --> 0:19:45.780
and also certificate related to that.

292
0:19:45.780 --> 0:19:49.500
So we might provide a way for a user

293
0:19:49.500 --> 0:19:55.860
to generate the endorsement key for their TPM.

294
0:19:55.860 --> 0:19:58.740
So just to provide some scripts and procedures

295
0:19:58.740 --> 0:20:02.460
how they can provision the TPM device.

296
0:20:07.720 --> 0:20:11.020
And then also we imagine that it would

297
0:20:11.020 --> 0:20:14.580
be nice to have some nice built system

298
0:20:14.580 --> 0:20:19.140
so we can configure what kind of interface I want to target.

299
0:20:19.140 --> 0:20:22.940
I have a motherboard with SPI, so I just

300
0:20:22.940 --> 0:20:25.580
flip the SPI switch, rebuild the project.

301
0:20:25.580 --> 0:20:30.100
I check the hash algorithm I'm interested in.

302
0:20:30.100 --> 0:20:37.060
I choose what kind of hardware entropy I'm interested in.

303
0:20:37.060 --> 0:20:39.020
And the goal here is to make the transition

304
0:20:39.020 --> 0:20:40.460
between the boards more easy.

305
0:20:40.460 --> 0:20:44.900
I can plug out my TPM, flush another firmware,

306
0:20:44.900 --> 0:20:48.540
and use it on my new motherboard, which now supports SPI

307
0:20:48.540 --> 0:20:50.860
and previously it was like LPC.

308
0:20:55.540 --> 0:20:59.420
What's currently in progress is the LPC module

309
0:20:59.420 --> 0:21:00.940
I showed the screenshot from.

310
0:21:04.540 --> 0:21:10.180
The next TPM registers will be implemented.

311
0:21:10.180 --> 0:21:13.460
We want to pursue as much as we can in the FPGA,

312
0:21:13.460 --> 0:21:15.940
also in the simulation, before we

313
0:21:15.940 --> 0:21:18.860
stick to serving hardware.

314
0:21:18.860 --> 0:21:23.220
And we also need to determine how big of the FPGAs

315
0:21:23.220 --> 0:21:24.300
would be required here.

316
0:21:27.100 --> 0:21:30.440
We also in the parallel exploring the path of not using

317
0:21:30.440 --> 0:21:38.100
FPGA and using SPI for on the STM or under microcontroller.

318
0:21:38.100 --> 0:21:41.700
Maybe even if we could reduce the frequency to lower,

319
0:21:41.700 --> 0:21:44.420
use it with the Raspberry Pi as a proof of concept that

320
0:21:44.420 --> 0:21:48.540
would already be quite an achievement, I believe.

321
0:21:48.540 --> 0:21:53.980
Maybe even if it wouldn't work with the regular mainboards,

322
0:21:53.980 --> 0:21:55.860
maybe after some time it could be improved.

323
0:21:55.860 --> 0:22:00.860
But it could be a nice step forward.

324
0:22:00.860 --> 0:22:03.020
And dogs, we are working on the dogs.

325
0:22:03.020 --> 0:22:07.980
They will be progressively filled with the results

326
0:22:07.980 --> 0:22:09.660
of our parallel to work.

327
0:22:09.660 --> 0:22:16.260
Yes, if you are interested in the progress

328
0:22:16.260 --> 0:22:18.300
and maybe want to contribute, maybe

329
0:22:18.300 --> 0:22:22.140
want to discuss about the project and create it,

330
0:22:22.140 --> 0:22:29.020
start you can join our communication channels.

331
0:22:29.020 --> 0:22:35.580
On the other hand, if you want to join the team or work daily

332
0:22:35.580 --> 0:22:38.340
on open source signal projects, you

333
0:22:38.340 --> 0:22:42.180
might approach me directly or use contact information

334
0:22:42.180 --> 0:22:45.020
from the next slide.

335
0:22:45.020 --> 0:22:46.700
So that would be it.

336
0:22:46.700 --> 0:22:49.340
And we might have some questions.

337
0:22:52.940 --> 0:22:53.980
Yes.

338
0:22:53.980 --> 0:22:56.940
You mentioned the timing of problems.

339
0:22:56.940 --> 0:23:03.140
Have you looked into how the system behaves if you delay?

340
0:23:03.140 --> 0:23:05.540
Maybe they are.

341
0:23:05.540 --> 0:23:08.660
Will things not work if you are too late

342
0:23:08.660 --> 0:23:11.300
answering some things?

343
0:23:11.300 --> 0:23:13.780
So I'm not sure if I follow exactly.

344
0:23:13.780 --> 0:23:19.220
You're asking about some timing issues we had.

345
0:23:19.220 --> 0:23:23.060
There are some timings defined by the TCG specification.

346
0:23:23.060 --> 0:23:26.700
So for example, they say the given command,

347
0:23:26.700 --> 0:23:31.620
TPM to command, must respond with the given time.

348
0:23:31.620 --> 0:23:33.380
So that's one.

349
0:23:33.380 --> 0:23:36.860
If you don't respond in that time, what happens?

350
0:23:36.860 --> 0:23:39.620
And did you look into that?

351
0:23:39.620 --> 0:23:42.860
We are not at the stage even currently.

352
0:23:42.860 --> 0:23:44.620
We are at the lower layer.

353
0:23:44.620 --> 0:23:47.740
So we are trying to get the planning done

354
0:23:47.740 --> 0:23:50.340
so we can even send one command.

355
0:23:50.340 --> 0:23:52.380
But on the lower level, yes, there

356
0:23:52.380 --> 0:23:55.420
are also problems with timing.

357
0:23:55.420 --> 0:23:57.980
At least on the SPI part, for example,

358
0:23:57.980 --> 0:24:02.980
we had a problem that the STM32 we've been using

359
0:24:02.980 --> 0:24:06.300
doesn't give us the enough flexibility

360
0:24:06.300 --> 0:24:10.100
that we needed to follow this back in some cases.

361
0:24:10.100 --> 0:24:14.540
There is SPI IP block, which can just send and receive

362
0:24:14.540 --> 0:24:16.740
some data over the SPI.

363
0:24:16.740 --> 0:24:23.540
But if you would want to specify some more,

364
0:24:23.540 --> 0:24:26.780
like at the start of the transmission,

365
0:24:26.780 --> 0:24:30.740
pull that line down or up, that might be more tricky to do

366
0:24:30.740 --> 0:24:31.300
as well.

367
0:24:31.300 --> 0:24:34.500
So maybe the FPGA would also help here.

368
0:24:37.980 --> 0:24:38.500
Yes?

369
0:24:38.500 --> 0:24:41.980
I have a couple questions about FPGA.

370
0:24:41.980 --> 0:24:45.460
Have you selected an FPGA?

371
0:24:45.460 --> 0:24:49.060
So the question was, if we selected FPGA, no.

372
0:24:49.060 --> 0:24:53.780
As I said, we are just exploring the hardware on the right.

373
0:24:53.780 --> 0:24:56.340
So they use S3 SOC.

374
0:24:56.340 --> 0:25:01.220
So that one has Cortex M4 and FPGA integrated.

375
0:25:01.220 --> 0:25:07.300
We need the one SOC, and that's the one we are analyzing right

376
0:25:07.300 --> 0:25:07.780
now.

377
0:25:07.780 --> 0:25:12.500
Maybe it would be fit for the project.

378
0:25:12.500 --> 0:25:17.180
If you wanted to use FPGA only, because what is also important

379
0:25:17.180 --> 0:25:22.980
here is that we require we need CPU to process the TPM stack

380
0:25:22.980 --> 0:25:24.180
commands.

381
0:25:24.180 --> 0:25:33.460
So either we can use hard CPU like that with FPGA combined,

382
0:25:33.460 --> 0:25:39.180
or we need to use full-blown FPGA, soft call, and so on.

383
0:25:39.180 --> 0:25:41.380
And that's another complexity.

384
0:25:41.380 --> 0:25:44.780
We might be not also not that much experience with that,

385
0:25:44.780 --> 0:26:02.900
because we need to run the TPM stack on the CPU.

386
0:26:02.900 --> 0:26:06.740
So the question is, if we need to use internal flash

387
0:26:06.740 --> 0:26:09.700
so that flash is not pampered with,

388
0:26:09.700 --> 0:26:11.460
yes, that would be preferable, of course.

389
0:26:11.460 --> 0:26:14.940
But at this point, we are flexible enough

390
0:26:14.940 --> 0:26:16.980
to just have anything working, prove

391
0:26:16.980 --> 0:26:20.020
that it's even feasible with some limitations,

392
0:26:20.020 --> 0:26:21.540
even if the flash is separate.

393
0:26:21.540 --> 0:26:23.780
It can be read out.

394
0:26:23.780 --> 0:26:25.300
We might not care right now.

395
0:26:25.300 --> 0:26:29.020
We focus on the most important part

396
0:26:29.020 --> 0:26:32.620
to even prove that it's feasible or not.

397
0:26:32.620 --> 0:26:39.660
And maybe other stuff can be handled later

398
0:26:39.660 --> 0:26:42.740
once we prove that we can do it or not.

399
0:26:42.740 --> 0:26:45.260
Yeah?

400
0:26:45.260 --> 0:26:45.740
The hardware?

401
0:26:45.740 --> 0:26:47.580
It's actually right that your problem

402
0:26:47.580 --> 0:26:51.140
is that you're trying to receive data over SPI.

403
0:26:51.140 --> 0:26:55.660
Essentially, your device tries to be an SPI slave,

404
0:26:55.660 --> 0:26:59.620
but the SDM 32 SPI is not flexible enough.

405
0:26:59.620 --> 0:27:05.260
And you want to report that M. Is that right?

406
0:27:05.260 --> 0:27:08.980
So yes, it's right that we want to be a SPI slave,

407
0:27:08.980 --> 0:27:10.940
because the main board is master.

408
0:27:10.940 --> 0:27:11.460
Yeah?

409
0:27:11.460 --> 0:27:11.960
Right.

410
0:27:11.960 --> 0:27:20.940
So are you aware of chip lineup from Cypress of the feedback?

411
0:27:20.940 --> 0:27:25.980
It's like a perfect tab plus a little bit of not really

412
0:27:25.980 --> 0:27:31.940
FPGA but programmable code, which you can configure to some degree.

413
0:27:31.940 --> 0:27:32.420
Probably.

414
0:27:32.420 --> 0:27:39.340
If you implement your custom SPI handling in the M,

415
0:27:39.340 --> 0:27:42.340
you will still get the perfect M to handle all the actual

416
0:27:42.340 --> 0:27:42.940
processing stuff.

417
0:27:42.940 --> 0:27:43.460
OK.

418
0:27:43.460 --> 0:27:45.820
So there is a suggestion from the audience on the Cypress

419
0:27:45.820 --> 0:27:46.340
series.

420
0:27:46.340 --> 0:27:47.740
BSoC.

421
0:27:47.740 --> 0:27:49.140
BSoC, yeah?

422
0:27:49.140 --> 0:27:51.860
So I don't think we have considered that so far.

423
0:27:51.860 --> 0:27:54.700
So thank you for that.

424
0:27:54.700 --> 0:28:02.260
From the hardware with hard CPU plus FPGA,

425
0:28:02.260 --> 0:28:05.940
we found so far like the EOS S3, which we're looking into.

426
0:28:05.940 --> 0:28:09.980
It has some support, which is a plus, of course.

427
0:28:09.980 --> 0:28:14.420
There are, I think, also one board from Goin, like Tank

428
0:28:14.420 --> 0:28:15.100
Nano.

429
0:28:15.100 --> 0:28:17.820
It was the name, I think.

430
0:28:17.820 --> 0:28:22.740
So thanks for checking out the Cypress BSoC.

431
0:28:22.740 --> 0:28:23.980
Yeah?

432
0:28:23.980 --> 0:28:29.140
Did you consider trying to get an emulator-based development

433
0:28:29.140 --> 0:28:33.620
environment working, maybe using some like QMU so that you are

434
0:28:33.620 --> 0:28:36.700
sort of decoupling your hardware debug from your software

435
0:28:36.700 --> 0:28:37.700
debug.

436
0:28:37.700 --> 0:28:42.420
And depending on that QMU, you can implement the virtual LPC

437
0:28:42.420 --> 0:28:45.700
and SPI devices.

438
0:28:45.700 --> 0:28:50.940
And it also has a Cortex-M emulator, QMU as well.

439
0:28:50.940 --> 0:28:54.540
So perhaps you're just thinking perhaps that might be a

440
0:28:54.540 --> 0:28:56.060
possibility.

441
0:28:56.060 --> 0:28:59.220
So the question is if we consider some emulator

442
0:28:59.220 --> 0:29:02.180
development environments.

443
0:29:02.180 --> 0:29:08.460
So as I showed, we are right now exploring some, at least

444
0:29:08.460 --> 0:29:11.860
for the FPGA part, we start with simulation.

445
0:29:11.860 --> 0:29:15.020
And we developed like LPC slave and host.

446
0:29:15.020 --> 0:29:18.700
And we can test that out in a simulation for simulating the

447
0:29:18.700 --> 0:29:23.540
whole Cortex-M. We have not done so far.

448
0:29:23.540 --> 0:29:26.300
Maybe that's also something to consider.

449
0:29:33.260 --> 0:29:34.100
Any more questions?

450
0:29:34.100 --> 0:29:35.380
We can have one more, I believe.

451
0:29:38.500 --> 0:29:39.740
OK.

452
0:29:39.740 --> 0:29:41.020
OK.

453
0:29:41.020 --> 0:29:54.180
It's a big risk to, let's say, move away from the hardware

454
0:29:54.180 --> 0:29:55.180
part first.

455
0:29:55.180 --> 0:30:01.180
Because a big part of using a TPM is actually being a trusted

456
0:30:01.180 --> 0:30:04.180
device, somewhere you come back, and it's usable, though

457
0:30:04.180 --> 0:30:05.180
it's virtual.

458
0:30:05.180 --> 0:30:08.180
And by now, putting a lot of folks in the software and just

459
0:30:08.180 --> 0:30:09.180
kind of ignoring the hardware part.

460
0:30:09.180 --> 0:30:23.900
So the question is, I believe, if we have, let's say, software

461
0:30:23.900 --> 0:30:28.980
film-aligning on the STM32, and how we can make sure that the

462
0:30:28.980 --> 0:30:31.220
software was not tampered with, for example.

463
0:30:31.220 --> 0:30:32.220
Yeah?

464
0:30:32.220 --> 0:30:36.220
Yeah, tampered or maybe extracted or whatever.

465
0:30:36.220 --> 0:30:36.940
OK.

466
0:30:36.940 --> 0:30:40.380
Also, we know there are existing mechanisms, for

467
0:30:40.380 --> 0:30:45.100
example, for different vectors have already microcontrollers,

468
0:30:45.100 --> 0:30:47.900
different types of secure boots, and so on.

469
0:30:47.900 --> 0:30:51.340
So we can verify if it's our firmware, if it's signed.

470
0:30:51.340 --> 0:30:54.620
User can sign its own firmware, and otherwise the

471
0:30:54.620 --> 0:30:56.820
firmware wouldn't boot, for example.

472
0:30:56.820 --> 0:30:59.060
I believe, once we have the functionality, there are

473
0:30:59.060 --> 0:31:04.300
already existing mechanisms that can prove that the

474
0:31:04.300 --> 0:31:08.140
firmware was not tampered with.

475
0:31:08.140 --> 0:31:11.580
But that's my understanding.

476
0:31:11.580 --> 0:31:13.300
OK, so we are out of time.

477
0:31:13.300 --> 0:31:36.460
Thank you.


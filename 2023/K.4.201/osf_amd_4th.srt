1
0:00:00.000 --> 0:00:12.880
Hello and welcome to my open source firmware status on AMD platforms presentation.

2
0:00:12.880 --> 0:00:14.560
My name is Michal Zhygowski.

3
0:00:14.560 --> 0:00:16.520
I'm a firmware engineer from Freedom Depth.

4
0:00:16.520 --> 0:00:18.080
We are based in Poland.

5
0:00:18.080 --> 0:00:25.680
I'm a Kerbernet guy mainly developing support for various platforms, mainly inter-platforms.

6
0:00:25.680 --> 0:00:31.440
I also maintain the Braswell SoC, PC Engine platforms.

7
0:00:31.440 --> 0:00:37.160
I'm also at the OpenPower system software technical work group chair.

8
0:00:37.160 --> 0:00:45.200
And I'm basically playing with open source firmware since 2017.

9
0:00:45.200 --> 0:00:50.040
For those who do not know Freedom Depth, we are in various places.

10
0:00:50.040 --> 0:00:53.640
Like we're Kerbernet license service providers, we're UFI adopters.

11
0:00:53.640 --> 0:01:00.560
We also provide FWD, the firmware update project consultation services.

12
0:01:00.560 --> 0:01:05.160
And also we do some Yacht stuff.

13
0:01:05.160 --> 0:01:09.560
So a little bit of information that I will use throughout the presentation about the

14
0:01:09.560 --> 0:01:11.320
micro-ecitectures.

15
0:01:11.320 --> 0:01:18.160
So in previous years I have been talking about various older platforms as well like for PC

16
0:01:18.160 --> 0:01:24.320
Engine, APU1, KGP, D16, APU2.

17
0:01:24.320 --> 0:01:32.400
All micro-ecitectures called Puma, Baldoser, Pile Driver and so on.

18
0:01:32.400 --> 0:01:42.600
So I have based on some sample platforms so that you can sort of imagine what I'm talking

19
0:01:42.600 --> 0:01:45.120
about if I mention some platforms.

20
0:01:45.120 --> 0:01:50.520
And there are also the newer mobile socks from the Ryzen series which are supported

21
0:01:50.520 --> 0:01:51.520
by Corewood.

22
0:01:51.520 --> 0:01:55.160
This is Picasso and Cezanne micro-ecitectures.

23
0:01:55.160 --> 0:02:00.360
These are the newer APU series from the Zencore architecture.

24
0:02:00.360 --> 0:02:06.800
And also I will be talking about the newest developments like the Mendocino, Phoenix and

25
0:02:06.800 --> 0:02:09.080
Glinda socks.

26
0:02:09.080 --> 0:02:14.640
Note that they could be previously known as under different names because the original,

27
0:02:14.640 --> 0:02:16.960
the target names were actually embargoed.

28
0:02:16.960 --> 0:02:25.480
So you may have heard of Sabrina or Morgana socks as well earlier that were being developed

29
0:02:25.480 --> 0:02:26.480
for Corewood.

30
0:02:26.480 --> 0:02:33.560
So those have changed the names to the Mendocino and Phoenix.

31
0:02:33.560 --> 0:02:43.960
So to review the last year's status, we had Picasso and Cezanne development quite complete

32
0:02:43.960 --> 0:02:47.240
but there was no FSP yet for this design.

33
0:02:47.240 --> 0:02:49.120
But this has actually changed.

34
0:02:49.120 --> 0:02:53.600
The FSP was published in September last year.

35
0:02:53.600 --> 0:03:01.080
There was also a development of the PSP firmware, AAB partition recovery supporting the AMD

36
0:03:01.080 --> 0:03:03.640
AWW tool in Corewood.

37
0:03:03.640 --> 0:03:09.960
So one of the patches was merged and the single one that I linked above is probably

38
0:03:09.960 --> 0:03:12.700
duplicating the functionality.

39
0:03:12.700 --> 0:03:19.760
So the whole AAB scheming stuff is used for any recovery in case of corruption of the

40
0:03:19.760 --> 0:03:25.520
first partition or if the memory configuration after some changes in the setup application

41
0:03:25.520 --> 0:03:30.960
would like make the system unbootable, then the PSP can, for example, switch to the AAB

42
0:03:30.960 --> 0:03:38.320
partition and still be able to, for example, initialize the memory and boot the platform.

43
0:03:38.320 --> 0:03:44.760
There was also an effort to implement the PSP firmware extraction with the same tool.

44
0:03:44.760 --> 0:03:46.680
But it's still not merged.

45
0:03:46.680 --> 0:03:54.000
It seems that the activity there quite stopped and there is no further work continuation

46
0:03:54.000 --> 0:03:58.640
for this feature.

47
0:03:58.640 --> 0:04:02.340
And I mentioned last year that there were new patches for the Sabrina sock.

48
0:04:02.340 --> 0:04:09.960
The Sabrina has changed the name to the Menduchino, I believe.

49
0:04:09.960 --> 0:04:17.800
And yeah, I said that in 2021 there was another negative attitude towards the old AMD platforms

50
0:04:17.800 --> 0:04:25.160
that were entirely open with full source code for the CPU initialization.

51
0:04:25.160 --> 0:04:29.640
If you'd like to see more details, please refer to the Corewood leadership meeting minutes

52
0:04:29.640 --> 0:04:30.640
or the mailing list.

53
0:04:30.640 --> 0:04:36.160
I'll also be talking about it also later in the presentation.

54
0:04:36.160 --> 0:04:49.000
So in 2022, we also had many new features, option deprecations with each release.

55
0:04:49.000 --> 0:04:55.720
Those deprecations sometimes causes the platforms to drop out from the master branch and they

56
0:04:55.720 --> 0:05:00.440
are moved to the stable branch.

57
0:05:00.440 --> 0:05:11.080
These new releases tend to move the whole Corewood drivers and code quality to the higher

58
0:05:11.080 --> 0:05:19.780
level by replacing the old interfaces that were, for example, buggy or had some kind

59
0:05:19.780 --> 0:05:25.320
of assumptions that made some old platforms, for example, boot.

60
0:05:25.320 --> 0:05:31.760
And they were hiding some small errors because of those assumptions.

61
0:05:31.760 --> 0:05:38.080
So it is necessary to bring these new interfaces to the old platforms as well.

62
0:05:38.080 --> 0:05:46.000
But sometimes there's not enough time or resources, the hardware, to test everything.

63
0:05:46.000 --> 0:05:54.520
So some platforms naturally will be moved to the old branches.

64
0:05:54.520 --> 0:05:59.840
But thanks to the companies like PCNGs and a few Corewood developers, certain platforms

65
0:05:59.840 --> 0:06:05.680
get the required support and the new interfaces are implemented.

66
0:06:05.680 --> 0:06:13.920
So the platforms like PCNGs, APU2 is still in the master branch, but some other boards

67
0:06:13.920 --> 0:06:19.280
were unfortunately dropped.

68
0:06:19.280 --> 0:06:26.280
So another year came with new Corewood releases, as I said, and many old AMD platforms were

69
0:06:26.280 --> 0:06:28.560
actually dropped.

70
0:06:28.560 --> 0:06:38.240
To those platforms we can count PCNGs, APU1, some MSI MS7721, Lenovo AMD G505S, etc., etc.

71
0:06:38.240 --> 0:06:45.080
That is a little bit unfortunate to see, but there was a lack of actually any testing or

72
0:06:45.080 --> 0:06:53.480
maintainership that could also bring those platforms to the newest code, despite our

73
0:06:53.480 --> 0:06:56.720
sincere efforts.

74
0:06:56.720 --> 0:07:03.000
So we tried our best to actually implement the new interfaces and we sent patches quite

75
0:07:03.000 --> 0:07:04.000
early.

76
0:07:04.000 --> 0:07:08.160
It was in May 2021.

77
0:07:08.160 --> 0:07:19.440
But the problem with reviewing the old code is that there is not enough understanding

78
0:07:19.440 --> 0:07:25.600
how those old AMD platforms work, because the initial code that landed to Corewood was

79
0:07:25.600 --> 0:07:33.760
kind of maybe proof of concept quality and was depending on the EJISA code that was published

80
0:07:33.760 --> 0:07:36.360
by AMD.

81
0:07:36.360 --> 0:07:44.360
And it was not in the best quality, so if something didn't work there, it was hard to

82
0:07:44.360 --> 0:07:49.240
actually locate debug on the Corewood site.

83
0:07:49.240 --> 0:07:55.480
And there were also promises that the code will be maintained, will be cleaned up, but

84
0:07:55.480 --> 0:07:57.040
it didn't really happen.

85
0:07:57.040 --> 0:08:06.080
So this burden of maintaining those old platforms were shifted to Corewood developers.

86
0:08:06.080 --> 0:08:11.200
So through all those years, the code didn't improve that much.

87
0:08:11.200 --> 0:08:20.920
So in such circumstances, the platforms will slowly naturally die on the Corewood master

88
0:08:20.920 --> 0:08:29.720
branch that will be shifted to the branches created during each release.

89
0:08:29.720 --> 0:08:37.720
We tried to save one of the old platforms, which is the KGP D16, we have sent over 50

90
0:08:37.720 --> 0:08:41.360
patches that influenced simply the first booting stage of Corewood.

91
0:08:41.360 --> 0:08:49.240
So this is just the beginning, but already the mass of code is enormous and we like the

92
0:08:49.240 --> 0:08:51.920
reviewers to actually process all those patches.

93
0:08:51.920 --> 0:09:01.160
So it is pretty hard to maintain those alternating platforms because like I said, there is very

94
0:09:01.160 --> 0:09:07.000
little understanding how all those platforms will work despite all the documentation.

95
0:09:07.000 --> 0:09:15.560
So Intel platforms are more straightforward, I would say, at least for other developers.

96
0:09:15.560 --> 0:09:19.760
That's how it is.

97
0:09:19.760 --> 0:09:29.400
Without the new SOCs, so AMD Cezanne development has been stabilized, there are many Chromebooks

98
0:09:29.400 --> 0:09:36.360
running on it, and we even have seen two non-Chrombook platforms that have been actually sent for

99
0:09:36.360 --> 0:09:39.640
review by the Starlabs.

100
0:09:39.640 --> 0:09:47.520
These two laptops, unfortunately, cannot be built without the blobs or can be built, but

101
0:09:47.520 --> 0:09:53.440
it will not produce a functional image because certain PSP blobs that are required, for example,

102
0:09:53.440 --> 0:10:00.680
for the memorization, cannot be there due to the NDA stuff and so on.

103
0:10:00.680 --> 0:10:05.800
So this is something that also needs to be solved.

104
0:10:05.800 --> 0:10:11.960
But all other components are actually in place and you can track those patches and see what

105
0:10:11.960 --> 0:10:12.960
is its progress.

106
0:10:12.960 --> 0:10:21.040
As I said, AMD, Mendocino and Phoenix are quite new architectures that are being developed

107
0:10:21.040 --> 0:10:25.280
in an upstream core boot.

108
0:10:25.280 --> 0:10:31.720
While the Mendocino is quite in a more advanced state at Phoenix, Phoenix is a newer one.

109
0:10:31.720 --> 0:10:35.980
And FSP is not published for those micro-architectures yet.

110
0:10:35.980 --> 0:10:43.360
You can also notice some PSP blobs that are present in the AMD blobs repository.

111
0:10:43.360 --> 0:10:54.220
AMD Glinda is like the newest micro-architecture that has seen the sunlight.

112
0:10:54.220 --> 0:10:57.800
There is practically no information about that in public.

113
0:10:57.800 --> 0:11:02.280
It may be also an embargoed codename, so it may change in the future.

114
0:11:02.280 --> 0:11:07.200
And I do not have much else to say about that yet.

115
0:11:07.200 --> 0:11:15.600
But regarding the blobs situation, the Starlabs could build the firmware for their laptops,

116
0:11:15.600 --> 0:11:21.640
and probably boot core boot, but they cannot publish the necessary blob that is provided

117
0:11:21.640 --> 0:11:28.720
by the board code to initialize the memory because each design may be different and requires

118
0:11:28.720 --> 0:11:33.640
different configuration, how the memory topology looks like on a given platform.

119
0:11:33.640 --> 0:11:40.400
So you have to provide that by the board code, and this becomes the problem because Chromebooks

120
0:11:40.400 --> 0:11:48.440
have only soldered down memory, and there is no support, for example, to build the blob

121
0:11:48.440 --> 0:11:54.000
with a memory configuration for a platform that has a solde modules, for example.

122
0:11:54.000 --> 0:12:01.280
But I believe this is the main reason why this cannot be built to a functional image,

123
0:12:01.280 --> 0:12:03.360
core boot image.

124
0:12:03.360 --> 0:12:09.320
But the PSB, all the PSP blobs and FSP is present in the AMD blobs repository.

125
0:12:09.320 --> 0:12:12.820
You can check its license on the repository.

126
0:12:12.820 --> 0:12:14.080
It is quite permissive.

127
0:12:14.080 --> 0:12:23.600
It allows the redistribution, so it's similar to the Intel FSP and micro-code licenses.

128
0:12:23.600 --> 0:12:28.040
And of course, you cannot decompile, disassembly, et cetera, et cetera.

129
0:12:28.040 --> 0:12:36.560
I've also took a quick look at the FSP release intervals, and these are quite delayed, I

130
0:12:36.560 --> 0:12:37.560
would say.

131
0:12:37.560 --> 0:12:44.560
For example, between the FSP for Picasso and the CZAN, there is one and a half year of

132
0:12:44.560 --> 0:12:48.760
distance in the comments, initial comments on the AMD blobs repository.

133
0:12:48.760 --> 0:12:56.760
And for example, the CZAN FSP was released one and a quarter year after the launch of

134
0:12:56.760 --> 0:12:58.200
the processors themselves.

135
0:12:58.200 --> 0:13:01.680
So as you can see, the delay is quite huge.

136
0:13:01.680 --> 0:13:07.240
For Intel, I would say it is like a few months or half a year after the initial release of

137
0:13:07.240 --> 0:13:09.640
the CPUs where the FSP is available.

138
0:13:09.640 --> 0:13:15.640
So it is like much more stabilized ecosystem for Intel.

139
0:13:15.640 --> 0:13:19.480
FSP for AMD is quite a new invention, I would say.

140
0:13:19.480 --> 0:13:26.840
It's like maybe three or maximum four years old, while FSP is like for over seven years

141
0:13:26.840 --> 0:13:33.280
or so on the open source firmware market.

142
0:13:33.280 --> 0:13:39.960
Regarding the server platform status for AMD, nothing much happened here since the last

143
0:13:39.960 --> 0:13:41.520
year.

144
0:13:41.520 --> 0:13:48.440
We had those initiatives, for example, from Google, Rominec that showed the AMD, Rom,

145
0:13:48.440 --> 0:13:53.800
and Milan proof of concept Linux boot or boot stuff.

146
0:13:53.800 --> 0:13:56.240
But nothing else happened.

147
0:13:56.240 --> 0:14:05.840
On the recent OSFC 2022, which was in September in Sweden, there was also something new, similar

148
0:14:05.840 --> 0:14:08.880
to what Rominec showed.

149
0:14:08.880 --> 0:14:15.320
So Brian Cantrell from Oxite showed some proof of concept of their firmware on AMD, which

150
0:14:15.320 --> 0:14:18.640
was also based on Linux boot stuff.

151
0:14:18.640 --> 0:14:25.320
But they had implemented some better initialization of the PCI Express so that the storages and

152
0:14:25.320 --> 0:14:28.240
other I.O. could also work.

153
0:14:28.240 --> 0:14:30.080
It was also very, very basic.

154
0:14:30.080 --> 0:14:37.960
So nothing close to what you would normally see in the UFI from independent bios vendors.

155
0:14:37.960 --> 0:14:42.200
Okay.

156
0:14:42.200 --> 0:14:48.480
So to summarize up, what is actually the future of the AMD platforms in Corbout?

157
0:14:48.480 --> 0:14:53.360
So for sure, the Chromebooks will be gaining the support.

158
0:14:53.360 --> 0:14:56.400
They are backed by Google cooperation efforts.

159
0:14:56.400 --> 0:15:03.640
They have partners, they have Corbout developers working in AMD.

160
0:15:03.640 --> 0:15:08.200
And their partnership will make the project successful, for sure.

161
0:15:08.200 --> 0:15:15.400
But for such old platforms like KGP or all the models that I mentioned that were dropped,

162
0:15:15.400 --> 0:15:20.640
it is pretty difficult to actually keep them in the main tree.

163
0:15:20.640 --> 0:15:24.920
It requires significant effort to actually maintain a board.

164
0:15:24.920 --> 0:15:33.600
So either there must be a community that is willing to test Corbout images on their devices

165
0:15:33.600 --> 0:15:42.400
but, on the second hand, who is brave enough to flash their daily laptop and possibly break

166
0:15:42.400 --> 0:15:45.360
it because something didn't work.

167
0:15:45.360 --> 0:15:51.760
So it is also not for everyone.

168
0:15:51.760 --> 0:16:01.880
Also the quality of the initial code that was published for those old platforms, it

169
0:16:01.880 --> 0:16:09.520
was just getting older and older and the actual cost and the effort that would be required

170
0:16:09.520 --> 0:16:16.600
to bring it to the quality we would want is bigger and bigger.

171
0:16:16.600 --> 0:16:23.880
So while, for example, the model of dropping the siliconization vendor code is good for

172
0:16:23.880 --> 0:16:27.640
initial launch of the platform because you have everything modular and you just tune

173
0:16:27.640 --> 0:16:31.160
it, in the long term it is not maintainable.

174
0:16:31.160 --> 0:16:37.680
It can speed up the platform shipment by maybe 50%.

175
0:16:37.680 --> 0:16:44.440
But in the long term it is a burden for the project that is supporting this vendor code.

176
0:16:44.440 --> 0:16:49.600
And then we end up with such situation where the boards are simply dropping out of the

177
0:16:49.600 --> 0:16:51.720
tree.

178
0:16:51.720 --> 0:16:56.800
So in such conditions, all the AMD boards will naturally die and will be moved to the

179
0:16:56.800 --> 0:16:58.480
branches.

180
0:16:58.480 --> 0:17:06.040
So we may expect further platforms being dropped out and I think the next one on the aim is

181
0:17:06.040 --> 0:17:08.400
probably APC and APU2.

182
0:17:08.400 --> 0:17:17.080
For now it supports all the recent interfaces but we have no idea how long it will last.

183
0:17:17.080 --> 0:17:23.960
Also we think that the lack of strategy for the long term support by the core boot leadership

184
0:17:23.960 --> 0:17:32.280
is largely decreasing the value of the project itself because many people rather don't like

185
0:17:32.280 --> 0:17:38.080
their boards being dropped because if they clone core boot, they clone the code from

186
0:17:38.080 --> 0:17:39.200
the master branch.

187
0:17:39.200 --> 0:17:44.600
And if the issue make menu config and want to choose the board, they see it's no longer

188
0:17:44.600 --> 0:17:45.600
there.

189
0:17:45.600 --> 0:17:50.480
So basically they think, oh, it is not supported anymore.

190
0:17:50.480 --> 0:17:59.120
So this kind of value is decreased because people see that something is already not supported

191
0:17:59.120 --> 0:18:03.760
and they lose their hope in the project.

192
0:18:03.760 --> 0:18:12.360
So a new strategy would be required to actually keep those AMD platforms alive in the tree.

193
0:18:12.360 --> 0:18:19.680
So what we think can save those platforms is our Dasharo firmware.

194
0:18:19.680 --> 0:18:26.040
We are open for any AMD outcast from the core boot and we are working hard to actually prepare

195
0:18:26.040 --> 0:18:32.600
a strategy that will make these platform support more sustainable.

196
0:18:32.600 --> 0:18:37.720
We often also disagreed on many core boot leadership meetings with the current core

197
0:18:37.720 --> 0:18:45.520
boot strategy but we also offered various ideas like crowd-firing and other stuff that

198
0:18:45.520 --> 0:18:52.920
could potentially solve the problems like we were noticing but unfortunately those were

199
0:18:52.920 --> 0:18:55.120
rejected.

200
0:18:55.120 --> 0:19:03.600
If you would like, you can visit core boot leadership meetings for more details.

201
0:19:03.600 --> 0:19:06.800
Also I have a short announcement for you.

202
0:19:06.800 --> 0:19:13.280
Unfortunately, the official PC engines open source firmware support has been ended by

203
0:19:13.280 --> 0:19:25.880
the PC engines company and the for 1901 was the last version that we released in the format

204
0:19:25.880 --> 0:19:31.200
we have been doing for the past few years, monthly.

205
0:19:31.200 --> 0:19:33.960
But do not worry, our commitment is still strong.

206
0:19:33.960 --> 0:19:40.560
We want to further improve the PC engines firmware but this time we would like to release

207
0:19:40.560 --> 0:19:47.520
it under the Dasharo branch with new features like UFI interface, DMA protection, setup

208
0:19:47.520 --> 0:19:53.800
applications, setup BIOS password and stuff like that.

209
0:19:53.800 --> 0:19:58.280
But it will be only a community-driven project.

210
0:19:58.280 --> 0:20:00.520
We will not have any funding for that.

211
0:20:00.520 --> 0:20:10.000
So your support is actually crucial in determining the roadmap and how and what the pace of the

212
0:20:10.000 --> 0:20:11.520
development will be.

213
0:20:11.520 --> 0:20:15.960
So I encourage you to take us our survey.

214
0:20:15.960 --> 0:20:19.880
Your input is very valuable for us.

215
0:20:19.880 --> 0:20:29.240
If you have any insight or want to support us, please do.

216
0:20:29.240 --> 0:20:40.560
So to sum up, we want to make Dasharo a paradise for all AMD platforms and outcasts.

217
0:20:40.560 --> 0:20:47.920
Of course, like I said, it will be community-driven so we want to make a success and have community

218
0:20:47.920 --> 0:20:51.240
involved as much as possible.

219
0:20:51.240 --> 0:21:05.480
Also, what we offer with Dasharo is we are ready to go test binary releases with transparent

220
0:21:05.480 --> 0:21:06.560
validation.

221
0:21:06.560 --> 0:21:13.200
We publish all the test cases on our documentation page.

222
0:21:13.200 --> 0:21:15.720
You can use our hardware and software tools.

223
0:21:15.720 --> 0:21:22.040
We have validated and used daily during the development which can help you in case of

224
0:21:22.040 --> 0:21:26.200
any recovery or even deployment of the firmware.

225
0:21:26.200 --> 0:21:33.720
We also provide high-quality documentation which explains every KVets and procedures

226
0:21:33.720 --> 0:21:40.400
for the updates or the deployment and recovery of a platform.

227
0:21:40.400 --> 0:21:45.760
So if you want to know more, please feel free to sign up to the Dasharo newsletter to get

228
0:21:45.760 --> 0:21:49.600
up-to-date information about new features or releases.

229
0:21:49.600 --> 0:21:59.760
So you may also find the new initiatives and new projects that we plan on the Dasharo documentation

230
0:21:59.760 --> 0:22:02.320
page.

231
0:22:02.320 --> 0:22:09.240
So I encourage you to visit.

232
0:22:09.240 --> 0:22:13.720
Of course, I will gladly talk more about the IMD platforms because I'm pretty much short

233
0:22:13.720 --> 0:22:17.400
on time here and cannot explain every small detail.

234
0:22:17.400 --> 0:22:25.880
So if anyone is interested, we can go later in the evening for some beers and talk a little

235
0:22:25.880 --> 0:22:27.960
bit more.

236
0:22:27.960 --> 0:22:34.760
We can think on the Forza matrix or we can join the Sharo matrix as well where we are

237
0:22:34.760 --> 0:22:41.240
more responsive, we can just come up with some good plays I think and talk a little bit

238
0:22:41.240 --> 0:22:42.240
more.

239
0:22:42.240 --> 0:22:47.480
The frame depth is also planning to hold two events in March.

240
0:22:47.480 --> 0:22:52.480
It will be the Sharo User Group which is a forum of the Sharo users.

241
0:22:52.480 --> 0:23:01.120
This will be like a small event with more structured schedule where we will discuss

242
0:23:01.120 --> 0:23:03.960
different topics related to the Sharo.

243
0:23:03.960 --> 0:23:09.080
And right after that, we will hold the Sharo Developers virtual pub where this will be

244
0:23:09.080 --> 0:23:16.360
more like relaxed forum event where we will discuss any topic community wants and what

245
0:23:16.360 --> 0:23:20.360
is of interest of them.

246
0:23:20.360 --> 0:23:24.220
And yeah, feel free to be invited.

247
0:23:24.220 --> 0:23:30.120
You can see more details in the blog post I link in the slides.

248
0:23:30.120 --> 0:23:38.600
So that will be everything from my site and I'm open for your questions.

249
0:23:38.600 --> 0:23:41.280
Yes?

250
0:23:41.280 --> 0:24:02.600
I have a question regarding the PC Engine.

251
0:24:02.600 --> 0:24:18.040
So the question was who was actually developing Core Boot for PC Engine platforms.

252
0:24:18.040 --> 0:24:25.640
So PC Engine's company was responsible only for producing the hardware and distributing

253
0:24:25.640 --> 0:24:28.120
it to the users.

254
0:24:28.120 --> 0:24:35.880
And the initial support was being developed by a company called Elton.

255
0:24:35.880 --> 0:24:43.000
But then they shifted the Core Boot work to PM depth, so to us.

256
0:24:43.000 --> 0:24:53.220
And we were maintaining and improving, releasing the Core Boot binaries each month since 2016.

257
0:24:53.220 --> 0:24:58.440
So it was like our efforts for all those monthly releases.

258
0:24:58.440 --> 0:25:01.520
Okay, Theory?

259
0:25:01.520 --> 0:25:08.520
I understand that Core Boot is not building the runs directly to test the platforms.

260
0:25:08.520 --> 0:25:11.520
So the burden is on the users to build stuff.

261
0:25:11.520 --> 0:25:18.520
Do you have any insights for facilitating testing in the future to prevent the boards

262
0:25:18.520 --> 0:25:20.600
from being dropped?

263
0:25:20.600 --> 0:25:25.320
So the question was whether we have a strategy for the boards being dropped because it is

264
0:25:25.320 --> 0:25:28.120
users' burden to build and test the runs.

265
0:25:28.120 --> 0:25:36.080
So like it was written on the slides, we are still working on the strategy for long-term

266
0:25:36.080 --> 0:25:39.800
sustainable support for all the old AMD platforms.

267
0:25:39.800 --> 0:25:46.000
But we want to shift the burden to build the runs from the users and instead provide tested

268
0:25:46.000 --> 0:25:47.000
images.

269
0:25:47.000 --> 0:25:51.960
At least tested what we can test in our environment, in our laboratory.

270
0:25:51.960 --> 0:25:59.320
And if someone still has some issues or have some future requests, we encourage to create

271
0:25:59.320 --> 0:26:01.000
issues on our GitHub.

272
0:26:01.000 --> 0:26:06.040
And then we are considering what is the problem, what is the case, what is the cause of the

273
0:26:06.040 --> 0:26:07.720
problem, actually, how to solve it.

274
0:26:07.720 --> 0:26:13.680
And we try to narrow it down and in cloud possibly the fix in the next release.

275
0:26:13.680 --> 0:26:19.320
But of course, as I said, if it is a community-driven effort, the pace will depend on the support

276
0:26:19.320 --> 0:26:20.320
level.

277
0:26:20.320 --> 0:26:23.920
So if somebody is able to contribute in any way, for example, fix the code themselves

278
0:26:23.920 --> 0:26:32.000
or, let's say, provide the logs or flash our, for example, testing binaries to check

279
0:26:32.000 --> 0:26:37.800
or gather more information because we may not necessarily have the exact hardware configuration,

280
0:26:37.800 --> 0:26:46.200
then it may be the right step to make users less burdened with all those troubles with

281
0:26:46.200 --> 0:26:49.360
flashing and breaking stuff.

282
0:26:49.360 --> 0:26:51.360
Okay.

283
0:26:51.360 --> 0:26:52.360
Any more questions?

284
0:26:52.360 --> 0:26:53.360
Okay.

285
0:26:53.360 --> 0:26:54.360
Maybe.

286
0:26:54.360 --> 0:26:55.360
Okay.

287
0:26:55.360 --> 0:26:56.360
Let's change.

288
0:26:56.360 --> 0:27:21.200
Yeah.

289
0:27:21.200 --> 0:27:29.640
So the question is, what are the state of the patches and why actually there is a problem

290
0:27:29.640 --> 0:27:33.200
to get the old AMD boards upstream?

291
0:27:33.200 --> 0:27:41.560
So like I said, this cold is very old and it was in very bad quality, committed initially

292
0:27:41.560 --> 0:27:45.280
with promises from AMD for the maintainer ship, which didn't happen.

293
0:27:45.280 --> 0:27:51.600
So with each year, the code just was getting older and older and people who actually knew

294
0:27:51.600 --> 0:27:58.320
something about it are no longer a part of Corb or are they just simply retired or out

295
0:27:58.320 --> 0:27:59.820
of business.

296
0:27:59.820 --> 0:28:06.480
And basically there is very few people that can actually understand what the given code

297
0:28:06.480 --> 0:28:11.360
does and actually give some meaningful review for those patches.

298
0:28:11.360 --> 0:28:19.320
So that is why it is very difficult to get something upstream for such an old AMD platform.

299
0:28:19.320 --> 0:28:20.320
Okay.

300
0:28:20.320 --> 0:28:21.320
In theory.

301
0:28:21.320 --> 0:28:51.200
Okay.

302
0:28:51.200 --> 0:28:53.440
So the question is about the Corbud branching model.

303
0:28:53.440 --> 0:28:56.520
How does it work and how to apply patches on them?

304
0:28:56.520 --> 0:29:04.920
So whenever a Corbud issues a new release, so a tag is placed on the repository, the

305
0:29:04.920 --> 0:29:12.200
current revision that is tagged is being cloned into the branch and called, for example, 4.19

306
0:29:12.200 --> 0:29:13.320
branch.

307
0:29:13.320 --> 0:29:18.040
And these branches are in no means stale.

308
0:29:18.040 --> 0:29:25.680
So these can also be contributed to by the Garrett review system, but you have to target

309
0:29:25.680 --> 0:29:26.720
the specific branch.

310
0:29:26.720 --> 0:29:31.800
So even if you hook onto some revision on the branch, for example, and you want to patch

311
0:29:31.800 --> 0:29:39.480
it, it doesn't mean that in the half a year it will not have the same tree state because

312
0:29:39.480 --> 0:29:44.160
some backported patches could be landed on the branch and then your patches that you

313
0:29:44.160 --> 0:29:47.320
were kept, for example, as a file, were no longer applied.

314
0:29:47.320 --> 0:29:57.720
So it is not like that, that the platforms are just lying there with no option to improve.

315
0:29:57.720 --> 0:29:58.720
That's not true.

316
0:29:58.720 --> 0:30:03.480
You can always send patches to the previous branches as well.

317
0:30:03.480 --> 0:30:09.800
So it works like any master branch, but you have to just target the older branch with

318
0:30:09.800 --> 0:30:12.560
your patches that you sent.

319
0:30:12.560 --> 0:30:19.480
So the development might still be active, but it does not longer benefit from the new

320
0:30:19.480 --> 0:30:24.640
features that are basically landing on the master branch.

321
0:30:24.640 --> 0:30:27.680
Okay.

322
0:30:27.680 --> 0:30:29.680
Any more questions?

323
0:30:29.680 --> 0:30:31.680
Yes, please.

324
0:30:31.680 --> 0:30:46.360
So for example, again, for the QGB-16, which is based on corg.11, we know that corg.11

325
0:30:46.360 --> 0:30:49.360
is moving for that platform.

326
0:30:49.360 --> 0:30:57.360
So can we hope that the corg.11 branch involves the point where that was more of my question,

327
0:30:57.360 --> 0:31:04.360
where you were expecting corg.11 on the non-master branch, but the branch that is still active

328
0:31:04.360 --> 0:31:06.360
for that one?

329
0:31:06.360 --> 0:31:07.360
Okay.

330
0:31:07.360 --> 0:31:13.360
So the question is, what can you expect on the 4.11 branch, for example, with KGPE?

331
0:31:13.360 --> 0:31:15.680
Well, that depends on the community.

332
0:31:15.680 --> 0:31:22.680
If they were to backport some patches that should land on the 4.11 branch, that is possible

333
0:31:22.680 --> 0:31:23.680
actually.

334
0:31:23.680 --> 0:31:29.560
But probably the older the branch, the less activity there will be on them.

335
0:31:29.560 --> 0:31:39.640
And if somebody would like to backport some features, then it's probably more efficient

336
0:31:39.640 --> 0:31:46.720
to do it on newer branches because the gap is just only getting bigger and bigger.

337
0:31:46.720 --> 0:31:57.040
So if anything, it would be better to work on the fork that we already have, where we

338
0:31:57.040 --> 0:32:04.160
rebase all the code, rewritten most of the parts that were in very, very bad shape.

339
0:32:04.160 --> 0:32:06.960
And yeah.

340
0:32:06.960 --> 0:32:12.200
So basically, it is not impossible to have something being developed on the 4.11, but

341
0:32:12.200 --> 0:32:17.280
it is rather unlikely to happen right now.

342
0:32:17.280 --> 0:32:18.280
Okay.

343
0:32:18.280 --> 0:32:25.520
The time is up, so I can answer any questions later in face-to-face talk.

344
0:32:25.520 --> 0:32:26.520
And yeah.

345
0:32:26.520 --> 0:32:31.680
Next presentation in eight minutes from theory about the HEDS project update.

346
0:32:31.680 --> 0:32:32.680
So stay with us.

347
0:32:32.680 --> 0:32:43.360
Have a great day here.

348
0:32:43.360 --> 0:32:55.600
Thank you.


1
0:00:30.000 --> 0:00:35.360
Okay, so we'll start now.

2
0:00:35.360 --> 0:00:37.880
The topic of this presentation is

3
0:00:37.880 --> 0:00:42.240
overview of secure boot state in the ARM-based socks,

4
0:00:42.240 --> 0:00:46.280
and this is the second edition of this presentation.

5
0:00:46.440 --> 0:00:52.960
No mic here. It's only for the video.

6
0:00:53.960 --> 0:00:59.200
Okay, so the first edition was taken place like two years ago.

7
0:00:59.200 --> 0:01:02.080
So now we want to present some update from

8
0:01:02.080 --> 0:01:06.800
the research that we have about two years ago.

9
0:01:06.800 --> 0:01:09.040
Maybe you can speak up a little bit.

10
0:01:09.040 --> 0:01:09.480
Okay.

11
0:01:09.480 --> 0:01:10.760
We can hear you.

12
0:01:10.760 --> 0:01:23.680
Okay. Sorry for some technical issue.

13
0:01:23.680 --> 0:01:40.080
Okay. Sorry for that.

14
0:01:44.200 --> 0:01:49.480
Okay. Okay.

15
0:01:49.480 --> 0:01:53.520
So it is an agenda for this presentation.

16
0:01:53.520 --> 0:02:01.320
So first, I will tell you who I am and where I work.

17
0:02:01.320 --> 0:02:06.680
So say a couple of work was about our company.

18
0:02:06.680 --> 0:02:11.640
Next, I will just present shortly what do you mean by secure boot,

19
0:02:11.640 --> 0:02:14.400
in the case of ARM socks,

20
0:02:14.400 --> 0:02:19.520
and present how the typical implementation and workflow works.

21
0:02:19.520 --> 0:02:23.320
Later, we'll show the results from the fifth edition.

22
0:02:23.320 --> 0:02:26.120
So from the 2028.

23
0:02:26.120 --> 0:02:34.600
Then we will discuss the two cases that we check for this edition.

24
0:02:34.600 --> 0:02:38.240
So the Mediatek and the Rockchip cases.

25
0:02:38.240 --> 0:02:41.280
Next, we will summarize the whole presentation.

26
0:02:41.280 --> 0:02:45.120
So try to look what was difference between those two editions of

27
0:02:45.120 --> 0:02:51.480
the presentation and with some Q&A session.

28
0:02:51.480 --> 0:02:54.600
So this is me.

29
0:02:54.600 --> 0:03:00.840
I'm Tomasz Ziecki and I'm an embedded systems team leader at 3M DEP.

30
0:03:00.840 --> 0:03:03.880
I work there over three years now.

31
0:03:03.880 --> 0:03:09.400
Mostly, I work on the embedded systems built with the Yoctop project.

32
0:03:09.400 --> 0:03:12.680
So I try to integrate the update system and

33
0:03:12.680 --> 0:03:16.960
the OS creation for the embedded devices.

34
0:03:16.960 --> 0:03:19.440
But because I work with the embedded devices,

35
0:03:19.440 --> 0:03:27.320
I try to touch different areas of the whole life of the devices.

36
0:03:27.320 --> 0:03:32.520
So one of the things I work with is also the system security.

37
0:03:32.520 --> 0:03:37.480
This is the topic of this presentation.

38
0:03:37.480 --> 0:03:43.200
So here a couple of words about our company.

39
0:03:43.200 --> 0:03:48.920
We are from Poland and based in GdaÅ„sk.

40
0:03:48.920 --> 0:03:54.520
We are the core book license service providers since 2016.

41
0:03:54.520 --> 0:04:00.400
Also, UFI adopters since 2018, Yoctop participants.

42
0:04:00.400 --> 0:04:07.120
So this is the area which I work with from 2019.

43
0:04:07.120 --> 0:04:16.080
Also, like the consultants for the FWPD project and IBM OpenPower Foundation members.

44
0:04:17.680 --> 0:04:20.720
Okay. So now, let's explain this.

45
0:04:20.720 --> 0:04:25.600
What do you mean by the secure boot in the context of this presentation?

46
0:04:25.600 --> 0:04:29.680
So here we are focused on the ARM context,

47
0:04:29.680 --> 0:04:34.640
which is like the feature of the Boot Room.

48
0:04:34.640 --> 0:04:37.840
One of the features that Boot Room has.

49
0:04:37.840 --> 0:04:44.040
Maybe we should call it more like the verified boot because the case here is

50
0:04:44.040 --> 0:04:47.960
that when we start the firmware,

51
0:04:49.520 --> 0:04:54.640
the next steps of the loaded images are like verified.

52
0:04:54.640 --> 0:05:02.720
The signature is verified by the previous part of the firmware.

53
0:05:02.720 --> 0:05:07.200
So that's why we should call it the verified boot maybe.

54
0:05:08.200 --> 0:05:19.760
So we need to use some private key to sign the binary that we put into our machine.

55
0:05:19.760 --> 0:05:26.600
Then we also need to take the public key from that private key and put it also there.

56
0:05:26.600 --> 0:05:28.120
So when we start it,

57
0:05:28.120 --> 0:05:31.840
we'll be able to verify the signature and decide if

58
0:05:31.840 --> 0:05:33.880
it should be loaded or not.

59
0:05:33.880 --> 0:05:38.720
In ARM context,

60
0:05:38.720 --> 0:05:44.040
we assume that the Boot Room is our root of trust.

61
0:05:44.320 --> 0:05:49.400
We need to take that assumption because most of them are closed source.

62
0:05:49.400 --> 0:05:52.280
Probably it will be better if they will be open source,

63
0:05:52.280 --> 0:05:55.520
but it is what it is.

64
0:05:56.880 --> 0:06:00.280
Basically, the meaning of the secure boot can be

65
0:06:00.280 --> 0:06:01.920
different for any given architecture.

66
0:06:01.920 --> 0:06:05.400
So if you will be talking about the x86,

67
0:06:05.400 --> 0:06:09.600
that would be a different scenario.

68
0:06:10.480 --> 0:06:14.360
So this is the typical implementation.

69
0:06:14.360 --> 0:06:19.560
We have the public key that needs to be written inside our SOC.

70
0:06:19.560 --> 0:06:21.400
Different vendors will have

71
0:06:21.400 --> 0:06:27.640
some different way to achieve that.

72
0:06:27.640 --> 0:06:31.720
So we can, for example, fuse them using electrical fuse.

73
0:06:31.720 --> 0:06:36.200
So one time write them in our SOC and

74
0:06:36.200 --> 0:06:40.080
later use it every time that we start our firmware.

75
0:06:40.120 --> 0:06:44.480
There's also a possibility for the OTP registers.

76
0:06:44.480 --> 0:06:46.840
So those are the one-time programmable.

77
0:06:46.840 --> 0:06:48.160
So as the name says,

78
0:06:48.160 --> 0:06:51.440
also it can be used only one time.

79
0:06:51.440 --> 0:06:59.040
One of those two possibilities

80
0:06:59.040 --> 0:07:04.040
allow us to make from our Boot Room our root of trust,

81
0:07:04.040 --> 0:07:08.280
which we later use to expand it to the chain of trust.

82
0:07:08.520 --> 0:07:14.080
Next components can use like different keys.

83
0:07:14.080 --> 0:07:16.960
So in case of secure boot,

84
0:07:16.960 --> 0:07:25.320
we talk about the step between the Boot Room and the Boot Loader.

85
0:07:25.320 --> 0:07:28.360
Here we have some one key that was used to sign

86
0:07:28.360 --> 0:07:32.080
the binary and that public key that was used to verify it.

87
0:07:32.080 --> 0:07:38.320
But the later steps of starting our machine can use different keys.

88
0:07:39.200 --> 0:07:42.320
So that will be it.

89
0:07:42.320 --> 0:07:46.640
So typically we have like,

90
0:07:46.640 --> 0:07:49.640
let's say our host machine that

91
0:07:49.640 --> 0:07:52.240
should be some secure location and our target device.

92
0:07:52.240 --> 0:07:53.640
So on our host machine,

93
0:07:53.640 --> 0:07:56.320
we generate some private keys,

94
0:07:56.320 --> 0:08:01.360
rebuild binary, and use specific tool to sign them.

95
0:08:01.360 --> 0:08:05.720
Later, we need to take the public key part of that keys,

96
0:08:05.720 --> 0:08:11.320
also the sign as binary and put it in the target device,

97
0:08:11.320 --> 0:08:12.680
and then try to verify it.

98
0:08:12.680 --> 0:08:16.000
Yes. So if the verification will be successful,

99
0:08:16.000 --> 0:08:17.920
then we will just boot another step.

100
0:08:17.920 --> 0:08:21.960
If not, then specific things can happen

101
0:08:21.960 --> 0:08:26.880
depends on the vendor that we are using.

102
0:08:27.200 --> 0:08:30.240
Also, let's say maybe a couple of works

103
0:08:30.240 --> 0:08:34.200
about what it is to sign the binary.

104
0:08:34.200 --> 0:08:38.680
Basically, what is common between all the vendors probably is

105
0:08:38.680 --> 0:08:43.040
that a sign-in binary means that we take

106
0:08:43.040 --> 0:08:47.360
the original binary and add some header on top of it.

107
0:08:47.360 --> 0:08:55.000
This header contain the digital signature

108
0:08:55.000 --> 0:09:00.360
and also some specific format at this type,

109
0:09:00.360 --> 0:09:03.920
which can be different across some vendors or can be

110
0:09:03.920 --> 0:09:07.480
also different within one vendor.

111
0:09:07.480 --> 0:09:10.720
But when we are using different signing tools,

112
0:09:10.720 --> 0:09:14.640
so if we try to sign our binary,

113
0:09:14.640 --> 0:09:18.400
we can always try to dump the few couple of bytes of

114
0:09:18.400 --> 0:09:25.640
our signed image and check if everything goes as expected.

115
0:09:25.880 --> 0:09:30.080
This is a quick recap from the last edition.

116
0:09:30.080 --> 0:09:34.400
So we look at the 11 cases,

117
0:09:34.400 --> 0:09:37.880
five of them like the NXP, IMX,

118
0:09:37.880 --> 0:09:40.480
and Lirescape, STSTM,

119
0:09:40.480 --> 0:09:35.700
and V

120
0:09:42.700 --> 0:09:46.800
looks like fully open-sourced, let's say.

121
0:09:46.800 --> 0:09:50.920
There was non-NDA problems with them,

122
0:09:50.920 --> 0:09:54.080
so everyone could try to take the documentation

123
0:09:54.080 --> 0:09:57.640
that needed fusing and signing tools,

124
0:09:57.640 --> 0:10:01.520
and try to implement the secure boot on them.

125
0:10:01.520 --> 0:10:06.320
We have couple of cases where there are information that

126
0:10:06.320 --> 0:10:10.680
there is some secure boot to enable on that given machine,

127
0:10:10.680 --> 0:10:12.560
but it is under the NDA.

128
0:10:12.560 --> 0:10:15.640
So we're talking here about the Marvel Armada,

129
0:10:15.640 --> 0:10:21.960
Texas Instruments, CITARA, Qualcomm, and Microchips.

130
0:10:21.960 --> 0:10:26.280
Also, we talk about two folks from

131
0:10:26.280 --> 0:10:29.280
the Chinese vendors like Rockship and Alwino,

132
0:10:29.280 --> 0:10:33.560
where some documentation was there,

133
0:10:33.560 --> 0:10:36.320
another was missing.

134
0:10:36.320 --> 0:10:39.480
Also, there were some information about tools,

135
0:10:39.480 --> 0:10:44.600
but we were not able to find them or maybe use them correctly.

136
0:10:45.440 --> 0:10:52.520
So now, I will go through three or four vendors

137
0:10:52.520 --> 0:10:54.640
that were listed from the last edition,

138
0:10:54.640 --> 0:10:56.760
and talk about the differences

139
0:10:56.760 --> 0:10:58.800
that was between those three years.

140
0:10:58.800 --> 0:11:02.320
So now, let's start from the NXP.

141
0:11:02.320 --> 0:11:05.840
In this case, I think this is

142
0:11:05.840 --> 0:11:13.680
the easiest way to start with the secure boot on the Arm socks,

143
0:11:13.680 --> 0:11:16.520
because the full documentation is there.

144
0:11:16.520 --> 0:11:19.920
All documentation is probably like,

145
0:11:21.760 --> 0:11:25.720
all documentation is publicly available,

146
0:11:25.720 --> 0:11:27.640
so everyone can use it.

147
0:11:27.640 --> 0:11:32.120
We have the hub for four,

148
0:11:32.120 --> 0:11:36.080
so the high assurance boot mechanism

149
0:11:36.080 --> 0:11:41.560
on the platforms that are the NXP IMX 50, 53,

150
0:11:41.560 --> 0:11:44.160
6, 7, and 8M.

151
0:11:44.160 --> 0:11:45.960
The application note is here.

152
0:11:45.960 --> 0:11:49.000
The only difference between here and there is

153
0:11:49.000 --> 0:11:55.720
that those applications are under the free registration to the site.

154
0:11:55.720 --> 0:11:59.840
The same is for the IMX 8 and IMX 8X,

155
0:11:59.840 --> 0:12:02.840
which uses the A-HAB mechanism,

156
0:12:02.840 --> 0:12:05.320
so advanced high assurance boot.

157
0:12:05.640 --> 0:12:09.760
The same for COIC-Q, and as you see here,

158
0:12:09.760 --> 0:12:14.720
the signing tool are available after the free registration.

159
0:12:15.000 --> 0:12:21.680
For Marvel Armada, we can look at

160
0:12:21.680 --> 0:12:25.560
the manuals that are available on the sites.

161
0:12:25.560 --> 0:12:30.920
We saw that for the 3D8 and 3D9X families,

162
0:12:30.920 --> 0:12:33.960
we have some information that NDA is needed.

163
0:12:33.960 --> 0:12:37.280
For other families like, I believe 8K,

164
0:12:37.280 --> 0:12:40.000
there is only information that there is

165
0:12:40.000 --> 0:12:43.040
a secure boot available but nothing else there.

166
0:12:43.040 --> 0:12:44.880
At the last edition,

167
0:12:44.880 --> 0:12:48.240
we present that in the U-Boot repositories,

168
0:12:48.240 --> 0:12:52.200
we can find some information about how to implement

169
0:12:52.200 --> 0:12:57.480
the secure boot on the Marvel Armada. But now, it is not there.

170
0:12:57.480 --> 0:13:01.480
It is only on all the releases.

171
0:13:01.480 --> 0:13:07.600
So this is another difficult step that need to be taken to

172
0:13:07.600 --> 0:13:11.160
find those informations.

173
0:13:11.680 --> 0:13:16.840
But yeah, if you will just use this from the 2018 branch,

174
0:13:16.840 --> 0:13:20.280
we'll see the information how to implement the secure boot.

175
0:13:20.280 --> 0:13:24.600
But yeah, still this is only the theoretical knowledge and

176
0:13:24.600 --> 0:13:28.560
there's no step-by-step solution how to achieve that.

177
0:13:28.560 --> 0:13:32.880
So probably, this I won't throw mistakes.

178
0:13:33.360 --> 0:13:40.120
In video taglia, another quick update.

179
0:13:40.120 --> 0:13:43.560
Last time, we saw that there are

180
0:13:43.560 --> 0:13:47.560
some documentations and tools available.

181
0:13:47.560 --> 0:13:52.680
We checked that within last year and it looks like,

182
0:13:52.680 --> 0:13:58.320
the documentation is some kind of uncertain because in one point,

183
0:13:58.320 --> 0:14:02.720
it tells that the secure boot is available and they also

184
0:14:02.720 --> 0:14:04.320
provides the flashing tools,

185
0:14:04.320 --> 0:14:06.760
the script called FlashSH.

186
0:14:06.760 --> 0:14:08.160
But in the other place,

187
0:14:08.160 --> 0:14:11.480
they just say that the secure boot will be available in the future.

188
0:14:11.480 --> 0:14:17.800
Nobody exactly know when the future will be.

189
0:14:17.800 --> 0:14:20.520
But yeah, that will be it.

190
0:14:20.520 --> 0:14:24.360
Also about fusing, there's additional script for that.

191
0:14:24.360 --> 0:14:28.040
But documentation of it is also some kind of updated.

192
0:14:28.040 --> 0:14:30.960
There's also one thread in the form of

193
0:14:30.960 --> 0:14:33.840
Nvidia where someone tried to use it to

194
0:14:33.840 --> 0:14:39.800
fuse keys on its platform and it caused the platform to break.

195
0:14:39.800 --> 0:14:44.800
Because it looks like not every board can be fused and before we execute that,

196
0:14:44.800 --> 0:14:47.560
we just need to check the serial numbers

197
0:14:47.560 --> 0:14:50.600
because some of them are supported some not.

198
0:14:50.600 --> 0:14:53.920
Also update on Alwina.

199
0:14:53.920 --> 0:14:57.800
So still, we think that there's

200
0:14:57.800 --> 0:15:00.520
no official documentation about the Alwina socks

201
0:15:00.520 --> 0:15:03.480
with which would tell us about the secure boot and

202
0:15:03.480 --> 0:15:07.600
also no official documentation about secure boot itself.

203
0:15:07.600 --> 0:15:12.480
But we found some interesting case on the forum where someone was able to

204
0:15:12.480 --> 0:15:16.160
use the NanoPioneer with Alwina H3.

205
0:15:16.160 --> 0:15:20.080
He there provides all the useful links,

206
0:15:20.080 --> 0:15:22.040
there's like 10 or 15 of them,

207
0:15:22.040 --> 0:15:26.280
or also the whole list of the verification process.

208
0:15:26.840 --> 0:15:31.840
With the link to the Sanxi Tools repository,

209
0:15:31.840 --> 0:15:37.560
which contains some tools which need to be used in order to find the binaries,

210
0:15:37.560 --> 0:15:42.160
and also fuse the sock.

211
0:15:42.880 --> 0:15:50.400
The one vulnerability though is that in any case when we,

212
0:15:50.400 --> 0:15:57.520
oh sorry, yeah, the one vulnerability is here that if we try to

213
0:15:57.520 --> 0:16:01.440
start our firmware which is signed and the verification fails,

214
0:16:01.440 --> 0:16:04.680
the platform always goes to the cell mode,

215
0:16:04.680 --> 0:16:07.840
which is some kind like the debit mode.

216
0:16:07.840 --> 0:16:13.480
This debit mode can be accessed via the USB port.

217
0:16:13.480 --> 0:16:16.560
So if the verification fails,

218
0:16:16.560 --> 0:16:20.280
someone could always plug in the USB,

219
0:16:20.280 --> 0:16:26.400
start some MeCom and then read everything from the fuses or maybe even wipe them.

220
0:16:26.400 --> 0:16:30.400
So the solution there for that was just to destroy

221
0:16:30.400 --> 0:16:34.200
the data lines on that given port.

222
0:16:34.200 --> 0:16:37.120
So even if the platform goes into the cell mode,

223
0:16:37.120 --> 0:16:42.560
no one will be able to just read anything from it.

224
0:16:42.560 --> 0:16:46.000
Okay, so now the media tech case.

225
0:16:46.000 --> 0:16:50.440
Documentation is provided on the GitLab pages.

226
0:16:50.440 --> 0:16:56.040
It is based on the Yocto project like project.

227
0:16:56.040 --> 0:16:59.840
So the steps there needs to be done inside

228
0:16:59.840 --> 0:17:02.320
the Yocto project build system to achieve

229
0:17:02.320 --> 0:17:06.480
the signing to achieve the implementing the secure boot.

230
0:17:06.480 --> 0:17:10.760
But basically, as in other ARM socks,

231
0:17:10.760 --> 0:17:14.240
the boot run there is like the root of trust.

232
0:17:14.240 --> 0:17:20.640
Later, we just achieve it using other mechanism to have the whole chain of trust.

233
0:17:20.640 --> 0:17:22.560
So after secure boot,

234
0:17:22.560 --> 0:17:25.240
we have the TFA trusted board boot,

235
0:17:25.240 --> 0:17:29.960
and then we can use the U-Boot feed verified boot to load our kernel image.

236
0:17:29.960 --> 0:17:37.880
So if we have all those steps, then we have whole boot process verified.

237
0:17:40.360 --> 0:17:48.960
Yeah, and it also was shown in a couple of reports,

238
0:17:48.960 --> 0:17:52.080
that the media tech boot run has some vulnerability,

239
0:17:52.080 --> 0:18:00.280
which if we power it in some special scenario,

240
0:18:00.280 --> 0:18:07.360
then the boot run may just skip the process of verification the image and still load the firmware.

241
0:18:07.360 --> 0:18:14.640
So it looks like even if we have the public key in the fuses and

242
0:18:14.640 --> 0:18:17.920
also the public key in the fuses,

243
0:18:17.920 --> 0:18:23.560
and we provide the unsigned image and use this vulnerability,

244
0:18:23.560 --> 0:18:28.320
we will be still able to boot our platform.

245
0:18:28.440 --> 0:18:33.160
This is a short recap how the secure boot looks on the media tech.

246
0:18:33.160 --> 0:18:37.200
So we have the BL1 step,

247
0:18:37.200 --> 0:18:38.640
which is like the boot run,

248
0:18:38.640 --> 0:18:43.240
which loads the hash based on the root of trust public key.

249
0:18:43.240 --> 0:18:47.240
So this is the public key that we put in the fuses.

250
0:18:47.240 --> 0:18:52.560
And calculates also the sha of the signatures of the BL2.

251
0:18:52.560 --> 0:18:54.760
So this is like the next step loaded.

252
0:18:54.760 --> 0:18:59.520
After that, we compare those two values and if everything is okay,

253
0:18:59.520 --> 0:19:02.880
we go next and the same.

254
0:19:04.440 --> 0:19:10.840
Yeah, and then we load the signature from the BL2,

255
0:19:10.840 --> 0:19:14.240
and also calculate the sha of it,

256
0:19:14.240 --> 0:19:17.360
made the comparison and if everything is once again is okay,

257
0:19:17.360 --> 0:19:20.840
we boot the next steps.

258
0:19:23.040 --> 0:19:27.320
And here's the process of enabling the secure boot.

259
0:19:27.320 --> 0:19:33.600
It is not clear from the documentation on which socks the secure boot can be enabled.

260
0:19:33.600 --> 0:19:42.280
The documentation mentioned the MT-8365 and MT-8395 ones.

261
0:19:42.280 --> 0:19:46.480
Different socks may have different FUS indexes.

262
0:19:46.480 --> 0:19:58.600
So it isn't really like we need to check those before we try to fuse our fuses in those socks.

263
0:19:58.600 --> 0:20:03.120
But unfortunately, those information is provided with NDA.

264
0:20:03.120 --> 0:20:05.760
In the process of enabling the secure boot,

265
0:20:05.760 --> 0:20:12.880
we need to create two keys, private keys and provide them to our build system,

266
0:20:12.880 --> 0:20:20.160
which find the BL2 load firmware and also something called the download agent,

267
0:20:20.160 --> 0:20:33.200
which is later used by additional proprietary tools to flush the image inside our platform.

268
0:20:33.200 --> 0:20:37.160
Which is also described like here, so we have the FUS writer tool.

269
0:20:37.160 --> 0:20:41.720
This is another tool provided with the NDA only,

270
0:20:41.720 --> 0:20:47.280
which can be used to check the secure boot state on our platform

271
0:20:47.280 --> 0:20:52.920
and check if the download agent authentication bits are set.

272
0:20:52.920 --> 0:20:59.800
If they are not set, we just need to set them and then provide the public key

273
0:20:59.800 --> 0:21:04.800
which will be fused on the key hash zero field.

274
0:21:04.800 --> 0:21:14.080
And after that, we will just sign our firmware and use this public key to verify it.

275
0:21:14.080 --> 0:21:19.640
Okay, so now let's go to the Rokchips case.

276
0:21:19.640 --> 0:21:23.880
The public key here can be stored in a fuses in the OTP

277
0:21:23.880 --> 0:21:28.200
and it depends on which sock we are using.

278
0:21:28.200 --> 0:21:37.160
If the verification of loaded binary will be successful,

279
0:21:37.160 --> 0:21:39.480
then we'll just extend our Rokchips stuff,

280
0:21:39.480 --> 0:21:45.400
so the bootgum as in the other ARM core socks to the chain of trust.

281
0:21:45.400 --> 0:21:48.960
And later, in case of Rokchips,

282
0:21:48.960 --> 0:21:55.960
we can use the fit verified boot mechanism from the SPL to the U-Boot

283
0:21:55.960 --> 0:22:02.200
and from the U-Boot to kernel to provide the whole chain of trust.

284
0:22:02.200 --> 0:22:05.360
So basically, to establish it, we need to like once again

285
0:22:05.360 --> 0:22:09.240
generate some private and public key file,

286
0:22:09.240 --> 0:22:12.920
burn the key public key into the fuses OTP registers,

287
0:22:12.920 --> 0:22:16.200
depends on which sock we are using.

288
0:22:16.200 --> 0:22:21.240
Then sign our firmware called edb-loaded image in case of Rokchips,

289
0:22:21.240 --> 0:22:28.120
which is like the U-Boot TPL plus SPL merge into one file.

290
0:22:28.120 --> 0:22:31.400
Then configure verified boot in SPL and U-Boot,

291
0:22:31.400 --> 0:22:35.600
which means that we will use the fit images to verify it from the SPL to U-Boot

292
0:22:35.600 --> 0:22:40.880
and from the U-Boot to kernel and just flush our signed images.

293
0:22:40.880 --> 0:22:46.080
Documentation for Rokchips and for our winner is like hard to find.

294
0:22:46.080 --> 0:22:54.080
And if we find any, probably it will be outdated or really short

295
0:22:54.080 --> 0:23:01.400
or just not such useful at fifth.

296
0:23:01.400 --> 0:23:08.800
So here we have diagram of finding the whole of enabling the secure boot.

297
0:23:08.800 --> 0:23:14.960
But basically, it is something I just described on the previous slide.

298
0:23:14.960 --> 0:23:17.640
And sorry for that, but because of time,

299
0:23:17.640 --> 0:23:22.200
we'll go just need to skip description of it.

300
0:23:22.200 --> 0:23:26.320
And now we can talk about signing code in Rokchips.

301
0:23:26.320 --> 0:23:29.560
So code can be signed using one of the two tools,

302
0:23:29.560 --> 0:23:32.640
the Erika-signed tool, which can be started on Linux,

303
0:23:32.640 --> 0:23:36.080
or secure boot tool, which can be started on Windows.

304
0:23:36.080 --> 0:23:40.200
Linux tools can be found on the Erika-bin repository.

305
0:23:40.200 --> 0:23:46.320
Windows tools was a couple days ago, a couple days.

306
0:23:46.320 --> 0:23:50.680
Some time ago was on the repository called calls tools,

307
0:23:50.680 --> 0:23:54.240
but now we are not able to find it.

308
0:23:54.240 --> 0:23:58.800
For some reasons, the Rokchips based repositories

309
0:23:58.800 --> 0:24:06.520
are maintained in such way that some things may be missing after some time.

310
0:24:06.520 --> 0:24:10.840
But if you use the Erika-signed tool, we can just generate the signing keys.

311
0:24:10.840 --> 0:24:16.840
And those keys can be used later with the Linux or Windows tools.

312
0:24:16.840 --> 0:24:21.800
And also the Erika repository provides the INI files,

313
0:24:21.800 --> 0:24:28.520
which are the files that can be used to create the INI mini loader,

314
0:24:28.520 --> 0:24:35.160
used later to fuse our keys in the firmware.

315
0:24:35.160 --> 0:24:40.360
And basically any given firmware that we want to sign and use in our socks

316
0:24:40.360 --> 0:24:42.680
can be also signed with those two tools.

317
0:24:46.200 --> 0:24:49.640
There is another tool just to bind the effuses.

318
0:24:49.640 --> 0:24:54.880
And we have for that the effuse tool, which is only for the Windows machines.

319
0:24:57.840 --> 0:25:02.280
It turns out that when we bind the effuses on the Rokchips socks,

320
0:25:02.280 --> 0:25:09.880
we also need to provide the voltage for one of the pins of the sock.

321
0:25:09.880 --> 0:25:21.480
So it is not visible here, but there should be like faucc, faucc, faue, effuse pin,

322
0:25:21.480 --> 0:25:32.040
which needs to be powered up when we want to fuse the keys in our sock.

323
0:25:32.040 --> 0:25:37.080
So for that we need to find some pin that is there and provide the power by ourselves.

324
0:25:37.080 --> 0:25:45.480
Or maybe our platform has some special circuit just to enable that.

325
0:25:45.480 --> 0:25:51.480
Also this information comes from another documentation that I have to find.

326
0:25:51.480 --> 0:25:54.120
This is a summarize of enable the secure boot.

327
0:25:54.120 --> 0:26:01.240
So we need to create loader using the boot merger script that is in the Erika bin repository.

328
0:26:01.240 --> 0:26:05.000
Next we create the keys with Erika sign tool.

329
0:26:05.000 --> 0:26:11.720
Next we need to sign the loader with secure boot tool because from what we know now,

330
0:26:11.720 --> 0:26:17.720
only sign it with that tool binaries can be later used on our socks.

331
0:26:17.720 --> 0:26:21.960
We try to sign with the Erika sign tool and it doesn't work.

332
0:26:21.960 --> 0:26:26.360
And now it looks like this can be hard to achieve

333
0:26:26.360 --> 0:26:32.120
because there is no way to download the secure boot tool from what we know now.

334
0:26:32.120 --> 0:26:38.520
Then we need to use the effuse tool to fuse our public key in socks

335
0:26:38.520 --> 0:26:43.560
and use another tool called the Erika develop tool,

336
0:26:43.560 --> 0:26:49.640
which is in the Erika bin repository just to load the sign net loader into our platform

337
0:26:49.640 --> 0:26:53.400
and had secure boot enabled.

338
0:26:53.400 --> 0:27:00.040
Here's a link for the blog post which describes all of that containing all of that

339
0:27:01.240 --> 0:27:05.320
what we've done with the workship platforms.

340
0:27:05.320 --> 0:27:10.520
So this is the summarize of where we are after the second edition.

341
0:27:10.520 --> 0:27:18.360
The changes are here about the NXP platforms where it looks like we now need to register

342
0:27:18.360 --> 0:27:24.120
to get the socks reference documentation.

343
0:27:24.120 --> 0:27:32.440
The Nvidia Tegra looks like the documentation is uncertain and may be outdated.

344
0:27:32.440 --> 0:27:35.720
The workship one we know now that it can be achieved,

345
0:27:35.720 --> 0:27:38.600
but still the documentation is not the best quality.

346
0:27:38.600 --> 0:27:40.200
The same with the all winner.

347
0:27:40.200 --> 0:27:49.000
And for the media tech, we see that NDA is needed to achieve the secure boot.

348
0:27:49.000 --> 0:27:52.360
So this is the summary of the presentation.

349
0:27:52.360 --> 0:27:56.520
Looks like our knowledge is expanded over the last two years.

350
0:27:56.520 --> 0:28:02.280
We, for example, know now how to enable the secure boot on the workship.

351
0:28:02.280 --> 0:28:07.160
Still the general principles is common for all the vendors.

352
0:28:07.160 --> 0:28:11.160
So we want to authenticate image before we load it.

353
0:28:12.040 --> 0:28:14.200
We have some private key to sign the firmware.

354
0:28:14.200 --> 0:28:16.600
We need to fuse the public key inside the sock.

355
0:28:17.160 --> 0:28:20.760
And the boot room is still fitting as the root of trust.

356
0:28:21.880 --> 0:28:26.760
All cases use the SHA-2456 as a hash function for digital signatures.

357
0:28:27.960 --> 0:28:31.160
And we see that more and more cases the documentation is

358
0:28:31.160 --> 0:28:37.880
under the NDA or the quality of it is really not the best.

359
0:28:39.720 --> 0:28:43.960
Okay, here's the way of how you can contact us.

360
0:28:43.960 --> 0:28:45.880
And thank you for that presentation.

361
0:28:52.600 --> 0:28:54.120
I think we are a little after time.

362
0:28:55.640 --> 0:28:57.560
Maybe one question if there is any.

363
0:28:57.560 --> 0:28:59.560
Okay.

364
0:28:59.560 --> 0:29:01.560
Yes?

365
0:29:01.560 --> 0:29:03.560
Okay.

366
0:29:03.560 --> 0:29:08.360
The question is about in NXP secure boot.

367
0:29:08.360 --> 0:29:17.240
You have a possibility to use ROM in your bootloader to check the fiber block.

368
0:29:17.240 --> 0:29:21.560
So you can use the secure boot of NXP for more components like fit and

369
0:29:21.560 --> 0:29:22.440
you bought and so on.

370
0:29:22.440 --> 0:29:26.680
Do you know if any of those new or the chips you have analyzed other platforms

371
0:29:26.680 --> 0:29:32.280
have similar things but you can call the ROM and use it as a root for trust.

372
0:29:33.160 --> 0:29:33.480
Okay.

373
0:29:33.480 --> 0:29:39.400
So the question was that the NXP provides the possibility to use the boot

374
0:29:39.400 --> 0:29:44.680
run to verify other parts of the firmware loaded in the whole process.

375
0:29:44.680 --> 0:29:48.200
And the question is if other vendors also provide such things.

376
0:29:48.200 --> 0:29:52.200
From what we know, this is only like the NXP case.

377
0:29:52.200 --> 0:29:57.000
And yeah, basically that's the answer.

378
0:29:57.800 --> 0:29:58.920
And yeah, maybe this one.

379
0:29:58.920 --> 0:30:03.000
How is given that you analyzed so many vendors,

380
0:30:03.000 --> 0:30:07.080
how is the support among the vendors for different types of key with different

381
0:30:07.080 --> 0:30:14.040
trust boundaries like the delegation key for like some facility like the production in Asia.

382
0:30:14.920 --> 0:30:19.160
Then you would revoke that key using your own back levels and use cases like this.

383
0:30:19.160 --> 0:30:19.800
Okay.

384
0:30:19.800 --> 0:30:26.600
So the question was, I believe, if we try to somehow,

385
0:30:29.000 --> 0:30:34.520
if there are any process to in order to change the key used to find the female.

386
0:30:34.520 --> 0:30:35.240
Yes.

387
0:30:35.240 --> 0:30:39.000
Or to have multiple keys like you would hand out one key.

388
0:30:39.000 --> 0:30:39.240
Okay.

389
0:30:39.240 --> 0:30:43.080
To have like multiple keys to one person and to another team, to another company,

390
0:30:43.080 --> 0:30:49.320
maybe even later revoke it.

391
0:30:49.320 --> 0:30:57.320
I believe that this will be depends on if we have some mechanism in our socks to provide

392
0:30:57.320 --> 0:30:58.520
more than one public key.

393
0:30:58.520 --> 0:30:58.760
Yeah.

394
0:30:59.800 --> 0:31:04.600
But as we said, those are one time only flashed in the socks.

395
0:31:04.600 --> 0:31:08.200
So if there is only one place, then I think that it will be only one,

396
0:31:08.200 --> 0:31:21.000
the private key used later for the verification.

397
0:31:21.000 --> 0:31:21.480
Okay.

398
0:31:21.480 --> 0:31:38.920
Thank you.


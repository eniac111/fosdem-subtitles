1
0:00:00.000 --> 0:00:08.220
Okay, hello everybody.

2
0:00:08.220 --> 0:00:11.880
So, my name is Doji.

3
0:00:11.880 --> 0:00:16.320
I work in the tools group at Red Hat.

4
0:00:16.320 --> 0:00:19.320
And so we're here today to, okay, first of all,

5
0:00:19.320 --> 0:00:21.840
thank you for staying.

6
0:00:21.960 --> 0:00:26.920
So, yeah, I wanted to talk about

7
0:00:26.920 --> 0:00:30.440
application binary interface analysis today.

8
0:00:30.440 --> 0:00:33.840
And okay, first of all,

9
0:00:33.840 --> 0:00:39.680
who doesn't know about the Babigail and ABI stuff?

10
0:00:39.680 --> 0:00:46.040
So, okay, so I think we'll have something for you guys.

11
0:00:46.040 --> 0:00:49.580
So, what are we going to talk about?

12
0:00:49.580 --> 0:00:52.400
So, first of all, I'll introduce what

13
0:00:52.400 --> 0:00:57.240
Abigail is and we'll look at how it works,

14
0:00:57.240 --> 0:01:00.880
what the projects brought recently,

15
0:01:00.880 --> 0:01:05.840
and what we're looking for as far as the future goes.

16
0:01:05.840 --> 0:01:10.280
So, Abigail is about

17
0:01:10.280 --> 0:01:14.440
doing analysis of application binary interfaces.

18
0:01:14.440 --> 0:01:20.920
So, it's a set of tools that can do things like compare

19
0:01:20.920 --> 0:01:26.080
the ABI of two binaries or store the ABI of

20
0:01:26.080 --> 0:01:30.760
a binary onto a disk format.

21
0:01:30.840 --> 0:01:37.720
Can do a comparison of binaries that are in packages,

22
0:01:37.720 --> 0:01:42.680
like Debian packages, RPMs, star files, etc.

23
0:01:42.680 --> 0:01:47.600
And it is also a shared library that you can

24
0:01:47.600 --> 0:01:50.800
use to write more tools if you want.

25
0:01:50.800 --> 0:01:56.200
So, that's all well and nice as far as marketing goes,

26
0:01:56.200 --> 0:02:00.560
but then let's look at what we mean by ABI.

27
0:02:00.560 --> 0:02:06.720
So, suppose you have a simple binary which has,

28
0:02:06.720 --> 0:02:09.800
okay, simple, no, very complicated, let's say,

29
0:02:09.800 --> 0:02:15.080
which has three functions that are here.

30
0:02:15.080 --> 0:02:20.680
The types of the functions are defined here in a simple hierarchy.

31
0:02:20.680 --> 0:02:23.200
Here you have the first type that inherit,

32
0:02:23.200 --> 0:02:26.480
S0 which inherits base type,

33
0:02:26.480 --> 0:02:32.200
and let's say another type here that inherits S0.

34
0:02:32.200 --> 0:02:38.440
Okay. So, that's the first version of it.

35
0:02:38.640 --> 0:02:43.600
Let's see if, I don't know if it compiles.

36
0:02:43.600 --> 0:02:45.240
Yes, it does.

37
0:02:45.240 --> 0:02:49.920
Then I have a second version of it which looks quite the same.

38
0:02:49.920 --> 0:02:52.720
But okay, what does it do?

39
0:02:52.720 --> 0:02:55.200
Okay. What's the difference between the two?

40
0:02:55.200 --> 0:02:57.120
Very simple. I just inserted

41
0:02:57.120 --> 0:03:01.440
a data member in the base class,

42
0:03:01.440 --> 0:03:07.960
and we want to know what the impact of this is on the ABI as far as the binary goes.

43
0:03:07.960 --> 0:03:09.280
So, where am I here?

44
0:03:09.280 --> 0:03:12.200
I'm in the source code of the project,

45
0:03:12.200 --> 0:03:16.040
and so I've built a version of it.

46
0:03:16.040 --> 0:03:21.200
So, here we have one of the tools which name is ABI diff,

47
0:03:21.200 --> 0:03:24.600
which does what you think it does.

48
0:03:25.120 --> 0:03:29.680
So, if I run it, what does it say?

49
0:03:29.680 --> 0:03:38.200
Basically, there are two changes as far as ABI goes in that battery due to the change of scene.

50
0:03:38.200 --> 0:03:41.920
So, the first change is about the first function,

51
0:03:41.920 --> 0:03:43.040
which is here.

52
0:03:43.040 --> 0:03:50.320
So, it is telling us basically that that function has a parameter type that changed,

53
0:03:50.320 --> 0:03:55.280
and the change is about this structure.

54
0:03:55.280 --> 0:03:59.920
Remember, something is interesting.

55
0:03:59.920 --> 0:04:01.280
The size hasn't changed,

56
0:04:01.280 --> 0:04:04.200
even though I've added a data member in there.

57
0:04:04.200 --> 0:04:07.320
So, you know the drill, right?

58
0:04:07.320 --> 0:04:10.680
If you don't, I can explain it more.

59
0:04:10.680 --> 0:04:12.640
But size hasn't changed,

60
0:04:12.640 --> 0:04:15.360
the base class has changed,

61
0:04:15.360 --> 0:04:21.680
and the change here is a data member insertion at a certain offset, blah, blah, blah.

62
0:04:21.680 --> 0:04:31.120
So, this is the impact of the change of the first type on the first interface.

63
0:04:31.120 --> 0:04:36.680
So, there is another interface that got impacted.

64
0:04:36.680 --> 0:04:45.480
And the parameter of that function, which was struct S1, changed as well.

65
0:04:45.480 --> 0:04:48.200
It base class changed.

66
0:04:48.200 --> 0:04:51.960
The base class was struct S0, right?

67
0:04:51.960 --> 0:04:56.520
And the details of S0 change were reported earlier.

68
0:04:56.520 --> 0:05:00.000
So, we don't have to repeat it again, right?

69
0:05:00.000 --> 0:05:06.320
So, here you see that we compute the changes, right?

70
0:05:06.320 --> 0:05:10.760
And we also analyze those changes so that we can detect

71
0:05:10.760 --> 0:05:14.000
if things have been reported earlier or not.

72
0:05:14.000 --> 0:05:21.920
And also, we mess up with more stuff because here we say,

73
0:05:21.920 --> 0:05:24.920
for instance, that there were two changes, for instance,

74
0:05:24.920 --> 0:05:28.520
but one got filtered out.

75
0:05:28.520 --> 0:05:31.560
What does that mean? So, let's see, for instance,

76
0:05:31.560 --> 0:05:37.000
if I recall the...

77
0:05:42.240 --> 0:05:48.400
Okay, I'll add a special...

78
0:05:48.400 --> 0:05:54.160
So, I've asked ABI-DIF to show me redundant changes

79
0:05:54.160 --> 0:05:56.520
because by default it removes redundant changes.

80
0:05:56.520 --> 0:06:00.800
And we see that we have the third function that was impacted as well

81
0:06:00.800 --> 0:06:04.000
by the change we created.

82
0:06:04.000 --> 0:06:10.560
And so, well, all the changes that impact function three

83
0:06:10.560 --> 0:06:12.080
were already reported.

84
0:06:12.080 --> 0:06:17.680
So, this is why it was suppressed.

85
0:06:17.680 --> 0:06:20.840
That change was suppressed by default because it was redundant.

86
0:06:20.840 --> 0:06:22.800
So, it's not just...

87
0:06:22.800 --> 0:06:24.320
We're not just diffing things.

88
0:06:24.320 --> 0:06:30.160
We're analyzing the diffs and we're trying to massage those diffs

89
0:06:30.160 --> 0:06:36.040
so that they can be consumed by human beings.

90
0:06:36.040 --> 0:06:42.880
So, this is what we mean by analyzing ABIs, basically.

91
0:06:42.880 --> 0:06:46.400
So, how it works.

92
0:06:46.400 --> 0:06:47.880
Libaby-Gal has...

93
0:06:47.880 --> 0:06:51.400
So, the library used to implement the tools has a front-end

94
0:06:51.400 --> 0:06:53.440
which is kind of backward.

95
0:06:53.440 --> 0:06:56.160
The front-end reads the binary.

96
0:06:56.160 --> 0:06:58.920
Usually it is backends that write binaries,

97
0:06:58.920 --> 0:07:00.280
okay, here, backward.

98
0:07:00.280 --> 0:07:05.320
So, we read the binary which has to be in the ELF format right now

99
0:07:05.320 --> 0:07:09.320
and we build an internal representation of it.

100
0:07:09.320 --> 0:07:16.400
We look at the publicly defined and exported symbols of,

101
0:07:16.400 --> 0:07:20.680
you know, declarations, basically functions and variables.

102
0:07:20.680 --> 0:07:23.440
We build a representation of them and their types.

103
0:07:23.440 --> 0:07:28.280
And then we construct the graph of the types like that

104
0:07:28.280 --> 0:07:31.400
and their subtypes and we pull all that together

105
0:07:31.400 --> 0:07:33.160
and we call that an ABI corpus.

106
0:07:33.160 --> 0:07:37.840
A corpus is an artifact for us that represent the ABI

107
0:07:37.840 --> 0:07:41.720
of the binary we're looking at.

108
0:07:41.720 --> 0:07:45.000
And so, there is a middle-end that acts

109
0:07:45.000 --> 0:07:47.320
on that internal representation.

110
0:07:47.320 --> 0:07:50.240
Said otherwise, it acts on ABI corpora.

111
0:07:50.240 --> 0:07:54.680
Corpora being the plural of corpus in Latin, right?

112
0:07:54.680 --> 0:07:55.880
Let's be pedantic.

113
0:07:55.880 --> 0:07:59.680
So, we can, as you've seen,

114
0:07:59.680 --> 0:08:04.320
compare two instances of ABI corpus.

115
0:08:04.320 --> 0:08:06.360
Then we build an internal representation

116
0:08:06.360 --> 0:08:09.120
of the results of the comparison.

117
0:08:09.120 --> 0:08:10.840
We call that a DIF IR.

118
0:08:10.840 --> 0:08:13.080
So, it's a different IR.

119
0:08:13.080 --> 0:08:18.880
And then we perform transformations on that DIF IR.

120
0:08:18.880 --> 0:08:23.680
Like categorization, so we will walk the graph and say, okay,

121
0:08:23.680 --> 0:08:26.520
this DIF node, we've seen it before,

122
0:08:26.520 --> 0:08:30.200
so we'll mark it as being redundant to this other one.

123
0:08:30.200 --> 0:08:36.120
And then there can be transformations

124
0:08:36.120 --> 0:08:38.200
that are suppression as well.

125
0:08:38.200 --> 0:08:38.920
Well, suppression.

126
0:08:38.920 --> 0:08:43.560
We will mark the nodes as being suppressed.

127
0:08:43.560 --> 0:08:46.840
For instance, because the user wrote something

128
0:08:46.840 --> 0:08:51.480
that we call a suppression specification file requiring

129
0:08:51.480 --> 0:08:57.200
that some type's changes might not be reported.

130
0:08:57.200 --> 0:09:02.680
So, once we have that well-massaged DIF IR,

131
0:09:02.680 --> 0:09:08.720
we have backends that work that DIF IR, obviously,

132
0:09:08.720 --> 0:09:12.760
or the initial IR, and do useful stuff.

133
0:09:12.760 --> 0:09:16.800
Like writing, you know, emitting reports, for instance,

134
0:09:16.800 --> 0:09:22.720
or emitting the representation of the ABI corpus

135
0:09:22.720 --> 0:09:28.320
in a disk saved format that we called ABI XML.

136
0:09:28.320 --> 0:09:35.800
So, what we've done recently, so I'm going a bit fast

137
0:09:35.800 --> 0:09:39.640
because to let time for questions and stuff,

138
0:09:39.640 --> 0:09:44.000
and we can go on and let's say not very structured discussion

139
0:09:44.000 --> 0:09:45.880
afterwards, if you like.

140
0:09:45.880 --> 0:09:52.600
So, yeah, in the recent times, what we've done is, well,

141
0:09:52.600 --> 0:09:53.600
you know DWARF.

142
0:09:53.600 --> 0:09:56.360
You know that it changes all the time

143
0:09:56.360 --> 0:09:59.280
with new versions of DWARF producers.

144
0:09:59.280 --> 0:10:06.600
So, with GCC 11 and LLVM 14, the default DWARF version

145
0:10:06.600 --> 0:10:10.600
was bumped to the version 5, which is quite ancient,

146
0:10:10.600 --> 0:10:11.080
actually.

147
0:10:11.080 --> 0:10:15.240
I think it was released in 2017 or something.

148
0:10:15.240 --> 0:10:19.280
So, yeah, we support most of that right now.

149
0:10:19.280 --> 0:10:23.720
And another major thing that happened recently

150
0:10:23.720 --> 0:10:29.600
was that, thanks to folks in this room that I won't,

151
0:10:29.600 --> 0:10:34.000
don't worry, I won't give your name,

152
0:10:34.000 --> 0:10:38.000
new debug info format were added because, yeah, we

153
0:10:38.000 --> 0:10:39.920
started with DWARF only.

154
0:10:39.920 --> 0:10:43.160
And so the CTF debug info format was, support

155
0:10:43.160 --> 0:10:44.640
was added to libabigail.

156
0:10:44.640 --> 0:10:51.120
So basically now, if you have a binary having CTF N or DWARF,

157
0:10:51.120 --> 0:10:57.240
you can choose whatever you want to use as a source of type

158
0:10:57.240 --> 0:10:59.600
information.

159
0:10:59.600 --> 0:11:06.280
So things being how they are, the code

160
0:11:06.280 --> 0:11:12.920
got changed a bit to be turned into a multi-frontend

161
0:11:12.920 --> 0:11:15.200
architecture.

162
0:11:15.200 --> 0:11:18.680
We also have a multi-backend architecture,

163
0:11:18.680 --> 0:11:23.680
basically, because we have different types of reports.

164
0:11:23.680 --> 0:11:25.560
The one I've shown you is the default one,

165
0:11:25.560 --> 0:11:26.840
which is quite verbose.

166
0:11:26.840 --> 0:11:29.480
So some people like it more terse.

167
0:11:29.480 --> 0:11:36.240
So, yeah, and who knows whatever weird request users might

168
0:11:36.240 --> 0:11:37.480
come with in the future.

169
0:11:37.480 --> 0:11:42.120
So, yeah, different report backends.

170
0:11:42.120 --> 0:11:45.360
And well, it doesn't stop there.

171
0:11:45.360 --> 0:11:50.240
We are still working on new stuff

172
0:11:50.240 --> 0:11:52.880
while coming from user request.

173
0:11:52.880 --> 0:11:57.600
So, yeah, apparently the new kids on the block,

174
0:11:57.600 --> 0:12:01.920
well, new kids in town now, cool stuff is BPF, right?

175
0:12:01.920 --> 0:12:09.560
And with BPF comes BTF, which is the type description

176
0:12:09.560 --> 0:12:11.440
format of BPF.

177
0:12:11.440 --> 0:12:17.440
And so there were some requests to support that.

178
0:12:17.440 --> 0:12:23.360
So it is now in mainline, even though it's not

179
0:12:23.360 --> 0:12:27.560
in the labial mainline, but it's not released yet.

180
0:12:27.560 --> 0:12:30.120
It should be released in the next version.

181
0:12:30.120 --> 0:12:31.360
So what do we do with that?

182
0:12:31.360 --> 0:12:32.760
What's that thing?

183
0:12:32.760 --> 0:12:39.560
Basically, because BPF describes the C types,

184
0:12:39.560 --> 0:12:47.040
basically, we are using that to compare the interface exposed

185
0:12:47.040 --> 0:12:48.880
by the kernel to its modules.

186
0:12:48.880 --> 0:12:53.280
So we're doing that with CTF already, with BPF now,

187
0:12:53.280 --> 0:12:55.800
and also with Dwarf.

188
0:12:55.800 --> 0:13:02.000
With Dwarf, it is much less fast, shall we say,

189
0:13:02.000 --> 0:13:07.000
than with the CTF support and BPF.

190
0:13:07.000 --> 0:13:19.000
So people are using that feature to analyze the KABI,

191
0:13:19.000 --> 0:13:23.600
basically, kernel ABI, that thing that doesn't exist.

192
0:13:23.600 --> 0:13:28.320
And then we've had weird project-specific requests

193
0:13:28.320 --> 0:13:29.560
over the year.

194
0:13:29.560 --> 0:13:35.800
And the last one that came in last month, I say,

195
0:13:35.800 --> 0:13:43.320
or last month in January, was to have a,

196
0:13:43.320 --> 0:13:45.200
I call that the library-set ABI analysis.

197
0:13:45.200 --> 0:13:51.160
So basically, it's a project that has a huge library,

198
0:13:51.160 --> 0:13:53.600
shared library, and they're planning

199
0:13:53.600 --> 0:13:57.160
to split it in different libraries.

200
0:13:57.160 --> 0:14:03.080
But then they keep ABI compatibility,

201
0:14:03.080 --> 0:14:04.240
they're supposed to.

202
0:14:04.240 --> 0:14:09.600
And so they would like to ensure that the set of broken-down

203
0:14:09.600 --> 0:14:14.480
libraries has an ABI that is equivalent or compatible

204
0:14:14.480 --> 0:14:16.560
with the first initial one.

205
0:14:16.560 --> 0:14:19.520
This is what I call library-set ABI analysis.

206
0:14:19.520 --> 0:14:22.960
So we're going to add support for that.

207
0:14:25.680 --> 0:14:28.480
I don't know if it's going to be in the next version or not.

208
0:14:28.480 --> 0:14:34.560
So yeah, these are the kinds of things we are working on.

209
0:14:34.560 --> 0:14:42.360
So yeah, and now I'll let you ask questions if you have any.

210
0:14:42.360 --> 0:14:44.560
Yeah?

211
0:14:44.560 --> 0:14:46.120
Does the library have any support

212
0:14:46.120 --> 0:14:47.800
for language-specific API?

213
0:14:47.800 --> 0:14:50.800
So languages are used on top of C, for example,

214
0:14:50.800 --> 0:14:53.120
where they have main means cubes?

215
0:14:53.120 --> 0:14:54.040
Yeah, exactly.

216
0:14:54.040 --> 0:15:03.720
So yes, of course, dwarf is multi-language.

217
0:15:03.720 --> 0:15:08.640
So if the compiler of that language emits dwarf,

218
0:15:08.640 --> 0:15:09.600
then we're good to go.

219
0:15:09.600 --> 0:15:13.720
There is a small layer of language-specific stuff

220
0:15:13.720 --> 0:15:17.720
we add for reporting so that we can report stuff

221
0:15:17.720 --> 0:15:21.280
in the native language of the programmer who

222
0:15:21.280 --> 0:15:22.600
wrote the thing.

223
0:15:22.600 --> 0:15:25.200
So to give you a concrete example,

224
0:15:25.200 --> 0:15:30.160
right now we support C++, C, Fortran.

225
0:15:30.160 --> 0:15:32.960
Someone asked me for Rust support.

226
0:15:32.960 --> 0:15:34.880
So we had that, basically.

227
0:15:34.880 --> 0:15:37.200
We have some crashes on OCaml.

228
0:15:37.200 --> 0:15:38.760
So I thought we were supporting it too,

229
0:15:38.760 --> 0:15:40.160
but I need to do some stuff.

230
0:15:40.160 --> 0:15:42.680
So yeah, basically, yeah, it needs work.

231
0:15:42.680 --> 0:15:44.240
But the new language, I just have

232
0:15:44.240 --> 0:15:48.480
to define a small layer for the mangling logic.

233
0:15:48.480 --> 0:15:52.560
The mangling logic, so OK, I can show you.

234
0:15:52.560 --> 0:15:53.920
Let me show you an example.

235
0:15:53.920 --> 0:16:00.680
So yeah, I was writing.

236
0:16:00.680 --> 0:16:01.720
So yeah, let's see.

237
0:16:01.720 --> 0:16:07.240
So you see, for instance, in C++, we'll compare.

238
0:16:07.240 --> 0:16:13.120
So here, you see this function, the function 3.

239
0:16:13.120 --> 0:16:17.840
I'll change it in the second version here, function 3,

240
0:16:17.840 --> 0:16:23.560
and I'll add an integer here, right?

241
0:16:23.560 --> 0:16:26.920
Yes, let's, whoops, we compile that.

242
0:16:34.680 --> 0:16:42.240
And whoops, weird stuff happened.

243
0:16:42.240 --> 0:16:48.400
So look at what it is saying here.

244
0:16:48.400 --> 0:16:51.920
So you see here, because we are in C++,

245
0:16:51.920 --> 0:16:55.920
I changed function 3 in the source code.

246
0:16:55.920 --> 0:16:59.200
Let me just, yeah, see?

247
0:16:59.200 --> 0:17:02.720
I changed function 3 here, and I added a parameter.

248
0:17:02.720 --> 0:17:06.400
That's what the programmer would say.

249
0:17:06.400 --> 0:17:10.320
But then, from the binary standpoint, what we're seeing

250
0:17:10.320 --> 0:17:13.600
is that the first function was removed,

251
0:17:13.600 --> 0:17:15.440
and then another one got added.

252
0:17:15.440 --> 0:17:21.400
This is because in C++, the name of the symbols

253
0:17:21.400 --> 0:17:24.400
of the two functions, the two versions of functions,

254
0:17:24.400 --> 0:17:25.080
are different.

255
0:17:25.080 --> 0:17:27.960
They have a different mangling.

256
0:17:27.960 --> 0:17:32.880
So we go from the name of the symbol

257
0:17:32.880 --> 0:17:36.480
to the name of the declaration.

258
0:17:36.480 --> 0:17:42.440
But if I do the same in C, then, like, yeah,

259
0:17:42.440 --> 0:17:43.960
I knew you would ask that question.

260
0:17:43.960 --> 0:17:47.680
I don't know you, but.

261
0:17:47.680 --> 0:17:50.640
So and I have a second version here.

262
0:17:55.320 --> 0:17:56.000
Boom, boom, boom.

263
0:17:58.880 --> 0:18:03.680
And so here, some, oh, sorry.

264
0:18:03.680 --> 0:18:09.520
I changed the parameter of the function there,

265
0:18:09.520 --> 0:18:11.840
but this is in C, OK?

266
0:18:11.840 --> 0:18:21.400
And so if I go in the shell, and I look at the two.

267
0:18:25.800 --> 0:18:30.720
The first one was hello, and this one is bye, of course,

268
0:18:30.720 --> 0:18:37.840
because I think this is going to be the last C here.

269
0:18:37.840 --> 0:18:42.360
Because in C, the name of the two symbols are the same.

270
0:18:42.360 --> 0:18:45.040
Now we say that the function has changed.

271
0:18:45.040 --> 0:18:47.320
So these are the kind of things that we'll

272
0:18:47.320 --> 0:18:48.600
have to adapt, basically.

273
0:18:48.600 --> 0:18:51.120
But there is not much to do.

274
0:18:51.120 --> 0:18:52.960
In some cases, you have mangling,

275
0:18:52.960 --> 0:18:56.640
and in the other cases, you don't.

276
0:18:56.640 --> 0:19:00.320
So you don't have anything to do with them for the mangling.

277
0:19:00.320 --> 0:19:02.040
Does that answer your question?

278
0:19:02.040 --> 0:19:04.240
Roughly.

279
0:19:04.240 --> 0:19:09.080
You have this part of the code which decodes the mangled name

280
0:19:09.080 --> 0:19:10.000
to a non-readable name?

281
0:19:10.000 --> 0:19:14.880
No, because the matching is done by dwarf.

282
0:19:14.880 --> 0:19:18.320
So we know that this symbol is for this declaration.

283
0:19:18.320 --> 0:19:21.120
So we don't have to do the mangling or demangling.

284
0:19:21.120 --> 0:19:23.200
We look at the addresses, and we know

285
0:19:23.200 --> 0:19:25.080
that this symbol is for that one.

286
0:19:25.080 --> 0:19:28.960
So yeah, we don't really care about that.

287
0:19:28.960 --> 0:19:30.440
Yeah, please go ahead.

288
0:19:30.440 --> 0:19:32.840
Do you think it's more about performance

289
0:19:32.840 --> 0:19:34.560
to keep when you analyze your results?

290
0:19:34.560 --> 0:19:37.760
Like, are they the one?

291
0:19:37.760 --> 0:19:39.160
Well, there is none.

292
0:19:39.160 --> 0:19:41.200
No, no, no, no.

293
0:19:41.200 --> 0:19:42.320
No, no, no, no.

294
0:19:42.320 --> 0:19:47.800
It's so yeah, just to repeat the question for them.

295
0:19:50.600 --> 0:19:53.480
What are the performance issues when

296
0:19:53.480 --> 0:19:57.640
we analyze big libraries like he said LLVM,

297
0:19:57.640 --> 0:20:01.720
but there is WebKit, Geko, et cetera, et cetera.

298
0:20:01.720 --> 0:20:09.680
So when we're looking at dwarf, we

299
0:20:09.680 --> 0:20:11.480
have a fundamental problem, which

300
0:20:11.480 --> 0:20:15.080
is the duplication of types.

301
0:20:15.080 --> 0:20:17.880
Here we are in the business of comparing things.

302
0:20:17.880 --> 0:20:23.480
And so when we compare types, basically we

303
0:20:23.480 --> 0:20:27.600
are in the land of quadratic algorithms.

304
0:20:27.600 --> 0:20:32.480
So things are inherently slow if we do them naively.

305
0:20:32.480 --> 0:20:38.400
And so the thing is in dwarf, every single type unit

306
0:20:38.400 --> 0:20:40.040
is represented.

307
0:20:40.040 --> 0:20:44.080
But then when you have the final binary, the final shell

308
0:20:44.080 --> 0:20:47.120
library, for instance, and you have, I don't know,

309
0:20:47.120 --> 0:20:51.200
1,000 translation units, and in every single translation unit

310
0:20:51.200 --> 0:20:54.960
you had the string type, for instance, that was used,

311
0:20:54.960 --> 0:20:59.800
then you will have the string type represented 1,000 times,

312
0:20:59.800 --> 0:21:02.760
at least in the dwarf.

313
0:21:02.760 --> 0:21:09.480
And so we must be sure that those 100 occurrences of string

314
0:21:09.480 --> 0:21:11.280
are the one and the same.

315
0:21:11.280 --> 0:21:13.880
We can't just look at the name and say they're the same

316
0:21:13.880 --> 0:21:16.800
because they could be otherwise.

317
0:21:16.800 --> 0:21:20.640
And so we have to compare them and make sure they're the same.

318
0:21:20.640 --> 0:21:22.720
And then we'll say, OK, I'll just keep one

319
0:21:22.720 --> 0:21:24.840
and throw away the others.

320
0:21:24.840 --> 0:21:28.040
This is the duplication of type, it is called.

321
0:21:28.040 --> 0:21:35.360
And so this process takes a huge amount of time, which is, well,

322
0:21:35.360 --> 0:21:39.240
for huge libraries, it can take forever.

323
0:21:39.240 --> 0:21:46.720
So we have heuristics to make this thing be faster.

324
0:21:46.720 --> 0:21:49.800
But then it takes time.

325
0:21:49.800 --> 0:21:52.640
So we have some of the heuristics

326
0:21:52.640 --> 0:21:59.160
that we're using now is in the land of partitioning.

327
0:21:59.160 --> 0:22:05.560
We will do things piecewise so that we

328
0:22:05.560 --> 0:22:07.000
can do things in parallel.

329
0:22:10.760 --> 0:22:12.800
It is not main line yet, but this

330
0:22:12.800 --> 0:22:16.240
is the future we're thinking about.

331
0:22:16.240 --> 0:22:20.400
Another approach is to have the types be deduplicated

332
0:22:20.400 --> 0:22:22.400
before we intervene.

333
0:22:22.400 --> 0:22:25.920
This is what, for instance, the CTF guys do with C.

334
0:22:25.920 --> 0:22:29.880
So they will do the deduplication at debug info

335
0:22:29.880 --> 0:22:31.360
production time.

336
0:22:31.360 --> 0:22:34.520
And then in that case, we're golden.

337
0:22:34.520 --> 0:22:38.680
There is another case where we're doing that

338
0:22:38.680 --> 0:22:41.880
is when we are building distribution packages,

339
0:22:41.880 --> 0:22:43.120
like, for instance, I don't know,

340
0:22:43.120 --> 0:22:46.040
RPM or Debian package or whatever,

341
0:22:46.040 --> 0:22:50.240
there is a tool which is called DWZ, which

342
0:22:50.240 --> 0:22:54.400
does the deduplication to one extent.

343
0:22:54.400 --> 0:22:56.560
Well, when it works, it works.

344
0:22:56.560 --> 0:22:57.800
It does the deduplication.

345
0:22:57.800 --> 0:23:01.280
But the problem is DWZ has the same issue as us.

346
0:23:01.280 --> 0:23:08.080
And sometimes when the binary is too big, DWZ will just give up.

347
0:23:08.080 --> 0:23:11.360
And in that case, well, we have to use our little hands

348
0:23:11.360 --> 0:23:13.720
and do the deduplication in line.

349
0:23:13.720 --> 0:23:15.280
And then, well, we'll spend time.

350
0:23:15.280 --> 0:23:16.600
But this because someone should get

351
0:23:16.600 --> 0:23:20.680
the DWZ turned into a library and put it in the linker.

352
0:23:20.680 --> 0:23:21.160
Yes.

353
0:23:21.160 --> 0:23:22.160
And yes.

354
0:23:22.160 --> 0:23:23.600
Do it in link time.

355
0:23:23.600 --> 0:23:24.160
Yeah, we can.

356
0:23:24.160 --> 0:23:29.320
Yeah, that's something that one of the things

357
0:23:29.320 --> 0:23:31.600
that we need to do to improve the entire ecosystem

358
0:23:31.600 --> 0:23:33.080
of these things.

359
0:23:33.080 --> 0:23:34.840
And yeah, that's definitely.

360
0:23:34.840 --> 0:23:37.320
So someone comes for free time and.

361
0:23:37.320 --> 0:23:38.120
Yeah.

362
0:23:38.120 --> 0:23:39.680
So yeah.

363
0:23:39.680 --> 0:23:46.240
So as I'm, do we have other questions?

364
0:23:46.240 --> 0:23:48.240
Or?

365
0:23:48.240 --> 0:23:48.740
Yeah.

366
0:23:48.740 --> 0:23:52.880
So are there any other formats that are on your roadmap?

367
0:23:52.880 --> 0:23:54.800
Right now, no.

368
0:23:54.800 --> 0:23:59.280
But three months ago, BTF was not on my roadmap.

369
0:23:59.280 --> 0:24:01.440
So the future is not what it used to be.

370
0:24:01.440 --> 0:24:03.240
So I don't know.

371
0:24:03.240 --> 0:24:04.240
Yeah.

372
0:24:04.240 --> 0:24:08.240
Anyway, so yeah, we are hosted on Sourceware.

373
0:24:08.240 --> 0:24:09.760
We still use mailing lists.

374
0:24:09.760 --> 0:24:12.560
You send us patches.

375
0:24:12.560 --> 0:24:18.920
And yeah, you can find us on IRC on the OfTeeC network.

376
0:24:18.920 --> 0:24:42.880
And well, thank you very much.


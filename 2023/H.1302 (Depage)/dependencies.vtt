WEBVTT

00:00.000 --> 00:07.000
Good morning. So, since we're all here, we probably all use...

00:07.000 --> 00:10.000
You have to talk quite loud. Sorry.

00:10.000 --> 00:13.000
Sorry. Since we're all here, you probably...

00:13.000 --> 00:14.000
Thanks.

00:14.000 --> 00:18.000
All use open source, which is great because it offers us

00:18.000 --> 00:21.000
functionality without us having to write it ourselves.

00:21.000 --> 00:25.000
But the downside is for the dependencies that we declare,

00:25.000 --> 00:28.000
we tend to pull in a bunch of transitive dependencies,

00:28.000 --> 00:32.000
and any of those can contain vulnerabilities.

00:32.000 --> 00:38.000
So, you might remember December of 21, because I do.

00:38.000 --> 00:44.000
And from your laughter, you probably spent those days in much the same way I did.

00:44.000 --> 00:48.000
I was working at a Dutch retail platform that uses microservices,

00:48.000 --> 00:54.000
and because of log4shell, we got to update everything urgently, twice.

00:54.000 --> 01:00.000
Because after the first CVE was fixed, there were multiple other CVEs,

01:00.000 --> 01:02.000
so, you know, fun times.

01:02.000 --> 01:06.000
And then in March, we got to do it again because of Spring4shell.

01:06.000 --> 01:09.000
But at least we got to practice it the first time.

01:09.000 --> 01:12.000
So, it was fascinating this time, right?

01:12.000 --> 01:18.000
As we know, using external dependencies has pros and cons.

01:18.000 --> 01:21.000
I have more on that, but not in these 20 minutes.

01:21.000 --> 01:26.000
I'll share a link to my website that has all of this information at the end.

01:26.000 --> 01:30.000
So, we have to maintain our dependencies and make sure we keep them up to date.

01:30.000 --> 01:34.000
So, I'm going to give you an overview of different tools that you can use,

01:34.000 --> 01:38.000
ending with, normally I would end with open rewrite, but Tim is here,

01:38.000 --> 01:42.000
so he's going to do the honors for that one.

01:42.000 --> 01:45.000
You probably use Maven or Gradle to manage your dependencies,

01:45.000 --> 01:49.000
so you will probably also know that you can use Maven dependency tree

01:49.000 --> 01:53.000
to get your dependency tree of your declared dependencies

01:53.000 --> 01:56.000
and their transitive dependencies.

01:56.000 --> 02:00.000
And you can ask Maven, hey, which ones have updates available

02:00.000 --> 02:03.000
so that you know what you could be updating.

02:03.000 --> 02:06.000
And you can use a command to analyze your dependencies

02:06.000 --> 02:11.000
to see which transitive dependencies you're using but haven't declared,

02:11.000 --> 02:16.000
and also which you have declared and are using that you might want to remove,

02:16.000 --> 02:20.000
or in the case of JUnit, add some tests.

02:20.000 --> 02:25.000
Gradle has a command as well to get your dependency tree.

02:25.000 --> 02:31.000
As far as I know, it doesn't have a command to get updated versions,

02:31.000 --> 02:34.000
but you can use a plugin like the Venn mains version plugin.

02:34.000 --> 02:38.000
And I'm also not familiar with an analyze command.

02:38.000 --> 02:42.000
If you're a Gradle user and you do know how to do that, please tell me.

02:42.000 --> 02:46.000
And as I currently work for JetBrains, I'm also going to tell you

02:46.000 --> 02:50.000
what intelligent idea can do to help you manage your dependencies.

02:50.000 --> 02:55.000
So you can view your dependency hierarchy in the built-in window,

02:55.000 --> 02:58.000
either for Maven or for Gradle.

02:58.000 --> 03:02.000
And here you can see, again, the hierarchy of the direct dependencies

03:02.000 --> 03:04.000
and their transitive dependencies.

03:04.000 --> 03:07.000
And you can expand and collapse as you like,

03:07.000 --> 03:10.000
which is easier than reading it from the terminal.

03:10.000 --> 03:13.000
And you can analyze dependencies as well.

03:13.000 --> 03:17.000
We use the dependency analyzer in intelligent idea.

03:17.000 --> 03:22.000
This year, or past year, we added a functionality called Package Search,

03:22.000 --> 03:26.000
which allows you to manage your dependencies right inside your IDE.

03:26.000 --> 03:28.000
So you can use code completion, for example,

03:28.000 --> 03:32.000
to add dependencies right inside your build file

03:32.000 --> 03:39.000
without having to go outside of your IDE, like so.

03:39.000 --> 03:43.000
And it will also tell you with a little squiggly line,

03:43.000 --> 03:47.000
I don't know what the official name is, so I'm going with squiggly line,

03:47.000 --> 03:50.000
that will highlight, hey, there's a new version available for this

03:50.000 --> 03:56.000
and then either with a hover or the familiar Alt-Enter or Option-Enter.

03:56.000 --> 03:57.000
Option-Enter.

03:57.000 --> 03:58.000
Option-Enter.

03:58.000 --> 04:01.000
That will suggest fixes.

04:01.000 --> 04:03.000
So, for example, to update this version.

04:03.000 --> 04:08.000
I'm using a project that's really outdated from my GitHub graveyard of projects.

04:08.000 --> 04:10.000
The project itself is pretty useless,

04:10.000 --> 04:12.000
but it's a perfect example of outdated dependencies.

04:12.000 --> 04:18.000
So don't worry, this is not being used in production.

04:18.000 --> 04:21.000
So, yeah, you can use Intention Actions, like I said,

04:21.000 --> 04:28.000
to update the dependencies, and this works in build gradles too.

04:28.000 --> 04:31.000
And there's the dependency tools window that you can open

04:31.000 --> 04:33.000
where you can manage your dependencies.

04:33.000 --> 04:37.000
So you can, as you can see in this example,

04:37.000 --> 04:39.000
you can upgrade all of them at once,

04:39.000 --> 04:41.000
or you can upgrade individual ones,

04:41.000 --> 04:45.000
or you can select the version to use from the list of versions.

04:45.000 --> 04:49.000
You see information about the dependency right in this window.

04:49.000 --> 04:53.000
You can search for dependencies and find information about those dependencies

04:53.000 --> 04:59.000
right inside your IDE, so you don't have to go to search Maven or somewhere else.

04:59.000 --> 05:03.000
And in IntelliJ Ultimate, we have the package checker functionality,

05:03.000 --> 05:06.000
which even provides information.

05:06.000 --> 05:09.000
So this is if you hover over a vulnerable dependency

05:09.000 --> 05:12.000
that's highlighted in yellow-ish.

05:12.000 --> 05:16.000
It will tell you these are the vulnerabilities

05:16.000 --> 05:18.000
that were found in this dependency,

05:18.000 --> 05:21.000
and you can click the links to go to the checkmarks advisory

05:21.000 --> 05:25.000
for more information on that.

05:25.000 --> 05:30.000
And you can also see that information in the vulnerable dependencies tool window,

05:30.000 --> 05:35.000
so you can see which of your dependencies have vulnerabilities,

05:35.000 --> 05:38.000
what the severity is, find more information,

05:38.000 --> 05:41.000
and fix it right inside your IDE.

05:41.000 --> 05:45.000
So all of these tools are great because you can use them right

05:45.000 --> 05:47.000
as you're working on your code,

05:47.000 --> 05:50.000
but the downside is you need to be actually working on that project.

05:50.000 --> 05:54.000
And if, like I did at my last job, you have a bunch of microservices

05:54.000 --> 05:56.000
that adds up to a bunch of repos.

05:56.000 --> 06:00.000
You'd have to check out each individual repo and check for updates.

06:00.000 --> 06:03.000
And then, of course, you still have to apply those

06:03.000 --> 06:06.000
to verify that everything still works, et cetera.

06:06.000 --> 06:13.000
So hopefully your company will have some kind of software composition analysis

06:13.000 --> 06:15.000
that can scan your repositories

06:15.000 --> 06:18.000
and sometimes also your Docker containers

06:18.000 --> 06:22.000
and provide you with an overview of your repos

06:22.000 --> 06:26.000
and which ones have which vulnerable dependencies.

06:26.000 --> 06:29.000
The upside is that as a developer,

06:29.000 --> 06:32.000
you won't have to individually check all of your repositories,

06:32.000 --> 06:35.000
but the downside is I still have to check the dashboard

06:35.000 --> 06:37.000
to see what's outdated

06:37.000 --> 06:43.000
and then again still apply and verify all of those updates.

06:43.000 --> 06:46.000
The next generation of tools that is useful

06:46.000 --> 06:49.000
are bots that can create PRs for you.

06:49.000 --> 06:53.000
Since we're in the Java room, I'm assuming we use Java,

06:53.000 --> 06:55.000
and these are the options that we have.

06:55.000 --> 06:59.000
Dependable, Renovate, and Snick Open Source.

06:59.000 --> 07:03.000
Dependable is now GitHub native and it offers three features.

07:03.000 --> 07:05.000
It can alert on your repositories.

07:05.000 --> 07:08.000
It can create security updates,

07:08.000 --> 07:12.000
so PRs for dependencies that have no vulnerabilities,

07:12.000 --> 07:15.000
to update them, and it can do version updates.

07:15.000 --> 07:18.000
So then there's a new version for other reasons.

07:18.000 --> 07:25.000
Since it's GitHub native, you can configure it in your settings on GitHub.

07:25.000 --> 07:29.000
It's also available on other platforms,

07:29.000 --> 07:33.000
but I use GitHub just to compare the three bots.

07:33.000 --> 07:36.000
So if you have alerts, you'll see a yellow box

07:36.000 --> 07:39.000
with a button to press for more information.

07:39.000 --> 07:42.000
If it generates PRs for security updates,

07:42.000 --> 07:45.000
that's what this would look like.

07:45.000 --> 07:48.000
And if you want to use the version updates as well,

07:48.000 --> 07:51.000
you'll need to add a dependable YAML.

07:51.000 --> 07:54.000
Insert obligatory YAML sounds like

07:54.000 --> 07:58.000
the Dutch word yummer, which means too bad or unfortunate.

07:58.000 --> 08:02.000
And you have to provide a little bit of configuration.

08:02.000 --> 08:07.000
You can set the frequency, the maximum number of PRs to schedule,

08:07.000 --> 08:12.000
and some minor details on how to manage these PRs.

08:12.000 --> 08:15.000
The next option is Renovate, which is an open source project,

08:15.000 --> 08:18.000
but also with a vendor behind it.

08:18.000 --> 08:20.000
This offers the security updates and the version updates,

08:20.000 --> 08:24.000
like dependables, but also a project and a job's dashboard

08:24.000 --> 08:27.000
for some more information.

08:27.000 --> 08:31.000
GitHub, it's also fairly easy to apply this to your projects.

08:31.000 --> 08:35.000
You can use the app, and you can choose to apply it

08:35.000 --> 08:39.000
to either all of your projects or only certain projects.

08:39.000 --> 08:42.000
So if you want to just, if you've never used one of these bots

08:42.000 --> 08:45.000
and you want to try it out, this is one that you can try out

08:45.000 --> 08:48.000
on just one repository, as far as I know,

08:48.000 --> 08:50.000
only one of these three.

08:50.000 --> 08:53.000
It will then generate a configuration for you,

08:53.000 --> 08:56.000
and once you merge that basic configuration,

08:56.000 --> 09:02.000
it will start doing its thing and generating PRs.

09:02.000 --> 09:05.000
You can also specify the maximum number of PRs

09:05.000 --> 09:07.000
and the maximum number of branches that you want to open

09:07.000 --> 09:11.000
at a certain time, and it has more options,

09:11.000 --> 09:15.000
and those options are more fine grained than the dependable options.

09:15.000 --> 09:18.000
The PRs provide more information as well.

09:18.000 --> 09:21.000
Why is it trying to update these versions,

09:21.000 --> 09:24.000
as well as some information on how old is this package?

09:24.000 --> 09:27.000
This is an old screenshot, sorry.

09:27.000 --> 09:30.000
Adoption rate among renovate users,

09:30.000 --> 09:34.000
how many percentage of the builds that pass with this update,

09:34.000 --> 09:39.000
and how confident they feel about doing this update,

09:39.000 --> 09:43.000
where neutral means either they can't tell based on the information

09:43.000 --> 09:46.000
they have or they don't have enough information yet.

09:46.000 --> 09:49.000
It will also add a dashboard to your project

09:49.000 --> 09:52.000
with a list of all of the things that you need to update,

09:52.000 --> 09:56.000
and there will be a jobs dashboard where you can check the details

09:56.000 --> 09:58.000
of all of the jobs that have run.

09:58.000 --> 10:01.000
The last option is sneak open source,

10:01.000 --> 10:04.000
which also offers security updates and version updates,

10:04.000 --> 10:08.000
and some dashboards, as well as the option to check for vulnerabilities

10:08.000 --> 10:12.000
in new PRs, making sure that you're not adding vulnerable dependencies,

10:12.000 --> 10:15.000
and it can check your source code.

10:15.000 --> 10:18.000
Slightly more steps to enable that.

10:18.000 --> 10:22.000
You can go to their website, authorize your GitHub,

10:22.000 --> 10:27.000
select which repositories, either public or public and private,

10:27.000 --> 10:32.000
add a token, and then it will generate PRs for you,

10:32.000 --> 10:37.000
also providing some information on why they are giving you this update

10:37.000 --> 10:40.000
with more information about the vulnerability,

10:40.000 --> 10:43.000
if it's for vulnerability reasons.

10:43.000 --> 10:49.000
What sneak does by default is it will bundle PRs that are related,

10:49.000 --> 10:54.000
so it generates less noise, so less individual PRs.

10:54.000 --> 10:56.000
You can configure Renové to do that as well,

10:56.000 --> 10:59.000
but then you have to configure that yourself.

10:59.000 --> 11:04.000
Sneak also checks on incoming PRs and provides a dashboard,

11:04.000 --> 11:06.000
again, it will update the projects.

11:06.000 --> 11:08.000
I hope your dashboard doesn't include this.

11:08.000 --> 11:14.000
It has some configuration options for frequency and to enable or disable,

11:14.000 --> 11:18.000
either for new or known vulnerabilities.

11:18.000 --> 11:22.000
If you want to start with only making sure you're not getting new ones in

11:22.000 --> 11:24.000
and separately tackle your backlog,

11:24.000 --> 11:29.000
or if you want to apply it to some projects, you can configure that.

11:29.000 --> 11:34.000
The pros and cons of these bots are fairly straightforward

11:34.000 --> 11:37.000
to add to your repositories.

11:37.000 --> 11:41.000
It's a lot less work doing this just once than manually checking it every time

11:41.000 --> 11:43.000
that you're working on a repository.

11:43.000 --> 11:45.000
They can create automatic PRs,

11:45.000 --> 11:48.000
so it doesn't depend on you checking for updates anymore.

11:48.000 --> 11:50.000
It will do that automatically.

11:50.000 --> 11:53.000
The downside of that is it can create a lot of noise,

11:53.000 --> 11:56.000
especially depending on how outdated your projects are

11:56.000 --> 11:59.000
and the maximum number of PRs that you've set,

11:59.000 --> 12:02.000
and you will still need to manage those PRs.

12:02.000 --> 12:06.000
So if the build fails, you know that you have more work to do,

12:06.000 --> 12:08.000
because either some stuff doesn't compile anymore,

12:08.000 --> 12:11.000
or your tests are failing and you need to look into it,

12:11.000 --> 12:13.000
that's at least good to know.

12:13.000 --> 12:18.000
But even if it's green, you still need to find the time to deploy that

12:18.000 --> 12:20.000
and make sure that everything still works,

12:20.000 --> 12:23.000
depending on how confident you are with your test suite.

12:23.000 --> 12:29.000
We had a feel-safe update that managed to stop running the integration test,

12:29.000 --> 12:33.000
so it looked green but really wasn't.

12:33.000 --> 12:36.000
So we have to revert that,

12:36.000 --> 12:38.000
and these bots only update the versions

12:38.000 --> 12:41.000
and they don't make any changes to your code.

12:41.000 --> 12:46.000
So that's when we get to migration tools.

12:46.000 --> 12:48.000
You might not be aware,

12:48.000 --> 12:51.000
IntelliJ Idea has a migration refactor,

12:51.000 --> 12:56.000
and it offers several standard or well-known refactoring,

12:56.000 --> 13:01.000
so Java EE to Jakarta EE, JUnit 4 to 5,

13:01.000 --> 13:05.000
as well as the option to create your own.

13:05.000 --> 13:10.000
If you're interested in the JUnit or Java EE refactorings,

13:10.000 --> 13:15.000
we have videos on our IntelliJ Idea YouTube channel that detail all of that.

13:15.000 --> 13:18.000
Basically what it does is it will update the imports,

13:18.000 --> 13:21.000
but there are some manual steps that you still have to do.

13:21.000 --> 13:25.000
So it can help you a little bit.

13:25.000 --> 13:26.000
Then there are other tools.

13:26.000 --> 13:28.000
Error-prone is one of those tools.

13:28.000 --> 13:32.000
It's not intended to be a migration tool.

13:32.000 --> 13:38.000
It's a static analysis tool to check for known bug patterns in your code.

13:38.000 --> 13:44.000
It offers a number of standard bug patterns that have been identified.

13:44.000 --> 13:47.000
It can either report on them or fix them,

13:47.000 --> 13:50.000
and included with error-prone is refaster,

13:50.000 --> 13:53.000
which is a refactoring based on before and after templates.

13:53.000 --> 13:59.000
So you can use that to help you migrate from one pattern to the next.

13:59.000 --> 14:03.000
I know, for example, that Sandermuk at Picnic has said

14:03.000 --> 14:06.000
that they used it to upgrade to newer Java versions.

14:06.000 --> 14:09.000
He's done talks on that at, for example,

14:09.000 --> 14:14.000
NLJ conference, JSpring, and JFool, if you want to go find that on YouTube.

14:14.000 --> 14:18.000
Then another migration tool is OpenRee, right?

14:18.000 --> 14:20.000
That team is going to tell you all about.

14:20.000 --> 14:22.000
Thank you.

14:22.000 --> 14:23.000
Thank you.

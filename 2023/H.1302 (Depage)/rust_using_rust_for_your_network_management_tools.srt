1
0:00:00.000 --> 0:00:15.880
Fernando, he's going to talk about using Rust for your network management tools.

2
0:00:15.880 --> 0:00:17.880
Take it away.

3
0:00:17.880 --> 0:00:19.880
All right.

4
0:00:19.880 --> 0:00:21.880
Thank you.

5
0:00:21.880 --> 0:00:23.880
All right.

6
0:00:23.880 --> 0:00:25.260
So welcome everyone.

7
0:00:25.260 --> 0:00:26.260
My name is Fernando.

8
0:00:26.260 --> 0:00:28.120
I'm a senior software engineer at Dreyhat.

9
0:00:28.120 --> 0:00:33.280
I work for the networking services team mainly in focus on network management tools.

10
0:00:33.280 --> 0:00:40.600
And today we're going to talk what was our journey building a Rust tool for network management.

11
0:00:40.600 --> 0:00:42.040
So okay.

12
0:00:42.040 --> 0:00:43.280
We did not start with Rust.

13
0:00:43.280 --> 0:00:44.760
We started with Python.

14
0:00:44.760 --> 0:00:48.020
But after some time we decided we wanted to shift to Rust.

15
0:00:48.020 --> 0:00:50.420
So this is two talks in one.

16
0:00:50.420 --> 0:00:57.040
One is how we did build the project in Rust and what we learned when moving from Python

17
0:00:57.040 --> 0:00:58.720
to Rust.

18
0:00:58.720 --> 0:00:59.880
Okay.

19
0:00:59.880 --> 0:01:00.880
So network management.

20
0:01:00.880 --> 0:01:01.880
What's network management?

21
0:01:01.880 --> 0:01:05.400
Basically it's all the operations that you do to configure your networking.

22
0:01:05.400 --> 0:01:11.480
Roots, interfaces, DNS, firewalling, whatever you do, it's network management.

23
0:01:11.480 --> 0:01:16.420
So it's a process that is quite complex because it requires a lot of coordination between

24
0:01:16.420 --> 0:01:18.560
user space and kernel space.

25
0:01:18.560 --> 0:01:23.480
We need to check when we get notification for kernel space because all the tools would

26
0:01:23.480 --> 0:01:26.620
modify the network status.

27
0:01:26.620 --> 0:01:32.720
We also need to communicate with kernel in order to configure stuff.

28
0:01:32.720 --> 0:01:35.040
So it's a quite complex task.

29
0:01:35.040 --> 0:01:39.200
And this is already a tool which is network manager.

30
0:01:39.200 --> 0:01:46.440
It's by default the tool that is in almost all situations used for managing your Linux

31
0:01:46.440 --> 0:01:48.160
network configuration.

32
0:01:48.160 --> 0:01:53.240
And we were willing to use it and we were willing to build in top of network manager

33
0:01:53.240 --> 0:01:56.920
because implementing everything was really, really complex.

34
0:01:56.920 --> 0:01:58.600
So we created NMSstate.

35
0:01:58.600 --> 0:02:05.640
And NMSstate is a tool that communicates with network manager and it's a library with a

36
0:02:05.640 --> 0:02:13.520
command line tool and allows us to configure the network using declarative states.

37
0:02:13.520 --> 0:02:18.360
So you can define what do you want and you don't need to care about how is network manager

38
0:02:18.360 --> 0:02:20.720
or how is the kernel doing.

39
0:02:20.720 --> 0:02:23.240
And what's going to do or what are the dependencies.

40
0:02:23.240 --> 0:02:25.160
You don't need to care about any of that.

41
0:02:25.160 --> 0:02:27.380
NMSstate is going to manage it.

42
0:02:27.380 --> 0:02:30.920
So it makes everything easier.

43
0:02:30.920 --> 0:02:34.280
So as I say, we started to build NMSstate in Python.

44
0:02:34.280 --> 0:02:41.080
And one day we noticed that a lot of our users were willing to chip a binary and not Python

45
0:02:41.080 --> 0:02:43.640
and don't use the Python environment.

46
0:02:43.640 --> 0:02:47.980
And well, there were also some performance issues because we needed to do a lot of operations.

47
0:02:47.980 --> 0:02:51.680
So we decided to give you a try to Rust.

48
0:02:51.680 --> 0:02:57.840
And we have a problem is that we have a library and a binary and we needed to move both of

49
0:02:57.840 --> 0:02:59.160
them to Rust.

50
0:02:59.160 --> 0:03:04.400
And also we already have a big base of users.

51
0:03:04.400 --> 0:03:09.720
So we could not break them and we need to do it in a way that we are going to support

52
0:03:09.720 --> 0:03:13.440
all the features that we already did in Python.

53
0:03:13.440 --> 0:03:16.720
So well, we created our own NMSstate library in Rust.

54
0:03:16.720 --> 0:03:19.080
I will tell you how.

55
0:03:19.080 --> 0:03:24.680
And also the NMSstate CTL tool, which is the command line tool.

56
0:03:24.680 --> 0:03:26.680
All right.

57
0:03:26.680 --> 0:03:31.520
So the first thing is that we are using JAML files and JSON files and we are parsing them.

58
0:03:31.520 --> 0:03:37.160
So in Python this was quite trivial with any schema and we needed to find a way to do it.

59
0:03:37.160 --> 0:03:41.320
In Python we were using dictionaries so that user could create a dictionary and using a

60
0:03:41.320 --> 0:03:48.440
JAML library it was quite trivial to convert that JAML into a dictionary.

61
0:03:48.440 --> 0:03:50.120
We needed something in Rust to do this.

62
0:03:50.120 --> 0:03:52.160
So we end up looking at CTL.

63
0:03:52.160 --> 0:03:58.880
CTL is a framework for serializing, idealizing Rust attack structure efficiently and generally

64
0:03:58.880 --> 0:04:05.880
we use it for JAML adjacent but it supports other formats.

65
0:04:05.880 --> 0:04:10.460
This allows us to keep our declarative state, keep our API.

66
0:04:10.460 --> 0:04:13.320
So that was pretty good.

67
0:04:13.320 --> 0:04:18.840
And we noticed that CTL allows us to implement our own serializers and deserializers.

68
0:04:18.840 --> 0:04:26.600
So that was also a big plus because we could do validation steps and simplify the validation

69
0:04:26.600 --> 0:04:30.920
work when getting the configuration file from the user.

70
0:04:30.920 --> 0:04:37.000
And then there were a lot of decorators on server so it was quite good for creating early

71
0:04:37.000 --> 0:04:45.840
access for creating multiple helper functions and also some conditional deserialization

72
0:04:45.840 --> 0:04:47.360
and serializations.

73
0:04:47.360 --> 0:04:50.160
So here is an example.

74
0:04:50.160 --> 0:04:57.880
For example this is an interface state for a kernel bond and we basically define it is

75
0:04:57.880 --> 0:05:04.920
up, it has an IPv4 address with this address with this prefix length and it is enabled

76
0:05:04.920 --> 0:05:07.960
and then we define the link aggregation options.

77
0:05:07.960 --> 0:05:11.440
So we have the mode options and the ports.

78
0:05:11.440 --> 0:05:17.400
One really good thing that we have is that we have partial editing.

79
0:05:17.400 --> 0:05:22.440
So you can define what you want to change and we are going to merge it with what you

80
0:05:22.440 --> 0:05:26.080
already have configured on the system.

81
0:05:26.080 --> 0:05:30.680
And about the decorators as you can see there we were able to use the decorator for, for

82
0:05:30.680 --> 0:05:37.920
example, accepting numbers, accepting strings, accepting only the number, custom strings,

83
0:05:37.920 --> 0:05:43.400
creating alias, renaming, all of that.

84
0:05:43.400 --> 0:05:46.880
And it was quite good.

85
0:05:46.880 --> 0:05:48.020
So okay.

86
0:05:48.020 --> 0:05:55.240
We communicate with network manager and we communicate with network manager to configure

87
0:05:55.240 --> 0:05:56.240
the network state.

88
0:05:56.240 --> 0:06:02.280
And we have a problem is that before we were using the Libenham bindings, Python bindings,

89
0:06:02.280 --> 0:06:05.160
and they were not available in Rust.

90
0:06:05.160 --> 0:06:10.360
And we tried to create a Rust bindings but it was quite complex because they used g object

91
0:06:10.360 --> 0:06:14.000
and we didn't have g object and it was a big mess.

92
0:06:14.000 --> 0:06:19.560
But we noticed that network manager is providing a Dvas API.

93
0:06:19.560 --> 0:06:22.640
So we say okay, let's use Dvas then.

94
0:06:22.640 --> 0:06:29.600
And we noticed that there is a create which is ZitaVAS and with ZitaVAS we were able to

95
0:06:29.600 --> 0:06:34.640
communicate with network manager using the Dvas API and with the ZitaVAD and we were

96
0:06:34.640 --> 0:06:42.000
able to encode the data structures that we were using to communicate with network manager

97
0:06:42.000 --> 0:06:45.800
and configure the settings that we wanted.

98
0:06:45.800 --> 0:06:50.780
So using this we solved one of the problem which is telling network manager what we want

99
0:06:50.780 --> 0:06:55.960
to do and also fetching what already network manager have which is also important because

100
0:06:55.960 --> 0:07:02.080
all right, there are some options that maybe we do not want to override because the user

101
0:07:02.080 --> 0:07:05.880
configured it that way and for patch LED team that is important.

102
0:07:05.880 --> 0:07:10.240
We need to know what the user configured and what the user want to modify.

103
0:07:10.240 --> 0:07:13.280
So okay, one problem solved.

104
0:07:13.280 --> 0:07:14.440
Then we have another problem.

105
0:07:14.440 --> 0:07:19.840
So network manager does not provide at all real time information from kernel and we needed

106
0:07:19.840 --> 0:07:22.520
that because we also do verification.

107
0:07:22.520 --> 0:07:30.480
So when you configure something, you in a state do a verification step which what it

108
0:07:30.480 --> 0:07:36.280
does is compare what the user defined which what is configured on the system.

109
0:07:36.280 --> 0:07:39.840
And we have a problem because network manager was not providing real time information and

110
0:07:39.840 --> 0:07:48.120
sometimes it took quite sometimes to get the information that we wanted and we were having

111
0:07:48.120 --> 0:07:52.040
some problems on the verification.

112
0:07:52.040 --> 0:07:59.100
So we were looking for a library and we did not find any library that certified our requirements

113
0:07:59.100 --> 0:08:05.640
but we noticed that there is already a Rust-Ned-Link library and Ned-Link is the kernel API for communication

114
0:08:05.640 --> 0:08:11.460
between user page and also I think between kind of components and it was perfect.

115
0:08:11.460 --> 0:08:17.040
We could use Rust-Ned-Link which is an existing library to build another tool which is Nisport.

116
0:08:17.040 --> 0:08:25.460
So Nisport only queries information from kernel and show you in a JAML file or basically proper

117
0:08:25.460 --> 0:08:29.120
data structures.

118
0:08:29.120 --> 0:08:32.800
It was quite good because we had started to contribute to Rust-Ned-Link because Rust-Ned-Link

119
0:08:32.800 --> 0:08:40.760
was an independent project and they didn't support everything so we were able to help

120
0:08:40.760 --> 0:08:46.840
there and currently a lot of people use Rust-Ned-Link and it's a quite big project and probably

121
0:08:46.840 --> 0:08:53.140
the one that most of the people use when need to work with Ned-Link and Rust.

122
0:08:53.140 --> 0:08:59.920
So we have one more problem.

123
0:08:59.920 --> 0:09:04.280
Now we have network manager working, we have verification working, validation working,

124
0:09:04.280 --> 0:09:10.160
we can read the configuration, we can do a lot of stuff but then networking is complex

125
0:09:10.160 --> 0:09:17.240
and there is one thing that is called OBS or OBSDB and they will manager configure OBS

126
0:09:17.240 --> 0:09:24.160
but they do not configure global OBSDB settings and that was a problem because we wanted to

127
0:09:24.160 --> 0:09:25.700
do that.

128
0:09:25.700 --> 0:09:27.320
So how we did?

129
0:09:27.320 --> 0:09:35.200
We basically started to use sockets and using the Rust-SDD library for stream sockets we

130
0:09:35.200 --> 0:09:46.000
were able to communicate with OBSDB, send petitions, read what they already have stored

131
0:09:46.000 --> 0:09:52.220
on the OBSDB and configure whatever OBSDB settings the user want to configure.

132
0:09:52.220 --> 0:10:00.000
So we created our own server JSON, using server JSON libraries we created our own JSON RPC

133
0:10:00.000 --> 0:10:02.560
to communicate with OBSDB.

134
0:10:02.560 --> 0:10:10.080
This is internal of NMS state, we have considered to put it on a separate crate but we did not

135
0:10:10.080 --> 0:10:14.320
yet.

136
0:10:14.320 --> 0:10:17.000
Then we had another problem.

137
0:10:17.000 --> 0:10:24.320
I promise this will end, we are going to have a solution, it will stop at some point.

138
0:10:24.320 --> 0:10:30.080
So we had users, the users were using our Python library and some of them were willing

139
0:10:30.080 --> 0:10:36.240
to move to Rust, some of them were willing to move to Golan but we were already developing

140
0:10:36.240 --> 0:10:38.320
a resolution.

141
0:10:38.320 --> 0:10:44.200
And some of them didn't want to move from the Python code to Rust so what we did is

142
0:10:44.200 --> 0:10:48.080
create bindings and we create plenty of them.

143
0:10:48.080 --> 0:10:56.320
First of all we created C bindings, so C users could use the Rust library, then from the

144
0:10:56.320 --> 0:11:01.600
C bindings we created the Python and Golan bindings.

145
0:11:01.600 --> 0:11:08.680
Finally one of the other problems that we had is that we got a huge integration test

146
0:11:08.680 --> 0:11:12.400
base and we wanted to reuse them.

147
0:11:12.400 --> 0:11:18.880
So with the Python bindings we were able to integrate the Python integration test that

148
0:11:18.880 --> 0:11:21.520
we had into our Rust library.

149
0:11:21.520 --> 0:11:27.840
It was quite cool because we were able to start building the new Rust NMS state but

150
0:11:27.840 --> 0:11:32.160
at the same time using the Python integration test.

151
0:11:32.160 --> 0:11:39.120
And this way we were sure that we were not breaking any existing use case that we already

152
0:11:39.120 --> 0:11:41.520
support.

153
0:11:41.520 --> 0:11:43.520
So that's it.

154
0:11:43.520 --> 0:11:46.000
It was a success.

155
0:11:46.000 --> 0:11:51.360
We are quite proud because most of the people that were using it liked the idea and even

156
0:11:51.360 --> 0:11:57.480
the ones that did not care about if you use Python or Rust were happy because the change

157
0:11:57.480 --> 0:12:00.600
was completely transparent for the final user.

158
0:12:00.600 --> 0:12:05.840
If you were using Python nothing will change for you.

159
0:12:05.840 --> 0:12:06.840
The code is the same.

160
0:12:06.840 --> 0:12:09.760
You don't need to do anything different.

161
0:12:09.760 --> 0:12:12.440
So it will be a transparent update.

162
0:12:12.440 --> 0:12:17.440
And if you are using Python and are willing to use Rust, okay, you need to change your

163
0:12:17.440 --> 0:12:21.360
code but basically the API is the same.

164
0:12:21.360 --> 0:12:29.560
So well, you were able to use the same JAML files and the same JSON files and everything

165
0:12:29.560 --> 0:12:31.080
will work.

166
0:12:31.080 --> 0:12:37.920
So we got a lot of adoptions and right now the user base of NMS state is still growing

167
0:12:37.920 --> 0:12:40.200
and we are quite happy.

168
0:12:40.200 --> 0:12:45.200
Also it was we created goal and bindings because OpenShift people and Kubernetes people were

169
0:12:45.200 --> 0:12:51.840
willing to use it and it's written in goal and so we provided them with goal and bindings

170
0:12:51.840 --> 0:12:53.560
and they really like it.

171
0:12:53.560 --> 0:12:59.160
So yeah, it was a success story.

172
0:12:59.160 --> 0:13:02.360
So basically that was our journey.

173
0:13:02.360 --> 0:13:06.000
I would like to hear, I think we have time for questions.

174
0:13:06.000 --> 0:13:08.720
So please ask whatever you want.

175
0:13:08.720 --> 0:13:11.840
I promise you that I don't know dumb questions.

176
0:13:11.840 --> 0:13:16.280
So thank you very much.

177
0:13:16.280 --> 0:13:24.280
All right, any questions?

178
0:13:24.280 --> 0:13:25.280
Okay.

179
0:13:25.280 --> 0:13:33.760
I had wondered what your experience was in terms of time to implement in Rust versus

180
0:13:33.760 --> 0:13:39.520
Python from a developer point of view.

181
0:13:39.520 --> 0:13:46.800
I think it took us around two years to develop mainly work on it.

182
0:13:46.800 --> 0:13:48.400
It was full time.

183
0:13:48.400 --> 0:13:56.360
It was a long journey but it helped us a lot having the Python integration tests working

184
0:13:56.360 --> 0:14:02.440
with a new library because we were sure that we were not breaking the existing cases and

185
0:14:02.440 --> 0:14:03.960
speed up the things a little bit.

186
0:14:03.960 --> 0:14:04.960
Absolutely.

187
0:14:04.960 --> 0:14:08.560
Do you have a feeling for how long it would have taken you if you had re-implemented it

188
0:14:08.560 --> 0:14:09.560
in Python?

189
0:14:09.560 --> 0:14:13.320
I know that's not really a thing but roughly how long if you had said...

190
0:14:13.320 --> 0:14:14.320
Going back to Python.

191
0:14:14.320 --> 0:14:18.120
No, if you had said, we've got it in Python but for no good reason, we're going to rewrite

192
0:14:18.120 --> 0:14:21.520
it from scratch in Python to make it cleaner, let's say.

193
0:14:21.520 --> 0:14:26.320
Just as how long does it take to write something in Python versus Rust or maybe it's not possible

194
0:14:26.320 --> 0:14:27.320
to guess.

195
0:14:27.320 --> 0:14:29.600
Well, I think it depends.

196
0:14:29.600 --> 0:14:36.400
In my opinion, this is a personal opinion, writing Python is much easier but then you

197
0:14:36.400 --> 0:14:38.440
have more bugs.

198
0:14:38.440 --> 0:14:39.800
This is what's my experience.

199
0:14:39.800 --> 0:14:46.640
When I implement something in Python, I do it in 30 minutes, one hour, two hours but

200
0:14:46.640 --> 0:14:47.640
then I go back.

201
0:14:47.640 --> 0:14:56.360
When I do it in Rust, it took me more longer, a lot of compiler errors, a lot of unsafe

202
0:14:56.360 --> 0:15:00.040
stuff everywhere so we need to avoid that.

203
0:15:00.040 --> 0:15:01.360
But then it's quite stable.

204
0:15:01.360 --> 0:15:09.520
I can say that nowadays the Rust version, it is younger that the Python one is more

205
0:15:09.520 --> 0:15:10.520
stable.

206
0:15:10.520 --> 0:15:14.280
We got less back reports and we have more users.

207
0:15:14.280 --> 0:15:17.280
Thank you.

208
0:15:17.280 --> 0:15:23.280
Thank you.

209
0:15:23.280 --> 0:15:36.240
Did you run into any problems in terms of compatibility when you created C bindings

210
0:15:36.240 --> 0:15:38.360
from the Rust code?

211
0:15:38.360 --> 0:15:40.480
No, not at all, to be honest.

212
0:15:40.480 --> 0:15:41.760
We did not have any problem.

213
0:15:41.760 --> 0:15:43.360
It was quite straightforward.

214
0:15:43.360 --> 0:15:46.040
We did not have any problem.

215
0:15:46.040 --> 0:15:52.240
I must say that the NMSD library is, well, we spoke to the users, it's quite simple.

216
0:15:52.240 --> 0:15:55.440
That makes it simple for us.

217
0:15:55.440 --> 0:16:00.160
We did not have any problem.

218
0:16:00.160 --> 0:16:01.160
That's it.

219
0:16:01.160 --> 0:16:02.160
Okay, thanks.

220
0:16:02.160 --> 0:16:17.000
The problem.

221
0:16:17.000 --> 0:16:23.720
You mentioned that it was a long journey when you implemented this in Rust.

222
0:16:23.720 --> 0:16:30.000
Could you compare what you have expected in the beginning of this journey and with the

223
0:16:30.000 --> 0:16:31.000
reality?

224
0:16:31.000 --> 0:16:34.800
Okay, I must say that I'm not the only one person working on this.

225
0:16:34.800 --> 0:16:38.320
There is my teammate, Chris.

226
0:16:38.320 --> 0:16:40.000
Chris was the lead here.

227
0:16:40.000 --> 0:16:44.320
I must say that I did not trust very much that we were able to do it in two years.

228
0:16:44.320 --> 0:16:47.080
We were like, yeah, in two years we are going to have Rust.

229
0:16:47.080 --> 0:16:49.680
I didn't think so.

230
0:16:49.680 --> 0:16:51.880
But he was right.

231
0:16:51.880 --> 0:16:56.840
So I think my expectation is that it would take much longer, but it was much simpler

232
0:16:56.840 --> 0:16:58.600
than what I thought.

233
0:16:58.600 --> 0:17:05.760
Also, I thought that we could have more problems with finding the libraries that we need to

234
0:17:05.760 --> 0:17:08.000
do all the operations that we needed.

235
0:17:08.000 --> 0:17:13.400
But I must say that Rust has a great ecosystem.

236
0:17:13.400 --> 0:17:17.640
The libraries that we are using are really, really well maintained.

237
0:17:17.640 --> 0:17:18.640
That's great.

238
0:17:18.640 --> 0:17:19.640
Let's work for us.

239
0:17:19.640 --> 0:17:21.640
We have a question from The Matrix.

240
0:17:21.640 --> 0:17:22.640
Sure.

241
0:17:22.640 --> 0:17:24.200
Sounds a bit weird.

242
0:17:24.200 --> 0:17:29.040
Tanya is asking, how long did it take your team to learn Rust or did they know Rust already?

243
0:17:29.040 --> 0:17:30.040
No.

244
0:17:30.040 --> 0:17:31.600
We did not know Rust.

245
0:17:31.600 --> 0:17:37.720
I mean, well, we didn't know what Rust was and we did some work on Rust.

246
0:17:37.720 --> 0:17:38.720
But we did one thing here.

247
0:17:38.720 --> 0:17:41.840
We started with Nispor instead with NmState.

248
0:17:41.840 --> 0:17:46.480
So when we noticed what are the missing pieces, we first started with Nispor, which is much

249
0:17:46.480 --> 0:17:51.240
simpler than NmState, and we learned on the way.

250
0:17:51.240 --> 0:17:57.360
I must say that I am also surprised with all the Rust resources that it was quite easy

251
0:17:57.360 --> 0:17:58.360
to learn.

252
0:17:58.360 --> 0:18:00.280
But we learned on the way.

253
0:18:00.280 --> 0:18:02.120
When we needed something, we started learning it.

254
0:18:02.120 --> 0:18:04.480
And then we revisit the code and we change things.

255
0:18:04.480 --> 0:18:08.920
For example, initially we did not understand correctly how to use traits.

256
0:18:08.920 --> 0:18:10.360
So we did not use them.

257
0:18:10.360 --> 0:18:13.480
And then we noticed, right, traits are really useful.

258
0:18:13.480 --> 0:18:15.240
We are not using them.

259
0:18:15.240 --> 0:18:20.440
And then we started to implement traits everywhere and make it more flexible.

260
0:18:20.440 --> 0:18:21.440
Thank you.

261
0:18:21.440 --> 0:18:22.440
Great.

262
0:18:22.440 --> 0:18:24.440
There's no more questions.

263
0:18:24.440 --> 0:18:26.880
Thank you for your talk.

264
0:18:26.880 --> 0:18:27.880
Thank you for listening.

265
0:18:27.880 --> 0:18:28.880
Thank you.

266
0:18:28.880 --> 0:18:29.880
Thank you.

267
0:18:29.880 --> 0:18:30.880
Thank you.

268
0:18:30.880 --> 0:18:31.880
Thank you.

269
0:18:31.880 --> 0:18:32.880
Thank you.

270
0:18:32.880 --> 0:18:33.880
Thank you.

271
0:18:33.880 --> 0:18:34.880
Thank you.

272
0:18:34.880 --> 0:18:35.880
Thank you.

273
0:18:35.880 --> 0:18:36.880
Thank you.

274
0:18:36.880 --> 0:18:37.880
Thank you.

275
0:18:37.880 --> 0:18:38.880
Thank you.

276
0:18:38.880 --> 0:18:39.880
Thank you.


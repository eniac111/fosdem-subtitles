1
0:00:00.000 --> 0:00:07.300
Thanks for joining during your lunch.

2
0:00:07.300 --> 0:00:12.980
I have some pie for you, some raspberry pies with a little bit of Java coffee.

3
0:00:12.980 --> 0:00:14.140
So let's jump in.

4
0:00:14.140 --> 0:00:18.820
Normally there was a session planned now about Kotlin, so I have a little piece of Kotlin

5
0:00:18.820 --> 0:00:20.980
in this presentation.

6
0:00:20.980 --> 0:00:24.360
I'm not a Kotlin developer myself.

7
0:00:24.360 --> 0:00:27.060
What is the raspberry pie if you don't know it?

8
0:00:27.060 --> 0:00:29.420
This amazing small board.

9
0:00:29.420 --> 0:00:30.900
It's really small.

10
0:00:30.900 --> 0:00:33.300
This is the raspberry pie zero.

11
0:00:33.300 --> 0:00:35.780
And yes, indeed, that's 15 euros.

12
0:00:35.780 --> 0:00:41.420
This is a full PC, a full Linux PC where you can run on Java, Java, VIX, anything that

13
0:00:41.420 --> 0:00:46.100
you do as a Java developer, you can also do on this small device.

14
0:00:46.100 --> 0:00:50.860
Of course, it's not so powerful, but it still allows you to do a lot of experiments.

15
0:00:50.860 --> 0:00:55.340
And what is special about raspberry pie is those pins where you can connect electronic

16
0:00:55.340 --> 0:01:00.380
components and that's what I'm going to talk to you about.

17
0:01:00.380 --> 0:01:02.100
I see I have some missing images.

18
0:01:02.100 --> 0:01:03.400
That's a good start.

19
0:01:03.400 --> 0:01:08.260
There was also raspberry pie picco launched a few years ago.

20
0:01:08.260 --> 0:01:10.100
That's actually a microcontroller.

21
0:01:10.100 --> 0:01:15.860
So if you see a raspberry pie picco, if you ever played with Arduino, it's more comparable

22
0:01:15.860 --> 0:01:20.100
to that, so we cannot run Java on that one.

23
0:01:20.100 --> 0:01:21.100
So what is raspberry pie?

24
0:01:21.100 --> 0:01:22.100
It's a single board computer.

25
0:01:22.100 --> 0:01:26.180
You can run a lot of different Linux distributions on them.

26
0:01:26.180 --> 0:01:30.820
I mostly start with the raspberry pie operating system, which is the official one.

27
0:01:30.820 --> 0:01:36.860
But you also have gaming operating systems, a NAS system, any kind of thing that you can

28
0:01:36.860 --> 0:01:38.660
think of does exist.

29
0:01:38.660 --> 0:01:43.900
There is a website, awesome raspberry pie, where you will find all these.

30
0:01:43.900 --> 0:01:48.860
There are many versions which are also 32 or 64 bits, which can be interesting if you

31
0:01:48.860 --> 0:01:51.420
want to do some specific experiments.

32
0:01:51.420 --> 0:01:55.620
And they make 400,000 raspberry pies a month.

33
0:01:55.620 --> 0:01:58.260
And still you cannot find them.

34
0:01:58.260 --> 0:02:02.100
Because of the ship shortage, this 400,000 is not enough.

35
0:02:02.100 --> 0:02:05.300
They do reserve a lot of them for industrial use.

36
0:02:05.300 --> 0:02:10.020
So as a consumer, a maker, you have to find them.

37
0:02:10.020 --> 0:02:16.780
rpilocator.com is a website which polls a lot of websites who sell raspberry pies and

38
0:02:16.780 --> 0:02:17.780
they list them.

39
0:02:17.780 --> 0:02:24.220
If you follow them on Twitter or on Mastodon, you will get an alert if a certain type becomes

40
0:02:24.220 --> 0:02:27.060
available.

41
0:02:27.060 --> 0:02:32.540
I have been speaking at FOSDAM virtually, thanks to Fujie in the last two years.

42
0:02:32.540 --> 0:02:38.300
And in 2001, I spoke about how I got into Java on raspberry pie.

43
0:02:38.300 --> 0:02:40.300
I started doing some personal projects.

44
0:02:40.300 --> 0:02:43.940
I wanted to have a touch screen control for the drum boot of my son.

45
0:02:43.940 --> 0:02:48.100
I wanted to use Java VIX and I was missing a lot of documentation.

46
0:02:48.100 --> 0:02:50.100
So I wrote about that.

47
0:02:50.100 --> 0:02:53.780
And I end up even before building that thing for my son.

48
0:02:53.780 --> 0:02:55.180
I have written a book.

49
0:02:55.180 --> 0:02:59.960
And then afterwards, finally, he got his controller.

50
0:02:59.960 --> 0:03:03.780
In the book I explained and also in the FOSDAM talk how you get started with this, how you

51
0:03:03.780 --> 0:03:04.780
can use Py4j.

52
0:03:04.780 --> 0:03:06.660
Py4j is a library.

53
0:03:06.660 --> 0:03:10.740
More about that later to help you as a Java developer.

54
0:03:10.740 --> 0:03:18.340
And I also gave some examples of running Java VIX on raspberry pie.

55
0:03:18.340 --> 0:03:25.500
So 2001 was my explanation how I got started with Java and raspberry pie and has been my

56
0:03:25.500 --> 0:03:28.260
niche pet project ever since.

57
0:03:28.260 --> 0:03:33.500
And last year I was here again because there were new raspberry pie boards launched and

58
0:03:33.500 --> 0:03:38.100
we had to do some changes in Py4j because they were not compatible anymore.

59
0:03:38.100 --> 0:03:48.180
So in 2021 we launched version 2 of Py4j which is more compatible with the newer ports which

60
0:03:48.180 --> 0:03:53.940
uses Java 11 under the hood and allows you to do a lot of fun stuff and I give you some

61
0:03:53.940 --> 0:03:54.940
examples.

62
0:03:54.940 --> 0:03:58.500
I also gave an example of a crow pie OS.

63
0:03:58.500 --> 0:04:04.220
Crow pie OS is an operating system based on the official raspberry pie operating system.

64
0:04:04.220 --> 0:04:08.040
But FHNW is a university in Switzerland.

65
0:04:08.040 --> 0:04:13.660
They have a lot of courses where they use both Java, raspberry pie, electronics, all

66
0:04:13.660 --> 0:04:18.580
kinds of stuff and they contribute a lot back to the Py4j project.

67
0:04:18.580 --> 0:04:22.860
And they made an operating system with some additional tools for Java developers like

68
0:04:22.860 --> 0:04:26.860
the latest Java VIX is there, the latest Java is there.

69
0:04:26.860 --> 0:04:31.900
On the background screen of your desktop you see the IP number of your computer which is

70
0:04:31.900 --> 0:04:36.140
very handy if you have a lot of raspberry pies and you never find back the connection

71
0:04:36.140 --> 0:04:38.980
to them.

72
0:04:38.980 --> 0:04:40.820
Also some experiments with FHGL.

73
0:04:40.820 --> 0:04:43.980
Who has used FHGL or know what it is?

74
0:04:43.980 --> 0:04:44.980
No.

75
0:04:44.980 --> 0:04:45.980
Definitely take a look at it.

76
0:04:45.980 --> 0:04:46.980
It's by Almas.

77
0:04:46.980 --> 0:04:53.500
He's a professor at an English university and he created an amazing library for creating

78
0:04:53.500 --> 0:04:54.500
games.

79
0:04:54.500 --> 0:04:59.460
If you ever want to do some fun stuff and create a game with Java and Java VIX, FHGL

80
0:04:59.460 --> 0:05:05.140
is the project and you will also find a lot of info about that on FHGL.

81
0:05:05.140 --> 0:05:07.500
And I also had some demos with HiveMQ.

82
0:05:07.500 --> 0:05:12.620
That's also something that's very easy to do is messaging from raspberry pie towards

83
0:05:12.620 --> 0:05:13.620
a cloud provider.

84
0:05:13.620 --> 0:05:20.420
HiveMQ is a messaging platform but they have a free cloud solution for up to 100 devices.

85
0:05:20.420 --> 0:05:23.780
Every maker with more than 100 devices can now raise his hands.

86
0:05:23.780 --> 0:05:24.780
Nope.

87
0:05:24.780 --> 0:05:25.780
Okay.

88
0:05:25.780 --> 0:05:28.460
That's the place to be where you can find those things.

89
0:05:28.460 --> 0:05:29.460
Now Py4j.

90
0:05:29.460 --> 0:05:32.060
Py4j is a Java library.

91
0:05:32.060 --> 0:05:33.460
That means it's a dependency.

92
0:05:33.460 --> 0:05:36.020
You add it to your Java project.

93
0:05:36.020 --> 0:05:40.260
Inside the library is native code.

94
0:05:40.260 --> 0:05:46.140
Native code that will call the different protocols that you can use to interact with the pins

95
0:05:46.140 --> 0:05:48.220
on your raspberry pie.

96
0:05:48.220 --> 0:05:52.020
So the simplest thing, you connect the let and you can make the let blink but you can

97
0:05:52.020 --> 0:05:58.980
go a lot further, read temperatures, control, let displays, all that kind of stuff.

98
0:05:58.980 --> 0:06:06.980
Now with the launch of Py4j version 2, we also launched a new website.

99
0:06:06.980 --> 0:06:08.860
And actually that's my role in the project.

100
0:06:08.860 --> 0:06:14.500
I didn't contribute a lot to the sources of the Py4j library but I focused on the documentation

101
0:06:14.500 --> 0:06:16.140
part.

102
0:06:16.140 --> 0:06:21.300
Just like Fujai wants to be the source of truth for all Java developers to find information

103
0:06:21.300 --> 0:06:27.180
about Java, Py4j wants to be that for the Raspberry Pi where you have information about

104
0:06:27.180 --> 0:06:30.300
how you run Java Avix on the Raspberry Pi.

105
0:06:30.300 --> 0:06:38.140
One of the nice use cases of Java Avix is a kiosk mode so that a user interacting with

106
0:06:38.140 --> 0:06:42.640
your Raspberry Pi through a touch screen cannot do anything else than your application.

107
0:06:42.640 --> 0:06:51.820
They cannot go to reboot or format in Linux terms.

108
0:06:51.820 --> 0:06:55.540
Now let's look back at what happened last year.

109
0:06:55.540 --> 0:06:58.420
For me personally my biggest change is I joined Azul.

110
0:06:58.420 --> 0:07:02.500
Azul is one of the distributors of OpenJDK.

111
0:07:02.500 --> 0:07:08.700
I'm part of the documentation team and because of that I can also focus a bit on writing

112
0:07:08.700 --> 0:07:12.540
documentation for Fujai and articles and other stuff like that.

113
0:07:12.540 --> 0:07:20.900
But it was meant to be because Azul has a lot of distributions of it's called Zulu.

114
0:07:20.900 --> 0:07:29.700
That's the core product of Azul is a distribution of OpenJDK like you have so many.

115
0:07:29.700 --> 0:07:35.980
What is the main advantage of Azul Zulu is that it is available for a lot of platforms.

116
0:07:35.980 --> 0:07:38.540
More platforms than most other distributors.

117
0:07:38.540 --> 0:07:47.060
Oh, yeah, all the distributors.

118
0:07:47.060 --> 0:07:50.100
That's the nice thing that I found out after joining Azul.

119
0:07:50.100 --> 0:07:56.100
They are even the only one which supports all the oldest Raspberry Pi models.

120
0:07:56.100 --> 0:07:59.580
Now what I also found out is who knows SD-Kaman.

121
0:07:59.580 --> 0:08:00.580
Yes?

122
0:08:00.580 --> 0:08:03.100
Okay, look it up.

123
0:08:03.100 --> 0:08:07.860
SD-Kaman allows you to switch between Java versions with one command.

124
0:08:07.860 --> 0:08:10.300
It didn't run on the Raspberry Pi.

125
0:08:10.300 --> 0:08:13.140
And of course that hurt.

126
0:08:13.140 --> 0:08:19.540
So Fujai, the website for friends of OpenJDK, behind the scenes there is the disco API.

127
0:08:19.540 --> 0:08:25.400
The disco API is an API to search for Java distributions.

128
0:08:25.400 --> 0:08:29.100
Now the same disco API is used by SD-Kaman.

129
0:08:29.100 --> 0:08:36.020
And SD-Kaman is a tool for Linux and Mac where you can do it's a one line installation script.

130
0:08:36.020 --> 0:08:41.980
Then you do SD-Kaman list Java and you will get a list of all the available Java distributions

131
0:08:41.980 --> 0:08:44.460
for your platform.

132
0:08:44.460 --> 0:08:50.460
Now because of the disco API and small changes done by Gerrit Grunwald, who is also an Azul

133
0:08:50.460 --> 0:08:56.300
colleague who is maintaining that, and by changes in SD-Kaman and I did very few very

134
0:08:56.300 --> 0:08:59.780
small commits to that, we were able to get to this.

135
0:08:59.780 --> 0:09:07.140
So if you have this Raspberry Pi Zero from the first generation which has an ARMv6 processor,

136
0:09:07.140 --> 0:09:12.220
is a different architecture than the newer ones, you will get four versions of Java that

137
0:09:12.220 --> 0:09:13.540
you can install.

138
0:09:13.540 --> 0:09:23.420
Unfortunately it's only Zulu, as Azul I say, it's only Zulu who will work.

139
0:09:23.420 --> 0:09:29.380
There is still a problem with the architecture of the processor that has some issues there.

140
0:09:29.380 --> 0:09:36.500
But so you can install with SD-Kaman Java on any type of Raspberry Pi because, I have

141
0:09:36.500 --> 0:09:44.180
something else here, if you run the same command on a newer Raspberry Pi with a 64 bit operating

142
0:09:44.180 --> 0:09:52.780
system, Raspberry Pi always has that now since recently officially, 45 extra lines.

143
0:09:52.780 --> 0:09:59.100
So there are more than 50 Java distributions and this screenshot I think it dates from,

144
0:09:59.100 --> 0:10:01.980
it's from a Fuji article in last February.

145
0:10:01.980 --> 0:10:09.580
So Java 19 is not on this list, so there are now more than 60, I guess, Java versions that

146
0:10:09.580 --> 0:10:15.860
you can install, distributions that you can install on a Raspberry Pi.

147
0:10:15.860 --> 0:10:19.980
Another article I wrote for Fuji is G-Bang.

148
0:10:19.980 --> 0:10:20.980
Who used G-Bang?

149
0:10:20.980 --> 0:10:21.980
No.

150
0:10:21.980 --> 0:10:27.500
Since Java 11 I think you can run Java files without compiling them.

151
0:10:27.500 --> 0:10:31.900
If you have a single Java file which does some simple things, you can just run it, you

152
0:10:31.900 --> 0:10:33.940
don't need to compile it.

153
0:10:33.940 --> 0:10:41.620
What SD-Kaman adds, sorry, what G-Bang adds, is you can define your dependencies in that

154
0:10:41.620 --> 0:10:43.300
one single file.

155
0:10:43.300 --> 0:10:49.500
So if you install G-Bang on a Raspberry Pi or on any computer where you didn't run Java

156
0:10:49.500 --> 0:10:53.420
yet, it will install Java for you.

157
0:10:53.420 --> 0:11:00.900
Then you can just create a text file and then with this Gradle style definition of dependencies

158
0:11:00.900 --> 0:11:07.880
inside your Java file, G-Bang has everything it needs to run your codes.

159
0:11:07.880 --> 0:11:13.580
So this example is based on the minimal code example that we have on the Pi 4J website,

160
0:11:13.580 --> 0:11:15.820
is just to control a lit.

161
0:11:15.820 --> 0:11:23.020
Let me see if the video works here.

162
0:11:23.020 --> 0:11:27.700
If it doesn't show you, I will just forward you to fuj.io where you can find the full

163
0:11:27.700 --> 0:11:32.540
video.

164
0:11:32.540 --> 0:11:34.820
We didn't try this before.

165
0:11:34.820 --> 0:11:39.700
These sessions here will go very fast.

166
0:11:39.700 --> 0:11:42.620
Another fun project I love is Vadin.

167
0:11:42.620 --> 0:11:48.860
Vadin allows you to build user interfaces with pure Java.

168
0:11:48.860 --> 0:11:58.100
If you have played with Java fix, it's a bit the same feeling, but then for web applications.

169
0:11:58.100 --> 0:12:02.380
So you have button elements and table views and all that kind of stuff.

170
0:12:02.380 --> 0:12:07.740
I also wanted to create an example using Vadin on the Raspberry Pi and that's exactly what

171
0:12:07.740 --> 0:12:10.500
I have done and this video will play.

172
0:12:10.500 --> 0:12:17.740
So this is the web interface without any modification that you get from a default Vadin project.

173
0:12:17.740 --> 0:12:24.300
There you have custom set up with just a lit and a small button and then you have the Vadin

174
0:12:24.300 --> 0:12:25.520
application running.

175
0:12:25.520 --> 0:12:32.220
So this is a spring application, combination of spring Vadin, Pi 4J and that's running

176
0:12:32.220 --> 0:12:33.260
on the Raspberry Pi.

177
0:12:33.260 --> 0:12:37.340
So it's running on the Raspberry Pi you see also on the top.

178
0:12:37.340 --> 0:12:40.060
I'm not going to show you any rocket science experiments.

179
0:12:40.060 --> 0:12:41.580
It's just pure basics.

180
0:12:41.580 --> 0:12:46.260
It's blinking a lit, the hello world of programming electronics.

181
0:12:46.260 --> 0:12:51.500
And you see after the button has been touched that the info changes there.

182
0:12:51.500 --> 0:12:55.380
So that's all what is documented.

183
0:12:55.380 --> 0:12:57.980
Five minutes.

184
0:12:57.980 --> 0:13:00.260
I promised you some Kotlin.

185
0:13:00.260 --> 0:13:05.540
I'm not a Kotlin developer myself, but Pi 4J, the project, it's a community project.

186
0:13:05.540 --> 0:13:09.780
It's an open source project so we welcome anyone who wants to contribute.

187
0:13:09.780 --> 0:13:16.420
And Mohammed Hashim who once as a student I think developed a Kotlin implementation

188
0:13:16.420 --> 0:13:20.340
of the first version of Pi 4J said I can do that again.

189
0:13:20.340 --> 0:13:23.780
So he created a Kotlin implementation on top of Pi 4J.

190
0:13:23.780 --> 0:13:28.180
So if you are a Kotlin developer and want to do Kotlin on the Raspberry Pi, you can

191
0:13:28.180 --> 0:13:32.420
do so and even control electronics.

192
0:13:32.420 --> 0:13:33.880
I'm not a Kotlin developer.

193
0:13:33.880 --> 0:13:37.300
These are just some example codes that I took from his examples.

194
0:13:37.300 --> 0:13:41.580
Now what the fun thing is that he also went back to the documentation part of the Pi

195
0:13:41.580 --> 0:13:47.340
4J website and added four pages or five pages with documentation about how to do this with

196
0:13:47.340 --> 0:13:48.340
Kotlin.

197
0:13:48.340 --> 0:13:54.380
So if you're interested in Kotlin on the Raspberry Pi, go to pi4j.com.

198
0:13:54.380 --> 0:14:01.300
Now a few things I can tell you about this year and what we're going to do.

199
0:14:01.300 --> 0:14:04.420
Just as an experiment again, I wanted to create a library.

200
0:14:04.420 --> 0:14:10.380
I got very worried about how I have to maintain libraries and the legal part.

201
0:14:10.380 --> 0:14:12.220
So I don't know if this was a good idea.

202
0:14:12.220 --> 0:14:18.780
I wanted to create a library containing a database of all the Raspberry Pis, the history,

203
0:14:18.780 --> 0:14:21.820
and what pins they have and what you can do with these pins.

204
0:14:21.820 --> 0:14:25.100
We needed for another project so I wanted to create this library.

205
0:14:25.100 --> 0:14:32.100
Now on top of this library we actually created API.py4j.com.

206
0:14:32.100 --> 0:14:33.540
And again I used Vaden.

207
0:14:33.540 --> 0:14:34.540
I know it.

208
0:14:34.540 --> 0:14:35.540
I've used it before.

209
0:14:35.540 --> 0:14:39.260
So this application, API.py4j.com, it's public.

210
0:14:39.260 --> 0:14:45.820
It's using a library containing a database with Raspberry Pi information and it's visualizing

211
0:14:45.820 --> 0:14:46.820
it here.

212
0:14:46.820 --> 0:14:51.620
And because it's a Spring application we can of course have Swagger and all that kind of

213
0:14:51.620 --> 0:14:52.620
stuff.

214
0:14:52.620 --> 0:14:56.580
But the fun thing is of course it runs on the Raspberry Pi.

215
0:14:56.580 --> 0:15:01.180
It runs on the Raspberry Pi that we got from this company, finaltech.com, in check.

216
0:15:01.180 --> 0:15:07.820
So somewhere in Prague in a data center, Raspberry Pi is hosting this pi4j.com.

217
0:15:07.820 --> 0:15:11.660
I don't know how performant this is so if you all visit it at the same time we will

218
0:15:11.660 --> 0:15:15.060
know it.

219
0:15:15.060 --> 0:15:19.980
And then something unexpected happened a few weeks ago.

220
0:15:19.980 --> 0:15:25.080
I was asked by Daniel Frey how about Spring Boot and pi4j.

221
0:15:25.080 --> 0:15:26.460
Does that exist?

222
0:15:26.460 --> 0:15:27.460
No.

223
0:15:27.460 --> 0:15:29.660
But now it does because he created it.

224
0:15:29.660 --> 0:15:37.380
So Daniel Frey and Ashaun Carter are two guys from the Spring team and they just developed

225
0:15:37.380 --> 0:15:38.380
this.

226
0:15:38.380 --> 0:15:40.740
And I joined them in a Twitch.

227
0:15:40.740 --> 0:15:44.580
It was a bit chaotic but yeah it was a Twitch.

228
0:15:44.580 --> 0:15:47.020
And we didn't finish it yet but we're working on it.

229
0:15:47.020 --> 0:15:55.140
So you'll have a Spring Boot starter that will help you to detect which Raspberry Pi

230
0:15:55.140 --> 0:15:58.140
you are running it on, how it should be configured.

231
0:15:58.140 --> 0:15:59.780
It will create the context for you.

232
0:15:59.780 --> 0:16:05.420
The context is that it loads all the plugins to control the GPIOs and that you will be

233
0:16:05.420 --> 0:16:10.340
able to also, how is it called?

234
0:16:10.340 --> 0:16:15.940
The info controller, the Prometheus list of all the data that you get from Spring and

235
0:16:15.940 --> 0:16:16.940
what?

236
0:16:16.940 --> 0:16:17.940
Grafana?

237
0:16:17.940 --> 0:16:19.340
Yeah, that you can use it for Grafana.

238
0:16:19.340 --> 0:16:21.660
So you will have all this data available.

239
0:16:21.660 --> 0:16:27.940
What IOPN is toggled, what is active, what is the signal that is arriving at this pin.

240
0:16:27.940 --> 0:16:30.580
So that kind of info, it's not finished.

241
0:16:30.580 --> 0:16:36.500
We're working on it so maybe if I'm back here next year I can show you.

242
0:16:36.500 --> 0:16:38.440
So what is next?

243
0:16:38.440 --> 0:16:39.660
You can visit me on Twitter.

244
0:16:39.660 --> 0:16:43.420
I'm also on Masterdome on the Fuji social account.

245
0:16:43.420 --> 0:16:46.980
Of course with Fuji we also started the Masterdome service.

246
0:16:46.980 --> 0:16:53.100
And I write a lot about all this kind of stuff and you can find it either on Fuji or on Pi

247
0:16:53.100 --> 0:16:54.420
Fuji.

248
0:16:54.420 --> 0:16:56.140
And that's all I want to do.

249
0:16:56.140 --> 0:16:58.140
Thank you.


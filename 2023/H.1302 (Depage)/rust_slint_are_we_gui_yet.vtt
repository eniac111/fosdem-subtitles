WEBVTT

00:00.000 --> 00:09.640
So now we have Olivier, he's going to talk about Slint.

00:09.640 --> 00:10.640
Hello.

00:10.640 --> 00:11.640
Yeah.

00:11.640 --> 00:18.960
So about me, I started open source working on contributing to the KD project, which is

00:18.960 --> 00:20.760
a project made with Qt.

00:20.760 --> 00:25.240
So that led me to be hired as my first job at Trolltech, which was a company making Qt,

00:25.240 --> 00:27.480
later bought by Nokia.

00:27.480 --> 00:33.380
But in 2000, so 10 years ago, I left to create my own company, Software Services.

00:33.380 --> 00:38.320
And still I was still a bit in the Qt ecosystem.

00:38.320 --> 00:41.280
And I was talking with Simon Hossmann, also from Qt.

00:41.280 --> 00:46.200
And we were like the sad state of current desktop UI.

00:46.200 --> 00:47.640
Can we do better?

00:47.640 --> 00:51.720
What would happen if we would create a new UI to create from scratch?

00:51.720 --> 00:55.520
And in 2020, then, we created Slint.

00:55.520 --> 01:02.960
So this is implemented 100% almost in Rust.

01:02.960 --> 01:04.640
Most of it is implemented in Rust.

01:04.640 --> 01:07.320
It's a native toolkit.

01:07.320 --> 01:09.700
So native as opposed to runs in a browser.

01:09.700 --> 01:11.800
So it really runs natively.

01:11.800 --> 01:20.360
And it's aiming at desktop and embedded at first.

01:20.360 --> 01:26.480
And so it uses its own domain-specific language.

01:26.480 --> 01:28.720
So it's like a macro.

01:28.720 --> 01:34.760
And you might say, wait, is this, I wanted to develop in Rust.

01:34.760 --> 01:37.920
And now you're saying I need to learn a new language to do UI.

01:37.920 --> 01:39.680
And it's, yeah.

01:39.680 --> 01:45.160
But fortunately, learning this language is not more difficult than just learning the

01:45.160 --> 01:47.720
API of any other library.

01:47.720 --> 01:50.960
So just like learning an API.

01:50.960 --> 01:53.400
And Rust is not really meant for UI.

01:53.400 --> 01:58.240
There is a lot of ways that Rust is a bit too explicit in some cases where for UI, you

01:58.240 --> 02:08.000
just want to describe the UI in a way that all languages is much better at.

02:08.000 --> 02:11.760
And then this thing is only to describe the user interface.

02:11.760 --> 02:15.320
But all the logic, of course, is written in a programming language.

02:15.320 --> 02:22.080
So for example, Rust, but we also have bindings to various languages like C++ or JavaScript.

02:22.080 --> 02:25.560
And we tend to add more.

02:25.560 --> 02:28.200
So let's try to make a short demo.

02:28.200 --> 02:30.720
I cannot do the demo because it's a lightning talk.

02:30.720 --> 02:33.020
But I just took some screenshots.

02:33.020 --> 02:36.840
So let's just create a new project at Slint as a dependency.

02:36.840 --> 02:39.840
There is an extension.

02:39.840 --> 02:43.000
So this is Visual Studio Code where we can install an extension.

02:43.000 --> 02:45.000
We search Slint there.

02:45.000 --> 02:46.280
And one click install.

02:46.280 --> 02:50.120
And if you don't have Visual Studio Code, it's OK because this is just a wrapper around

02:50.120 --> 02:52.240
a language server protocol, just an LSP.

02:52.240 --> 02:57.440
So that works with most editors.

02:57.440 --> 03:01.400
And if you don't want to use it, it's all optional.

03:01.400 --> 03:06.240
But let's go back to main.rs and add some code.

03:06.240 --> 03:08.240
Here we add our little macro.

03:08.240 --> 03:11.720
It shows a small window with a text and a button.

03:11.720 --> 03:15.880
By typing that, of course, I had the full power of this extension.

03:15.880 --> 03:20.400
That includes auto completion, go to symbol, and everything else.

03:20.400 --> 03:27.520
We even have this little property editor there that we added.

03:27.520 --> 03:32.720
But the coolest thing here is that we have this codelens.

03:32.720 --> 03:33.720
Show preview.

03:33.720 --> 03:34.720
Let's click on this.

03:34.720 --> 03:37.680
It can be a correction as well on other editors.

03:37.680 --> 03:40.280
And a window up here.

03:40.280 --> 03:44.160
So the LSP server behind the scene opens a new window.

03:44.160 --> 03:47.080
And this is the preview of what you just typed.

03:47.080 --> 03:49.240
And if you type, it updates life.

03:49.240 --> 03:55.240
So this is really interesting because when you do UI, you really want to see what happens

03:55.240 --> 03:56.240
as you do.

03:56.240 --> 03:59.760
You don't want to spend a long time compiling and stuff.

03:59.760 --> 04:04.160
Let's add a callback here, btn underscore clicked.

04:04.160 --> 04:09.040
And in the Rust code, we will instantiate our main window that we created from this

04:09.040 --> 04:15.800
macro and connect to it with the generated unbtn clicked.

04:15.800 --> 04:18.160
So this is generated by the macro.

04:18.160 --> 04:20.840
And to have some Rust code, it can be called.

04:20.840 --> 04:26.800
So if we click and run the code, that's it.

04:26.800 --> 04:28.960
We have the thing.

04:28.960 --> 04:34.000
Here we see that the two windows on the screenshot have different styles.

04:34.000 --> 04:36.260
That's because it's styleable.

04:36.260 --> 04:39.840
So we have, for example, the front style, or we also have here a native style because

04:39.840 --> 04:43.560
we really want to be native to a kit.

04:43.560 --> 04:49.320
So using the native style.

04:49.320 --> 04:55.960
Let's add a property that we can set with a, now in the callback, we say set count get

04:55.960 --> 04:56.960
count plus one.

04:56.960 --> 05:01.600
So we added this property that we use in the text.

05:01.600 --> 05:02.600
Properties are reactive.

05:02.600 --> 05:09.960
So what we do is that when you change them, they automatically change.

05:09.960 --> 05:19.000
And Slint knows what to refresh.

05:19.000 --> 05:20.120
So what can we do?

05:20.120 --> 05:22.800
So here is a little demo.

05:22.800 --> 05:23.800
Okay.

05:23.800 --> 05:26.640
Yeah, that works.

05:26.640 --> 05:33.040
So this is apparently not working really good in this presentation.

05:33.040 --> 05:39.660
But the idea here that you will see the demo running on WebAssembly in the browser.

05:39.660 --> 05:47.880
So it's meant to be a desktop framework, but it also runs for the demo on the browser.

05:47.880 --> 05:50.080
And now.

05:50.080 --> 05:52.080
Okay.

05:52.080 --> 05:54.520
So this doesn't look good with this projector.

05:54.520 --> 06:00.640
But again, this is a gallery which show a few controls.

06:00.640 --> 06:01.640
So what about the performance?

06:01.640 --> 06:02.720
How lightweight is it?

06:02.720 --> 06:11.480
So here I have with me this microcontroller.

06:11.480 --> 06:13.440
So this is a Raspberry Pi Pi Co.

06:13.440 --> 06:15.920
It has less than three kilobytes of RAM.

06:15.920 --> 06:18.440
I said kilobyte, not megabyte.

06:18.440 --> 06:23.760
And yes, it's working.

06:23.760 --> 06:27.360
We have scrolling, some animations.

06:27.360 --> 06:35.600
So that shows what we can do.

06:35.600 --> 06:38.000
So the project is open source.

06:38.000 --> 06:40.360
It's entirely developed on GitHub.

06:40.360 --> 06:43.280
We have set pull requests.

06:43.280 --> 06:46.440
We also accept, of course, bug reports.

06:46.440 --> 06:51.080
Please send GitHub issues, open GitHub issues.

06:51.080 --> 06:53.880
The license is GPL for open source projects.

06:53.880 --> 06:56.000
And we also accompany, so we want to make money out of it.

06:56.000 --> 06:57.760
So that's why we have multiple license.

06:57.760 --> 07:00.560
So GPL for open source project.

07:00.560 --> 07:04.120
And we also have an ambassador license, as we call it.

07:04.120 --> 07:09.600
It's a free license which you can use for proprietary software.

07:09.600 --> 07:13.600
You just have to say that you're using Slint.

07:13.600 --> 07:20.720
And there is also a commercial license with support and so on.

07:20.720 --> 07:23.640
So in the future, we've planned after already three years

07:23.640 --> 07:24.280
of development.

07:24.280 --> 07:27.280
We are now almost ready to release the version 1.0.

07:27.280 --> 07:30.920
So if all goes well, it should be released this month,

07:30.920 --> 07:33.720
end of February.

07:33.720 --> 07:35.040
And the other thing we're working on

07:35.040 --> 07:37.400
is to improve our little preview there

07:37.400 --> 07:41.200
and to make it that you could drag and drop things, drag

07:41.200 --> 07:46.760
and drop widgets, and have actually a design tool where

07:46.760 --> 07:50.160
so even design, you could do the design

07:50.160 --> 07:53.320
without even touching this Slint language.

07:53.320 --> 07:56.640
So that's our hope for the future.

07:59.360 --> 08:01.280
So that's the end of my presentation.

08:01.280 --> 08:07.360
I hope that it made you want to try Slint.

08:07.360 --> 08:11.760
And please do contact me if you have any question

08:11.760 --> 08:14.520
or if you're wondering if you can use Slint.

08:14.520 --> 08:15.480
I'll be around.

08:15.480 --> 08:16.880
Please ask questions.

08:16.880 --> 08:19.360
Thank you.

08:19.360 --> 08:20.360
Thank you.

08:20.360 --> 08:47.880
Thank you.

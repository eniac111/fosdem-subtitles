WEBVTT

00:00.000 --> 00:13.240
A really cool, interesting project, a new language being presented by Fritjof called

00:13.240 --> 00:18.320
Fusion on the OpenJDK.

00:18.320 --> 00:19.320
Final session of the day.

00:19.320 --> 00:23.480
Thank you so much for being with us, some of you all day.

00:23.480 --> 00:26.360
So let's start with Fusion or End.

00:26.360 --> 00:27.360
Okay.

00:27.360 --> 00:28.800
Thank you for staying so long.

00:28.800 --> 00:29.800
Thank you for Gertjans.

00:29.800 --> 00:34.160
He just downloaded the latest version of my slide deck and was a bit shocked that it's

00:34.160 --> 00:37.440
almost 100 slides and only have 20 minutes left.

00:37.440 --> 00:39.680
So let's see how that will work out.

00:39.680 --> 00:48.960
For those who came for the Fusion stickers, please pass them around and take one.

00:48.960 --> 00:51.440
So Fusion, a new language.

00:51.440 --> 00:55.160
It's different.

00:55.160 --> 00:56.840
It's more from a Java perspective.

00:56.840 --> 00:58.920
But there's some overlap.

00:58.920 --> 01:01.920
You will see.

01:01.920 --> 01:07.440
So basically the original idea of Fusion was to have something like a simpler Java, to

01:07.440 --> 01:13.320
simplify Java's features into Fusion features.

01:13.320 --> 01:19.780
A bit on my background, I did work on compilers for about 30 years, a big part of that working

01:19.780 --> 01:25.120
on real-time Java implementations, real-time garbage collection, and so on.

01:25.120 --> 01:33.760
Start with motivating a quote from John Buckes, the inventor of Fortran, who said, who worked

01:33.760 --> 01:37.960
a lot on functional programming but was very disappointed because his work on functional

01:37.960 --> 01:43.840
programming basically failed and would likely always fail because functional programming

01:43.840 --> 01:51.080
is easy to do hard things but incredibly difficult to do simple things.

01:51.080 --> 01:57.120
Fusion has evolved into a functional language and I think, I hope, I find ways to even make

01:57.120 --> 02:00.200
the easy things easy with that.

02:00.200 --> 02:05.520
So the motivation of Fusion is we see that languages like Java get more and more things

02:05.520 --> 02:06.520
packed in there.

02:06.520 --> 02:12.960
We already have classes, methods, interfaces, constructors, trades in other languages, records,

02:12.960 --> 02:14.740
structs, packages, and so on.

02:14.740 --> 02:19.320
In Fusion, all of these map to one single concept, which is the concept of a Fusion

02:19.320 --> 02:20.320
feature.

02:20.320 --> 02:25.080
Then I see today's compilers are much more powerful.

02:25.080 --> 02:31.400
So actually to distinguish whether some feature is used like a method or like a class or like

02:31.400 --> 02:34.440
a constructor is something that the compiler decides then.

02:34.440 --> 02:38.600
It is not needed that the developer decides that.

02:38.600 --> 02:43.960
And we see that more and more systems are becoming safety critical, so we need to ensure

02:43.960 --> 02:45.560
correctness.

02:45.560 --> 02:50.300
And I see that tools have to play a very important role in ensuring this correctness by static

02:50.300 --> 02:53.400
analysis.

02:53.400 --> 02:56.720
Fusion is available on GitHub.

02:56.720 --> 03:02.800
There is a website, Flang.dev, that gives an introduction into the language with lots

03:02.800 --> 03:07.360
of examples, lots of design documents, lots of ideas collections.

03:07.360 --> 03:08.360
Please go through that.

03:08.360 --> 03:11.320
I can't give a language introduction here.

03:11.320 --> 03:16.140
But yeah, you'll find more there.

03:16.140 --> 03:20.520
Fusion is backed by a small company, Tokiwa, with currently four employees.

03:20.520 --> 03:26.040
One of them is sitting here with us in the group, Michael.

03:26.040 --> 03:27.600
Now coming actually to this talk.

03:27.600 --> 03:33.640
So I will start with a very quick introduction into what the Fusion language looks like from

03:33.640 --> 03:35.700
a Java perspective.

03:35.700 --> 03:41.020
Then talk a bit about side effects and their dangers.

03:41.020 --> 03:47.200
Then propose algebraic effects as a solution to manage side effects and give lots of code

03:47.200 --> 03:53.020
examples how you could do these things in Fusion.

03:53.020 --> 03:57.000
So here, a small example in Fusion.

03:57.000 --> 04:03.000
I will give a Java equivalent on the right side and the Fusion code on the left side

04:03.000 --> 04:05.520
that you can quickly understand what it's about.

04:05.520 --> 04:10.360
So I said Fusion maps Java features to Fusion features.

04:10.360 --> 04:15.960
So in Java, if you have a package in Fusion, it's just a Fusion feature, in this case,

04:15.960 --> 04:16.960
demo.

04:16.960 --> 04:23.520
If you have a class in Java, it is also a Fusion feature that is nested in another Fusion

04:23.520 --> 04:27.140
feature.

04:27.140 --> 04:35.440
If you have a method in Java, it is again a Fusion feature that is nested in this case,

04:35.440 --> 04:37.820
in the Hello surrounding feature.

04:37.820 --> 04:42.800
In this case, what makes this feature different is that it's a function that returns a result

04:42.800 --> 04:48.880
which you can see from the result type here, which is unit.

04:48.880 --> 04:54.640
Unit type in Fusion is pretty much what the void type is in Java, but with the exception

04:54.640 --> 04:56.720
that it is a real type.

04:56.720 --> 05:01.200
So you can declare variables of type unit, you can return this as a value.

05:01.200 --> 05:07.920
It is not a very interesting value, but you can have this as a full-fledged type with

05:07.920 --> 05:10.480
only one single value.

05:10.480 --> 05:17.400
In contrast to that, void is also a type in Fusion, but that gets interesting again because

05:17.400 --> 05:19.920
void is a type that has no values.

05:19.920 --> 05:25.320
So basically the result type of something like system exit in Fusion would be void,

05:25.320 --> 05:30.280
which means it will never return.

05:30.280 --> 05:32.600
Then yeah, printing something is easy.

05:32.600 --> 05:39.600
There is a standard library function say that in this case prints Hello World.

05:39.600 --> 05:45.880
Fusion uses a lot of type in ferrancing, so the result type unit here actually can be

05:45.880 --> 05:50.920
inferred because that's also the result type of say, so we don't need to explicitly note

05:50.920 --> 05:52.120
this.

05:52.120 --> 05:57.540
Then, I'll go back here.

05:57.540 --> 06:02.680
Very similar to Java, if you have code like that, you don't have anything to run yet.

06:02.680 --> 06:05.100
In Java you need some main function.

06:05.100 --> 06:11.160
In Fusion there is one feature which is called the universe which surrounds everything and

06:11.160 --> 06:19.200
code put in the universe like here gets executed if you run your application.

06:19.200 --> 06:27.420
You can pass arguments to features and arguments or fields within those features.

06:27.420 --> 06:33.280
These are also features, so they come in the same class, but features that are pre-calculated

06:33.280 --> 06:37.000
that hold a value.

06:37.000 --> 06:43.440
Fusion has inheritance, so you can define a feature Hello2 that inherits from Hello.

06:43.440 --> 06:49.620
You can create an instance of that and call features on that.

06:49.620 --> 06:58.800
So that much to quick introduction into the language syntax and how it works.

06:58.800 --> 07:04.960
There's a number of things that Fusion does not have, mostly because these are things

07:04.960 --> 07:10.620
that are considered to a certain extent harmful in a safety critical environment.

07:10.620 --> 07:12.240
There's no dynamic loading.

07:12.240 --> 07:16.400
There's nothing like macros, no reflection, no point arithmetic.

07:16.400 --> 07:19.080
Many of these things also Java doesn't have.

07:19.080 --> 07:24.880
There is no uncontrolled mutability, so you cannot easily change variables.

07:24.880 --> 07:29.400
There's no direct support for exceptions in the language.

07:29.400 --> 07:32.400
The reason for this is we must know what the code does.

07:32.400 --> 07:38.600
We want to do static analysis of the code to ensure safety and also to a certain extent

07:38.600 --> 07:45.320
to allow better optimizations to increase the performance.

07:45.320 --> 07:49.600
So a bit more on side effects and security.

07:49.600 --> 07:57.840
We learned a lot about security today already in earlier talks, but mostly addressing security

07:57.840 --> 08:04.520
aspects of the software development process and managing of security issues.

08:04.520 --> 08:10.920
I now come from the language side and say what we could do from the programming language

08:10.920 --> 08:16.560
to improve the security.

08:16.560 --> 08:21.640
If you look back at recent securities, we learned about log4j today, but there are similar

08:21.640 --> 08:26.000
things to Spring Shell, even the Rust community has similar issues.

08:26.000 --> 08:32.600
What these things have in common, what these issues have in common is that code, library

08:32.600 --> 08:36.600
code that is used, has unexpected side effects.

08:36.600 --> 08:42.080
So you use a logging library, you don't expect this to go to the internet and make an arbitrary

08:42.080 --> 08:46.080
connection and download code from somewhere else in the world.

08:46.080 --> 08:48.440
So that is the common problem.

08:48.440 --> 08:58.600
So one way that is used by many new upcoming language to control side effects is to use

08:58.600 --> 09:01.480
algebraic effects.

09:01.480 --> 09:06.480
So let me quickly explain to you what algebraic effect is.

09:06.480 --> 09:14.600
An algebraic effect is basically a set of non-functional operations that code might

09:14.600 --> 09:15.600
perform.

09:15.600 --> 09:21.880
So operations that do not have an effect on the actual calculation on the return value

09:21.880 --> 09:24.160
of a function.

09:24.160 --> 09:36.400
Java already has one kind of algebraic effect built into the language, which is throws for

09:36.400 --> 09:39.080
methods that throw exceptions.

09:39.080 --> 09:45.520
But algebraic effects is a more broader concept.

09:45.520 --> 09:49.180
This is just one example that Java supports.

09:49.180 --> 09:56.560
Any operation in an algebraic effect can either resume or abort.

09:56.560 --> 10:03.920
So typically if an algebraic effect is reading some data from some external input, it would

10:03.920 --> 10:11.000
return the read data and resume operation with the value that was read.

10:11.000 --> 10:15.760
While an operation that would be something like throw an exception would perform an abort,

10:15.760 --> 10:24.160
so it will not return but jump back to the corresponding handler.

10:24.160 --> 10:34.160
Algebraic effects can be implemented by different implementations of the effect handlers.

10:34.160 --> 10:41.760
So there is no strict fixed wiring from the operations to a particular implementation.

10:41.760 --> 10:53.280
And very similar to exception handlers, effects may be nested.

10:53.280 --> 10:58.880
There's a kind of contrary view towards algebraic effects.

10:58.880 --> 11:05.880
You can see algebraic effects, what I've presented so far, as the effects that the code might

11:05.880 --> 11:06.880
have.

11:06.880 --> 11:12.280
And you could also see that as capabilities that the code might require.

11:12.280 --> 11:37.600
Martin Odelski is starting a big research project in that area.

11:37.600 --> 11:55.960
What I do is I define my exception, which is our exception implementation, as a feature

11:55.960 --> 12:02.480
inherited from the base library feature simple effect, which is just a basic standard effect.

12:02.480 --> 12:08.960
And our implementation of throw is just abort.

12:08.960 --> 12:14.600
So the simplest way to stop an operation.

12:14.600 --> 12:20.440
And now we define one feature that throws an exception.

12:20.440 --> 12:27.800
And what we do here is we call the operation throw, but we need to have an instance of

12:27.800 --> 12:35.680
the algebraic effect and the syntax we use in fusion for that is we use the type of the

12:35.680 --> 12:39.080
effect, which is my exception, from the environment.

12:39.080 --> 12:46.360
So dot n means taking the innermost instance of that effect in the current environment

12:46.360 --> 12:53.220
and calling that operation on it.

12:53.220 --> 13:00.960
When we do that, we should declare in the signature of the function that this function

13:00.960 --> 13:04.940
requires the effect my exception.

13:04.940 --> 13:08.600
So this is very similar to a throws clause in Java.

13:08.600 --> 13:13.040
If I throw an unchecked exception, I need to declare that.

13:13.040 --> 13:20.340
Here if I require a certain effect, I declare this with the exclamation mark.

13:20.340 --> 13:24.560
Now I add some prints just to show what this code actually does.

13:24.560 --> 13:29.840
And I want to call this function, this feature f now, to call it.

13:29.840 --> 13:33.520
I have to first install an instance of the effect.

13:33.520 --> 13:40.280
So I create an instance of the my exception effect here, call uson is, which is a standard

13:40.280 --> 13:47.360
effect function that takes a lambda expression, which then calls the code that is executed

13:47.360 --> 13:51.520
while this effect is installed.

13:51.520 --> 13:54.240
So adding some more prints that you see what is happening.

13:54.240 --> 14:02.240
If I now run this code here, you see that it prints the exception is installed.

14:02.240 --> 14:05.120
It prints the before throw.

14:05.120 --> 14:09.480
Throw directly jumps, very similar like an exception, out of the use here.

14:09.480 --> 14:11.880
And we continue with the we are done.

14:11.880 --> 14:18.020
So the code after an operation then aborts here will not be executed at all.

14:18.020 --> 14:23.040
Very similar to exceptions.

14:23.040 --> 14:24.480
Now let me talk a bit about mutation.

14:24.480 --> 14:29.960
I told you that fusion doesn't allow direct mutation of fields.

14:29.960 --> 14:36.160
So fields are immutable, which means if we have code like that, we declare a field x,

14:36.160 --> 14:46.160
assign one to three to it, print it, and then assign two times x to another field x.

14:46.160 --> 14:55.800
We see the expected behavior, but if we create a feature that prints this field x and try

14:55.800 --> 15:03.040
to compile this, or try to run this, we actually get an error because the problem is this x

15:03.040 --> 15:09.840
here is not clear which one is referenced here because we have two different variables

15:09.840 --> 15:10.840
here.

15:10.840 --> 15:15.520
There's two axes here, the first and the second, and they are only visible for the

15:15.520 --> 15:18.280
code following that.

15:18.280 --> 15:25.000
So we get an error message that they are two different axes and that, okay, a source code

15:25.000 --> 15:28.980
position here doesn't know which one to choose.

15:28.980 --> 15:39.840
So really every assignment creates a new field and these fields are immutable.

15:39.840 --> 15:46.440
To make them mutable, to get actually the desired effect that we can print x here, we

15:46.440 --> 15:53.600
would have to create a mutable integer value, which is the base library function mute, creates

15:53.600 --> 16:03.200
a mutable instance, assign this to the variable x, and now if we want to update this, we don't

16:03.200 --> 16:09.920
create a new field which would be the colon equals operator, but we have an error operator

16:09.920 --> 16:13.480
which updates the value with a new value.

16:13.480 --> 16:22.560
If we run this now, behaves first like the code before, but this time the show x function

16:22.560 --> 16:33.540
can actually access this single variable because now we have only one field left.

16:33.540 --> 16:39.940
We can now analyze this code for the effects that this code requires and if you do that,

16:39.940 --> 16:45.680
we see there is two effects, there's I O out, this performs output, and there's the mutate

16:45.680 --> 16:54.800
effect because we have an update of a mutable field in our code.

16:54.800 --> 17:03.680
Now not all variables, very few variables actually usually need to be mutable.

17:03.680 --> 17:14.080
Here's an example of a small loop with an index variable counting from 0 to 9 and printing

17:14.080 --> 17:20.920
them, if we analyze this code for effects, we see that this only depends on the I O out

17:20.920 --> 17:28.440
effect, the reason is that every loop iteration creates a new instance of that variable, so

17:28.440 --> 17:36.120
we don't update the I variable here, but we have one independent instance for every iteration

17:36.120 --> 17:38.760
of the loop.

17:38.760 --> 17:47.720
So no variable is mutated, a new instance is created for every iteration.

17:47.720 --> 17:56.120
I want to talk a bit about error handling now and show how a function can produce an

17:56.120 --> 18:00.880
error and show then three different ways of how error handling could be done.

18:00.880 --> 18:12.760
The function I use is just a divide that divides two integers and I call this in a show div

18:12.760 --> 18:18.640
function that calls divide and prints the result and then I call this with three different

18:18.640 --> 18:29.400
value pairs and if I call this, I get, not very surprising, I get an error, there is

18:29.400 --> 18:37.560
a division by 0, the precondition of the division is not fulfilled.

18:37.560 --> 18:45.880
And yeah, so there's the standard error handling in fusion, but it's not very nice because

18:45.880 --> 18:48.760
you have the whole application for failing.

18:48.760 --> 18:58.120
If you want to now somehow treat that error, what we could do is return an outcome which

18:58.120 --> 19:04.120
is similar to Rust's result which is basically a choice type between an error and an actually

19:04.120 --> 19:12.560
32 bit integer and check the case if b is 0, we return an error, otherwise we return

19:12.560 --> 19:17.880
the result of the division and if we run this now, the application runs through, it doesn't

19:17.880 --> 19:27.120
terminate and in the middle case, we print the outcome which is an error here.

19:27.120 --> 19:37.240
But if we want to now actually, after calling the divide, want to know was this divide successful

19:37.240 --> 19:44.200
or not, we would need to check the cases, so we need to distinguish whether we actually

19:44.200 --> 19:53.080
got a value or we got an error, we can do this with a match over the different choices.

19:53.080 --> 20:01.520
Now an alternative would be to use the standard library try effect which is kind of the default

20:01.520 --> 20:11.360
exception based on algebraic effects in fusion and to do that, instead of returning an outcome,

20:11.360 --> 20:18.760
this would be just a function returning a 32 bit integer but requiring the try effect

20:18.760 --> 20:29.200
to be installed and now instead of causing an error, we would raise the error of the

20:29.200 --> 20:34.320
try instance in the current environment, so we don't need the else anymore because the

20:34.320 --> 20:41.920
raise would abort and would return immediately so we could just continue with the code there.

20:41.920 --> 20:51.020
And when we call the divide now, we have to call it with an instance of the try effect

20:51.020 --> 20:58.080
being installed, so just like before, this can be done through a base library function,

20:58.080 --> 21:09.620
try that installs an instance and calls the lambda which is provided as a parameter and

21:09.620 --> 21:17.800
this can then be matched very similar to the outcome but the big difference is that now

21:17.800 --> 21:21.840
the code in between, in between the position where the error is and where we have this

21:21.840 --> 21:29.760
call does not need to pass along these outcomes all the way, I'll come to an end very soon,

21:29.760 --> 21:41.040
but we can directly work with the I32s and the try would jump out directly, so we would

21:41.040 --> 21:43.280
see this outcome.

21:43.280 --> 21:52.520
So the penultimate slide, the current slide, the status of fusion is still very much in

21:52.520 --> 21:57.240
development, the language is getting a bit more stable recently but there's still a lot

21:57.240 --> 22:05.000
of work in the base library, the current implementation has two back ends, one running on a JVM and

22:05.000 --> 22:12.800
there's also a C code back end and there's basic analysis tools available as shown you

22:12.800 --> 22:17.400
the effects analysis.

22:17.400 --> 22:25.520
Java maps actually very well to fusion, there's a tool that allows calling all of Java APIs,

22:25.520 --> 22:31.560
creating Java APIs from a fusion APIs from a Java module that we can call into Java but

22:31.560 --> 22:36.960
doesn't work yet well is calling back from Java into fusion but there's at least in one

22:36.960 --> 22:40.320
way is one to one mapping.

22:40.320 --> 22:49.560
We have effects to encapsulate non-functional aspects and I ask everyone please have a look,

22:49.560 --> 22:53.960
we're happy for any feedback.

22:53.960 --> 23:14.840
Thank you for staying so long, I think time is over.

23:14.840 --> 23:24.280
The match is still needed because this tri here installs the effect and an effect in

23:24.280 --> 23:32.280
the case of an abort has to provide some way to join the value that is returned in the

23:32.280 --> 23:38.000
non-abort case with the value that is returned in the abort case and for the tri effect this

23:38.000 --> 23:44.680
join is just made by producing a value of type outcome which is the choice between error

23:44.680 --> 23:50.640
and the value but there could be other effects that would just replace it by a default value

23:50.640 --> 23:52.440
in that case.

23:52.440 --> 23:56.200
So it depends on the effect but here it's definitely still needed.

23:56.200 --> 23:58.200
Do we have time?

23:58.200 --> 24:08.560
Yes, I saw that at some point you showed that there was an IELP effect and I also saw a

24:08.560 --> 24:14.560
lot of code that uses the save function which I presume uses that effect but I didn't see

24:14.560 --> 24:15.560
the effect using any of the examples.

24:15.560 --> 24:19.560
Okay, yes, you took very good care, thank you.

24:19.560 --> 24:24.640
It is not decided yet where the compiler should be strict and require this annotation.

24:24.640 --> 24:32.640
The current idea is that for basic code we should not require this annotation but for

24:32.640 --> 24:38.040
a public library function we definitely want to know what are the effects.

24:38.040 --> 24:44.840
So I don't want to enforce this for everything or for all the intermediate values and there's

24:44.840 --> 24:51.160
also some cases where only a static analysis of a whole application can actually determine

24:51.160 --> 24:53.000
what the effects are.

24:53.000 --> 24:58.760
So static analysis plays a very important role there but I don't want to enforce too

24:58.760 --> 25:03.640
much typing basically for these effects.

25:03.640 --> 25:10.440
Another one is that John for example has this distinction between runtime exceptions and

25:10.440 --> 25:16.720
checked exceptions and there is this kind of exceptions that can have been pretty much

25:16.720 --> 25:22.440
any code like out of memory exception or stackable code and I wonder how do you handle this kind

25:22.440 --> 25:23.440
of thing.

25:23.440 --> 25:28.440
Oops, they are shutting us down here.

25:28.440 --> 25:34.040
Okay, very good.

25:34.040 --> 25:39.520
It's not nothing of that is done yet but I think I would like to get one step further

25:39.520 --> 25:46.880
and make it user configurable what are the effects that you want to be have consider

25:46.880 --> 25:50.080
acceptable in your environment.

25:50.080 --> 25:55.240
Like you want to have maybe add some debugging print or some logging in somewhere nested

25:55.240 --> 26:03.280
in some internal function and that shouldn't have force you to add effects all over through

26:03.280 --> 26:04.280
the code.

26:04.280 --> 26:08.640
So we must have some set some way to define for the debugging build.

26:08.640 --> 26:15.200
These are the effects that are in there and please don't complain about that.

26:15.200 --> 26:19.120
But we have to still see how we actually will do that.

26:19.120 --> 26:21.200
Thank you so much.

26:21.200 --> 26:22.200
Thank you for saying so long.

26:22.200 --> 26:23.200
Thank you very much for attending the Fujian Room.

26:23.200 --> 26:24.200
This will be a room next year again.

26:24.200 --> 26:27.200
Hopefully we will have two days and we will have more time for sessions and hopefully

26:27.200 --> 26:35.200
many of you will submit proposals and you will all be very welcome to present in the Fujian

26:35.200 --> 26:36.200
Room next year.

26:36.200 --> 26:37.200
Thank you very much for coming.

26:37.200 --> 26:52.160
Thank you.

1
0:00:00.000 --> 0:00:07.000
Good morning. So, since we're all here, we probably all use...

2
0:00:07.000 --> 0:00:10.000
You have to talk quite loud. Sorry.

3
0:00:10.000 --> 0:00:13.000
Sorry. Since we're all here, you probably...

4
0:00:13.000 --> 0:00:14.000
Thanks.

5
0:00:14.000 --> 0:00:18.000
All use open source, which is great because it offers us

6
0:00:18.000 --> 0:00:21.000
functionality without us having to write it ourselves.

7
0:00:21.000 --> 0:00:25.000
But the downside is for the dependencies that we declare,

8
0:00:25.000 --> 0:00:28.000
we tend to pull in a bunch of transitive dependencies,

9
0:00:28.000 --> 0:00:32.000
and any of those can contain vulnerabilities.

10
0:00:32.000 --> 0:00:38.000
So, you might remember December of 21, because I do.

11
0:00:38.000 --> 0:00:44.000
And from your laughter, you probably spent those days in much the same way I did.

12
0:00:44.000 --> 0:00:48.000
I was working at a Dutch retail platform that uses microservices,

13
0:00:48.000 --> 0:00:54.000
and because of log4shell, we got to update everything urgently, twice.

14
0:00:54.000 --> 0:01:00.000
Because after the first CVE was fixed, there were multiple other CVEs,

15
0:01:00.000 --> 0:01:02.000
so, you know, fun times.

16
0:01:02.000 --> 0:01:06.000
And then in March, we got to do it again because of Spring4shell.

17
0:01:06.000 --> 0:01:09.000
But at least we got to practice it the first time.

18
0:01:09.000 --> 0:01:12.000
So, it was fascinating this time, right?

19
0:01:12.000 --> 0:01:18.000
As we know, using external dependencies has pros and cons.

20
0:01:18.000 --> 0:01:21.000
I have more on that, but not in these 20 minutes.

21
0:01:21.000 --> 0:01:26.000
I'll share a link to my website that has all of this information at the end.

22
0:01:26.000 --> 0:01:30.000
So, we have to maintain our dependencies and make sure we keep them up to date.

23
0:01:30.000 --> 0:01:34.000
So, I'm going to give you an overview of different tools that you can use,

24
0:01:34.000 --> 0:01:38.000
ending with, normally I would end with open rewrite, but Tim is here,

25
0:01:38.000 --> 0:01:42.000
so he's going to do the honors for that one.

26
0:01:42.000 --> 0:01:45.000
You probably use Maven or Gradle to manage your dependencies,

27
0:01:45.000 --> 0:01:49.000
so you will probably also know that you can use Maven dependency tree

28
0:01:49.000 --> 0:01:53.000
to get your dependency tree of your declared dependencies

29
0:01:53.000 --> 0:01:56.000
and their transitive dependencies.

30
0:01:56.000 --> 0:02:00.000
And you can ask Maven, hey, which ones have updates available

31
0:02:00.000 --> 0:02:03.000
so that you know what you could be updating.

32
0:02:03.000 --> 0:02:06.000
And you can use a command to analyze your dependencies

33
0:02:06.000 --> 0:02:11.000
to see which transitive dependencies you're using but haven't declared,

34
0:02:11.000 --> 0:02:16.000
and also which you have declared and are using that you might want to remove,

35
0:02:16.000 --> 0:02:20.000
or in the case of JUnit, add some tests.

36
0:02:20.000 --> 0:02:25.000
Gradle has a command as well to get your dependency tree.

37
0:02:25.000 --> 0:02:31.000
As far as I know, it doesn't have a command to get updated versions,

38
0:02:31.000 --> 0:02:34.000
but you can use a plugin like the Venn mains version plugin.

39
0:02:34.000 --> 0:02:38.000
And I'm also not familiar with an analyze command.

40
0:02:38.000 --> 0:02:42.000
If you're a Gradle user and you do know how to do that, please tell me.

41
0:02:42.000 --> 0:02:46.000
And as I currently work for JetBrains, I'm also going to tell you

42
0:02:46.000 --> 0:02:50.000
what intelligent idea can do to help you manage your dependencies.

43
0:02:50.000 --> 0:02:55.000
So you can view your dependency hierarchy in the built-in window,

44
0:02:55.000 --> 0:02:58.000
either for Maven or for Gradle.

45
0:02:58.000 --> 0:03:02.000
And here you can see, again, the hierarchy of the direct dependencies

46
0:03:02.000 --> 0:03:04.000
and their transitive dependencies.

47
0:03:04.000 --> 0:03:07.000
And you can expand and collapse as you like,

48
0:03:07.000 --> 0:03:10.000
which is easier than reading it from the terminal.

49
0:03:10.000 --> 0:03:13.000
And you can analyze dependencies as well.

50
0:03:13.000 --> 0:03:17.000
We use the dependency analyzer in intelligent idea.

51
0:03:17.000 --> 0:03:22.000
This year, or past year, we added a functionality called Package Search,

52
0:03:22.000 --> 0:03:26.000
which allows you to manage your dependencies right inside your IDE.

53
0:03:26.000 --> 0:03:28.000
So you can use code completion, for example,

54
0:03:28.000 --> 0:03:32.000
to add dependencies right inside your build file

55
0:03:32.000 --> 0:03:39.000
without having to go outside of your IDE, like so.

56
0:03:39.000 --> 0:03:43.000
And it will also tell you with a little squiggly line,

57
0:03:43.000 --> 0:03:47.000
I don't know what the official name is, so I'm going with squiggly line,

58
0:03:47.000 --> 0:03:50.000
that will highlight, hey, there's a new version available for this

59
0:03:50.000 --> 0:03:56.000
and then either with a hover or the familiar Alt-Enter or Option-Enter.

60
0:03:56.000 --> 0:03:57.000
Option-Enter.

61
0:03:57.000 --> 0:03:58.000
Option-Enter.

62
0:03:58.000 --> 0:04:01.000
That will suggest fixes.

63
0:04:01.000 --> 0:04:03.000
So, for example, to update this version.

64
0:04:03.000 --> 0:04:08.000
I'm using a project that's really outdated from my GitHub graveyard of projects.

65
0:04:08.000 --> 0:04:10.000
The project itself is pretty useless,

66
0:04:10.000 --> 0:04:12.000
but it's a perfect example of outdated dependencies.

67
0:04:12.000 --> 0:04:18.000
So don't worry, this is not being used in production.

68
0:04:18.000 --> 0:04:21.000
So, yeah, you can use Intention Actions, like I said,

69
0:04:21.000 --> 0:04:28.000
to update the dependencies, and this works in build gradles too.

70
0:04:28.000 --> 0:04:31.000
And there's the dependency tools window that you can open

71
0:04:31.000 --> 0:04:33.000
where you can manage your dependencies.

72
0:04:33.000 --> 0:04:37.000
So you can, as you can see in this example,

73
0:04:37.000 --> 0:04:39.000
you can upgrade all of them at once,

74
0:04:39.000 --> 0:04:41.000
or you can upgrade individual ones,

75
0:04:41.000 --> 0:04:45.000
or you can select the version to use from the list of versions.

76
0:04:45.000 --> 0:04:49.000
You see information about the dependency right in this window.

77
0:04:49.000 --> 0:04:53.000
You can search for dependencies and find information about those dependencies

78
0:04:53.000 --> 0:04:59.000
right inside your IDE, so you don't have to go to search Maven or somewhere else.

79
0:04:59.000 --> 0:05:03.000
And in IntelliJ Ultimate, we have the package checker functionality,

80
0:05:03.000 --> 0:05:06.000
which even provides information.

81
0:05:06.000 --> 0:05:09.000
So this is if you hover over a vulnerable dependency

82
0:05:09.000 --> 0:05:12.000
that's highlighted in yellow-ish.

83
0:05:12.000 --> 0:05:16.000
It will tell you these are the vulnerabilities

84
0:05:16.000 --> 0:05:18.000
that were found in this dependency,

85
0:05:18.000 --> 0:05:21.000
and you can click the links to go to the checkmarks advisory

86
0:05:21.000 --> 0:05:25.000
for more information on that.

87
0:05:25.000 --> 0:05:30.000
And you can also see that information in the vulnerable dependencies tool window,

88
0:05:30.000 --> 0:05:35.000
so you can see which of your dependencies have vulnerabilities,

89
0:05:35.000 --> 0:05:38.000
what the severity is, find more information,

90
0:05:38.000 --> 0:05:41.000
and fix it right inside your IDE.

91
0:05:41.000 --> 0:05:45.000
So all of these tools are great because you can use them right

92
0:05:45.000 --> 0:05:47.000
as you're working on your code,

93
0:05:47.000 --> 0:05:50.000
but the downside is you need to be actually working on that project.

94
0:05:50.000 --> 0:05:54.000
And if, like I did at my last job, you have a bunch of microservices

95
0:05:54.000 --> 0:05:56.000
that adds up to a bunch of repos.

96
0:05:56.000 --> 0:06:00.000
You'd have to check out each individual repo and check for updates.

97
0:06:00.000 --> 0:06:03.000
And then, of course, you still have to apply those

98
0:06:03.000 --> 0:06:06.000
to verify that everything still works, et cetera.

99
0:06:06.000 --> 0:06:13.000
So hopefully your company will have some kind of software composition analysis

100
0:06:13.000 --> 0:06:15.000
that can scan your repositories

101
0:06:15.000 --> 0:06:18.000
and sometimes also your Docker containers

102
0:06:18.000 --> 0:06:22.000
and provide you with an overview of your repos

103
0:06:22.000 --> 0:06:26.000
and which ones have which vulnerable dependencies.

104
0:06:26.000 --> 0:06:29.000
The upside is that as a developer,

105
0:06:29.000 --> 0:06:32.000
you won't have to individually check all of your repositories,

106
0:06:32.000 --> 0:06:35.000
but the downside is I still have to check the dashboard

107
0:06:35.000 --> 0:06:37.000
to see what's outdated

108
0:06:37.000 --> 0:06:43.000
and then again still apply and verify all of those updates.

109
0:06:43.000 --> 0:06:46.000
The next generation of tools that is useful

110
0:06:46.000 --> 0:06:49.000
are bots that can create PRs for you.

111
0:06:49.000 --> 0:06:53.000
Since we're in the Java room, I'm assuming we use Java,

112
0:06:53.000 --> 0:06:55.000
and these are the options that we have.

113
0:06:55.000 --> 0:06:59.000
Dependable, Renovate, and Snick Open Source.

114
0:06:59.000 --> 0:07:03.000
Dependable is now GitHub native and it offers three features.

115
0:07:03.000 --> 0:07:05.000
It can alert on your repositories.

116
0:07:05.000 --> 0:07:08.000
It can create security updates,

117
0:07:08.000 --> 0:07:12.000
so PRs for dependencies that have no vulnerabilities,

118
0:07:12.000 --> 0:07:15.000
to update them, and it can do version updates.

119
0:07:15.000 --> 0:07:18.000
So then there's a new version for other reasons.

120
0:07:18.000 --> 0:07:25.000
Since it's GitHub native, you can configure it in your settings on GitHub.

121
0:07:25.000 --> 0:07:29.000
It's also available on other platforms,

122
0:07:29.000 --> 0:07:33.000
but I use GitHub just to compare the three bots.

123
0:07:33.000 --> 0:07:36.000
So if you have alerts, you'll see a yellow box

124
0:07:36.000 --> 0:07:39.000
with a button to press for more information.

125
0:07:39.000 --> 0:07:42.000
If it generates PRs for security updates,

126
0:07:42.000 --> 0:07:45.000
that's what this would look like.

127
0:07:45.000 --> 0:07:48.000
And if you want to use the version updates as well,

128
0:07:48.000 --> 0:07:51.000
you'll need to add a dependable YAML.

129
0:07:51.000 --> 0:07:54.000
Insert obligatory YAML sounds like

130
0:07:54.000 --> 0:07:58.000
the Dutch word yummer, which means too bad or unfortunate.

131
0:07:58.000 --> 0:08:02.000
And you have to provide a little bit of configuration.

132
0:08:02.000 --> 0:08:07.000
You can set the frequency, the maximum number of PRs to schedule,

133
0:08:07.000 --> 0:08:12.000
and some minor details on how to manage these PRs.

134
0:08:12.000 --> 0:08:15.000
The next option is Renovate, which is an open source project,

135
0:08:15.000 --> 0:08:18.000
but also with a vendor behind it.

136
0:08:18.000 --> 0:08:20.000
This offers the security updates and the version updates,

137
0:08:20.000 --> 0:08:24.000
like dependables, but also a project and a job's dashboard

138
0:08:24.000 --> 0:08:27.000
for some more information.

139
0:08:27.000 --> 0:08:31.000
GitHub, it's also fairly easy to apply this to your projects.

140
0:08:31.000 --> 0:08:35.000
You can use the app, and you can choose to apply it

141
0:08:35.000 --> 0:08:39.000
to either all of your projects or only certain projects.

142
0:08:39.000 --> 0:08:42.000
So if you want to just, if you've never used one of these bots

143
0:08:42.000 --> 0:08:45.000
and you want to try it out, this is one that you can try out

144
0:08:45.000 --> 0:08:48.000
on just one repository, as far as I know,

145
0:08:48.000 --> 0:08:50.000
only one of these three.

146
0:08:50.000 --> 0:08:53.000
It will then generate a configuration for you,

147
0:08:53.000 --> 0:08:56.000
and once you merge that basic configuration,

148
0:08:56.000 --> 0:09:02.000
it will start doing its thing and generating PRs.

149
0:09:02.000 --> 0:09:05.000
You can also specify the maximum number of PRs

150
0:09:05.000 --> 0:09:07.000
and the maximum number of branches that you want to open

151
0:09:07.000 --> 0:09:11.000
at a certain time, and it has more options,

152
0:09:11.000 --> 0:09:15.000
and those options are more fine grained than the dependable options.

153
0:09:15.000 --> 0:09:18.000
The PRs provide more information as well.

154
0:09:18.000 --> 0:09:21.000
Why is it trying to update these versions,

155
0:09:21.000 --> 0:09:24.000
as well as some information on how old is this package?

156
0:09:24.000 --> 0:09:27.000
This is an old screenshot, sorry.

157
0:09:27.000 --> 0:09:30.000
Adoption rate among renovate users,

158
0:09:30.000 --> 0:09:34.000
how many percentage of the builds that pass with this update,

159
0:09:34.000 --> 0:09:39.000
and how confident they feel about doing this update,

160
0:09:39.000 --> 0:09:43.000
where neutral means either they can't tell based on the information

161
0:09:43.000 --> 0:09:46.000
they have or they don't have enough information yet.

162
0:09:46.000 --> 0:09:49.000
It will also add a dashboard to your project

163
0:09:49.000 --> 0:09:52.000
with a list of all of the things that you need to update,

164
0:09:52.000 --> 0:09:56.000
and there will be a jobs dashboard where you can check the details

165
0:09:56.000 --> 0:09:58.000
of all of the jobs that have run.

166
0:09:58.000 --> 0:10:01.000
The last option is sneak open source,

167
0:10:01.000 --> 0:10:04.000
which also offers security updates and version updates,

168
0:10:04.000 --> 0:10:08.000
and some dashboards, as well as the option to check for vulnerabilities

169
0:10:08.000 --> 0:10:12.000
in new PRs, making sure that you're not adding vulnerable dependencies,

170
0:10:12.000 --> 0:10:15.000
and it can check your source code.

171
0:10:15.000 --> 0:10:18.000
Slightly more steps to enable that.

172
0:10:18.000 --> 0:10:22.000
You can go to their website, authorize your GitHub,

173
0:10:22.000 --> 0:10:27.000
select which repositories, either public or public and private,

174
0:10:27.000 --> 0:10:32.000
add a token, and then it will generate PRs for you,

175
0:10:32.000 --> 0:10:37.000
also providing some information on why they are giving you this update

176
0:10:37.000 --> 0:10:40.000
with more information about the vulnerability,

177
0:10:40.000 --> 0:10:43.000
if it's for vulnerability reasons.

178
0:10:43.000 --> 0:10:49.000
What sneak does by default is it will bundle PRs that are related,

179
0:10:49.000 --> 0:10:54.000
so it generates less noise, so less individual PRs.

180
0:10:54.000 --> 0:10:56.000
You can configure Renové to do that as well,

181
0:10:56.000 --> 0:10:59.000
but then you have to configure that yourself.

182
0:10:59.000 --> 0:11:04.000
Sneak also checks on incoming PRs and provides a dashboard,

183
0:11:04.000 --> 0:11:06.000
again, it will update the projects.

184
0:11:06.000 --> 0:11:08.000
I hope your dashboard doesn't include this.

185
0:11:08.000 --> 0:11:14.000
It has some configuration options for frequency and to enable or disable,

186
0:11:14.000 --> 0:11:18.000
either for new or known vulnerabilities.

187
0:11:18.000 --> 0:11:22.000
If you want to start with only making sure you're not getting new ones in

188
0:11:22.000 --> 0:11:24.000
and separately tackle your backlog,

189
0:11:24.000 --> 0:11:29.000
or if you want to apply it to some projects, you can configure that.

190
0:11:29.000 --> 0:11:34.000
The pros and cons of these bots are fairly straightforward

191
0:11:34.000 --> 0:11:37.000
to add to your repositories.

192
0:11:37.000 --> 0:11:41.000
It's a lot less work doing this just once than manually checking it every time

193
0:11:41.000 --> 0:11:43.000
that you're working on a repository.

194
0:11:43.000 --> 0:11:45.000
They can create automatic PRs,

195
0:11:45.000 --> 0:11:48.000
so it doesn't depend on you checking for updates anymore.

196
0:11:48.000 --> 0:11:50.000
It will do that automatically.

197
0:11:50.000 --> 0:11:53.000
The downside of that is it can create a lot of noise,

198
0:11:53.000 --> 0:11:56.000
especially depending on how outdated your projects are

199
0:11:56.000 --> 0:11:59.000
and the maximum number of PRs that you've set,

200
0:11:59.000 --> 0:12:02.000
and you will still need to manage those PRs.

201
0:12:02.000 --> 0:12:06.000
So if the build fails, you know that you have more work to do,

202
0:12:06.000 --> 0:12:08.000
because either some stuff doesn't compile anymore,

203
0:12:08.000 --> 0:12:11.000
or your tests are failing and you need to look into it,

204
0:12:11.000 --> 0:12:13.000
that's at least good to know.

205
0:12:13.000 --> 0:12:18.000
But even if it's green, you still need to find the time to deploy that

206
0:12:18.000 --> 0:12:20.000
and make sure that everything still works,

207
0:12:20.000 --> 0:12:23.000
depending on how confident you are with your test suite.

208
0:12:23.000 --> 0:12:29.000
We had a feel-safe update that managed to stop running the integration test,

209
0:12:29.000 --> 0:12:33.000
so it looked green but really wasn't.

210
0:12:33.000 --> 0:12:36.000
So we have to revert that,

211
0:12:36.000 --> 0:12:38.000
and these bots only update the versions

212
0:12:38.000 --> 0:12:41.000
and they don't make any changes to your code.

213
0:12:41.000 --> 0:12:46.000
So that's when we get to migration tools.

214
0:12:46.000 --> 0:12:48.000
You might not be aware,

215
0:12:48.000 --> 0:12:51.000
IntelliJ Idea has a migration refactor,

216
0:12:51.000 --> 0:12:56.000
and it offers several standard or well-known refactoring,

217
0:12:56.000 --> 0:13:01.000
so Java EE to Jakarta EE, JUnit 4 to 5,

218
0:13:01.000 --> 0:13:05.000
as well as the option to create your own.

219
0:13:05.000 --> 0:13:10.000
If you're interested in the JUnit or Java EE refactorings,

220
0:13:10.000 --> 0:13:15.000
we have videos on our IntelliJ Idea YouTube channel that detail all of that.

221
0:13:15.000 --> 0:13:18.000
Basically what it does is it will update the imports,

222
0:13:18.000 --> 0:13:21.000
but there are some manual steps that you still have to do.

223
0:13:21.000 --> 0:13:25.000
So it can help you a little bit.

224
0:13:25.000 --> 0:13:26.000
Then there are other tools.

225
0:13:26.000 --> 0:13:28.000
Error-prone is one of those tools.

226
0:13:28.000 --> 0:13:32.000
It's not intended to be a migration tool.

227
0:13:32.000 --> 0:13:38.000
It's a static analysis tool to check for known bug patterns in your code.

228
0:13:38.000 --> 0:13:44.000
It offers a number of standard bug patterns that have been identified.

229
0:13:44.000 --> 0:13:47.000
It can either report on them or fix them,

230
0:13:47.000 --> 0:13:50.000
and included with error-prone is refaster,

231
0:13:50.000 --> 0:13:53.000
which is a refactoring based on before and after templates.

232
0:13:53.000 --> 0:13:59.000
So you can use that to help you migrate from one pattern to the next.

233
0:13:59.000 --> 0:14:03.000
I know, for example, that Sandermuk at Picnic has said

234
0:14:03.000 --> 0:14:06.000
that they used it to upgrade to newer Java versions.

235
0:14:06.000 --> 0:14:09.000
He's done talks on that at, for example,

236
0:14:09.000 --> 0:14:14.000
NLJ conference, JSpring, and JFool, if you want to go find that on YouTube.

237
0:14:14.000 --> 0:14:18.000
Then another migration tool is OpenRee, right?

238
0:14:18.000 --> 0:14:20.000
That team is going to tell you all about.

239
0:14:20.000 --> 0:14:22.000
Thank you.

240
0:14:22.000 --> 0:14:23.000
Thank you.


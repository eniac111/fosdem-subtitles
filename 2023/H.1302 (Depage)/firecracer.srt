1
0:00:00.000 --> 0:00:10.600
So, hi, I will start right away because my talk is quite packed.

2
0:00:10.600 --> 0:00:17.400
So, I'm focusy monies working for Amazon in the Amazon Coreto team.

3
0:00:17.400 --> 0:00:19.400
My slides and the examples are on GitHub.

4
0:00:19.400 --> 0:00:23.460
I will show this link one more time at the end of the talk so you don't have to take

5
0:00:23.460 --> 0:00:24.920
a copy.

6
0:00:24.920 --> 0:00:29.840
I am principal engineer and Amazon Coreto team working the OpenGDK since more than 15

7
0:00:29.840 --> 0:00:30.840
years.

8
0:00:30.840 --> 0:00:39.600
I have been with SAP before that for also more than 15 years and have various duties

9
0:00:39.600 --> 0:00:41.520
in the OpenGDK and JCP.

10
0:00:41.520 --> 0:00:43.920
So, let's get started about firecrackers.

11
0:00:43.920 --> 0:00:47.280
A firecracker is a minimalistic virtual machine monitor.

12
0:00:47.280 --> 0:00:49.240
It's KVM backed.

13
0:00:49.240 --> 0:00:53.500
It only supports a limited set of devices, basically block and network devices which

14
0:00:53.500 --> 0:00:57.220
are virtualized through VITIO and a V-SOC and a serial device.

15
0:00:57.220 --> 0:01:03.280
It makes it very fast and also very secure because it doesn't support any exotic devices

16
0:01:03.280 --> 0:01:05.000
like for example QMO.

17
0:01:05.000 --> 0:01:06.600
It has a REST based configuration.

18
0:01:06.600 --> 0:01:10.640
It's completely written in Rust which also makes it kind of safe.

19
0:01:10.640 --> 0:01:19.520
It's based on, it was from Google's cross VM and it's nowadays based on a Rust VM library

20
0:01:19.520 --> 0:01:24.520
which is like a base library for virtual machine monitors and I think that's also used by cross

21
0:01:24.520 --> 0:01:26.260
VM meanwhile.

22
0:01:26.260 --> 0:01:31.240
It supports a micro VM metadata service which is basically a JSON storage where you can

23
0:01:31.240 --> 0:01:35.860
share data between guest and host because with full virtualization it's not easy to

24
0:01:35.860 --> 0:01:41.000
exchange data between guest and host because all the guest applications run on their own

25
0:01:41.000 --> 0:01:46.320
kernel and with this data service for example you don't need a network connection between

26
0:01:46.320 --> 0:01:47.960
host and guest.

27
0:01:47.960 --> 0:01:52.800
And then the firecracker process itself supports in addition to the security provided by KVM

28
0:01:52.800 --> 0:02:00.200
unboxing so a jailer utility which basically places the firecracker process on the host

29
0:02:00.200 --> 0:02:05.800
into additional C group change root and second environment and it's all open source, Apache

30
0:02:05.800 --> 0:02:11.240
2 licensed and it's the technology behind AWS Lambda.

31
0:02:11.240 --> 0:02:16.880
So every Lambda runs in its own firecracker virtualized container.

32
0:02:16.880 --> 0:02:21.520
So here's just a picture of what I've just told you.

33
0:02:21.520 --> 0:02:26.680
So we have the kernel with KVM on the downside and then we have the firecracker process which

34
0:02:26.680 --> 0:02:33.360
has a thread for each vCPU which you configure in your guest and then it has a special thread

35
0:02:33.360 --> 0:02:39.520
to handle IO and an API thread which is low priority to handle the rest requests and then

36
0:02:39.520 --> 0:02:46.600
it boots the guest kernel which has the VOTIO devices and the VM thread handles this, VOTIO

37
0:02:46.600 --> 0:02:53.120
issues and maps them for network to tap devices on the host and for the block devices either

38
0:02:53.120 --> 0:02:58.480
on a native block device on the host or on a file system which is exported as block device

39
0:02:58.480 --> 0:03:00.080
to the guest.

40
0:03:00.080 --> 0:03:06.320
And then you can run a bit of application on the guest and you can run as many guests

41
0:03:06.320 --> 0:03:07.320
as you want.

42
0:03:07.320 --> 0:03:09.960
It's only limited by your amount of memory basically.

43
0:03:09.960 --> 0:03:17.080
The overhead by firecracker is just about 50 megabytes so, no it's less.

44
0:03:17.080 --> 0:03:21.480
We will see, it's very small.

45
0:03:21.480 --> 0:03:28.080
So let's go to a demo.

46
0:03:28.080 --> 0:03:30.120
So I have to truncate the file.

47
0:03:30.120 --> 0:03:33.520
So here we just start firecracker.

48
0:03:33.520 --> 0:03:37.080
We specify the API socket where we communicate within.

49
0:03:37.080 --> 0:03:43.080
We have a log file and log info and the boot timer to see the boot timer.

50
0:03:43.080 --> 0:03:51.040
And now from another terminal we start to config this with JSON data as I told you before.

51
0:03:51.040 --> 0:04:00.360
So we configure two vCPUs and 512 megabytes of memory.

52
0:04:00.360 --> 0:04:07.400
I have here a root file system, extended x4 root file system and a freshly compiled Linux

53
0:04:07.400 --> 0:04:08.600
kernel.

54
0:04:08.600 --> 0:04:18.160
So I will now use another REST command to configure the Linux image which will be booted

55
0:04:18.160 --> 0:04:21.440
and I pass quite a lot of kernel arguments.

56
0:04:21.440 --> 0:04:26.080
It's mostly to switch off devices which you don't need anyway and which are unsupported.

57
0:04:26.080 --> 0:04:28.560
And we define as init script to just run bash.

58
0:04:28.560 --> 0:04:31.880
So init script will be just a shell.

59
0:04:31.880 --> 0:04:38.400
And then we finally have to define a root file system.

60
0:04:38.400 --> 0:04:42.520
That's our x4 file which I showed you before.

61
0:04:42.520 --> 0:04:47.840
And now that we've configured everything we can just start the virtual machine again with

62
0:04:47.840 --> 0:04:51.200
a JSON request.

63
0:04:51.200 --> 0:04:55.320
And when you go back into our window we see that now the virtual machine has been started

64
0:04:55.320 --> 0:04:59.560
and it took about 200 milliseconds to start bash.

65
0:04:59.560 --> 0:05:06.360
And it's fully configured.

66
0:05:06.360 --> 0:05:17.960
Linux the image was assembled from a Ubuntu 22 image and the kernel I've compiled it myself.

67
0:05:17.960 --> 0:05:30.200
You see we have two CPUs and about 512 megabytes of memory.

68
0:05:30.200 --> 0:05:39.440
So if we exit the shell it will be just reboot because it was our init process.

69
0:05:39.440 --> 0:05:44.680
From this 200 milliseconds we just take to boot the serial device alone took about 100

70
0:05:44.680 --> 0:05:45.880
milliseconds.

71
0:05:45.880 --> 0:05:50.120
So if you take that away usually in production you don't need the serial device it puts in

72
0:05:50.120 --> 0:05:51.800
100 milliseconds.

73
0:05:51.800 --> 0:05:59.040
And that's on my laptop.

74
0:05:59.040 --> 0:06:02.240
So very quick comparison of Firecracker and Docker.

75
0:06:02.240 --> 0:06:04.640
So Firecracker is fully KVM virtualized.

76
0:06:04.640 --> 0:06:09.000
Docker has only C group namespace isolation.

77
0:06:09.000 --> 0:06:13.000
The good thing about C group namespace isolation only is that Docker images run on the same

78
0:06:13.000 --> 0:06:16.680
kernel so they can do copy and write page cache memory sharing.

79
0:06:16.680 --> 0:06:20.480
So if you run many of them they are dancer.

80
0:06:20.480 --> 0:06:26.680
Whereas for if you run several Firecracker images they cannot directly share memory.

81
0:06:26.680 --> 0:06:30.080
So you have to use ballooning devices for example in the gas to give back memory to

82
0:06:30.080 --> 0:06:31.400
the host.

83
0:06:31.400 --> 0:06:35.480
On the other side that's much more secure because every container has its own memory,

84
0:06:35.480 --> 0:06:38.560
its own kernel.

85
0:06:38.560 --> 0:06:45.320
And Firecracker has snapshot support to checkpoint the whole container like with the kernel everything

86
0:06:45.320 --> 0:06:51.740
together and Docker can use Creo checkpoint restore and user space to do the same thing

87
0:06:51.740 --> 0:06:57.520
basically serialize Docker container with all processes to a file.

88
0:06:57.520 --> 0:07:00.560
I will see examples for that now.

89
0:07:00.560 --> 0:07:03.200
So now what is crack and Creo?

90
0:07:03.200 --> 0:07:07.400
So as was mentioned before crack is called in native restore and checkpoint.

91
0:07:07.400 --> 0:07:11.240
It's a new project in the open JDK.

92
0:07:11.240 --> 0:07:14.520
It has basically three points which are important.

93
0:07:14.520 --> 0:07:21.160
First one is to create the standard checkpoint restore notification API because many applications

94
0:07:21.160 --> 0:07:29.640
are not aware of being cloned and there is state, security, time, all this kind of stuff

95
0:07:29.640 --> 0:07:35.960
which an application might want to react upon especially not only when cloning but not only

96
0:07:35.960 --> 0:07:39.880
when checkpointing and restoring but especially when cloning the application.

97
0:07:39.880 --> 0:07:44.400
Think for example of an application which logs to a file and then you would checkpoint

98
0:07:44.400 --> 0:07:48.160
it and we start to clones and they both write to the same file.

99
0:07:48.160 --> 0:07:49.600
They will corrupt the file usually.

100
0:07:49.600 --> 0:07:54.560
So you have to take some measures if you run many things in parallel and the application

101
0:07:54.560 --> 0:07:56.200
is not prepared for that.

102
0:07:56.200 --> 0:08:00.440
So if you want to, crack is currently not part of an official open JDK release.

103
0:08:00.440 --> 0:08:06.160
It's still mostly a research project in the open JDK but you can already now make your

104
0:08:06.160 --> 0:08:11.720
application ready for crack by using the org crack API that's available on Maven Central

105
0:08:11.720 --> 0:08:17.240
and that basically wraps JDK crack namespace which is currently in the crack repository

106
0:08:17.240 --> 0:08:23.360
in open JDK but if it finds JavaX.crack once it should become available it will switch

107
0:08:23.360 --> 0:08:30.120
to that and it also offers the possibility to pass the custom implementations to a system

108
0:08:30.120 --> 0:08:36.160
property and then finally what makes crack interesting for many people to experiment

109
0:08:36.160 --> 0:08:44.680
with is that it basically integrates with Creo so it has a copy of Creo packed with

110
0:08:44.680 --> 0:08:51.680
the crack distribution so you can easily checkpoint your Java process and restart it.

111
0:08:51.680 --> 0:08:55.880
And then as I mentioned before Creo is checkpoint restore and user space.

112
0:08:55.880 --> 0:09:00.080
It's an old Java functionality which allows to serialize a single process to the file

113
0:09:00.080 --> 0:09:01.080
system.

114
0:09:01.080 --> 0:09:06.640
It uses kernel free cgroup freezer to freeze the processes or process tree and then writes

115
0:09:06.640 --> 0:09:10.080
all the memory to the disk and so on.

116
0:09:10.080 --> 0:09:18.920
Still Creo has some issues because it has to take a look at all the open file descriptors,

117
0:09:18.920 --> 0:09:24.000
shared memory segments, stuff like that which might not be available again when you restore

118
0:09:24.000 --> 0:09:27.480
the image whereas Firecracker as I said before it restores the whole kernel with all the

119
0:09:27.480 --> 0:09:32.240
file system everything in place so it's much simpler from that perspective.

120
0:09:32.240 --> 0:09:39.880
So let's take a quick demo on Firecrack.

121
0:09:39.880 --> 0:09:47.400
So I have here open JDK build 17 with crack extensions and then you simply pass the option

122
0:09:47.400 --> 0:09:55.280
checkpoint two that's a file and this is just a pet clinic, a Spring Boot pet clinic example

123
0:09:55.280 --> 0:10:04.480
application and I modified it to register with the org crack callbacks as I said.

124
0:10:04.480 --> 0:10:16.360
You can see here it's registered to org crack and now that I've started it I can use J command

125
0:10:16.360 --> 0:10:22.480
to checkpoint it so I send it a checkpoint command and when you see just out of the box

126
0:10:22.480 --> 0:10:28.240
it didn't work it shows some exception because it found for example that the port 88 is open

127
0:10:28.240 --> 0:10:35.520
and this uses a vanilla version of Tomcat which isn't implementing the crack callbacks

128
0:10:35.520 --> 0:10:40.760
so that's not that bad.

129
0:10:40.760 --> 0:10:48.280
It has a developer option which has to ignore exceptions so for this simple case it will

130
0:10:48.280 --> 0:10:53.120
probably work so let's try it.

131
0:10:53.120 --> 0:10:56.480
Start it one more time.

132
0:10:56.480 --> 0:11:02.840
Prepare the checkpoint here so let's wait until it becomes ready.

133
0:11:02.840 --> 0:11:10.200
So now checkpoint it and you see we also locked the resources so you see there were about

134
0:11:10.200 --> 0:11:15.920
10 file descriptors and most of them were okay because like the crack modified VM already

135
0:11:15.920 --> 0:11:22.160
knows a lot of the file descriptors the VM is using for example for the jar files it

136
0:11:22.160 --> 0:11:27.160
has opened or for the module files and it closes them by themselves without need to

137
0:11:27.160 --> 0:11:33.520
register anything.

138
0:11:33.520 --> 0:11:37.960
And the checkpoint it worked and what's interesting is here that before checkpointing it caused

139
0:11:37.960 --> 0:11:43.560
the listener, the handler I installed in my pet cleaning application so I could do additional

140
0:11:43.560 --> 0:11:57.760
stuff before checkpointing and now we can just restore this frozen process and you see

141
0:11:57.760 --> 0:12:06.320
it starts instantly it caused after restore a hook I have registered and we can send a

142
0:12:06.320 --> 0:12:12.720
CURL request on 8080 and it basically still works.

143
0:12:12.720 --> 0:12:14.840
So that's nice.

144
0:12:14.840 --> 0:12:15.840
Let's go further.

145
0:12:15.840 --> 0:12:20.600
So now firecracker so that's basically a combination of initial firecracker and crack.

146
0:12:20.600 --> 0:12:25.800
I found it somehow funny that words are so similar so it's a play with words and in my

147
0:12:25.800 --> 0:12:29.120
opinion it's the best of two worlds to combine these two.

148
0:12:29.120 --> 0:12:34.320
Currently as I said a crack project is based on Creo but I think it might be interesting

149
0:12:34.320 --> 0:12:39.320
to add support for firecracker as well and I'm currently working on that.

150
0:12:39.320 --> 0:12:50.440
So with firecracker you can basically checkpoint a plain JDK even if it's not modified by crack

151
0:12:50.440 --> 0:12:56.360
because as I said no need to worry about file descriptors so on.

152
0:12:56.360 --> 0:13:01.600
One issue with firecracker as I said before you cannot trigger the checkpoint from Java

153
0:13:01.600 --> 0:13:07.520
so the crack implementation in open JDK can checkpoint itself because Creo is running

154
0:13:07.520 --> 0:13:14.360
on the same kernel like the Java application so Java just so JNI calls Creo and checkpoint

155
0:13:14.360 --> 0:13:19.080
itself that's obviously not possible in firecracker because you cannot escape from the gas that's

156
0:13:19.080 --> 0:13:25.280
the whole thing about running it in a fully virtualized gas so we need another means of

157
0:13:25.280 --> 0:13:29.680
communication but that's not that complicated.

158
0:13:29.680 --> 0:13:34.560
It offers maximum security and speed and as said before no copy on write memory sharing

159
0:13:34.560 --> 0:13:40.240
but you can use ballooning same page merging kind of features which are also have their

160
0:13:40.240 --> 0:13:44.900
plus and their drawbacks but things to investigate.

161
0:13:44.900 --> 0:13:51.480
So let's do a firecracker demo with Java now.

162
0:13:51.480 --> 0:14:02.200
To not bore you more with all this JSON request I've written a shell script which basically

163
0:14:02.200 --> 0:14:12.560
does all that in one script and instead of calling bash it just starts Java as init process

164
0:14:12.560 --> 0:14:26.280
and we can now submit the request and you see it's working it's here here is the request.

165
0:14:26.280 --> 0:14:32.320
I have still registered these callbacks although I'm running on a vanilla JDK by using the

166
0:14:32.320 --> 0:14:41.160
ORCRACK library so they are empty they won't do anything and I can now snapshot firecracker

167
0:14:41.160 --> 0:14:45.720
and you see that's also quite quick.

168
0:14:45.720 --> 0:14:56.080
Firecracker is not is resumed automatically so I have to kill it manually and now if I

169
0:14:56.080 --> 0:15:03.760
restart from snapshot you will see it also it takes just a few milliseconds to restart

170
0:15:03.760 --> 0:15:15.000
the whole image and again I can see where I enter it it works you see there is no the

171
0:15:15.000 --> 0:15:20.280
hooks are not being called because there is no real crack implementation in the back in

172
0:15:20.280 --> 0:15:27.840
this case but like checkpointing for Java itself works and it's also easy to run a second

173
0:15:27.840 --> 0:15:34.160
clone now obviously we cannot run it in the same namespace because it will use the same

174
0:15:34.160 --> 0:15:43.600
IP address like the first version so we started in a network namespace so minus and zero

175
0:15:43.600 --> 0:15:52.720
is just to create a new namespace for the clone and you see it uses IP netns netnamespace

176
0:15:52.720 --> 0:16:03.360
exec to execute firecracker but it restores quite as quickly and the initial IP address

177
0:16:03.360 --> 0:16:11.760
of the process has now in this namespace it's now mapped on a different IP address on the

178
0:16:11.760 --> 0:16:18.080
host but you see it's still working so in the guest the guest still has the same IP

179
0:16:18.080 --> 0:16:23.080
address it has in the first place it's just running in its own namespace and inside the

180
0:16:23.080 --> 0:16:33.000
guest again the the tomcat is running on the same port or no problem so we just kill the

181
0:16:33.000 --> 0:16:49.800
first instance and we kill the second instance how much time do I have oh okay okay so just

182
0:16:49.800 --> 0:16:55.760
a few words I I realized that talks which are rated the highest are usually saw some

183
0:16:55.760 --> 0:17:02.120
animation so I decided to do animation because usually I only saw consoler console demos

184
0:17:02.120 --> 0:17:08.680
so quick introduction user for demon is a is a possibility to handle page faults from

185
0:17:08.680 --> 0:17:16.360
the user space and firecracker offers the possibility instead of mapping the image file

186
0:17:16.360 --> 0:17:22.520
right into firecrackers memory to to use an external user for demon and if we write the

187
0:17:22.520 --> 0:17:28.120
user for demon ourselves we have the possibility to follow page by page which addresses get

188
0:17:28.120 --> 0:17:40.920
loaded at the restore and I found it interesting so I created that kind of thing so to an animation

189
0:17:40.920 --> 0:17:51.680
for that and for that we we restart our our firecracker service native memory enabled

190
0:17:51.680 --> 0:18:03.000
native memory tracking and from the guest we do now SSH into into our firecracker guest

191
0:18:03.000 --> 0:18:08.520
where Tomcat is running and just call J command native memory details and and put that into

192
0:18:08.520 --> 0:18:18.840
a file and we do the same thing with the PMAP information this is just a shell script inside

193
0:18:18.840 --> 0:18:27.520
the guest which basically prints all the virtual to physical mappings for all processes into

194
0:18:27.520 --> 0:18:52.200
a file and now we can start the visualizer and it takes the logs of the user for demon

195
0:18:52.200 --> 0:18:59.240
and the native mapping so what you see here is basically the physical memory line of the

196
0:18:59.240 --> 0:19:05.560
guest so it's memory page zero and in the end it's memory page one gigabyte and every

197
0:19:05.560 --> 0:19:11.160
square is for kilobyte page and if you go and it's on the Java process for example you

198
0:19:11.160 --> 0:19:17.320
see the dark these are the pages the RSS of the Java process blue ones are occupied by

199
0:19:17.320 --> 0:19:24.080
the Java process but they are also in the page cache so that's probably a file for example

200
0:19:24.080 --> 0:19:33.520
or something or class share class for example when you when you look at the NMT output we

201
0:19:33.520 --> 0:19:39.040
see that for example for the classes we use about 66 I probably cannot read it it says

202
0:19:39.040 --> 0:19:47.480
virtual is 69 megabytes RSS is 60 megabytes and user for demon loaded about 10 megabytes

203
0:19:47.480 --> 0:19:55.360
of it and here's the animation I promised you so this is how the pages got loaded when

204
0:19:55.360 --> 0:20:01.800
we did the first call request on a resumed image and like the yellow ones are all the

205
0:20:01.800 --> 0:20:09.120
pages which is loaded and orange one no no yes some are orange belong to the to the to

206
0:20:09.120 --> 0:20:13.880
the virtual memory region I have selected here so for example all the orange pages are

207
0:20:13.880 --> 0:20:20.680
the parts of the class space which got loaded for the first request so this is a lot of

208
0:20:20.680 --> 0:20:28.920
space for more investigation would be nice to to compact this more like physically because

209
0:20:28.920 --> 0:20:33.840
you want to prefetch the things which get loaded especially if you download your images

210
0:20:33.840 --> 0:20:39.720
from from network for example and but the problem is that all the physical address space

211
0:20:39.720 --> 0:20:48.080
is continuous like the virtual the physical pages are not and try to look into a possibility

212
0:20:48.080 --> 0:21:00.920
to do that so that that's it thank you

213
0:21:00.920 --> 0:21:23.440
yes yeah

214
0:21:23.440 --> 0:21:35.160
yes I unfortunately there is no time in 20 minutes to show that but you can obviously

215
0:21:35.160 --> 0:21:42.280
use the current crack implementation inside firecracker use J command and instead of crew

216
0:21:42.280 --> 0:21:47.800
there is a back end called the pause handler that's just a small program which instead

217
0:21:47.800 --> 0:21:54.000
of calling crew just dispense the whole process and then you can send in the signal to restore

218
0:21:54.000 --> 0:22:00.560
it so with firecracker you basically checkpoint with the pause engine then do the firecracker

219
0:22:00.560 --> 0:22:06.000
snapshot then restore firecracker and then just do an SSH with the kill signal on the

220
0:22:06.000 --> 0:22:11.720
process and it will will start it's one possibility another one is I wrote the JVMTI agent which

221
0:22:11.720 --> 0:22:18.240
basically does the same thing even without Creole it it's a spence or so as it calls

222
0:22:18.240 --> 0:22:26.120
system GC and then waits on a on a port so just ping it with telnet or whatsoever and

223
0:22:26.120 --> 0:22:35.440
it even calls the the hooks by implementing this custom possibility to with the property

224
0:22:35.440 --> 0:22:42.440
so I say or crack to use my crack implementation to call the hooks so that all works it's in

225
0:22:42.440 --> 0:22:48.560
the in the repository which is I had a resource slide which I didn't show it has all the links

226
0:22:48.560 --> 0:22:51.540
may


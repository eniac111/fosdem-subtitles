1
0:00:00.000 --> 0:00:13.240
A really cool, interesting project, a new language being presented by Fritjof called

2
0:00:13.240 --> 0:00:18.320
Fusion on the OpenJDK.

3
0:00:18.320 --> 0:00:19.320
Final session of the day.

4
0:00:19.320 --> 0:00:23.480
Thank you so much for being with us, some of you all day.

5
0:00:23.480 --> 0:00:26.360
So let's start with Fusion or End.

6
0:00:26.360 --> 0:00:27.360
Okay.

7
0:00:27.360 --> 0:00:28.800
Thank you for staying so long.

8
0:00:28.800 --> 0:00:29.800
Thank you for Gertjans.

9
0:00:29.800 --> 0:00:34.160
He just downloaded the latest version of my slide deck and was a bit shocked that it's

10
0:00:34.160 --> 0:00:37.440
almost 100 slides and only have 20 minutes left.

11
0:00:37.440 --> 0:00:39.680
So let's see how that will work out.

12
0:00:39.680 --> 0:00:48.960
For those who came for the Fusion stickers, please pass them around and take one.

13
0:00:48.960 --> 0:00:51.440
So Fusion, a new language.

14
0:00:51.440 --> 0:00:55.160
It's different.

15
0:00:55.160 --> 0:00:56.840
It's more from a Java perspective.

16
0:00:56.840 --> 0:00:58.920
But there's some overlap.

17
0:00:58.920 --> 0:01:01.920
You will see.

18
0:01:01.920 --> 0:01:07.440
So basically the original idea of Fusion was to have something like a simpler Java, to

19
0:01:07.440 --> 0:01:13.320
simplify Java's features into Fusion features.

20
0:01:13.320 --> 0:01:19.780
A bit on my background, I did work on compilers for about 30 years, a big part of that working

21
0:01:19.780 --> 0:01:25.120
on real-time Java implementations, real-time garbage collection, and so on.

22
0:01:25.120 --> 0:01:33.760
Start with motivating a quote from John Buckes, the inventor of Fortran, who said, who worked

23
0:01:33.760 --> 0:01:37.960
a lot on functional programming but was very disappointed because his work on functional

24
0:01:37.960 --> 0:01:43.840
programming basically failed and would likely always fail because functional programming

25
0:01:43.840 --> 0:01:51.080
is easy to do hard things but incredibly difficult to do simple things.

26
0:01:51.080 --> 0:01:57.120
Fusion has evolved into a functional language and I think, I hope, I find ways to even make

27
0:01:57.120 --> 0:02:00.200
the easy things easy with that.

28
0:02:00.200 --> 0:02:05.520
So the motivation of Fusion is we see that languages like Java get more and more things

29
0:02:05.520 --> 0:02:06.520
packed in there.

30
0:02:06.520 --> 0:02:12.960
We already have classes, methods, interfaces, constructors, trades in other languages, records,

31
0:02:12.960 --> 0:02:14.740
structs, packages, and so on.

32
0:02:14.740 --> 0:02:19.320
In Fusion, all of these map to one single concept, which is the concept of a Fusion

33
0:02:19.320 --> 0:02:20.320
feature.

34
0:02:20.320 --> 0:02:25.080
Then I see today's compilers are much more powerful.

35
0:02:25.080 --> 0:02:31.400
So actually to distinguish whether some feature is used like a method or like a class or like

36
0:02:31.400 --> 0:02:34.440
a constructor is something that the compiler decides then.

37
0:02:34.440 --> 0:02:38.600
It is not needed that the developer decides that.

38
0:02:38.600 --> 0:02:43.960
And we see that more and more systems are becoming safety critical, so we need to ensure

39
0:02:43.960 --> 0:02:45.560
correctness.

40
0:02:45.560 --> 0:02:50.300
And I see that tools have to play a very important role in ensuring this correctness by static

41
0:02:50.300 --> 0:02:53.400
analysis.

42
0:02:53.400 --> 0:02:56.720
Fusion is available on GitHub.

43
0:02:56.720 --> 0:03:02.800
There is a website, Flang.dev, that gives an introduction into the language with lots

44
0:03:02.800 --> 0:03:07.360
of examples, lots of design documents, lots of ideas collections.

45
0:03:07.360 --> 0:03:08.360
Please go through that.

46
0:03:08.360 --> 0:03:11.320
I can't give a language introduction here.

47
0:03:11.320 --> 0:03:16.140
But yeah, you'll find more there.

48
0:03:16.140 --> 0:03:20.520
Fusion is backed by a small company, Tokiwa, with currently four employees.

49
0:03:20.520 --> 0:03:26.040
One of them is sitting here with us in the group, Michael.

50
0:03:26.040 --> 0:03:27.600
Now coming actually to this talk.

51
0:03:27.600 --> 0:03:33.640
So I will start with a very quick introduction into what the Fusion language looks like from

52
0:03:33.640 --> 0:03:35.700
a Java perspective.

53
0:03:35.700 --> 0:03:41.020
Then talk a bit about side effects and their dangers.

54
0:03:41.020 --> 0:03:47.200
Then propose algebraic effects as a solution to manage side effects and give lots of code

55
0:03:47.200 --> 0:03:53.020
examples how you could do these things in Fusion.

56
0:03:53.020 --> 0:03:57.000
So here, a small example in Fusion.

57
0:03:57.000 --> 0:04:03.000
I will give a Java equivalent on the right side and the Fusion code on the left side

58
0:04:03.000 --> 0:04:05.520
that you can quickly understand what it's about.

59
0:04:05.520 --> 0:04:10.360
So I said Fusion maps Java features to Fusion features.

60
0:04:10.360 --> 0:04:15.960
So in Java, if you have a package in Fusion, it's just a Fusion feature, in this case,

61
0:04:15.960 --> 0:04:16.960
demo.

62
0:04:16.960 --> 0:04:23.520
If you have a class in Java, it is also a Fusion feature that is nested in another Fusion

63
0:04:23.520 --> 0:04:27.140
feature.

64
0:04:27.140 --> 0:04:35.440
If you have a method in Java, it is again a Fusion feature that is nested in this case,

65
0:04:35.440 --> 0:04:37.820
in the Hello surrounding feature.

66
0:04:37.820 --> 0:04:42.800
In this case, what makes this feature different is that it's a function that returns a result

67
0:04:42.800 --> 0:04:48.880
which you can see from the result type here, which is unit.

68
0:04:48.880 --> 0:04:54.640
Unit type in Fusion is pretty much what the void type is in Java, but with the exception

69
0:04:54.640 --> 0:04:56.720
that it is a real type.

70
0:04:56.720 --> 0:05:01.200
So you can declare variables of type unit, you can return this as a value.

71
0:05:01.200 --> 0:05:07.920
It is not a very interesting value, but you can have this as a full-fledged type with

72
0:05:07.920 --> 0:05:10.480
only one single value.

73
0:05:10.480 --> 0:05:17.400
In contrast to that, void is also a type in Fusion, but that gets interesting again because

74
0:05:17.400 --> 0:05:19.920
void is a type that has no values.

75
0:05:19.920 --> 0:05:25.320
So basically the result type of something like system exit in Fusion would be void,

76
0:05:25.320 --> 0:05:30.280
which means it will never return.

77
0:05:30.280 --> 0:05:32.600
Then yeah, printing something is easy.

78
0:05:32.600 --> 0:05:39.600
There is a standard library function say that in this case prints Hello World.

79
0:05:39.600 --> 0:05:45.880
Fusion uses a lot of type in ferrancing, so the result type unit here actually can be

80
0:05:45.880 --> 0:05:50.920
inferred because that's also the result type of say, so we don't need to explicitly note

81
0:05:50.920 --> 0:05:52.120
this.

82
0:05:52.120 --> 0:05:57.540
Then, I'll go back here.

83
0:05:57.540 --> 0:06:02.680
Very similar to Java, if you have code like that, you don't have anything to run yet.

84
0:06:02.680 --> 0:06:05.100
In Java you need some main function.

85
0:06:05.100 --> 0:06:11.160
In Fusion there is one feature which is called the universe which surrounds everything and

86
0:06:11.160 --> 0:06:19.200
code put in the universe like here gets executed if you run your application.

87
0:06:19.200 --> 0:06:27.420
You can pass arguments to features and arguments or fields within those features.

88
0:06:27.420 --> 0:06:33.280
These are also features, so they come in the same class, but features that are pre-calculated

89
0:06:33.280 --> 0:06:37.000
that hold a value.

90
0:06:37.000 --> 0:06:43.440
Fusion has inheritance, so you can define a feature Hello2 that inherits from Hello.

91
0:06:43.440 --> 0:06:49.620
You can create an instance of that and call features on that.

92
0:06:49.620 --> 0:06:58.800
So that much to quick introduction into the language syntax and how it works.

93
0:06:58.800 --> 0:07:04.960
There's a number of things that Fusion does not have, mostly because these are things

94
0:07:04.960 --> 0:07:10.620
that are considered to a certain extent harmful in a safety critical environment.

95
0:07:10.620 --> 0:07:12.240
There's no dynamic loading.

96
0:07:12.240 --> 0:07:16.400
There's nothing like macros, no reflection, no point arithmetic.

97
0:07:16.400 --> 0:07:19.080
Many of these things also Java doesn't have.

98
0:07:19.080 --> 0:07:24.880
There is no uncontrolled mutability, so you cannot easily change variables.

99
0:07:24.880 --> 0:07:29.400
There's no direct support for exceptions in the language.

100
0:07:29.400 --> 0:07:32.400
The reason for this is we must know what the code does.

101
0:07:32.400 --> 0:07:38.600
We want to do static analysis of the code to ensure safety and also to a certain extent

102
0:07:38.600 --> 0:07:45.320
to allow better optimizations to increase the performance.

103
0:07:45.320 --> 0:07:49.600
So a bit more on side effects and security.

104
0:07:49.600 --> 0:07:57.840
We learned a lot about security today already in earlier talks, but mostly addressing security

105
0:07:57.840 --> 0:08:04.520
aspects of the software development process and managing of security issues.

106
0:08:04.520 --> 0:08:10.920
I now come from the language side and say what we could do from the programming language

107
0:08:10.920 --> 0:08:16.560
to improve the security.

108
0:08:16.560 --> 0:08:21.640
If you look back at recent securities, we learned about log4j today, but there are similar

109
0:08:21.640 --> 0:08:26.000
things to Spring Shell, even the Rust community has similar issues.

110
0:08:26.000 --> 0:08:32.600
What these things have in common, what these issues have in common is that code, library

111
0:08:32.600 --> 0:08:36.600
code that is used, has unexpected side effects.

112
0:08:36.600 --> 0:08:42.080
So you use a logging library, you don't expect this to go to the internet and make an arbitrary

113
0:08:42.080 --> 0:08:46.080
connection and download code from somewhere else in the world.

114
0:08:46.080 --> 0:08:48.440
So that is the common problem.

115
0:08:48.440 --> 0:08:58.600
So one way that is used by many new upcoming language to control side effects is to use

116
0:08:58.600 --> 0:09:01.480
algebraic effects.

117
0:09:01.480 --> 0:09:06.480
So let me quickly explain to you what algebraic effect is.

118
0:09:06.480 --> 0:09:14.600
An algebraic effect is basically a set of non-functional operations that code might

119
0:09:14.600 --> 0:09:15.600
perform.

120
0:09:15.600 --> 0:09:21.880
So operations that do not have an effect on the actual calculation on the return value

121
0:09:21.880 --> 0:09:24.160
of a function.

122
0:09:24.160 --> 0:09:36.400
Java already has one kind of algebraic effect built into the language, which is throws for

123
0:09:36.400 --> 0:09:39.080
methods that throw exceptions.

124
0:09:39.080 --> 0:09:45.520
But algebraic effects is a more broader concept.

125
0:09:45.520 --> 0:09:49.180
This is just one example that Java supports.

126
0:09:49.180 --> 0:09:56.560
Any operation in an algebraic effect can either resume or abort.

127
0:09:56.560 --> 0:10:03.920
So typically if an algebraic effect is reading some data from some external input, it would

128
0:10:03.920 --> 0:10:11.000
return the read data and resume operation with the value that was read.

129
0:10:11.000 --> 0:10:15.760
While an operation that would be something like throw an exception would perform an abort,

130
0:10:15.760 --> 0:10:24.160
so it will not return but jump back to the corresponding handler.

131
0:10:24.160 --> 0:10:34.160
Algebraic effects can be implemented by different implementations of the effect handlers.

132
0:10:34.160 --> 0:10:41.760
So there is no strict fixed wiring from the operations to a particular implementation.

133
0:10:41.760 --> 0:10:53.280
And very similar to exception handlers, effects may be nested.

134
0:10:53.280 --> 0:10:58.880
There's a kind of contrary view towards algebraic effects.

135
0:10:58.880 --> 0:11:05.880
You can see algebraic effects, what I've presented so far, as the effects that the code might

136
0:11:05.880 --> 0:11:06.880
have.

137
0:11:06.880 --> 0:11:12.280
And you could also see that as capabilities that the code might require.

138
0:11:12.280 --> 0:11:37.600
Martin Odelski is starting a big research project in that area.

139
0:11:37.600 --> 0:11:55.960
What I do is I define my exception, which is our exception implementation, as a feature

140
0:11:55.960 --> 0:12:02.480
inherited from the base library feature simple effect, which is just a basic standard effect.

141
0:12:02.480 --> 0:12:08.960
And our implementation of throw is just abort.

142
0:12:08.960 --> 0:12:14.600
So the simplest way to stop an operation.

143
0:12:14.600 --> 0:12:20.440
And now we define one feature that throws an exception.

144
0:12:20.440 --> 0:12:27.800
And what we do here is we call the operation throw, but we need to have an instance of

145
0:12:27.800 --> 0:12:35.680
the algebraic effect and the syntax we use in fusion for that is we use the type of the

146
0:12:35.680 --> 0:12:39.080
effect, which is my exception, from the environment.

147
0:12:39.080 --> 0:12:46.360
So dot n means taking the innermost instance of that effect in the current environment

148
0:12:46.360 --> 0:12:53.220
and calling that operation on it.

149
0:12:53.220 --> 0:13:00.960
When we do that, we should declare in the signature of the function that this function

150
0:13:00.960 --> 0:13:04.940
requires the effect my exception.

151
0:13:04.940 --> 0:13:08.600
So this is very similar to a throws clause in Java.

152
0:13:08.600 --> 0:13:13.040
If I throw an unchecked exception, I need to declare that.

153
0:13:13.040 --> 0:13:20.340
Here if I require a certain effect, I declare this with the exclamation mark.

154
0:13:20.340 --> 0:13:24.560
Now I add some prints just to show what this code actually does.

155
0:13:24.560 --> 0:13:29.840
And I want to call this function, this feature f now, to call it.

156
0:13:29.840 --> 0:13:33.520
I have to first install an instance of the effect.

157
0:13:33.520 --> 0:13:40.280
So I create an instance of the my exception effect here, call uson is, which is a standard

158
0:13:40.280 --> 0:13:47.360
effect function that takes a lambda expression, which then calls the code that is executed

159
0:13:47.360 --> 0:13:51.520
while this effect is installed.

160
0:13:51.520 --> 0:13:54.240
So adding some more prints that you see what is happening.

161
0:13:54.240 --> 0:14:02.240
If I now run this code here, you see that it prints the exception is installed.

162
0:14:02.240 --> 0:14:05.120
It prints the before throw.

163
0:14:05.120 --> 0:14:09.480
Throw directly jumps, very similar like an exception, out of the use here.

164
0:14:09.480 --> 0:14:11.880
And we continue with the we are done.

165
0:14:11.880 --> 0:14:18.020
So the code after an operation then aborts here will not be executed at all.

166
0:14:18.020 --> 0:14:23.040
Very similar to exceptions.

167
0:14:23.040 --> 0:14:24.480
Now let me talk a bit about mutation.

168
0:14:24.480 --> 0:14:29.960
I told you that fusion doesn't allow direct mutation of fields.

169
0:14:29.960 --> 0:14:36.160
So fields are immutable, which means if we have code like that, we declare a field x,

170
0:14:36.160 --> 0:14:46.160
assign one to three to it, print it, and then assign two times x to another field x.

171
0:14:46.160 --> 0:14:55.800
We see the expected behavior, but if we create a feature that prints this field x and try

172
0:14:55.800 --> 0:15:03.040
to compile this, or try to run this, we actually get an error because the problem is this x

173
0:15:03.040 --> 0:15:09.840
here is not clear which one is referenced here because we have two different variables

174
0:15:09.840 --> 0:15:10.840
here.

175
0:15:10.840 --> 0:15:15.520
There's two axes here, the first and the second, and they are only visible for the

176
0:15:15.520 --> 0:15:18.280
code following that.

177
0:15:18.280 --> 0:15:25.000
So we get an error message that they are two different axes and that, okay, a source code

178
0:15:25.000 --> 0:15:28.980
position here doesn't know which one to choose.

179
0:15:28.980 --> 0:15:39.840
So really every assignment creates a new field and these fields are immutable.

180
0:15:39.840 --> 0:15:46.440
To make them mutable, to get actually the desired effect that we can print x here, we

181
0:15:46.440 --> 0:15:53.600
would have to create a mutable integer value, which is the base library function mute, creates

182
0:15:53.600 --> 0:16:03.200
a mutable instance, assign this to the variable x, and now if we want to update this, we don't

183
0:16:03.200 --> 0:16:09.920
create a new field which would be the colon equals operator, but we have an error operator

184
0:16:09.920 --> 0:16:13.480
which updates the value with a new value.

185
0:16:13.480 --> 0:16:22.560
If we run this now, behaves first like the code before, but this time the show x function

186
0:16:22.560 --> 0:16:33.540
can actually access this single variable because now we have only one field left.

187
0:16:33.540 --> 0:16:39.940
We can now analyze this code for the effects that this code requires and if you do that,

188
0:16:39.940 --> 0:16:45.680
we see there is two effects, there's I O out, this performs output, and there's the mutate

189
0:16:45.680 --> 0:16:54.800
effect because we have an update of a mutable field in our code.

190
0:16:54.800 --> 0:17:03.680
Now not all variables, very few variables actually usually need to be mutable.

191
0:17:03.680 --> 0:17:14.080
Here's an example of a small loop with an index variable counting from 0 to 9 and printing

192
0:17:14.080 --> 0:17:20.920
them, if we analyze this code for effects, we see that this only depends on the I O out

193
0:17:20.920 --> 0:17:28.440
effect, the reason is that every loop iteration creates a new instance of that variable, so

194
0:17:28.440 --> 0:17:36.120
we don't update the I variable here, but we have one independent instance for every iteration

195
0:17:36.120 --> 0:17:38.760
of the loop.

196
0:17:38.760 --> 0:17:47.720
So no variable is mutated, a new instance is created for every iteration.

197
0:17:47.720 --> 0:17:56.120
I want to talk a bit about error handling now and show how a function can produce an

198
0:17:56.120 --> 0:18:00.880
error and show then three different ways of how error handling could be done.

199
0:18:00.880 --> 0:18:12.760
The function I use is just a divide that divides two integers and I call this in a show div

200
0:18:12.760 --> 0:18:18.640
function that calls divide and prints the result and then I call this with three different

201
0:18:18.640 --> 0:18:29.400
value pairs and if I call this, I get, not very surprising, I get an error, there is

202
0:18:29.400 --> 0:18:37.560
a division by 0, the precondition of the division is not fulfilled.

203
0:18:37.560 --> 0:18:45.880
And yeah, so there's the standard error handling in fusion, but it's not very nice because

204
0:18:45.880 --> 0:18:48.760
you have the whole application for failing.

205
0:18:48.760 --> 0:18:58.120
If you want to now somehow treat that error, what we could do is return an outcome which

206
0:18:58.120 --> 0:19:04.120
is similar to Rust's result which is basically a choice type between an error and an actually

207
0:19:04.120 --> 0:19:12.560
32 bit integer and check the case if b is 0, we return an error, otherwise we return

208
0:19:12.560 --> 0:19:17.880
the result of the division and if we run this now, the application runs through, it doesn't

209
0:19:17.880 --> 0:19:27.120
terminate and in the middle case, we print the outcome which is an error here.

210
0:19:27.120 --> 0:19:37.240
But if we want to now actually, after calling the divide, want to know was this divide successful

211
0:19:37.240 --> 0:19:44.200
or not, we would need to check the cases, so we need to distinguish whether we actually

212
0:19:44.200 --> 0:19:53.080
got a value or we got an error, we can do this with a match over the different choices.

213
0:19:53.080 --> 0:20:01.520
Now an alternative would be to use the standard library try effect which is kind of the default

214
0:20:01.520 --> 0:20:11.360
exception based on algebraic effects in fusion and to do that, instead of returning an outcome,

215
0:20:11.360 --> 0:20:18.760
this would be just a function returning a 32 bit integer but requiring the try effect

216
0:20:18.760 --> 0:20:29.200
to be installed and now instead of causing an error, we would raise the error of the

217
0:20:29.200 --> 0:20:34.320
try instance in the current environment, so we don't need the else anymore because the

218
0:20:34.320 --> 0:20:41.920
raise would abort and would return immediately so we could just continue with the code there.

219
0:20:41.920 --> 0:20:51.020
And when we call the divide now, we have to call it with an instance of the try effect

220
0:20:51.020 --> 0:20:58.080
being installed, so just like before, this can be done through a base library function,

221
0:20:58.080 --> 0:21:09.620
try that installs an instance and calls the lambda which is provided as a parameter and

222
0:21:09.620 --> 0:21:17.800
this can then be matched very similar to the outcome but the big difference is that now

223
0:21:17.800 --> 0:21:21.840
the code in between, in between the position where the error is and where we have this

224
0:21:21.840 --> 0:21:29.760
call does not need to pass along these outcomes all the way, I'll come to an end very soon,

225
0:21:29.760 --> 0:21:41.040
but we can directly work with the I32s and the try would jump out directly, so we would

226
0:21:41.040 --> 0:21:43.280
see this outcome.

227
0:21:43.280 --> 0:21:52.520
So the penultimate slide, the current slide, the status of fusion is still very much in

228
0:21:52.520 --> 0:21:57.240
development, the language is getting a bit more stable recently but there's still a lot

229
0:21:57.240 --> 0:22:05.000
of work in the base library, the current implementation has two back ends, one running on a JVM and

230
0:22:05.000 --> 0:22:12.800
there's also a C code back end and there's basic analysis tools available as shown you

231
0:22:12.800 --> 0:22:17.400
the effects analysis.

232
0:22:17.400 --> 0:22:25.520
Java maps actually very well to fusion, there's a tool that allows calling all of Java APIs,

233
0:22:25.520 --> 0:22:31.560
creating Java APIs from a fusion APIs from a Java module that we can call into Java but

234
0:22:31.560 --> 0:22:36.960
doesn't work yet well is calling back from Java into fusion but there's at least in one

235
0:22:36.960 --> 0:22:40.320
way is one to one mapping.

236
0:22:40.320 --> 0:22:49.560
We have effects to encapsulate non-functional aspects and I ask everyone please have a look,

237
0:22:49.560 --> 0:22:53.960
we're happy for any feedback.

238
0:22:53.960 --> 0:23:14.840
Thank you for staying so long, I think time is over.

239
0:23:14.840 --> 0:23:24.280
The match is still needed because this tri here installs the effect and an effect in

240
0:23:24.280 --> 0:23:32.280
the case of an abort has to provide some way to join the value that is returned in the

241
0:23:32.280 --> 0:23:38.000
non-abort case with the value that is returned in the abort case and for the tri effect this

242
0:23:38.000 --> 0:23:44.680
join is just made by producing a value of type outcome which is the choice between error

243
0:23:44.680 --> 0:23:50.640
and the value but there could be other effects that would just replace it by a default value

244
0:23:50.640 --> 0:23:52.440
in that case.

245
0:23:52.440 --> 0:23:56.200
So it depends on the effect but here it's definitely still needed.

246
0:23:56.200 --> 0:23:58.200
Do we have time?

247
0:23:58.200 --> 0:24:08.560
Yes, I saw that at some point you showed that there was an IELP effect and I also saw a

248
0:24:08.560 --> 0:24:14.560
lot of code that uses the save function which I presume uses that effect but I didn't see

249
0:24:14.560 --> 0:24:15.560
the effect using any of the examples.

250
0:24:15.560 --> 0:24:19.560
Okay, yes, you took very good care, thank you.

251
0:24:19.560 --> 0:24:24.640
It is not decided yet where the compiler should be strict and require this annotation.

252
0:24:24.640 --> 0:24:32.640
The current idea is that for basic code we should not require this annotation but for

253
0:24:32.640 --> 0:24:38.040
a public library function we definitely want to know what are the effects.

254
0:24:38.040 --> 0:24:44.840
So I don't want to enforce this for everything or for all the intermediate values and there's

255
0:24:44.840 --> 0:24:51.160
also some cases where only a static analysis of a whole application can actually determine

256
0:24:51.160 --> 0:24:53.000
what the effects are.

257
0:24:53.000 --> 0:24:58.760
So static analysis plays a very important role there but I don't want to enforce too

258
0:24:58.760 --> 0:25:03.640
much typing basically for these effects.

259
0:25:03.640 --> 0:25:10.440
Another one is that John for example has this distinction between runtime exceptions and

260
0:25:10.440 --> 0:25:16.720
checked exceptions and there is this kind of exceptions that can have been pretty much

261
0:25:16.720 --> 0:25:22.440
any code like out of memory exception or stackable code and I wonder how do you handle this kind

262
0:25:22.440 --> 0:25:23.440
of thing.

263
0:25:23.440 --> 0:25:28.440
Oops, they are shutting us down here.

264
0:25:28.440 --> 0:25:34.040
Okay, very good.

265
0:25:34.040 --> 0:25:39.520
It's not nothing of that is done yet but I think I would like to get one step further

266
0:25:39.520 --> 0:25:46.880
and make it user configurable what are the effects that you want to be have consider

267
0:25:46.880 --> 0:25:50.080
acceptable in your environment.

268
0:25:50.080 --> 0:25:55.240
Like you want to have maybe add some debugging print or some logging in somewhere nested

269
0:25:55.240 --> 0:26:03.280
in some internal function and that shouldn't have force you to add effects all over through

270
0:26:03.280 --> 0:26:04.280
the code.

271
0:26:04.280 --> 0:26:08.640
So we must have some set some way to define for the debugging build.

272
0:26:08.640 --> 0:26:15.200
These are the effects that are in there and please don't complain about that.

273
0:26:15.200 --> 0:26:19.120
But we have to still see how we actually will do that.

274
0:26:19.120 --> 0:26:21.200
Thank you so much.

275
0:26:21.200 --> 0:26:22.200
Thank you for saying so long.

276
0:26:22.200 --> 0:26:23.200
Thank you very much for attending the Fujian Room.

277
0:26:23.200 --> 0:26:24.200
This will be a room next year again.

278
0:26:24.200 --> 0:26:27.200
Hopefully we will have two days and we will have more time for sessions and hopefully

279
0:26:27.200 --> 0:26:35.200
many of you will submit proposals and you will all be very welcome to present in the Fujian

280
0:26:35.200 --> 0:26:36.200
Room next year.

281
0:26:36.200 --> 0:26:37.200
Thank you very much for coming.

282
0:26:37.200 --> 0:26:52.160
Thank you.


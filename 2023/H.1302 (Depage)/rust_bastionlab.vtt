WEBVTT

00:00.000 --> 00:11.440
Hello everyone, I'm Mehdi Bessa, CTO of Metrally Security and today I'm going to present to

00:11.440 --> 00:19.280
you Bastion Lab a secure data privacy friendly framework written in Rust.

00:19.280 --> 00:20.680
Is it working?

00:20.680 --> 00:21.680
Yeah.

00:21.680 --> 00:24.480
It's better this way.

00:24.480 --> 00:28.720
So when making this project we came across one big problem.

00:28.720 --> 00:33.280
Let's say for example you are one hospital and you want to share critical data such as

00:33.280 --> 00:38.960
ECG data, earth rate, respiration rate and so on, for example a startup that is working

00:38.960 --> 00:46.280
on, that has deep learning algorithm to detect anomaly in those data.

00:46.280 --> 00:52.120
The most usual way today is to use a Jupyter notebook that you can isolate from network

00:52.120 --> 00:58.520
and all but unfortunately this is not the appropriate way because Jupyter notebooks

00:58.520 --> 01:05.760
allow arbitrary code execution and with some way you can extract the data without even

01:05.760 --> 01:12.800
the data owner seeing that you did that, which is a big problem mostly with sensitive data.

01:12.800 --> 01:16.800
Earth solution, try to fix this issue.

01:16.800 --> 01:20.020
For example you will not have direct access to data.

01:20.020 --> 01:23.680
You will only have limited operation allowed.

01:23.680 --> 01:29.480
So really what you need to, for example, aggregate the data, only extract what you need, only

01:29.480 --> 01:37.280
do for example some average and calculation on a microsite of data but most importantly

01:37.280 --> 01:40.600
you can only have sanitize and authorize output allowed.

01:40.600 --> 01:48.720
Meaning for example if I don't want the startup or any other actor that work on my dataset

01:48.720 --> 01:54.880
to see the name of my patients or some critical data such as if they have hypertension or

01:54.880 --> 02:02.000
so on, I can just set up in the policy and they will not be able to access that unless

02:02.000 --> 02:08.320
I explicitly authorize it and yet nothing's forced me to accept it.

02:08.320 --> 02:12.360
I'm going to present you very quickly an API.

02:12.360 --> 02:13.840
Don't get mad with me.

02:13.840 --> 02:18.800
The API is in Python because the API is in Python where the server ingress.

02:18.800 --> 02:22.320
So don't get mad yet.

02:22.320 --> 02:23.880
Okay.

02:23.880 --> 02:28.960
Doesn't look as bad as I thought.

02:28.960 --> 02:30.960
Actually it does.

02:30.960 --> 02:34.040
Sorry about that.

02:34.040 --> 02:36.040
Does that work?

02:36.040 --> 02:43.040
No, I think the resolution is not there.

02:43.040 --> 02:44.040
That's okay.

02:44.040 --> 02:45.040
That's okay.

02:45.040 --> 02:49.520
I will go on with just explanation.

02:49.520 --> 02:52.800
That's fine.

02:52.800 --> 02:56.040
No, that's fine.

02:56.040 --> 02:57.040
Ah, thanks.

02:57.040 --> 02:58.040
Sorry about that.

02:58.040 --> 02:59.040
So no Pythons.

02:59.040 --> 03:03.400
They're good for doing away.

03:03.400 --> 03:06.720
But thanks.

03:06.720 --> 03:11.920
All experience with Rust in Berlin Bastion Lab.

03:11.920 --> 03:18.880
We had several reasons to make a project which is the biggest reason memory safety.

03:18.880 --> 03:23.160
I think you know all very well what I'm talking about here.

03:23.160 --> 03:31.360
The very parallel way Rust has to end link multi-trading.

03:31.360 --> 03:37.560
No mutable static unless you use lazy static and not any other technique.

03:37.560 --> 03:41.280
That was a pain to bypass but we did manage.

03:41.280 --> 03:47.480
And the medium-based size thanks to what is being a low-level programming language.

03:47.480 --> 03:52.960
Ideal for trusted execution environments as we are working with such as for example AMD,

03:52.960 --> 03:56.000
ACV, IntelliGX and so on.

03:56.000 --> 04:01.240
The less code base, the less big the code base, the easier it is to audit.

04:01.240 --> 04:02.680
Now for the performance reason.

04:02.680 --> 04:08.520
As I said Rust is a low-level programming language.

04:08.520 --> 04:11.880
Very close to seen term of execution speed.

04:11.880 --> 04:18.920
But the biggest reason is polars because our API relies on it.

04:18.920 --> 04:26.240
Except that we implemented a network stack to never allow anyone to access to the data

04:26.240 --> 04:27.240
directly.

04:27.240 --> 04:33.560
Polar as well offer one of the best performance in working with data sets and so on.

04:33.560 --> 04:35.400
Join, aggregation and so on.

04:35.400 --> 04:36.840
It was the easiest way to do it.

04:36.840 --> 04:38.200
Plus it's in for Rust.

04:38.200 --> 04:40.680
There is no bindings and so on.

04:40.680 --> 04:42.560
Thanks for that.

04:42.560 --> 04:46.480
So you can see here the performance, the benchmark we made.

04:46.480 --> 04:51.920
We use Panda as a reference that is as you can see here more than terrible compared to

04:51.920 --> 04:53.280
polars.

04:53.280 --> 04:56.080
We compare to polars lazy.

04:56.080 --> 04:58.520
All solution that is lazy by default.

04:58.520 --> 05:04.280
Lazy means I'm only executing a query when I strictly need it.

05:04.280 --> 05:08.320
We do it all the time.

05:08.320 --> 05:09.320
That makes a big difference.

05:09.320 --> 05:14.120
Plus I'm working on only the data that I need and not the world data set if I don't need

05:14.120 --> 05:15.600
to.

05:15.600 --> 05:17.560
That's another benchmark on a bigger set.

05:17.560 --> 05:24.280
You can see that Panda is still off the roof and never compared to the other one.

05:24.280 --> 05:29.720
Now though, how did we do that?

05:29.720 --> 05:33.160
We thought to use the best create that are available for doing that.

05:33.160 --> 05:42.760
We wanted to use Tonic and Tokyo because Tonic offered GRPC which will allow us to make

05:42.760 --> 05:46.440
a cloud that is not in Python if we need to.

05:46.440 --> 05:52.000
Thanks to the protobuf that is implemented in many languages and the GRPC protocol as

05:52.000 --> 05:53.000
well.

05:53.000 --> 05:59.680
Polar, as I mentioned it already, rings because in addition of setting up a policy, for example,

05:59.680 --> 06:04.840
if I don't want people to access to a specific two names or whatever, there's that.

06:04.840 --> 06:11.480
But rings, we always ring implementation directly to verify and I need to provide my public key

06:11.480 --> 06:14.440
to access to the server.

06:14.440 --> 06:21.120
We use ring implementation to do that directly and to check if the key match and if the key

06:21.120 --> 06:22.120
is real.

06:22.120 --> 06:27.200
And Tokyo because we are using like EVI like MUD, the multi-threading, the un-synchronous

06:27.200 --> 06:29.480
move and so on.

06:29.480 --> 06:38.480
For example, when you need to accept a dataset, we spawn a new thread that will send a request

06:38.480 --> 06:45.240
to the data owner saying do you want to accept this request that is about to leak sensitive

06:45.240 --> 06:46.240
data?

06:46.240 --> 06:51.800
It's not written this way but it is this yes and can come with now.

06:51.800 --> 06:55.800
Instead of blocking the whole process, I will have a thread that will time out after a while

06:55.800 --> 07:01.400
if I don't access it means I reject it but I can say yes or no and other requests such

07:01.400 --> 07:06.960
as a simple one or not sensitive one will be accepted.

07:06.960 --> 07:12.480
Plus the NSEC move plus Tony, that makes very well together and allow many connections as

07:12.480 --> 07:13.480
we want.

07:13.480 --> 07:17.320
This is the best we could dream of.

07:17.320 --> 07:21.120
As I was about to show, that was supposed to be in the Google collab but it's an easier

07:21.120 --> 07:29.120
representation here, we have for simplistic reason, sorry Python code but only a few lines,

07:29.120 --> 07:35.680
the data owner part that uploads the dataset, set up a policy and for example I can reject

07:35.680 --> 07:41.320
my dataset but I can allow sensitive requests but I want it to log it.

07:41.320 --> 07:42.800
Oh, shit.

07:42.800 --> 07:43.800
Thanks everyone.

07:43.800 --> 07:51.400
Thank you.

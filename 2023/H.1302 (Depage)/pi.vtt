WEBVTT

00:00.000 --> 00:07.300
Thanks for joining during your lunch.

00:07.300 --> 00:12.980
I have some pie for you, some raspberry pies with a little bit of Java coffee.

00:12.980 --> 00:14.140
So let's jump in.

00:14.140 --> 00:18.820
Normally there was a session planned now about Kotlin, so I have a little piece of Kotlin

00:18.820 --> 00:20.980
in this presentation.

00:20.980 --> 00:24.360
I'm not a Kotlin developer myself.

00:24.360 --> 00:27.060
What is the raspberry pie if you don't know it?

00:27.060 --> 00:29.420
This amazing small board.

00:29.420 --> 00:30.900
It's really small.

00:30.900 --> 00:33.300
This is the raspberry pie zero.

00:33.300 --> 00:35.780
And yes, indeed, that's 15 euros.

00:35.780 --> 00:41.420
This is a full PC, a full Linux PC where you can run on Java, Java, VIX, anything that

00:41.420 --> 00:46.100
you do as a Java developer, you can also do on this small device.

00:46.100 --> 00:50.860
Of course, it's not so powerful, but it still allows you to do a lot of experiments.

00:50.860 --> 00:55.340
And what is special about raspberry pie is those pins where you can connect electronic

00:55.340 --> 01:00.380
components and that's what I'm going to talk to you about.

01:00.380 --> 01:02.100
I see I have some missing images.

01:02.100 --> 01:03.400
That's a good start.

01:03.400 --> 01:08.260
There was also raspberry pie picco launched a few years ago.

01:08.260 --> 01:10.100
That's actually a microcontroller.

01:10.100 --> 01:15.860
So if you see a raspberry pie picco, if you ever played with Arduino, it's more comparable

01:15.860 --> 01:20.100
to that, so we cannot run Java on that one.

01:20.100 --> 01:21.100
So what is raspberry pie?

01:21.100 --> 01:22.100
It's a single board computer.

01:22.100 --> 01:26.180
You can run a lot of different Linux distributions on them.

01:26.180 --> 01:30.820
I mostly start with the raspberry pie operating system, which is the official one.

01:30.820 --> 01:36.860
But you also have gaming operating systems, a NAS system, any kind of thing that you can

01:36.860 --> 01:38.660
think of does exist.

01:38.660 --> 01:43.900
There is a website, awesome raspberry pie, where you will find all these.

01:43.900 --> 01:48.860
There are many versions which are also 32 or 64 bits, which can be interesting if you

01:48.860 --> 01:51.420
want to do some specific experiments.

01:51.420 --> 01:55.620
And they make 400,000 raspberry pies a month.

01:55.620 --> 01:58.260
And still you cannot find them.

01:58.260 --> 02:02.100
Because of the ship shortage, this 400,000 is not enough.

02:02.100 --> 02:05.300
They do reserve a lot of them for industrial use.

02:05.300 --> 02:10.020
So as a consumer, a maker, you have to find them.

02:10.020 --> 02:16.780
rpilocator.com is a website which polls a lot of websites who sell raspberry pies and

02:16.780 --> 02:17.780
they list them.

02:17.780 --> 02:24.220
If you follow them on Twitter or on Mastodon, you will get an alert if a certain type becomes

02:24.220 --> 02:27.060
available.

02:27.060 --> 02:32.540
I have been speaking at FOSDAM virtually, thanks to Fujie in the last two years.

02:32.540 --> 02:38.300
And in 2001, I spoke about how I got into Java on raspberry pie.

02:38.300 --> 02:40.300
I started doing some personal projects.

02:40.300 --> 02:43.940
I wanted to have a touch screen control for the drum boot of my son.

02:43.940 --> 02:48.100
I wanted to use Java VIX and I was missing a lot of documentation.

02:48.100 --> 02:50.100
So I wrote about that.

02:50.100 --> 02:53.780
And I end up even before building that thing for my son.

02:53.780 --> 02:55.180
I have written a book.

02:55.180 --> 02:59.960
And then afterwards, finally, he got his controller.

02:59.960 --> 03:03.780
In the book I explained and also in the FOSDAM talk how you get started with this, how you

03:03.780 --> 03:04.780
can use Py4j.

03:04.780 --> 03:06.660
Py4j is a library.

03:06.660 --> 03:10.740
More about that later to help you as a Java developer.

03:10.740 --> 03:18.340
And I also gave some examples of running Java VIX on raspberry pie.

03:18.340 --> 03:25.500
So 2001 was my explanation how I got started with Java and raspberry pie and has been my

03:25.500 --> 03:28.260
niche pet project ever since.

03:28.260 --> 03:33.500
And last year I was here again because there were new raspberry pie boards launched and

03:33.500 --> 03:38.100
we had to do some changes in Py4j because they were not compatible anymore.

03:38.100 --> 03:48.180
So in 2021 we launched version 2 of Py4j which is more compatible with the newer ports which

03:48.180 --> 03:53.940
uses Java 11 under the hood and allows you to do a lot of fun stuff and I give you some

03:53.940 --> 03:54.940
examples.

03:54.940 --> 03:58.500
I also gave an example of a crow pie OS.

03:58.500 --> 04:04.220
Crow pie OS is an operating system based on the official raspberry pie operating system.

04:04.220 --> 04:08.040
But FHNW is a university in Switzerland.

04:08.040 --> 04:13.660
They have a lot of courses where they use both Java, raspberry pie, electronics, all

04:13.660 --> 04:18.580
kinds of stuff and they contribute a lot back to the Py4j project.

04:18.580 --> 04:22.860
And they made an operating system with some additional tools for Java developers like

04:22.860 --> 04:26.860
the latest Java VIX is there, the latest Java is there.

04:26.860 --> 04:31.900
On the background screen of your desktop you see the IP number of your computer which is

04:31.900 --> 04:36.140
very handy if you have a lot of raspberry pies and you never find back the connection

04:36.140 --> 04:38.980
to them.

04:38.980 --> 04:40.820
Also some experiments with FHGL.

04:40.820 --> 04:43.980
Who has used FHGL or know what it is?

04:43.980 --> 04:44.980
No.

04:44.980 --> 04:45.980
Definitely take a look at it.

04:45.980 --> 04:46.980
It's by Almas.

04:46.980 --> 04:53.500
He's a professor at an English university and he created an amazing library for creating

04:53.500 --> 04:54.500
games.

04:54.500 --> 04:59.460
If you ever want to do some fun stuff and create a game with Java and Java VIX, FHGL

04:59.460 --> 05:05.140
is the project and you will also find a lot of info about that on FHGL.

05:05.140 --> 05:07.500
And I also had some demos with HiveMQ.

05:07.500 --> 05:12.620
That's also something that's very easy to do is messaging from raspberry pie towards

05:12.620 --> 05:13.620
a cloud provider.

05:13.620 --> 05:20.420
HiveMQ is a messaging platform but they have a free cloud solution for up to 100 devices.

05:20.420 --> 05:23.780
Every maker with more than 100 devices can now raise his hands.

05:23.780 --> 05:24.780
Nope.

05:24.780 --> 05:25.780
Okay.

05:25.780 --> 05:28.460
That's the place to be where you can find those things.

05:28.460 --> 05:29.460
Now Py4j.

05:29.460 --> 05:32.060
Py4j is a Java library.

05:32.060 --> 05:33.460
That means it's a dependency.

05:33.460 --> 05:36.020
You add it to your Java project.

05:36.020 --> 05:40.260
Inside the library is native code.

05:40.260 --> 05:46.140
Native code that will call the different protocols that you can use to interact with the pins

05:46.140 --> 05:48.220
on your raspberry pie.

05:48.220 --> 05:52.020
So the simplest thing, you connect the let and you can make the let blink but you can

05:52.020 --> 05:58.980
go a lot further, read temperatures, control, let displays, all that kind of stuff.

05:58.980 --> 06:06.980
Now with the launch of Py4j version 2, we also launched a new website.

06:06.980 --> 06:08.860
And actually that's my role in the project.

06:08.860 --> 06:14.500
I didn't contribute a lot to the sources of the Py4j library but I focused on the documentation

06:14.500 --> 06:16.140
part.

06:16.140 --> 06:21.300
Just like Fujai wants to be the source of truth for all Java developers to find information

06:21.300 --> 06:27.180
about Java, Py4j wants to be that for the Raspberry Pi where you have information about

06:27.180 --> 06:30.300
how you run Java Avix on the Raspberry Pi.

06:30.300 --> 06:38.140
One of the nice use cases of Java Avix is a kiosk mode so that a user interacting with

06:38.140 --> 06:42.640
your Raspberry Pi through a touch screen cannot do anything else than your application.

06:42.640 --> 06:51.820
They cannot go to reboot or format in Linux terms.

06:51.820 --> 06:55.540
Now let's look back at what happened last year.

06:55.540 --> 06:58.420
For me personally my biggest change is I joined Azul.

06:58.420 --> 07:02.500
Azul is one of the distributors of OpenJDK.

07:02.500 --> 07:08.700
I'm part of the documentation team and because of that I can also focus a bit on writing

07:08.700 --> 07:12.540
documentation for Fujai and articles and other stuff like that.

07:12.540 --> 07:20.900
But it was meant to be because Azul has a lot of distributions of it's called Zulu.

07:20.900 --> 07:29.700
That's the core product of Azul is a distribution of OpenJDK like you have so many.

07:29.700 --> 07:35.980
What is the main advantage of Azul Zulu is that it is available for a lot of platforms.

07:35.980 --> 07:38.540
More platforms than most other distributors.

07:38.540 --> 07:47.060
Oh, yeah, all the distributors.

07:47.060 --> 07:50.100
That's the nice thing that I found out after joining Azul.

07:50.100 --> 07:56.100
They are even the only one which supports all the oldest Raspberry Pi models.

07:56.100 --> 07:59.580
Now what I also found out is who knows SD-Kaman.

07:59.580 --> 08:00.580
Yes?

08:00.580 --> 08:03.100
Okay, look it up.

08:03.100 --> 08:07.860
SD-Kaman allows you to switch between Java versions with one command.

08:07.860 --> 08:10.300
It didn't run on the Raspberry Pi.

08:10.300 --> 08:13.140
And of course that hurt.

08:13.140 --> 08:19.540
So Fujai, the website for friends of OpenJDK, behind the scenes there is the disco API.

08:19.540 --> 08:25.400
The disco API is an API to search for Java distributions.

08:25.400 --> 08:29.100
Now the same disco API is used by SD-Kaman.

08:29.100 --> 08:36.020
And SD-Kaman is a tool for Linux and Mac where you can do it's a one line installation script.

08:36.020 --> 08:41.980
Then you do SD-Kaman list Java and you will get a list of all the available Java distributions

08:41.980 --> 08:44.460
for your platform.

08:44.460 --> 08:50.460
Now because of the disco API and small changes done by Gerrit Grunwald, who is also an Azul

08:50.460 --> 08:56.300
colleague who is maintaining that, and by changes in SD-Kaman and I did very few very

08:56.300 --> 08:59.780
small commits to that, we were able to get to this.

08:59.780 --> 09:07.140
So if you have this Raspberry Pi Zero from the first generation which has an ARMv6 processor,

09:07.140 --> 09:12.220
is a different architecture than the newer ones, you will get four versions of Java that

09:12.220 --> 09:13.540
you can install.

09:13.540 --> 09:23.420
Unfortunately it's only Zulu, as Azul I say, it's only Zulu who will work.

09:23.420 --> 09:29.380
There is still a problem with the architecture of the processor that has some issues there.

09:29.380 --> 09:36.500
But so you can install with SD-Kaman Java on any type of Raspberry Pi because, I have

09:36.500 --> 09:44.180
something else here, if you run the same command on a newer Raspberry Pi with a 64 bit operating

09:44.180 --> 09:52.780
system, Raspberry Pi always has that now since recently officially, 45 extra lines.

09:52.780 --> 09:59.100
So there are more than 50 Java distributions and this screenshot I think it dates from,

09:59.100 --> 10:01.980
it's from a Fuji article in last February.

10:01.980 --> 10:09.580
So Java 19 is not on this list, so there are now more than 60, I guess, Java versions that

10:09.580 --> 10:15.860
you can install, distributions that you can install on a Raspberry Pi.

10:15.860 --> 10:19.980
Another article I wrote for Fuji is G-Bang.

10:19.980 --> 10:20.980
Who used G-Bang?

10:20.980 --> 10:21.980
No.

10:21.980 --> 10:27.500
Since Java 11 I think you can run Java files without compiling them.

10:27.500 --> 10:31.900
If you have a single Java file which does some simple things, you can just run it, you

10:31.900 --> 10:33.940
don't need to compile it.

10:33.940 --> 10:41.620
What SD-Kaman adds, sorry, what G-Bang adds, is you can define your dependencies in that

10:41.620 --> 10:43.300
one single file.

10:43.300 --> 10:49.500
So if you install G-Bang on a Raspberry Pi or on any computer where you didn't run Java

10:49.500 --> 10:53.420
yet, it will install Java for you.

10:53.420 --> 11:00.900
Then you can just create a text file and then with this Gradle style definition of dependencies

11:00.900 --> 11:07.880
inside your Java file, G-Bang has everything it needs to run your codes.

11:07.880 --> 11:13.580
So this example is based on the minimal code example that we have on the Pi 4J website,

11:13.580 --> 11:15.820
is just to control a lit.

11:15.820 --> 11:23.020
Let me see if the video works here.

11:23.020 --> 11:27.700
If it doesn't show you, I will just forward you to fuj.io where you can find the full

11:27.700 --> 11:32.540
video.

11:32.540 --> 11:34.820
We didn't try this before.

11:34.820 --> 11:39.700
These sessions here will go very fast.

11:39.700 --> 11:42.620
Another fun project I love is Vadin.

11:42.620 --> 11:48.860
Vadin allows you to build user interfaces with pure Java.

11:48.860 --> 11:58.100
If you have played with Java fix, it's a bit the same feeling, but then for web applications.

11:58.100 --> 12:02.380
So you have button elements and table views and all that kind of stuff.

12:02.380 --> 12:07.740
I also wanted to create an example using Vadin on the Raspberry Pi and that's exactly what

12:07.740 --> 12:10.500
I have done and this video will play.

12:10.500 --> 12:17.740
So this is the web interface without any modification that you get from a default Vadin project.

12:17.740 --> 12:24.300
There you have custom set up with just a lit and a small button and then you have the Vadin

12:24.300 --> 12:25.520
application running.

12:25.520 --> 12:32.220
So this is a spring application, combination of spring Vadin, Pi 4J and that's running

12:32.220 --> 12:33.260
on the Raspberry Pi.

12:33.260 --> 12:37.340
So it's running on the Raspberry Pi you see also on the top.

12:37.340 --> 12:40.060
I'm not going to show you any rocket science experiments.

12:40.060 --> 12:41.580
It's just pure basics.

12:41.580 --> 12:46.260
It's blinking a lit, the hello world of programming electronics.

12:46.260 --> 12:51.500
And you see after the button has been touched that the info changes there.

12:51.500 --> 12:55.380
So that's all what is documented.

12:55.380 --> 12:57.980
Five minutes.

12:57.980 --> 13:00.260
I promised you some Kotlin.

13:00.260 --> 13:05.540
I'm not a Kotlin developer myself, but Pi 4J, the project, it's a community project.

13:05.540 --> 13:09.780
It's an open source project so we welcome anyone who wants to contribute.

13:09.780 --> 13:16.420
And Mohammed Hashim who once as a student I think developed a Kotlin implementation

13:16.420 --> 13:20.340
of the first version of Pi 4J said I can do that again.

13:20.340 --> 13:23.780
So he created a Kotlin implementation on top of Pi 4J.

13:23.780 --> 13:28.180
So if you are a Kotlin developer and want to do Kotlin on the Raspberry Pi, you can

13:28.180 --> 13:32.420
do so and even control electronics.

13:32.420 --> 13:33.880
I'm not a Kotlin developer.

13:33.880 --> 13:37.300
These are just some example codes that I took from his examples.

13:37.300 --> 13:41.580
Now what the fun thing is that he also went back to the documentation part of the Pi

13:41.580 --> 13:47.340
4J website and added four pages or five pages with documentation about how to do this with

13:47.340 --> 13:48.340
Kotlin.

13:48.340 --> 13:54.380
So if you're interested in Kotlin on the Raspberry Pi, go to pi4j.com.

13:54.380 --> 14:01.300
Now a few things I can tell you about this year and what we're going to do.

14:01.300 --> 14:04.420
Just as an experiment again, I wanted to create a library.

14:04.420 --> 14:10.380
I got very worried about how I have to maintain libraries and the legal part.

14:10.380 --> 14:12.220
So I don't know if this was a good idea.

14:12.220 --> 14:18.780
I wanted to create a library containing a database of all the Raspberry Pis, the history,

14:18.780 --> 14:21.820
and what pins they have and what you can do with these pins.

14:21.820 --> 14:25.100
We needed for another project so I wanted to create this library.

14:25.100 --> 14:32.100
Now on top of this library we actually created API.py4j.com.

14:32.100 --> 14:33.540
And again I used Vaden.

14:33.540 --> 14:34.540
I know it.

14:34.540 --> 14:35.540
I've used it before.

14:35.540 --> 14:39.260
So this application, API.py4j.com, it's public.

14:39.260 --> 14:45.820
It's using a library containing a database with Raspberry Pi information and it's visualizing

14:45.820 --> 14:46.820
it here.

14:46.820 --> 14:51.620
And because it's a Spring application we can of course have Swagger and all that kind of

14:51.620 --> 14:52.620
stuff.

14:52.620 --> 14:56.580
But the fun thing is of course it runs on the Raspberry Pi.

14:56.580 --> 15:01.180
It runs on the Raspberry Pi that we got from this company, finaltech.com, in check.

15:01.180 --> 15:07.820
So somewhere in Prague in a data center, Raspberry Pi is hosting this pi4j.com.

15:07.820 --> 15:11.660
I don't know how performant this is so if you all visit it at the same time we will

15:11.660 --> 15:15.060
know it.

15:15.060 --> 15:19.980
And then something unexpected happened a few weeks ago.

15:19.980 --> 15:25.080
I was asked by Daniel Frey how about Spring Boot and pi4j.

15:25.080 --> 15:26.460
Does that exist?

15:26.460 --> 15:27.460
No.

15:27.460 --> 15:29.660
But now it does because he created it.

15:29.660 --> 15:37.380
So Daniel Frey and Ashaun Carter are two guys from the Spring team and they just developed

15:37.380 --> 15:38.380
this.

15:38.380 --> 15:40.740
And I joined them in a Twitch.

15:40.740 --> 15:44.580
It was a bit chaotic but yeah it was a Twitch.

15:44.580 --> 15:47.020
And we didn't finish it yet but we're working on it.

15:47.020 --> 15:55.140
So you'll have a Spring Boot starter that will help you to detect which Raspberry Pi

15:55.140 --> 15:58.140
you are running it on, how it should be configured.

15:58.140 --> 15:59.780
It will create the context for you.

15:59.780 --> 16:05.420
The context is that it loads all the plugins to control the GPIOs and that you will be

16:05.420 --> 16:10.340
able to also, how is it called?

16:10.340 --> 16:15.940
The info controller, the Prometheus list of all the data that you get from Spring and

16:15.940 --> 16:16.940
what?

16:16.940 --> 16:17.940
Grafana?

16:17.940 --> 16:19.340
Yeah, that you can use it for Grafana.

16:19.340 --> 16:21.660
So you will have all this data available.

16:21.660 --> 16:27.940
What IOPN is toggled, what is active, what is the signal that is arriving at this pin.

16:27.940 --> 16:30.580
So that kind of info, it's not finished.

16:30.580 --> 16:36.500
We're working on it so maybe if I'm back here next year I can show you.

16:36.500 --> 16:38.440
So what is next?

16:38.440 --> 16:39.660
You can visit me on Twitter.

16:39.660 --> 16:43.420
I'm also on Masterdome on the Fuji social account.

16:43.420 --> 16:46.980
Of course with Fuji we also started the Masterdome service.

16:46.980 --> 16:53.100
And I write a lot about all this kind of stuff and you can find it either on Fuji or on Pi

16:53.100 --> 16:54.420
Fuji.

16:54.420 --> 16:56.140
And that's all I want to do.

16:56.140 --> 16:58.140
Thank you.

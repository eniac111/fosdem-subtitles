WEBVTT

00:00.000 --> 00:01.000
So let's get started.

00:01.000 --> 00:10.000
So this section is about why and how to upgrade to Java 17.

00:10.000 --> 00:15.120
And Simon already talked about the great new stuff that's being developed in the last couple

00:15.120 --> 00:16.120
of years.

00:16.120 --> 00:21.160
But I was wondering, like, what version of Java are you currently using at your projects

00:21.160 --> 00:22.160
for your company?

00:22.160 --> 00:24.160
So who's already using Java 21?

00:24.160 --> 00:25.160
Please raise your hand.

00:25.160 --> 00:27.160
Of course, that was a quick question because that's already access.

00:27.160 --> 00:31.160
I guess you don't use that on a production machine.

00:31.160 --> 00:34.160
But who's using Java 17 already?

00:34.160 --> 00:36.160
Quite a few.

00:36.160 --> 00:39.160
So basically you can tell the rest how to do it now.

00:39.160 --> 00:42.160
Who's still using Java 11?

00:42.160 --> 00:43.160
Okay.

00:43.160 --> 00:44.160
Why it goes wrong?

00:44.160 --> 00:45.160
Java 8?

00:45.160 --> 00:46.160
Okay.

00:46.160 --> 00:47.160
Older than Java 8?

00:47.160 --> 00:49.160
That's not too bad.

00:49.160 --> 00:55.160
So the interesting thing is, well, I mean, Simon talked about Java almost existing for

00:55.160 --> 00:56.160
30 years.

00:56.160 --> 00:59.160
I've heard of old features coming in the last couple of years.

00:59.160 --> 01:04.160
Still a lot of people are on 8, which is almost like 10 years old, which is quite interesting,

01:04.160 --> 01:05.160
of course.

01:05.160 --> 01:08.160
You miss all the cool new stuff.

01:08.160 --> 01:12.160
And that's basically what this session is a bit about.

01:12.160 --> 01:15.160
So if you have any questions, it's a short session.

01:15.160 --> 01:20.160
So please ask me afterwards on Twitter, LinkedIn, or somewhere else.

01:20.160 --> 01:23.160
This session is based on a GitHub repository I created.

01:23.160 --> 01:27.160
So I collected all kinds of examples from projects where I did the upgrades to newer

01:27.160 --> 01:33.160
versions of Java, starting with Java 8 and opening to Java 17, a little bit about 21

01:33.160 --> 01:34.160
as well.

01:34.160 --> 01:40.160
So it basically gives examples, shows you error messages that you see when you upgrade,

01:40.160 --> 01:41.160
things like that.

01:41.160 --> 01:46.160
So you can use that when you do the upgrade yourself.

01:46.160 --> 01:49.160
So why actually this session?

01:49.160 --> 01:54.160
I think a lot of people see it as challenging to upgrade to a newer version of Java.

01:54.160 --> 01:58.160
And a lot of people also estimate it at really large amounts.

01:58.160 --> 02:05.160
To give a concrete example, one of the companies I worked at, one of the teams estimated that

02:05.160 --> 02:09.160
to just upgrade their application, which was like a one team effort, which was a couple

02:09.160 --> 02:14.160
of years old, they said it would take them a quarter with a couple of persons to upgrade

02:14.160 --> 02:17.160
from Java 8 to Java 11.

02:17.160 --> 02:19.160
And you can guess what management done said.

02:19.160 --> 02:20.160
They said no, basically.

02:20.160 --> 02:21.160
So they put an upgrade.

02:21.160 --> 02:25.160
They already stayed with it for a couple of years.

02:25.160 --> 02:30.160
And why I am not basically trying to convince people to change their estimates, but that

02:30.160 --> 02:31.160
estimate was really high.

02:31.160 --> 02:33.160
In the end, I didn't want to have all the discussions.

02:33.160 --> 02:37.160
And I was lucky that my manager simply said, you do whatever you think is right.

02:37.160 --> 02:39.160
So I upgraded it myself in like two weeks.

02:39.160 --> 02:42.160
Of course, I had some previous experience.

02:42.160 --> 02:46.160
So maybe it takes a bit more if you haven't done many Java upgrades in the past.

02:46.160 --> 02:49.160
But still, I did it next to my normal job.

02:49.160 --> 02:54.160
Most of the time, you're waiting for the build to finish anyway and all the tests to run.

02:54.160 --> 02:56.160
So it's not like that much of work.

02:56.160 --> 03:00.160
And what I found interesting is we always bring management that we cannot upgrade our

03:00.160 --> 03:01.160
applications.

03:01.160 --> 03:03.160
But in the end, it's us who benefit most.

03:03.160 --> 03:05.160
Because then we can use all those cool new features.

03:05.160 --> 03:11.160
So before I had the Relax Manager who said do whatever you want, I often did it on like

03:11.160 --> 03:12.160
a Friday afternoon.

03:12.160 --> 03:16.160
I upgraded to a new version of Java, tried to compile stuff, tried to tweak it a little

03:16.160 --> 03:17.160
bit.

03:17.160 --> 03:21.160
And then I got a better idea like, hey, we need to fix only the test or maybe stuff that

03:21.160 --> 03:23.160
doesn't compile, we need to fix it.

03:23.160 --> 03:27.160
And then I could say to management like, hey, give me two days or give me a week.

03:27.160 --> 03:30.160
And then they often are like, oh, OK, you're already working on it.

03:30.160 --> 03:32.160
We can give you a week and you can upgrade.

03:32.160 --> 03:36.160
And that's often beneficial to yourself as well.

03:36.160 --> 03:39.160
But there was also a good reason that you should do it for the company.

03:39.160 --> 03:43.160
Because the new versions of Java, they also offer you free performance improvements, security

03:43.160 --> 03:44.160
updates, things like that.

03:44.160 --> 03:50.160
So there are a lot of good reasons why you should upgrade to a new version.

03:50.160 --> 03:52.160
And I'm watching you actually upgrade.

03:52.160 --> 03:54.160
So something changed in Java.

03:54.160 --> 03:56.160
And you built your application on top of it.

03:56.160 --> 03:58.160
Most applications have some dependencies.

03:58.160 --> 04:02.160
I only know a few who basically built everything themselves.

04:02.160 --> 04:04.160
But in general, you have some dependencies.

04:04.160 --> 04:08.160
And if something changes in Java, those dependencies might break.

04:08.160 --> 04:12.160
Or your application code might break, or both of them.

04:12.160 --> 04:16.160
And then, as they sometimes say, a lazy developer is a good developer.

04:16.160 --> 04:22.160
If you wait, those dependencies will automatically update their code to make sure that it compiles

04:22.160 --> 04:24.160
on the latest version of Java.

04:24.160 --> 04:32.160
Often already before the new version is released, sometimes shortly afterwards.

04:32.160 --> 04:35.160
And then what will actually be removed from Java?

04:35.160 --> 04:41.160
It's basically anything from tools like Java Mission Control, to methods, to all kinds of things.

04:41.160 --> 04:45.160
If you go to my GitHub, you can get some references where you can see in detail, for instance,

04:45.160 --> 04:51.160
on the Fujii website, you can see what methods are deprecated, removed, et cetera.

04:51.160 --> 04:55.160
You can get a lot of those details, which is quite interesting.

04:55.160 --> 04:57.160
But you can also simply try it out.

04:57.160 --> 05:03.160
And then upgrade to a new version, and you get those compile errors for free.

05:03.160 --> 05:07.160
Then in order to upgrade your dependencies, because I noticed that if you keep your dependencies

05:07.160 --> 05:10.160
up to date, then it's relatively easy to update your Java version.

05:10.160 --> 05:15.160
If you have really old dependencies, it might be tricky, but then first you need to upgrade them

05:15.160 --> 05:18.160
before you can go to a newer version of Java.

05:18.160 --> 05:21.160
And there are some interesting tools to help you there.

05:21.160 --> 05:26.160
For instance, the Renovate project automatically creates pull requests for all your dependencies

05:26.160 --> 05:27.160
in your Git repository.

05:27.160 --> 05:29.160
So then you only have to merge it.

05:29.160 --> 05:32.160
You don't have to search for the version or anything like that.

05:32.160 --> 05:36.160
There are also maybe ungrable versions plugins that can show you the latest versions

05:36.160 --> 05:42.160
or can automatically update those versions for you.

05:42.160 --> 05:47.160
One thing to keep in mind with that is sometimes your artifacts, they change their name.

05:47.160 --> 05:55.160
For instance, first we have Java EE, as was explained before, and then we have the JHPC API package

05:55.160 --> 05:58.160
inside the Java X page.

05:58.160 --> 06:01.160
Now it's Jakarta, so it basically changed.

06:01.160 --> 06:06.160
So make sure not only to use the latest version, but also to see if an artifact basically has a fork

06:06.160 --> 06:08.160
or some other name or whatever.

06:08.160 --> 06:11.160
And actually there are also some nice plugins for that.

06:11.160 --> 06:14.160
All group IDs alert for plugins, names, and gradle.

06:14.160 --> 06:17.160
They basically alert you that, hey, you're using some older project,

06:17.160 --> 06:21.160
there's a newer project available, you should change your dependencies.

06:21.160 --> 06:26.160
So again, most of it you can automate.

06:26.160 --> 06:30.160
If you don't look completely at what changed in different versions of Java,

06:30.160 --> 06:34.160
which you will probably encounter when you upgrade to a newer version,

06:34.160 --> 06:40.160
when we started Java 11, one of the bigger changes was that Java FX was being removed.

06:40.160 --> 06:44.160
However, there are still separate builds for Java FX, like the one from Gloom.

06:44.160 --> 06:46.160
You can use a main dependency.

06:46.160 --> 06:51.160
And what a lot of people are unaware of is that there are different versions of the JDK.

06:51.160 --> 06:56.160
So you have the OpenJDK, there's Oracle JDK, there's an Amazon JDK, there's a Microsoft JDK.

06:56.160 --> 07:00.160
Some vendors, they offer more than basically the standard JDK.

07:00.160 --> 07:04.160
They offer extra tools, like for instance Java Vax included.

07:04.160 --> 07:11.160
So for instance, the Liberica JDK, they offer a build with Java Vax still included.

07:11.160 --> 07:14.160
I see OJDK built, it's mentioned here still.

07:14.160 --> 07:17.160
I forgot to remove that one because that project basically stopped.

07:17.160 --> 07:21.160
So they don't release any new updates nowadays.

07:21.160 --> 07:24.160
Another interesting thing that was changed was that in the past,

07:24.160 --> 07:28.160
Java contained a few fonts, just a real small set of fonts.

07:28.160 --> 07:33.160
Basically those fonts wouldn't be found.

07:33.160 --> 07:34.160
And now they are removed.

07:34.160 --> 07:36.160
If you do that on a normal operating system, it doesn't matter,

07:36.160 --> 07:39.160
because then they will use the operating systems fonts.

07:39.160 --> 07:45.160
But if you use a really small operating system, like Alpyn Linux, that also doesn't have any fonts.

07:45.160 --> 07:48.160
So then Java has no fonts, the operating system has no fonts,

07:48.160 --> 07:52.160
and you get some really weird errors about missing fonts.

07:52.160 --> 07:57.160
For instance, if you use tools like Apache Poi, which you can use to operate on office documents,

07:57.160 --> 08:02.160
that apparently use some fonts under the hood, and a colleague of mine got this issue,

08:02.160 --> 08:09.160
and then the solution is basically to install some Java packages with fonts.

08:09.160 --> 08:13.160
Some other stuff that's been removed is the Java Mission Control.

08:13.160 --> 08:16.160
You can now download that basically separately.

08:16.160 --> 08:19.160
If you want to do some profiling or monitoring of your application,

08:19.160 --> 08:22.160
I highly recommend having a look at this one, it's really interesting.

08:22.160 --> 08:28.160
But it's no longer part of the JDK itself, it's like a separate tool that you can download.

08:28.160 --> 08:33.160
And I think one of the bigger changes was that the Java EE and Corba modules have been removed.

08:33.160 --> 08:36.160
I hope Corba isn't used that way anymore in your projects,

08:36.160 --> 08:39.160
but Java EE modules are often used.

08:39.160 --> 08:42.160
If you look at a concrete example, for instance, Jog B.

08:42.160 --> 08:46.160
As mentioned before, it was Java X, and now it's Jakarta.

08:46.160 --> 08:49.160
So basically you need to change the imports of your application,

08:49.160 --> 08:59.160
and you need to add to the dependencies explicitly, as it's no longer part of the JDK.

08:59.160 --> 09:01.160
And that goes basically for all the ones.

09:01.160 --> 09:04.160
If you see here all the different modules on the left,

09:04.160 --> 09:07.160
you can see the replacement artifacts on the right.

09:07.160 --> 09:13.160
For Java EE and Java W.S., you need two dependencies, one for the API and one for the implementation.

09:13.160 --> 09:17.160
Let's see if you make the switch to Jakarta, you need to make these changes.

09:17.160 --> 09:21.160
Also, some people that didn't switch to Jakarta,

09:21.160 --> 09:26.160
they simply added the Java EE dependencies explicitly.

09:26.160 --> 09:30.160
That's also possible, but I mean those no longer receive any upgrades.

09:30.160 --> 09:34.160
So if you want to receive upgrades, you should move to the Jakarta versions.

09:37.160 --> 09:41.160
Java 15. Who's using Nashor in here?

09:41.160 --> 09:43.160
I see a few hands.

09:43.160 --> 09:47.160
In the past I only saw that conferences always founded a really cool tool,

09:47.160 --> 09:49.160
but never encountered it in projects.

09:49.160 --> 09:53.160
And then I worked at a company and upgraded a lot of projects from various teams,

09:53.160 --> 09:56.160
and suddenly I got a Nashor exception.

09:56.160 --> 09:59.160
So there are some places where it's being used,

09:59.160 --> 10:02.160
and in those cases you can simply add this dependency,

10:02.160 --> 10:04.160
and then you can keep on using them.

10:04.160 --> 10:08.160
Java 16.

10:08.160 --> 10:10.160
Java 16.

10:10.160 --> 10:12.160
It's a very interesting one.

10:12.160 --> 10:15.160
They basically strongly encapsulated JDK in journals.

10:15.160 --> 10:16.160
So what does that mean?

10:16.160 --> 10:21.160
In the past there was some internal logic of Java basically,

10:21.160 --> 10:23.160
like reflection APIs and things like that.

10:23.160 --> 10:27.160
And they were never meant to be used by end users.

10:27.160 --> 10:31.160
They were only meant to be used by the guys who built Java itself.

10:31.160 --> 10:33.160
But they couldn't hide it away.

10:33.160 --> 10:36.160
A couple of years ago we got modules in everything,

10:36.160 --> 10:39.160
and now they can hide away that logic.

10:39.160 --> 10:41.160
But if they would have done that immediately,

10:41.160 --> 10:44.160
a lot of applications would break because they would use these internals.

10:44.160 --> 10:48.160
But gradually they are making it a bit harder to use those internals.

10:48.160 --> 10:52.160
So what happens now if you use some of those internals?

10:52.160 --> 10:54.160
You get exceptions like this.

10:54.160 --> 10:56.160
For instance, Lumbok uses lower level Java logic,

10:56.160 --> 10:58.160
and it's also something like that.

10:58.160 --> 11:01.160
A module compiler does not export some stuff to any module.

11:01.160 --> 11:05.160
Basically means Lumbok doesn't have access to that anymore.

11:09.160 --> 11:10.160
So what's the solution?

11:10.160 --> 11:12.160
Again, a lazy developer is a good developer.

11:12.160 --> 11:15.160
You read it a little while, and then Lumbok creates a new version,

11:15.160 --> 11:19.160
which you add as your dependency, and then you can simply continue.

11:21.160 --> 11:25.160
If that isn't the case, maybe you use some obscure older framework or library

11:25.160 --> 11:28.160
which is no longer maintained, and they won't update it,

11:28.160 --> 11:30.160
then there is still a workaround available.

11:30.160 --> 11:33.160
And that's basically by giving some compiler arguments.

11:33.160 --> 11:38.160
So, princessfire, the maybe compiler plugin, you can get these arguments,

11:38.160 --> 11:41.160
which of course is a little bit dirty, like someone puts a lock on their door,

11:41.160 --> 11:45.160
you remove the lock, and then you leave the home open,

11:45.160 --> 11:47.160
so everyone can again access it.

11:47.160 --> 11:49.160
So it's not really a nice solution.

11:49.160 --> 11:53.160
So please just update your dependencies whenever possible.

11:53.160 --> 11:56.160
And there is an even dirtier hack,

11:56.160 --> 11:59.160
that is you can start the Java process with minus minus illegal access,

11:59.160 --> 12:02.160
and then everything is open anyway.

12:02.160 --> 12:06.160
So that's like to really smash in the door with a hammer.

12:07.160 --> 12:09.160
How long is that option going to stay?

12:09.160 --> 12:11.160
Sorry?

12:11.160 --> 12:14.160
How long is that option going to stay?

12:14.160 --> 12:16.160
That's a good one.

12:16.160 --> 12:18.160
Thank you for, that's a hop to the next version,

12:18.160 --> 12:22.160
because now we have another strongly encapsulated JDK internal.

12:22.160 --> 12:26.160
So Java 17, so it stayed for six months basically.

12:26.160 --> 12:35.160
So with Java 17, the launcher option minus minus illegal access no longer works.

12:35.160 --> 12:38.160
So you had six months to fix your issue.

12:38.160 --> 12:44.160
So then you get an exception like this if you try.

12:44.160 --> 12:49.160
So again, by now I think you know what to do to resolve this,

12:49.160 --> 12:51.160
make sure you have greater dependencies.

12:51.160 --> 12:55.160
Those lower level JDKs, JDK options, those methods and things,

12:55.160 --> 12:57.160
they have replacements that are higher level.

12:57.160 --> 13:00.160
So if you use those methods in your own code,

13:00.160 --> 13:04.160
make use of those higher level methods instead of those lower level methods.

13:04.160 --> 13:06.160
Unfortunately, there is still the last resort.

13:06.160 --> 13:11.160
You can still use that minus minus add opens to still open up stuff.

13:11.160 --> 13:15.160
As far as I know, there are still no plans on stopping that.

13:15.160 --> 13:18.160
So yeah, that might stay for a bit longer.

13:18.160 --> 13:25.160
It's like a workaround to make this work.

13:25.160 --> 13:32.160
Then when you look at the newer Java versions, so Java 18, 19, 20 and 21,

13:32.160 --> 13:34.160
they didn't announce any major removals,

13:34.160 --> 13:39.160
although the full time for 21 is still a thing under debate.

13:39.160 --> 13:43.160
I tried with another repository that I have that a lot of,

13:43.160 --> 13:47.160
for another presentation, I explained a lot of libraries and tools for Java.

13:47.160 --> 13:53.160
I tried upgrading all of those in Java 21 and then I still got a few issues.

13:53.160 --> 13:59.160
So not everything was there, but that's mainly because the compiler doesn't support it yet

13:59.160 --> 14:02.160
by those frameworks, as we will see in a second as well.

14:02.160 --> 14:05.160
But no major things are being removed so far,

14:05.160 --> 14:10.160
so it should be a relatively easy upgrade.

14:10.160 --> 14:13.160
Then one thing that I encountered a couple of times

14:13.160 --> 14:17.160
in the puzzle team in the beginning was that I often got the exception

14:17.160 --> 14:20.160
unsupported cross-file major version 61.

14:20.160 --> 14:25.160
Does someone know what that means?

14:25.160 --> 14:32.160
So basically, cross-file major version 61 is used to describe Java 17,

14:32.160 --> 14:35.160
so it basically means your stop doesn't run on Java 17.

14:35.160 --> 14:38.160
But then with the number 61.

14:38.160 --> 14:43.160
If you see the same with the number 65, that means it doesn't run on Java 21.

14:43.160 --> 14:46.160
So if you get these kinds of weird errors,

14:46.160 --> 14:49.160
again, upgrade your dependency and often it's fixed.

14:49.160 --> 14:53.160
So I tried running some examples on Java 21

14:53.160 --> 14:58.160
and then Spring, for instance, they don't support the cross-file format 65 yet,

14:58.160 --> 15:01.160
so you get this issue.

15:01.160 --> 15:10.160
Often that's resolved after a while by the people maintaining those dependencies.

15:10.160 --> 15:15.160
So in the past, basically upgrading was a matter of find, replace, import,

15:15.160 --> 15:19.160
compile it and then see what breaks and fix that.

15:19.160 --> 15:23.160
Nowadays, there are basically more and more tools available to help you with that.

15:23.160 --> 15:26.160
So there is the more generic open rewrite project,

15:26.160 --> 15:29.160
which I think you can use for changing almost anything.

15:29.160 --> 15:32.160
It's really a VONs, find and replace engine, so to say.

15:32.160 --> 15:34.160
And there's a session about that topic a little bit later.

15:34.160 --> 15:36.160
Yeah, and a session later by Tim.

15:36.160 --> 15:39.160
So if you want to know more of that, stay seated here.

15:39.160 --> 15:41.160
There is the Spring Boot Migrator project,

15:41.160 --> 15:45.160
which is more focused on upgrading Spring applications to newer versions.

15:45.160 --> 15:49.160
And quite recently, they introduced Eclipse migration toolkit from Java,

15:49.160 --> 15:54.160
which is again a bit more generic toolkit to also upgrade your Java versions.

15:54.160 --> 16:02.160
I have to be honest, I tried some of them in simple projects to play around,

16:02.160 --> 16:05.160
but the upgrades I did in the past I mostly did it by hand.

16:05.160 --> 16:09.160
Because mostly, like I explained, it was a matter of upgrading dependencies

16:09.160 --> 16:12.160
and then see what code changed.

16:12.160 --> 16:17.160
And maybe I was lucky, but in most cases that was relatively easy.

16:17.160 --> 16:20.160
So after you've done this work, you upgrade your dependencies,

16:20.160 --> 16:23.160
fix the code that's breaking in your own code base.

16:23.160 --> 16:28.160
Then basically, you're happy again, you can finally use those cool new features

16:28.160 --> 16:32.160
from the last 10 years that nobody has said or a lot of people aren't using yet.

16:32.160 --> 16:37.160
So you can make use of records, new classes, all those cool nice features.

16:37.160 --> 16:39.160
And I think that's really helpful.

16:39.160 --> 16:43.160
So to summarize, if you look at the amount of work,

16:43.160 --> 16:48.160
I think if you upgrade from 8 to 11 and you switch from Java EE to Jakarta,

16:48.160 --> 16:51.160
it's relatively a bigger task.

16:51.160 --> 16:54.160
It takes you a bit of time to upgrade everything,

16:54.160 --> 16:57.160
get the right packages that are compatible with each other,

16:57.160 --> 16:59.160
and get that to work.

16:59.160 --> 17:01.160
Still, it's not like a quarter with a lot of people.

17:01.160 --> 17:08.160
It's still a matter of, I would say, depending on your application days or maybe weeks.

17:08.160 --> 17:12.160
If you go from 11 to 17, that's a lot easier.

17:12.160 --> 17:18.160
For me, it was mainly updating a lumbock and some test dependencies.

17:18.160 --> 17:23.160
Because tests like mocking frameworks, they always use those internals of the JDK.

17:23.160 --> 17:28.160
So they tend to break when you upgrade to Java 17.

17:28.160 --> 17:31.160
So if you upgrade those, then most of it already works.

17:31.160 --> 17:39.160
So I did, I think, like six or seven projects from 11 to 17.

17:39.160 --> 17:43.160
And for all of them, that was basically all I had to do.

17:43.160 --> 17:48.160
Only one that used some reflection logic in one of the unit tests,

17:48.160 --> 17:53.160
so I had to rewrite it, but I could quite easily rewrite the same test case

17:53.160 --> 17:56.160
with higher level logic and test the same cases.

17:56.160 --> 18:01.160
So all in all, I would say from 11 to 17 is easier than from 8 to 11.

18:01.160 --> 18:06.160
And from what I see now, from 17 to 21 is maybe even easier

18:06.160 --> 18:11.160
unless they introduce any big changes in Java 21.

18:11.160 --> 18:14.160
My advice is always to take incremental steps.

18:14.160 --> 18:16.160
So don't try to do everything at once.

18:16.160 --> 18:18.160
First try to make everything compile.

18:18.160 --> 18:22.160
And you can also tell your teammates, your manager, like, okay, now it compiles.

18:22.160 --> 18:25.160
So I'm one step further, now I do my tests,

18:25.160 --> 18:29.160
and then we're basically, we can deploy it and run it.

18:29.160 --> 18:34.160
Instead of saying, add 80% done, because we all know how much 80% done means.

18:34.160 --> 18:37.160
It means 80% of the work didn't need to be done.

18:37.160 --> 18:41.160
So that really helps, make those small steps.

18:41.160 --> 18:45.160
Also for yourself, then you know what the progress is.

18:45.160 --> 18:47.160
And as I mentioned before, I mean, we can make management

18:47.160 --> 18:49.160
for not giving us the time to upgrade Java,

18:49.160 --> 18:52.160
but in the end, I think for us it's most beneficial

18:52.160 --> 18:55.160
because then we can finally make use of those cool new features.

18:55.160 --> 18:59.160
Nowadays also Spring requires, for instance, Java 17,

18:59.160 --> 19:01.160
if you want to upgrade to the latest version.

19:01.160 --> 19:11.160
So I think that's one more reason to make sure that you're up to date.

19:11.160 --> 19:12.160
So that was it.

19:12.160 --> 19:14.160
I think I have five minutes left.

19:14.160 --> 19:20.160
So if someone has a question.

19:20.160 --> 19:31.160
Coming back to this problem with class version, is it because we are trying to run classes

19:31.160 --> 19:36.160
which were compiled against JDK 19, for instance,

19:36.160 --> 19:40.160
at least under JDK 17 or stuff like that?

19:40.160 --> 19:45.160
This is because the bytecode is too new and the features are dropped.

19:45.160 --> 19:47.160
Yeah, I think that's a little bit of a problem.

19:47.160 --> 19:50.160
It doesn't support the newer bytecode.

19:50.160 --> 19:55.160
So basically you need to update your JDK.

19:55.160 --> 19:57.160
Now you need to update the dependency

19:57.160 --> 20:02.160
so that it is compatible with the bytecode of that new version of Java.

20:02.160 --> 20:04.160
So this happens when you run an older dependency

20:04.160 --> 20:07.160
on a newer version of Java basically.

20:07.160 --> 20:11.160
Yeah.

20:11.160 --> 20:15.160
Would you recommend gig to help defend the posture?

20:15.160 --> 20:19.160
So the question is, would you recommend to get out the Panda bot?

20:19.160 --> 20:24.160
I think it's quite similar to Renovate, which I used.

20:24.160 --> 20:30.160
I quite like it, but it depends a bit on what kind of dependencies you use.

20:30.160 --> 20:35.160
Because some dependencies release really often, then you get a lot of those updates.

20:35.160 --> 20:39.160
But I think it's a lot better because if you look at traditionally,

20:39.160 --> 20:41.160
a lot of projects is done by hand.

20:41.160 --> 20:45.160
It's not like a funny task to do to find out the latest versions

20:45.160 --> 20:47.160
by going to the main repository or something like that.

20:47.160 --> 20:49.160
So it's often neglected.

20:49.160 --> 20:52.160
And if you use tools like the Panda bot or Renovate,

20:52.160 --> 20:56.160
you basically get the issue smashed into your face like you have to merge it.

20:56.160 --> 20:58.160
And it's more or less automated.

20:58.160 --> 21:02.160
Unless of course, often you merge it to build fills, then you have to fix it.

21:02.160 --> 21:06.160
But at least I think it helps to stay more up to date with your dependencies.

21:06.160 --> 21:09.160
Because else, I've seen it in so many projects,

21:09.160 --> 21:11.160
most developers don't care about it,

21:11.160 --> 21:15.160
and they only upgrade once a security issue is being found or something like that.

21:15.160 --> 21:19.160
Then they upgrade it, and else it stays the same old version.

21:19.160 --> 21:21.160
Well, if you keep it up to date continuously,

21:21.160 --> 21:23.160
sometimes you have to do some minor fixes,

21:23.160 --> 21:26.160
but then you don't have to do those big fixes

21:26.160 --> 21:30.160
when your friends just want to migrate to a newer version of Java.

21:30.160 --> 21:34.160
And also there's a session on this topic,

21:34.160 --> 21:38.160
the one after the next one about dependencies specifically.

21:38.160 --> 21:40.160
Okay.

21:40.160 --> 21:42.160
Regarding the at-opens fact,

21:42.160 --> 21:45.160
is there a way for a Java 11 compile time

21:45.160 --> 21:48.160
to report issues that will grow in Java 17 runtime?

21:48.160 --> 21:51.160
This unnamed class opens, you know.

21:51.160 --> 21:53.160
Because we are compiling in Java 11,

21:53.160 --> 21:55.160
but when we run in Java 17,

21:55.160 --> 21:59.160
then we see that we need these at-opens, but we try to read it.

21:59.160 --> 22:02.160
There was a flag there that could warn you,

22:02.160 --> 22:04.160
but I'm not sure from which point.

22:04.160 --> 22:06.160
Oh, sorry, yes.

22:06.160 --> 22:10.160
The question was, the gentleman compiled in Java 11

22:10.160 --> 22:12.160
and run it on Java 17, the code,

22:12.160 --> 22:15.160
and then it breaks because some at-opens were missing.

22:15.160 --> 22:17.160
Basically they're using some internals of Java,

22:17.160 --> 22:21.160
and he asked, is there some way to find out on Java 11

22:21.160 --> 22:23.160
if I'm missing those things?

22:23.160 --> 22:25.160
Because then I can fix it there already.

22:25.160 --> 22:27.160
So I know there was some flag,

22:27.160 --> 22:30.160
something like give a warning or something,

22:30.160 --> 22:35.160
but I don't know in which version of Java that was introduced.

22:35.160 --> 22:40.160
So what would be the solution to compile in Java 17?

22:40.160 --> 22:42.160
Yes, I would compile in Java 17

22:42.160 --> 22:45.160
and using the desktop release option for a project

22:45.160 --> 22:47.160
to be able to run in 11.

22:47.160 --> 22:51.160
In that shift, we call these things as part of the code.

22:51.160 --> 22:53.160
Yes, then you can run it on 17.

22:53.160 --> 22:55.160
That's of course the easiest way.

22:55.160 --> 22:57.160
But let me compile it on the 11th.

22:57.160 --> 22:59.160
Yes, sorry.

22:59.160 --> 23:03.160
We should compile for it on 17 and then it will go as part of the code.

23:03.160 --> 23:05.160
Yes, then you get the warning immediately.

23:05.160 --> 23:08.160
Or you can see if that flag already exists in Java 11.

23:08.160 --> 23:09.160
I'm not sure.

23:09.160 --> 23:13.160
I know it was introduced sometime, but I don't know which version.

23:15.160 --> 23:16.160
Thank you.

23:16.160 --> 23:17.160
And thank you all.

23:17.160 --> 23:35.160
Thank you very much.

1
0:00:00.000 --> 0:00:07.760
Hello, everyone.

2
0:00:07.760 --> 0:00:09.920
Yeah, my name is Michel Senna.

3
0:00:09.920 --> 0:00:16.720
So I work for Microsoft and I'm mostly the main of Landlark,

4
0:00:16.720 --> 0:00:21.120
which is a new schedule Linux feature.

5
0:00:21.760 --> 0:00:23.840
It's about soundbusing.

6
0:00:23.840 --> 0:00:26.520
So this talk is about Rose Library.

7
0:00:26.520 --> 0:00:28.320
We wrote for Landlark.

8
0:00:28.320 --> 0:00:37.280
And well, we kind of had some changes about compatibility.

9
0:00:37.280 --> 0:00:40.840
So yeah, just quick introduction context

10
0:00:40.840 --> 0:00:44.360
to understand the pro-oriented here.

11
0:00:44.360 --> 0:00:46.000
So yeah, why care about security?

12
0:00:46.000 --> 0:00:53.000
So here, well, it might be abuse for some.

13
0:00:53.000 --> 0:00:57.280
But like every application can be compromised.

14
0:00:57.280 --> 0:00:59.480
Every operation can be trusted at first.

15
0:00:59.480 --> 0:01:02.400
And during the lifetime of a process,

16
0:01:02.400 --> 0:01:05.360
it can become malicious.

17
0:01:05.360 --> 0:01:09.280
So yeah, as developers, there's multiple problems.

18
0:01:09.280 --> 0:01:14.000
So we don't want to participate to malicious actions

19
0:01:14.000 --> 0:01:17.280
performed by attackers through our software.

20
0:01:17.280 --> 0:01:21.120
And we kind of have a responsibility for users,

21
0:01:21.120 --> 0:01:25.200
especially to protect their personal data.

22
0:01:25.200 --> 0:01:30.880
And yeah, there might be some issues about third party code.

23
0:01:30.880 --> 0:01:34.560
So security soundboxing is a security approach

24
0:01:34.560 --> 0:01:39.040
to isolate software and mainly to isolate them

25
0:01:39.040 --> 0:01:41.800
by dropping ambient access rights.

26
0:01:41.800 --> 0:01:47.080
So in Intel, when you launch an application in a common

27
0:01:47.080 --> 0:01:50.280
system, this application can access a lot of files,

28
0:01:50.280 --> 0:01:55.600
including some which are kind of private, like.ecc for example.

29
0:01:55.600 --> 0:01:57.440
So sound mixing should not be confused

30
0:01:57.440 --> 0:02:00.480
with namespaces and containers, which

31
0:02:00.480 --> 0:02:05.560
is a way to create kind of a virtualized environment.

32
0:02:05.560 --> 0:02:07.480
And second is also something which

33
0:02:07.480 --> 0:02:09.960
is really interesting for security purposes.

34
0:02:09.960 --> 0:02:12.000
But it's not about access control.

35
0:02:12.000 --> 0:02:13.920
It's about protecting the current.

36
0:02:13.920 --> 0:02:18.720
That was initially the initial goal of second.

37
0:02:18.720 --> 0:02:23.000
So Landmark is really dedicated from the ground

38
0:02:23.000 --> 0:02:27.120
to bring sound making features to Linux

39
0:02:27.120 --> 0:02:30.320
to bring some security features to the kernel.

40
0:02:30.320 --> 0:02:32.640
So it is an access control system

41
0:02:32.640 --> 0:02:34.840
available to every processes.

42
0:02:34.840 --> 0:02:37.160
You don't need to be a root or whatever.

43
0:02:37.160 --> 0:02:43.480
And it is designed to be embedded in applications,

44
0:02:43.480 --> 0:02:47.040
so to create built-in soundboxing.

45
0:02:47.040 --> 0:02:51.200
It's a way to create one or even multiple layers

46
0:02:51.200 --> 0:02:52.880
of new securities.

47
0:02:52.880 --> 0:02:59.480
So it comes kind of after all system-wide access

48
0:02:59.480 --> 0:03:01.640
control, which are already in place.

49
0:03:01.640 --> 0:03:06.520
And so it's available on most distros nowadays.

50
0:03:06.520 --> 0:03:08.000
And if it is not the case, well, I

51
0:03:08.000 --> 0:03:12.600
want you to open an issue in your favorite distro.

52
0:03:12.600 --> 0:03:17.600
So about sandboxing here, what's the interesting point

53
0:03:17.600 --> 0:03:21.360
about sandboxing and built-in application security?

54
0:03:21.360 --> 0:03:25.680
If, well, that we can create tailored security policies

55
0:03:25.680 --> 0:03:27.840
and embedded them in the application.

56
0:03:27.840 --> 0:03:32.520
So there's interesting things about that.

57
0:03:32.520 --> 0:03:39.960
And that might help to make it security invisible, which

58
0:03:39.960 --> 0:03:43.480
is kind of the main purpose here.

59
0:03:43.480 --> 0:03:46.960
We want to not bother users, but secure them anywhere.

60
0:03:46.960 --> 0:03:51.560
So because this security policy can be

61
0:03:51.560 --> 0:03:53.480
embedded in the application, well, it

62
0:03:53.480 --> 0:03:55.560
can use the application semantic.

63
0:03:55.560 --> 0:03:59.520
It can use the application configuration transparently,

64
0:03:59.520 --> 0:04:03.360
so you don't need to add another configuration stuff.

65
0:04:03.360 --> 0:04:06.960
It's not another layer of execution.

66
0:04:06.960 --> 0:04:08.920
It's embedded in the application.

67
0:04:08.920 --> 0:04:11.080
And of course, well, if the confusion

68
0:04:11.080 --> 0:04:13.880
depends on user interaction, well,

69
0:04:13.880 --> 0:04:17.400
it can adapt to this change of behavior.

70
0:04:17.400 --> 0:04:21.880
And one really interesting point is, well, as a developer,

71
0:04:21.880 --> 0:04:25.240
you want to test what you do.

72
0:04:25.240 --> 0:04:27.720
And you want to kind of get guarantees

73
0:04:27.720 --> 0:04:31.880
that whatever you're developing is still working.

74
0:04:31.880 --> 0:04:34.800
And being able to embed the security policies

75
0:04:34.800 --> 0:04:38.120
in your application, make it possible to test them

76
0:04:38.120 --> 0:04:40.800
the same way that you can test every other features.

77
0:04:40.800 --> 0:04:42.240
So that's really interesting.

78
0:04:42.240 --> 0:04:45.080
You don't rely on, let's say, a Linux

79
0:04:45.080 --> 0:04:47.960
being installed on your test machine and so on.

80
0:04:47.960 --> 0:04:51.080
And it adapts to the application over time.

81
0:04:51.080 --> 0:04:54.400
So if you have a TI, which is well configured,

82
0:04:54.400 --> 0:04:57.040
you can test it and make sure that, well, you

83
0:04:57.040 --> 0:05:01.280
can add new features, adjust the security policy,

84
0:05:01.280 --> 0:05:04.920
and make sure that everything works as expected.

85
0:05:04.920 --> 0:05:08.840
So speaking about the library and the Rust library,

86
0:05:08.840 --> 0:05:12.320
so the idea was to create something which is rusty,

87
0:05:12.320 --> 0:05:14.400
so I don't want it to rust.

88
0:05:14.400 --> 0:05:18.760
And for this, well, we wanted to leverage strong typing,

89
0:05:18.760 --> 0:05:21.720
so to get some developing guarantees,

90
0:05:21.720 --> 0:05:24.880
and also to follow some common patterns.

91
0:05:24.880 --> 0:05:29.440
So many here, the builder pattern.

92
0:05:29.440 --> 0:05:31.520
So it's still working for us.

93
0:05:31.520 --> 0:05:32.360
It's working.

94
0:05:32.360 --> 0:05:35.720
But we're working on improving the API

95
0:05:35.720 --> 0:05:39.560
and make it easier and more easy to use

96
0:05:39.560 --> 0:05:40.840
for competitive reasons.

97
0:05:40.840 --> 0:05:46.200
So this talk about this kind of compatibility requirements.

98
0:05:46.200 --> 0:05:48.760
And so I'll talk about that.

99
0:05:48.760 --> 0:05:53.320
Some examples of early public users are listed here.

100
0:05:53.320 --> 0:05:58.480
But it's still in kind of beta, for now.

101
0:05:58.480 --> 0:06:01.760
So let's start with some code example.

102
0:06:01.760 --> 0:06:06.480
So just as a warning, this kind of simplified code,

103
0:06:06.480 --> 0:06:08.360
it's working.

104
0:06:08.360 --> 0:06:10.640
But yeah, for the demo, well, it's not demo,

105
0:06:10.640 --> 0:06:13.320
but for these examples, the idea is

106
0:06:13.320 --> 0:06:18.960
to make it simple to make it easier to understand.

107
0:06:18.960 --> 0:06:21.760
So you can see at the left, there's a C code.

108
0:06:21.760 --> 0:06:25.800
And at the right, the exact same semantic, but in Rust.

109
0:06:25.800 --> 0:06:28.080
So I will mostly talk about the Rust code.

110
0:06:28.080 --> 0:06:30.400
But yeah, you can take a look at the C code

111
0:06:30.400 --> 0:06:33.320
to kind of see the difference between them

112
0:06:33.320 --> 0:06:36.040
and how Rust can be useful there.

113
0:06:36.040 --> 0:06:40.560
So as I said, it is based on the builder pattern.

114
0:06:40.560 --> 0:06:44.040
So you create a rule set object here with the rules and you.

115
0:06:44.040 --> 0:06:47.040
And from there, you kind of call different methods

116
0:06:47.040 --> 0:06:50.400
to build the object here.

117
0:06:50.400 --> 0:06:51.400
In this case, a rule set.

118
0:06:51.400 --> 0:06:53.840
So rule set will contain a set of rules.

119
0:06:53.840 --> 0:06:57.480
And yeah, at first, you define what you want to enforce,

120
0:06:57.480 --> 0:06:58.680
what do we want to restrict, what

121
0:06:58.680 --> 0:07:01.760
do we want to deny by default. So in this case,

122
0:07:01.760 --> 0:07:04.040
these are two actions.

123
0:07:04.040 --> 0:07:05.680
They are shown to execute files and they

124
0:07:05.680 --> 0:07:07.120
are shown to write on files.

125
0:07:07.120 --> 0:07:09.840
So obviously, it's not enough.

126
0:07:09.840 --> 0:07:12.320
But in this case, it's easy to understand

127
0:07:12.320 --> 0:07:14.440
for a simple use case.

128
0:07:14.440 --> 0:07:17.080
And then once you define the rule set

129
0:07:17.080 --> 0:07:20.560
and what the rule set can handle, well, you can create it.

130
0:07:20.560 --> 0:07:24.040
And the rule set creation translates to,

131
0:07:24.040 --> 0:07:26.960
you can see at the left, there's a landmark trade rule set.

132
0:07:26.960 --> 0:07:29.840
And this function is, in fact, a syscall.

133
0:07:29.840 --> 0:07:34.720
So in the rough part, when you call the create method,

134
0:07:34.720 --> 0:07:39.320
it creates a new rule set, which is backed underneath

135
0:07:39.320 --> 0:07:43.480
by a new file descriptor dedicated to landmark.

136
0:07:43.480 --> 0:07:48.200
And that is a wrap in the rule set object.

137
0:07:48.200 --> 0:07:51.920
Then if you want to add rules to allow some directory to be,

138
0:07:51.920 --> 0:07:54.520
for example, executable, which is the case here,

139
0:07:54.520 --> 0:07:58.720
so you append the slash user directory,

140
0:07:58.720 --> 0:08:05.920
and you make it executable, so elo access, xfs execute.

141
0:08:05.920 --> 0:08:08.960
And then you can add other rule you want.

142
0:08:08.960 --> 0:08:10.760
For all the exceptions, that should

143
0:08:10.760 --> 0:08:15.040
be legitimate for the legitimate use case.

144
0:08:15.040 --> 0:08:17.960
And then you restrict the current process.

145
0:08:17.960 --> 0:08:20.400
Well, in fact, the current thread.

146
0:08:20.400 --> 0:08:23.760
And from this point, the current thread

147
0:08:23.760 --> 0:08:30.560
can only execute files which are in slash user.

148
0:08:30.560 --> 0:08:36.000
And it cannot write anything at all, actually.

149
0:08:36.000 --> 0:08:41.600
So that was a tradition, quick introduction to the library.

150
0:08:41.600 --> 0:08:45.640
And the thing is, another key is not a full feature access

151
0:08:45.640 --> 0:08:49.480
control yet, because, well, it is complex.

152
0:08:49.480 --> 0:08:51.880
And well, to reach this goal, well,

153
0:08:51.880 --> 0:08:56.920
we need to spend much more years to increment,

154
0:08:56.920 --> 0:08:59.480
well, to add new features to the link scale.

155
0:09:03.880 --> 0:09:07.680
And the thing is, well, sometimes you

156
0:09:07.680 --> 0:09:12.160
might add new features that enable to restrict more.

157
0:09:12.160 --> 0:09:17.240
And sometimes we might add some features to restrict less.

158
0:09:17.240 --> 0:09:21.120
So let's see what this means.

159
0:09:21.120 --> 0:09:22.840
So the first version of Landlok, which

160
0:09:22.840 --> 0:09:28.160
was released with 5.13 kernel, basically allowed

161
0:09:28.160 --> 0:09:32.000
to read, write, and do a lot of common stuff

162
0:09:32.000 --> 0:09:35.560
to restrict a lot of common file-stem actions.

163
0:09:35.560 --> 0:09:40.480
But there was, like you can see here, there's three categories.

164
0:09:40.480 --> 0:09:42.760
The first one, always denied, was

165
0:09:42.760 --> 0:09:44.320
for the first version of Landlok,

166
0:09:44.320 --> 0:09:47.340
the actions that were always denied whenever

167
0:09:47.340 --> 0:09:50.160
you sandboxed a thread.

168
0:09:50.160 --> 0:09:55.240
So that was for, well, complexity in the development,

169
0:09:55.240 --> 0:09:57.920
but also security reasons.

170
0:09:57.920 --> 0:10:02.600
So for example, you are not able to execute set to AD binaries,

171
0:10:02.600 --> 0:10:05.880
because it will be kind of a way to bypass the sandbox.

172
0:10:05.880 --> 0:10:09.000
And there was some restriction on ptrace,

173
0:10:09.000 --> 0:10:12.920
so you're not allowed to debug an application process, which

174
0:10:12.920 --> 0:10:14.760
is outside the sandbox.

175
0:10:14.760 --> 0:10:18.840
Obviously, it will be a way to get out a sandbox.

176
0:10:18.840 --> 0:10:21.360
That's not what we want.

177
0:10:21.360 --> 0:10:27.120
So the second version of Landlok had its new way,

178
0:10:27.120 --> 0:10:31.840
a new access write, which was a way to repound files.

179
0:10:31.840 --> 0:10:36.160
So at first, it was denied to change the parent victory

180
0:10:36.160 --> 0:10:39.400
of a file for security reasons, because Landlok is based

181
0:10:39.400 --> 0:10:42.060
on Fy-Arkey's identification.

182
0:10:42.060 --> 0:10:45.200
And that was kind of complex.

183
0:10:45.200 --> 0:10:48.280
But with the second version, we implemented that.

184
0:10:48.280 --> 0:10:50.880
And then it became configurable.

185
0:10:50.880 --> 0:10:57.360
So one item last in the always denied box.

186
0:10:57.360 --> 0:11:01.640
In the third version of Landlok, all these versions

187
0:11:01.640 --> 0:11:04.680
are new kernel releases.

188
0:11:04.680 --> 0:11:08.040
And in the third version, we added a new way

189
0:11:08.040 --> 0:11:09.960
to restrict Fy congregation.

190
0:11:09.960 --> 0:11:16.560
So congregation in Landlok is to change the size of a file.

191
0:11:16.560 --> 0:11:19.560
And this was always allowed before,

192
0:11:19.560 --> 0:11:21.440
because it wasn't end up.

193
0:11:21.440 --> 0:11:23.840
It was a bit complex to implement this

194
0:11:23.840 --> 0:11:25.320
in the kernel at the time.

195
0:11:25.320 --> 0:11:27.320
But now it is possible.

196
0:11:27.320 --> 0:11:30.560
So you can see that we can move items from the always

197
0:11:30.560 --> 0:11:33.720
denied box to the configurable, and from the always

198
0:11:33.720 --> 0:11:38.000
allowed box to the configurable list.

199
0:11:38.000 --> 0:11:40.760
So application compatibility.

200
0:11:40.760 --> 0:11:43.200
There's two main things in compatibility.

201
0:11:43.200 --> 0:11:46.640
There's forward compatibility in a way that when you update

202
0:11:46.640 --> 0:11:50.640
your kernel, you still can use the old kernel features.

203
0:11:50.640 --> 0:11:52.440
So that's kind of common.

204
0:11:52.440 --> 0:11:54.440
And the backward compatibility in this case

205
0:11:54.440 --> 0:11:57.520
is when you're using a kernel feature,

206
0:11:57.520 --> 0:12:00.600
well, you might need a specification of the kernel

207
0:12:00.600 --> 0:12:02.160
that supports this feature.

208
0:12:02.160 --> 0:12:08.320
And if your application is launched on an old kernel,

209
0:12:08.320 --> 0:12:11.960
well, that feature might be missing.

210
0:12:11.960 --> 0:12:14.400
And the thing is, when you're developing an application,

211
0:12:14.400 --> 0:12:17.280
well, you don't know on which kernel your application will

212
0:12:17.280 --> 0:12:21.240
run, because, well, it's a user choice and a disk choice.

213
0:12:24.120 --> 0:12:26.000
What comes with Landlok is the ability

214
0:12:26.000 --> 0:12:30.240
to get the Landlok what we call the ADI version.

215
0:12:30.240 --> 0:12:33.200
So it's really just a number.

216
0:12:33.200 --> 0:12:34.920
That increment is started at one,

217
0:12:34.920 --> 0:12:37.440
and then increment for each new set

218
0:12:37.440 --> 0:12:40.520
of features which is added to the kernel.

219
0:12:40.520 --> 0:12:42.320
So to give you an idea, it's really

220
0:12:42.320 --> 0:12:45.240
simple to get this ID, this version.

221
0:12:45.240 --> 0:12:49.440
It's with Landlok rate rules at Cisco with a specific flag.

222
0:12:49.440 --> 0:12:52.920
So yeah, it's a T code, but it's really simple.

223
0:12:52.920 --> 0:12:57.840
So what we want to do at first was these four main properties.

224
0:12:57.840 --> 0:13:02.640
The first one is to be able to make it easy to use

225
0:13:02.640 --> 0:13:04.800
for developers, of course.

226
0:13:04.800 --> 0:13:08.840
So we want something which is generic, which

227
0:13:08.840 --> 0:13:11.280
kind of follows the build-up pattern, because, well,

228
0:13:11.280 --> 0:13:14.400
it's kind of common and easy to use.

229
0:13:14.400 --> 0:13:17.600
We want developers to focus on what they want to restrict,

230
0:13:17.600 --> 0:13:23.360
not the implementation in the kernel.

231
0:13:23.360 --> 0:13:30.520
And we want them to gradually go from a coarse-grained access

232
0:13:30.520 --> 0:13:32.600
restriction to a fine-grained one.

233
0:13:32.600 --> 0:13:37.880
So we don't want them to need to implement a fine-grained at

234
0:13:37.880 --> 0:13:39.000
first.

235
0:13:39.000 --> 0:13:40.640
It might be difficult to difficult.

236
0:13:40.640 --> 0:13:44.200
So yeah, it's the same way that we can incrementally

237
0:13:44.200 --> 0:13:45.880
add new set of features.

238
0:13:45.880 --> 0:13:49.240
We can also incrementally restrict more and more

239
0:13:49.240 --> 0:13:50.680
over time.

240
0:13:50.680 --> 0:13:54.200
No need to be super strict at first.

241
0:13:54.200 --> 0:14:00.640
And yeah, it should be simpler to write for the common cases.

242
0:14:00.640 --> 0:14:08.080
OK, at first, the first improvement was to create group

243
0:14:08.080 --> 0:14:09.200
access writes.

244
0:14:09.200 --> 0:14:15.200
So let's say you know which landlord version is supported

245
0:14:15.200 --> 0:14:16.520
by the running kernel.

246
0:14:16.520 --> 0:14:18.640
Let's say it's the second version.

247
0:14:18.640 --> 0:14:23.000
Then you can create a new rule set, which will get all the

248
0:14:23.000 --> 0:14:25.880
access writes which are supported by this specific

249
0:14:25.880 --> 0:14:27.160
kernel.

250
0:14:27.160 --> 0:14:31.200
So you just call the handle access with the access from

251
0:14:31.200 --> 0:14:33.920
all and then ABI2.

252
0:14:33.920 --> 0:14:36.680
And then you can do kind of the same when you're adding a

253
0:14:36.680 --> 0:14:37.440
new rule.

254
0:14:37.440 --> 0:14:41.560
And this time, well, you want to add an exception on the

255
0:14:41.560 --> 0:14:43.200
slash result to make it readable.

256
0:14:43.200 --> 0:14:46.920
So in this case, there's two main groups, the from read

257
0:14:46.920 --> 0:14:49.160
and the from writes.

258
0:14:49.160 --> 0:14:54.200
And for example, the from read includes reading a file, but

259
0:14:54.200 --> 0:14:55.760
also reading a directory.

260
0:14:55.760 --> 0:14:58.480
Listing a directory.

261
0:14:58.480 --> 0:15:03.640
OK, second property that we would like to have is being

262
0:15:03.640 --> 0:15:06.920
able to enforce a strict restriction.

263
0:15:06.920 --> 0:15:10.720
So even if we don't know on which kernel the

264
0:15:10.720 --> 0:15:15.400
eviction will run, on some cases, we might want to be sure

265
0:15:15.400 --> 0:15:18.960
that all features are enforced and restricted.

266
0:15:18.960 --> 0:15:20.360
There's two use cases here.

267
0:15:20.360 --> 0:15:22.240
The first one is to test it.

268
0:15:22.240 --> 0:15:24.960
If you want to sandbox some applications, you want to make

269
0:15:24.960 --> 0:15:27.840
sure that even if you're using all the

270
0:15:27.840 --> 0:15:29.720
standard scheme features, well, your application will

271
0:15:29.720 --> 0:15:31.440
work as expected.

272
0:15:31.440 --> 0:15:33.040
So that's really important.

273
0:15:33.040 --> 0:15:36.640
And you don't want to run your application in an old kernel

274
0:15:36.640 --> 0:15:39.260
and kind of be fooled by the fact that your

275
0:15:39.260 --> 0:15:43.000
application is running because there's no, well, not all

276
0:15:43.000 --> 0:15:44.400
security features are enabled.

277
0:15:44.400 --> 0:15:48.240
So you want to cut these kind of issues in your CI.

278
0:15:48.240 --> 0:15:50.680
And also for security software, well, you want to

279
0:15:50.680 --> 0:15:52.480
have some security guarantees.

280
0:15:52.480 --> 0:15:57.760
So you want to have a way to fold the whole sandboxing with

281
0:15:57.760 --> 0:16:01.760
all security features that we embedded in our application.

282
0:16:01.760 --> 0:16:05.720
The third property is to be able to enforce the best

283
0:16:05.720 --> 0:16:07.880
security with some minimal requirements.

284
0:16:07.880 --> 0:16:10.280
So that's kind of the opposite.

285
0:16:10.280 --> 0:16:14.240
And this use case is mainly for end users because end user,

286
0:16:14.240 --> 0:16:17.640
well, you don't know which kernel to be used.

287
0:16:17.640 --> 0:16:22.520
And so you want to be able to enforce an

288
0:16:22.520 --> 0:16:24.320
opportunistic sandboxing.

289
0:16:24.320 --> 0:16:29.160
So if they have a new kernel, well, they will be more

290
0:16:29.160 --> 0:16:30.520
protected.

291
0:16:30.520 --> 0:16:34.200
If they have an old kernel, they might not be protected

292
0:16:34.200 --> 0:16:36.360
at all, but that's not your choice.

293
0:16:36.360 --> 0:16:37.640
That's their choice.

294
0:16:37.640 --> 0:16:40.880
And at the end, they want to run your application anywhere.

295
0:16:40.880 --> 0:16:44.560
So another requirement is to be able to disable the whole

296
0:16:44.560 --> 0:16:45.320
sandboxing.

297
0:16:45.320 --> 0:16:49.920
If some features which are required may not be met.

298
0:16:49.920 --> 0:16:53.040
And this approach should be easier to write than others

299
0:16:53.040 --> 0:16:56.640
because it is the most common thing to do.

300
0:16:56.640 --> 0:17:00.880
And the last property is being able to run, well, to

301
0:17:00.880 --> 0:17:07.560
configure at runtime the sandboxing, but to make it in

302
0:17:07.560 --> 0:17:10.920
a way that you're running most of the codes.

303
0:17:10.920 --> 0:17:16.360
So the idea is to be able to have kind of the same code

304
0:17:16.360 --> 0:17:20.080
running everywhere almost, even if they don't

305
0:17:20.080 --> 0:17:21.920
have a recent kernel.

306
0:17:21.920 --> 0:17:23.320
Why that?

307
0:17:23.320 --> 0:17:29.320
Because you want to kind of identify early kind of some

308
0:17:29.320 --> 0:17:34.360
issues which might be linked to the sandboxing code.

309
0:17:34.360 --> 0:17:38.800
And that's if you have, let's say, two users using a

310
0:17:38.800 --> 0:17:41.760
recent kernel and four users using an old kernel, well, you

311
0:17:41.760 --> 0:17:46.160
might want to test as much as possible with all your users,

312
0:17:46.160 --> 0:17:50.760
even if they don't have a newer kernel.

313
0:17:50.760 --> 0:17:55.320
So the first approach we took was, so I'll go quickly here.

314
0:17:55.320 --> 0:17:56.160
There's three approaches.

315
0:17:56.160 --> 0:18:01.040
The first one was to add a new meter to the

316
0:18:01.040 --> 0:18:03.080
rule set builder pattern.

317
0:18:03.080 --> 0:18:07.960
So it was a simple method to set the best for approach.

318
0:18:07.960 --> 0:18:12.320
So if it was false, it was required to add these features.

319
0:18:12.320 --> 0:18:16.080
So in the example, an application that need to move

320
0:18:16.080 --> 0:18:19.200
files from one degree to another needed to add the

321
0:18:19.200 --> 0:18:23.960
accessFS refer access rights to allow this access.

322
0:18:23.960 --> 0:18:28.360
And if it wasn't the case, well, the thumb making should

323
0:18:28.360 --> 0:18:29.560
not be enforced.

324
0:18:29.560 --> 0:18:31.560
Otherwise, it will break the application.

325
0:18:31.560 --> 0:18:33.960
So that is a requirement.

326
0:18:33.960 --> 0:18:38.520
And in this case, that was a way to change the state of

327
0:18:38.520 --> 0:18:40.160
the builder over time.

328
0:18:40.160 --> 0:18:43.240
So this is flexible, easy to understand, but in some

329
0:18:43.240 --> 0:18:44.280
current cases.

330
0:18:44.280 --> 0:18:48.800
And it makes the code not really clean.

331
0:18:48.800 --> 0:18:53.680
Another approach was to do the same, but this time, instead

332
0:18:53.680 --> 0:18:59.520
of two shifts, enable or disable, there were three ways

333
0:18:59.520 --> 0:19:00.880
to change it.

334
0:19:00.880 --> 0:19:03.600
The best effort way, the soft requirement, and the hard

335
0:19:03.600 --> 0:19:04.400
requirement.

336
0:19:04.400 --> 0:19:07.880
So a way to make it best effort, a way to make it

337
0:19:07.880 --> 0:19:11.040
error if there is any unsupported feature, and a way

338
0:19:11.040 --> 0:19:14.840
to disable the sandbox without error if some

339
0:19:14.840 --> 0:19:16.520
feature were not supported.

340
0:19:16.520 --> 0:19:19.560
So that wasn't ideal, neither.

341
0:19:19.560 --> 0:19:25.000
And the last approach, which is currently working for us, is

342
0:19:25.000 --> 0:19:26.720
kind of a new one.

343
0:19:26.720 --> 0:19:31.080
So the idea is to make it still configurable and to follow

344
0:19:31.080 --> 0:19:35.720
all these properties, but to make it a bit simpler and

345
0:19:35.720 --> 0:19:36.880
still flexible.

346
0:19:36.880 --> 0:19:40.760
So here in actual, well, you can make a new rule set that

347
0:19:40.760 --> 0:19:43.440
will error out if there's any unsupported features.

348
0:19:43.440 --> 0:19:46.440
But at the same time, you can specify which feature is

349
0:19:46.440 --> 0:19:48.680
required to enable the sandbox or not.

350
0:19:48.680 --> 0:19:54.280
So that's kind of specific, but yeah, it should be better.

351
0:19:54.280 --> 0:19:58.400
So going forward, there's a lot going on in this first

352
0:19:58.400 --> 0:20:00.400
library, a lot to improve.

353
0:20:00.400 --> 0:20:02.880
You have a new helper, you get a recommendation.

354
0:20:02.880 --> 0:20:05.560
And I encourage you to send back your

355
0:20:05.560 --> 0:20:06.760
addiction or others.

356
0:20:06.760 --> 0:20:10.320
And well, there's some tips if you want to get some

357
0:20:10.320 --> 0:20:11.480
motivation here.

358
0:20:11.480 --> 0:20:13.280
It's a rewards program.

359
0:20:13.280 --> 0:20:14.560
So thank you for attention.

360
0:20:14.560 --> 0:20:16.840
There's some interesting link here.

361
0:20:16.840 --> 0:20:20.920
This talk was kind of a dance, but I hope you enjoyed.

362
0:20:20.920 --> 0:20:30.880
Thank you.


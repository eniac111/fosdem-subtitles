1
0:00:00.000 --> 0:00:07.000
Okay, continuing with the migration topic. There is a relatively new tool called Open

2
0:00:12.440 --> 0:00:15.920
Rewrite and you're going to hear all about it from Tim.

3
0:00:15.920 --> 0:00:22.520
Yeah, hi. So it's been mentioned a few times before so I hope I can live up to the hype.

4
0:00:22.520 --> 0:00:29.040
My name is Tim Tobeyk and I'm a staff software engineer at Moderna. But I recently started,

5
0:00:29.040 --> 0:00:35.240
just the start of this month. And before that I was a migration engineer as a consultant

6
0:00:35.240 --> 0:00:42.240
for five years. So what that means is I would walk into organizations familiarize myself

7
0:00:42.720 --> 0:00:48.520
with all the old technologies that they were still using and then hack away at lifting

8
0:00:48.520 --> 0:00:55.520
all those services up to the latest versions of Java and Spring. I would frequently find

9
0:00:55.520 --> 0:01:02.520
versions that have five to ten year old versions of Java or JUnit or Spring which is not ideal

10
0:01:03.560 --> 0:01:09.640
from either a security perspective or even a developer experience point of view.

11
0:01:09.640 --> 0:01:14.320
Initially I would migrate these services by hand. I would gradually introduce more and

12
0:01:14.320 --> 0:01:21.320
more forced automations. But then at the end of last year of the early last year I discovered

13
0:01:21.320 --> 0:01:28.320
OpenRewrite. And OpenRewrite is a tool that promises to make life work of all such migrations.

14
0:01:29.120 --> 0:01:33.640
I got so excited by this technology that I started to contribute and even present about

15
0:01:33.640 --> 0:01:40.640
this on conferences and then eventually quit my job to work on OpenRewrite full time. So

16
0:01:41.640 --> 0:01:47.640
after a nice sabbatical that brings us here today. Perhaps you faced some of the same

17
0:01:47.640 --> 0:01:54.440
challenges that I did at a conference like this. You will hear all about new framework

18
0:01:54.440 --> 0:02:01.440
and language features. Yeah, back at work you are stuck using Java 8 and JUnit 4. And

19
0:02:02.440 --> 0:02:09.040
migrating all of that by hand can seem daunting if it ever gets priority. I want to show you

20
0:02:09.040 --> 0:02:15.760
how easy it can be to perform major migrations. That way you too can adopt all the latest

21
0:02:15.760 --> 0:02:20.440
language and framework features. And it can be fun to adopt new language features such

22
0:02:20.440 --> 0:02:26.080
as records and text blocks. But you don't want to adopt these features manually or only

23
0:02:26.080 --> 0:02:31.520
on a single project. Instead we will look into automation to make all projects feel

24
0:02:31.520 --> 0:02:37.520
like new again. So you can benefit from JGM language and framework improvements.

25
0:02:37.520 --> 0:02:44.000
Here is a very brief overview of the types of migrations I will be talking about. Likely

26
0:02:44.000 --> 0:02:48.880
you already performed some of these migrations in the past. And other migrations are always

27
0:02:48.880 --> 0:02:54.560
just around the corner. If you look back over time there is a near constant stream of worthwhile

28
0:02:54.560 --> 0:02:59.320
improvements to percolate. And I like the challenge. I still get excited whenever a

29
0:02:59.320 --> 0:03:06.000
new version comes out. I just don't like the repetitive elements that come with upgrading.

30
0:03:06.000 --> 0:03:11.120
And if you try to keep up my hand you will hardly get anything else done. Especially

31
0:03:11.120 --> 0:03:17.760
as microservices these days mean you are not just upgrading once but dozens of times. Automation

32
0:03:17.760 --> 0:03:25.480
may then be the only option. Especially for companies using thousands of services.

33
0:03:25.480 --> 0:03:30.920
To open rewrite you can now migrate between versions of Java and Spring with a simple

34
0:03:30.920 --> 0:03:37.440
command. You can even migrate between frameworks such as from JUnit to the search A and from

35
0:03:37.440 --> 0:03:44.600
Java EE to Spring. In this talk I will tell you all about OpenRear, how it came about,

36
0:03:44.600 --> 0:03:49.840
how it works and what you can do with it. And finally we will briefly look at who is

37
0:03:49.840 --> 0:03:56.680
developing these recipes and how to apply them to open source projects.

38
0:03:56.680 --> 0:04:01.960
OpenRear was developed at Netflix initially to aid in the migration of an internal login

39
0:04:01.960 --> 0:04:09.040
framework to SLF4J. You can probably imagine that any login framework is going to be pervasive

40
0:04:09.040 --> 0:04:17.800
throughout an organization. To even consider migrating you need perfectly accurate automation.

41
0:04:17.800 --> 0:04:24.240
So they, especially when usage is spread across hundreds of services, so they develop a parser

42
0:04:24.240 --> 0:04:31.040
to accurately read Java and turn the source code into a lossless semantic tree. This model

43
0:04:31.040 --> 0:04:38.040
can then be modified to replace the old learning statements with calls to SLF4J.

44
0:04:38.040 --> 0:04:43.240
Next the migrated model is written out as close as possible to the original source code.

45
0:04:43.240 --> 0:04:50.280
That way the applied changes are minimal, leaving surrounding codes untouched.

46
0:04:50.280 --> 0:04:54.840
Later the same developers moved on to work on Spinnaker and while trying to onboard teams

47
0:04:54.840 --> 0:05:00.200
and organizations there, they found that teams often struggled with the same outdated languages

48
0:05:00.200 --> 0:05:15.280
and frameworks. To help teams adopt the latest versions, they applied a different set of

49
0:05:15.280 --> 0:05:27.360
migration recipes through the same lossless semantic tree parser. This allowed them to

50
0:05:27.360 --> 0:05:27.360
quickly reduce this technical depth and bring teams from Springb

51
0:05:29.360 --> 0:05:40.600
one to Springb two and from JU4 to JU5. The project has since been open source with the

52
0:05:40.600 --> 0:05:45.280
company behind it committed to making all recipes available on the Apache license for

53
0:05:45.280 --> 0:05:52.320
open source software. The initial focus for open rewrite is on the Java virtual machine

54
0:05:52.320 --> 0:05:58.480
languages and surrounding technologies. There are parses for instance for Java, Groovy,

55
0:05:58.480 --> 0:06:04.680
Gummel and XML and these in turn unlock support for built-in such as Maven and Gradle and

56
0:06:04.680 --> 0:06:12.360
libraries such as JUnit, AssurJ and Guava. Ultimately refactoring entire frameworks and

57
0:06:12.360 --> 0:06:22.600
platforms is supported with recipes available for application frames such as Micronaut,

58
0:06:22.600 --> 0:06:26.560
Barkis and Springb. Open rewrite is not the only parser capable of understanding and manipulating

59
0:06:26.560 --> 0:06:34.000
Java. However, three features set open rewrite apart from the competition. The first is to

60
0:06:34.000 --> 0:06:40.280
focus on exact type attribution. By having the exact type available on any tree element,

61
0:06:40.280 --> 0:06:46.840
we can be sure to only manipulate exact matches. The second characteristics that sets open

62
0:06:46.840 --> 0:06:53.280
rewrite apart is the form of precipitation. The parser not only takes into account the

63
0:06:53.280 --> 0:06:59.920
functional code but also the surrounding code style and implementation. This allows us to

64
0:06:59.920 --> 0:07:05.880
accurately reproduce your source code regardless of further changes. Changes made through open

65
0:07:05.880 --> 0:07:11.760
rewrite look just like a colleague worked on your code. And finally, the stabilization

66
0:07:11.760 --> 0:07:18.920
format ensures you're able to query and refactor your code faster and at scale. Together these

67
0:07:18.920 --> 0:07:25.320
features make open rewrite exceptionally good at safe code transformations especially as

68
0:07:25.320 --> 0:07:31.880
the changes are minimally invasive and guaranteed to work in farther than due to the do-no-harm

69
0:07:31.880 --> 0:07:38.400
mentality. By manipulating the full lossless semantic tree, open rewrite can far exceed

70
0:07:38.400 --> 0:07:45.880
simple search and replace operations. With the full lossless semantic tree built, we

71
0:07:45.880 --> 0:07:51.760
need to instruct open rewrite what operations to apply and where in your code. Recipes are

72
0:07:51.760 --> 0:07:57.520
how you define such a group of search and refactoring operations. Together they accomplish

73
0:07:57.520 --> 0:08:03.920
a higher level task such as framework migration. Recipes can persist of a single standalone

74
0:08:03.920 --> 0:08:11.420
operation or be linked together with other recipes. Open rewrite comes with a large collection

75
0:08:11.420 --> 0:08:17.080
of fine-grained recipes out of the box that can be combined for common migration steps.

76
0:08:17.080 --> 0:08:22.640
You can think of these as LEGO building blocks ready to be applied with the proper parameters.

77
0:08:22.640 --> 0:08:27.880
There are hundreds of these building blocks to, for instance, change types, change methods,

78
0:08:27.880 --> 0:08:35.320
change arguments, manipulate properties and alter dependencies and plug-ins. Individual

79
0:08:35.320 --> 0:08:40.920
recipes are implemented as Java visitors that first match and then modify elements of the

80
0:08:40.920 --> 0:08:46.520
lossless semantic tree. There are plenty of examples available but notice that you only

81
0:08:46.520 --> 0:08:51.800
need a dedicated Java visitor but none of the existing recipes can already achieve your

82
0:08:51.800 --> 0:08:58.400
goals. Typically you can get very far, only combining, configuring, combining, applying

83
0:08:58.400 --> 0:09:06.240
existing recipes through a YAML description form. Modules then group together these fine-grained

84
0:09:06.240 --> 0:09:13.440
recipes into more coarse-grained application-specific recipes. There are modules, for example, for

85
0:09:13.440 --> 0:09:19.320
loading frameworks, testing frameworks and application frameworks such as Spring. Think

86
0:09:19.320 --> 0:09:26.480
of these as LEGO sets with built plans for common migrations ready to be applied. In

87
0:09:26.480 --> 0:09:32.440
my opinion, the lossless semantic tree combined with a large collection of fine-grained recipes

88
0:09:32.440 --> 0:09:39.960
is what sets OpenRide apart from other similar tools such as error problems we fastened.

89
0:09:39.960 --> 0:09:45.520
I want to show you how migration recipes are configured in OpenRide. Let's briefly look

90
0:09:45.520 --> 0:09:51.760
at a migration from JUnit 4 to JUnit 5. I want you to imagine the steps of what we needed

91
0:09:51.760 --> 0:09:59.400
to such a migration. You've likely applied some of those steps already in the path. Among

92
0:09:59.400 --> 0:10:05.080
others you'd have to update the test annotations. But you would also have to update the assertions

93
0:10:05.080 --> 0:10:10.760
and sometimes the argument order. You'd have to update all imports and update any test

94
0:10:10.760 --> 0:10:16.560
rules and that's just getting started. Notice how each of these steps is reflected as a

95
0:10:16.560 --> 0:10:22.760
separate recipe in this JAML configuration form. Some refer to and configure the NERIC

96
0:10:22.760 --> 0:10:29.440
step, such as the change type recipe. Others are implemented as an imperative step, a dedicated

97
0:10:29.440 --> 0:10:35.360
Java visitor that changes the lossless semantic tree. All these steps combine to achieve a

98
0:10:35.360 --> 0:10:42.600
typical key JUnit 5 migration. This is a common pattern with OpenRide. Large migrations are

99
0:10:42.600 --> 0:10:50.960
broken up into small, reusable steps. When we run this recipe we get predictable results.

100
0:10:50.960 --> 0:10:56.960
Our imports are replaced as we would expect and our Makito runner is replaced into using

101
0:10:56.960 --> 0:11:04.240
the extension. Lifecycle annotations such as that before are correctly replaced. But

102
0:11:04.240 --> 0:11:09.440
interestingly we can see how OpenRide shines through when it comes to converting expected

103
0:11:09.440 --> 0:11:16.320
exceptions. Having the full power of a lossless semantic tree combined with a Java visitor

104
0:11:16.320 --> 0:11:21.440
allows us to adopt a search phrase. It's these types of changes that would not be possible

105
0:11:21.440 --> 0:11:29.440
with a regular expression approach. Running migration recipes is fairly straightforward.

106
0:11:29.440 --> 0:11:35.160
First you apply a build tool plugin for OpenRide. I've used Maven in my example but Gradle works

107
0:11:35.160 --> 0:11:41.360
just as well. Then depending on the changes you want to make you add a dependency on the

108
0:11:41.360 --> 0:11:47.840
respective OpenRide module. Lastly you run the OpenRide plugin with the migration recipe

109
0:11:47.840 --> 0:11:53.240
that you want to execute. The command scene here will migrate an application from Spring Boot

110
0:11:53.240 --> 0:12:02.440
1.5 to the latest Spring Boot 2.7 branch. And we're also working on a 3.0 migration.

111
0:12:02.440 --> 0:12:08.880
And this migration works all the way back to Spring Boot 1.5. It will update dependencies,

112
0:12:08.880 --> 0:12:15.040
properties and deprecations from any older versions. And it includes the JUnit 5 migration

113
0:12:15.040 --> 0:12:21.160
we've seen before. As well as any Spring specific test constructs.

114
0:12:21.160 --> 0:12:25.680
So now that we've seen how OpenRide works, let's have a look at what you can do with

115
0:12:25.680 --> 0:12:32.840
it. Obviously by now we've seen it is well suited to migrations. You've mostly seen migrations

116
0:12:32.840 --> 0:12:39.120
from one version to another. But you can also migrate from one framework to another. If

117
0:12:39.120 --> 0:12:44.360
you want to switch from LagerJ to Ocelot4J you can. And the same thing if you want to

118
0:12:44.360 --> 0:12:52.160
switch between JUnit and AssertJ. And even larger migrations are in development.

119
0:12:52.160 --> 0:12:57.440
Another application is fixing static analysis findings. A large collection of check style,

120
0:12:57.440 --> 0:13:02.840
sonar and security findings are supported to allow you to reduce your technical debt

121
0:13:02.840 --> 0:13:09.880
in minutes. And finally there's a whole class of recipes to enforce a code style. And rather

122
0:13:09.880 --> 0:13:15.760
than merely apply a formatter, these style recipes go a step further to actually change

123
0:13:15.760 --> 0:13:21.720
your code. And this ensures your code style is consistently from project to project. And

124
0:13:21.720 --> 0:13:26.440
in addition to what's already available, it's fairly easy to add custom migration recipes

125
0:13:26.440 --> 0:13:32.440
specific to your project. So now that we've seen how it works and what

126
0:13:32.440 --> 0:13:37.880
you can do with it, let's briefly look ahead at what is still to come. As you've seen,

127
0:13:37.880 --> 0:13:43.960
Kotlin remote has dedicated parses for multiple languages already. But we have some catching

128
0:13:43.960 --> 0:13:51.280
up to do still. We are working on a parser for both Java 18 and up and Kotlin. But note

129
0:13:51.280 --> 0:13:56.360
that you're perfectly able to run on Java 17. But you cannot yet migrate to some of

130
0:13:56.360 --> 0:14:01.920
the new language features. The interesting thing about Kotlin is going to be that the

131
0:14:01.920 --> 0:14:06.520
Java migration recipes that we have will also just work even though the languages look very

132
0:14:06.520 --> 0:14:13.680
different. Another subject we're working on is data flow analysis. And this not only takes

133
0:14:13.680 --> 0:14:21.520
into account the individual code statements, but also how data flows throughout your application.

134
0:14:21.520 --> 0:14:29.800
This will allow recipes to, for instance, add immutability or dedicate to security fixes.

135
0:14:29.800 --> 0:14:34.920
Another interesting development is the Spring Boot Margarit project from VMware. It builds

136
0:14:34.920 --> 0:14:41.680
upon OpenVRide to migrate projects towards Spring for mother frameworks. It takes a slightly

137
0:14:41.680 --> 0:14:46.440
different, more interactive approach, which will be a coming handy one when it comes to

138
0:14:46.440 --> 0:14:52.800
the Spring Boot 3 migration. All these features are in active development. It's not yet clear

139
0:14:52.800 --> 0:14:59.800
when you can use this in a production setting, but it's interesting developments nonetheless.

140
0:14:59.800 --> 0:15:04.600
As a last subject, I want to tell you a bit about the content behind OpenVRide. As I said

141
0:15:04.600 --> 0:15:11.280
before, Moderna has committed to making all recipes available open source. Our focus is

142
0:15:11.280 --> 0:15:16.800
on applying recipes at scale. Through Moderna, clients can discover code patterns across

143
0:15:16.800 --> 0:15:23.160
an entire organization and target these for transformation. And even if you're not a paying

144
0:15:23.160 --> 0:15:28.160
customer, you can still use the web interface to browse available recipes and even apply

145
0:15:28.160 --> 0:15:32.960
them to open source projects. This can be a great way to start contributing back to open

146
0:15:32.960 --> 0:15:38.840
source software. And if you find any of the migration steps are missing, OpenVRide itself

147
0:15:38.840 --> 0:15:44.880
is very accepting of new contributions. The community plays a large role in the development

148
0:15:44.880 --> 0:15:52.280
of new recipes. Now, as you could probably tell from my email address, we're not exactly

149
0:15:52.280 --> 0:15:58.440
a big company, but we're pretty well connected in the broader Java community. Through collaborations,

150
0:15:58.440 --> 0:16:03.640
other companies contribute migration recipes for their own works. And this ensures their

151
0:16:03.640 --> 0:16:10.920
users are able to migrate easily and timely between the releases. And if you maintain

152
0:16:10.920 --> 0:16:17.240
or merely enjoy a particular library or framework, you can help other users by providing migration

153
0:16:17.240 --> 0:16:24.240
recipes. So with that, we are getting near the end of my presentation. Before I think

154
0:16:24.240 --> 0:16:29.320
I can join away, I want to recommend a few resources where you can learn more. There's

155
0:16:29.320 --> 0:16:36.040
extensive documentation available on OpenVRide. Development is all on GitHub with new suggestions

156
0:16:36.040 --> 0:16:41.520
typically picked up with surprising speed. And as you've already seen, it's quite easy

157
0:16:41.520 --> 0:16:48.440
to contribute minor migration steps. If you want to try some recipes quickly on open source

158
0:16:48.440 --> 0:16:54.400
software, have a look at public.moderno.io. And if you have any questions, you can reach

159
0:16:54.400 --> 0:17:01.000
out on our public slide or via email. And finally, if you would like to play around

160
0:17:01.000 --> 0:17:07.560
with the commands you've seen before, I've written a blog post to accompany this presentation.

161
0:17:07.560 --> 0:17:12.320
This blog post migrates an old Spring path clinic branch from Spring Boot 1.5 to Spring

162
0:17:12.320 --> 0:17:19.320
Boot 2.8 to Spring Boot 2.x on Java 17. That way you can play around with the commands

163
0:17:19.320 --> 0:17:25.080
and see the changes made every step. For your own projects, I recommend you start with the

164
0:17:25.080 --> 0:17:30.000
testing framework migration. They're an easy way to gain confidence in the tool and see

165
0:17:30.000 --> 0:17:35.000
what it can do for your projects. And with that, I'd like to thank you for your attention.

166
0:17:35.000 --> 0:17:47.280
It's also really great about Tim's story is that he was enthusiastic about a project.

167
0:17:47.280 --> 0:17:52.120
He started contributing to it and now he was offered a job and he's working at the company

168
0:17:52.120 --> 0:18:00.040
behind this project. It's really the textbook story of starting, contributing, and then

169
0:18:00.040 --> 0:18:05.360
getting paid to do that and joining the company behind the project. So thank you very much.


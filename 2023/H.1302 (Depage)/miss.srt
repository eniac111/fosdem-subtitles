1
0:00:00.000 --> 0:00:09.000
Thanks to be here. Thanks for missing your lunch.

2
0:00:09.000 --> 0:00:13.000
And let me rant about Kotlin. I'm Nicolas Frankel.

3
0:00:13.000 --> 0:00:16.000
I've been a developer for like now more than 20 years.

4
0:00:16.000 --> 0:00:18.000
Perhaps I'm not a developer anymore.

5
0:00:18.000 --> 0:00:21.000
I'm a developer advocate, but I still see myself as a developer.

6
0:00:21.000 --> 0:00:25.000
I love developing. Right now I work on the Apache

7
0:00:25.000 --> 0:00:31.000
API 6 gateway. It has nothing to do with Java.

8
0:00:31.000 --> 0:00:34.000
It's just an infrastructure component.

9
0:00:34.000 --> 0:00:38.000
But since they allow me to be here, here is the slide.

10
0:00:38.000 --> 0:00:43.000
Anyway, why am I talking about Kotlin in a Java room?

11
0:00:43.000 --> 0:00:46.000
Well, they didn't want me to talk about Kotlin in the Kotlin room.

12
0:00:46.000 --> 0:00:50.000
So that might be one of the reasons.

13
0:00:50.000 --> 0:00:56.000
And also I've mentioned I have like two decades of coding experience.

14
0:00:56.000 --> 0:00:59.000
And those two decades were spent in Java.

15
0:00:59.000 --> 0:01:05.000
So I started with Java 1.3, perhaps.

16
0:01:05.000 --> 0:01:11.000
And well, there were like big wins and small losses.

17
0:01:11.000 --> 0:01:16.000
And I tried Scala. And I didn't like it at all.

18
0:01:16.000 --> 0:01:22.000
I still have the certificates saying, hey, you are like Scala certified.

19
0:01:22.000 --> 0:01:25.000
I didn't like it for multiple reasons.

20
0:01:25.000 --> 0:01:28.000
Then I went to a couple of conferences.

21
0:01:28.000 --> 0:01:32.000
I had a friend. And she made also talks about Kotlin.

22
0:01:32.000 --> 0:01:36.000
And I said, we don't need Kotlin. We have Java. It's enough.

23
0:01:36.000 --> 0:01:41.000
Then I wanted to teach myself Android development.

24
0:01:41.000 --> 0:01:45.000
And Android development at the time was only in Java.

25
0:01:45.000 --> 0:01:48.000
And the API was super low level.

26
0:01:48.000 --> 0:01:52.000
And I said, no, I cannot write such like code that it brings me back 15 years ago

27
0:01:52.000 --> 0:01:55.000
when I was writing Java on the server side.

28
0:01:55.000 --> 0:01:58.000
And I looked for solutions and I found Kotlin.

29
0:01:58.000 --> 0:02:02.000
And I thought, wow, that's cool.

30
0:02:02.000 --> 0:02:08.000
And I stopped learning Android. And now I write Kotlin on the backend.

31
0:02:08.000 --> 0:02:11.000
So just a disclaimer.

32
0:02:11.000 --> 0:02:15.000
If Java is the best language in the world for you, just leave the room.

33
0:02:15.000 --> 0:02:19.000
I'm not trying to bash Java. But depending on your culture,

34
0:02:19.000 --> 0:02:22.000
I'm pretty straightforward. You might feel offended.

35
0:02:22.000 --> 0:02:26.000
So better leave now. It's up to you.

36
0:02:26.000 --> 0:02:29.000
Okay. Let's start slow.

37
0:02:29.000 --> 0:02:34.000
Immutable references. I'm telling you, hey, it's better in Kotlin.

38
0:02:34.000 --> 0:02:37.000
And you can tell me, hey, Java has it. Right?

39
0:02:37.000 --> 0:02:39.000
Immutable references.

40
0:02:39.000 --> 0:02:43.000
Okay. Let's try to check how it works.

41
0:02:43.000 --> 0:02:47.000
Immutable references in Java. Oh, fun stuff.

42
0:02:47.000 --> 0:02:51.000
Immutable references in Java.

43
0:02:51.000 --> 0:02:56.000
So here, this is my immutable reference class.

44
0:02:56.000 --> 0:03:00.000
So I have to put final here.

45
0:03:00.000 --> 0:03:04.000
I have to put final here. And I have to put final here.

46
0:03:04.000 --> 0:03:06.000
Now I have immutable references.

47
0:03:06.000 --> 0:03:09.000
Who puts final everywhere?

48
0:03:09.000 --> 0:03:11.000
A couple of people.

49
0:03:11.000 --> 0:03:13.000
No, really.

50
0:03:13.000 --> 0:03:17.000
We had this idea 15 years ago.

51
0:03:17.000 --> 0:03:23.000
And then we decided, no, it just makes the reading so much harder.

52
0:03:23.000 --> 0:03:25.000
So perhaps not.

53
0:03:25.000 --> 0:03:29.000
Even worse, if you don't put final on the parameter,

54
0:03:29.000 --> 0:03:32.000
you can actually relocate stuff,

55
0:03:32.000 --> 0:03:35.000
which I believe is one of the worst things you can do.

56
0:03:35.000 --> 0:03:38.000
Like, really, really, really bad.

57
0:03:38.000 --> 0:03:41.000
So I'm not saying that Java doesn't have it,

58
0:03:41.000 --> 0:03:45.000
but I'm saying that in Kotlin, it's from the beginning,

59
0:03:45.000 --> 0:03:49.000
you need to decide whether it's a var,

60
0:03:49.000 --> 0:03:51.000
which means it cannot be reassigned,

61
0:03:51.000 --> 0:03:54.000
or it's a var, which means it can be reassigned.

62
0:03:54.000 --> 0:03:58.000
If you are using IntelliJ, I don't know about Eclipse or NetBeans.

63
0:03:58.000 --> 0:04:01.000
The good thing is that if I say it's a var,

64
0:04:01.000 --> 0:04:04.000
so it can be reassigned, it tells me, hey, like,

65
0:04:04.000 --> 0:04:06.000
there is something fishy.

66
0:04:06.000 --> 0:04:11.000
It's not an error per se, but at least it's visually pleasing.

67
0:04:11.000 --> 0:04:15.000
And, of course, by default,

68
0:04:15.000 --> 0:04:20.000
for who don't know, any is the equivalent of object,

69
0:04:20.000 --> 0:04:22.000
so it's not very important.

70
0:04:22.000 --> 0:04:23.000
I could write object.

71
0:04:23.000 --> 0:04:25.000
By default, you cannot reassign parameters.

72
0:04:25.000 --> 0:04:29.000
Any language that allows you to reassign parameters

73
0:04:29.000 --> 0:04:33.000
should be taken with, like, utmost caution.

74
0:04:33.000 --> 0:04:37.000
It's actually not a great design ID.

75
0:04:37.000 --> 0:04:39.000
So, of course, Java was designed a long time ago,

76
0:04:39.000 --> 0:04:42.000
doesn't have it, but Kotlin takes the lesson.

77
0:04:42.000 --> 0:04:46.000
And if you think that vol and var are coming from Scala

78
0:04:46.000 --> 0:04:48.000
because you are a Scala fanboy,

79
0:04:48.000 --> 0:04:49.000
that's completely true.

80
0:04:49.000 --> 0:04:51.000
Kotlin has stolen every good ID.

81
0:04:51.000 --> 0:04:54.000
So don't pretend otherwise.

82
0:04:54.000 --> 0:04:56.000
That's fine.

83
0:04:56.000 --> 0:04:58.000
Okay.

84
0:04:58.000 --> 0:05:01.000
Second, immutable classes.

85
0:05:01.000 --> 0:05:03.000
Well, that's fine. Now we have Java records.

86
0:05:03.000 --> 0:05:04.000
We've got them.

87
0:05:04.000 --> 0:05:05.000
That's fine.

88
0:05:05.000 --> 0:05:06.000
Let's continue.

89
0:05:06.000 --> 0:05:07.000
Null safety.

90
0:05:07.000 --> 0:05:13.000
Null safety in Java is not that fun, right?

91
0:05:13.000 --> 0:05:18.000
How many ways do you have to implement null safeties in Java?

92
0:05:18.000 --> 0:05:21.000
That's a good thing.

93
0:05:21.000 --> 0:05:22.000
Ah, yeah, that's a good thing.

94
0:05:22.000 --> 0:05:25.000
Diversity is a good thing because we work in IT.

95
0:05:25.000 --> 0:05:30.000
And if you want to really, like, have fun,

96
0:05:30.000 --> 0:05:33.000
you might check, like, nullable, nullable, nullable,

97
0:05:33.000 --> 0:05:35.000
nullable, nullable, nullable, nullable, nullable,

98
0:05:35.000 --> 0:05:38.000
oh, not null, no, no, no, no, no.

99
0:05:38.000 --> 0:05:41.000
Well, I'm sorry, sorry?

100
0:05:41.000 --> 0:05:43.000
Not capitalized under the first node.

101
0:05:43.000 --> 0:05:44.000
Yeah, exactly.

102
0:05:44.000 --> 0:05:45.000
I'm not sure it's an error.

103
0:05:45.000 --> 0:05:48.000
I think I just copy-pasted, so I'm not sure.

104
0:05:48.000 --> 0:05:50.000
Yeah, that's really fun stuff.

105
0:05:50.000 --> 0:05:53.000
And, of course, they won't work with one another.

106
0:05:53.000 --> 0:05:56.000
So you need to have the preprocessor.

107
0:05:56.000 --> 0:05:59.000
Sorry, you need to have the compile-time processor,

108
0:05:59.000 --> 0:06:02.000
and you need to choose which library you will be using.

109
0:06:02.000 --> 0:06:06.000
And then you hope that somehow it will work.

110
0:06:06.000 --> 0:06:09.000
Dukes, in Kotlin, what do we have?

111
0:06:09.000 --> 0:06:11.000
Well, it's baked into language.

112
0:06:11.000 --> 0:06:16.000
So basically, here I was too lazy to write it in Java,

113
0:06:16.000 --> 0:06:19.000
but basically, if you write something in Kotlin,

114
0:06:19.000 --> 0:06:20.000
you have additional types.

115
0:06:20.000 --> 0:06:24.000
So basically, for every, like, normal type,

116
0:06:24.000 --> 0:06:28.000
this is a nullable type, and this says

117
0:06:28.000 --> 0:06:31.000
it's a nullable type.

118
0:06:31.000 --> 0:06:34.000
It means that if you are calling something

119
0:06:34.000 --> 0:06:40.000
on a non-nullable type, you can call whatever you want,

120
0:06:40.000 --> 0:06:43.000
plus whatever.

121
0:06:43.000 --> 0:06:51.000
And if you call something on a nullable type,

122
0:06:51.000 --> 0:06:53.000
Kotlin will say, oh, it was saying something,

123
0:06:53.000 --> 0:06:55.000
and now it doesn't say it.

124
0:06:55.000 --> 0:07:03.000
Yes, because plus is smart.

125
0:07:03.000 --> 0:07:09.000
Plus knows how to operate on nullable types.

126
0:07:09.000 --> 0:07:18.000
But let's do something that is not safe,

127
0:07:18.000 --> 0:07:21.000
which is, it's also very smart.

128
0:07:21.000 --> 0:07:26.000
The library is too smart for me.

129
0:07:26.000 --> 0:07:32.000
Yeah, empty.

130
0:07:32.000 --> 0:07:34.000
Reversed?

131
0:07:34.000 --> 0:07:36.000
Yeah, finally, thanks.

132
0:07:36.000 --> 0:07:39.000
And it tells you, hey, you know, this might be nullable,

133
0:07:39.000 --> 0:07:41.000
so please don't call it like this,

134
0:07:41.000 --> 0:07:45.000
because there is a chance you might encounter a null pointer

135
0:07:45.000 --> 0:07:48.000
at runtime, and yeah, you should take care.

136
0:07:48.000 --> 0:07:51.000
And well, afterwards it's quite easy.

137
0:07:51.000 --> 0:07:53.000
You can do this stuff.

138
0:07:53.000 --> 0:07:55.000
I mean, if you have been doing Groovy,

139
0:07:55.000 --> 0:08:00.000
or I think Scala does it too, but the compiler tells you,

140
0:08:00.000 --> 0:08:03.000
you should be careful about this.

141
0:08:03.000 --> 0:08:05.000
And again, it's backed into the language,

142
0:08:05.000 --> 0:08:09.000
so for every type, there are two real types,

143
0:08:09.000 --> 0:08:13.000
one that might be nullable, the other might not be nullable.

144
0:08:13.000 --> 0:08:15.000
The good thing with, I will show you

145
0:08:15.000 --> 0:08:18.000
after where a section function, you can write extension function

146
0:08:18.000 --> 0:08:23.000
that work on nullable type, which is really, really crazy.

147
0:08:23.000 --> 0:08:24.000
Good.

148
0:08:24.000 --> 0:08:33.000
So second stuff, better.

149
0:08:33.000 --> 0:08:36.000
The utils classes.

150
0:08:36.000 --> 0:08:43.000
Who has not written a single unit utils classes in their life?

151
0:08:43.000 --> 0:08:44.000
Nobody.

152
0:08:44.000 --> 0:08:49.000
So even people younger than 30 have written them.

153
0:08:49.000 --> 0:08:51.000
In general, there might be a divide,

154
0:08:51.000 --> 0:08:54.000
because all the developers have written them,

155
0:08:54.000 --> 0:08:59.000
the younger ones, they are smart enough to use the library,

156
0:08:59.000 --> 0:09:03.000
but the thing is, well, at our age there was no library.

157
0:09:03.000 --> 0:09:08.000
So basically, we say that Java is an object-oriented language,

158
0:09:08.000 --> 0:09:11.000
and then we put everything in a class,

159
0:09:11.000 --> 0:09:13.000
we put static methods in the class,

160
0:09:13.000 --> 0:09:16.000
and we pretend that it's object-oriented.

161
0:09:16.000 --> 0:09:17.000
Right?

162
0:09:17.000 --> 0:09:18.000
Yes.

163
0:09:18.000 --> 0:09:20.000
Yes.

164
0:09:20.000 --> 0:09:22.000
Well, let's not pretend it's object-oriented.

165
0:09:22.000 --> 0:09:26.000
If it's no object, a static class with static methods

166
0:09:26.000 --> 0:09:28.000
is not object-oriented.

167
0:09:28.000 --> 0:09:33.000
So here, I have created my amazing string utils class,

168
0:09:33.000 --> 0:09:36.000
and of course, I need to remember,

169
0:09:36.000 --> 0:09:40.000
because the users of my class, well, they might instantiate it,

170
0:09:40.000 --> 0:09:43.000
so I will just remove the constructor,

171
0:09:43.000 --> 0:09:46.000
make it private, again, very object-oriented,

172
0:09:46.000 --> 0:09:50.000
and then I create this capitalize stuff,

173
0:09:50.000 --> 0:09:52.000
and I do whatever I want,

174
0:09:52.000 --> 0:09:55.000
and then I can call the capitalize method.

175
0:09:55.000 --> 0:09:57.000
Good.

176
0:09:57.000 --> 0:10:02.000
Scala and Kotlin have, I think, like, similar stuff.

177
0:10:02.000 --> 0:10:08.000
Let's not pretend we are an object-oriented language.

178
0:10:08.000 --> 0:10:12.000
We can just add methods, end states,

179
0:10:12.000 --> 0:10:20.000
but mostly methods, on existing classes.

180
0:10:20.000 --> 0:10:22.000
That's crazy.

181
0:10:22.000 --> 0:10:23.000
Yeah.

182
0:10:23.000 --> 0:10:26.000
Of course, at the bytecode level,

183
0:10:26.000 --> 0:10:29.000
it boils down to a static method.

184
0:10:29.000 --> 0:10:30.000
That's not the problem.

185
0:10:30.000 --> 0:10:32.000
The problem is the user experience,

186
0:10:32.000 --> 0:10:34.000
is the developer experience.

187
0:10:34.000 --> 0:10:40.000
We can see now that we are really doing here,

188
0:10:40.000 --> 0:10:45.000
we actually are doing object-oriented development.

189
0:10:45.000 --> 0:10:48.000
So through this functional stuff,

190
0:10:48.000 --> 0:10:51.000
because here we create a function

191
0:10:51.000 --> 0:10:54.000
that is at the root level,

192
0:10:54.000 --> 0:10:59.000
we are able to write better object-oriented code,

193
0:10:59.000 --> 0:11:02.000
which is mind-blowing.

194
0:11:02.000 --> 0:11:06.000
Even better, as I mentioned,

195
0:11:06.000 --> 0:11:09.000
we can say, hey, this only applies,

196
0:11:09.000 --> 0:11:16.000
so here we can have var f of type string might be null,

197
0:11:16.000 --> 0:11:18.000
so this is a nullable type,

198
0:11:18.000 --> 0:11:22.000
and here we cannot say f dot capitalize,

199
0:11:22.000 --> 0:11:25.000
because it's null, right?

200
0:11:25.000 --> 0:11:27.000
It's a nullable type.

201
0:11:27.000 --> 0:11:29.000
Here it only applies to real strings,

202
0:11:29.000 --> 0:11:32.000
but we can do something like this.

203
0:11:32.000 --> 0:11:35.000
We can say, hey, it might be a nullable type,

204
0:11:35.000 --> 0:11:41.000
and we can check if this equals null,

205
0:11:41.000 --> 0:11:47.000
then we return the default, which might be an empty string.

206
0:11:47.000 --> 0:11:51.000
Yeah, I see like, what the hell?

207
0:11:51.000 --> 0:11:53.000
Static, yeah.

208
0:11:53.000 --> 0:11:55.000
And in the end, that's a static method,

209
0:11:55.000 --> 0:11:59.000
but how you call it is like object-oriented,

210
0:11:59.000 --> 0:12:02.000
which, in my opinion, makes like Kotlin

211
0:12:02.000 --> 0:12:06.000
much more object-oriented than Java will ever be.

212
0:12:06.000 --> 0:12:09.000
Well, will ever be, no, I'm not sure.

213
0:12:09.000 --> 0:12:12.000
Let's see what we have in the future.

214
0:12:12.000 --> 0:12:15.000
So that's already good stuff.

215
0:12:15.000 --> 0:12:22.000
And then, oof, ray fight generics, right?

216
0:12:22.000 --> 0:12:28.000
Who has been bitten by the lack of ray fight generics already?

217
0:12:28.000 --> 0:12:30.000
Yeah, yeah.

218
0:12:30.000 --> 0:12:33.000
So I have a collection of thingy and a collection of foo,

219
0:12:33.000 --> 0:12:38.000
and, well, at runtime you have nothing.

220
0:12:38.000 --> 0:12:47.000
So here, the trick when you do Java is to pass the class.

221
0:12:47.000 --> 0:12:49.000
So here is taken from Spring.

222
0:12:49.000 --> 0:12:54.000
And when you get a bin, you say, hey, I want a bin of class

223
0:12:54.000 --> 0:12:58.000
whatever, and then you will get the whatever.

224
0:12:58.000 --> 0:12:59.000
OK?

225
0:12:59.000 --> 0:13:02.000
How can we do it in Kotlin?

226
0:13:02.000 --> 0:13:08.000
Kotlin has this ray fight.

227
0:13:08.000 --> 0:13:15.000
So when you call a get bin, you can pass the type that you want,

228
0:13:15.000 --> 0:13:23.000
and it will get you, but it's a string.

229
0:13:25.000 --> 0:13:30.000
If we are a bit like tricky, we can do this,

230
0:13:30.000 --> 0:13:32.000
and it's a list of string.

231
0:13:34.000 --> 0:13:37.000
And if you tell it, because it's all about compiling,

232
0:13:37.000 --> 0:13:42.000
because in the end, of course, the byte code is still the same.

233
0:13:42.000 --> 0:13:45.000
The byte code must be compatible with Java byte code.

234
0:13:45.000 --> 0:13:47.000
There is no ray fight generic in the byte code.

235
0:13:47.000 --> 0:13:49.000
So it's just about compiling.

236
0:13:49.000 --> 0:13:54.000
And here we can say, either we set it here in the signature

237
0:13:54.000 --> 0:14:00.000
when we call it, or we tell that S is of type string,

238
0:14:00.000 --> 0:14:01.000
and we will get a string.

239
0:14:05.000 --> 0:14:07.000
And I think that's pretty amazing.

240
0:14:07.000 --> 0:14:13.000
The only thing that we need to do is do this.

241
0:14:13.000 --> 0:14:16.000
We need to tell it's ray fight.

242
0:14:16.000 --> 0:14:17.000
Sorry.

243
0:14:17.000 --> 0:14:20.000
Again, we need to tell it's ray fight,

244
0:14:20.000 --> 0:14:24.000
and for ray fight, you need to have inline.

245
0:14:24.000 --> 0:14:25.000
Why?

246
0:14:25.000 --> 0:14:28.000
Because as I mentioned, there is no trick.

247
0:14:28.000 --> 0:14:32.000
At compile time, it will actually replace the code.

248
0:14:32.000 --> 0:14:34.000
It won't be a code.

249
0:14:34.000 --> 0:14:37.000
It will be just copy-pasted.

250
0:14:37.000 --> 0:14:40.000
And so it knows which type you are.

251
0:14:43.000 --> 0:14:48.000
And in the end, so I still have a bit of time,

252
0:14:48.000 --> 0:14:51.000
we can do like really, really fun stuff.

253
0:14:51.000 --> 0:14:52.000
I will.

254
0:14:57.000 --> 0:14:58.000
Yes.

255
0:14:58.000 --> 0:15:06.000
Yes, fun stuff.

256
0:15:06.000 --> 0:15:11.000
OK, I will create a function beans,

257
0:15:11.000 --> 0:15:14.000
and for the moment, I will return any.

258
0:15:14.000 --> 0:15:15.000
OK?

259
0:15:15.000 --> 0:15:19.000
So some syntactic sugar, I don't think it's really important.

260
0:15:19.000 --> 0:15:21.000
I don't think it makes me want to use Kotlin.

261
0:15:21.000 --> 0:15:23.000
It's just easier to use it.

262
0:15:23.000 --> 0:15:34.000
Like either you return the type like this,

263
0:15:34.000 --> 0:15:42.000
or here any idiot can understand it returns any.

264
0:15:42.000 --> 0:15:45.000
So the Kotlin compiler is not an idiot,

265
0:15:45.000 --> 0:15:47.000
but Java compiler is.

266
0:15:47.000 --> 0:15:51.000
On one liner, it doesn't make any sense to specify the type

267
0:15:51.000 --> 0:15:54.000
explicitly every time, but still the Java compiler

268
0:15:54.000 --> 0:15:56.000
requires you to do it.

269
0:15:56.000 --> 0:15:57.000
Makes no sense.

270
0:15:57.000 --> 0:15:58.000
OK.

271
0:15:58.000 --> 0:16:00.000
But you're still allowed to.

272
0:16:00.000 --> 0:16:01.000
You can still.

273
0:16:01.000 --> 0:16:02.000
Sure, sure.

274
0:16:02.000 --> 0:16:06.000
If for whatever reason, if for whatever reason,

275
0:16:06.000 --> 0:16:09.000
you want to specify what it is, because it might be complex,

276
0:16:09.000 --> 0:16:12.000
but then if it's complex, perhaps it doesn't belong to one

277
0:16:12.000 --> 0:16:15.000
liner, then you can still add a lot of code.

278
0:16:15.000 --> 0:16:19.000
And if it's a liner, then you can still load too.

279
0:16:19.000 --> 0:16:23.000
Especially if you return a concrete implementation,

280
0:16:23.000 --> 0:16:26.000
and you want your signature to be an interface.

281
0:16:26.000 --> 0:16:27.000
That's perfect.

282
0:16:27.000 --> 0:16:29.000
OK.

283
0:16:29.000 --> 0:16:33.000
And now I will have a class, which I will call,

284
0:16:33.000 --> 0:16:34.000
let's say, binsDSL.

285
0:16:37.000 --> 0:16:38.000
OK.

286
0:16:38.000 --> 0:16:46.000
Here I want this to return binsDSL.

287
0:16:46.000 --> 0:16:47.000
OK.

288
0:16:47.000 --> 0:16:51.000
So now I can write something like this.

289
0:16:51.000 --> 0:16:53.000
I can have a main function.

290
0:16:53.000 --> 0:16:55.000
Main.

291
0:16:55.000 --> 0:16:56.000
Main.

292
0:16:56.000 --> 0:16:57.000
OK.

293
0:16:57.000 --> 0:16:58.000
private static void main.

294
0:16:58.000 --> 0:16:59.000
OK.

295
0:16:59.000 --> 0:17:01.000
And I can call the bins function.

296
0:17:01.000 --> 0:17:02.000
Bins function.

297
0:17:02.000 --> 0:17:03.000
Great.

298
0:17:03.000 --> 0:17:04.000
Nothing mind-blowing.

299
0:17:04.000 --> 0:17:09.000
Now what I can do is I want to write something like this.

300
0:17:12.000 --> 0:17:13.000
OK.

301
0:17:13.000 --> 0:17:15.000
So I want to write something like this.

302
0:17:15.000 --> 0:17:18.000
I will just use the compiler.

303
0:17:18.000 --> 0:17:20.000
OK.

304
0:17:20.000 --> 0:17:26.000
So I create, here I accept a parameter that takes nothing

305
0:17:26.000 --> 0:17:28.000
and returns unit.

306
0:17:28.000 --> 0:17:32.000
Here what I can do is normally I would write something

307
0:17:32.000 --> 0:17:39.000
like this, but in Kotlin, if the last argument is a lambda,

308
0:17:39.000 --> 0:17:42.000
you can move it outside the parenthesis.

309
0:17:42.000 --> 0:17:45.000
So that's what I did before.

310
0:17:45.000 --> 0:17:48.000
And then here, if there is no arguments and there is a lambda,

311
0:17:48.000 --> 0:17:52.000
I can remove the parenthesis.

312
0:17:52.000 --> 0:17:53.000
Good.

313
0:17:53.000 --> 0:18:05.000
Now I can add the bin method inside.

314
0:18:05.000 --> 0:18:10.000
And I can say that I can actually call the bin method on

315
0:18:10.000 --> 0:18:11.000
the bin DSL.

316
0:18:11.000 --> 0:18:15.000
So here I can do something like this.

317
0:18:15.000 --> 0:18:20.000
And what is it telling me in resolve method bins?

318
0:18:20.000 --> 0:18:23.000
So I still have an issue.

319
0:18:23.000 --> 0:18:24.000
Yes.

320
0:18:24.000 --> 0:18:25.000
Up.

321
0:18:25.000 --> 0:18:26.000
Little trick.

322
0:18:30.000 --> 0:18:31.000
Yeah.

323
0:18:34.000 --> 0:18:35.000
Sorry.

324
0:18:35.000 --> 0:18:36.000
That's life coding completely.

325
0:18:36.000 --> 0:18:39.000
I thought I would be less fast.

326
0:18:39.000 --> 0:18:42.000
OK.

327
0:18:42.000 --> 0:18:47.000
And now we can say that the bin method is generic.

328
0:18:47.000 --> 0:18:48.000
Right?

329
0:18:48.000 --> 0:18:52.000
So we can say it accepts a type T.

330
0:18:52.000 --> 0:18:54.000
And I don't remember how it's written,

331
0:18:54.000 --> 0:18:57.000
so I will be doing my stupid stuff.

332
0:19:06.000 --> 0:19:07.000
Inline function.

333
0:19:07.000 --> 0:19:10.000
So here, inline fun.

334
0:19:10.000 --> 0:19:12.000
Reify T.

335
0:19:12.000 --> 0:19:17.000
Here, and it returns a T.

336
0:19:17.000 --> 0:19:23.000
And if you continue like this, you can have this kind of stuff.

337
0:19:26.000 --> 0:19:30.000
So here, this is the spring boots, Kotlin DSL.

338
0:19:30.000 --> 0:19:33.000
So you say this will create bins.

339
0:19:33.000 --> 0:19:38.000
Each bin you can define either through a lambda or directly.

340
0:19:38.000 --> 0:19:42.000
And through the reified stuff, here,

341
0:19:42.000 --> 0:19:47.000
you see the product handler actually requires two dependencies.

342
0:19:47.000 --> 0:19:51.000
And at compile time, it knows that it requires,

343
0:19:51.000 --> 0:19:54.000
I don't know, a foo and a bar.

344
0:19:54.000 --> 0:19:59.000
So because those ref methods are reified for generics,

345
0:19:59.000 --> 0:20:02.000
it knows it needs to call the ref method calling,

346
0:20:02.000 --> 0:20:04.000
getting a foo and a bar.

347
0:20:04.000 --> 0:20:06.000
And it will inject them.

348
0:20:06.000 --> 0:20:09.000
So here, you have the magic at compile time,

349
0:20:09.000 --> 0:20:14.000
and at runtime, it's the usual spring boots stuff.

350
0:20:14.000 --> 0:20:19.000
And I believe it makes my code much easier to read.

351
0:20:19.000 --> 0:20:21.000
Of course, you need to understand the trick.

352
0:20:21.000 --> 0:20:23.000
It's like every time.

353
0:20:23.000 --> 0:20:25.000
You need to be very explicit in the beginning,

354
0:20:25.000 --> 0:20:27.000
because you like a lot of context.

355
0:20:27.000 --> 0:20:29.000
When you have the context, then it

356
0:20:29.000 --> 0:20:32.000
makes your stuff much, much easier.

357
0:20:32.000 --> 0:20:34.000
And that's all.

358
0:20:34.000 --> 0:20:38.000
I don't want to bore you with more details.

359
0:20:38.000 --> 0:20:40.000
You can follow me on Twitter.

360
0:20:40.000 --> 0:20:42.000
You can follow me on Masterdom, because, well, you

361
0:20:42.000 --> 0:20:44.000
don't know what will happen to Twitter.

362
0:20:44.000 --> 0:20:46.000
And although the talk was not about Apache API 6,

363
0:20:46.000 --> 0:20:52.000
you can check Apache API 6, which makes my job so much easier.

364
0:20:52.000 --> 0:20:56.000
And I can come back here to talk about unrelated stuff.

365
0:20:56.000 --> 0:20:58.000
Is there any time for questions?

366
0:20:58.000 --> 0:20:59.000
There is.

367
0:20:59.000 --> 0:21:00.000
There is.

368
0:21:00.000 --> 0:21:01.000
Thank you.

369
0:21:01.000 --> 0:21:10.000
Thank you.


WEBVTT

00:00.000 --> 00:09.000
Thanks to be here. Thanks for missing your lunch.

00:09.000 --> 00:13.000
And let me rant about Kotlin. I'm Nicolas Frankel.

00:13.000 --> 00:16.000
I've been a developer for like now more than 20 years.

00:16.000 --> 00:18.000
Perhaps I'm not a developer anymore.

00:18.000 --> 00:21.000
I'm a developer advocate, but I still see myself as a developer.

00:21.000 --> 00:25.000
I love developing. Right now I work on the Apache

00:25.000 --> 00:31.000
API 6 gateway. It has nothing to do with Java.

00:31.000 --> 00:34.000
It's just an infrastructure component.

00:34.000 --> 00:38.000
But since they allow me to be here, here is the slide.

00:38.000 --> 00:43.000
Anyway, why am I talking about Kotlin in a Java room?

00:43.000 --> 00:46.000
Well, they didn't want me to talk about Kotlin in the Kotlin room.

00:46.000 --> 00:50.000
So that might be one of the reasons.

00:50.000 --> 00:56.000
And also I've mentioned I have like two decades of coding experience.

00:56.000 --> 00:59.000
And those two decades were spent in Java.

00:59.000 --> 01:05.000
So I started with Java 1.3, perhaps.

01:05.000 --> 01:11.000
And well, there were like big wins and small losses.

01:11.000 --> 01:16.000
And I tried Scala. And I didn't like it at all.

01:16.000 --> 01:22.000
I still have the certificates saying, hey, you are like Scala certified.

01:22.000 --> 01:25.000
I didn't like it for multiple reasons.

01:25.000 --> 01:28.000
Then I went to a couple of conferences.

01:28.000 --> 01:32.000
I had a friend. And she made also talks about Kotlin.

01:32.000 --> 01:36.000
And I said, we don't need Kotlin. We have Java. It's enough.

01:36.000 --> 01:41.000
Then I wanted to teach myself Android development.

01:41.000 --> 01:45.000
And Android development at the time was only in Java.

01:45.000 --> 01:48.000
And the API was super low level.

01:48.000 --> 01:52.000
And I said, no, I cannot write such like code that it brings me back 15 years ago

01:52.000 --> 01:55.000
when I was writing Java on the server side.

01:55.000 --> 01:58.000
And I looked for solutions and I found Kotlin.

01:58.000 --> 02:02.000
And I thought, wow, that's cool.

02:02.000 --> 02:08.000
And I stopped learning Android. And now I write Kotlin on the backend.

02:08.000 --> 02:11.000
So just a disclaimer.

02:11.000 --> 02:15.000
If Java is the best language in the world for you, just leave the room.

02:15.000 --> 02:19.000
I'm not trying to bash Java. But depending on your culture,

02:19.000 --> 02:22.000
I'm pretty straightforward. You might feel offended.

02:22.000 --> 02:26.000
So better leave now. It's up to you.

02:26.000 --> 02:29.000
Okay. Let's start slow.

02:29.000 --> 02:34.000
Immutable references. I'm telling you, hey, it's better in Kotlin.

02:34.000 --> 02:37.000
And you can tell me, hey, Java has it. Right?

02:37.000 --> 02:39.000
Immutable references.

02:39.000 --> 02:43.000
Okay. Let's try to check how it works.

02:43.000 --> 02:47.000
Immutable references in Java. Oh, fun stuff.

02:47.000 --> 02:51.000
Immutable references in Java.

02:51.000 --> 02:56.000
So here, this is my immutable reference class.

02:56.000 --> 03:00.000
So I have to put final here.

03:00.000 --> 03:04.000
I have to put final here. And I have to put final here.

03:04.000 --> 03:06.000
Now I have immutable references.

03:06.000 --> 03:09.000
Who puts final everywhere?

03:09.000 --> 03:11.000
A couple of people.

03:11.000 --> 03:13.000
No, really.

03:13.000 --> 03:17.000
We had this idea 15 years ago.

03:17.000 --> 03:23.000
And then we decided, no, it just makes the reading so much harder.

03:23.000 --> 03:25.000
So perhaps not.

03:25.000 --> 03:29.000
Even worse, if you don't put final on the parameter,

03:29.000 --> 03:32.000
you can actually relocate stuff,

03:32.000 --> 03:35.000
which I believe is one of the worst things you can do.

03:35.000 --> 03:38.000
Like, really, really, really bad.

03:38.000 --> 03:41.000
So I'm not saying that Java doesn't have it,

03:41.000 --> 03:45.000
but I'm saying that in Kotlin, it's from the beginning,

03:45.000 --> 03:49.000
you need to decide whether it's a var,

03:49.000 --> 03:51.000
which means it cannot be reassigned,

03:51.000 --> 03:54.000
or it's a var, which means it can be reassigned.

03:54.000 --> 03:58.000
If you are using IntelliJ, I don't know about Eclipse or NetBeans.

03:58.000 --> 04:01.000
The good thing is that if I say it's a var,

04:01.000 --> 04:04.000
so it can be reassigned, it tells me, hey, like,

04:04.000 --> 04:06.000
there is something fishy.

04:06.000 --> 04:11.000
It's not an error per se, but at least it's visually pleasing.

04:11.000 --> 04:15.000
And, of course, by default,

04:15.000 --> 04:20.000
for who don't know, any is the equivalent of object,

04:20.000 --> 04:22.000
so it's not very important.

04:22.000 --> 04:23.000
I could write object.

04:23.000 --> 04:25.000
By default, you cannot reassign parameters.

04:25.000 --> 04:29.000
Any language that allows you to reassign parameters

04:29.000 --> 04:33.000
should be taken with, like, utmost caution.

04:33.000 --> 04:37.000
It's actually not a great design ID.

04:37.000 --> 04:39.000
So, of course, Java was designed a long time ago,

04:39.000 --> 04:42.000
doesn't have it, but Kotlin takes the lesson.

04:42.000 --> 04:46.000
And if you think that vol and var are coming from Scala

04:46.000 --> 04:48.000
because you are a Scala fanboy,

04:48.000 --> 04:49.000
that's completely true.

04:49.000 --> 04:51.000
Kotlin has stolen every good ID.

04:51.000 --> 04:54.000
So don't pretend otherwise.

04:54.000 --> 04:56.000
That's fine.

04:56.000 --> 04:58.000
Okay.

04:58.000 --> 05:01.000
Second, immutable classes.

05:01.000 --> 05:03.000
Well, that's fine. Now we have Java records.

05:03.000 --> 05:04.000
We've got them.

05:04.000 --> 05:05.000
That's fine.

05:05.000 --> 05:06.000
Let's continue.

05:06.000 --> 05:07.000
Null safety.

05:07.000 --> 05:13.000
Null safety in Java is not that fun, right?

05:13.000 --> 05:18.000
How many ways do you have to implement null safeties in Java?

05:18.000 --> 05:21.000
That's a good thing.

05:21.000 --> 05:22.000
Ah, yeah, that's a good thing.

05:22.000 --> 05:25.000
Diversity is a good thing because we work in IT.

05:25.000 --> 05:30.000
And if you want to really, like, have fun,

05:30.000 --> 05:33.000
you might check, like, nullable, nullable, nullable,

05:33.000 --> 05:35.000
nullable, nullable, nullable, nullable, nullable,

05:35.000 --> 05:38.000
oh, not null, no, no, no, no, no.

05:38.000 --> 05:41.000
Well, I'm sorry, sorry?

05:41.000 --> 05:43.000
Not capitalized under the first node.

05:43.000 --> 05:44.000
Yeah, exactly.

05:44.000 --> 05:45.000
I'm not sure it's an error.

05:45.000 --> 05:48.000
I think I just copy-pasted, so I'm not sure.

05:48.000 --> 05:50.000
Yeah, that's really fun stuff.

05:50.000 --> 05:53.000
And, of course, they won't work with one another.

05:53.000 --> 05:56.000
So you need to have the preprocessor.

05:56.000 --> 05:59.000
Sorry, you need to have the compile-time processor,

05:59.000 --> 06:02.000
and you need to choose which library you will be using.

06:02.000 --> 06:06.000
And then you hope that somehow it will work.

06:06.000 --> 06:09.000
Dukes, in Kotlin, what do we have?

06:09.000 --> 06:11.000
Well, it's baked into language.

06:11.000 --> 06:16.000
So basically, here I was too lazy to write it in Java,

06:16.000 --> 06:19.000
but basically, if you write something in Kotlin,

06:19.000 --> 06:20.000
you have additional types.

06:20.000 --> 06:24.000
So basically, for every, like, normal type,

06:24.000 --> 06:28.000
this is a nullable type, and this says

06:28.000 --> 06:31.000
it's a nullable type.

06:31.000 --> 06:34.000
It means that if you are calling something

06:34.000 --> 06:40.000
on a non-nullable type, you can call whatever you want,

06:40.000 --> 06:43.000
plus whatever.

06:43.000 --> 06:51.000
And if you call something on a nullable type,

06:51.000 --> 06:53.000
Kotlin will say, oh, it was saying something,

06:53.000 --> 06:55.000
and now it doesn't say it.

06:55.000 --> 07:03.000
Yes, because plus is smart.

07:03.000 --> 07:09.000
Plus knows how to operate on nullable types.

07:09.000 --> 07:18.000
But let's do something that is not safe,

07:18.000 --> 07:21.000
which is, it's also very smart.

07:21.000 --> 07:26.000
The library is too smart for me.

07:26.000 --> 07:32.000
Yeah, empty.

07:32.000 --> 07:34.000
Reversed?

07:34.000 --> 07:36.000
Yeah, finally, thanks.

07:36.000 --> 07:39.000
And it tells you, hey, you know, this might be nullable,

07:39.000 --> 07:41.000
so please don't call it like this,

07:41.000 --> 07:45.000
because there is a chance you might encounter a null pointer

07:45.000 --> 07:48.000
at runtime, and yeah, you should take care.

07:48.000 --> 07:51.000
And well, afterwards it's quite easy.

07:51.000 --> 07:53.000
You can do this stuff.

07:53.000 --> 07:55.000
I mean, if you have been doing Groovy,

07:55.000 --> 08:00.000
or I think Scala does it too, but the compiler tells you,

08:00.000 --> 08:03.000
you should be careful about this.

08:03.000 --> 08:05.000
And again, it's backed into the language,

08:05.000 --> 08:09.000
so for every type, there are two real types,

08:09.000 --> 08:13.000
one that might be nullable, the other might not be nullable.

08:13.000 --> 08:15.000
The good thing with, I will show you

08:15.000 --> 08:18.000
after where a section function, you can write extension function

08:18.000 --> 08:23.000
that work on nullable type, which is really, really crazy.

08:23.000 --> 08:24.000
Good.

08:24.000 --> 08:33.000
So second stuff, better.

08:33.000 --> 08:36.000
The utils classes.

08:36.000 --> 08:43.000
Who has not written a single unit utils classes in their life?

08:43.000 --> 08:44.000
Nobody.

08:44.000 --> 08:49.000
So even people younger than 30 have written them.

08:49.000 --> 08:51.000
In general, there might be a divide,

08:51.000 --> 08:54.000
because all the developers have written them,

08:54.000 --> 08:59.000
the younger ones, they are smart enough to use the library,

08:59.000 --> 09:03.000
but the thing is, well, at our age there was no library.

09:03.000 --> 09:08.000
So basically, we say that Java is an object-oriented language,

09:08.000 --> 09:11.000
and then we put everything in a class,

09:11.000 --> 09:13.000
we put static methods in the class,

09:13.000 --> 09:16.000
and we pretend that it's object-oriented.

09:16.000 --> 09:17.000
Right?

09:17.000 --> 09:18.000
Yes.

09:18.000 --> 09:20.000
Yes.

09:20.000 --> 09:22.000
Well, let's not pretend it's object-oriented.

09:22.000 --> 09:26.000
If it's no object, a static class with static methods

09:26.000 --> 09:28.000
is not object-oriented.

09:28.000 --> 09:33.000
So here, I have created my amazing string utils class,

09:33.000 --> 09:36.000
and of course, I need to remember,

09:36.000 --> 09:40.000
because the users of my class, well, they might instantiate it,

09:40.000 --> 09:43.000
so I will just remove the constructor,

09:43.000 --> 09:46.000
make it private, again, very object-oriented,

09:46.000 --> 09:50.000
and then I create this capitalize stuff,

09:50.000 --> 09:52.000
and I do whatever I want,

09:52.000 --> 09:55.000
and then I can call the capitalize method.

09:55.000 --> 09:57.000
Good.

09:57.000 --> 10:02.000
Scala and Kotlin have, I think, like, similar stuff.

10:02.000 --> 10:08.000
Let's not pretend we are an object-oriented language.

10:08.000 --> 10:12.000
We can just add methods, end states,

10:12.000 --> 10:20.000
but mostly methods, on existing classes.

10:20.000 --> 10:22.000
That's crazy.

10:22.000 --> 10:23.000
Yeah.

10:23.000 --> 10:26.000
Of course, at the bytecode level,

10:26.000 --> 10:29.000
it boils down to a static method.

10:29.000 --> 10:30.000
That's not the problem.

10:30.000 --> 10:32.000
The problem is the user experience,

10:32.000 --> 10:34.000
is the developer experience.

10:34.000 --> 10:40.000
We can see now that we are really doing here,

10:40.000 --> 10:45.000
we actually are doing object-oriented development.

10:45.000 --> 10:48.000
So through this functional stuff,

10:48.000 --> 10:51.000
because here we create a function

10:51.000 --> 10:54.000
that is at the root level,

10:54.000 --> 10:59.000
we are able to write better object-oriented code,

10:59.000 --> 11:02.000
which is mind-blowing.

11:02.000 --> 11:06.000
Even better, as I mentioned,

11:06.000 --> 11:09.000
we can say, hey, this only applies,

11:09.000 --> 11:16.000
so here we can have var f of type string might be null,

11:16.000 --> 11:18.000
so this is a nullable type,

11:18.000 --> 11:22.000
and here we cannot say f dot capitalize,

11:22.000 --> 11:25.000
because it's null, right?

11:25.000 --> 11:27.000
It's a nullable type.

11:27.000 --> 11:29.000
Here it only applies to real strings,

11:29.000 --> 11:32.000
but we can do something like this.

11:32.000 --> 11:35.000
We can say, hey, it might be a nullable type,

11:35.000 --> 11:41.000
and we can check if this equals null,

11:41.000 --> 11:47.000
then we return the default, which might be an empty string.

11:47.000 --> 11:51.000
Yeah, I see like, what the hell?

11:51.000 --> 11:53.000
Static, yeah.

11:53.000 --> 11:55.000
And in the end, that's a static method,

11:55.000 --> 11:59.000
but how you call it is like object-oriented,

11:59.000 --> 12:02.000
which, in my opinion, makes like Kotlin

12:02.000 --> 12:06.000
much more object-oriented than Java will ever be.

12:06.000 --> 12:09.000
Well, will ever be, no, I'm not sure.

12:09.000 --> 12:12.000
Let's see what we have in the future.

12:12.000 --> 12:15.000
So that's already good stuff.

12:15.000 --> 12:22.000
And then, oof, ray fight generics, right?

12:22.000 --> 12:28.000
Who has been bitten by the lack of ray fight generics already?

12:28.000 --> 12:30.000
Yeah, yeah.

12:30.000 --> 12:33.000
So I have a collection of thingy and a collection of foo,

12:33.000 --> 12:38.000
and, well, at runtime you have nothing.

12:38.000 --> 12:47.000
So here, the trick when you do Java is to pass the class.

12:47.000 --> 12:49.000
So here is taken from Spring.

12:49.000 --> 12:54.000
And when you get a bin, you say, hey, I want a bin of class

12:54.000 --> 12:58.000
whatever, and then you will get the whatever.

12:58.000 --> 12:59.000
OK?

12:59.000 --> 13:02.000
How can we do it in Kotlin?

13:02.000 --> 13:08.000
Kotlin has this ray fight.

13:08.000 --> 13:15.000
So when you call a get bin, you can pass the type that you want,

13:15.000 --> 13:23.000
and it will get you, but it's a string.

13:25.000 --> 13:30.000
If we are a bit like tricky, we can do this,

13:30.000 --> 13:32.000
and it's a list of string.

13:34.000 --> 13:37.000
And if you tell it, because it's all about compiling,

13:37.000 --> 13:42.000
because in the end, of course, the byte code is still the same.

13:42.000 --> 13:45.000
The byte code must be compatible with Java byte code.

13:45.000 --> 13:47.000
There is no ray fight generic in the byte code.

13:47.000 --> 13:49.000
So it's just about compiling.

13:49.000 --> 13:54.000
And here we can say, either we set it here in the signature

13:54.000 --> 14:00.000
when we call it, or we tell that S is of type string,

14:00.000 --> 14:01.000
and we will get a string.

14:05.000 --> 14:07.000
And I think that's pretty amazing.

14:07.000 --> 14:13.000
The only thing that we need to do is do this.

14:13.000 --> 14:16.000
We need to tell it's ray fight.

14:16.000 --> 14:17.000
Sorry.

14:17.000 --> 14:20.000
Again, we need to tell it's ray fight,

14:20.000 --> 14:24.000
and for ray fight, you need to have inline.

14:24.000 --> 14:25.000
Why?

14:25.000 --> 14:28.000
Because as I mentioned, there is no trick.

14:28.000 --> 14:32.000
At compile time, it will actually replace the code.

14:32.000 --> 14:34.000
It won't be a code.

14:34.000 --> 14:37.000
It will be just copy-pasted.

14:37.000 --> 14:40.000
And so it knows which type you are.

14:43.000 --> 14:48.000
And in the end, so I still have a bit of time,

14:48.000 --> 14:51.000
we can do like really, really fun stuff.

14:51.000 --> 14:52.000
I will.

14:57.000 --> 14:58.000
Yes.

14:58.000 --> 15:06.000
Yes, fun stuff.

15:06.000 --> 15:11.000
OK, I will create a function beans,

15:11.000 --> 15:14.000
and for the moment, I will return any.

15:14.000 --> 15:15.000
OK?

15:15.000 --> 15:19.000
So some syntactic sugar, I don't think it's really important.

15:19.000 --> 15:21.000
I don't think it makes me want to use Kotlin.

15:21.000 --> 15:23.000
It's just easier to use it.

15:23.000 --> 15:34.000
Like either you return the type like this,

15:34.000 --> 15:42.000
or here any idiot can understand it returns any.

15:42.000 --> 15:45.000
So the Kotlin compiler is not an idiot,

15:45.000 --> 15:47.000
but Java compiler is.

15:47.000 --> 15:51.000
On one liner, it doesn't make any sense to specify the type

15:51.000 --> 15:54.000
explicitly every time, but still the Java compiler

15:54.000 --> 15:56.000
requires you to do it.

15:56.000 --> 15:57.000
Makes no sense.

15:57.000 --> 15:58.000
OK.

15:58.000 --> 16:00.000
But you're still allowed to.

16:00.000 --> 16:01.000
You can still.

16:01.000 --> 16:02.000
Sure, sure.

16:02.000 --> 16:06.000
If for whatever reason, if for whatever reason,

16:06.000 --> 16:09.000
you want to specify what it is, because it might be complex,

16:09.000 --> 16:12.000
but then if it's complex, perhaps it doesn't belong to one

16:12.000 --> 16:15.000
liner, then you can still add a lot of code.

16:15.000 --> 16:19.000
And if it's a liner, then you can still load too.

16:19.000 --> 16:23.000
Especially if you return a concrete implementation,

16:23.000 --> 16:26.000
and you want your signature to be an interface.

16:26.000 --> 16:27.000
That's perfect.

16:27.000 --> 16:29.000
OK.

16:29.000 --> 16:33.000
And now I will have a class, which I will call,

16:33.000 --> 16:34.000
let's say, binsDSL.

16:37.000 --> 16:38.000
OK.

16:38.000 --> 16:46.000
Here I want this to return binsDSL.

16:46.000 --> 16:47.000
OK.

16:47.000 --> 16:51.000
So now I can write something like this.

16:51.000 --> 16:53.000
I can have a main function.

16:53.000 --> 16:55.000
Main.

16:55.000 --> 16:56.000
Main.

16:56.000 --> 16:57.000
OK.

16:57.000 --> 16:58.000
private static void main.

16:58.000 --> 16:59.000
OK.

16:59.000 --> 17:01.000
And I can call the bins function.

17:01.000 --> 17:02.000
Bins function.

17:02.000 --> 17:03.000
Great.

17:03.000 --> 17:04.000
Nothing mind-blowing.

17:04.000 --> 17:09.000
Now what I can do is I want to write something like this.

17:12.000 --> 17:13.000
OK.

17:13.000 --> 17:15.000
So I want to write something like this.

17:15.000 --> 17:18.000
I will just use the compiler.

17:18.000 --> 17:20.000
OK.

17:20.000 --> 17:26.000
So I create, here I accept a parameter that takes nothing

17:26.000 --> 17:28.000
and returns unit.

17:28.000 --> 17:32.000
Here what I can do is normally I would write something

17:32.000 --> 17:39.000
like this, but in Kotlin, if the last argument is a lambda,

17:39.000 --> 17:42.000
you can move it outside the parenthesis.

17:42.000 --> 17:45.000
So that's what I did before.

17:45.000 --> 17:48.000
And then here, if there is no arguments and there is a lambda,

17:48.000 --> 17:52.000
I can remove the parenthesis.

17:52.000 --> 17:53.000
Good.

17:53.000 --> 18:05.000
Now I can add the bin method inside.

18:05.000 --> 18:10.000
And I can say that I can actually call the bin method on

18:10.000 --> 18:11.000
the bin DSL.

18:11.000 --> 18:15.000
So here I can do something like this.

18:15.000 --> 18:20.000
And what is it telling me in resolve method bins?

18:20.000 --> 18:23.000
So I still have an issue.

18:23.000 --> 18:24.000
Yes.

18:24.000 --> 18:25.000
Up.

18:25.000 --> 18:26.000
Little trick.

18:30.000 --> 18:31.000
Yeah.

18:34.000 --> 18:35.000
Sorry.

18:35.000 --> 18:36.000
That's life coding completely.

18:36.000 --> 18:39.000
I thought I would be less fast.

18:39.000 --> 18:42.000
OK.

18:42.000 --> 18:47.000
And now we can say that the bin method is generic.

18:47.000 --> 18:48.000
Right?

18:48.000 --> 18:52.000
So we can say it accepts a type T.

18:52.000 --> 18:54.000
And I don't remember how it's written,

18:54.000 --> 18:57.000
so I will be doing my stupid stuff.

19:06.000 --> 19:07.000
Inline function.

19:07.000 --> 19:10.000
So here, inline fun.

19:10.000 --> 19:12.000
Reify T.

19:12.000 --> 19:17.000
Here, and it returns a T.

19:17.000 --> 19:23.000
And if you continue like this, you can have this kind of stuff.

19:26.000 --> 19:30.000
So here, this is the spring boots, Kotlin DSL.

19:30.000 --> 19:33.000
So you say this will create bins.

19:33.000 --> 19:38.000
Each bin you can define either through a lambda or directly.

19:38.000 --> 19:42.000
And through the reified stuff, here,

19:42.000 --> 19:47.000
you see the product handler actually requires two dependencies.

19:47.000 --> 19:51.000
And at compile time, it knows that it requires,

19:51.000 --> 19:54.000
I don't know, a foo and a bar.

19:54.000 --> 19:59.000
So because those ref methods are reified for generics,

19:59.000 --> 20:02.000
it knows it needs to call the ref method calling,

20:02.000 --> 20:04.000
getting a foo and a bar.

20:04.000 --> 20:06.000
And it will inject them.

20:06.000 --> 20:09.000
So here, you have the magic at compile time,

20:09.000 --> 20:14.000
and at runtime, it's the usual spring boots stuff.

20:14.000 --> 20:19.000
And I believe it makes my code much easier to read.

20:19.000 --> 20:21.000
Of course, you need to understand the trick.

20:21.000 --> 20:23.000
It's like every time.

20:23.000 --> 20:25.000
You need to be very explicit in the beginning,

20:25.000 --> 20:27.000
because you like a lot of context.

20:27.000 --> 20:29.000
When you have the context, then it

20:29.000 --> 20:32.000
makes your stuff much, much easier.

20:32.000 --> 20:34.000
And that's all.

20:34.000 --> 20:38.000
I don't want to bore you with more details.

20:38.000 --> 20:40.000
You can follow me on Twitter.

20:40.000 --> 20:42.000
You can follow me on Masterdom, because, well, you

20:42.000 --> 20:44.000
don't know what will happen to Twitter.

20:44.000 --> 20:46.000
And although the talk was not about Apache API 6,

20:46.000 --> 20:52.000
you can check Apache API 6, which makes my job so much easier.

20:52.000 --> 20:56.000
And I can come back here to talk about unrelated stuff.

20:56.000 --> 20:58.000
Is there any time for questions?

20:58.000 --> 20:59.000
There is.

20:59.000 --> 21:00.000
There is.

21:00.000 --> 21:01.000
Thank you.

21:01.000 --> 21:10.000
Thank you.

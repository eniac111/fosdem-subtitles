WEBVTT

00:00.000 --> 00:15.880
Fernando, he's going to talk about using Rust for your network management tools.

00:15.880 --> 00:17.880
Take it away.

00:17.880 --> 00:19.880
All right.

00:19.880 --> 00:21.880
Thank you.

00:21.880 --> 00:23.880
All right.

00:23.880 --> 00:25.260
So welcome everyone.

00:25.260 --> 00:26.260
My name is Fernando.

00:26.260 --> 00:28.120
I'm a senior software engineer at Dreyhat.

00:28.120 --> 00:33.280
I work for the networking services team mainly in focus on network management tools.

00:33.280 --> 00:40.600
And today we're going to talk what was our journey building a Rust tool for network management.

00:40.600 --> 00:42.040
So okay.

00:42.040 --> 00:43.280
We did not start with Rust.

00:43.280 --> 00:44.760
We started with Python.

00:44.760 --> 00:48.020
But after some time we decided we wanted to shift to Rust.

00:48.020 --> 00:50.420
So this is two talks in one.

00:50.420 --> 00:57.040
One is how we did build the project in Rust and what we learned when moving from Python

00:57.040 --> 00:58.720
to Rust.

00:58.720 --> 00:59.880
Okay.

00:59.880 --> 01:00.880
So network management.

01:00.880 --> 01:01.880
What's network management?

01:01.880 --> 01:05.400
Basically it's all the operations that you do to configure your networking.

01:05.400 --> 01:11.480
Roots, interfaces, DNS, firewalling, whatever you do, it's network management.

01:11.480 --> 01:16.420
So it's a process that is quite complex because it requires a lot of coordination between

01:16.420 --> 01:18.560
user space and kernel space.

01:18.560 --> 01:23.480
We need to check when we get notification for kernel space because all the tools would

01:23.480 --> 01:26.620
modify the network status.

01:26.620 --> 01:32.720
We also need to communicate with kernel in order to configure stuff.

01:32.720 --> 01:35.040
So it's a quite complex task.

01:35.040 --> 01:39.200
And this is already a tool which is network manager.

01:39.200 --> 01:46.440
It's by default the tool that is in almost all situations used for managing your Linux

01:46.440 --> 01:48.160
network configuration.

01:48.160 --> 01:53.240
And we were willing to use it and we were willing to build in top of network manager

01:53.240 --> 01:56.920
because implementing everything was really, really complex.

01:56.920 --> 01:58.600
So we created NMSstate.

01:58.600 --> 02:05.640
And NMSstate is a tool that communicates with network manager and it's a library with a

02:05.640 --> 02:13.520
command line tool and allows us to configure the network using declarative states.

02:13.520 --> 02:18.360
So you can define what do you want and you don't need to care about how is network manager

02:18.360 --> 02:20.720
or how is the kernel doing.

02:20.720 --> 02:23.240
And what's going to do or what are the dependencies.

02:23.240 --> 02:25.160
You don't need to care about any of that.

02:25.160 --> 02:27.380
NMSstate is going to manage it.

02:27.380 --> 02:30.920
So it makes everything easier.

02:30.920 --> 02:34.280
So as I say, we started to build NMSstate in Python.

02:34.280 --> 02:41.080
And one day we noticed that a lot of our users were willing to chip a binary and not Python

02:41.080 --> 02:43.640
and don't use the Python environment.

02:43.640 --> 02:47.980
And well, there were also some performance issues because we needed to do a lot of operations.

02:47.980 --> 02:51.680
So we decided to give you a try to Rust.

02:51.680 --> 02:57.840
And we have a problem is that we have a library and a binary and we needed to move both of

02:57.840 --> 02:59.160
them to Rust.

02:59.160 --> 03:04.400
And also we already have a big base of users.

03:04.400 --> 03:09.720
So we could not break them and we need to do it in a way that we are going to support

03:09.720 --> 03:13.440
all the features that we already did in Python.

03:13.440 --> 03:16.720
So well, we created our own NMSstate library in Rust.

03:16.720 --> 03:19.080
I will tell you how.

03:19.080 --> 03:24.680
And also the NMSstate CTL tool, which is the command line tool.

03:24.680 --> 03:26.680
All right.

03:26.680 --> 03:31.520
So the first thing is that we are using JAML files and JSON files and we are parsing them.

03:31.520 --> 03:37.160
So in Python this was quite trivial with any schema and we needed to find a way to do it.

03:37.160 --> 03:41.320
In Python we were using dictionaries so that user could create a dictionary and using a

03:41.320 --> 03:48.440
JAML library it was quite trivial to convert that JAML into a dictionary.

03:48.440 --> 03:50.120
We needed something in Rust to do this.

03:50.120 --> 03:52.160
So we end up looking at CTL.

03:52.160 --> 03:58.880
CTL is a framework for serializing, idealizing Rust attack structure efficiently and generally

03:58.880 --> 04:05.880
we use it for JAML adjacent but it supports other formats.

04:05.880 --> 04:10.460
This allows us to keep our declarative state, keep our API.

04:10.460 --> 04:13.320
So that was pretty good.

04:13.320 --> 04:18.840
And we noticed that CTL allows us to implement our own serializers and deserializers.

04:18.840 --> 04:26.600
So that was also a big plus because we could do validation steps and simplify the validation

04:26.600 --> 04:30.920
work when getting the configuration file from the user.

04:30.920 --> 04:37.000
And then there were a lot of decorators on server so it was quite good for creating early

04:37.000 --> 04:45.840
access for creating multiple helper functions and also some conditional deserialization

04:45.840 --> 04:47.360
and serializations.

04:47.360 --> 04:50.160
So here is an example.

04:50.160 --> 04:57.880
For example this is an interface state for a kernel bond and we basically define it is

04:57.880 --> 05:04.920
up, it has an IPv4 address with this address with this prefix length and it is enabled

05:04.920 --> 05:07.960
and then we define the link aggregation options.

05:07.960 --> 05:11.440
So we have the mode options and the ports.

05:11.440 --> 05:17.400
One really good thing that we have is that we have partial editing.

05:17.400 --> 05:22.440
So you can define what you want to change and we are going to merge it with what you

05:22.440 --> 05:26.080
already have configured on the system.

05:26.080 --> 05:30.680
And about the decorators as you can see there we were able to use the decorator for, for

05:30.680 --> 05:37.920
example, accepting numbers, accepting strings, accepting only the number, custom strings,

05:37.920 --> 05:43.400
creating alias, renaming, all of that.

05:43.400 --> 05:46.880
And it was quite good.

05:46.880 --> 05:48.020
So okay.

05:48.020 --> 05:55.240
We communicate with network manager and we communicate with network manager to configure

05:55.240 --> 05:56.240
the network state.

05:56.240 --> 06:02.280
And we have a problem is that before we were using the Libenham bindings, Python bindings,

06:02.280 --> 06:05.160
and they were not available in Rust.

06:05.160 --> 06:10.360
And we tried to create a Rust bindings but it was quite complex because they used g object

06:10.360 --> 06:14.000
and we didn't have g object and it was a big mess.

06:14.000 --> 06:19.560
But we noticed that network manager is providing a Dvas API.

06:19.560 --> 06:22.640
So we say okay, let's use Dvas then.

06:22.640 --> 06:29.600
And we noticed that there is a create which is ZitaVAS and with ZitaVAS we were able to

06:29.600 --> 06:34.640
communicate with network manager using the Dvas API and with the ZitaVAD and we were

06:34.640 --> 06:42.000
able to encode the data structures that we were using to communicate with network manager

06:42.000 --> 06:45.800
and configure the settings that we wanted.

06:45.800 --> 06:50.780
So using this we solved one of the problem which is telling network manager what we want

06:50.780 --> 06:55.960
to do and also fetching what already network manager have which is also important because

06:55.960 --> 07:02.080
all right, there are some options that maybe we do not want to override because the user

07:02.080 --> 07:05.880
configured it that way and for patch LED team that is important.

07:05.880 --> 07:10.240
We need to know what the user configured and what the user want to modify.

07:10.240 --> 07:13.280
So okay, one problem solved.

07:13.280 --> 07:14.440
Then we have another problem.

07:14.440 --> 07:19.840
So network manager does not provide at all real time information from kernel and we needed

07:19.840 --> 07:22.520
that because we also do verification.

07:22.520 --> 07:30.480
So when you configure something, you in a state do a verification step which what it

07:30.480 --> 07:36.280
does is compare what the user defined which what is configured on the system.

07:36.280 --> 07:39.840
And we have a problem because network manager was not providing real time information and

07:39.840 --> 07:48.120
sometimes it took quite sometimes to get the information that we wanted and we were having

07:48.120 --> 07:52.040
some problems on the verification.

07:52.040 --> 07:59.100
So we were looking for a library and we did not find any library that certified our requirements

07:59.100 --> 08:05.640
but we noticed that there is already a Rust-Ned-Link library and Ned-Link is the kernel API for communication

08:05.640 --> 08:11.460
between user page and also I think between kind of components and it was perfect.

08:11.460 --> 08:17.040
We could use Rust-Ned-Link which is an existing library to build another tool which is Nisport.

08:17.040 --> 08:25.460
So Nisport only queries information from kernel and show you in a JAML file or basically proper

08:25.460 --> 08:29.120
data structures.

08:29.120 --> 08:32.800
It was quite good because we had started to contribute to Rust-Ned-Link because Rust-Ned-Link

08:32.800 --> 08:40.760
was an independent project and they didn't support everything so we were able to help

08:40.760 --> 08:46.840
there and currently a lot of people use Rust-Ned-Link and it's a quite big project and probably

08:46.840 --> 08:53.140
the one that most of the people use when need to work with Ned-Link and Rust.

08:53.140 --> 08:59.920
So we have one more problem.

08:59.920 --> 09:04.280
Now we have network manager working, we have verification working, validation working,

09:04.280 --> 09:10.160
we can read the configuration, we can do a lot of stuff but then networking is complex

09:10.160 --> 09:17.240
and there is one thing that is called OBS or OBSDB and they will manager configure OBS

09:17.240 --> 09:24.160
but they do not configure global OBSDB settings and that was a problem because we wanted to

09:24.160 --> 09:25.700
do that.

09:25.700 --> 09:27.320
So how we did?

09:27.320 --> 09:35.200
We basically started to use sockets and using the Rust-SDD library for stream sockets we

09:35.200 --> 09:46.000
were able to communicate with OBSDB, send petitions, read what they already have stored

09:46.000 --> 09:52.220
on the OBSDB and configure whatever OBSDB settings the user want to configure.

09:52.220 --> 10:00.000
So we created our own server JSON, using server JSON libraries we created our own JSON RPC

10:00.000 --> 10:02.560
to communicate with OBSDB.

10:02.560 --> 10:10.080
This is internal of NMS state, we have considered to put it on a separate crate but we did not

10:10.080 --> 10:14.320
yet.

10:14.320 --> 10:17.000
Then we had another problem.

10:17.000 --> 10:24.320
I promise this will end, we are going to have a solution, it will stop at some point.

10:24.320 --> 10:30.080
So we had users, the users were using our Python library and some of them were willing

10:30.080 --> 10:36.240
to move to Rust, some of them were willing to move to Golan but we were already developing

10:36.240 --> 10:38.320
a resolution.

10:38.320 --> 10:44.200
And some of them didn't want to move from the Python code to Rust so what we did is

10:44.200 --> 10:48.080
create bindings and we create plenty of them.

10:48.080 --> 10:56.320
First of all we created C bindings, so C users could use the Rust library, then from the

10:56.320 --> 11:01.600
C bindings we created the Python and Golan bindings.

11:01.600 --> 11:08.680
Finally one of the other problems that we had is that we got a huge integration test

11:08.680 --> 11:12.400
base and we wanted to reuse them.

11:12.400 --> 11:18.880
So with the Python bindings we were able to integrate the Python integration test that

11:18.880 --> 11:21.520
we had into our Rust library.

11:21.520 --> 11:27.840
It was quite cool because we were able to start building the new Rust NMS state but

11:27.840 --> 11:32.160
at the same time using the Python integration test.

11:32.160 --> 11:39.120
And this way we were sure that we were not breaking any existing use case that we already

11:39.120 --> 11:41.520
support.

11:41.520 --> 11:43.520
So that's it.

11:43.520 --> 11:46.000
It was a success.

11:46.000 --> 11:51.360
We are quite proud because most of the people that were using it liked the idea and even

11:51.360 --> 11:57.480
the ones that did not care about if you use Python or Rust were happy because the change

11:57.480 --> 12:00.600
was completely transparent for the final user.

12:00.600 --> 12:05.840
If you were using Python nothing will change for you.

12:05.840 --> 12:06.840
The code is the same.

12:06.840 --> 12:09.760
You don't need to do anything different.

12:09.760 --> 12:12.440
So it will be a transparent update.

12:12.440 --> 12:17.440
And if you are using Python and are willing to use Rust, okay, you need to change your

12:17.440 --> 12:21.360
code but basically the API is the same.

12:21.360 --> 12:29.560
So well, you were able to use the same JAML files and the same JSON files and everything

12:29.560 --> 12:31.080
will work.

12:31.080 --> 12:37.920
So we got a lot of adoptions and right now the user base of NMS state is still growing

12:37.920 --> 12:40.200
and we are quite happy.

12:40.200 --> 12:45.200
Also it was we created goal and bindings because OpenShift people and Kubernetes people were

12:45.200 --> 12:51.840
willing to use it and it's written in goal and so we provided them with goal and bindings

12:51.840 --> 12:53.560
and they really like it.

12:53.560 --> 12:59.160
So yeah, it was a success story.

12:59.160 --> 13:02.360
So basically that was our journey.

13:02.360 --> 13:06.000
I would like to hear, I think we have time for questions.

13:06.000 --> 13:08.720
So please ask whatever you want.

13:08.720 --> 13:11.840
I promise you that I don't know dumb questions.

13:11.840 --> 13:16.280
So thank you very much.

13:16.280 --> 13:24.280
All right, any questions?

13:24.280 --> 13:25.280
Okay.

13:25.280 --> 13:33.760
I had wondered what your experience was in terms of time to implement in Rust versus

13:33.760 --> 13:39.520
Python from a developer point of view.

13:39.520 --> 13:46.800
I think it took us around two years to develop mainly work on it.

13:46.800 --> 13:48.400
It was full time.

13:48.400 --> 13:56.360
It was a long journey but it helped us a lot having the Python integration tests working

13:56.360 --> 14:02.440
with a new library because we were sure that we were not breaking the existing cases and

14:02.440 --> 14:03.960
speed up the things a little bit.

14:03.960 --> 14:04.960
Absolutely.

14:04.960 --> 14:08.560
Do you have a feeling for how long it would have taken you if you had re-implemented it

14:08.560 --> 14:09.560
in Python?

14:09.560 --> 14:13.320
I know that's not really a thing but roughly how long if you had said...

14:13.320 --> 14:14.320
Going back to Python.

14:14.320 --> 14:18.120
No, if you had said, we've got it in Python but for no good reason, we're going to rewrite

14:18.120 --> 14:21.520
it from scratch in Python to make it cleaner, let's say.

14:21.520 --> 14:26.320
Just as how long does it take to write something in Python versus Rust or maybe it's not possible

14:26.320 --> 14:27.320
to guess.

14:27.320 --> 14:29.600
Well, I think it depends.

14:29.600 --> 14:36.400
In my opinion, this is a personal opinion, writing Python is much easier but then you

14:36.400 --> 14:38.440
have more bugs.

14:38.440 --> 14:39.800
This is what's my experience.

14:39.800 --> 14:46.640
When I implement something in Python, I do it in 30 minutes, one hour, two hours but

14:46.640 --> 14:47.640
then I go back.

14:47.640 --> 14:56.360
When I do it in Rust, it took me more longer, a lot of compiler errors, a lot of unsafe

14:56.360 --> 15:00.040
stuff everywhere so we need to avoid that.

15:00.040 --> 15:01.360
But then it's quite stable.

15:01.360 --> 15:09.520
I can say that nowadays the Rust version, it is younger that the Python one is more

15:09.520 --> 15:10.520
stable.

15:10.520 --> 15:14.280
We got less back reports and we have more users.

15:14.280 --> 15:17.280
Thank you.

15:17.280 --> 15:23.280
Thank you.

15:23.280 --> 15:36.240
Did you run into any problems in terms of compatibility when you created C bindings

15:36.240 --> 15:38.360
from the Rust code?

15:38.360 --> 15:40.480
No, not at all, to be honest.

15:40.480 --> 15:41.760
We did not have any problem.

15:41.760 --> 15:43.360
It was quite straightforward.

15:43.360 --> 15:46.040
We did not have any problem.

15:46.040 --> 15:52.240
I must say that the NMSD library is, well, we spoke to the users, it's quite simple.

15:52.240 --> 15:55.440
That makes it simple for us.

15:55.440 --> 16:00.160
We did not have any problem.

16:00.160 --> 16:01.160
That's it.

16:01.160 --> 16:02.160
Okay, thanks.

16:02.160 --> 16:17.000
The problem.

16:17.000 --> 16:23.720
You mentioned that it was a long journey when you implemented this in Rust.

16:23.720 --> 16:30.000
Could you compare what you have expected in the beginning of this journey and with the

16:30.000 --> 16:31.000
reality?

16:31.000 --> 16:34.800
Okay, I must say that I'm not the only one person working on this.

16:34.800 --> 16:38.320
There is my teammate, Chris.

16:38.320 --> 16:40.000
Chris was the lead here.

16:40.000 --> 16:44.320
I must say that I did not trust very much that we were able to do it in two years.

16:44.320 --> 16:47.080
We were like, yeah, in two years we are going to have Rust.

16:47.080 --> 16:49.680
I didn't think so.

16:49.680 --> 16:51.880
But he was right.

16:51.880 --> 16:56.840
So I think my expectation is that it would take much longer, but it was much simpler

16:56.840 --> 16:58.600
than what I thought.

16:58.600 --> 17:05.760
Also, I thought that we could have more problems with finding the libraries that we need to

17:05.760 --> 17:08.000
do all the operations that we needed.

17:08.000 --> 17:13.400
But I must say that Rust has a great ecosystem.

17:13.400 --> 17:17.640
The libraries that we are using are really, really well maintained.

17:17.640 --> 17:18.640
That's great.

17:18.640 --> 17:19.640
Let's work for us.

17:19.640 --> 17:21.640
We have a question from The Matrix.

17:21.640 --> 17:22.640
Sure.

17:22.640 --> 17:24.200
Sounds a bit weird.

17:24.200 --> 17:29.040
Tanya is asking, how long did it take your team to learn Rust or did they know Rust already?

17:29.040 --> 17:30.040
No.

17:30.040 --> 17:31.600
We did not know Rust.

17:31.600 --> 17:37.720
I mean, well, we didn't know what Rust was and we did some work on Rust.

17:37.720 --> 17:38.720
But we did one thing here.

17:38.720 --> 17:41.840
We started with Nispor instead with NmState.

17:41.840 --> 17:46.480
So when we noticed what are the missing pieces, we first started with Nispor, which is much

17:46.480 --> 17:51.240
simpler than NmState, and we learned on the way.

17:51.240 --> 17:57.360
I must say that I am also surprised with all the Rust resources that it was quite easy

17:57.360 --> 17:58.360
to learn.

17:58.360 --> 18:00.280
But we learned on the way.

18:00.280 --> 18:02.120
When we needed something, we started learning it.

18:02.120 --> 18:04.480
And then we revisit the code and we change things.

18:04.480 --> 18:08.920
For example, initially we did not understand correctly how to use traits.

18:08.920 --> 18:10.360
So we did not use them.

18:10.360 --> 18:13.480
And then we noticed, right, traits are really useful.

18:13.480 --> 18:15.240
We are not using them.

18:15.240 --> 18:20.440
And then we started to implement traits everywhere and make it more flexible.

18:20.440 --> 18:21.440
Thank you.

18:21.440 --> 18:22.440
Great.

18:22.440 --> 18:24.440
There's no more questions.

18:24.440 --> 18:26.880
Thank you for your talk.

18:26.880 --> 18:27.880
Thank you for listening.

18:27.880 --> 18:28.880
Thank you.

18:28.880 --> 18:29.880
Thank you.

18:29.880 --> 18:30.880
Thank you.

18:30.880 --> 18:31.880
Thank you.

18:31.880 --> 18:32.880
Thank you.

18:32.880 --> 18:33.880
Thank you.

18:33.880 --> 18:34.880
Thank you.

18:34.880 --> 18:35.880
Thank you.

18:35.880 --> 18:36.880
Thank you.

18:36.880 --> 18:37.880
Thank you.

18:37.880 --> 18:38.880
Thank you.

18:38.880 --> 18:39.880
Thank you.

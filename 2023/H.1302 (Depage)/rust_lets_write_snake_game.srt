1
0:00:00.000 --> 0:00:18.760
So now we've got Tommaso, he's going to tell us how to build a snake game.

2
0:00:18.760 --> 0:00:21.680
Are we going to build it together?

3
0:00:21.680 --> 0:00:22.680
Hopefully.

4
0:00:22.680 --> 0:00:23.760
Hi all.

5
0:00:23.760 --> 0:00:30.600
Today we are here to talk about snake, obviously, rust and wasm.

6
0:00:30.600 --> 0:00:39.720
In particular we will see how to build a snake game written in rust and shiphead has a wasm

7
0:00:39.720 --> 0:00:41.720
module.

8
0:00:41.720 --> 0:00:45.080
Before doing that, I would like to introduce myself.

9
0:00:45.080 --> 0:00:48.240
Hi, I'm Tommaso, I have two cats.

10
0:00:48.240 --> 0:00:55.200
And commonly I used to be a software architect in web application environment.

11
0:00:55.200 --> 0:01:04.520
So probably the games is not my best stuff I can do build, but I try.

12
0:01:04.520 --> 0:01:09.800
So let's start to talk about what wasm is.

13
0:01:09.800 --> 0:01:18.200
Nevertheless, is a stack based virtual machine that allows to be portable.

14
0:01:18.200 --> 0:01:28.560
So we can build the application and bring where you want mostly.

15
0:01:28.560 --> 0:01:40.440
And the main target is web, but not linked to the web only.

16
0:01:40.440 --> 0:01:42.400
We will see later.

17
0:01:42.400 --> 0:01:46.800
So we have four concepts, efficient and fast.

18
0:01:46.800 --> 0:01:55.160
Memory safety, open the bug able and part of the web platform.

19
0:01:55.160 --> 0:01:59.440
For this reason we have four parts.

20
0:01:59.440 --> 0:02:06.080
The core one, JavaScript API that allow us to interact with JavaScript worlds like browser

21
0:02:06.080 --> 0:02:08.520
nodes and so on.

22
0:02:08.520 --> 0:02:14.880
Web API that allow us to interact with DOM events and so on.

23
0:02:14.880 --> 0:02:23.680
And Wazi, this is a code for WebAssembly system integration if I remember correctly.

24
0:02:23.680 --> 0:02:29.560
That allow us to interact with file system, networking and so on.

25
0:02:29.560 --> 0:02:39.600
Obviously Wazi is not allowed in browser context for some reason.

26
0:02:39.600 --> 0:02:43.880
So how we can write a wasm module?

27
0:02:43.880 --> 0:02:50.240
But wasm actually supports two kinds of format, text and binary.

28
0:02:50.240 --> 0:02:55.920
But probably you don't want to write directly into wasm.

29
0:02:55.920 --> 0:03:03.560
For example, assembly probably in this year no one writes in assembly directly.

30
0:03:03.560 --> 0:03:06.480
But if you want you can do that.

31
0:03:06.480 --> 0:03:10.640
But probably you want leverage on different languages.

32
0:03:10.640 --> 0:03:15.440
For example, C, C++, Rust, Go and so on.

33
0:03:15.440 --> 0:03:27.080
But if you remember the previous slide we talked about the memory safe of the WebAssembly

34
0:03:27.080 --> 0:03:34.240
and which is the other language that remember has a similar capability.

35
0:03:34.240 --> 0:03:39.200
Rust because Rust guarantee memory safety.

36
0:03:39.200 --> 0:03:46.400
And this is why we are here to talk about Rust plus WebAssembly.

37
0:03:46.400 --> 0:03:52.800
So which is the constraint we have for building wasm in Rust?

38
0:03:52.800 --> 0:03:57.920
Unfortunately we are not so free to use what we want.

39
0:03:57.920 --> 0:04:04.160
We need to put an attribute wasm in gen in all type of export.

40
0:04:04.160 --> 0:04:10.400
So structure and so on, but not linked to that.

41
0:04:10.400 --> 0:04:14.680
Also the implementation block we need to treat like that.

42
0:04:14.680 --> 0:04:23.000
So put the same attribute on top of the implementation block.

43
0:04:23.000 --> 0:04:29.600
And unfortunately wasm doesn't understand all the types available in Rust.

44
0:04:29.600 --> 0:04:37.560
So by our integer but not all the integer supported 14 points and vector.

45
0:04:37.560 --> 0:04:42.040
We have some limitation about that.

46
0:04:42.040 --> 0:04:49.640
Has consequence, for example, enumeration need to be treated as a use 80.

47
0:04:49.640 --> 0:05:07.760
And all the values from methods need to be casted to some wasm types or it was in gen

48
0:05:07.760 --> 0:05:10.800
structure.

49
0:05:10.800 --> 0:05:19.800
So we are here to talk about snake.

50
0:05:19.800 --> 0:05:22.160
Who play at least one snake?

51
0:05:22.160 --> 0:05:23.920
At least one.

52
0:05:23.920 --> 0:05:24.920
Okay.

53
0:05:24.920 --> 0:05:25.920
Phew.

54
0:05:25.920 --> 0:05:26.920
Okay.

55
0:05:26.920 --> 0:05:28.840
For the other snake is a simplest game.

56
0:05:28.840 --> 0:05:29.840
Two grid.

57
0:05:29.840 --> 0:05:34.320
There is a two dimension grid.

58
0:05:34.320 --> 0:05:46.120
Your aim is to win for winning, avoiding the go through a wall and eat yourself.

59
0:05:46.120 --> 0:05:52.120
You are able to eat foods that give you scores and so on.

60
0:05:52.120 --> 0:06:00.360
Your aim is to drive the snake through walls and try to eat the food more or less.

61
0:06:00.360 --> 0:06:02.680
Anyway we will see you later.

62
0:06:02.680 --> 0:06:05.920
So our code is here.

63
0:06:05.920 --> 0:06:12.480
Is a cargo workspace with three members.

64
0:06:12.480 --> 0:06:19.080
The first one is just plain Rust implementation of game logic without wasm stuff, without

65
0:06:19.080 --> 0:06:22.520
any other part.

66
0:06:22.520 --> 0:06:29.960
The second one is handmade snake that is just a wrapper on the previous one in order to

67
0:06:29.960 --> 0:06:35.800
let a JavaScript world to import it and use it.

68
0:06:35.800 --> 0:06:42.600
So we implement the web interface manually through JavaScript and DOMS.

69
0:06:42.600 --> 0:06:51.640
And the last is a plugin that allows us to create a proficiency, more proficiency than

70
0:06:51.640 --> 0:06:53.440
manual ones.

71
0:06:53.440 --> 0:06:56.640
A game.

72
0:06:56.640 --> 0:07:01.280
The last two members use the first one.

73
0:07:01.280 --> 0:07:04.660
And we will see how.

74
0:07:04.660 --> 0:07:09.000
So conceptually we have a bunch of stuff.

75
0:07:09.000 --> 0:07:15.840
A direction that allows us to describe which is the direction the snake have.

76
0:07:15.840 --> 0:07:21.060
The point because we live inside a grid.

77
0:07:21.060 --> 0:07:25.820
So we have to somehow describe the point.

78
0:07:25.820 --> 0:07:34.720
The game itself, private stuff, but mainly we have two members.

79
0:07:34.720 --> 0:07:38.520
Tick and get the last snapshot.

80
0:07:38.520 --> 0:07:46.480
Tick allows us to move the snake in the direction specified there.

81
0:07:46.480 --> 0:07:55.440
And the last snapshot allows us to know what happened in the last tick.

82
0:07:55.440 --> 0:08:02.840
For example, I eat a food, I go through the wall, which is my score, which is the position,

83
0:08:02.840 --> 0:08:06.880
and last but not least, the period duration.

84
0:08:06.880 --> 0:08:15.680
Because you know in the game the interval between the ticks change accordingly with

85
0:08:15.680 --> 0:08:16.680
your score.

86
0:08:16.680 --> 0:08:23.920
So the game more go on than the period decrease.

87
0:08:23.920 --> 0:08:32.480
So how we can use hopefully you read the code.

88
0:08:32.480 --> 0:08:33.480
Cross the finger.

89
0:08:33.480 --> 0:08:35.880
Anyway, I describe it.

90
0:08:35.880 --> 0:08:37.680
We have a level.

91
0:08:37.680 --> 0:08:45.120
Describe it has a simple way through a string.

92
0:08:45.120 --> 0:08:50.280
We can parse it creating a game.

93
0:08:50.280 --> 0:09:00.040
We invoke a tick method on the game describing which is the direction we want to use.

94
0:09:00.040 --> 0:09:04.040
Get the last snapshot, check status.

95
0:09:04.040 --> 0:09:14.600
For example, in this case I eat a food because the age goes on the food.

96
0:09:14.600 --> 0:09:20.960
We are not yet on the wall and the game over is none.

97
0:09:20.960 --> 0:09:27.000
Instead the code below goes through the wall.

98
0:09:27.000 --> 0:09:34.540
So on the wall is true and the game over is some with the reason.

99
0:09:34.540 --> 0:09:39.840
And finally we have two public levels.

100
0:09:39.840 --> 0:09:41.120
Snake one is the two.

101
0:09:41.120 --> 0:09:47.880
The difference probably you know but for repeating the difference is the frame.

102
0:09:47.880 --> 0:09:54.920
So in snake one we have a frame with all the walls.

103
0:09:54.920 --> 0:09:58.480
Instead snake two is more like a toroid.

104
0:09:58.480 --> 0:10:06.220
So you can go left and appear on the right and appear on the ground.

105
0:10:06.220 --> 0:10:09.960
So how we can use this.

106
0:10:09.960 --> 0:10:11.800
We have snake core.

107
0:10:11.800 --> 0:10:16.340
Again, without any dependency.

108
0:10:16.340 --> 0:10:23.080
We need to repeat because we already seen.

109
0:10:23.080 --> 0:10:27.360
We have some deficit about that.

110
0:10:27.360 --> 0:10:38.320
We have some custom JavaScript code that interact with DOM in order to update the UI.

111
0:10:38.320 --> 0:10:42.080
Which is more like what happened.

112
0:10:42.080 --> 0:10:48.520
And at compilation time after the compilation actually we have a process for compilation.

113
0:10:48.520 --> 0:10:55.840
The last code into a wasm and this compilation generates two artifacts actually.

114
0:10:55.840 --> 0:11:03.000
The wasm itself and the auto generated JavaScript module that allows us to simplify the interaction

115
0:11:03.000 --> 0:11:05.640
with the wasm module.

116
0:11:05.640 --> 0:11:10.240
Remember that the same JavaScript code in the same DOM.

117
0:11:10.240 --> 0:11:20.320
So more or less what we have is wasm and auto generated JavaScript that allows us a lot.

118
0:11:20.320 --> 0:11:24.760
So shortly we need to wrap all the stuff.

119
0:11:24.760 --> 0:11:25.720
All the stuff.

120
0:11:25.720 --> 0:11:33.360
So the direction, the point, the game, the snapshot and so on.

121
0:11:33.360 --> 0:11:38.920
So definitely we are not able to do that for a large project.

122
0:11:38.920 --> 0:11:46.000
Obviously this works for a little once like snake but if you want to build a bigger one

123
0:11:46.000 --> 0:11:48.960
probably is not the best solution.

124
0:11:48.960 --> 0:11:57.040
But if you want instead create a cartographic library, hashing library, something like that,

125
0:11:57.040 --> 0:11:58.720
this is really amazing.

126
0:11:58.720 --> 0:12:01.160
It's sufficient.

127
0:12:01.160 --> 0:12:04.880
But for the gaming probably not so much.

128
0:12:04.880 --> 0:12:21.740
So before seeing which is our alternative we have a demo that you can find in the code.

129
0:12:21.740 --> 0:12:32.920
So let's see if it works properly.

130
0:12:32.920 --> 0:12:39.440
Obviously yes.

131
0:12:39.440 --> 0:12:41.520
Here.

132
0:12:41.520 --> 0:12:51.720
Because I haven't the framework that helped me to build a better UI, I choose this one

133
0:12:51.720 --> 0:12:57.080
sorry, I'm not a UI expert.

134
0:12:57.080 --> 0:13:01.520
So for our purpose is sufficient.

135
0:13:01.520 --> 0:13:07.600
As you can see here there is some bootstrap webpack blah blah blah, we don't care at all.

136
0:13:07.600 --> 0:13:12.320
But at the third point we download wasm.

137
0:13:12.320 --> 0:13:18.520
Wasm is a few kilobytes, so not so big.

138
0:13:18.520 --> 0:13:26.160
And the user is able to choose which the game he would like to play, click on here and move

139
0:13:26.160 --> 0:13:28.560
with the arrow key.

140
0:13:28.560 --> 0:13:34.240
Not whoa but why not whoa.

141
0:13:34.240 --> 0:13:35.240
Thanks.

142
0:13:35.240 --> 0:13:36.240
Okay.

143
0:13:36.240 --> 0:13:44.880
Obviously when I go through the wall the game is put on wall.

144
0:13:44.880 --> 0:13:48.800
And not the best user experience we have but sorry.

145
0:13:48.800 --> 0:13:56.320
So we will see the code together in the final Q&A session.

146
0:13:56.320 --> 0:13:58.440
So sorry.

147
0:13:58.440 --> 0:14:00.840
Time to strain it.

148
0:14:00.840 --> 0:14:06.240
So which is our alternative?

149
0:14:06.240 --> 0:14:11.120
Our alternative there are many alternatives obviously.

150
0:14:11.120 --> 0:14:17.760
I chose Bevy engine because I like it.

151
0:14:17.760 --> 0:14:26.760
I didn't find again I web developer so for gaming stuff I don't understand nothing.

152
0:14:26.760 --> 0:14:35.720
But Bevy engine allow me to put something in short time so good stuff guys, good stuff

153
0:14:35.720 --> 0:14:37.240
team.

154
0:14:37.240 --> 0:14:41.800
And support across platform as well.

155
0:14:41.800 --> 0:14:47.640
Windows Mac, Windows and obviously web.

156
0:14:47.640 --> 0:14:52.160
The pattern used is a CS, entity component system.

157
0:14:52.160 --> 0:14:56.800
Entity is just an ID that you can put on the wall.

158
0:14:56.800 --> 0:15:02.080
And the component is a tag, something you can attach to an entity like image, like a

159
0:15:02.080 --> 0:15:05.920
position, like something like that.

160
0:15:05.920 --> 0:15:11.520
And system is a function that work on those stuff.

161
0:15:11.520 --> 0:15:17.840
Can add the entity remove the component, remove a component, move existing component and so

162
0:15:17.840 --> 0:15:19.240
on.

163
0:15:19.240 --> 0:15:34.640
So more or less how Bevy works, each frame invokes Bevy runs our function called system.

164
0:15:34.640 --> 0:15:43.560
Let change add remove components and entities.

165
0:15:43.560 --> 0:15:47.080
That allow us to change our worlds.

166
0:15:47.080 --> 0:15:54.640
And finally Bevy render some of them obviously on the screen.

167
0:15:54.640 --> 0:16:04.280
So conceptually this is what I understand in two years at night obviously is not my

168
0:16:04.280 --> 0:16:06.000
job again.

169
0:16:06.000 --> 0:16:12.920
So it is almost simplest to understand.

170
0:16:12.920 --> 0:16:20.640
Last stuff to introduce of Bevy, we have another concept I need to introduce.

171
0:16:20.640 --> 0:16:28.760
Event is a plain object that allow us to be fired and to be listened.

172
0:16:28.760 --> 0:16:37.200
So we can inform other function, other systems that something happens.

173
0:16:37.200 --> 0:16:43.960
And the resources is just a global instance because system is allowed to access only on

174
0:16:43.960 --> 0:16:47.820
the world, not our custom objects.

175
0:16:47.820 --> 0:16:56.360
So you need to put your resources on the world and fetch it inside the system.

176
0:16:56.360 --> 0:17:02.200
And a nice feature, Bevy tracks when a resource changes.

177
0:17:02.200 --> 0:17:04.040
We will see later.

178
0:17:04.040 --> 0:17:07.280
So how can you them?

179
0:17:07.280 --> 0:17:14.600
A system for example firing events that is listened by system two that on that event

180
0:17:14.600 --> 0:17:22.520
change accordingly a resource A and the system three more or less react on that change.

181
0:17:22.520 --> 0:17:28.840
For example moving the snake.

182
0:17:28.840 --> 0:17:39.720
So let's have a look to a more detailed example on the code skipping the arguments because

183
0:17:39.720 --> 0:17:45.640
it is not important to understand better what I would like to show.

184
0:17:45.640 --> 0:17:55.240
Mostly because systems runs every frame, we don't want to tick on every frame.

185
0:17:55.240 --> 0:17:59.520
We want to wait a time here.

186
0:17:59.520 --> 0:18:06.000
So you know also for test proposing, this is nice.

187
0:18:06.000 --> 0:18:10.320
So we need to wait the tick event.

188
0:18:10.320 --> 0:18:19.000
So only when the tick event is fired, we call tick method on game.

189
0:18:19.000 --> 0:18:28.360
Game is on the third argument that the game resources obviously is the game we saw before.

190
0:18:28.360 --> 0:18:37.080
After that we get the snapshot to check if the game over is we are in game over.

191
0:18:37.080 --> 0:18:43.520
If yes, we send, we fire a game over event.

192
0:18:43.520 --> 0:18:49.760
After that we update the snake position, update the resource score, update the food and duration

193
0:18:49.760 --> 0:18:56.280
of the timer because you know the period can change.

194
0:18:56.280 --> 0:19:04.440
Nice stuff to be focused on is the if because we don't want to change if the real value

195
0:19:04.440 --> 0:19:06.760
is changed.

196
0:19:06.760 --> 0:19:13.360
Maybe leverage on the refmute.

197
0:19:13.360 --> 0:19:21.120
So it is important to not refmute before the real change.

198
0:19:21.120 --> 0:19:25.320
So have a look at a quick demo.

199
0:19:25.320 --> 0:19:28.840
After the demo we can see the code.

200
0:19:28.840 --> 0:19:30.560
I promise.

201
0:19:30.560 --> 0:19:42.120
So again, the demo, I propose you to show the native part.

202
0:19:42.120 --> 0:19:55.800
So this is our windows that is created natively.

203
0:19:55.800 --> 0:20:03.920
Again I can choose next one with button this time.

204
0:20:03.920 --> 0:20:13.440
And again, it is not my job but this is what I implemented.

205
0:20:13.440 --> 0:20:20.760
So as you can see under the hood there is some locks and in front of you should be at

206
0:20:20.760 --> 0:20:28.760
least the snake that runs through the table.

207
0:20:28.760 --> 0:20:35.680
And this is the way I handled the game over.

208
0:20:35.680 --> 0:20:40.760
And obviously quit closed the windows.

209
0:20:40.760 --> 0:20:52.920
So we have three different states in our game and in our code I treat these in three different

210
0:20:52.920 --> 0:20:55.040
packages, sub-packages.

211
0:20:55.040 --> 0:20:57.600
Choose game, play game and game over.

212
0:20:57.600 --> 0:21:06.640
And as you probably understand we can leverage on event system to bring the user from one

213
0:21:06.640 --> 0:21:10.040
state to another one.

214
0:21:10.040 --> 0:21:12.560
Also because it is written there.

215
0:21:12.560 --> 0:21:18.880
So let's focus on the play state because probably the most important one.

216
0:21:18.880 --> 0:21:22.000
So what we need to do in the play state?

217
0:21:22.000 --> 0:21:29.800
Probably we need to surely when we enter in that state we create the resource, the dedicated

218
0:21:29.800 --> 0:21:35.600
resource and make the initial draw.

219
0:21:35.600 --> 0:21:41.360
After that we already saw we need to wait the key event called game methods.

220
0:21:41.360 --> 0:21:47.440
Update the position, update the foot position and the square number.

221
0:21:47.440 --> 0:21:58.480
And surely we do not forget them handling the press key and the file the game tick.

222
0:21:58.480 --> 0:22:03.760
So this is the last slides.

223
0:22:03.760 --> 0:22:09.480
After that we can run in we will see the output and the code.

224
0:22:09.480 --> 0:22:15.920
So the graphical representation we have in red the system so the function.

225
0:22:15.920 --> 0:22:20.960
Handle keyboard input that update the direction resource.

226
0:22:20.960 --> 0:22:30.760
We will see it before when I press the key the direction resource change.

227
0:22:30.760 --> 0:22:36.560
And game tick is the function that wait six seconds.

228
0:22:36.560 --> 0:22:48.240
So after six seconds since game tick event, listen by tick system, that update after calling

229
0:22:48.240 --> 0:22:53.480
tick on the game all the resources.

230
0:22:53.480 --> 0:23:04.480
Because the resource change I can update accordingly the score of the snake and the food.

231
0:23:04.480 --> 0:23:13.960
Why I started like that because the last three systems I mentioned the score of the snake

232
0:23:13.960 --> 0:23:24.960
up the foods can be paralyzed by bevy, bevy has a system that allow you to automatically

233
0:23:24.960 --> 0:23:27.400
paralyze the system.

234
0:23:27.400 --> 0:23:31.880
If he understood that is paralyzable.

235
0:23:31.880 --> 0:23:37.920
For example, doesn't access immutable way on the same stuff.

236
0:23:37.920 --> 0:23:44.680
So show me the code but probably show me the result also.

237
0:23:44.680 --> 0:23:45.680
If you want.

238
0:23:45.680 --> 0:23:46.680
You want.

239
0:23:46.680 --> 0:23:47.680
Okay.

240
0:23:47.680 --> 0:23:48.680
Okay.

241
0:23:48.680 --> 0:24:02.200
So I built it in release mode.

242
0:24:02.200 --> 0:24:05.160
And this is important.

243
0:24:05.160 --> 0:24:07.280
Refresh the page.

244
0:24:07.280 --> 0:24:08.280
Okay.

245
0:24:08.280 --> 0:24:13.560
As you can see here we have 60 megabytes not kilo.

246
0:24:13.560 --> 0:24:21.160
But not in release mode this heavy up to 70 mega if I remember correctly.

247
0:24:21.160 --> 0:24:28.000
So crazy.

248
0:24:28.000 --> 0:24:30.000
Snake one.

249
0:24:30.000 --> 0:24:34.360
Obviously the same user experience, the same go.

250
0:24:34.360 --> 0:24:35.360
Yes.

251
0:24:35.360 --> 0:24:36.360
Sorry.

252
0:24:36.360 --> 0:24:41.000
The same user experience.

253
0:24:41.000 --> 0:24:45.720
And as you can see here there is the logs also.

254
0:24:45.720 --> 0:24:57.120
Nice feature is that he also link to the particular lines.

255
0:24:57.120 --> 0:25:01.080
And it is amazing at least from my point of view.

256
0:25:01.080 --> 0:25:07.760
So let's dig into the code.

257
0:25:07.760 --> 0:25:11.640
So we have time.

258
0:25:11.640 --> 0:25:14.720
Apparently, yes.

259
0:25:14.720 --> 0:25:20.640
So here we have the handmade snake.

260
0:25:20.640 --> 0:25:27.480
I remember that this is just a wrapper around our core implementation.

261
0:25:27.480 --> 0:25:38.760
As you can see here there is a JavaScript API from the WebAssembly package we described

262
0:25:38.760 --> 0:25:39.760
before.

263
0:25:39.760 --> 0:25:46.200
The other part is just the tracing, for example, a different allocation.

264
0:25:46.200 --> 0:25:52.400
The second dependency allows us to print a message on panic, for example.

265
0:25:52.400 --> 0:25:56.120
And the first is the was being done.

266
0:25:56.120 --> 0:26:09.880
So because I don't lie, not now, at least, here we have all the being done attributes

267
0:26:09.880 --> 0:26:16.360
with all the enumeration, the structures, and so on.

268
0:26:16.360 --> 0:26:30.520
And here under this folder we have the classic webpack frontend stuff.

269
0:26:30.520 --> 0:26:35.440
I really don't know what is this.

270
0:26:35.440 --> 0:26:48.240
So for building it, I use waspack that allows us to translate in wasm and used in the handmade

271
0:26:48.240 --> 0:26:50.240
package.

272
0:26:50.240 --> 0:27:07.360
Instead, the snake is built using track that allows us to somehow transform all the rest

273
0:27:07.360 --> 0:27:15.040
plus index.html into a web application directly.

274
0:27:15.040 --> 0:27:29.240
And if you are question how it works, why we made handmade snake and the baby snake,

275
0:27:29.240 --> 0:27:36.040
which is the main difference under the hood, the answer is this.

276
0:27:36.040 --> 0:27:38.560
Sorry.

277
0:27:38.560 --> 0:27:40.080
I can't.

278
0:27:40.080 --> 0:27:41.080
Okay.

279
0:27:41.080 --> 0:27:47.040
This is the public repository on GitHub.

280
0:27:47.040 --> 0:27:53.760
And here, as you can see, there is a web system, another API that allows us to interact with

281
0:27:53.760 --> 0:27:54.960
the DOM world.

282
0:27:54.960 --> 0:28:07.080
So at the last side, we can change the canvas because under the hood there is the canvas.

283
0:28:07.080 --> 0:28:16.080
So more or less, I have done.

284
0:28:16.080 --> 0:28:17.080
Thank you.

285
0:28:17.080 --> 0:28:24.240
If there is any questions, I will be happy.

286
0:28:24.240 --> 0:28:25.240
Be kind.

287
0:28:25.240 --> 0:28:32.720
So we have about five minutes for questions.

288
0:28:32.720 --> 0:28:33.720
Be kind.

289
0:28:33.720 --> 0:28:49.040
Can we have a show of hands for questions?

290
0:28:49.040 --> 0:28:54.320
Have you ever played around with much more entities than maybe like 100,000 or 1 million

291
0:28:54.320 --> 0:28:57.040
entities?

292
0:28:57.040 --> 0:28:59.040
Good question.

293
0:28:59.040 --> 0:29:04.200
No, I didn't.

294
0:29:04.200 --> 0:29:08.360
I know that the limitation here is the thread number.

295
0:29:08.360 --> 0:29:12.200
We have in JavaScript, we have in browser.

296
0:29:12.200 --> 0:29:20.400
If you don't use WebWorker, for example, you don't able to scale on this part.

297
0:29:20.400 --> 0:29:25.880
Bevy is not using WebWorker, at least for the time being.

298
0:29:25.880 --> 0:29:28.920
So he is not able to parallelize.

299
0:29:28.920 --> 0:29:36.120
And for this reason, probably you can find a limitation.

300
0:29:36.120 --> 0:29:52.440
There is no Internet, but in the Bevy engine website, there is a dedicated example.

301
0:29:52.440 --> 0:30:12.440
Also, ship has Wasm, so you can find it and give me the answer, please.

302
0:30:12.440 --> 0:30:13.440
Thanks.

303
0:30:13.440 --> 0:30:14.440
Thank you very much.

304
0:30:14.440 --> 0:30:15.440
How are you feeling?

305
0:30:15.440 --> 0:30:26.280
Seems to be good.


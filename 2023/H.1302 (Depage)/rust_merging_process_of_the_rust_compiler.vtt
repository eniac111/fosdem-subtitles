WEBVTT

00:00.000 --> 00:07.520
So, we have Guillaume.

00:07.520 --> 00:11.200
He's going to talk about the merging process for the Rust compiler.

00:11.200 --> 00:12.200
Okay.

00:12.200 --> 00:14.440
Yeah, you can hear me.

00:14.440 --> 00:15.440
Perfect.

00:15.440 --> 00:16.440
So, hi, everyone.

00:16.440 --> 00:22.920
So, I'll be talking, as you mentioned, about the merge process in the Rust compiler.

00:22.920 --> 00:31.560
So, who I am first, Rust language reviewer and contributor, member of a few team.

00:31.560 --> 00:33.680
So I'm in the Rust doc team.

00:33.680 --> 00:37.000
Not to be confused with the former documentation team.

00:37.000 --> 00:39.840
Also, docs.rest team and DevTools team.

00:39.840 --> 00:42.680
So very documentation oriented.

00:42.680 --> 00:48.320
And I'm working at Huawei currently.

00:48.320 --> 00:53.880
So we will start by taking a scenario.

00:53.880 --> 00:56.880
Hold on.

00:56.880 --> 01:01.440
So when you have made the pull request, you open it.

01:01.440 --> 01:07.320
And the first thing that will happen on the pull request will be that the bot will assign

01:07.320 --> 01:10.000
you a reviewer.

01:10.000 --> 01:11.160
So in this case, myself.

01:11.160 --> 01:16.080
So very likely a pull request on a Rust doc tool.

01:16.080 --> 01:18.720
And after that, you will have some tags.

01:18.720 --> 01:25.560
So it's waiting on review and it's concerning the Rust doc team which helps us to find the

01:25.560 --> 01:34.800
right people in case the reviewer assigned isn't available in a week, if I remember correctly.

01:34.800 --> 01:41.000
So explanation a bit about how the bot is picking the people.

01:41.000 --> 01:49.680
We have a repository with the list of all teams and its members, formers and everything.

01:49.680 --> 01:55.880
And the bot basically picks someone from this repository.

01:55.880 --> 02:04.080
And this website, the governance page on the Rust-long.org website is generated from it.

02:04.080 --> 02:09.560
So if you need to contact someone from one of the team, whatever reason, that's where

02:09.560 --> 02:14.120
you go.

02:14.120 --> 02:16.440
So now the approval itself.

02:16.440 --> 02:24.440
So let's say that the pull request is implemented with no request from the reviewer or anything.

02:24.440 --> 02:31.240
If it has a knowing performance impact for this to have this information, if we have

02:31.240 --> 02:40.200
a depth, we have tools that allow us to actually check if it's actually the case.

02:40.200 --> 02:47.560
So if needed, we just say, hey, Rustbot, can you run a perf check on this?

02:47.560 --> 02:49.320
I will come back to this later.

02:49.320 --> 02:54.680
And we have a very nice page with some metrics and a lot of steps.

02:54.680 --> 03:00.960
So another important thing is checking that there is no breaking change.

03:00.960 --> 03:06.680
So of course, if you are changing something in the STD, for example, or changing how projection

03:06.680 --> 03:13.400
works on anything, then it becomes a lot more complex and process becomes a lot longer.

03:13.400 --> 03:16.560
The same way we'll come back to this later.

03:16.560 --> 03:24.240
Of course, if it adds a new feature, it's very likely that we will need to be sure at

03:24.240 --> 03:29.360
100% that it's not something that we'll need to change, or deprecate, or literally just

03:29.360 --> 03:35.800
remove at some point because it happened a few times and it's not great.

03:35.800 --> 03:38.880
And obviously, the CI must pass.

03:38.880 --> 03:45.320
So that's a lot of small conditions.

03:45.320 --> 03:47.480
So now about the CI.

03:47.480 --> 03:50.080
So there are two levels of CI.

03:50.080 --> 03:54.080
The one that you will see directly when you open the pull request.

03:54.080 --> 04:04.080
It's a lot of tests, almost all of them, but it's only on Linux X64 because as you may

04:04.080 --> 04:12.240
know, we support quite a lot of targets, not as much as GCC yet, but at some point maybe.

04:12.240 --> 04:19.160
And this checks, for example, if the call is wait-formited, if you have all the tests

04:19.160 --> 04:22.800
passing, and by all the tests, I mean literally all the tests.

04:22.800 --> 04:28.640
So you have all the rest tool tests.

04:28.640 --> 04:35.560
The compiler error output, the compiler checks if the code is giving the right result, the

04:35.560 --> 04:39.940
assembly, pretty much everything, and it includes the tools.

04:39.940 --> 04:47.240
So if you made a change in the compiler that breaks a tool like rest.clippy or rest.fmt,

04:47.240 --> 04:50.240
then we need to be aware of it right away.

04:50.240 --> 04:54.560
Otherwise, we are going to have quite a bit of time.

04:54.560 --> 04:58.720
And all that is done directly on the pull request.

04:58.720 --> 05:06.720
So at the current time, it takes around one hour to run this small subset.

05:06.720 --> 05:14.480
And when the pull request has been approved, we make the full run of all these tests and

05:14.480 --> 05:17.440
for all platforms.

05:17.440 --> 05:23.320
And this time, it's when, I think if I remember correctly, it's like on 40 targets or something

05:23.320 --> 05:29.520
like that, and it takes roughly around three hours.

05:29.520 --> 05:31.760
We have our own infra for this.

05:31.760 --> 05:36.640
We have dedicated the team for that too, the infra team.

05:36.640 --> 05:41.520
And I think it's currently done on AWS to be confirmed.

05:41.520 --> 05:46.740
But in short, nothing can be merged if the CI doesn't pass.

05:46.740 --> 05:50.720
We enforce this, I think it was three or four years ago.

05:50.720 --> 05:58.480
A few things that were merged and were expected to be fixed in very soon comic fixes were

05:58.480 --> 06:03.800
quite bad experiences, and we decided to have zero tolerance policy.

06:03.800 --> 06:05.240
It's working quite nice.

06:05.240 --> 06:09.120
So currently, we keep it.

06:09.120 --> 06:11.200
So now the build queue.

06:11.200 --> 06:19.520
Then we approve the pull request with the command at the R+, you might have seen it

06:19.520 --> 06:21.880
or not.

06:21.880 --> 06:27.880
We have a build queue, and that's where you can see pretty much everything that is happening.

06:27.880 --> 06:32.560
So in the current case, you will see the pull request, the first one which is pending.

06:32.560 --> 06:40.160
So it allows you to see what is being tested and eventually how long it remains.

06:40.160 --> 06:44.040
And you can see also everything that is approved and everything.

06:44.040 --> 06:51.760
And it's sorted by priority first, which you can see because I had to make a small screenshot.

06:51.760 --> 06:56.960
And the second thing is how old the pull request is.

06:56.960 --> 07:04.960
We generally have around 20 pull requests at the same time in this build queue.

07:04.960 --> 07:10.060
So to make things faster, we have what we call a rollup process.

07:10.060 --> 07:15.920
We group a full pull request that we are sure have no performance impact or anything.

07:15.920 --> 07:20.420
And we say, OK, make a rollup of five pull requests.

07:20.420 --> 07:22.880
You can see the button, create a rollup.

07:22.880 --> 07:28.400
So we pick a few pull requests and we click on the button, and it generates a pull request

07:28.400 --> 07:31.000
for us with our account.

07:31.000 --> 07:37.800
And after that, we give it quite a high priority and like that we can have a big bunch of pull

07:37.800 --> 07:39.600
requests merged at once.

07:39.600 --> 07:41.800
Very useful.

07:41.800 --> 07:44.660
And that's it for the build queue.

07:44.660 --> 07:49.000
So what I explained a bit before, what is tested.

07:49.000 --> 07:50.620
So we have the compile test.

07:50.620 --> 07:56.640
So if your code is supposed to compile or not, because for example, we want to ensure

07:56.640 --> 08:04.320
certain cases in very weird cases don't compile or in the other case, compile.

08:04.320 --> 08:09.240
And that's how you can discover things like you can't implement directly on projections.

08:09.240 --> 08:13.520
And if that doesn't speak much to you, it's a good sign.

08:13.520 --> 08:16.560
We have all the unit tests.

08:16.560 --> 08:19.520
Unit tests are mostly for the tools.

08:19.520 --> 08:28.400
But we have a few tests with like I mentioned just below the error output.

08:28.400 --> 08:29.400
It's quite important.

08:29.400 --> 08:36.000
So we ensure that the Rust doc and the Rust C errors are looking exactly as you might

08:36.000 --> 08:37.560
expect.

08:37.560 --> 08:44.200
If you ever used, and I think a lot of you used already Rust, you might have appreciated

08:44.200 --> 08:47.960
the errors and the output.

08:47.960 --> 08:51.000
That's because they are very, very strongly tested.

08:51.000 --> 08:56.640
Currently, just for the UI test, we have around 20,000 tests.

08:56.640 --> 09:00.760
So it's quite monstrous and running it take quite some time.

09:00.760 --> 09:04.320
I think it's, well, at least 10 minutes, something like that.

09:04.320 --> 09:06.520
It's quite heavy.

09:06.520 --> 09:12.760
Maybe you don't know it, but the documentation example are tested, all of them.

09:12.760 --> 09:17.480
You can just test them manually in your code by running cargo test.

09:17.480 --> 09:24.600
The cargo tool will take all the unit tests in your code, test folder, will run on everything.

09:24.600 --> 09:29.000
And it includes, of course, everything that is in the documentation.

09:29.000 --> 09:37.320
So that allows us to reduce the maintenance burden by being sure that we don't give examples

09:37.320 --> 09:41.400
that are not compiling anymore or completely broken.

09:41.400 --> 09:42.720
Quite useful once again.

09:42.720 --> 09:44.280
It reduces burden.

09:44.280 --> 09:47.800
And of course, we have all the tools.

09:47.800 --> 09:50.520
So cargo, raster, clippy, rest, fmt.

09:50.520 --> 09:59.440
So as I mentioned, when you change something on the compiler, since these tools are using

09:59.440 --> 10:04.960
directly the compiler, they are actually compiler extensions except the cargo.

10:04.960 --> 10:10.000
Cargo is just tested to ensure that not a new option is breaking something.

10:10.000 --> 10:14.160
So for the others, there are extensions of the compiler, and we need to ensure that no

10:14.160 --> 10:19.720
changes is breaking anything because that would be problematic.

10:19.720 --> 10:26.560
We generate a lot of documentation, and we have to ensure that we have no dead links.

10:26.560 --> 10:30.880
And in fact, we do have some of them, and we ignore them on purpose.

10:30.880 --> 10:32.360
So sorry for that.

10:32.360 --> 10:37.520
We can't fix them because, funnily enough, in the STD, we re-export the stuff that is

10:37.520 --> 10:40.600
in the core, and they share the same documentation.

10:40.600 --> 10:46.840
So if you are looking at the documentation in the STD pages, other links are working

10:46.840 --> 10:48.840
in the core crate.

10:48.840 --> 10:49.840
They're not.

10:49.840 --> 10:54.120
So try to use the STD as much as possible.

10:54.120 --> 10:57.600
And it's just very basic, but we have quite a lot more.

10:57.600 --> 11:01.400
We mentioned in the previous talk the inline assembly.

11:01.400 --> 11:03.200
It's part of the things.

11:03.200 --> 11:10.160
We realized when working on the GCC backend this time is that GCC doesn't allow to specify

11:10.160 --> 11:14.040
a syntax that's thanks to this test suite.

11:14.040 --> 11:19.600
So currently, we can't implement all features, and it's going to take quite a long time,

11:19.600 --> 11:25.320
but hopefully at some point, someone motivated will do it.

11:25.320 --> 11:30.800
So on which OS and architectures are tested, everything.

11:30.800 --> 11:34.240
We have a target TR policy.

11:34.240 --> 11:38.720
You can go check it on the page just linked below.

11:38.720 --> 11:46.040
But basically, TR1 platforms are the platforms that are fully tested, implemented, and everything.

11:46.040 --> 11:48.840
So Mac OS, Linux, and Windows.

11:48.840 --> 11:55.600
And they must pass all the tests, and we build them, and we ensure that what we have built

11:55.600 --> 12:01.600
and has to be able to be uncompressed and working on the target and everything.

12:01.600 --> 12:04.560
So strict, very strict restriction.

12:04.560 --> 12:08.920
On the TR2 platforms, it's a lot more relaxed.

12:08.920 --> 12:10.920
We just need it to build.

12:10.920 --> 12:12.680
If it works, well, it's good.

12:12.680 --> 12:16.240
If it doesn't, well, too bad.

12:16.240 --> 12:19.320
And for the TR3 platforms, it exists.

12:19.320 --> 12:21.680
Yeah, that's great.

12:21.680 --> 12:27.000
So for example, if you want to build on the Nintendo 3DS, you can.

12:27.000 --> 12:30.880
We don't know if it would work, but you can.

12:30.880 --> 12:35.960
And you can see the list of the platforms each tier on the page just below.

12:35.960 --> 12:42.520
Like I mentioned, we have quite a lot, and we hope to be able to expand it a bit more

12:42.520 --> 12:47.120
by adding at least the GCC backend at some point.

12:47.120 --> 12:50.760
A lot of work remained.

12:50.760 --> 12:52.660
So what about releases now?

12:52.660 --> 12:56.920
Because as you might know, we make a release every six weeks.

12:56.920 --> 13:00.600
So it's very fast release cycle.

13:00.600 --> 13:04.600
So once this happens, the build queue is frozen.

13:04.600 --> 13:09.760
We don't allow anything below like a priority or 10,000 to be merged.

13:09.760 --> 13:16.160
It's a completely random number, but generally, if you go higher than 10, it's quite important.

13:16.160 --> 13:18.820
So in this case, we freeze everything.

13:18.820 --> 13:25.720
And the only things allowed to be merged are the patches to make actually the stable and

13:25.720 --> 13:28.400
better branches update.

13:28.400 --> 13:35.600
An important thing that is noted here is that we don't have the need to freeze for the Nike.

13:35.600 --> 13:41.000
We just say at a given time of every day, OK, this will be the really the Nike version

13:41.000 --> 13:42.000
for today.

13:42.000 --> 13:43.000
Yay.

13:43.000 --> 13:44.760
And that's it.

13:44.760 --> 13:47.920
So back to this, the third point.

13:47.920 --> 13:56.840
All relevant information is updated and we're and by that I mean the websites, the documentation,

13:56.840 --> 13:58.880
the book I think or two.

13:58.880 --> 13:59.880
Pretty much everything.

13:59.880 --> 14:02.200
We generate the binaries.

14:02.200 --> 14:03.800
So that's what I mentioned.

14:03.800 --> 14:10.960
That's the things that need to be working for at least tier one polyform.

14:10.960 --> 14:14.240
And of course, we make a blog post.

14:14.240 --> 14:19.880
Generally, the blog post is written not for the current stable reads, but we write it

14:19.880 --> 14:21.480
at the beta version.

14:21.480 --> 14:28.000
And then depending if we need the backports, for example, we realize that in the current

14:28.000 --> 14:32.120
beta version, something is completely broken and we don't want that.

14:32.120 --> 14:34.840
And it's an easy enough fix.

14:34.840 --> 14:41.400
Either we backport a patch that was merged on the Nike directly onto the beta branch

14:41.400 --> 14:43.880
or we say, OK, too bad.

14:43.880 --> 14:47.400
We reverse that and we'll do it the next time.

14:47.400 --> 14:49.480
It happened quite a lot.

14:49.480 --> 14:52.200
And it's not uncommon.

14:52.200 --> 14:55.040
Let's just say it's better if it doesn't happen.

14:55.040 --> 15:00.600
It allows us to not have the.1 version coming up like a three days later because we realize

15:00.600 --> 15:03.080
that we broke something.

15:03.080 --> 15:06.680
And the blog post is released.

15:06.680 --> 15:08.180
So now performance.

15:08.180 --> 15:13.520
What I mentioned is that we need to check sometimes performance.

15:13.520 --> 15:15.760
So we have to speed it now.

15:15.760 --> 15:19.960
So for the performance, we have a lot of benchmarks.

15:19.960 --> 15:24.920
You can see on the left, it's generally for the number of instructions that have been

15:24.920 --> 15:25.920
written.

15:25.920 --> 15:33.480
It's what we consider the most important metric and most stable.

15:33.480 --> 15:38.520
So when you have all green numbers and quite high, oh, it's 8%.

15:38.520 --> 15:41.760
Yeah, that's quite right.

15:41.760 --> 15:45.440
So when you have all green numbers, it's great and everyone is parting.

15:45.440 --> 15:50.400
And if you have all red numbers either, you have a very good reason or it's not going

15:50.400 --> 15:54.840
to be merged until you can make them at least black.

15:54.840 --> 16:02.160
And we have, like I said, a lot of metrics like cycles, memory usage, disk usage, because

16:02.160 --> 16:05.800
we start to worry about the binary size.

16:05.800 --> 16:11.720
We realized that all the doc attributes were generated in the binaries, which is not great.

16:11.720 --> 16:14.920
So we are going to fix that at some point.

16:14.920 --> 16:20.440
And you can see on the right that maybe you can see what just believe what I say.

16:20.440 --> 16:26.320
The results are showed in the nice comment directly on the pull request.

16:26.320 --> 16:31.920
So other cases, when you add a new feature or introducing a breaking change, there are

16:31.920 --> 16:34.080
three possibilities.

16:34.080 --> 16:38.360
The mostly known one is the RFC, request for comments.

16:38.360 --> 16:40.000
It has its own repository.

16:40.000 --> 16:42.920
It takes a lot of time and effort and comments.

16:42.920 --> 16:47.120
And it can go really fast, like two days.

16:47.120 --> 16:50.000
Or it can take an indefinite amount of time.

16:50.000 --> 16:57.000
Some examples, some references have been opened and still are commented on since before the

16:57.000 --> 16:58.000
1.0.

16:58.000 --> 17:00.360
So that gives you an idea.

17:00.360 --> 17:03.160
We have the MCP, major compiler changes.

17:03.160 --> 17:05.920
So not too big changes in the compiler.

17:05.920 --> 17:08.480
We find it not to great how the query system is working.

17:08.480 --> 17:10.200
So let's try this solution.

17:10.200 --> 17:14.240
And they discuss mostly design and very technical points.

17:14.240 --> 17:15.240
Interesting.

17:15.240 --> 17:19.760
But if you don't know this area, it's not very understandable.

17:19.760 --> 17:22.400
And the last one is common to all teams.

17:22.400 --> 17:26.880
So the FCP, the final comment period, it's something that we want.

17:26.880 --> 17:30.000
And we just want to be sure that everyone is on board.

17:30.000 --> 17:32.120
So we ask for an FCP.

17:32.120 --> 17:38.440
And once more than half of the members of the team are OK with it, then we approve it.

17:38.440 --> 17:41.560
And here we go.

17:41.560 --> 17:48.080
So we, of course, for every pull request that is merged, we check for potential example.

17:48.080 --> 17:49.880
No, that's before.

17:49.880 --> 17:50.880
Sorry.

17:50.880 --> 18:00.080
When we make a new feature that potentially change current behavior, we look for potential

18:00.080 --> 18:02.760
integrations in all the creates ecosystems.

18:02.760 --> 18:05.520
So we make what we call a creator run.

18:05.520 --> 18:10.400
And with this version of your code, we run on all creates.

18:10.400 --> 18:15.520
And we generate a nice report, you can see on the left.

18:15.520 --> 18:20.040
And if you only have a flaky stuff, we say, OK, no impact.

18:20.040 --> 18:21.040
So it's good.

18:21.040 --> 18:22.080
We don't care.

18:22.080 --> 18:24.360
That's pretty much it.

18:24.360 --> 18:31.160
And same as for the performance, we have a nice comment explaining everything in short,

18:31.160 --> 18:38.160
which is much more easy to read that the thing on the left, which is actually not good.

18:38.160 --> 18:45.280
And now a little part I like to do every time, tips for potential new contributors.

18:45.280 --> 18:55.560
We have a lot of classified tag issues with ELC or Imanto or both issues.

18:55.560 --> 18:58.080
Take a look at them.

18:58.080 --> 19:01.120
We try to be as helpful as possible to newcomers.

19:01.120 --> 19:04.760
It's important for us to have new blood.

19:04.760 --> 19:08.920
We have always good surprise with newcomers.

19:08.920 --> 19:13.560
We wrote a receive dev guide, which is not up to date at all.

19:13.560 --> 19:19.400
So at least you have a vague idea of what's going on, because I think not many people

19:19.400 --> 19:21.200
have an idea.

19:21.200 --> 19:28.480
And you can try also to write compiler plugins or eventually contribute to Clippy to see

19:28.480 --> 19:32.720
how the compiler higher internal levels work.

19:32.720 --> 19:35.520
But Clippy, it's really simple to contribute to it.

19:35.520 --> 19:37.360
Like they have a full guide or anything.

19:37.360 --> 19:42.320
So if you want a big, nice first step, take a look at Clippy and how it works.

19:42.320 --> 19:46.520
And it gives a very, very nice introduction.

19:46.520 --> 19:51.120
And I am making publicity like for myself.

19:51.120 --> 19:57.320
I wrote a small recipe to create, which makes a few things simpler to write plugins and

19:57.320 --> 19:59.720
extensions to the compiler.

19:59.720 --> 20:02.520
If you want to write, go ahead.

20:02.520 --> 20:06.440
It's made to be usable as much as possible.

20:06.440 --> 20:07.440
And thank you for listening.

20:07.440 --> 20:17.400
You have Mr. Shor's website.

20:17.400 --> 20:38.740
Thank you.

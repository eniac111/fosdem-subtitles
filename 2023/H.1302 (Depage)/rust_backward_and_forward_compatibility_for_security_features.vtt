WEBVTT

00:00.000 --> 00:07.760
Hello, everyone.

00:07.760 --> 00:09.920
Yeah, my name is Michel Senna.

00:09.920 --> 00:16.720
So I work for Microsoft and I'm mostly the main of Landlark,

00:16.720 --> 00:21.120
which is a new schedule Linux feature.

00:21.760 --> 00:23.840
It's about soundbusing.

00:23.840 --> 00:26.520
So this talk is about Rose Library.

00:26.520 --> 00:28.320
We wrote for Landlark.

00:28.320 --> 00:37.280
And well, we kind of had some changes about compatibility.

00:37.280 --> 00:40.840
So yeah, just quick introduction context

00:40.840 --> 00:44.360
to understand the pro-oriented here.

00:44.360 --> 00:46.000
So yeah, why care about security?

00:46.000 --> 00:53.000
So here, well, it might be abuse for some.

00:53.000 --> 00:57.280
But like every application can be compromised.

00:57.280 --> 00:59.480
Every operation can be trusted at first.

00:59.480 --> 01:02.400
And during the lifetime of a process,

01:02.400 --> 01:05.360
it can become malicious.

01:05.360 --> 01:09.280
So yeah, as developers, there's multiple problems.

01:09.280 --> 01:14.000
So we don't want to participate to malicious actions

01:14.000 --> 01:17.280
performed by attackers through our software.

01:17.280 --> 01:21.120
And we kind of have a responsibility for users,

01:21.120 --> 01:25.200
especially to protect their personal data.

01:25.200 --> 01:30.880
And yeah, there might be some issues about third party code.

01:30.880 --> 01:34.560
So security soundboxing is a security approach

01:34.560 --> 01:39.040
to isolate software and mainly to isolate them

01:39.040 --> 01:41.800
by dropping ambient access rights.

01:41.800 --> 01:47.080
So in Intel, when you launch an application in a common

01:47.080 --> 01:50.280
system, this application can access a lot of files,

01:50.280 --> 01:55.600
including some which are kind of private, like.ecc for example.

01:55.600 --> 01:57.440
So sound mixing should not be confused

01:57.440 --> 02:00.480
with namespaces and containers, which

02:00.480 --> 02:05.560
is a way to create kind of a virtualized environment.

02:05.560 --> 02:07.480
And second is also something which

02:07.480 --> 02:09.960
is really interesting for security purposes.

02:09.960 --> 02:12.000
But it's not about access control.

02:12.000 --> 02:13.920
It's about protecting the current.

02:13.920 --> 02:18.720
That was initially the initial goal of second.

02:18.720 --> 02:23.000
So Landmark is really dedicated from the ground

02:23.000 --> 02:27.120
to bring sound making features to Linux

02:27.120 --> 02:30.320
to bring some security features to the kernel.

02:30.320 --> 02:32.640
So it is an access control system

02:32.640 --> 02:34.840
available to every processes.

02:34.840 --> 02:37.160
You don't need to be a root or whatever.

02:37.160 --> 02:43.480
And it is designed to be embedded in applications,

02:43.480 --> 02:47.040
so to create built-in soundboxing.

02:47.040 --> 02:51.200
It's a way to create one or even multiple layers

02:51.200 --> 02:52.880
of new securities.

02:52.880 --> 02:59.480
So it comes kind of after all system-wide access

02:59.480 --> 03:01.640
control, which are already in place.

03:01.640 --> 03:06.520
And so it's available on most distros nowadays.

03:06.520 --> 03:08.000
And if it is not the case, well, I

03:08.000 --> 03:12.600
want you to open an issue in your favorite distro.

03:12.600 --> 03:17.600
So about sandboxing here, what's the interesting point

03:17.600 --> 03:21.360
about sandboxing and built-in application security?

03:21.360 --> 03:25.680
If, well, that we can create tailored security policies

03:25.680 --> 03:27.840
and embedded them in the application.

03:27.840 --> 03:32.520
So there's interesting things about that.

03:32.520 --> 03:39.960
And that might help to make it security invisible, which

03:39.960 --> 03:43.480
is kind of the main purpose here.

03:43.480 --> 03:46.960
We want to not bother users, but secure them anywhere.

03:46.960 --> 03:51.560
So because this security policy can be

03:51.560 --> 03:53.480
embedded in the application, well, it

03:53.480 --> 03:55.560
can use the application semantic.

03:55.560 --> 03:59.520
It can use the application configuration transparently,

03:59.520 --> 04:03.360
so you don't need to add another configuration stuff.

04:03.360 --> 04:06.960
It's not another layer of execution.

04:06.960 --> 04:08.920
It's embedded in the application.

04:08.920 --> 04:11.080
And of course, well, if the confusion

04:11.080 --> 04:13.880
depends on user interaction, well,

04:13.880 --> 04:17.400
it can adapt to this change of behavior.

04:17.400 --> 04:21.880
And one really interesting point is, well, as a developer,

04:21.880 --> 04:25.240
you want to test what you do.

04:25.240 --> 04:27.720
And you want to kind of get guarantees

04:27.720 --> 04:31.880
that whatever you're developing is still working.

04:31.880 --> 04:34.800
And being able to embed the security policies

04:34.800 --> 04:38.120
in your application, make it possible to test them

04:38.120 --> 04:40.800
the same way that you can test every other features.

04:40.800 --> 04:42.240
So that's really interesting.

04:42.240 --> 04:45.080
You don't rely on, let's say, a Linux

04:45.080 --> 04:47.960
being installed on your test machine and so on.

04:47.960 --> 04:51.080
And it adapts to the application over time.

04:51.080 --> 04:54.400
So if you have a TI, which is well configured,

04:54.400 --> 04:57.040
you can test it and make sure that, well, you

04:57.040 --> 05:01.280
can add new features, adjust the security policy,

05:01.280 --> 05:04.920
and make sure that everything works as expected.

05:04.920 --> 05:08.840
So speaking about the library and the Rust library,

05:08.840 --> 05:12.320
so the idea was to create something which is rusty,

05:12.320 --> 05:14.400
so I don't want it to rust.

05:14.400 --> 05:18.760
And for this, well, we wanted to leverage strong typing,

05:18.760 --> 05:21.720
so to get some developing guarantees,

05:21.720 --> 05:24.880
and also to follow some common patterns.

05:24.880 --> 05:29.440
So many here, the builder pattern.

05:29.440 --> 05:31.520
So it's still working for us.

05:31.520 --> 05:32.360
It's working.

05:32.360 --> 05:35.720
But we're working on improving the API

05:35.720 --> 05:39.560
and make it easier and more easy to use

05:39.560 --> 05:40.840
for competitive reasons.

05:40.840 --> 05:46.200
So this talk about this kind of compatibility requirements.

05:46.200 --> 05:48.760
And so I'll talk about that.

05:48.760 --> 05:53.320
Some examples of early public users are listed here.

05:53.320 --> 05:58.480
But it's still in kind of beta, for now.

05:58.480 --> 06:01.760
So let's start with some code example.

06:01.760 --> 06:06.480
So just as a warning, this kind of simplified code,

06:06.480 --> 06:08.360
it's working.

06:08.360 --> 06:10.640
But yeah, for the demo, well, it's not demo,

06:10.640 --> 06:13.320
but for these examples, the idea is

06:13.320 --> 06:18.960
to make it simple to make it easier to understand.

06:18.960 --> 06:21.760
So you can see at the left, there's a C code.

06:21.760 --> 06:25.800
And at the right, the exact same semantic, but in Rust.

06:25.800 --> 06:28.080
So I will mostly talk about the Rust code.

06:28.080 --> 06:30.400
But yeah, you can take a look at the C code

06:30.400 --> 06:33.320
to kind of see the difference between them

06:33.320 --> 06:36.040
and how Rust can be useful there.

06:36.040 --> 06:40.560
So as I said, it is based on the builder pattern.

06:40.560 --> 06:44.040
So you create a rule set object here with the rules and you.

06:44.040 --> 06:47.040
And from there, you kind of call different methods

06:47.040 --> 06:50.400
to build the object here.

06:50.400 --> 06:51.400
In this case, a rule set.

06:51.400 --> 06:53.840
So rule set will contain a set of rules.

06:53.840 --> 06:57.480
And yeah, at first, you define what you want to enforce,

06:57.480 --> 06:58.680
what do we want to restrict, what

06:58.680 --> 07:01.760
do we want to deny by default. So in this case,

07:01.760 --> 07:04.040
these are two actions.

07:04.040 --> 07:05.680
They are shown to execute files and they

07:05.680 --> 07:07.120
are shown to write on files.

07:07.120 --> 07:09.840
So obviously, it's not enough.

07:09.840 --> 07:12.320
But in this case, it's easy to understand

07:12.320 --> 07:14.440
for a simple use case.

07:14.440 --> 07:17.080
And then once you define the rule set

07:17.080 --> 07:20.560
and what the rule set can handle, well, you can create it.

07:20.560 --> 07:24.040
And the rule set creation translates to,

07:24.040 --> 07:26.960
you can see at the left, there's a landmark trade rule set.

07:26.960 --> 07:29.840
And this function is, in fact, a syscall.

07:29.840 --> 07:34.720
So in the rough part, when you call the create method,

07:34.720 --> 07:39.320
it creates a new rule set, which is backed underneath

07:39.320 --> 07:43.480
by a new file descriptor dedicated to landmark.

07:43.480 --> 07:48.200
And that is a wrap in the rule set object.

07:48.200 --> 07:51.920
Then if you want to add rules to allow some directory to be,

07:51.920 --> 07:54.520
for example, executable, which is the case here,

07:54.520 --> 07:58.720
so you append the slash user directory,

07:58.720 --> 08:05.920
and you make it executable, so elo access, xfs execute.

08:05.920 --> 08:08.960
And then you can add other rule you want.

08:08.960 --> 08:10.760
For all the exceptions, that should

08:10.760 --> 08:15.040
be legitimate for the legitimate use case.

08:15.040 --> 08:17.960
And then you restrict the current process.

08:17.960 --> 08:20.400
Well, in fact, the current thread.

08:20.400 --> 08:23.760
And from this point, the current thread

08:23.760 --> 08:30.560
can only execute files which are in slash user.

08:30.560 --> 08:36.000
And it cannot write anything at all, actually.

08:36.000 --> 08:41.600
So that was a tradition, quick introduction to the library.

08:41.600 --> 08:45.640
And the thing is, another key is not a full feature access

08:45.640 --> 08:49.480
control yet, because, well, it is complex.

08:49.480 --> 08:51.880
And well, to reach this goal, well,

08:51.880 --> 08:56.920
we need to spend much more years to increment,

08:56.920 --> 08:59.480
well, to add new features to the link scale.

09:03.880 --> 09:07.680
And the thing is, well, sometimes you

09:07.680 --> 09:12.160
might add new features that enable to restrict more.

09:12.160 --> 09:17.240
And sometimes we might add some features to restrict less.

09:17.240 --> 09:21.120
So let's see what this means.

09:21.120 --> 09:22.840
So the first version of Landlok, which

09:22.840 --> 09:28.160
was released with 5.13 kernel, basically allowed

09:28.160 --> 09:32.000
to read, write, and do a lot of common stuff

09:32.000 --> 09:35.560
to restrict a lot of common file-stem actions.

09:35.560 --> 09:40.480
But there was, like you can see here, there's three categories.

09:40.480 --> 09:42.760
The first one, always denied, was

09:42.760 --> 09:44.320
for the first version of Landlok,

09:44.320 --> 09:47.340
the actions that were always denied whenever

09:47.340 --> 09:50.160
you sandboxed a thread.

09:50.160 --> 09:55.240
So that was for, well, complexity in the development,

09:55.240 --> 09:57.920
but also security reasons.

09:57.920 --> 10:02.600
So for example, you are not able to execute set to AD binaries,

10:02.600 --> 10:05.880
because it will be kind of a way to bypass the sandbox.

10:05.880 --> 10:09.000
And there was some restriction on ptrace,

10:09.000 --> 10:12.920
so you're not allowed to debug an application process, which

10:12.920 --> 10:14.760
is outside the sandbox.

10:14.760 --> 10:18.840
Obviously, it will be a way to get out a sandbox.

10:18.840 --> 10:21.360
That's not what we want.

10:21.360 --> 10:27.120
So the second version of Landlok had its new way,

10:27.120 --> 10:31.840
a new access write, which was a way to repound files.

10:31.840 --> 10:36.160
So at first, it was denied to change the parent victory

10:36.160 --> 10:39.400
of a file for security reasons, because Landlok is based

10:39.400 --> 10:42.060
on Fy-Arkey's identification.

10:42.060 --> 10:45.200
And that was kind of complex.

10:45.200 --> 10:48.280
But with the second version, we implemented that.

10:48.280 --> 10:50.880
And then it became configurable.

10:50.880 --> 10:57.360
So one item last in the always denied box.

10:57.360 --> 11:01.640
In the third version of Landlok, all these versions

11:01.640 --> 11:04.680
are new kernel releases.

11:04.680 --> 11:08.040
And in the third version, we added a new way

11:08.040 --> 11:09.960
to restrict Fy congregation.

11:09.960 --> 11:16.560
So congregation in Landlok is to change the size of a file.

11:16.560 --> 11:19.560
And this was always allowed before,

11:19.560 --> 11:21.440
because it wasn't end up.

11:21.440 --> 11:23.840
It was a bit complex to implement this

11:23.840 --> 11:25.320
in the kernel at the time.

11:25.320 --> 11:27.320
But now it is possible.

11:27.320 --> 11:30.560
So you can see that we can move items from the always

11:30.560 --> 11:33.720
denied box to the configurable, and from the always

11:33.720 --> 11:38.000
allowed box to the configurable list.

11:38.000 --> 11:40.760
So application compatibility.

11:40.760 --> 11:43.200
There's two main things in compatibility.

11:43.200 --> 11:46.640
There's forward compatibility in a way that when you update

11:46.640 --> 11:50.640
your kernel, you still can use the old kernel features.

11:50.640 --> 11:52.440
So that's kind of common.

11:52.440 --> 11:54.440
And the backward compatibility in this case

11:54.440 --> 11:57.520
is when you're using a kernel feature,

11:57.520 --> 12:00.600
well, you might need a specification of the kernel

12:00.600 --> 12:02.160
that supports this feature.

12:02.160 --> 12:08.320
And if your application is launched on an old kernel,

12:08.320 --> 12:11.960
well, that feature might be missing.

12:11.960 --> 12:14.400
And the thing is, when you're developing an application,

12:14.400 --> 12:17.280
well, you don't know on which kernel your application will

12:17.280 --> 12:21.240
run, because, well, it's a user choice and a disk choice.

12:24.120 --> 12:26.000
What comes with Landlok is the ability

12:26.000 --> 12:30.240
to get the Landlok what we call the ADI version.

12:30.240 --> 12:33.200
So it's really just a number.

12:33.200 --> 12:34.920
That increment is started at one,

12:34.920 --> 12:37.440
and then increment for each new set

12:37.440 --> 12:40.520
of features which is added to the kernel.

12:40.520 --> 12:42.320
So to give you an idea, it's really

12:42.320 --> 12:45.240
simple to get this ID, this version.

12:45.240 --> 12:49.440
It's with Landlok rate rules at Cisco with a specific flag.

12:49.440 --> 12:52.920
So yeah, it's a T code, but it's really simple.

12:52.920 --> 12:57.840
So what we want to do at first was these four main properties.

12:57.840 --> 13:02.640
The first one is to be able to make it easy to use

13:02.640 --> 13:04.800
for developers, of course.

13:04.800 --> 13:08.840
So we want something which is generic, which

13:08.840 --> 13:11.280
kind of follows the build-up pattern, because, well,

13:11.280 --> 13:14.400
it's kind of common and easy to use.

13:14.400 --> 13:17.600
We want developers to focus on what they want to restrict,

13:17.600 --> 13:23.360
not the implementation in the kernel.

13:23.360 --> 13:30.520
And we want them to gradually go from a coarse-grained access

13:30.520 --> 13:32.600
restriction to a fine-grained one.

13:32.600 --> 13:37.880
So we don't want them to need to implement a fine-grained at

13:37.880 --> 13:39.000
first.

13:39.000 --> 13:40.640
It might be difficult to difficult.

13:40.640 --> 13:44.200
So yeah, it's the same way that we can incrementally

13:44.200 --> 13:45.880
add new set of features.

13:45.880 --> 13:49.240
We can also incrementally restrict more and more

13:49.240 --> 13:50.680
over time.

13:50.680 --> 13:54.200
No need to be super strict at first.

13:54.200 --> 14:00.640
And yeah, it should be simpler to write for the common cases.

14:00.640 --> 14:08.080
OK, at first, the first improvement was to create group

14:08.080 --> 14:09.200
access writes.

14:09.200 --> 14:15.200
So let's say you know which landlord version is supported

14:15.200 --> 14:16.520
by the running kernel.

14:16.520 --> 14:18.640
Let's say it's the second version.

14:18.640 --> 14:23.000
Then you can create a new rule set, which will get all the

14:23.000 --> 14:25.880
access writes which are supported by this specific

14:25.880 --> 14:27.160
kernel.

14:27.160 --> 14:31.200
So you just call the handle access with the access from

14:31.200 --> 14:33.920
all and then ABI2.

14:33.920 --> 14:36.680
And then you can do kind of the same when you're adding a

14:36.680 --> 14:37.440
new rule.

14:37.440 --> 14:41.560
And this time, well, you want to add an exception on the

14:41.560 --> 14:43.200
slash result to make it readable.

14:43.200 --> 14:46.920
So in this case, there's two main groups, the from read

14:46.920 --> 14:49.160
and the from writes.

14:49.160 --> 14:54.200
And for example, the from read includes reading a file, but

14:54.200 --> 14:55.760
also reading a directory.

14:55.760 --> 14:58.480
Listing a directory.

14:58.480 --> 15:03.640
OK, second property that we would like to have is being

15:03.640 --> 15:06.920
able to enforce a strict restriction.

15:06.920 --> 15:10.720
So even if we don't know on which kernel the

15:10.720 --> 15:15.400
eviction will run, on some cases, we might want to be sure

15:15.400 --> 15:18.960
that all features are enforced and restricted.

15:18.960 --> 15:20.360
There's two use cases here.

15:20.360 --> 15:22.240
The first one is to test it.

15:22.240 --> 15:24.960
If you want to sandbox some applications, you want to make

15:24.960 --> 15:27.840
sure that even if you're using all the

15:27.840 --> 15:29.720
standard scheme features, well, your application will

15:29.720 --> 15:31.440
work as expected.

15:31.440 --> 15:33.040
So that's really important.

15:33.040 --> 15:36.640
And you don't want to run your application in an old kernel

15:36.640 --> 15:39.260
and kind of be fooled by the fact that your

15:39.260 --> 15:43.000
application is running because there's no, well, not all

15:43.000 --> 15:44.400
security features are enabled.

15:44.400 --> 15:48.240
So you want to cut these kind of issues in your CI.

15:48.240 --> 15:50.680
And also for security software, well, you want to

15:50.680 --> 15:52.480
have some security guarantees.

15:52.480 --> 15:57.760
So you want to have a way to fold the whole sandboxing with

15:57.760 --> 16:01.760
all security features that we embedded in our application.

16:01.760 --> 16:05.720
The third property is to be able to enforce the best

16:05.720 --> 16:07.880
security with some minimal requirements.

16:07.880 --> 16:10.280
So that's kind of the opposite.

16:10.280 --> 16:14.240
And this use case is mainly for end users because end user,

16:14.240 --> 16:17.640
well, you don't know which kernel to be used.

16:17.640 --> 16:22.520
And so you want to be able to enforce an

16:22.520 --> 16:24.320
opportunistic sandboxing.

16:24.320 --> 16:29.160
So if they have a new kernel, well, they will be more

16:29.160 --> 16:30.520
protected.

16:30.520 --> 16:34.200
If they have an old kernel, they might not be protected

16:34.200 --> 16:36.360
at all, but that's not your choice.

16:36.360 --> 16:37.640
That's their choice.

16:37.640 --> 16:40.880
And at the end, they want to run your application anywhere.

16:40.880 --> 16:44.560
So another requirement is to be able to disable the whole

16:44.560 --> 16:45.320
sandboxing.

16:45.320 --> 16:49.920
If some features which are required may not be met.

16:49.920 --> 16:53.040
And this approach should be easier to write than others

16:53.040 --> 16:56.640
because it is the most common thing to do.

16:56.640 --> 17:00.880
And the last property is being able to run, well, to

17:00.880 --> 17:07.560
configure at runtime the sandboxing, but to make it in

17:07.560 --> 17:10.920
a way that you're running most of the codes.

17:10.920 --> 17:16.360
So the idea is to be able to have kind of the same code

17:16.360 --> 17:20.080
running everywhere almost, even if they don't

17:20.080 --> 17:21.920
have a recent kernel.

17:21.920 --> 17:23.320
Why that?

17:23.320 --> 17:29.320
Because you want to kind of identify early kind of some

17:29.320 --> 17:34.360
issues which might be linked to the sandboxing code.

17:34.360 --> 17:38.800
And that's if you have, let's say, two users using a

17:38.800 --> 17:41.760
recent kernel and four users using an old kernel, well, you

17:41.760 --> 17:46.160
might want to test as much as possible with all your users,

17:46.160 --> 17:50.760
even if they don't have a newer kernel.

17:50.760 --> 17:55.320
So the first approach we took was, so I'll go quickly here.

17:55.320 --> 17:56.160
There's three approaches.

17:56.160 --> 18:01.040
The first one was to add a new meter to the

18:01.040 --> 18:03.080
rule set builder pattern.

18:03.080 --> 18:07.960
So it was a simple method to set the best for approach.

18:07.960 --> 18:12.320
So if it was false, it was required to add these features.

18:12.320 --> 18:16.080
So in the example, an application that need to move

18:16.080 --> 18:19.200
files from one degree to another needed to add the

18:19.200 --> 18:23.960
accessFS refer access rights to allow this access.

18:23.960 --> 18:28.360
And if it wasn't the case, well, the thumb making should

18:28.360 --> 18:29.560
not be enforced.

18:29.560 --> 18:31.560
Otherwise, it will break the application.

18:31.560 --> 18:33.960
So that is a requirement.

18:33.960 --> 18:38.520
And in this case, that was a way to change the state of

18:38.520 --> 18:40.160
the builder over time.

18:40.160 --> 18:43.240
So this is flexible, easy to understand, but in some

18:43.240 --> 18:44.280
current cases.

18:44.280 --> 18:48.800
And it makes the code not really clean.

18:48.800 --> 18:53.680
Another approach was to do the same, but this time, instead

18:53.680 --> 18:59.520
of two shifts, enable or disable, there were three ways

18:59.520 --> 19:00.880
to change it.

19:00.880 --> 19:03.600
The best effort way, the soft requirement, and the hard

19:03.600 --> 19:04.400
requirement.

19:04.400 --> 19:07.880
So a way to make it best effort, a way to make it

19:07.880 --> 19:11.040
error if there is any unsupported feature, and a way

19:11.040 --> 19:14.840
to disable the sandbox without error if some

19:14.840 --> 19:16.520
feature were not supported.

19:16.520 --> 19:19.560
So that wasn't ideal, neither.

19:19.560 --> 19:25.000
And the last approach, which is currently working for us, is

19:25.000 --> 19:26.720
kind of a new one.

19:26.720 --> 19:31.080
So the idea is to make it still configurable and to follow

19:31.080 --> 19:35.720
all these properties, but to make it a bit simpler and

19:35.720 --> 19:36.880
still flexible.

19:36.880 --> 19:40.760
So here in actual, well, you can make a new rule set that

19:40.760 --> 19:43.440
will error out if there's any unsupported features.

19:43.440 --> 19:46.440
But at the same time, you can specify which feature is

19:46.440 --> 19:48.680
required to enable the sandbox or not.

19:48.680 --> 19:54.280
So that's kind of specific, but yeah, it should be better.

19:54.280 --> 19:58.400
So going forward, there's a lot going on in this first

19:58.400 --> 20:00.400
library, a lot to improve.

20:00.400 --> 20:02.880
You have a new helper, you get a recommendation.

20:02.880 --> 20:05.560
And I encourage you to send back your

20:05.560 --> 20:06.760
addiction or others.

20:06.760 --> 20:10.320
And well, there's some tips if you want to get some

20:10.320 --> 20:11.480
motivation here.

20:11.480 --> 20:13.280
It's a rewards program.

20:13.280 --> 20:14.560
So thank you for attention.

20:14.560 --> 20:16.840
There's some interesting link here.

20:16.840 --> 20:20.920
This talk was kind of a dance, but I hope you enjoyed.

20:20.920 --> 20:30.880
Thank you.

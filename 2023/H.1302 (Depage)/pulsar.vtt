WEBVTT

00:00.000 --> 00:10.800
Hello, everyone.

00:10.800 --> 00:12.920
Welcome to our talk.

00:12.920 --> 00:15.020
Thank you so much for staying for this long.

00:15.020 --> 00:18.600
This is the second last session of the day.

00:18.600 --> 00:20.520
Really appreciate you being here.

00:20.520 --> 00:27.200
Today we're going to be talking about modernizing legacy messaging system with Apache Pulsar.

00:27.200 --> 00:29.960
Here we have Enrico and myself too.

00:29.960 --> 00:32.760
We're from Datastax.

00:32.760 --> 00:39.320
Before we start, if you like a copy of our slide deck, here is the QR code and also the

00:39.320 --> 00:40.760
short link if you want.

00:40.760 --> 00:50.760
I'll let you take a moment.

00:50.760 --> 00:52.320
Even if you missed, don't worry.

00:52.320 --> 00:55.400
We'll be sharing with you our connection info.

00:55.400 --> 00:59.800
When you can connect with us, we can always be there to answer your questions too.

00:59.800 --> 01:01.520
With that, let me start.

01:01.520 --> 01:02.680
First just a quick introduction.

01:02.680 --> 01:03.680
Who is Mary?

01:03.680 --> 01:07.240
I'm a streaming developer advocate at Datastax.

01:07.240 --> 01:10.360
Datastax is a company based in California.

01:10.360 --> 01:12.960
Specializing in Apache Cassandra, managed cloud.

01:12.960 --> 01:17.920
Now we also have the managed cloud for streaming, which is Apache Pulsar.

01:17.920 --> 01:23.920
I was also a developer advocate before joining Datastax last year.

01:23.920 --> 01:25.440
I'm based in Chicago.

01:25.440 --> 01:31.040
I'm also the president of the Chicago Java users group and I'm also a Java champion.

01:31.040 --> 01:36.840
Before this, I was spending over 20 years or so being a developer myself too.

01:36.840 --> 01:37.840
That's me.

01:37.840 --> 01:38.840
This is Enrico.

01:38.840 --> 01:39.840
Enrico.

01:39.840 --> 01:40.840
Oh, yes.

01:40.840 --> 01:41.840
Sure.

01:41.840 --> 01:42.840
I'm Enrico.

01:42.840 --> 01:43.840
I work with Mary.

01:43.840 --> 01:47.640
I really enjoy working with open source communities.

01:47.640 --> 01:55.960
I'm involved in a few Apache projects like Pulsar, but all the big Datastax, so DoKeeper.

01:55.960 --> 02:00.240
Also I collaborate with Maven and Curator.

02:00.240 --> 02:07.320
I'm participating also in some CNCF project like Pravega that is still about messaging

02:07.320 --> 02:13.280
and distributed streaming and also contributed to RDB that is a distributed embeddable Java

02:13.280 --> 02:14.280
database.

02:14.280 --> 02:15.280
Cool.

02:15.280 --> 02:16.280
Okay.

02:16.280 --> 02:17.280
Great.

02:17.280 --> 02:18.280
Enrico.

02:18.280 --> 02:22.240
I'm really happy today to be here with Enrico because we were just working remotely, finally

02:22.240 --> 02:26.800
get to meet here in Belgium when he lives in Italy and I'm in Chicago.

02:26.800 --> 02:27.800
Okay.

02:27.800 --> 02:31.400
Without further ado, this is the agenda within 20 minutes.

02:31.400 --> 02:36.160
It's going to be a little bit quick, but we'll end up having Enrico also doing a quick demo

02:36.160 --> 02:37.160
as well.

02:37.160 --> 02:43.000
First, let's give an introduction to what is JMS, assuming not everybody is familiar

02:43.000 --> 02:44.000
with that.

02:44.000 --> 02:48.360
Let's give an introduction and then we'll talk about Apache Pulsar and why Pulsar and

02:48.360 --> 02:54.160
also just quickly describe the Pulsar architecture and how do you do the mapping between JMS

02:54.160 --> 02:57.520
and Pulsar and then how to use JMS API with Pulsar.

02:57.520 --> 03:03.120
Enrico will show that and then that's how we're going to be doing.

03:03.120 --> 03:06.920
First of all, just some core concepts too of JMS.

03:06.920 --> 03:13.200
As such, JMS is all about also messaging, but it's very much a Java-centric technology

03:13.200 --> 03:19.160
and it's here, as you can see, it's also a publish, subscribe kind of model, making

03:19.160 --> 03:23.160
use of destinations that it supports cues and topics.

03:23.160 --> 03:29.280
Messages, producers, consumers, these are typical like PubSub producer, consumer type

03:29.280 --> 03:30.280
of pattern.

03:30.280 --> 03:33.000
Such is a pattern, but this has its own implementation.

03:33.000 --> 03:38.440
Basically, too, it makes use of the JMS context and that will help you with the connections

03:38.440 --> 03:40.080
and sessions.

03:40.080 --> 03:41.720
Okay.

03:41.720 --> 03:42.720
About destinations.

03:42.720 --> 03:48.760
Essentially, too, it supports both cueing and the topic too.

03:48.760 --> 03:55.400
It acts as a broker in the topic case, but for cues, each message is basically, as such,

03:55.400 --> 04:00.600
message cue is you drop the message there and then it gets picked up and then it's kind

04:00.600 --> 04:02.800
of done by the consumer like that.

04:02.800 --> 04:07.240
It's browsable, this cue, first out kind of approach.

04:07.240 --> 04:13.640
Then with topic, it allows for multiple subscriptions too and message dispatch according to the

04:13.640 --> 04:16.840
subscription type as well.

04:16.840 --> 04:22.240
As far as consumer styles go, you can have blocking, which is blocking receive methods

04:22.240 --> 04:25.320
and that's all application driven.

04:25.320 --> 04:26.320
Also...

04:26.320 --> 04:28.320
Go, go, go.

04:28.320 --> 04:29.320
Okay.

04:29.320 --> 04:34.360
Then there's also making use of the message listener method, which is a JMS to driver

04:34.360 --> 04:36.640
driven in that case.

04:36.640 --> 04:42.200
As far as producer styles go, the blocking will be send method or there's also a async

04:42.200 --> 04:45.120
send too and that will be like with completion listener.

04:45.120 --> 04:47.440
That's real quickly.

04:47.440 --> 04:53.520
As far as administrative operations go, as we know, JMS does not cover administrative

04:53.520 --> 04:55.640
operations.

04:55.640 --> 05:01.240
How do you manage the destinations and doing connection properties, all of these things,

05:01.240 --> 05:05.600
the defining security models, our resource limits, all of these things and configure

05:05.600 --> 05:08.840
all of these, JMS itself doesn't have to do it.

05:08.840 --> 05:10.200
How do you manage it?

05:10.200 --> 05:12.920
It usually relies on your vendor.

05:12.920 --> 05:21.800
How do you do all of the management too through some vendor way of allowing you to do that?

05:21.800 --> 05:29.680
Basically too, there's also API also to let you work with administrative objects too.

05:29.680 --> 05:34.760
Basically they're supposed to be also provided by the system as well.

05:34.760 --> 05:40.200
As far as destinations go, there are queue and topic references and connection factory

05:40.200 --> 05:45.400
basically is essentially too using connection factory as the client that allows you to connect

05:45.400 --> 05:48.760
to the system in that case.

05:48.760 --> 05:55.360
There's also JMS, the API essentially allows you to interact with Java EE, or now it's

05:55.360 --> 06:00.480
Jakarta EE, but back then there's Java EE.

06:00.480 --> 06:04.240
In that case you can basically make use of EJP components.

06:04.240 --> 06:13.640
There's Stateful Stateless EJP that's used in web surflets or the JAXRS, JAXWS endpoints

06:13.640 --> 06:20.520
and allows you to also do background, like doing scheduling kind of way of doing things.

06:20.520 --> 06:22.160
There's also message driven beans.

06:22.160 --> 06:27.320
These are essentially too, it's basically their JMS specific kind of beans to handle

06:27.320 --> 06:29.000
messages in there.

06:29.000 --> 06:35.640
It's basically managed by the container, the JEE container.

06:35.640 --> 06:40.840
When you receive messages from a container then it will essentially be activated in that

06:40.840 --> 06:43.200
case.

06:43.200 --> 06:49.440
The Java EE container provides support for all of the lifecycle management pulling of

06:49.440 --> 06:53.840
these context dependency injection of these things.

06:53.840 --> 07:00.160
It supports security standard API of these tools, basically relying on the container

07:00.160 --> 07:02.640
to do that for you.

07:02.640 --> 07:04.880
There's also too, what about external resources?

07:04.880 --> 07:08.880
A lot of times that's how it relies on resource adapters.

07:08.880 --> 07:15.280
It allows you to essentially extend the Java EE container in that case.

07:15.280 --> 07:19.880
Some key points basically to use it is you need to have the resource archive file, so

07:19.880 --> 07:26.120
the.RAR file that will contain the code and you have to then configure the resource adapter

07:26.120 --> 07:27.120
and everything.

07:27.120 --> 07:32.360
It allows you to essentially create administer objects, right?

07:32.360 --> 07:38.240
These objects will conform to the standard API and it's implemented by the core inside

07:38.240 --> 07:40.280
the resource adapter too.

07:40.280 --> 07:46.960
These are the different packages, like basically Java X.GMS in this case is I think in the

07:46.960 --> 07:52.400
new version would be Jakarta, but we're still talking about Java, the older JMS in this

07:52.400 --> 07:56.600
case and will be connection factory, queue and topic.

07:56.600 --> 08:02.800
Usually each object is bound to a JNDI, naming and directory interface registry provided

08:02.800 --> 08:05.800
by the container.

08:05.800 --> 08:10.240
It's specific to the container as to how you do deployment too and that's how it usually

08:10.240 --> 08:11.240
works.

08:11.240 --> 08:13.560
Now, then let's get introduced.

08:13.560 --> 08:17.760
Now we talk about JMS stuff as a bit more legacy stuff.

08:17.760 --> 08:23.880
What are some of the options to leverage on today's more modern world that allows you to

08:23.880 --> 08:26.080
work in a cloud native environment better?

08:26.080 --> 08:32.120
We want to introduce to you Apache Pulsar is an open source platform and it's cloud native

08:32.120 --> 08:36.240
and it supports distributed messaging and streaming too.

08:36.240 --> 08:41.440
As such, this is the link where you can find out more information or this is actually more

08:41.440 --> 08:44.080
of the GitHub repo.

08:44.080 --> 08:50.200
Wanting to highlight it, not too much time, but basically it's very cloud native in nature.

08:50.200 --> 08:55.080
It's born with the cloud native DNA.

08:55.080 --> 08:59.600
It's basically the key point of it is why do you want Pulsar?

08:59.600 --> 09:01.600
I think at least one of the key points.

09:01.600 --> 09:04.600
It separates out the compute and the storage.

09:04.600 --> 09:09.840
Basically Pulsar can focus more on working with the messages, delivery, dealing with

09:09.840 --> 09:13.400
all the messages coming in, delivering all of these things.

09:13.400 --> 09:16.600
You have the whole laundry basket of all the log messages.

09:16.600 --> 09:17.600
What do you do with it?

09:17.600 --> 09:22.720
Rather than dealing with it, Pulsar said, let me get Bookkeeper to handle it for me.

09:22.720 --> 09:27.800
That way Pulsar can focus on that, just the messaging part and coordinate with the Bookkeeper.

09:27.800 --> 09:28.960
That's what it does.

09:28.960 --> 09:33.160
It also supports multi-tenancy and that's a very nice way of helping you to organize

09:33.160 --> 09:34.900
all of your messages.

09:34.900 --> 09:40.480
As well as some features that are more ready for enterprise level, geo-replication is also

09:40.480 --> 09:42.640
a major thing in that.

09:42.640 --> 09:45.640
And also it has what is called tiered offset.

09:45.640 --> 09:50.120
Basically if your messages get code, in Bookkeeper you don't want it to take up too much room.

09:50.120 --> 09:54.760
Then you want to move it to, or actually I should say, it gets in the warm storage and

09:54.760 --> 09:57.100
you want to move it off to cold storage.

09:57.100 --> 10:00.760
So all these Pulsar has built in and it knows it.

10:00.760 --> 10:06.880
So native Kubernetes support all of these things, schema, it has a Pulsar schema, connectors,

10:06.880 --> 10:10.920
and you can use basically a Pulsar IO framework to build different connectors.

10:10.920 --> 10:16.960
And currently we're supporting almost 100 different kind of connectors in there.

10:16.960 --> 10:20.720
Message processing, you can use the Pulsar functions framework so you don't need to use

10:20.720 --> 10:26.440
anything outside to do message transformation as you're building your data pipeline.

10:26.440 --> 10:30.680
And also the nice thing too is that it doesn't restrict you to only using Java as your client.

10:30.680 --> 10:35.880
You can use other things like C++, Python, Go, and other community contributions to such

10:35.880 --> 10:36.880
a cloud.

10:36.880 --> 10:39.980
There's also Node.js, also.NET, C sharp client too.

10:39.980 --> 10:44.160
So that's really flexible and really functioning real well in Pulsar.

10:44.160 --> 10:46.480
So let's kind of really quickly take a look.

10:46.480 --> 10:48.560
I already mentioned some of it.

10:48.560 --> 10:52.280
Essentially too it's a blazing performance, that's what we all want, provides you with

10:52.280 --> 10:54.800
true real-time type of processing.

10:54.800 --> 10:56.280
That's why we want it.

10:56.280 --> 11:01.840
It's basically millions of JMS messages can be handled if you have JMS leveraging on such

11:01.840 --> 11:03.080
a platform.

11:03.080 --> 11:04.080
So it's all good.

11:04.080 --> 11:05.520
Horizontal scalability.

11:05.520 --> 11:10.360
If you expand your infrastructure, adding more servers and nodes and all of these to it,

11:10.360 --> 11:12.000
Pulsar will handle that for you.

11:12.000 --> 11:16.440
You don't need to rebalance all of your topics and you don't need to deal with offsets, such

11:16.440 --> 11:18.600
as in maybe Kafka, things like that.

11:18.600 --> 11:23.760
It has its own way so then you don't have to worry as a developer worrying about all

11:23.760 --> 11:25.580
of these infrastructural things.

11:25.580 --> 11:27.520
So all of these things are just listed here.

11:27.520 --> 11:33.080
I know there's a lot of words in here but it allows you to kind of get a bit more into

11:33.080 --> 11:35.480
detail and we can share with you this thing.

11:35.480 --> 11:37.880
So let me pass this on to...

11:37.880 --> 11:39.040
Actually let me see.

11:39.040 --> 11:40.200
Oh, let me kind of quickly.

11:40.200 --> 11:41.200
I thought this was...

11:41.200 --> 11:43.680
Okay, so just a really quick basic architecture.

11:43.680 --> 11:46.880
This kind of pictorially described to you what I just talked about.

11:46.880 --> 11:48.600
We only had so little time.

11:48.600 --> 11:53.520
So this is just describing to you producers, consumers can be written in many different

11:53.520 --> 12:00.120
languages not just with Java and it gets managing by BookKeeper that deals with all of the storage

12:00.120 --> 12:02.680
side of things and very dynamic.

12:02.680 --> 12:07.800
As you can see, this kind of quickly summarized in picture what Pulsar can do for you.

12:07.800 --> 12:11.520
Okay, and then here, just quick summary Apache Pulsar.

12:11.520 --> 12:14.960
Again take mixtures of a PubSub type of architecture, right?

12:14.960 --> 12:19.680
And that's what it is and supports like multi-tenants, namespaces.

12:19.680 --> 12:24.360
Some subscription modes do that, you can also leverage on that essentially turn Pulsar into

12:24.360 --> 12:31.080
a queuing kind of capability if you use an exclusive type of mode to do subscription.

12:31.080 --> 12:32.080
And one other thing.

12:32.080 --> 12:33.360
Yeah, so there are different modes.

12:33.360 --> 12:37.120
It's just highly flexible is what we're trying to tell you about this story.

12:37.120 --> 12:38.120
So here we have a...

12:38.120 --> 12:39.120
Sure.

12:39.120 --> 12:40.120
Sure.

12:40.120 --> 12:42.000
A little bit sorry about that.

12:42.000 --> 12:45.800
We can talk more about it later.

12:45.800 --> 12:50.680
So I just want to map Pulsar concept to JMS.

12:50.680 --> 12:52.880
JMS is pretty straightforward.

12:52.880 --> 12:59.580
So the model is quite flexible because it deals with queuing but also PubSub.

12:59.580 --> 13:06.600
And in Pulsar, the mapping is really natural because you can map a JMS topic to a Pulsar

13:06.600 --> 13:13.720
topic, whatever it is, a standard topic, partitioned topic, virtual topics.

13:13.720 --> 13:18.240
So a JMS queue is like a Pulsar shared subscription.

13:18.240 --> 13:22.920
And the JMS is like a Pulsar message with an envelope and with the body.

13:22.920 --> 13:26.400
So in JMS, we have several consumer types.

13:26.400 --> 13:31.400
So I'm not going to enter the details, but there is a subscription type that matches

13:31.400 --> 13:36.040
the JMS requirements.

13:36.040 --> 13:40.360
One important thing is that if you want to use JMS with Pulsar, you don't need to install

13:40.360 --> 13:48.960
any additional plugin because the JMS API is built over the standard native Java client

13:48.960 --> 13:55.200
because the Pulsar features are a super set of JMS.

13:55.200 --> 13:57.920
So it's only about implementing an API.

13:57.920 --> 14:04.280
You know, as in JDBC, you have an API that allow you to connect to every database.

14:04.280 --> 14:10.320
In JMS, you just have to implement the API and follow the specs.

14:10.320 --> 14:14.440
If you want, you can deploy a server side component just to push some of the component

14:14.440 --> 14:15.440
computations.

14:15.440 --> 14:18.400
So, for instance, in JMS, you have filters.

14:18.400 --> 14:19.640
You can filter the messages.

14:19.640 --> 14:22.320
So if you want, you can filter them on the broker.

14:22.320 --> 14:28.200
Otherwise, you can simply filter them on the client side.

14:28.200 --> 14:36.400
I'm just showing some examples of how to use Pulsar with JMS.

14:36.400 --> 14:41.360
Maybe if you are already familiar with JMS, that's pretty simple.

14:41.360 --> 14:44.400
So in JMS, you start with a connection factory.

14:44.400 --> 14:47.040
So we have Pulsar connection factory.

14:47.040 --> 14:49.280
And this is JMS 2.0.

14:49.280 --> 14:52.260
And you can get a JMS context.

14:52.260 --> 14:54.240
You get a reference to a destination.

14:54.240 --> 14:56.480
This is create queue.

14:56.480 --> 14:58.160
Create queue is not creating a queue.

14:58.160 --> 15:03.480
It's creating a reference to queue because JMS doesn't deal with administrative operations,

15:03.480 --> 15:05.720
as Mary said.

15:05.720 --> 15:06.720
You create a producer.

15:06.720 --> 15:09.000
You can send as many messages as you want.

15:09.000 --> 15:12.400
And if you want to consume, you create a consumer.

15:12.400 --> 15:16.120
And you can use receive or set a message listener.

15:16.120 --> 15:18.200
This is from standard Java.

15:18.200 --> 15:25.240
If you're using Jocate or Java Enterprise, actually, yes, I've been helping a few companies

15:25.240 --> 15:31.680
to migrate from Java Enterprise to Pulsar.

15:31.680 --> 15:37.320
So I know much more cases about Java Enterprise more than Jakarta.

15:37.320 --> 15:40.160
But that's it.

15:40.160 --> 15:46.920
So for instance, if you want to write and you have an enterprise Java bin, then you

15:46.920 --> 15:51.880
can ask for the container to inject the connection to Pulsar.

15:51.880 --> 15:54.840
And this is a standard Java Enterprise code.

15:54.840 --> 16:01.400
So this code runs with active and queue, with the tip code, with whatever you want, whatever

16:01.400 --> 16:03.120
you are running.

16:03.120 --> 16:07.680
And the container injects the connection factory and the destination.

16:07.680 --> 16:13.600
And you can, as in the standard Java code, you can get a reference to the JMS context.

16:13.600 --> 16:15.080
And then you send.

16:15.080 --> 16:20.760
We will see later how the administrator, for instance, with Apache Tomy, connects all the

16:20.760 --> 16:23.640
parts.

16:23.640 --> 16:28.640
The consumer, usually in Java Enterprise, you use message driven bins to consume from

16:28.640 --> 16:30.640
destinations.

16:30.640 --> 16:34.960
So yes, this is a simple message driven bin.

16:34.960 --> 16:41.560
You configure all the relevant things that you want.

16:41.560 --> 16:44.000
For instance, usually you configure the destination.

16:44.000 --> 16:46.400
That is still a logical name.

16:46.400 --> 16:51.280
And subscription type or the parallelism or the kind of things.

16:51.280 --> 16:59.200
In many containers, you can configure the things on other descriptors.

16:59.200 --> 17:02.000
Usually in XML files.

17:02.000 --> 17:04.440
You implement a callback, on message.

17:04.440 --> 17:08.960
Every time a message is dispatched to the application, the code runs.

17:08.960 --> 17:13.840
And if everything goes well, the message is acknowledged to the Pulsar broker.

17:13.840 --> 17:15.480
It won't be delivered anymore.

17:15.480 --> 17:23.720
If there is any exception that is thrown, Pulsar will deliver again the message.

17:23.720 --> 17:31.720
In Tomy, there is a very simple way to deploy the resource adapter for Pulsar.

17:31.720 --> 17:36.920
So Pulsar, you configure the connection to Pulsar.

17:36.920 --> 17:40.880
Now in the demo, I'm using localhost.

17:40.880 --> 17:42.520
And this is the most interesting part.

17:42.520 --> 17:43.920
I create a logical queue.

17:43.920 --> 17:46.600
So foo queue, this is a queue.

17:46.600 --> 17:51.120
And I bind it to a physical destination.

17:51.120 --> 17:58.720
So the container will connect the, create a Pulsar connection factory and also the Pulsar

17:58.720 --> 18:01.360
queue.

18:01.360 --> 18:05.680
The demo is on my GitHub space.

18:05.680 --> 18:08.600
So yes, you can run it by yourself.

18:08.600 --> 18:13.000
I'm going to use Apache Tomy 8.

18:13.000 --> 18:14.120
Starlight for GMS.

18:14.120 --> 18:16.560
I'll talk about that later.

18:16.560 --> 18:19.000
That is basically the GMS implementation.

18:19.000 --> 18:24.240
I create the administered object with the same file that we saw and Apache Pulsar to

18:24.240 --> 18:25.560
.11.

18:25.560 --> 18:33.040
So we have one application that consumes one that produces and Pulsar will run locally.

18:33.040 --> 18:35.120
So let me switch to the console.

18:35.120 --> 18:37.840
Oh no, yes, the code.

18:37.840 --> 18:39.320
The code is really simple.

18:39.320 --> 18:40.440
This is on GitHub.

18:40.440 --> 18:45.400
So you can check it out later.

18:45.400 --> 18:53.680
So this is the producer, I'm not writing the code that instantiates or assigns some value

18:53.680 --> 18:56.040
to the factory or to the queue.

18:56.040 --> 19:00.480
I'm scheduling the execution of this method every two seconds.

19:00.480 --> 19:01.480
And that's it.

19:01.480 --> 19:02.480
Very easy.

19:02.480 --> 19:06.960
On the GMS list, these are two separate applications.

19:06.960 --> 19:12.680
Usually in a real world application, you have some application that produce the data.

19:12.680 --> 19:16.360
And you have a pipeline that transforms your data and something else that consumes the

19:16.360 --> 19:17.360
data.

19:17.360 --> 19:19.760
This is pretty common.

19:19.760 --> 19:27.240
So here on message, depending on the type of message, I'm printing the content and message.

19:27.240 --> 19:33.960
Here I'm just declaring the reference to the logical queue that I want.

19:33.960 --> 19:42.760
And in this case, openHB that is still Tomy will resolve the binding with the physical

19:42.760 --> 19:50.040
queue via JNDI.

19:50.040 --> 19:53.000
We are running out of time.

19:53.000 --> 19:55.720
So I have a script to run all the demo.

19:55.720 --> 20:03.520
The script simply installs two instances of Tomy, Pulsar, copies the configuration file,

20:03.520 --> 20:09.560
employs the resource archives, changes some ports because I'm running multiple services

20:09.560 --> 20:11.440
on my machine.

20:11.440 --> 20:14.480
So there will be conflicts.

20:14.480 --> 20:20.040
Copy the consumer application to Tomy 1, copy the producer application to Tomy 2, then start

20:20.040 --> 20:21.440
the Pulsar standalone.

20:21.440 --> 20:28.920
That is a quick way to start Pulsar locally with all the services, but only in one JVM

20:28.920 --> 20:29.920
process.

20:29.920 --> 20:35.560
So Tomy 1, to be 2, and then we will see the logs.

20:35.560 --> 20:40.640
So there is some noise initially because it is installing everything.

20:40.640 --> 20:41.640
This is Pulsar.

20:41.640 --> 20:42.640
This is starting.

20:42.640 --> 20:44.640
These are the two Tomy.

20:44.640 --> 20:49.520
And actually, we don't see.

20:49.520 --> 20:50.520
Oh, yes.

20:50.520 --> 20:51.520
This is good.

20:51.520 --> 20:54.640
So Tomy 2 is sending the messages.

20:54.640 --> 20:56.720
Tomy 1 is receiving the messages.

20:56.720 --> 20:58.160
So it works.

20:58.160 --> 21:07.840
It's a very straightforward setup and very common way to develop with the Java enterprise.

21:07.840 --> 21:08.840
Let's wrap up.

21:08.840 --> 21:10.840
Two minutes, probably.

21:10.840 --> 21:11.840
Yes.

21:11.840 --> 21:12.840
Okay, good.

21:12.840 --> 21:18.960
So JMS is very useful and it allows you to switch very easily to another vendor.

21:18.960 --> 21:24.520
Usually with JMS, you don't use very specific features.

21:24.520 --> 21:31.840
Usually in my experience with JMS, maybe you're using TIP code, you're using active MQ.

21:31.840 --> 21:38.160
You configure on the container some special flags, but the code usually is pretty standard.

21:38.160 --> 21:41.800
So switching to Pulsar is usually easy.

21:41.800 --> 21:43.640
Pulsar is cloud native.

21:43.640 --> 21:46.000
It's scalable horizontally.

21:46.000 --> 21:53.200
So like Mary said, really, it looks like a promise, but this is real.

21:53.200 --> 21:58.840
You can add machines, remove machines and the service automatically adapts.

21:58.840 --> 22:03.400
Actually at Datastax, we are running it as a service on the cloud.

22:03.400 --> 22:10.840
And so this is very powerful because you can automatically adapt the resource consumption.

22:10.840 --> 22:17.000
And also you can move the data that is not actually consumed to tier storage.

22:17.000 --> 22:21.600
And this allows you to really lower the cost.

22:21.600 --> 22:22.600
It's open source.

22:22.600 --> 22:27.240
And vibrant community, if you want, you can reach out to me on the community.

22:27.240 --> 22:30.040
And there are many people, very enthusiastic.

22:30.040 --> 22:32.120
Pulsar is young.

22:32.120 --> 22:35.560
It is only five years old, something like that.

22:35.560 --> 22:44.080
But in the past two years, it grew very fast because it is really the next generation.

22:44.080 --> 22:49.480
Maybe someone working with the active MQ, then I did it in my previous jobs, active

22:49.480 --> 22:52.800
MQ and then Kafka and then Pulsar.

22:52.800 --> 22:54.960
Now it's time for Pulsar.

22:54.960 --> 22:57.640
If you want to use Pulsar, you can use Stalep for GMS.

22:57.640 --> 23:02.120
I'm the initial author and main maintainer for Stalep for GMS.

23:02.120 --> 23:06.240
So yes, feel free to ask me any questions.

23:06.240 --> 23:07.240
It's open source.

23:07.240 --> 23:08.800
It's on GitHub.

23:08.800 --> 23:10.320
Pulsar connection factory.

23:10.320 --> 23:16.240
If you're using standard Java, there is a resource adapter that works well with many containers

23:16.240 --> 23:22.120
and it's already tested and running on production.

23:22.120 --> 23:25.680
Just real quick, if you like, get this copy of the slide deck.

23:25.680 --> 23:30.120
But otherwise there are resources in here, community info, references to all the Pulsar

23:30.120 --> 23:35.600
information on GitHub and also in Pulsar site.

23:35.600 --> 23:38.840
And also then just additional information too with data stacks.

23:38.840 --> 23:43.820
If you're interested, we offer the $25 credit per month for personal projects.

23:43.820 --> 23:45.080
So wanting to share with you.

23:45.080 --> 23:50.280
I know it's not true, open source in that sense, but we do have estra.datastacks.com

23:50.280 --> 23:54.960
and all of the estra streaming is our companies supporting this in our cloud.

23:54.960 --> 23:58.360
So where did it go?

23:58.360 --> 23:59.360
Sorry.

23:59.360 --> 24:02.040
You tried to subscribe to us.

24:02.040 --> 24:03.040
Oh, that's right.

24:03.040 --> 24:04.040
Okay.

24:04.040 --> 24:05.040
So how do you contact us?

24:05.040 --> 24:09.600
This is the slide containing information about Twitter handles and LinkedIn, all of these

24:09.600 --> 24:10.600
things.

24:10.600 --> 24:12.280
So please do consider staying in touch with us.

24:12.280 --> 24:16.520
We'll be very happy to answer more questions that you may have and all you want to share

24:16.520 --> 24:17.680
with us your project idea.

24:17.680 --> 24:18.680
We'll be happy to.

24:18.680 --> 24:20.680
And also on Fujai's luck.

24:20.680 --> 24:21.680
Yes, that's right.

24:21.680 --> 24:22.680
So thank you.

24:22.680 --> 24:23.680
Thank you so much.

24:23.680 --> 24:24.680
And I think then that's, that's all right.

24:24.680 --> 24:25.680
We'll make sure.

24:25.680 --> 24:26.680
Okay.

24:26.680 --> 24:27.680
Thank you.

24:27.680 --> 24:28.680
Any questions?

24:28.680 --> 24:29.680
Are there any questions?

24:29.680 --> 24:30.680
I'm so sorry.

24:30.680 --> 24:31.680
Yes.

24:31.680 --> 24:45.360
Sure.

24:45.360 --> 24:46.360
First one.

24:46.360 --> 24:47.360
All right.

24:47.360 --> 24:54.360
So, uh, the functions, uh, uh, uh, addition to the messaging part, doesn't it make it

24:54.360 --> 24:55.360
an enterprise server for us?

24:55.360 --> 24:56.360
What?

24:56.360 --> 24:57.360
The, the post-op functions.

24:57.360 --> 24:58.360
Yeah.

24:58.360 --> 25:06.280
Or post-op function is a lightweight, uh, processing framework that, uh, usually, uh,

25:06.280 --> 25:11.320
it's very easy to enrich the data that you are ever on your topics.

25:11.320 --> 25:14.840
So, uh, it's for very lightweight processing.

25:14.840 --> 25:21.600
Uh, so if, if you have to do more complicated processing, you usually move to something

25:21.600 --> 25:28.320
like fling or other things, but post-op function is very useful when you have to really process

25:28.320 --> 25:29.320
your data.

25:29.320 --> 25:35.640
And also it is the, um, base for post-RIO that is the connector, uh, framework.

25:35.640 --> 25:41.720
So basically in post-RIO you can deploy on, on the post-RIO cluster your code that transforms

25:41.720 --> 25:44.000
your data on your topics.

25:44.000 --> 25:46.000
Um, yes.

25:46.000 --> 25:51.520
It, it starts from a, a message on post-RIO and usually it ends with another message on

25:51.520 --> 25:52.520
post-RIO.

25:52.520 --> 26:00.600
So it's really useful for transforming the data that is on post-R or to, uh, push your

26:00.600 --> 26:02.640
data outside of post-R.

26:02.640 --> 26:04.640
I don't know if these answers.

26:04.640 --> 26:05.640
We need to continue.

26:05.640 --> 26:06.640
Oh yes.

26:06.640 --> 26:07.640
There is a question over here.

26:07.640 --> 26:12.360
If you want to have a discussion and also on Fujislak you can have discussions with

26:12.360 --> 26:23.400
the panelists, but, um, at the top there, um, Mary.

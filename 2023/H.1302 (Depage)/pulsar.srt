1
0:00:00.000 --> 0:00:10.800
Hello, everyone.

2
0:00:10.800 --> 0:00:12.920
Welcome to our talk.

3
0:00:12.920 --> 0:00:15.020
Thank you so much for staying for this long.

4
0:00:15.020 --> 0:00:18.600
This is the second last session of the day.

5
0:00:18.600 --> 0:00:20.520
Really appreciate you being here.

6
0:00:20.520 --> 0:00:27.200
Today we're going to be talking about modernizing legacy messaging system with Apache Pulsar.

7
0:00:27.200 --> 0:00:29.960
Here we have Enrico and myself too.

8
0:00:29.960 --> 0:00:32.760
We're from Datastax.

9
0:00:32.760 --> 0:00:39.320
Before we start, if you like a copy of our slide deck, here is the QR code and also the

10
0:00:39.320 --> 0:00:40.760
short link if you want.

11
0:00:40.760 --> 0:00:50.760
I'll let you take a moment.

12
0:00:50.760 --> 0:00:52.320
Even if you missed, don't worry.

13
0:00:52.320 --> 0:00:55.400
We'll be sharing with you our connection info.

14
0:00:55.400 --> 0:00:59.800
When you can connect with us, we can always be there to answer your questions too.

15
0:00:59.800 --> 0:01:01.520
With that, let me start.

16
0:01:01.520 --> 0:01:02.680
First just a quick introduction.

17
0:01:02.680 --> 0:01:03.680
Who is Mary?

18
0:01:03.680 --> 0:01:07.240
I'm a streaming developer advocate at Datastax.

19
0:01:07.240 --> 0:01:10.360
Datastax is a company based in California.

20
0:01:10.360 --> 0:01:12.960
Specializing in Apache Cassandra, managed cloud.

21
0:01:12.960 --> 0:01:17.920
Now we also have the managed cloud for streaming, which is Apache Pulsar.

22
0:01:17.920 --> 0:01:23.920
I was also a developer advocate before joining Datastax last year.

23
0:01:23.920 --> 0:01:25.440
I'm based in Chicago.

24
0:01:25.440 --> 0:01:31.040
I'm also the president of the Chicago Java users group and I'm also a Java champion.

25
0:01:31.040 --> 0:01:36.840
Before this, I was spending over 20 years or so being a developer myself too.

26
0:01:36.840 --> 0:01:37.840
That's me.

27
0:01:37.840 --> 0:01:38.840
This is Enrico.

28
0:01:38.840 --> 0:01:39.840
Enrico.

29
0:01:39.840 --> 0:01:40.840
Oh, yes.

30
0:01:40.840 --> 0:01:41.840
Sure.

31
0:01:41.840 --> 0:01:42.840
I'm Enrico.

32
0:01:42.840 --> 0:01:43.840
I work with Mary.

33
0:01:43.840 --> 0:01:47.640
I really enjoy working with open source communities.

34
0:01:47.640 --> 0:01:55.960
I'm involved in a few Apache projects like Pulsar, but all the big Datastax, so DoKeeper.

35
0:01:55.960 --> 0:02:00.240
Also I collaborate with Maven and Curator.

36
0:02:00.240 --> 0:02:07.320
I'm participating also in some CNCF project like Pravega that is still about messaging

37
0:02:07.320 --> 0:02:13.280
and distributed streaming and also contributed to RDB that is a distributed embeddable Java

38
0:02:13.280 --> 0:02:14.280
database.

39
0:02:14.280 --> 0:02:15.280
Cool.

40
0:02:15.280 --> 0:02:16.280
Okay.

41
0:02:16.280 --> 0:02:17.280
Great.

42
0:02:17.280 --> 0:02:18.280
Enrico.

43
0:02:18.280 --> 0:02:22.240
I'm really happy today to be here with Enrico because we were just working remotely, finally

44
0:02:22.240 --> 0:02:26.800
get to meet here in Belgium when he lives in Italy and I'm in Chicago.

45
0:02:26.800 --> 0:02:27.800
Okay.

46
0:02:27.800 --> 0:02:31.400
Without further ado, this is the agenda within 20 minutes.

47
0:02:31.400 --> 0:02:36.160
It's going to be a little bit quick, but we'll end up having Enrico also doing a quick demo

48
0:02:36.160 --> 0:02:37.160
as well.

49
0:02:37.160 --> 0:02:43.000
First, let's give an introduction to what is JMS, assuming not everybody is familiar

50
0:02:43.000 --> 0:02:44.000
with that.

51
0:02:44.000 --> 0:02:48.360
Let's give an introduction and then we'll talk about Apache Pulsar and why Pulsar and

52
0:02:48.360 --> 0:02:54.160
also just quickly describe the Pulsar architecture and how do you do the mapping between JMS

53
0:02:54.160 --> 0:02:57.520
and Pulsar and then how to use JMS API with Pulsar.

54
0:02:57.520 --> 0:03:03.120
Enrico will show that and then that's how we're going to be doing.

55
0:03:03.120 --> 0:03:06.920
First of all, just some core concepts too of JMS.

56
0:03:06.920 --> 0:03:13.200
As such, JMS is all about also messaging, but it's very much a Java-centric technology

57
0:03:13.200 --> 0:03:19.160
and it's here, as you can see, it's also a publish, subscribe kind of model, making

58
0:03:19.160 --> 0:03:23.160
use of destinations that it supports cues and topics.

59
0:03:23.160 --> 0:03:29.280
Messages, producers, consumers, these are typical like PubSub producer, consumer type

60
0:03:29.280 --> 0:03:30.280
of pattern.

61
0:03:30.280 --> 0:03:33.000
Such is a pattern, but this has its own implementation.

62
0:03:33.000 --> 0:03:38.440
Basically, too, it makes use of the JMS context and that will help you with the connections

63
0:03:38.440 --> 0:03:40.080
and sessions.

64
0:03:40.080 --> 0:03:41.720
Okay.

65
0:03:41.720 --> 0:03:42.720
About destinations.

66
0:03:42.720 --> 0:03:48.760
Essentially, too, it supports both cueing and the topic too.

67
0:03:48.760 --> 0:03:55.400
It acts as a broker in the topic case, but for cues, each message is basically, as such,

68
0:03:55.400 --> 0:04:00.600
message cue is you drop the message there and then it gets picked up and then it's kind

69
0:04:00.600 --> 0:04:02.800
of done by the consumer like that.

70
0:04:02.800 --> 0:04:07.240
It's browsable, this cue, first out kind of approach.

71
0:04:07.240 --> 0:04:13.640
Then with topic, it allows for multiple subscriptions too and message dispatch according to the

72
0:04:13.640 --> 0:04:16.840
subscription type as well.

73
0:04:16.840 --> 0:04:22.240
As far as consumer styles go, you can have blocking, which is blocking receive methods

74
0:04:22.240 --> 0:04:25.320
and that's all application driven.

75
0:04:25.320 --> 0:04:26.320
Also...

76
0:04:26.320 --> 0:04:28.320
Go, go, go.

77
0:04:28.320 --> 0:04:29.320
Okay.

78
0:04:29.320 --> 0:04:34.360
Then there's also making use of the message listener method, which is a JMS to driver

79
0:04:34.360 --> 0:04:36.640
driven in that case.

80
0:04:36.640 --> 0:04:42.200
As far as producer styles go, the blocking will be send method or there's also a async

81
0:04:42.200 --> 0:04:45.120
send too and that will be like with completion listener.

82
0:04:45.120 --> 0:04:47.440
That's real quickly.

83
0:04:47.440 --> 0:04:53.520
As far as administrative operations go, as we know, JMS does not cover administrative

84
0:04:53.520 --> 0:04:55.640
operations.

85
0:04:55.640 --> 0:05:01.240
How do you manage the destinations and doing connection properties, all of these things,

86
0:05:01.240 --> 0:05:05.600
the defining security models, our resource limits, all of these things and configure

87
0:05:05.600 --> 0:05:08.840
all of these, JMS itself doesn't have to do it.

88
0:05:08.840 --> 0:05:10.200
How do you manage it?

89
0:05:10.200 --> 0:05:12.920
It usually relies on your vendor.

90
0:05:12.920 --> 0:05:21.800
How do you do all of the management too through some vendor way of allowing you to do that?

91
0:05:21.800 --> 0:05:29.680
Basically too, there's also API also to let you work with administrative objects too.

92
0:05:29.680 --> 0:05:34.760
Basically they're supposed to be also provided by the system as well.

93
0:05:34.760 --> 0:05:40.200
As far as destinations go, there are queue and topic references and connection factory

94
0:05:40.200 --> 0:05:45.400
basically is essentially too using connection factory as the client that allows you to connect

95
0:05:45.400 --> 0:05:48.760
to the system in that case.

96
0:05:48.760 --> 0:05:55.360
There's also JMS, the API essentially allows you to interact with Java EE, or now it's

97
0:05:55.360 --> 0:06:00.480
Jakarta EE, but back then there's Java EE.

98
0:06:00.480 --> 0:06:04.240
In that case you can basically make use of EJP components.

99
0:06:04.240 --> 0:06:13.640
There's Stateful Stateless EJP that's used in web surflets or the JAXRS, JAXWS endpoints

100
0:06:13.640 --> 0:06:20.520
and allows you to also do background, like doing scheduling kind of way of doing things.

101
0:06:20.520 --> 0:06:22.160
There's also message driven beans.

102
0:06:22.160 --> 0:06:27.320
These are essentially too, it's basically their JMS specific kind of beans to handle

103
0:06:27.320 --> 0:06:29.000
messages in there.

104
0:06:29.000 --> 0:06:35.640
It's basically managed by the container, the JEE container.

105
0:06:35.640 --> 0:06:40.840
When you receive messages from a container then it will essentially be activated in that

106
0:06:40.840 --> 0:06:43.200
case.

107
0:06:43.200 --> 0:06:49.440
The Java EE container provides support for all of the lifecycle management pulling of

108
0:06:49.440 --> 0:06:53.840
these context dependency injection of these things.

109
0:06:53.840 --> 0:07:00.160
It supports security standard API of these tools, basically relying on the container

110
0:07:00.160 --> 0:07:02.640
to do that for you.

111
0:07:02.640 --> 0:07:04.880
There's also too, what about external resources?

112
0:07:04.880 --> 0:07:08.880
A lot of times that's how it relies on resource adapters.

113
0:07:08.880 --> 0:07:15.280
It allows you to essentially extend the Java EE container in that case.

114
0:07:15.280 --> 0:07:19.880
Some key points basically to use it is you need to have the resource archive file, so

115
0:07:19.880 --> 0:07:26.120
the.RAR file that will contain the code and you have to then configure the resource adapter

116
0:07:26.120 --> 0:07:27.120
and everything.

117
0:07:27.120 --> 0:07:32.360
It allows you to essentially create administer objects, right?

118
0:07:32.360 --> 0:07:38.240
These objects will conform to the standard API and it's implemented by the core inside

119
0:07:38.240 --> 0:07:40.280
the resource adapter too.

120
0:07:40.280 --> 0:07:46.960
These are the different packages, like basically Java X.GMS in this case is I think in the

121
0:07:46.960 --> 0:07:52.400
new version would be Jakarta, but we're still talking about Java, the older JMS in this

122
0:07:52.400 --> 0:07:56.600
case and will be connection factory, queue and topic.

123
0:07:56.600 --> 0:08:02.800
Usually each object is bound to a JNDI, naming and directory interface registry provided

124
0:08:02.800 --> 0:08:05.800
by the container.

125
0:08:05.800 --> 0:08:10.240
It's specific to the container as to how you do deployment too and that's how it usually

126
0:08:10.240 --> 0:08:11.240
works.

127
0:08:11.240 --> 0:08:13.560
Now, then let's get introduced.

128
0:08:13.560 --> 0:08:17.760
Now we talk about JMS stuff as a bit more legacy stuff.

129
0:08:17.760 --> 0:08:23.880
What are some of the options to leverage on today's more modern world that allows you to

130
0:08:23.880 --> 0:08:26.080
work in a cloud native environment better?

131
0:08:26.080 --> 0:08:32.120
We want to introduce to you Apache Pulsar is an open source platform and it's cloud native

132
0:08:32.120 --> 0:08:36.240
and it supports distributed messaging and streaming too.

133
0:08:36.240 --> 0:08:41.440
As such, this is the link where you can find out more information or this is actually more

134
0:08:41.440 --> 0:08:44.080
of the GitHub repo.

135
0:08:44.080 --> 0:08:50.200
Wanting to highlight it, not too much time, but basically it's very cloud native in nature.

136
0:08:50.200 --> 0:08:55.080
It's born with the cloud native DNA.

137
0:08:55.080 --> 0:08:59.600
It's basically the key point of it is why do you want Pulsar?

138
0:08:59.600 --> 0:09:01.600
I think at least one of the key points.

139
0:09:01.600 --> 0:09:04.600
It separates out the compute and the storage.

140
0:09:04.600 --> 0:09:09.840
Basically Pulsar can focus more on working with the messages, delivery, dealing with

141
0:09:09.840 --> 0:09:13.400
all the messages coming in, delivering all of these things.

142
0:09:13.400 --> 0:09:16.600
You have the whole laundry basket of all the log messages.

143
0:09:16.600 --> 0:09:17.600
What do you do with it?

144
0:09:17.600 --> 0:09:22.720
Rather than dealing with it, Pulsar said, let me get Bookkeeper to handle it for me.

145
0:09:22.720 --> 0:09:27.800
That way Pulsar can focus on that, just the messaging part and coordinate with the Bookkeeper.

146
0:09:27.800 --> 0:09:28.960
That's what it does.

147
0:09:28.960 --> 0:09:33.160
It also supports multi-tenancy and that's a very nice way of helping you to organize

148
0:09:33.160 --> 0:09:34.900
all of your messages.

149
0:09:34.900 --> 0:09:40.480
As well as some features that are more ready for enterprise level, geo-replication is also

150
0:09:40.480 --> 0:09:42.640
a major thing in that.

151
0:09:42.640 --> 0:09:45.640
And also it has what is called tiered offset.

152
0:09:45.640 --> 0:09:50.120
Basically if your messages get code, in Bookkeeper you don't want it to take up too much room.

153
0:09:50.120 --> 0:09:54.760
Then you want to move it to, or actually I should say, it gets in the warm storage and

154
0:09:54.760 --> 0:09:57.100
you want to move it off to cold storage.

155
0:09:57.100 --> 0:10:00.760
So all these Pulsar has built in and it knows it.

156
0:10:00.760 --> 0:10:06.880
So native Kubernetes support all of these things, schema, it has a Pulsar schema, connectors,

157
0:10:06.880 --> 0:10:10.920
and you can use basically a Pulsar IO framework to build different connectors.

158
0:10:10.920 --> 0:10:16.960
And currently we're supporting almost 100 different kind of connectors in there.

159
0:10:16.960 --> 0:10:20.720
Message processing, you can use the Pulsar functions framework so you don't need to use

160
0:10:20.720 --> 0:10:26.440
anything outside to do message transformation as you're building your data pipeline.

161
0:10:26.440 --> 0:10:30.680
And also the nice thing too is that it doesn't restrict you to only using Java as your client.

162
0:10:30.680 --> 0:10:35.880
You can use other things like C++, Python, Go, and other community contributions to such

163
0:10:35.880 --> 0:10:36.880
a cloud.

164
0:10:36.880 --> 0:10:39.980
There's also Node.js, also.NET, C sharp client too.

165
0:10:39.980 --> 0:10:44.160
So that's really flexible and really functioning real well in Pulsar.

166
0:10:44.160 --> 0:10:46.480
So let's kind of really quickly take a look.

167
0:10:46.480 --> 0:10:48.560
I already mentioned some of it.

168
0:10:48.560 --> 0:10:52.280
Essentially too it's a blazing performance, that's what we all want, provides you with

169
0:10:52.280 --> 0:10:54.800
true real-time type of processing.

170
0:10:54.800 --> 0:10:56.280
That's why we want it.

171
0:10:56.280 --> 0:11:01.840
It's basically millions of JMS messages can be handled if you have JMS leveraging on such

172
0:11:01.840 --> 0:11:03.080
a platform.

173
0:11:03.080 --> 0:11:04.080
So it's all good.

174
0:11:04.080 --> 0:11:05.520
Horizontal scalability.

175
0:11:05.520 --> 0:11:10.360
If you expand your infrastructure, adding more servers and nodes and all of these to it,

176
0:11:10.360 --> 0:11:12.000
Pulsar will handle that for you.

177
0:11:12.000 --> 0:11:16.440
You don't need to rebalance all of your topics and you don't need to deal with offsets, such

178
0:11:16.440 --> 0:11:18.600
as in maybe Kafka, things like that.

179
0:11:18.600 --> 0:11:23.760
It has its own way so then you don't have to worry as a developer worrying about all

180
0:11:23.760 --> 0:11:25.580
of these infrastructural things.

181
0:11:25.580 --> 0:11:27.520
So all of these things are just listed here.

182
0:11:27.520 --> 0:11:33.080
I know there's a lot of words in here but it allows you to kind of get a bit more into

183
0:11:33.080 --> 0:11:35.480
detail and we can share with you this thing.

184
0:11:35.480 --> 0:11:37.880
So let me pass this on to...

185
0:11:37.880 --> 0:11:39.040
Actually let me see.

186
0:11:39.040 --> 0:11:40.200
Oh, let me kind of quickly.

187
0:11:40.200 --> 0:11:41.200
I thought this was...

188
0:11:41.200 --> 0:11:43.680
Okay, so just a really quick basic architecture.

189
0:11:43.680 --> 0:11:46.880
This kind of pictorially described to you what I just talked about.

190
0:11:46.880 --> 0:11:48.600
We only had so little time.

191
0:11:48.600 --> 0:11:53.520
So this is just describing to you producers, consumers can be written in many different

192
0:11:53.520 --> 0:12:00.120
languages not just with Java and it gets managing by BookKeeper that deals with all of the storage

193
0:12:00.120 --> 0:12:02.680
side of things and very dynamic.

194
0:12:02.680 --> 0:12:07.800
As you can see, this kind of quickly summarized in picture what Pulsar can do for you.

195
0:12:07.800 --> 0:12:11.520
Okay, and then here, just quick summary Apache Pulsar.

196
0:12:11.520 --> 0:12:14.960
Again take mixtures of a PubSub type of architecture, right?

197
0:12:14.960 --> 0:12:19.680
And that's what it is and supports like multi-tenants, namespaces.

198
0:12:19.680 --> 0:12:24.360
Some subscription modes do that, you can also leverage on that essentially turn Pulsar into

199
0:12:24.360 --> 0:12:31.080
a queuing kind of capability if you use an exclusive type of mode to do subscription.

200
0:12:31.080 --> 0:12:32.080
And one other thing.

201
0:12:32.080 --> 0:12:33.360
Yeah, so there are different modes.

202
0:12:33.360 --> 0:12:37.120
It's just highly flexible is what we're trying to tell you about this story.

203
0:12:37.120 --> 0:12:38.120
So here we have a...

204
0:12:38.120 --> 0:12:39.120
Sure.

205
0:12:39.120 --> 0:12:40.120
Sure.

206
0:12:40.120 --> 0:12:42.000
A little bit sorry about that.

207
0:12:42.000 --> 0:12:45.800
We can talk more about it later.

208
0:12:45.800 --> 0:12:50.680
So I just want to map Pulsar concept to JMS.

209
0:12:50.680 --> 0:12:52.880
JMS is pretty straightforward.

210
0:12:52.880 --> 0:12:59.580
So the model is quite flexible because it deals with queuing but also PubSub.

211
0:12:59.580 --> 0:13:06.600
And in Pulsar, the mapping is really natural because you can map a JMS topic to a Pulsar

212
0:13:06.600 --> 0:13:13.720
topic, whatever it is, a standard topic, partitioned topic, virtual topics.

213
0:13:13.720 --> 0:13:18.240
So a JMS queue is like a Pulsar shared subscription.

214
0:13:18.240 --> 0:13:22.920
And the JMS is like a Pulsar message with an envelope and with the body.

215
0:13:22.920 --> 0:13:26.400
So in JMS, we have several consumer types.

216
0:13:26.400 --> 0:13:31.400
So I'm not going to enter the details, but there is a subscription type that matches

217
0:13:31.400 --> 0:13:36.040
the JMS requirements.

218
0:13:36.040 --> 0:13:40.360
One important thing is that if you want to use JMS with Pulsar, you don't need to install

219
0:13:40.360 --> 0:13:48.960
any additional plugin because the JMS API is built over the standard native Java client

220
0:13:48.960 --> 0:13:55.200
because the Pulsar features are a super set of JMS.

221
0:13:55.200 --> 0:13:57.920
So it's only about implementing an API.

222
0:13:57.920 --> 0:14:04.280
You know, as in JDBC, you have an API that allow you to connect to every database.

223
0:14:04.280 --> 0:14:10.320
In JMS, you just have to implement the API and follow the specs.

224
0:14:10.320 --> 0:14:14.440
If you want, you can deploy a server side component just to push some of the component

225
0:14:14.440 --> 0:14:15.440
computations.

226
0:14:15.440 --> 0:14:18.400
So, for instance, in JMS, you have filters.

227
0:14:18.400 --> 0:14:19.640
You can filter the messages.

228
0:14:19.640 --> 0:14:22.320
So if you want, you can filter them on the broker.

229
0:14:22.320 --> 0:14:28.200
Otherwise, you can simply filter them on the client side.

230
0:14:28.200 --> 0:14:36.400
I'm just showing some examples of how to use Pulsar with JMS.

231
0:14:36.400 --> 0:14:41.360
Maybe if you are already familiar with JMS, that's pretty simple.

232
0:14:41.360 --> 0:14:44.400
So in JMS, you start with a connection factory.

233
0:14:44.400 --> 0:14:47.040
So we have Pulsar connection factory.

234
0:14:47.040 --> 0:14:49.280
And this is JMS 2.0.

235
0:14:49.280 --> 0:14:52.260
And you can get a JMS context.

236
0:14:52.260 --> 0:14:54.240
You get a reference to a destination.

237
0:14:54.240 --> 0:14:56.480
This is create queue.

238
0:14:56.480 --> 0:14:58.160
Create queue is not creating a queue.

239
0:14:58.160 --> 0:15:03.480
It's creating a reference to queue because JMS doesn't deal with administrative operations,

240
0:15:03.480 --> 0:15:05.720
as Mary said.

241
0:15:05.720 --> 0:15:06.720
You create a producer.

242
0:15:06.720 --> 0:15:09.000
You can send as many messages as you want.

243
0:15:09.000 --> 0:15:12.400
And if you want to consume, you create a consumer.

244
0:15:12.400 --> 0:15:16.120
And you can use receive or set a message listener.

245
0:15:16.120 --> 0:15:18.200
This is from standard Java.

246
0:15:18.200 --> 0:15:25.240
If you're using Jocate or Java Enterprise, actually, yes, I've been helping a few companies

247
0:15:25.240 --> 0:15:31.680
to migrate from Java Enterprise to Pulsar.

248
0:15:31.680 --> 0:15:37.320
So I know much more cases about Java Enterprise more than Jakarta.

249
0:15:37.320 --> 0:15:40.160
But that's it.

250
0:15:40.160 --> 0:15:46.920
So for instance, if you want to write and you have an enterprise Java bin, then you

251
0:15:46.920 --> 0:15:51.880
can ask for the container to inject the connection to Pulsar.

252
0:15:51.880 --> 0:15:54.840
And this is a standard Java Enterprise code.

253
0:15:54.840 --> 0:16:01.400
So this code runs with active and queue, with the tip code, with whatever you want, whatever

254
0:16:01.400 --> 0:16:03.120
you are running.

255
0:16:03.120 --> 0:16:07.680
And the container injects the connection factory and the destination.

256
0:16:07.680 --> 0:16:13.600
And you can, as in the standard Java code, you can get a reference to the JMS context.

257
0:16:13.600 --> 0:16:15.080
And then you send.

258
0:16:15.080 --> 0:16:20.760
We will see later how the administrator, for instance, with Apache Tomy, connects all the

259
0:16:20.760 --> 0:16:23.640
parts.

260
0:16:23.640 --> 0:16:28.640
The consumer, usually in Java Enterprise, you use message driven bins to consume from

261
0:16:28.640 --> 0:16:30.640
destinations.

262
0:16:30.640 --> 0:16:34.960
So yes, this is a simple message driven bin.

263
0:16:34.960 --> 0:16:41.560
You configure all the relevant things that you want.

264
0:16:41.560 --> 0:16:44.000
For instance, usually you configure the destination.

265
0:16:44.000 --> 0:16:46.400
That is still a logical name.

266
0:16:46.400 --> 0:16:51.280
And subscription type or the parallelism or the kind of things.

267
0:16:51.280 --> 0:16:59.200
In many containers, you can configure the things on other descriptors.

268
0:16:59.200 --> 0:17:02.000
Usually in XML files.

269
0:17:02.000 --> 0:17:04.440
You implement a callback, on message.

270
0:17:04.440 --> 0:17:08.960
Every time a message is dispatched to the application, the code runs.

271
0:17:08.960 --> 0:17:13.840
And if everything goes well, the message is acknowledged to the Pulsar broker.

272
0:17:13.840 --> 0:17:15.480
It won't be delivered anymore.

273
0:17:15.480 --> 0:17:23.720
If there is any exception that is thrown, Pulsar will deliver again the message.

274
0:17:23.720 --> 0:17:31.720
In Tomy, there is a very simple way to deploy the resource adapter for Pulsar.

275
0:17:31.720 --> 0:17:36.920
So Pulsar, you configure the connection to Pulsar.

276
0:17:36.920 --> 0:17:40.880
Now in the demo, I'm using localhost.

277
0:17:40.880 --> 0:17:42.520
And this is the most interesting part.

278
0:17:42.520 --> 0:17:43.920
I create a logical queue.

279
0:17:43.920 --> 0:17:46.600
So foo queue, this is a queue.

280
0:17:46.600 --> 0:17:51.120
And I bind it to a physical destination.

281
0:17:51.120 --> 0:17:58.720
So the container will connect the, create a Pulsar connection factory and also the Pulsar

282
0:17:58.720 --> 0:18:01.360
queue.

283
0:18:01.360 --> 0:18:05.680
The demo is on my GitHub space.

284
0:18:05.680 --> 0:18:08.600
So yes, you can run it by yourself.

285
0:18:08.600 --> 0:18:13.000
I'm going to use Apache Tomy 8.

286
0:18:13.000 --> 0:18:14.120
Starlight for GMS.

287
0:18:14.120 --> 0:18:16.560
I'll talk about that later.

288
0:18:16.560 --> 0:18:19.000
That is basically the GMS implementation.

289
0:18:19.000 --> 0:18:24.240
I create the administered object with the same file that we saw and Apache Pulsar to

290
0:18:24.240 --> 0:18:25.560
.11.

291
0:18:25.560 --> 0:18:33.040
So we have one application that consumes one that produces and Pulsar will run locally.

292
0:18:33.040 --> 0:18:35.120
So let me switch to the console.

293
0:18:35.120 --> 0:18:37.840
Oh no, yes, the code.

294
0:18:37.840 --> 0:18:39.320
The code is really simple.

295
0:18:39.320 --> 0:18:40.440
This is on GitHub.

296
0:18:40.440 --> 0:18:45.400
So you can check it out later.

297
0:18:45.400 --> 0:18:53.680
So this is the producer, I'm not writing the code that instantiates or assigns some value

298
0:18:53.680 --> 0:18:56.040
to the factory or to the queue.

299
0:18:56.040 --> 0:19:00.480
I'm scheduling the execution of this method every two seconds.

300
0:19:00.480 --> 0:19:01.480
And that's it.

301
0:19:01.480 --> 0:19:02.480
Very easy.

302
0:19:02.480 --> 0:19:06.960
On the GMS list, these are two separate applications.

303
0:19:06.960 --> 0:19:12.680
Usually in a real world application, you have some application that produce the data.

304
0:19:12.680 --> 0:19:16.360
And you have a pipeline that transforms your data and something else that consumes the

305
0:19:16.360 --> 0:19:17.360
data.

306
0:19:17.360 --> 0:19:19.760
This is pretty common.

307
0:19:19.760 --> 0:19:27.240
So here on message, depending on the type of message, I'm printing the content and message.

308
0:19:27.240 --> 0:19:33.960
Here I'm just declaring the reference to the logical queue that I want.

309
0:19:33.960 --> 0:19:42.760
And in this case, openHB that is still Tomy will resolve the binding with the physical

310
0:19:42.760 --> 0:19:50.040
queue via JNDI.

311
0:19:50.040 --> 0:19:53.000
We are running out of time.

312
0:19:53.000 --> 0:19:55.720
So I have a script to run all the demo.

313
0:19:55.720 --> 0:20:03.520
The script simply installs two instances of Tomy, Pulsar, copies the configuration file,

314
0:20:03.520 --> 0:20:09.560
employs the resource archives, changes some ports because I'm running multiple services

315
0:20:09.560 --> 0:20:11.440
on my machine.

316
0:20:11.440 --> 0:20:14.480
So there will be conflicts.

317
0:20:14.480 --> 0:20:20.040
Copy the consumer application to Tomy 1, copy the producer application to Tomy 2, then start

318
0:20:20.040 --> 0:20:21.440
the Pulsar standalone.

319
0:20:21.440 --> 0:20:28.920
That is a quick way to start Pulsar locally with all the services, but only in one JVM

320
0:20:28.920 --> 0:20:29.920
process.

321
0:20:29.920 --> 0:20:35.560
So Tomy 1, to be 2, and then we will see the logs.

322
0:20:35.560 --> 0:20:40.640
So there is some noise initially because it is installing everything.

323
0:20:40.640 --> 0:20:41.640
This is Pulsar.

324
0:20:41.640 --> 0:20:42.640
This is starting.

325
0:20:42.640 --> 0:20:44.640
These are the two Tomy.

326
0:20:44.640 --> 0:20:49.520
And actually, we don't see.

327
0:20:49.520 --> 0:20:50.520
Oh, yes.

328
0:20:50.520 --> 0:20:51.520
This is good.

329
0:20:51.520 --> 0:20:54.640
So Tomy 2 is sending the messages.

330
0:20:54.640 --> 0:20:56.720
Tomy 1 is receiving the messages.

331
0:20:56.720 --> 0:20:58.160
So it works.

332
0:20:58.160 --> 0:21:07.840
It's a very straightforward setup and very common way to develop with the Java enterprise.

333
0:21:07.840 --> 0:21:08.840
Let's wrap up.

334
0:21:08.840 --> 0:21:10.840
Two minutes, probably.

335
0:21:10.840 --> 0:21:11.840
Yes.

336
0:21:11.840 --> 0:21:12.840
Okay, good.

337
0:21:12.840 --> 0:21:18.960
So JMS is very useful and it allows you to switch very easily to another vendor.

338
0:21:18.960 --> 0:21:24.520
Usually with JMS, you don't use very specific features.

339
0:21:24.520 --> 0:21:31.840
Usually in my experience with JMS, maybe you're using TIP code, you're using active MQ.

340
0:21:31.840 --> 0:21:38.160
You configure on the container some special flags, but the code usually is pretty standard.

341
0:21:38.160 --> 0:21:41.800
So switching to Pulsar is usually easy.

342
0:21:41.800 --> 0:21:43.640
Pulsar is cloud native.

343
0:21:43.640 --> 0:21:46.000
It's scalable horizontally.

344
0:21:46.000 --> 0:21:53.200
So like Mary said, really, it looks like a promise, but this is real.

345
0:21:53.200 --> 0:21:58.840
You can add machines, remove machines and the service automatically adapts.

346
0:21:58.840 --> 0:22:03.400
Actually at Datastax, we are running it as a service on the cloud.

347
0:22:03.400 --> 0:22:10.840
And so this is very powerful because you can automatically adapt the resource consumption.

348
0:22:10.840 --> 0:22:17.000
And also you can move the data that is not actually consumed to tier storage.

349
0:22:17.000 --> 0:22:21.600
And this allows you to really lower the cost.

350
0:22:21.600 --> 0:22:22.600
It's open source.

351
0:22:22.600 --> 0:22:27.240
And vibrant community, if you want, you can reach out to me on the community.

352
0:22:27.240 --> 0:22:30.040
And there are many people, very enthusiastic.

353
0:22:30.040 --> 0:22:32.120
Pulsar is young.

354
0:22:32.120 --> 0:22:35.560
It is only five years old, something like that.

355
0:22:35.560 --> 0:22:44.080
But in the past two years, it grew very fast because it is really the next generation.

356
0:22:44.080 --> 0:22:49.480
Maybe someone working with the active MQ, then I did it in my previous jobs, active

357
0:22:49.480 --> 0:22:52.800
MQ and then Kafka and then Pulsar.

358
0:22:52.800 --> 0:22:54.960
Now it's time for Pulsar.

359
0:22:54.960 --> 0:22:57.640
If you want to use Pulsar, you can use Stalep for GMS.

360
0:22:57.640 --> 0:23:02.120
I'm the initial author and main maintainer for Stalep for GMS.

361
0:23:02.120 --> 0:23:06.240
So yes, feel free to ask me any questions.

362
0:23:06.240 --> 0:23:07.240
It's open source.

363
0:23:07.240 --> 0:23:08.800
It's on GitHub.

364
0:23:08.800 --> 0:23:10.320
Pulsar connection factory.

365
0:23:10.320 --> 0:23:16.240
If you're using standard Java, there is a resource adapter that works well with many containers

366
0:23:16.240 --> 0:23:22.120
and it's already tested and running on production.

367
0:23:22.120 --> 0:23:25.680
Just real quick, if you like, get this copy of the slide deck.

368
0:23:25.680 --> 0:23:30.120
But otherwise there are resources in here, community info, references to all the Pulsar

369
0:23:30.120 --> 0:23:35.600
information on GitHub and also in Pulsar site.

370
0:23:35.600 --> 0:23:38.840
And also then just additional information too with data stacks.

371
0:23:38.840 --> 0:23:43.820
If you're interested, we offer the $25 credit per month for personal projects.

372
0:23:43.820 --> 0:23:45.080
So wanting to share with you.

373
0:23:45.080 --> 0:23:50.280
I know it's not true, open source in that sense, but we do have estra.datastacks.com

374
0:23:50.280 --> 0:23:54.960
and all of the estra streaming is our companies supporting this in our cloud.

375
0:23:54.960 --> 0:23:58.360
So where did it go?

376
0:23:58.360 --> 0:23:59.360
Sorry.

377
0:23:59.360 --> 0:24:02.040
You tried to subscribe to us.

378
0:24:02.040 --> 0:24:03.040
Oh, that's right.

379
0:24:03.040 --> 0:24:04.040
Okay.

380
0:24:04.040 --> 0:24:05.040
So how do you contact us?

381
0:24:05.040 --> 0:24:09.600
This is the slide containing information about Twitter handles and LinkedIn, all of these

382
0:24:09.600 --> 0:24:10.600
things.

383
0:24:10.600 --> 0:24:12.280
So please do consider staying in touch with us.

384
0:24:12.280 --> 0:24:16.520
We'll be very happy to answer more questions that you may have and all you want to share

385
0:24:16.520 --> 0:24:17.680
with us your project idea.

386
0:24:17.680 --> 0:24:18.680
We'll be happy to.

387
0:24:18.680 --> 0:24:20.680
And also on Fujai's luck.

388
0:24:20.680 --> 0:24:21.680
Yes, that's right.

389
0:24:21.680 --> 0:24:22.680
So thank you.

390
0:24:22.680 --> 0:24:23.680
Thank you so much.

391
0:24:23.680 --> 0:24:24.680
And I think then that's, that's all right.

392
0:24:24.680 --> 0:24:25.680
We'll make sure.

393
0:24:25.680 --> 0:24:26.680
Okay.

394
0:24:26.680 --> 0:24:27.680
Thank you.

395
0:24:27.680 --> 0:24:28.680
Any questions?

396
0:24:28.680 --> 0:24:29.680
Are there any questions?

397
0:24:29.680 --> 0:24:30.680
I'm so sorry.

398
0:24:30.680 --> 0:24:31.680
Yes.

399
0:24:31.680 --> 0:24:45.360
Sure.

400
0:24:45.360 --> 0:24:46.360
First one.

401
0:24:46.360 --> 0:24:47.360
All right.

402
0:24:47.360 --> 0:24:54.360
So, uh, the functions, uh, uh, uh, addition to the messaging part, doesn't it make it

403
0:24:54.360 --> 0:24:55.360
an enterprise server for us?

404
0:24:55.360 --> 0:24:56.360
What?

405
0:24:56.360 --> 0:24:57.360
The, the post-op functions.

406
0:24:57.360 --> 0:24:58.360
Yeah.

407
0:24:58.360 --> 0:25:06.280
Or post-op function is a lightweight, uh, processing framework that, uh, usually, uh,

408
0:25:06.280 --> 0:25:11.320
it's very easy to enrich the data that you are ever on your topics.

409
0:25:11.320 --> 0:25:14.840
So, uh, it's for very lightweight processing.

410
0:25:14.840 --> 0:25:21.600
Uh, so if, if you have to do more complicated processing, you usually move to something

411
0:25:21.600 --> 0:25:28.320
like fling or other things, but post-op function is very useful when you have to really process

412
0:25:28.320 --> 0:25:29.320
your data.

413
0:25:29.320 --> 0:25:35.640
And also it is the, um, base for post-RIO that is the connector, uh, framework.

414
0:25:35.640 --> 0:25:41.720
So basically in post-RIO you can deploy on, on the post-RIO cluster your code that transforms

415
0:25:41.720 --> 0:25:44.000
your data on your topics.

416
0:25:44.000 --> 0:25:46.000
Um, yes.

417
0:25:46.000 --> 0:25:51.520
It, it starts from a, a message on post-RIO and usually it ends with another message on

418
0:25:51.520 --> 0:25:52.520
post-RIO.

419
0:25:52.520 --> 0:26:00.600
So it's really useful for transforming the data that is on post-R or to, uh, push your

420
0:26:00.600 --> 0:26:02.640
data outside of post-R.

421
0:26:02.640 --> 0:26:04.640
I don't know if these answers.

422
0:26:04.640 --> 0:26:05.640
We need to continue.

423
0:26:05.640 --> 0:26:06.640
Oh yes.

424
0:26:06.640 --> 0:26:07.640
There is a question over here.

425
0:26:07.640 --> 0:26:12.360
If you want to have a discussion and also on Fujislak you can have discussions with

426
0:26:12.360 --> 0:26:23.400
the panelists, but, um, at the top there, um, Mary.


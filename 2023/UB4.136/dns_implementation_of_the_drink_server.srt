1
0:00:00.000 --> 0:00:07.000
Hello everybody, this is Stefan, Stefan Borsmeyer of Aethnic.

2
0:00:07.000 --> 0:00:14.440
We will talk about Drink, which is, I guess, an experimental DNS server?

3
0:00:14.440 --> 0:00:16.920
No, not at all.

4
0:00:16.920 --> 0:00:20.720
It's a tri-moist station in Belgium, actually.

5
0:00:20.720 --> 0:00:26.000
I'm already right there.

6
0:00:26.000 --> 0:00:29.440
Well, yes, it's a DNS server.

7
0:00:29.440 --> 0:00:33.440
And you can see here an example of it working out for them.

8
0:00:33.440 --> 0:00:41.120
I asked 2 plus 2 dot domain name, TXT record, and that's extraordinary.

9
0:00:41.120 --> 0:00:45.720
I get 4 as an answer, which is really, really useful.

10
0:00:45.720 --> 0:00:47.440
It was not possible before, but...

11
0:00:47.440 --> 0:00:50.440
Maybe with the sensor, which is true.

12
0:00:50.440 --> 0:00:51.440
Exactly, exactly.

13
0:00:51.440 --> 0:00:52.440
This is authentic.

14
0:00:52.440 --> 0:00:58.400
So you can be sure it's really, really 4 because it's signed with DNS.

15
0:00:58.400 --> 0:01:05.240
So now we are going to see how it is done by Magycto.

16
0:01:05.240 --> 0:01:12.640
So Drink is a dynamic authoritative name server with several services.

17
0:01:12.640 --> 0:01:17.560
The main one, which was the original goal, is to return the IP address of the client.

18
0:01:17.560 --> 0:01:23.520
You have a lot of services on the internet doing this, but all of them are very minimum.

19
0:01:23.520 --> 0:01:29.040
They don't implement all of the funny things of the DNS.

20
0:01:29.040 --> 0:01:30.720
We have also other services.

21
0:01:30.720 --> 0:01:37.320
For instance, ECS, EDNS, client subnet echo can be useful also if you want to know what

22
0:01:37.320 --> 0:01:40.120
your wizard is sending about you.

23
0:01:40.120 --> 0:01:46.400
And you have other services such as the calculator.

24
0:01:46.400 --> 0:01:53.480
The goals to develop Drink were first to learn, to have fun also, and also to implement.

25
0:01:53.480 --> 0:02:01.360
A lot of DNS stuff that are missing from the typical dynamic DNS services such as TCP,

26
0:02:01.360 --> 0:02:06.680
NSID, cookies, DNSsec, of course, etc.

27
0:02:06.680 --> 0:02:10.000
Extended DNS errors, etc.

28
0:02:10.000 --> 0:02:12.720
So that was the idea.

29
0:02:12.720 --> 0:02:18.640
Also it also provides a platform to test IDs at IETF accountants.

30
0:02:18.640 --> 0:02:22.320
IETF accountants are great because you can have T-shirts.

31
0:02:22.320 --> 0:02:29.480
And it's opportunity to test new IDs, new stuff, and modifying existing software like

32
0:02:29.480 --> 0:02:33.600
NSD or BIND or not is not always easy.

33
0:02:33.600 --> 0:02:39.120
So I wanted something which was easier, at least for me.

34
0:02:39.120 --> 0:02:47.240
So as you see, it does not pretend to be a competitor to things like power DNS, NSD,

35
0:02:47.240 --> 0:02:49.000
not, etc.

36
0:02:49.000 --> 0:02:51.480
It's experimental.

37
0:02:51.480 --> 0:02:55.760
So the implementation is done in Elixir.

38
0:02:55.760 --> 0:03:02.800
For the people who don't know Elixir, it's mostly a functional programming language which

39
0:03:02.800 --> 0:03:10.080
compiles to an Erlang bytecode which is then executed by the Erlang virtual machine.

40
0:03:10.080 --> 0:03:13.920
The good thing about Erlang is massive parallelism.

41
0:03:13.920 --> 0:03:18.000
So the virtual machine is really, really good for that.

42
0:03:18.000 --> 0:03:25.360
The syntax of Erlang is seen by many people as a bit of style.

43
0:03:25.360 --> 0:03:31.480
So the Elixir was mostly done, at least at the beginning, to have a better syntax for

44
0:03:31.480 --> 0:03:35.000
the same bytecode on the virtual machine.

45
0:03:35.000 --> 0:03:41.080
Also it's always fun to learn a new language.

46
0:03:41.080 --> 0:03:43.200
I didn't do everything myself.

47
0:03:43.200 --> 0:03:47.120
I had to rely on several existing libraries.

48
0:03:47.120 --> 0:03:49.600
It's one of the pleasures of free software.

49
0:03:49.600 --> 0:03:59.760
You have a lot of libraries with free software license compatible with the one you use, obviously.

50
0:03:59.760 --> 0:04:04.560
And the problem is that Elixir is not mainstream.

51
0:04:04.560 --> 0:04:13.200
So unlike languages like Go or Python which have very, very good Matthew-Mentain-the-debugged-DNS

52
0:04:13.200 --> 0:04:22.840
libraries, Elixir, there are some DNS libraries, typically with the last commit three or four

53
0:04:22.840 --> 0:04:29.480
years ago, sometimes older, and not always maintained and things like that.

54
0:04:29.480 --> 0:04:33.940
So it's a typical problem when you program in Elixir.

55
0:04:33.940 --> 0:04:41.200
When you go to X, which is the main repository of libraries, you always find something,

56
0:04:41.200 --> 0:04:43.080
whatever you are looking for.

57
0:04:43.080 --> 0:04:47.340
But pay attention, is it still maintained, debugged, et cetera.

58
0:04:47.340 --> 0:04:52.020
You have many libraries for the same stuff, but not all of them perfect.

59
0:04:52.020 --> 0:04:57.960
So it's one of the problems you have when you program in Elixir.

60
0:04:57.960 --> 0:05:06.580
Drink can itself call external microservices with HTTP or things like that, which has consequences

61
0:05:06.580 --> 0:05:11.600
for the implementation because external services can be slow or unreliable.

62
0:05:11.600 --> 0:05:18.320
So you have to be careful not to crash, not to hang everything while you are waiting for

63
0:05:18.320 --> 0:05:19.520
the microservices.

64
0:05:19.520 --> 0:05:24.720
It's a bit like the talk about DNS resolution for graphical program.

65
0:05:24.720 --> 0:05:31.960
Here we may, unlike the typical authoritative server which only depends on what is in its

66
0:05:31.960 --> 0:05:37.920
memory, so it's very predictable, on the response time is constant.

67
0:05:37.920 --> 0:05:45.040
Unlike this typical authoritative server, drink has response time on success rates,

68
0:05:45.040 --> 0:05:51.000
which are highly dependent on the external services.

69
0:05:51.000 --> 0:05:55.120
It's free software, of course, because we are at FOSDEM, so I wouldn't dare to present

70
0:05:55.120 --> 0:05:58.840
it if it were not free software.

71
0:05:58.840 --> 0:06:04.800
You are already here, but let's go to the important implementation point.

72
0:06:04.800 --> 0:06:08.640
First one, which is probably the most important, parallelism.

73
0:06:08.640 --> 0:06:10.000
I don't like events.

74
0:06:10.000 --> 0:06:14.320
I think that events are an invention of the devil.

75
0:06:14.320 --> 0:06:19.640
Parallelism, good intended parallelism to be done with processes.

76
0:06:19.640 --> 0:06:27.840
On Elixir, well, Erlang actually, because the one time is Erlang1, Erlang encouraged

77
0:06:27.840 --> 0:06:30.360
you to use massive parallelism.

78
0:06:30.360 --> 0:06:32.800
When I say massive, really massive.

79
0:06:32.800 --> 0:06:38.720
You have anything to do, you create a new thread of execution.

80
0:06:38.720 --> 0:06:40.480
It's very, very efficient.

81
0:06:40.480 --> 0:06:45.680
In drink, every DNS request is a separate process.

82
0:06:45.680 --> 0:06:50.360
When I say process, it's not an operating system process because of course creating

83
0:06:50.360 --> 0:06:55.280
them and managing them would be much too costly.

84
0:06:55.280 --> 0:07:00.960
One of the funny things with the Erlang world is that they have a terminology which is quite

85
0:07:00.960 --> 0:07:01.960
specific.

86
0:07:01.960 --> 0:07:09.800
Words like process or application do not have the same meaning in the Erlang world as everywhere

87
0:07:09.800 --> 0:07:10.960
else.

88
0:07:10.960 --> 0:07:15.240
A process here, it's what Go is calling a Go routine.

89
0:07:15.240 --> 0:07:19.600
For instance, for those who programmed in Go, it's more or less the same.

90
0:07:19.600 --> 0:07:24.120
Basically it's very quick to create and to manage.

91
0:07:24.120 --> 0:07:29.520
Don't exit one of the things that we always tell to the beginners in Elixir or Erlang.

92
0:07:29.520 --> 0:07:33.080
Don't exit it to create process.

93
0:07:33.080 --> 0:07:37.200
Every request is a process.

94
0:07:37.200 --> 0:07:43.120
Every TCP connection is a process.

95
0:07:43.120 --> 0:07:44.400
Everything is done by process.

96
0:07:44.400 --> 0:07:49.840
For instance, logging statistics where it's not implemented yet but control through a

97
0:07:49.840 --> 0:07:53.440
local socket is also done by a separate process.

98
0:07:53.440 --> 0:07:59.480
As I said, there is a process for everything.

99
0:07:59.480 --> 0:08:05.800
As consequences, if you crash, if there is an exception, remember it's experimental code

100
0:08:05.800 --> 0:08:10.000
and it's written by me so there are a lot of bugs, but if you crash, you only crash

101
0:08:10.000 --> 0:08:11.000
one process.

102
0:08:11.000 --> 0:08:15.120
You don't take down the entire server.

103
0:08:15.120 --> 0:08:22.440
That's a very interesting thing because it's one of the motto of the Erlang and Elixir programmers,

104
0:08:22.440 --> 0:08:23.440
let it crash.

105
0:08:23.440 --> 0:08:29.640
If a process crashes, it's not a big problem as long as the entire server continues to

106
0:08:29.640 --> 0:08:31.120
work.

107
0:08:31.120 --> 0:08:36.640
In the same way, if a request is stuck because you are waiting for something, you are calling

108
0:08:36.640 --> 0:08:41.840
a microservice somewhere at the other end of the internet and it does not reply or not

109
0:08:41.840 --> 0:08:49.520
immediately, it's not a big problem for a drink because all the other requests will

110
0:08:49.520 --> 0:08:51.840
continue to work.

111
0:08:51.840 --> 0:08:58.640
Because parallelism is really great and unlike what many people are saying, it's even simpler

112
0:08:58.640 --> 0:09:00.800
than traditional programming.

113
0:09:00.800 --> 0:09:08.160
So for TCP, as a consequence, when I programmed it in the Elixir way, pipelining, meaning sending

114
0:09:08.160 --> 0:09:14.000
several requests over the TCP connection without waiting for the reply of the first one, worked

115
0:09:14.000 --> 0:09:18.920
immediately without me having anything to do at all.

116
0:09:18.920 --> 0:09:26.520
On out of order replies, which are not only allowed in TCP DNS but also mandated by the

117
0:09:26.520 --> 0:09:30.200
RFC, work also immediately.

118
0:09:30.200 --> 0:09:36.640
The first time I tested, it worked without anything specific because every DNS request

119
0:09:36.640 --> 0:09:37.640
is a process.

120
0:09:37.640 --> 0:09:38.640
So, okay.

121
0:09:38.640 --> 0:09:40.080
It works in parallel.

122
0:09:40.080 --> 0:09:42.160
So you have out of order replies.

123
0:09:42.160 --> 0:09:47.480
Remember that for a typical authoritative name server, out of order replies are not

124
0:09:47.480 --> 0:09:52.320
necessary because a response time is typically the same for every request.

125
0:09:52.320 --> 0:09:58.480
So there is not really any point in making out of order replies, unlike a resolver, for

126
0:09:58.480 --> 0:09:59.480
instance.

127
0:09:59.480 --> 0:10:06.840
But drink is a bit special because any request can take some time, a lot of time.

128
0:10:06.840 --> 0:10:10.920
So out of order replies are still very important.

129
0:10:10.920 --> 0:10:14.520
And as I said, parallel programming is simpler.

130
0:10:14.520 --> 0:10:17.280
This is something you have to teach to the students.

131
0:10:17.280 --> 0:10:21.600
Parallel programming is not something very complicated that you see only at the end of

132
0:10:21.600 --> 0:10:22.600
the year.

133
0:10:22.600 --> 0:10:25.920
It's something very simple, very natural.

134
0:10:25.920 --> 0:10:30.880
If you don't use events, everything is fine.

135
0:10:30.880 --> 0:10:34.840
And you don't care about things like, this request may block me.

136
0:10:34.840 --> 0:10:35.840
Yeah, okay.

137
0:10:35.840 --> 0:10:36.840
Let it block.

138
0:10:36.840 --> 0:10:37.840
No problem.

139
0:10:37.840 --> 0:10:42.200
Other process will work.

140
0:10:42.200 --> 0:10:45.600
So here is an example of Elixir code.

141
0:10:45.600 --> 0:10:48.680
It's a functional language, so we use a map a lot.

142
0:10:48.680 --> 0:10:53.480
We don't do loops because loops also are an invention of the devil.

143
0:10:53.480 --> 0:10:59.400
So we have a set of IP addresses, and we just map a function.

144
0:10:59.400 --> 0:11:06.000
The function simply listens on this address with some options.

145
0:11:06.000 --> 0:11:08.040
Then you open the socket.

146
0:11:08.040 --> 0:11:14.800
And for each socket, you create a server which runs this function, TCP loop acceptor, which

147
0:11:14.800 --> 0:11:23.480
will itself create a process for every DNS request received over the TCP connection.

148
0:11:23.480 --> 0:11:24.760
And that's all.

149
0:11:24.760 --> 0:11:31.760
And is the end of the function that you map on the set of all IP addresses.

150
0:11:31.760 --> 0:11:34.880
Okay.

151
0:11:34.880 --> 0:11:36.080
Not even a bug in this one?

152
0:11:36.080 --> 0:11:39.600
No, I don't think so.

153
0:11:39.600 --> 0:11:44.800
Another important point when you write an Internet server, whatever type of Internet

154
0:11:44.800 --> 0:11:47.760
server it is, is of course robustness.

155
0:11:47.760 --> 0:11:51.440
Because as you know, the Internet is hostile.

156
0:11:51.440 --> 0:11:53.600
You see a lot of funny things.

157
0:11:53.600 --> 0:12:00.840
A lot of funny DNS packets, and sometimes even one dom binary sent to the 53 port.

158
0:12:00.840 --> 0:12:06.840
So I assume everybody in the room have read RFC 9267?

159
0:12:06.840 --> 0:12:11.480
Yeah.

160
0:12:11.480 --> 0:12:16.400
It's very good reading if you are interested in DNS implementation, how it works.

161
0:12:16.400 --> 0:12:23.200
Basically, it's a list of the things that can go wrong when you pass DNS request.

162
0:12:23.200 --> 0:12:26.360
It's not a complete list.

163
0:12:26.360 --> 0:12:28.920
So the Internet is a jungle.

164
0:12:28.920 --> 0:12:33.720
Incoming packets can have whatever, literally whatever.

165
0:12:33.720 --> 0:12:35.040
Everything is possible.

166
0:12:35.040 --> 0:12:41.080
And of course, the main example in RFC 9267 are compression pointers.

167
0:12:41.080 --> 0:12:46.400
Because compression pointers can do things like pointing to themselves, pointing outside

168
0:12:46.400 --> 0:12:47.400
of the packet.

169
0:12:47.400 --> 0:12:54.160
So if you program in C in a completely careless way, you can imagine what will happen.

170
0:12:54.160 --> 0:12:58.320
And indeed, it happens in the real world.

171
0:12:58.320 --> 0:13:05.320
Most of the example in the RFC are from DNS mask on the windows, but it can happen to

172
0:13:05.320 --> 0:13:06.320
anyone.

173
0:13:06.320 --> 0:13:10.080
EDNS is not mentioned in the RFC, but it can be fun also.

174
0:13:10.080 --> 0:13:15.800
It was especially fun for me because the DNS libraries that I choose, I discovered later

175
0:13:15.800 --> 0:13:18.000
that it has no support for EDNS.

176
0:13:18.000 --> 0:13:20.200
So EDNS had to be done entirely.

177
0:13:20.200 --> 0:13:24.960
And EDNS options, for instance, are type length value.

178
0:13:24.960 --> 0:13:31.180
So you can have a length which is too large or too small and make the packet impossible

179
0:13:31.180 --> 0:13:32.180
to pass.

180
0:13:32.180 --> 0:13:38.680
Or even worse, can trigger crash of the server or remote code execution in the worst case.

181
0:13:38.680 --> 0:13:42.800
If you program in C, this is the sort of thing that can happen.

182
0:13:42.800 --> 0:13:46.920
So here is an example on how to pass EDNS.

183
0:13:46.920 --> 0:13:49.000
The second line with the brackets.

184
0:13:49.000 --> 0:13:56.280
The brackets are when you handle binary data, you extract the code.

185
0:13:56.280 --> 0:14:00.600
You use for that pattern matching because it's a functional language.

186
0:14:00.600 --> 0:14:03.300
Elixir relies a lot on pattern matching.

187
0:14:03.300 --> 0:14:07.240
So here, the equal here is not an assignment.

188
0:14:07.240 --> 0:14:09.200
It simply means that you pattern match.

189
0:14:09.200 --> 0:14:12.920
And if it fails, there is an exception.

190
0:14:12.920 --> 0:14:20.960
So binary part which extracts the first two bytes of the data is a safe function, meaning

191
0:14:20.960 --> 0:14:23.400
that itself it uses pattern matching.

192
0:14:23.400 --> 0:14:29.960
If there are, for instance, not enough bytes to get the first two, you will have also an

193
0:14:29.960 --> 0:14:31.040
exception.

194
0:14:31.040 --> 0:14:37.280
You won't execute a remote code or go outside in the memory or things like that.

195
0:14:37.280 --> 0:14:39.040
Then you do things.

196
0:14:39.040 --> 0:14:43.080
You extract also the length of the packet and then you read the length.

197
0:14:43.080 --> 0:14:48.680
So if you do this sort of thing in C without paying attention, you can imagine the catastrophic

198
0:14:48.680 --> 0:14:50.340
thing that can happen.

199
0:14:50.340 --> 0:14:51.560
But here, it's safe.

200
0:14:51.560 --> 0:14:55.880
In the worst case, you will have an exception here because not enough bytes.

201
0:14:55.880 --> 0:14:58.640
So here, we trap the exception.

202
0:14:58.640 --> 0:15:05.120
Only with a proper exception and then we will return form air to the guy.

203
0:15:05.120 --> 0:15:12.000
In case you have something unexpected, this back crash, of course, it may take down the

204
0:15:12.000 --> 0:15:18.960
process but remember, each request is a separate process so the other request will be fine.

205
0:15:18.960 --> 0:15:24.600
DNSsec, ha, DNSsec is fun.

206
0:15:24.600 --> 0:15:31.600
Because it's dynamic, you need to have dynamic signing.

207
0:15:31.600 --> 0:15:38.080
On cryptography, one of the things I really dislike with cryptography is that each bit

208
0:15:38.080 --> 0:15:42.160
wrong on the signature is completely off the mark.

209
0:15:42.160 --> 0:15:48.760
So it makes things really difficult to debug because some software tell you that the signature

210
0:15:48.760 --> 0:15:49.760
does not match.

211
0:15:49.760 --> 0:15:51.280
Okay, what's the problem exactly?

212
0:15:51.280 --> 0:15:55.400
Did I forget a field or did I forget something in the RFCI?

213
0:15:55.400 --> 0:15:58.000
Yes, something.

214
0:15:58.000 --> 0:16:05.160
So an example, a bug that I had, for instance, is that default encoding of the DNS library

215
0:16:05.160 --> 0:16:10.380
uses compression for the data which is inside the R data.

216
0:16:10.380 --> 0:16:15.320
So the domain name in the SOA or NS record, for instance.

217
0:16:15.320 --> 0:16:22.360
But the RFC about DNSsec says that the signing has to be done on encoding which is done without

218
0:16:22.360 --> 0:16:24.720
any compression.

219
0:16:24.720 --> 0:16:29.160
So it didn't match and it took me some time to figure out the problem.

220
0:16:29.160 --> 0:16:35.900
Also, the library I used did not allow to encode without name compression.

221
0:16:35.900 --> 0:16:39.000
So I had to redo everything myself.

222
0:16:39.000 --> 0:16:44.000
Like most programming projects, drink was at the beginning, oh, it seems simple, it

223
0:16:44.000 --> 0:16:46.040
will be done in a weekend.

224
0:16:46.040 --> 0:16:50.760
And of course, in the end, it was much longer.

225
0:16:50.760 --> 0:16:55.320
So here is an example of code for signing, again, binary data.

226
0:16:55.320 --> 0:17:04.560
We put all the information that are mandated by the RFC in the pseudo RFC, which is then

227
0:17:04.560 --> 0:17:07.400
encoded by myself, unsigned.

228
0:17:07.400 --> 0:17:13.960
There are a few funny tricks, for instance, all domain names has to be put in lower case,

229
0:17:13.960 --> 0:17:19.040
the sort of problem that you discover when you go through a resolver with those case

230
0:17:19.040 --> 0:17:22.320
one domain name.

231
0:17:22.320 --> 0:17:30.120
That's how you learn.

232
0:17:30.120 --> 0:17:34.960
But the most funny in DNSsec is, of course, negative answers.

233
0:17:34.960 --> 0:17:41.280
So Moses came back from the mountain with 10 commandments and one says that you should

234
0:17:41.280 --> 0:17:42.840
not lie.

235
0:17:42.840 --> 0:17:49.040
But you have to lie here because you have to say that there is nothing between this

236
0:17:49.040 --> 0:17:53.200
name and this name, and you don't know all the names because the server is completely

237
0:17:53.200 --> 0:17:54.200
dynamic.

238
0:17:54.200 --> 0:18:00.640
So drink used something called white lies, which are described in RFC 4470.

239
0:18:00.640 --> 0:18:05.960
So the Nsec record is just a bit before the name to a bit later.

240
0:18:05.960 --> 0:18:11.360
It seems simple, but it's very hard to get at one step, for instance, when implementing

241
0:18:11.360 --> 0:18:20.240
the algorithm of RFC, I had code which worked with unbound or not, but failed with bind.

242
0:18:20.240 --> 0:18:26.760
And I never really discovered why, but after some tweaking, it worked.

243
0:18:26.760 --> 0:18:30.960
Also encoding of Nsec bitmaps, it's quite interesting.

244
0:18:30.960 --> 0:18:36.120
Nsec bitmaps are encoded in a very clever way, but very hard to get right, especially

245
0:18:36.120 --> 0:18:39.280
since the RFC has only one test vector.

246
0:18:39.280 --> 0:18:43.520
So it's very difficult to see if you are on the right track or not.

247
0:18:43.520 --> 0:18:48.600
But in the end, it works with we have everything in Elixir necessary.

248
0:18:48.600 --> 0:18:53.080
Enumerate, it's all the things that you can enumerate.

249
0:18:53.080 --> 0:18:55.240
It's a very generic library.

250
0:18:55.240 --> 0:19:01.000
So you can do things like finding the minimum, filtering to extract some data, map to apply

251
0:19:01.000 --> 0:19:03.720
a function, et cetera, et cetera.

252
0:19:03.720 --> 0:19:05.560
It's cool.

253
0:19:05.560 --> 0:19:13.160
Of course, you need to test Elixir like most programming languages as a framework for testing.

254
0:19:13.160 --> 0:19:17.800
But also I made external tests from a Python program written in Python to be sure that

255
0:19:17.800 --> 0:19:23.120
I don't have the same bug in both the tester and the testy.

256
0:19:23.120 --> 0:19:28.920
So it's also especially important in the DNS to test not only with proper DNS requests,

257
0:19:28.920 --> 0:19:32.880
but also with broken requests to see how the server reacts.

258
0:19:32.880 --> 0:19:38.880
So here is a Python code to create, for instance, an incorrect edns option.

259
0:19:38.880 --> 0:19:41.040
This is a comment on the second line.

260
0:19:41.040 --> 0:19:47.880
The length, nsid has no data, but here we put a random length.

261
0:19:47.880 --> 0:19:55.720
So any server that will try to decode edns stupidly will read too much bytes and something

262
0:19:55.720 --> 0:19:56.960
wrong will happen.

263
0:19:56.960 --> 0:20:02.040
So we create this edns option for the dns packet.

264
0:20:02.040 --> 0:20:08.320
We send it to the server and we hope that the server will reply as the RFC said with

265
0:20:08.320 --> 0:20:09.320
form error.

266
0:20:09.320 --> 0:20:14.920
Otherwise the test will fail.

267
0:20:14.920 --> 0:20:15.920
And that's all.

268
0:20:15.920 --> 0:20:17.920
So time for questions.

269
0:20:17.920 --> 0:20:18.920
Perfect.

270
0:20:18.920 --> 0:20:21.920
I have a question.

271
0:20:21.920 --> 0:20:31.920
On this screen, I will start with the question.

272
0:20:31.920 --> 0:20:32.920
Yes.

273
0:20:32.920 --> 0:20:33.920
Yes.

274
0:20:33.920 --> 0:20:36.920
That's a, that's this.

275
0:20:36.920 --> 0:20:42.920
I haven't seen any elixir slides.

276
0:20:42.920 --> 0:20:46.840
How is that?

277
0:20:46.840 --> 0:20:47.840
Good question.

278
0:20:47.840 --> 0:20:49.120
I have to think about it.

279
0:20:49.120 --> 0:20:50.120
Yeah.

280
0:20:50.120 --> 0:20:56.400
The question was about byte order because DNS RFC specify byte order for things like

281
0:20:56.400 --> 0:21:02.960
your length in edns packets, for instance, and it's not explicit in the elixir code.

282
0:21:02.960 --> 0:21:07.920
And that's a good question because I don't remember how I did it, but I won the program

283
0:21:07.920 --> 0:21:13.480
on several machines with addition byte order to be sure that it was okay, but I don't remember

284
0:21:13.480 --> 0:21:15.200
how I did it.

285
0:21:15.200 --> 0:21:19.080
That's an interesting question.

286
0:21:19.080 --> 0:21:20.880
This is a code that I wrote.

287
0:21:20.880 --> 0:21:23.240
The last code that I wrote was DNS sec.

288
0:21:23.240 --> 0:21:25.600
So DNS sec is still fresh in my mind.

289
0:21:25.600 --> 0:21:27.600
So rest is a bit more complicated.

290
0:21:27.600 --> 0:21:35.960
I can probably add that when you specify the binary pattern matching, you can choose how

291
0:21:35.960 --> 0:21:39.960
you want it done.

292
0:21:39.960 --> 0:21:46.960
And you can specify the elements and get the default thing.

293
0:21:46.960 --> 0:21:49.960
I don't remember which element.

294
0:21:49.960 --> 0:21:50.960
Yeah.

295
0:21:50.960 --> 0:21:56.200
I was wondering if TCP, the pipeline just worked, right?

296
0:21:56.200 --> 0:21:58.200
How does it handle larger files?

297
0:21:58.200 --> 0:22:00.200
Do you not have that?

298
0:22:00.200 --> 0:22:02.200
Is it always like the answer comes back?

299
0:22:02.200 --> 0:22:06.200
And so there's no chance that a big answer has to worry about a small answer arriving

300
0:22:06.200 --> 0:22:08.200
while it's being sent or anything like that.

301
0:22:08.200 --> 0:22:16.720
Well, the question was about TCP when there are some questions or replies that are larger

302
0:22:16.720 --> 0:22:19.880
than other or takes more time.

303
0:22:19.880 --> 0:22:27.040
So because of the parallelism, because every DNS request is a separate process, they follow

304
0:22:27.040 --> 0:22:28.520
their own path.

305
0:22:28.520 --> 0:22:33.600
The only case where they meet is when they try to send the reply back.

306
0:22:33.600 --> 0:22:38.760
So in that case, it's an error-long virtual machine which is in charge of being sure that

307
0:22:38.760 --> 0:22:41.320
you cannot interrupt a write operation.

308
0:22:41.320 --> 0:22:44.640
So the way it's implemented is that everything goes through a process.

309
0:22:44.640 --> 0:22:47.760
For instance, logging works the same way.

310
0:22:47.760 --> 0:22:51.920
We send everything to a logging process which then serialize.

311
0:22:51.920 --> 0:22:53.560
So we can be sure.

312
0:22:53.560 --> 0:22:58.560
And also writing on the socket is done by the error-long library, not by me.

313
0:22:58.560 --> 0:22:59.920
So it cannot be interrupted.

314
0:22:59.920 --> 0:23:05.240
So there is no risk, for instance, of interleaving replies, if that was your question.

315
0:23:05.240 --> 0:23:11.760
On the error-long socket library also does a few things that are not really important

316
0:23:11.760 --> 0:23:13.240
but are fun.

317
0:23:13.240 --> 0:23:18.960
For instance, when creating the socket, maybe you notice this option packet two.

318
0:23:18.960 --> 0:23:24.800
It means that two bytes length has to be added automatically which is good for EPP or for

319
0:23:24.800 --> 0:23:25.800
DNS.

320
0:23:25.800 --> 0:23:31.800
And also by default, it's in network byte order which is good again.

321
0:23:31.800 --> 0:23:34.800
Ah, performance.

322
0:23:34.800 --> 0:23:36.800
Yes.

323
0:23:36.800 --> 0:23:46.320
With DNS perf, and I compare the drink with the NSD, drink is typically three to four

324
0:23:46.320 --> 0:23:50.560
times slower which is expected, of course, because it's dynamic.

325
0:23:50.560 --> 0:23:54.680
It has not been optimized for speed because NSD is very fast.

326
0:23:54.680 --> 0:23:58.480
So of course, as you know, performance testing is something complicated.

327
0:23:58.480 --> 0:24:00.560
It depends on a lot of things.

328
0:24:00.560 --> 0:24:07.520
So I don't have strong, serious measurements, but the measurements I did on my machine show

329
0:24:07.520 --> 0:24:12.400
that the difference in performance is, in my opinion, quite acceptable.

330
0:24:12.400 --> 0:24:15.280
Three times slower than NSD is actually quite good.

331
0:24:15.280 --> 0:24:22.760
Are you planning to add a small cache in front of it?

332
0:24:22.760 --> 0:24:27.600
Or for any dynamic answer that lowers you the same answer?

333
0:24:27.600 --> 0:24:32.320
The question is, do I plan to add some caching in it because some questions can take time

334
0:24:32.320 --> 0:24:35.120
to retrieve or to compute?

335
0:24:35.120 --> 0:24:36.120
No.

336
0:24:36.120 --> 0:24:42.080
I don't think it's, as you know, caching is one of the two or three complicated things

337
0:24:42.080 --> 0:24:44.040
in computer programming.

338
0:24:44.040 --> 0:24:49.040
So in my opinion, it's not worth it.

339
0:24:49.040 --> 0:24:53.520
Caching can be done by the client anyway.

340
0:24:53.520 --> 0:24:59.080
You can run a drink behind the NSD, if you're willing.

341
0:24:59.080 --> 0:25:00.080
Thank you.

342
0:25:00.080 --> 0:25:29.680
Thank you,ISTER.


WEBVTT

00:00.000 --> 00:11.920
We try to cover as many, it's unfortunate, there's so many topics to cover when you do

00:11.920 --> 00:16.320
mobile, for Linux mobile phones.

00:16.320 --> 00:22.280
Okay, welcome, looker, we have seen the first fair phone being used as a presenting device

00:22.280 --> 00:23.280
this morning.

00:23.280 --> 00:29.280
So now we are going to learn how to put the kernel on it.

00:29.280 --> 00:30.280
Thank you.

00:30.280 --> 00:38.480
Yeah, so kind of very quickly, who am I?

00:38.480 --> 00:41.920
My name is Zukavayz, I've been my learning phone since like 2017.

00:41.920 --> 00:46.320
I'm a post-marketless core team member and also my day job is Android platform engineer

00:46.320 --> 00:49.520
at Fairphone.

00:49.520 --> 00:53.280
Kind of about the background of how the whole situation, so I mean Qualcomm has a lot of

00:53.280 --> 00:56.560
lot of SOCs like system on the chip.

00:56.560 --> 01:02.240
There's quite a lot of actually already supported, so you see all these wonderful numbers here.

01:02.240 --> 01:06.040
There's the ones launched since 2018, so like in the last four years.

01:06.040 --> 01:11.120
And they are already supported in mainland as in they have a DTSI file and you can build

01:11.120 --> 01:12.880
something on top of this and it's booting.

01:12.880 --> 01:17.320
But of course there's also many, many others that are not supported, especially mid-end

01:17.320 --> 01:21.560
ones like the high-end ones are normally very quickly supported by Linaro.

01:21.560 --> 01:26.760
So like for example the SM8550 is the newest one, it was basically supported on day one

01:26.760 --> 01:33.480
or it's the same with the SM8450, but the other ones are not, but you can of course

01:33.480 --> 01:36.560
do it yourself.

01:36.560 --> 01:42.880
So the device Fairphone 4 used a Snapdragon 750G, so SM7 to the 5.

01:42.880 --> 01:48.520
Yeah, launched like a year and four months ago running the 4.19 kernel, which is already

01:48.520 --> 01:52.840
I mean we had 6.2 nearly.

01:52.840 --> 02:00.800
And yeah, like what I have so far working on the 6.1 or 6.2 kernel is like all the basics

02:00.800 --> 02:02.520
that you can see here.

02:02.520 --> 02:07.560
USB, including nearly the USB roll switching, so you can actually plug in for example a

02:07.560 --> 02:11.480
keyboard into the device and not just use it like as a gadget.

02:11.480 --> 02:16.760
I'm internal storage on the SD card, so the UFS and other things.

02:16.760 --> 02:21.560
Okay with backlight control, which is separate components, touchscreen, GPU, Wi-Fi.

02:21.560 --> 02:27.760
The remote procs, which is like separate cores on the SOC, they are actually all booting,

02:27.760 --> 02:33.040
but at least for the modem one I'm actually not really able to communicate with it.

02:33.040 --> 02:36.760
Mobile data could also in theory work, so the Linux driver initializes it, actually

02:36.760 --> 02:41.120
gets the remote prock up, it already does some initialization things there, but it's

02:41.120 --> 02:44.680
not really testable without actually having modem up.

02:44.680 --> 02:48.080
So it's kind of untested, it's upstream already.

02:48.080 --> 02:52.960
Vibration motor, the flash and torch LED, which is actually was upstream recently, or

02:52.960 --> 02:55.240
is in the process of getting upstreamed.

02:55.240 --> 03:00.160
The camera I2C bus, so I can actually talk with the I2C set and I2C get commands, I can

03:00.160 --> 03:06.300
talk with the camera and get the chip ID, so that works, but yeah not really much more

03:06.300 --> 03:07.760
useful with the camera yet.

03:07.760 --> 03:12.840
And also lots of other plumbing, which includes of course the I2C buses, interconnect, so

03:12.840 --> 03:19.840
like the bus scaling, cache scaling, and a bunch of other stuff that's useful.

03:19.840 --> 03:23.840
So kind of what isn't working yet after this one year in four months that I've been sort

03:23.840 --> 03:30.840
of working on it, I have some parts that are actually sort of working, it's like the speaker,

03:30.840 --> 03:36.480
I do have, I can get sound out of the speaker, it is super quiet for some reason, I don't

03:36.480 --> 03:41.840
know why, and also for some of the audio formats it actually doesn't play at all for some reason,

03:41.840 --> 03:43.560
I know.

03:43.560 --> 03:47.280
One of the problems with the speakers are also not very many phones in mainland actually,

03:47.280 --> 03:54.120
like Qualcomm phones have audio working, so it is still kind of a new area where a lot

03:54.120 --> 03:56.480
of things are kind of unknown.

03:56.480 --> 04:04.120
And Bluetooth I have based on some patch that I found, you can get it on the Bluetooth,

04:04.120 --> 04:08.720
you can make the phone discoverable, so you can see it on other devices, you can actually

04:08.720 --> 04:14.080
connect other devices to it, but when you try to on Bluetooth do the scan on command,

04:14.080 --> 04:16.360
like it just fails.

04:16.360 --> 04:19.080
So which is a bit weird, I don't know why.

04:19.080 --> 04:20.840
Probably need to spend some more time on it.

04:20.840 --> 04:24.520
And also like of course all the other parts that don't work, so the modem, as I said before,

04:24.520 --> 04:30.280
I can talk with the modem via QMI, so the Qualcomm protocol, but when I say please enable

04:30.280 --> 04:32.760
yourself it says nope.

04:32.760 --> 04:36.040
And doesn't say anything else, so it's kind of difficult.

04:36.040 --> 04:41.120
The microphones, which is also kind of a different part of the audio stack.

04:41.120 --> 04:46.200
The camera subsystem, which is used for receiving image data from the sensors, it's not working,

04:46.200 --> 04:52.440
including the time of light sensors, like for autofocus it can be used.

04:52.440 --> 04:58.040
The video encoding, decoding hardware, which is for, so you can play MP4 for example without

04:58.040 --> 05:00.760
actually doing the decoding of the CPU.

05:00.760 --> 05:07.600
And if see the fuel gauge, so for battery percentage and the charging driver, they are

05:07.600 --> 05:08.600
not working.

05:08.600 --> 05:15.200
I was able to port the one from the Fortnite 19 kernel to mainline, like just import it.

05:15.200 --> 05:19.760
It does sort of work the fuel gauge driver, but apparently there's some weird, really

05:19.760 --> 05:24.200
weird things going on in Android where like a user space component writes something to

05:24.200 --> 05:28.880
the kernel driver and without this nothing works basically.

05:28.880 --> 05:29.880
It's super weird.

05:29.880 --> 05:35.680
And also this part of a USB-C, what Alfred already demonstrated before, like it works

05:35.680 --> 05:40.200
in hardware, but it doesn't work with mainline, just with the downstream kernel.

05:40.200 --> 05:44.800
So kind of what is the things that you need to have when you're trying to get a new SoC

05:44.800 --> 05:45.800
app?

05:45.800 --> 05:51.080
It's like one of the first steps is kind of also figuring out how can you make this bootloader

05:51.080 --> 05:53.720
boot what you want to boot.

05:53.720 --> 06:00.680
Because in the Android case, like Google requires some special things going on and also the

06:00.680 --> 06:06.080
way that many SoC manufacturers implement it is kind of sometimes working, it is working

06:06.080 --> 06:09.520
for Android and that's good enough for them.

06:09.520 --> 06:15.320
But for example, the DTP operation which is device tree blob overlay, on some devices

06:15.320 --> 06:20.200
you can just fast boot erase it and then it doesn't try to apply some overlay for the

06:20.200 --> 06:24.400
old kernel on top of the new kernel which doesn't work and doesn't make any sense.

06:24.400 --> 06:29.560
On some devices just crashes and burns and yeah, it is not fun.

06:29.560 --> 06:32.200
So mostly you can do this.

06:32.200 --> 06:37.360
And there's also on new devices with GKI, the generic kernel image from Google, there's

06:37.360 --> 06:43.160
also the vendor boot partition, actually have no idea what this one does and how you need

06:43.160 --> 06:47.040
to wipe it to be able to do something.

06:47.040 --> 06:52.400
The serial console is actually quite useful if you can have access to it in the bootloader

06:52.400 --> 06:54.280
if it doesn't boot.

06:54.280 --> 06:59.880
Like if you cannot even get Linux booting, normally on a serial console it will say what

06:59.880 --> 07:02.920
it's doing and why it's doing the things that you want to do.

07:02.920 --> 07:08.760
So yeah, on the Fairform 4, on the new SoC, I got the first boot actually after some hours

07:08.760 --> 07:12.440
of working on it which contains the early console.

07:12.440 --> 07:19.320
It's just basically already set up area where Linux driver can write to it and you get serial

07:19.320 --> 07:25.480
output and also display via simple frame buffer which is actually now way more easy than getting

07:25.480 --> 07:28.480
USB up or getting actually proper serial console up.

07:28.480 --> 07:34.720
So it's super nice, simple frame buffers where the bootloader already sets up the display,

07:34.720 --> 07:38.720
yeah, the display hardware correctly.

07:38.720 --> 07:44.080
So Linux actually just has to write to some memory area the bytes for the pixels and it

07:44.080 --> 07:46.520
will just magically appear on the screen.

07:46.520 --> 07:48.640
It is very nice, very useful.

07:48.640 --> 07:55.240
And yeah, like the first boot was like 180 lines of the DTSI for the SoC and 40 lines

07:55.240 --> 07:56.560
for the device.

07:56.560 --> 07:58.480
So yeah, total 220.

07:58.480 --> 08:03.640
And like no single driver change was necessary for getting a completely new SoC booting anything

08:03.640 --> 08:04.640
basically.

08:04.640 --> 08:11.760
Yeah, I was basically just following what Iskren wrote on his blog, mainlining.dev.

08:11.760 --> 08:12.840
Super nice.

08:12.840 --> 08:17.600
It really contains useful steps for the very, very first things that you need to do.

08:17.600 --> 08:23.880
Yeah, so if you want to go a bit further, you very quickly start to need the clock driver

08:23.880 --> 08:27.520
which is GCC, global clock controller driver.

08:27.520 --> 08:33.440
There you can basically just take whatever Qualcomm gives you for example, for the 419

08:33.440 --> 08:38.320
kernel, copy it over, modify a few small things, but then it works.

08:38.320 --> 08:43.680
You also, at least for the 419 kernel, also these power domains which is like, it's some

08:43.680 --> 08:47.120
concept in Linux.

08:47.120 --> 08:48.760
It's also called GDSCs.

08:48.760 --> 08:52.960
You need to, they were a bit differently implemented, not in a GCC driver, but you should put them

08:52.960 --> 08:55.440
in GCC driver for mainlining.

08:55.440 --> 08:58.760
Now say more clocks with the RPMH.

08:58.760 --> 09:04.240
There's various other bits you should add to the DTS because otherwise it just won't,

09:04.240 --> 09:09.440
like random things won't work, which are dependencies that are not really expressed in the device

09:09.440 --> 09:15.560
tree, but the drivers still need for example, access to the S-MAM for doing various things.

09:15.560 --> 09:19.400
These data definitions are basically all the same and downstream, so you can also mostly

09:19.400 --> 09:20.640
copy them over.

09:20.640 --> 09:24.960
Don't blindly copy them over because it will be a slightly different, but you can definitely

09:24.960 --> 09:28.000
get good inspiration of what you need to do.

09:28.000 --> 09:33.200
USB is of course kind of the next step because just staring at the tiny text on the screen

09:33.200 --> 09:37.120
is not very good debugging and users also don't have any input.

09:37.120 --> 09:40.720
You can do surprisingly much with simple frame buffer, but at some point you of course want

09:40.720 --> 09:41.720
USB.

09:41.720 --> 09:47.680
At some point also pin control driver, which is for the pin multiplexing.

09:47.680 --> 09:51.440
This is really only starts getting useful once you get to more advanced components,

09:51.440 --> 09:57.440
let's say for I2C and other things, and also regulators are important at some point.

09:57.440 --> 10:02.800
I think that's actually, I don't know if you already need this for USB or not, but these

10:02.800 --> 10:06.480
are kind of the basic components that you need and then you can start building actually

10:06.480 --> 10:11.520
enabling various components that you find like the flash driver, the vibration mode,

10:11.520 --> 10:17.360
and things that talk I2C and things that talk other protocols.

10:17.360 --> 10:20.160
Of course, lots of things that can go wrong.

10:20.160 --> 10:24.160
The IMMU is especially on new Qualcomm chips, it's kind of annoying.

10:24.160 --> 10:28.880
I mean it's less annoying than old ones, but it's still annoying because a lot of things,

10:28.880 --> 10:36.440
like some things that you do, I'm immune directly first, so what's a bit different

10:36.440 --> 10:41.400
between downstream current and also main line is the bootloader already initializes something

10:41.400 --> 10:46.360
in this memory segregation or like SMMU is also called.

10:46.360 --> 10:50.480
Initialize some things for the bootloader to use for example for the internal storage

10:50.480 --> 10:58.200
already initialized it, this normally gets on downstream kernel, it just continues using

10:58.200 --> 11:00.460
those and add some ones on top.

11:00.460 --> 11:06.360
On main line they actually get wiped completely and that need to be reset up by Linux, which

11:06.360 --> 11:12.600
causes some problems if the downstream kernel doesn't express like which IMMU to use, for

11:12.600 --> 11:19.480
example for UFS is a very bad example, it's a very good example where it is bad.

11:19.480 --> 11:27.640
You kind of need to find out there is a patch, you can actually dump the mappings and you

11:27.640 --> 11:29.720
can use this to figure out what it is.

11:29.720 --> 11:35.400
Also the devices really like to reboot when anything is not really right, if you access

11:35.400 --> 11:39.400
some register and some clock isn't on that it requires, it just reboots, it doesn't give

11:39.400 --> 11:41.560
you a kernel panic, it just reboots.

11:41.560 --> 11:46.680
You're writing to wrong register, it reboots, the IMMU is defined wrong, it just reboots.

11:46.680 --> 11:51.200
Everything for IMMU it actually sometimes gives you a message of why or at least that

11:51.200 --> 11:55.520
something isn't correct.

11:55.520 --> 12:00.200
For printing what I've actually used sometimes is just printing the current line where it

12:00.200 --> 12:05.080
isn't a driver, like sprinkling this everywhere, adding a sleep of like half a second and then

12:05.080 --> 12:10.160
seeing like oh this is the last line that I was seeing, so it's probably messing up

12:10.160 --> 12:11.160
there.

12:11.160 --> 12:16.240
Maybe also increasing the sleeps because sometimes the flushing doesn't happen, like

12:16.240 --> 12:20.160
printing it on the screen actually is a bit slow.

12:20.160 --> 12:26.360
Also I feel like once you have more USB up, you can actually also build various drivers

12:26.360 --> 12:33.280
as modules and this way actually it's not built in, where it's built in it loads like

12:33.280 --> 12:41.200
it's like kernel log second 0.5 which is quite early and if it then crashes immediately you

12:41.200 --> 12:42.840
don't really have any time to beat the debug.

12:42.840 --> 12:46.360
But if you build this module you can load it later and actually have something set up

12:46.360 --> 12:49.720
over already.

12:49.720 --> 12:54.120
What is important to do if you work on this?

12:54.120 --> 12:59.400
Actually if you have anything working, if you have something working progress just commit

12:59.400 --> 13:04.720
this into your repository already to have a reference point to go back to because sometimes

13:04.720 --> 13:12.280
one single line change will fix everything or break everything.

13:12.280 --> 13:16.160
The first commit doesn't have to be perfect obviously.

13:16.160 --> 13:20.600
But also don't let this skid branch that you have lying around once you have something

13:20.600 --> 13:24.560
working, don't let it sit around in your local repository on your GitHub fork or in your

13:24.560 --> 13:30.640
GitHub repository wherever and don't upstream it because then it will just drop there and

13:30.640 --> 13:33.760
nobody will know that it's there and they will probably, like this next person has to

13:33.760 --> 13:37.800
do exactly the same thing again even though you have already got it working.

13:37.800 --> 13:41.480
So like already start up streaming your patches early, like if you have simple frame buffer

13:41.480 --> 13:43.840
booting on the device upstream it.

13:43.840 --> 13:48.160
It would be very nice because there's also better overview of which SSEs have already

13:48.160 --> 13:52.840
been worked on and it's very nice.

13:52.840 --> 13:56.200
Of course when you upstream it you also have to do some extra things for example adding

13:56.200 --> 14:00.520
the new compatible strings that are used in the device tree added to the documentation

14:00.520 --> 14:06.320
and do some things there but it's normally, yeah, some extra work but it's really not

14:06.320 --> 14:07.320
too bad.

14:07.320 --> 14:11.840
And also you have patches just because of how Linux development works just takes some

14:11.840 --> 14:15.800
time to get upstream.

14:15.800 --> 14:20.000
So like two months later if you go to, if you re-best a new version your patches are

14:20.000 --> 14:24.400
already there so you can build on top and don't have like 100 patches lying in your

14:24.400 --> 14:25.400
own tree.

14:25.400 --> 14:27.760
Also like git send email is not difficult.

14:27.760 --> 14:33.520
If there's a one for guide git send email.io from the source developers it explains super

14:33.520 --> 14:39.040
nice once you have configured once just works.

14:39.040 --> 14:40.040
Thanks for listening.

14:40.040 --> 15:00.960
In case you have one minute for questions we can make a tool.

15:00.960 --> 15:05.560
When you get GPU working you should also actually get the display hardware working properly.

15:05.560 --> 15:09.840
So this was fortunately done for this.

15:09.840 --> 15:15.960
SSE was done by Conrad who knows a lot there like he got the display hardware completely

15:15.960 --> 15:19.120
up in the GPU also.

15:19.120 --> 15:21.920
This is used for actually because simple frame buffer you cannot turn off the screen you

15:21.920 --> 15:27.520
cannot basically do anything except just write pixels to memory, write data to or write bytes

15:27.520 --> 15:30.920
to memory area and that's it.

15:30.920 --> 15:34.920
Yeah so you actually need to get the display hardware also up but then you also can get

15:34.920 --> 15:36.080
the GPU up.

15:36.080 --> 15:41.320
And yeah this one works really well in mainline like I ran performance benchmark on and it's

15:41.320 --> 15:45.120
actually not too bad it's actually relatively close to the downstream version.

15:45.120 --> 15:46.120
I've contributed to the SDM 625.

15:46.120 --> 15:56.120
Like how to upstream and manage the complexity of panels, generated planets?

15:56.120 --> 16:02.000
I don't know panels.

16:02.000 --> 16:06.080
Yeah the panel drivers are still I think in general a question of like how they should

16:06.080 --> 16:12.400
be handled upstream because in theory I think the panel drivers are not really generic or

16:12.400 --> 16:18.760
mean they are not generic but in theory they are relevant to the display controller and

16:18.760 --> 16:25.240
not actually a panel itself which is two separate parts but like without having actually access

16:25.240 --> 16:28.880
to like all the documentation that I like internal to the company you won't find out

16:28.880 --> 16:35.240
which which driver this actually is and currently let them sit around in your tree.

16:35.240 --> 16:40.200
There I mean most of them you can also just generate from a downstream DTV and it works

16:40.200 --> 16:42.760
so good enough for now.

16:42.760 --> 16:47.960
At some point we probably figured out but the MSM 8 9 16 people also they they have

16:47.960 --> 16:50.960
like already like 20 or 30 panels there.

16:50.960 --> 17:05.000
I think trust is always running so like the bootloader which is like it is a sign binary

17:05.000 --> 17:10.560
and you cannot really replace it without having access to the to the sign in keys.

17:10.560 --> 17:15.160
It is running I think and it also I think this is the thing that kills your that kills

17:15.160 --> 17:17.760
the phone like when you're doing something wrong.

17:17.760 --> 17:21.800
I don't know you can get rid of it you can probably somehow communicate with it.

17:21.800 --> 17:26.360
I know that normally the fingerprint sensor is handled via trust zone as like you actually

17:26.360 --> 17:32.080
talk to trust zone for the fingerprints but I actually don't know how this works.

17:32.080 --> 17:48.200
Thank you very much.

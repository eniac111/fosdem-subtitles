WEBVTT

00:00.000 --> 00:09.440
I want to go very quickly because the rounds are very short.

00:09.440 --> 00:14.000
I'm sorry I'm rushing through because I don't want to keep you from the very

00:14.000 --> 00:15.000
juicy part.

00:15.000 --> 00:22.040
So we are presenting a complete, as complete can be, compliance toolchain for

00:22.040 --> 00:23.720
Yacht projects.

00:23.720 --> 00:29.440
So this in the context has been produced for a project we are part of called Eclipse

00:29.440 --> 00:31.720
Onero or Onero in short.

00:31.720 --> 00:33.880
It's an Eclipse foundation project.

00:33.880 --> 00:39.640
It's Yacht based and it provides a scenario platform project.

00:39.640 --> 00:43.360
It's very complex, the numbers are quite impressive, cannot run through but they

00:43.360 --> 00:47.960
are quite learned and everything is based on CI.

00:47.960 --> 00:50.120
So everything is CI.

00:50.120 --> 00:55.300
We also needed to have a completely CI also compliance process.

00:55.300 --> 01:02.760
So we needed to build with the existing parts and building parts that did not exist by

01:02.760 --> 01:05.680
providing a dedicated toolchain.

01:05.680 --> 01:11.680
This toolchain for compliance has been made not just by us but by the noise path park.

01:11.680 --> 01:18.760
People are in the room as well and they have done much of the heavy lifting of programming

01:18.760 --> 01:22.440
and Alberto of course gets the credit for the software.

01:22.440 --> 01:25.680
It's also an Eclipse foundation project and it's alright.

01:25.680 --> 01:29.760
There is a repo and you can look at everything.

01:29.760 --> 01:37.560
It's based on already existing, the known subjects of compliance, for soldiers to

01:37.560 --> 01:45.520
encode but we have to create a dedicated new custom set of tools also being distributed

01:45.520 --> 01:47.520
as open source.

01:47.520 --> 01:53.840
Of course we use SPDX all across the toolchain for many things and this is important.

01:53.840 --> 01:56.320
This is not just for this project.

01:56.320 --> 02:05.000
This is meant to be a toolchain for all Yacht based projects, not just for this.

02:05.000 --> 02:11.400
Through this combination of tools we have been able to complete a very lengthy process

02:11.400 --> 02:18.360
of compliance, reaching 100% of coverage of all the components.

02:18.360 --> 02:24.080
I don't want to skip thanks to the Debian providing a lot of the information we have

02:24.080 --> 02:25.840
really used.

02:25.840 --> 02:33.600
Here you can see very quickly the dashboard so you can track the evolution and the status

02:33.600 --> 02:35.680
of compliance.

02:35.680 --> 02:41.320
You can also go and have many more details of the single packages.

02:41.320 --> 02:48.680
That's just for knowing what components and what license is there but we cannot stop there.

02:48.680 --> 02:56.960
We want to go farther and we have what we call the second phase of the compliance toolchain

02:56.960 --> 03:01.440
and we decided to go for a graph database for many technical reasons because there are

03:01.440 --> 03:07.080
a lot of interaction and we ought to traverse the database very easily.

03:07.080 --> 03:13.200
We need to do the missing part which is software composition analysis, dependency analysis

03:13.200 --> 03:16.120
and incompatibility checks.

03:16.120 --> 03:18.720
Everything must be done automatically as much as possible.

03:18.720 --> 03:24.480
This must be entirely into the CI pipeline which it does.

03:24.480 --> 03:28.160
In order to do this we need several things.

03:28.160 --> 03:29.680
This is a really important map.

03:29.680 --> 03:35.320
All licenses data from the source to the binary and at file level mapping.

03:35.320 --> 03:40.440
While file level mapping we mean every single file including patches.

03:40.440 --> 03:45.440
Everything that goes through needs to be checked, checked and tracked through in order to make

03:45.440 --> 03:50.240
sure that everything that goes inside is tracked.

03:50.240 --> 03:52.520
This information comes from many sources.

03:52.520 --> 04:01.120
We had a node team that has done a lot of work and finally we need to find a way to

04:01.120 --> 04:08.640
automatically as much as possible see if the inbound and outbound licenses are compatible

04:08.640 --> 04:11.080
with each other through automated tools.

04:11.080 --> 04:18.400
This is in a very short time the general description here in the example of the relationship between

04:18.400 --> 04:22.480
components in the database.

04:22.480 --> 04:28.560
There is the next bit which is perhaps more interesting and I give the floor to Alberto.

04:28.560 --> 04:36.800
Thank you Carlo.

04:36.800 --> 04:41.520
The question is why do we need this?

04:41.520 --> 04:48.360
Yocto workflow for those of you who are already familiar with that is quite simplified here.

04:48.360 --> 04:51.080
We have recipes.

04:51.080 --> 04:57.120
Recipes can map to a single upstream source component but possibly also to different upstream

04:57.120 --> 05:00.800
components maybe the main application then some plugins.

05:00.800 --> 05:07.520
You can have here many different upstream sources combined together fetched and together

05:07.520 --> 05:13.040
combined into a single work here in the AMP

05:13.040 --> 05:15.960
stage task of the build process.

05:15.960 --> 05:23.520
Then the other task, configure, patch, whatever basically build you got binaries and binaries

05:23.520 --> 05:27.560
are combined together to form the final image.

05:27.560 --> 05:36.040
The problem is that when it comes to absent sources we have upstream components that have

05:36.040 --> 05:39.920
multiple licenses inside it.

05:39.920 --> 05:46.720
Maybe we have different components with different sets of licenses but the thing is we have

05:46.720 --> 05:52.720
only a small subset of the binaries that we could generate for all this stuff.

05:52.720 --> 06:00.400
The binaries you don't know what the actual license is especially when here you have kind

06:00.400 --> 06:02.120
of a mess.

06:02.120 --> 06:08.240
The thing is that you risk that some dirty stuff ends up in your image.

06:08.240 --> 06:18.440
I don't know if you have a package with a blacklisted license or a compatible combination

06:18.440 --> 06:24.840
of licenses you may have in your final image something that is not compliant and this is

06:24.840 --> 06:29.280
something we need to avoid.

06:29.280 --> 06:32.760
The thing that we have to do is to follow a process.

06:32.760 --> 06:39.620
To find out the relationship with third party upstream code, the inbound code, then we need

06:39.620 --> 06:47.600
to find under which license the inbound upstream software is therefore the inbound license.

06:47.600 --> 06:52.360
If there is a possible combination of that because not all combinations are allowed and

06:52.360 --> 07:00.560
depending on the context they may be allowed or not like other talks pointed out this morning.

07:00.560 --> 07:08.200
We need to match this combination with the abounded license compatible with the inbound

07:08.200 --> 07:09.200
licenses.

07:09.200 --> 07:11.100
This is for each artifact.

07:11.100 --> 07:16.480
We cannot do that especially in the embedded field at package level because the package

07:16.480 --> 07:22.680
may contain a lot of stuff and we need to know about the files not the generic about

07:22.680 --> 07:23.680
the package.

07:23.680 --> 07:24.680
Here we have an example.

07:24.680 --> 07:27.440
I hope it's readable.

07:27.440 --> 07:34.200
This is GPGME component that GPG made easy.

07:34.200 --> 07:37.160
It's very small component.

07:37.160 --> 07:42.180
In our project we found it out that we generate only three binaries out of it.

07:42.180 --> 07:51.200
If you look at the license and the recipe you find GPL I guess three or LGPL2 or something

07:51.200 --> 07:52.200
like that.

07:52.200 --> 07:57.560
This is nothing, sorry not or but and.

07:57.560 --> 08:05.600
The thing is that this binary is that LGPL is that something else we don't know from

08:05.600 --> 08:10.700
what we have from source license information.

08:10.700 --> 08:15.960
We collect in this graph database multiple sources of information.

08:15.960 --> 08:22.600
On yellow dots are the information coming from our OD team working on phasology.

08:22.600 --> 08:30.040
File levels, source license information.

08:30.040 --> 08:39.360
The purple dots are comes from the Octo metadata and also the information about which files

08:39.360 --> 08:42.200
have been generated by to generate.

08:42.200 --> 08:47.880
They have been used to generate this binary comes from the Octo from the CreateSPDX class

08:47.880 --> 08:50.240
presented before.

08:50.240 --> 08:59.080
Basically we now have MIT, MIT, GPL2, GPL3, sorry GPL2 or later or LGPL3 or later and

08:59.080 --> 09:01.840
then we have GPL3 or later.

09:01.840 --> 09:03.560
What's the license of this file?

09:03.560 --> 09:13.360
Usually the OD team comes to us and we discuss to find out which is the license of the binary

09:13.360 --> 09:15.520
file.

09:15.520 --> 09:17.180
But this is not scalable.

09:17.180 --> 09:18.340
This is error prone.

09:18.340 --> 09:23.040
We cannot do that for every single binary file, for every release, for every snapshot

09:23.040 --> 09:25.640
of the project.

09:25.640 --> 09:27.280
This is another example.

09:27.280 --> 09:30.520
This is another binary you can generate from the same component.

09:30.520 --> 09:34.960
Here we have MIT, MIT, MIT, LGPL2, 0.1 or later.

09:34.960 --> 09:36.600
This is another story.

09:36.600 --> 09:40.000
Maybe it's easier here.

09:40.000 --> 09:45.040
We can have also more complicated, I won't go into the details here.

09:45.040 --> 09:48.880
How can we handle that in an automated way?

09:48.880 --> 09:54.120
The idea is to have a battle between license cards.

09:54.120 --> 10:00.440
You put together every time two cards and you need a set of rules to decide who wins,

10:00.440 --> 10:07.680
which card wins and then you iterate and you look over all the possible combinations of

10:07.680 --> 10:13.160
license until only one will survive, hopefully.

10:13.160 --> 10:20.760
To do that, we are trying to define the language to define those rules.

10:20.760 --> 10:26.160
We need to define the two license cards, the two license cards that are fighting against

10:26.160 --> 10:27.160
each other.

10:27.160 --> 10:35.880
We need to find the battlefield context, static linking, dynamic linking, whatever.

10:35.880 --> 10:43.520
The authority who said that, because the answer by the lawyers always depends.

10:43.520 --> 10:46.080
We need to say who said that.

10:46.080 --> 10:48.360
In this case, FSF.

10:48.360 --> 10:53.800
We trust it, especially when it comes to GPL, compatibility matrix.

10:53.800 --> 10:58.280
Here we are the result of the battle.

10:58.280 --> 11:03.800
We have a winner or we have invalid.

11:03.800 --> 11:11.040
This kind of combination is not possible because GPL2 is not inbound compatible with Apache

11:11.040 --> 11:22.280
2.0, while GPL2 or later may be inbound compatible with Apache 2.0 if you make it become GPL3

11:22.280 --> 11:28.960
because GPL3 is allowed to be inbound compatible with Apache 2.0.

11:28.960 --> 11:31.360
This is kind of an example.

11:31.360 --> 11:34.160
I don't have time to go into details.

11:34.160 --> 11:37.880
The rules in action are like here.

11:37.880 --> 11:45.600
When you have a disjunctive license expression, you need to calculate the Cartesian product.

11:45.600 --> 11:50.840
You need to have, in this case, MIT, GPL2 and GPL3 fighting against each other.

11:50.840 --> 11:57.520
Again, MIT, LGPL3 and GPL3 fight against each other.

11:57.520 --> 12:04.080
You find a list of the decision and we know that GPL3 or later is the license that prevails

12:04.080 --> 12:07.320
here at the end.

12:07.320 --> 12:08.320
Sorry.

12:08.320 --> 12:18.400
The thing is that how I said, already said, we consume data from different sources, from

12:18.400 --> 12:22.200
physiology, from Yocto.

12:22.200 --> 12:23.920
For now, we have proof of concept.

12:23.920 --> 12:30.920
The aim is to upstream everything into the Create Aspidics class in the Yocto project.

12:30.920 --> 12:35.880
I don't think we have time for questions, but here and in the slide, you find all the

12:35.880 --> 12:38.560
information to conduct this.

12:38.560 --> 12:52.760
Thank you.

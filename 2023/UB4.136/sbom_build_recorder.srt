1
0:00:00.000 --> 0:00:12.640
So, this is a presentation we're starting now, actually a new set of presentations in

2
0:00:12.640 --> 0:00:18.760
the dev room, not about complete less bombs, but about information that gets inside those

3
0:00:18.760 --> 0:00:19.760
bombs.

4
0:00:19.760 --> 0:00:21.640
And you'll be hearing more about it.

5
0:00:21.640 --> 0:00:28.760
So this is a presentation about a system to capture detailed information about building,

6
0:00:28.760 --> 0:00:37.000
and the work, I mean, almost all of the work happened by Fotis, and so I was just, yeah,

7
0:00:37.000 --> 0:00:41.440
you know, explaining what has to be done, design the problem.

8
0:00:41.440 --> 0:00:48.560
So we're going through a very typical agenda, you know, what we're trying to solve, how

9
0:00:48.560 --> 0:00:55.600
we solve it, how we solve it, and what was not solved and what we're going to do.

10
0:00:55.600 --> 0:01:03.120
Fotis happened as a GSOC project, Google summary of projects last year, of the Geforce organization,

11
0:01:03.120 --> 0:01:09.120
which is an umbrella organization for open source in Greece, and we have representatives

12
0:01:09.120 --> 0:01:10.120
there.

13
0:01:10.120 --> 0:01:14.320
Right, I'm not going to be reading the whole slide, you can read it and you can see it

14
0:01:14.320 --> 0:01:15.320
there.

15
0:01:15.320 --> 0:01:20.680
But there are umbrella organizations that they're looking over open source development

16
0:01:20.680 --> 0:01:28.880
in Greece, and they are, have been participated to GSOC for many years now.

17
0:01:28.880 --> 0:01:34.400
And one of the projects was wonderful that Fotis did.

18
0:01:34.400 --> 0:01:37.420
So let's start with the basics.

19
0:01:37.420 --> 0:01:39.680
What are we trying to solve?

20
0:01:39.680 --> 0:01:40.680
Right.

21
0:01:40.680 --> 0:01:44.240
There are different names for what we're trying to solve.

22
0:01:44.240 --> 0:01:49.480
Some people call it origin, some call it providence or pedigree or things.

23
0:01:49.480 --> 0:01:54.560
Maybe if I have a binary file, and I'm talking when I'm saying binary, I mean an executable

24
0:01:54.560 --> 0:02:03.560
or a library, not an image, right, or a PDF, but an object file, right, how was this created?

25
0:02:03.560 --> 0:02:04.560
Right.

26
0:02:04.560 --> 0:02:09.480
What are the sources that were used in order to create this binary?

27
0:02:09.480 --> 0:02:11.040
Right.

28
0:02:11.040 --> 0:02:14.720
What was the process that was used in order to create that?

29
0:02:14.720 --> 0:02:15.720
Yeah.

30
0:02:15.720 --> 0:02:19.520
So essentially these two things, right.

31
0:02:19.520 --> 0:02:25.800
The goal is to have extra information and meta information about all this stuff.

32
0:02:25.800 --> 0:02:35.080
And so in the end you know exactly what information is inside the binary, right, or was used to

33
0:02:35.080 --> 0:02:36.080
create it.

34
0:02:36.080 --> 0:02:37.080
Right.

35
0:02:37.080 --> 0:02:42.080
So think of it very simplistically.

36
0:02:42.080 --> 0:02:47.720
You know, if I have a command that builds a binary like a compiler that gets a source

37
0:02:47.720 --> 0:02:53.600
file and generates an executable, I want to record, okay, there was this process called

38
0:02:53.600 --> 0:03:01.920
cc and it read the wonderful file in c and it produces an executable.

39
0:03:01.920 --> 0:03:02.920
Right.

40
0:03:02.920 --> 0:03:05.800
That's what we want to solve.

41
0:03:05.800 --> 0:03:12.040
And then it gets tricky because as you can imagine, you know, okay, we're not obviously

42
0:03:12.040 --> 0:03:15.960
looking at all the things that are specified in the command line.

43
0:03:15.960 --> 0:03:16.960
Right.

44
0:03:16.960 --> 0:03:23.400
So when you do cc the hello world dot c, maybe it includes a file, right.

45
0:03:23.400 --> 0:03:26.120
You see language has include.

46
0:03:26.120 --> 0:03:28.880
So and this might be significant.

47
0:03:28.880 --> 0:03:30.120
It will definitely be significant.

48
0:03:30.120 --> 0:03:31.120
Right.

49
0:03:31.120 --> 0:03:36.200
So it might include slash your slash include slash stdio dot h.

50
0:03:36.200 --> 0:03:42.280
So I need to record that this file was also used in order to produce this binary.

51
0:03:42.280 --> 0:03:43.280
Right.

52
0:03:43.280 --> 0:03:48.360
And in the same way cc is just a program.

53
0:03:48.360 --> 0:03:52.080
I cannot just record the name because it does not mean anything.

54
0:03:52.080 --> 0:03:58.480
This is definitely a file and maybe it uses other linked libraries in order to do that.

55
0:03:58.480 --> 0:04:06.060
And when you produce the final executable, it definitely, it might include system libraries.

56
0:04:06.060 --> 0:04:07.680
And you want to record all this.

57
0:04:07.680 --> 0:04:08.680
Right.

58
0:04:08.680 --> 0:04:12.460
So we're not talking about, you know, passing the command line and seeing the three files

59
0:04:12.460 --> 0:04:14.000
mentioned there.

60
0:04:14.000 --> 0:04:17.800
We want to record everything happening in there.

61
0:04:17.800 --> 0:04:20.680
And obviously the command may not be explicit.

62
0:04:20.680 --> 0:04:22.200
It might just be make.

63
0:04:22.200 --> 0:04:23.200
Right.

64
0:04:23.200 --> 0:04:28.720
And you want to record everything happening with this build command.

65
0:04:28.720 --> 0:04:29.720
Right.

66
0:04:29.720 --> 0:04:31.520
Is the problem clear?

67
0:04:31.520 --> 0:04:33.280
Has anyone else?

68
0:04:33.280 --> 0:04:34.280
How's this problem?

69
0:04:34.280 --> 0:04:43.640
So the project, the whole project was okay.

70
0:04:43.640 --> 0:04:45.200
Let's build something like that.

71
0:04:45.200 --> 0:04:46.680
And how do you create a project?

72
0:04:46.680 --> 0:04:48.120
You say what I want to achieve.

73
0:04:48.120 --> 0:04:50.080
And this is a factual specification.

74
0:04:50.080 --> 0:04:51.080
Right.

75
0:04:51.080 --> 0:04:52.280
So we want a minimal interface.

76
0:04:52.280 --> 0:04:58.160
I don't want to tell developers how you have to change the compiler in order to do that.

77
0:04:58.160 --> 0:05:01.360
And I mean, the first idea would be to change the compiler.

78
0:05:01.360 --> 0:05:04.000
But yeah.

79
0:05:04.000 --> 0:05:05.880
Let's try to make it minimal.

80
0:05:05.880 --> 0:05:09.560
So ideally no changes to the command at all.

81
0:05:09.560 --> 0:05:10.560
Right.

82
0:05:10.560 --> 0:05:15.040
And I want to record the files being created or written.

83
0:05:15.040 --> 0:05:17.000
The files being read.

84
0:05:17.000 --> 0:05:19.620
All the processes being run.

85
0:05:19.620 --> 0:05:23.480
So for each of the files, I want to know the name.

86
0:05:23.480 --> 0:05:27.400
I want to know the full path because there might be difference.

87
0:05:27.400 --> 0:05:33.000
And then because I care about the, actually the content, I want the hash because the same

88
0:05:33.000 --> 0:05:35.880
file can be in different places with the same hash.

89
0:05:35.880 --> 0:05:38.080
So I have to know what it is.

90
0:05:38.080 --> 0:05:41.640
And you know, extra nice information, the size of the file, the model of the file, and

91
0:05:41.640 --> 0:05:42.640
stuff like that.

92
0:05:42.640 --> 0:05:43.640
I don't care.

93
0:05:43.640 --> 0:05:49.760
For every process that runs, I want to know, okay, what was the process?

94
0:05:49.760 --> 0:05:50.760
What were the arguments?

95
0:05:50.760 --> 0:05:52.120
What was the environment?

96
0:05:52.120 --> 0:05:58.080
Because as you probably know, every process reads maybe different according to the environment

97
0:05:58.080 --> 0:05:59.080
that it finds.

98
0:05:59.080 --> 0:06:00.080
Yeah.

99
0:06:00.080 --> 0:06:01.080
Okay.

100
0:06:01.080 --> 0:06:05.800
So the read times would be useful and stuff like that.

101
0:06:05.800 --> 0:06:06.800
Right.

102
0:06:06.800 --> 0:06:09.760
So this is the information that this is the functional specification.

103
0:06:09.760 --> 0:06:13.360
This is our wonderful problem.

104
0:06:13.360 --> 0:06:14.840
Right.

105
0:06:14.840 --> 0:06:16.720
And then for this, sat down and worked.

106
0:06:16.720 --> 0:06:18.400
No, no, wait.

107
0:06:18.400 --> 0:06:21.800
You'll take the mic.

108
0:06:21.800 --> 0:06:33.080
Well, he's not an engineer yet.

109
0:06:33.080 --> 0:06:37.120
He will be.

110
0:06:37.120 --> 0:06:40.680
Can you hear me now?

111
0:06:40.680 --> 0:06:46.360
Well, to tackle this problem, we created the command line tool named build recorder.

112
0:06:46.360 --> 0:06:50.640
You can see right here, build underscore recorder, which records information about the build

113
0:06:50.640 --> 0:06:52.880
on Linux.

114
0:06:52.880 --> 0:06:54.800
You said this is rather simple.

115
0:06:54.800 --> 0:07:02.800
All you have to do is prefix your build command, whatever that is, make GCC, Java compiler

116
0:07:02.800 --> 0:07:04.880
with the name of the executable.

117
0:07:04.880 --> 0:07:08.200
Build recorder runs transparently in the background while your build is running.

118
0:07:08.200 --> 0:07:11.920
You don't need to change anything in terms of your configuration, your source files,

119
0:07:11.920 --> 0:07:13.960
or even your build system.

120
0:07:13.960 --> 0:07:17.840
You can literally pick any project you like at this point in time, run with build recorder

121
0:07:17.840 --> 0:07:19.320
and it's to run.

122
0:07:19.320 --> 0:07:22.040
If it doesn't, please file a bug report.

123
0:07:22.040 --> 0:07:26.200
Now, as you can see, build recorder.

124
0:07:26.200 --> 0:07:31.760
Do you believe an asterisk exception may apply?

125
0:07:31.760 --> 0:07:32.760
Yes.

126
0:07:32.760 --> 0:07:38.200
Build recorder stores all of that information in an output file by default name the build

127
0:07:38.200 --> 0:07:39.840
does recorder dot out.

128
0:07:39.840 --> 0:07:43.400
But as you can see, you can use the does so option to actually supply an alternative file

129
0:07:43.400 --> 0:07:45.400
name.

130
0:07:45.400 --> 0:07:48.080
But what does it actually record?

131
0:07:48.080 --> 0:07:52.720
Well, pretty much everything we talked about in the functional specification.

132
0:07:52.720 --> 0:07:58.240
For its file, we have a list of attributes, its name, its size, its section of its contents,

133
0:07:58.240 --> 0:08:00.080
as well as its absolute path.

134
0:08:00.080 --> 0:08:05.280
Similarly, for its process, we store its command line with all its arguments, a start and end

135
0:08:05.280 --> 0:08:08.280
timestamp, as well as the environment.

136
0:08:08.280 --> 0:08:15.120
We also store a list of relationships, namely a process creates a process that is by forking

137
0:08:15.120 --> 0:08:20.680
or cloning or any of the revients, as well as a process opens a file for reading, a process

138
0:08:20.680 --> 0:08:26.160
opens a file for writing, or some processes are associated with executables.

139
0:08:26.160 --> 0:08:32.240
For example, if we were to run make, the system would probably run the file at slash user

140
0:08:32.240 --> 0:08:34.320
slash bin slash make.

141
0:08:34.320 --> 0:08:37.000
We want to record that as well.

142
0:08:37.000 --> 0:08:42.880
Now, all of this information is stored in the output file in RDF turtle format.

143
0:08:42.880 --> 0:08:45.440
That is being processed and filed.

144
0:08:45.440 --> 0:08:49.000
And all of the attributes, as well as the relationships, been the predicates.

145
0:08:49.000 --> 0:08:53.560
This is an example.

146
0:08:53.560 --> 0:08:59.040
For example, we have a process ID one, which is the initial compilation process.

147
0:08:59.040 --> 0:09:04.640
Imagine this is C, that's all for C. It starts at the current timestamp.

148
0:09:04.640 --> 0:09:09.280
We have another process, which is a preprocessor, the C preprocessor.

149
0:09:09.280 --> 0:09:11.160
It starts on another timestamp.

150
0:09:11.160 --> 0:09:17.520
We specify that the initial compiler actually created the preprocessor unit.

151
0:09:17.520 --> 0:09:27.600
And then we have the fact that we have a file, F1, foo dot C, which should be specified that

152
0:09:27.600 --> 0:09:31.960
PID2 reads F1.

153
0:09:31.960 --> 0:09:37.200
The preprocessor opens the file foo dot C, which has size 100 and the random hash of

154
0:09:37.200 --> 0:09:39.280
zeros.

155
0:09:39.280 --> 0:09:45.760
We have another F2, which is a temporary that the compiler might use, which as we can see,

156
0:09:45.760 --> 0:09:49.760
the process number two actually writes on this.

157
0:09:49.760 --> 0:09:56.720
We have another process, the classical CC, which merges those files together, the object

158
0:09:56.720 --> 0:09:57.720
file.

159
0:09:57.720 --> 0:10:02.160
Yeah, that's a general idea, I guess.

160
0:10:02.160 --> 0:10:03.920
Well, how is it implemented?

161
0:10:03.920 --> 0:10:07.360
How does it support all of those languages?

162
0:10:07.360 --> 0:10:12.640
The basic idea is that we basically want to record all of the files and processes that

163
0:10:12.640 --> 0:10:14.720
a process uses.

164
0:10:14.720 --> 0:10:19.720
And now if we think about it, all processing files are actually handled using system calls.

165
0:10:19.720 --> 0:10:23.880
So if we were to look at the system calls the process makes, we could see all of the

166
0:10:23.880 --> 0:10:26.200
files and processes that it uses.

167
0:10:26.200 --> 0:10:31.160
For example, if we look at the open family of system calls, open create and its variants,

168
0:10:31.160 --> 0:10:35.120
we can easily extract the name as well as the access mode.

169
0:10:35.120 --> 0:10:41.120
On the same note, for process all we have to do is trace, fork, clone and its variants

170
0:10:41.120 --> 0:10:49.200
as well as the execution system calls to actually see the process ID and the executable files.

171
0:10:49.200 --> 0:10:53.640
Now from the information that we extracted from these two, we can actually get even more

172
0:10:53.640 --> 0:10:58.880
information like the command line, the environment, a link to a file, which from there we can

173
0:10:58.880 --> 0:11:01.800
get the size that has in the absolute path.

174
0:11:01.800 --> 0:11:11.200
All of this happens on Linux, so we basically just need a way to trace system calls.

175
0:11:11.200 --> 0:11:13.320
Under Linux this is a fairly straightforward problem.

176
0:11:13.320 --> 0:11:17.520
We use P-trace, which directly copy and paste from the command line.

177
0:11:17.520 --> 0:11:24.440
It is primarily used to implement breakpoint debugging and system call tracing.

178
0:11:24.440 --> 0:11:25.780
Now that's it.

179
0:11:25.780 --> 0:11:30.880
It's a very simple program.

180
0:11:30.880 --> 0:11:36.400
For the duration of our project.

181
0:11:36.400 --> 0:11:47.440
So Fotis ran through the slides that did implement it, so we have lots of time now.

182
0:11:47.440 --> 0:11:50.480
It's not perfect, it has issues.

183
0:11:50.480 --> 0:11:56.160
Let's start discussing, you've got the major idea of how it works.

184
0:11:56.160 --> 0:11:57.360
What are the issues?

185
0:11:57.360 --> 0:12:08.440
The main two big buckets of issues are the real complexity and performance.

186
0:12:08.440 --> 0:12:11.800
So real complexity.

187
0:12:11.800 --> 0:12:17.600
Remember that we said it's a compiler that just reads a file and creates an executable.

188
0:12:17.600 --> 0:12:21.600
That was this wonderful diagram first.

189
0:12:21.600 --> 0:12:23.720
It's real life, it's not that simple.

190
0:12:23.720 --> 0:12:28.920
So on the right hand side you see a more typical idea, again, compiler.

191
0:12:28.920 --> 0:12:33.760
So when you have a compiler it actually calls three different processes.

192
0:12:33.760 --> 0:12:41.040
You call the first one, the first pass that reads the C file and creates an assembly file.

193
0:12:41.040 --> 0:12:46.000
And then you call the assembler that reads the assembly and creates an object file.

194
0:12:46.000 --> 0:12:52.880
And then you have the linker loader that reads the object file and creates an executable.

195
0:12:52.880 --> 0:12:59.400
So this is a very abstracted and ideal world situation.

196
0:12:59.400 --> 0:13:01.280
Real world is nothing like that.

197
0:13:01.280 --> 0:13:09.400
Real world may be like that if you have done your compiler courses and you have seen the

198
0:13:09.400 --> 0:13:11.840
different passes of compiler and stuff like that.

199
0:13:11.840 --> 0:13:19.240
And then you go to the real world where the hello world, which is just print hello world.c

200
0:13:19.240 --> 0:13:22.800
in current Linux, is this one.

201
0:13:22.800 --> 0:13:26.200
So I'm not going to be explaining every file in that one.

202
0:13:26.200 --> 0:13:34.600
But this is just the three lines of main hello world, print hello world.

203
0:13:34.600 --> 0:13:38.360
And if you compile it with GCC, it's better.

204
0:13:38.360 --> 0:13:44.680
So you see there are, what can I say, lots of include files being included.

205
0:13:44.680 --> 0:13:48.680
This is the first step of compiler, the compiler first step.

206
0:13:48.680 --> 0:13:55.840
So you think that it will only read hello world.c, but you have a hash include in order

207
0:13:55.840 --> 0:13:59.280
to include the printf definition.

208
0:13:59.280 --> 0:14:06.040
And this include, unfortunately, includes std def and libc header start.h and lots of

209
0:14:06.040 --> 0:14:08.640
other different files.

210
0:14:08.640 --> 0:14:14.680
And all these are files that have been read by the first process.

211
0:14:14.680 --> 0:14:20.520
And then it creates something else, which I'm not sure where it is somewhere.

212
0:14:20.520 --> 0:14:22.200
So it creates the temporary files.

213
0:14:22.200 --> 0:14:24.920
It creates the assembly there, if you can see.

214
0:14:24.920 --> 0:14:28.400
And then it creates the object files.

215
0:14:28.400 --> 0:14:36.160
And in order to create the final executable, lots of libraries have to be included.

216
0:14:36.160 --> 0:14:41.700
And this is, the library's been included in the executable.

217
0:14:41.700 --> 0:14:47.640
And then we have the other set of things that in order to run cc1, which is an executable,

218
0:14:47.640 --> 0:14:53.400
so a file in the file system, right, you have to load dynamically a number of other libraries

219
0:14:53.400 --> 0:14:56.400
that this executable depends on.

220
0:14:56.400 --> 0:15:02.280
So you have to record all these as well, because again, you have to have an accurate record

221
0:15:02.280 --> 0:15:05.080
of everything being used, right.

222
0:15:05.080 --> 0:15:14.020
So yeah, even the hello world example is complex, right.

223
0:15:14.020 --> 0:15:22.080
And you create and record lots of files and processes for that one, which means, oh, and

224
0:15:22.080 --> 0:15:26.200
a lot of them are going to be reused again and again and again, right.

225
0:15:26.200 --> 0:15:31.920
So when you had, for example, to compile two different files, right, they will both include,

226
0:15:31.920 --> 0:15:34.840
for example, std id.h, right.

227
0:15:34.840 --> 0:15:41.760
And ideally, you don't want to redo, you don't want to have another record, another box here

228
0:15:41.760 --> 0:15:44.600
for the second instance of the same file.

229
0:15:44.600 --> 0:15:48.680
On the other hand, it might not be the second instance of the same file, because something

230
0:15:48.680 --> 0:15:53.480
might have changed, right, while you're running, somebody else is calling a new compiler and

231
0:15:53.480 --> 0:15:56.080
it messes up all your binaries, right.

232
0:15:56.080 --> 0:16:00.840
And it's different binaries in the first run and the second run and all this stuff.

233
0:16:00.840 --> 0:16:05.280
So this brings us to having to do it efficiently.

234
0:16:05.280 --> 0:16:08.360
So you're doing performance.

235
0:16:08.360 --> 0:16:15.320
Well, performance isn't great at the current moment.

236
0:16:15.320 --> 0:16:22.040
I mean, we have to stop and restart the process multiple times using pit race.

237
0:16:22.040 --> 0:16:30.360
Like you stop the process, you read an entire file from disk, you has it.

238
0:16:30.360 --> 0:16:32.320
And then you restart the process.

239
0:16:32.320 --> 0:16:35.920
This relatively expensive, as you can imagine.

240
0:16:35.920 --> 0:16:42.320
The current profiling shows, like, when I built one on my system, normally it took nine

241
0:16:42.320 --> 0:16:43.320
minutes.

242
0:16:43.320 --> 0:16:45.960
With build recorder, it took 36 minutes.

243
0:16:45.960 --> 0:16:50.680
So yeah, it depends on your hardware, your hard disk, pretty much.

244
0:16:50.680 --> 0:16:56.000
But the good news are that there's a lot of room for improvements, because first of all,

245
0:16:56.000 --> 0:16:57.200
we haven't optimized anything.

246
0:16:57.200 --> 0:16:58.760
We're using plain arrays.

247
0:16:58.760 --> 0:17:01.640
We will be switching them with lookup tables.

248
0:17:01.640 --> 0:17:05.440
So we expect massive performance gain from this.

249
0:17:05.440 --> 0:17:10.120
In fact, when I tried the Hasmap implementation, we dropped this to 22 minutes.

250
0:17:10.120 --> 0:17:12.320
So that's optimistic.

251
0:17:12.320 --> 0:17:18.640
And another thing to mention is that pit race actually makes a multi-threaded process run

252
0:17:18.640 --> 0:17:21.720
as a single thread, which is an issue.

253
0:17:21.720 --> 0:17:28.020
So if you run, for example, make that's J8, you won't actually get the performance benefits

254
0:17:28.020 --> 0:17:31.660
of multiple threads.

255
0:17:31.660 --> 0:17:34.480
We have plans to change that as well.

256
0:17:34.480 --> 0:17:35.680
Lots of changes need to be made.

257
0:17:35.680 --> 0:17:40.880
In fact, we proposed it as another project for GSoC for this summer.

258
0:17:40.880 --> 0:17:43.400
And yeah, that's it pretty much.

259
0:17:43.400 --> 0:17:44.600
We hope to see an improvement.

260
0:17:44.600 --> 0:17:50.040
We can't really tell how what at the end the overhead shall be, like how much we can improve

261
0:17:50.040 --> 0:17:53.200
build recorder, but we will get there.

262
0:17:53.200 --> 0:17:59.280
Now, regarding future work, pretty much we improve performance.

263
0:17:59.280 --> 0:18:02.800
We plan to handle more programming systems.

264
0:18:02.800 --> 0:18:05.740
I mean, you can use it with any programming language you want.

265
0:18:05.740 --> 0:18:12.320
But if I was to, for example, compile a project in Java using a build system like Maven, Maven

266
0:18:12.320 --> 0:18:13.320
has web dependencies.

267
0:18:13.320 --> 0:18:16.000
It downloads packages from repositories.

268
0:18:16.000 --> 0:18:20.760
So ideally, we would like to also record those repositories, those URLs.

269
0:18:20.760 --> 0:18:26.040
This is another proposed project for the next GSoC.

270
0:18:26.040 --> 0:18:33.080
And next we have porting it to non-Linux systems like other Unixes, NetBSD, FreeBSD, the list

271
0:18:33.080 --> 0:18:34.080
goes on.

272
0:18:34.080 --> 0:18:38.680
The one thing that wasn't mentioned is that build recorder at the current time only works

273
0:18:38.680 --> 0:18:43.400
with Linux kernels of version 5.3 plus.

274
0:18:43.400 --> 0:18:51.960
Reason being that we're using some system calls that make it run on every architecture.

275
0:18:51.960 --> 0:18:56.320
So you can build it on a Raspberry Pi or any architecture of your like, any architecture

276
0:18:56.320 --> 0:18:58.640
that Linux supports.

277
0:18:58.640 --> 0:19:04.920
In expense of not having support for prior versions.

278
0:19:04.920 --> 0:19:05.920
That was us.

279
0:19:05.920 --> 0:19:06.920
Thank you.

280
0:19:06.920 --> 0:19:07.920
This is the URL.

281
0:19:07.920 --> 0:19:08.920
Yeah, the URL is there.

282
0:19:08.920 --> 0:19:09.920
Right.

283
0:19:09.920 --> 0:19:10.920
Yes.

284
0:19:10.920 --> 0:19:13.560
But we also have a QR code if you find it.

285
0:19:13.560 --> 0:19:14.560
Do not trust QR codes.

286
0:19:14.560 --> 0:19:15.560
You don't know.

287
0:19:15.560 --> 0:19:16.560
You're going to be re-crowned.

288
0:19:16.560 --> 0:19:17.560
Right.

289
0:19:17.560 --> 0:19:18.560
Yeah.

290
0:19:18.560 --> 0:19:23.200
This is not the same URL.

291
0:19:23.200 --> 0:19:25.240
So we're plenty enough time.

292
0:19:25.240 --> 0:19:26.240
Questions?

293
0:19:26.240 --> 0:19:27.240
We'll get it.

294
0:19:27.240 --> 0:19:28.240
I have a question.

295
0:19:28.240 --> 0:19:29.240
How do you want when the file is going that it can crash?

296
0:19:29.240 --> 0:19:40.240
Because the process might be too right for the file.

297
0:19:40.240 --> 0:19:41.600
Right.

298
0:19:41.600 --> 0:19:45.240
So the question was how do you know when to hash the file?

299
0:19:45.240 --> 0:19:51.520
Because when you open it for writing, you have to know when the modification ends.

300
0:19:51.520 --> 0:19:53.320
And then you should hash the result.

301
0:19:53.320 --> 0:19:54.560
Is that correct?

302
0:19:54.560 --> 0:19:56.880
And the answer is?

303
0:19:56.880 --> 0:20:02.360
Well, we hash the file when we find the closed system call.

304
0:20:02.360 --> 0:20:04.280
You wait for all modifications to happen.

305
0:20:04.280 --> 0:20:08.080
And then upon the closed system call, the process is stopped.

306
0:20:08.080 --> 0:20:10.960
So all the stuff is in there, the virtual memory.

307
0:20:10.960 --> 0:20:11.960
And the list goes on.

308
0:20:11.960 --> 0:20:14.120
So you hash the file at that time.

309
0:20:14.120 --> 0:20:19.240
We also hash the file when we open the file to see if it was seen before.

310
0:20:19.240 --> 0:20:22.240
So we can have a nice graph.

311
0:20:22.240 --> 0:20:29.200
In fact, the graph is just a dependency graph like a semantic web, as one makes sense.

312
0:20:29.200 --> 0:20:30.200
Sorry.

313
0:20:30.200 --> 0:20:32.200
I have a hand.

314
0:20:32.200 --> 0:20:36.080
So how do you consume all those information?

315
0:20:36.080 --> 0:20:39.080
I mean this graph.

316
0:20:39.080 --> 0:20:40.080
Nice.

317
0:20:40.080 --> 0:20:43.280
So the question was how do we consume this?

318
0:20:43.280 --> 0:20:44.800
We produce all this information.

319
0:20:44.800 --> 0:20:46.680
And how is this consumed?

320
0:20:46.680 --> 0:20:48.600
And the answer is this is a build recorder.

321
0:20:48.600 --> 0:20:50.560
It just records.

322
0:20:50.560 --> 0:20:53.680
Here's the information.

323
0:20:53.680 --> 0:20:55.280
We do not consume it at all.

324
0:20:55.280 --> 0:21:01.360
It might be used to create, to enter it into an S-form or something like that.

325
0:21:01.360 --> 0:21:02.680
That's completely out of this.

326
0:21:02.680 --> 0:21:05.600
This is just recording all this information.

327
0:21:05.600 --> 0:21:09.640
It's out of the scope of this project.

328
0:21:09.640 --> 0:21:10.640
Let's see.

329
0:21:10.640 --> 0:21:11.640
Sorry.

330
0:21:11.640 --> 0:21:15.440
Have you tried converting the data to SVDX?

331
0:21:15.440 --> 0:21:17.960
We tried converting the data to SVDX.

332
0:21:17.960 --> 0:21:19.160
Similar question to that one.

333
0:21:19.160 --> 0:21:21.040
No, we just record build.

334
0:21:21.040 --> 0:21:22.440
This is a build recorder.

335
0:21:22.440 --> 0:21:23.440
Right.

336
0:21:23.440 --> 0:21:27.480
Another tool might read this wonderful output and create whatever they want.

337
0:21:27.480 --> 0:21:30.320
It's way on the back.

338
0:21:30.320 --> 0:21:40.320
The question is have we explored EBPF, EBPVF, whatever.

339
0:21:40.320 --> 0:21:42.600
You know what I'm talking about yet.

340
0:21:42.600 --> 0:21:47.520
The answer is no.

341
0:21:47.520 --> 0:21:48.520
Not yet.

342
0:21:48.520 --> 0:21:53.520
I should list of pieces open on GitHub.

343
0:21:53.520 --> 0:21:55.520
Come and play.

344
0:21:55.520 --> 0:21:56.520
Sorry.

345
0:21:56.520 --> 0:22:01.800
You just mentioned Maven as an example that still can't be recorded.

346
0:22:01.800 --> 0:22:03.800
Could you just summarize why?

347
0:22:03.800 --> 0:22:06.040
Doesn't Maven also write the web?

348
0:22:06.040 --> 0:22:07.040
Oh yeah.

349
0:22:07.040 --> 0:22:08.040
Sure.

350
0:22:08.040 --> 0:22:11.040
The question is what's the problem with Maven that we said that it's going to be handled

351
0:22:11.040 --> 0:22:13.280
in the future?

352
0:22:13.280 --> 0:22:16.920
On this level, Maven works the same.

353
0:22:16.920 --> 0:22:18.320
We can't record the information.

354
0:22:18.320 --> 0:22:20.240
But will we just be recording?

355
0:22:20.240 --> 0:22:24.840
Hey, a jar file was just being used.

356
0:22:24.840 --> 0:22:29.480
We would like ideally to record because Maven already downloaded it.

357
0:22:29.480 --> 0:22:33.200
But we're just tracing the file system calls.

358
0:22:33.200 --> 0:22:35.920
So ideally we'd like also to record the information.

359
0:22:35.920 --> 0:22:39.220
Hey, we're downloading from this location this jar file.

360
0:22:39.220 --> 0:22:42.000
We put it there and then we use it.

361
0:22:42.000 --> 0:22:45.240
On the level that we're using it, we can record it right now.

362
0:22:45.240 --> 0:22:46.240
Sorry.

363
0:22:46.240 --> 0:22:47.240
Go ahead.

364
0:22:47.240 --> 0:22:48.240
I missed you.

365
0:22:48.240 --> 0:22:49.240
Sorry.

366
0:22:49.240 --> 0:22:55.680
Do you have a way to distinguish between a file which is written completely or a file

367
0:22:55.680 --> 0:22:57.480
which is modified?

368
0:22:57.480 --> 0:23:03.000
The question is do we distinguish between modifications to a file or completely new

369
0:23:03.000 --> 0:23:04.800
created file unwritten?

370
0:23:04.800 --> 0:23:05.800
And the answer is?

371
0:23:05.800 --> 0:23:10.400
Well, if we did that, the performance would be even worse.

372
0:23:10.400 --> 0:23:11.400
You can actually do it.

373
0:23:11.400 --> 0:23:16.480
You can actually add another handler that checks for write system calls and has the

374
0:23:16.480 --> 0:23:22.360
file every time, but imagine if you have to has the file every time someone calls write.

375
0:23:22.360 --> 0:23:23.360
I don't want to.

376
0:23:23.360 --> 0:23:24.360
Sorry.

377
0:23:24.360 --> 0:23:36.360
There's not a question just saying that yesterday the Dell maintainers in the Go dev room showed

378
0:23:36.360 --> 0:23:31.720
how they replaced

379
0:23:31.720 --> 0:23:46.040
C trace with EBPF and their debugger and performances were pretty improved.

380
0:23:46.040 --> 0:23:54.280
The comment was that there was a yesterday talk in the Go dev room that they showed using

381
0:23:54.280 --> 0:23:59.600
EBPF instead of P trace for similar work and performance was great.

382
0:23:59.600 --> 0:24:00.600
Something to explore.

383
0:24:00.600 --> 0:24:01.600
Yes.

384
0:24:01.600 --> 0:24:02.600
Go ahead.

385
0:24:02.600 --> 0:24:15.520
The question is, can we use the code that we're using?

386
0:24:15.520 --> 0:24:22.880
The question is, how does this compare to scan code trace code that suppose doing the

387
0:24:22.880 --> 0:24:24.280
same thing?

388
0:24:24.280 --> 0:24:27.360
We have not measured for that.

389
0:24:27.360 --> 0:24:28.960
I didn't even know that.

390
0:24:28.960 --> 0:24:29.960
Sorry.

391
0:24:29.960 --> 0:24:31.960
If it runs for the trace.

392
0:24:31.960 --> 0:24:33.960
Oh, if it runs for the trace.

393
0:24:33.960 --> 0:24:36.800
It's the same as trace.

394
0:24:36.800 --> 0:24:39.800
We don't.

395
0:24:39.800 --> 0:24:40.800
Any other questions?

396
0:24:40.800 --> 0:24:47.800
Could you just see inside like if you were building a Docker container, would it be able

397
0:24:47.800 --> 0:24:53.440
to see what's going on inside here or would you just run it in your Docker file?

398
0:24:53.440 --> 0:24:54.440
Wow.

399
0:24:54.440 --> 0:25:01.160
The question was, what does it happen when you run it while building a container?

400
0:25:01.160 --> 0:25:03.160
You mean?

401
0:25:03.160 --> 0:25:13.440
So again, remember, it just records all the system codes right into the disk.

402
0:25:13.440 --> 0:25:21.480
So when you run it while you do Docker build, it will record all the files being used in

403
0:25:21.480 --> 0:25:22.480
order.

404
0:25:22.480 --> 0:25:27.280
So if you do copy things, it will record everything being copied into the layer.

405
0:25:27.280 --> 0:25:28.280
Right.

406
0:25:28.280 --> 0:25:30.280
Stuff like that.

407
0:25:30.280 --> 0:25:31.280
Go ahead.

408
0:25:31.280 --> 0:25:34.680
To be honest, the command doesn't have to be a build command.

409
0:25:34.680 --> 0:25:36.880
You can literally plug in anything in there.

410
0:25:36.880 --> 0:25:38.520
LS or whatever.

411
0:25:38.520 --> 0:25:40.440
I mean, we are not supporting it.

412
0:25:40.440 --> 0:25:45.220
We can promise that we will be supporting it in the future, but you can do that.

413
0:25:45.220 --> 0:25:50.400
So anything you can imagine, it will run.

414
0:25:50.400 --> 0:25:53.320
It will probably record that Docker was called.

415
0:25:53.320 --> 0:25:56.160
Docker will still run all those dependencies.

416
0:25:56.160 --> 0:25:57.160
It will still try to compile.

417
0:25:57.160 --> 0:26:02.920
It will still link against all those libraries with.

418
0:26:02.920 --> 0:26:03.920
Anyways.

419
0:26:03.920 --> 0:26:15.080
Any thoughts about going off Linux to Windows?

420
0:26:15.080 --> 0:26:17.080
We added an open source conference.

421
0:26:17.080 --> 0:26:19.640
Repeat the question.

422
0:26:19.640 --> 0:26:20.640
Yes.

423
0:26:20.640 --> 0:26:26.600
They asked if we're planning to implement something like this on Windows.

424
0:26:26.600 --> 0:26:27.600
Well, no.

425
0:26:27.600 --> 0:26:28.600
First of all, it's hard.

426
0:26:28.600 --> 0:26:40.240
The idea would be great if I have developers who can do that and know the corresponding

427
0:26:40.240 --> 0:26:43.320
things magic to do in Windows.

428
0:26:43.320 --> 0:26:45.320
PR is welcome.

429
0:26:45.320 --> 0:26:47.320
It's an entirely different process.

430
0:26:47.320 --> 0:26:50.840
You don't have to all the system groups.

431
0:26:50.840 --> 0:26:51.840
We can work with that.

432
0:26:51.840 --> 0:27:00.480
It should see the interactions.

433
0:27:00.480 --> 0:27:03.840
There must be something in Windows, but I don't know.

434
0:27:03.840 --> 0:27:06.720
Are we done?

435
0:27:06.720 --> 0:27:07.720
Okay.

436
0:27:07.720 --> 0:27:22.400
Thank you all.


1
0:00:00.000 --> 0:00:14.360
All right, so first of all, thank you for staying this late on Sunday and for attending

2
0:00:14.360 --> 0:00:17.120
the Eson Roma bit as part of the organizers.

3
0:00:17.120 --> 0:00:20.120
I'm really happy to see this.

4
0:00:20.120 --> 0:00:28.680
And so we have been going through all of those cool use cases and complex, like really complete

5
0:00:28.680 --> 0:00:35.680
and complex tools to generate desktops and analyzing how companies speak about how they're

6
0:00:35.680 --> 0:00:40.840
doing it and like going deep into the research of how Eson's talking about both.

7
0:00:40.840 --> 0:00:50.120
I was thinking that I wanted to do like my talk as kind of pivot as we are sitting towards

8
0:00:50.120 --> 0:00:56.080
the more discussion part of the bedroom.

9
0:00:56.080 --> 0:01:05.640
And so as you have been hearing from folks right now, a lot of us working on Eson's are

10
0:01:05.640 --> 0:01:11.520
starting to get concerned about what's actually in those documents.

11
0:01:11.520 --> 0:01:17.520
And I think when Thomas opened the bedroom today, the first thing he said was, well,

12
0:01:17.520 --> 0:01:21.800
those dependencies that you're getting, they may not be correct, right?

13
0:01:21.800 --> 0:01:26.880
So I thought that it would be, as we move to the latest part of the conference, it would

14
0:01:26.880 --> 0:01:32.120
be cool if we could get a few talking points just to see the conversation that's about

15
0:01:32.120 --> 0:01:33.400
to happen.

16
0:01:33.400 --> 0:01:40.000
So my name is Aloha Garcia, and I am, well, part of the SPDX community.

17
0:01:40.000 --> 0:01:42.720
I am a contributor to SPDX and some of the tools.

18
0:01:42.720 --> 0:01:47.600
I'm a trained adventurer for open source tools that generate and consume desktops and that

19
0:01:47.600 --> 0:01:49.040
help visualize them.

20
0:01:49.040 --> 0:01:51.360
I am also part of the Kubernetes project.

21
0:01:51.360 --> 0:01:59.520
I am part of Kubernetes SIG release, and I work there mostly on the supply chain security

22
0:01:59.520 --> 0:02:01.280
of the project.

23
0:02:01.280 --> 0:02:07.520
And yeah, like riding my bike, I'm based in Mexico City, and I am a staff engineer with

24
0:02:07.520 --> 0:02:15.000
Changer, which is a company devoted to supply chain security.

25
0:02:15.000 --> 0:02:22.440
So as you heard from probably every speaker today, the goal of having a company getting

26
0:02:22.440 --> 0:02:26.360
a document which you can actually use for something.

27
0:02:26.360 --> 0:02:34.400
And there are many concerns about ESBOMs flying around in the world today because there are

28
0:02:34.400 --> 0:02:40.960
particular use cases, and some people will argue that ESBOMs may not be necessarily incomplete

29
0:02:40.960 --> 0:02:44.240
if they're not suitable for one case or the other.

30
0:02:44.240 --> 0:02:51.880
And this is true, but instead of trying to picture ourselves generating a next one from

31
0:02:51.880 --> 0:02:56.680
the position of a large company or whatever, I felt that it was more appropriate to discuss

32
0:02:56.680 --> 0:03:05.640
today that how I am assuming a lot of people here are maintainers of open source projects

33
0:03:05.640 --> 0:03:11.520
and sometimes very small open source projects, like one maintainer small.

34
0:03:11.520 --> 0:03:19.680
And I think it's important to start considering that when those large companies are going

35
0:03:19.680 --> 0:03:25.040
to use your project, your library, important in that module that you're writing, the ESBOM

36
0:03:25.040 --> 0:03:29.240
that you give them can really make a difference in several areas.

37
0:03:29.240 --> 0:03:35.520
Like first, you can make their life easier because you're having them more complete information

38
0:03:35.520 --> 0:03:37.400
which they can act on.

39
0:03:37.400 --> 0:03:45.720
And the other one is we as open source community become better citizens of the supply chain,

40
0:03:45.720 --> 0:03:53.520
like generating the information that pertains to us is much more responsible thing to do.

41
0:03:53.520 --> 0:03:58.000
So what happens when you open an ESBOM?

42
0:03:58.000 --> 0:04:01.640
Well today you can get all sorts of surprises.

43
0:04:01.640 --> 0:04:03.500
Sometimes there's nothing in there.

44
0:04:03.500 --> 0:04:06.320
You open the ESBOM and it's empty.

45
0:04:06.320 --> 0:04:12.320
Sometimes you don't have absolutely any information that lets you determine what the ESBOM is

46
0:04:12.320 --> 0:04:13.320
describing.

47
0:04:13.320 --> 0:04:18.600
So it's simply just pointing to the same black box that you can look from the outside.

48
0:04:18.600 --> 0:04:26.520
Or the other is what happens if, are you sure that the ESBOM is really describing what you're

49
0:04:26.520 --> 0:04:30.280
expecting to and you're not getting combed by someone?

50
0:04:30.280 --> 0:04:43.640
So that information needs to be in the ESBOM in order to ensure that it's actually describing

51
0:04:43.640 --> 0:04:47.200
that piece of software that you're distributing.

52
0:04:47.200 --> 0:04:51.640
So I'm going to give you a few examples.

53
0:04:51.640 --> 0:04:59.960
I'm not trying to name names and that's why I chose projects that I'm involved with, both

54
0:04:59.960 --> 0:05:00.960
good and bad.

55
0:05:00.960 --> 0:05:03.400
So this is the first one.

56
0:05:03.400 --> 0:05:09.800
This is our company has a Linux distribution which is already shipped shipping with ESBOMs

57
0:05:09.800 --> 0:05:11.280
built in.

58
0:05:11.280 --> 0:05:15.720
And we generate those ESBOMs at build time for all of the packages.

59
0:05:15.720 --> 0:05:19.800
And you can see the structure here of one of the ESBOMs.

60
0:05:19.800 --> 0:05:25.000
This is like a visualization of the ESBOM using the Kubernetes bomb tool which lets

61
0:05:25.000 --> 0:05:30.280
you ingest SPDX documents and see how they're structured inside.

62
0:05:30.280 --> 0:05:35.240
And as you can see, we try to in the Linux district add a lot of detail to the ESBOM

63
0:05:35.240 --> 0:05:42.840
as much as we can to just guide whoever's using those ESBOMs to do smart decisions with

64
0:05:42.840 --> 0:05:45.920
the information they have in them.

65
0:05:45.920 --> 0:05:52.200
So if you look at some of, this is a fragment of the ESBOM and I mean some information is

66
0:05:52.200 --> 0:05:53.640
there.

67
0:05:53.640 --> 0:06:01.680
Some information is, for example, the licenses, the license concluded fields.

68
0:06:01.680 --> 0:06:05.400
They are marked as no assertion but you can omit those, for example, if you want.

69
0:06:05.400 --> 0:06:11.760
But we have the license from the project, from the actual operating system package.

70
0:06:11.760 --> 0:06:14.460
We have some identifiers, things like that.

71
0:06:14.460 --> 0:06:17.280
So it's pretty complete.

72
0:06:17.280 --> 0:06:23.080
It's obviously not perfect but we try and we try to add as much information as we can.

73
0:06:23.080 --> 0:06:31.560
But then let me show you another ESBOM from another popular open source project.

74
0:06:31.560 --> 0:06:34.720
This is part of the Kubernetes ESBOM.

75
0:06:34.720 --> 0:06:40.560
So this is part of the ESBOM like the structure, a little fragment of the structure of the

76
0:06:40.560 --> 0:06:46.640
ESBOM that we generate with when we put out a new Kubernetes release.

77
0:06:46.640 --> 0:06:54.240
And this is describing, for example, the tables which we put out with every release.

78
0:06:54.240 --> 0:06:58.000
One of the tables of the LQA API server, the list of files.

79
0:06:58.000 --> 0:07:00.640
So we also try to add information.

80
0:07:00.640 --> 0:07:05.040
We put out two ESBOMs with Kubernetes, one with the artifacts, one with the source code

81
0:07:05.040 --> 0:07:07.920
which are linked one to each other.

82
0:07:07.920 --> 0:07:12.720
And so we also think that those are fairly complete ESBOMs.

83
0:07:12.720 --> 0:07:20.840
But now I opened an ESBOM in a popular open source project and tried to generate the structure

84
0:07:20.840 --> 0:07:21.840
like this.

85
0:07:21.840 --> 0:07:25.040
I'm not going to say which project it is.

86
0:07:25.040 --> 0:07:31.960
It's just one I'm involved with and we should be doing a better job there.

87
0:07:31.960 --> 0:07:37.600
And you can guess many reasons of why this is showing serial things but we can go over

88
0:07:37.600 --> 0:07:40.640
this.

89
0:07:40.640 --> 0:07:49.040
So as you can see, you can really enrich an ESBOM with a lot of information and some of

90
0:07:49.040 --> 0:07:51.720
it can be more important than other things.

91
0:07:51.720 --> 0:07:55.520
But I've been thinking, well, what's the most important details that you can add to the

92
0:07:55.520 --> 0:07:56.520
ESBOM?

93
0:07:56.520 --> 0:08:01.640
So the first one is, and by the way, most of this you already heard the truth of the

94
0:08:01.640 --> 0:08:04.200
day if you've been sitting in most of the conferences.

95
0:08:04.200 --> 0:08:05.960
So we're going to go one by one.

96
0:08:05.960 --> 0:08:09.680
So the first one is syntactic correctness.

97
0:08:09.680 --> 0:08:17.600
You would expect that most tools generating SPDX or Cyclone DX ESBOMs do the basic job

98
0:08:17.600 --> 0:08:20.120
of just making a compliant document.

99
0:08:20.120 --> 0:08:24.360
Well, the reality is that they're not so.

100
0:08:24.360 --> 0:08:30.160
If you, I pictured this guy from Apollo 13 that tries to fit the square peg in the round

101
0:08:30.160 --> 0:08:33.920
hole or the other way around.

102
0:08:33.920 --> 0:08:38.680
Because if you cannot ingest an ESBOM, so what's the point?

103
0:08:38.680 --> 0:08:45.600
And even if you have tried to somehow hack the document or ingest it somehow, the reality

104
0:08:45.600 --> 0:08:51.120
is that most tools that consume ESBOMs today do not have a clear strategy of deprecating

105
0:08:51.120 --> 0:08:55.200
the documents.

106
0:08:55.200 --> 0:08:58.960
And then most importantly, not clear and also not predictable.

107
0:08:58.960 --> 0:09:06.400
So if a tool tries to somehow ignore errors or whatever, the behavior may not be consistent.

108
0:09:06.400 --> 0:09:12.640
So ensure that any ESBOM that you're producing or requesting at least complies with syntactic

109
0:09:12.640 --> 0:09:16.280
rules of the standard you're using.

110
0:09:16.280 --> 0:09:18.440
The second one, dependency data.

111
0:09:18.440 --> 0:09:22.880
And this is a little bit related to the first one.

112
0:09:22.880 --> 0:09:24.120
I've seen ESBOMs.

113
0:09:24.120 --> 0:09:28.720
So since I work with a lot of open source tools and my job also has to do with ESBOMs,

114
0:09:28.720 --> 0:09:32.080
I've seen a lot of tools producing ESBOMs.

115
0:09:32.080 --> 0:09:39.480
And so for example, one variant of the bad ESBOM is, well, they will just list like a

116
0:09:39.480 --> 0:09:43.760
table and that's your ESBOM, nothing else.

117
0:09:43.760 --> 0:09:50.600
Or the obvious case of this ESBOM contains one thing, an RPM.

118
0:09:50.600 --> 0:09:54.280
No dependency, no nothing.

119
0:09:54.280 --> 0:10:00.960
So we often use the analogy of the ESBOM being the nutritional label of software.

120
0:10:00.960 --> 0:10:05.920
But without the dependency list, well, it's really worthless.

121
0:10:05.920 --> 0:10:11.600
You can still use your ESBOM as the old checksum.txt if you wanted, but ESBOM's going to provide

122
0:10:11.600 --> 0:10:14.240
a lot more value than that.

123
0:10:14.240 --> 0:10:16.480
Then the second one, licensing information.

124
0:10:16.480 --> 0:10:25.280
We heard a ton of the talks today about licensing and why it may be important.

125
0:10:25.280 --> 0:10:32.040
So the truth is if you are publishing software, you're the most qualified person to do the

126
0:10:32.040 --> 0:10:37.000
assessment of what the license your software should be using.

127
0:10:37.000 --> 0:10:42.520
And this applies both to the dependencies that you're pulling in.

128
0:10:42.520 --> 0:10:47.960
And if you are redistributing an information, ensure that the information about the licensing

129
0:10:47.960 --> 0:10:50.480
is going down the stream.

130
0:10:50.480 --> 0:10:56.760
Because the tools that we've been seeing today try to do a good job on helping people understand

131
0:10:56.760 --> 0:10:59.360
their licensing situation.

132
0:10:59.360 --> 0:11:07.280
So I picture checking the passport as an example of the license.

133
0:11:07.280 --> 0:11:10.240
The next one.

134
0:11:10.240 --> 0:11:12.400
And semantic structure in the ESBOM.

135
0:11:12.400 --> 0:11:17.080
This one also came during the discussion today.

136
0:11:17.080 --> 0:11:24.120
So there are folks that think that ESBOM can be just the list of dependencies.

137
0:11:24.120 --> 0:11:25.600
And it may be true.

138
0:11:25.600 --> 0:11:29.440
But then you start losing context on where those things fit.

139
0:11:29.440 --> 0:11:36.640
For example, if you have just a list of dependencies, and especially if they're not related to

140
0:11:36.640 --> 0:11:40.120
an artifact at the top of the ESBOM, if you picture.

141
0:11:40.120 --> 0:11:47.200
So the ESBOM can be this beautiful graph of one node that spreads out to lots of different

142
0:11:47.200 --> 0:11:50.280
relationships in nodes.

143
0:11:50.280 --> 0:11:53.760
So sometimes you'll see ESBOMs that only have the list of dependencies.

144
0:11:53.760 --> 0:11:59.640
And they don't talk about where those dependencies fit if they're describing a concerning image,

145
0:11:59.640 --> 0:12:01.840
a binary, nothing.

146
0:12:01.840 --> 0:12:08.320
So if you try to do something more sophisticated with that data, you simply can't.

147
0:12:08.320 --> 0:12:15.840
If you remember the ESBOM that I showed in the beginning that we built with the Linux

148
0:12:15.840 --> 0:12:21.920
distribution, this is how we structure the container images built from our Linux distribution.

149
0:12:21.920 --> 0:12:29.120
So you have the container, the layers, and the packages, like the OS packages, and then

150
0:12:29.120 --> 0:12:32.960
all of the files in its proper place.

151
0:12:32.960 --> 0:12:38.920
And this information is actually coming from smaller ESBOMs that get compiled when we build

152
0:12:38.920 --> 0:12:40.040
the Linux distribution.

153
0:12:40.040 --> 0:12:45.660
So each of the APKs of the distro have their own ESBOM describing that package.

154
0:12:45.660 --> 0:12:51.320
And then when we build an image, we take all of those ESBOMs and give you one single ESBOM

155
0:12:51.320 --> 0:12:54.160
with all of that information composed where it's supposed to be.

156
0:12:54.160 --> 0:12:57.560
And without structure, you simply cannot do this.

157
0:12:57.560 --> 0:13:03.120
And this is one image, but then if you go and make it more complex, you can start thinking

158
0:13:03.120 --> 0:13:05.840
about multi-arch images.

159
0:13:05.840 --> 0:13:11.480
And those need to have this information for each of the images, so the relationships start

160
0:13:11.480 --> 0:13:16.840
to become more and more complex.

161
0:13:16.840 --> 0:13:20.800
And the way I try to picture is this.

162
0:13:20.800 --> 0:13:24.760
So they give you a box of Legos without any instructions or anything.

163
0:13:24.760 --> 0:13:26.400
You can use your imagination.

164
0:13:26.400 --> 0:13:31.360
Basically you're going to build something really beautiful, most likely not.

165
0:13:31.360 --> 0:13:35.920
Especially not the thing picture in the box, right?

166
0:13:35.920 --> 0:13:40.120
And so these are some of the reasons that I was thinking.

167
0:13:40.120 --> 0:13:45.480
If you have structure, then it's a guarantee at least that the tool at least is looking

168
0:13:45.480 --> 0:13:52.320
at how the thing is composed and where the information is flowing from and lets you do

169
0:13:52.320 --> 0:13:57.640
more complex use cases for the documents.

170
0:13:57.640 --> 0:13:59.960
Now the next one.

171
0:13:59.960 --> 0:14:06.560
This also has come like two, three times today, the software identifiers.

172
0:14:06.560 --> 0:14:16.080
ESBOMs need to be defining and naming the piece of software as close as possible.

173
0:14:16.080 --> 0:14:22.280
And software identifiers are one of the schemes that you need in the document in order to

174
0:14:22.280 --> 0:14:28.480
ensure that the piece of software that the ESBOM is describing is clearly identified.

175
0:14:28.480 --> 0:14:35.480
And all of them have their problems, especially CPE for example, it's really complex to get

176
0:14:35.480 --> 0:14:37.160
it right.

177
0:14:37.160 --> 0:14:44.920
And the idea is there's going to be a tool down the stream that it's going to benefit

178
0:14:44.920 --> 0:14:46.280
from that information.

179
0:14:46.280 --> 0:14:54.120
So if you can add it, you're making sure that the ESBOM can work well with those tools.

180
0:14:54.120 --> 0:14:57.000
And this is kind of the idea of that.

181
0:14:57.000 --> 0:15:00.760
So how many packages in the world named log, right?

182
0:15:00.760 --> 0:15:03.120
So, okay, log, but what's log?

183
0:15:03.120 --> 0:15:08.760
There are thousands in every language like operating system packages, libraries named

184
0:15:08.760 --> 0:15:09.760
log.

185
0:15:09.760 --> 0:15:19.720
And if you have like a properly specified PURL, CPE, both that clearly define the piece

186
0:15:19.720 --> 0:15:25.720
of software that the ESBOM is talking about, then it can be better referenced and used

187
0:15:25.720 --> 0:15:28.120
by tools on the stream.

188
0:15:28.120 --> 0:15:33.800
Now the supplier data, this is like a contentious one.

189
0:15:33.800 --> 0:15:41.280
And the reason why I added the supplier data is because as software authors, sometimes

190
0:15:41.280 --> 0:15:46.840
we don't think that it's like an important field.

191
0:15:46.840 --> 0:15:52.240
We simply, I mean, in most large open source projects, we just list like copyright the

192
0:15:52.240 --> 0:15:53.520
project authors, right?

193
0:15:53.520 --> 0:15:56.140
Like the editorial.

194
0:15:56.140 --> 0:16:03.000
But the reality is that if you jump into any of the ESBOM meetings that go on regularly,

195
0:16:03.000 --> 0:16:08.720
you're gonna hear all of the compliance folks like I need a name to sue or I don't know.

196
0:16:08.720 --> 0:16:12.560
It's a different mentality than ours, but people need it.

197
0:16:12.560 --> 0:16:21.120
And in fact, it's one of the requirements from NTIA as the minimum relevance of ESBOM.

198
0:16:21.120 --> 0:16:31.960
And this is a weird field because if you deal in kind of more into security of the documents

199
0:16:31.960 --> 0:16:39.360
that should be generated during the supply chain and the software lifecycle, this information

200
0:16:39.360 --> 0:16:45.760
is kind of, I don't know, not really very useful because it can be forged and you cannot

201
0:16:45.760 --> 0:16:47.280
trust it.

202
0:16:47.280 --> 0:16:55.400
And so just having a name and an email, well, like it serves compliance folks, but to us

203
0:16:55.400 --> 0:17:00.880
it's kind of, well, worthless really for security purposes, right?

204
0:17:00.880 --> 0:17:04.820
But then you start thinking about, well, what's a supplier?

205
0:17:04.820 --> 0:17:07.100
Is it the author, the company direct holder?

206
0:17:07.100 --> 0:17:12.920
Is it the tool that compiled the thing that people who was distributing it?

207
0:17:12.920 --> 0:17:19.080
And so, well, at least ensure that you're providing some kind of information.

208
0:17:19.080 --> 0:17:23.040
And the idea is, know who's selling you your things, right?

209
0:17:23.040 --> 0:17:27.280
Which you buy candy from that guy, probably not.

210
0:17:27.280 --> 0:17:29.560
Yeah, exactly.

211
0:17:29.560 --> 0:17:35.560
Come, give them, get them from us.

212
0:17:35.560 --> 0:17:36.560
Supplier data.

213
0:17:36.560 --> 0:17:37.560
Oh, okay.

214
0:17:37.560 --> 0:17:41.160
I messed up this slide.

215
0:17:41.160 --> 0:17:47.100
So this one was supposed to be integrity data, integrity data to prevent this kind of thing.

216
0:17:47.100 --> 0:17:55.720
So when you, as you heard today also, ESBOM should be properly hashed, like hashing as

217
0:17:55.720 --> 0:18:00.200
much as you can inside of a document when possible, when it makes sense, and especially

218
0:18:00.200 --> 0:18:02.800
when it can be verified.

219
0:18:02.800 --> 0:18:10.520
So the idea is, is this piece of software that I'm naming in the ESBOM the real deal?

220
0:18:10.520 --> 0:18:12.520
Has it been corrupted or not?

221
0:18:12.520 --> 0:18:20.360
But more importantly, having hashes lets you deal the problem of the latest, right?

222
0:18:20.360 --> 0:18:24.720
So sometimes you will not have a version, but you can still reference that software

223
0:18:24.720 --> 0:18:31.760
artifact inside of the ESBOM and other documents like VEX, for example, via the hashes.

224
0:18:31.760 --> 0:18:42.160
So you can think about the versioning system and the software identifiers as links to external

225
0:18:42.160 --> 0:18:50.800
systems outside of the ESBOM, like vulnerability databases, like for example, package repositories.

226
0:18:50.800 --> 0:18:55.620
But internally, everything should be addressed via the hash if possible.

227
0:18:55.620 --> 0:19:02.800
So if I'm telling you this is the vulnerability document for a piece of software, it should

228
0:19:02.800 --> 0:19:07.000
match with the hashes somehow.

229
0:19:07.000 --> 0:19:12.040
In the ADAs, well, you can, once you start content addressing the piece of software in

230
0:19:12.040 --> 0:19:16.760
the ESBOM, you cannot go wrong.

231
0:19:16.760 --> 0:19:22.520
And that's basically what I have.

232
0:19:22.520 --> 0:19:29.200
And so I just wanted to let this open, you know, keep the conversations that are about

233
0:19:29.200 --> 0:19:33.640
to happen about this kind of thing inside of the documents.

234
0:19:33.640 --> 0:19:38.400
And if there are any questions or whatever, happy to take them.

235
0:19:38.400 --> 0:19:46.680
If not, you can reach me as Poerco in most systems and Twitter, whatever.

236
0:19:46.680 --> 0:19:47.680
So thank you.

237
0:19:47.680 --> 0:19:48.680
Question?

238
0:19:48.680 --> 0:19:49.680
Oh.

239
0:19:49.680 --> 0:20:17.120
I was going to ask about the supply and data and how much is that seen as the individual

240
0:20:17.120 --> 0:20:20.120
entity?

241
0:20:20.120 --> 0:20:26.000
Well, I would like to hear the opinions of the supplier that are from other.

242
0:20:26.000 --> 0:20:29.120
So what's basically, what's the role of the supplier data?

243
0:20:29.120 --> 0:20:31.360
So what's the use of that field?

244
0:20:31.360 --> 0:20:32.360
Yeah.

245
0:20:32.360 --> 0:20:34.360
What should be filled in?

246
0:20:34.360 --> 0:20:35.360
Is it an entity?

247
0:20:35.360 --> 0:20:36.360
Yeah.

248
0:20:36.360 --> 0:20:42.360
So should they feel like a person or an entity or a tool?

249
0:20:42.360 --> 0:20:43.360
Yep.

250
0:20:43.360 --> 0:20:50.360
So I have a question about the last ingredient definition, so the integrity.

251
0:20:50.360 --> 0:20:55.720
In your definition, does that also include sizing of the actual asset?

252
0:20:55.720 --> 0:20:56.720
Not really.

253
0:20:56.720 --> 0:20:57.720
Ripping?

254
0:20:57.720 --> 0:20:58.720
No, no.

255
0:20:58.720 --> 0:20:59.720
Yeah.

256
0:20:59.720 --> 0:21:03.640
I was going to go to that question before, but if anybody has insights about how supplier

257
0:21:03.640 --> 0:21:09.120
data is used in the organizations, that was the time to discuss it.

258
0:21:09.120 --> 0:21:10.640
All right.

259
0:21:10.640 --> 0:21:11.640
Yeah.

260
0:21:11.640 --> 0:21:16.520
No, so the way I've seen it required is...

261
0:21:16.520 --> 0:21:19.200
What was the question?

262
0:21:19.200 --> 0:21:20.200
No, no.

263
0:21:20.200 --> 0:21:21.200
This is...

264
0:21:21.200 --> 0:21:22.200
Yeah.

265
0:21:22.200 --> 0:21:23.200
Exactly.

266
0:21:23.200 --> 0:21:24.200
The first one.

267
0:21:24.200 --> 0:21:25.840
So the first one is how is the supplier used?

268
0:21:25.840 --> 0:21:32.760
And the way I've seen it is mostly from procurement people, like asking for that information,

269
0:21:32.760 --> 0:21:34.100
and lawyers.

270
0:21:34.100 --> 0:21:40.240
So that's the model, the two that I've seen asking for the information more.

271
0:21:40.240 --> 0:21:48.200
I'm coming from the security side of HESMOM more, so the compliance is not my strong side,

272
0:21:48.200 --> 0:21:52.160
but that's why I'm suggesting it.

273
0:21:52.160 --> 0:21:53.160
And...

274
0:21:53.160 --> 0:21:54.160
Yeah.

275
0:21:54.160 --> 0:22:05.000
As one data point, the way that we are using supplier data is actually recording who supplied

276
0:22:05.000 --> 0:22:07.000
the software.

277
0:22:07.000 --> 0:22:13.960
So not who wrote it, not who created it or something like that.

278
0:22:13.960 --> 0:22:20.080
If we got it from an upstream distribution repo, we put the upstream distribution repo

279
0:22:20.080 --> 0:22:21.080
in product.

280
0:22:21.080 --> 0:22:27.480
That's, again, recorded that we know, that's the only thing that I know.

281
0:22:27.480 --> 0:22:33.440
And to the other question is, so does the integrity points consider also signing of

282
0:22:33.440 --> 0:22:34.960
the HESMOM?

283
0:22:34.960 --> 0:22:37.760
And yes, but not in this case.

284
0:22:37.760 --> 0:22:46.320
So integrity, like signing of the HESMOM is mostly done outside of the HESMOM.

285
0:22:46.320 --> 0:22:51.880
And that touches on trusting the HESMOM, which is a whole other kind of worms.

286
0:22:51.880 --> 0:22:56.080
But I mean, it is, but not in the contents of the documents.

287
0:22:56.080 --> 0:23:05.640
How can I make sure an HESMOM adheres to these principles?

288
0:23:05.640 --> 0:23:14.640
Is there something like benchmarks or I give it a score of 8.0 from 10?

289
0:23:14.640 --> 0:23:15.640
That's a good HESMOM.

290
0:23:15.640 --> 0:23:16.640
Well, there are tools then.

291
0:23:16.640 --> 0:23:18.520
Yeah, yeah, I repeat the question.

292
0:23:18.520 --> 0:23:20.360
So how can I know...

293
0:23:20.360 --> 0:23:23.280
Sorry, didn't get out of the lot of sleep.

294
0:23:23.280 --> 0:23:29.840
How can I make sure that the HESMOM really complies to these things here?

295
0:23:29.840 --> 0:23:37.040
So there are a couple of tools that do a validation of the HESMOM, like scoring, try to do scoring.

296
0:23:37.040 --> 0:23:44.680
So eBay has a tool called HESMOM Scorecard.

297
0:23:44.680 --> 0:23:51.120
Then there's the NTIA compliance checker from SPDX.

298
0:23:51.120 --> 0:23:56.680
And I'm not sure.

299
0:23:56.680 --> 0:23:57.680
And there's...

300
0:23:57.680 --> 0:23:58.680
I don't know.

301
0:23:58.680 --> 0:24:00.680
Are the ender folks here still?

302
0:24:00.680 --> 0:24:02.080
Not very much.

303
0:24:02.080 --> 0:24:06.640
Okay, so I seem to remember that they were handling some of that as well.

304
0:24:06.640 --> 0:24:09.640
But there are a couple of tools out there.

305
0:24:09.640 --> 0:24:12.080
It's more like a remark, but some...

306
0:24:12.080 --> 0:24:14.920
It's a surprise we didn't mention Open Chain that much.

307
0:24:14.920 --> 0:24:15.920
Open Chain is...

308
0:24:15.920 --> 0:24:24.080
The goal is to trust from the suppliers, so you can trust the HESMOMs from the suppliers.

309
0:24:24.080 --> 0:24:27.280
So, yeah.

310
0:24:27.280 --> 0:24:34.320
What Nico said is that Open Chain has touches on the idea of trusting the HESMOM on the

311
0:24:34.320 --> 0:24:38.280
supplier and those sorts.

312
0:24:38.280 --> 0:24:39.840
I've had an observation.

313
0:24:39.840 --> 0:24:45.560
This is having looked at Python and the metadata that goes with Python packaging is really

314
0:24:45.560 --> 0:24:46.560
inconsistent.

315
0:24:46.560 --> 0:24:49.600
So, how do you spell Apache 2?

316
0:24:49.600 --> 0:24:54.280
How many different ways of putting Apache 2 license is amazing.

317
0:24:54.280 --> 0:24:58.280
And actually between releases, information disappears.

318
0:24:58.280 --> 0:25:05.200
So, this is really a message for the ones in the ecosystems, put as much data in the

319
0:25:05.200 --> 0:25:11.560
ecosystem metadata that you can, because this is going to support...

320
0:25:11.560 --> 0:25:12.560
Yeah, exactly.

321
0:25:12.560 --> 0:25:13.560
Yeah, the comment is...

322
0:25:13.560 --> 0:25:17.960
Because we were looking at a difference and we've got a new release of a package, but

323
0:25:17.960 --> 0:25:19.880
where's the supplier gone?

324
0:25:19.880 --> 0:25:20.880
Right, exactly.

325
0:25:20.880 --> 0:25:25.880
And actually, the question is, do we just use that module now?

326
0:25:25.880 --> 0:25:28.520
Because we don't know where it's come from.

327
0:25:28.520 --> 0:25:32.680
The comment is that in Python, sometimes between releases, information changes or disappears

328
0:25:32.680 --> 0:25:33.680
or whatever.

329
0:25:33.680 --> 0:25:40.480
So, this is actually one of the things that some of us would like to see happening, like

330
0:25:40.480 --> 0:25:48.240
people working on packaging systems, on language ecosystems, to start, if not adding S-bomb

331
0:25:48.240 --> 0:25:53.360
generation straight away in their tooling, at least expose the information so that we,

332
0:25:53.360 --> 0:26:03.040
S-bomb tool makers, can go in and extract them from more trustable sources.

333
0:26:03.040 --> 0:26:04.040
And...

334
0:26:04.040 --> 0:26:05.040
Wait, about two minutes.

335
0:26:05.040 --> 0:26:06.040
Okay.

336
0:26:06.040 --> 0:26:12.240
In regards to hashing, how are you dealing with custom patches when you apply to your

337
0:26:12.240 --> 0:26:13.240
live software?

338
0:26:13.240 --> 0:26:14.240
Can you repeat it?

339
0:26:14.240 --> 0:26:17.240
In regards to hashing, how are you dealing with custom patches when you apply?

340
0:26:17.240 --> 0:26:24.320
So, if you need to patch software you're using, but you can't apply the patch upstream.

341
0:26:24.320 --> 0:26:25.800
In the case of the...

342
0:26:25.800 --> 0:26:28.200
Yeah, just in the case of the distro or...

343
0:26:28.200 --> 0:26:31.280
You can adjust to it in general as well.

344
0:26:31.280 --> 0:26:35.600
Well, yeah, the question is, how do you deal with patch software, right?

345
0:26:35.600 --> 0:26:36.600
When you apply a patch?

346
0:26:36.600 --> 0:26:41.880
If I apply a patch, then it's not upstream.

347
0:26:41.880 --> 0:26:44.600
But I mean, you still have that hash, right?

348
0:26:44.600 --> 0:26:47.040
Or is the question about naming?

349
0:26:47.040 --> 0:26:49.600
What's the best practice, I suppose?

350
0:26:49.600 --> 0:26:56.960
Yeah, so if you're describing a patch artifact, I mean the hash, simply hash the thing and

351
0:26:56.960 --> 0:26:58.860
you can use that down the stream.

352
0:26:58.860 --> 0:27:04.720
The problem comes when you're trying to define, well, I'm using curl, but I applied a few

353
0:27:04.720 --> 0:27:06.480
custom patches myself.

354
0:27:06.480 --> 0:27:07.480
How do you name that?

355
0:27:07.480 --> 0:27:11.080
And that becomes a more complex question.

356
0:27:11.080 --> 0:27:15.440
So internally, as I was saying with the integrity thing, is you can still reference everything

357
0:27:15.440 --> 0:27:16.960
with the hashes, right?

358
0:27:16.960 --> 0:27:22.280
I'm talking about binary, this hash, all down the stream.

359
0:27:22.280 --> 0:27:26.440
But when you want to express it externally, well, I guess that falls into the naming problem

360
0:27:26.440 --> 0:27:29.400
and you have to think about where that thing is going to be used.

361
0:27:29.400 --> 0:27:34.560
So if that is going to be a package, part of a distribution that you're doing, you may

362
0:27:34.560 --> 0:27:41.000
define your own set of package URLs, for example, or if it's not going to be, you can make up

363
0:27:41.000 --> 0:27:47.680
the license, but it falls more into the use case of what you're trying to do with distributing

364
0:27:47.680 --> 0:27:50.400
that budget software.

365
0:27:50.400 --> 0:27:51.400
So that's it.

366
0:27:51.400 --> 0:27:52.400
All right.

367
0:27:52.400 --> 0:27:53.400
Thank you.

368
0:27:53.400 --> 0:28:07.400
Okay, bye.


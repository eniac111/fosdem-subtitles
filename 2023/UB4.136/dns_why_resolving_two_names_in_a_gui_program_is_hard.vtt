WEBVTT

00:00.000 --> 00:10.800
Hello, this is Peter Mensik and he will tell you why resolving two names in a GUI program

00:10.800 --> 00:11.800
is hard.

00:11.800 --> 00:12.800
You ever tried?

00:12.800 --> 00:13.800
You know.

00:13.800 --> 00:16.800
If you've never tried, let's say.

00:16.800 --> 00:17.800
Good afternoon.

00:17.800 --> 00:19.520
My name is Peter Mensik.

00:19.520 --> 00:28.480
I work for Red Hat, so I took my hat with myself and this is a presentation about the resolution

00:28.480 --> 00:30.080
of two names in single program.

00:30.080 --> 00:31.480
It's not simple.

00:31.480 --> 00:36.480
So how do I resolve names?

00:36.480 --> 00:42.800
The system offers get other info call and it is protocol and family independent, requires

00:42.800 --> 00:49.520
just host name and service name and returns and this is somehow ordered and works on major

00:49.520 --> 00:51.960
OS operating systems.

00:51.960 --> 00:57.960
It is fine, but it blocks and we don't want that.

00:57.960 --> 01:05.900
We can work on that by using asynchronous libraries, which are usually DNS only.

01:05.900 --> 01:16.960
That might be good enough, but not always and typical applications should not be limited

01:16.960 --> 01:17.960
by that.

01:17.960 --> 01:21.960
So good for servers, not for work sessions.

01:21.960 --> 01:29.920
Because name resolution can be provided also by different providers than a DNS only and

01:29.920 --> 01:33.080
somehow are obsolete, some are not.

01:33.080 --> 01:41.280
So I think application should try to use common provider for any aim.

01:41.280 --> 01:48.800
We have, for example, system of the which provides different protocols, but does it

01:48.800 --> 01:53.280
in a way which makes, for example, DNS only application.

01:53.280 --> 01:57.560
So it's not a good solution, I think.

01:57.560 --> 02:03.000
How do I make multiple solutions from single program?

02:03.000 --> 02:05.520
I can use circuit interface.

02:05.520 --> 02:17.560
It works for DCP, UDP, present on any system, but I can handle dozens of connections from

02:17.560 --> 02:20.040
single program without problem.

02:20.040 --> 02:28.200
I just use poll or select and select only socket which has something ready for me.

02:28.200 --> 02:30.840
So why is blocking problem?

02:30.840 --> 02:43.920
Because the applications use not a blocking loop, but just event based loops and they

02:43.920 --> 02:53.040
are nonresponsive, if any code they use blocks, we want to avoid that.

02:53.040 --> 02:58.600
So modern applications are implemented by just callbacks to events they want to handle

02:58.600 --> 02:59.600
and nothing else.

02:59.600 --> 03:05.800
And then it spent most of time waiting for something and conserved CPU.

03:05.800 --> 03:09.240
So why not just working thread?

03:09.240 --> 03:17.200
Because creating a new thread is simple, but receiving result from finished work into the

03:17.200 --> 03:19.520
main thread is not so simple.

03:19.520 --> 03:27.800
And it increases complexity a lot of any application almost.

03:27.800 --> 03:33.880
So why that is needed anyway?

03:33.880 --> 03:45.120
Same resolution on Linux machine came from multiple modules.

03:45.120 --> 03:48.520
Some are local only on the machine.

03:48.520 --> 03:57.280
Some need to ask local or remote service and fetch, send some request and wait for some

03:57.280 --> 04:07.880
response it may tie or not and extract fetch addresses and return them to start collecting.

04:07.880 --> 04:15.440
And the most important waiting for timeout or activity or socket activity is implemented

04:15.440 --> 04:23.760
by any framework doing non-trivial applications anyway, because they need it.

04:23.760 --> 04:26.760
So how can it be made non-blocking?

04:26.760 --> 04:39.840
I think we should make common code to implement protocol specific plugins and DNS should be

04:39.840 --> 04:41.200
only one of them.

04:41.200 --> 04:50.200
And for example, multicast DNS or so and provide integration with custom loops in different

04:50.200 --> 05:00.520
applications because major graphical applications use Qt or G-REAP, but they may use some custom

05:00.520 --> 05:12.160
loops and it should require relatively small time, small code to integrate with them quite

05:12.160 --> 05:14.240
nice.

05:14.240 --> 05:21.360
So we should rewrite existing modules to use callbacks like modern applications and not

05:21.360 --> 05:29.840
just blocking because current modules are easy to write and maintain but difficult to

05:29.840 --> 05:34.560
use from normal applications.

05:34.560 --> 05:39.360
I think resolution should be simple even in multiple applications.

05:39.360 --> 05:49.240
So what do we need, just ability to add and modify socket into a watch list of events

05:49.240 --> 05:58.640
and be notified after time is up and if no activity occurred and provide some code to

05:58.640 --> 06:00.600
handle those events.

06:00.600 --> 06:08.800
And we don't care too much about time precision because we measure time out in seconds in

06:08.800 --> 06:14.800
DNS anyway, so who cares?

06:14.800 --> 06:17.400
So why not non-blocking?

06:17.400 --> 06:20.680
Because it creates no race conditions.

06:20.680 --> 06:23.520
It's almost unlimited.

06:23.520 --> 06:32.120
We are limited by number of socket is handled at that usually quite high, so we don't care.

06:32.120 --> 06:44.080
And it can allow many queries per thread without any problem.

06:44.080 --> 06:52.800
And resolution would become more easy in a single thread only, not scattered over multiple

06:52.800 --> 06:55.640
threads during runtime.

06:55.640 --> 07:05.040
So we should not care and of course, that's a separator would still make sense if this

07:05.040 --> 07:13.840
intensive applications are run but for small fetches of data from network, it's not necessary.

07:13.840 --> 07:21.160
I think server software should take advantage too.

07:21.160 --> 07:27.920
So unfortunately, there is no implementation yet.

07:27.920 --> 07:39.280
I think Pavel Shimmerda wrote quite a good start, called NetRishov and it provides a

07:39.280 --> 07:46.720
separate load double modules with different providers which can be used as building start.

07:46.720 --> 07:58.840
But its documentation is quite poor and non-blocking API, I try to describe what is needed, is

07:58.840 --> 08:05.080
missing and waiting for me, I think, to write.

08:05.080 --> 08:12.720
But I think we need protocol independent API for normal applications.

08:12.720 --> 08:23.440
And if we add just some metadata to strict others info provided by get other info today,

08:23.440 --> 08:34.480
I think we could handle also HTTPS resource records in library and not require common

08:34.480 --> 08:41.040
applications to handle that and implement it in each application.

08:41.040 --> 08:49.400
I guess there's many applications starting HTTP connection and it should be not reimplemented

08:49.400 --> 08:52.120
in every application doing that.

08:52.120 --> 09:03.800
Of course, some parts are similar and for example, multicast DNS can use the similar

09:03.800 --> 09:12.560
parts and could use the same calls with just asynchronous way.

09:12.560 --> 09:16.360
And that is almost all I had to say.

09:16.360 --> 09:22.360
So are there questions?

09:22.360 --> 09:23.360
No questions?

09:23.360 --> 09:34.280
So you want a solution for this, is there a way for Red Hat to lead this in the free

09:34.280 --> 09:37.320
desktop space maybe?

09:37.320 --> 09:40.880
Well maybe, yes.

09:40.880 --> 09:42.640
Who should lead the initiative?

09:42.640 --> 09:49.800
I am not sure, it's not official Red Hat initiative yet, so it's just my own opinion.

09:49.800 --> 09:55.720
So it's not like Red Hat already has project and involved people and such.

09:55.720 --> 10:03.400
So it's still what I think should be done, but not yet decided who should lead it on

10:03.400 --> 10:05.000
or who should cover that.

10:05.000 --> 10:12.640
I definitely want to talk about in the Red Hat, but it's in fact not clear to me which

10:12.640 --> 10:22.680
main linguist or organization should start and should organize this because it's maybe

10:22.680 --> 10:26.080
should be handled by GLEP people or I don't know.

10:26.080 --> 10:33.760
I would like to talk and hear what other thing about it because I'm not sure myself.

10:33.760 --> 10:42.880
It occurs to me that this problem statement is a lot like the get DNS problem statement

10:42.880 --> 10:45.520
plus things that aren't DNS.

10:45.520 --> 10:52.960
So I guess my recommendation would be why not look and see if you can enhance that API

10:52.960 --> 10:58.360
to include these non-DNS naming systems.

10:58.360 --> 10:59.360
Which API?

10:59.360 --> 11:13.280
Well, the question was why not enhance existing solutions like get DNS for example.

11:13.280 --> 11:22.000
I'm not sure how can you do that because I think that problem I have with system D trying

11:22.000 --> 11:23.000
to do that.

11:23.000 --> 11:26.080
Ah, it's far away.

11:26.080 --> 11:28.320
Here, yeah.

11:28.320 --> 11:33.440
This is a good example how to do that wrong because I think when application wants to

11:33.440 --> 11:38.600
talk DNS only and nothing else, it should be able to.

11:38.600 --> 11:47.000
So if I use the get DNS library and I think it should do only DNS, it should be able to

11:47.000 --> 11:48.000
choose.

11:48.000 --> 11:56.920
So how do I choose whether it's different protocols and how do I forward from get DNS

11:56.920 --> 12:02.880
library, what did it all do from there?

12:02.880 --> 12:14.240
Because I think get DNS expects DNS record types or such things and those are DNS specific.

12:14.240 --> 12:17.600
Those don't work in other protocols.

12:17.600 --> 12:21.160
Does that answer your question?

12:21.160 --> 12:29.120
Well, not so much a question as well as how to get DNS address this.

12:29.120 --> 12:37.120
Get DNS for all its faults is extremely flexible so you can enable and disable extensions.

12:37.120 --> 12:42.960
So you can say by default it does DNS only if you say I want to have a DNS that starts

12:42.960 --> 12:43.960
doing it.

12:43.960 --> 12:47.960
So there is a way to extend it and the same thing applies to record types.

12:47.960 --> 12:53.240
If you say I have a cookie record type, it fits within the framework to have it.

12:53.240 --> 12:56.280
So I think it's not a technical problem.

12:56.280 --> 13:02.200
Yes but, well, was it even a question?

13:02.200 --> 13:03.200
Yes.

13:03.200 --> 13:09.880
Please repeat the comments.

13:09.880 --> 13:15.360
It was a statement, I think statement, get DNS is quite flexible.

13:15.360 --> 13:17.320
Can I adjust to those?

13:17.320 --> 13:18.320
Yes, why not?

13:18.320 --> 13:26.800
I don't say we have to implement it from start but it should be generic enough so it would

13:26.800 --> 13:38.360
be future proof and I admit I don't know details of DNS, get DNS library so I can't comment

13:38.360 --> 13:39.360
details.

13:39.360 --> 13:43.960
I just ensured it can do that.

13:43.960 --> 13:51.440
Why not if it's another library but I think it eventually should land in libc or something

13:51.440 --> 13:55.000
like that after it proves it works.

13:55.000 --> 13:56.000
So maybe.

13:56.000 --> 13:59.000
So you had a slide, anybody else had a question?

13:59.000 --> 14:00.000
No?

14:00.000 --> 14:07.880
You had a slide about callbacks near the beginning.

14:07.880 --> 14:08.880
Callbacks.

14:08.880 --> 14:14.800
It doesn't matter.

14:14.800 --> 14:20.880
Do you expect every plugin to handle things like TLS or would TLS be something?

14:20.880 --> 14:24.040
No, I would like to TLS be.

14:24.040 --> 14:32.680
TLS is kind of special machine but it should be somewhere inside and what the user should

14:32.680 --> 14:38.040
receive should be ready to use socket to work on.

14:38.040 --> 14:47.600
So he just puts inside the name and service name and does the heavy machinery inside and

14:47.600 --> 14:51.840
well TLS socket is something over it.

14:51.840 --> 14:56.200
It's above normal connection so I think it should be extended.

14:56.200 --> 15:00.400
I'm not sure what should be.

15:00.400 --> 15:03.000
It's above that.

15:03.000 --> 15:05.720
I'm out of time.

15:05.720 --> 15:08.720
Yes, and also I think that's perfect.

15:08.720 --> 15:09.720
Thank you.

15:09.720 --> 15:36.400
Thank you.

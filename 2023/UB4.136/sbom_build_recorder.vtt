WEBVTT

00:00.000 --> 00:12.640
So, this is a presentation we're starting now, actually a new set of presentations in

00:12.640 --> 00:18.760
the dev room, not about complete less bombs, but about information that gets inside those

00:18.760 --> 00:19.760
bombs.

00:19.760 --> 00:21.640
And you'll be hearing more about it.

00:21.640 --> 00:28.760
So this is a presentation about a system to capture detailed information about building,

00:28.760 --> 00:37.000
and the work, I mean, almost all of the work happened by Fotis, and so I was just, yeah,

00:37.000 --> 00:41.440
you know, explaining what has to be done, design the problem.

00:41.440 --> 00:48.560
So we're going through a very typical agenda, you know, what we're trying to solve, how

00:48.560 --> 00:55.600
we solve it, how we solve it, and what was not solved and what we're going to do.

00:55.600 --> 01:03.120
Fotis happened as a GSOC project, Google summary of projects last year, of the Geforce organization,

01:03.120 --> 01:09.120
which is an umbrella organization for open source in Greece, and we have representatives

01:09.120 --> 01:10.120
there.

01:10.120 --> 01:14.320
Right, I'm not going to be reading the whole slide, you can read it and you can see it

01:14.320 --> 01:15.320
there.

01:15.320 --> 01:20.680
But there are umbrella organizations that they're looking over open source development

01:20.680 --> 01:28.880
in Greece, and they are, have been participated to GSOC for many years now.

01:28.880 --> 01:34.400
And one of the projects was wonderful that Fotis did.

01:34.400 --> 01:37.420
So let's start with the basics.

01:37.420 --> 01:39.680
What are we trying to solve?

01:39.680 --> 01:40.680
Right.

01:40.680 --> 01:44.240
There are different names for what we're trying to solve.

01:44.240 --> 01:49.480
Some people call it origin, some call it providence or pedigree or things.

01:49.480 --> 01:54.560
Maybe if I have a binary file, and I'm talking when I'm saying binary, I mean an executable

01:54.560 --> 02:03.560
or a library, not an image, right, or a PDF, but an object file, right, how was this created?

02:03.560 --> 02:04.560
Right.

02:04.560 --> 02:09.480
What are the sources that were used in order to create this binary?

02:09.480 --> 02:11.040
Right.

02:11.040 --> 02:14.720
What was the process that was used in order to create that?

02:14.720 --> 02:15.720
Yeah.

02:15.720 --> 02:19.520
So essentially these two things, right.

02:19.520 --> 02:25.800
The goal is to have extra information and meta information about all this stuff.

02:25.800 --> 02:35.080
And so in the end you know exactly what information is inside the binary, right, or was used to

02:35.080 --> 02:36.080
create it.

02:36.080 --> 02:37.080
Right.

02:37.080 --> 02:42.080
So think of it very simplistically.

02:42.080 --> 02:47.720
You know, if I have a command that builds a binary like a compiler that gets a source

02:47.720 --> 02:53.600
file and generates an executable, I want to record, okay, there was this process called

02:53.600 --> 03:01.920
cc and it read the wonderful file in c and it produces an executable.

03:01.920 --> 03:02.920
Right.

03:02.920 --> 03:05.800
That's what we want to solve.

03:05.800 --> 03:12.040
And then it gets tricky because as you can imagine, you know, okay, we're not obviously

03:12.040 --> 03:15.960
looking at all the things that are specified in the command line.

03:15.960 --> 03:16.960
Right.

03:16.960 --> 03:23.400
So when you do cc the hello world dot c, maybe it includes a file, right.

03:23.400 --> 03:26.120
You see language has include.

03:26.120 --> 03:28.880
So and this might be significant.

03:28.880 --> 03:30.120
It will definitely be significant.

03:30.120 --> 03:31.120
Right.

03:31.120 --> 03:36.200
So it might include slash your slash include slash stdio dot h.

03:36.200 --> 03:42.280
So I need to record that this file was also used in order to produce this binary.

03:42.280 --> 03:43.280
Right.

03:43.280 --> 03:48.360
And in the same way cc is just a program.

03:48.360 --> 03:52.080
I cannot just record the name because it does not mean anything.

03:52.080 --> 03:58.480
This is definitely a file and maybe it uses other linked libraries in order to do that.

03:58.480 --> 04:06.060
And when you produce the final executable, it definitely, it might include system libraries.

04:06.060 --> 04:07.680
And you want to record all this.

04:07.680 --> 04:08.680
Right.

04:08.680 --> 04:12.460
So we're not talking about, you know, passing the command line and seeing the three files

04:12.460 --> 04:14.000
mentioned there.

04:14.000 --> 04:17.800
We want to record everything happening in there.

04:17.800 --> 04:20.680
And obviously the command may not be explicit.

04:20.680 --> 04:22.200
It might just be make.

04:22.200 --> 04:23.200
Right.

04:23.200 --> 04:28.720
And you want to record everything happening with this build command.

04:28.720 --> 04:29.720
Right.

04:29.720 --> 04:31.520
Is the problem clear?

04:31.520 --> 04:33.280
Has anyone else?

04:33.280 --> 04:34.280
How's this problem?

04:34.280 --> 04:43.640
So the project, the whole project was okay.

04:43.640 --> 04:45.200
Let's build something like that.

04:45.200 --> 04:46.680
And how do you create a project?

04:46.680 --> 04:48.120
You say what I want to achieve.

04:48.120 --> 04:50.080
And this is a factual specification.

04:50.080 --> 04:51.080
Right.

04:51.080 --> 04:52.280
So we want a minimal interface.

04:52.280 --> 04:58.160
I don't want to tell developers how you have to change the compiler in order to do that.

04:58.160 --> 05:01.360
And I mean, the first idea would be to change the compiler.

05:01.360 --> 05:04.000
But yeah.

05:04.000 --> 05:05.880
Let's try to make it minimal.

05:05.880 --> 05:09.560
So ideally no changes to the command at all.

05:09.560 --> 05:10.560
Right.

05:10.560 --> 05:15.040
And I want to record the files being created or written.

05:15.040 --> 05:17.000
The files being read.

05:17.000 --> 05:19.620
All the processes being run.

05:19.620 --> 05:23.480
So for each of the files, I want to know the name.

05:23.480 --> 05:27.400
I want to know the full path because there might be difference.

05:27.400 --> 05:33.000
And then because I care about the, actually the content, I want the hash because the same

05:33.000 --> 05:35.880
file can be in different places with the same hash.

05:35.880 --> 05:38.080
So I have to know what it is.

05:38.080 --> 05:41.640
And you know, extra nice information, the size of the file, the model of the file, and

05:41.640 --> 05:42.640
stuff like that.

05:42.640 --> 05:43.640
I don't care.

05:43.640 --> 05:49.760
For every process that runs, I want to know, okay, what was the process?

05:49.760 --> 05:50.760
What were the arguments?

05:50.760 --> 05:52.120
What was the environment?

05:52.120 --> 05:58.080
Because as you probably know, every process reads maybe different according to the environment

05:58.080 --> 05:59.080
that it finds.

05:59.080 --> 06:00.080
Yeah.

06:00.080 --> 06:01.080
Okay.

06:01.080 --> 06:05.800
So the read times would be useful and stuff like that.

06:05.800 --> 06:06.800
Right.

06:06.800 --> 06:09.760
So this is the information that this is the functional specification.

06:09.760 --> 06:13.360
This is our wonderful problem.

06:13.360 --> 06:14.840
Right.

06:14.840 --> 06:16.720
And then for this, sat down and worked.

06:16.720 --> 06:18.400
No, no, wait.

06:18.400 --> 06:21.800
You'll take the mic.

06:21.800 --> 06:33.080
Well, he's not an engineer yet.

06:33.080 --> 06:37.120
He will be.

06:37.120 --> 06:40.680
Can you hear me now?

06:40.680 --> 06:46.360
Well, to tackle this problem, we created the command line tool named build recorder.

06:46.360 --> 06:50.640
You can see right here, build underscore recorder, which records information about the build

06:50.640 --> 06:52.880
on Linux.

06:52.880 --> 06:54.800
You said this is rather simple.

06:54.800 --> 07:02.800
All you have to do is prefix your build command, whatever that is, make GCC, Java compiler

07:02.800 --> 07:04.880
with the name of the executable.

07:04.880 --> 07:08.200
Build recorder runs transparently in the background while your build is running.

07:08.200 --> 07:11.920
You don't need to change anything in terms of your configuration, your source files,

07:11.920 --> 07:13.960
or even your build system.

07:13.960 --> 07:17.840
You can literally pick any project you like at this point in time, run with build recorder

07:17.840 --> 07:19.320
and it's to run.

07:19.320 --> 07:22.040
If it doesn't, please file a bug report.

07:22.040 --> 07:26.200
Now, as you can see, build recorder.

07:26.200 --> 07:31.760
Do you believe an asterisk exception may apply?

07:31.760 --> 07:32.760
Yes.

07:32.760 --> 07:38.200
Build recorder stores all of that information in an output file by default name the build

07:38.200 --> 07:39.840
does recorder dot out.

07:39.840 --> 07:43.400
But as you can see, you can use the does so option to actually supply an alternative file

07:43.400 --> 07:45.400
name.

07:45.400 --> 07:48.080
But what does it actually record?

07:48.080 --> 07:52.720
Well, pretty much everything we talked about in the functional specification.

07:52.720 --> 07:58.240
For its file, we have a list of attributes, its name, its size, its section of its contents,

07:58.240 --> 08:00.080
as well as its absolute path.

08:00.080 --> 08:05.280
Similarly, for its process, we store its command line with all its arguments, a start and end

08:05.280 --> 08:08.280
timestamp, as well as the environment.

08:08.280 --> 08:15.120
We also store a list of relationships, namely a process creates a process that is by forking

08:15.120 --> 08:20.680
or cloning or any of the revients, as well as a process opens a file for reading, a process

08:20.680 --> 08:26.160
opens a file for writing, or some processes are associated with executables.

08:26.160 --> 08:32.240
For example, if we were to run make, the system would probably run the file at slash user

08:32.240 --> 08:34.320
slash bin slash make.

08:34.320 --> 08:37.000
We want to record that as well.

08:37.000 --> 08:42.880
Now, all of this information is stored in the output file in RDF turtle format.

08:42.880 --> 08:45.440
That is being processed and filed.

08:45.440 --> 08:49.000
And all of the attributes, as well as the relationships, been the predicates.

08:49.000 --> 08:53.560
This is an example.

08:53.560 --> 08:59.040
For example, we have a process ID one, which is the initial compilation process.

08:59.040 --> 09:04.640
Imagine this is C, that's all for C. It starts at the current timestamp.

09:04.640 --> 09:09.280
We have another process, which is a preprocessor, the C preprocessor.

09:09.280 --> 09:11.160
It starts on another timestamp.

09:11.160 --> 09:17.520
We specify that the initial compiler actually created the preprocessor unit.

09:17.520 --> 09:27.600
And then we have the fact that we have a file, F1, foo dot C, which should be specified that

09:27.600 --> 09:31.960
PID2 reads F1.

09:31.960 --> 09:37.200
The preprocessor opens the file foo dot C, which has size 100 and the random hash of

09:37.200 --> 09:39.280
zeros.

09:39.280 --> 09:45.760
We have another F2, which is a temporary that the compiler might use, which as we can see,

09:45.760 --> 09:49.760
the process number two actually writes on this.

09:49.760 --> 09:56.720
We have another process, the classical CC, which merges those files together, the object

09:56.720 --> 09:57.720
file.

09:57.720 --> 10:02.160
Yeah, that's a general idea, I guess.

10:02.160 --> 10:03.920
Well, how is it implemented?

10:03.920 --> 10:07.360
How does it support all of those languages?

10:07.360 --> 10:12.640
The basic idea is that we basically want to record all of the files and processes that

10:12.640 --> 10:14.720
a process uses.

10:14.720 --> 10:19.720
And now if we think about it, all processing files are actually handled using system calls.

10:19.720 --> 10:23.880
So if we were to look at the system calls the process makes, we could see all of the

10:23.880 --> 10:26.200
files and processes that it uses.

10:26.200 --> 10:31.160
For example, if we look at the open family of system calls, open create and its variants,

10:31.160 --> 10:35.120
we can easily extract the name as well as the access mode.

10:35.120 --> 10:41.120
On the same note, for process all we have to do is trace, fork, clone and its variants

10:41.120 --> 10:49.200
as well as the execution system calls to actually see the process ID and the executable files.

10:49.200 --> 10:53.640
Now from the information that we extracted from these two, we can actually get even more

10:53.640 --> 10:58.880
information like the command line, the environment, a link to a file, which from there we can

10:58.880 --> 11:01.800
get the size that has in the absolute path.

11:01.800 --> 11:11.200
All of this happens on Linux, so we basically just need a way to trace system calls.

11:11.200 --> 11:13.320
Under Linux this is a fairly straightforward problem.

11:13.320 --> 11:17.520
We use P-trace, which directly copy and paste from the command line.

11:17.520 --> 11:24.440
It is primarily used to implement breakpoint debugging and system call tracing.

11:24.440 --> 11:25.780
Now that's it.

11:25.780 --> 11:30.880
It's a very simple program.

11:30.880 --> 11:36.400
For the duration of our project.

11:36.400 --> 11:47.440
So Fotis ran through the slides that did implement it, so we have lots of time now.

11:47.440 --> 11:50.480
It's not perfect, it has issues.

11:50.480 --> 11:56.160
Let's start discussing, you've got the major idea of how it works.

11:56.160 --> 11:57.360
What are the issues?

11:57.360 --> 12:08.440
The main two big buckets of issues are the real complexity and performance.

12:08.440 --> 12:11.800
So real complexity.

12:11.800 --> 12:17.600
Remember that we said it's a compiler that just reads a file and creates an executable.

12:17.600 --> 12:21.600
That was this wonderful diagram first.

12:21.600 --> 12:23.720
It's real life, it's not that simple.

12:23.720 --> 12:28.920
So on the right hand side you see a more typical idea, again, compiler.

12:28.920 --> 12:33.760
So when you have a compiler it actually calls three different processes.

12:33.760 --> 12:41.040
You call the first one, the first pass that reads the C file and creates an assembly file.

12:41.040 --> 12:46.000
And then you call the assembler that reads the assembly and creates an object file.

12:46.000 --> 12:52.880
And then you have the linker loader that reads the object file and creates an executable.

12:52.880 --> 12:59.400
So this is a very abstracted and ideal world situation.

12:59.400 --> 13:01.280
Real world is nothing like that.

13:01.280 --> 13:09.400
Real world may be like that if you have done your compiler courses and you have seen the

13:09.400 --> 13:11.840
different passes of compiler and stuff like that.

13:11.840 --> 13:19.240
And then you go to the real world where the hello world, which is just print hello world.c

13:19.240 --> 13:22.800
in current Linux, is this one.

13:22.800 --> 13:26.200
So I'm not going to be explaining every file in that one.

13:26.200 --> 13:34.600
But this is just the three lines of main hello world, print hello world.

13:34.600 --> 13:38.360
And if you compile it with GCC, it's better.

13:38.360 --> 13:44.680
So you see there are, what can I say, lots of include files being included.

13:44.680 --> 13:48.680
This is the first step of compiler, the compiler first step.

13:48.680 --> 13:55.840
So you think that it will only read hello world.c, but you have a hash include in order

13:55.840 --> 13:59.280
to include the printf definition.

13:59.280 --> 14:06.040
And this include, unfortunately, includes std def and libc header start.h and lots of

14:06.040 --> 14:08.640
other different files.

14:08.640 --> 14:14.680
And all these are files that have been read by the first process.

14:14.680 --> 14:20.520
And then it creates something else, which I'm not sure where it is somewhere.

14:20.520 --> 14:22.200
So it creates the temporary files.

14:22.200 --> 14:24.920
It creates the assembly there, if you can see.

14:24.920 --> 14:28.400
And then it creates the object files.

14:28.400 --> 14:36.160
And in order to create the final executable, lots of libraries have to be included.

14:36.160 --> 14:41.700
And this is, the library's been included in the executable.

14:41.700 --> 14:47.640
And then we have the other set of things that in order to run cc1, which is an executable,

14:47.640 --> 14:53.400
so a file in the file system, right, you have to load dynamically a number of other libraries

14:53.400 --> 14:56.400
that this executable depends on.

14:56.400 --> 15:02.280
So you have to record all these as well, because again, you have to have an accurate record

15:02.280 --> 15:05.080
of everything being used, right.

15:05.080 --> 15:14.020
So yeah, even the hello world example is complex, right.

15:14.020 --> 15:22.080
And you create and record lots of files and processes for that one, which means, oh, and

15:22.080 --> 15:26.200
a lot of them are going to be reused again and again and again, right.

15:26.200 --> 15:31.920
So when you had, for example, to compile two different files, right, they will both include,

15:31.920 --> 15:34.840
for example, std id.h, right.

15:34.840 --> 15:41.760
And ideally, you don't want to redo, you don't want to have another record, another box here

15:41.760 --> 15:44.600
for the second instance of the same file.

15:44.600 --> 15:48.680
On the other hand, it might not be the second instance of the same file, because something

15:48.680 --> 15:53.480
might have changed, right, while you're running, somebody else is calling a new compiler and

15:53.480 --> 15:56.080
it messes up all your binaries, right.

15:56.080 --> 16:00.840
And it's different binaries in the first run and the second run and all this stuff.

16:00.840 --> 16:05.280
So this brings us to having to do it efficiently.

16:05.280 --> 16:08.360
So you're doing performance.

16:08.360 --> 16:15.320
Well, performance isn't great at the current moment.

16:15.320 --> 16:22.040
I mean, we have to stop and restart the process multiple times using pit race.

16:22.040 --> 16:30.360
Like you stop the process, you read an entire file from disk, you has it.

16:30.360 --> 16:32.320
And then you restart the process.

16:32.320 --> 16:35.920
This relatively expensive, as you can imagine.

16:35.920 --> 16:42.320
The current profiling shows, like, when I built one on my system, normally it took nine

16:42.320 --> 16:43.320
minutes.

16:43.320 --> 16:45.960
With build recorder, it took 36 minutes.

16:45.960 --> 16:50.680
So yeah, it depends on your hardware, your hard disk, pretty much.

16:50.680 --> 16:56.000
But the good news are that there's a lot of room for improvements, because first of all,

16:56.000 --> 16:57.200
we haven't optimized anything.

16:57.200 --> 16:58.760
We're using plain arrays.

16:58.760 --> 17:01.640
We will be switching them with lookup tables.

17:01.640 --> 17:05.440
So we expect massive performance gain from this.

17:05.440 --> 17:10.120
In fact, when I tried the Hasmap implementation, we dropped this to 22 minutes.

17:10.120 --> 17:12.320
So that's optimistic.

17:12.320 --> 17:18.640
And another thing to mention is that pit race actually makes a multi-threaded process run

17:18.640 --> 17:21.720
as a single thread, which is an issue.

17:21.720 --> 17:28.020
So if you run, for example, make that's J8, you won't actually get the performance benefits

17:28.020 --> 17:31.660
of multiple threads.

17:31.660 --> 17:34.480
We have plans to change that as well.

17:34.480 --> 17:35.680
Lots of changes need to be made.

17:35.680 --> 17:40.880
In fact, we proposed it as another project for GSoC for this summer.

17:40.880 --> 17:43.400
And yeah, that's it pretty much.

17:43.400 --> 17:44.600
We hope to see an improvement.

17:44.600 --> 17:50.040
We can't really tell how what at the end the overhead shall be, like how much we can improve

17:50.040 --> 17:53.200
build recorder, but we will get there.

17:53.200 --> 17:59.280
Now, regarding future work, pretty much we improve performance.

17:59.280 --> 18:02.800
We plan to handle more programming systems.

18:02.800 --> 18:05.740
I mean, you can use it with any programming language you want.

18:05.740 --> 18:12.320
But if I was to, for example, compile a project in Java using a build system like Maven, Maven

18:12.320 --> 18:13.320
has web dependencies.

18:13.320 --> 18:16.000
It downloads packages from repositories.

18:16.000 --> 18:20.760
So ideally, we would like to also record those repositories, those URLs.

18:20.760 --> 18:26.040
This is another proposed project for the next GSoC.

18:26.040 --> 18:33.080
And next we have porting it to non-Linux systems like other Unixes, NetBSD, FreeBSD, the list

18:33.080 --> 18:34.080
goes on.

18:34.080 --> 18:38.680
The one thing that wasn't mentioned is that build recorder at the current time only works

18:38.680 --> 18:43.400
with Linux kernels of version 5.3 plus.

18:43.400 --> 18:51.960
Reason being that we're using some system calls that make it run on every architecture.

18:51.960 --> 18:56.320
So you can build it on a Raspberry Pi or any architecture of your like, any architecture

18:56.320 --> 18:58.640
that Linux supports.

18:58.640 --> 19:04.920
In expense of not having support for prior versions.

19:04.920 --> 19:05.920
That was us.

19:05.920 --> 19:06.920
Thank you.

19:06.920 --> 19:07.920
This is the URL.

19:07.920 --> 19:08.920
Yeah, the URL is there.

19:08.920 --> 19:09.920
Right.

19:09.920 --> 19:10.920
Yes.

19:10.920 --> 19:13.560
But we also have a QR code if you find it.

19:13.560 --> 19:14.560
Do not trust QR codes.

19:14.560 --> 19:15.560
You don't know.

19:15.560 --> 19:16.560
You're going to be re-crowned.

19:16.560 --> 19:17.560
Right.

19:17.560 --> 19:18.560
Yeah.

19:18.560 --> 19:23.200
This is not the same URL.

19:23.200 --> 19:25.240
So we're plenty enough time.

19:25.240 --> 19:26.240
Questions?

19:26.240 --> 19:27.240
We'll get it.

19:27.240 --> 19:28.240
I have a question.

19:28.240 --> 19:29.240
How do you want when the file is going that it can crash?

19:29.240 --> 19:40.240
Because the process might be too right for the file.

19:40.240 --> 19:41.600
Right.

19:41.600 --> 19:45.240
So the question was how do you know when to hash the file?

19:45.240 --> 19:51.520
Because when you open it for writing, you have to know when the modification ends.

19:51.520 --> 19:53.320
And then you should hash the result.

19:53.320 --> 19:54.560
Is that correct?

19:54.560 --> 19:56.880
And the answer is?

19:56.880 --> 20:02.360
Well, we hash the file when we find the closed system call.

20:02.360 --> 20:04.280
You wait for all modifications to happen.

20:04.280 --> 20:08.080
And then upon the closed system call, the process is stopped.

20:08.080 --> 20:10.960
So all the stuff is in there, the virtual memory.

20:10.960 --> 20:11.960
And the list goes on.

20:11.960 --> 20:14.120
So you hash the file at that time.

20:14.120 --> 20:19.240
We also hash the file when we open the file to see if it was seen before.

20:19.240 --> 20:22.240
So we can have a nice graph.

20:22.240 --> 20:29.200
In fact, the graph is just a dependency graph like a semantic web, as one makes sense.

20:29.200 --> 20:30.200
Sorry.

20:30.200 --> 20:32.200
I have a hand.

20:32.200 --> 20:36.080
So how do you consume all those information?

20:36.080 --> 20:39.080
I mean this graph.

20:39.080 --> 20:40.080
Nice.

20:40.080 --> 20:43.280
So the question was how do we consume this?

20:43.280 --> 20:44.800
We produce all this information.

20:44.800 --> 20:46.680
And how is this consumed?

20:46.680 --> 20:48.600
And the answer is this is a build recorder.

20:48.600 --> 20:50.560
It just records.

20:50.560 --> 20:53.680
Here's the information.

20:53.680 --> 20:55.280
We do not consume it at all.

20:55.280 --> 21:01.360
It might be used to create, to enter it into an S-form or something like that.

21:01.360 --> 21:02.680
That's completely out of this.

21:02.680 --> 21:05.600
This is just recording all this information.

21:05.600 --> 21:09.640
It's out of the scope of this project.

21:09.640 --> 21:10.640
Let's see.

21:10.640 --> 21:11.640
Sorry.

21:11.640 --> 21:15.440
Have you tried converting the data to SVDX?

21:15.440 --> 21:17.960
We tried converting the data to SVDX.

21:17.960 --> 21:19.160
Similar question to that one.

21:19.160 --> 21:21.040
No, we just record build.

21:21.040 --> 21:22.440
This is a build recorder.

21:22.440 --> 21:23.440
Right.

21:23.440 --> 21:27.480
Another tool might read this wonderful output and create whatever they want.

21:27.480 --> 21:30.320
It's way on the back.

21:30.320 --> 21:40.320
The question is have we explored EBPF, EBPVF, whatever.

21:40.320 --> 21:42.600
You know what I'm talking about yet.

21:42.600 --> 21:47.520
The answer is no.

21:47.520 --> 21:48.520
Not yet.

21:48.520 --> 21:53.520
I should list of pieces open on GitHub.

21:53.520 --> 21:55.520
Come and play.

21:55.520 --> 21:56.520
Sorry.

21:56.520 --> 22:01.800
You just mentioned Maven as an example that still can't be recorded.

22:01.800 --> 22:03.800
Could you just summarize why?

22:03.800 --> 22:06.040
Doesn't Maven also write the web?

22:06.040 --> 22:07.040
Oh yeah.

22:07.040 --> 22:08.040
Sure.

22:08.040 --> 22:11.040
The question is what's the problem with Maven that we said that it's going to be handled

22:11.040 --> 22:13.280
in the future?

22:13.280 --> 22:16.920
On this level, Maven works the same.

22:16.920 --> 22:18.320
We can't record the information.

22:18.320 --> 22:20.240
But will we just be recording?

22:20.240 --> 22:24.840
Hey, a jar file was just being used.

22:24.840 --> 22:29.480
We would like ideally to record because Maven already downloaded it.

22:29.480 --> 22:33.200
But we're just tracing the file system calls.

22:33.200 --> 22:35.920
So ideally we'd like also to record the information.

22:35.920 --> 22:39.220
Hey, we're downloading from this location this jar file.

22:39.220 --> 22:42.000
We put it there and then we use it.

22:42.000 --> 22:45.240
On the level that we're using it, we can record it right now.

22:45.240 --> 22:46.240
Sorry.

22:46.240 --> 22:47.240
Go ahead.

22:47.240 --> 22:48.240
I missed you.

22:48.240 --> 22:49.240
Sorry.

22:49.240 --> 22:55.680
Do you have a way to distinguish between a file which is written completely or a file

22:55.680 --> 22:57.480
which is modified?

22:57.480 --> 23:03.000
The question is do we distinguish between modifications to a file or completely new

23:03.000 --> 23:04.800
created file unwritten?

23:04.800 --> 23:05.800
And the answer is?

23:05.800 --> 23:10.400
Well, if we did that, the performance would be even worse.

23:10.400 --> 23:11.400
You can actually do it.

23:11.400 --> 23:16.480
You can actually add another handler that checks for write system calls and has the

23:16.480 --> 23:22.360
file every time, but imagine if you have to has the file every time someone calls write.

23:22.360 --> 23:23.360
I don't want to.

23:23.360 --> 23:24.360
Sorry.

23:24.360 --> 23:36.360
There's not a question just saying that yesterday the Dell maintainers in the Go dev room showed

23:31.720 --> 23:46.040
C trace with EBPF and their debugger and performances were pretty improved.

23:36.360 --> 23:46.040
how they replaced

23:46.040 --> 23:54.280
The comment was that there was a yesterday talk in the Go dev room that they showed using

23:54.280 --> 23:59.600
EBPF instead of P trace for similar work and performance was great.

23:59.600 --> 24:00.600
Something to explore.

24:00.600 --> 24:01.600
Yes.

24:01.600 --> 24:02.600
Go ahead.

24:02.600 --> 24:15.520
The question is, can we use the code that we're using?

24:15.520 --> 24:22.880
The question is, how does this compare to scan code trace code that suppose doing the

24:22.880 --> 24:24.280
same thing?

24:24.280 --> 24:27.360
We have not measured for that.

24:27.360 --> 24:28.960
I didn't even know that.

24:28.960 --> 24:29.960
Sorry.

24:29.960 --> 24:31.960
If it runs for the trace.

24:31.960 --> 24:33.960
Oh, if it runs for the trace.

24:33.960 --> 24:36.800
It's the same as trace.

24:36.800 --> 24:39.800
We don't.

24:39.800 --> 24:40.800
Any other questions?

24:40.800 --> 24:47.800
Could you just see inside like if you were building a Docker container, would it be able

24:47.800 --> 24:53.440
to see what's going on inside here or would you just run it in your Docker file?

24:53.440 --> 24:54.440
Wow.

24:54.440 --> 25:01.160
The question was, what does it happen when you run it while building a container?

25:01.160 --> 25:03.160
You mean?

25:03.160 --> 25:13.440
So again, remember, it just records all the system codes right into the disk.

25:13.440 --> 25:21.480
So when you run it while you do Docker build, it will record all the files being used in

25:21.480 --> 25:22.480
order.

25:22.480 --> 25:27.280
So if you do copy things, it will record everything being copied into the layer.

25:27.280 --> 25:28.280
Right.

25:28.280 --> 25:30.280
Stuff like that.

25:30.280 --> 25:31.280
Go ahead.

25:31.280 --> 25:34.680
To be honest, the command doesn't have to be a build command.

25:34.680 --> 25:36.880
You can literally plug in anything in there.

25:36.880 --> 25:38.520
LS or whatever.

25:38.520 --> 25:40.440
I mean, we are not supporting it.

25:40.440 --> 25:45.220
We can promise that we will be supporting it in the future, but you can do that.

25:45.220 --> 25:50.400
So anything you can imagine, it will run.

25:50.400 --> 25:53.320
It will probably record that Docker was called.

25:53.320 --> 25:56.160
Docker will still run all those dependencies.

25:56.160 --> 25:57.160
It will still try to compile.

25:57.160 --> 26:02.920
It will still link against all those libraries with.

26:02.920 --> 26:03.920
Anyways.

26:03.920 --> 26:15.080
Any thoughts about going off Linux to Windows?

26:15.080 --> 26:17.080
We added an open source conference.

26:17.080 --> 26:19.640
Repeat the question.

26:19.640 --> 26:20.640
Yes.

26:20.640 --> 26:26.600
They asked if we're planning to implement something like this on Windows.

26:26.600 --> 26:27.600
Well, no.

26:27.600 --> 26:28.600
First of all, it's hard.

26:28.600 --> 26:40.240
The idea would be great if I have developers who can do that and know the corresponding

26:40.240 --> 26:43.320
things magic to do in Windows.

26:43.320 --> 26:45.320
PR is welcome.

26:45.320 --> 26:47.320
It's an entirely different process.

26:47.320 --> 26:50.840
You don't have to all the system groups.

26:50.840 --> 26:51.840
We can work with that.

26:51.840 --> 27:00.480
It should see the interactions.

27:00.480 --> 27:03.840
There must be something in Windows, but I don't know.

27:03.840 --> 27:06.720
Are we done?

27:06.720 --> 27:07.720
Okay.

27:07.720 --> 27:22.400
Thank you all.

1
0:00:00.000 --> 0:00:11.920
We try to cover as many, it's unfortunate, there's so many topics to cover when you do

2
0:00:11.920 --> 0:00:16.320
mobile, for Linux mobile phones.

3
0:00:16.320 --> 0:00:22.280
Okay, welcome, looker, we have seen the first fair phone being used as a presenting device

4
0:00:22.280 --> 0:00:23.280
this morning.

5
0:00:23.280 --> 0:00:29.280
So now we are going to learn how to put the kernel on it.

6
0:00:29.280 --> 0:00:30.280
Thank you.

7
0:00:30.280 --> 0:00:38.480
Yeah, so kind of very quickly, who am I?

8
0:00:38.480 --> 0:00:41.920
My name is Zukavayz, I've been my learning phone since like 2017.

9
0:00:41.920 --> 0:00:46.320
I'm a post-marketless core team member and also my day job is Android platform engineer

10
0:00:46.320 --> 0:00:49.520
at Fairphone.

11
0:00:49.520 --> 0:00:53.280
Kind of about the background of how the whole situation, so I mean Qualcomm has a lot of

12
0:00:53.280 --> 0:00:56.560
lot of SOCs like system on the chip.

13
0:00:56.560 --> 0:01:02.240
There's quite a lot of actually already supported, so you see all these wonderful numbers here.

14
0:01:02.240 --> 0:01:06.040
There's the ones launched since 2018, so like in the last four years.

15
0:01:06.040 --> 0:01:11.120
And they are already supported in mainland as in they have a DTSI file and you can build

16
0:01:11.120 --> 0:01:12.880
something on top of this and it's booting.

17
0:01:12.880 --> 0:01:17.320
But of course there's also many, many others that are not supported, especially mid-end

18
0:01:17.320 --> 0:01:21.560
ones like the high-end ones are normally very quickly supported by Linaro.

19
0:01:21.560 --> 0:01:26.760
So like for example the SM8550 is the newest one, it was basically supported on day one

20
0:01:26.760 --> 0:01:33.480
or it's the same with the SM8450, but the other ones are not, but you can of course

21
0:01:33.480 --> 0:01:36.560
do it yourself.

22
0:01:36.560 --> 0:01:42.880
So the device Fairphone 4 used a Snapdragon 750G, so SM7 to the 5.

23
0:01:42.880 --> 0:01:48.520
Yeah, launched like a year and four months ago running the 4.19 kernel, which is already

24
0:01:48.520 --> 0:01:52.840
I mean we had 6.2 nearly.

25
0:01:52.840 --> 0:02:00.800
And yeah, like what I have so far working on the 6.1 or 6.2 kernel is like all the basics

26
0:02:00.800 --> 0:02:02.520
that you can see here.

27
0:02:02.520 --> 0:02:07.560
USB, including nearly the USB roll switching, so you can actually plug in for example a

28
0:02:07.560 --> 0:02:11.480
keyboard into the device and not just use it like as a gadget.

29
0:02:11.480 --> 0:02:16.760
I'm internal storage on the SD card, so the UFS and other things.

30
0:02:16.760 --> 0:02:21.560
Okay with backlight control, which is separate components, touchscreen, GPU, Wi-Fi.

31
0:02:21.560 --> 0:02:27.760
The remote procs, which is like separate cores on the SOC, they are actually all booting,

32
0:02:27.760 --> 0:02:33.040
but at least for the modem one I'm actually not really able to communicate with it.

33
0:02:33.040 --> 0:02:36.760
Mobile data could also in theory work, so the Linux driver initializes it, actually

34
0:02:36.760 --> 0:02:41.120
gets the remote prock up, it already does some initialization things there, but it's

35
0:02:41.120 --> 0:02:44.680
not really testable without actually having modem up.

36
0:02:44.680 --> 0:02:48.080
So it's kind of untested, it's upstream already.

37
0:02:48.080 --> 0:02:52.960
Vibration motor, the flash and torch LED, which is actually was upstream recently, or

38
0:02:52.960 --> 0:02:55.240
is in the process of getting upstreamed.

39
0:02:55.240 --> 0:03:00.160
The camera I2C bus, so I can actually talk with the I2C set and I2C get commands, I can

40
0:03:00.160 --> 0:03:06.300
talk with the camera and get the chip ID, so that works, but yeah not really much more

41
0:03:06.300 --> 0:03:07.760
useful with the camera yet.

42
0:03:07.760 --> 0:03:12.840
And also lots of other plumbing, which includes of course the I2C buses, interconnect, so

43
0:03:12.840 --> 0:03:19.840
like the bus scaling, cache scaling, and a bunch of other stuff that's useful.

44
0:03:19.840 --> 0:03:23.840
So kind of what isn't working yet after this one year in four months that I've been sort

45
0:03:23.840 --> 0:03:30.840
of working on it, I have some parts that are actually sort of working, it's like the speaker,

46
0:03:30.840 --> 0:03:36.480
I do have, I can get sound out of the speaker, it is super quiet for some reason, I don't

47
0:03:36.480 --> 0:03:41.840
know why, and also for some of the audio formats it actually doesn't play at all for some reason,

48
0:03:41.840 --> 0:03:43.560
I know.

49
0:03:43.560 --> 0:03:47.280
One of the problems with the speakers are also not very many phones in mainland actually,

50
0:03:47.280 --> 0:03:54.120
like Qualcomm phones have audio working, so it is still kind of a new area where a lot

51
0:03:54.120 --> 0:03:56.480
of things are kind of unknown.

52
0:03:56.480 --> 0:04:04.120
And Bluetooth I have based on some patch that I found, you can get it on the Bluetooth,

53
0:04:04.120 --> 0:04:08.720
you can make the phone discoverable, so you can see it on other devices, you can actually

54
0:04:08.720 --> 0:04:14.080
connect other devices to it, but when you try to on Bluetooth do the scan on command,

55
0:04:14.080 --> 0:04:16.360
like it just fails.

56
0:04:16.360 --> 0:04:19.080
So which is a bit weird, I don't know why.

57
0:04:19.080 --> 0:04:20.840
Probably need to spend some more time on it.

58
0:04:20.840 --> 0:04:24.520
And also like of course all the other parts that don't work, so the modem, as I said before,

59
0:04:24.520 --> 0:04:30.280
I can talk with the modem via QMI, so the Qualcomm protocol, but when I say please enable

60
0:04:30.280 --> 0:04:32.760
yourself it says nope.

61
0:04:32.760 --> 0:04:36.040
And doesn't say anything else, so it's kind of difficult.

62
0:04:36.040 --> 0:04:41.120
The microphones, which is also kind of a different part of the audio stack.

63
0:04:41.120 --> 0:04:46.200
The camera subsystem, which is used for receiving image data from the sensors, it's not working,

64
0:04:46.200 --> 0:04:52.440
including the time of light sensors, like for autofocus it can be used.

65
0:04:52.440 --> 0:04:58.040
The video encoding, decoding hardware, which is for, so you can play MP4 for example without

66
0:04:58.040 --> 0:05:00.760
actually doing the decoding of the CPU.

67
0:05:00.760 --> 0:05:07.600
And if see the fuel gauge, so for battery percentage and the charging driver, they are

68
0:05:07.600 --> 0:05:08.600
not working.

69
0:05:08.600 --> 0:05:15.200
I was able to port the one from the Fortnite 19 kernel to mainline, like just import it.

70
0:05:15.200 --> 0:05:19.760
It does sort of work the fuel gauge driver, but apparently there's some weird, really

71
0:05:19.760 --> 0:05:24.200
weird things going on in Android where like a user space component writes something to

72
0:05:24.200 --> 0:05:28.880
the kernel driver and without this nothing works basically.

73
0:05:28.880 --> 0:05:29.880
It's super weird.

74
0:05:29.880 --> 0:05:35.680
And also this part of a USB-C, what Alfred already demonstrated before, like it works

75
0:05:35.680 --> 0:05:40.200
in hardware, but it doesn't work with mainline, just with the downstream kernel.

76
0:05:40.200 --> 0:05:44.800
So kind of what is the things that you need to have when you're trying to get a new SoC

77
0:05:44.800 --> 0:05:45.800
app?

78
0:05:45.800 --> 0:05:51.080
It's like one of the first steps is kind of also figuring out how can you make this bootloader

79
0:05:51.080 --> 0:05:53.720
boot what you want to boot.

80
0:05:53.720 --> 0:06:00.680
Because in the Android case, like Google requires some special things going on and also the

81
0:06:00.680 --> 0:06:06.080
way that many SoC manufacturers implement it is kind of sometimes working, it is working

82
0:06:06.080 --> 0:06:09.520
for Android and that's good enough for them.

83
0:06:09.520 --> 0:06:15.320
But for example, the DTP operation which is device tree blob overlay, on some devices

84
0:06:15.320 --> 0:06:20.200
you can just fast boot erase it and then it doesn't try to apply some overlay for the

85
0:06:20.200 --> 0:06:24.400
old kernel on top of the new kernel which doesn't work and doesn't make any sense.

86
0:06:24.400 --> 0:06:29.560
On some devices just crashes and burns and yeah, it is not fun.

87
0:06:29.560 --> 0:06:32.200
So mostly you can do this.

88
0:06:32.200 --> 0:06:37.360
And there's also on new devices with GKI, the generic kernel image from Google, there's

89
0:06:37.360 --> 0:06:43.160
also the vendor boot partition, actually have no idea what this one does and how you need

90
0:06:43.160 --> 0:06:47.040
to wipe it to be able to do something.

91
0:06:47.040 --> 0:06:52.400
The serial console is actually quite useful if you can have access to it in the bootloader

92
0:06:52.400 --> 0:06:54.280
if it doesn't boot.

93
0:06:54.280 --> 0:06:59.880
Like if you cannot even get Linux booting, normally on a serial console it will say what

94
0:06:59.880 --> 0:07:02.920
it's doing and why it's doing the things that you want to do.

95
0:07:02.920 --> 0:07:08.760
So yeah, on the Fairform 4, on the new SoC, I got the first boot actually after some hours

96
0:07:08.760 --> 0:07:12.440
of working on it which contains the early console.

97
0:07:12.440 --> 0:07:19.320
It's just basically already set up area where Linux driver can write to it and you get serial

98
0:07:19.320 --> 0:07:25.480
output and also display via simple frame buffer which is actually now way more easy than getting

99
0:07:25.480 --> 0:07:28.480
USB up or getting actually proper serial console up.

100
0:07:28.480 --> 0:07:34.720
So it's super nice, simple frame buffers where the bootloader already sets up the display,

101
0:07:34.720 --> 0:07:38.720
yeah, the display hardware correctly.

102
0:07:38.720 --> 0:07:44.080
So Linux actually just has to write to some memory area the bytes for the pixels and it

103
0:07:44.080 --> 0:07:46.520
will just magically appear on the screen.

104
0:07:46.520 --> 0:07:48.640
It is very nice, very useful.

105
0:07:48.640 --> 0:07:55.240
And yeah, like the first boot was like 180 lines of the DTSI for the SoC and 40 lines

106
0:07:55.240 --> 0:07:56.560
for the device.

107
0:07:56.560 --> 0:07:58.480
So yeah, total 220.

108
0:07:58.480 --> 0:08:03.640
And like no single driver change was necessary for getting a completely new SoC booting anything

109
0:08:03.640 --> 0:08:04.640
basically.

110
0:08:04.640 --> 0:08:11.760
Yeah, I was basically just following what Iskren wrote on his blog, mainlining.dev.

111
0:08:11.760 --> 0:08:12.840
Super nice.

112
0:08:12.840 --> 0:08:17.600
It really contains useful steps for the very, very first things that you need to do.

113
0:08:17.600 --> 0:08:23.880
Yeah, so if you want to go a bit further, you very quickly start to need the clock driver

114
0:08:23.880 --> 0:08:27.520
which is GCC, global clock controller driver.

115
0:08:27.520 --> 0:08:33.440
There you can basically just take whatever Qualcomm gives you for example, for the 419

116
0:08:33.440 --> 0:08:38.320
kernel, copy it over, modify a few small things, but then it works.

117
0:08:38.320 --> 0:08:43.680
You also, at least for the 419 kernel, also these power domains which is like, it's some

118
0:08:43.680 --> 0:08:47.120
concept in Linux.

119
0:08:47.120 --> 0:08:48.760
It's also called GDSCs.

120
0:08:48.760 --> 0:08:52.960
You need to, they were a bit differently implemented, not in a GCC driver, but you should put them

121
0:08:52.960 --> 0:08:55.440
in GCC driver for mainlining.

122
0:08:55.440 --> 0:08:58.760
Now say more clocks with the RPMH.

123
0:08:58.760 --> 0:09:04.240
There's various other bits you should add to the DTS because otherwise it just won't,

124
0:09:04.240 --> 0:09:09.440
like random things won't work, which are dependencies that are not really expressed in the device

125
0:09:09.440 --> 0:09:15.560
tree, but the drivers still need for example, access to the S-MAM for doing various things.

126
0:09:15.560 --> 0:09:19.400
These data definitions are basically all the same and downstream, so you can also mostly

127
0:09:19.400 --> 0:09:20.640
copy them over.

128
0:09:20.640 --> 0:09:24.960
Don't blindly copy them over because it will be a slightly different, but you can definitely

129
0:09:24.960 --> 0:09:28.000
get good inspiration of what you need to do.

130
0:09:28.000 --> 0:09:33.200
USB is of course kind of the next step because just staring at the tiny text on the screen

131
0:09:33.200 --> 0:09:37.120
is not very good debugging and users also don't have any input.

132
0:09:37.120 --> 0:09:40.720
You can do surprisingly much with simple frame buffer, but at some point you of course want

133
0:09:40.720 --> 0:09:41.720
USB.

134
0:09:41.720 --> 0:09:47.680
At some point also pin control driver, which is for the pin multiplexing.

135
0:09:47.680 --> 0:09:51.440
This is really only starts getting useful once you get to more advanced components,

136
0:09:51.440 --> 0:09:57.440
let's say for I2C and other things, and also regulators are important at some point.

137
0:09:57.440 --> 0:10:02.800
I think that's actually, I don't know if you already need this for USB or not, but these

138
0:10:02.800 --> 0:10:06.480
are kind of the basic components that you need and then you can start building actually

139
0:10:06.480 --> 0:10:11.520
enabling various components that you find like the flash driver, the vibration mode,

140
0:10:11.520 --> 0:10:17.360
and things that talk I2C and things that talk other protocols.

141
0:10:17.360 --> 0:10:20.160
Of course, lots of things that can go wrong.

142
0:10:20.160 --> 0:10:24.160
The IMMU is especially on new Qualcomm chips, it's kind of annoying.

143
0:10:24.160 --> 0:10:28.880
I mean it's less annoying than old ones, but it's still annoying because a lot of things,

144
0:10:28.880 --> 0:10:36.440
like some things that you do, I'm immune directly first, so what's a bit different

145
0:10:36.440 --> 0:10:41.400
between downstream current and also main line is the bootloader already initializes something

146
0:10:41.400 --> 0:10:46.360
in this memory segregation or like SMMU is also called.

147
0:10:46.360 --> 0:10:50.480
Initialize some things for the bootloader to use for example for the internal storage

148
0:10:50.480 --> 0:10:58.200
already initialized it, this normally gets on downstream kernel, it just continues using

149
0:10:58.200 --> 0:11:00.460
those and add some ones on top.

150
0:11:00.460 --> 0:11:06.360
On main line they actually get wiped completely and that need to be reset up by Linux, which

151
0:11:06.360 --> 0:11:12.600
causes some problems if the downstream kernel doesn't express like which IMMU to use, for

152
0:11:12.600 --> 0:11:19.480
example for UFS is a very bad example, it's a very good example where it is bad.

153
0:11:19.480 --> 0:11:27.640
You kind of need to find out there is a patch, you can actually dump the mappings and you

154
0:11:27.640 --> 0:11:29.720
can use this to figure out what it is.

155
0:11:29.720 --> 0:11:35.400
Also the devices really like to reboot when anything is not really right, if you access

156
0:11:35.400 --> 0:11:39.400
some register and some clock isn't on that it requires, it just reboots, it doesn't give

157
0:11:39.400 --> 0:11:41.560
you a kernel panic, it just reboots.

158
0:11:41.560 --> 0:11:46.680
You're writing to wrong register, it reboots, the IMMU is defined wrong, it just reboots.

159
0:11:46.680 --> 0:11:51.200
Everything for IMMU it actually sometimes gives you a message of why or at least that

160
0:11:51.200 --> 0:11:55.520
something isn't correct.

161
0:11:55.520 --> 0:12:00.200
For printing what I've actually used sometimes is just printing the current line where it

162
0:12:00.200 --> 0:12:05.080
isn't a driver, like sprinkling this everywhere, adding a sleep of like half a second and then

163
0:12:05.080 --> 0:12:10.160
seeing like oh this is the last line that I was seeing, so it's probably messing up

164
0:12:10.160 --> 0:12:11.160
there.

165
0:12:11.160 --> 0:12:16.240
Maybe also increasing the sleeps because sometimes the flushing doesn't happen, like

166
0:12:16.240 --> 0:12:20.160
printing it on the screen actually is a bit slow.

167
0:12:20.160 --> 0:12:26.360
Also I feel like once you have more USB up, you can actually also build various drivers

168
0:12:26.360 --> 0:12:33.280
as modules and this way actually it's not built in, where it's built in it loads like

169
0:12:33.280 --> 0:12:41.200
it's like kernel log second 0.5 which is quite early and if it then crashes immediately you

170
0:12:41.200 --> 0:12:42.840
don't really have any time to beat the debug.

171
0:12:42.840 --> 0:12:46.360
But if you build this module you can load it later and actually have something set up

172
0:12:46.360 --> 0:12:49.720
over already.

173
0:12:49.720 --> 0:12:54.120
What is important to do if you work on this?

174
0:12:54.120 --> 0:12:59.400
Actually if you have anything working, if you have something working progress just commit

175
0:12:59.400 --> 0:13:04.720
this into your repository already to have a reference point to go back to because sometimes

176
0:13:04.720 --> 0:13:12.280
one single line change will fix everything or break everything.

177
0:13:12.280 --> 0:13:16.160
The first commit doesn't have to be perfect obviously.

178
0:13:16.160 --> 0:13:20.600
But also don't let this skid branch that you have lying around once you have something

179
0:13:20.600 --> 0:13:24.560
working, don't let it sit around in your local repository on your GitHub fork or in your

180
0:13:24.560 --> 0:13:30.640
GitHub repository wherever and don't upstream it because then it will just drop there and

181
0:13:30.640 --> 0:13:33.760
nobody will know that it's there and they will probably, like this next person has to

182
0:13:33.760 --> 0:13:37.800
do exactly the same thing again even though you have already got it working.

183
0:13:37.800 --> 0:13:41.480
So like already start up streaming your patches early, like if you have simple frame buffer

184
0:13:41.480 --> 0:13:43.840
booting on the device upstream it.

185
0:13:43.840 --> 0:13:48.160
It would be very nice because there's also better overview of which SSEs have already

186
0:13:48.160 --> 0:13:52.840
been worked on and it's very nice.

187
0:13:52.840 --> 0:13:56.200
Of course when you upstream it you also have to do some extra things for example adding

188
0:13:56.200 --> 0:14:00.520
the new compatible strings that are used in the device tree added to the documentation

189
0:14:00.520 --> 0:14:06.320
and do some things there but it's normally, yeah, some extra work but it's really not

190
0:14:06.320 --> 0:14:07.320
too bad.

191
0:14:07.320 --> 0:14:11.840
And also you have patches just because of how Linux development works just takes some

192
0:14:11.840 --> 0:14:15.800
time to get upstream.

193
0:14:15.800 --> 0:14:20.000
So like two months later if you go to, if you re-best a new version your patches are

194
0:14:20.000 --> 0:14:24.400
already there so you can build on top and don't have like 100 patches lying in your

195
0:14:24.400 --> 0:14:25.400
own tree.

196
0:14:25.400 --> 0:14:27.760
Also like git send email is not difficult.

197
0:14:27.760 --> 0:14:33.520
If there's a one for guide git send email.io from the source developers it explains super

198
0:14:33.520 --> 0:14:39.040
nice once you have configured once just works.

199
0:14:39.040 --> 0:14:40.040
Thanks for listening.

200
0:14:40.040 --> 0:15:00.960
In case you have one minute for questions we can make a tool.

201
0:15:00.960 --> 0:15:05.560
When you get GPU working you should also actually get the display hardware working properly.

202
0:15:05.560 --> 0:15:09.840
So this was fortunately done for this.

203
0:15:09.840 --> 0:15:15.960
SSE was done by Conrad who knows a lot there like he got the display hardware completely

204
0:15:15.960 --> 0:15:19.120
up in the GPU also.

205
0:15:19.120 --> 0:15:21.920
This is used for actually because simple frame buffer you cannot turn off the screen you

206
0:15:21.920 --> 0:15:27.520
cannot basically do anything except just write pixels to memory, write data to or write bytes

207
0:15:27.520 --> 0:15:30.920
to memory area and that's it.

208
0:15:30.920 --> 0:15:34.920
Yeah so you actually need to get the display hardware also up but then you also can get

209
0:15:34.920 --> 0:15:36.080
the GPU up.

210
0:15:36.080 --> 0:15:41.320
And yeah this one works really well in mainline like I ran performance benchmark on and it's

211
0:15:41.320 --> 0:15:45.120
actually not too bad it's actually relatively close to the downstream version.

212
0:15:45.120 --> 0:15:46.120
I've contributed to the SDM 625.

213
0:15:46.120 --> 0:15:56.120
Like how to upstream and manage the complexity of panels, generated planets?

214
0:15:56.120 --> 0:16:02.000
I don't know panels.

215
0:16:02.000 --> 0:16:06.080
Yeah the panel drivers are still I think in general a question of like how they should

216
0:16:06.080 --> 0:16:12.400
be handled upstream because in theory I think the panel drivers are not really generic or

217
0:16:12.400 --> 0:16:18.760
mean they are not generic but in theory they are relevant to the display controller and

218
0:16:18.760 --> 0:16:25.240
not actually a panel itself which is two separate parts but like without having actually access

219
0:16:25.240 --> 0:16:28.880
to like all the documentation that I like internal to the company you won't find out

220
0:16:28.880 --> 0:16:35.240
which which driver this actually is and currently let them sit around in your tree.

221
0:16:35.240 --> 0:16:40.200
There I mean most of them you can also just generate from a downstream DTV and it works

222
0:16:40.200 --> 0:16:42.760
so good enough for now.

223
0:16:42.760 --> 0:16:47.960
At some point we probably figured out but the MSM 8 9 16 people also they they have

224
0:16:47.960 --> 0:16:50.960
like already like 20 or 30 panels there.

225
0:16:50.960 --> 0:17:05.000
I think trust is always running so like the bootloader which is like it is a sign binary

226
0:17:05.000 --> 0:17:10.560
and you cannot really replace it without having access to the to the sign in keys.

227
0:17:10.560 --> 0:17:15.160
It is running I think and it also I think this is the thing that kills your that kills

228
0:17:15.160 --> 0:17:17.760
the phone like when you're doing something wrong.

229
0:17:17.760 --> 0:17:21.800
I don't know you can get rid of it you can probably somehow communicate with it.

230
0:17:21.800 --> 0:17:26.360
I know that normally the fingerprint sensor is handled via trust zone as like you actually

231
0:17:26.360 --> 0:17:32.080
talk to trust zone for the fingerprints but I actually don't know how this works.

232
0:17:32.080 --> 0:17:48.200
Thank you very much.


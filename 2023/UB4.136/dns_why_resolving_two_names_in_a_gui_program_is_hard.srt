1
0:00:00.000 --> 0:00:10.800
Hello, this is Peter Mensik and he will tell you why resolving two names in a GUI program

2
0:00:10.800 --> 0:00:11.800
is hard.

3
0:00:11.800 --> 0:00:12.800
You ever tried?

4
0:00:12.800 --> 0:00:13.800
You know.

5
0:00:13.800 --> 0:00:16.800
If you've never tried, let's say.

6
0:00:16.800 --> 0:00:17.800
Good afternoon.

7
0:00:17.800 --> 0:00:19.520
My name is Peter Mensik.

8
0:00:19.520 --> 0:00:28.480
I work for Red Hat, so I took my hat with myself and this is a presentation about the resolution

9
0:00:28.480 --> 0:00:30.080
of two names in single program.

10
0:00:30.080 --> 0:00:31.480
It's not simple.

11
0:00:31.480 --> 0:00:36.480
So how do I resolve names?

12
0:00:36.480 --> 0:00:42.800
The system offers get other info call and it is protocol and family independent, requires

13
0:00:42.800 --> 0:00:49.520
just host name and service name and returns and this is somehow ordered and works on major

14
0:00:49.520 --> 0:00:51.960
OS operating systems.

15
0:00:51.960 --> 0:00:57.960
It is fine, but it blocks and we don't want that.

16
0:00:57.960 --> 0:01:05.900
We can work on that by using asynchronous libraries, which are usually DNS only.

17
0:01:05.900 --> 0:01:16.960
That might be good enough, but not always and typical applications should not be limited

18
0:01:16.960 --> 0:01:17.960
by that.

19
0:01:17.960 --> 0:01:21.960
So good for servers, not for work sessions.

20
0:01:21.960 --> 0:01:29.920
Because name resolution can be provided also by different providers than a DNS only and

21
0:01:29.920 --> 0:01:33.080
somehow are obsolete, some are not.

22
0:01:33.080 --> 0:01:41.280
So I think application should try to use common provider for any aim.

23
0:01:41.280 --> 0:01:48.800
We have, for example, system of the which provides different protocols, but does it

24
0:01:48.800 --> 0:01:53.280
in a way which makes, for example, DNS only application.

25
0:01:53.280 --> 0:01:57.560
So it's not a good solution, I think.

26
0:01:57.560 --> 0:02:03.000
How do I make multiple solutions from single program?

27
0:02:03.000 --> 0:02:05.520
I can use circuit interface.

28
0:02:05.520 --> 0:02:17.560
It works for DCP, UDP, present on any system, but I can handle dozens of connections from

29
0:02:17.560 --> 0:02:20.040
single program without problem.

30
0:02:20.040 --> 0:02:28.200
I just use poll or select and select only socket which has something ready for me.

31
0:02:28.200 --> 0:02:30.840
So why is blocking problem?

32
0:02:30.840 --> 0:02:43.920
Because the applications use not a blocking loop, but just event based loops and they

33
0:02:43.920 --> 0:02:53.040
are nonresponsive, if any code they use blocks, we want to avoid that.

34
0:02:53.040 --> 0:02:58.600
So modern applications are implemented by just callbacks to events they want to handle

35
0:02:58.600 --> 0:02:59.600
and nothing else.

36
0:02:59.600 --> 0:03:05.800
And then it spent most of time waiting for something and conserved CPU.

37
0:03:05.800 --> 0:03:09.240
So why not just working thread?

38
0:03:09.240 --> 0:03:17.200
Because creating a new thread is simple, but receiving result from finished work into the

39
0:03:17.200 --> 0:03:19.520
main thread is not so simple.

40
0:03:19.520 --> 0:03:27.800
And it increases complexity a lot of any application almost.

41
0:03:27.800 --> 0:03:33.880
So why that is needed anyway?

42
0:03:33.880 --> 0:03:45.120
Same resolution on Linux machine came from multiple modules.

43
0:03:45.120 --> 0:03:48.520
Some are local only on the machine.

44
0:03:48.520 --> 0:03:57.280
Some need to ask local or remote service and fetch, send some request and wait for some

45
0:03:57.280 --> 0:04:07.880
response it may tie or not and extract fetch addresses and return them to start collecting.

46
0:04:07.880 --> 0:04:15.440
And the most important waiting for timeout or activity or socket activity is implemented

47
0:04:15.440 --> 0:04:23.760
by any framework doing non-trivial applications anyway, because they need it.

48
0:04:23.760 --> 0:04:26.760
So how can it be made non-blocking?

49
0:04:26.760 --> 0:04:39.840
I think we should make common code to implement protocol specific plugins and DNS should be

50
0:04:39.840 --> 0:04:41.200
only one of them.

51
0:04:41.200 --> 0:04:50.200
And for example, multicast DNS or so and provide integration with custom loops in different

52
0:04:50.200 --> 0:05:00.520
applications because major graphical applications use Qt or G-REAP, but they may use some custom

53
0:05:00.520 --> 0:05:12.160
loops and it should require relatively small time, small code to integrate with them quite

54
0:05:12.160 --> 0:05:14.240
nice.

55
0:05:14.240 --> 0:05:21.360
So we should rewrite existing modules to use callbacks like modern applications and not

56
0:05:21.360 --> 0:05:29.840
just blocking because current modules are easy to write and maintain but difficult to

57
0:05:29.840 --> 0:05:34.560
use from normal applications.

58
0:05:34.560 --> 0:05:39.360
I think resolution should be simple even in multiple applications.

59
0:05:39.360 --> 0:05:49.240
So what do we need, just ability to add and modify socket into a watch list of events

60
0:05:49.240 --> 0:05:58.640
and be notified after time is up and if no activity occurred and provide some code to

61
0:05:58.640 --> 0:06:00.600
handle those events.

62
0:06:00.600 --> 0:06:08.800
And we don't care too much about time precision because we measure time out in seconds in

63
0:06:08.800 --> 0:06:14.800
DNS anyway, so who cares?

64
0:06:14.800 --> 0:06:17.400
So why not non-blocking?

65
0:06:17.400 --> 0:06:20.680
Because it creates no race conditions.

66
0:06:20.680 --> 0:06:23.520
It's almost unlimited.

67
0:06:23.520 --> 0:06:32.120
We are limited by number of socket is handled at that usually quite high, so we don't care.

68
0:06:32.120 --> 0:06:44.080
And it can allow many queries per thread without any problem.

69
0:06:44.080 --> 0:06:52.800
And resolution would become more easy in a single thread only, not scattered over multiple

70
0:06:52.800 --> 0:06:55.640
threads during runtime.

71
0:06:55.640 --> 0:07:05.040
So we should not care and of course, that's a separator would still make sense if this

72
0:07:05.040 --> 0:07:13.840
intensive applications are run but for small fetches of data from network, it's not necessary.

73
0:07:13.840 --> 0:07:21.160
I think server software should take advantage too.

74
0:07:21.160 --> 0:07:27.920
So unfortunately, there is no implementation yet.

75
0:07:27.920 --> 0:07:39.280
I think Pavel Shimmerda wrote quite a good start, called NetRishov and it provides a

76
0:07:39.280 --> 0:07:46.720
separate load double modules with different providers which can be used as building start.

77
0:07:46.720 --> 0:07:58.840
But its documentation is quite poor and non-blocking API, I try to describe what is needed, is

78
0:07:58.840 --> 0:08:05.080
missing and waiting for me, I think, to write.

79
0:08:05.080 --> 0:08:12.720
But I think we need protocol independent API for normal applications.

80
0:08:12.720 --> 0:08:23.440
And if we add just some metadata to strict others info provided by get other info today,

81
0:08:23.440 --> 0:08:34.480
I think we could handle also HTTPS resource records in library and not require common

82
0:08:34.480 --> 0:08:41.040
applications to handle that and implement it in each application.

83
0:08:41.040 --> 0:08:49.400
I guess there's many applications starting HTTP connection and it should be not reimplemented

84
0:08:49.400 --> 0:08:52.120
in every application doing that.

85
0:08:52.120 --> 0:09:03.800
Of course, some parts are similar and for example, multicast DNS can use the similar

86
0:09:03.800 --> 0:09:12.560
parts and could use the same calls with just asynchronous way.

87
0:09:12.560 --> 0:09:16.360
And that is almost all I had to say.

88
0:09:16.360 --> 0:09:22.360
So are there questions?

89
0:09:22.360 --> 0:09:23.360
No questions?

90
0:09:23.360 --> 0:09:34.280
So you want a solution for this, is there a way for Red Hat to lead this in the free

91
0:09:34.280 --> 0:09:37.320
desktop space maybe?

92
0:09:37.320 --> 0:09:40.880
Well maybe, yes.

93
0:09:40.880 --> 0:09:42.640
Who should lead the initiative?

94
0:09:42.640 --> 0:09:49.800
I am not sure, it's not official Red Hat initiative yet, so it's just my own opinion.

95
0:09:49.800 --> 0:09:55.720
So it's not like Red Hat already has project and involved people and such.

96
0:09:55.720 --> 0:10:03.400
So it's still what I think should be done, but not yet decided who should lead it on

97
0:10:03.400 --> 0:10:05.000
or who should cover that.

98
0:10:05.000 --> 0:10:12.640
I definitely want to talk about in the Red Hat, but it's in fact not clear to me which

99
0:10:12.640 --> 0:10:22.680
main linguist or organization should start and should organize this because it's maybe

100
0:10:22.680 --> 0:10:26.080
should be handled by GLEP people or I don't know.

101
0:10:26.080 --> 0:10:33.760
I would like to talk and hear what other thing about it because I'm not sure myself.

102
0:10:33.760 --> 0:10:42.880
It occurs to me that this problem statement is a lot like the get DNS problem statement

103
0:10:42.880 --> 0:10:45.520
plus things that aren't DNS.

104
0:10:45.520 --> 0:10:52.960
So I guess my recommendation would be why not look and see if you can enhance that API

105
0:10:52.960 --> 0:10:58.360
to include these non-DNS naming systems.

106
0:10:58.360 --> 0:10:59.360
Which API?

107
0:10:59.360 --> 0:11:13.280
Well, the question was why not enhance existing solutions like get DNS for example.

108
0:11:13.280 --> 0:11:22.000
I'm not sure how can you do that because I think that problem I have with system D trying

109
0:11:22.000 --> 0:11:23.000
to do that.

110
0:11:23.000 --> 0:11:26.080
Ah, it's far away.

111
0:11:26.080 --> 0:11:28.320
Here, yeah.

112
0:11:28.320 --> 0:11:33.440
This is a good example how to do that wrong because I think when application wants to

113
0:11:33.440 --> 0:11:38.600
talk DNS only and nothing else, it should be able to.

114
0:11:38.600 --> 0:11:47.000
So if I use the get DNS library and I think it should do only DNS, it should be able to

115
0:11:47.000 --> 0:11:48.000
choose.

116
0:11:48.000 --> 0:11:56.920
So how do I choose whether it's different protocols and how do I forward from get DNS

117
0:11:56.920 --> 0:12:02.880
library, what did it all do from there?

118
0:12:02.880 --> 0:12:14.240
Because I think get DNS expects DNS record types or such things and those are DNS specific.

119
0:12:14.240 --> 0:12:17.600
Those don't work in other protocols.

120
0:12:17.600 --> 0:12:21.160
Does that answer your question?

121
0:12:21.160 --> 0:12:29.120
Well, not so much a question as well as how to get DNS address this.

122
0:12:29.120 --> 0:12:37.120
Get DNS for all its faults is extremely flexible so you can enable and disable extensions.

123
0:12:37.120 --> 0:12:42.960
So you can say by default it does DNS only if you say I want to have a DNS that starts

124
0:12:42.960 --> 0:12:43.960
doing it.

125
0:12:43.960 --> 0:12:47.960
So there is a way to extend it and the same thing applies to record types.

126
0:12:47.960 --> 0:12:53.240
If you say I have a cookie record type, it fits within the framework to have it.

127
0:12:53.240 --> 0:12:56.280
So I think it's not a technical problem.

128
0:12:56.280 --> 0:13:02.200
Yes but, well, was it even a question?

129
0:13:02.200 --> 0:13:03.200
Yes.

130
0:13:03.200 --> 0:13:09.880
Please repeat the comments.

131
0:13:09.880 --> 0:13:15.360
It was a statement, I think statement, get DNS is quite flexible.

132
0:13:15.360 --> 0:13:17.320
Can I adjust to those?

133
0:13:17.320 --> 0:13:18.320
Yes, why not?

134
0:13:18.320 --> 0:13:26.800
I don't say we have to implement it from start but it should be generic enough so it would

135
0:13:26.800 --> 0:13:38.360
be future proof and I admit I don't know details of DNS, get DNS library so I can't comment

136
0:13:38.360 --> 0:13:39.360
details.

137
0:13:39.360 --> 0:13:43.960
I just ensured it can do that.

138
0:13:43.960 --> 0:13:51.440
Why not if it's another library but I think it eventually should land in libc or something

139
0:13:51.440 --> 0:13:55.000
like that after it proves it works.

140
0:13:55.000 --> 0:13:56.000
So maybe.

141
0:13:56.000 --> 0:13:59.000
So you had a slide, anybody else had a question?

142
0:13:59.000 --> 0:14:00.000
No?

143
0:14:00.000 --> 0:14:07.880
You had a slide about callbacks near the beginning.

144
0:14:07.880 --> 0:14:08.880
Callbacks.

145
0:14:08.880 --> 0:14:14.800
It doesn't matter.

146
0:14:14.800 --> 0:14:20.880
Do you expect every plugin to handle things like TLS or would TLS be something?

147
0:14:20.880 --> 0:14:24.040
No, I would like to TLS be.

148
0:14:24.040 --> 0:14:32.680
TLS is kind of special machine but it should be somewhere inside and what the user should

149
0:14:32.680 --> 0:14:38.040
receive should be ready to use socket to work on.

150
0:14:38.040 --> 0:14:47.600
So he just puts inside the name and service name and does the heavy machinery inside and

151
0:14:47.600 --> 0:14:51.840
well TLS socket is something over it.

152
0:14:51.840 --> 0:14:56.200
It's above normal connection so I think it should be extended.

153
0:14:56.200 --> 0:15:00.400
I'm not sure what should be.

154
0:15:00.400 --> 0:15:03.000
It's above that.

155
0:15:03.000 --> 0:15:05.720
I'm out of time.

156
0:15:05.720 --> 0:15:08.720
Yes, and also I think that's perfect.

157
0:15:08.720 --> 0:15:09.720
Thank you.

158
0:15:09.720 --> 0:15:36.400
Thank you.


WEBVTT

00:00.000 --> 00:13.360
All right. Hello, everyone. Thank you for packing the room. No pressure. As Peter mentioned,

00:13.360 --> 00:16.960
I'm Kevin Fleming. I've actually spoken at Fosdom quite a few times before, but never

00:16.960 --> 00:22.200
in the DNS room. So this was a bit of a stretch to think that I might even get a talk accepted

00:22.200 --> 00:28.140
here. And I'm thankful both that the team did and that you all decided to show up. So

00:28.140 --> 00:33.760
as he mentioned, I don't know if I called a mistake. I made a decision a few years ago

00:33.760 --> 00:37.920
about something that I wanted to do differently than I had been doing. And as a result, I

00:37.920 --> 00:45.800
am now running my own public DNS server. So this is done for personal basis. I don't do

00:45.800 --> 00:50.040
this for pay or anything like that. It's the zero profit part. Nobody pays me to do this.

00:50.040 --> 00:53.600
In fact, it actually costs money. So it's negative profit, really, if you want to think

00:53.600 --> 01:00.560
about it that way. Also, this is a bit odd, but I wrote these slides in a somewhat unusual

01:00.560 --> 01:05.600
way, where every title of a slide is actually a question from the audience, which I will

01:05.600 --> 01:12.960
then answer in the slide. They get somewhat humorous further into the presentation. So

01:12.960 --> 01:17.680
if someone in the audience wants to play the role of the person asking the questions as

01:17.680 --> 01:21.360
we go to each slide, that would be fantastic. In fact, you could all do it as a group. That

01:21.360 --> 01:25.480
would be even more fantastic. So if you decide to do that, that's great. If not, I will be

01:25.480 --> 01:26.480
happy to read them.

01:26.480 --> 01:27.480
What? Really?

01:27.480 --> 01:35.840
Yes. Exactly. Exactly. Yes. So all right. So start off with everybody in the audience

01:35.840 --> 01:40.600
who currently is responsible for running authoritative name servers that are reachable on the public

01:40.600 --> 01:50.000
internet. Raise your hand and keep your hand up. Okay. All of you. Wow. All right. Now,

01:50.000 --> 01:54.000
if you have your hand up, but you're doing that because you run an internet service provider,

01:54.000 --> 02:01.480
put your hand down. Oh, everybody. Okay. All right. All right. So we're down to less than

02:01.480 --> 02:04.160
a quarter of the ones who had their hands up originally. That's more than I thought,

02:04.160 --> 02:10.640
actually. I didn't think as many people were as strange as I am. So you can see with this

02:10.640 --> 02:15.840
up, I already covered most of this anyway, it's relatively easy to do. Obviously, because

02:15.840 --> 02:19.280
this is FOSLM, it wouldn't be talking about if it required non-free software. It does

02:19.280 --> 02:25.040
not require anything that's non-free software. It can be fun for the subset of humanity that

02:25.040 --> 02:31.520
would come to a room like this. And it's also not expensive to do. So all right. Now we're

02:31.520 --> 02:37.760
ready. We're going to the next slide. Okay. All right. Why would we do something like

02:37.760 --> 02:45.880
this? So the fun part we already covered. The second part is for years in my personal

02:45.880 --> 02:50.000
infrastructure, I had been using your pod off mill with hurricane electric. They're

02:50.000 --> 02:54.240
bigger in the US than they are here for hosting things. But the effort of free DNS hosting

02:54.240 --> 02:59.440
service, which I'd been using, was working fine. And then I decided I wanted to sort

02:59.440 --> 03:07.160
of enhance my DNS usage and implement DNSsec for SSHFP records so I could stop having to

03:07.160 --> 03:13.240
deal with SSH key distribution issues. And a couple of other things, like I wanted to

03:13.240 --> 03:19.720
get real TLS certificates for all of my services. And of course, five years ago, Let's Encrypt

03:19.720 --> 03:24.400
was just a new thing. And DNS challenges were the best way to do that. And blah, blah, blah.

03:24.400 --> 03:31.320
So the things I wanted, the DNS hosting service that I was using did not offer. So I thought,

03:31.320 --> 03:35.160
fine, I'll go find a different one. And I can't even remember where it came from. But

03:35.160 --> 03:41.320
years ago, some wonderful person on the internet used to maintain a Google spreadsheet of all

03:41.320 --> 03:46.560
of the DNS hosting providers, commercial and otherwise, and all these different attributes

03:46.560 --> 03:51.760
of what they supported. And so I went to that spreadsheet. And I filtered down to all the

03:51.760 --> 03:56.760
ones that had the things that I wanted. And there were three or four left. And none of

03:56.760 --> 04:02.160
them were ones I would actually have wanted to use. Most of them, because the minimum

04:02.160 --> 04:06.080
cost was too high. They were designed for large enterprises that are doing this sort

04:06.080 --> 04:11.680
of thing all the time. So I thought, all right, fine. I will consider another alternative.

04:11.680 --> 04:20.520
All right. What do you need? So for those of you who have been around on the internet

04:20.520 --> 04:24.800
for a much longer time than a lot of the people I see in the room who aren't old enough for

04:24.800 --> 04:32.280
this, if you ever had to fill out the actual paperwork to register a domain name with network

04:32.280 --> 04:36.320
solutions and fax it to them, you will know what I'm talking about. For those of you who

04:36.320 --> 04:42.120
went way over your head, don't worry about it. So it used to be a long time ago that

04:42.120 --> 04:45.920
this was a really complicated thing to do. Today, it's not such a complicated thing to

04:45.920 --> 04:50.840
do. So these are the really simple things you need. You need someplace to host the service

04:50.840 --> 04:56.280
that's going to be the source of truth for all of your zones. What do they contain? Obviously,

04:56.280 --> 05:00.000
you can choose to put that in lots of different places. I choose to put it on a private network

05:00.000 --> 05:04.880
that's not reachable from the internet because that's better, more secure that way. You need

05:04.880 --> 05:09.960
a few places on the internet where you can make your zones available to the internet.

05:09.960 --> 05:15.760
Preferably, those are not all in the same machine or all on the same network or all

05:15.760 --> 05:19.640
in the same data center or preferably not even all on the same continent, really. It

05:19.640 --> 05:24.560
would be best if they're geographically distributed, if they're not all going to go down because

05:24.560 --> 05:28.080
you put them all in the same hosting provider and their control plane breaks all the time

05:28.080 --> 05:34.840
in Microsoft and their entire cloud infrastructure goes down all at once around the world. So

05:34.840 --> 05:38.400
keep those things in mind when you decide where to put these things. It's perfectly

05:38.400 --> 05:42.720
fine to put these on Raspberry Pis in your friend's houses if that's something you choose

05:42.720 --> 05:46.000
to do. If you have friends geographically distributed around the world who are willing

05:46.000 --> 05:52.360
to do that for you, that's fine. But there are plenty of other ways to do it as well.

05:52.360 --> 05:56.480
You will, of course, need DNS authoritative server software. There's lots of those out

05:56.480 --> 06:01.160
there. There's a bunch of people in this room who are responsible for PowerDNS, so I'm thankful

06:01.160 --> 06:06.880
for giving me the chance to do this. And then, and this is actually trickier than it would

06:06.880 --> 06:13.240
seem, your domain registrar, the place you host your domains, possibly the place you

06:13.240 --> 06:16.840
bought them from, although they don't have to be the same, needs to let you have the

06:16.840 --> 06:20.680
tools to set this up. They need to be able to let you specify your own name servers.

06:20.680 --> 06:25.000
Not all of them will. And if you want to do DNS sec, they have to let you upload DS records

06:25.000 --> 06:30.720
for your signing keys for your zones. Fewer of them will do that. Many of them that are

06:30.720 --> 06:34.560
especially the free ones do not give you the ability to do that.

06:34.560 --> 06:43.360
Is that really it? Yeah, that's really it. There's not a whole lot required to do this.

06:43.360 --> 06:47.520
Now this is all written from the point of view of me doing this personally. I would

06:47.520 --> 06:52.440
actually be happy to use this same kind of structure if I was doing this for, let's say,

06:52.440 --> 06:56.960
a small nonprofit organization or something like that. I would not go in this specific

06:56.960 --> 07:01.600
direction if I was responsible for doing this for 10,000 domains for a bunch of people who

07:01.600 --> 07:07.240
are paying me to do that. Things would have to be much more complicated in that situation.

07:07.240 --> 07:13.680
Now going back to the way things were decades and decades ago, network solutions time. Back

07:13.680 --> 07:20.480
then, we did not have Google Public DNS, Cloud for Public DNS, Quad 9 Public DNS, massive

07:20.480 --> 07:25.880
ISPs with millions and millions or billions of subscribers that ran resolvers on behalf

07:25.880 --> 07:31.880
of their clients. Back then, if you wanted to host your own zones, your own authoritative

07:31.880 --> 07:36.640
servers, pretty much every small chunk of the internet was going to, if it needed to

07:36.640 --> 07:41.120
know an answer for one of your names, it was going to be reaching out to your servers to

07:41.120 --> 07:46.280
get it because there was no caching layer in between them and you. That's no longer

07:46.280 --> 07:49.840
true. Obviously, lots of us also run our own resolvers.

07:49.840 --> 07:55.000
We are going to be part of the noise that's hitting your authority of servers. But if

07:55.000 --> 08:01.320
you have a website that millions and millions of people on mobile phones are going to touch,

08:01.320 --> 08:05.600
those mobile carriers, resolvers are going to go ask your servers for the answers and

08:05.600 --> 08:08.720
then hold on to them for however long you've told them they're allowed to hold on to them,

08:08.720 --> 08:13.360
a day or two days or a week or whatever is appropriate. So you don't really need big

08:13.360 --> 08:18.000
beefy servers to do this. Really, really tiny little machines are perfectly fine for doing

08:18.000 --> 08:25.640
this sort of thing. Also, even the smallest machines you can get in clouds nowadays have

08:25.640 --> 08:30.880
multi-gigahertz CPUs with very fast RAM. And as I think Stefan pointed out in his last

08:30.880 --> 08:35.680
talk, a normal, non-dynamic authoritative server is very fast. It's very predictable.

08:35.680 --> 08:39.360
It doesn't take a lot of time to come up with an answer. Usually all the data it needs is

08:39.360 --> 08:43.320
in memory already anyway. So these are not, they don't have to be really super powerful

08:43.320 --> 08:44.320
machines.

08:44.320 --> 08:48.920
Why did you do this? Yeah, so I covered some of that already. Actually, I kind of did that

08:48.920 --> 08:54.440
backwards, didn't I? I talked about that before I was supposed to. Darn it. So a couple of

08:54.440 --> 08:59.400
the things that I ran into when I was doing the search was there was quite a few of the

08:59.400 --> 09:04.040
available ones. If you just wanted to host one or two zones, they were okay. The prices

09:04.040 --> 09:08.000
were reasonable, actually considered doing it. At the time, I think I had seven. Now

09:08.000 --> 09:12.400
I probably got 11 or 12 for various different purposes because we all just grabbed domain

09:12.400 --> 09:17.360
names for projects and then never used them for anything, but you keep them around. So

09:17.360 --> 09:21.000
I thought that was a thread on the Fediverse about that. People ran, it's one round of

09:21.000 --> 09:27.960
poll. How many domain names do you own that you've never used? The number was high. So

09:27.960 --> 09:32.440
there were some where, you know, if you went above three, like it was $100 US dollars a

09:32.440 --> 09:38.400
month for the service to be able to do this. There were others who, shockingly, charged

09:38.400 --> 09:42.600
by query volume and not by the number of zones. It's like, well, I can't, I don't have the

09:42.600 --> 09:47.040
control over that. I mean, if someone starts hammering the servers, not paying attention

09:47.040 --> 09:52.360
to the TTLs, I don't want my bill to suddenly be $14,000 for this. This is crazy. So fine.

09:52.360 --> 10:01.560
We're not going to do that. All right. Ready. What do I use today? So like probably a lot

10:01.560 --> 10:07.240
of people at TOSDEM, I have at least one reasonably beefy computer at home, network

10:07.240 --> 10:11.960
storage appliance. So there's a container on that where I run the hidden primary authority

10:11.960 --> 10:17.960
of server. Many people who, there was lots of people who will not, who will choose not

10:17.960 --> 10:21.560
to put things in Amazon Web Services. I'm not going to complain one way or the other,

10:21.560 --> 10:29.040
choose whatever you like. I will say that their ARM based nano virtual machines are

10:29.040 --> 10:33.920
the cheapest machines I could find that were not VPSs, that I could actually install my

10:33.920 --> 10:39.400
own software on and open up my own ports and make them available to the internet. There

10:39.400 --> 10:43.000
are lots and lots and lots of cloud providers out there, obviously. And if you can do this

10:43.000 --> 10:48.600
with a, you know, one CPU graviton2 nano instance, you can certainly do it with a Raspberry Pi

10:48.600 --> 10:53.320
or some other small computer like that. If you weren't trying to use power to you, you

10:53.320 --> 10:57.400
could probably do it with an ESP32, although I don't think I want to try that, but you

10:57.400 --> 11:02.720
could probably do it. So, so I have three, I have two of those. And then I have a dedicated

11:02.720 --> 11:06.640
server in a data center, which I use for offsite backups and running my Mastodon server and

11:06.640 --> 11:10.840
matrix server and all that kind of stuff. I put another one there just because. And

11:10.840 --> 11:15.240
it gives me good distribution. One's on the west coast of the US, one's on a roughly east

11:15.240 --> 11:18.880
coast of North America. It's not in the US, it's in Canada. And then one of them is in

11:18.880 --> 11:24.040
Europe. So that works out fairly well. So, and then in our home network, because my home

11:24.040 --> 11:30.120
network is wildly over engineered, I have two, two PC engines, APUs, which are our border

11:30.120 --> 11:34.200
devices that connect us to the internet and handle all sorts of things. They're the ones

11:34.200 --> 11:39.680
that run the resolvers, the recursive resolvers my wife learned about when she saw the slides.

11:39.680 --> 11:42.800
And then of course, they also have a copy, they also have authoritative servers sitting

11:42.800 --> 11:49.520
right next to the resolvers for a reason that I will talk about in a minute. And now you

11:49.520 --> 11:54.000
don't have to read this because we're on the same topic. So I use Power DNS Auth Server

11:54.000 --> 11:59.880
on all of them. I use SQLite databases because they're really simple and I want to try to

11:59.880 --> 12:04.800
keep all of the machines except the primary as stateless as possible and simple to manage

12:04.800 --> 12:11.080
and deploy. That also means that I use DNS based distribution of the data. So it's not

12:11.080 --> 12:16.920
like a shared mess equal database or any of that sort of much more complicated thing.

12:16.920 --> 12:20.200
But again, since this is why I went back to before, I would not do this if I was doing

12:20.200 --> 12:24.560
this for 10,000 zones for paying customers. SQLite 3 would probably not be the best choice.

12:24.560 --> 12:29.400
Well, actually, SQLite 3 would probably be okay. AXR would not be okay in that situation

12:29.400 --> 12:35.120
because you'd be doing this constantly pushing out zone updates. And then because I use Ansible

12:35.120 --> 12:40.760
to manage all of my infrastructure, and since there was no actual good Ansible modules to

12:40.760 --> 12:46.320
poke at the Power DNS API to create zones and manage them and set up T-Sig keys, I wrote

12:46.320 --> 12:49.080
some which there's a link to at the end of the presentation.

12:49.080 --> 12:51.520
What was that cost?

12:51.520 --> 12:59.240
Oh, I thought you were asking for the Ansible modules. Good job. Good job. Excellent. So

12:59.240 --> 13:03.480
what is all this cost? So you already got the NAS putting another container and it's

13:03.480 --> 13:08.680
free, right? Especially if something is lightweight as a primary, a third-party server, almost

13:08.680 --> 13:16.040
no resources whatsoever. I translated all of the costs on paying AWS into Euro for you.

13:16.040 --> 13:20.600
You can see that it cost me less than four Euro a month to host those machines. Now,

13:20.600 --> 13:26.360
that includes paying for them for up front for three years. So because AWS basically

13:26.360 --> 13:32.520
cuts the price in half if you do that as opposed to paying for it on a monthly basis. But it's

13:32.520 --> 13:36.960
78 Euro for three years. If you decide two years in that you don't want those machines

13:36.960 --> 13:41.240
located there anymore and you're basically throwing away 20 Euro of upfront payment,

13:41.240 --> 13:46.180
that's not the end of the world. We're not talking about a gigantic amount of money here.

13:46.180 --> 13:49.080
And then because I have the rented server and the other data center, putting a server

13:49.080 --> 13:54.760
on that was free as well. The software, of course, is all free and the modules I wrote

13:54.760 --> 14:02.400
are also free. So cost is very low. The half of the cost per month is actually the storage

14:02.400 --> 14:08.120
cost from AWS for the root volume for the VMs. The actual cost of the VM is less than

14:08.120 --> 14:13.920
the storage cost if you pay for, if you do it this way. And it won't let you create a

14:13.920 --> 14:19.520
root volume that's smaller than eight gigabytes, even if you don't need that much. That's the

14:19.520 --> 14:26.720
small, well, I'm using the Debian AMI and it has a hard coded minimum of at least eight

14:21.520 --> 14:47.840
transcript certificates for all browser accessible and actually some non-browser accessible endpoints.

14:26.720 --> 14:30.560
gigabytes for the root volume. So I suppose I could make my own and try to cut that down

14:30.560 --> 14:36.240
by another few pennies or something like that. So what do I do with that? So as I mentioned

14:36.240 --> 14:47.840
before briefly, all of the network infrastructure I manage uses real

14:47.840 --> 14:52.320
I had been using self-signed certificates previously. For those of you who have done

14:52.320 --> 14:55.760
that, you know how painful that can be, having to make sure that everything has the right

14:55.760 --> 15:00.440
CA certificate to trust them and everything has, I don't want to do that anymore. So much

15:00.440 --> 15:06.920
easier to use Let's Encrypt for that. Similar thing for SSH. All of there's 25 different

15:06.920 --> 15:12.840
SSH-able endpoints across this infrastructure. Managing key rotation for them was a pain

15:12.840 --> 15:17.440
because then things that had copies of the public half of the key all had to be updated

15:17.440 --> 15:23.040
and everything else. Using SSH-FP solves that problem entirely except that it requires DNS

15:23.040 --> 15:28.720
set. Well, I mean open SSH requires that it be a signed answer for fairly good reasons.

15:28.720 --> 15:34.760
So I'm not going to try to work around that. And then something I didn't mention before

15:34.760 --> 15:42.360
is doing this not only gives you access to be able to host all of the standards track

15:42.360 --> 15:47.440
RFC DNS records, you probably get to do lots of cool things that aren't actually standards

15:47.440 --> 15:53.760
track RFCs yet. So for example, HTTPS records, which are still just a draft and we don't

15:53.760 --> 15:58.640
even know if they're really going to end up being approved or not, it probably will. And

15:58.640 --> 16:04.480
Firefox and Chrome already know how to use them. I host all of those already for my HTTPS

16:04.480 --> 16:09.760
services because why not? It just took almost no effort to set it up. I do Ansible-based

16:09.760 --> 16:14.960
management for all of this stuff. And then I'm sure that most of the open source auth

16:14.960 --> 16:19.400
servers out there can do online signing with Power DNS auth server. So I don't have to

16:19.400 --> 16:24.720
worry about regularly resigning the zones and handling all the key distribution and

16:24.720 --> 16:29.840
everything else because it does all that for me. So the last thing that's mentioned there,

16:29.840 --> 16:34.320
which I'll get to just a little bit, but I had it on purpose. How many of you know what

16:34.320 --> 16:40.760
catalog zones are? Wow. That's shocking because it's you. You wrote the code. Of course, you

16:40.760 --> 16:48.880
know what it is. So catalog zones made this whole thing much simpler. In fact, we were

16:48.880 --> 16:54.680
joking at dinner last night that there's probably would have had to be three slides in the section

16:54.680 --> 16:58.480
about how to do maintenance of all of this that don't have to exist anymore because catalog

16:58.480 --> 17:07.080
zones take care of the whole thing for you. I just led right into this, didn't I? So obviously,

17:07.080 --> 17:12.420
new software releases have to be deployed. For the moment, although I know Peter's working

17:12.420 --> 17:19.680
on it, there aren't currently ARM64 packages in the Power DNS repos. So I use their builder

17:19.680 --> 17:24.400
scripts to just build them myself and publish my own packages to my machines to install

17:24.400 --> 17:29.240
them. Eventually, I won't have to do that first part. I'll just run app, get update,

17:29.240 --> 17:34.800
it'll install the new packages. And then whenever I need to add or remove zones, I go to my

17:34.800 --> 17:40.120
Ansible playbooks and I change the list of zones that I want to maintain, go run them,

17:40.120 --> 17:46.320
and they poke at the API to do the right things. First of all, make sure those zones now exist

17:46.320 --> 17:51.720
or no longer exist on the hidden primary server. And in the past, they also had to reach out

17:51.720 --> 17:55.680
to all of the other servers to make the corresponding change. So every secondary had to know that

17:55.680 --> 17:59.840
you've added a new zone so that it could know about the data. Catalog zones take care of

17:59.840 --> 18:04.000
all of that for me. So now when I stand up a new secondary server, I only have to tell

18:04.000 --> 18:08.160
it which catalog zones it's supposed to pay attention to and which server those are supposed

18:08.160 --> 18:13.000
to come from. And then it automatically populates its secondary zone list all by itself. And

18:13.000 --> 18:18.400
it's automatically updated every time I add or remove zones. It takes, I don't know, a

18:18.400 --> 18:23.240
minute maybe for all of them to be updated and everything is happy. It's really fantastic.

18:23.240 --> 18:32.760
So there's going to be more cool stuff we're going to do with that in the future. So step

18:32.760 --> 18:38.240
0, 1, 2, 3, 4, put them all together. That first one is the most important thing. Go

18:38.240 --> 18:42.800
find out what your domain registrar supports. If they don't give you the tools you need

18:42.800 --> 18:46.560
to be able to do this, you're going to have to move your domains to a different registrar

18:46.560 --> 18:52.480
or give up. Those are obviously two choices, equally valid. But there are lots and lots

18:52.480 --> 18:57.420
and lots of really good ones out there, different parts of the world. So it's easy enough to

18:57.420 --> 19:01.880
find out. There's a very short list of things you need to be able to do. The biggest things

19:01.880 --> 19:06.720
are the DS record is probably going to be the first thing to check. Will they let you

19:06.720 --> 19:11.440
upload DS records for your own zones? If they won't, you're dead. You can't do DNS with

19:11.440 --> 19:16.480
your zones and that registrar. You have to switch to somebody else. The one I currently

19:16.480 --> 19:24.960
use supports both IPv4 and IPv6 glue records, but only IPv4 through the web interface. IPv6

19:24.960 --> 19:29.440
has to be done via support ticket, which is annoying, but it doesn't change very often,

19:29.440 --> 19:34.840
so I'm willing to live with that pain. So decide which off-server software you want

19:34.840 --> 19:38.440
to use. Obviously, that's going to be an important decision for you. Decide where you want to

19:38.440 --> 19:43.760
put all the stuff, where you want it to live, both the hidden primary and all the secondaries,

19:43.760 --> 19:48.320
and then how are you going to manage the zone list. And as you can see there, if your answers

19:48.320 --> 19:55.680
happen to follow that category, you can do exactly what I did and be on your way.

19:55.680 --> 20:01.240
Now a little bit of bonus here. I did write that as a question. I forgot I changed it.

20:01.240 --> 20:08.280
So on those network appliances in our home network, I run the recursive resolver for

20:08.280 --> 20:17.080
all of the clients on the home network to use to resolve names. And with our last ISP,

20:17.080 --> 20:24.400
we had more outages than I would have liked to have. And once you start setting up something

20:24.400 --> 20:29.280
like this, you forget the IP addresses for all of your own infrastructure. You only know

20:29.280 --> 20:37.760
the names. And when you've made the zone signed and your resolvers can't reach the internet,

20:37.760 --> 20:44.480
they can't resolve any of the names because they can't, in my case, my domain is km6g.us,

20:44.480 --> 20:48.000
so they have to know what's signed at the root, what's signed at the US, what's signed

20:48.000 --> 20:55.760
at all that stuff. So we would have very bizarre cases where things inside the network stopped

20:55.760 --> 20:59.240
working because our internet link was not working correctly, even though the things

20:59.240 --> 21:03.040
we were trying to use didn't use the internet at all. They just couldn't talk to each other

21:03.040 --> 21:07.840
because they couldn't resolve names. So now I have the resolvers sitting right with an

21:07.840 --> 21:12.120
authoritative server sitting right next to them that hosts all of our zones that nothing

21:12.120 --> 21:16.960
talks to except the resolver so that even if that box can't talk to the internet, it

21:16.960 --> 21:22.880
can still resolve any of our internal names with no problems at all. An additional thing

21:22.880 --> 21:34.800
there, I think again to the... What's that? I am, yeah. So what happens here is a feature

21:34.800 --> 21:40.640
in the PowerDS Recursor, which I will say, on a bationally, I wrote, which is that you

21:40.640 --> 21:44.840
can actually tell the auth server to send notifies to their recursors, which is not

21:44.840 --> 21:48.740
something you would think would have ever... I mean, that's something that's normal. It's

21:48.740 --> 21:53.640
really cool though because what we do is when that happens, the recursors says, aha, that's

21:53.640 --> 21:57.120
a notification from the authoritative server that any content I might have in my cache

21:57.120 --> 22:03.140
for that zone is probably stale. Throw it all away. So that means if I've got internal

22:03.140 --> 22:06.720
infrastructure changes, I've moved a container to a different machine and its IP address

22:06.720 --> 22:11.560
has changed, within a minute, everything that needs to use that will get the correct address

22:11.560 --> 22:17.980
as long as it's not running a local cache on the box itself. And then, as I said, over-engineering,

22:17.980 --> 22:24.280
I used anycast and OSPF and all kinds of other stuff to reach the recursors resolver. So

22:24.280 --> 22:28.800
there's a bunch of links. The slides are up on the FOSDEM website, so feel free to download

22:28.800 --> 22:33.760
them. All of these links are useful and you can see even the HTTPS thing, which is not

22:33.760 --> 22:39.360
even a... What's that? No code collection. Oh, you're right. I forgot to put that link

22:39.360 --> 22:46.160
in there. Tell me where it is and I'll add it. Yeah. And that's that. I have two and

22:46.160 --> 22:54.320
a half minutes left. So questions. Yes, sir. You said you wanted to be required to change

22:54.320 --> 23:02.280
DS records. For anyone else who wants to do this, please note that some TLDs require you

23:02.280 --> 23:06.920
to send up the DNS key record and they will hash it to DS. Oh, okay. So he just missed

23:06.920 --> 23:11.920
me a comment that depending on which TLD your zones are under, you may have to send a different

23:11.920 --> 23:20.760
thing for them depending on exactly what they want from you. So that's fine. Thank you.

23:20.760 --> 23:26.600
Don't fight. Yes, that one. Just another comment. Some TLDs are scanning for CDS, CBMP and CDS

23:26.600 --> 23:33.440
records, so you don't have to play with the registrar at all. Right. Emerging technology

23:33.440 --> 23:38.960
that's been around for a really long time. Yeah, so just... So I had just to repeat that

23:38.960 --> 23:43.960
there are some top level domains, not related to the registrar, that will actually notice

23:43.960 --> 23:47.720
the correct type of records in your zone and pick up the keys from there so that you don't

23:47.720 --> 23:53.040
even have to manually update them when you change them or rotate them. Yes. Yes. You

23:53.040 --> 24:01.000
can use the robust infrastructure, but you still use only one DNS software. That's a

24:01.000 --> 24:06.080
good point. I have diversity and robust infrastructure, but no diversity in the software. That's

24:06.080 --> 24:10.120
absolutely a good point. I'm okay with that risk though. Yes, sir.

24:10.120 --> 24:17.320
After you ensure you are not under attack on your virtual machine, you have applied

24:17.320 --> 24:22.600
all CV updates. So how do I ensure that I'm not under attack on the virtual machines and

24:22.600 --> 24:30.040
how do I apply CV updates? So because of I'm a geek every Saturday morning before my wife

24:30.040 --> 24:34.340
gets up, I run this gigantic Ansible playbook that goes and touches everything and applies

24:34.340 --> 24:37.960
all package updates and reboots, anything that needs to be rebooted and all of that

24:37.960 --> 24:43.840
sort of thing. So I'm reasonably good there. Plus on the public facing machines, I have

24:43.840 --> 24:48.520
the Debian unattended upgrade thing in place so that if a really important thing gets a

24:48.520 --> 24:53.080
package update comes in and gets applied, it will do it for itself. So I don't have

24:53.080 --> 24:59.440
to restart that. What was the other question? What was the other part of that one? Oh, the

24:59.440 --> 25:08.120
attack thing. This is really cool. Those particular AWS VMs have a hard cap on the amount of CPU

25:08.120 --> 25:12.960
that they're allowed to use. So if somebody tries to do a DOS attack on them, they just

25:12.960 --> 25:19.920
stop getting responses. So I don't have to do anything. Now granted, that resolution

25:19.920 --> 25:24.600
of my zones would be harmed by that. But these are personal zones. We're not hitting them

25:24.600 --> 25:29.680
all that hard from outside. So that's kind of a neat feature that is just a side effect

25:29.680 --> 25:36.480
of the way those particular VMs work, is you're limiting how much CPU you can use. Are we

25:36.480 --> 25:57.200
out? All right. Thank you.

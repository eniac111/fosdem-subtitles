1
0:00:00.000 --> 0:00:09.440
I want to go very quickly because the rounds are very short.

2
0:00:09.440 --> 0:00:14.000
I'm sorry I'm rushing through because I don't want to keep you from the very

3
0:00:14.000 --> 0:00:15.000
juicy part.

4
0:00:15.000 --> 0:00:22.040
So we are presenting a complete, as complete can be, compliance toolchain for

5
0:00:22.040 --> 0:00:23.720
Yacht projects.

6
0:00:23.720 --> 0:00:29.440
So this in the context has been produced for a project we are part of called Eclipse

7
0:00:29.440 --> 0:00:31.720
Onero or Onero in short.

8
0:00:31.720 --> 0:00:33.880
It's an Eclipse foundation project.

9
0:00:33.880 --> 0:00:39.640
It's Yacht based and it provides a scenario platform project.

10
0:00:39.640 --> 0:00:43.360
It's very complex, the numbers are quite impressive, cannot run through but they

11
0:00:43.360 --> 0:00:47.960
are quite learned and everything is based on CI.

12
0:00:47.960 --> 0:00:50.120
So everything is CI.

13
0:00:50.120 --> 0:00:55.300
We also needed to have a completely CI also compliance process.

14
0:00:55.300 --> 0:01:02.760
So we needed to build with the existing parts and building parts that did not exist by

15
0:01:02.760 --> 0:01:05.680
providing a dedicated toolchain.

16
0:01:05.680 --> 0:01:11.680
This toolchain for compliance has been made not just by us but by the noise path park.

17
0:01:11.680 --> 0:01:18.760
People are in the room as well and they have done much of the heavy lifting of programming

18
0:01:18.760 --> 0:01:22.440
and Alberto of course gets the credit for the software.

19
0:01:22.440 --> 0:01:25.680
It's also an Eclipse foundation project and it's alright.

20
0:01:25.680 --> 0:01:29.760
There is a repo and you can look at everything.

21
0:01:29.760 --> 0:01:37.560
It's based on already existing, the known subjects of compliance, for soldiers to

22
0:01:37.560 --> 0:01:45.520
encode but we have to create a dedicated new custom set of tools also being distributed

23
0:01:45.520 --> 0:01:47.520
as open source.

24
0:01:47.520 --> 0:01:53.840
Of course we use SPDX all across the toolchain for many things and this is important.

25
0:01:53.840 --> 0:01:56.320
This is not just for this project.

26
0:01:56.320 --> 0:02:05.000
This is meant to be a toolchain for all Yacht based projects, not just for this.

27
0:02:05.000 --> 0:02:11.400
Through this combination of tools we have been able to complete a very lengthy process

28
0:02:11.400 --> 0:02:18.360
of compliance, reaching 100% of coverage of all the components.

29
0:02:18.360 --> 0:02:24.080
I don't want to skip thanks to the Debian providing a lot of the information we have

30
0:02:24.080 --> 0:02:25.840
really used.

31
0:02:25.840 --> 0:02:33.600
Here you can see very quickly the dashboard so you can track the evolution and the status

32
0:02:33.600 --> 0:02:35.680
of compliance.

33
0:02:35.680 --> 0:02:41.320
You can also go and have many more details of the single packages.

34
0:02:41.320 --> 0:02:48.680
That's just for knowing what components and what license is there but we cannot stop there.

35
0:02:48.680 --> 0:02:56.960
We want to go farther and we have what we call the second phase of the compliance toolchain

36
0:02:56.960 --> 0:03:01.440
and we decided to go for a graph database for many technical reasons because there are

37
0:03:01.440 --> 0:03:07.080
a lot of interaction and we ought to traverse the database very easily.

38
0:03:07.080 --> 0:03:13.200
We need to do the missing part which is software composition analysis, dependency analysis

39
0:03:13.200 --> 0:03:16.120
and incompatibility checks.

40
0:03:16.120 --> 0:03:18.720
Everything must be done automatically as much as possible.

41
0:03:18.720 --> 0:03:24.480
This must be entirely into the CI pipeline which it does.

42
0:03:24.480 --> 0:03:28.160
In order to do this we need several things.

43
0:03:28.160 --> 0:03:29.680
This is a really important map.

44
0:03:29.680 --> 0:03:35.320
All licenses data from the source to the binary and at file level mapping.

45
0:03:35.320 --> 0:03:40.440
While file level mapping we mean every single file including patches.

46
0:03:40.440 --> 0:03:45.440
Everything that goes through needs to be checked, checked and tracked through in order to make

47
0:03:45.440 --> 0:03:50.240
sure that everything that goes inside is tracked.

48
0:03:50.240 --> 0:03:52.520
This information comes from many sources.

49
0:03:52.520 --> 0:04:01.120
We had a node team that has done a lot of work and finally we need to find a way to

50
0:04:01.120 --> 0:04:08.640
automatically as much as possible see if the inbound and outbound licenses are compatible

51
0:04:08.640 --> 0:04:11.080
with each other through automated tools.

52
0:04:11.080 --> 0:04:18.400
This is in a very short time the general description here in the example of the relationship between

53
0:04:18.400 --> 0:04:22.480
components in the database.

54
0:04:22.480 --> 0:04:28.560
There is the next bit which is perhaps more interesting and I give the floor to Alberto.

55
0:04:28.560 --> 0:04:36.800
Thank you Carlo.

56
0:04:36.800 --> 0:04:41.520
The question is why do we need this?

57
0:04:41.520 --> 0:04:48.360
Yocto workflow for those of you who are already familiar with that is quite simplified here.

58
0:04:48.360 --> 0:04:51.080
We have recipes.

59
0:04:51.080 --> 0:04:57.120
Recipes can map to a single upstream source component but possibly also to different upstream

60
0:04:57.120 --> 0:05:00.800
components maybe the main application then some plugins.

61
0:05:00.800 --> 0:05:07.520
You can have here many different upstream sources combined together fetched and together

62
0:05:07.520 --> 0:05:13.040
combined into a single work here in the AMP

63
0:05:13.040 --> 0:05:15.960
stage task of the build process.

64
0:05:15.960 --> 0:05:23.520
Then the other task, configure, patch, whatever basically build you got binaries and binaries

65
0:05:23.520 --> 0:05:27.560
are combined together to form the final image.

66
0:05:27.560 --> 0:05:36.040
The problem is that when it comes to absent sources we have upstream components that have

67
0:05:36.040 --> 0:05:39.920
multiple licenses inside it.

68
0:05:39.920 --> 0:05:46.720
Maybe we have different components with different sets of licenses but the thing is we have

69
0:05:46.720 --> 0:05:52.720
only a small subset of the binaries that we could generate for all this stuff.

70
0:05:52.720 --> 0:06:00.400
The binaries you don't know what the actual license is especially when here you have kind

71
0:06:00.400 --> 0:06:02.120
of a mess.

72
0:06:02.120 --> 0:06:08.240
The thing is that you risk that some dirty stuff ends up in your image.

73
0:06:08.240 --> 0:06:18.440
I don't know if you have a package with a blacklisted license or a compatible combination

74
0:06:18.440 --> 0:06:24.840
of licenses you may have in your final image something that is not compliant and this is

75
0:06:24.840 --> 0:06:29.280
something we need to avoid.

76
0:06:29.280 --> 0:06:32.760
The thing that we have to do is to follow a process.

77
0:06:32.760 --> 0:06:39.620
To find out the relationship with third party upstream code, the inbound code, then we need

78
0:06:39.620 --> 0:06:47.600
to find under which license the inbound upstream software is therefore the inbound license.

79
0:06:47.600 --> 0:06:52.360
If there is a possible combination of that because not all combinations are allowed and

80
0:06:52.360 --> 0:07:00.560
depending on the context they may be allowed or not like other talks pointed out this morning.

81
0:07:00.560 --> 0:07:08.200
We need to match this combination with the abounded license compatible with the inbound

82
0:07:08.200 --> 0:07:09.200
licenses.

83
0:07:09.200 --> 0:07:11.100
This is for each artifact.

84
0:07:11.100 --> 0:07:16.480
We cannot do that especially in the embedded field at package level because the package

85
0:07:16.480 --> 0:07:22.680
may contain a lot of stuff and we need to know about the files not the generic about

86
0:07:22.680 --> 0:07:23.680
the package.

87
0:07:23.680 --> 0:07:24.680
Here we have an example.

88
0:07:24.680 --> 0:07:27.440
I hope it's readable.

89
0:07:27.440 --> 0:07:34.200
This is GPGME component that GPG made easy.

90
0:07:34.200 --> 0:07:37.160
It's very small component.

91
0:07:37.160 --> 0:07:42.180
In our project we found it out that we generate only three binaries out of it.

92
0:07:42.180 --> 0:07:51.200
If you look at the license and the recipe you find GPL I guess three or LGPL2 or something

93
0:07:51.200 --> 0:07:52.200
like that.

94
0:07:52.200 --> 0:07:57.560
This is nothing, sorry not or but and.

95
0:07:57.560 --> 0:08:05.600
The thing is that this binary is that LGPL is that something else we don't know from

96
0:08:05.600 --> 0:08:10.700
what we have from source license information.

97
0:08:10.700 --> 0:08:15.960
We collect in this graph database multiple sources of information.

98
0:08:15.960 --> 0:08:22.600
On yellow dots are the information coming from our OD team working on phasology.

99
0:08:22.600 --> 0:08:30.040
File levels, source license information.

100
0:08:30.040 --> 0:08:39.360
The purple dots are comes from the Octo metadata and also the information about which files

101
0:08:39.360 --> 0:08:42.200
have been generated by to generate.

102
0:08:42.200 --> 0:08:47.880
They have been used to generate this binary comes from the Octo from the CreateSPDX class

103
0:08:47.880 --> 0:08:50.240
presented before.

104
0:08:50.240 --> 0:08:59.080
Basically we now have MIT, MIT, GPL2, GPL3, sorry GPL2 or later or LGPL3 or later and

105
0:08:59.080 --> 0:09:01.840
then we have GPL3 or later.

106
0:09:01.840 --> 0:09:03.560
What's the license of this file?

107
0:09:03.560 --> 0:09:13.360
Usually the OD team comes to us and we discuss to find out which is the license of the binary

108
0:09:13.360 --> 0:09:15.520
file.

109
0:09:15.520 --> 0:09:17.180
But this is not scalable.

110
0:09:17.180 --> 0:09:18.340
This is error prone.

111
0:09:18.340 --> 0:09:23.040
We cannot do that for every single binary file, for every release, for every snapshot

112
0:09:23.040 --> 0:09:25.640
of the project.

113
0:09:25.640 --> 0:09:27.280
This is another example.

114
0:09:27.280 --> 0:09:30.520
This is another binary you can generate from the same component.

115
0:09:30.520 --> 0:09:34.960
Here we have MIT, MIT, MIT, LGPL2, 0.1 or later.

116
0:09:34.960 --> 0:09:36.600
This is another story.

117
0:09:36.600 --> 0:09:40.000
Maybe it's easier here.

118
0:09:40.000 --> 0:09:45.040
We can have also more complicated, I won't go into the details here.

119
0:09:45.040 --> 0:09:48.880
How can we handle that in an automated way?

120
0:09:48.880 --> 0:09:54.120
The idea is to have a battle between license cards.

121
0:09:54.120 --> 0:10:00.440
You put together every time two cards and you need a set of rules to decide who wins,

122
0:10:00.440 --> 0:10:07.680
which card wins and then you iterate and you look over all the possible combinations of

123
0:10:07.680 --> 0:10:13.160
license until only one will survive, hopefully.

124
0:10:13.160 --> 0:10:20.760
To do that, we are trying to define the language to define those rules.

125
0:10:20.760 --> 0:10:26.160
We need to define the two license cards, the two license cards that are fighting against

126
0:10:26.160 --> 0:10:27.160
each other.

127
0:10:27.160 --> 0:10:35.880
We need to find the battlefield context, static linking, dynamic linking, whatever.

128
0:10:35.880 --> 0:10:43.520
The authority who said that, because the answer by the lawyers always depends.

129
0:10:43.520 --> 0:10:46.080
We need to say who said that.

130
0:10:46.080 --> 0:10:48.360
In this case, FSF.

131
0:10:48.360 --> 0:10:53.800
We trust it, especially when it comes to GPL, compatibility matrix.

132
0:10:53.800 --> 0:10:58.280
Here we are the result of the battle.

133
0:10:58.280 --> 0:11:03.800
We have a winner or we have invalid.

134
0:11:03.800 --> 0:11:11.040
This kind of combination is not possible because GPL2 is not inbound compatible with Apache

135
0:11:11.040 --> 0:11:22.280
2.0, while GPL2 or later may be inbound compatible with Apache 2.0 if you make it become GPL3

136
0:11:22.280 --> 0:11:28.960
because GPL3 is allowed to be inbound compatible with Apache 2.0.

137
0:11:28.960 --> 0:11:31.360
This is kind of an example.

138
0:11:31.360 --> 0:11:34.160
I don't have time to go into details.

139
0:11:34.160 --> 0:11:37.880
The rules in action are like here.

140
0:11:37.880 --> 0:11:45.600
When you have a disjunctive license expression, you need to calculate the Cartesian product.

141
0:11:45.600 --> 0:11:50.840
You need to have, in this case, MIT, GPL2 and GPL3 fighting against each other.

142
0:11:50.840 --> 0:11:57.520
Again, MIT, LGPL3 and GPL3 fight against each other.

143
0:11:57.520 --> 0:12:04.080
You find a list of the decision and we know that GPL3 or later is the license that prevails

144
0:12:04.080 --> 0:12:07.320
here at the end.

145
0:12:07.320 --> 0:12:08.320
Sorry.

146
0:12:08.320 --> 0:12:18.400
The thing is that how I said, already said, we consume data from different sources, from

147
0:12:18.400 --> 0:12:22.200
physiology, from Yocto.

148
0:12:22.200 --> 0:12:23.920
For now, we have proof of concept.

149
0:12:23.920 --> 0:12:30.920
The aim is to upstream everything into the Create Aspidics class in the Yocto project.

150
0:12:30.920 --> 0:12:35.880
I don't think we have time for questions, but here and in the slide, you find all the

151
0:12:35.880 --> 0:12:38.560
information to conduct this.

152
0:12:38.560 --> 0:12:52.760
Thank you.


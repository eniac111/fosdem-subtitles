WEBVTT

00:00.000 --> 00:07.400
Welcome.

00:07.400 --> 00:14.440
So, to break the flow of presentations a bit,

00:14.440 --> 00:16.360
there's now going to be a discussion.

00:16.360 --> 00:18.600
So, not just presentation,

00:18.600 --> 00:20.000
but the discussion.

00:20.000 --> 00:22.520
But I'm still going to give

00:22.520 --> 00:26.400
a short presentation first to create some context.

00:26.400 --> 00:27.800
First, who am I?

00:27.800 --> 00:33.440
I need to speak louder.

00:33.440 --> 00:35.760
Okay. No worries.

00:35.760 --> 00:39.040
So, I'm an embedded software architect.

00:39.040 --> 00:41.080
This discussion is also

00:41.080 --> 00:45.200
mostly focused on the embedded aspects.

00:45.200 --> 00:48.320
I'm working on Linux OS integration as

00:48.320 --> 00:52.200
a consultant for dozens of customers.

00:52.200 --> 00:56.600
In, I'm also a maintainer of the Buildroot project.

00:56.600 --> 01:00.760
Which is a team of four maintainers or five,

01:00.760 --> 01:02.760
depending on how you count.

01:04.480 --> 01:08.720
That's actually the context from which I come.

01:08.720 --> 01:12.240
I mean, from which I give this presentation.

01:12.240 --> 01:16.320
I don't actually care about S-Bombs.

01:16.320 --> 01:18.400
It's just something that needs to be done.

01:18.400 --> 01:22.360
And so, yeah. There we go.

01:22.360 --> 01:25.840
Because maybe not everybody is familiar with it.

01:25.840 --> 01:27.480
I'll give a quick overview of

01:27.480 --> 01:30.080
what an embedded Linux build system is.

01:30.080 --> 01:34.320
So, basically, it's taking a lot of sources.

01:34.320 --> 01:37.760
Some open source sources coming from the Internet.

01:37.760 --> 01:40.320
Some in-house components coming

01:40.320 --> 01:44.160
from various ways that you can get at them.

01:44.160 --> 01:46.120
Sometimes, these in-house components

01:46.120 --> 01:48.080
are going to be binaries as well.

01:48.080 --> 01:50.440
And then the embedded build system takes

01:50.440 --> 01:52.680
all that together with the configuration and

01:52.680 --> 01:56.960
produces a number of artifacts.

01:57.200 --> 02:00.880
One thing to note is that the number of artifacts is really small.

02:00.880 --> 02:04.600
So, we are talking about maybe five files or something like that.

02:04.600 --> 02:07.200
It's not like when you create

02:07.200 --> 02:14.640
an operating system that you have all these files that you need to keep track of.

02:14.640 --> 02:16.520
So, from my point of view,

02:16.520 --> 02:19.640
as a maintainer of such embedded Linux build system,

02:19.640 --> 02:21.640
the problem is actually quite simple.

02:21.640 --> 02:23.960
We know what the inputs are.

02:23.960 --> 02:27.280
We have just a few outputs and we can just say,

02:27.280 --> 02:31.320
okay, these outputs are generated from these inputs.

02:31.960 --> 02:35.400
So, that's actually what we do in Buildroot.

02:35.400 --> 02:37.760
We don't have SPDX at the moment.

02:37.760 --> 02:40.320
We don't have anything complicated.

02:40.320 --> 02:42.360
We just have a list of packages with

02:42.360 --> 02:44.960
their package name and version,

02:44.960 --> 02:47.960
where it comes from, the source URL.

02:47.960 --> 02:54.760
Also, the tarballs themselves and the hashes for checking the tarball,

02:54.760 --> 02:57.080
the patches which are applied to them,

02:57.080 --> 03:00.440
the licenses, and the dependencies,

03:00.440 --> 03:02.600
so the build dependencies.

03:02.600 --> 03:08.360
So, what other packages were used to generate this particular package?

03:08.360 --> 03:13.160
And then the assumption is that all of this together goes into your target image.

03:13.160 --> 03:17.920
So, there's no distinction of what is used for what particular output.

03:17.920 --> 03:24.320
There's also a list of files per package which you can use to reconstruct,

03:25.320 --> 03:28.400
to get more fine-grained.

03:28.400 --> 03:34.560
And then what I think is the actual thing you want to have is the CVE information.

03:34.560 --> 03:39.760
So, the two things which I think are needed are the licenses,

03:39.760 --> 03:41.800
and that's part of this top part,

03:41.800 --> 03:46.600
and the vulnerabilities, the CVE information.

03:46.600 --> 03:49.880
So, there's a separate tool that extracts that,

03:49.880 --> 03:56.960
and it uses CVE IDs to relate

03:56.960 --> 04:02.400
our package name and version to what is in the CVE database.

04:02.400 --> 04:06.080
Now, when you do this, this is of course not reproducible because it

04:06.080 --> 04:10.400
uses CVE information all the certain time and new CVEs are created all the time.

04:10.400 --> 04:17.640
So, it's something that you have to rerun all the time.

04:17.640 --> 04:22.840
So, as I said, it's very simple.

04:22.840 --> 04:27.000
There's a lot of things which are missing and where my question is basically,

04:27.000 --> 04:30.000
is this something relevant to work on?

04:30.000 --> 04:35.120
So, one thing that is missing is external files that you supply yourself.

04:35.120 --> 04:40.160
It's basically all the configuration which I mentioned here, this part.

04:40.160 --> 04:43.480
The assumption is that as a user,

04:43.480 --> 04:49.200
you know what these files are and you can inject them yourself.

04:49.200 --> 04:52.360
Same with the built-root source.

04:52.360 --> 04:55.360
We could make a tarball of the built-root source,

04:55.360 --> 04:58.480
but we didn't really see the point.

04:59.080 --> 05:04.960
Then we come to more important things that's thinner dependencies.

05:04.960 --> 05:09.360
So, S-bombs are used for two purposes basically.

05:09.360 --> 05:15.240
One purpose is for license information and second purpose is for vulnerability tracking.

05:15.240 --> 05:18.120
Now, if you have a vendor dependency in some package,

05:18.120 --> 05:26.720
we just see the top package that vendors it in and not the actual vendor dependency.

05:26.720 --> 05:29.520
So, we don't have the package name and the version of that.

05:29.520 --> 05:34.000
This used to be not much of a problem because not many people were rendering.

05:34.000 --> 05:39.400
But now, you have Go, Rust, MPM stuff,

05:39.400 --> 05:45.000
which brings in all these dependencies and they're invisible to us.

05:45.000 --> 05:47.440
We also have everything in one file,

05:47.440 --> 05:50.320
not spread out over dozens of SPDX files.

05:50.320 --> 05:52.400
It is good, this is bad, I don't know.

05:52.400 --> 05:55.960
We don't have SPDX formats.

05:55.960 --> 06:03.280
We have it only at the package level,

06:03.280 --> 06:06.000
not at the individual source file level.

06:06.000 --> 06:11.000
So, our inputs are basically tarballs, not C files.

06:11.520 --> 06:15.760
As I mentioned before, we don't have mapping of source to target files.

06:15.760 --> 06:19.560
So, that brings us to the discussions points.

06:19.560 --> 06:24.880
For me, the most important thing to discuss is why are we doing this?

06:24.880 --> 06:26.200
So, what are the consumers?

06:26.200 --> 06:29.040
How is this information going to be used?

06:30.080 --> 06:36.760
Because that determines what should be used as input as well.

06:36.760 --> 06:37.960
If you look at, for instance,

06:37.960 --> 06:43.080
SPDX specification, it doesn't really say whether you have to look at

06:43.080 --> 06:47.360
a source file or you can treat the tarball as a source.

06:47.360 --> 06:50.520
It just says, okay, there is a relationship there.

06:50.520 --> 06:58.920
It's not, I'm going to give you the microphone.

06:58.920 --> 07:01.680
I'm going to start standing because I suspect I'll be talking.

07:01.680 --> 07:03.960
And I'll come up here with you.

07:03.960 --> 07:09.880
So, turned around.

07:09.880 --> 07:15.800
There is, sorry, back to the question, you got me confused now.

07:15.800 --> 07:16.480
SPDX is-

07:16.480 --> 07:20.320
Individual source files or tarballs?

07:20.320 --> 07:23.000
Individual source, a tarball is just a file.

07:23.000 --> 07:24.280
Exactly.

07:24.280 --> 07:27.920
And you can use SPDX at any level.

07:27.920 --> 07:31.200
And so, if you just want to look at the package level and say, hey,

07:31.200 --> 07:33.960
it's this tarball file, that's fine.

07:33.960 --> 07:35.280
It works.

07:35.280 --> 07:38.600
You do not need to take it down to the source file.

07:38.600 --> 07:42.520
And it's a minimum set of fields that you just basically, all the concepts

07:42.520 --> 07:44.880
you had up there, you should be able to express right now with what we've got

07:44.880 --> 07:47.680
in SPDX today without any trouble.

07:47.680 --> 07:50.920
And so, you basically would put a package there with the metadata that you want to

07:50.920 --> 07:54.840
keep at the higher level and you'd point maybe to a file that has a hash.

07:54.840 --> 07:57.360
Simple enough.

07:57.360 --> 07:57.720
Yep.

07:57.720 --> 08:00.120
So, I see another remark there.

08:00.120 --> 08:18.520
I have a question, also related to the fact that you both have the vendor information as well.

08:18.520 --> 08:21.920
So, I'm guessing that at some point you would want to either add a kind of

08:21.920 --> 08:27.000
dependency tree which can couple up so you get a full list of all the dependencies.

08:27.000 --> 08:32.480
So, in a way that can be flattened, all the dependencies at the top level so you can

08:32.480 --> 08:34.760
pass them as much as you so could?

08:34.760 --> 08:42.800
So, the remark question is, if I understood correctly, so the,

08:42.800 --> 08:46.920
an S-bomb is basically a hierarchy of dependencies, but you can flatten it to

08:46.920 --> 08:51.400
just have input and output.

08:51.400 --> 08:56.720
What I think for an embedded build system, I think it's enough to

08:56.720 --> 09:00.040
only have this flat one without a hierarchy because the hierarchy is

09:00.040 --> 09:03.360
difficult to determine for the embedded build system.

09:03.360 --> 09:06.760
And I don't think it has useful information.

09:06.760 --> 09:11.000
Unless there is anybody that can say there is actually useful information in the hierarchy.

09:11.000 --> 09:12.000
Yeah.

09:12.000 --> 09:14.000
I'm guessing you don't know.

09:14.000 --> 09:17.000
There were those guy comes just coming in here.

09:17.000 --> 09:18.000
Yeah.

09:18.000 --> 09:21.240
I have some thoughts.

09:21.240 --> 09:21.760
Yeah.

09:21.760 --> 09:26.440
I'm going to try to speak about that a little bit, you know, well, later.

09:26.440 --> 09:33.480
But, yeah, there's a ton of uses for having a structured S-bomb.

09:33.480 --> 09:36.120
And if you saw, for example, the Siemens use case where they

09:36.120 --> 09:41.920
enrich S-bombs, you need to have that structure to enable, to let you know when

09:41.920 --> 09:46.600
the enrichment happens where the extra information is going to be happening.

09:46.600 --> 09:52.960
Also, if you want to, like, compose an S-bomb by taking pieces from another one,

09:52.960 --> 09:59.160
like my friend Ivana here has been doing a really great work on composing S-bombs.

09:59.160 --> 10:04.160
So if you want to compose an S-bomb by taking pieces from one and moving that data to another

10:04.160 --> 10:06.080
one, you need to have that structure.

10:06.080 --> 10:14.920
And there are several use cases that need you where you need the structure.

10:14.920 --> 10:25.080
But then I wonder what the, I mean, if you compose S-bombs, there is supposedly also

10:25.080 --> 10:35.920
a corresponding composition of the binaries themselves that the S-bombs describe, right?

10:35.920 --> 10:39.840
Because in the end, an S-bomb is a description of a binary.

10:39.840 --> 10:42.760
Yeah, but the binaries can be repackaged, for example.

10:42.760 --> 10:48.200
You can have a binary product of a field and then you ship it and so on.

10:48.200 --> 10:53.200
So indeed, if you're going to repackage stuff, then this is relevant.

10:53.200 --> 10:56.760
I'm surprised that there are use cases for repackaging stuff.

10:56.760 --> 11:00.160
There was a question of...

11:00.160 --> 11:04.760
I can give you a real life example.

11:04.760 --> 11:09.080
Patches and handling patches.

11:09.080 --> 11:12.200
So yeah, there's a question from the chat.

11:12.200 --> 11:13.800
What about handling patches?

11:13.800 --> 11:15.760
Good question.

11:15.760 --> 11:21.160
So what we currently have in Buildroot is just patches are one of the sources and they're

11:21.160 --> 11:23.440
described as one of the sources.

11:23.440 --> 11:28.480
Or, well, they're included in the tree as one of the sources.

11:28.480 --> 11:30.440
Is there anything else to say about patches?

11:30.440 --> 11:32.840
There's also a specific relationship for patches.

11:32.840 --> 11:38.880
Yeah, there's a specific relationship for patches because it's a modification rather

11:38.880 --> 11:41.040
than an actual source.

11:41.040 --> 11:44.240
What about naming?

11:44.240 --> 11:48.560
So I think there was one more remark about patches.

11:48.560 --> 11:51.960
Yes, I was the one in the chat.

11:51.960 --> 11:58.960
The thing is, it is not a curl and you have a curl in the view of patches.

11:58.960 --> 12:00.960
It's not the same curl.

12:00.960 --> 12:05.560
There could be other vulnerabilities in your distribution than the original one from GitHub

12:05.560 --> 12:07.560
or another one from B2D.

12:07.560 --> 12:17.480
Yeah, so indeed, it's essential that you track patches rather than, I mean, you definitely

12:17.480 --> 12:22.880
have to record that what you are using is not curl version X, but curl version X plus

12:22.880 --> 12:25.960
patches and then also which those patches are.

12:25.960 --> 12:30.680
Yeah, and that's a new P you were talking about.

12:30.680 --> 12:33.680
Which takes us to the naming problem.

12:33.680 --> 12:34.680
Yeah.

12:34.680 --> 12:37.680
So you've got a naming problem.

12:37.680 --> 12:38.680
You say OpenSSL.

12:38.680 --> 12:39.680
Is it OpenSSL?

12:39.680 --> 12:40.680
It's the OpenSSL.

12:40.680 --> 12:41.680
Or is it OpenSSL wrapper?

12:41.680 --> 12:54.680
Or is it OpenSSL someone's patched or modified or built in a particular way because we've

12:54.680 --> 12:57.520
got so many options.

12:57.520 --> 13:07.200
So the remark was, if you say this is OpenSSL or even OpenSSL version X, that doesn't necessarily

13:07.200 --> 13:12.480
uniquely identify it because it can be patched or it can be built with certain options.

13:12.480 --> 13:17.760
So that information about how it's patched and how it's built has to be recorded as well.

13:17.760 --> 13:21.640
So do you capture that as part of build route now?

13:21.640 --> 13:22.640
Yes.

13:22.640 --> 13:26.720
Well, so implicitly, yes, but not explicitly.

13:26.720 --> 13:34.720
So it's captured because we have the baseline, which is basically identified by CPE ID, which

13:34.720 --> 13:40.520
is the upstream version, let's say, or well, the version as published by the maintainer

13:40.520 --> 13:42.800
of the package.

13:42.800 --> 13:48.520
And then the patches are recorded separately.

13:48.520 --> 13:52.720
The configuration, as I mentioned before, in build route, we don't really record that

13:52.720 --> 13:55.640
so to the user themselves to record it.

13:55.640 --> 14:00.520
So I mean, there's definitely room for improvement there.

14:00.520 --> 14:08.720
Yeah, this is a problem with anything that's building from source in this way is that the

14:08.720 --> 14:09.720
name and version are unique.

14:09.720 --> 14:10.720
This is one we have to attach this?

14:10.720 --> 14:11.720
Right, yeah, exactly.

14:11.720 --> 14:12.720
This is recently attached.

14:12.720 --> 14:19.000
Yeah, you have to check the hash and that's why you need to build information because

14:19.000 --> 14:25.920
just because it says open SSL 1.2 doesn't mean that the place or security vulnerability

14:25.920 --> 14:29.160
was actually even compiled into the code, right?

14:29.160 --> 14:37.360
Yeah, so the remark was that the package and version information when you're talking about

14:37.360 --> 14:42.120
the package and version information is not enough are not unique.

14:42.120 --> 14:47.760
It might not even be the same between two people that built the same thing because of

14:47.760 --> 14:52.120
configuration.

14:52.120 --> 14:57.000
And the solution for that is hashing the outputs.

14:57.000 --> 15:01.840
Yeah, but then the thing is simply hashing the outputs.

15:01.840 --> 15:07.640
Okay, then you have an identifier of something, but okay, you have you actually have the output.

15:07.640 --> 15:12.520
You could hash that, but it doesn't give you any information.

15:12.520 --> 15:16.040
You need to actually the build information itself.

15:16.040 --> 15:21.880
Where also even there the usefulness is a bit limited because in the end it goes to

15:21.880 --> 15:26.520
the CVE database and in CVE database you don't have this information anyway.

15:26.520 --> 15:33.680
You don't have it in a, well, you may sometimes have it in an informal way in the description,

15:33.680 --> 15:39.400
but you definitely don't have it in a formal way saying if configured X then so unless

15:39.400 --> 15:45.160
there is also some changes there, I don't think there's much use to.

15:45.160 --> 15:52.920
I mean it's important to record it for manual analysis, but since there is on the other

15:52.920 --> 15:59.080
side no formal recording of it, I'm not sure if it makes sense to record it formally.

15:59.080 --> 16:06.680
So what we do for the CVEs is we don't really put in the, we put the CVE in and then just

16:06.680 --> 16:07.680
once which ones we've patched.

16:07.680 --> 16:10.680
So like that way if you go look it up, you know, I don't need to worry about this one,

16:10.680 --> 16:11.680
but if there's any new ones.

16:11.680 --> 16:21.040
Yeah, that's basically what is done in built root as well, but not in an SPDX format, just.

16:21.040 --> 16:27.560
The CVE ID is a field external reference you can associate with the package.

16:27.560 --> 16:30.680
Yeah, so the remark is in SPDX.

16:30.680 --> 16:35.760
In SPDX there's the external references and you can associate a CPE with a specific package.

16:35.760 --> 16:40.520
You can also associate a Perl with that same package and if you wanted to put both of them

16:40.520 --> 16:42.400
there you could.

16:42.400 --> 16:48.960
It's flexible there and because of the time scales of vulnerabilities and so forth, what

16:48.960 --> 16:52.400
you want to record at a point in time whether something's patched or not or other things

16:52.400 --> 16:56.360
like that, this is all hopefully able to be done.

16:56.360 --> 17:00.560
The question is, you know, are people having tools there semantically accessing it right

17:00.560 --> 17:01.560
now?

17:01.560 --> 17:09.760
Just one of the things about the consumer's tools is actually we are seeing tools emerge.

17:09.760 --> 17:14.480
In fact, I know of two off the top that are basically consuming S-bombs and matching them

17:14.480 --> 17:15.720
to vulnerabilities.

17:15.720 --> 17:19.680
So that takes care of the monitoring over time because there's two different time cycles.

17:19.680 --> 17:24.760
There's what's known at build and then there's what's known in the field over time.

17:24.760 --> 17:32.440
And so the two projects I'm aware of are Daggerboard and the other one is the one that's sitting

17:32.440 --> 17:35.180
in the SPDX repo that looks up vulnerabilities.

17:35.180 --> 17:41.120
So you basically feed it in S-bomb in SPDX and it will go and query the databases for

17:41.120 --> 17:42.120
vulnerabilities.

17:42.120 --> 17:43.120
To all S-V.

17:43.120 --> 17:47.800
Yeah, SPDX to all S-V, yeah.

17:47.800 --> 17:51.400
And so there are tools out there that are emerging and I think we'll be seeing more

17:51.400 --> 17:53.840
and more in the years.

17:53.840 --> 18:01.520
Maybe as a reaction to that, so my intuitive reaction is yeah, but we also have a tool

18:01.520 --> 18:06.680
that generates this information already, I mean, as part of build routes, you can just

18:06.680 --> 18:10.920
run that tool again five years later and you get that information.

18:10.920 --> 18:18.920
But there's a KVET where I think it's actually useful to have the built information formally

18:18.920 --> 18:24.200
recorded and that's basically the same thing as what archaeologists do.

18:24.200 --> 18:29.660
You don't know what techniques are going to emerge later and that can be useful then.

18:29.660 --> 18:34.000
So if you build something now, you should record all the information now that can be

18:34.000 --> 18:35.000
recorded.

18:35.000 --> 18:38.800
A little add to that?

18:38.800 --> 18:43.320
The other little add to that is that use case is also very important in the high assurance

18:43.320 --> 18:48.560
world where you are being asked to attest exactly which vulnerabilities you know about,

18:48.560 --> 18:53.120
but that's an audit case or a high assurance case and so some places they will want to

18:53.120 --> 18:55.520
have that.

18:55.520 --> 19:02.640
Okay, I would like to move on to a different subject which I mentioned here.

19:02.640 --> 19:08.340
That is vendor dependencies because I think that's a, I mean, from the point of an embedded

19:08.340 --> 19:12.680
build system, that's an important thing to solve.

19:12.680 --> 19:15.280
We actually have multiple vendor dependencies.

19:15.280 --> 19:18.840
I'll first give an intro and then multiple vendor dependencies.

19:18.840 --> 19:24.360
So we have some vendor dependencies which are directly included in a source code.

19:24.360 --> 19:28.000
For instance, Tomlip is a good example.

19:28.000 --> 19:38.280
Tomlip is a library that is meant to be Viner tin and so, yeah, people just copy it into

19:38.280 --> 19:41.200
their source codes.

19:41.200 --> 19:43.480
So that's really difficult to trace.

19:43.480 --> 19:45.440
Then there is Git sub-modules.

19:45.440 --> 19:48.320
You clone a Git tree.

19:48.320 --> 19:53.560
That is the information you have in the, as a build system, that's the information you

19:53.560 --> 19:55.760
have in your build metadata.

19:55.760 --> 20:01.800
But then if there are sub-modules referenced from there, that information is not part of

20:01.800 --> 20:05.200
the metadata of the build system.

20:05.200 --> 20:09.560
And then cargo will go in PM modules, obviously.

20:09.560 --> 20:14.120
And then there are some cases where the build system itself vendors things in.

20:14.120 --> 20:19.760
For instance, in OpenEmbedded you have the kernel meta which is kind of rendered in and

20:19.760 --> 20:25.720
which is not, I mean, I don't know if it's taking into account for the SPDX, but you

20:25.720 --> 20:27.640
need to take special action there.

20:27.640 --> 20:29.200
That's the important thing.

20:29.200 --> 20:32.640
It's not using the normal parts of taking sources.

20:32.640 --> 20:41.360
So, yeah, my question to the audience is how can we deal with these vendor dependencies?

20:41.360 --> 20:42.360
You had a remark.

20:42.360 --> 20:43.360
Question?

20:43.360 --> 20:44.360
An additional question.

20:44.360 --> 20:45.360
Okay, sorry.

20:45.360 --> 20:51.360
I'm going to give you a...

20:51.360 --> 20:56.800
This is actually just a problem beyond S-bomb generation because if you're trying to do

20:56.800 --> 20:59.680
air gap builds, these are huge problems in general.

20:59.680 --> 21:01.400
But that we've encountered.

21:01.400 --> 21:09.080
So ideally we could download all of these sources and archive them without, and then

21:09.080 --> 21:13.360
go tell the tool to go pull them from the archive, which is often difficult, if not

21:13.360 --> 21:15.280
impossible.

21:15.280 --> 21:20.960
So yeah, it'd be nice if the tool, like, cargo and go, I think cargo is not too bad, but

21:20.960 --> 21:25.960
go and NPM are pretty bad, last we checked, for being able to do that kind of thing.

21:25.960 --> 21:28.560
And that would make this a lot simpler too.

21:28.560 --> 21:33.400
Yeah, so the thing that I want to add to that is that...

21:33.400 --> 21:37.440
So getting the sources is not the difficult part.

21:37.440 --> 21:39.760
So if it's just for licensing, that's doable.

21:39.760 --> 21:45.760
But for supply chain, you want to know provenance, and that's the hard part.

21:45.760 --> 21:48.120
There is...

21:48.120 --> 21:49.120
Unless the...

21:49.120 --> 21:56.760
I think for all these things, unless the source, the upstream itself gives some provenance

21:56.760 --> 22:03.360
information, preferably in a formal format, then there is no...

22:03.360 --> 22:07.600
It's really hard for us as a build system to go and look for it.

22:07.600 --> 22:13.380
For cargo and go, it's actually doable to do it on our side, because you have a log

22:13.380 --> 22:18.560
file which gives the exact information, not in an easily consumable format, but the information

22:18.560 --> 22:26.520
is there.

22:26.520 --> 22:32.840
For NPM, of course it's NPM.

22:32.840 --> 22:36.400
And kit-zip modules also, I mean, the information is there.

22:36.400 --> 22:37.400
It's...

22:37.400 --> 22:40.320
But you don't have version numbers, you know?

22:40.320 --> 22:46.320
You have Git hashes which are not something that you will be able to check against the

22:46.320 --> 22:48.360
CVE database.

22:48.360 --> 22:53.040
And to some extent, that's also the case for cargo and go versions, because often they're

22:53.040 --> 22:56.040
also specified by Git hash.

22:56.040 --> 23:01.680
And then they're directly included in sources, as usual, hopeless.

23:01.680 --> 23:03.680
Any other?

23:03.680 --> 23:07.280
Well, it's just some perspective.

23:07.280 --> 23:13.800
So one thing to keep in mind about those is, those dependencies that get rendered in, and

23:13.800 --> 23:17.740
you need to capture those in the S-bomb, you can see them in two ways.

23:17.740 --> 23:26.240
One is from the dependency list angle, and in that case, just having the version and

23:26.240 --> 23:33.120
then name and ideally the hashes of those dependencies is enough.

23:33.120 --> 23:37.120
And the other angle is if you're trying to actually inventory all of the files that get

23:37.120 --> 23:38.120
rendered in.

23:38.120 --> 23:40.800
So, it depends on the use case of the S-bomb.

23:40.800 --> 23:45.320
You may want to capture one or the other or both.

23:45.320 --> 23:51.400
So just for dependency's sake, it may be depending on the build system, of course, it may be

23:51.400 --> 23:56.080
the case that you only need the list of dependencies without the actual file information.

23:56.080 --> 24:00.720
Yeah, the thing is, the file information is easy to get.

24:00.720 --> 24:06.240
The list of dependencies is difficult.

24:06.240 --> 24:14.000
I think picking on what Adolfo just said is, a lot of build's dependency just say latest

24:14.000 --> 24:20.120
or not explicit on the view that people say, I want to keep up to date patch-wise, because

24:20.120 --> 24:22.440
we're told we've got to keep everything patched.

24:22.440 --> 24:28.200
But for making it dependable, it's the worst thing because it's going to change.

24:28.200 --> 24:32.920
So yeah, I was trying to just get a debate.

24:32.920 --> 24:35.920
But actually, that's, I think, is a lot of the things.

24:35.920 --> 24:37.400
And people are generally lazy.

24:37.400 --> 24:39.400
I'll just pull in OpenSSL.

24:39.400 --> 24:41.320
I don't care what version.

24:41.320 --> 24:45.120
I'll just pick up the open, because it will be version X today.

24:45.120 --> 24:46.520
It'll be version Y next week.

24:46.520 --> 24:47.520
And I'm not bothered about that.

24:47.520 --> 24:50.440
I don't want to have an admin.

24:50.440 --> 24:54.120
So how do we handle that?

24:54.120 --> 25:01.320
Because it's with the growth of ecosystems that basically is what people find very convenient.

25:01.320 --> 25:06.240
Yeah, so I don't think we have an answer to that.

25:06.240 --> 25:11.800
I think we can get one last question, the question you had.

25:11.800 --> 25:13.800
And then we have to stop, I think.

25:13.800 --> 25:14.800
Yeah.

25:14.800 --> 25:15.800
For a minute.

25:15.800 --> 25:20.800
The question would be, how would you handle vendor dependencies that come as binaries?

25:20.800 --> 25:27.000
Yeah, the question is, how do you handle vendor dependencies that come as binaries?

25:27.000 --> 25:30.480
I guess you record what you know.

25:30.480 --> 25:34.440
That's the perfect answer.

25:34.440 --> 25:40.080
Actually this is probably the answer in general to any question you record what you know.

25:40.080 --> 25:46.040
So actually, you want to record it in as formal way as possible.

25:46.040 --> 25:51.400
Just like for the cargo go dependencies, actually our source store will have the log file which

25:51.400 --> 25:53.080
has the exact information of the dependencies.

25:53.080 --> 25:59.480
It's just not something that you want to go and crawl through afterwards to reconstruct

25:59.480 --> 26:00.480
it.

26:00.480 --> 26:06.480
Would it be doable to have two phases?

26:06.480 --> 26:09.720
First, download the sources.

26:09.720 --> 26:12.720
Then you are in a container.

26:12.720 --> 26:14.720
You cut internet.

26:14.720 --> 26:18.400
Well, you stop the interfaces and you build.

26:18.400 --> 26:24.760
So that's more a remark to the offline build thing.

26:24.760 --> 26:29.400
So to solve the offline build problem, what you can do is cut the build in two phases.

26:29.400 --> 26:32.240
The first phase where you just do downloads.

26:32.240 --> 26:36.960
And then you have a download territory which you expose to the second phase where you do

26:36.960 --> 26:38.800
the actual processing.

26:38.800 --> 26:43.400
And the problem, but there are two problems with that which I don't think are solved in

26:43.400 --> 26:46.280
either Yokto or Biltroot.

26:46.280 --> 26:50.880
The first one is that you actually to do the downloads you need some tools which you have

26:50.880 --> 26:52.000
to build.

26:52.000 --> 26:54.000
You need to do the cargo downloads.

26:54.000 --> 26:58.120
You have to build cargo first.

26:58.120 --> 27:03.020
But that means that you don't completely separate your build.

27:03.020 --> 27:07.320
You can't completely separate your build and your download step because you need to build

27:07.320 --> 27:10.480
something to download something.

27:10.480 --> 27:15.640
And the second issue, I forgot what the second issue was.

27:15.640 --> 27:21.520
But we need the tools to support.

27:21.520 --> 27:25.520
People don't realize.

27:25.520 --> 27:27.600
You need your tools for that.

27:27.600 --> 27:34.720
So you can maybe do something like a download step, a build step, a download step, a build

27:34.720 --> 27:35.720
step, but it's getting complicated.

27:35.720 --> 27:36.720
We're out of time.

27:36.720 --> 27:37.720
Yeah, we're out of time.

27:37.720 --> 27:38.720
Thank you.

27:38.720 --> 27:40.720
Thank you.

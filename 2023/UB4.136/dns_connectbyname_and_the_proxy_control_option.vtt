WEBVTT

00:00.000 --> 00:11.440
So, actually, I'm going to talk about three subjects, Connect My Name, ProxicoTroll option,

00:11.440 --> 00:16.320
and also a little bit of Rust throw-in at the end as a bonus.

00:16.320 --> 00:21.320
So my name is Philip Holmberg, and since a bit more than a year, I now work for NLnet

00:21.320 --> 00:24.640
Labs.

00:24.640 --> 00:31.640
So the question that has probably been posed by many people is, can you have just a function

00:31.640 --> 00:37.160
that in comes a hostname and a service, and you get a socket back?

00:37.160 --> 00:42.000
And sort of the starting point for this project, because we've got some funding, so we officially

00:42.000 --> 00:48.640
defined that, as Michael Abersom in the ITF one suggested, that some things like that

00:48.640 --> 00:50.560
should be done.

00:50.560 --> 00:55.920
Then of course we want to have options, so we can have a slightly more modern version

00:55.920 --> 01:01.360
where you have a context as the first thing, and it returns an error code instead of overloading

01:01.360 --> 01:04.600
that with a socket, but general idea.

01:04.600 --> 01:08.600
Of course, this is completely bad because this is blocking.

01:08.600 --> 01:11.000
This is what we need to down-front.

01:11.000 --> 01:17.720
Unfortunately, because we only at NLnet Lab basically do DNS when it comes to name resolution,

01:17.720 --> 01:20.640
this talk ignores every other possible thing.

01:20.640 --> 01:25.680
We don't even do MDNS, but we definitely don't do anything fancy.

01:25.680 --> 01:29.240
But it should not be precluded.

01:29.240 --> 01:33.720
If people want to add it, why not?

01:33.720 --> 01:43.280
So to make it non-blocking, the obvious way to extend it is to take an event framework

01:43.280 --> 01:47.920
like libevent, and then in libevent speak it as well.

01:47.920 --> 01:53.920
You create an event base, you do a bit of initialization where you pass the event base

01:53.920 --> 01:56.160
to the asynchronous library function.

01:56.160 --> 02:00.680
You start it, it returns to say, well, okay, I'm busy.

02:00.680 --> 02:06.080
Then at some point it does a couple of callbacks, like this callback function that you pass,

02:06.080 --> 02:10.520
but the main loop is called event-based dispatch.

02:10.520 --> 02:15.720
As long as your entire application is written around it, then the application just calls

02:15.720 --> 02:24.040
this one, and then you can call this connect by name as many times as you like.

02:24.040 --> 02:30.600
If you want to make this practical, more complex, and do release engineering, for example, getDNS

02:30.600 --> 02:36.000
has support for, I think, three event frameworks, and you can define your own event framework

02:36.000 --> 02:37.000
and stuff like that.

02:37.000 --> 02:38.460
I'll ignore this.

02:38.460 --> 02:44.760
The only thing you're going to get here is libevent.

02:44.760 --> 02:49.200
There's a couple of practical things that we would like to add.

02:49.200 --> 02:52.720
So now we get a rather full slide.

02:52.720 --> 02:55.960
So far I said you get a socket back.

02:55.960 --> 03:00.200
Implicitly a socket back means TCP because your DPA is way too complex.

03:00.200 --> 03:04.400
But then in practice, who does TCP anymore?

03:04.400 --> 03:08.640
The thing is if you have a TCP socket, then you immediately call your SSL library and

03:08.640 --> 03:10.480
you want a TLS connection.

03:10.480 --> 03:15.560
At least I hope that people are not writing new code that ships unencrypted data over

03:15.560 --> 03:18.720
the internet.

03:18.720 --> 03:24.320
Within the pfent, you're lucky because they have a concept called buffer event.

03:24.320 --> 03:27.360
That's why the callback there gets a buffer event.

03:27.360 --> 03:32.200
The pfent can transparently do SSL.

03:32.200 --> 03:36.680
So you just read and write to the buffer event, and then the pfent will, if it knows that

03:36.680 --> 03:41.600
it is TLS, then it sends it to openSSL.

03:41.600 --> 03:46.760
And if it's just a normal TCP connection, then it sends it to the socket.

03:46.760 --> 03:53.700
So that solves that problem, and that allows the library to also do a couple of other interesting

03:53.700 --> 03:57.440
things, as we will see on the other slide.

03:57.440 --> 04:05.200
But because we are an organization that is focused on DNS, we focused on all of the complexity

04:05.200 --> 04:07.520
of stuff that you can do with DNS.

04:07.520 --> 04:13.280
So for example, one thing that the library does, I forgot to mention, is that if you

04:13.280 --> 04:18.200
get multiple addresses back, then the traditional way is you write a for loop, you do connect

04:18.200 --> 04:23.280
to the first address and then to the second address, and there's many minutes' time out

04:23.280 --> 04:24.760
on the TCP connection.

04:24.760 --> 04:27.480
So if the first address doesn't work, then it takes forever.

04:27.480 --> 04:32.600
So your library needs to do happy eyeballs such that you start the connect, wait not

04:32.600 --> 04:38.760
that long, and then start the next connect, which also means that any timer system is

04:38.760 --> 04:40.620
not in the order of seconds.

04:40.620 --> 04:45.280
It should be definitely in the order of milliseconds, because it should be within human response

04:45.280 --> 04:51.360
levels and not like, okay, the network is down, we wait seconds.

04:51.360 --> 04:57.680
So that is stuff that this library can hide and that the prototype also does.

04:57.680 --> 05:04.840
But to get to the DNS part, if you have a modern web browser, then the web browser has

05:04.840 --> 05:12.320
an option to configure DNS, and that's highly controversial because it goes over HTTP, but

05:12.320 --> 05:18.440
it's something where applications have now said, okay, we are done with et cetera, resolve.com

05:18.440 --> 05:25.360
and application point of view want to be able to do, decide which is our upstream resolver.

05:25.360 --> 05:31.440
So we added configuration options that you can say, well, I want to have an upstream

05:31.440 --> 05:36.120
resolver that has authenticated encryption.

05:36.120 --> 05:43.400
I don't really like QUIC, and I have no clue, so I said the only allowed transport protocols

05:43.400 --> 05:49.120
is plain old DNS over 53, which will always fail because it cannot do any encryption,

05:49.120 --> 05:57.600
but we do allow DNS over TCP, and we do allow DNS over HTTP, but none of the fancy QUIC

05:57.600 --> 05:58.600
things.

05:58.600 --> 06:04.840
We have a name for authentication, and of course we can go completely overboard and

06:04.840 --> 06:09.120
also do SVC parameters.

06:09.120 --> 06:17.120
So that extends the call a bit because now the context has a way that you can say, well,

06:17.120 --> 06:21.920
this is my DNS policy, and then it goes out and do it.

06:21.920 --> 06:29.760
I mean, basic interface is still more or less the same.

06:29.760 --> 06:34.200
So we worked on connect by name.

06:34.200 --> 06:39.280
We built a prototype, a grant from an LNET foundation.

06:39.280 --> 06:41.800
We support asynchronous resolution.

06:41.800 --> 06:49.160
Well, of course, asynchronous also means that your A or what A query should go in parallel,

06:49.160 --> 06:50.160
happy eyeballs.

06:50.160 --> 06:53.960
Then, of course, the DNS community invented Dane.

06:53.960 --> 06:59.960
So if you do TLS, then you also have to do the Dane query immediately, and I forgot to

06:59.960 --> 07:00.960
list here.

07:00.960 --> 07:09.000
You can also do SVCB, and if you have the patience to configure experimental open SSL

07:09.000 --> 07:16.760
libraries, you can also do the encrypted client hello from SVCB into open SSL and stuff like

07:16.760 --> 07:17.760
that.

07:17.760 --> 07:21.880
The nice thing is you can all hide it in a single library.

07:21.880 --> 07:28.960
So what I would like from the community is sort of one is sort of what doesn't work,

07:28.960 --> 07:31.000
what extra stuff that we need.

07:31.000 --> 07:34.920
But we also have a problem with how do we go further with this.

07:34.920 --> 07:41.600
I mean, we built a prototype, but we cannot really ourselves make it into a product for

07:41.600 --> 07:42.600
various reasons.

07:42.600 --> 07:51.240
So take a look at it if you're interested and let us know if you want to do something.

07:51.240 --> 07:55.200
Current problem for me is it's on top of get DNS.

07:55.200 --> 08:00.560
The DNS is an extremely nice library, but it tries to do everything, so it's also a

08:00.560 --> 08:02.080
very heavyweight library.

08:02.080 --> 08:07.840
So there it is like it's a library that you want to link with potentially all applications

08:07.840 --> 08:11.680
should it be that heavyweight.

08:11.680 --> 08:18.460
So that's how we got to the next subject.

08:18.460 --> 08:25.560
This is sort of now what the ITF has created as what a stops resolver should do.

08:25.560 --> 08:32.360
And I left out a casellian other things because ADD is busy and I don't know, there's probably

08:32.360 --> 08:34.440
quite a few other working groups.

08:34.440 --> 08:40.480
So the stop resolver, which was a very simple thing with a res send that sends a query over

08:40.480 --> 08:47.880
port 53, has to do more and more and more stuff.

08:47.880 --> 08:54.240
So many applications have a stop resolver.

08:54.240 --> 08:59.560
How many libraries will implement all of those transports, especially if it's also implemented

08:59.560 --> 09:02.080
in this way of languages.

09:02.080 --> 09:08.960
It used to be that the stop resolver had basically no state, but if you do the OT, the OA, the

09:08.960 --> 09:12.480
UQ, then you have connection set up.

09:12.480 --> 09:18.440
You generate load in a recursive resolver because if you're constantly setting up, say,

09:18.440 --> 09:25.000
the OT, the OT connections, then it has a way higher load than if it's just a simple

09:25.000 --> 09:27.560
UDP query.

09:27.560 --> 09:32.960
And it's definitely bad for short-lived applications like Bing that have a way higher overhead

09:32.960 --> 09:40.600
setting up a connection to the local recursive resolver than the actual work that the application

09:40.600 --> 09:43.560
is doing.

09:43.560 --> 09:51.000
So the simple way to solve that, we thought, you introduce a local proxy.

09:51.000 --> 09:58.760
That's not really something new because lots of people are unbound as a local DNS proxy.

09:58.760 --> 10:05.520
Well, we also, as part of the GetDNS project created at Stirby, that focuses more on doing

10:05.520 --> 10:08.720
DNS stack all the time.

10:08.720 --> 10:15.080
There is things like DNS dist, DNS mask, systemd, resolve d.

10:15.080 --> 10:19.040
So that looks like, okay, we don't have to worry about that.

10:19.040 --> 10:23.080
We can just talk to a local proxy.

10:23.080 --> 10:29.720
But then if we go back to the example config, I had for Connect by Name for the Firefox

10:29.720 --> 10:32.880
that wants to talk DOH.

10:32.880 --> 10:38.680
How do you tell your local proxy that you actually want to have an authenticated connection?

10:38.680 --> 10:44.840
Well, what if your proxy is just sending it, I don't know, to one of the public resolvers

10:44.840 --> 10:46.160
over port 53?

10:46.160 --> 10:50.440
Maybe that's not what your application wants.

10:50.440 --> 10:59.640
And then this local proxy ID falls down and you get, say, a browser again implementing

10:59.640 --> 11:06.120
its own sub-resolver because it doesn't have any control.

11:06.120 --> 11:17.080
So we thought about it for a while and created a draft in the ITF with a new edns0 option.

11:17.080 --> 11:23.800
And basically when you send the request to your step resolver, then you can encode all

11:23.800 --> 11:30.680
of the stuff that you want to have as a policy in such an option.

11:30.680 --> 11:36.960
So you can be very basic and set a flag like, well, only give me an authenticated connection.

11:36.960 --> 11:41.520
If you can't do it and just report like it doesn't work or you could say, well, this

11:41.520 --> 11:48.160
is the recursive resolver that I want you to use, please use that.

11:48.160 --> 11:57.800
And then applications can trust the local proxy because they can control it.

11:57.800 --> 12:06.720
And that provides a nice way to basically reduce the step resolver footprint a bit by

12:06.720 --> 12:13.000
moving all of the difficult transports to the proxy.

12:13.000 --> 12:21.240
We have a proof of concept for that, though I have to warn you that we revised the layout

12:21.240 --> 12:25.880
of the option in the draft that is listed here and what the proof concept does is an

12:25.880 --> 12:26.960
older draft.

12:26.960 --> 12:34.920
But if you want to play with it with the general concept, then that is there.

12:34.920 --> 12:43.980
Finally, so we decided that, well, we can continue writing code in C and of course for

12:43.980 --> 12:49.800
our existing products like Unbound, NSD, we will just maintain them in C because they

12:49.800 --> 12:56.400
are written in C. But we would like to try to move to a draft

12:56.400 --> 12:58.720
for new code.

12:58.720 --> 13:08.160
And I just copied a little bit of stuff from a prototype.

13:08.160 --> 13:15.120
First thing, uses Rust in creative ways.

13:15.120 --> 13:23.120
And that is something where it's now a prototype and we definitely need feedback from users

13:23.120 --> 13:24.440
of the library.

13:24.440 --> 13:29.440
Like, okay, it's very great that you can have a message builder that takes a static compressor

13:29.440 --> 13:34.720
type and it has a stream target, but probably you don't want to write code like that.

13:34.720 --> 13:42.080
So it's built at the moment to be flexible and use the language, but it should be somewhere

13:42.080 --> 13:45.720
modified to be more usable.

13:45.720 --> 13:53.000
Then here in the middle, you basically get the main thing because the whole thing is

13:53.000 --> 13:58.040
generic if you want to send a query, then you have to go to the question section and

13:58.040 --> 14:02.440
then you say, well, I want to push a question there.

14:02.440 --> 14:08.280
And then there is again a bit of a usability problem where you say, okay, I need this back

14:08.280 --> 14:12.880
to a builder and I need a clone of it.

14:12.880 --> 14:18.440
So then, so this is the part that I experimented with.

14:18.440 --> 14:26.160
If you want to have a TCP upstream, then you say, create the TCP connection.

14:26.160 --> 14:32.600
And the nice thing with Rust is that it can do all of the asynchronous stuff with a nice

14:32.600 --> 14:35.200
syntax.

14:35.200 --> 14:40.960
So basically you say, do this connect here and wait until the connect is done.

14:40.960 --> 14:49.880
But because this function is implicitly asynchronous, as a programmer, you can just write this as

14:49.880 --> 14:54.840
if it's sequential code, but the caller can just call this as an asynchronous function

14:54.840 --> 15:00.080
and you don't have to do anything extra.

15:00.080 --> 15:08.880
Here I have to do a bit more work to really figure out how it fits in the Rust ecosystem

15:08.880 --> 15:16.400
because the thing with, if you have a TCP connection upstream to a DNS resolver, and

15:16.400 --> 15:23.920
I wanted to have this as just a basics for maybe DOH or whatever, is that you want to

15:23.920 --> 15:29.720
set up the connection once, but then you want to potentially send many queries over it.

15:29.720 --> 15:38.040
So I need to have a separate thing that actually talks TCP as a worker thread, but then because

15:38.040 --> 15:43.840
it's all asynchronous, this is basically getting an asynchronous worker.

15:43.840 --> 15:48.960
And then I also say, well, give me an asynchronous query.

15:48.960 --> 15:53.680
And then in Rust, you can say, okay, you have two asynchronous things that you want to do

15:53.680 --> 15:55.760
at the same time.

15:55.760 --> 15:58.940
Just do them both at the same time.

15:58.940 --> 16:04.760
And then normally we expect to be here that we got a reply and then we print a reply and

16:04.760 --> 16:07.200
we are done.

16:07.200 --> 16:15.200
So this is sort of the direction we want to go to, which is also why we have a bit of

16:15.200 --> 16:20.320
a problem developing the connect by name prototype that we now have because it is like, okay,

16:20.320 --> 16:27.040
we don't really want to have a new prototype in C. What do we want to do with it?

16:27.040 --> 16:31.200
So that's what I wanted to tell today.

16:31.200 --> 16:40.640
There is I think plenty of space for questions.

16:40.640 --> 16:49.480
I love the idea of having a function which can deal with not just name a resolution,

16:49.480 --> 16:53.200
but DNS name a resolution and also the cryptography.

16:53.200 --> 16:59.200
But as a distribution maintainer, I have to say that having something, a library function

16:59.200 --> 17:06.520
which makes applications behave differently from all other applications is really a non-starter.

17:06.520 --> 17:13.280
So I think that you need to consider in some way to support the NSS and the NSS plugins

17:13.280 --> 17:17.360
through the libc or however it's better.

17:17.360 --> 17:24.720
You mentioned that probably a daemon is needed to get good performance.

17:24.720 --> 17:33.560
So maybe the DNS part is the less important one that you can delegate to some other component.

17:33.560 --> 17:36.040
Can you summarize?

17:36.040 --> 17:37.320
I'll try to summarize.

17:37.320 --> 17:47.640
You say there's something with distributing this and there is something with if you run

17:47.640 --> 17:51.400
a local proxy, then you don't have to focus as much on DNS.

17:51.400 --> 17:53.560
If I got that correct.

17:53.560 --> 18:02.960
I mean, there are already some projects in this space that you mentioned and they are

18:02.960 --> 18:08.840
expected to work with the normal libc NSS plugins.

18:08.840 --> 18:15.600
And I think that your application, sorry, your library to be universally used, I think

18:15.600 --> 18:18.280
that has to be your goal.

18:18.280 --> 18:24.640
You need to support the normal name resolution, which is expected by any applications.

18:24.640 --> 18:30.160
So it does to support the libc plugins.

18:30.160 --> 18:36.760
So basically, yeah, you say that the library will only be adopted if it supports the libc

18:36.760 --> 18:37.760
plugins.

18:37.760 --> 18:39.760
Yes, I agree.

18:39.760 --> 18:46.140
I mean, that's why we made the prototype because we were looking into what should the interface

18:46.140 --> 18:51.600
to the library be, how should the library behave, stuff like that, sort of the high

18:51.600 --> 18:52.680
level stuff.

18:52.680 --> 19:00.120
I'm fully expecting that any production quality implementation of the library has to take

19:00.120 --> 19:08.280
a lot of this stuff into account and certainly dealing with Nesbitch.conf is, I guess, mandatory

19:08.280 --> 19:14.240
for any production quality library.

19:14.240 --> 19:20.320
For the proxy control option, because there are lots of demons in that space, of course,

19:20.320 --> 19:26.320
it's best if those adopt the option once it is actually standardized by the ITF.

19:26.320 --> 19:30.700
I mean, it's not that we want to write another proxy.

19:30.700 --> 19:36.280
It's just like, okay, we have a very specific problem that we want to solve if we want to

19:36.280 --> 19:42.880
make stuff resolve for a small and still give them access to all of the encrypted transports.

19:42.880 --> 19:49.960
But yeah, if, for example, systemd resolve would also do the proxy control option, then

19:49.960 --> 19:51.280
that would be perfectly fine.

19:51.280 --> 19:54.880
I mean, there's no reason to write a new one.

19:54.880 --> 19:58.880
Leonard is around, don't worry.

19:58.880 --> 19:59.880
Yeah.

19:59.880 --> 20:11.880
So for the proxy control option, is it only the stuff resolved that won't sell the proxy

20:11.880 --> 20:17.080
server that it wants those policies applied or does the proxy also communicate back to

20:17.080 --> 20:19.840
the stuff resolved that is actually applying those policies?

20:19.840 --> 20:25.760
Because in the initial situation where nothing supports it, which you always have.

20:25.760 --> 20:33.960
So the question is, what happens if you send a proxy control option to an older stuff resolver

20:33.960 --> 20:36.440
that may not be aware?

20:36.440 --> 20:40.240
So I didn't want to go over the entire draft.

20:40.240 --> 20:42.280
So we thought about that.

20:42.280 --> 20:48.320
But basically there are some priming queries.

20:48.320 --> 20:52.360
I forgot the exact name.

20:52.360 --> 20:55.860
Is it resolver dot arpa that is proposed?

20:55.860 --> 20:56.760
Something like that.

20:56.760 --> 21:04.040
So try to look up resolver dot arpa, see if you get the right response.

21:04.040 --> 21:08.240
If you don't, then the only thing you leaked is that you were trying to look up resolver

21:08.240 --> 21:09.240
dot arpa.

21:09.240 --> 21:12.240
So you assume that that is safe.

21:12.240 --> 21:15.960
If you do get it, then you know that the proxy understands it.

21:15.960 --> 21:16.960
Yeah.

21:16.960 --> 21:17.960
Any more questions?

21:17.960 --> 21:18.960
Okay.

21:18.960 --> 21:19.960
Yeah.

21:19.960 --> 21:22.960
So there's actually a comment on both this presentation and the previous one.

21:22.960 --> 21:25.960
You're tackling three moving targets at the same time.

21:25.960 --> 21:29.960
You're trying to figure out how to integrate with the event loop.

21:29.960 --> 21:33.960
You're trying to figure out what your API to the application looks like.

21:33.960 --> 21:37.960
And you need to figure out what your integration with an SS or system.

21:37.960 --> 21:39.960
The complexity is multiplicative.

21:39.960 --> 21:41.960
So you're cubing this.

21:41.960 --> 21:43.960
This is a horrible idea.

21:43.960 --> 21:49.960
You can at least remove the event loop integration as a moving target.

21:49.960 --> 21:56.440
There's an existing project called libderto which tries to solve that one problem by providing

21:56.440 --> 22:02.280
four libraries an API to integrate with an arbitrary event loop provided by the application.

22:02.280 --> 22:10.120
So I think you need to remove the number of moving targets, like reduce it, and maybe

22:10.120 --> 22:15.880
the event loop is the one to kick out first and try to put in a separate consideration

22:15.880 --> 22:19.880
how to solve that, and then continue from there.

22:19.880 --> 22:21.880
And if they left.

22:21.880 --> 22:22.880
Yeah.

22:22.880 --> 22:31.320
So the question was basically it tries to deal with too much stuff at the same time.

22:31.320 --> 22:38.440
Event loops, figuring out an API and then also figuring out how to deal with an S switch.

22:38.440 --> 22:44.360
There's an existing library called libderto.

22:44.360 --> 22:49.760
That makes it easier to be flexible with respect to event loops.

22:47.780 --> 23:00.600
event to just get Ferto.

22:49.760 --> 22:51.560
That's definitely a good point.

22:51.560 --> 22:52.880
I'll try to look at it.

22:52.880 --> 23:00.600
But I specifically decided to only focus on libd

23:00.600 --> 23:07.240
To get something a prototype up and running and not try to support arbitrary things like

23:07.240 --> 23:10.040
that.

23:10.040 --> 23:11.040
More questions?

23:11.040 --> 23:12.040
Some more time.

23:12.040 --> 23:13.040
Time for one more.

23:13.040 --> 23:14.040
Okay.

23:14.040 --> 23:19.040
It seems that we have run out of questions.

23:19.040 --> 23:20.040
Wonderful.

23:20.040 --> 23:21.040
Yeah.

23:21.040 --> 23:22.040
Thank you.

23:22.040 --> 23:49.520
Thank you very much.

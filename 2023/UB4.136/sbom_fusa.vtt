WEBVTT

00:00.000 --> 00:10.000
So, next stop, Nicole.

00:10.000 --> 00:13.000
So, yeah.

00:13.000 --> 00:15.000
Okay.

00:15.000 --> 00:18.000
Hi, everyone. Hi, everyone at home.

00:18.000 --> 00:27.000
So, yeah, I'm talking today about how to maybe use SPDX to establish traceability for functional safety.

00:27.000 --> 00:37.000
So, about me, yeah, I've been a software developer for quite some time, always working in, yeah, some kind of safety-critical projects,

00:37.000 --> 00:45.000
and that somehow brought me about 12 years ago to, yeah, really focusing on functional safety.

00:45.000 --> 00:53.000
And so, currently, I'm working as a tech consultant still, yeah, mainly in functional safety, a little bit security, a little bit license-compliant,

00:53.000 --> 00:58.000
so everything that gets critical for software components.

00:58.000 --> 01:08.000
I'm involved in some of the Linux Foundation projects, and, yeah, just important thing about me, I'm really not good with faces and names.

01:08.000 --> 01:15.000
So, if you walk past by me and I don't say hello, it's just because I'm not really sure if it's you.

01:15.000 --> 01:19.000
So, just say hello to me and, yeah, then I know it's you.

01:19.000 --> 01:29.000
And you can contact me usually with a handle at Nick Pappler at the usual social media or GitHub places if you want to find me.

01:29.000 --> 01:35.000
So, what can we do for functional safety with SPDX?

01:35.000 --> 01:43.000
So, I'm not sure who at all here is aware about functional safety or what it is.

01:43.000 --> 01:47.000
Oh, a few, that's cool. So, yeah.

01:47.000 --> 01:51.000
It's more than a thought, so I'm happy.

01:51.000 --> 02:02.000
Yeah. So, yeah, safety, generally, it's a freedom of risk or a minimization of risk of getting heard of doing something bad.

02:02.000 --> 02:13.000
And the functional safety part of that is that whatever can break or go wrong in your system is handled, is detected.

02:13.000 --> 02:19.000
So, you have mainly two options here. Avoid something bad to happen.

02:19.000 --> 02:27.000
Avoid your microcontroller to break. Avoid your software to do something you haven't intended it to do.

02:27.000 --> 02:36.000
Or, at least, to detect things going wrong and then define, initiate mitigation measures, define safe states,

02:36.000 --> 02:43.000
what to do when things go wrong, and implement this and hopefully have a safe system at the end.

02:43.000 --> 02:46.000
So, what do we need if we want to do this?

02:46.000 --> 02:59.000
So, as I already said, you need a system that's robust and suitable for your safety application so that it in itself has some features that it doesn't kill people,

02:59.000 --> 03:07.000
that it doesn't hurt people, that it doesn't hurt the environment, and several levels of analysis, of tests, of verification measures

03:07.000 --> 03:12.000
to prove that your system is your system as you have intended it to be.

03:12.000 --> 03:19.000
And to do so, to really make sure what you have specified, you have implemented in the end, you should have a process,

03:19.000 --> 03:25.000
you should have guidelines, methods, and you should plan how to do this.

03:25.000 --> 03:30.000
And, unfortunately, this results in a lot of documents.

03:30.000 --> 03:39.000
You usually start with something called a safety plan, so it's kind of project management plan or any kind of plan strategy, how you want to do this.

03:39.000 --> 03:46.000
It's a plan how you want to verify with this, you have your requirements, you have an architecture, go coding guidelines,

03:46.000 --> 03:55.000
you have loads of documents, 50 to 100 documents in the end, so it's really a pain.

03:55.000 --> 04:02.000
So, and I think most of us here are engineers, and yeah, engineers like to engineer.

04:02.000 --> 04:09.000
And so we like to create a fantastic system, maintaining a fantastic system.

04:09.000 --> 04:19.000
Yeah, we do have to do, at least in the industry life, apply a process to do so, and then we have to ensure there is all documentation in place

04:19.000 --> 04:22.000
and all evidences are consistent, so yeah.

04:22.000 --> 04:28.000
First two things we really like to do, we like to create things, we like to maintain things, we like to have them fantastic.

04:28.000 --> 04:37.000
Applying a process, yeah, if we have to, some like me like processes, but I think 99% don't.

04:37.000 --> 04:45.000
And yeah, ensuring all documentation and evidences are consistent, that's for at least for most engineers it's a no-no.

04:45.000 --> 04:53.000
You don't like this, this is pain, this is at least emotionally that feels like it's something I have to do on top because I know what I did,

04:53.000 --> 04:58.000
I know what I want to do, why do I need to record this, it's clear.

04:58.000 --> 05:10.000
So just if we assume the process to create and maintain all artifacts that you need for functional safety, so the plans, the requirements, the verification evidences,

05:10.000 --> 05:21.000
it's established and you will do this, but you still have the biggest pain there, keeping it complete and keeping it consistent during all the time,

05:21.000 --> 05:25.000
for all your variants, during all your patches.

05:25.000 --> 05:42.000
So the idea was then, hey, why can't we use SPDIC style solution there where you have the full traceability of a safety package or whatever to track all your possible combinations of your system.

05:42.000 --> 05:56.000
And there is something in SPDIC called relationships and these relationships actually, when you look into them, describe exactly what we do in functional safety with the idea of traceability,

05:56.000 --> 06:03.000
so really traceability, this belongs to that in that version and it goes into that and it's created according to that.

06:03.000 --> 06:10.000
So actually when you look into the relationships list, at least nearly everything that you need is there.

06:10.000 --> 06:14.000
So how could these relationships then really work for functional safety?

06:14.000 --> 06:21.000
So FUSA is Geeks speak for functional safety, Geeks speak for functional safety.

06:21.000 --> 06:27.000
So the documentation structure for functional safety usually consists of three types of documents.

06:27.000 --> 06:33.000
On the one hand side, you have all your plans, your processes, your guidelines, your strategy, how to do things.

06:33.000 --> 06:44.000
Then you have your requirements and specifications saying, okay, what have we done or what do we plan to do from technical point of view?

06:44.000 --> 06:55.000
And you have all your verification evidences, your safety analyzes, your STPA, tests, test cases, reports, any kind of evidence in the end.

06:55.000 --> 07:06.000
And yeah, we are that old, we like the V model from functional safety point of view, at least we want to try to have something that is understandable by people who like the V model.

07:06.000 --> 07:14.000
So any kind of documentation of work products, of artifacts that we have usually fits into this V model.

07:14.000 --> 07:22.000
So we have the requirements, we have the full workflow, we have tests associated with requirement style information,

07:22.000 --> 07:27.000
we have reports that document that we did this test and the outcome of the test.

07:27.000 --> 07:41.000
And we have all these documents that are associated with the processes, the plans, the guidelines, how to qualify things, how to assess stuff in the end.

07:41.000 --> 07:45.000
So we have everything in plans, we have everything in the V model.

07:45.000 --> 07:52.000
And as you see, the documents are some kind of interconnected.

07:52.000 --> 08:03.000
So when we speak from the functional safety point of view, what are plans, processes and guidelines, what are they, what's that kind of document?

08:03.000 --> 08:11.000
And in the end, actually, it's just kind of artifact that specifies something, it specifies how to do things, how you plan to do things.

08:11.000 --> 08:16.000
How another document or another artifact should be structured or created.

08:16.000 --> 08:18.000
So it's always a specification.

08:18.000 --> 08:22.000
So when you look into standard safety document, the safety plan.

08:22.000 --> 08:29.000
Safety plan itself, it's just a specification how to do safety in the project or for the product.

08:29.000 --> 08:35.000
The coding guidelines, it's a specification how to create the code.

08:35.000 --> 08:41.000
So it's always a specification, a plan is always a specification how to do things.

08:41.000 --> 08:51.000
Then when we look into the product documentation, yeah, what kind of product documentation will we need to manage or do we have in our functional safety project?

08:51.000 --> 09:01.000
We have requirements, we have report type documents, test results, some analysis results and we have the code.

09:01.000 --> 09:09.000
And when we look into the product style document, product documentation, it's a little bit more complex than plans.

09:09.000 --> 09:18.000
So, yeah, a safety requirement specification clearly, it's a specification of the safety requirements of what you want to achieve from the safety point of view.

09:18.000 --> 09:25.000
A unit test is a test case related to a specification part or to a part of code.

09:25.000 --> 09:32.000
The unit test report itself then is a documentation of the test case again.

09:32.000 --> 09:40.000
So, yeah, and as you see, everything is connected, everything can be expressed with a relationship.

09:40.000 --> 09:49.000
And, yeah, I'm working functional safety for quite some time and always say it's about a safe product, it's not about assessments, it's not about standards.

09:49.000 --> 09:57.000
But, yeah, the only present question always is what do I need for the assessment, how can I make my assessor happy in the end?

09:57.000 --> 10:02.000
So, I say you have to have a safe product and they say I want to make my assessor happy.

10:02.000 --> 10:04.000
So, what do you need to make the assessor happy?

10:04.000 --> 10:17.000
Yeah, to begin with, they will ask you for a lot of planning documents, the safety plan, a product architecture or your design, a strategy, how you want to do things.

10:17.000 --> 10:28.000
So, really, that they have in the beginning an idea, yeah, what's in the scope, what do you plan to do, do you have at all an idea of what you want to do?

10:28.000 --> 10:38.000
Then, yeah, the concept you show then should be sound, should be safe, at least you should have an idea at the beginning.

10:38.000 --> 10:58.000
And you should have an idea about the completeness and consistency of your plans and in the end really present everything as a consistent, complete and, yeah, full product.

10:58.000 --> 11:10.000
So, when we look into this, it's always, again, it's related documents and from the assessment point of view it's a package and the package is described by a list.

11:10.000 --> 11:24.000
So, you always have lists of documents and you say, okay, for this, in this point of time, dear assessor or dear internally QM department, we have this part of information and we start from there.

11:24.000 --> 11:32.000
And then later you have more information and say, okay, I have a new package and you get this one.

11:32.000 --> 11:45.000
And in the end you have the full package and you have all your reports, all your configuration, all your calibrations and you will deliver that one.

11:45.000 --> 12:08.000
And actually when we look into this from the SPDX point of view, yeah, it's all information that you can use to generate S-bombs for safety or we call them now safety S-bombs to really support your safety compliance argumentation and to really deliver the information always what is in the product, what is in the scope.

12:08.000 --> 12:12.000
So, how can I use this maybe in detail?

12:12.000 --> 12:17.000
So, as I said before, usually when you start an assessment, you start with a concept assessment.

12:17.000 --> 12:24.000
So, what's the plan? What's the scope of the product? What's the safety scope of the product? What's maybe the beginning architecture?

12:24.000 --> 12:31.000
And how do you plan to do things? Then you have a final assessment saying, okay, we are ready now.

12:31.000 --> 12:38.000
We want to get a final safety approval. We are really sure that we have a great product and we want to ship this.

12:38.000 --> 12:50.000
And as a real life is, you will have reassessments because your product is involving, you have CVs and all that stuff.

12:50.000 --> 13:05.000
So, what do we really need? So, as I said again, concept assessment has a goal that you have a proof that your concept is sound, that you can generally start working like that.

13:05.000 --> 13:14.000
So, you have your safety plan, any other initial plans where you set up how to do things, you'll have a safety concept.

13:14.000 --> 13:21.000
So, yeah, you will have a package of information, you will have a list of things that you want to deliver.

13:21.000 --> 13:29.000
So, when we look into the S-PROM types that we heard about in the morning today, it's actually nothing else than a design S-PROM.

13:29.000 --> 13:42.000
It's how to do things. You can think about it like when you build a house, it's like the plan, how to build a house.

13:42.000 --> 14:00.000
What will be the methods you use? Will it be in stone? Who will come to do this? Will you need certain machinery? Something like that.

14:00.000 --> 14:28.000
Then, the next stage really is go through your assessment stages. So, yeah, you have your concept ready and you won't have all the things ready and then ship them

14:28.000 --> 14:41.000
without some milestones in between. So, for each milestone you will have a package of things, you will have a list of things that are not really built into a final product

14:41.000 --> 14:48.000
but that are, yeah, somehow sources of information for what you have done so far.

14:48.000 --> 15:00.000
So, yeah, you could, for example, use the S-PROM for that, really as a list of all documents that will be part of your product up to then.

15:00.000 --> 15:09.000
Then, final stage is, yeah, you have finally everything that you want to have in your product and you start testing.

15:09.000 --> 15:19.000
So, you have really all your plans, you have all your specifications, you have all your test cases, you most probably will have all your test reports

15:19.000 --> 15:26.000
and you will deploy this and see if it runs the first time. So, yeah, it's the first build that you have of your product.

15:26.000 --> 15:34.000
So, you can ship a build S-PROM with completely everything that you need for the product, for the testing of the product.

15:34.000 --> 15:48.000
And then, when we look into final things, this is when things become tricky because, yeah, I come from the automotive world, yeah, you have one software build

15:48.000 --> 16:01.000
and then you have a bunch of calibration and configuration data that goes with your software into the vehicle that goes on the road or into several types of vehicles.

16:01.000 --> 16:16.000
You have then really a different set of configuration and calibration data going with your release and that's really getting into the question, what is really deployed on your system.

16:16.000 --> 16:28.000
So, because you have your runnable and you have your configuration data and you have a bunch of versions of that and it's really hard, honestly speaking, to keep track of this.

16:28.000 --> 16:41.000
So, here, this deployed S-PROM would really come into handy, say, okay, we have everything and we know with a generated list what's really deployed on this vehicle.

16:41.000 --> 16:53.000
So, the real beauty, what I really see in this approach is that you can really close the loop about what you want to have and what you have in the end.

16:53.000 --> 17:11.000
So, standard in safety development is, yeah, you have the configuration management plan saying, okay, what types of documents do you have, what do you want to do them, how do you want the versions and what are baselines and branching and all that stuff.

17:11.000 --> 17:28.000
And you have a list of documents that you plan to have. So, that's really, yeah, it's called configuration items in the most projects. It's really the list from starting from the safety plan down to each source file that you have.

17:28.000 --> 17:42.000
But in the end, again, you will compile this and what you really have in the end and that's usually then in the safety world, it's the safety case. So, really, a compilation of all safety evidence that you have.

17:42.000 --> 17:59.000
In most cases, it's a copy of the configuration item list with all information attached, what's the final and valid version of this configuration item list member that goes into the final release.

17:59.000 --> 18:13.000
And in, yeah, most cases that I see, this is a manual process. There's a part partially they might generate something, but there's a lot of manual stuff in there.

18:13.000 --> 18:32.000
And then, yeah, comes the assessment type. You need to really make sure that everything that's in the safety case, or everything that's in the configuration item list really goes into the safety case and that it's consistent and all that stuff and usually this is really done in manual spot checks.

18:32.000 --> 18:45.000
So, it's a pain and it's error prone because spot checks are, will just give you a picture of how you can, yeah, that's just so far you can go with spot checks.

18:45.000 --> 18:58.000
So, the idea here, oops, typo. The idea here is really that you have your generated S-bomb with everything that is deployed.

18:58.000 --> 19:06.000
And you can then automatically more or less check back is everything that I have in my generated S-bomb from the configuration item list.

19:06.000 --> 19:21.000
Do I have some open ends in my relationships? Because if I have open ends, there might be, there will be some gap in what I have, maybe not tested, not verified, or just not thought about, maybe in my analysis.

19:21.000 --> 19:28.000
So, you will see the open ends. You will see that there are things that might not match.

19:28.000 --> 19:37.000
And next beauty is, yeah, you can do this process manually as often if you want to, but it is a pain and it takes time.

19:37.000 --> 19:47.000
And it is error prone and it needs a human and it needs a lot of x-lists, PDFs, whatever. It's a pain. It's hard to document. It's hard to keep track with it.

19:47.000 --> 19:58.000
And it's not like, yeah, what we had maybe 10 years ago that you release once a year and maybe you have a patch every three months if you're really into patches.

19:58.000 --> 20:04.000
You have ZVs coming in. You have continuous integration. You have bugs. You have product variants.

20:04.000 --> 20:11.000
And doing this loop all the time manually, you won't be able to, you are not able to keep track of it.

20:11.000 --> 20:23.000
One of the biggest issues in the safety world at the moment, how can we have changes due to the CVs, due to the security things that we need to implement, we need to update.

20:23.000 --> 20:32.000
We can't say, oh, we have a safety certification. We cannot update. We cannot direct to security issues. That's just not possible.

20:32.000 --> 20:49.000
And so the idea here is as long as you have your S-bomb, your safety bomb, whatever you want to call it, of really all your documents in the configurations that you have in the end, then you can automatically scan again.

20:49.000 --> 20:57.000
Do I have this? Where do I need to change things? Change things. Have this run again and see if you're still complete.

20:57.000 --> 21:05.000
So, yeah, that's the idea. So we started with this idea about, yeah, I think maybe half a year ago.

21:05.000 --> 21:16.000
So there are still a lot of open topics. It's details about how to set up the tooling, what tooling to use, what do we need, what is there, how can I do this.

21:16.000 --> 21:27.000
Then the full relationship model between the safety artifacts. It's also ongoing. A complete model about documented evident types.

21:27.000 --> 21:39.000
So we do have document types, but this is sufficient what we currently see. Then we want to have a pilot project as proof of concept. That's candidates for that.

21:39.000 --> 21:52.000
And yeah, I'm from the safety world. I speak safety compliance standards, but there are security standards, for example, around other standards that ask for this compliance information.

21:52.000 --> 22:05.000
There's now in the automotive 2434, that's a new security standard. It asks for similar things than the safety standards. I do have a great system. Yeah, that's possible.

22:05.000 --> 22:12.000
I need a consistent set of documents documenting that I have a great system. That's where we might have a problem.

22:12.000 --> 22:26.000
So that are the things we're still looking into. And yeah, happy if anybody wants to join us, we meet every Friday evening.

22:26.000 --> 22:38.000
We have a call every information you will find here at the page of the FUSA special interest group at the SPDX project.

22:38.000 --> 22:49.000
Okay, so questions, please. Feedback, comments. Do you think it's complete crap? Can this go somewhere? Yeah.

22:49.000 --> 23:03.000
So you presented the process like what it takes for safety case to be made. Yeah. But I could not get what your group is doing. So are you building something that enables you.

23:03.000 --> 23:09.000
Okay, what the group is actually doing. How actually SPDX is being played here.

23:09.000 --> 23:26.000
Okay, so the question is, what is the group actually doing and how does SPDX come to play. So yeah, we do not define the process. So the process as the structures. Just give me a sec.

23:26.000 --> 23:39.000
So the structure like this and how to do things is already there. How do I make these things. And there are a lot of ideas around how to connect these things because you need to have that full traceability.

23:39.000 --> 23:56.000
It's from having handwritten tags in Word documents to using special lifecycle tooling. These approaches are established, but they are not so well interconnected most of the times.

23:56.000 --> 24:06.000
And later when you come into frequent updates, product variations, then it's really getting hard to keep track of things.

24:06.000 --> 24:19.000
And the idea of what we are currently following is that each piece of these information doesn't need to be in a tool. It doesn't need to be in a special kind of format.

24:19.000 --> 24:30.000
We can connect these with these relationships from SPDX that are already in the 2.3 specification.

24:30.000 --> 24:57.000
So we do the exercise of the mapping that everything, sorry, that we fit for the spec and maybe things go into 3.0 or later.

24:57.000 --> 25:07.000
Yeah, this is a follow up or an extra.

25:07.000 --> 25:25.000
So the question is there is there a publicly available example, not fully. So we're talking about how to create the use cases, how to create the overviews in the course. So you're always welcome to call in and see what we have.

25:25.000 --> 25:36.000
I really like this as an engineer, solution architect, having something like that and all the traceability, particularly out to the external world of the regulations.

25:36.000 --> 25:43.000
So when we did the safety thing, we had 800 documents to try and trace and they're all changing.

25:43.000 --> 25:53.000
And actually you want to look at the impact assessment of that change of change of regulation or move to a different market. You want to be able to see that.

25:53.000 --> 26:03.000
So if you could capture that and whether it's cyber or safety or anything, having that traceability must be a great movement.

26:03.000 --> 26:08.000
So I'm sure people like to see them would love it for this type of system.

26:08.000 --> 26:09.000
Yeah, yeah.

26:09.000 --> 26:11.000
Yeah, this thing is.

26:11.000 --> 26:13.000
I'm thinking that added to ship.

26:13.000 --> 26:25.000
Huge things about safety and the main international stuff like that. So capturing all this in a thing so you can see the relationships and change.

26:25.000 --> 26:34.000
If this went from version one to version two, where where's the impact? Which part of the design, which part of the supply chain?

26:34.000 --> 26:35.000
Yeah, exactly.

26:35.000 --> 26:45.000
Yeah, I would also love to have this. This is at the moment the idea is really OK, I need the evidence for me because I need to be sure what I have and what I have deployed.

26:45.000 --> 26:54.000
But yeah, the next thing is I'm a component part or I'm making component part and I ship this down the supply chain.

26:54.000 --> 26:58.000
And the next one who wants to consume this wants the information.

26:58.000 --> 27:14.000
And it doesn't make not even maybe not want or I don't want to give all out all the information that I have, but I can give the relationships and the completeness information and I can do this in an automated way that can go into an automated supply chain process.

27:14.000 --> 27:17.000
Supply chain, you pass the relevant bits of the standards.

27:17.000 --> 27:18.000
Exactly.

27:18.000 --> 27:22.000
Just say everyone follows this thing because actually 95% of the time.

27:22.000 --> 27:23.000
No one does that anymore.

27:23.000 --> 27:33.000
Yeah, time's up. Time's up. Sorry. So yeah, would be great to follow up on this. Please meet us on Fridays in the evening if you want to.

27:33.000 --> 27:49.000
And yeah, I'm happy to talk about this later with whoever shows up.

27:49.000 --> 27:51.000
Yeah, sorry for that.

27:51.000 --> 27:53.000
Thank you.

WEBVTT

00:00.000 --> 00:07.000
Let's see, I have two spaces.

00:07.000 --> 00:09.000
Good, good.

00:09.000 --> 00:11.000
All right.

00:11.000 --> 00:15.000
The whole team, we have now three of them.

00:15.000 --> 00:19.000
But they will be sharing a single mic, so, yeah.

00:19.000 --> 00:20.000
All right.

00:20.000 --> 00:21.000
Thank you very much.

00:21.000 --> 00:24.000
Welcome to our talk on standard bomb.

00:24.000 --> 00:29.000
We are here to share with you some of our experiences that we've had

00:29.000 --> 00:34.000
introducing a common S-bomb format at a large company.

00:34.000 --> 00:39.000
And we also hope to get into a discussion with you about your

00:39.000 --> 00:43.000
experiences and maybe things that you notice that we've missed

00:43.000 --> 00:47.000
or that we should or could do better.

00:47.000 --> 00:52.000
So all three of us, I must say, the thing is called standard bomb.

00:52.000 --> 00:56.000
That's just our name for Cyclone DX format.

00:56.000 --> 00:58.000
So we are not reinventing the wheel.

00:58.000 --> 01:01.000
It's not like we've invented a format or something.

01:01.000 --> 01:03.000
And we're also not selling anything.

01:03.000 --> 01:08.000
It's just sharing experience and talking to you.

01:08.000 --> 01:10.000
All three of us are from Siemens.

01:10.000 --> 01:13.000
So I feel I need to say a few words about the company.

01:13.000 --> 01:16.000
Siemens is a technology company, so you can buy small things like

01:16.000 --> 01:20.000
a thermostat for your smart building or if you need a whole train

01:20.000 --> 01:23.000
or a power plant.

01:23.000 --> 01:25.000
So, yeah, a power plant is nice.

01:25.000 --> 01:28.000
And also things in between like medical devices,

01:28.000 --> 01:30.000
magnetic resonance, tomography systems,

01:30.000 --> 01:33.000
or if you're equipping your factory,

01:33.000 --> 01:36.000
then you can buy factory equipment.

01:36.000 --> 01:39.000
So Siemens has also been around for some time.

01:39.000 --> 01:44.000
Just recently we've celebrated the 175th birthday of the company.

01:44.000 --> 01:47.000
So it's changed a couple of times over the years.

01:47.000 --> 01:51.000
And traditionally, of course, there has always been a focus on hardware.

01:51.000 --> 01:55.000
But in recent, well, decades I could say,

01:55.000 --> 01:58.000
software has become increasingly important.

01:58.000 --> 02:01.000
So now of the 50K R&D employees,

02:01.000 --> 02:04.000
we have a sizable portion of software developers.

02:04.000 --> 02:07.000
I couldn't find out exactly what the portion is,

02:07.000 --> 02:11.000
but I'm quite certain it's in the five digits and growing certainly.

02:11.000 --> 02:16.000
And since there's no, like, in a company like that,

02:16.000 --> 02:18.000
there's no one technology stack.

02:18.000 --> 02:22.000
We're basically using everything, I should say.

02:22.000 --> 02:26.000
And that growing importance of software, of course,

02:26.000 --> 02:30.000
leads us directly to software bills of material.

02:30.000 --> 02:37.000
You're all aware of the legislation that's upcoming mostly

02:37.000 --> 02:42.000
in the form of executive order and CRA and so on.

02:42.000 --> 02:45.000
So S-BOMs are getting more and more important.

02:45.000 --> 02:49.000
And I don't want to explain S-BOMs, that's just, you know,

02:49.000 --> 02:51.000
you all know the stuff on the slide.

02:51.000 --> 02:53.000
I just want to stress one thing,

02:53.000 --> 02:56.000
and that's generating an S-BOM for a software product

02:56.000 --> 02:58.000
is not something that can be done manually.

02:58.000 --> 03:01.000
It must be the result of an automated process, okay?

03:01.000 --> 03:07.000
So there's just no way to reliably do that manually.

03:07.000 --> 03:12.000
And one of the things that we realized is that an S-BOM

03:12.000 --> 03:15.000
is always created with a particular use case in mind.

03:15.000 --> 03:19.000
Even if you're not thinking of a use case while you're doing it,

03:19.000 --> 03:22.000
then you're still implementing whatever's in your head at that point.

03:22.000 --> 03:27.000
So it's always, the concrete S-BOM document is always intended

03:27.000 --> 03:29.000
for a particular use case.

03:29.000 --> 03:32.000
Just to give some examples that we are dealing with,

03:32.000 --> 03:34.000
one would be license compliance.

03:34.000 --> 03:36.000
So we want to, you know, make sure that we follow all the obligations

03:36.000 --> 03:39.000
from open source software licenses.

03:39.000 --> 03:43.000
That's very important because OSS software is used extensively at Siemens.

03:43.000 --> 03:46.000
We use many components, and we also publish them.

03:46.000 --> 03:50.000
So if you go to github.com slash siemens, then you will find some of them.

03:50.000 --> 03:52.000
And if any of you does that right now,

03:52.000 --> 03:55.000
then be sure to also click on the badges on top of the page.

03:55.000 --> 03:59.000
They link to other places on github that have Siemens open source software.

03:59.000 --> 04:02.000
It's not all consolidated into one.

04:02.000 --> 04:08.000
Anyway, license compliance also requires us to have source code available,

04:08.000 --> 04:10.000
because that must be scanned.

04:10.000 --> 04:14.000
Individual source files might be licensed under a different license

04:14.000 --> 04:16.000
than the main project and so on.

04:16.000 --> 04:19.000
And that's a particular requirement of that use case.

04:19.000 --> 04:23.000
So the S-BOM will look different compared to, for instance,

04:23.000 --> 04:25.000
the security vulnerability monitoring use case.

04:25.000 --> 04:27.000
Also very common.

04:27.000 --> 04:28.000
Source code is not so important.

04:28.000 --> 04:30.000
It's important for finding the vulnerabilities,

04:30.000 --> 04:32.000
but not so much for monitoring them.

04:32.000 --> 04:35.000
But you need different metadata, such as CPE information.

04:35.000 --> 04:40.000
CPEs are used to look up the vulnerability in the corresponding databases,

04:40.000 --> 04:42.000
so that's critical.

04:42.000 --> 04:46.000
And also you might want to include build tools,

04:46.000 --> 04:52.000
test frameworks, and so on, since they might also be vulnerable.

04:52.000 --> 04:55.000
Both of those use cases are internal use cases.

04:55.000 --> 05:00.000
So we generate the S-BOM for us, use it with our systems and processes,

05:00.000 --> 05:02.000
but we don't share it outside of the company.

05:02.000 --> 05:07.000
In the third case, regulatory, that would be, again, another use case

05:07.000 --> 05:11.000
where we are required sometimes, due to the new legislation,

05:11.000 --> 05:13.000
to publish the S-BOM.

05:13.000 --> 05:17.000
And then, of course, we must be assured to include certain fields

05:17.000 --> 05:23.000
in that S-BOM about every component that are required by that regulation.

05:23.000 --> 05:28.000
And we will not normally put much more into the S-BOM

05:28.000 --> 05:30.000
than we are strictly required to do,

05:30.000 --> 05:33.000
because that's for regulatory purposes,

05:33.000 --> 05:36.000
and we don't want to open up an attack surface

05:36.000 --> 05:42.000
for just people who want to bitch about some information being wrong or something.

05:42.000 --> 05:46.000
So that's just a realistic thing that's going to happen.

05:46.000 --> 05:49.000
And you'll see later that this is relevant,

05:49.000 --> 05:52.000
those S-BOMs being created for different use cases.

05:52.000 --> 05:56.000
Because when you're creating an S-BOM for your concrete product,

05:56.000 --> 05:59.000
you're actually solving something of a puzzle.

05:59.000 --> 06:04.000
So you have all kinds of pieces that must fit together to get the final S-BOM.

06:04.000 --> 06:08.000
Imagine you're shipping something simple,

06:08.000 --> 06:12.000
like a front-end container with an Angular application in it.

06:12.000 --> 06:16.000
So maybe you have an NPM to ask for dependencies.

06:16.000 --> 06:20.000
That's the easy part, because it's under your control.

06:20.000 --> 06:24.000
But then you also have, let's say, an Nginx in the container,

06:24.000 --> 06:29.000
which has an S-BOM or consists of some components.

06:29.000 --> 06:34.000
And it's in, let's say, a Debian Linux,

06:34.000 --> 06:41.000
and that has, I don't know, 100 or so open source components as well.

06:41.000 --> 06:45.000
And, well, sometimes you're lucky, and you work with partners,

06:45.000 --> 06:48.000
or in a company like Siemens, you have all kinds of different business units

06:48.000 --> 06:51.000
that produce components and give you S-BOMs.

06:51.000 --> 06:55.000
Those S-BOMs might have all the data that you need, or they might not.

06:55.000 --> 06:59.000
Imagine that people only gave you the S-BOM because they're required to

06:59.000 --> 07:03.000
by the regulators, the third use case.

07:03.000 --> 07:06.000
Then it would probably not be enough.

07:06.000 --> 07:10.000
For instance, license information is something that's not even required

07:10.000 --> 07:13.000
by the NTIA for a public S-BOM.

07:13.000 --> 07:15.000
They just want to know what component is it.

07:15.000 --> 07:18.000
They don't want to know much metadata.

07:18.000 --> 07:21.000
So that's something you need to have to enrich then.

07:21.000 --> 07:26.000
You will probably need to have back-end systems to enrich your S-BOMs

07:26.000 --> 07:31.000
and arrive at the final S-BOM while you're solving this puzzle.

07:31.000 --> 07:36.000
So now I've talked a lot about the S-BOMs in general,

07:36.000 --> 07:40.000
and let's look at some more detail with Alex.

07:40.000 --> 07:41.000
Yeah, thank you.

07:41.000 --> 07:45.000
So as we already mentioned, one goal that we have is to take you

07:45.000 --> 07:49.000
through the process of how we adopted a common S-BOM format within the company

07:49.000 --> 07:52.000
and what some of the challenges and major pain points were

07:52.000 --> 07:55.000
that we detected as part of that.

07:55.000 --> 07:58.000
So of course, at first, you look at the requirements that you actually have,

07:58.000 --> 08:02.000
and usually to do that, you look at the process and the people involved.

08:02.000 --> 08:05.000
That's a good idea, even when you're trying to solve a technical problem.

08:05.000 --> 08:09.000
So what we considered initially early on, I mean, you've seen our product portfolio.

08:09.000 --> 08:12.000
We do everything from hardware to software as a service,

08:12.000 --> 08:17.000
so every team at Siemens is different, which for us immediately meant

08:17.000 --> 08:20.000
that there is probably no silver bullet that works for all of them.

08:20.000 --> 08:23.000
So there wasn't going to be a single automation approach

08:23.000 --> 08:25.000
that we could push onto people.

08:25.000 --> 08:28.000
Instead, we needed to provide an ecosystem.

08:28.000 --> 08:30.000
So that was realization number two, right?

08:30.000 --> 08:35.000
So we need a common set of tools, but not everybody is going to use every tool.

08:35.000 --> 08:39.000
But the goal here was to simplify the actual S-BOM generation

08:39.000 --> 08:44.000
and allow people to feed that data, because that's the background that we come from

08:44.000 --> 08:48.000
into our OSS compliance and commercial license compliance tooling,

08:48.000 --> 08:52.000
and to enable developers to actually use that as part of their builds.

08:52.000 --> 08:56.000
And from the get-go, we were pretty clear on that,

08:56.000 --> 09:00.000
either becoming in the source within the company or potentially also open source.

09:00.000 --> 09:02.000
We will comment on that a bit later.

09:02.000 --> 09:06.000
And then, of course, you can't always optimize for the edge case.

09:06.000 --> 09:11.000
So there will be teams within Siemens that use tools that nobody else apart from them uses.

09:11.000 --> 09:17.000
But even then, we wanted to enable them to also use the format

09:17.000 --> 09:20.000
by at least having a set of libraries that they could include.

09:20.000 --> 09:24.000
So currently we offer these for Java, Python, and.NET,

09:24.000 --> 09:29.000
and that definitely covers a lot of the different teams that we have.

09:29.000 --> 09:33.000
And similarly, that is provided as in a source today.

09:33.000 --> 09:38.000
Yeah, so one valid question that you can, of course, ask is

09:38.000 --> 09:42.000
why do we care so much about our S-BOMs in the first place

09:42.000 --> 09:44.000
and why do we care about them being accurate?

09:44.000 --> 09:48.000
There's more reasons than the two I'm going to talk about,

09:48.000 --> 09:50.000
but generally these are the main two for us.

09:50.000 --> 09:52.000
So one is security, right?

09:52.000 --> 09:55.000
So it's not that long ago, actually less than one and a half years,

09:55.000 --> 09:59.000
that locked for a shell hit, or if you think back to SolarWinds,

09:59.000 --> 10:03.000
it's important to actually know the products that you consume,

10:03.000 --> 10:06.000
so the dependencies that your own products have.

10:06.000 --> 10:09.000
And for that purpose, an S-BOM is exactly what you need, right?

10:09.000 --> 10:15.000
So we want to be able to identify vulnerable components as quickly as possible.

10:15.000 --> 10:19.000
So if a zero-day hits, it's not necessarily a good idea

10:19.000 --> 10:25.000
to start investigating which product uses a vulnerable component at that point.

10:25.000 --> 10:27.000
Because then that delays the process,

10:27.000 --> 10:29.000
and obviously you can only start with the mitigation

10:29.000 --> 10:32.000
once you have the full picture of what you actually need to mitigate.

10:32.000 --> 10:36.000
The other part is something that is more of a legal topic,

10:36.000 --> 10:39.000
so compliance, license compliance specifically, right?

10:39.000 --> 10:43.000
So a failure to comply with license terms of third-party components

10:43.000 --> 10:46.000
is something that can trigger litigation.

10:46.000 --> 10:49.000
Litigation is something that is very time-consuming and expensive,

10:49.000 --> 10:52.000
and our lawyers would rather do other things.

10:52.000 --> 10:56.000
So it's important for us to also make sure that this part doesn't happen.

10:56.000 --> 11:00.000
And one thing to also be aware of is, generally speaking,

11:00.000 --> 11:03.000
at least from our experience, the larger the company,

11:03.000 --> 11:07.000
the larger the compensation claims that people will sue you over.

11:07.000 --> 11:09.000
So if you have a GPL violation,

11:09.000 --> 11:11.000
then suddenly we're talking about millions of dollars.

11:11.000 --> 11:14.000
And the worst case, which as far as I know is something

11:14.000 --> 11:17.000
that is probably a bit specific to German copyright law,

11:17.000 --> 11:22.000
so it can actually happen that if a GPL violation, for example, is detected,

11:22.000 --> 11:24.000
you can get slapped with an injunction

11:24.000 --> 11:27.000
and you are prohibited from shipping the affected product

11:27.000 --> 11:31.000
until that is resolved, which for us, if you imagine that something like that

11:31.000 --> 11:33.000
happened with a Linux kernel version

11:33.000 --> 11:36.000
where we have a driver with a GPL violation or whatever,

11:36.000 --> 11:38.000
for us that would be a big deal.

11:38.000 --> 11:42.000
So it needs to be avoided just from a business perspective for both scenarios.

11:42.000 --> 11:45.000
And then even beyond that, of course less tangible, but still,

11:45.000 --> 11:48.000
both of these things, they will land you on the news

11:48.000 --> 11:50.000
and you will not get the good kind of publicity.

11:50.000 --> 11:52.000
So they are actually a PR nightmare.

11:52.000 --> 11:54.000
And that's why we want to get them right.

11:54.000 --> 11:55.000
We want to be good citizens.

11:55.000 --> 11:58.000
Our bombs need to be accurate.

11:58.000 --> 12:00.000
Yeah, another challenge that we detected early on,

12:00.000 --> 12:03.000
because of course even our embedded hardware colleagues by now,

12:03.000 --> 12:07.000
they have figured out that containerization can help them with certain use cases.

12:07.000 --> 12:11.000
So we also need to make sure that our containers are OSS compliant.

12:11.000 --> 12:15.000
And there we have a special challenge in generating accurate S-bombs.

12:15.000 --> 12:21.000
So S-bomb creation, which is what this chart here pretty much shows,

12:21.000 --> 12:23.000
it lies on the spectrum.

12:23.000 --> 12:28.000
So what developers of course like to do is they like to consume public images

12:28.000 --> 12:30.000
from Docker Hub or other public sources.

12:30.000 --> 12:32.000
That's very low effort for them.

12:32.000 --> 12:33.000
They can just pull them.

12:33.000 --> 12:36.000
They don't need to create them themselves, but they also don't know what's in it.

12:36.000 --> 12:40.000
So you have low effort on the developer side, but we also have very low certainty.

12:40.000 --> 12:44.000
So creating an accurate S-bomb is insanely difficult.

12:44.000 --> 12:47.000
And in some cases, I guess we can actually conclude it's impossible.

12:47.000 --> 12:52.000
Yeah, and then the further you move to the left,

12:52.000 --> 12:55.000
the more effort is actually involved in building the container,

12:55.000 --> 12:58.000
but at the same time you have increasing certainty about its contents.

12:58.000 --> 13:03.000
The pathological case on the other side of course is that you build every image yourself.

13:03.000 --> 13:08.000
We use a lot of different images, so maybe you don't want every team to build their own.

13:08.000 --> 13:13.000
And so the next best thing that we've arrived at is sort of having these known base images

13:13.000 --> 13:17.000
that get shared within the company, or we consume upstream base images

13:17.000 --> 13:22.000
that already have an S-bomb that we trust, which is of course a major asterisk there.

13:22.000 --> 13:24.000
So you also need to be able to trust the S-bomb.

13:24.000 --> 13:26.000
It's not enough for it to be there.

13:26.000 --> 13:30.000
And then there, creating those images is much higher effort,

13:30.000 --> 13:32.000
but you also have a much higher degree of certainty.

13:32.000 --> 13:38.000
So that's something that we realized, and that's something that we try to put in practice.

13:38.000 --> 13:41.000
Yeah, so I mean, these are the challenges, right?

13:41.000 --> 13:46.000
But obviously the conclusion then was we need the common format to facilitate all of that,

13:46.000 --> 13:48.000
and we need to build an ecosystem around it.

13:48.000 --> 13:51.000
So that's what we did. We called it standard bomb.

13:51.000 --> 13:55.000
We have an internal page, landing page for the format.

13:55.000 --> 14:00.000
So if you try to navigate to that right now, it will not do anything for you.

14:00.000 --> 14:04.000
But the reason we are showing it is because that domain pretty much tells you

14:04.000 --> 14:07.000
this isn't just a side project that we started.

14:07.000 --> 14:12.000
It actually is one of the main subdomains within the company.

14:12.000 --> 14:16.000
So we already have a lot of teams using it, and it's growing.

14:16.000 --> 14:17.000
So we are picking it up.

14:17.000 --> 14:21.000
We are now actively looking into ways we can make some of this available upstream again.

14:21.000 --> 14:23.000
And in fact, we already have.

14:23.000 --> 14:27.000
So I contributed the Cyclone DX support to Scancode Toolkit a while ago.

14:27.000 --> 14:31.000
But yeah, so we're still figuring some of that out.

14:31.000 --> 14:35.000
Yeah, so Tom has already preempted that a bit.

14:35.000 --> 14:39.000
But what is standard bomb? At its core, it's Cyclone DX 1.4.

14:39.000 --> 14:44.000
The special caveat is, or maybe I quickly need to explain what's Cyclone DX is.

14:44.000 --> 14:51.000
So it's an O-WASP format, and it prides itself in being lightweight and composable.

14:51.000 --> 14:53.000
You can add extensions to it.

14:53.000 --> 14:56.000
And so for us, that flexibility was really appealing.

14:56.000 --> 14:59.000
One limitation that we already put on it for our internal use,

14:59.000 --> 15:03.000
which is probably a bit controversial, but we did it because we prefer it,

15:03.000 --> 15:05.000
we only use the JSON flavor.

15:05.000 --> 15:07.000
We don't care about the XML.

15:07.000 --> 15:09.000
Once you start dealing with large XML documents,

15:09.000 --> 15:13.000
you have to worry about things like vulnerabilities in your parser,

15:13.000 --> 15:15.000
and we don't want to deal with that.

15:15.000 --> 15:17.000
With JSON, they are much rarer generally.

15:17.000 --> 15:19.000
They're not impossible, but they're rarer.

15:19.000 --> 15:23.000
So of course, using JSON makes it pretty much programming agnostic

15:23.000 --> 15:28.000
because every language I know of, unless maybe COBOL, has a JSON parser,

15:28.000 --> 15:32.000
and probably COBOL does too, I just don't know about it.

15:32.000 --> 15:36.000
And then also the benefit that this flexible format had for us on top of that

15:36.000 --> 15:38.000
is it's independent of the source ecosystem.

15:38.000 --> 15:41.000
So we have all these different tech stacks within the company.

15:41.000 --> 15:43.000
They are all supported.

15:43.000 --> 15:46.000
There are upstream tools to create bombs in those cases

15:46.000 --> 15:48.000
where those aren't good enough and up to snuff for what we need.

15:48.000 --> 15:51.000
We wrote our own.

15:51.000 --> 15:57.000
And another benefit that it has, it's independent of the consumer.

15:57.000 --> 15:59.000
But, and there's a caveat here, right?

15:59.000 --> 16:04.000
So it's important to keep in mind, even though they are independent of the consumer,

16:04.000 --> 16:09.000
as Thomas already mentioned, usually you create it with a special use case in mind.

16:09.000 --> 16:12.000
So if you submit an S-bomb for software clearing,

16:12.000 --> 16:17.000
maybe you want to also put a statement of intent alongside it to say,

16:17.000 --> 16:20.000
yeah, this is mainly for software clearing purposes,

16:20.000 --> 16:22.000
don't use it for vulnerability scanning.

16:22.000 --> 16:25.000
Because if it contains references to the source packages,

16:25.000 --> 16:28.000
there's actually a high possibility that your actual product,

16:28.000 --> 16:31.000
because the binary doesn't have the source, isn't affected.

16:31.000 --> 16:36.000
So that's a statement of intent that we support through something that we call profiles.

16:36.000 --> 16:38.000
So that's metadata in the bomb.

16:38.000 --> 16:42.000
And yeah, that was also a valuable addition from our perspective.

16:42.000 --> 16:46.000
Yeah, so that's pretty much what I have to say about it.

16:46.000 --> 16:51.000
And now to get into the nitty gritty details, I will hand over to Thomas.

16:51.000 --> 16:54.000
Thanks.

16:54.000 --> 17:00.000
So, well, we're using cyclone DX, so do we do something special a little bit?

17:00.000 --> 17:03.000
But at the end, we still use cyclone DX.

17:03.000 --> 17:08.000
So every of our standard bombs is 100% cyclone DX bomb.

17:08.000 --> 17:12.000
And this is that we really like to emphasize.

17:12.000 --> 17:18.000
But because we are consumers, so we heard in the morning a lot of people create S-bombs.

17:18.000 --> 17:22.000
So on one side we create also S-bombs on the other side, but we are also the consumers.

17:22.000 --> 17:27.000
So we need to ensure that we understand all the information, whoever created it.

17:27.000 --> 17:32.000
So we just needed some additional set of rules or guidelines.

17:32.000 --> 17:36.000
So for example, we decided that we want to have the components as a flat list.

17:36.000 --> 17:42.000
We don't want the hierarchical structure in the cyclone DX S-bomb as it is.

17:42.000 --> 17:48.000
But we still have the dependency information because it just has another place.

17:48.000 --> 17:53.000
Another thing is that we find out we need some additional properties.

17:53.000 --> 18:00.000
And, well, if you tell your developers just add something, they will add it anywhere under any name.

18:00.000 --> 18:03.000
So cyclone DX offers properties.

18:03.000 --> 18:06.000
These are just the key values.

18:06.000 --> 18:10.000
So we talked to the cyclone DX guys and they said, okay, you could reserve a name space.

18:10.000 --> 18:12.000
So this is what we did.

18:12.000 --> 18:20.000
We provided a taxonomy and now we have the Siemens column, whatever, to clearly describe this is one of our properties.

18:20.000 --> 18:24.000
So this is maybe something that our developers should use.

18:24.000 --> 18:32.000
The next thing, because the three of us come from the license compliance side, is that we require the source code.

18:32.000 --> 18:40.000
We require the source code because this is what we scan for licenses, for IPR issues, export codes, so on and so forth, things, whatever.

18:40.000 --> 18:44.000
So we need to find a way to express where can we find the source code.

18:44.000 --> 18:46.000
So it could be a local file.

18:46.000 --> 18:49.000
It could be the upstream location.

18:49.000 --> 18:53.000
But we have a way to describe it in cyclone DX.

18:53.000 --> 19:00.000
And then the next thing is that the best case would be if the developer development teams pick all of this together.

19:00.000 --> 19:08.000
So the source code, maybe also the binaries and the S-bomb, and this is then something that they ship to our backends.

19:08.000 --> 19:13.000
And then we have all the information that we need.

19:13.000 --> 19:18.000
So just to give you an overview, I know it's more on the screen.

19:18.000 --> 19:22.000
So you see a lot of standard cyclone DX properties.

19:22.000 --> 19:26.000
You also see the license, for example.

19:26.000 --> 19:29.000
And we have some other information.

19:29.000 --> 19:30.000
We have the source code.

19:30.000 --> 19:34.000
We have the information about the website, which is still standard cyclone DX.

19:34.000 --> 19:38.000
But we also want to know, OK, is it a direct dependency or not?

19:38.000 --> 19:40.000
Sometimes we need this, sometimes not.

19:40.000 --> 19:43.000
We would like to know what kind of a regular language is this.

19:43.000 --> 19:51.000
We add, if we find such information also, and the first thing, scan something about third party notices or copyright statements.

19:51.000 --> 19:55.000
Just a short example how this would look like.

19:55.000 --> 20:04.000
Now, maybe for a better understanding, again, what do we do when we talk about this S-bomb?

20:04.000 --> 20:06.000
We use it as an input.

20:06.000 --> 20:07.000
So we have the developers.

20:07.000 --> 20:10.000
The developers commit their code.

20:10.000 --> 20:15.000
Many of them do it to a central GitLab instance that we have, which is called code.zimmons.com.

20:15.000 --> 20:19.000
And there they run their continuous integration, continuous development runs.

20:19.000 --> 20:26.000
So this is where our tools kick in.

20:26.000 --> 20:27.000
They are part of CI.

20:27.000 --> 20:35.000
They use scanners either from us or from cyclone DX or created by themselves to create at least the first version of an S-bomb.

20:35.000 --> 20:45.000
And if the S-bomb maybe does not contain all the information, then we have additional tools maybe to find source code or to guess where the source code might be, to download the source code,

20:45.000 --> 20:50.000
or if we have different kind of ecosystems to merge S-bombs.

20:50.000 --> 20:52.000
Because let's say you have a container.

20:52.000 --> 21:00.000
You have maybe a scan for the front end, NPM components, for Java components, for.NET, and the underlying operating system.

21:00.000 --> 21:04.000
So we want to combine it to one big S-bomb.

21:04.000 --> 21:07.000
And yeah, we also have some kind of validator.

21:07.000 --> 21:11.000
And then this is something that can get forwarded to our back ends.

21:11.000 --> 21:20.000
So we have different kind of back ends, but one of them that you already heard talks about is SW360 and with a scanner for solid-sheet.

21:20.000 --> 21:35.000
So again, we use this information, store it, let's say, in SW360, and then someone else pulls it out of SW360, does a scan for solid-sheet to determine what the licenses are, what the copyrights are.

21:35.000 --> 21:41.000
So with the detailed information, where this information is found, we don't need it here.

21:41.000 --> 21:43.000
We need it down here.

21:43.000 --> 21:47.000
But then it's created by phosology, and probably it's SPDX.

21:47.000 --> 21:50.000
It might not be necessarily a cyclone DX.

21:50.000 --> 21:53.000
But again, our focus is here on the input.

21:53.000 --> 22:03.000
What CMANTS then does, we have a look at the single component, determine the licenses, the copyrights, the obligations, as we also heard from the French colleagues.

22:03.000 --> 22:05.000
Our legal team has a look at it.

22:05.000 --> 22:10.000
And then at the last step, we do something what we call product clearing.

22:10.000 --> 22:18.000
That is, we take a look at all the components, all the licenses, all the obligations in the context of that very product.

22:18.000 --> 22:21.000
And then we do a final check if everything fits.

22:21.000 --> 22:33.000
Because you may know that if we have an embedded product, there may be another situation than if we have a cloud backend or a cloud frontend.

22:33.000 --> 22:40.000
Now, this is maybe the way that it took to get to a good S-bomb.

22:40.000 --> 22:42.000
So we think it's not an easy way.

22:42.000 --> 22:45.000
And we are not yet done.

22:45.000 --> 22:52.000
We shared our experiences, our opinions, our approach on what we did or what we would like to do.

22:52.000 --> 22:57.000
And now really, we are here also to hear your comments on that.

22:57.000 --> 23:03.000
So parts of the things have been upstreamed, are available as open source.

23:03.000 --> 23:07.000
But is this a use case that you would also be interested in?

23:07.000 --> 23:12.000
Is it something where you would say we should do more open sourcing of our tools?

23:12.000 --> 23:20.000
And then the interesting question is, well, if there is already a Cyclone DX Gradle scanner or a PyP scanner,

23:20.000 --> 23:25.000
do we want to have another one or should we find a way to combine it?

23:25.000 --> 23:33.000
It's up to what the open source community would like to have.

23:33.000 --> 23:37.000
So I guess we have five minutes left.

23:37.000 --> 23:43.000
On one side, you see the key takeaways from our presentation.

23:43.000 --> 23:48.000
I don't want to go to all of them again because maybe you have questions.

23:48.000 --> 23:51.000
There's a question from the chat right now.

23:51.000 --> 23:52.000
A question.

23:52.000 --> 23:57.000
How do you generate and track S-bombs for multiple language projects?

23:57.000 --> 24:02.000
On your introductory slide, you will mention lots of programming languages.

24:02.000 --> 24:07.000
Yes, they are separate scanners.

24:07.000 --> 24:17.000
The question is how do we generate S-bombs for multiple languages or for multiple ecosystems?

24:17.000 --> 24:24.000
Yes, we have different scanners.

24:24.000 --> 24:27.000
So here, some of the scanners that we created by our own.

24:27.000 --> 24:32.000
If we don't have a matching scanner, we tell the people to look for Cyclone DX scanners.

24:32.000 --> 24:36.000
If there is no scanner like that, then, well, these are developers.

24:36.000 --> 24:38.000
They can do it by themselves.

24:38.000 --> 24:40.000
And then you merge the results?

24:40.000 --> 24:42.000
Yes, yes.

24:42.000 --> 24:43.000
The small measure part is...

24:43.000 --> 24:45.000
Yes, yes.

24:45.000 --> 24:49.000
At the end, it depends on the use case, whether we process them separately or not,

24:49.000 --> 24:53.000
but we have the way to merge them.

24:53.000 --> 24:54.000
More?

24:54.000 --> 24:56.000
Yeah, just a quick comment on that.

24:56.000 --> 24:57.000
Can you...

24:57.000 --> 24:58.000
Yeah, thank you.

24:58.000 --> 25:03.000
So we merge because what we found is at build time, these separate build-toes,

25:03.000 --> 25:08.000
so whether it's Gradle or the Go compiler or whatever,

25:08.000 --> 25:13.000
they have a lot more information than just doing static analysis with some other tool like ScanCode.

25:13.000 --> 25:17.000
So occasionally, for specific use cases, we prefer to go through build plugins

25:17.000 --> 25:20.000
that have all that build metadata to get the full picture.

25:20.000 --> 25:24.000
And so that's why we actually have that modular approach.

25:24.000 --> 25:27.000
Siemens is a big organization.

25:27.000 --> 25:29.000
What have you done to your supply chain?

25:29.000 --> 25:32.000
Because I think you've got lots of things coming into Siemens.

25:32.000 --> 25:36.000
What are you doing with the components that are coming that have S-bombs or don't have S-bombs?

25:36.000 --> 25:41.000
Have you changed the way you are reacting with your downstream supply chain?

25:41.000 --> 25:42.000
We hope.

25:42.000 --> 25:46.000
What do we do with all the suppliers?

25:46.000 --> 25:48.000
Do we...

25:48.000 --> 25:50.000
Just rephrase it.

25:50.000 --> 25:52.000
Do we hope that they have S-bombs?

25:52.000 --> 25:56.000
And the question is, yes, we hope, but we don't expect it.

25:56.000 --> 26:02.000
So are you generating S-bombs essentially in Siemens for components?

26:02.000 --> 26:03.000
Yes.

26:03.000 --> 26:04.000
Yes.

26:04.000 --> 26:05.000
Okay.

26:05.000 --> 26:06.000
Yes.

26:06.000 --> 26:11.000
So that is something that is actively being worked on to comply with the executive order and so on.

26:11.000 --> 26:12.000
The one in the...

26:12.000 --> 26:17.000
What has made you choose Cyclone Dakes over S-PDS?

26:17.000 --> 26:21.000
Yeah, so the question is, and we anticipated it because we already had that conversation with Kate

26:21.000 --> 26:22.000
at the fringe event.

26:22.000 --> 26:28.000
So why did we choose Cyclone DX over S-PDS, right?

26:28.000 --> 26:33.000
So it was partly because that's what all of us already knew.

26:33.000 --> 26:35.000
So that was the first point of contact.

26:35.000 --> 26:39.000
And the other reason is that we got going on it a lot more quickly.

26:39.000 --> 26:40.000
So it's lightweight.

26:40.000 --> 26:44.000
You can start at a very low level and then build on top from there.

26:44.000 --> 26:45.000
Whereas...

26:45.000 --> 26:49.000
So our subjective experience, I'd like to say, might be different for somebody else.

26:49.000 --> 26:53.000
But so the S-PDS spec is quite daunting in its depth.

26:53.000 --> 26:55.000
And we didn't need all of the features.

26:55.000 --> 26:58.000
So understanding the spec fully wasn't in scope for us.

26:58.000 --> 26:59.000
Yeah, sure.

26:59.000 --> 27:04.000
I would like to add one thing about the S-PDS versus Cyclone DX thing.

27:04.000 --> 27:10.000
I mean, Siemens is relatively large and there's lots of different parts in it, right?

27:10.000 --> 27:14.000
That's probably as it is in most companies of that size.

27:14.000 --> 27:19.760
And we discovered that we had already started with Cyclone DX individually before we came

27:19.760 --> 27:22.800
together to solve this centrally.

27:22.800 --> 27:26.520
And then once you discover that on an important question like that, you're already almost

27:26.520 --> 27:27.520
aligned, right?

27:27.520 --> 27:30.720
Then you don't open that can of worms again to choose the best form.

27:30.720 --> 27:34.040
That's kind of a, well, realistic approach.

27:34.040 --> 27:40.520
How do we scan containers?

27:40.520 --> 27:41.680
How do we scan containers?

27:41.680 --> 27:47.800
Yeah, so I'd like to say that's still very much an ongoing field of research internally.

27:47.800 --> 27:53.800
But I can give you, so I do believe that to give you the full picture, we should maybe

27:53.800 --> 27:56.860
talk afterwards that won't fit into the QA session.

27:56.860 --> 27:59.240
But we have a combined approach there as well.

27:59.240 --> 28:04.560
So we use stuff like Scancode I.O., TURN, all these other static scanners, SIFT actually

28:04.560 --> 28:05.560
to get us started.

28:05.560 --> 28:08.880
But then once you start digging deeper, of course, that's not the scope of the tool.

28:08.880 --> 28:11.520
It needs to be fast.

28:11.520 --> 28:13.160
And then we need to aggregate that.

28:13.160 --> 28:14.600
And that's the biggest challenge, of course.

28:14.600 --> 28:17.400
So reconciling all those different scan results.

28:17.400 --> 28:21.360
And so if somebody is doing active work on that, I'd be happy to talk to you.

28:21.360 --> 28:24.760
Thomas, maybe one last question.

28:24.760 --> 28:30.160
How do you make sure that your dependency scan is complete?

28:30.160 --> 28:32.480
You say I have code, I have a dependency scan.

28:32.480 --> 28:35.840
How do you make sure that what actually in the dependency scan actually matches with

28:35.840 --> 28:36.840
the code?

28:36.840 --> 28:40.400
Yeah, so the question was how do we make sure that the dependency scan is complete?

28:40.400 --> 28:46.800
Well, I mean, it would be snake-all to say that we can always be sure, because we're

28:46.800 --> 28:48.040
not going to be sure.

28:48.040 --> 28:53.440
But we have a best effort approach that has been tested against lots of images.

28:53.440 --> 28:57.920
And occasionally, people will actually come in after the fact and verify the results.

28:57.920 --> 29:02.200
And based on those findings, we will improve.

29:02.200 --> 29:04.760
And that's one other aspect to that.

29:04.760 --> 29:09.200
We kind of mentioned it on the containers slide when we were at that point.

29:09.200 --> 29:11.740
It depends a little bit on what you're scanning.

29:11.740 --> 29:16.160
So if it's in your source ecosystem, then I can, as a developer, I can be reasonably

29:16.160 --> 29:18.360
sure that the S-bomb is complete.

29:18.360 --> 29:23.400
If I take a random container from the internet, then that's very difficult.

29:23.400 --> 29:24.400
Thank you very much.

29:24.400 --> 29:25.400
That's all the time.

29:25.400 --> 29:40.080
Yeah, that's awesome.

29:40.080 --> 29:42.080
Thanks for your attention.

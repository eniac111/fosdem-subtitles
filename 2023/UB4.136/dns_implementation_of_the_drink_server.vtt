WEBVTT

00:00.000 --> 00:07.000
Hello everybody, this is Stefan, Stefan Borsmeyer of Aethnic.

00:07.000 --> 00:14.440
We will talk about Drink, which is, I guess, an experimental DNS server?

00:14.440 --> 00:16.920
No, not at all.

00:16.920 --> 00:20.720
It's a tri-moist station in Belgium, actually.

00:20.720 --> 00:26.000
I'm already right there.

00:26.000 --> 00:29.440
Well, yes, it's a DNS server.

00:29.440 --> 00:33.440
And you can see here an example of it working out for them.

00:33.440 --> 00:41.120
I asked 2 plus 2 dot domain name, TXT record, and that's extraordinary.

00:41.120 --> 00:45.720
I get 4 as an answer, which is really, really useful.

00:45.720 --> 00:47.440
It was not possible before, but...

00:47.440 --> 00:50.440
Maybe with the sensor, which is true.

00:50.440 --> 00:51.440
Exactly, exactly.

00:51.440 --> 00:52.440
This is authentic.

00:52.440 --> 00:58.400
So you can be sure it's really, really 4 because it's signed with DNS.

00:58.400 --> 01:05.240
So now we are going to see how it is done by Magycto.

01:05.240 --> 01:12.640
So Drink is a dynamic authoritative name server with several services.

01:12.640 --> 01:17.560
The main one, which was the original goal, is to return the IP address of the client.

01:17.560 --> 01:23.520
You have a lot of services on the internet doing this, but all of them are very minimum.

01:23.520 --> 01:29.040
They don't implement all of the funny things of the DNS.

01:29.040 --> 01:30.720
We have also other services.

01:30.720 --> 01:37.320
For instance, ECS, EDNS, client subnet echo can be useful also if you want to know what

01:37.320 --> 01:40.120
your wizard is sending about you.

01:40.120 --> 01:46.400
And you have other services such as the calculator.

01:46.400 --> 01:53.480
The goals to develop Drink were first to learn, to have fun also, and also to implement.

01:53.480 --> 02:01.360
A lot of DNS stuff that are missing from the typical dynamic DNS services such as TCP,

02:01.360 --> 02:06.680
NSID, cookies, DNSsec, of course, etc.

02:06.680 --> 02:10.000
Extended DNS errors, etc.

02:10.000 --> 02:12.720
So that was the idea.

02:12.720 --> 02:18.640
Also it also provides a platform to test IDs at IETF accountants.

02:18.640 --> 02:22.320
IETF accountants are great because you can have T-shirts.

02:22.320 --> 02:29.480
And it's opportunity to test new IDs, new stuff, and modifying existing software like

02:29.480 --> 02:33.600
NSD or BIND or not is not always easy.

02:33.600 --> 02:39.120
So I wanted something which was easier, at least for me.

02:39.120 --> 02:47.240
So as you see, it does not pretend to be a competitor to things like power DNS, NSD,

02:47.240 --> 02:49.000
not, etc.

02:49.000 --> 02:51.480
It's experimental.

02:51.480 --> 02:55.760
So the implementation is done in Elixir.

02:55.760 --> 03:02.800
For the people who don't know Elixir, it's mostly a functional programming language which

03:02.800 --> 03:10.080
compiles to an Erlang bytecode which is then executed by the Erlang virtual machine.

03:10.080 --> 03:13.920
The good thing about Erlang is massive parallelism.

03:13.920 --> 03:18.000
So the virtual machine is really, really good for that.

03:18.000 --> 03:25.360
The syntax of Erlang is seen by many people as a bit of style.

03:25.360 --> 03:31.480
So the Elixir was mostly done, at least at the beginning, to have a better syntax for

03:31.480 --> 03:35.000
the same bytecode on the virtual machine.

03:35.000 --> 03:41.080
Also it's always fun to learn a new language.

03:41.080 --> 03:43.200
I didn't do everything myself.

03:43.200 --> 03:47.120
I had to rely on several existing libraries.

03:47.120 --> 03:49.600
It's one of the pleasures of free software.

03:49.600 --> 03:59.760
You have a lot of libraries with free software license compatible with the one you use, obviously.

03:59.760 --> 04:04.560
And the problem is that Elixir is not mainstream.

04:04.560 --> 04:13.200
So unlike languages like Go or Python which have very, very good Matthew-Mentain-the-debugged-DNS

04:13.200 --> 04:22.840
libraries, Elixir, there are some DNS libraries, typically with the last commit three or four

04:22.840 --> 04:29.480
years ago, sometimes older, and not always maintained and things like that.

04:29.480 --> 04:33.940
So it's a typical problem when you program in Elixir.

04:33.940 --> 04:41.200
When you go to X, which is the main repository of libraries, you always find something,

04:41.200 --> 04:43.080
whatever you are looking for.

04:43.080 --> 04:47.340
But pay attention, is it still maintained, debugged, et cetera.

04:47.340 --> 04:52.020
You have many libraries for the same stuff, but not all of them perfect.

04:52.020 --> 04:57.960
So it's one of the problems you have when you program in Elixir.

04:57.960 --> 05:06.580
Drink can itself call external microservices with HTTP or things like that, which has consequences

05:06.580 --> 05:11.600
for the implementation because external services can be slow or unreliable.

05:11.600 --> 05:18.320
So you have to be careful not to crash, not to hang everything while you are waiting for

05:18.320 --> 05:19.520
the microservices.

05:19.520 --> 05:24.720
It's a bit like the talk about DNS resolution for graphical program.

05:24.720 --> 05:31.960
Here we may, unlike the typical authoritative server which only depends on what is in its

05:31.960 --> 05:37.920
memory, so it's very predictable, on the response time is constant.

05:37.920 --> 05:45.040
Unlike this typical authoritative server, drink has response time on success rates,

05:45.040 --> 05:51.000
which are highly dependent on the external services.

05:51.000 --> 05:55.120
It's free software, of course, because we are at FOSDEM, so I wouldn't dare to present

05:55.120 --> 05:58.840
it if it were not free software.

05:58.840 --> 06:04.800
You are already here, but let's go to the important implementation point.

06:04.800 --> 06:08.640
First one, which is probably the most important, parallelism.

06:08.640 --> 06:10.000
I don't like events.

06:10.000 --> 06:14.320
I think that events are an invention of the devil.

06:14.320 --> 06:19.640
Parallelism, good intended parallelism to be done with processes.

06:19.640 --> 06:27.840
On Elixir, well, Erlang actually, because the one time is Erlang1, Erlang encouraged

06:27.840 --> 06:30.360
you to use massive parallelism.

06:30.360 --> 06:32.800
When I say massive, really massive.

06:32.800 --> 06:38.720
You have anything to do, you create a new thread of execution.

06:38.720 --> 06:40.480
It's very, very efficient.

06:40.480 --> 06:45.680
In drink, every DNS request is a separate process.

06:45.680 --> 06:50.360
When I say process, it's not an operating system process because of course creating

06:50.360 --> 06:55.280
them and managing them would be much too costly.

06:55.280 --> 07:00.960
One of the funny things with the Erlang world is that they have a terminology which is quite

07:00.960 --> 07:01.960
specific.

07:01.960 --> 07:09.800
Words like process or application do not have the same meaning in the Erlang world as everywhere

07:09.800 --> 07:10.960
else.

07:10.960 --> 07:15.240
A process here, it's what Go is calling a Go routine.

07:15.240 --> 07:19.600
For instance, for those who programmed in Go, it's more or less the same.

07:19.600 --> 07:24.120
Basically it's very quick to create and to manage.

07:24.120 --> 07:29.520
Don't exit one of the things that we always tell to the beginners in Elixir or Erlang.

07:29.520 --> 07:33.080
Don't exit it to create process.

07:33.080 --> 07:37.200
Every request is a process.

07:37.200 --> 07:43.120
Every TCP connection is a process.

07:43.120 --> 07:44.400
Everything is done by process.

07:44.400 --> 07:49.840
For instance, logging statistics where it's not implemented yet but control through a

07:49.840 --> 07:53.440
local socket is also done by a separate process.

07:53.440 --> 07:59.480
As I said, there is a process for everything.

07:59.480 --> 08:05.800
As consequences, if you crash, if there is an exception, remember it's experimental code

08:05.800 --> 08:10.000
and it's written by me so there are a lot of bugs, but if you crash, you only crash

08:10.000 --> 08:11.000
one process.

08:11.000 --> 08:15.120
You don't take down the entire server.

08:15.120 --> 08:22.440
That's a very interesting thing because it's one of the motto of the Erlang and Elixir programmers,

08:22.440 --> 08:23.440
let it crash.

08:23.440 --> 08:29.640
If a process crashes, it's not a big problem as long as the entire server continues to

08:29.640 --> 08:31.120
work.

08:31.120 --> 08:36.640
In the same way, if a request is stuck because you are waiting for something, you are calling

08:36.640 --> 08:41.840
a microservice somewhere at the other end of the internet and it does not reply or not

08:41.840 --> 08:49.520
immediately, it's not a big problem for a drink because all the other requests will

08:49.520 --> 08:51.840
continue to work.

08:51.840 --> 08:58.640
Because parallelism is really great and unlike what many people are saying, it's even simpler

08:58.640 --> 09:00.800
than traditional programming.

09:00.800 --> 09:08.160
So for TCP, as a consequence, when I programmed it in the Elixir way, pipelining, meaning sending

09:08.160 --> 09:14.000
several requests over the TCP connection without waiting for the reply of the first one, worked

09:14.000 --> 09:18.920
immediately without me having anything to do at all.

09:18.920 --> 09:26.520
On out of order replies, which are not only allowed in TCP DNS but also mandated by the

09:26.520 --> 09:30.200
RFC, work also immediately.

09:30.200 --> 09:36.640
The first time I tested, it worked without anything specific because every DNS request

09:36.640 --> 09:37.640
is a process.

09:37.640 --> 09:38.640
So, okay.

09:38.640 --> 09:40.080
It works in parallel.

09:40.080 --> 09:42.160
So you have out of order replies.

09:42.160 --> 09:47.480
Remember that for a typical authoritative name server, out of order replies are not

09:47.480 --> 09:52.320
necessary because a response time is typically the same for every request.

09:52.320 --> 09:58.480
So there is not really any point in making out of order replies, unlike a resolver, for

09:58.480 --> 09:59.480
instance.

09:59.480 --> 10:06.840
But drink is a bit special because any request can take some time, a lot of time.

10:06.840 --> 10:10.920
So out of order replies are still very important.

10:10.920 --> 10:14.520
And as I said, parallel programming is simpler.

10:14.520 --> 10:17.280
This is something you have to teach to the students.

10:17.280 --> 10:21.600
Parallel programming is not something very complicated that you see only at the end of

10:21.600 --> 10:22.600
the year.

10:22.600 --> 10:25.920
It's something very simple, very natural.

10:25.920 --> 10:30.880
If you don't use events, everything is fine.

10:30.880 --> 10:34.840
And you don't care about things like, this request may block me.

10:34.840 --> 10:35.840
Yeah, okay.

10:35.840 --> 10:36.840
Let it block.

10:36.840 --> 10:37.840
No problem.

10:37.840 --> 10:42.200
Other process will work.

10:42.200 --> 10:45.600
So here is an example of Elixir code.

10:45.600 --> 10:48.680
It's a functional language, so we use a map a lot.

10:48.680 --> 10:53.480
We don't do loops because loops also are an invention of the devil.

10:53.480 --> 10:59.400
So we have a set of IP addresses, and we just map a function.

10:59.400 --> 11:06.000
The function simply listens on this address with some options.

11:06.000 --> 11:08.040
Then you open the socket.

11:08.040 --> 11:14.800
And for each socket, you create a server which runs this function, TCP loop acceptor, which

11:14.800 --> 11:23.480
will itself create a process for every DNS request received over the TCP connection.

11:23.480 --> 11:24.760
And that's all.

11:24.760 --> 11:31.760
And is the end of the function that you map on the set of all IP addresses.

11:31.760 --> 11:34.880
Okay.

11:34.880 --> 11:36.080
Not even a bug in this one?

11:36.080 --> 11:39.600
No, I don't think so.

11:39.600 --> 11:44.800
Another important point when you write an Internet server, whatever type of Internet

11:44.800 --> 11:47.760
server it is, is of course robustness.

11:47.760 --> 11:51.440
Because as you know, the Internet is hostile.

11:51.440 --> 11:53.600
You see a lot of funny things.

11:53.600 --> 12:00.840
A lot of funny DNS packets, and sometimes even one dom binary sent to the 53 port.

12:00.840 --> 12:06.840
So I assume everybody in the room have read RFC 9267?

12:06.840 --> 12:11.480
Yeah.

12:11.480 --> 12:16.400
It's very good reading if you are interested in DNS implementation, how it works.

12:16.400 --> 12:23.200
Basically, it's a list of the things that can go wrong when you pass DNS request.

12:23.200 --> 12:26.360
It's not a complete list.

12:26.360 --> 12:28.920
So the Internet is a jungle.

12:28.920 --> 12:33.720
Incoming packets can have whatever, literally whatever.

12:33.720 --> 12:35.040
Everything is possible.

12:35.040 --> 12:41.080
And of course, the main example in RFC 9267 are compression pointers.

12:41.080 --> 12:46.400
Because compression pointers can do things like pointing to themselves, pointing outside

12:46.400 --> 12:47.400
of the packet.

12:47.400 --> 12:54.160
So if you program in C in a completely careless way, you can imagine what will happen.

12:54.160 --> 12:58.320
And indeed, it happens in the real world.

12:58.320 --> 13:05.320
Most of the example in the RFC are from DNS mask on the windows, but it can happen to

13:05.320 --> 13:06.320
anyone.

13:06.320 --> 13:10.080
EDNS is not mentioned in the RFC, but it can be fun also.

13:10.080 --> 13:15.800
It was especially fun for me because the DNS libraries that I choose, I discovered later

13:15.800 --> 13:18.000
that it has no support for EDNS.

13:18.000 --> 13:20.200
So EDNS had to be done entirely.

13:20.200 --> 13:24.960
And EDNS options, for instance, are type length value.

13:24.960 --> 13:31.180
So you can have a length which is too large or too small and make the packet impossible

13:31.180 --> 13:32.180
to pass.

13:32.180 --> 13:38.680
Or even worse, can trigger crash of the server or remote code execution in the worst case.

13:38.680 --> 13:42.800
If you program in C, this is the sort of thing that can happen.

13:42.800 --> 13:46.920
So here is an example on how to pass EDNS.

13:46.920 --> 13:49.000
The second line with the brackets.

13:49.000 --> 13:56.280
The brackets are when you handle binary data, you extract the code.

13:56.280 --> 14:00.600
You use for that pattern matching because it's a functional language.

14:00.600 --> 14:03.300
Elixir relies a lot on pattern matching.

14:03.300 --> 14:07.240
So here, the equal here is not an assignment.

14:07.240 --> 14:09.200
It simply means that you pattern match.

14:09.200 --> 14:12.920
And if it fails, there is an exception.

14:12.920 --> 14:20.960
So binary part which extracts the first two bytes of the data is a safe function, meaning

14:20.960 --> 14:23.400
that itself it uses pattern matching.

14:23.400 --> 14:29.960
If there are, for instance, not enough bytes to get the first two, you will have also an

14:29.960 --> 14:31.040
exception.

14:31.040 --> 14:37.280
You won't execute a remote code or go outside in the memory or things like that.

14:37.280 --> 14:39.040
Then you do things.

14:39.040 --> 14:43.080
You extract also the length of the packet and then you read the length.

14:43.080 --> 14:48.680
So if you do this sort of thing in C without paying attention, you can imagine the catastrophic

14:48.680 --> 14:50.340
thing that can happen.

14:50.340 --> 14:51.560
But here, it's safe.

14:51.560 --> 14:55.880
In the worst case, you will have an exception here because not enough bytes.

14:55.880 --> 14:58.640
So here, we trap the exception.

14:58.640 --> 15:05.120
Only with a proper exception and then we will return form air to the guy.

15:05.120 --> 15:12.000
In case you have something unexpected, this back crash, of course, it may take down the

15:12.000 --> 15:18.960
process but remember, each request is a separate process so the other request will be fine.

15:18.960 --> 15:24.600
DNSsec, ha, DNSsec is fun.

15:24.600 --> 15:31.600
Because it's dynamic, you need to have dynamic signing.

15:31.600 --> 15:38.080
On cryptography, one of the things I really dislike with cryptography is that each bit

15:38.080 --> 15:42.160
wrong on the signature is completely off the mark.

15:42.160 --> 15:48.760
So it makes things really difficult to debug because some software tell you that the signature

15:48.760 --> 15:49.760
does not match.

15:49.760 --> 15:51.280
Okay, what's the problem exactly?

15:51.280 --> 15:55.400
Did I forget a field or did I forget something in the RFCI?

15:55.400 --> 15:58.000
Yes, something.

15:58.000 --> 16:05.160
So an example, a bug that I had, for instance, is that default encoding of the DNS library

16:05.160 --> 16:10.380
uses compression for the data which is inside the R data.

16:10.380 --> 16:15.320
So the domain name in the SOA or NS record, for instance.

16:15.320 --> 16:22.360
But the RFC about DNSsec says that the signing has to be done on encoding which is done without

16:22.360 --> 16:24.720
any compression.

16:24.720 --> 16:29.160
So it didn't match and it took me some time to figure out the problem.

16:29.160 --> 16:35.900
Also, the library I used did not allow to encode without name compression.

16:35.900 --> 16:39.000
So I had to redo everything myself.

16:39.000 --> 16:44.000
Like most programming projects, drink was at the beginning, oh, it seems simple, it

16:44.000 --> 16:46.040
will be done in a weekend.

16:46.040 --> 16:50.760
And of course, in the end, it was much longer.

16:50.760 --> 16:55.320
So here is an example of code for signing, again, binary data.

16:55.320 --> 17:04.560
We put all the information that are mandated by the RFC in the pseudo RFC, which is then

17:04.560 --> 17:07.400
encoded by myself, unsigned.

17:07.400 --> 17:13.960
There are a few funny tricks, for instance, all domain names has to be put in lower case,

17:13.960 --> 17:19.040
the sort of problem that you discover when you go through a resolver with those case

17:19.040 --> 17:22.320
one domain name.

17:22.320 --> 17:30.120
That's how you learn.

17:30.120 --> 17:34.960
But the most funny in DNSsec is, of course, negative answers.

17:34.960 --> 17:41.280
So Moses came back from the mountain with 10 commandments and one says that you should

17:41.280 --> 17:42.840
not lie.

17:42.840 --> 17:49.040
But you have to lie here because you have to say that there is nothing between this

17:49.040 --> 17:53.200
name and this name, and you don't know all the names because the server is completely

17:53.200 --> 17:54.200
dynamic.

17:54.200 --> 18:00.640
So drink used something called white lies, which are described in RFC 4470.

18:00.640 --> 18:05.960
So the Nsec record is just a bit before the name to a bit later.

18:05.960 --> 18:11.360
It seems simple, but it's very hard to get at one step, for instance, when implementing

18:11.360 --> 18:20.240
the algorithm of RFC, I had code which worked with unbound or not, but failed with bind.

18:20.240 --> 18:26.760
And I never really discovered why, but after some tweaking, it worked.

18:26.760 --> 18:30.960
Also encoding of Nsec bitmaps, it's quite interesting.

18:30.960 --> 18:36.120
Nsec bitmaps are encoded in a very clever way, but very hard to get right, especially

18:36.120 --> 18:39.280
since the RFC has only one test vector.

18:39.280 --> 18:43.520
So it's very difficult to see if you are on the right track or not.

18:43.520 --> 18:48.600
But in the end, it works with we have everything in Elixir necessary.

18:48.600 --> 18:53.080
Enumerate, it's all the things that you can enumerate.

18:53.080 --> 18:55.240
It's a very generic library.

18:55.240 --> 19:01.000
So you can do things like finding the minimum, filtering to extract some data, map to apply

19:01.000 --> 19:03.720
a function, et cetera, et cetera.

19:03.720 --> 19:05.560
It's cool.

19:05.560 --> 19:13.160
Of course, you need to test Elixir like most programming languages as a framework for testing.

19:13.160 --> 19:17.800
But also I made external tests from a Python program written in Python to be sure that

19:17.800 --> 19:23.120
I don't have the same bug in both the tester and the testy.

19:23.120 --> 19:28.920
So it's also especially important in the DNS to test not only with proper DNS requests,

19:28.920 --> 19:32.880
but also with broken requests to see how the server reacts.

19:32.880 --> 19:38.880
So here is a Python code to create, for instance, an incorrect edns option.

19:38.880 --> 19:41.040
This is a comment on the second line.

19:41.040 --> 19:47.880
The length, nsid has no data, but here we put a random length.

19:47.880 --> 19:55.720
So any server that will try to decode edns stupidly will read too much bytes and something

19:55.720 --> 19:56.960
wrong will happen.

19:56.960 --> 20:02.040
So we create this edns option for the dns packet.

20:02.040 --> 20:08.320
We send it to the server and we hope that the server will reply as the RFC said with

20:08.320 --> 20:09.320
form error.

20:09.320 --> 20:14.920
Otherwise the test will fail.

20:14.920 --> 20:15.920
And that's all.

20:15.920 --> 20:17.920
So time for questions.

20:17.920 --> 20:18.920
Perfect.

20:18.920 --> 20:21.920
I have a question.

20:21.920 --> 20:31.920
On this screen, I will start with the question.

20:31.920 --> 20:32.920
Yes.

20:32.920 --> 20:33.920
Yes.

20:33.920 --> 20:36.920
That's a, that's this.

20:36.920 --> 20:42.920
I haven't seen any elixir slides.

20:42.920 --> 20:46.840
How is that?

20:46.840 --> 20:47.840
Good question.

20:47.840 --> 20:49.120
I have to think about it.

20:49.120 --> 20:50.120
Yeah.

20:50.120 --> 20:56.400
The question was about byte order because DNS RFC specify byte order for things like

20:56.400 --> 21:02.960
your length in edns packets, for instance, and it's not explicit in the elixir code.

21:02.960 --> 21:07.920
And that's a good question because I don't remember how I did it, but I won the program

21:07.920 --> 21:13.480
on several machines with addition byte order to be sure that it was okay, but I don't remember

21:13.480 --> 21:15.200
how I did it.

21:15.200 --> 21:19.080
That's an interesting question.

21:19.080 --> 21:20.880
This is a code that I wrote.

21:20.880 --> 21:23.240
The last code that I wrote was DNS sec.

21:23.240 --> 21:25.600
So DNS sec is still fresh in my mind.

21:25.600 --> 21:27.600
So rest is a bit more complicated.

21:27.600 --> 21:35.960
I can probably add that when you specify the binary pattern matching, you can choose how

21:35.960 --> 21:39.960
you want it done.

21:39.960 --> 21:46.960
And you can specify the elements and get the default thing.

21:46.960 --> 21:49.960
I don't remember which element.

21:49.960 --> 21:50.960
Yeah.

21:50.960 --> 21:56.200
I was wondering if TCP, the pipeline just worked, right?

21:56.200 --> 21:58.200
How does it handle larger files?

21:58.200 --> 22:00.200
Do you not have that?

22:00.200 --> 22:02.200
Is it always like the answer comes back?

22:02.200 --> 22:06.200
And so there's no chance that a big answer has to worry about a small answer arriving

22:06.200 --> 22:08.200
while it's being sent or anything like that.

22:08.200 --> 22:16.720
Well, the question was about TCP when there are some questions or replies that are larger

22:16.720 --> 22:19.880
than other or takes more time.

22:19.880 --> 22:27.040
So because of the parallelism, because every DNS request is a separate process, they follow

22:27.040 --> 22:28.520
their own path.

22:28.520 --> 22:33.600
The only case where they meet is when they try to send the reply back.

22:33.600 --> 22:38.760
So in that case, it's an error-long virtual machine which is in charge of being sure that

22:38.760 --> 22:41.320
you cannot interrupt a write operation.

22:41.320 --> 22:44.640
So the way it's implemented is that everything goes through a process.

22:44.640 --> 22:47.760
For instance, logging works the same way.

22:47.760 --> 22:51.920
We send everything to a logging process which then serialize.

22:51.920 --> 22:53.560
So we can be sure.

22:53.560 --> 22:58.560
And also writing on the socket is done by the error-long library, not by me.

22:58.560 --> 22:59.920
So it cannot be interrupted.

22:59.920 --> 23:05.240
So there is no risk, for instance, of interleaving replies, if that was your question.

23:05.240 --> 23:11.760
On the error-long socket library also does a few things that are not really important

23:11.760 --> 23:13.240
but are fun.

23:13.240 --> 23:18.960
For instance, when creating the socket, maybe you notice this option packet two.

23:18.960 --> 23:24.800
It means that two bytes length has to be added automatically which is good for EPP or for

23:24.800 --> 23:25.800
DNS.

23:25.800 --> 23:31.800
And also by default, it's in network byte order which is good again.

23:31.800 --> 23:34.800
Ah, performance.

23:34.800 --> 23:36.800
Yes.

23:36.800 --> 23:46.320
With DNS perf, and I compare the drink with the NSD, drink is typically three to four

23:46.320 --> 23:50.560
times slower which is expected, of course, because it's dynamic.

23:50.560 --> 23:54.680
It has not been optimized for speed because NSD is very fast.

23:54.680 --> 23:58.480
So of course, as you know, performance testing is something complicated.

23:58.480 --> 24:00.560
It depends on a lot of things.

24:00.560 --> 24:07.520
So I don't have strong, serious measurements, but the measurements I did on my machine show

24:07.520 --> 24:12.400
that the difference in performance is, in my opinion, quite acceptable.

24:12.400 --> 24:15.280
Three times slower than NSD is actually quite good.

24:15.280 --> 24:22.760
Are you planning to add a small cache in front of it?

24:22.760 --> 24:27.600
Or for any dynamic answer that lowers you the same answer?

24:27.600 --> 24:32.320
The question is, do I plan to add some caching in it because some questions can take time

24:32.320 --> 24:35.120
to retrieve or to compute?

24:35.120 --> 24:36.120
No.

24:36.120 --> 24:42.080
I don't think it's, as you know, caching is one of the two or three complicated things

24:42.080 --> 24:44.040
in computer programming.

24:44.040 --> 24:49.040
So in my opinion, it's not worth it.

24:49.040 --> 24:53.520
Caching can be done by the client anyway.

24:53.520 --> 24:59.080
You can run a drink behind the NSD, if you're willing.

24:59.080 --> 25:00.080
Thank you.

25:00.080 --> 25:29.680
Thank you,ISTER.

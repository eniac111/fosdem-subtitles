WEBVTT

00:00.000 --> 00:07.000
All right, so good morning.

00:07.000 --> 00:10.000
Guten Morgen, Wilkam, BÃ¼ndjur, Huilmore.

00:10.000 --> 00:14.000
Yeah, I can speak too many languages.

00:14.000 --> 00:19.000
For the people that know who I am, my name is Thomas Thiembergen.

00:19.000 --> 00:22.000
I'm the head of the Open Source Program Office at EPAM.

00:22.000 --> 00:26.000
I'm involved in several, well, you can call it Open Source Governance,

00:26.000 --> 00:33.000
and S-BOM-related projects, including I run the security profile over the defects team.

00:33.000 --> 00:38.000
So if people have questions about security information in SPX3,

00:38.000 --> 00:42.000
I'm happy to answer those as well.

00:42.000 --> 00:46.000
I decided to just not make pretty slides, but to just open a browser,

00:46.000 --> 00:49.000
so to be more like a demo and to make it a little bit more interactive.

00:49.000 --> 00:52.000
Since I'm the first talker, I have to keep you all awake,

00:52.000 --> 00:57.000
and I'm usually a very high-energy person.

00:57.000 --> 01:00.000
Apparently last night I was compared to Oblix,

01:00.000 --> 01:04.000
and I fell into a fat of open source juice,

01:04.000 --> 01:08.000
and therefore I'm all hyped up on open source stuff.

01:08.000 --> 01:12.000
So yeah, so I normally can talk very fast,

01:12.000 --> 01:15.000
so I will try to be a little bit slower.

01:15.000 --> 01:18.000
So I'm here a little bit to talk about Wort.

01:18.000 --> 01:21.000
Wort is a project, or OSS review toolkit.

01:21.000 --> 01:29.000
It should be standing a little bit left, so that you and the camera is framing both you and the slides.

01:29.000 --> 01:30.000
Better?

01:30.000 --> 01:33.000
Perfect, like first talk.

01:33.000 --> 01:39.000
So it should work. Hopefully my internet is all working.

01:39.000 --> 01:43.000
So yeah, if you are on GitHub, you can find Wort here.

01:43.000 --> 01:48.000
The full name is OSS review toolkit, or open source software review toolkit.

01:48.000 --> 01:54.000
It's a very complex name. It's actually for those people that are German.

01:54.000 --> 01:58.000
Wort in German means place, and I used to work for a location company,

01:58.000 --> 02:02.000
and all of our open source project had a location pun in them.

02:02.000 --> 02:05.000
So we were really trying to figure out all of the names,

02:05.000 --> 02:11.000
and how can we make a location name, and this is where we landed on.

02:11.000 --> 02:15.000
So I'm actually going to do somewhat a live demo,

02:15.000 --> 02:19.000
but my internet is not working 100%, so we're just going to do it like this,

02:19.000 --> 02:22.000
where I just have luckily pages open, and I'll show you through.

02:22.000 --> 02:29.000
So if you want to get started with Wort, the easiest way is actually to use the GitHub action.

02:29.000 --> 02:34.000
And you can just literally, as the code shows here, you just add a few lines,

02:34.000 --> 02:39.000
and basically it's very standard for people that are familiar with GitHub actions.

02:39.000 --> 02:41.000
In the middle there's a checkout.

02:41.000 --> 02:45.000
The line on top is a little bit different, and I'll get to it in a minute,

02:45.000 --> 02:47.000
and then you run Wort itself.

02:47.000 --> 02:56.000
This line is a little bit different, and it has to do with how Wort generates S-bombs.

02:56.000 --> 03:04.000
So for to create good S-bombs, you can make S-bombs that basically only operate on kind of like the declared license,

03:04.000 --> 03:07.000
the basic package data, but if you want to have a proper, what you want to do,

03:07.000 --> 03:09.000
I originally worked in automotive industry.

03:09.000 --> 03:12.000
We want to know everything down to source level.

03:12.000 --> 03:15.000
And why is that? It's actually very simple.

03:15.000 --> 03:23.000
In the automotive business, basically products on the market, the minimum lifespan is 15 years,

03:23.000 --> 03:29.000
and it can go up to 25 years or longer, because the vehicle on the road is minimum 10 years on the road,

03:29.000 --> 03:33.000
plus European legislation contract laws are now about 5 years, 15 years.

03:33.000 --> 03:41.000
So all the solutions that we built for S-bombs, my successor of my successor of my successor, still needs to be able.

03:41.000 --> 03:45.000
So this is why we started building the way how Wort is designed, that we were like,

03:45.000 --> 03:55.000
hmm, we need a format that we can take the scan results that we have and all that we can just do, store them long term,

03:55.000 --> 04:04.000
in a public format that even if the tool in the V-ride doesn't exist anymore in 10 years, it's an international standard,

04:04.000 --> 04:10.000
so they can just write a new parser, read in this, and then of course I stumbled upon,

04:10.000 --> 04:15.000
and then I happened to make Kate at FOSDEM in the bus.

04:15.000 --> 04:20.000
And so we got talking, and I was like, hey, that's interesting, this S-bomb thing,

04:20.000 --> 04:27.000
so this is like years ago, like what, 2015-ish, I think, 16-ish, a long, long time ago.

04:27.000 --> 04:36.000
So then I was like, hang on, I can solve two of my problems, I can basically have an output format that is recognized,

04:36.000 --> 04:41.000
so I have a long term archive format, and I also have a format that I need it to exchange.

04:41.000 --> 04:43.000
So there are two forms of, why is that?

04:43.000 --> 04:46.000
In automotive, there is a long supply chain.

04:46.000 --> 04:51.000
So what we have commonly, we call this hamburgers, where you get something from a supplier,

04:51.000 --> 04:57.000
you do your thing, then it goes to another supplier, and then my company will be again in there.

04:57.000 --> 05:03.000
So we were just looking at what is the solution that we can, in the supply chain, basically exchange information.

05:03.000 --> 05:10.000
It still is, unfortunately, or a model procedure, so still a lot of paper-based processes,

05:10.000 --> 05:11.000
and we were like, no, no, we need to go digital.

05:11.000 --> 05:16.000
So what you now see, luckily, is that some of the large German ones, which again, I'm based in Berlin, Germany,

05:16.000 --> 05:20.000
they're already switching to basically say S-bombs, and then, no, no, no, yeah, you can still do paper,

05:20.000 --> 05:25.000
but we actually prefer you to give us an S-bomb, because then they can ingest it much more easier.

05:25.000 --> 05:33.000
So yeah, we basically do SPDX, and actually we also support something that is for exchange, and also for archiving.

05:33.000 --> 05:38.000
So yeah, now, it is like that my talk was about how you generate it, so it's actually very simple.

05:38.000 --> 05:42.000
So I took you to the MIME-type projects, which is kind of our default project.

05:42.000 --> 05:47.000
It's a small node project, and if I want to do an S-bomb for it, it's actually very simple.

05:47.000 --> 05:51.000
For people that are familiar with GitHub actions, you just run the action.

05:51.000 --> 05:54.000
There's as simple as it is.

05:54.000 --> 05:57.000
And you can also do this in GitLab.

05:57.000 --> 06:01.000
I don't know for people familiar with GitLab, but basically it's all the same.

06:01.000 --> 06:03.000
You just run a GitLab pipeline.

06:03.000 --> 06:06.000
It says org-scan, and you basically get a nice log.

06:06.000 --> 06:12.000
You click on the Browse button there, and you get basically nice results,

06:12.000 --> 06:15.000
and it's kind of...we generate all of this.

06:15.000 --> 06:25.000
So we actually go further on S-bombs, because just generating an S-bomb is not good enough.

06:25.000 --> 06:35.000
So that the file is generated, that's nice, but you actually want a quality S-bomb.

06:35.000 --> 06:42.000
And it's actually quite challenging to produce a good S-bomb.

06:42.000 --> 06:45.000
What do you think?

06:45.000 --> 06:48.000
People know. Show me your hands.

06:48.000 --> 06:53.000
What do you think, or just speak up loud, what do you think is the problem with generating an S-bomb?

06:53.000 --> 06:55.000
The input data.

06:55.000 --> 06:58.000
The input data. What input data?

06:58.000 --> 07:01.000
Well, you don't know.

07:01.000 --> 07:03.000
You don't know the input data.

07:03.000 --> 07:11.000
So when we do an analysis of your software project...

07:11.000 --> 07:16.000
I'm also originally an engineer. I still do coding.

07:16.000 --> 07:19.000
We're happy when things build.

07:19.000 --> 07:23.000
So all the build tools are basically optimized to build code.

07:23.000 --> 07:30.000
To keep track of what actually went into your code, yeah, that's kind of an additional feature.

07:30.000 --> 07:33.000
It's not a requirement that the build tool does that.

07:33.000 --> 07:37.000
So to figure out what actually goes into your software project,

07:37.000 --> 07:44.000
I bet whatever tool is your poison, whether it's a Maven or Gradle or MPM,

07:44.000 --> 07:51.000
I'm pretty certain your tool can produce a list of the packages that are included.

07:51.000 --> 07:58.000
I hate to tell you that, but most of the time that list is incomplete.

07:58.000 --> 08:05.000
For instance, if I look at MPM, MPM has six methods to give you a list of what is included.

08:05.000 --> 08:08.000
All of them are incorrect.

08:08.000 --> 08:10.000
And it's not to blame anything on MPM.

08:10.000 --> 08:15.000
No, no, when I build things, MPM is a very... JavaScript is a very rapidly developing ecosystem.

08:15.000 --> 08:18.000
So they build functions really, really rapidly. It's amazing.

08:18.000 --> 08:21.000
I work in MPM and know it a lot.

08:21.000 --> 08:24.000
So they add a feature for a particular use case.

08:24.000 --> 08:29.000
And looking at S-bomb, it was simply not a use case that was supported.

08:29.000 --> 08:33.000
So they have different views. There's one quick view that just shows you quickly the dependencies.

08:33.000 --> 08:41.000
There's another view that shows you basically, hey, this was coming somewhere, but if you look, for instance, at a complete S-bomb,

08:41.000 --> 08:47.000
you probably have seen if you're a node developer that there are node packages that you see C++ below.

08:47.000 --> 08:56.000
So node is just used as a wrapper for some other CCC++ program, for instance, to compile your glyphs, your fonts.

08:56.000 --> 09:02.000
What you will look in when you generate an S-bomb, it might see the wrapper, but it will not see the C++ thing below it

09:02.000 --> 09:09.000
and what's in the compiled thing there, because the MPM tarball just contains the compiled C++ code for every platform.

09:09.000 --> 09:12.000
So you won't find this out.

09:12.000 --> 09:19.000
So the way how we went about this is, okay, what we do, we need to resolve everything back to source code.

09:19.000 --> 09:23.000
And that's actually really, really complicated, because if you want to look at Maven,

09:23.000 --> 09:27.000
that whole ecosystem is basically the GIF developer compiled code, not the source code.

09:27.000 --> 09:33.000
Yeah, you can find a metadata. You can kind of figure out what went into this Java project.

09:33.000 --> 09:36.000
But actually, here's a fun fact.

09:36.000 --> 09:41.000
Most of the time, the package metadata from this Maven project is actually incorrect.

09:41.000 --> 09:47.000
For example, not the Bash, for instance, on Amazon, but if you know the Amazon Java SDK,

09:47.000 --> 09:50.000
and you look at the metadata, it points to the right code repository.

09:50.000 --> 09:52.000
Great, Amazon, great work.

09:52.000 --> 09:57.000
But Maven doesn't have a solution to tell you when you have a code repository,

09:57.000 --> 10:01.000
which folder in that code repository actually contains the source code for the package.

10:01.000 --> 10:07.000
And if you know the AWS SDK for Java, it's one code repository with close to 500 packages.

10:07.000 --> 10:12.000
So I have here a jar from the Java SDK. Where is the source code for that jar?

10:12.000 --> 10:17.000
Oh, yeah, it's in this code repository with another 400 plus of its friends.

10:17.000 --> 10:22.000
And for me to know the exact licensing or security vulnerabilities, I need to know exactly which source code.

10:22.000 --> 10:24.000
So then you need to do all kinds of tricks.

10:24.000 --> 10:27.000
So this is where we built our tooling to basically figure this out.

10:27.000 --> 10:30.000
I just want to give you a slight one of the output formats.

10:30.000 --> 10:35.000
So this is where we basically created a simple single file.

10:35.000 --> 10:38.000
We call this the web app. It's a single file. It's not a server.

10:38.000 --> 10:42.000
So when we started building this, we're like, no, no, we want to be compatible with as many different systems and many stuff.

10:42.000 --> 10:47.000
We want to have a docker container that you can just run in your CI CD pipeline,

10:47.000 --> 10:54.000
and it produces just plain files because every developer knows how to handle single files.

10:54.000 --> 10:57.000
You can take this file and you can just send it to your lawyer,

10:57.000 --> 11:00.000
and the lawyer can open the file and they can also view it.

11:00.000 --> 11:02.000
We were all optimized for a CI pipeline.

11:02.000 --> 11:09.000
The second thing that we were looking at it is when we look at things, we want to be when we throw a violation.

11:09.000 --> 11:14.000
So here you have a package in top. You see a license package that's a copy left in source.

11:14.000 --> 11:19.000
So you can write policy rules in order, very powerful policy rules, whatever you want to do.

11:19.000 --> 11:23.000
But when you draw a policy violation, and this was on our complaint that we had a lot of tools,

11:23.000 --> 11:28.000
when you write in your open source policy, like I don't allow this license,

11:28.000 --> 11:32.000
you should tell your users how they can fix it themselves.

11:32.000 --> 11:39.000
Why? Well, in my company, I have 55,000 software engineers.

11:39.000 --> 11:46.000
If all of them, if they don't know it, contact my team, yeah, I'll be very busy.

11:46.000 --> 11:51.000
So the way how we set things up is like, no, no, no, no, we want things to be open source.

11:51.000 --> 11:56.000
We want to be based on open standards, SPDX, Python DX, so all S-bomb standards.

11:56.000 --> 12:01.000
We want to be able to write a policy where we can write whatever we want in our actual legal policy,

12:01.000 --> 12:04.000
actually translated, or it has something called policy as code.

12:04.000 --> 12:08.000
You can really take whatever your policy is and you can encode that.

12:08.000 --> 12:12.000
So we want to really be able to do. And we want everything to be plain file,

12:12.000 --> 12:16.000
so it's easily integratable, whatever CI system.

12:16.000 --> 12:19.000
Why is that? Well, I run an Ospo, an open source program office.

12:19.000 --> 12:24.000
Are people familiar, hands up, who's familiar with the term open source program office?

12:24.000 --> 12:29.000
Some people. So an open source program office is the industry term for like your knowledge center

12:29.000 --> 12:31.000
with an organization regarding open source.

12:31.000 --> 12:34.000
So I run an Ospo, what that basically means is that all open source questions,

12:34.000 --> 12:40.000
everything comes to my team and we try to help our engineers with contributing back

12:40.000 --> 12:43.000
with compliance questions or help with community topics.

12:43.000 --> 12:50.000
We really like there to basically help our organization become better at open source.

12:50.000 --> 12:53.000
So that means I get lots and lots of questions regarding open source.

12:53.000 --> 12:58.000
So I want something that really scales because I have thousands of engineers.

12:58.000 --> 13:02.000
Having this how to fix new text and having a very powerful policy,

13:02.000 --> 13:06.000
I can exactly decide, okay, these are the things we really want to fix

13:06.000 --> 13:10.000
and these are the things we don't want to fix and we want to provide exactly the guidance.

13:10.000 --> 13:11.000
So the funny thing, you might see this here.

13:11.000 --> 13:14.000
This is actually all YAML file and Git based.

13:14.000 --> 13:20.000
So we use actually the same developer workflow with pull crests to basically fix up our licensing.

13:20.000 --> 13:23.000
Why do we do this?

13:23.000 --> 13:25.000
Actually because that's what the developers are already known for.

13:25.000 --> 13:28.000
The developers already know how to do all of this stuff.

13:28.000 --> 13:30.000
So we enable the developers to fix things themselves.

13:30.000 --> 13:36.000
The other thing is we can now use inner source to fix license compliance problems

13:36.000 --> 13:38.000
and security problems together.

13:38.000 --> 13:40.000
And why do we want to do this?

13:40.000 --> 13:44.000
Well, the more things we can actually fix issues instead of what a lot of tools do,

13:44.000 --> 13:49.000
what they call notify more, they throw you an issue up and then you have to fix it.

13:49.000 --> 13:54.000
It's better basically if we work together to actually fix all of these issues

13:54.000 --> 13:56.000
than if we did the inner source.

13:56.000 --> 13:57.000
This was actually the first time we did this.

13:57.000 --> 14:00.000
It was very, hang on.

14:00.000 --> 14:04.000
So other teams are going to fix my license compliance and security teams?

14:04.000 --> 14:07.000
Yes, because in our organization, guess what?

14:07.000 --> 14:11.000
A lot of the same open source is shared between a lot of different teams.

14:11.000 --> 14:15.000
So instead of having every team do all of this compliance and security work by themselves,

14:15.000 --> 14:18.000
for the things that are shared, we do collectively.

14:18.000 --> 14:22.000
And the nice thing is you can do this in your organization,

14:22.000 --> 14:26.000
but we also not only open source the tooling, we also open source the data

14:26.000 --> 14:27.000
and the policies from the org side.

14:27.000 --> 14:29.000
So you can also do this with the whole community.

14:29.000 --> 14:33.000
So we're working and we had a workshop on Friday to discuss how can we do this even further,

14:33.000 --> 14:40.000
how can we collectively work to create better S-BOMs.

14:40.000 --> 14:41.000
That's pretty interesting.

14:41.000 --> 14:43.000
A little sneak peek.

14:43.000 --> 14:46.000
Lots of code, beautiful code, right, in the morning?

14:46.000 --> 14:48.000
This is the other thing that I'm working on already.

14:48.000 --> 14:49.000
This is what it is.

14:49.000 --> 14:51.000
It's the security profile.

14:51.000 --> 14:55.000
So the latest things that we're now working on is like, okay, we want to combine,

14:55.000 --> 15:00.000
update everything and include vulnerabilities as well.

15:00.000 --> 15:04.000
And then you come into a lot of other challenges to create an S-BOM.

15:04.000 --> 15:09.000
So technically, actually, to be clear, security info should ideally not be in your S-BOM.

15:09.000 --> 15:12.000
It should be as a standalone artifact.

15:12.000 --> 15:15.000
It's in S-BOM format, but standalone.

15:15.000 --> 15:19.000
So because your S-BOM should be fixed for your software release and your security information is probably updated.

15:19.000 --> 15:24.000
But then, actually, we ran into a lot of challenges with including security information.

15:24.000 --> 15:26.000
Because guess what?

15:26.000 --> 15:31.000
A lot of security information is either locked up in a priority database

15:31.000 --> 15:38.000
and actually is a lot of times not really accurate.

15:38.000 --> 15:41.000
And that's what we figured out when we were starting to move into security data.

15:41.000 --> 15:45.000
A lot of the data, when you actually look at the data and you look, and I've been working with Philippe from next B,

15:45.000 --> 15:51.000
and looking at this data, you'll figure out that the ranges of software for a lot of CVEs are actually incorrect.

15:51.000 --> 15:57.000
And we were like, no, no, we want to build open source tooling that reduces the burden on our software developers.

15:57.000 --> 15:59.000
Well, I need accurate data.

15:59.000 --> 16:04.000
So it's actually funny now that we started creation mechanisms, as we called it, to fix up license data.

16:04.000 --> 16:10.000
And now we have to build creation mechanisms for security data as well so we can actually fix up the security data

16:10.000 --> 16:13.000
so that at the end we can produce high quality S-BOM.

16:13.000 --> 16:16.000
So we know exactly like these packages were in there under these licenses.

16:16.000 --> 16:21.000
And at the time of release, we know this security vulnerabilities.

16:21.000 --> 16:24.000
And now the next thing is, how many people are familiar with VEX?

16:24.000 --> 16:25.000
Few.

16:25.000 --> 16:27.000
VEX is an upcoming standard.

16:27.000 --> 16:31.000
If you have a security vulnerability, you can basically say, like,

16:31.000 --> 16:34.000
oh, yeah, I know this security vulnerability was found by my scanner.

16:34.000 --> 16:35.000
It's reported.

16:35.000 --> 16:39.000
But I compiled this package with these, say, parameters.

16:39.000 --> 16:42.000
So this vulnerability is actually not applicable to my software.

16:42.000 --> 16:45.000
So it's a way to, in a machine-readable way, to say, like,

16:45.000 --> 16:48.000
yes, the scanner will pack a security vulnerability for OpenSSL.

16:48.000 --> 16:54.000
But the way I use OpenSSL, I don't use the particular code where the security vulnerability was found for.

16:54.000 --> 16:58.000
So that's the next challenge we're working on, like, how can we do that in an automated way?

16:58.000 --> 16:59.000
And that's it.

16:59.000 --> 17:01.000
I think let's go to questions.

17:01.000 --> 17:05.000
Do people have any questions?

17:05.000 --> 17:11.000
You might want to speak up to the microphone.

17:11.000 --> 17:13.000
Oh, we did? Okay.

17:13.000 --> 17:18.000
So basically most of the time when you compile stuff, you do, like, three shakings,

17:18.000 --> 17:23.000
and so you import a library, but you don't import all the functions inside the library.

17:23.000 --> 17:30.000
So if a vulnerability is found in the library but not one in the function you import,

17:30.000 --> 17:34.000
is there, like, some kind of way to detect that?

17:34.000 --> 17:40.000
So the question is, like, is there a way to detect if you compile software whether something is included or not?

17:40.000 --> 17:43.000
Correct it?

17:43.000 --> 17:48.000
You want to?

17:48.000 --> 17:54.000
So I think the question was, if there is a component, but you're not using the whole component,

17:54.000 --> 17:57.000
you're using just a part of it, and there is a vulnerability,

17:57.000 --> 18:01.000
but the vulnerability is for something that you do not use,

18:01.000 --> 18:05.000
for example, a library, a function that is never called in your code, right?

18:05.000 --> 18:09.000
Is there a way to detect that? That's all great.

18:09.000 --> 18:12.000
Honest answer, no.

18:12.000 --> 18:15.000
I don't know about that. I disagree.

18:15.000 --> 18:17.000
There is a difference, okay.

18:17.000 --> 18:21.000
So you can do it, but when I look at things at scale.

18:21.000 --> 18:23.000
So you can do it for individual cases.

18:23.000 --> 18:27.000
You can do this where you know the compiler and other stuff.

18:27.000 --> 18:33.000
What I'm looking at is, like, if you have a larger configuration, like, we use tens of different compilers with tens of things.

18:33.000 --> 18:35.000
It doesn't scale.

18:35.000 --> 18:43.000
So the way how we did it around it, we in order to have a mechanism where you can basically indicate either via SPDX what you're using,

18:43.000 --> 18:50.000
or you can add a creation afterwards where you say, like, yes, I'm using this package, but I'm only using this folder,

18:50.000 --> 18:56.000
and then order for automatically subtract the things that are not applicable.

18:56.000 --> 18:57.000
Okay.

18:57.000 --> 18:59.000
One more question. Quick one.

18:59.000 --> 19:01.000
Let's see here if you want to come up.

19:01.000 --> 19:04.000
Yeah. Do you set up already?

19:04.000 --> 19:22.460
The As

19:22.460 --> 19:33.460
Well, we actually have all source things in there as well, but it's.

19:33.460 --> 19:37.460
But mostly we do build. So basically we look at your source code. We pull it out.

19:37.460 --> 19:43.460
Basically, like in this source code, the idea why we started there is because everything started source code.

19:43.460 --> 19:53.460
Okay. The next speaker. Right.

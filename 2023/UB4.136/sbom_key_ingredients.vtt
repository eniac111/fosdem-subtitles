WEBVTT

00:00.000 --> 00:14.360
All right, so first of all, thank you for staying this late on Sunday and for attending

00:14.360 --> 00:17.120
the Eson Roma bit as part of the organizers.

00:17.120 --> 00:20.120
I'm really happy to see this.

00:20.120 --> 00:28.680
And so we have been going through all of those cool use cases and complex, like really complete

00:28.680 --> 00:35.680
and complex tools to generate desktops and analyzing how companies speak about how they're

00:35.680 --> 00:40.840
doing it and like going deep into the research of how Eson's talking about both.

00:40.840 --> 00:50.120
I was thinking that I wanted to do like my talk as kind of pivot as we are sitting towards

00:50.120 --> 00:56.080
the more discussion part of the bedroom.

00:56.080 --> 01:05.640
And so as you have been hearing from folks right now, a lot of us working on Eson's are

01:05.640 --> 01:11.520
starting to get concerned about what's actually in those documents.

01:11.520 --> 01:17.520
And I think when Thomas opened the bedroom today, the first thing he said was, well,

01:17.520 --> 01:21.800
those dependencies that you're getting, they may not be correct, right?

01:21.800 --> 01:26.880
So I thought that it would be, as we move to the latest part of the conference, it would

01:26.880 --> 01:32.120
be cool if we could get a few talking points just to see the conversation that's about

01:32.120 --> 01:33.400
to happen.

01:33.400 --> 01:40.000
So my name is Aloha Garcia, and I am, well, part of the SPDX community.

01:40.000 --> 01:42.720
I am a contributor to SPDX and some of the tools.

01:42.720 --> 01:47.600
I'm a trained adventurer for open source tools that generate and consume desktops and that

01:47.600 --> 01:49.040
help visualize them.

01:49.040 --> 01:51.360
I am also part of the Kubernetes project.

01:51.360 --> 01:59.520
I am part of Kubernetes SIG release, and I work there mostly on the supply chain security

01:59.520 --> 02:01.280
of the project.

02:01.280 --> 02:07.520
And yeah, like riding my bike, I'm based in Mexico City, and I am a staff engineer with

02:07.520 --> 02:15.000
Changer, which is a company devoted to supply chain security.

02:15.000 --> 02:22.440
So as you heard from probably every speaker today, the goal of having a company getting

02:22.440 --> 02:26.360
a document which you can actually use for something.

02:26.360 --> 02:34.400
And there are many concerns about ESBOMs flying around in the world today because there are

02:34.400 --> 02:40.960
particular use cases, and some people will argue that ESBOMs may not be necessarily incomplete

02:40.960 --> 02:44.240
if they're not suitable for one case or the other.

02:44.240 --> 02:51.880
And this is true, but instead of trying to picture ourselves generating a next one from

02:51.880 --> 02:56.680
the position of a large company or whatever, I felt that it was more appropriate to discuss

02:56.680 --> 03:05.640
today that how I am assuming a lot of people here are maintainers of open source projects

03:05.640 --> 03:11.520
and sometimes very small open source projects, like one maintainer small.

03:11.520 --> 03:19.680
And I think it's important to start considering that when those large companies are going

03:19.680 --> 03:25.040
to use your project, your library, important in that module that you're writing, the ESBOM

03:25.040 --> 03:29.240
that you give them can really make a difference in several areas.

03:29.240 --> 03:35.520
Like first, you can make their life easier because you're having them more complete information

03:35.520 --> 03:37.400
which they can act on.

03:37.400 --> 03:45.720
And the other one is we as open source community become better citizens of the supply chain,

03:45.720 --> 03:53.520
like generating the information that pertains to us is much more responsible thing to do.

03:53.520 --> 03:58.000
So what happens when you open an ESBOM?

03:58.000 --> 04:01.640
Well today you can get all sorts of surprises.

04:01.640 --> 04:03.500
Sometimes there's nothing in there.

04:03.500 --> 04:06.320
You open the ESBOM and it's empty.

04:06.320 --> 04:12.320
Sometimes you don't have absolutely any information that lets you determine what the ESBOM is

04:12.320 --> 04:13.320
describing.

04:13.320 --> 04:18.600
So it's simply just pointing to the same black box that you can look from the outside.

04:18.600 --> 04:26.520
Or the other is what happens if, are you sure that the ESBOM is really describing what you're

04:26.520 --> 04:30.280
expecting to and you're not getting combed by someone?

04:30.280 --> 04:43.640
So that information needs to be in the ESBOM in order to ensure that it's actually describing

04:43.640 --> 04:47.200
that piece of software that you're distributing.

04:47.200 --> 04:51.640
So I'm going to give you a few examples.

04:51.640 --> 04:59.960
I'm not trying to name names and that's why I chose projects that I'm involved with, both

04:59.960 --> 05:00.960
good and bad.

05:00.960 --> 05:03.400
So this is the first one.

05:03.400 --> 05:09.800
This is our company has a Linux distribution which is already shipped shipping with ESBOMs

05:09.800 --> 05:11.280
built in.

05:11.280 --> 05:15.720
And we generate those ESBOMs at build time for all of the packages.

05:15.720 --> 05:19.800
And you can see the structure here of one of the ESBOMs.

05:19.800 --> 05:25.000
This is like a visualization of the ESBOM using the Kubernetes bomb tool which lets

05:25.000 --> 05:30.280
you ingest SPDX documents and see how they're structured inside.

05:30.280 --> 05:35.240
And as you can see, we try to in the Linux district add a lot of detail to the ESBOM

05:35.240 --> 05:42.840
as much as we can to just guide whoever's using those ESBOMs to do smart decisions with

05:42.840 --> 05:45.920
the information they have in them.

05:45.920 --> 05:52.200
So if you look at some of, this is a fragment of the ESBOM and I mean some information is

05:52.200 --> 05:53.640
there.

05:53.640 --> 06:01.680
Some information is, for example, the licenses, the license concluded fields.

06:01.680 --> 06:05.400
They are marked as no assertion but you can omit those, for example, if you want.

06:05.400 --> 06:11.760
But we have the license from the project, from the actual operating system package.

06:11.760 --> 06:14.460
We have some identifiers, things like that.

06:14.460 --> 06:17.280
So it's pretty complete.

06:17.280 --> 06:23.080
It's obviously not perfect but we try and we try to add as much information as we can.

06:23.080 --> 06:31.560
But then let me show you another ESBOM from another popular open source project.

06:31.560 --> 06:34.720
This is part of the Kubernetes ESBOM.

06:34.720 --> 06:40.560
So this is part of the ESBOM like the structure, a little fragment of the structure of the

06:40.560 --> 06:46.640
ESBOM that we generate with when we put out a new Kubernetes release.

06:46.640 --> 06:54.240
And this is describing, for example, the tables which we put out with every release.

06:54.240 --> 06:58.000
One of the tables of the LQA API server, the list of files.

06:58.000 --> 07:00.640
So we also try to add information.

07:00.640 --> 07:05.040
We put out two ESBOMs with Kubernetes, one with the artifacts, one with the source code

07:05.040 --> 07:07.920
which are linked one to each other.

07:07.920 --> 07:12.720
And so we also think that those are fairly complete ESBOMs.

07:12.720 --> 07:20.840
But now I opened an ESBOM in a popular open source project and tried to generate the structure

07:20.840 --> 07:21.840
like this.

07:21.840 --> 07:25.040
I'm not going to say which project it is.

07:25.040 --> 07:31.960
It's just one I'm involved with and we should be doing a better job there.

07:31.960 --> 07:37.600
And you can guess many reasons of why this is showing serial things but we can go over

07:37.600 --> 07:40.640
this.

07:40.640 --> 07:49.040
So as you can see, you can really enrich an ESBOM with a lot of information and some of

07:49.040 --> 07:51.720
it can be more important than other things.

07:51.720 --> 07:55.520
But I've been thinking, well, what's the most important details that you can add to the

07:55.520 --> 07:56.520
ESBOM?

07:56.520 --> 08:01.640
So the first one is, and by the way, most of this you already heard the truth of the

08:01.640 --> 08:04.200
day if you've been sitting in most of the conferences.

08:04.200 --> 08:05.960
So we're going to go one by one.

08:05.960 --> 08:09.680
So the first one is syntactic correctness.

08:09.680 --> 08:17.600
You would expect that most tools generating SPDX or Cyclone DX ESBOMs do the basic job

08:17.600 --> 08:20.120
of just making a compliant document.

08:20.120 --> 08:24.360
Well, the reality is that they're not so.

08:24.360 --> 08:30.160
If you, I pictured this guy from Apollo 13 that tries to fit the square peg in the round

08:30.160 --> 08:33.920
hole or the other way around.

08:33.920 --> 08:38.680
Because if you cannot ingest an ESBOM, so what's the point?

08:38.680 --> 08:45.600
And even if you have tried to somehow hack the document or ingest it somehow, the reality

08:45.600 --> 08:51.120
is that most tools that consume ESBOMs today do not have a clear strategy of deprecating

08:51.120 --> 08:55.200
the documents.

08:55.200 --> 08:58.960
And then most importantly, not clear and also not predictable.

08:58.960 --> 09:06.400
So if a tool tries to somehow ignore errors or whatever, the behavior may not be consistent.

09:06.400 --> 09:12.640
So ensure that any ESBOM that you're producing or requesting at least complies with syntactic

09:12.640 --> 09:16.280
rules of the standard you're using.

09:16.280 --> 09:18.440
The second one, dependency data.

09:18.440 --> 09:22.880
And this is a little bit related to the first one.

09:22.880 --> 09:24.120
I've seen ESBOMs.

09:24.120 --> 09:28.720
So since I work with a lot of open source tools and my job also has to do with ESBOMs,

09:28.720 --> 09:32.080
I've seen a lot of tools producing ESBOMs.

09:32.080 --> 09:39.480
And so for example, one variant of the bad ESBOM is, well, they will just list like a

09:39.480 --> 09:43.760
table and that's your ESBOM, nothing else.

09:43.760 --> 09:50.600
Or the obvious case of this ESBOM contains one thing, an RPM.

09:50.600 --> 09:54.280
No dependency, no nothing.

09:54.280 --> 10:00.960
So we often use the analogy of the ESBOM being the nutritional label of software.

10:00.960 --> 10:05.920
But without the dependency list, well, it's really worthless.

10:05.920 --> 10:11.600
You can still use your ESBOM as the old checksum.txt if you wanted, but ESBOM's going to provide

10:11.600 --> 10:14.240
a lot more value than that.

10:14.240 --> 10:16.480
Then the second one, licensing information.

10:16.480 --> 10:25.280
We heard a ton of the talks today about licensing and why it may be important.

10:25.280 --> 10:32.040
So the truth is if you are publishing software, you're the most qualified person to do the

10:32.040 --> 10:37.000
assessment of what the license your software should be using.

10:37.000 --> 10:42.520
And this applies both to the dependencies that you're pulling in.

10:42.520 --> 10:47.960
And if you are redistributing an information, ensure that the information about the licensing

10:47.960 --> 10:50.480
is going down the stream.

10:50.480 --> 10:56.760
Because the tools that we've been seeing today try to do a good job on helping people understand

10:56.760 --> 10:59.360
their licensing situation.

10:59.360 --> 11:07.280
So I picture checking the passport as an example of the license.

11:07.280 --> 11:10.240
The next one.

11:10.240 --> 11:12.400
And semantic structure in the ESBOM.

11:12.400 --> 11:17.080
This one also came during the discussion today.

11:17.080 --> 11:24.120
So there are folks that think that ESBOM can be just the list of dependencies.

11:24.120 --> 11:25.600
And it may be true.

11:25.600 --> 11:29.440
But then you start losing context on where those things fit.

11:29.440 --> 11:36.640
For example, if you have just a list of dependencies, and especially if they're not related to

11:36.640 --> 11:40.120
an artifact at the top of the ESBOM, if you picture.

11:40.120 --> 11:47.200
So the ESBOM can be this beautiful graph of one node that spreads out to lots of different

11:47.200 --> 11:50.280
relationships in nodes.

11:50.280 --> 11:53.760
So sometimes you'll see ESBOMs that only have the list of dependencies.

11:53.760 --> 11:59.640
And they don't talk about where those dependencies fit if they're describing a concerning image,

11:59.640 --> 12:01.840
a binary, nothing.

12:01.840 --> 12:08.320
So if you try to do something more sophisticated with that data, you simply can't.

12:08.320 --> 12:15.840
If you remember the ESBOM that I showed in the beginning that we built with the Linux

12:15.840 --> 12:21.920
distribution, this is how we structure the container images built from our Linux distribution.

12:21.920 --> 12:29.120
So you have the container, the layers, and the packages, like the OS packages, and then

12:29.120 --> 12:32.960
all of the files in its proper place.

12:32.960 --> 12:38.920
And this information is actually coming from smaller ESBOMs that get compiled when we build

12:38.920 --> 12:40.040
the Linux distribution.

12:40.040 --> 12:45.660
So each of the APKs of the distro have their own ESBOM describing that package.

12:45.660 --> 12:51.320
And then when we build an image, we take all of those ESBOMs and give you one single ESBOM

12:51.320 --> 12:54.160
with all of that information composed where it's supposed to be.

12:54.160 --> 12:57.560
And without structure, you simply cannot do this.

12:57.560 --> 13:03.120
And this is one image, but then if you go and make it more complex, you can start thinking

13:03.120 --> 13:05.840
about multi-arch images.

13:05.840 --> 13:11.480
And those need to have this information for each of the images, so the relationships start

13:11.480 --> 13:16.840
to become more and more complex.

13:16.840 --> 13:20.800
And the way I try to picture is this.

13:20.800 --> 13:24.760
So they give you a box of Legos without any instructions or anything.

13:24.760 --> 13:26.400
You can use your imagination.

13:26.400 --> 13:31.360
Basically you're going to build something really beautiful, most likely not.

13:31.360 --> 13:35.920
Especially not the thing picture in the box, right?

13:35.920 --> 13:40.120
And so these are some of the reasons that I was thinking.

13:40.120 --> 13:45.480
If you have structure, then it's a guarantee at least that the tool at least is looking

13:45.480 --> 13:52.320
at how the thing is composed and where the information is flowing from and lets you do

13:52.320 --> 13:57.640
more complex use cases for the documents.

13:57.640 --> 13:59.960
Now the next one.

13:59.960 --> 14:06.560
This also has come like two, three times today, the software identifiers.

14:06.560 --> 14:16.080
ESBOMs need to be defining and naming the piece of software as close as possible.

14:16.080 --> 14:22.280
And software identifiers are one of the schemes that you need in the document in order to

14:22.280 --> 14:28.480
ensure that the piece of software that the ESBOM is describing is clearly identified.

14:28.480 --> 14:35.480
And all of them have their problems, especially CPE for example, it's really complex to get

14:35.480 --> 14:37.160
it right.

14:37.160 --> 14:44.920
And the idea is there's going to be a tool down the stream that it's going to benefit

14:44.920 --> 14:46.280
from that information.

14:46.280 --> 14:54.120
So if you can add it, you're making sure that the ESBOM can work well with those tools.

14:54.120 --> 14:57.000
And this is kind of the idea of that.

14:57.000 --> 15:00.760
So how many packages in the world named log, right?

15:00.760 --> 15:03.120
So, okay, log, but what's log?

15:03.120 --> 15:08.760
There are thousands in every language like operating system packages, libraries named

15:08.760 --> 15:09.760
log.

15:09.760 --> 15:19.720
And if you have like a properly specified PURL, CPE, both that clearly define the piece

15:19.720 --> 15:25.720
of software that the ESBOM is talking about, then it can be better referenced and used

15:25.720 --> 15:28.120
by tools on the stream.

15:28.120 --> 15:33.800
Now the supplier data, this is like a contentious one.

15:33.800 --> 15:41.280
And the reason why I added the supplier data is because as software authors, sometimes

15:41.280 --> 15:46.840
we don't think that it's like an important field.

15:46.840 --> 15:52.240
We simply, I mean, in most large open source projects, we just list like copyright the

15:52.240 --> 15:53.520
project authors, right?

15:53.520 --> 15:56.140
Like the editorial.

15:56.140 --> 16:03.000
But the reality is that if you jump into any of the ESBOM meetings that go on regularly,

16:03.000 --> 16:08.720
you're gonna hear all of the compliance folks like I need a name to sue or I don't know.

16:08.720 --> 16:12.560
It's a different mentality than ours, but people need it.

16:12.560 --> 16:21.120
And in fact, it's one of the requirements from NTIA as the minimum relevance of ESBOM.

16:21.120 --> 16:31.960
And this is a weird field because if you deal in kind of more into security of the documents

16:31.960 --> 16:39.360
that should be generated during the supply chain and the software lifecycle, this information

16:39.360 --> 16:45.760
is kind of, I don't know, not really very useful because it can be forged and you cannot

16:45.760 --> 16:47.280
trust it.

16:47.280 --> 16:55.400
And so just having a name and an email, well, like it serves compliance folks, but to us

16:55.400 --> 17:00.880
it's kind of, well, worthless really for security purposes, right?

17:00.880 --> 17:04.820
But then you start thinking about, well, what's a supplier?

17:04.820 --> 17:07.100
Is it the author, the company direct holder?

17:07.100 --> 17:12.920
Is it the tool that compiled the thing that people who was distributing it?

17:12.920 --> 17:19.080
And so, well, at least ensure that you're providing some kind of information.

17:19.080 --> 17:23.040
And the idea is, know who's selling you your things, right?

17:23.040 --> 17:27.280
Which you buy candy from that guy, probably not.

17:27.280 --> 17:29.560
Yeah, exactly.

17:29.560 --> 17:35.560
Come, give them, get them from us.

17:35.560 --> 17:36.560
Supplier data.

17:36.560 --> 17:37.560
Oh, okay.

17:37.560 --> 17:41.160
I messed up this slide.

17:41.160 --> 17:47.100
So this one was supposed to be integrity data, integrity data to prevent this kind of thing.

17:47.100 --> 17:55.720
So when you, as you heard today also, ESBOM should be properly hashed, like hashing as

17:55.720 --> 18:00.200
much as you can inside of a document when possible, when it makes sense, and especially

18:00.200 --> 18:02.800
when it can be verified.

18:02.800 --> 18:10.520
So the idea is, is this piece of software that I'm naming in the ESBOM the real deal?

18:10.520 --> 18:12.520
Has it been corrupted or not?

18:12.520 --> 18:20.360
But more importantly, having hashes lets you deal the problem of the latest, right?

18:20.360 --> 18:24.720
So sometimes you will not have a version, but you can still reference that software

18:24.720 --> 18:31.760
artifact inside of the ESBOM and other documents like VEX, for example, via the hashes.

18:31.760 --> 18:42.160
So you can think about the versioning system and the software identifiers as links to external

18:42.160 --> 18:50.800
systems outside of the ESBOM, like vulnerability databases, like for example, package repositories.

18:50.800 --> 18:55.620
But internally, everything should be addressed via the hash if possible.

18:55.620 --> 19:02.800
So if I'm telling you this is the vulnerability document for a piece of software, it should

19:02.800 --> 19:07.000
match with the hashes somehow.

19:07.000 --> 19:12.040
In the ADAs, well, you can, once you start content addressing the piece of software in

19:12.040 --> 19:16.760
the ESBOM, you cannot go wrong.

19:16.760 --> 19:22.520
And that's basically what I have.

19:22.520 --> 19:29.200
And so I just wanted to let this open, you know, keep the conversations that are about

19:29.200 --> 19:33.640
to happen about this kind of thing inside of the documents.

19:33.640 --> 19:38.400
And if there are any questions or whatever, happy to take them.

19:38.400 --> 19:46.680
If not, you can reach me as Poerco in most systems and Twitter, whatever.

19:46.680 --> 19:47.680
So thank you.

19:47.680 --> 19:48.680
Question?

19:48.680 --> 19:49.680
Oh.

19:49.680 --> 20:17.120
I was going to ask about the supply and data and how much is that seen as the individual

20:17.120 --> 20:20.120
entity?

20:20.120 --> 20:26.000
Well, I would like to hear the opinions of the supplier that are from other.

20:26.000 --> 20:29.120
So what's basically, what's the role of the supplier data?

20:29.120 --> 20:31.360
So what's the use of that field?

20:31.360 --> 20:32.360
Yeah.

20:32.360 --> 20:34.360
What should be filled in?

20:34.360 --> 20:35.360
Is it an entity?

20:35.360 --> 20:36.360
Yeah.

20:36.360 --> 20:42.360
So should they feel like a person or an entity or a tool?

20:42.360 --> 20:43.360
Yep.

20:43.360 --> 20:50.360
So I have a question about the last ingredient definition, so the integrity.

20:50.360 --> 20:55.720
In your definition, does that also include sizing of the actual asset?

20:55.720 --> 20:56.720
Not really.

20:56.720 --> 20:57.720
Ripping?

20:57.720 --> 20:58.720
No, no.

20:58.720 --> 20:59.720
Yeah.

20:59.720 --> 21:03.640
I was going to go to that question before, but if anybody has insights about how supplier

21:03.640 --> 21:09.120
data is used in the organizations, that was the time to discuss it.

21:09.120 --> 21:10.640
All right.

21:10.640 --> 21:11.640
Yeah.

21:11.640 --> 21:16.520
No, so the way I've seen it required is...

21:16.520 --> 21:19.200
What was the question?

21:19.200 --> 21:20.200
No, no.

21:20.200 --> 21:21.200
This is...

21:21.200 --> 21:22.200
Yeah.

21:22.200 --> 21:23.200
Exactly.

21:23.200 --> 21:24.200
The first one.

21:24.200 --> 21:25.840
So the first one is how is the supplier used?

21:25.840 --> 21:32.760
And the way I've seen it is mostly from procurement people, like asking for that information,

21:32.760 --> 21:34.100
and lawyers.

21:34.100 --> 21:40.240
So that's the model, the two that I've seen asking for the information more.

21:40.240 --> 21:48.200
I'm coming from the security side of HESMOM more, so the compliance is not my strong side,

21:48.200 --> 21:52.160
but that's why I'm suggesting it.

21:52.160 --> 21:53.160
And...

21:53.160 --> 21:54.160
Yeah.

21:54.160 --> 22:05.000
As one data point, the way that we are using supplier data is actually recording who supplied

22:05.000 --> 22:07.000
the software.

22:07.000 --> 22:13.960
So not who wrote it, not who created it or something like that.

22:13.960 --> 22:20.080
If we got it from an upstream distribution repo, we put the upstream distribution repo

22:20.080 --> 22:21.080
in product.

22:21.080 --> 22:27.480
That's, again, recorded that we know, that's the only thing that I know.

22:27.480 --> 22:33.440
And to the other question is, so does the integrity points consider also signing of

22:33.440 --> 22:34.960
the HESMOM?

22:34.960 --> 22:37.760
And yes, but not in this case.

22:37.760 --> 22:46.320
So integrity, like signing of the HESMOM is mostly done outside of the HESMOM.

22:46.320 --> 22:51.880
And that touches on trusting the HESMOM, which is a whole other kind of worms.

22:51.880 --> 22:56.080
But I mean, it is, but not in the contents of the documents.

22:56.080 --> 23:05.640
How can I make sure an HESMOM adheres to these principles?

23:05.640 --> 23:14.640
Is there something like benchmarks or I give it a score of 8.0 from 10?

23:14.640 --> 23:15.640
That's a good HESMOM.

23:15.640 --> 23:16.640
Well, there are tools then.

23:16.640 --> 23:18.520
Yeah, yeah, I repeat the question.

23:18.520 --> 23:20.360
So how can I know...

23:20.360 --> 23:23.280
Sorry, didn't get out of the lot of sleep.

23:23.280 --> 23:29.840
How can I make sure that the HESMOM really complies to these things here?

23:29.840 --> 23:37.040
So there are a couple of tools that do a validation of the HESMOM, like scoring, try to do scoring.

23:37.040 --> 23:44.680
So eBay has a tool called HESMOM Scorecard.

23:44.680 --> 23:51.120
Then there's the NTIA compliance checker from SPDX.

23:51.120 --> 23:56.680
And I'm not sure.

23:56.680 --> 23:57.680
And there's...

23:57.680 --> 23:58.680
I don't know.

23:58.680 --> 24:00.680
Are the ender folks here still?

24:00.680 --> 24:02.080
Not very much.

24:02.080 --> 24:06.640
Okay, so I seem to remember that they were handling some of that as well.

24:06.640 --> 24:09.640
But there are a couple of tools out there.

24:09.640 --> 24:12.080
It's more like a remark, but some...

24:12.080 --> 24:14.920
It's a surprise we didn't mention Open Chain that much.

24:14.920 --> 24:15.920
Open Chain is...

24:15.920 --> 24:24.080
The goal is to trust from the suppliers, so you can trust the HESMOMs from the suppliers.

24:24.080 --> 24:27.280
So, yeah.

24:27.280 --> 24:34.320
What Nico said is that Open Chain has touches on the idea of trusting the HESMOM on the

24:34.320 --> 24:38.280
supplier and those sorts.

24:38.280 --> 24:39.840
I've had an observation.

24:39.840 --> 24:45.560
This is having looked at Python and the metadata that goes with Python packaging is really

24:45.560 --> 24:46.560
inconsistent.

24:46.560 --> 24:49.600
So, how do you spell Apache 2?

24:49.600 --> 24:54.280
How many different ways of putting Apache 2 license is amazing.

24:54.280 --> 24:58.280
And actually between releases, information disappears.

24:58.280 --> 25:05.200
So, this is really a message for the ones in the ecosystems, put as much data in the

25:05.200 --> 25:11.560
ecosystem metadata that you can, because this is going to support...

25:11.560 --> 25:12.560
Yeah, exactly.

25:12.560 --> 25:13.560
Yeah, the comment is...

25:13.560 --> 25:17.960
Because we were looking at a difference and we've got a new release of a package, but

25:17.960 --> 25:19.880
where's the supplier gone?

25:19.880 --> 25:20.880
Right, exactly.

25:20.880 --> 25:25.880
And actually, the question is, do we just use that module now?

25:25.880 --> 25:28.520
Because we don't know where it's come from.

25:28.520 --> 25:32.680
The comment is that in Python, sometimes between releases, information changes or disappears

25:32.680 --> 25:33.680
or whatever.

25:33.680 --> 25:40.480
So, this is actually one of the things that some of us would like to see happening, like

25:40.480 --> 25:48.240
people working on packaging systems, on language ecosystems, to start, if not adding S-bomb

25:48.240 --> 25:53.360
generation straight away in their tooling, at least expose the information so that we,

25:53.360 --> 26:03.040
S-bomb tool makers, can go in and extract them from more trustable sources.

26:03.040 --> 26:04.040
And...

26:04.040 --> 26:05.040
Wait, about two minutes.

26:05.040 --> 26:06.040
Okay.

26:06.040 --> 26:12.240
In regards to hashing, how are you dealing with custom patches when you apply to your

26:12.240 --> 26:13.240
live software?

26:13.240 --> 26:14.240
Can you repeat it?

26:14.240 --> 26:17.240
In regards to hashing, how are you dealing with custom patches when you apply?

26:17.240 --> 26:24.320
So, if you need to patch software you're using, but you can't apply the patch upstream.

26:24.320 --> 26:25.800
In the case of the...

26:25.800 --> 26:28.200
Yeah, just in the case of the distro or...

26:28.200 --> 26:31.280
You can adjust to it in general as well.

26:31.280 --> 26:35.600
Well, yeah, the question is, how do you deal with patch software, right?

26:35.600 --> 26:36.600
When you apply a patch?

26:36.600 --> 26:41.880
If I apply a patch, then it's not upstream.

26:41.880 --> 26:44.600
But I mean, you still have that hash, right?

26:44.600 --> 26:47.040
Or is the question about naming?

26:47.040 --> 26:49.600
What's the best practice, I suppose?

26:49.600 --> 26:56.960
Yeah, so if you're describing a patch artifact, I mean the hash, simply hash the thing and

26:56.960 --> 26:58.860
you can use that down the stream.

26:58.860 --> 27:04.720
The problem comes when you're trying to define, well, I'm using curl, but I applied a few

27:04.720 --> 27:06.480
custom patches myself.

27:06.480 --> 27:07.480
How do you name that?

27:07.480 --> 27:11.080
And that becomes a more complex question.

27:11.080 --> 27:15.440
So internally, as I was saying with the integrity thing, is you can still reference everything

27:15.440 --> 27:16.960
with the hashes, right?

27:16.960 --> 27:22.280
I'm talking about binary, this hash, all down the stream.

27:22.280 --> 27:26.440
But when you want to express it externally, well, I guess that falls into the naming problem

27:26.440 --> 27:29.400
and you have to think about where that thing is going to be used.

27:29.400 --> 27:34.560
So if that is going to be a package, part of a distribution that you're doing, you may

27:34.560 --> 27:41.000
define your own set of package URLs, for example, or if it's not going to be, you can make up

27:41.000 --> 27:47.680
the license, but it falls more into the use case of what you're trying to do with distributing

27:47.680 --> 27:50.400
that budget software.

27:50.400 --> 27:51.400
So that's it.

27:51.400 --> 27:52.400
All right.

27:52.400 --> 27:53.400
Thank you.

27:53.400 --> 28:07.400
Okay, bye.

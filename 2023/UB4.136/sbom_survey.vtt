WEBVTT

00:00.000 --> 00:11.440
All right. Good afternoon, everybody. Thanks for coming to our session.

00:11.440 --> 00:17.280
Yeah, I don't know. It's on?

00:17.280 --> 00:22.120
All right. Okay, so mine, I tried to speak loud so that

00:22.120 --> 00:25.200
the people even in the rows in the back can understand me.

00:25.200 --> 00:27.680
My name is Henrik. That's my colleague, Joseph.

00:27.680 --> 00:33.920
Both of us are publishing and working on open source dependency management,

00:33.920 --> 00:37.040
security topics for a couple of years already.

00:37.040 --> 00:42.080
So yeah, recently we started looking into S-bombs

00:42.080 --> 00:47.560
more maybe compliance and topics that we are not so familiar with.

00:47.560 --> 00:50.840
So we're looking forward to your questions.

00:51.880 --> 00:56.440
All right. So the agenda of our session will be like follows.

00:56.440 --> 01:01.600
I think the first session agenda item can be very quick,

01:01.600 --> 01:04.800
seeing that you already spent like four hours on that topic.

01:04.800 --> 01:09.880
We will then present a small case study where we basically tried to,

01:09.880 --> 01:14.160
or where we ran different S-bomb generators at different points in time

01:14.160 --> 01:19.400
on an open source solution in order to see whether those tools agree

01:19.400 --> 01:23.240
on the S-bombs generated, whether the results produced are comparable,

01:23.240 --> 01:27.880
whether the results change over time and to also pinpoint a couple of

01:27.880 --> 01:30.080
what we believe are deficiencies.

01:30.080 --> 01:36.560
And then Joseph will explain why it is beneficial and helpful to go from

01:36.560 --> 01:40.960
the granularity of entire components to the code level to look at

01:40.960 --> 01:44.280
functions and methods and call graphs.

01:44.680 --> 01:50.440
All right. So that is a software bill of material in the Cyclone DX format,

01:50.440 --> 01:55.080
which is one of the, let's say, prominent standards in this space.

01:55.080 --> 01:57.440
Cyclone DX has a little bit of a security background.

01:57.440 --> 01:59.800
That's why we kind of choose this.

01:59.800 --> 02:03.720
It seemed more natural to our previous works.

02:03.720 --> 02:07.760
At the very top is kind of the S-bomb format and version.

02:07.760 --> 02:13.760
Here in the middle, you have the software product for which the S-bomb is generated.

02:13.760 --> 02:16.640
Here you have the S-bomb generator tool.

02:16.640 --> 02:18.720
We have anonymized those solutions.

02:18.720 --> 02:25.560
We didn't think it is necessary to point out problems in individual open-source solutions,

02:25.560 --> 02:30.040
but we wanted to more raise awareness for the general problem of comparability and so forth.

02:30.040 --> 02:35.200
And then at the bottom here, you have an array of components that the S-bomb generator

02:35.200 --> 02:38.400
found in the software analyzed.

02:38.400 --> 02:40.560
And of course, there will be many.

02:40.560 --> 02:46.640
And I highlighted a couple of fields that we will be looking at in much more detail.

02:46.640 --> 02:53.440
So there is the name, there is a CPE, there is a PERL, a package URL, or a group and a

02:53.440 --> 02:54.440
version.

02:54.440 --> 03:00.760
So these are all different fields belonging to naming schemes in order to describe or

03:00.760 --> 03:03.240
identify the component that was found.

03:03.240 --> 03:08.480
And then they have properties that can be all kind of proprietary properties the S-bomb

03:08.480 --> 03:12.240
generator decided to include.

03:12.240 --> 03:14.240
Why do we need S-bombs?

03:14.240 --> 03:18.840
I think in the interest of time, I just skip this altogether and go to the case study right

03:18.840 --> 03:21.600
away.

03:21.600 --> 03:26.480
The idea of this, the motivation for this came basically by reading through a couple

03:26.480 --> 03:27.800
of documents.

03:27.800 --> 03:32.360
The first, and I've cited them here at the bottom, is a research paper that was done

03:32.360 --> 03:33.360
recently.

03:33.360 --> 03:36.960
It is, I think, a couple of interviews and surveys.

03:36.960 --> 03:41.400
And there were some statements from the survey participants who said that an S-bomb is not

03:41.400 --> 03:45.360
something that is static, that you create at a given point in time and then you assume

03:45.360 --> 03:46.800
it to be stable.

03:46.800 --> 03:51.400
But that is something that is evolving throughout the software development life cycle.

03:51.400 --> 03:58.920
And then the corresponding information is also provided in this guidance from the NTIA,

03:58.920 --> 04:01.280
the minimum elements for a software bill of materials.

04:01.280 --> 04:07.560
On pages six to seven they say you can generate an S-bomb at different points on the sources,

04:07.560 --> 04:10.180
after the build, maybe at the Docker image.

04:10.180 --> 04:14.840
But the S-bomb should actually contain this information when it has been created.

04:14.840 --> 04:18.560
That would be important for the consumer.

04:18.560 --> 04:22.240
So we looked at different S-bomb generators.

04:22.240 --> 04:27.680
And then of course, but in order to do a proper comparison, we need to kind of a software

04:27.680 --> 04:28.680
to be analyzed.

04:28.680 --> 04:31.160
And so I sample software.

04:31.160 --> 04:37.760
We have chosen Eclipse Daddy, which is a solution, a security solution that I've been contributing

04:37.760 --> 04:39.120
to over many years.

04:39.120 --> 04:43.160
The one that I know very well because I thought that would be helpful to understand the quality

04:43.160 --> 04:45.700
of what is generated.

04:45.700 --> 04:50.720
In particular, we look at one of the modules of that solution.

04:50.720 --> 04:55.880
It's a Spring Boot REST service that is developed with Java and Maven.

04:55.880 --> 05:02.240
It will be deployed using a Docker image that is downloadable from Docker Hub.

05:02.240 --> 05:08.000
And the ground truth, which is the information that we will take later on to say whether

05:08.000 --> 05:13.760
the S-bomb generators perform good or bad, is what you see here.

05:13.760 --> 05:17.940
So there are 114 compile time dependencies.

05:17.940 --> 05:22.280
So they are required for compiling the Java sources to runtime dependencies.

05:22.280 --> 05:25.520
They should be present where the production software runs.

05:25.520 --> 05:30.440
There are 41 test dependencies, JUnit, and other stuff.

05:30.440 --> 05:32.880
Good.

05:32.880 --> 05:37.960
Before showing the results, or walking through the results, a little bit of background, because

05:37.960 --> 05:40.200
that is very important.

05:40.200 --> 05:43.960
How do we name those components?

05:43.960 --> 05:49.440
It is important to understand there are context specific component identifiers.

05:49.440 --> 05:51.640
For example, Maven.

05:51.640 --> 05:52.640
Maven coordinates.

05:52.640 --> 05:55.120
This is what is used by the Java developers.

05:55.120 --> 06:00.960
It is consisting of a group identifier, artifact identifier, and a version.

06:00.960 --> 06:05.440
This is typically the GAF of the coordinates of a Maven artifact you would download from

06:05.440 --> 06:06.440
Maven Central.

06:06.440 --> 06:10.680
There are some optional identifier elements.

06:10.680 --> 06:33.440
An example here is O

06:33.440 --> 06:42.160
is affecting a component, CPE 2.3, which is the version of the CPE naming scheme.

06:42.160 --> 06:43.560
The vendor is DOM4J project.

06:43.560 --> 06:47.960
It is not exactly the same name before, a pity.

06:47.960 --> 06:50.400
DOM4J is the product name.

06:50.400 --> 06:54.040
And then, besides, there are universal component identifiers.

06:54.040 --> 06:59.200
One that got a lot of traction in recent years is the Perl package URL.

06:59.200 --> 07:04.840
It has seven elements that I put here.

07:04.840 --> 07:12.840
And using S-bombs in order to use it for understanding whether there are known vulnerabilities, what

07:12.840 --> 07:19.560
is the quality of the projects used, and so forth, requires to map all those names, names

07:19.560 --> 07:23.480
that are given by people somehow.

07:23.480 --> 07:30.200
And that this can go wrong becomes evident by picking one example that I generated later

07:30.200 --> 07:31.520
on.

07:31.520 --> 07:37.400
So this is a copy paste from one of the S-bombs, the cyclone DX S-bombs.

07:37.400 --> 07:44.680
And you see here that the Perl here, this universal component identifier that was put

07:44.680 --> 07:50.040
in by the S-bomb generator, says it's DOM4J.

07:50.040 --> 07:55.280
To bad it doesn't map to all DOM4J, which is the identifier made in central.

07:55.280 --> 07:58.640
So if you want to look up a new version of that component, well, bad luck, you don't

07:58.640 --> 08:01.420
have the right identifier.

08:01.420 --> 08:07.000
If you want to compare this CPE into search for known vulnerabilities, well, it's not

08:07.000 --> 08:08.200
the same identifier.

08:08.200 --> 08:15.420
They found DOM4J, but it's DOM4J project to that.

08:15.420 --> 08:20.680
So the approach we have taken is we selected three open source S-bomb generators, A and

08:20.680 --> 08:23.360
B, generic solutions.

08:23.360 --> 08:30.080
You can basically throw anything at them, a directory, an image, a tarball, whatever.

08:30.080 --> 08:35.600
And then C is a Maven plugin that hooks into Maven's build process.

08:35.600 --> 08:39.420
And we ran those three tools at three different points in time.

08:39.420 --> 08:47.720
After cloning the open source project, after git clone, after creating the Maven package,

08:47.720 --> 08:52.360
after running Maven package to create the self-contained Spring Boot application that

08:52.360 --> 08:57.560
you can run, and after finally on the Docker image.

08:57.560 --> 09:03.660
On the Docker image, we could just run A and B because C is dedicated to be integrated

09:03.660 --> 09:06.200
into the Maven build tool.

09:06.200 --> 09:13.760
And so we collected basically eight different S-bombs from those eight runs.

09:13.760 --> 09:17.440
And the color coding will stay the same for the Venn diagrams I will be showing on the

09:17.440 --> 09:19.440
next slides.

09:19.440 --> 09:21.280
And then we did three things.

09:21.280 --> 09:29.120
We computed precision and recall of those tools, which means we compared what they found

09:29.120 --> 09:31.380
with the ground truth.

09:31.380 --> 09:36.280
And so precision says basically how many false positives are there in.

09:36.280 --> 09:41.520
False positives is the thing tells me there is a component which I know is not there,

09:41.520 --> 09:43.480
not so useful.

09:43.480 --> 09:49.760
We call this for measuring false negatives, which is the tool didn't generate a component

09:49.760 --> 09:51.840
even though it is there.

09:51.840 --> 09:55.320
Also not so helpful, especially for vulnerable dependencies.

09:55.320 --> 10:04.680
And then with those S-bombs, so this is kind of the quality, the accuracy of the tools

10:04.680 --> 10:08.060
judged independently against the ground truth.

10:08.060 --> 10:11.980
And then we created a couple of Venn diagrams to see how much do they actually agree.

10:11.980 --> 10:19.480
So how much, what is the overlap of S-bomb A and B and C in those different times?

10:19.480 --> 10:22.160
And then we looked at some additional properties.

10:22.160 --> 10:33.680
All right, so this is the first, let's say, result running the three tools right after

10:33.680 --> 10:35.680
having cloned the open source project.

10:35.680 --> 10:40.600
And let me start from the bottom of the slide with the tool C, which is easy, because that

10:40.600 --> 10:42.320
is actually perfect.

10:42.320 --> 10:47.380
That integrated in the Maven dependency lifecycle in this build tool.

10:47.380 --> 10:51.680
Perfect precision, perfect recall, no false positives, no false negatives, right?

10:51.680 --> 10:53.560
Very good.

10:53.560 --> 10:59.800
And it has a couple of additional properties such as SHA-1, SHA-256, SIX, digest, license

10:59.800 --> 11:03.560
information descriptions, a lot of useful stuff.

11:03.560 --> 11:09.120
Now then let's look at tool A. You see the blue bubble is much smaller because it basically

11:09.120 --> 11:13.500
failed identifying many, many, many components.

11:13.500 --> 11:18.780
And the reason I think, I mean, I need to speculate a little bit how the internals work,

11:18.780 --> 11:23.840
but the reason I guess is that it looked at the POM.xml, which is where the developers

11:23.840 --> 11:27.420
declare dependencies, but it didn't resolve any dependencies.

11:27.420 --> 11:30.660
So meaning it doesn't build a complete dependency tree.

11:30.660 --> 11:34.860
So it lacked a lot of transitive dependencies on top of that.

11:34.860 --> 11:39.080
For the direct ones that are in the POM, it didn't have any version information because

11:39.080 --> 11:40.840
that was specified elsewhere.

11:40.840 --> 11:46.200
So we have components like with this PERL org-spring framework boot, spring boot starter

11:46.200 --> 11:51.180
without a version.

11:51.180 --> 11:55.560
They included test dependencies, which was also interesting.

11:55.560 --> 11:58.840
The other tools didn't include test dependencies.

11:58.840 --> 12:02.680
But the funny thing is they included it, but if you looked at the S-bomb, you wouldn't

12:02.680 --> 12:04.200
know that it's a test dependency.

12:04.200 --> 12:08.240
You can't tell, is this really something only used for developing or is it really in

12:08.240 --> 12:10.920
my production system?

12:10.920 --> 12:14.660
Also not so helpful.

12:14.660 --> 12:20.040
And they had a couple of CPE combinations supposedly for mapping known vulnerabilities.

12:20.040 --> 12:24.240
I think I need to speed up a little bit, right?

12:24.240 --> 12:29.880
Now this is this Venn diagram I was mentioning.

12:29.880 --> 12:32.680
So here, some of the Venn diagram I didn't explain.

12:32.680 --> 12:35.640
So in fact, this is the overlap of those PERLs.

12:35.640 --> 12:38.880
So we looked at those PERLs and tried, do they match to each other?

12:38.880 --> 12:45.440
And you see that to see even though they had all perfectly identified, tool B had a good

12:45.440 --> 12:48.400
number, but they still don't overlap.

12:48.400 --> 12:56.040
And this is because those PERLs contain additional elements, qualifiers, like the type, it's

12:56.040 --> 13:03.120
a Java archive, or for operating system components, could be the target platform, which makes

13:03.120 --> 13:04.760
they don't overlap.

13:04.760 --> 13:10.000
Now if we only look at one of the naming elements, then the overlap is much bigger because the

13:10.000 --> 13:15.640
fact that A is lacking versions, B has wrong version identifiers, and the fact that C adds

13:15.640 --> 13:20.040
additional details, it all vanishes and looks like it's all converging.

13:20.040 --> 13:24.280
But it is again important to understand the name alone is not so useful for looking up

13:24.280 --> 13:27.240
vulnerabilities on new versions.

13:27.240 --> 13:29.280
Good.

13:29.280 --> 13:32.460
So let me hurry up a little bit.

13:32.460 --> 13:35.800
This is the same thing run after Maven package.

13:35.800 --> 13:38.480
Tool A improved.

13:38.480 --> 13:43.880
They were finding more, but still the precision and recall are not as good as for the other

13:43.880 --> 13:44.880
solutions.

13:44.880 --> 13:46.240
The other two tools didn't change at all.

13:46.240 --> 13:51.640
So for them it didn't make a difference that Maven package ran or not.

13:51.640 --> 13:58.300
Here again is the difference in terms of PERLs, which is resulting in the lack of overlap.

13:58.300 --> 14:05.080
Here this is the same component, tool A has it as DOM4J, DOM4J, tool B has it at ORG DOM4J,

14:05.080 --> 14:11.680
DOM4J, and tool C has it at ORG DOM4J, DOM4J, and type equal to jar.

14:11.680 --> 14:17.360
So they added this additional information which made that they don't overlap.

14:17.360 --> 14:19.360
Good.

14:19.360 --> 14:28.280
And then last, after running, now we ran it also on the Docker image, the first two tools.

14:28.280 --> 14:37.440
And maybe one finding here is what we observed in terms of lack of overlap on Maven components

14:37.440 --> 14:40.200
also happened for operating system components.

14:40.200 --> 14:44.760
So here we have DBNO2, the package dash.

14:44.760 --> 14:50.520
But again, one tool added a little bit of more information, the target architecture.

14:50.520 --> 14:54.640
For the consumer of the bomb, who knows whether this is important information in terms of

14:54.640 --> 14:55.640
security?

14:55.640 --> 14:59.800
I don't know.

14:59.800 --> 15:07.040
And then again, if you only look at the name, the overlap is much bigger.

15:07.040 --> 15:13.880
But even though it looks like they only disagree on very few components, too bad for tool B,

15:13.880 --> 15:16.320
I think, had a big miss.

15:16.320 --> 15:18.400
It was lacking the complete Java runtime.

15:18.400 --> 15:23.040
And those people being in security, they know how many security issues there are in the

15:23.040 --> 15:25.720
Java runtime.

15:25.720 --> 15:29.000
Good lessons learned.

15:29.000 --> 15:32.560
The reasons for getting different S bombs is a big one.

15:32.560 --> 15:37.600
Tools integrated into the dependency manager seem to work much better, at least on the

15:37.600 --> 15:44.960
result of that small case study, versus generic tools that are supposed to judge the bill

15:44.960 --> 15:46.600
of material from the outside.

15:46.600 --> 15:49.000
They will need to apply some heuristics.

15:49.000 --> 15:55.480
And they don't have the same level of detailed knowledge about the dependency graph.

15:55.480 --> 15:59.040
Production versus test components are sometimes included, sometimes not.

15:59.040 --> 16:01.080
There are different defaults.

16:01.080 --> 16:05.480
And in the S bomb generated, you don't see the difference any longer.

16:05.480 --> 16:08.920
And of course, there's also this difference depending on when you run it.

16:08.920 --> 16:12.520
There will be different components included.

16:12.520 --> 16:17.200
There is a standard format, but the tools include different fields.

16:17.200 --> 16:19.200
Some include license and digests.

16:19.200 --> 16:20.560
Others not.

16:20.560 --> 16:27.720
And even if they all include a Perl, Perl itself is a complex naming scheme with seven elements.

16:27.720 --> 16:32.440
And the tools decide differently on what to include in a Perl.

16:32.440 --> 16:36.240
And other reasons that we didn't discuss here, it also depends on the time of the dependency

16:36.240 --> 16:40.960
resolution, in case your version ranges.

16:40.960 --> 16:45.520
Or if some tools also generate platform-specific S bombs.

16:45.520 --> 16:52.360
So if you create an S bomb on a Mac and on a Windows machine, maybe with different hardware

16:52.360 --> 16:59.400
architectures beneath, you would have different S bombs.

16:59.400 --> 17:03.840
And I think I don't have so much time to look into this.

17:03.840 --> 17:11.260
What I wanted to say, identifying vulnerabilities only on names is rather flawed because names

17:11.260 --> 17:13.440
keep on changing.

17:13.440 --> 17:14.440
Projects are renamed.

17:14.440 --> 17:15.440
There are rebundles.

17:15.440 --> 17:16.680
There are forks.

17:16.680 --> 17:23.880
And so which is why we advocate for enriching such information with call graph information

17:23.880 --> 17:25.240
and code-level information.

17:25.240 --> 17:27.080
And with that, I hand over to Joseph.

17:27.080 --> 17:30.520
Yeah, thank you, Andrew.

17:30.520 --> 17:32.360
So this will be a bit short version.

17:32.360 --> 17:34.200
We're running out of time here.

17:34.200 --> 17:37.280
I guess I'll just hold it.

17:37.280 --> 17:38.280
All right.

17:38.280 --> 17:41.360
So why do we want to go for more like a call graph view?

17:41.360 --> 17:48.040
So with the current S-bomb format, so in general with dependency trees, if you view from that

17:48.040 --> 17:54.840
perspective, we typically have the application and the list of dependencies of how it is dependent,

17:54.840 --> 17:55.840
right?

17:55.840 --> 18:02.400
If you said try to think from a call graph perspective of looking into the source code,

18:02.400 --> 18:04.560
you could have something like this instead.

18:04.560 --> 18:10.600
So if you see, for example, like those small sort of like almost like LEGO pieces, if each

18:10.600 --> 18:18.280
of them are function calls from like the application to the API, we can see, for example, at lib4

18:18.280 --> 18:23.080
and if lib4 would have a vulnerability or some other type of problem, we see that there

18:23.080 --> 18:30.200
are actually no function calls to it from the application down to lib4 via lib2.

18:30.200 --> 18:37.080
So I mean, the interesting part here is that if you start looking from like a code perspective,

18:37.080 --> 18:46.000
we can quickly see whether we can pinpoint or like see how we're utilizing source code.

18:46.000 --> 18:53.400
And another interesting part is that when so I look for example into the Rust ecosystem,

18:53.400 --> 18:59.560
so if you have a couple of dependencies, so, for example, map.lit here, if you run like

18:59.560 --> 19:06.560
a grep over here, you can see that only like this one is let's say like, I mean, imported,

19:06.560 --> 19:11.300
but we don't see any usage of it in the package.

19:11.300 --> 19:15.440
So this is like a case where there's no code reuse.

19:15.440 --> 19:20.240
And I was generally like interested to know like in the Rust ecosystem to see like how

19:20.240 --> 19:26.400
we are like doing, like how many dependencies are we actually calling or not calling in

19:26.400 --> 19:28.520
general.

19:28.520 --> 19:34.560
And when I did the study and looked into like how many dependencies are declared and resolved

19:34.560 --> 19:42.920
versus how many are actually being reused in the code, I found that for using only package

19:42.920 --> 19:48.600
information, it would, for example, report around 17 dependencies.

19:48.600 --> 19:52.800
Whereas in the case when you looked into the like through pull graph information, we found

19:52.800 --> 19:55.720
that only six dependencies are used.

19:55.720 --> 20:02.240
And that was quite interesting to know why there was such a big difference.

20:02.240 --> 20:07.400
And the reason why there is such a big difference is that if you look into this example over

20:07.400 --> 20:15.360
here, we see that main calls foo and then from app to lib1, foo calls bar.

20:15.360 --> 20:21.760
And then further down, we see that from bar it calls to intern in lib2.

20:21.760 --> 20:26.000
But then we see that there are actually no calls from lib2 to lib3.

20:26.000 --> 20:33.760
And this shows that what is quite important to think about context in general, because

20:33.760 --> 20:41.760
depending on how app is using its direct dependency, it also directly impacts what transitive dependencies

20:41.760 --> 20:43.520
are also being called.

20:43.520 --> 20:47.920
And the assumption that we usually have when we are building an S-form or we are looking

20:47.920 --> 20:54.520
into a dependency tree is that we are assuming that all APIs of direct dependencies are being

20:54.520 --> 20:55.960
utilized.

20:55.960 --> 21:00.120
And then we are also assuming that all APIs of transitive dependencies are being used

21:00.120 --> 21:01.280
as well.

21:01.280 --> 21:10.800
So we need to also start thinking a bit about what kind of context is being used in general.

21:10.800 --> 21:16.520
And so a little bit what would be the lessons here with trying to integrate something like

21:16.520 --> 21:22.920
call graphs or other levels apart from just using package information is that if you start

21:22.920 --> 21:28.120
having information around source code, we can directly try to pinpoint and understand,

21:28.120 --> 21:33.400
for example, if there is a vulnerability in one function, we can see that, hey, okay,

21:33.400 --> 21:39.880
is being either quite utilized in my source code or not utilized at all.

21:39.880 --> 21:46.200
And another thing, so this is a problem that we also see as well, that we might declare

21:46.200 --> 21:51.760
dependencies on 20 components where you get an S-form from, like, a vendor or someone

21:51.760 --> 21:52.760
else.

21:52.760 --> 21:57.360
They have five different components, but which one is the most critically used one in that

21:57.360 --> 21:58.360
project?

21:58.360 --> 21:59.360
That's also not very clear.

21:59.360 --> 22:06.440
And if you know, for example, usage of APIs, you can kind of get an idea around that.

22:06.440 --> 22:13.880
And this was also a little bit the second point that I was, like, highlighting on that

22:13.880 --> 22:19.480
we need a few more layers of information that serve different uses of S-form.

22:19.480 --> 22:25.160
For developers, if I have an access to S-form, I would rather not look into metadata information.

22:25.160 --> 22:30.520
I want to look into cold traces and cold information in general.

22:30.520 --> 22:35.320
Whereas for maybe security management people or other layers, they probably don't want

22:35.320 --> 22:36.600
to look into the source code.

22:36.600 --> 22:43.800
They rather want to look to get an overview of seeing which packages are being used rather

22:43.800 --> 22:48.280
than the source code.

22:48.280 --> 22:51.880
And so this sort of wraps up our talk.

22:51.880 --> 22:56.280
Also we have, like, a couple of takeaways here.

22:56.280 --> 23:03.360
And we see that going towards having some type of standard around S-form formats is

23:03.360 --> 23:09.320
being necessary, but not fully sufficient.

23:09.320 --> 23:14.280
Based on the previous slides, we need a bit more context so that we can have better actionable

23:14.280 --> 23:15.840
insights.

23:15.840 --> 23:21.200
One way of doing that could be, for example, including cold graph information.

23:21.200 --> 23:26.520
As a consumer of S-form, it is very difficult to verify the correctness of them.

23:26.520 --> 23:31.360
Because as Henry was showing earlier, if you are using different tools and we are getting

23:31.360 --> 23:34.080
different results, which one is the correct one?

23:34.080 --> 23:41.600
And how could we even validate that they are correct in what they are doing?

23:41.600 --> 23:48.000
And the last point that is something that both me and Henry think is extremely important

23:48.000 --> 23:57.240
is that we need to create some form of independent S-form benchmark where, like, different S-form

23:57.240 --> 24:05.000
generators or others could evaluate on, like, how accurate the generated S-form are against

24:05.000 --> 24:12.880
a set of vetted or, I mean, manually validated projects in general.

24:12.880 --> 24:14.880
This concludes our talk.

24:14.880 --> 24:19.640
We are happy to take questions.

24:19.640 --> 24:22.640
Yeah.

24:22.640 --> 24:52.440
It shows Java and that is an ecosystem.

24:52.440 --> 24:58.640
You can probably take it.

24:58.640 --> 25:06.320
The question is how would we do this cold graph analysis for C languages?

25:06.320 --> 25:12.200
And that, of course, is a very different game and I don't think there is an easy, it will

25:12.200 --> 25:14.320
just not be possible, to be honest.

25:14.320 --> 25:19.120
So because with all the cold graph generator, you don't agree?

25:19.120 --> 25:22.840
I don't agree.

25:22.840 --> 25:27.480
We need to do this for safety.

25:27.480 --> 25:35.520
Building a cold graph for C code is more difficult than it is for languages like Java and Python.

25:35.520 --> 25:41.000
And I think the, so maybe the amount of information that is contained in such cold graphs, this

25:41.000 --> 25:48.960
is a more accurate description, is less or, let's say, less helpful for taking any actions

25:48.960 --> 25:51.040
or it's less actionable.

25:51.040 --> 25:55.800
What we were using this originally for those cold graphs where it's for reachability of

25:55.800 --> 25:56.800
vulnerable methods.

25:56.800 --> 26:00.680
So the idea was, okay, there is method ABC affected by log4j.

26:00.680 --> 26:04.120
Is this really cold built from, in my application context?

26:04.120 --> 26:08.600
But this required kind of, you could map the source code where the vulnerable function

26:08.600 --> 26:14.760
is identified to what is in the byte code where this identifier is basically the same.

26:14.760 --> 26:19.600
So the cold graph generated from byte code could be used for this purpose.

26:19.600 --> 26:24.160
And I don't think this is possible in at least this application in C.

26:24.160 --> 26:40.040
We have another time.

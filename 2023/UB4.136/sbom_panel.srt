1
0:00:00.000 --> 0:00:22.680
So this session is a panel discussion by four or three people.

2
0:00:22.680 --> 0:00:26.160
And the basic idea that we're going to be discussing is the

3
0:00:26.160 --> 0:00:27.880
whole idea always bonds, right?

4
0:00:27.880 --> 0:00:33.520
Their usefulness, caveats of using them, and all these

5
0:00:33.520 --> 0:00:35.080
wonderful things.

6
0:00:35.080 --> 0:00:38.760
The rest of the day, everybody was talking about these

7
0:00:38.760 --> 0:00:43.560
bonds as like something that has to be there, and we all

8
0:00:43.560 --> 0:00:47.240
know what information has to be there.

9
0:00:47.240 --> 0:00:50.680
But maybe this is not so obvious to anyone, and the

10
0:00:50.680 --> 0:00:54.920
whole idea is to discuss the idea of these bonds.

11
0:00:54.920 --> 0:00:58.080
So we have, for the moment, three panelists.

12
0:00:58.080 --> 0:01:01.720
And the format will be that they will be doing a very

13
0:01:01.720 --> 0:01:09.680
short introduction of the problem statement, if you

14
0:01:09.680 --> 0:01:10.920
want, right.

15
0:01:10.920 --> 0:01:16.160
And then after these three short introductions, we'll go

16
0:01:16.160 --> 0:01:20.600
into more discussions, and we obviously will value audience

17
0:01:20.600 --> 0:01:21.880
participation.

18
0:01:21.880 --> 0:01:27.280
So first up.

19
0:01:27.280 --> 0:01:28.520
Right.

20
0:01:36.200 --> 0:01:38.560
Oh, right.

21
0:01:38.560 --> 0:01:41.080
OK, afternoon.

22
0:01:41.080 --> 0:01:43.840
My name's Anthony Harrison.

23
0:01:43.840 --> 0:01:46.680
I used to work for a very large system integrator, so the

24
0:01:46.680 --> 0:01:50.640
work on functional safety was very close at heart.

25
0:01:50.640 --> 0:01:53.200
And certainly they got things like the Siemens team as well,

26
0:01:53.200 --> 0:01:55.240
very similar to the sort of things I used to have been

27
0:01:55.240 --> 0:01:58.600
involved in for many years.

28
0:01:58.600 --> 0:02:01.800
I retired a few weeks, a few months ago.

29
0:02:01.800 --> 0:02:04.680
But before I left, I was trying to introduce S-bombs

30
0:02:04.680 --> 0:02:06.840
into my organization.

31
0:02:06.840 --> 0:02:11.320
And it was following very much on from the log4j, need,

32
0:02:11.320 --> 0:02:14.440
where was the components, which systems were affected,

33
0:02:14.440 --> 0:02:18.360
which customers needed to be informed, and where was our

34
0:02:18.360 --> 0:02:21.520
liability, very much from a risk perspective.

35
0:02:21.520 --> 0:02:26.160
So since I've retired, I've been writing Python tools.

36
0:02:26.160 --> 0:02:28.240
So if you want to talk about me about some of the Python

37
0:02:28.240 --> 0:02:30.120
tools I've been doing, because it's been quite interesting,

38
0:02:30.120 --> 0:02:32.040
have a chat with me afterwards.

39
0:02:32.040 --> 0:02:39.760
But to sort of set the scene, I think we've got four types

40
0:02:39.760 --> 0:02:42.000
of users.

41
0:02:42.000 --> 0:02:47.000
And it picks up on what Adolfo was saying about who's a

42
0:02:47.000 --> 0:02:53.280
supplier, is a supplier a developer, is it, I've put the

43
0:02:53.280 --> 0:02:55.240
word supplier in there, but basically someone who

44
0:02:55.240 --> 0:02:56.520
packages things together.

45
0:02:56.520 --> 0:02:58.680
It might be an embedded solution.

46
0:02:58.680 --> 0:02:59.720
It might be a red hat.

47
0:02:59.720 --> 0:03:04.000
It might be someone else.

48
0:03:04.000 --> 0:03:05.880
And then you've got your integrators, which is like

49
0:03:05.880 --> 0:03:09.760
your Siemens, people who are selling solutions to an end

50
0:03:09.760 --> 0:03:12.920
user who's going to use it.

51
0:03:12.920 --> 0:03:16.480
And I believe that if you are a producer of S-bombs, you

52
0:03:16.480 --> 0:03:20.360
also should be a consumer of S-bombs, first and foremost,

53
0:03:20.360 --> 0:03:23.440
because there should be value to you in what you are

54
0:03:23.440 --> 0:03:26.400
producing, and you need to know where your

55
0:03:26.400 --> 0:03:29.160
vulnerabilities are, whether you're compliant with your

56
0:03:29.160 --> 0:03:32.880
licenses, as we've had lots of discussion about, but also

57
0:03:32.880 --> 0:03:34.920
where are things changing?

58
0:03:34.920 --> 0:03:36.960
Particularly, do you know those changes?

59
0:03:36.960 --> 0:03:41.480
Are those changing happening under your control or not?

60
0:03:41.480 --> 0:03:44.320
And this comes into the ecosystems, things happening

61
0:03:44.320 --> 0:03:47.480
outside, you may even be repositories, et cetera.

62
0:03:47.480 --> 0:03:50.880
So the first thing is, I think everybody who's a

63
0:03:50.880 --> 0:03:53.880
consumer, everyone who's a generator, should also be

64
0:03:53.880 --> 0:03:54.400
consuming.

65
0:03:54.400 --> 0:03:56.960
So if you've seen some of the questions I've asking this

66
0:03:56.960 --> 0:03:59.640
morning was when the Octo guys were saying they're

67
0:03:59.640 --> 0:04:04.120
generating an S-bdx, S-bomb, are they actually using it?

68
0:04:04.120 --> 0:04:07.720
I think the answer is most definitely yes, you should be.

69
0:04:07.720 --> 0:04:10.400
And then what are the sort of things you should be using it

70
0:04:10.400 --> 0:04:11.200
for?

71
0:04:11.200 --> 0:04:14.120
We've heard a lot about vulnerability management.

72
0:04:14.120 --> 0:04:17.480
On the basis, that's heavily dependent on the quality of

73
0:04:17.480 --> 0:04:18.200
US-bombs.

74
0:04:18.200 --> 0:04:22.360
Have you got your components uniquely identified in a way

75
0:04:22.360 --> 0:04:25.520
that it can be found consistently?

76
0:04:25.520 --> 0:04:29.440
Secondly, looking at license management, again, are we

77
0:04:29.440 --> 0:04:31.520
consistent?

78
0:04:31.520 --> 0:04:35.600
But thirdly, looking at the change management, are

79
0:04:35.600 --> 0:04:37.800
versions of packages changing?

80
0:04:37.800 --> 0:04:39.280
Are licenses changing?

81
0:04:39.280 --> 0:04:42.560
I was turning to Kate on an open source project I'm

82
0:04:42.560 --> 0:04:45.520
involved in, we generate an S-bomb every week, and we do a

83
0:04:45.520 --> 0:04:49.520
build, and we are seeing components changing versions,

84
0:04:49.520 --> 0:04:53.120
and the metadata is changing with those versions.

85
0:04:53.120 --> 0:04:55.280
Sometimes it's getting worse.

86
0:04:55.280 --> 0:04:58.160
So why have we lost the name of the supplier or the

87
0:04:58.160 --> 0:04:59.880
developer?

88
0:04:59.880 --> 0:05:01.600
And fourthly, I think you should be using it for

89
0:05:01.600 --> 0:05:03.000
solution integrity.

90
0:05:03.000 --> 0:05:05.440
Have you built what you said you've gone to design?

91
0:05:05.440 --> 0:05:10.240
So we're picking up on the design S-bomb that Nico was

92
0:05:10.240 --> 0:05:11.960
talking about from the safety.

93
0:05:11.960 --> 0:05:14.640
I think that would be really good to actually use the S-bombs

94
0:05:14.640 --> 0:05:16.400
as part of a solution integrity.

95
0:05:16.400 --> 0:05:18.120
Have you built what you said you were going to build?

96
0:05:18.120 --> 0:05:19.960
We saw a lot of that things with the checksums from the

97
0:05:19.960 --> 0:05:22.120
Octo guys.

98
0:05:22.120 --> 0:05:25.480
Have we got end of life components?

99
0:05:25.480 --> 0:05:28.280
Are we planning for removing those end of life

100
0:05:28.280 --> 0:05:30.280
components, obsolete components?

101
0:05:30.280 --> 0:05:32.880
And are we seeing the impact of those changes on the

102
0:05:32.880 --> 0:05:38.640
solution comes back onto the engineering lifecycle?

103
0:05:38.640 --> 0:05:42.360
So I think all of it is supporting risk.

104
0:05:42.360 --> 0:05:45.400
So ultimately, this is all about risk management.

105
0:05:45.400 --> 0:05:49.200
And hopefully, S-bomb and all these are helping you make

106
0:05:49.200 --> 0:05:50.440
effective decisions.

107
0:05:53.640 --> 0:05:56.480
Now I'll shut up now.

108
0:05:56.480 --> 0:06:00.280
But the thing just to try and just shape things for

109
0:06:00.280 --> 0:06:01.520
discussion.

110
0:06:01.520 --> 0:06:03.800
All right.

111
0:06:03.800 --> 0:06:05.120
Thanks.

112
0:06:05.120 --> 0:06:07.520
My name's Paul Noveris.

113
0:06:07.520 --> 0:06:10.800
I'm a solutions engineer for a company called Anchor.

114
0:06:10.800 --> 0:06:15.800
We produce a couple of open source projects that A, can

115
0:06:15.800 --> 0:06:19.680
produce S-bombs in some cases, do vulnerability checks

116
0:06:19.680 --> 0:06:22.440
against them so you can look up SIFT and GRIPE.

117
0:06:22.440 --> 0:06:24.160
I'm not going to talk specifically about any

118
0:06:24.160 --> 0:06:25.560
particular project.

119
0:06:25.560 --> 0:06:27.120
I'm going to talk about the S-bombs.

120
0:06:27.120 --> 0:06:29.320
I'm going to talk about the S-bombs.

121
0:06:29.320 --> 0:06:32.120
I'm not going to talk specifically about any

122
0:06:32.120 --> 0:06:32.840
particular projects here.

123
0:06:32.840 --> 0:06:38.720
So just to hit on the topic of the panel, I'm going to just

124
0:06:38.720 --> 0:06:40.680
jump into a couple of things.

125
0:06:40.680 --> 0:06:44.200
Oh, well, what I do there, I'm out in the field.

126
0:06:44.200 --> 0:06:46.640
So I am a solutions architect.

127
0:06:46.640 --> 0:06:51.600
I'm working directly with the end users a lot of the times.

128
0:06:51.600 --> 0:06:55.280
So most of my contact is with people who are on the

129
0:06:55.280 --> 0:06:57.480
beginning of the learning curve.

130
0:06:57.480 --> 0:07:00.280
They may not even know what an S-bomb is the first time I

131
0:07:00.280 --> 0:07:03.160
talked to them, but they've been given

132
0:07:03.160 --> 0:07:04.320
marching orders.

133
0:07:04.320 --> 0:07:10.600
So it spans a pretty wide range.

134
0:07:10.600 --> 0:07:14.680
So as far as content, the biggest thing for me is that

135
0:07:14.680 --> 0:07:18.680
the S-bomb, and this seems to be somewhat of a

136
0:07:18.680 --> 0:07:20.960
controversial statement sometimes, but the S-bomb

137
0:07:20.960 --> 0:07:24.400
needs to be seen as a objective document that only

138
0:07:24.400 --> 0:07:27.200
has factual information in it.

139
0:07:27.200 --> 0:07:30.440
And does not have judgments in it.

140
0:07:30.440 --> 0:07:34.600
Those things are important, but should be separated out a

141
0:07:34.600 --> 0:07:37.880
lot of the times.

142
0:07:37.880 --> 0:07:40.040
A lot of people probably haven't been in here all day,

143
0:07:40.040 --> 0:07:43.160
but there have been off and on comments about should we

144
0:07:43.160 --> 0:07:47.520
include CVEs in an S-bomb.

145
0:07:47.520 --> 0:07:49.520
My opinion is probably not because those are going to

146
0:07:49.520 --> 0:07:55.440
change more than the software that the S-bomb describes.

147
0:07:55.440 --> 0:07:59.760
Obviously, if you rebuild the piece of software, then you

148
0:07:59.760 --> 0:08:01.000
would want to build a new S-bomb.

149
0:08:01.000 --> 0:08:04.320
But the S-bomb should be static as long as the software

150
0:08:04.320 --> 0:08:05.920
it's describing is static.

151
0:08:05.920 --> 0:08:10.160
So in the case of a Docker image, we know when that

152
0:08:10.160 --> 0:08:14.200
changes because the image digest would change.

153
0:08:14.200 --> 0:08:15.640
We could trigger a new build.

154
0:08:15.640 --> 0:08:18.700
But we shouldn't necessarily be rebuilding those S-bombs

155
0:08:18.700 --> 0:08:20.880
continually if there's nothing new there.

156
0:08:20.880 --> 0:08:24.200
Now, that ignores things like maybe our scanner has gotten

157
0:08:24.200 --> 0:08:26.600
better and can detect more things, obviously.

158
0:08:26.600 --> 0:08:30.880
That might be an exception to that kind of rule.

159
0:08:30.880 --> 0:08:35.320
The other thing, just as far as content goes, the first

160
0:08:35.320 --> 0:08:39.600
thing we mentioned today, the specs, whether it's SPDX,

161
0:08:39.600 --> 0:08:42.960
Cyclone DX, are extremely loose.

162
0:08:42.960 --> 0:08:46.000
You can have a valid S-bomb that doesn't actually have

163
0:08:46.000 --> 0:08:47.760
enough information to be useful for your

164
0:08:47.760 --> 0:08:49.000
particular use case.

165
0:08:49.000 --> 0:08:52.760
And what that minimum amount of useful information is might be

166
0:08:52.760 --> 0:08:55.360
different depending on the use case.

167
0:08:55.360 --> 0:08:58.160
So there's just something to keep in mind.

168
0:08:58.160 --> 0:09:01.880
The other thing that's come up again and again today, the

169
0:09:01.880 --> 0:09:04.260
quality of the S-bomb is going to be really dependent on

170
0:09:04.260 --> 0:09:05.720
the tooling.

171
0:09:05.720 --> 0:09:07.920
There's no way to do these things without

172
0:09:07.920 --> 0:09:10.040
automation at scale.

173
0:09:10.040 --> 0:09:12.400
It's just too difficult to keep up with.

174
0:09:12.400 --> 0:09:14.920
The tooling is improving, but still a

175
0:09:14.920 --> 0:09:16.160
long way to go, I think.

176
0:09:16.160 --> 0:09:25.960
So usefulness, the main thing here for me is the S-bomb is

177
0:09:25.960 --> 0:09:28.880
useful because it's going to make all the other aspects of

178
0:09:28.880 --> 0:09:31.920
supply chain security better.

179
0:09:31.920 --> 0:09:34.920
So one, what's in the software?

180
0:09:34.920 --> 0:09:35.800
That's the S-bomb.

181
0:09:35.800 --> 0:09:38.040
It's kind of foundational to all the other aspects.

182
0:09:38.040 --> 0:09:42.720
Two would be things like, is the software safe to use?

183
0:09:42.720 --> 0:09:44.360
Does it have vulnerabilities?

184
0:09:44.360 --> 0:09:46.120
What are those vulnerabilities?

185
0:09:46.120 --> 0:09:48.080
What is my license?

186
0:09:48.080 --> 0:09:51.800
Am I at risk for some kind of compliance issue there?

187
0:09:51.800 --> 0:09:54.480
Those kind of safety issues, whether you, I don't want to

188
0:09:54.480 --> 0:09:56.320
use that term after seeing the

189
0:09:56.320 --> 0:09:59.880
operational safety discussion.

190
0:09:59.880 --> 0:10:03.760
The other thing, provenance, where is this coming from?

191
0:10:03.760 --> 0:10:07.240
If you know what's in that software, having that

192
0:10:07.240 --> 0:10:10.280
assurance of where it comes from and what's in there

193
0:10:10.280 --> 0:10:13.200
together is much more powerful.

194
0:10:13.200 --> 0:10:16.120
And then things like reproducibility.

195
0:10:16.120 --> 0:10:18.920
It's really esoteric, very difficult to actually achieve

196
0:10:18.920 --> 0:10:21.200
in practice.

197
0:10:21.200 --> 0:10:24.400
But if you have an S-bomb, a high quality S-bomb, it can be

198
0:10:24.400 --> 0:10:26.840
effectively a recipe towards that.

199
0:10:26.840 --> 0:10:29.960
And that can also help you prove some of the other things

200
0:10:29.960 --> 0:10:32.200
that you've seen or we've been talking about.

201
0:10:35.120 --> 0:10:37.480
A lot of this is difficult, though.

202
0:10:37.480 --> 0:10:39.600
We've seen a lot of things about opaque artifacts and

203
0:10:39.600 --> 0:10:43.600
things, the difficulty of actually scanning at build time,

204
0:10:43.600 --> 0:10:48.000
which may produce a higher quality S-bomb, but at a lot

205
0:10:48.000 --> 0:10:50.800
of costs, performance and other things.

206
0:10:50.800 --> 0:10:54.960
So that kind of leads us into the caveats.

207
0:10:54.960 --> 0:10:59.480
The main thing here is to keep in mind that our imagined

208
0:10:59.480 --> 0:11:04.640
state of how we want things to be and the actual reality are

209
0:11:04.640 --> 0:11:07.240
basically not the same at all.

210
0:11:07.240 --> 0:11:08.840
We'll try to move towards that.

211
0:11:08.840 --> 0:11:10.080
We're on a journey up the mountain,

212
0:11:10.080 --> 0:11:10.840
whatever you want to say.

213
0:11:10.840 --> 0:11:13.960
We're probably, like if you're climbing Mount Everest, we

214
0:11:13.960 --> 0:11:16.160
probably haven't even gotten to base camp yet.

215
0:11:16.160 --> 0:11:18.920
So there's a long way to go.

216
0:11:18.920 --> 0:11:22.080
But the other thing, in that realm, just declaring we have

217
0:11:22.080 --> 0:11:28.760
a policy to produce or store or evaluate S-bombs doesn't

218
0:11:28.760 --> 0:11:31.680
actually solve the problems you're trying to solve.

219
0:11:31.680 --> 0:11:33.800
There's a lot more work that has to be done.

220
0:11:33.800 --> 0:11:37.800
And the last thing on caveats, things like log for shell, I

221
0:11:37.800 --> 0:11:45.040
think pushed S-bombs into a lot of people's awareness,

222
0:11:45.040 --> 0:11:50.560
because S-bombs were a very effective way of finding where

223
0:11:50.560 --> 0:11:54.400
log for shell was affecting software.

224
0:11:54.400 --> 0:11:57.680
It may have given kind of a false sense of security, just

225
0:11:57.680 --> 0:12:01.080
because log for J in particular sticks out like a sore thumb.

226
0:12:01.080 --> 0:12:02.560
It's very easy to find.

227
0:12:02.560 --> 0:12:05.680
Things like the open SSL vulnerability just a couple of

228
0:12:05.680 --> 0:12:08.720
months ago, I think, may have been a reality check there.

229
0:12:08.720 --> 0:12:12.280
There are a lot of cases where you might have something like

230
0:12:12.280 --> 0:12:16.400
open SSL in software that you're consuming without

231
0:12:16.400 --> 0:12:18.040
even knowing it.

232
0:12:18.040 --> 0:12:21.000
It's a lot easier to hide.

233
0:12:21.000 --> 0:12:23.960
So just kind of a reality check, bring some people back

234
0:12:23.960 --> 0:12:25.520
to Earth a little bit.

235
0:12:25.520 --> 0:12:28.760
And then the last thing is just, in addition to producing

236
0:12:28.760 --> 0:12:31.880
S-bombs, one caveat is you have to think about managing

237
0:12:31.880 --> 0:12:34.600
them after you produce them, storing them, being able to

238
0:12:34.600 --> 0:12:39.080
search them, purge the ones you don't need anymore.

239
0:12:39.080 --> 0:12:41.080
That's been a topic of a couple of times.

240
0:12:41.080 --> 0:12:43.360
We don't want to keep more information than we really

241
0:12:43.360 --> 0:12:49.040
need, so how do we know when it's safe or reasonable to get

242
0:12:49.040 --> 0:12:51.920
rid of some of this data?

243
0:12:51.920 --> 0:12:54.200
Much less, how are we going to search through it when we need

244
0:12:54.200 --> 0:12:56.400
to find it?

245
0:12:56.400 --> 0:12:57.720
I think that covers it for now.

246
0:12:57.720 --> 0:13:01.680
I'll go ahead and pick them up over time anyway.

247
0:13:01.680 --> 0:13:04.960
Thank you.

248
0:13:04.960 --> 0:13:12.040
Like you, I've attended more panels than I've been on, and

249
0:13:12.040 --> 0:13:15.360
I don't like a panel that is a series of talks.

250
0:13:15.360 --> 0:13:18.720
And I did hear Alexo say that I needed to make a very brief

251
0:13:18.720 --> 0:13:21.800
introduction, so I promise I'm timing here.

252
0:13:21.800 --> 0:13:24.280
I'll be under 2 and 1,500 minutes.

253
0:13:24.280 --> 0:13:26.400
My favorite childhood, I'm Bradley Kuhn.

254
0:13:26.400 --> 0:13:29.240
I work for an organization, a charity called the Software

255
0:13:29.240 --> 0:13:30.880
Freedom Conservancy.

256
0:13:30.880 --> 0:13:34.840
I've been, my primary job has been related to copy left

257
0:13:34.840 --> 0:13:38.040
license compliance since 1997.

258
0:13:38.040 --> 0:13:43.160
And so I've seen a lot with regard to that issue, which

259
0:13:43.160 --> 0:13:47.240
does interact quite frequently with the issue that you are

260
0:13:47.240 --> 0:13:51.200
here to discuss today of software bills and materials.

261
0:13:51.200 --> 0:13:53.800
My favorite childhood story, by the way, is the story of the

262
0:13:53.800 --> 0:13:55.520
emperor has no clothes.

263
0:13:55.520 --> 0:13:58.920
And I found throughout my career in open source and free

264
0:13:58.920 --> 0:14:02.280
software that I'm often the only one willing to say that

265
0:14:02.280 --> 0:14:04.120
our emperors have no clothes.

266
0:14:04.120 --> 0:14:07.120
I think S-Bombs is a case where that needs to be said,

267
0:14:07.120 --> 0:14:10.680
at least to a certain extent.

268
0:14:10.680 --> 0:14:16.400
The most useful application of S-Bombs is in cases where you

269
0:14:16.400 --> 0:14:21.000
are in an organization that produces proprietary and open

270
0:14:21.000 --> 0:14:23.640
source software together in products.

271
0:14:23.640 --> 0:14:27.280
If you are an organization that is 100% open source and free

272
0:14:27.280 --> 0:14:31.200
software and choose a copy left license, your usefulness of

273
0:14:31.200 --> 0:14:34.640
S-Bombs is extremely limited, almost to the point that you

274
0:14:34.640 --> 0:14:38.000
may not even want to invest in getting involved in this kind

275
0:14:38.000 --> 0:14:38.560
of thing.

276
0:14:38.560 --> 0:14:40.560
Now I'm a realist and realize that almost all of you

277
0:14:40.560 --> 0:14:42.720
probably work for organizations, including the

278
0:14:42.720 --> 0:14:45.480
trade associations among you, that produce lots of

279
0:14:45.480 --> 0:14:47.120
proprietary software.

280
0:14:47.120 --> 0:14:49.280
As such, you're going to have to worry about all these

281
0:14:49.280 --> 0:14:50.520
issues we've been hearing about today.

282
0:14:50.520 --> 0:14:53.160
Many of the tools today look very interesting to me to

283
0:14:53.160 --> 0:14:55.160
solve those kinds of problems.

284
0:14:55.160 --> 0:14:58.880
But I want to leave you with one thought, if I can.

285
0:14:58.880 --> 0:15:02.560
That is, imagine if there was no proprietary software in your

286
0:15:02.560 --> 0:15:06.280
organization, that you didn't sell it, you didn't use it, and

287
0:15:06.280 --> 0:15:08.400
you didn't want to make it.

288
0:15:08.400 --> 0:15:12.400
And instead, you chose to look at the requirements of the

289
0:15:12.400 --> 0:15:16.160
copy left licenses, like the GPL, which require you to

290
0:15:16.160 --> 0:15:20.400
produce the complete corresponding source code as a

291
0:15:20.400 --> 0:15:23.880
reproducible build every time you produce a binary.

292
0:15:23.880 --> 0:15:25.520
And you have to make that available to every customer

293
0:15:25.520 --> 0:15:27.400
you have.

294
0:15:27.400 --> 0:15:31.720
S-bombs are most often needed when you don't necessarily

295
0:15:31.720 --> 0:15:34.640
have all the source code to hand, or don't know if it's

296
0:15:34.640 --> 0:15:37.880
going to be to hand when you get something

297
0:15:37.880 --> 0:15:39.560
from another vendor.

298
0:15:39.560 --> 0:15:42.360
So my argument is that the level of effort that's being

299
0:15:42.360 --> 0:15:46.000
put into S-bombs is primarily to enable the continued

300
0:15:46.000 --> 0:15:48.680
production of proprietary software.

301
0:15:48.680 --> 0:15:51.120
Being a FOSDEM and being a free software activist my

302
0:15:51.120 --> 0:15:54.320
whole career, that's generally not something that I'm that

303
0:15:54.320 --> 0:15:56.480
excited about, which is why I'm not

304
0:15:56.480 --> 0:15:57.720
excited about S-bombs.

305
0:16:08.440 --> 0:16:13.040
OK, so we heard of any statements about uses, about

306
0:16:13.040 --> 0:16:20.720
general use and caveats of using them, and why they're

307
0:16:20.720 --> 0:16:22.240
not needed.

308
0:16:22.240 --> 0:16:25.200
In an ideal world, they're not needed.

309
0:16:25.200 --> 0:16:30.400
OK, let's go back to that.

310
0:16:30.400 --> 0:16:37.360
Broadly, even if in an ideal world where an organization is

311
0:16:37.360 --> 0:16:42.520
producing free and open source software and following license

312
0:16:42.520 --> 0:16:46.520
obligations, they provide all the source for every release

313
0:16:46.520 --> 0:16:48.160
they're doing.

314
0:16:48.160 --> 0:16:52.560
There might still be the use case that I want to find out

315
0:16:52.560 --> 0:16:55.640
which of my releases, slash products, or whatever you want

316
0:16:55.640 --> 0:17:00.920
to call them, contain a version of a library.

317
0:17:00.920 --> 0:17:03.440
Right.

318
0:17:03.440 --> 0:17:05.360
So if you have a lot of source code, there's this great tool

319
0:17:05.360 --> 0:17:06.840
called grep.

320
0:17:06.840 --> 0:17:10.000
And what you can do is you can search the entire source code

321
0:17:10.000 --> 0:17:13.080
and look if a version of something is in there.

322
0:17:13.080 --> 0:17:16.080
If you have all the source code for everything, and you

323
0:17:16.080 --> 0:17:19.280
never separate the source from the binary, why does grep

324
0:17:19.280 --> 0:17:19.680
not work?

325
0:17:19.680 --> 0:17:20.600
You tell me.

326
0:17:20.600 --> 0:17:23.080
Because it's easier to search a table of contents than the

327
0:17:23.080 --> 0:17:24.480
complete book.

328
0:17:24.480 --> 0:17:27.280
That's why we have table of contents and indexes.

329
0:17:30.280 --> 0:17:33.040
Since things have become electronic, I generally just

330
0:17:33.040 --> 0:17:35.400
search the PDF of the text in grep anymore.

331
0:17:35.400 --> 0:17:36.400
I don't use table of contents.

332
0:17:36.400 --> 0:17:37.440
Really?

333
0:17:37.440 --> 0:17:39.880
OK.

334
0:17:39.880 --> 0:17:42.960
OK, so we have a source file.

335
0:17:42.960 --> 0:17:45.880
I used to write C. I used to be full of hash.

336
0:17:45.880 --> 0:17:47.320
If defs.

337
0:17:47.320 --> 0:17:50.800
So how do I, if I search the source code, I will find a

338
0:17:50.800 --> 0:17:52.040
line of code.

339
0:17:52.040 --> 0:17:54.400
But it's not telling me whether that line of code was

340
0:17:54.400 --> 0:17:58.920
actually compiled into the binary and now actually on my

341
0:17:58.920 --> 0:18:02.480
architecture and target hardware.

342
0:18:02.480 --> 0:18:05.640
So how do we get around that?

343
0:18:05.640 --> 0:18:11.880
So we've talked about having a trail of evidence from the

344
0:18:11.880 --> 0:18:15.560
source code to a binary so we can then match the two

345
0:18:15.560 --> 0:18:17.840
together.

346
0:18:17.840 --> 0:18:19.880
If we have different compile options, I would expect we'll

347
0:18:19.880 --> 0:18:22.320
get different binaries, I hope.

348
0:18:22.320 --> 0:18:26.360
So therefore, how do we accommodate that?

349
0:18:26.360 --> 0:18:28.680
Just to keep the argument going.

350
0:18:28.680 --> 0:18:29.280
I'd love to.

351
0:18:29.280 --> 0:18:32.320
And so in the world I'm imagining, which

352
0:18:32.320 --> 0:18:33.680
does not exist, I agree with you.

353
0:18:33.680 --> 0:18:34.880
This is why you have to do this work.

354
0:18:34.880 --> 0:18:37.120
Because the world that I've been working towards my whole

355
0:18:37.120 --> 0:18:38.360
career doesn't exist.

356
0:18:38.360 --> 0:18:42.320
But if it did, and all software was under the ephiro GPL,

357
0:18:42.320 --> 0:18:45.120
you would be required every time you build a binary to

358
0:18:45.120 --> 0:18:47.280
make sure you had a reproducible build that can

359
0:18:47.280 --> 0:18:48.640
produce that binary.

360
0:18:48.640 --> 0:18:51.520
So when you found a vulnerability in that binary,

361
0:18:51.520 --> 0:18:54.480
you would have stored the complete corresponding source

362
0:18:54.480 --> 0:18:56.680
release right next to all the binaries.

363
0:18:56.680 --> 0:18:58.800
You take the binary that's sitting out in the field, you

364
0:18:58.800 --> 0:19:01.760
compare the checksum to the binary in your repository of

365
0:19:01.760 --> 0:19:04.040
binaries and source code, and voila, there's your source

366
0:19:04.040 --> 0:19:05.360
code release that you made at the time you

367
0:19:05.360 --> 0:19:06.920
build it years ago.

368
0:19:06.920 --> 0:19:08.160
Simple enough.

369
0:19:11.080 --> 0:19:12.040
I mean, I get it, right?

370
0:19:12.040 --> 0:19:16.440
Yes, theoretically, we should be able to reproduce

371
0:19:16.440 --> 0:19:17.760
everything 100%.

372
0:19:17.760 --> 0:19:24.120
But in practice, we don't do things like inspect every jar

373
0:19:24.120 --> 0:19:26.480
of food that's coming off the assembly line.

374
0:19:26.480 --> 0:19:30.000
We only inspect some of them just for

375
0:19:30.000 --> 0:19:32.280
scalability purposes.

376
0:19:32.280 --> 0:19:36.680
So the S-bomb still has a value there in providing a

377
0:19:36.680 --> 0:19:40.800
shortcut so that you don't have to do a bunch of work

378
0:19:40.800 --> 0:19:43.240
over and over and over again on demand every time.

379
0:19:46.440 --> 0:19:47.040
I get it, though.

380
0:19:47.040 --> 0:19:47.680
You're right.

381
0:19:47.680 --> 0:19:52.720
In an ideal universe, that would be true.

382
0:19:52.720 --> 0:19:56.360
We have unlimited time, unlimited compute resources to

383
0:19:56.360 --> 0:19:58.840
do all these reproducible builds.

384
0:19:58.840 --> 0:20:02.520
In practice, though, even if there aren't constraints on

385
0:20:02.520 --> 0:20:07.600
time and compute resource, reproducible builds are

386
0:20:07.600 --> 0:20:14.120
extremely limited in, you know, I mean, it takes a lot of

387
0:20:14.120 --> 0:20:15.120
replacement for reproducible builds.

388
0:20:15.120 --> 0:20:16.280
No, no, no, no.

389
0:20:16.280 --> 0:20:22.160
But they can approximate a lot of what you would get out of

390
0:20:22.160 --> 0:20:23.160
it, not everything.

391
0:20:23.160 --> 0:20:24.120
No, not everything.

392
0:20:24.120 --> 0:20:27.120
But you can approximate some things, right?

393
0:20:27.120 --> 0:20:36.400
So I don't, I mean, I agree with you in principle that

394
0:20:36.400 --> 0:20:38.840
reproducible builds would prove a lot of things,

395
0:20:38.840 --> 0:20:39.920
everything, right?

396
0:20:39.920 --> 0:20:42.080
That would absolutely solve a lot of problems.

397
0:20:42.080 --> 0:20:46.200
But I don't know if everybody is really willing to do, to

398
0:20:46.200 --> 0:20:47.440
live in that world.

399
0:20:50.520 --> 0:20:52.480
My view is be the change you want to be in the world.

400
0:20:52.480 --> 0:20:54.960
That's why I support what the bill is instead of investing

401
0:20:54.960 --> 0:20:55.800
in S-bomb.

402
0:20:55.800 --> 0:20:56.800
No.

403
0:20:56.800 --> 0:21:02.600
I think part of our disagreement here of

404
0:21:02.600 --> 0:21:06.120
different views is the slide that Kate showed in the

405
0:21:06.120 --> 0:21:10.560
beginning, that we're not talking about an S-bomb.

406
0:21:10.560 --> 0:21:13.120
There are different types of S-bombs, right?

407
0:21:13.120 --> 0:21:16.920
And there are S-bombs that apply to the source, and there

408
0:21:16.920 --> 0:21:23.840
are S-bombs showing what the build is or what the deploy

409
0:21:23.840 --> 0:21:26.640
thing is, and stuff like that, right?

410
0:21:26.640 --> 0:21:29.720
Now, to Bradley's point, once you have everything

411
0:21:29.720 --> 0:21:33.400
documented and provided, people can recreate this

412
0:21:33.400 --> 0:21:36.760
information, right?

413
0:21:36.760 --> 0:21:41.520
So the grip example that Bradley said, this is looking

414
0:21:41.520 --> 0:21:43.040
at the source, right?

415
0:21:43.040 --> 0:21:47.240
But if the obligations are, we don't only give the source,

416
0:21:47.240 --> 0:21:49.560
but also the build instructions and all the

417
0:21:49.560 --> 0:21:55.120
scripts that the license obligations require, right?

418
0:21:55.120 --> 0:22:00.200
So people can go and recreate it and then try to find out

419
0:22:00.200 --> 0:22:02.360
this formation, right?

420
0:22:02.360 --> 0:22:05.560
But so the information will be there, right?

421
0:22:05.560 --> 0:22:10.600
The question is how easy we want you to have, right?

422
0:22:10.600 --> 0:22:11.840
Sorry, you wanted to.

423
0:22:11.840 --> 0:22:14.040
Yeah.

424
0:22:14.040 --> 0:22:14.840
You?

425
0:22:14.840 --> 0:22:17.040
I want to take questions.

426
0:22:17.040 --> 0:22:17.960
All right.

427
0:22:17.960 --> 0:22:18.440
Yeah.

428
0:22:18.440 --> 0:22:18.920
Let's try.

429
0:22:18.920 --> 0:22:20.000
Maybe one more.

430
0:22:20.000 --> 0:22:23.120
So I think I completely agree with you that it is better to

431
0:22:23.120 --> 0:22:27.080
take such decisions on the sources.

432
0:22:27.080 --> 0:22:31.120
But what is missing to do this is that the current

433
0:22:31.120 --> 0:22:34.680
vulnerability databases that we have, only reference

434
0:22:34.680 --> 0:22:39.080
vulnerabilities in giving it names, naming components.

435
0:22:39.080 --> 0:22:41.480
So there is a link missing about the vulnerability is

436
0:22:41.480 --> 0:22:45.080
present in this file, in this function, with this method

437
0:22:45.080 --> 0:22:47.440
signature, and so forth.

438
0:22:47.440 --> 0:22:50.560
And so I do not know what you want to search for.

439
0:22:50.560 --> 0:22:53.880
If you only search for CPP, blah, blah, blah, you will not

440
0:22:53.880 --> 0:22:57.840
be able to catch all instances of the vulnerable code,

441
0:22:57.840 --> 0:23:00.200
because maybe a product has been trapped.

442
0:23:00.200 --> 0:23:03.320
We named the code has been founded, and so forth.

443
0:23:03.320 --> 0:23:06.360
So that is, I think, lacking.

444
0:23:06.360 --> 0:23:06.600
OK.

445
0:23:06.600 --> 0:23:11.000
So the comment was that, for example, vulnerability

446
0:23:11.000 --> 0:23:15.400
information does not usually refer to specific source files

447
0:23:15.400 --> 0:23:17.400
and lines on the source file.

448
0:23:17.400 --> 0:23:22.000
But it refers to product names or library names or whatever.

449
0:23:22.000 --> 0:23:26.320
So in order to find something, you have to look for these,

450
0:23:26.320 --> 0:23:31.880
right, and not for the fine grain that we're talking about

451
0:23:31.880 --> 0:23:33.800
in a grip part.

452
0:23:33.800 --> 0:23:35.600
Right.

453
0:23:35.600 --> 0:23:37.120
Yeah.

454
0:23:37.120 --> 0:23:39.280
Thomas.

455
0:23:39.280 --> 0:23:43.520
So I know we talked a lot about S-Robot security and licensing.

456
0:23:43.520 --> 0:23:45.960
But funny enough, how Oort started

457
0:23:45.960 --> 0:23:50.320
had nothing to do with our licensing history at all.

458
0:23:50.320 --> 0:23:53.320
We basically wanted the CTO to have a method.

459
0:23:53.320 --> 0:23:55.680
What software are we using in general?

460
0:23:55.680 --> 0:23:58.360
What are open source proprietary?

461
0:23:58.360 --> 0:24:00.680
So we, as a whole organization, can see,

462
0:24:00.680 --> 0:24:03.720
even all of our sources can see the other edge of what

463
0:24:03.720 --> 0:24:05.240
are we doing and where can we go more

464
0:24:05.240 --> 0:24:07.640
efficient and where should we invest in the leverage

465
0:24:07.640 --> 0:24:09.160
that we should be done.

466
0:24:09.160 --> 0:24:12.240
And by doing them all as goals and having all the stuff,

467
0:24:12.240 --> 0:24:14.160
we actually still want to reduce it.

468
0:24:14.160 --> 0:24:17.080
And then we actually directed these in your organization.

469
0:24:17.080 --> 0:24:20.280
We're like, OK, yeah, you guys are using Ruby.

470
0:24:20.280 --> 0:24:21.680
You guys are using Java.

471
0:24:21.680 --> 0:24:24.120
Actually, we are all standardized in this.

472
0:24:24.120 --> 0:24:28.040
Actually, the company actually saved a lot of money.

473
0:24:28.040 --> 0:24:28.960
But this is organized.

474
0:24:28.960 --> 0:24:30.560
So again, this is often forgotten

475
0:24:30.560 --> 0:24:33.560
that S-Bombs can be a great way to basically

476
0:24:33.560 --> 0:24:36.720
build your building software more efficient.

477
0:24:36.720 --> 0:24:39.000
And that alone for that, I would build S-Bombs, even

478
0:24:39.000 --> 0:24:41.120
if by COVID's complete deal of source.

479
0:24:41.120 --> 0:24:41.600
All right.

480
0:24:41.600 --> 0:24:43.800
So repeating for the mic, sorry.

481
0:24:43.800 --> 0:24:47.120
The comment was that S-Bombs, while we're

482
0:24:47.120 --> 0:24:50.040
talking about uses in compliance and security,

483
0:24:50.040 --> 0:24:52.840
can also be used in a lot of other ways

484
0:24:52.840 --> 0:24:55.560
and can be very useful in this strategy.

485
0:24:55.560 --> 0:24:58.160
For example, having a software catalog of components

486
0:24:58.160 --> 0:25:01.520
being used by different parts of the company.

487
0:25:01.520 --> 0:25:02.200
Sorry, Anton.

488
0:25:02.200 --> 0:25:05.200
Couldn't I give you a second, right?

489
0:25:05.200 --> 0:25:05.680
No.

490
0:25:05.680 --> 0:25:08.080
I know.

491
0:25:08.080 --> 0:25:10.600
So I totally agree, Thomas.

492
0:25:10.600 --> 0:25:13.880
I think certainly the larger organizations,

493
0:25:13.880 --> 0:25:15.680
I think we probably got that discussion a bit

494
0:25:15.680 --> 0:25:16.840
with Siemens this morning.

495
0:25:16.840 --> 0:25:19.000
No criticism.

496
0:25:19.000 --> 0:25:23.120
Big organizations have very difficult to share things.

497
0:25:23.120 --> 0:25:26.040
And so if you had S-Bombs of your build

498
0:25:26.040 --> 0:25:30.760
and then started having a way of identifying common building

499
0:25:30.760 --> 0:25:34.040
blocks, I will hesitate to say the word products,

500
0:25:34.040 --> 0:25:38.200
or different instances of the same product,

501
0:25:38.200 --> 0:25:41.000
then yes, there must be some business opportunities

502
0:25:41.000 --> 0:25:45.120
to, A, save money, or B, be more efficient.

503
0:25:45.120 --> 0:25:47.960
And I don't know whether anyone is starting to see that

504
0:25:47.960 --> 0:25:48.680
or starting to say that.

505
0:25:48.680 --> 0:25:50.760
I don't know whether you started seeing that, Thomas,

506
0:25:50.760 --> 0:25:52.920
with your and your own industry.

507
0:25:52.920 --> 0:25:56.280
So just to be clear, I now work on Alpin, Finos,

508
0:25:56.280 --> 0:25:58.280
to see how we can build S-Bombs for them.

509
0:25:58.280 --> 0:26:00.760
All of their code is fully open.

510
0:26:00.760 --> 0:26:02.960
If you had an S-Bomb, then you can also

511
0:26:02.960 --> 0:26:04.560
see where are people contributing.

512
0:26:04.560 --> 0:26:06.800
Because we can resolve every project to sources.

513
0:26:06.800 --> 0:26:09.400
And both what they hold, so you have to actually figure out,

514
0:26:09.400 --> 0:26:11.600
OK, these are where people are contributing.

515
0:26:11.600 --> 0:26:13.800
These are people using these libraries.

516
0:26:13.800 --> 0:26:16.640
So we can do Finos projects on a basis that include,

517
0:26:16.640 --> 0:26:20.720
we have here people, here people, we need more job guys.

518
0:26:20.720 --> 0:26:22.600
Here and here are already people who

519
0:26:22.600 --> 0:26:24.120
are using this particular library.

520
0:26:24.120 --> 0:26:26.000
So these people and this Finos project

521
0:26:26.000 --> 0:26:29.160
can probably help those projects, that Finos project,

522
0:26:29.160 --> 0:26:30.560
solve things.

523
0:26:30.560 --> 0:26:31.640
And so it doesn't matter.

524
0:26:31.640 --> 0:26:33.200
The size of the mission doesn't matter.

525
0:26:33.200 --> 0:26:35.680
It's really about building software efficiently.

526
0:26:35.680 --> 0:26:36.200
Yeah.

527
0:26:36.200 --> 0:26:37.520
And it's all right?

528
0:26:37.520 --> 0:26:38.000
Sorry.

529
0:26:38.000 --> 0:26:39.760
OK, so I think what Thomas is saying

530
0:26:39.760 --> 0:26:42.520
is, even if things are fully open,

531
0:26:42.520 --> 0:26:48.000
then it's going to help as well.

532
0:26:48.000 --> 0:26:51.320
I would also agree that whether proprietary software still

533
0:26:51.320 --> 0:26:53.040
exists.

534
0:26:53.040 --> 0:26:55.040
I used to work in the defense sector.

535
0:26:55.040 --> 0:26:57.440
That's never going to go open source.

536
0:26:57.440 --> 0:26:59.640
It uses open source, but it's not

537
0:26:59.640 --> 0:27:03.560
going to use fully open source for obvious reasons.

538
0:27:03.560 --> 0:27:05.280
But we've got to keep those separate.

539
0:27:05.280 --> 0:27:09.280
And actually, businesses need to see those separate anyway.

540
0:27:09.280 --> 0:27:11.960
And S-Bombs is potentially a good way of sharing them.

541
0:27:11.960 --> 0:27:14.440
And also handling some of the things like export control

542
0:27:14.440 --> 0:27:17.120
that I think one of the projects said this morning

543
0:27:17.120 --> 0:27:20.440
was actually handling export control things, which is also

544
0:27:20.440 --> 0:27:24.360
an interesting thing that, obviously, some

545
0:27:24.360 --> 0:27:26.040
of the licenses, the open source licenses,

546
0:27:26.040 --> 0:27:27.280
don't have that constraint.

547
0:27:27.280 --> 0:27:29.000
But businesses do.

548
0:27:29.000 --> 0:27:30.120
And we have to recognize that.

549
0:27:34.000 --> 0:27:35.920
No, I just was going to add just to that.

550
0:27:35.920 --> 0:27:39.900
I think that's the other thing we saw earlier this morning

551
0:27:39.900 --> 0:27:41.760
with the S-W360, right?

552
0:27:41.760 --> 0:27:44.960
Identifying the components that are reused over and over again

553
0:27:44.960 --> 0:27:47.080
kind of goes right in with that, right?

554
0:27:47.080 --> 0:27:49.120
Saying, OK, this component, it might only

555
0:27:49.120 --> 0:27:50.560
have two people working on it, but it

556
0:27:50.560 --> 0:27:55.360
is used in 19 different products that our company produces.

557
0:27:55.360 --> 0:27:58.680
That may, from a management perspective,

558
0:27:58.680 --> 0:28:01.800
when we go to devote resources, whether it's

559
0:28:01.800 --> 0:28:03.880
additional headcount, whatever it is, right?

560
0:28:03.880 --> 0:28:08.240
We know that's a project that is key to everything else

561
0:28:08.240 --> 0:28:09.080
we're doing, right?

562
0:28:09.080 --> 0:28:10.700
So yeah, I think that does help.

563
0:28:10.700 --> 0:28:12.560
Again, it's something you probably

564
0:28:12.560 --> 0:28:17.520
could reverse engineer by looking at who's

565
0:28:17.520 --> 0:28:19.880
pulling from a Git repository or whatever.

566
0:28:19.880 --> 0:28:23.280
But it would be very difficult to look at.

567
0:28:23.280 --> 0:28:24.760
You'd have to time things.

568
0:28:24.760 --> 0:28:26.400
And yeah, it would be hard.

569
0:28:29.040 --> 0:28:30.400
And to be clear, I agree completely.

570
0:28:30.400 --> 0:28:33.160
Many of the tools we saw today, and generally speaking,

571
0:28:33.160 --> 0:28:35.920
S-BOMs are a wonderful tool to aid

572
0:28:35.920 --> 0:28:39.200
in the production of proprietary software and mixed proprietary

573
0:28:39.200 --> 0:28:40.680
open-source software.

574
0:28:40.680 --> 0:28:43.240
And I think all of you who are in that business,

575
0:28:43.240 --> 0:28:46.040
you should probably be working and doing more with S-BOMs

576
0:28:46.040 --> 0:28:47.400
because you're going to need it.

577
0:28:47.400 --> 0:28:48.800
I agree.

578
0:28:48.800 --> 0:28:50.360
But I just am not in that business.

579
0:28:50.360 --> 0:28:52.540
I don't want a world with proprietary software.

580
0:28:52.540 --> 0:28:54.060
I want a world with free software.

581
0:28:54.060 --> 0:28:58.560
And in the free software world, the better place to,

582
0:28:58.560 --> 0:29:00.680
you have to pick where resources go,

583
0:29:00.680 --> 0:29:02.680
the better place to focus resources

584
0:29:02.680 --> 0:29:04.760
is in reproducible builds, not S-BOMs.

585
0:29:04.760 --> 0:29:07.720
If the amount of funding and effort

586
0:29:07.720 --> 0:29:09.840
going into S-BOM technology right now

587
0:29:09.840 --> 0:29:12.760
was going into reproducible builds technology,

588
0:29:12.760 --> 0:29:14.360
I think we would get better gains.

589
0:29:14.360 --> 0:29:17.200
So it's a question of where limited resources are being

590
0:29:17.200 --> 0:29:19.640
deployed more than it is whether or not S-BOMs are useful.

591
0:29:19.640 --> 0:29:20.480
I agree completely.

592
0:29:20.480 --> 0:29:21.120
They are.

593
0:29:21.120 --> 0:29:24.400
Are they more useful than things we could be doing elsewhere

594
0:29:24.400 --> 0:29:25.280
with those resources?

595
0:29:29.240 --> 0:29:30.320
Yeah, go on.

596
0:29:30.320 --> 0:29:34.200
Again, many of our main works of commercial companies

597
0:29:34.200 --> 0:29:36.440
like coming in from the start.

598
0:29:36.440 --> 0:29:38.960
But on the other side, we are maintainers of open source

599
0:29:38.960 --> 0:29:39.460
projects.

600
0:29:39.460 --> 0:29:42.720
So we do open source projects.

601
0:29:42.720 --> 0:29:46.240
And I personally, I do not care about detail licenses

602
0:29:46.240 --> 0:29:47.160
so much.

603
0:29:47.160 --> 0:29:49.640
My software is licensed by the MIT.

604
0:29:49.640 --> 0:29:54.640
I want everybody to use the software that's at maximum.

605
0:29:54.640 --> 0:29:58.120
So from my perspective, I would like to have S-BOMs

606
0:29:58.120 --> 0:30:02.120
and my open source projects make it more easy for other people

607
0:30:02.120 --> 0:30:03.120
to consume them.

608
0:30:03.120 --> 0:30:06.560
So this is ideal software because I like it

609
0:30:06.560 --> 0:30:09.440
and because I like other people using it.

610
0:30:09.440 --> 0:30:11.920
So this is for our own opinion.

611
0:30:11.920 --> 0:30:17.160
And having the good overview about the topic and point

612
0:30:17.160 --> 0:30:22.920
that you use is also a good way to tell other people what

613
0:30:22.920 --> 0:30:24.560
kind of open source components are

614
0:30:24.560 --> 0:30:28.720
in view under the global license.

615
0:30:28.720 --> 0:30:33.920
So I'm sorry, but I'm just bringing up the idea

616
0:30:33.920 --> 0:30:36.640
that I need to use the source code for everything

617
0:30:36.640 --> 0:30:39.640
and tell everybody that you want to know something

618
0:30:39.640 --> 0:30:41.880
and then you need to go to all the source code.

619
0:30:41.880 --> 0:30:44.840
I want to provide good information for other people

620
0:30:44.840 --> 0:30:49.360
who would like to use my open source.

621
0:30:49.360 --> 0:30:54.400
OK, so the point here was that even when producing open source

622
0:30:54.400 --> 0:31:01.000
license software, you find S-BOM useful for telling people

623
0:31:01.000 --> 0:31:06.160
what your software uses or for documenting your software,

624
0:31:06.160 --> 0:31:08.760
essentially.

625
0:31:08.760 --> 0:31:10.800
OK?

626
0:31:10.800 --> 0:31:11.280
Please.

627
0:31:11.280 --> 0:31:14.160
There's an expression of that because if you

628
0:31:14.160 --> 0:31:16.280
have this one automatically in a component,

629
0:31:16.280 --> 0:31:18.480
in an open source component, and I have the whole process

630
0:31:18.480 --> 0:31:22.720
automated inside a company, I have mostly almost no lawyer

631
0:31:22.720 --> 0:31:26.520
in my back because they know exactly what is coming there.

632
0:31:26.520 --> 0:31:27.920
They know where it's coming from.

633
0:31:27.920 --> 0:31:29.320
And we have the data.

634
0:31:29.320 --> 0:31:31.000
And usually, they don't understand.

635
0:31:31.000 --> 0:31:33.160
OK, it's passing by this one.

636
0:31:33.160 --> 0:31:36.160
And this one, you know, we don't need to care about this thing.

637
0:31:36.160 --> 0:31:39.400
So we do have this information already here,

638
0:31:39.400 --> 0:31:44.440
completely set up in the system and say, OK, this is the note.

639
0:31:44.440 --> 0:31:45.400
We know.

640
0:31:45.400 --> 0:31:49.440
So we can approve the new level company.

641
0:31:49.440 --> 0:31:51.480
Without this information, it's always the same time.

642
0:31:51.480 --> 0:31:52.720
We just can't.

643
0:31:52.720 --> 0:31:53.960
We need to go to discussions.

644
0:31:53.960 --> 0:31:57.960
We need to see if the company is losing money and time.

645
0:31:57.960 --> 0:31:59.680
OK.

646
0:31:59.680 --> 0:32:01.080
How do I summarize that?

647
0:32:01.080 --> 0:32:03.400
S-BOMs are also useful for getting legal approval

648
0:32:03.400 --> 0:32:06.760
for using software or something like that.

649
0:32:06.760 --> 0:32:08.360
Yeah.

650
0:32:08.360 --> 0:32:09.160
Thank you, Harry.

651
0:32:09.160 --> 0:32:09.680
Sorry.

652
0:32:14.000 --> 0:32:16.120
And this is probably going to be an open question now

653
0:32:16.120 --> 0:32:20.400
to the audience of those who are generating S-BOMs now.

654
0:32:20.400 --> 0:32:24.920
Open source project I'm involved in is Python-based.

655
0:32:24.920 --> 0:32:29.520
And it supports 3.7 to 3.11.

656
0:32:29.520 --> 0:32:35.720
We generate an S-BOM every week in both Cyclone DX and SPDX

657
0:32:35.720 --> 0:32:38.600
for each version of Python.

658
0:32:38.600 --> 0:32:42.360
And each version of Python generates a different S-BOM

659
0:32:42.360 --> 0:32:44.680
because you've got different dependencies that

660
0:32:44.680 --> 0:32:47.920
are version specific.

661
0:32:47.920 --> 0:32:50.880
So I have, depending on the version of Python,

662
0:32:50.880 --> 0:32:54.800
I may have, I think there's about 25 direct dependencies.

663
0:32:54.800 --> 0:32:56.480
But then when you get the implicit ones,

664
0:32:56.480 --> 0:32:57.840
it gets about another 30.

665
0:32:57.840 --> 0:32:59.560
Some of them have got 50-odd dependencies.

666
0:32:59.560 --> 0:33:01.600
Some have got 60.

667
0:33:01.600 --> 0:33:06.080
So I agree with your comment about publicizing it.

668
0:33:06.080 --> 0:33:09.180
But are people picking up the right version

669
0:33:09.180 --> 0:33:12.720
so they are aware of what your software is using

670
0:33:12.720 --> 0:33:15.920
because your software use will change?

671
0:33:15.920 --> 0:33:19.640
I think you forgot the platform, so you need to do a Windows.

672
0:33:19.640 --> 0:33:21.920
Oh, yeah, yes.

673
0:33:21.920 --> 0:33:22.520
OK, so.

674
0:33:22.520 --> 0:33:26.000
And you change your pictures and get armed and the system's

675
0:33:26.000 --> 0:33:28.240
like, OK.

676
0:33:28.240 --> 0:33:28.740
Brilliant.

677
0:33:28.740 --> 0:33:30.080
Glad you picked that up.

678
0:33:30.080 --> 0:33:33.480
So therefore, so are we capturing

679
0:33:33.480 --> 0:33:37.520
that information in the standards?

680
0:33:37.520 --> 0:33:38.440
Consistently.

681
0:33:38.440 --> 0:33:40.400
Yes.

682
0:33:40.400 --> 0:33:43.440
I'm not.

683
0:33:43.440 --> 0:33:46.840
And the standard is one thing, actually collecting it

684
0:33:46.840 --> 0:33:49.640
and storing it in the actual S-bomb that you're producing.

685
0:33:49.640 --> 0:33:52.040
Right, just to repeat that.

686
0:33:52.040 --> 0:33:55.720
The standard allows for that, but doesn't guarantee

687
0:33:55.720 --> 0:33:58.240
that when you produce the S-bomb that that information will

688
0:33:58.240 --> 0:34:04.200
get, A, collected or B, recorded, which is a huge problem

689
0:34:04.200 --> 0:34:08.320
with usually it's a tooling problem, usually.

690
0:34:08.320 --> 0:34:12.200
And we've seen tooling improve a lot.

691
0:34:12.200 --> 0:34:17.440
But again, it's the journey from where we would like to be,

692
0:34:17.440 --> 0:34:20.680
ideally, from where we are now.

693
0:34:20.680 --> 0:34:24.440
It just takes time and effort, obviously.

694
0:34:24.440 --> 0:34:27.160
But that's the number one problem I see in the field,

695
0:34:27.160 --> 0:34:32.680
is that the tooling is not producing either complete

696
0:34:32.680 --> 0:34:36.640
results or consistent with other tools.

697
0:34:36.640 --> 0:34:38.920
I mean, we saw a ton of examples of that,

698
0:34:38.920 --> 0:34:42.040
where tools are producing different results yet.

699
0:34:42.040 --> 0:34:43.000
May I ask that?

700
0:34:43.000 --> 0:34:44.440
Do you know why they're going to survive,

701
0:34:44.440 --> 0:34:46.320
especially with open source science?

702
0:34:46.320 --> 0:34:50.040
It's the level of education that is why the tooling developers

703
0:34:50.040 --> 0:34:52.760
are guarding this topic is widely varied.

704
0:34:52.760 --> 0:34:55.160
So I've been producing S-bombs and all this stuff

705
0:34:55.160 --> 0:34:56.560
for more than seven years.

706
0:34:56.560 --> 0:34:59.120
I've spoken to more lawyers and package managers

707
0:34:59.120 --> 0:35:01.120
to develop it than I care about.

708
0:35:01.120 --> 0:35:03.520
Everybody thinks that package managers can

709
0:35:03.520 --> 0:35:05.120
make that easy.

710
0:35:05.120 --> 0:35:06.560
It is not.

711
0:35:06.560 --> 0:35:07.200
Right, yes.

712
0:35:07.200 --> 0:35:11.760
So to summarize that point, he's been producing S-bombs

713
0:35:11.760 --> 0:35:14.800
for seven years.

714
0:35:14.800 --> 0:35:17.920
And it's not just a matter of querying a package manager

715
0:35:17.920 --> 0:35:21.040
and being done.

716
0:35:21.040 --> 0:35:22.720
We see that all the time.

717
0:35:22.720 --> 0:35:25.080
I work in containerized software mostly,

718
0:35:25.080 --> 0:35:28.120
so a lot of the S-bombs I see produced

719
0:35:28.120 --> 0:35:29.760
are actually produced after the build,

720
0:35:29.760 --> 0:35:32.840
because somebody pulls a base image.

721
0:35:32.840 --> 0:35:37.040
There's no S-bomb for that base image to consume today.

722
0:35:37.040 --> 0:35:39.400
Hopefully, in the future, there will be.

723
0:35:39.400 --> 0:35:43.960
But those things that are in those base images, a lot of times

724
0:35:43.960 --> 0:35:44.880
are opaque.

725
0:35:44.880 --> 0:35:47.040
It may be open source software, but it's

726
0:35:47.040 --> 0:35:51.920
a Rust binary that doesn't have audit information compiled in.

727
0:35:51.920 --> 0:35:56.840
And there have been improvements in that.

728
0:35:56.840 --> 0:36:00.000
Go puts audit information into the binaries.

729
0:36:00.000 --> 0:36:03.400
Rust can do it, but doesn't do it by default yet.

730
0:36:03.400 --> 0:36:06.240
So there's still, yes, a ton of that.

731
0:36:06.240 --> 0:36:10.800
And so the rest of his point was the developer education,

732
0:36:10.800 --> 0:36:13.320
it's one thing to be aware of S-bombs as a concept.

733
0:36:13.320 --> 0:36:15.920
It's another thing to be aware of, the limitations, what

734
0:36:15.920 --> 0:36:18.520
has to be accounted for when you're building them,

735
0:36:18.520 --> 0:36:21.680
when you're producing software in general.

736
0:36:21.680 --> 0:36:25.360
There's just a lot of plates spinning all at the same time.

737
0:36:25.360 --> 0:36:27.920
Maybe to add to that, and we have a little talk on Friday,

738
0:36:27.920 --> 0:36:31.400
but please do not reinvent the wheel.

739
0:36:31.400 --> 0:36:35.880
If you need as much room, ask the community

740
0:36:35.880 --> 0:36:38.840
to have all the questions you have out there.

741
0:36:38.840 --> 0:36:42.440
So building it all and wasting a lot of time in everything.

742
0:36:42.440 --> 0:36:44.400
It's just a good sport.

743
0:36:44.400 --> 0:36:48.480
Another thing that you have from the workshop on Friday,

744
0:36:48.480 --> 0:36:51.600
teaching developers is OK, but it's not the right path.

745
0:36:51.600 --> 0:36:53.840
Because developers are creatures of habits,

746
0:36:53.840 --> 0:36:56.400
and they will not follow you or not listen you.

747
0:36:56.400 --> 0:36:59.920
Even when the deadlines are very near.

748
0:36:59.920 --> 0:37:02.160
So the last comment was that developers,

749
0:37:02.160 --> 0:37:04.520
it's difficult to get developers to change their behavior,

750
0:37:04.520 --> 0:37:06.040
they don't listen.

751
0:37:06.040 --> 0:37:08.360
Which I find too in my work, which is primarily

752
0:37:08.360 --> 0:37:10.480
copy left license compliance, that to your point

753
0:37:10.480 --> 0:37:12.840
I wanted to add, one of the reasons

754
0:37:12.840 --> 0:37:14.400
it's probably very difficult for you,

755
0:37:14.400 --> 0:37:16.360
it's not the only reason, but one of the reasons

756
0:37:16.360 --> 0:37:18.840
it's difficult to build S-bombs for containers

757
0:37:18.840 --> 0:37:22.320
is because nearly all containers in the world

758
0:37:22.320 --> 0:37:24.960
are violating the GPL.

759
0:37:24.960 --> 0:37:27.480
And so you don't have the source code

760
0:37:27.480 --> 0:37:29.760
to even go and start building your S-bomb off the source

761
0:37:29.760 --> 0:37:30.260
code.

762
0:37:30.260 --> 0:37:32.720
You're stuck with binaries that are GPL violating.

763
0:37:32.720 --> 0:37:34.720
But there is absolutely no funding available

764
0:37:34.720 --> 0:37:36.360
to handle that problem in the container world

765
0:37:36.360 --> 0:37:37.600
and the GPL compliant side.

766
0:37:37.600 --> 0:37:39.440
So I guess you'll handle the binary side,

767
0:37:39.440 --> 0:37:41.780
because you have all your S-bomb funding to fund it that way.

768
0:37:45.800 --> 0:37:48.040
OK, yeah, sorry.

769
0:37:48.040 --> 0:37:50.200
I'm trying to understand your point.

770
0:37:50.200 --> 0:37:54.360
And the fact that you implied that if all software was open,

771
0:37:54.360 --> 0:37:58.680
we wouldn't have any need to S-bombs besides perhaps

772
0:37:58.680 --> 0:38:00.320
the things that they mentioned.

773
0:38:00.320 --> 0:38:03.440
Even though every talk today was stuff that wouldn't matter

774
0:38:03.440 --> 0:38:05.440
if all software was open.

775
0:38:05.440 --> 0:38:07.920
But I'm trying to understand what your point is.

776
0:38:07.920 --> 0:38:12.000
Are you implying that instead of actually being here

777
0:38:12.000 --> 0:38:14.640
at Postem, pushing open source software

778
0:38:14.640 --> 0:38:18.720
so that all software at some day being open source,

779
0:38:18.720 --> 0:38:21.960
are you implying that we're wasting time producing stuff

780
0:38:21.960 --> 0:38:24.920
that actually supports the current standard?

781
0:38:24.920 --> 0:38:25.760
Completely yours.

782
0:38:25.760 --> 0:38:26.400
Yeah, yeah.

783
0:38:26.400 --> 0:38:28.480
That's a question for me, and I'll summarize it.

784
0:38:28.480 --> 0:38:30.760
So the question was, in this imaginary world

785
0:38:30.760 --> 0:38:33.260
that I proposed where all software is open source

786
0:38:33.260 --> 0:38:35.480
and free software, is what I'm saying

787
0:38:35.480 --> 0:38:38.160
that the effort being put into S-bombs

788
0:38:38.160 --> 0:38:40.240
is actually enabling the production

789
0:38:40.240 --> 0:38:41.360
of proprietary software?

790
0:38:41.360 --> 0:38:43.240
And I think the answer is yes.

791
0:38:43.240 --> 0:38:47.560
I think S-bombs are a system to make it easier

792
0:38:47.560 --> 0:38:50.760
to ingest open source software and bring it

793
0:38:50.760 --> 0:38:53.040
into proprietary software.

794
0:38:53.040 --> 0:38:55.320
I came to as many of the talks as I could today

795
0:38:55.320 --> 0:38:57.080
when I didn't have other obligations.

796
0:38:57.080 --> 0:38:58.920
And many of the talks today were talking

797
0:38:58.920 --> 0:39:01.840
about ingestion of open source for that purpose.

798
0:39:01.840 --> 0:39:04.680
When you hear people talking about, oh, we

799
0:39:04.680 --> 0:39:07.400
can be able to blacklist GPL stuff.

800
0:39:07.400 --> 0:39:09.960
Well, the reason they want to blacklist copy left stuff

801
0:39:09.960 --> 0:39:11.960
is they want to make proprietary software.

802
0:39:11.960 --> 0:39:13.120
Now, it's a question of values.

803
0:39:13.120 --> 0:39:15.400
The commenter over there that I think never got summarized

804
0:39:15.400 --> 0:39:17.440
was pointing out that in his values,

805
0:39:17.440 --> 0:39:20.200
he feels he really wants to see his software put

806
0:39:20.200 --> 0:39:23.600
into proprietary software and to encourage it and make it easy.

807
0:39:23.600 --> 0:39:25.960
I don't obviously agree with those values.

808
0:39:25.960 --> 0:39:28.800
If you agree with those values, I agree completely.

809
0:39:28.800 --> 0:39:31.440
S-bombs are a great solution to be

810
0:39:31.440 --> 0:39:36.080
able to encourage the adoption of non-copy lefted software.

811
0:39:36.080 --> 0:39:37.520
This is a very stark issue.

812
0:39:37.520 --> 0:39:38.760
I want to give an example.

813
0:39:38.760 --> 0:39:39.480
There was a talk earlier.

814
0:39:39.480 --> 0:39:42.160
You can go on the internet and figure out which one it was.

815
0:39:42.160 --> 0:39:45.680
But their system, when it decided,

816
0:39:45.680 --> 0:39:48.280
when putting licenses in buckets,

817
0:39:48.280 --> 0:39:51.480
when it saw that it was a copy left license,

818
0:39:51.480 --> 0:39:54.160
they had a Python function that I found in their source

819
0:39:54.160 --> 0:39:57.000
grid that says, oh, if it's a copy left or it's a license,

820
0:39:57.000 --> 0:40:02.360
this Python function should return the string is-danger.

821
0:40:02.360 --> 0:40:05.280
So the concept that even those writing S-bomb tools

822
0:40:05.280 --> 0:40:08.480
believe that copy left is a dangerous thing

823
0:40:08.480 --> 0:40:10.640
is kind of giving you a sense of the values that

824
0:40:10.640 --> 0:40:12.700
are circulating around the S-bomb community, which

825
0:40:12.700 --> 0:40:15.800
is unfortunate, because I think the GPL is a wonderful license,

826
0:40:15.800 --> 0:40:17.120
not a dangerous one.

827
0:40:17.120 --> 0:40:19.080
But I realize others in the room disagree.

828
0:40:19.080 --> 0:40:21.580
Yeah?

829
0:40:21.580 --> 0:40:24.880
So my question was, when we cannot see the other side

830
0:40:24.880 --> 0:40:28.880
of the coin, so wouldn't that, I mean,

831
0:40:28.880 --> 0:40:31.600
I'm not trying to reconcile free software and commercial

832
0:40:31.600 --> 0:40:34.040
software by any means, but wouldn't that

833
0:40:34.040 --> 0:40:37.120
ex-reference currency flow by the S-bomb be also

834
0:40:37.120 --> 0:40:41.200
helpful for your use case in identifying

835
0:40:41.200 --> 0:40:44.840
when that piece of software is being used?

836
0:40:44.840 --> 0:40:46.160
The answer is no.

837
0:40:46.160 --> 0:40:47.760
And I don't want to get too much into it,

838
0:40:47.760 --> 0:40:49.200
but I'm going to talk about it later, because I don't want

839
0:40:49.200 --> 0:40:50.440
to take too much of the time.

840
0:40:50.440 --> 0:40:52.000
All right.

841
0:40:52.000 --> 0:40:52.500
Kate.

842
0:40:52.500 --> 0:40:55.000
Sorry.

843
0:40:55.000 --> 0:41:01.480
I want open source data for use in safety critical applications.

844
0:41:01.480 --> 0:41:03.440
Open source is bugs.

845
0:41:03.440 --> 0:41:08.680
How can I track the bugs and fix them

846
0:41:08.680 --> 0:41:12.560
so it doesn't kill people unless I know what's there?

847
0:41:12.560 --> 0:41:15.640
If I'm just in the source code, all true,

848
0:41:15.640 --> 0:41:17.960
I'm not going to be able to find and fix.

849
0:41:17.960 --> 0:41:19.520
It's at scale.

850
0:41:19.520 --> 0:41:22.440
We need to abstract to go to scale.

851
0:41:22.440 --> 0:41:25.680
How do we change, how do we change what you're proposing

852
0:41:25.680 --> 0:41:28.800
from that problem?

853
0:41:28.800 --> 0:41:43.000
So the question is that we want to do functional safety

854
0:41:43.000 --> 0:41:44.720
with open source, right?

855
0:41:44.720 --> 0:41:47.080
And in order to do it on scale, we

856
0:41:47.080 --> 0:41:51.400
have to abstract things outside on a higher level

857
0:41:51.400 --> 0:41:53.360
than simple source code.

858
0:41:53.360 --> 0:41:57.000
And talk, for example, in packages, and how, again,

859
0:41:57.000 --> 0:42:01.880
the table of contents of things rather than the actual source

860
0:42:01.880 --> 0:42:04.400
heights.

861
0:42:04.400 --> 0:42:05.720
So I want to respond.

862
0:42:05.720 --> 0:42:07.640
Off the mic, it was said there's a concern

863
0:42:07.640 --> 0:42:09.840
that software is going to kill people with the implication

864
0:42:09.840 --> 0:42:12.520
that without us bombs, we won't be

865
0:42:12.520 --> 0:42:15.600
able to prevent the killing of people with software.

866
0:42:15.600 --> 0:42:18.000
Which I agree, there is software that's killed people.

867
0:42:18.000 --> 0:42:20.600
I was very taken of the Therac25 case,

868
0:42:20.600 --> 0:42:23.200
which if you're in computer science, you probably studied,

869
0:42:23.200 --> 0:42:25.480
which was a proprietary software system that

870
0:42:25.480 --> 0:42:28.280
murdered a number of people due to a software bug.

871
0:42:28.280 --> 0:42:31.520
So I agree completely that we have a long, long history

872
0:42:31.520 --> 0:42:34.360
of software bugs injuring people.

873
0:42:34.360 --> 0:42:39.680
My argument is that the best thing to have

874
0:42:39.680 --> 0:42:41.960
when you have a binary, that you worry has a bug

875
0:42:41.960 --> 0:42:44.520
and has a vulnerability, the best thing to have

876
0:42:44.520 --> 0:42:46.640
is to have a completely reproducible build

877
0:42:46.640 --> 0:42:48.200
for that binary.

878
0:42:48.200 --> 0:42:52.240
Such that you can go and make that binary again

879
0:42:52.240 --> 0:42:54.840
tens of years later, hundreds of years later,

880
0:42:54.840 --> 0:42:57.360
and see again, have all the scripts used

881
0:42:57.360 --> 0:42:59.280
to control compilation installation

882
0:42:59.280 --> 0:43:02.120
at your fingertips for every binary produced in the world.

883
0:43:02.120 --> 0:43:04.680
I agree with you that it takes a lot of resources to do that.

884
0:43:04.680 --> 0:43:07.020
I would like to get to that world where that's the case,

885
0:43:07.020 --> 0:43:10.320
where every person who relies on a piece of binary software

886
0:43:10.320 --> 0:43:12.960
has the immediate access to the complete corresponding source

887
0:43:12.960 --> 0:43:13.680
code.

888
0:43:13.680 --> 0:43:15.280
There are some tools in that case

889
0:43:15.280 --> 0:43:17.360
that I think should exist that don't.

890
0:43:17.360 --> 0:43:19.720
I don't see anybody in this community working on them.

891
0:43:19.720 --> 0:43:21.680
For example, our mind was working years ago

892
0:43:21.680 --> 0:43:23.720
on this very interesting tool that

893
0:43:23.720 --> 0:43:28.800
was doing orchestration through build processes, where

894
0:43:28.800 --> 0:43:33.800
it was tracking exact hashes of source code that

895
0:43:33.800 --> 0:43:35.440
was going into a binary.

896
0:43:35.440 --> 0:43:37.960
Those kinds of things are very excellent tools

897
0:43:37.960 --> 0:43:39.600
that we do need and should be created,

898
0:43:39.600 --> 0:43:43.520
and they would be a great enabler to the types of things

899
0:43:43.520 --> 0:43:44.520
that I'm talking about.

900
0:43:44.520 --> 0:43:47.720
But I don't see S-bombs bringing us that, at least not

901
0:43:47.720 --> 0:43:48.160
at the moment.

902
0:44:01.240 --> 0:44:02.000
What's that name?

903
0:44:02.000 --> 0:44:03.200
That's all for private tools?

904
0:44:03.200 --> 0:44:03.680
That's all?

905
0:44:03.680 --> 0:44:09.680
Yocto is doing it, Zephyr is doing it, hashes of the sources,

906
0:44:09.680 --> 0:44:12.640
and what's those intermediates, and how does it go?

907
0:44:12.640 --> 0:44:13.140
OK.

908
0:44:13.140 --> 0:44:14.880
So Kate just told us the problem solved,

909
0:44:14.880 --> 0:44:17.040
so we don't have to do anything more.

910
0:44:17.040 --> 0:44:18.240
That's great.

911
0:44:18.240 --> 0:44:20.240
Use Yocto and the problem solved, it sounds like.

912
0:44:20.240 --> 0:44:26.440
OK, so the comment was that build tools, no, build platforms

913
0:44:26.440 --> 0:44:32.160
like Yocto and Zephyr already record

914
0:44:32.160 --> 0:44:37.760
all hashes of sources going into binaries for their platforms.

915
0:44:37.760 --> 0:44:39.720
Great.

916
0:44:39.720 --> 0:44:41.120
Any other questions?

917
0:44:41.120 --> 0:44:42.360
Come on, people, don't be shy.

918
0:44:42.360 --> 0:44:43.280
Yeah?

919
0:44:43.280 --> 0:44:44.760
Yeah, I have a quick question.

920
0:44:44.760 --> 0:44:48.760
So for the escorts, is the idea, and this might be a very basic

921
0:44:48.760 --> 0:44:52.240
question, is the idea that we produce an escort that

922
0:44:52.240 --> 0:44:59.040
represents the suspect or as large whatever combination

923
0:44:59.040 --> 0:45:04.440
of tags, and that includes both build dependencies, transitive

924
0:45:04.440 --> 0:45:08.280
attacks, how it depends, task dependencies, always the idea

925
0:45:08.280 --> 0:45:13.760
that use a multiple of these for other facts and for us

926
0:45:13.760 --> 0:45:17.440
for the happier, so that you can then operate the idea.

927
0:45:17.440 --> 0:45:21.120
I have a form of vulnerability, for licensing issue

928
0:45:21.120 --> 0:45:23.720
in a particular thinking way.

929
0:45:23.720 --> 0:45:26.520
Let's say if it's an open SSL vulnerability,

930
0:45:26.520 --> 0:45:29.320
my build tool, I probably don't have as much,

931
0:45:29.320 --> 0:45:34.600
but if it's in production, I'm not going to have much.

932
0:45:34.600 --> 0:45:36.800
Yocto, yeah, you'll summarize it.

933
0:45:36.800 --> 0:45:38.480
Yeah, I'll summarize it.

934
0:45:38.480 --> 0:45:40.840
Yeah, so the question is whether or not

935
0:45:40.840 --> 0:45:45.800
the SBOM is intended to capture in addition

936
0:45:45.800 --> 0:45:48.040
to the code and the dependencies.

937
0:45:48.040 --> 0:45:52.040
Is it also capturing the build environment, et cetera, things

938
0:45:52.040 --> 0:45:53.280
like that, right?

939
0:45:53.280 --> 0:45:55.560
And the answer there is maybe.

940
0:45:55.560 --> 0:45:58.600
And that's kind of one of the reasons,

941
0:45:58.600 --> 0:46:00.120
like I don't know if you were here all day,

942
0:46:00.120 --> 0:46:01.920
but one of the first things that we covered

943
0:46:01.920 --> 0:46:03.560
was different types of SBOMs, right?

944
0:46:03.560 --> 0:46:08.520
So there are SBOMs specifically for code repositories, right?

945
0:46:08.520 --> 0:46:10.600
There are SBOMs specifically that

946
0:46:10.600 --> 0:46:13.000
are generated at build time, right?

947
0:46:13.000 --> 0:46:16.520
So yes, maybe there can be an SBOM

948
0:46:16.520 --> 0:46:20.040
for the exact combination of conditions,

949
0:46:20.040 --> 0:46:22.720
or there can be a more generalized SBOM, right?

950
0:46:22.720 --> 0:46:25.960
And there's use cases for both of those.

951
0:46:25.960 --> 0:46:30.520
How much are you able to get all of these?

952
0:46:30.520 --> 0:46:31.880
Maybe, right?

953
0:46:31.880 --> 0:46:35.120
Again, it depends on what you're consuming from other people,

954
0:46:35.120 --> 0:46:35.600
right?

955
0:46:35.600 --> 0:46:38.320
If you're consuming a Docker image, right,

956
0:46:38.320 --> 0:46:40.560
it may be too late to.

957
0:46:40.560 --> 0:46:43.280
You may be able to reproduce it in a, well,

958
0:46:43.280 --> 0:46:44.320
let's not get into that.

959
0:46:44.320 --> 0:46:47.480
I'll say one thing more about reproducible builds.

960
0:46:47.480 --> 0:46:52.320
Even in the universe where we have all the data,

961
0:46:52.320 --> 0:46:55.000
actually reproducing a build is extremely difficult,

962
0:46:55.000 --> 0:46:57.200
and maybe even impossible in some cases, right?

963
0:46:57.200 --> 0:46:59.760
Because there's just too many variables.

964
0:46:59.760 --> 0:47:05.200
So I am not one to shy away from saying we should have an ideal

965
0:47:05.200 --> 0:47:06.800
and work towards it, right?

966
0:47:06.800 --> 0:47:08.400
I mean, absolutely.

967
0:47:08.400 --> 0:47:11.920
But the level of effort to achieve one goal

968
0:47:11.920 --> 0:47:13.800
is not necessarily the same amount of effort

969
0:47:13.800 --> 0:47:15.400
to achieve another goal.

970
0:47:15.400 --> 0:47:17.560
So.

971
0:47:17.560 --> 0:47:21.520
Yeah, I guess my question was, let's

972
0:47:21.520 --> 0:47:24.480
say I have something that generates that.

973
0:47:24.480 --> 0:47:27.120
I'm supposed to run it multiple times while I'm

974
0:47:27.120 --> 0:47:29.680
doing pipeline as opposed to running once.

975
0:47:29.680 --> 0:47:31.200
And I have the answer to that.

976
0:47:31.200 --> 0:47:31.680
Yeah.

977
0:47:31.680 --> 0:47:32.440
It depends.

978
0:47:32.440 --> 0:47:32.920
Yeah.

979
0:47:32.920 --> 0:47:35.000
The answer is it depends.

980
0:47:35.000 --> 0:47:36.640
The answer is always it depends.

981
0:47:36.640 --> 0:47:41.840
But I'm just looking at the highest one, is the design one.

982
0:47:41.840 --> 0:47:44.480
Now, one of the things I've heard a lot of people,

983
0:47:44.480 --> 0:47:47.640
and we've talked about lists of ingredients several times

984
0:47:47.640 --> 0:47:52.920
today, people nervous about putting what's in their product

985
0:47:52.920 --> 0:47:58.040
because potentially people are saying, well, if you tell me

986
0:47:58.040 --> 0:48:01.520
I'm using package X, Y, and Z, then a competitor

987
0:48:01.520 --> 0:48:05.440
can also put X, Y, and Z together.

988
0:48:05.440 --> 0:48:07.800
So are people concerned about that?

989
0:48:07.800 --> 0:48:10.200
Because that's one of the things that people are saying

990
0:48:10.200 --> 0:48:13.800
is delaying the adoption and the publication of that.

991
0:48:13.800 --> 0:48:16.840
Or is it saying that certain S-bombs can

992
0:48:16.840 --> 0:48:20.800
have that level information but with a very restricted audience

993
0:48:20.800 --> 0:48:24.720
as a sink from the maybe the later down ones, which

994
0:48:24.720 --> 0:48:26.880
are probably more public because they potentially

995
0:48:26.880 --> 0:48:28.720
have different business needs?

996
0:48:32.160 --> 0:48:33.800
That's out for that.

997
0:48:33.800 --> 0:48:35.280
I'm not saying I've got a view.

998
0:48:35.280 --> 0:48:37.560
Let's see, what do people think about that?

999
0:48:37.560 --> 0:48:41.360
Because I'm seeing some organizations saying,

1000
0:48:41.360 --> 0:48:43.920
I don't want to publish my architecture,

1001
0:48:43.920 --> 0:48:46.520
since it's an architecture, because that potentially

1002
0:48:46.520 --> 0:48:49.960
is making it a community, potentially vulnerable.

1003
0:48:49.960 --> 0:48:52.160
My business model being vulnerable.

1004
0:48:52.160 --> 0:48:55.680
And go back to the market I used to work in,

1005
0:48:55.680 --> 0:49:00.360
my architecture was protected under certain business needs.

1006
0:49:00.360 --> 0:49:01.880
And I couldn't share that.

1007
0:49:01.880 --> 0:49:03.840
I still can't share it.

1008
0:49:03.840 --> 0:49:05.400
I just want to add one thing there.

1009
0:49:05.400 --> 0:49:07.680
And Siemens had their talk earlier today

1010
0:49:07.680 --> 0:49:10.640
about having different S-bombs for different use cases.

1011
0:49:10.640 --> 0:49:13.040
And one of them was specifically around that.

1012
0:49:13.040 --> 0:49:18.120
We have a specific S-bomb for regulatory consumption.

1013
0:49:18.120 --> 0:49:19.760
That only includes the information

1014
0:49:19.760 --> 0:49:21.400
that the regulator needs.

1015
0:49:21.400 --> 0:49:23.160
And I don't know if that's a, I actually

1016
0:49:23.160 --> 0:49:25.200
wanted to talk to you guys about that.

1017
0:49:25.200 --> 0:49:27.080
Is that produced from the other S-bombs?

1018
0:49:27.080 --> 0:49:28.360
We'll get into that later.

1019
0:49:28.360 --> 0:49:32.680
But they have the other S-bombs they only

1020
0:49:32.680 --> 0:49:34.240
use for internal purposes.

1021
0:49:34.240 --> 0:49:36.760
So even in the case of software that

1022
0:49:36.760 --> 0:49:38.920
is not going to be distributed at all,

1023
0:49:38.920 --> 0:49:43.480
there's still a very strong use case for S-bombs.

1024
0:49:43.480 --> 0:49:46.200
That software that stays inside of Siemens

1025
0:49:46.200 --> 0:49:48.600
maybe doesn't even go into a product

1026
0:49:48.600 --> 0:49:52.320
and is only used for, let's say, internal accounting.

1027
0:49:52.320 --> 0:49:52.820
I don't know.

1028
0:49:52.820 --> 0:49:53.320
Whatever.

1029
0:49:53.320 --> 0:49:54.600
How can you get your data?

1030
0:49:54.600 --> 0:49:55.120
Right.

1031
0:49:55.120 --> 0:49:55.620
Right.

1032
0:49:55.620 --> 0:49:57.320
So there's still a use case there

1033
0:49:57.320 --> 0:50:02.640
where there's not a concern about necessarily poisoning

1034
0:50:02.640 --> 0:50:03.760
the software or whatever.

1035
0:50:06.560 --> 0:50:07.800
So yeah.

1036
0:50:07.800 --> 0:50:09.220
I just wanted to tie back to that,

1037
0:50:09.220 --> 0:50:11.920
because I wanted to, A, remind myself to talk to you about it.

1038
0:50:11.920 --> 0:50:14.400
But I thought it tied into what he was asking too.

1039
0:50:14.400 --> 0:50:17.240
There's a true reality within big organizations

1040
0:50:17.240 --> 0:50:21.600
is because at some point someone will ask it where or when

1041
0:50:21.600 --> 0:50:23.000
or why.

1042
0:50:23.000 --> 0:50:25.480
This is always about the project that you're working.

1043
0:50:25.480 --> 0:50:27.400
And sometimes there's someone that

1044
0:50:27.400 --> 0:50:29.400
is in a completely different area,

1045
0:50:29.400 --> 0:50:30.920
in a completely different country.

1046
0:50:30.920 --> 0:50:33.040
But for some reason, how is using the project

1047
0:50:33.040 --> 0:50:34.680
to do these questions?

1048
0:50:34.680 --> 0:50:36.520
And then what happens is that there's

1049
0:50:36.520 --> 0:50:38.520
a lot of people who augment itself

1050
0:50:38.520 --> 0:50:40.400
trying to find information.

1051
0:50:40.400 --> 0:50:43.760
If that's a thing that already happens on S-bomb since there,

1052
0:50:43.760 --> 0:50:46.280
you have all the information of the project details.

1053
0:50:46.280 --> 0:50:48.760
And then this question could be totally solved at the moment.

1054
0:50:48.760 --> 0:50:52.120
You're saying for just internal management audits

1055
0:50:52.120 --> 0:50:56.520
of resource planning, something like that, right?

1056
0:50:56.520 --> 0:50:58.040
Who was working on this project?

1057
0:50:58.040 --> 0:50:58.880
Yeah.

1058
0:50:58.880 --> 0:50:59.380
Yeah.

1059
0:50:59.380 --> 0:51:00.160
So all of that, yeah.

1060
0:51:00.160 --> 0:51:03.360
That information can be captured in an S-bomb as well.

1061
0:51:03.360 --> 0:51:03.880
Right.

1062
0:51:03.880 --> 0:51:05.200
I agree with that.

1063
0:51:05.200 --> 0:51:07.920
Yeah, I wanted to go back to you brought up this list of ingredients

1064
0:51:07.920 --> 0:51:11.000
question again, which I think is a really interesting analogy

1065
0:51:11.000 --> 0:51:13.320
to this whole situation.

1066
0:51:13.320 --> 0:51:15.560
Certainly, I've eaten processed foods in my life,

1067
0:51:15.560 --> 0:51:18.440
and I don't cook everything from scratch.

1068
0:51:18.440 --> 0:51:22.600
So having a list of ingredients is certainly much better

1069
0:51:22.600 --> 0:51:25.240
than not having one if those are your only two choices,

1070
0:51:25.240 --> 0:51:27.760
if you're given that false dichotomy.

1071
0:51:27.760 --> 0:51:30.000
However, I'm much more interested in getting recipes,

1072
0:51:30.000 --> 0:51:33.040
full recipes, with all the instructions

1073
0:51:33.040 --> 0:51:36.480
than I am getting lists of ingredients for something.

1074
0:51:36.480 --> 0:51:38.960
And similarly, true, I've used proprietary software in my life.

1075
0:51:38.960 --> 0:51:41.400
I avoid it because I don't just want a list of ingredients.

1076
0:51:41.400 --> 0:51:42.440
I want the whole recipe.

1077
0:51:46.120 --> 0:51:51.960
OK, so staying with a list of ingredients and food labels

1078
0:51:51.960 --> 0:51:57.680
analogy, whenever we see a list of ingredients,

1079
0:51:57.680 --> 0:52:01.600
it's usually a couple of things.

1080
0:52:01.600 --> 0:52:02.440
Not couple, OK.

1081
0:52:02.440 --> 0:52:04.120
Let's say a dozen things.

1082
0:52:04.120 --> 0:52:07.400
And then may also contain other things.

1083
0:52:07.400 --> 0:52:12.080
And it's also, yeah, oh, we can look at the chocolates.

1084
0:52:12.080 --> 0:52:17.640
And various other additives, or whatever, stuff like that.

1085
0:52:17.640 --> 0:52:24.800
So even in this case, we do not get a complete and exhaustive list

1086
0:52:24.800 --> 0:52:28.840
of everything, or not an accurate one.

1087
0:52:28.840 --> 0:52:30.200
Are we trying too much?

1088
0:52:30.200 --> 0:52:30.800
Right.

1089
0:52:30.800 --> 0:52:35.160
Trying to go to the S-Borm and find everything there.

1090
0:52:35.160 --> 0:52:39.160
So just looking at this, these are two pieces of chocolate.

1091
0:52:39.160 --> 0:52:40.400
Other brands are available.

1092
0:52:40.400 --> 0:52:42.440
Other brands, yeah.

1093
0:52:42.440 --> 0:52:45.240
So OK, one says this 42.

1094
0:52:45.240 --> 0:52:46.520
It's all in German.

1095
0:52:46.520 --> 0:52:47.600
What language it's in?

1096
0:52:47.600 --> 0:52:48.840
German, probably.

1097
0:52:48.840 --> 0:52:50.360
So one says 42%.

1098
0:52:50.360 --> 0:52:51.880
One says 44%.

1099
0:52:51.880 --> 0:52:53.640
But at the end, product is chocolate.

1100
0:52:53.640 --> 0:52:56.040
Are you able to tell that difference, a 2% difference?

1101
0:52:56.040 --> 0:52:59.920
OK.

1102
0:52:59.920 --> 0:53:04.280
Because there's a set of, OK, probably by taste, maybe,

1103
0:53:04.280 --> 0:53:05.720
if you're really good.

1104
0:53:05.720 --> 0:53:07.920
But OK, is your software the same?

1105
0:53:07.920 --> 0:53:10.120
Because the difference between that 2%

1106
0:53:10.120 --> 0:53:12.440
might be different compile option.

1107
0:53:12.440 --> 0:53:14.640
Take it an analogy.

1108
0:53:14.640 --> 0:53:16.080
OK.

1109
0:53:16.080 --> 0:53:21.880
So the question is, if in our food we are so lax,

1110
0:53:21.880 --> 0:53:24.800
why do we try to do it in our software so exact

1111
0:53:24.800 --> 0:53:27.640
and we're spending all this money that Bradley is talking

1112
0:53:27.640 --> 0:53:28.640
about?

1113
0:53:28.640 --> 0:53:30.120
Yeah.

1114
0:53:30.120 --> 0:53:32.720
I have an opinion on this.

1115
0:53:32.720 --> 0:53:38.800
So I'm in a big company that can use a lot of software products.

1116
0:53:38.800 --> 0:53:46.000
And while we care that bills of materials exist in many cases,

1117
0:53:46.000 --> 0:53:49.120
but we do not care at all what's the content.

1118
0:53:49.120 --> 0:53:54.760
So those 2% difference is what we're talking about.

1119
0:53:54.760 --> 0:53:56.560
Well, when people come to me and ask,

1120
0:53:56.560 --> 0:54:00.760
well, can we get that product from open source point of view,

1121
0:54:00.760 --> 0:54:03.920
I ask, well, do they have an S-bomb?

1122
0:54:03.920 --> 0:54:07.320
And if they have an S-bomb, it's a sign that they care about

1123
0:54:07.320 --> 0:54:09.480
and S-bomb is important, that they

1124
0:54:09.480 --> 0:54:14.680
are capable of creating S-bomb and that they produce

1125
0:54:14.680 --> 0:54:16.200
an instrument of product.

1126
0:54:16.200 --> 0:54:18.840
And in many cases, fine for me.

1127
0:54:18.840 --> 0:54:19.360
Go ahead.

1128
0:54:19.360 --> 0:54:19.840
Yeah.

1129
0:54:19.840 --> 0:54:22.600
I don't care what's in there.

1130
0:54:22.600 --> 0:54:23.120
OK.

1131
0:54:23.120 --> 0:54:24.200
So you want to?

1132
0:54:24.200 --> 0:54:26.480
Yeah, I'll summarize it.

1133
0:54:26.480 --> 0:54:28.800
Yeah, so the comment was that he doesn't

1134
0:54:28.800 --> 0:54:32.200
care what is in the software necessarily,

1135
0:54:32.200 --> 0:54:35.200
but he does care that there is an S-bomb, essentially.

1136
0:54:35.200 --> 0:54:37.400
And I agree with that.

1137
0:54:37.400 --> 0:54:40.640
As a consumer, a lot of times I don't.

1138
0:54:40.640 --> 0:54:42.760
I'm not going to read the ingredients.

1139
0:54:42.760 --> 0:54:46.480
But knowing that the ingredients are available,

1140
0:54:46.480 --> 0:54:48.880
and I don't know if this is a perfect analogy.

1141
0:54:48.880 --> 0:54:51.240
The ingredients list comes up all the time.

1142
0:54:51.240 --> 0:54:52.520
There's more to it than that.

1143
0:54:52.520 --> 0:54:55.280
But knowing that someone has the ability

1144
0:54:55.280 --> 0:55:00.000
to audit that information means that I don't necessarily

1145
0:55:00.000 --> 0:55:02.440
have to be the one that does it.

1146
0:55:02.440 --> 0:55:04.920
Just like when you go shopping, you

1147
0:55:04.920 --> 0:55:07.720
can benefit from other people bargaining,

1148
0:55:07.720 --> 0:55:09.420
even though you're not bargaining yourself,

1149
0:55:09.420 --> 0:55:11.440
just because that does drive prices down

1150
0:55:11.440 --> 0:55:13.800
in the general case.

1151
0:55:13.800 --> 0:55:18.760
That activity on the margin is extremely important.

1152
0:55:18.760 --> 0:55:22.640
So yes, I care a lot that even if I'm not

1153
0:55:22.640 --> 0:55:25.220
doing the inspecting of the food to make sure it's not

1154
0:55:25.220 --> 0:55:27.920
spoiled or whatever, that someone is,

1155
0:55:27.920 --> 0:55:28.960
just knowing that is good.

1156
0:55:32.560 --> 0:55:36.040
Do you know how food inspection has been done?

1157
0:55:36.040 --> 0:55:38.520
All right.

1158
0:55:38.520 --> 0:55:42.560
OK, so I want to follow up to what you said and ask you.

1159
0:55:42.560 --> 0:55:44.280
If your choices were, because you're

1160
0:55:44.280 --> 0:55:46.040
saying you're not going to look at it, which means probably

1161
0:55:46.040 --> 0:55:47.080
the recipe is not available.

1162
0:55:47.080 --> 0:55:49.320
You're not going to go try to cook version of yourself

1163
0:55:49.320 --> 0:55:50.680
to see if the recipe actually works.

1164
0:55:50.680 --> 0:55:52.480
You're going to be relying on the fact, hey,

1165
0:55:52.480 --> 0:55:53.400
there's a recipe out there.

1166
0:55:53.400 --> 0:55:54.680
And they say that's the recipe for this.

1167
0:55:54.680 --> 0:55:56.240
And probably somebody looked at it.

1168
0:55:56.240 --> 0:55:57.640
So here's a question for you.

1169
0:55:57.640 --> 0:56:00.360
If you had a choice between just getting the ingredients list

1170
0:56:00.360 --> 0:56:03.080
and actually getting the recipe, which

1171
0:56:03.080 --> 0:56:05.160
would you rather have out there, assuming you're not

1172
0:56:05.160 --> 0:56:07.840
going to really look at either of them?

1173
0:56:07.840 --> 0:56:09.200
OK, just what would I?

1174
0:56:09.200 --> 0:56:12.480
Well, it depends on what we mean by the recipe, right?

1175
0:56:12.480 --> 0:56:14.360
I mean, is it just the list of what

1176
0:56:14.360 --> 0:56:16.360
to combine in the performance?

1177
0:56:16.360 --> 0:56:19.160
Every step, every little time you step in.

1178
0:56:19.160 --> 0:56:22.000
I mean, some of it, there are elements of that

1179
0:56:22.000 --> 0:56:25.360
that could be related to food safety, right?

1180
0:56:25.360 --> 0:56:28.880
I didn't refrigerate it or whatever.

1181
0:56:28.880 --> 0:56:31.680
And yeah, I'd.

1182
0:56:31.680 --> 0:56:33.120
I give you the recipe for a salad.

1183
0:56:33.120 --> 0:56:35.240
The salami side of the sheet, right?

1184
0:56:35.240 --> 0:56:37.240
You want an Islamic, Old-day, Rizzo-backed,

1185
0:56:37.240 --> 0:56:39.240
packed with actual pork?

1186
0:56:39.240 --> 0:56:40.440
Is that what you're asking for?

1187
0:56:40.440 --> 0:56:44.120
I'm a vegetarian, so I'll give you the recipe.

1188
0:56:44.120 --> 0:56:48.840
Yeah, but I mean, it's an interesting thing is, you know.

1189
0:56:48.840 --> 0:56:52.760
Where are the, where are the, where are the, where are the,

1190
0:56:52.760 --> 0:56:53.760
sorry.

1191
0:56:53.760 --> 0:56:55.400
OK, OK, it's just an interesting thing

1192
0:56:55.400 --> 0:56:59.320
is people have allergies for food.

1193
0:56:59.320 --> 0:57:02.720
And taking this scenario along is quite things.

1194
0:57:02.720 --> 0:57:04.760
So you know, product may contain nuts.

1195
0:57:04.760 --> 0:57:07.320
People are allergic to certain types of nuts.

1196
0:57:07.320 --> 0:57:11.680
So if you received an S-bomb, do you, and do you know,

1197
0:57:11.680 --> 0:57:14.960
would you validate that that S-bomb is suitable for you

1198
0:57:14.960 --> 0:57:17.760
to use and not having an adverse effect on you?

1199
0:57:17.760 --> 0:57:21.080
Which might be a GPL license or something.

1200
0:57:21.080 --> 0:57:24.320
Maybe an adverse, there might be an adverse reaction.

1201
0:57:24.320 --> 0:57:26.160
Just to take it along.

1202
0:57:26.160 --> 0:57:28.760
Where's the, where, there seems to be quite a good analogy

1203
0:57:28.760 --> 0:57:31.000
here in terms of just receiving it,

1204
0:57:31.000 --> 0:57:33.640
you have to actually look at it.

1205
0:57:33.640 --> 0:57:36.720
Otherwise, the consequences of it, you know,

1206
0:57:36.720 --> 0:57:41.720
basically you suffer those consequences.

1207
0:57:41.720 --> 0:57:43.720
So just a sympathetic story.

1208
0:57:43.720 --> 0:57:45.720
I understand the argument of this S-bomb is basically

1209
0:57:45.720 --> 0:57:48.720
a synthesis of information that if you have all the source

1210
0:57:48.720 --> 0:57:51.720
code of all your dependencies, you could extract essentially

1211
0:57:51.720 --> 0:57:52.720
from there.

1212
0:57:52.720 --> 0:57:55.720
And I understand that in the use case of security,

1213
0:57:55.720 --> 0:57:58.720
it's much easier to just look for a version and a component

1214
0:57:58.720 --> 0:58:01.720
name in a database of S-bombs than directly to the source code

1215
0:58:01.720 --> 0:58:03.720
in their own forms or sources.

1216
0:58:03.720 --> 0:58:07.720
But if the stakes are high enough, in some cases,

1217
0:58:07.720 --> 0:58:09.720
you also want to do the graph.

1218
0:58:09.720 --> 0:58:13.720
So I don't know how big companies handle the Loughborough J

1219
0:58:13.720 --> 0:58:16.720
or the, how big is the Loughborough J?

1220
0:58:16.720 --> 0:58:19.720
What I'm going to assume is that fairly small company

1221
0:58:19.720 --> 0:58:22.720
with not huge budget and not a lot of, you know,

1222
0:58:22.720 --> 0:58:25.720
computing resources, if the S-bombs at the time,

1223
0:58:25.720 --> 0:58:28.720
it's a big diff, just look at that.

1224
0:58:28.720 --> 0:58:31.720
But I'm pretty sure that big companies and high budget

1225
0:58:31.720 --> 0:58:34.720
and computing resources also did the graph in the source code

1226
0:58:34.720 --> 0:58:38.720
because they couldn't afford assuming that all the S-bombs

1227
0:58:38.720 --> 0:58:39.720
were right.

1228
0:58:39.720 --> 0:58:43.720
So what I'm saying is that the conflicts we've been discussing,

1229
0:58:43.720 --> 0:58:47.720
if you're, you know, if you also get all the S-bombs

1230
0:58:47.720 --> 0:58:50.720
for your components, like you have a plan B in case

1231
0:58:50.720 --> 0:58:52.720
your S-bombs are wrong, I also encourage you to distribute

1232
0:58:52.720 --> 0:58:54.720
the source code and all the source code to your users,

1233
0:58:54.720 --> 0:58:56.720
but that's the kind of problem.

1234
0:58:56.720 --> 0:59:00.720
Yeah, no, to summarize that point, he's saying that if you

1235
0:59:00.720 --> 0:59:04.720
have an S-bomb in a zero-day response situation, let's say,

1236
0:59:04.720 --> 0:59:08.720
right, you can find Loughborough J very quickly,

1237
0:59:08.720 --> 0:59:13.720
but you're still going to want to go back and comb through

1238
0:59:13.720 --> 0:59:16.720
everything to be extra certain, right?

1239
0:59:16.720 --> 0:59:18.720
I think you want to have that option.

1240
0:59:18.720 --> 0:59:21.720
Yeah, yeah, well, you obviously, yeah, yes, I agree completely.

1241
0:59:21.720 --> 0:59:22.720
You want that option.

1242
0:59:22.720 --> 0:59:25.720
I think part of the reason that that's necessary today

1243
0:59:25.720 --> 0:59:30.720
is that disconnect between what the scanners are capable

1244
0:59:30.720 --> 0:59:35.720
of detecting and recording, how hard it is to have a truly

1245
0:59:35.720 --> 0:59:38.720
bit-for-bit reproducible build, right, if we get to that

1246
0:59:38.720 --> 0:59:41.720
universe where the builds are reproducible.

1247
0:59:41.720 --> 0:59:43.720
I mean, they are a reproducible build project, by the way.

1248
0:59:43.720 --> 0:59:47.720
Right, you don't have to do it all the time, but if you know

1249
0:59:47.720 --> 0:59:50.720
and you have a high confidence level that these builds are

1250
0:59:50.720 --> 0:59:53.720
reproducible, you don't necessarily have to reproduce

1251
0:59:53.720 --> 0:59:56.720
every one of them all the time, right?

1252
0:59:56.720 --> 0:59:59.720
Actually, this whole thing is closed circle with the whole

1253
0:59:59.720 --> 1:00:00.720
food part.

1254
1:00:00.720 --> 1:00:03.720
So, because in Brazilian I used to see, I saw a little

1255
1:00:03.720 --> 1:00:08.720
documentary about a network of supermarkets in the Netherlands

1256
1:00:08.720 --> 1:00:11.720
that actually produces other juice and use it.

1257
1:00:11.720 --> 1:00:14.720
Okay, blockchain is not the metal part, but from the

1258
1:00:14.720 --> 1:00:18.720
original in Brazil, the way they pick up the fruit to go in

1259
1:00:18.720 --> 1:00:21.720
traceability and do using blockchain for each part,

1260
1:00:21.720 --> 1:00:25.720
then the everything until you reach the supermarket,

1261
1:00:25.720 --> 1:00:28.720
and they can show the documents with all the traces and steps

1262
1:00:28.720 --> 1:00:29.720
with everything.

1263
1:00:29.720 --> 1:00:33.720
Basically, they have found a way to find a vulnerability in

1264
1:00:33.720 --> 1:00:36.720
the middle of processing with some food that has gotten

1265
1:00:36.720 --> 1:00:37.720
lost.

1266
1:00:37.720 --> 1:00:39.720
Yeah, that's a provenance issue, right?

1267
1:00:39.720 --> 1:00:43.720
Yeah, I can show this bottle of orange juice came from this

1268
1:00:43.720 --> 1:00:48.720
batch of oranges, those oranges came on this ship from this

1269
1:00:48.720 --> 1:00:51.720
orchard, and we're picked at this time.

1270
1:00:51.720 --> 1:00:59.720
Yeah, that is, so that is a kind of an intersection of signing

1271
1:00:59.720 --> 1:01:03.720
images or signing software with the S-bomb showing what's in

1272
1:01:03.720 --> 1:01:04.720
that software, right?

1273
1:01:04.720 --> 1:01:05.720
Yeah, yeah, yeah, yeah.

1274
1:01:05.720 --> 1:01:11.720
To really stretch the analogy, yeah, but that's, I think that's,

1275
1:01:11.720 --> 1:01:13.720
yeah, you need both of those, right?

1276
1:01:13.720 --> 1:01:16.720
Ultimately, you probably want both of those.

1277
1:01:16.720 --> 1:01:18.720
Yeah, yeah.

1278
1:01:18.720 --> 1:01:23.720
There is a, for those interested in reproducible builds,

1279
1:01:23.720 --> 1:01:27.720
there is a working group on the open SSF.

1280
1:01:27.720 --> 1:01:30.720
Oh, yeah, probably.

1281
1:01:30.720 --> 1:01:35.720
There is an open working group on the open SSF.

1282
1:01:35.720 --> 1:01:40.720
A bunch of people are thinking on how you can get a reproducible

1283
1:01:40.720 --> 1:01:46.720
S-bomb, and some of it deals with, I mean, not necessarily

1284
1:01:46.720 --> 1:01:50.720
capturing all of the ingredients into the S-bomb, but I think

1285
1:01:50.720 --> 1:01:54.720
it's born, I'm not really that involved, but I, from what I

1286
1:01:54.720 --> 1:01:58.720
read, they're trying to think if I take an S-bomb and try to

1287
1:01:58.720 --> 1:02:01.720
reproduce a build from only the ingredients listed in the S-bomb,

1288
1:02:01.720 --> 1:02:02.720
can I manage to do it?

1289
1:02:02.720 --> 1:02:06.720
And they're tying it to other trust issues, but it's an

1290
1:02:06.720 --> 1:02:09.720
interesting project, if anyone is interested.

1291
1:02:09.720 --> 1:02:15.720
I think we probably end up, I think, you know, to have all

1292
1:02:15.720 --> 1:02:20.720
the ingredients and the providence and things like that

1293
1:02:20.720 --> 1:02:24.720
is going to provide a huge amount of information to be managed.

1294
1:02:24.720 --> 1:02:27.720
And then how do you then manage it, and how do you find it when

1295
1:02:27.720 --> 1:02:29.720
you need to find it?

1296
1:02:29.720 --> 1:02:33.720
Because it's bad enough in, bad enough finding source codes

1297
1:02:33.720 --> 1:02:37.720
sometimes, but then having to find other artifacts and

1298
1:02:37.720 --> 1:02:41.720
relations, that becomes quite hard.

1299
1:02:41.720 --> 1:02:42.720
So I'll probably put it out there.

1300
1:02:42.720 --> 1:02:45.720
For those of you who have got S-bombs and consuming them, how

1301
1:02:45.720 --> 1:02:48.720
are you managing them?

1302
1:02:48.720 --> 1:02:51.720
Because I believe that there's lots of things we're talking

1303
1:02:51.720 --> 1:02:54.720
about producing them, but actually putting the

1304
1:02:54.720 --> 1:02:58.720
relationship and S-bombs must be related to other artifacts,

1305
1:02:58.720 --> 1:03:03.720
I'm sure, building materials like hardware, documentation that

1306
1:03:03.720 --> 1:03:05.720
we talked about earlier about safety.

1307
1:03:05.720 --> 1:03:11.720
How are people managing those discrete artifacts together as

1308
1:03:11.720 --> 1:03:15.720
a unified, consistent solution?

1309
1:03:15.720 --> 1:03:17.720
Okay, a more general question.

1310
1:03:17.720 --> 1:03:21.720
Is anyone consuming a box, or are we all talking about

1311
1:03:21.720 --> 1:03:23.720
producing them?

1312
1:03:23.720 --> 1:03:25.720
Nobody cares.

1313
1:03:25.720 --> 1:03:27.720
Sorry, yeah.

1314
1:03:27.720 --> 1:03:28.720
Please.

1315
1:03:28.720 --> 1:03:35.720
So we're going to introduce S-bombs for folks, and we're

1316
1:03:35.720 --> 1:03:38.720
producing a lot of information, even the very build, and we're

1317
1:03:38.720 --> 1:03:41.720
producing a lot of specific stuff that we think.

1318
1:03:41.720 --> 1:03:44.720
But also you can read about the S-bombs that represent the

1319
1:03:44.720 --> 1:03:47.720
software that ends up being fully released in Microsoft.

1320
1:03:47.720 --> 1:03:51.720
And so the first thing we hear is we have released some

1321
1:03:51.720 --> 1:03:54.720
looks from the state that's happening in the X-box.

1322
1:03:54.720 --> 1:03:59.720
And then we have our mechanisms tracking our releases on

1323
1:03:59.720 --> 1:04:02.720
the phones that use that same identifier.

1324
1:04:02.720 --> 1:04:05.720
And so we want to look at these S-bombs.

1325
1:04:05.720 --> 1:04:08.720
We're only really looking at what's going on in the X-box

1326
1:04:08.720 --> 1:04:11.720
and what's actually been released, which starts now.

1327
1:04:11.720 --> 1:04:15.720
And from that, we have very solid component mechanisms

1328
1:04:15.720 --> 1:04:18.720
that are going to be released in the X-box.

1329
1:04:18.720 --> 1:04:21.720
And then we have the S-bombs that are going to be released

1330
1:04:21.720 --> 1:04:24.720
in the X-box.

1331
1:04:24.720 --> 1:04:27.720
And then we have very solid component mechanisms that

1332
1:04:27.720 --> 1:04:29.720
you always have an understanding of where things are going.

1333
1:04:29.720 --> 1:04:32.720
So your analytics approach makes it the destination of the

1334
1:04:32.720 --> 1:04:35.720
software, which consumers are going to be required.

1335
1:04:35.720 --> 1:04:38.720
And that can help you build a risk.

1336
1:04:38.720 --> 1:04:41.720
Risk is fairly contextual.

1337
1:04:41.720 --> 1:04:45.720
And we're producing and consuming S-bombs from risk

1338
1:04:45.720 --> 1:04:48.720
perspective, whether it's legal, license compliant, and

1339
1:04:48.720 --> 1:04:49.720
security.

1340
1:04:49.720 --> 1:04:52.720
And a lot of these cases are turning into denying.

1341
1:04:52.720 --> 1:04:56.720
And most of the shows in these cameras, we provide them

1342
1:04:56.720 --> 1:05:00.720
a lot of sources, and they can find hundreds of CEs.

1343
1:05:00.720 --> 1:05:02.720
They're really finding lots of things.

1344
1:05:02.720 --> 1:05:05.720
But a lot of it is not very useful, not actionable for

1345
1:05:05.720 --> 1:05:08.720
developers, especially when it's stuff that goes and don't

1346
1:05:08.720 --> 1:05:10.720
need to worry about fixing.

1347
1:05:10.720 --> 1:05:14.720
So it just gives us a really good data set to search and

1348
1:05:14.720 --> 1:05:17.720
use in an operational sense.

1349
1:05:17.720 --> 1:05:19.720
But it requires humans.

1350
1:05:19.720 --> 1:05:22.720
So we just set up some opportunities at the

1351
1:05:22.720 --> 1:05:26.720
independent YA about having better data sources in the

1352
1:05:26.720 --> 1:05:30.720
past that can automatically respond to threats and things

1353
1:05:30.720 --> 1:05:32.720
like that.

1354
1:05:32.720 --> 1:05:36.720
We're blessed with some very nice proprietary business

1355
1:05:36.720 --> 1:05:41.720
databases that are important.

1356
1:05:41.720 --> 1:05:44.720
And only support things like the quality of CEs and CEs and

1357
1:05:44.720 --> 1:05:47.720
CEs, CEs, CEs, you have to change stuff like that and go

1358
1:05:47.720 --> 1:05:49.720
ahead and just kind of read away from you.

1359
1:05:49.720 --> 1:05:54.720
But this kind of...

1360
1:05:54.720 --> 1:05:55.720
Can you summarize all that?

1361
1:05:55.720 --> 1:05:56.720
I'll have to summarize all that.

1362
1:05:56.720 --> 1:05:57.720
Yeah.

1363
1:05:57.720 --> 1:05:58.720
Well, okay.

1364
1:05:58.720 --> 1:05:59.720
They produce.

1365
1:05:59.720 --> 1:06:03.720
I actually want to go back to Zach's comment because I have

1366
1:06:03.720 --> 1:06:05.720
a question now because Zach was pointing out with

1367
1:06:05.720 --> 1:06:09.720
someone else earlier that having the S-bomb and the source

1368
1:06:09.720 --> 1:06:12.720
code is really the ideal situation.

1369
1:06:12.720 --> 1:06:15.720
And everybody has been saying S-bombs will help us with

1370
1:06:15.720 --> 1:06:18.720
bugs and identify vulnerabilities,

1371
1:06:18.720 --> 1:06:20.720
which possibly is true.

1372
1:06:20.720 --> 1:06:24.720
So if you have a log for J or any of these situations where

1373
1:06:24.720 --> 1:06:27.720
you've identified in your S-bomb, you have a version,

1374
1:06:27.720 --> 1:06:30.720
you have that version and you have that package,

1375
1:06:30.720 --> 1:06:33.720
but of course you don't have the source code.

1376
1:06:33.720 --> 1:06:36.720
So how does that help you solve the vulnerability if you

1377
1:06:36.720 --> 1:06:37.720
have the S-bomb?

1378
1:06:37.720 --> 1:06:39.720
It seems to me the only thing you can do is take the binary

1379
1:06:39.720 --> 1:06:41.720
out of deployment if you don't have the source code.

1380
1:06:41.720 --> 1:06:44.720
So I'm curious if I'm missing something that the S-bombs do

1381
1:06:44.720 --> 1:06:47.720
that allow you to solve the vulnerability with no source

1382
1:06:47.720 --> 1:06:48.720
code present.

1383
1:06:48.720 --> 1:06:51.720
Yeah, I'll take that.

1384
1:06:51.720 --> 1:06:54.720
That does happen sometimes where there's a project that has

1385
1:06:54.720 --> 1:06:56.720
been...

1386
1:06:56.720 --> 1:06:59.720
There are binaries for an internal project, let's say,

1387
1:06:59.720 --> 1:07:02.720
and nobody knows where the code is, right?

1388
1:07:02.720 --> 1:07:03.720
That has happened.

1389
1:07:03.720 --> 1:07:06.720
We've seen people build S-bombs and, yeah,

1390
1:07:06.720 --> 1:07:09.720
that's essentially the case where you can get an assessment

1391
1:07:09.720 --> 1:07:13.720
and say this is vulnerable to whatever.

1392
1:07:13.720 --> 1:07:15.720
That may...

1393
1:07:15.720 --> 1:07:18.720
Removing the binary as an option, there are maybe other

1394
1:07:18.720 --> 1:07:20.720
mitigations that could be put in place, but it is an

1395
1:07:20.720 --> 1:07:21.720
awareness thing, right?

1396
1:07:21.720 --> 1:07:25.720
I mean, that's kind of the main thing of S-bombs in general,

1397
1:07:25.720 --> 1:07:29.720
is a shortcut to omniscient awareness of every, you know,

1398
1:07:29.720 --> 1:07:35.720
mastery over the contents of this thing, right?

1399
1:07:35.720 --> 1:07:37.720
I think we're probably drifting a bit into slightly wider

1400
1:07:37.720 --> 1:07:38.720
things.

1401
1:07:38.720 --> 1:07:42.720
And S-bombs is not your single point of decision-making for

1402
1:07:42.720 --> 1:07:43.720
the things like vulnerability.

1403
1:07:43.720 --> 1:07:46.720
You need to look at how your product is being used,

1404
1:07:46.720 --> 1:07:50.720
has it been deployed, what's the environment,

1405
1:07:50.720 --> 1:07:51.720
who's using it.

1406
1:07:51.720 --> 1:07:53.720
If it's in a test environment, that's probably a slightly

1407
1:07:53.720 --> 1:07:56.720
different environment to an operational deployment in an

1408
1:07:56.720 --> 1:07:57.720
L.T. environment.

1409
1:07:57.720 --> 1:08:00.720
So you need to look at that, you know, look at the context.

1410
1:08:00.720 --> 1:08:04.720
And maybe S-bombs need to capture more of a context.

1411
1:08:04.720 --> 1:08:06.720
And obviously, if you're creating a product,

1412
1:08:06.720 --> 1:08:10.720
defining what a product is, it needs to also have that

1413
1:08:10.720 --> 1:08:13.720
context around it, which then gives you then maybe other

1414
1:08:13.720 --> 1:08:16.720
protections, physical protections as well,

1415
1:08:16.720 --> 1:08:18.720
that are not captured in the S-bomb that may help you make

1416
1:08:18.720 --> 1:08:19.720
those decisions.

1417
1:08:19.720 --> 1:08:39.720
I have a totally different question about the usefulness

1418
1:08:39.720 --> 1:08:49.720
of S-bombs.

1419
1:08:49.720 --> 1:08:53.720
I don't have any comments on co-pilot.

1420
1:08:53.720 --> 1:08:54.720
Okay.

1421
1:08:54.720 --> 1:08:55.720
Okay.

1422
1:08:55.720 --> 1:08:59.720
So the question there is, with the likes of things like

1423
1:08:59.720 --> 1:09:01.720
co-pilot, and I presume our little friend,

1424
1:09:01.720 --> 1:09:06.720
Chat GPT, what does that really make to the world of S-bombs?

1425
1:09:06.720 --> 1:09:10.720
I would probably say, let's widen that a little bit more to

1426
1:09:10.720 --> 1:09:14.720
basically explainable software.

1427
1:09:14.720 --> 1:09:18.720
Can you explain what your software is doing?

1428
1:09:18.720 --> 1:09:20.720
And I'm sure our safety people would be, you know,

1429
1:09:20.720 --> 1:09:22.720
one of the things when I've been involved in safety,

1430
1:09:22.720 --> 1:09:25.720
you've got to explain your architecture and explain why

1431
1:09:25.720 --> 1:09:28.720
your architecture is safe and is fit for purpose.

1432
1:09:28.720 --> 1:09:31.720
So have you got explainable software?

1433
1:09:31.720 --> 1:09:34.720
And maybe an S-bomb will help that argument.

1434
1:09:34.720 --> 1:09:38.720
It won't be sufficient, but it might help explain why

1435
1:09:38.720 --> 1:09:41.720
your software, why you think your software is suitable

1436
1:09:41.720 --> 1:09:43.720
because of your selection of your components,

1437
1:09:43.720 --> 1:09:47.720
you've got components of known pedigree, et cetera,

1438
1:09:47.720 --> 1:09:49.720
may help your argument.

1439
1:09:49.720 --> 1:09:52.720
But actually things like, yes, automated code generation,

1440
1:09:52.720 --> 1:09:54.720
which we all have if you have compilers,

1441
1:09:54.720 --> 1:09:56.720
because that's automatic code generation,

1442
1:09:56.720 --> 1:10:00.720
and we ultimately trust them.

1443
1:10:00.720 --> 1:10:04.720
So how do we put those different measures together

1444
1:10:04.720 --> 1:10:07.720
and collect that and recognize that?

1445
1:10:07.720 --> 1:10:10.720
Because obviously we've also got things like with, you know,

1446
1:10:10.720 --> 1:10:14.720
AI, machine learning things, as well, capturing the data,

1447
1:10:14.720 --> 1:10:16.720
how good is the training data, how good is the algorithm

1448
1:10:16.720 --> 1:10:19.720
within that, and can you understand why it made

1449
1:10:19.720 --> 1:10:21.720
that particular decision?

1450
1:10:21.720 --> 1:10:23.720
And I don't know whether you're going anywhere near that

1451
1:10:23.720 --> 1:10:25.720
with your safety.

1452
1:10:25.720 --> 1:10:28.720
So I think, yes, explainable software is possibly a

1453
1:10:28.720 --> 1:10:32.720
completely new topic.

1454
1:10:32.720 --> 1:10:34.720
It works for why you don't want to discuss that.

1455
1:10:34.720 --> 1:10:37.720
Yeah, yeah.

1456
1:10:37.720 --> 1:10:40.720
In another capacity, I've written multiple blog posts

1457
1:10:40.720 --> 1:10:44.720
about the GitHub copilot situation, including essay

1458
1:10:44.720 --> 1:10:47.720
that won a prize of some sort.

1459
1:10:47.720 --> 1:10:49.720
So I'd encourage you to read those because that's sort of

1460
1:10:49.720 --> 1:10:52.720
other issues about that, because there's a lot of issues there.

1461
1:10:52.720 --> 1:10:54.720
I think one of the fundamental issues that you're pointing out

1462
1:10:54.720 --> 1:10:57.720
is more general, and it's not specific to copilot.

1463
1:10:57.720 --> 1:11:01.720
It's that machine learning, generally speaking, as a

1464
1:11:01.720 --> 1:11:04.720
discipline, if you can call it that, is one of the most

1465
1:11:04.720 --> 1:11:07.720
unreproducible processes that we've ever invented

1466
1:11:07.720 --> 1:11:09.720
in computer science.

1467
1:11:09.720 --> 1:11:11.720
And so the reason you can't get an S-bomb out the other side

1468
1:11:11.720 --> 1:11:14.720
of a code generation system that uses machine learning is

1469
1:11:14.720 --> 1:11:16.720
because you can't reproduce anything in the machine

1470
1:11:16.720 --> 1:11:17.720
learning process.

1471
1:11:17.720 --> 1:11:20.720
Once you train that model, you don't really know why it's

1472
1:11:20.720 --> 1:11:22.720
doing, because at that point it's just a table of floating

1473
1:11:22.720 --> 1:11:23.720
point numbers.

1474
1:11:23.720 --> 1:11:26.720
And so that's something that we, I think, maybe we could all

1475
1:11:26.720 --> 1:11:29.720
work together on to be angry about machine learning systems

1476
1:11:29.720 --> 1:11:33.720
and machine learning researchers not caring about reproducibility

1477
1:11:33.720 --> 1:11:34.720
as an issue.

1478
1:11:34.720 --> 1:11:38.720
But the fact that, okay, yeah, good.

1479
1:11:38.720 --> 1:11:40.720
So one of the things we're doing in the next webinar

1480
1:11:40.720 --> 1:11:45.720
is that we're extending it through the handle data sets

1481
1:11:45.720 --> 1:11:48.720
along with computer parameters as well as AIM.

1482
1:11:48.720 --> 1:11:49.720
Right.

1483
1:11:49.720 --> 1:11:51.720
We've been working with AI researchers, AI experts,

1484
1:11:51.720 --> 1:11:54.720
and so forth in order to be able to capture the key information

1485
1:11:54.720 --> 1:11:58.720
so we can at least start to summarize these factors into

1486
1:11:58.720 --> 1:12:00.720
the index software.

1487
1:12:00.720 --> 1:12:01.720
Okay.

1488
1:12:01.720 --> 1:12:09.720
So the comment was that in SPDX version 3, we're going to have

1489
1:12:09.720 --> 1:12:13.720
AI and data profiles, which tries to capture this information

1490
1:12:13.720 --> 1:12:14.720
there.

1491
1:12:14.720 --> 1:12:20.720
Why do you think that AI cannot be done in a reproducible manner?

1492
1:12:20.720 --> 1:12:22.720
Now that's not done now, right?

1493
1:12:22.720 --> 1:12:26.720
But if you can record everything again, have recipes for

1494
1:12:26.720 --> 1:12:30.720
everything, do you think that the AI fundamentally cannot be

1495
1:12:30.720 --> 1:12:31.720
done in a...

1496
1:12:31.720 --> 1:12:32.720
No, no, no.

1497
1:12:32.720 --> 1:12:36.720
I think the decisions have been made for the history of machine

1498
1:12:36.720 --> 1:12:40.720
learning going back basically 25 years that have led us to this

1499
1:12:40.720 --> 1:12:41.720
point.

1500
1:12:41.720 --> 1:12:43.720
And there's a lot of, we have to reverse engineer the entirety

1501
1:12:43.720 --> 1:12:46.720
of the machine learning research history to get to reproducibility

1502
1:12:46.720 --> 1:12:49.720
for machine learning, unfortunately, because it wasn't taken

1503
1:12:49.720 --> 1:12:53.720
seriously as an issue early on, in part because of the amount

1504
1:12:53.720 --> 1:12:56.720
of processing power required to reproduce, right?

1505
1:12:56.720 --> 1:12:59.720
Because if you want to retrain something, the amount of compute

1506
1:12:59.720 --> 1:13:03.720
time you need to retrain is not available to most people.

1507
1:13:03.720 --> 1:13:04.720
Okay.

1508
1:13:04.720 --> 1:13:07.720
Question.

1509
1:13:07.720 --> 1:13:29.720
Okay.

1510
1:13:29.720 --> 1:13:39.720
So, I think it's a great correct way to process that.

1511
1:13:39.720 --> 1:13:44.720
There may be correct or incorrect, but there are no correct

1512
1:13:44.720 --> 1:13:50.720
or incorrect than the NARPH impact that is the IPR set up file

1513
1:13:50.720 --> 1:13:51.720
or else.

1514
1:13:51.720 --> 1:13:54.720
The comment was, sorry.

1515
1:13:54.720 --> 1:13:59.720
I wanted to just kind of add to what he's saying.

1516
1:13:59.720 --> 1:14:00.720
But I'll summarize it.

1517
1:14:00.720 --> 1:14:01.720
Yes.

1518
1:14:01.720 --> 1:14:03.720
So, he's saying that he was surprised by the number of

1519
1:14:03.720 --> 1:14:05.720
people, I think it was just one person that said they're

1520
1:14:05.720 --> 1:14:07.720
actually consuming S-bombs today.

1521
1:14:07.720 --> 1:14:09.720
Yeah.

1522
1:14:09.720 --> 1:14:13.720
And that he is in the project he maintains.

1523
1:14:13.720 --> 1:14:19.720
I think that you're not, you're just ahead of the curve,

1524
1:14:19.720 --> 1:14:20.720
probably.

1525
1:14:20.720 --> 1:14:22.720
Most people, their adoption today, if you talk to people who

1526
1:14:22.720 --> 1:14:26.720
are doing anything with S-bombs today, their adoption curve

1527
1:14:26.720 --> 1:14:30.720
looks like produce S-bomb, then maybe consume S-bomb, and then

1528
1:14:30.720 --> 1:14:34.720
maybe in the future I will incorporate the S-bombs that I'm

1529
1:14:34.720 --> 1:14:37.720
consuming into the product that I'm building or whatever,

1530
1:14:37.720 --> 1:14:38.720
right?

1531
1:14:38.720 --> 1:14:40.720
Whereas in the future, you know, let's say a year from now,

1532
1:14:40.720 --> 1:14:43.720
that may be a little bit reverse where people start consuming

1533
1:14:43.720 --> 1:14:45.720
S-bombs before they create their own S-bombs.

1534
1:14:45.720 --> 1:14:50.720
But today there's not enough people, there are no suppliers

1535
1:14:50.720 --> 1:14:54.720
producing S-bombs to be consumed, right?

1536
1:14:54.720 --> 1:14:56.720
That's the chicken and egg problem there.

1537
1:14:56.720 --> 1:14:58.720
I mean, that's what I'm seeing at least.

1538
1:14:58.720 --> 1:15:00.720
Does everybody know what you do when you have an egg?

1539
1:15:00.720 --> 1:15:05.720
So, Felipe, I should have raised my hand halfway to that

1540
1:15:05.720 --> 1:15:08.720
question because I've consumed S-bombs two to three times in

1541
1:15:08.720 --> 1:15:12.720
my life in the cases where under the copy left licenses,

1542
1:15:12.720 --> 1:15:15.720
like the GPL, we asked for the complete corresponding source

1543
1:15:15.720 --> 1:15:18.720
code, and in response to that request, they instead produced

1544
1:15:18.720 --> 1:15:21.720
an S-bomb, which is in fact not the complete corresponding

1545
1:15:21.720 --> 1:15:22.720
source code.

1546
1:15:22.720 --> 1:15:25.720
So I consumed it long enough to tell them this is not source

1547
1:15:25.720 --> 1:15:28.720
code, and they insisted, by the way, that a major compliance

1548
1:15:28.720 --> 1:15:31.720
industrial complex vendor had told them that that's what they

1549
1:15:31.720 --> 1:15:34.720
were supposed to give us if we ever asked for the source code.

1550
1:15:34.720 --> 1:15:36.720
Yeah.

1551
1:15:36.720 --> 1:15:38.720
Yeah, I just want to respond to that.

1552
1:15:38.720 --> 1:15:39.720
Just real quick.

1553
1:15:39.720 --> 1:15:40.720
Just real quick.

1554
1:15:40.720 --> 1:15:44.720
That's, okay, I agree that's unacceptable, but that's not an

1555
1:15:44.720 --> 1:15:45.720
S-bomb.

1556
1:15:45.720 --> 1:15:47.720
That's not a problem with S-bombs inherently.

1557
1:15:47.720 --> 1:15:50.720
That's not a problem with lawyers giving the wrong

1558
1:15:50.720 --> 1:15:54.720
information or people misunderstanding what the lawyer

1559
1:15:54.720 --> 1:15:55.720
told them.

1560
1:15:55.720 --> 1:15:58.720
Or, or, or maliciousness, yeah, it absolutely could be

1561
1:15:58.720 --> 1:15:59.720
maliciousness.

1562
1:15:59.720 --> 1:16:01.720
Delay, stone wall, right, yeah, yeah, yeah, yeah.

1563
1:16:01.720 --> 1:16:02.720
I was mainly...

1564
1:16:02.720 --> 1:16:04.720
Yeah, no, no, no, I just wanted to make a...

1565
1:16:04.720 --> 1:16:05.720
Yeah, yeah, yeah, I didn't want...

1566
1:16:05.720 --> 1:16:08.720
It just wasn't explicitly stated, so I just wanted to kind

1567
1:16:08.720 --> 1:16:09.720
of identify the issue.

1568
1:16:09.720 --> 1:16:13.720
For the record, I think no one here...

1569
1:16:13.720 --> 1:16:14.720
Yeah.

1570
1:16:14.720 --> 1:16:17.720
It seems that those bombs are replaced by...

1571
1:16:17.720 --> 1:16:18.720
Yeah.

1572
1:16:18.720 --> 1:16:21.720
We have to finish up pretty soon.

1573
1:16:21.720 --> 1:16:22.720
Yeah.

1574
1:16:22.720 --> 1:16:24.720
Just one comment on the using your phones.

1575
1:16:24.720 --> 1:16:27.720
I don't know if you can use that, but it's a good

1576
1:16:27.720 --> 1:16:30.720
discovery and we can shoot it, so it's not a problem.

1577
1:16:30.720 --> 1:16:33.720
It's a way of indicating the risk of balancing between

1578
1:16:33.720 --> 1:16:36.720
the developers, all the manufacturers, and the

1579
1:16:36.720 --> 1:16:37.720
people.

1580
1:16:37.720 --> 1:16:39.720
That's great.

1581
1:16:39.720 --> 1:16:40.720
Repeat that.

1582
1:16:40.720 --> 1:16:42.720
Okay, so I think what you're saying is, and you're

1583
1:16:42.720 --> 1:16:43.720
orange, I think?

1584
1:16:43.720 --> 1:16:47.720
Yeah, so you are producing and consuming internally

1585
1:16:47.720 --> 1:16:50.720
generated S-bombs.

1586
1:16:50.720 --> 1:16:54.720
So our last question is, what have you discovered?

1587
1:16:54.720 --> 1:16:56.720
I'm just talking.

1588
1:16:56.720 --> 1:16:57.720
Right, so as you are consuming...

1589
1:16:57.720 --> 1:16:59.720
Are you consuming the S-bombs?

1590
1:16:59.720 --> 1:17:03.720
What are you doing to help make decisions on your

1591
1:17:03.720 --> 1:17:04.720
design?

1592
1:17:04.720 --> 1:17:07.720
Are you saying, oh, there's a license missing, or oh,

1593
1:17:07.720 --> 1:17:09.720
I shouldn't be using that version.

1594
1:17:09.720 --> 1:17:13.720
We have a license missing and we find plenty of

1595
1:17:13.720 --> 1:17:16.720
we have licenses and some surprises over time.

1596
1:17:16.720 --> 1:17:19.720
Some surprising licenses and a little note

1597
1:17:19.720 --> 1:17:23.720
that much of a source of those kind of licenses.

1598
1:17:23.720 --> 1:17:26.720
And has that resulted in a change to your design,

1599
1:17:26.720 --> 1:17:28.720
or have you just...

1600
1:17:28.720 --> 1:17:31.720
Well, now and then we have to change libraries

1601
1:17:31.720 --> 1:17:34.720
that you use or they have, for commercial license.

1602
1:17:34.720 --> 1:17:35.720
Okay.

1603
1:17:35.720 --> 1:17:36.720
Oh, yeah.

1604
1:17:36.720 --> 1:17:38.720
Okay, well, that's good.

1605
1:17:38.720 --> 1:17:39.720
I think...

1606
1:17:39.720 --> 1:17:41.720
They have to publish all schools, but actually...

1607
1:17:41.720 --> 1:17:42.720
Yeah.

1608
1:17:42.720 --> 1:17:44.720
So that's probably quite an interesting...

1609
1:17:44.720 --> 1:17:48.720
You know, licensing is probably quite an interesting

1610
1:17:48.720 --> 1:17:51.720
use case for people to understand.

1611
1:17:51.720 --> 1:17:53.720
I think we've had quite a lot about licensing today,

1612
1:17:53.720 --> 1:17:56.720
which is really good.

1613
1:17:56.720 --> 1:17:58.720
I think there are plenty more.

1614
1:17:58.720 --> 1:17:59.720
I think we can all...

1615
1:17:59.720 --> 1:18:01.720
You know, I think that's what I think there's plenty

1616
1:18:01.720 --> 1:18:07.720
more to develop over the next month's years as we mature.

1617
1:18:07.720 --> 1:18:09.720
And I think actually, I think S-BOM...

1618
1:18:09.720 --> 1:18:11.720
If people start producing S-BOMs,

1619
1:18:11.720 --> 1:18:13.720
you're going to reveal a lot more than you...

1620
1:18:13.720 --> 1:18:17.720
You know, there's a lot of unknowns, I believe, in software.

1621
1:18:17.720 --> 1:18:21.720
And I think, are people starting to ask questions

1622
1:18:21.720 --> 1:18:22.720
of their suppliers?

1623
1:18:22.720 --> 1:18:24.720
And, you know, I'm probably looking at the large

1624
1:18:24.720 --> 1:18:26.720
organizations in this room.

1625
1:18:26.720 --> 1:18:28.720
Have you put things on your contracts that are now

1626
1:18:28.720 --> 1:18:32.720
asking your people to provide S-BOMs with your delivery,

1627
1:18:32.720 --> 1:18:35.720
as well as a delivery note and a release note?

1628
1:18:35.720 --> 1:18:39.720
Are people starting to do that and ask them, you know,

1629
1:18:39.720 --> 1:18:41.720
and probably to keep Bradley happy?

1630
1:18:41.720 --> 1:18:44.720
And are they also basically providing their compliance

1631
1:18:44.720 --> 1:18:47.720
against licenses?

1632
1:18:47.720 --> 1:18:50.720
Because if people start providing that as a starting

1633
1:18:50.720 --> 1:18:53.720
point, that's going to help your risk assessment when

1634
1:18:53.720 --> 1:18:55.720
you take S-BOMs off into a solution and then start

1635
1:18:55.720 --> 1:18:56.720
adding value to it.

1636
1:18:56.720 --> 1:18:59.720
That should be basically a real game changer for

1637
1:18:59.720 --> 1:19:01.720
businesses as well.

1638
1:19:01.720 --> 1:19:07.720
So maybe speaking for big companies, at the moment,

1639
1:19:07.720 --> 1:19:13.720
as we already have, it's an act of, you cannot force

1640
1:19:13.720 --> 1:19:18.720
our vendors to create a customer so that consumers,

1641
1:19:18.720 --> 1:19:21.720
we can politely ask them at the moment.

1642
1:19:21.720 --> 1:19:23.720
Maybe next year we can...

1643
1:19:23.720 --> 1:19:24.720
Yeah, yeah.

1644
1:19:24.720 --> 1:19:17.820
...

1645
1:19:25.720 --> 1:19:28.720
...

1646
1:19:28.720 --> 1:19:33.720
Yeah, he's saying that he's unable to force any vendor

1647
1:19:33.720 --> 1:19:36.720
or supplier in general to supply an S-BOM, which I

1648
1:19:36.720 --> 1:19:38.720
think is a big problem in general, right?

1649
1:19:38.720 --> 1:19:42.720
I mean, A, your vendor may be 10,000 times bigger than

1650
1:19:42.720 --> 1:19:44.720
you...well, not in your case, maybe not.

1651
1:19:44.720 --> 1:19:47.720
But for a lot of smaller operators, right, they don't

1652
1:19:47.720 --> 1:19:49.720
have the leverage over the vendor, right?

1653
1:19:49.720 --> 1:19:53.720
Or in the case of your consuming open source software,

1654
1:19:53.720 --> 1:19:56.720
like, they have no obligation to you at all, right?

1655
1:19:56.720 --> 1:20:00.720
They...I mean, we've seen...like, I totally agree.

1656
1:20:00.720 --> 1:20:03.720
Like, open source maintainers are already put upon enough,

1657
1:20:03.720 --> 1:20:04.720
right?

1658
1:20:04.720 --> 1:20:06.720
There's nobody that should put a gun to their head and

1659
1:20:06.720 --> 1:20:09.720
say, you have to produce an S-BOM for me to consume.

1660
1:20:09.720 --> 1:20:13.720
That's where the tooling has to get better, right?

1661
1:20:13.720 --> 1:20:16.720
Companies like GitHub could even, you know, advance

1662
1:20:16.720 --> 1:20:19.720
this a lot by making it much easier for project

1663
1:20:19.720 --> 1:20:22.720
maintainers to have those produced on a regular basis,

1664
1:20:22.720 --> 1:20:23.720
right?

1665
1:20:23.720 --> 1:20:27.720
Yeah, in my work in license compliance and

1666
1:20:27.720 --> 1:20:30.720
enforcement, the number of bad actors in your vendor

1667
1:20:30.720 --> 1:20:33.720
space is much higher than you probably realize.

1668
1:20:33.720 --> 1:20:36.720
And it's often not the vendor being bigger than you.

1669
1:20:36.720 --> 1:20:38.720
It's actually these small vendors who are...there's

1670
1:20:38.720 --> 1:20:41.720
only a couple, there's kind of a cartel, particularly,

1671
1:20:41.720 --> 1:20:43.720
I'm thinking of chip set, you know, chip set for

1672
1:20:43.720 --> 1:20:44.720
embedded devices vendors.

1673
1:20:44.720 --> 1:20:47.720
There is a major chip set that I'm sure there's

1674
1:20:47.720 --> 1:20:49.720
probably at least 30 devices in this room that use

1675
1:20:49.720 --> 1:20:50.720
that chip set.

1676
1:20:50.720 --> 1:20:54.720
The vendor requires you to agree before they will

1677
1:20:54.720 --> 1:20:56.720
ship you even a demo board.

1678
1:20:56.720 --> 1:20:59.720
You promise I will never ask for the complete

1679
1:20:59.720 --> 1:21:01.720
corresponding source code under the GPL and that's

1680
1:21:01.720 --> 1:21:04.720
the only way I'm going to send you a demo board.

1681
1:21:04.720 --> 1:21:06.720
If you become a customer, you're never allowed to

1682
1:21:06.720 --> 1:21:07.720
ask me for the source code.

1683
1:21:07.720 --> 1:21:09.720
Now, this is a GPL violation, but it's very hard to

1684
1:21:09.720 --> 1:21:12.720
catch because everybody who signs this agreement

1685
1:21:12.720 --> 1:21:14.720
says, I don't ever want to, like, tell anybody I

1686
1:21:14.720 --> 1:21:17.720
signed that agreement because they'll never sell me a

1687
1:21:17.720 --> 1:21:18.720
board again.

1688
1:21:18.720 --> 1:21:22.720
And so this optimism that we're going to get vendors

1689
1:21:22.720 --> 1:21:24.720
to give us S-bombs, where vendors are getting people

1690
1:21:24.720 --> 1:21:26.720
to sign those kinds of agreements, the idea that

1691
1:21:26.720 --> 1:21:28.720
you're going to get them in an agreement to agree to

1692
1:21:28.720 --> 1:21:31.720
give you an S-bomb, I think is probably a pipe dream

1693
1:21:31.720 --> 1:21:34.720
in the current industrial environment around embedded

1694
1:21:34.720 --> 1:21:35.720
chip set vendors at least.

1695
1:21:35.720 --> 1:21:37.720
I don't know about other industries, but the embedded

1696
1:21:37.720 --> 1:21:38.720
chip set vendors, I think that's the case.

1697
1:21:38.720 --> 1:21:39.720
It's not bad.

1698
1:21:39.720 --> 1:21:43.720
You don't have any embedded products.

1699
1:21:43.720 --> 1:21:49.720
We tell hardware companies that we would use the

1700
1:21:49.720 --> 1:21:51.720
chip set if the drivers are off-streaming.

1701
1:21:51.720 --> 1:21:52.720
Right.

1702
1:21:52.720 --> 1:21:53.720
Yeah.

1703
1:21:53.720 --> 1:21:55.720
Because this network is easier for us.

1704
1:21:55.720 --> 1:21:56.720
It's not easy.

1705
1:21:56.720 --> 1:21:57.720
Yeah, yeah, yeah.

1706
1:21:57.720 --> 1:21:58.720
Well, thank you for doing that.

1707
1:21:58.720 --> 1:21:59.720
Yeah.

1708
1:21:59.720 --> 1:22:04.720
So we're out of time.

1709
1:22:04.720 --> 1:22:07.720
Many thanks to the wonderful panel and all the audience.

1710
1:22:07.720 --> 1:22:13.720
Thank you, Alexios, for organizing.

1711
1:22:13.720 --> 1:22:14.720
Yeah, yeah.

1712
1:22:14.720 --> 1:22:15.720
Sure, definitely.

1713
1:22:15.720 --> 1:22:16.720
Come on.

1714
1:22:16.720 --> 1:22:17.720
That's good.

1715
1:22:17.720 --> 1:22:21.720
So we have one last session, which is an open Q&A on

1716
1:22:21.720 --> 1:22:27.720
everything S-bomb for whoever is interested and still alive.

1717
1:22:27.720 --> 1:22:56.720
Thank you.


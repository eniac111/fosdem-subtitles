WEBVTT

00:00.000 --> 00:22.680
So this session is a panel discussion by four or three people.

00:22.680 --> 00:26.160
And the basic idea that we're going to be discussing is the

00:26.160 --> 00:27.880
whole idea always bonds, right?

00:27.880 --> 00:33.520
Their usefulness, caveats of using them, and all these

00:33.520 --> 00:35.080
wonderful things.

00:35.080 --> 00:38.760
The rest of the day, everybody was talking about these

00:38.760 --> 00:43.560
bonds as like something that has to be there, and we all

00:43.560 --> 00:47.240
know what information has to be there.

00:47.240 --> 00:50.680
But maybe this is not so obvious to anyone, and the

00:50.680 --> 00:54.920
whole idea is to discuss the idea of these bonds.

00:54.920 --> 00:58.080
So we have, for the moment, three panelists.

00:58.080 --> 01:01.720
And the format will be that they will be doing a very

01:01.720 --> 01:09.680
short introduction of the problem statement, if you

01:09.680 --> 01:10.920
want, right.

01:10.920 --> 01:16.160
And then after these three short introductions, we'll go

01:16.160 --> 01:20.600
into more discussions, and we obviously will value audience

01:20.600 --> 01:21.880
participation.

01:21.880 --> 01:27.280
So first up.

01:27.280 --> 01:28.520
Right.

01:36.200 --> 01:38.560
Oh, right.

01:38.560 --> 01:41.080
OK, afternoon.

01:41.080 --> 01:43.840
My name's Anthony Harrison.

01:43.840 --> 01:46.680
I used to work for a very large system integrator, so the

01:46.680 --> 01:50.640
work on functional safety was very close at heart.

01:50.640 --> 01:53.200
And certainly they got things like the Siemens team as well,

01:53.200 --> 01:55.240
very similar to the sort of things I used to have been

01:55.240 --> 01:58.600
involved in for many years.

01:58.600 --> 02:01.800
I retired a few weeks, a few months ago.

02:01.800 --> 02:04.680
But before I left, I was trying to introduce S-bombs

02:04.680 --> 02:06.840
into my organization.

02:06.840 --> 02:11.320
And it was following very much on from the log4j, need,

02:11.320 --> 02:14.440
where was the components, which systems were affected,

02:14.440 --> 02:18.360
which customers needed to be informed, and where was our

02:18.360 --> 02:21.520
liability, very much from a risk perspective.

02:21.520 --> 02:26.160
So since I've retired, I've been writing Python tools.

02:26.160 --> 02:28.240
So if you want to talk about me about some of the Python

02:28.240 --> 02:30.120
tools I've been doing, because it's been quite interesting,

02:30.120 --> 02:32.040
have a chat with me afterwards.

02:32.040 --> 02:39.760
But to sort of set the scene, I think we've got four types

02:39.760 --> 02:42.000
of users.

02:42.000 --> 02:47.000
And it picks up on what Adolfo was saying about who's a

02:47.000 --> 02:53.280
supplier, is a supplier a developer, is it, I've put the

02:53.280 --> 02:55.240
word supplier in there, but basically someone who

02:55.240 --> 02:56.520
packages things together.

02:56.520 --> 02:58.680
It might be an embedded solution.

02:58.680 --> 02:59.720
It might be a red hat.

02:59.720 --> 03:04.000
It might be someone else.

03:04.000 --> 03:05.880
And then you've got your integrators, which is like

03:05.880 --> 03:09.760
your Siemens, people who are selling solutions to an end

03:09.760 --> 03:12.920
user who's going to use it.

03:12.920 --> 03:16.480
And I believe that if you are a producer of S-bombs, you

03:16.480 --> 03:20.360
also should be a consumer of S-bombs, first and foremost,

03:20.360 --> 03:23.440
because there should be value to you in what you are

03:23.440 --> 03:26.400
producing, and you need to know where your

03:26.400 --> 03:29.160
vulnerabilities are, whether you're compliant with your

03:29.160 --> 03:32.880
licenses, as we've had lots of discussion about, but also

03:32.880 --> 03:34.920
where are things changing?

03:34.920 --> 03:36.960
Particularly, do you know those changes?

03:36.960 --> 03:41.480
Are those changing happening under your control or not?

03:41.480 --> 03:44.320
And this comes into the ecosystems, things happening

03:44.320 --> 03:47.480
outside, you may even be repositories, et cetera.

03:47.480 --> 03:50.880
So the first thing is, I think everybody who's a

03:50.880 --> 03:53.880
consumer, everyone who's a generator, should also be

03:53.880 --> 03:54.400
consuming.

03:54.400 --> 03:56.960
So if you've seen some of the questions I've asking this

03:56.960 --> 03:59.640
morning was when the Octo guys were saying they're

03:59.640 --> 04:04.120
generating an S-bdx, S-bomb, are they actually using it?

04:04.120 --> 04:07.720
I think the answer is most definitely yes, you should be.

04:07.720 --> 04:10.400
And then what are the sort of things you should be using it

04:10.400 --> 04:11.200
for?

04:11.200 --> 04:14.120
We've heard a lot about vulnerability management.

04:14.120 --> 04:17.480
On the basis, that's heavily dependent on the quality of

04:17.480 --> 04:18.200
US-bombs.

04:18.200 --> 04:22.360
Have you got your components uniquely identified in a way

04:22.360 --> 04:25.520
that it can be found consistently?

04:25.520 --> 04:29.440
Secondly, looking at license management, again, are we

04:29.440 --> 04:31.520
consistent?

04:31.520 --> 04:35.600
But thirdly, looking at the change management, are

04:35.600 --> 04:37.800
versions of packages changing?

04:37.800 --> 04:39.280
Are licenses changing?

04:39.280 --> 04:42.560
I was turning to Kate on an open source project I'm

04:42.560 --> 04:45.520
involved in, we generate an S-bomb every week, and we do a

04:45.520 --> 04:49.520
build, and we are seeing components changing versions,

04:49.520 --> 04:53.120
and the metadata is changing with those versions.

04:53.120 --> 04:55.280
Sometimes it's getting worse.

04:55.280 --> 04:58.160
So why have we lost the name of the supplier or the

04:58.160 --> 04:59.880
developer?

04:59.880 --> 05:01.600
And fourthly, I think you should be using it for

05:01.600 --> 05:03.000
solution integrity.

05:03.000 --> 05:05.440
Have you built what you said you've gone to design?

05:05.440 --> 05:10.240
So we're picking up on the design S-bomb that Nico was

05:10.240 --> 05:11.960
talking about from the safety.

05:11.960 --> 05:14.640
I think that would be really good to actually use the S-bombs

05:14.640 --> 05:16.400
as part of a solution integrity.

05:16.400 --> 05:18.120
Have you built what you said you were going to build?

05:18.120 --> 05:19.960
We saw a lot of that things with the checksums from the

05:19.960 --> 05:22.120
Octo guys.

05:22.120 --> 05:25.480
Have we got end of life components?

05:25.480 --> 05:28.280
Are we planning for removing those end of life

05:28.280 --> 05:30.280
components, obsolete components?

05:30.280 --> 05:32.880
And are we seeing the impact of those changes on the

05:32.880 --> 05:38.640
solution comes back onto the engineering lifecycle?

05:38.640 --> 05:42.360
So I think all of it is supporting risk.

05:42.360 --> 05:45.400
So ultimately, this is all about risk management.

05:45.400 --> 05:49.200
And hopefully, S-bomb and all these are helping you make

05:49.200 --> 05:50.440
effective decisions.

05:53.640 --> 05:56.480
Now I'll shut up now.

05:56.480 --> 06:00.280
But the thing just to try and just shape things for

06:00.280 --> 06:01.520
discussion.

06:01.520 --> 06:03.800
All right.

06:03.800 --> 06:05.120
Thanks.

06:05.120 --> 06:07.520
My name's Paul Noveris.

06:07.520 --> 06:10.800
I'm a solutions engineer for a company called Anchor.

06:10.800 --> 06:15.800
We produce a couple of open source projects that A, can

06:15.800 --> 06:19.680
produce S-bombs in some cases, do vulnerability checks

06:19.680 --> 06:22.440
against them so you can look up SIFT and GRIPE.

06:22.440 --> 06:24.160
I'm not going to talk specifically about any

06:24.160 --> 06:25.560
particular project.

06:25.560 --> 06:27.120
I'm going to talk about the S-bombs.

06:27.120 --> 06:29.320
I'm going to talk about the S-bombs.

06:29.320 --> 06:32.120
I'm not going to talk specifically about any

06:32.120 --> 06:32.840
particular projects here.

06:32.840 --> 06:38.720
So just to hit on the topic of the panel, I'm going to just

06:38.720 --> 06:40.680
jump into a couple of things.

06:40.680 --> 06:44.200
Oh, well, what I do there, I'm out in the field.

06:44.200 --> 06:46.640
So I am a solutions architect.

06:46.640 --> 06:51.600
I'm working directly with the end users a lot of the times.

06:51.600 --> 06:55.280
So most of my contact is with people who are on the

06:55.280 --> 06:57.480
beginning of the learning curve.

06:57.480 --> 07:00.280
They may not even know what an S-bomb is the first time I

07:00.280 --> 07:03.160
talked to them, but they've been given

07:03.160 --> 07:04.320
marching orders.

07:04.320 --> 07:10.600
So it spans a pretty wide range.

07:10.600 --> 07:14.680
So as far as content, the biggest thing for me is that

07:14.680 --> 07:18.680
the S-bomb, and this seems to be somewhat of a

07:18.680 --> 07:20.960
controversial statement sometimes, but the S-bomb

07:20.960 --> 07:24.400
needs to be seen as a objective document that only

07:24.400 --> 07:27.200
has factual information in it.

07:27.200 --> 07:30.440
And does not have judgments in it.

07:30.440 --> 07:34.600
Those things are important, but should be separated out a

07:34.600 --> 07:37.880
lot of the times.

07:37.880 --> 07:40.040
A lot of people probably haven't been in here all day,

07:40.040 --> 07:43.160
but there have been off and on comments about should we

07:43.160 --> 07:47.520
include CVEs in an S-bomb.

07:47.520 --> 07:49.520
My opinion is probably not because those are going to

07:49.520 --> 07:55.440
change more than the software that the S-bomb describes.

07:55.440 --> 07:59.760
Obviously, if you rebuild the piece of software, then you

07:59.760 --> 08:01.000
would want to build a new S-bomb.

08:01.000 --> 08:04.320
But the S-bomb should be static as long as the software

08:04.320 --> 08:05.920
it's describing is static.

08:05.920 --> 08:10.160
So in the case of a Docker image, we know when that

08:10.160 --> 08:14.200
changes because the image digest would change.

08:14.200 --> 08:15.640
We could trigger a new build.

08:15.640 --> 08:18.700
But we shouldn't necessarily be rebuilding those S-bombs

08:18.700 --> 08:20.880
continually if there's nothing new there.

08:20.880 --> 08:24.200
Now, that ignores things like maybe our scanner has gotten

08:24.200 --> 08:26.600
better and can detect more things, obviously.

08:26.600 --> 08:30.880
That might be an exception to that kind of rule.

08:30.880 --> 08:35.320
The other thing, just as far as content goes, the first

08:35.320 --> 08:39.600
thing we mentioned today, the specs, whether it's SPDX,

08:39.600 --> 08:42.960
Cyclone DX, are extremely loose.

08:42.960 --> 08:46.000
You can have a valid S-bomb that doesn't actually have

08:46.000 --> 08:47.760
enough information to be useful for your

08:47.760 --> 08:49.000
particular use case.

08:49.000 --> 08:52.760
And what that minimum amount of useful information is might be

08:52.760 --> 08:55.360
different depending on the use case.

08:55.360 --> 08:58.160
So there's just something to keep in mind.

08:58.160 --> 09:01.880
The other thing that's come up again and again today, the

09:01.880 --> 09:04.260
quality of the S-bomb is going to be really dependent on

09:04.260 --> 09:05.720
the tooling.

09:05.720 --> 09:07.920
There's no way to do these things without

09:07.920 --> 09:10.040
automation at scale.

09:10.040 --> 09:12.400
It's just too difficult to keep up with.

09:12.400 --> 09:14.920
The tooling is improving, but still a

09:14.920 --> 09:16.160
long way to go, I think.

09:16.160 --> 09:25.960
So usefulness, the main thing here for me is the S-bomb is

09:25.960 --> 09:28.880
useful because it's going to make all the other aspects of

09:28.880 --> 09:31.920
supply chain security better.

09:31.920 --> 09:34.920
So one, what's in the software?

09:34.920 --> 09:35.800
That's the S-bomb.

09:35.800 --> 09:38.040
It's kind of foundational to all the other aspects.

09:38.040 --> 09:42.720
Two would be things like, is the software safe to use?

09:42.720 --> 09:44.360
Does it have vulnerabilities?

09:44.360 --> 09:46.120
What are those vulnerabilities?

09:46.120 --> 09:48.080
What is my license?

09:48.080 --> 09:51.800
Am I at risk for some kind of compliance issue there?

09:51.800 --> 09:54.480
Those kind of safety issues, whether you, I don't want to

09:54.480 --> 09:56.320
use that term after seeing the

09:56.320 --> 09:59.880
operational safety discussion.

09:59.880 --> 10:03.760
The other thing, provenance, where is this coming from?

10:03.760 --> 10:07.240
If you know what's in that software, having that

10:07.240 --> 10:10.280
assurance of where it comes from and what's in there

10:10.280 --> 10:13.200
together is much more powerful.

10:13.200 --> 10:16.120
And then things like reproducibility.

10:16.120 --> 10:18.920
It's really esoteric, very difficult to actually achieve

10:18.920 --> 10:21.200
in practice.

10:21.200 --> 10:24.400
But if you have an S-bomb, a high quality S-bomb, it can be

10:24.400 --> 10:26.840
effectively a recipe towards that.

10:26.840 --> 10:29.960
And that can also help you prove some of the other things

10:29.960 --> 10:32.200
that you've seen or we've been talking about.

10:35.120 --> 10:37.480
A lot of this is difficult, though.

10:37.480 --> 10:39.600
We've seen a lot of things about opaque artifacts and

10:39.600 --> 10:43.600
things, the difficulty of actually scanning at build time,

10:43.600 --> 10:48.000
which may produce a higher quality S-bomb, but at a lot

10:48.000 --> 10:50.800
of costs, performance and other things.

10:50.800 --> 10:54.960
So that kind of leads us into the caveats.

10:54.960 --> 10:59.480
The main thing here is to keep in mind that our imagined

10:59.480 --> 11:04.640
state of how we want things to be and the actual reality are

11:04.640 --> 11:07.240
basically not the same at all.

11:07.240 --> 11:08.840
We'll try to move towards that.

11:08.840 --> 11:10.080
We're on a journey up the mountain,

11:10.080 --> 11:10.840
whatever you want to say.

11:10.840 --> 11:13.960
We're probably, like if you're climbing Mount Everest, we

11:13.960 --> 11:16.160
probably haven't even gotten to base camp yet.

11:16.160 --> 11:18.920
So there's a long way to go.

11:18.920 --> 11:22.080
But the other thing, in that realm, just declaring we have

11:22.080 --> 11:28.760
a policy to produce or store or evaluate S-bombs doesn't

11:28.760 --> 11:31.680
actually solve the problems you're trying to solve.

11:31.680 --> 11:33.800
There's a lot more work that has to be done.

11:33.800 --> 11:37.800
And the last thing on caveats, things like log for shell, I

11:37.800 --> 11:45.040
think pushed S-bombs into a lot of people's awareness,

11:45.040 --> 11:50.560
because S-bombs were a very effective way of finding where

11:50.560 --> 11:54.400
log for shell was affecting software.

11:54.400 --> 11:57.680
It may have given kind of a false sense of security, just

11:57.680 --> 12:01.080
because log for J in particular sticks out like a sore thumb.

12:01.080 --> 12:02.560
It's very easy to find.

12:02.560 --> 12:05.680
Things like the open SSL vulnerability just a couple of

12:05.680 --> 12:08.720
months ago, I think, may have been a reality check there.

12:08.720 --> 12:12.280
There are a lot of cases where you might have something like

12:12.280 --> 12:16.400
open SSL in software that you're consuming without

12:16.400 --> 12:18.040
even knowing it.

12:18.040 --> 12:21.000
It's a lot easier to hide.

12:21.000 --> 12:23.960
So just kind of a reality check, bring some people back

12:23.960 --> 12:25.520
to Earth a little bit.

12:25.520 --> 12:28.760
And then the last thing is just, in addition to producing

12:28.760 --> 12:31.880
S-bombs, one caveat is you have to think about managing

12:31.880 --> 12:34.600
them after you produce them, storing them, being able to

12:34.600 --> 12:39.080
search them, purge the ones you don't need anymore.

12:39.080 --> 12:41.080
That's been a topic of a couple of times.

12:41.080 --> 12:43.360
We don't want to keep more information than we really

12:43.360 --> 12:49.040
need, so how do we know when it's safe or reasonable to get

12:49.040 --> 12:51.920
rid of some of this data?

12:51.920 --> 12:54.200
Much less, how are we going to search through it when we need

12:54.200 --> 12:56.400
to find it?

12:56.400 --> 12:57.720
I think that covers it for now.

12:57.720 --> 13:01.680
I'll go ahead and pick them up over time anyway.

13:01.680 --> 13:04.960
Thank you.

13:04.960 --> 13:12.040
Like you, I've attended more panels than I've been on, and

13:12.040 --> 13:15.360
I don't like a panel that is a series of talks.

13:15.360 --> 13:18.720
And I did hear Alexo say that I needed to make a very brief

13:18.720 --> 13:21.800
introduction, so I promise I'm timing here.

13:21.800 --> 13:24.280
I'll be under 2 and 1,500 minutes.

13:24.280 --> 13:26.400
My favorite childhood, I'm Bradley Kuhn.

13:26.400 --> 13:29.240
I work for an organization, a charity called the Software

13:29.240 --> 13:30.880
Freedom Conservancy.

13:30.880 --> 13:34.840
I've been, my primary job has been related to copy left

13:34.840 --> 13:38.040
license compliance since 1997.

13:38.040 --> 13:43.160
And so I've seen a lot with regard to that issue, which

13:43.160 --> 13:47.240
does interact quite frequently with the issue that you are

13:47.240 --> 13:51.200
here to discuss today of software bills and materials.

13:51.200 --> 13:53.800
My favorite childhood story, by the way, is the story of the

13:53.800 --> 13:55.520
emperor has no clothes.

13:55.520 --> 13:58.920
And I found throughout my career in open source and free

13:58.920 --> 14:02.280
software that I'm often the only one willing to say that

14:02.280 --> 14:04.120
our emperors have no clothes.

14:04.120 --> 14:07.120
I think S-Bombs is a case where that needs to be said,

14:07.120 --> 14:10.680
at least to a certain extent.

14:10.680 --> 14:16.400
The most useful application of S-Bombs is in cases where you

14:16.400 --> 14:21.000
are in an organization that produces proprietary and open

14:21.000 --> 14:23.640
source software together in products.

14:23.640 --> 14:27.280
If you are an organization that is 100% open source and free

14:27.280 --> 14:31.200
software and choose a copy left license, your usefulness of

14:31.200 --> 14:34.640
S-Bombs is extremely limited, almost to the point that you

14:34.640 --> 14:38.000
may not even want to invest in getting involved in this kind

14:38.000 --> 14:38.560
of thing.

14:38.560 --> 14:40.560
Now I'm a realist and realize that almost all of you

14:40.560 --> 14:42.720
probably work for organizations, including the

14:42.720 --> 14:45.480
trade associations among you, that produce lots of

14:45.480 --> 14:47.120
proprietary software.

14:47.120 --> 14:49.280
As such, you're going to have to worry about all these

14:49.280 --> 14:50.520
issues we've been hearing about today.

14:50.520 --> 14:53.160
Many of the tools today look very interesting to me to

14:53.160 --> 14:55.160
solve those kinds of problems.

14:55.160 --> 14:58.880
But I want to leave you with one thought, if I can.

14:58.880 --> 15:02.560
That is, imagine if there was no proprietary software in your

15:02.560 --> 15:06.280
organization, that you didn't sell it, you didn't use it, and

15:06.280 --> 15:08.400
you didn't want to make it.

15:08.400 --> 15:12.400
And instead, you chose to look at the requirements of the

15:12.400 --> 15:16.160
copy left licenses, like the GPL, which require you to

15:16.160 --> 15:20.400
produce the complete corresponding source code as a

15:20.400 --> 15:23.880
reproducible build every time you produce a binary.

15:23.880 --> 15:25.520
And you have to make that available to every customer

15:25.520 --> 15:27.400
you have.

15:27.400 --> 15:31.720
S-bombs are most often needed when you don't necessarily

15:31.720 --> 15:34.640
have all the source code to hand, or don't know if it's

15:34.640 --> 15:37.880
going to be to hand when you get something

15:37.880 --> 15:39.560
from another vendor.

15:39.560 --> 15:42.360
So my argument is that the level of effort that's being

15:42.360 --> 15:46.000
put into S-bombs is primarily to enable the continued

15:46.000 --> 15:48.680
production of proprietary software.

15:48.680 --> 15:51.120
Being a FOSDEM and being a free software activist my

15:51.120 --> 15:54.320
whole career, that's generally not something that I'm that

15:54.320 --> 15:56.480
excited about, which is why I'm not

15:56.480 --> 15:57.720
excited about S-bombs.

16:08.440 --> 16:13.040
OK, so we heard of any statements about uses, about

16:13.040 --> 16:20.720
general use and caveats of using them, and why they're

16:20.720 --> 16:22.240
not needed.

16:22.240 --> 16:25.200
In an ideal world, they're not needed.

16:25.200 --> 16:30.400
OK, let's go back to that.

16:30.400 --> 16:37.360
Broadly, even if in an ideal world where an organization is

16:37.360 --> 16:42.520
producing free and open source software and following license

16:42.520 --> 16:46.520
obligations, they provide all the source for every release

16:46.520 --> 16:48.160
they're doing.

16:48.160 --> 16:52.560
There might still be the use case that I want to find out

16:52.560 --> 16:55.640
which of my releases, slash products, or whatever you want

16:55.640 --> 17:00.920
to call them, contain a version of a library.

17:00.920 --> 17:03.440
Right.

17:03.440 --> 17:05.360
So if you have a lot of source code, there's this great tool

17:05.360 --> 17:06.840
called grep.

17:06.840 --> 17:10.000
And what you can do is you can search the entire source code

17:10.000 --> 17:13.080
and look if a version of something is in there.

17:13.080 --> 17:16.080
If you have all the source code for everything, and you

17:16.080 --> 17:19.280
never separate the source from the binary, why does grep

17:19.280 --> 17:19.680
not work?

17:19.680 --> 17:20.600
You tell me.

17:20.600 --> 17:23.080
Because it's easier to search a table of contents than the

17:23.080 --> 17:24.480
complete book.

17:24.480 --> 17:27.280
That's why we have table of contents and indexes.

17:30.280 --> 17:33.040
Since things have become electronic, I generally just

17:33.040 --> 17:35.400
search the PDF of the text in grep anymore.

17:35.400 --> 17:36.400
I don't use table of contents.

17:36.400 --> 17:37.440
Really?

17:37.440 --> 17:39.880
OK.

17:39.880 --> 17:42.960
OK, so we have a source file.

17:42.960 --> 17:45.880
I used to write C. I used to be full of hash.

17:45.880 --> 17:47.320
If defs.

17:47.320 --> 17:50.800
So how do I, if I search the source code, I will find a

17:50.800 --> 17:52.040
line of code.

17:52.040 --> 17:54.400
But it's not telling me whether that line of code was

17:54.400 --> 17:58.920
actually compiled into the binary and now actually on my

17:58.920 --> 18:02.480
architecture and target hardware.

18:02.480 --> 18:05.640
So how do we get around that?

18:05.640 --> 18:11.880
So we've talked about having a trail of evidence from the

18:11.880 --> 18:15.560
source code to a binary so we can then match the two

18:15.560 --> 18:17.840
together.

18:17.840 --> 18:19.880
If we have different compile options, I would expect we'll

18:19.880 --> 18:22.320
get different binaries, I hope.

18:22.320 --> 18:26.360
So therefore, how do we accommodate that?

18:26.360 --> 18:28.680
Just to keep the argument going.

18:28.680 --> 18:29.280
I'd love to.

18:29.280 --> 18:32.320
And so in the world I'm imagining, which

18:32.320 --> 18:33.680
does not exist, I agree with you.

18:33.680 --> 18:34.880
This is why you have to do this work.

18:34.880 --> 18:37.120
Because the world that I've been working towards my whole

18:37.120 --> 18:38.360
career doesn't exist.

18:38.360 --> 18:42.320
But if it did, and all software was under the ephiro GPL,

18:42.320 --> 18:45.120
you would be required every time you build a binary to

18:45.120 --> 18:47.280
make sure you had a reproducible build that can

18:47.280 --> 18:48.640
produce that binary.

18:48.640 --> 18:51.520
So when you found a vulnerability in that binary,

18:51.520 --> 18:54.480
you would have stored the complete corresponding source

18:54.480 --> 18:56.680
release right next to all the binaries.

18:56.680 --> 18:58.800
You take the binary that's sitting out in the field, you

18:58.800 --> 19:01.760
compare the checksum to the binary in your repository of

19:01.760 --> 19:04.040
binaries and source code, and voila, there's your source

19:04.040 --> 19:05.360
code release that you made at the time you

19:05.360 --> 19:06.920
build it years ago.

19:06.920 --> 19:08.160
Simple enough.

19:11.080 --> 19:12.040
I mean, I get it, right?

19:12.040 --> 19:16.440
Yes, theoretically, we should be able to reproduce

19:16.440 --> 19:17.760
everything 100%.

19:17.760 --> 19:24.120
But in practice, we don't do things like inspect every jar

19:24.120 --> 19:26.480
of food that's coming off the assembly line.

19:26.480 --> 19:30.000
We only inspect some of them just for

19:30.000 --> 19:32.280
scalability purposes.

19:32.280 --> 19:36.680
So the S-bomb still has a value there in providing a

19:36.680 --> 19:40.800
shortcut so that you don't have to do a bunch of work

19:40.800 --> 19:43.240
over and over and over again on demand every time.

19:46.440 --> 19:47.040
I get it, though.

19:47.040 --> 19:47.680
You're right.

19:47.680 --> 19:52.720
In an ideal universe, that would be true.

19:52.720 --> 19:56.360
We have unlimited time, unlimited compute resources to

19:56.360 --> 19:58.840
do all these reproducible builds.

19:58.840 --> 20:02.520
In practice, though, even if there aren't constraints on

20:02.520 --> 20:07.600
time and compute resource, reproducible builds are

20:07.600 --> 20:14.120
extremely limited in, you know, I mean, it takes a lot of

20:14.120 --> 20:15.120
replacement for reproducible builds.

20:15.120 --> 20:16.280
No, no, no, no.

20:16.280 --> 20:22.160
But they can approximate a lot of what you would get out of

20:22.160 --> 20:23.160
it, not everything.

20:23.160 --> 20:24.120
No, not everything.

20:24.120 --> 20:27.120
But you can approximate some things, right?

20:27.120 --> 20:36.400
So I don't, I mean, I agree with you in principle that

20:36.400 --> 20:38.840
reproducible builds would prove a lot of things,

20:38.840 --> 20:39.920
everything, right?

20:39.920 --> 20:42.080
That would absolutely solve a lot of problems.

20:42.080 --> 20:46.200
But I don't know if everybody is really willing to do, to

20:46.200 --> 20:47.440
live in that world.

20:50.520 --> 20:52.480
My view is be the change you want to be in the world.

20:52.480 --> 20:54.960
That's why I support what the bill is instead of investing

20:54.960 --> 20:55.800
in S-bomb.

20:55.800 --> 20:56.800
No.

20:56.800 --> 21:02.600
I think part of our disagreement here of

21:02.600 --> 21:06.120
different views is the slide that Kate showed in the

21:06.120 --> 21:10.560
beginning, that we're not talking about an S-bomb.

21:10.560 --> 21:13.120
There are different types of S-bombs, right?

21:13.120 --> 21:16.920
And there are S-bombs that apply to the source, and there

21:16.920 --> 21:23.840
are S-bombs showing what the build is or what the deploy

21:23.840 --> 21:26.640
thing is, and stuff like that, right?

21:26.640 --> 21:29.720
Now, to Bradley's point, once you have everything

21:29.720 --> 21:33.400
documented and provided, people can recreate this

21:33.400 --> 21:36.760
information, right?

21:36.760 --> 21:41.520
So the grip example that Bradley said, this is looking

21:41.520 --> 21:43.040
at the source, right?

21:43.040 --> 21:47.240
But if the obligations are, we don't only give the source,

21:47.240 --> 21:49.560
but also the build instructions and all the

21:49.560 --> 21:55.120
scripts that the license obligations require, right?

21:55.120 --> 22:00.200
So people can go and recreate it and then try to find out

22:00.200 --> 22:02.360
this formation, right?

22:02.360 --> 22:05.560
But so the information will be there, right?

22:05.560 --> 22:10.600
The question is how easy we want you to have, right?

22:10.600 --> 22:11.840
Sorry, you wanted to.

22:11.840 --> 22:14.040
Yeah.

22:14.040 --> 22:14.840
You?

22:14.840 --> 22:17.040
I want to take questions.

22:17.040 --> 22:17.960
All right.

22:17.960 --> 22:18.440
Yeah.

22:18.440 --> 22:18.920
Let's try.

22:18.920 --> 22:20.000
Maybe one more.

22:20.000 --> 22:23.120
So I think I completely agree with you that it is better to

22:23.120 --> 22:27.080
take such decisions on the sources.

22:27.080 --> 22:31.120
But what is missing to do this is that the current

22:31.120 --> 22:34.680
vulnerability databases that we have, only reference

22:34.680 --> 22:39.080
vulnerabilities in giving it names, naming components.

22:39.080 --> 22:41.480
So there is a link missing about the vulnerability is

22:41.480 --> 22:45.080
present in this file, in this function, with this method

22:45.080 --> 22:47.440
signature, and so forth.

22:47.440 --> 22:50.560
And so I do not know what you want to search for.

22:50.560 --> 22:53.880
If you only search for CPP, blah, blah, blah, you will not

22:53.880 --> 22:57.840
be able to catch all instances of the vulnerable code,

22:57.840 --> 23:00.200
because maybe a product has been trapped.

23:00.200 --> 23:03.320
We named the code has been founded, and so forth.

23:03.320 --> 23:06.360
So that is, I think, lacking.

23:06.360 --> 23:06.600
OK.

23:06.600 --> 23:11.000
So the comment was that, for example, vulnerability

23:11.000 --> 23:15.400
information does not usually refer to specific source files

23:15.400 --> 23:17.400
and lines on the source file.

23:17.400 --> 23:22.000
But it refers to product names or library names or whatever.

23:22.000 --> 23:26.320
So in order to find something, you have to look for these,

23:26.320 --> 23:31.880
right, and not for the fine grain that we're talking about

23:31.880 --> 23:33.800
in a grip part.

23:33.800 --> 23:35.600
Right.

23:35.600 --> 23:37.120
Yeah.

23:37.120 --> 23:39.280
Thomas.

23:39.280 --> 23:43.520
So I know we talked a lot about S-Robot security and licensing.

23:43.520 --> 23:45.960
But funny enough, how Oort started

23:45.960 --> 23:50.320
had nothing to do with our licensing history at all.

23:50.320 --> 23:53.320
We basically wanted the CTO to have a method.

23:53.320 --> 23:55.680
What software are we using in general?

23:55.680 --> 23:58.360
What are open source proprietary?

23:58.360 --> 24:00.680
So we, as a whole organization, can see,

24:00.680 --> 24:03.720
even all of our sources can see the other edge of what

24:03.720 --> 24:05.240
are we doing and where can we go more

24:05.240 --> 24:07.640
efficient and where should we invest in the leverage

24:07.640 --> 24:09.160
that we should be done.

24:09.160 --> 24:12.240
And by doing them all as goals and having all the stuff,

24:12.240 --> 24:14.160
we actually still want to reduce it.

24:14.160 --> 24:17.080
And then we actually directed these in your organization.

24:17.080 --> 24:20.280
We're like, OK, yeah, you guys are using Ruby.

24:20.280 --> 24:21.680
You guys are using Java.

24:21.680 --> 24:24.120
Actually, we are all standardized in this.

24:24.120 --> 24:28.040
Actually, the company actually saved a lot of money.

24:28.040 --> 24:28.960
But this is organized.

24:28.960 --> 24:30.560
So again, this is often forgotten

24:30.560 --> 24:33.560
that S-Bombs can be a great way to basically

24:33.560 --> 24:36.720
build your building software more efficient.

24:36.720 --> 24:39.000
And that alone for that, I would build S-Bombs, even

24:39.000 --> 24:41.120
if by COVID's complete deal of source.

24:41.120 --> 24:41.600
All right.

24:41.600 --> 24:43.800
So repeating for the mic, sorry.

24:43.800 --> 24:47.120
The comment was that S-Bombs, while we're

24:47.120 --> 24:50.040
talking about uses in compliance and security,

24:50.040 --> 24:52.840
can also be used in a lot of other ways

24:52.840 --> 24:55.560
and can be very useful in this strategy.

24:55.560 --> 24:58.160
For example, having a software catalog of components

24:58.160 --> 25:01.520
being used by different parts of the company.

25:01.520 --> 25:02.200
Sorry, Anton.

25:02.200 --> 25:05.200
Couldn't I give you a second, right?

25:05.200 --> 25:05.680
No.

25:05.680 --> 25:08.080
I know.

25:08.080 --> 25:10.600
So I totally agree, Thomas.

25:10.600 --> 25:13.880
I think certainly the larger organizations,

25:13.880 --> 25:15.680
I think we probably got that discussion a bit

25:15.680 --> 25:16.840
with Siemens this morning.

25:16.840 --> 25:19.000
No criticism.

25:19.000 --> 25:23.120
Big organizations have very difficult to share things.

25:23.120 --> 25:26.040
And so if you had S-Bombs of your build

25:26.040 --> 25:30.760
and then started having a way of identifying common building

25:30.760 --> 25:34.040
blocks, I will hesitate to say the word products,

25:34.040 --> 25:38.200
or different instances of the same product,

25:38.200 --> 25:41.000
then yes, there must be some business opportunities

25:41.000 --> 25:45.120
to, A, save money, or B, be more efficient.

25:45.120 --> 25:47.960
And I don't know whether anyone is starting to see that

25:47.960 --> 25:48.680
or starting to say that.

25:48.680 --> 25:50.760
I don't know whether you started seeing that, Thomas,

25:50.760 --> 25:52.920
with your and your own industry.

25:52.920 --> 25:56.280
So just to be clear, I now work on Alpin, Finos,

25:56.280 --> 25:58.280
to see how we can build S-Bombs for them.

25:58.280 --> 26:00.760
All of their code is fully open.

26:00.760 --> 26:02.960
If you had an S-Bomb, then you can also

26:02.960 --> 26:04.560
see where are people contributing.

26:04.560 --> 26:06.800
Because we can resolve every project to sources.

26:06.800 --> 26:09.400
And both what they hold, so you have to actually figure out,

26:09.400 --> 26:11.600
OK, these are where people are contributing.

26:11.600 --> 26:13.800
These are people using these libraries.

26:13.800 --> 26:16.640
So we can do Finos projects on a basis that include,

26:16.640 --> 26:20.720
we have here people, here people, we need more job guys.

26:20.720 --> 26:22.600
Here and here are already people who

26:22.600 --> 26:24.120
are using this particular library.

26:24.120 --> 26:26.000
So these people and this Finos project

26:26.000 --> 26:29.160
can probably help those projects, that Finos project,

26:29.160 --> 26:30.560
solve things.

26:30.560 --> 26:31.640
And so it doesn't matter.

26:31.640 --> 26:33.200
The size of the mission doesn't matter.

26:33.200 --> 26:35.680
It's really about building software efficiently.

26:35.680 --> 26:36.200
Yeah.

26:36.200 --> 26:37.520
And it's all right?

26:37.520 --> 26:38.000
Sorry.

26:38.000 --> 26:39.760
OK, so I think what Thomas is saying

26:39.760 --> 26:42.520
is, even if things are fully open,

26:42.520 --> 26:48.000
then it's going to help as well.

26:48.000 --> 26:51.320
I would also agree that whether proprietary software still

26:51.320 --> 26:53.040
exists.

26:53.040 --> 26:55.040
I used to work in the defense sector.

26:55.040 --> 26:57.440
That's never going to go open source.

26:57.440 --> 26:59.640
It uses open source, but it's not

26:59.640 --> 27:03.560
going to use fully open source for obvious reasons.

27:03.560 --> 27:05.280
But we've got to keep those separate.

27:05.280 --> 27:09.280
And actually, businesses need to see those separate anyway.

27:09.280 --> 27:11.960
And S-Bombs is potentially a good way of sharing them.

27:11.960 --> 27:14.440
And also handling some of the things like export control

27:14.440 --> 27:17.120
that I think one of the projects said this morning

27:17.120 --> 27:20.440
was actually handling export control things, which is also

27:20.440 --> 27:24.360
an interesting thing that, obviously, some

27:24.360 --> 27:26.040
of the licenses, the open source licenses,

27:26.040 --> 27:27.280
don't have that constraint.

27:27.280 --> 27:29.000
But businesses do.

27:29.000 --> 27:30.120
And we have to recognize that.

27:34.000 --> 27:35.920
No, I just was going to add just to that.

27:35.920 --> 27:39.900
I think that's the other thing we saw earlier this morning

27:39.900 --> 27:41.760
with the S-W360, right?

27:41.760 --> 27:44.960
Identifying the components that are reused over and over again

27:44.960 --> 27:47.080
kind of goes right in with that, right?

27:47.080 --> 27:49.120
Saying, OK, this component, it might only

27:49.120 --> 27:50.560
have two people working on it, but it

27:50.560 --> 27:55.360
is used in 19 different products that our company produces.

27:55.360 --> 27:58.680
That may, from a management perspective,

27:58.680 --> 28:01.800
when we go to devote resources, whether it's

28:01.800 --> 28:03.880
additional headcount, whatever it is, right?

28:03.880 --> 28:08.240
We know that's a project that is key to everything else

28:08.240 --> 28:09.080
we're doing, right?

28:09.080 --> 28:10.700
So yeah, I think that does help.

28:10.700 --> 28:12.560
Again, it's something you probably

28:12.560 --> 28:17.520
could reverse engineer by looking at who's

28:17.520 --> 28:19.880
pulling from a Git repository or whatever.

28:19.880 --> 28:23.280
But it would be very difficult to look at.

28:23.280 --> 28:24.760
You'd have to time things.

28:24.760 --> 28:26.400
And yeah, it would be hard.

28:29.040 --> 28:30.400
And to be clear, I agree completely.

28:30.400 --> 28:33.160
Many of the tools we saw today, and generally speaking,

28:33.160 --> 28:35.920
S-BOMs are a wonderful tool to aid

28:35.920 --> 28:39.200
in the production of proprietary software and mixed proprietary

28:39.200 --> 28:40.680
open-source software.

28:40.680 --> 28:43.240
And I think all of you who are in that business,

28:43.240 --> 28:46.040
you should probably be working and doing more with S-BOMs

28:46.040 --> 28:47.400
because you're going to need it.

28:47.400 --> 28:48.800
I agree.

28:48.800 --> 28:50.360
But I just am not in that business.

28:50.360 --> 28:52.540
I don't want a world with proprietary software.

28:52.540 --> 28:54.060
I want a world with free software.

28:54.060 --> 28:58.560
And in the free software world, the better place to,

28:58.560 --> 29:00.680
you have to pick where resources go,

29:00.680 --> 29:02.680
the better place to focus resources

29:02.680 --> 29:04.760
is in reproducible builds, not S-BOMs.

29:04.760 --> 29:07.720
If the amount of funding and effort

29:07.720 --> 29:09.840
going into S-BOM technology right now

29:09.840 --> 29:12.760
was going into reproducible builds technology,

29:12.760 --> 29:14.360
I think we would get better gains.

29:14.360 --> 29:17.200
So it's a question of where limited resources are being

29:17.200 --> 29:19.640
deployed more than it is whether or not S-BOMs are useful.

29:19.640 --> 29:20.480
I agree completely.

29:20.480 --> 29:21.120
They are.

29:21.120 --> 29:24.400
Are they more useful than things we could be doing elsewhere

29:24.400 --> 29:25.280
with those resources?

29:29.240 --> 29:30.320
Yeah, go on.

29:30.320 --> 29:34.200
Again, many of our main works of commercial companies

29:34.200 --> 29:36.440
like coming in from the start.

29:36.440 --> 29:38.960
But on the other side, we are maintainers of open source

29:38.960 --> 29:39.460
projects.

29:39.460 --> 29:42.720
So we do open source projects.

29:42.720 --> 29:46.240
And I personally, I do not care about detail licenses

29:46.240 --> 29:47.160
so much.

29:47.160 --> 29:49.640
My software is licensed by the MIT.

29:49.640 --> 29:54.640
I want everybody to use the software that's at maximum.

29:54.640 --> 29:58.120
So from my perspective, I would like to have S-BOMs

29:58.120 --> 30:02.120
and my open source projects make it more easy for other people

30:02.120 --> 30:03.120
to consume them.

30:03.120 --> 30:06.560
So this is ideal software because I like it

30:06.560 --> 30:09.440
and because I like other people using it.

30:09.440 --> 30:11.920
So this is for our own opinion.

30:11.920 --> 30:17.160
And having the good overview about the topic and point

30:17.160 --> 30:22.920
that you use is also a good way to tell other people what

30:22.920 --> 30:24.560
kind of open source components are

30:24.560 --> 30:28.720
in view under the global license.

30:28.720 --> 30:33.920
So I'm sorry, but I'm just bringing up the idea

30:33.920 --> 30:36.640
that I need to use the source code for everything

30:36.640 --> 30:39.640
and tell everybody that you want to know something

30:39.640 --> 30:41.880
and then you need to go to all the source code.

30:41.880 --> 30:44.840
I want to provide good information for other people

30:44.840 --> 30:49.360
who would like to use my open source.

30:49.360 --> 30:54.400
OK, so the point here was that even when producing open source

30:54.400 --> 31:01.000
license software, you find S-BOM useful for telling people

31:01.000 --> 31:06.160
what your software uses or for documenting your software,

31:06.160 --> 31:08.760
essentially.

31:08.760 --> 31:10.800
OK?

31:10.800 --> 31:11.280
Please.

31:11.280 --> 31:14.160
There's an expression of that because if you

31:14.160 --> 31:16.280
have this one automatically in a component,

31:16.280 --> 31:18.480
in an open source component, and I have the whole process

31:18.480 --> 31:22.720
automated inside a company, I have mostly almost no lawyer

31:22.720 --> 31:26.520
in my back because they know exactly what is coming there.

31:26.520 --> 31:27.920
They know where it's coming from.

31:27.920 --> 31:29.320
And we have the data.

31:29.320 --> 31:31.000
And usually, they don't understand.

31:31.000 --> 31:33.160
OK, it's passing by this one.

31:33.160 --> 31:36.160
And this one, you know, we don't need to care about this thing.

31:36.160 --> 31:39.400
So we do have this information already here,

31:39.400 --> 31:44.440
completely set up in the system and say, OK, this is the note.

31:44.440 --> 31:45.400
We know.

31:45.400 --> 31:49.440
So we can approve the new level company.

31:49.440 --> 31:51.480
Without this information, it's always the same time.

31:51.480 --> 31:52.720
We just can't.

31:52.720 --> 31:53.960
We need to go to discussions.

31:53.960 --> 31:57.960
We need to see if the company is losing money and time.

31:57.960 --> 31:59.680
OK.

31:59.680 --> 32:01.080
How do I summarize that?

32:01.080 --> 32:03.400
S-BOMs are also useful for getting legal approval

32:03.400 --> 32:06.760
for using software or something like that.

32:06.760 --> 32:08.360
Yeah.

32:08.360 --> 32:09.160
Thank you, Harry.

32:09.160 --> 32:09.680
Sorry.

32:14.000 --> 32:16.120
And this is probably going to be an open question now

32:16.120 --> 32:20.400
to the audience of those who are generating S-BOMs now.

32:20.400 --> 32:24.920
Open source project I'm involved in is Python-based.

32:24.920 --> 32:29.520
And it supports 3.7 to 3.11.

32:29.520 --> 32:35.720
We generate an S-BOM every week in both Cyclone DX and SPDX

32:35.720 --> 32:38.600
for each version of Python.

32:38.600 --> 32:42.360
And each version of Python generates a different S-BOM

32:42.360 --> 32:44.680
because you've got different dependencies that

32:44.680 --> 32:47.920
are version specific.

32:47.920 --> 32:50.880
So I have, depending on the version of Python,

32:50.880 --> 32:54.800
I may have, I think there's about 25 direct dependencies.

32:54.800 --> 32:56.480
But then when you get the implicit ones,

32:56.480 --> 32:57.840
it gets about another 30.

32:57.840 --> 32:59.560
Some of them have got 50-odd dependencies.

32:59.560 --> 33:01.600
Some have got 60.

33:01.600 --> 33:06.080
So I agree with your comment about publicizing it.

33:06.080 --> 33:09.180
But are people picking up the right version

33:09.180 --> 33:12.720
so they are aware of what your software is using

33:12.720 --> 33:15.920
because your software use will change?

33:15.920 --> 33:19.640
I think you forgot the platform, so you need to do a Windows.

33:19.640 --> 33:21.920
Oh, yeah, yes.

33:21.920 --> 33:22.520
OK, so.

33:22.520 --> 33:26.000
And you change your pictures and get armed and the system's

33:26.000 --> 33:28.240
like, OK.

33:28.240 --> 33:28.740
Brilliant.

33:28.740 --> 33:30.080
Glad you picked that up.

33:30.080 --> 33:33.480
So therefore, so are we capturing

33:33.480 --> 33:37.520
that information in the standards?

33:37.520 --> 33:38.440
Consistently.

33:38.440 --> 33:40.400
Yes.

33:40.400 --> 33:43.440
I'm not.

33:43.440 --> 33:46.840
And the standard is one thing, actually collecting it

33:46.840 --> 33:49.640
and storing it in the actual S-bomb that you're producing.

33:49.640 --> 33:52.040
Right, just to repeat that.

33:52.040 --> 33:55.720
The standard allows for that, but doesn't guarantee

33:55.720 --> 33:58.240
that when you produce the S-bomb that that information will

33:58.240 --> 34:04.200
get, A, collected or B, recorded, which is a huge problem

34:04.200 --> 34:08.320
with usually it's a tooling problem, usually.

34:08.320 --> 34:12.200
And we've seen tooling improve a lot.

34:12.200 --> 34:17.440
But again, it's the journey from where we would like to be,

34:17.440 --> 34:20.680
ideally, from where we are now.

34:20.680 --> 34:24.440
It just takes time and effort, obviously.

34:24.440 --> 34:27.160
But that's the number one problem I see in the field,

34:27.160 --> 34:32.680
is that the tooling is not producing either complete

34:32.680 --> 34:36.640
results or consistent with other tools.

34:36.640 --> 34:38.920
I mean, we saw a ton of examples of that,

34:38.920 --> 34:42.040
where tools are producing different results yet.

34:42.040 --> 34:43.000
May I ask that?

34:43.000 --> 34:44.440
Do you know why they're going to survive,

34:44.440 --> 34:46.320
especially with open source science?

34:46.320 --> 34:50.040
It's the level of education that is why the tooling developers

34:50.040 --> 34:52.760
are guarding this topic is widely varied.

34:52.760 --> 34:55.160
So I've been producing S-bombs and all this stuff

34:55.160 --> 34:56.560
for more than seven years.

34:56.560 --> 34:59.120
I've spoken to more lawyers and package managers

34:59.120 --> 35:01.120
to develop it than I care about.

35:01.120 --> 35:03.520
Everybody thinks that package managers can

35:03.520 --> 35:05.120
make that easy.

35:05.120 --> 35:06.560
It is not.

35:06.560 --> 35:07.200
Right, yes.

35:07.200 --> 35:11.760
So to summarize that point, he's been producing S-bombs

35:11.760 --> 35:14.800
for seven years.

35:14.800 --> 35:17.920
And it's not just a matter of querying a package manager

35:17.920 --> 35:21.040
and being done.

35:21.040 --> 35:22.720
We see that all the time.

35:22.720 --> 35:25.080
I work in containerized software mostly,

35:25.080 --> 35:28.120
so a lot of the S-bombs I see produced

35:28.120 --> 35:29.760
are actually produced after the build,

35:29.760 --> 35:32.840
because somebody pulls a base image.

35:32.840 --> 35:37.040
There's no S-bomb for that base image to consume today.

35:37.040 --> 35:39.400
Hopefully, in the future, there will be.

35:39.400 --> 35:43.960
But those things that are in those base images, a lot of times

35:43.960 --> 35:44.880
are opaque.

35:44.880 --> 35:47.040
It may be open source software, but it's

35:47.040 --> 35:51.920
a Rust binary that doesn't have audit information compiled in.

35:51.920 --> 35:56.840
And there have been improvements in that.

35:56.840 --> 36:00.000
Go puts audit information into the binaries.

36:00.000 --> 36:03.400
Rust can do it, but doesn't do it by default yet.

36:03.400 --> 36:06.240
So there's still, yes, a ton of that.

36:06.240 --> 36:10.800
And so the rest of his point was the developer education,

36:10.800 --> 36:13.320
it's one thing to be aware of S-bombs as a concept.

36:13.320 --> 36:15.920
It's another thing to be aware of, the limitations, what

36:15.920 --> 36:18.520
has to be accounted for when you're building them,

36:18.520 --> 36:21.680
when you're producing software in general.

36:21.680 --> 36:25.360
There's just a lot of plates spinning all at the same time.

36:25.360 --> 36:27.920
Maybe to add to that, and we have a little talk on Friday,

36:27.920 --> 36:31.400
but please do not reinvent the wheel.

36:31.400 --> 36:35.880
If you need as much room, ask the community

36:35.880 --> 36:38.840
to have all the questions you have out there.

36:38.840 --> 36:42.440
So building it all and wasting a lot of time in everything.

36:42.440 --> 36:44.400
It's just a good sport.

36:44.400 --> 36:48.480
Another thing that you have from the workshop on Friday,

36:48.480 --> 36:51.600
teaching developers is OK, but it's not the right path.

36:51.600 --> 36:53.840
Because developers are creatures of habits,

36:53.840 --> 36:56.400
and they will not follow you or not listen you.

36:56.400 --> 36:59.920
Even when the deadlines are very near.

36:59.920 --> 37:02.160
So the last comment was that developers,

37:02.160 --> 37:04.520
it's difficult to get developers to change their behavior,

37:04.520 --> 37:06.040
they don't listen.

37:06.040 --> 37:08.360
Which I find too in my work, which is primarily

37:08.360 --> 37:10.480
copy left license compliance, that to your point

37:10.480 --> 37:12.840
I wanted to add, one of the reasons

37:12.840 --> 37:14.400
it's probably very difficult for you,

37:14.400 --> 37:16.360
it's not the only reason, but one of the reasons

37:16.360 --> 37:18.840
it's difficult to build S-bombs for containers

37:18.840 --> 37:22.320
is because nearly all containers in the world

37:22.320 --> 37:24.960
are violating the GPL.

37:24.960 --> 37:27.480
And so you don't have the source code

37:27.480 --> 37:29.760
to even go and start building your S-bomb off the source

37:29.760 --> 37:30.260
code.

37:30.260 --> 37:32.720
You're stuck with binaries that are GPL violating.

37:32.720 --> 37:34.720
But there is absolutely no funding available

37:34.720 --> 37:36.360
to handle that problem in the container world

37:36.360 --> 37:37.600
and the GPL compliant side.

37:37.600 --> 37:39.440
So I guess you'll handle the binary side,

37:39.440 --> 37:41.780
because you have all your S-bomb funding to fund it that way.

37:45.800 --> 37:48.040
OK, yeah, sorry.

37:48.040 --> 37:50.200
I'm trying to understand your point.

37:50.200 --> 37:54.360
And the fact that you implied that if all software was open,

37:54.360 --> 37:58.680
we wouldn't have any need to S-bombs besides perhaps

37:58.680 --> 38:00.320
the things that they mentioned.

38:00.320 --> 38:03.440
Even though every talk today was stuff that wouldn't matter

38:03.440 --> 38:05.440
if all software was open.

38:05.440 --> 38:07.920
But I'm trying to understand what your point is.

38:07.920 --> 38:12.000
Are you implying that instead of actually being here

38:12.000 --> 38:14.640
at Postem, pushing open source software

38:14.640 --> 38:18.720
so that all software at some day being open source,

38:18.720 --> 38:21.960
are you implying that we're wasting time producing stuff

38:21.960 --> 38:24.920
that actually supports the current standard?

38:24.920 --> 38:25.760
Completely yours.

38:25.760 --> 38:26.400
Yeah, yeah.

38:26.400 --> 38:28.480
That's a question for me, and I'll summarize it.

38:28.480 --> 38:30.760
So the question was, in this imaginary world

38:30.760 --> 38:33.260
that I proposed where all software is open source

38:33.260 --> 38:35.480
and free software, is what I'm saying

38:35.480 --> 38:38.160
that the effort being put into S-bombs

38:38.160 --> 38:40.240
is actually enabling the production

38:40.240 --> 38:41.360
of proprietary software?

38:41.360 --> 38:43.240
And I think the answer is yes.

38:43.240 --> 38:47.560
I think S-bombs are a system to make it easier

38:47.560 --> 38:50.760
to ingest open source software and bring it

38:50.760 --> 38:53.040
into proprietary software.

38:53.040 --> 38:55.320
I came to as many of the talks as I could today

38:55.320 --> 38:57.080
when I didn't have other obligations.

38:57.080 --> 38:58.920
And many of the talks today were talking

38:58.920 --> 39:01.840
about ingestion of open source for that purpose.

39:01.840 --> 39:04.680
When you hear people talking about, oh, we

39:04.680 --> 39:07.400
can be able to blacklist GPL stuff.

39:07.400 --> 39:09.960
Well, the reason they want to blacklist copy left stuff

39:09.960 --> 39:11.960
is they want to make proprietary software.

39:11.960 --> 39:13.120
Now, it's a question of values.

39:13.120 --> 39:15.400
The commenter over there that I think never got summarized

39:15.400 --> 39:17.440
was pointing out that in his values,

39:17.440 --> 39:20.200
he feels he really wants to see his software put

39:20.200 --> 39:23.600
into proprietary software and to encourage it and make it easy.

39:23.600 --> 39:25.960
I don't obviously agree with those values.

39:25.960 --> 39:28.800
If you agree with those values, I agree completely.

39:28.800 --> 39:31.440
S-bombs are a great solution to be

39:31.440 --> 39:36.080
able to encourage the adoption of non-copy lefted software.

39:36.080 --> 39:37.520
This is a very stark issue.

39:37.520 --> 39:38.760
I want to give an example.

39:38.760 --> 39:39.480
There was a talk earlier.

39:39.480 --> 39:42.160
You can go on the internet and figure out which one it was.

39:42.160 --> 39:45.680
But their system, when it decided,

39:45.680 --> 39:48.280
when putting licenses in buckets,

39:48.280 --> 39:51.480
when it saw that it was a copy left license,

39:51.480 --> 39:54.160
they had a Python function that I found in their source

39:54.160 --> 39:57.000
grid that says, oh, if it's a copy left or it's a license,

39:57.000 --> 40:02.360
this Python function should return the string is-danger.

40:02.360 --> 40:05.280
So the concept that even those writing S-bomb tools

40:05.280 --> 40:08.480
believe that copy left is a dangerous thing

40:08.480 --> 40:10.640
is kind of giving you a sense of the values that

40:10.640 --> 40:12.700
are circulating around the S-bomb community, which

40:12.700 --> 40:15.800
is unfortunate, because I think the GPL is a wonderful license,

40:15.800 --> 40:17.120
not a dangerous one.

40:17.120 --> 40:19.080
But I realize others in the room disagree.

40:19.080 --> 40:21.580
Yeah?

40:21.580 --> 40:24.880
So my question was, when we cannot see the other side

40:24.880 --> 40:28.880
of the coin, so wouldn't that, I mean,

40:28.880 --> 40:31.600
I'm not trying to reconcile free software and commercial

40:31.600 --> 40:34.040
software by any means, but wouldn't that

40:34.040 --> 40:37.120
ex-reference currency flow by the S-bomb be also

40:37.120 --> 40:41.200
helpful for your use case in identifying

40:41.200 --> 40:44.840
when that piece of software is being used?

40:44.840 --> 40:46.160
The answer is no.

40:46.160 --> 40:47.760
And I don't want to get too much into it,

40:47.760 --> 40:49.200
but I'm going to talk about it later, because I don't want

40:49.200 --> 40:50.440
to take too much of the time.

40:50.440 --> 40:52.000
All right.

40:52.000 --> 40:52.500
Kate.

40:52.500 --> 40:55.000
Sorry.

40:55.000 --> 41:01.480
I want open source data for use in safety critical applications.

41:01.480 --> 41:03.440
Open source is bugs.

41:03.440 --> 41:08.680
How can I track the bugs and fix them

41:08.680 --> 41:12.560
so it doesn't kill people unless I know what's there?

41:12.560 --> 41:15.640
If I'm just in the source code, all true,

41:15.640 --> 41:17.960
I'm not going to be able to find and fix.

41:17.960 --> 41:19.520
It's at scale.

41:19.520 --> 41:22.440
We need to abstract to go to scale.

41:22.440 --> 41:25.680
How do we change, how do we change what you're proposing

41:25.680 --> 41:28.800
from that problem?

41:28.800 --> 41:43.000
So the question is that we want to do functional safety

41:43.000 --> 41:44.720
with open source, right?

41:44.720 --> 41:47.080
And in order to do it on scale, we

41:47.080 --> 41:51.400
have to abstract things outside on a higher level

41:51.400 --> 41:53.360
than simple source code.

41:53.360 --> 41:57.000
And talk, for example, in packages, and how, again,

41:57.000 --> 42:01.880
the table of contents of things rather than the actual source

42:01.880 --> 42:04.400
heights.

42:04.400 --> 42:05.720
So I want to respond.

42:05.720 --> 42:07.640
Off the mic, it was said there's a concern

42:07.640 --> 42:09.840
that software is going to kill people with the implication

42:09.840 --> 42:12.520
that without us bombs, we won't be

42:12.520 --> 42:15.600
able to prevent the killing of people with software.

42:15.600 --> 42:18.000
Which I agree, there is software that's killed people.

42:18.000 --> 42:20.600
I was very taken of the Therac25 case,

42:20.600 --> 42:23.200
which if you're in computer science, you probably studied,

42:23.200 --> 42:25.480
which was a proprietary software system that

42:25.480 --> 42:28.280
murdered a number of people due to a software bug.

42:28.280 --> 42:31.520
So I agree completely that we have a long, long history

42:31.520 --> 42:34.360
of software bugs injuring people.

42:34.360 --> 42:39.680
My argument is that the best thing to have

42:39.680 --> 42:41.960
when you have a binary, that you worry has a bug

42:41.960 --> 42:44.520
and has a vulnerability, the best thing to have

42:44.520 --> 42:46.640
is to have a completely reproducible build

42:46.640 --> 42:48.200
for that binary.

42:48.200 --> 42:52.240
Such that you can go and make that binary again

42:52.240 --> 42:54.840
tens of years later, hundreds of years later,

42:54.840 --> 42:57.360
and see again, have all the scripts used

42:57.360 --> 42:59.280
to control compilation installation

42:59.280 --> 43:02.120
at your fingertips for every binary produced in the world.

43:02.120 --> 43:04.680
I agree with you that it takes a lot of resources to do that.

43:04.680 --> 43:07.020
I would like to get to that world where that's the case,

43:07.020 --> 43:10.320
where every person who relies on a piece of binary software

43:10.320 --> 43:12.960
has the immediate access to the complete corresponding source

43:12.960 --> 43:13.680
code.

43:13.680 --> 43:15.280
There are some tools in that case

43:15.280 --> 43:17.360
that I think should exist that don't.

43:17.360 --> 43:19.720
I don't see anybody in this community working on them.

43:19.720 --> 43:21.680
For example, our mind was working years ago

43:21.680 --> 43:23.720
on this very interesting tool that

43:23.720 --> 43:28.800
was doing orchestration through build processes, where

43:28.800 --> 43:33.800
it was tracking exact hashes of source code that

43:33.800 --> 43:35.440
was going into a binary.

43:35.440 --> 43:37.960
Those kinds of things are very excellent tools

43:37.960 --> 43:39.600
that we do need and should be created,

43:39.600 --> 43:43.520
and they would be a great enabler to the types of things

43:43.520 --> 43:44.520
that I'm talking about.

43:44.520 --> 43:47.720
But I don't see S-bombs bringing us that, at least not

43:47.720 --> 43:48.160
at the moment.

44:01.240 --> 44:02.000
What's that name?

44:02.000 --> 44:03.200
That's all for private tools?

44:03.200 --> 44:03.680
That's all?

44:03.680 --> 44:09.680
Yocto is doing it, Zephyr is doing it, hashes of the sources,

44:09.680 --> 44:12.640
and what's those intermediates, and how does it go?

44:12.640 --> 44:13.140
OK.

44:13.140 --> 44:14.880
So Kate just told us the problem solved,

44:14.880 --> 44:17.040
so we don't have to do anything more.

44:17.040 --> 44:18.240
That's great.

44:18.240 --> 44:20.240
Use Yocto and the problem solved, it sounds like.

44:20.240 --> 44:26.440
OK, so the comment was that build tools, no, build platforms

44:26.440 --> 44:32.160
like Yocto and Zephyr already record

44:32.160 --> 44:37.760
all hashes of sources going into binaries for their platforms.

44:37.760 --> 44:39.720
Great.

44:39.720 --> 44:41.120
Any other questions?

44:41.120 --> 44:42.360
Come on, people, don't be shy.

44:42.360 --> 44:43.280
Yeah?

44:43.280 --> 44:44.760
Yeah, I have a quick question.

44:44.760 --> 44:48.760
So for the escorts, is the idea, and this might be a very basic

44:48.760 --> 44:52.240
question, is the idea that we produce an escort that

44:52.240 --> 44:59.040
represents the suspect or as large whatever combination

44:59.040 --> 45:04.440
of tags, and that includes both build dependencies, transitive

45:04.440 --> 45:08.280
attacks, how it depends, task dependencies, always the idea

45:08.280 --> 45:13.760
that use a multiple of these for other facts and for us

45:13.760 --> 45:17.440
for the happier, so that you can then operate the idea.

45:17.440 --> 45:21.120
I have a form of vulnerability, for licensing issue

45:21.120 --> 45:23.720
in a particular thinking way.

45:23.720 --> 45:26.520
Let's say if it's an open SSL vulnerability,

45:26.520 --> 45:29.320
my build tool, I probably don't have as much,

45:29.320 --> 45:34.600
but if it's in production, I'm not going to have much.

45:34.600 --> 45:36.800
Yocto, yeah, you'll summarize it.

45:36.800 --> 45:38.480
Yeah, I'll summarize it.

45:38.480 --> 45:40.840
Yeah, so the question is whether or not

45:40.840 --> 45:45.800
the SBOM is intended to capture in addition

45:45.800 --> 45:48.040
to the code and the dependencies.

45:48.040 --> 45:52.040
Is it also capturing the build environment, et cetera, things

45:52.040 --> 45:53.280
like that, right?

45:53.280 --> 45:55.560
And the answer there is maybe.

45:55.560 --> 45:58.600
And that's kind of one of the reasons,

45:58.600 --> 46:00.120
like I don't know if you were here all day,

46:00.120 --> 46:01.920
but one of the first things that we covered

46:01.920 --> 46:03.560
was different types of SBOMs, right?

46:03.560 --> 46:08.520
So there are SBOMs specifically for code repositories, right?

46:08.520 --> 46:10.600
There are SBOMs specifically that

46:10.600 --> 46:13.000
are generated at build time, right?

46:13.000 --> 46:16.520
So yes, maybe there can be an SBOM

46:16.520 --> 46:20.040
for the exact combination of conditions,

46:20.040 --> 46:22.720
or there can be a more generalized SBOM, right?

46:22.720 --> 46:25.960
And there's use cases for both of those.

46:25.960 --> 46:30.520
How much are you able to get all of these?

46:30.520 --> 46:31.880
Maybe, right?

46:31.880 --> 46:35.120
Again, it depends on what you're consuming from other people,

46:35.120 --> 46:35.600
right?

46:35.600 --> 46:38.320
If you're consuming a Docker image, right,

46:38.320 --> 46:40.560
it may be too late to.

46:40.560 --> 46:43.280
You may be able to reproduce it in a, well,

46:43.280 --> 46:44.320
let's not get into that.

46:44.320 --> 46:47.480
I'll say one thing more about reproducible builds.

46:47.480 --> 46:52.320
Even in the universe where we have all the data,

46:52.320 --> 46:55.000
actually reproducing a build is extremely difficult,

46:55.000 --> 46:57.200
and maybe even impossible in some cases, right?

46:57.200 --> 46:59.760
Because there's just too many variables.

46:59.760 --> 47:05.200
So I am not one to shy away from saying we should have an ideal

47:05.200 --> 47:06.800
and work towards it, right?

47:06.800 --> 47:08.400
I mean, absolutely.

47:08.400 --> 47:11.920
But the level of effort to achieve one goal

47:11.920 --> 47:13.800
is not necessarily the same amount of effort

47:13.800 --> 47:15.400
to achieve another goal.

47:15.400 --> 47:17.560
So.

47:17.560 --> 47:21.520
Yeah, I guess my question was, let's

47:21.520 --> 47:24.480
say I have something that generates that.

47:24.480 --> 47:27.120
I'm supposed to run it multiple times while I'm

47:27.120 --> 47:29.680
doing pipeline as opposed to running once.

47:29.680 --> 47:31.200
And I have the answer to that.

47:31.200 --> 47:31.680
Yeah.

47:31.680 --> 47:32.440
It depends.

47:32.440 --> 47:32.920
Yeah.

47:32.920 --> 47:35.000
The answer is it depends.

47:35.000 --> 47:36.640
The answer is always it depends.

47:36.640 --> 47:41.840
But I'm just looking at the highest one, is the design one.

47:41.840 --> 47:44.480
Now, one of the things I've heard a lot of people,

47:44.480 --> 47:47.640
and we've talked about lists of ingredients several times

47:47.640 --> 47:52.920
today, people nervous about putting what's in their product

47:52.920 --> 47:58.040
because potentially people are saying, well, if you tell me

47:58.040 --> 48:01.520
I'm using package X, Y, and Z, then a competitor

48:01.520 --> 48:05.440
can also put X, Y, and Z together.

48:05.440 --> 48:07.800
So are people concerned about that?

48:07.800 --> 48:10.200
Because that's one of the things that people are saying

48:10.200 --> 48:13.800
is delaying the adoption and the publication of that.

48:13.800 --> 48:16.840
Or is it saying that certain S-bombs can

48:16.840 --> 48:20.800
have that level information but with a very restricted audience

48:20.800 --> 48:24.720
as a sink from the maybe the later down ones, which

48:24.720 --> 48:26.880
are probably more public because they potentially

48:26.880 --> 48:28.720
have different business needs?

48:32.160 --> 48:33.800
That's out for that.

48:33.800 --> 48:35.280
I'm not saying I've got a view.

48:35.280 --> 48:37.560
Let's see, what do people think about that?

48:37.560 --> 48:41.360
Because I'm seeing some organizations saying,

48:41.360 --> 48:43.920
I don't want to publish my architecture,

48:43.920 --> 48:46.520
since it's an architecture, because that potentially

48:46.520 --> 48:49.960
is making it a community, potentially vulnerable.

48:49.960 --> 48:52.160
My business model being vulnerable.

48:52.160 --> 48:55.680
And go back to the market I used to work in,

48:55.680 --> 49:00.360
my architecture was protected under certain business needs.

49:00.360 --> 49:01.880
And I couldn't share that.

49:01.880 --> 49:03.840
I still can't share it.

49:03.840 --> 49:05.400
I just want to add one thing there.

49:05.400 --> 49:07.680
And Siemens had their talk earlier today

49:07.680 --> 49:10.640
about having different S-bombs for different use cases.

49:10.640 --> 49:13.040
And one of them was specifically around that.

49:13.040 --> 49:18.120
We have a specific S-bomb for regulatory consumption.

49:18.120 --> 49:19.760
That only includes the information

49:19.760 --> 49:21.400
that the regulator needs.

49:21.400 --> 49:23.160
And I don't know if that's a, I actually

49:23.160 --> 49:25.200
wanted to talk to you guys about that.

49:25.200 --> 49:27.080
Is that produced from the other S-bombs?

49:27.080 --> 49:28.360
We'll get into that later.

49:28.360 --> 49:32.680
But they have the other S-bombs they only

49:32.680 --> 49:34.240
use for internal purposes.

49:34.240 --> 49:36.760
So even in the case of software that

49:36.760 --> 49:38.920
is not going to be distributed at all,

49:38.920 --> 49:43.480
there's still a very strong use case for S-bombs.

49:43.480 --> 49:46.200
That software that stays inside of Siemens

49:46.200 --> 49:48.600
maybe doesn't even go into a product

49:48.600 --> 49:52.320
and is only used for, let's say, internal accounting.

49:52.320 --> 49:52.820
I don't know.

49:52.820 --> 49:53.320
Whatever.

49:53.320 --> 49:54.600
How can you get your data?

49:54.600 --> 49:55.120
Right.

49:55.120 --> 49:55.620
Right.

49:55.620 --> 49:57.320
So there's still a use case there

49:57.320 --> 50:02.640
where there's not a concern about necessarily poisoning

50:02.640 --> 50:03.760
the software or whatever.

50:06.560 --> 50:07.800
So yeah.

50:07.800 --> 50:09.220
I just wanted to tie back to that,

50:09.220 --> 50:11.920
because I wanted to, A, remind myself to talk to you about it.

50:11.920 --> 50:14.400
But I thought it tied into what he was asking too.

50:14.400 --> 50:17.240
There's a true reality within big organizations

50:17.240 --> 50:21.600
is because at some point someone will ask it where or when

50:21.600 --> 50:23.000
or why.

50:23.000 --> 50:25.480
This is always about the project that you're working.

50:25.480 --> 50:27.400
And sometimes there's someone that

50:27.400 --> 50:29.400
is in a completely different area,

50:29.400 --> 50:30.920
in a completely different country.

50:30.920 --> 50:33.040
But for some reason, how is using the project

50:33.040 --> 50:34.680
to do these questions?

50:34.680 --> 50:36.520
And then what happens is that there's

50:36.520 --> 50:38.520
a lot of people who augment itself

50:38.520 --> 50:40.400
trying to find information.

50:40.400 --> 50:43.760
If that's a thing that already happens on S-bomb since there,

50:43.760 --> 50:46.280
you have all the information of the project details.

50:46.280 --> 50:48.760
And then this question could be totally solved at the moment.

50:48.760 --> 50:52.120
You're saying for just internal management audits

50:52.120 --> 50:56.520
of resource planning, something like that, right?

50:56.520 --> 50:58.040
Who was working on this project?

50:58.040 --> 50:58.880
Yeah.

50:58.880 --> 50:59.380
Yeah.

50:59.380 --> 51:00.160
So all of that, yeah.

51:00.160 --> 51:03.360
That information can be captured in an S-bomb as well.

51:03.360 --> 51:03.880
Right.

51:03.880 --> 51:05.200
I agree with that.

51:05.200 --> 51:07.920
Yeah, I wanted to go back to you brought up this list of ingredients

51:07.920 --> 51:11.000
question again, which I think is a really interesting analogy

51:11.000 --> 51:13.320
to this whole situation.

51:13.320 --> 51:15.560
Certainly, I've eaten processed foods in my life,

51:15.560 --> 51:18.440
and I don't cook everything from scratch.

51:18.440 --> 51:22.600
So having a list of ingredients is certainly much better

51:22.600 --> 51:25.240
than not having one if those are your only two choices,

51:25.240 --> 51:27.760
if you're given that false dichotomy.

51:27.760 --> 51:30.000
However, I'm much more interested in getting recipes,

51:30.000 --> 51:33.040
full recipes, with all the instructions

51:33.040 --> 51:36.480
than I am getting lists of ingredients for something.

51:36.480 --> 51:38.960
And similarly, true, I've used proprietary software in my life.

51:38.960 --> 51:41.400
I avoid it because I don't just want a list of ingredients.

51:41.400 --> 51:42.440
I want the whole recipe.

51:46.120 --> 51:51.960
OK, so staying with a list of ingredients and food labels

51:51.960 --> 51:57.680
analogy, whenever we see a list of ingredients,

51:57.680 --> 52:01.600
it's usually a couple of things.

52:01.600 --> 52:02.440
Not couple, OK.

52:02.440 --> 52:04.120
Let's say a dozen things.

52:04.120 --> 52:07.400
And then may also contain other things.

52:07.400 --> 52:12.080
And it's also, yeah, oh, we can look at the chocolates.

52:12.080 --> 52:17.640
And various other additives, or whatever, stuff like that.

52:17.640 --> 52:24.800
So even in this case, we do not get a complete and exhaustive list

52:24.800 --> 52:28.840
of everything, or not an accurate one.

52:28.840 --> 52:30.200
Are we trying too much?

52:30.200 --> 52:30.800
Right.

52:30.800 --> 52:35.160
Trying to go to the S-Borm and find everything there.

52:35.160 --> 52:39.160
So just looking at this, these are two pieces of chocolate.

52:39.160 --> 52:40.400
Other brands are available.

52:40.400 --> 52:42.440
Other brands, yeah.

52:42.440 --> 52:45.240
So OK, one says this 42.

52:45.240 --> 52:46.520
It's all in German.

52:46.520 --> 52:47.600
What language it's in?

52:47.600 --> 52:48.840
German, probably.

52:48.840 --> 52:50.360
So one says 42%.

52:50.360 --> 52:51.880
One says 44%.

52:51.880 --> 52:53.640
But at the end, product is chocolate.

52:53.640 --> 52:56.040
Are you able to tell that difference, a 2% difference?

52:56.040 --> 52:59.920
OK.

52:59.920 --> 53:04.280
Because there's a set of, OK, probably by taste, maybe,

53:04.280 --> 53:05.720
if you're really good.

53:05.720 --> 53:07.920
But OK, is your software the same?

53:07.920 --> 53:10.120
Because the difference between that 2%

53:10.120 --> 53:12.440
might be different compile option.

53:12.440 --> 53:14.640
Take it an analogy.

53:14.640 --> 53:16.080
OK.

53:16.080 --> 53:21.880
So the question is, if in our food we are so lax,

53:21.880 --> 53:24.800
why do we try to do it in our software so exact

53:24.800 --> 53:27.640
and we're spending all this money that Bradley is talking

53:27.640 --> 53:28.640
about?

53:28.640 --> 53:30.120
Yeah.

53:30.120 --> 53:32.720
I have an opinion on this.

53:32.720 --> 53:38.800
So I'm in a big company that can use a lot of software products.

53:38.800 --> 53:46.000
And while we care that bills of materials exist in many cases,

53:46.000 --> 53:49.120
but we do not care at all what's the content.

53:49.120 --> 53:54.760
So those 2% difference is what we're talking about.

53:54.760 --> 53:56.560
Well, when people come to me and ask,

53:56.560 --> 54:00.760
well, can we get that product from open source point of view,

54:00.760 --> 54:03.920
I ask, well, do they have an S-bomb?

54:03.920 --> 54:07.320
And if they have an S-bomb, it's a sign that they care about

54:07.320 --> 54:09.480
and S-bomb is important, that they

54:09.480 --> 54:14.680
are capable of creating S-bomb and that they produce

54:14.680 --> 54:16.200
an instrument of product.

54:16.200 --> 54:18.840
And in many cases, fine for me.

54:18.840 --> 54:19.360
Go ahead.

54:19.360 --> 54:19.840
Yeah.

54:19.840 --> 54:22.600
I don't care what's in there.

54:22.600 --> 54:23.120
OK.

54:23.120 --> 54:24.200
So you want to?

54:24.200 --> 54:26.480
Yeah, I'll summarize it.

54:26.480 --> 54:28.800
Yeah, so the comment was that he doesn't

54:28.800 --> 54:32.200
care what is in the software necessarily,

54:32.200 --> 54:35.200
but he does care that there is an S-bomb, essentially.

54:35.200 --> 54:37.400
And I agree with that.

54:37.400 --> 54:40.640
As a consumer, a lot of times I don't.

54:40.640 --> 54:42.760
I'm not going to read the ingredients.

54:42.760 --> 54:46.480
But knowing that the ingredients are available,

54:46.480 --> 54:48.880
and I don't know if this is a perfect analogy.

54:48.880 --> 54:51.240
The ingredients list comes up all the time.

54:51.240 --> 54:52.520
There's more to it than that.

54:52.520 --> 54:55.280
But knowing that someone has the ability

54:55.280 --> 55:00.000
to audit that information means that I don't necessarily

55:00.000 --> 55:02.440
have to be the one that does it.

55:02.440 --> 55:04.920
Just like when you go shopping, you

55:04.920 --> 55:07.720
can benefit from other people bargaining,

55:07.720 --> 55:09.420
even though you're not bargaining yourself,

55:09.420 --> 55:11.440
just because that does drive prices down

55:11.440 --> 55:13.800
in the general case.

55:13.800 --> 55:18.760
That activity on the margin is extremely important.

55:18.760 --> 55:22.640
So yes, I care a lot that even if I'm not

55:22.640 --> 55:25.220
doing the inspecting of the food to make sure it's not

55:25.220 --> 55:27.920
spoiled or whatever, that someone is,

55:27.920 --> 55:28.960
just knowing that is good.

55:32.560 --> 55:36.040
Do you know how food inspection has been done?

55:36.040 --> 55:38.520
All right.

55:38.520 --> 55:42.560
OK, so I want to follow up to what you said and ask you.

55:42.560 --> 55:44.280
If your choices were, because you're

55:44.280 --> 55:46.040
saying you're not going to look at it, which means probably

55:46.040 --> 55:47.080
the recipe is not available.

55:47.080 --> 55:49.320
You're not going to go try to cook version of yourself

55:49.320 --> 55:50.680
to see if the recipe actually works.

55:50.680 --> 55:52.480
You're going to be relying on the fact, hey,

55:52.480 --> 55:53.400
there's a recipe out there.

55:53.400 --> 55:54.680
And they say that's the recipe for this.

55:54.680 --> 55:56.240
And probably somebody looked at it.

55:56.240 --> 55:57.640
So here's a question for you.

55:57.640 --> 56:00.360
If you had a choice between just getting the ingredients list

56:00.360 --> 56:03.080
and actually getting the recipe, which

56:03.080 --> 56:05.160
would you rather have out there, assuming you're not

56:05.160 --> 56:07.840
going to really look at either of them?

56:07.840 --> 56:09.200
OK, just what would I?

56:09.200 --> 56:12.480
Well, it depends on what we mean by the recipe, right?

56:12.480 --> 56:14.360
I mean, is it just the list of what

56:14.360 --> 56:16.360
to combine in the performance?

56:16.360 --> 56:19.160
Every step, every little time you step in.

56:19.160 --> 56:22.000
I mean, some of it, there are elements of that

56:22.000 --> 56:25.360
that could be related to food safety, right?

56:25.360 --> 56:28.880
I didn't refrigerate it or whatever.

56:28.880 --> 56:31.680
And yeah, I'd.

56:31.680 --> 56:33.120
I give you the recipe for a salad.

56:33.120 --> 56:35.240
The salami side of the sheet, right?

56:35.240 --> 56:37.240
You want an Islamic, Old-day, Rizzo-backed,

56:37.240 --> 56:39.240
packed with actual pork?

56:39.240 --> 56:40.440
Is that what you're asking for?

56:40.440 --> 56:44.120
I'm a vegetarian, so I'll give you the recipe.

56:44.120 --> 56:48.840
Yeah, but I mean, it's an interesting thing is, you know.

56:48.840 --> 56:52.760
Where are the, where are the, where are the, where are the,

56:52.760 --> 56:53.760
sorry.

56:53.760 --> 56:55.400
OK, OK, it's just an interesting thing

56:55.400 --> 56:59.320
is people have allergies for food.

56:59.320 --> 57:02.720
And taking this scenario along is quite things.

57:02.720 --> 57:04.760
So you know, product may contain nuts.

57:04.760 --> 57:07.320
People are allergic to certain types of nuts.

57:07.320 --> 57:11.680
So if you received an S-bomb, do you, and do you know,

57:11.680 --> 57:14.960
would you validate that that S-bomb is suitable for you

57:14.960 --> 57:17.760
to use and not having an adverse effect on you?

57:17.760 --> 57:21.080
Which might be a GPL license or something.

57:21.080 --> 57:24.320
Maybe an adverse, there might be an adverse reaction.

57:24.320 --> 57:26.160
Just to take it along.

57:26.160 --> 57:28.760
Where's the, where, there seems to be quite a good analogy

57:28.760 --> 57:31.000
here in terms of just receiving it,

57:31.000 --> 57:33.640
you have to actually look at it.

57:33.640 --> 57:36.720
Otherwise, the consequences of it, you know,

57:36.720 --> 57:41.720
basically you suffer those consequences.

57:41.720 --> 57:43.720
So just a sympathetic story.

57:43.720 --> 57:45.720
I understand the argument of this S-bomb is basically

57:45.720 --> 57:48.720
a synthesis of information that if you have all the source

57:48.720 --> 57:51.720
code of all your dependencies, you could extract essentially

57:51.720 --> 57:52.720
from there.

57:52.720 --> 57:55.720
And I understand that in the use case of security,

57:55.720 --> 57:58.720
it's much easier to just look for a version and a component

57:58.720 --> 58:01.720
name in a database of S-bombs than directly to the source code

58:01.720 --> 58:03.720
in their own forms or sources.

58:03.720 --> 58:07.720
But if the stakes are high enough, in some cases,

58:07.720 --> 58:09.720
you also want to do the graph.

58:09.720 --> 58:13.720
So I don't know how big companies handle the Loughborough J

58:13.720 --> 58:16.720
or the, how big is the Loughborough J?

58:16.720 --> 58:19.720
What I'm going to assume is that fairly small company

58:19.720 --> 58:22.720
with not huge budget and not a lot of, you know,

58:22.720 --> 58:25.720
computing resources, if the S-bombs at the time,

58:25.720 --> 58:28.720
it's a big diff, just look at that.

58:28.720 --> 58:31.720
But I'm pretty sure that big companies and high budget

58:31.720 --> 58:34.720
and computing resources also did the graph in the source code

58:34.720 --> 58:38.720
because they couldn't afford assuming that all the S-bombs

58:38.720 --> 58:39.720
were right.

58:39.720 --> 58:43.720
So what I'm saying is that the conflicts we've been discussing,

58:43.720 --> 58:47.720
if you're, you know, if you also get all the S-bombs

58:47.720 --> 58:50.720
for your components, like you have a plan B in case

58:50.720 --> 58:52.720
your S-bombs are wrong, I also encourage you to distribute

58:52.720 --> 58:54.720
the source code and all the source code to your users,

58:54.720 --> 58:56.720
but that's the kind of problem.

58:56.720 --> 59:00.720
Yeah, no, to summarize that point, he's saying that if you

59:00.720 --> 59:04.720
have an S-bomb in a zero-day response situation, let's say,

59:04.720 --> 59:08.720
right, you can find Loughborough J very quickly,

59:08.720 --> 59:13.720
but you're still going to want to go back and comb through

59:13.720 --> 59:16.720
everything to be extra certain, right?

59:16.720 --> 59:18.720
I think you want to have that option.

59:18.720 --> 59:21.720
Yeah, yeah, well, you obviously, yeah, yes, I agree completely.

59:21.720 --> 59:22.720
You want that option.

59:22.720 --> 59:25.720
I think part of the reason that that's necessary today

59:25.720 --> 59:30.720
is that disconnect between what the scanners are capable

59:30.720 --> 59:35.720
of detecting and recording, how hard it is to have a truly

59:35.720 --> 59:38.720
bit-for-bit reproducible build, right, if we get to that

59:38.720 --> 59:41.720
universe where the builds are reproducible.

59:41.720 --> 59:43.720
I mean, they are a reproducible build project, by the way.

59:43.720 --> 59:47.720
Right, you don't have to do it all the time, but if you know

59:47.720 --> 59:50.720
and you have a high confidence level that these builds are

59:50.720 --> 59:53.720
reproducible, you don't necessarily have to reproduce

59:53.720 --> 59:56.720
every one of them all the time, right?

59:56.720 --> 59:59.720
Actually, this whole thing is closed circle with the whole

59:59.720 --> 01:00:00.720
food part.

01:00:00.720 --> 01:00:03.720
So, because in Brazilian I used to see, I saw a little

01:00:03.720 --> 01:00:08.720
documentary about a network of supermarkets in the Netherlands

01:00:08.720 --> 01:00:11.720
that actually produces other juice and use it.

01:00:11.720 --> 01:00:14.720
Okay, blockchain is not the metal part, but from the

01:00:14.720 --> 01:00:18.720
original in Brazil, the way they pick up the fruit to go in

01:00:18.720 --> 01:00:21.720
traceability and do using blockchain for each part,

01:00:21.720 --> 01:00:25.720
then the everything until you reach the supermarket,

01:00:25.720 --> 01:00:28.720
and they can show the documents with all the traces and steps

01:00:28.720 --> 01:00:29.720
with everything.

01:00:29.720 --> 01:00:33.720
Basically, they have found a way to find a vulnerability in

01:00:33.720 --> 01:00:36.720
the middle of processing with some food that has gotten

01:00:36.720 --> 01:00:37.720
lost.

01:00:37.720 --> 01:00:39.720
Yeah, that's a provenance issue, right?

01:00:39.720 --> 01:00:43.720
Yeah, I can show this bottle of orange juice came from this

01:00:43.720 --> 01:00:48.720
batch of oranges, those oranges came on this ship from this

01:00:48.720 --> 01:00:51.720
orchard, and we're picked at this time.

01:00:51.720 --> 01:00:59.720
Yeah, that is, so that is a kind of an intersection of signing

01:00:59.720 --> 01:01:03.720
images or signing software with the S-bomb showing what's in

01:01:03.720 --> 01:01:04.720
that software, right?

01:01:04.720 --> 01:01:05.720
Yeah, yeah, yeah, yeah.

01:01:05.720 --> 01:01:11.720
To really stretch the analogy, yeah, but that's, I think that's,

01:01:11.720 --> 01:01:13.720
yeah, you need both of those, right?

01:01:13.720 --> 01:01:16.720
Ultimately, you probably want both of those.

01:01:16.720 --> 01:01:18.720
Yeah, yeah.

01:01:18.720 --> 01:01:23.720
There is a, for those interested in reproducible builds,

01:01:23.720 --> 01:01:27.720
there is a working group on the open SSF.

01:01:27.720 --> 01:01:30.720
Oh, yeah, probably.

01:01:30.720 --> 01:01:35.720
There is an open working group on the open SSF.

01:01:35.720 --> 01:01:40.720
A bunch of people are thinking on how you can get a reproducible

01:01:40.720 --> 01:01:46.720
S-bomb, and some of it deals with, I mean, not necessarily

01:01:46.720 --> 01:01:50.720
capturing all of the ingredients into the S-bomb, but I think

01:01:50.720 --> 01:01:54.720
it's born, I'm not really that involved, but I, from what I

01:01:54.720 --> 01:01:58.720
read, they're trying to think if I take an S-bomb and try to

01:01:58.720 --> 01:02:01.720
reproduce a build from only the ingredients listed in the S-bomb,

01:02:01.720 --> 01:02:02.720
can I manage to do it?

01:02:02.720 --> 01:02:06.720
And they're tying it to other trust issues, but it's an

01:02:06.720 --> 01:02:09.720
interesting project, if anyone is interested.

01:02:09.720 --> 01:02:15.720
I think we probably end up, I think, you know, to have all

01:02:15.720 --> 01:02:20.720
the ingredients and the providence and things like that

01:02:20.720 --> 01:02:24.720
is going to provide a huge amount of information to be managed.

01:02:24.720 --> 01:02:27.720
And then how do you then manage it, and how do you find it when

01:02:27.720 --> 01:02:29.720
you need to find it?

01:02:29.720 --> 01:02:33.720
Because it's bad enough in, bad enough finding source codes

01:02:33.720 --> 01:02:37.720
sometimes, but then having to find other artifacts and

01:02:37.720 --> 01:02:41.720
relations, that becomes quite hard.

01:02:41.720 --> 01:02:42.720
So I'll probably put it out there.

01:02:42.720 --> 01:02:45.720
For those of you who have got S-bombs and consuming them, how

01:02:45.720 --> 01:02:48.720
are you managing them?

01:02:48.720 --> 01:02:51.720
Because I believe that there's lots of things we're talking

01:02:51.720 --> 01:02:54.720
about producing them, but actually putting the

01:02:54.720 --> 01:02:58.720
relationship and S-bombs must be related to other artifacts,

01:02:58.720 --> 01:03:03.720
I'm sure, building materials like hardware, documentation that

01:03:03.720 --> 01:03:05.720
we talked about earlier about safety.

01:03:05.720 --> 01:03:11.720
How are people managing those discrete artifacts together as

01:03:11.720 --> 01:03:15.720
a unified, consistent solution?

01:03:15.720 --> 01:03:17.720
Okay, a more general question.

01:03:17.720 --> 01:03:21.720
Is anyone consuming a box, or are we all talking about

01:03:21.720 --> 01:03:23.720
producing them?

01:03:23.720 --> 01:03:25.720
Nobody cares.

01:03:25.720 --> 01:03:27.720
Sorry, yeah.

01:03:27.720 --> 01:03:28.720
Please.

01:03:28.720 --> 01:03:35.720
So we're going to introduce S-bombs for folks, and we're

01:03:35.720 --> 01:03:38.720
producing a lot of information, even the very build, and we're

01:03:38.720 --> 01:03:41.720
producing a lot of specific stuff that we think.

01:03:41.720 --> 01:03:44.720
But also you can read about the S-bombs that represent the

01:03:44.720 --> 01:03:47.720
software that ends up being fully released in Microsoft.

01:03:47.720 --> 01:03:51.720
And so the first thing we hear is we have released some

01:03:51.720 --> 01:03:54.720
looks from the state that's happening in the X-box.

01:03:54.720 --> 01:03:59.720
And then we have our mechanisms tracking our releases on

01:03:59.720 --> 01:04:02.720
the phones that use that same identifier.

01:04:02.720 --> 01:04:05.720
And so we want to look at these S-bombs.

01:04:05.720 --> 01:04:08.720
We're only really looking at what's going on in the X-box

01:04:08.720 --> 01:04:11.720
and what's actually been released, which starts now.

01:04:11.720 --> 01:04:15.720
And from that, we have very solid component mechanisms

01:04:15.720 --> 01:04:18.720
that are going to be released in the X-box.

01:04:18.720 --> 01:04:21.720
And then we have the S-bombs that are going to be released

01:04:21.720 --> 01:04:24.720
in the X-box.

01:04:24.720 --> 01:04:27.720
And then we have very solid component mechanisms that

01:04:27.720 --> 01:04:29.720
you always have an understanding of where things are going.

01:04:29.720 --> 01:04:32.720
So your analytics approach makes it the destination of the

01:04:32.720 --> 01:04:35.720
software, which consumers are going to be required.

01:04:35.720 --> 01:04:38.720
And that can help you build a risk.

01:04:38.720 --> 01:04:41.720
Risk is fairly contextual.

01:04:41.720 --> 01:04:45.720
And we're producing and consuming S-bombs from risk

01:04:45.720 --> 01:04:48.720
perspective, whether it's legal, license compliant, and

01:04:48.720 --> 01:04:49.720
security.

01:04:49.720 --> 01:04:52.720
And a lot of these cases are turning into denying.

01:04:52.720 --> 01:04:56.720
And most of the shows in these cameras, we provide them

01:04:56.720 --> 01:05:00.720
a lot of sources, and they can find hundreds of CEs.

01:05:00.720 --> 01:05:02.720
They're really finding lots of things.

01:05:02.720 --> 01:05:05.720
But a lot of it is not very useful, not actionable for

01:05:05.720 --> 01:05:08.720
developers, especially when it's stuff that goes and don't

01:05:08.720 --> 01:05:10.720
need to worry about fixing.

01:05:10.720 --> 01:05:14.720
So it just gives us a really good data set to search and

01:05:14.720 --> 01:05:17.720
use in an operational sense.

01:05:17.720 --> 01:05:19.720
But it requires humans.

01:05:19.720 --> 01:05:22.720
So we just set up some opportunities at the

01:05:22.720 --> 01:05:26.720
independent YA about having better data sources in the

01:05:26.720 --> 01:05:30.720
past that can automatically respond to threats and things

01:05:30.720 --> 01:05:32.720
like that.

01:05:32.720 --> 01:05:36.720
We're blessed with some very nice proprietary business

01:05:36.720 --> 01:05:41.720
databases that are important.

01:05:41.720 --> 01:05:44.720
And only support things like the quality of CEs and CEs and

01:05:44.720 --> 01:05:47.720
CEs, CEs, CEs, you have to change stuff like that and go

01:05:47.720 --> 01:05:49.720
ahead and just kind of read away from you.

01:05:49.720 --> 01:05:54.720
But this kind of...

01:05:54.720 --> 01:05:55.720
Can you summarize all that?

01:05:55.720 --> 01:05:56.720
I'll have to summarize all that.

01:05:56.720 --> 01:05:57.720
Yeah.

01:05:57.720 --> 01:05:58.720
Well, okay.

01:05:58.720 --> 01:05:59.720
They produce.

01:05:59.720 --> 01:06:03.720
I actually want to go back to Zach's comment because I have

01:06:03.720 --> 01:06:05.720
a question now because Zach was pointing out with

01:06:05.720 --> 01:06:09.720
someone else earlier that having the S-bomb and the source

01:06:09.720 --> 01:06:12.720
code is really the ideal situation.

01:06:12.720 --> 01:06:15.720
And everybody has been saying S-bombs will help us with

01:06:15.720 --> 01:06:18.720
bugs and identify vulnerabilities,

01:06:18.720 --> 01:06:20.720
which possibly is true.

01:06:20.720 --> 01:06:24.720
So if you have a log for J or any of these situations where

01:06:24.720 --> 01:06:27.720
you've identified in your S-bomb, you have a version,

01:06:27.720 --> 01:06:30.720
you have that version and you have that package,

01:06:30.720 --> 01:06:33.720
but of course you don't have the source code.

01:06:33.720 --> 01:06:36.720
So how does that help you solve the vulnerability if you

01:06:36.720 --> 01:06:37.720
have the S-bomb?

01:06:37.720 --> 01:06:39.720
It seems to me the only thing you can do is take the binary

01:06:39.720 --> 01:06:41.720
out of deployment if you don't have the source code.

01:06:41.720 --> 01:06:44.720
So I'm curious if I'm missing something that the S-bombs do

01:06:44.720 --> 01:06:47.720
that allow you to solve the vulnerability with no source

01:06:47.720 --> 01:06:48.720
code present.

01:06:48.720 --> 01:06:51.720
Yeah, I'll take that.

01:06:51.720 --> 01:06:54.720
That does happen sometimes where there's a project that has

01:06:54.720 --> 01:06:56.720
been...

01:06:56.720 --> 01:06:59.720
There are binaries for an internal project, let's say,

01:06:59.720 --> 01:07:02.720
and nobody knows where the code is, right?

01:07:02.720 --> 01:07:03.720
That has happened.

01:07:03.720 --> 01:07:06.720
We've seen people build S-bombs and, yeah,

01:07:06.720 --> 01:07:09.720
that's essentially the case where you can get an assessment

01:07:09.720 --> 01:07:13.720
and say this is vulnerable to whatever.

01:07:13.720 --> 01:07:15.720
That may...

01:07:15.720 --> 01:07:18.720
Removing the binary as an option, there are maybe other

01:07:18.720 --> 01:07:20.720
mitigations that could be put in place, but it is an

01:07:20.720 --> 01:07:21.720
awareness thing, right?

01:07:21.720 --> 01:07:25.720
I mean, that's kind of the main thing of S-bombs in general,

01:07:25.720 --> 01:07:29.720
is a shortcut to omniscient awareness of every, you know,

01:07:29.720 --> 01:07:35.720
mastery over the contents of this thing, right?

01:07:35.720 --> 01:07:37.720
I think we're probably drifting a bit into slightly wider

01:07:37.720 --> 01:07:38.720
things.

01:07:38.720 --> 01:07:42.720
And S-bombs is not your single point of decision-making for

01:07:42.720 --> 01:07:43.720
the things like vulnerability.

01:07:43.720 --> 01:07:46.720
You need to look at how your product is being used,

01:07:46.720 --> 01:07:50.720
has it been deployed, what's the environment,

01:07:50.720 --> 01:07:51.720
who's using it.

01:07:51.720 --> 01:07:53.720
If it's in a test environment, that's probably a slightly

01:07:53.720 --> 01:07:56.720
different environment to an operational deployment in an

01:07:56.720 --> 01:07:57.720
L.T. environment.

01:07:57.720 --> 01:08:00.720
So you need to look at that, you know, look at the context.

01:08:00.720 --> 01:08:04.720
And maybe S-bombs need to capture more of a context.

01:08:04.720 --> 01:08:06.720
And obviously, if you're creating a product,

01:08:06.720 --> 01:08:10.720
defining what a product is, it needs to also have that

01:08:10.720 --> 01:08:13.720
context around it, which then gives you then maybe other

01:08:13.720 --> 01:08:16.720
protections, physical protections as well,

01:08:16.720 --> 01:08:18.720
that are not captured in the S-bomb that may help you make

01:08:18.720 --> 01:08:19.720
those decisions.

01:08:19.720 --> 01:08:39.720
I have a totally different question about the usefulness

01:08:39.720 --> 01:08:49.720
of S-bombs.

01:08:49.720 --> 01:08:53.720
I don't have any comments on co-pilot.

01:08:53.720 --> 01:08:54.720
Okay.

01:08:54.720 --> 01:08:55.720
Okay.

01:08:55.720 --> 01:08:59.720
So the question there is, with the likes of things like

01:08:59.720 --> 01:09:01.720
co-pilot, and I presume our little friend,

01:09:01.720 --> 01:09:06.720
Chat GPT, what does that really make to the world of S-bombs?

01:09:06.720 --> 01:09:10.720
I would probably say, let's widen that a little bit more to

01:09:10.720 --> 01:09:14.720
basically explainable software.

01:09:14.720 --> 01:09:18.720
Can you explain what your software is doing?

01:09:18.720 --> 01:09:20.720
And I'm sure our safety people would be, you know,

01:09:20.720 --> 01:09:22.720
one of the things when I've been involved in safety,

01:09:22.720 --> 01:09:25.720
you've got to explain your architecture and explain why

01:09:25.720 --> 01:09:28.720
your architecture is safe and is fit for purpose.

01:09:28.720 --> 01:09:31.720
So have you got explainable software?

01:09:31.720 --> 01:09:34.720
And maybe an S-bomb will help that argument.

01:09:34.720 --> 01:09:38.720
It won't be sufficient, but it might help explain why

01:09:38.720 --> 01:09:41.720
your software, why you think your software is suitable

01:09:41.720 --> 01:09:43.720
because of your selection of your components,

01:09:43.720 --> 01:09:47.720
you've got components of known pedigree, et cetera,

01:09:47.720 --> 01:09:49.720
may help your argument.

01:09:49.720 --> 01:09:52.720
But actually things like, yes, automated code generation,

01:09:52.720 --> 01:09:54.720
which we all have if you have compilers,

01:09:54.720 --> 01:09:56.720
because that's automatic code generation,

01:09:56.720 --> 01:10:00.720
and we ultimately trust them.

01:10:00.720 --> 01:10:04.720
So how do we put those different measures together

01:10:04.720 --> 01:10:07.720
and collect that and recognize that?

01:10:07.720 --> 01:10:10.720
Because obviously we've also got things like with, you know,

01:10:10.720 --> 01:10:14.720
AI, machine learning things, as well, capturing the data,

01:10:14.720 --> 01:10:16.720
how good is the training data, how good is the algorithm

01:10:16.720 --> 01:10:19.720
within that, and can you understand why it made

01:10:19.720 --> 01:10:21.720
that particular decision?

01:10:21.720 --> 01:10:23.720
And I don't know whether you're going anywhere near that

01:10:23.720 --> 01:10:25.720
with your safety.

01:10:25.720 --> 01:10:28.720
So I think, yes, explainable software is possibly a

01:10:28.720 --> 01:10:32.720
completely new topic.

01:10:32.720 --> 01:10:34.720
It works for why you don't want to discuss that.

01:10:34.720 --> 01:10:37.720
Yeah, yeah.

01:10:37.720 --> 01:10:40.720
In another capacity, I've written multiple blog posts

01:10:40.720 --> 01:10:44.720
about the GitHub copilot situation, including essay

01:10:44.720 --> 01:10:47.720
that won a prize of some sort.

01:10:47.720 --> 01:10:49.720
So I'd encourage you to read those because that's sort of

01:10:49.720 --> 01:10:52.720
other issues about that, because there's a lot of issues there.

01:10:52.720 --> 01:10:54.720
I think one of the fundamental issues that you're pointing out

01:10:54.720 --> 01:10:57.720
is more general, and it's not specific to copilot.

01:10:57.720 --> 01:11:01.720
It's that machine learning, generally speaking, as a

01:11:01.720 --> 01:11:04.720
discipline, if you can call it that, is one of the most

01:11:04.720 --> 01:11:07.720
unreproducible processes that we've ever invented

01:11:07.720 --> 01:11:09.720
in computer science.

01:11:09.720 --> 01:11:11.720
And so the reason you can't get an S-bomb out the other side

01:11:11.720 --> 01:11:14.720
of a code generation system that uses machine learning is

01:11:14.720 --> 01:11:16.720
because you can't reproduce anything in the machine

01:11:16.720 --> 01:11:17.720
learning process.

01:11:17.720 --> 01:11:20.720
Once you train that model, you don't really know why it's

01:11:20.720 --> 01:11:22.720
doing, because at that point it's just a table of floating

01:11:22.720 --> 01:11:23.720
point numbers.

01:11:23.720 --> 01:11:26.720
And so that's something that we, I think, maybe we could all

01:11:26.720 --> 01:11:29.720
work together on to be angry about machine learning systems

01:11:29.720 --> 01:11:33.720
and machine learning researchers not caring about reproducibility

01:11:33.720 --> 01:11:34.720
as an issue.

01:11:34.720 --> 01:11:38.720
But the fact that, okay, yeah, good.

01:11:38.720 --> 01:11:40.720
So one of the things we're doing in the next webinar

01:11:40.720 --> 01:11:45.720
is that we're extending it through the handle data sets

01:11:45.720 --> 01:11:48.720
along with computer parameters as well as AIM.

01:11:48.720 --> 01:11:49.720
Right.

01:11:49.720 --> 01:11:51.720
We've been working with AI researchers, AI experts,

01:11:51.720 --> 01:11:54.720
and so forth in order to be able to capture the key information

01:11:54.720 --> 01:11:58.720
so we can at least start to summarize these factors into

01:11:58.720 --> 01:12:00.720
the index software.

01:12:00.720 --> 01:12:01.720
Okay.

01:12:01.720 --> 01:12:09.720
So the comment was that in SPDX version 3, we're going to have

01:12:09.720 --> 01:12:13.720
AI and data profiles, which tries to capture this information

01:12:13.720 --> 01:12:14.720
there.

01:12:14.720 --> 01:12:20.720
Why do you think that AI cannot be done in a reproducible manner?

01:12:20.720 --> 01:12:22.720
Now that's not done now, right?

01:12:22.720 --> 01:12:26.720
But if you can record everything again, have recipes for

01:12:26.720 --> 01:12:30.720
everything, do you think that the AI fundamentally cannot be

01:12:30.720 --> 01:12:31.720
done in a...

01:12:31.720 --> 01:12:32.720
No, no, no.

01:12:32.720 --> 01:12:36.720
I think the decisions have been made for the history of machine

01:12:36.720 --> 01:12:40.720
learning going back basically 25 years that have led us to this

01:12:40.720 --> 01:12:41.720
point.

01:12:41.720 --> 01:12:43.720
And there's a lot of, we have to reverse engineer the entirety

01:12:43.720 --> 01:12:46.720
of the machine learning research history to get to reproducibility

01:12:46.720 --> 01:12:49.720
for machine learning, unfortunately, because it wasn't taken

01:12:49.720 --> 01:12:53.720
seriously as an issue early on, in part because of the amount

01:12:53.720 --> 01:12:56.720
of processing power required to reproduce, right?

01:12:56.720 --> 01:12:59.720
Because if you want to retrain something, the amount of compute

01:12:59.720 --> 01:13:03.720
time you need to retrain is not available to most people.

01:13:03.720 --> 01:13:04.720
Okay.

01:13:04.720 --> 01:13:07.720
Question.

01:13:07.720 --> 01:13:29.720
Okay.

01:13:29.720 --> 01:13:39.720
So, I think it's a great correct way to process that.

01:13:39.720 --> 01:13:44.720
There may be correct or incorrect, but there are no correct

01:13:44.720 --> 01:13:50.720
or incorrect than the NARPH impact that is the IPR set up file

01:13:50.720 --> 01:13:51.720
or else.

01:13:51.720 --> 01:13:54.720
The comment was, sorry.

01:13:54.720 --> 01:13:59.720
I wanted to just kind of add to what he's saying.

01:13:59.720 --> 01:14:00.720
But I'll summarize it.

01:14:00.720 --> 01:14:01.720
Yes.

01:14:01.720 --> 01:14:03.720
So, he's saying that he was surprised by the number of

01:14:03.720 --> 01:14:05.720
people, I think it was just one person that said they're

01:14:05.720 --> 01:14:07.720
actually consuming S-bombs today.

01:14:07.720 --> 01:14:09.720
Yeah.

01:14:09.720 --> 01:14:13.720
And that he is in the project he maintains.

01:14:13.720 --> 01:14:19.720
I think that you're not, you're just ahead of the curve,

01:14:19.720 --> 01:14:20.720
probably.

01:14:20.720 --> 01:14:22.720
Most people, their adoption today, if you talk to people who

01:14:22.720 --> 01:14:26.720
are doing anything with S-bombs today, their adoption curve

01:14:26.720 --> 01:14:30.720
looks like produce S-bomb, then maybe consume S-bomb, and then

01:14:30.720 --> 01:14:34.720
maybe in the future I will incorporate the S-bombs that I'm

01:14:34.720 --> 01:14:37.720
consuming into the product that I'm building or whatever,

01:14:37.720 --> 01:14:38.720
right?

01:14:38.720 --> 01:14:40.720
Whereas in the future, you know, let's say a year from now,

01:14:40.720 --> 01:14:43.720
that may be a little bit reverse where people start consuming

01:14:43.720 --> 01:14:45.720
S-bombs before they create their own S-bombs.

01:14:45.720 --> 01:14:50.720
But today there's not enough people, there are no suppliers

01:14:50.720 --> 01:14:54.720
producing S-bombs to be consumed, right?

01:14:54.720 --> 01:14:56.720
That's the chicken and egg problem there.

01:14:56.720 --> 01:14:58.720
I mean, that's what I'm seeing at least.

01:14:58.720 --> 01:15:00.720
Does everybody know what you do when you have an egg?

01:15:00.720 --> 01:15:05.720
So, Felipe, I should have raised my hand halfway to that

01:15:05.720 --> 01:15:08.720
question because I've consumed S-bombs two to three times in

01:15:08.720 --> 01:15:12.720
my life in the cases where under the copy left licenses,

01:15:12.720 --> 01:15:15.720
like the GPL, we asked for the complete corresponding source

01:15:15.720 --> 01:15:18.720
code, and in response to that request, they instead produced

01:15:18.720 --> 01:15:21.720
an S-bomb, which is in fact not the complete corresponding

01:15:21.720 --> 01:15:22.720
source code.

01:15:22.720 --> 01:15:25.720
So I consumed it long enough to tell them this is not source

01:15:25.720 --> 01:15:28.720
code, and they insisted, by the way, that a major compliance

01:15:28.720 --> 01:15:31.720
industrial complex vendor had told them that that's what they

01:15:31.720 --> 01:15:34.720
were supposed to give us if we ever asked for the source code.

01:15:34.720 --> 01:15:36.720
Yeah.

01:15:36.720 --> 01:15:38.720
Yeah, I just want to respond to that.

01:15:38.720 --> 01:15:39.720
Just real quick.

01:15:39.720 --> 01:15:40.720
Just real quick.

01:15:40.720 --> 01:15:44.720
That's, okay, I agree that's unacceptable, but that's not an

01:15:44.720 --> 01:15:45.720
S-bomb.

01:15:45.720 --> 01:15:47.720
That's not a problem with S-bombs inherently.

01:15:47.720 --> 01:15:50.720
That's not a problem with lawyers giving the wrong

01:15:50.720 --> 01:15:54.720
information or people misunderstanding what the lawyer

01:15:54.720 --> 01:15:55.720
told them.

01:15:55.720 --> 01:15:58.720
Or, or, or maliciousness, yeah, it absolutely could be

01:15:58.720 --> 01:15:59.720
maliciousness.

01:15:59.720 --> 01:16:01.720
Delay, stone wall, right, yeah, yeah, yeah, yeah.

01:16:01.720 --> 01:16:02.720
I was mainly...

01:16:02.720 --> 01:16:04.720
Yeah, no, no, no, I just wanted to make a...

01:16:04.720 --> 01:16:05.720
Yeah, yeah, yeah, I didn't want...

01:16:05.720 --> 01:16:08.720
It just wasn't explicitly stated, so I just wanted to kind

01:16:08.720 --> 01:16:09.720
of identify the issue.

01:16:09.720 --> 01:16:13.720
For the record, I think no one here...

01:16:13.720 --> 01:16:14.720
Yeah.

01:16:14.720 --> 01:16:17.720
It seems that those bombs are replaced by...

01:16:17.720 --> 01:16:18.720
Yeah.

01:16:18.720 --> 01:16:21.720
We have to finish up pretty soon.

01:16:21.720 --> 01:16:22.720
Yeah.

01:16:22.720 --> 01:16:24.720
Just one comment on the using your phones.

01:16:24.720 --> 01:16:27.720
I don't know if you can use that, but it's a good

01:16:27.720 --> 01:16:30.720
discovery and we can shoot it, so it's not a problem.

01:16:30.720 --> 01:16:33.720
It's a way of indicating the risk of balancing between

01:16:33.720 --> 01:16:36.720
the developers, all the manufacturers, and the

01:16:36.720 --> 01:16:37.720
people.

01:16:37.720 --> 01:16:39.720
That's great.

01:16:39.720 --> 01:16:40.720
Repeat that.

01:16:40.720 --> 01:16:42.720
Okay, so I think what you're saying is, and you're

01:16:42.720 --> 01:16:43.720
orange, I think?

01:16:43.720 --> 01:16:47.720
Yeah, so you are producing and consuming internally

01:16:47.720 --> 01:16:50.720
generated S-bombs.

01:16:50.720 --> 01:16:54.720
So our last question is, what have you discovered?

01:16:54.720 --> 01:16:56.720
I'm just talking.

01:16:56.720 --> 01:16:57.720
Right, so as you are consuming...

01:16:57.720 --> 01:16:59.720
Are you consuming the S-bombs?

01:16:59.720 --> 01:17:03.720
What are you doing to help make decisions on your

01:17:03.720 --> 01:17:04.720
design?

01:17:04.720 --> 01:17:07.720
Are you saying, oh, there's a license missing, or oh,

01:17:07.720 --> 01:17:09.720
I shouldn't be using that version.

01:17:09.720 --> 01:17:13.720
We have a license missing and we find plenty of

01:17:13.720 --> 01:17:16.720
we have licenses and some surprises over time.

01:17:16.720 --> 01:17:19.720
Some surprising licenses and a little note

01:17:19.720 --> 01:17:23.720
that much of a source of those kind of licenses.

01:17:23.720 --> 01:17:26.720
And has that resulted in a change to your design,

01:17:26.720 --> 01:17:28.720
or have you just...

01:17:28.720 --> 01:17:31.720
Well, now and then we have to change libraries

01:17:31.720 --> 01:17:34.720
that you use or they have, for commercial license.

01:17:34.720 --> 01:17:35.720
Okay.

01:17:35.720 --> 01:17:36.720
Oh, yeah.

01:17:36.720 --> 01:17:38.720
Okay, well, that's good.

01:17:38.720 --> 01:17:39.720
I think...

01:17:39.720 --> 01:17:41.720
They have to publish all schools, but actually...

01:17:41.720 --> 01:17:42.720
Yeah.

01:17:42.720 --> 01:17:44.720
So that's probably quite an interesting...

01:17:44.720 --> 01:17:48.720
You know, licensing is probably quite an interesting

01:17:48.720 --> 01:17:51.720
use case for people to understand.

01:17:51.720 --> 01:17:53.720
I think we've had quite a lot about licensing today,

01:17:53.720 --> 01:17:56.720
which is really good.

01:17:56.720 --> 01:17:58.720
I think there are plenty more.

01:17:58.720 --> 01:17:59.720
I think we can all...

01:17:59.720 --> 01:18:01.720
You know, I think that's what I think there's plenty

01:18:01.720 --> 01:18:07.720
more to develop over the next month's years as we mature.

01:18:07.720 --> 01:18:09.720
And I think actually, I think S-BOM...

01:18:09.720 --> 01:18:11.720
If people start producing S-BOMs,

01:18:11.720 --> 01:18:13.720
you're going to reveal a lot more than you...

01:18:13.720 --> 01:18:17.720
You know, there's a lot of unknowns, I believe, in software.

01:18:17.720 --> 01:18:21.720
And I think, are people starting to ask questions

01:18:21.720 --> 01:18:22.720
of their suppliers?

01:18:22.720 --> 01:18:24.720
And, you know, I'm probably looking at the large

01:18:24.720 --> 01:18:26.720
organizations in this room.

01:18:26.720 --> 01:18:28.720
Have you put things on your contracts that are now

01:18:28.720 --> 01:18:32.720
asking your people to provide S-BOMs with your delivery,

01:18:32.720 --> 01:18:35.720
as well as a delivery note and a release note?

01:18:35.720 --> 01:18:39.720
Are people starting to do that and ask them, you know,

01:18:39.720 --> 01:18:41.720
and probably to keep Bradley happy?

01:18:41.720 --> 01:18:44.720
And are they also basically providing their compliance

01:18:44.720 --> 01:18:47.720
against licenses?

01:18:47.720 --> 01:18:50.720
Because if people start providing that as a starting

01:18:50.720 --> 01:18:53.720
point, that's going to help your risk assessment when

01:18:53.720 --> 01:18:55.720
you take S-BOMs off into a solution and then start

01:18:55.720 --> 01:18:56.720
adding value to it.

01:18:56.720 --> 01:18:59.720
That should be basically a real game changer for

01:18:59.720 --> 01:19:01.720
businesses as well.

01:19:01.720 --> 01:19:07.720
So maybe speaking for big companies, at the moment,

01:19:07.720 --> 01:19:13.720
as we already have, it's an act of, you cannot force

01:19:13.720 --> 01:19:18.720
our vendors to create a customer so that consumers,

01:19:18.720 --> 01:19:21.720
we can politely ask them at the moment.

01:19:21.720 --> 01:19:23.720
Maybe next year we can...

01:19:23.720 --> 01:19:24.720
Yeah, yeah.

01:19:24.720 --> 01:19:25.720
...

01:19:25.720 --> 01:19:28.720
...

01:19:28.720 --> 01:19:33.720
Yeah, he's saying that he's unable to force any vendor

01:19:33.720 --> 01:19:36.720
or supplier in general to supply an S-BOM, which I

01:19:36.720 --> 01:19:38.720
think is a big problem in general, right?

01:19:38.720 --> 01:19:42.720
I mean, A, your vendor may be 10,000 times bigger than

01:19:42.720 --> 01:19:44.720
you...well, not in your case, maybe not.

01:19:44.720 --> 01:19:47.720
But for a lot of smaller operators, right, they don't

01:19:47.720 --> 01:19:49.720
have the leverage over the vendor, right?

01:19:49.720 --> 01:19:53.720
Or in the case of your consuming open source software,

01:19:53.720 --> 01:19:56.720
like, they have no obligation to you at all, right?

01:19:56.720 --> 01:20:00.720
They...I mean, we've seen...like, I totally agree.

01:20:00.720 --> 01:20:03.720
Like, open source maintainers are already put upon enough,

01:20:03.720 --> 01:20:04.720
right?

01:20:04.720 --> 01:20:06.720
There's nobody that should put a gun to their head and

01:20:06.720 --> 01:20:09.720
say, you have to produce an S-BOM for me to consume.

01:20:09.720 --> 01:20:13.720
That's where the tooling has to get better, right?

01:20:13.720 --> 01:20:16.720
Companies like GitHub could even, you know, advance

01:20:16.720 --> 01:20:19.720
this a lot by making it much easier for project

01:20:19.720 --> 01:20:22.720
maintainers to have those produced on a regular basis,

01:20:22.720 --> 01:20:23.720
right?

01:20:23.720 --> 01:20:27.720
Yeah, in my work in license compliance and

01:20:27.720 --> 01:20:30.720
enforcement, the number of bad actors in your vendor

01:20:30.720 --> 01:20:33.720
space is much higher than you probably realize.

01:20:33.720 --> 01:20:36.720
And it's often not the vendor being bigger than you.

01:20:36.720 --> 01:20:38.720
It's actually these small vendors who are...there's

01:20:38.720 --> 01:20:41.720
only a couple, there's kind of a cartel, particularly,

01:20:41.720 --> 01:20:43.720
I'm thinking of chip set, you know, chip set for

01:20:43.720 --> 01:20:44.720
embedded devices vendors.

01:20:44.720 --> 01:20:47.720
There is a major chip set that I'm sure there's

01:20:47.720 --> 01:20:49.720
probably at least 30 devices in this room that use

01:20:49.720 --> 01:20:50.720
that chip set.

01:20:50.720 --> 01:20:54.720
The vendor requires you to agree before they will

01:20:54.720 --> 01:20:56.720
ship you even a demo board.

01:20:56.720 --> 01:20:59.720
You promise I will never ask for the complete

01:20:59.720 --> 01:21:01.720
corresponding source code under the GPL and that's

01:21:01.720 --> 01:21:04.720
the only way I'm going to send you a demo board.

01:21:04.720 --> 01:21:06.720
If you become a customer, you're never allowed to

01:21:06.720 --> 01:21:07.720
ask me for the source code.

01:21:07.720 --> 01:21:09.720
Now, this is a GPL violation, but it's very hard to

01:21:09.720 --> 01:21:12.720
catch because everybody who signs this agreement

01:21:12.720 --> 01:21:14.720
says, I don't ever want to, like, tell anybody I

01:21:14.720 --> 01:21:17.720
signed that agreement because they'll never sell me a

01:21:17.720 --> 01:21:18.720
board again.

01:21:18.720 --> 01:21:22.720
And so this optimism that we're going to get vendors

01:21:22.720 --> 01:21:24.720
to give us S-bombs, where vendors are getting people

01:21:24.720 --> 01:21:26.720
to sign those kinds of agreements, the idea that

01:21:26.720 --> 01:21:28.720
you're going to get them in an agreement to agree to

01:21:28.720 --> 01:21:31.720
give you an S-bomb, I think is probably a pipe dream

01:21:31.720 --> 01:21:34.720
in the current industrial environment around embedded

01:21:34.720 --> 01:21:35.720
chip set vendors at least.

01:21:35.720 --> 01:21:37.720
I don't know about other industries, but the embedded

01:21:37.720 --> 01:21:38.720
chip set vendors, I think that's the case.

01:21:38.720 --> 01:21:39.720
It's not bad.

01:21:39.720 --> 01:21:43.720
You don't have any embedded products.

01:21:43.720 --> 01:21:49.720
We tell hardware companies that we would use the

01:21:49.720 --> 01:21:51.720
chip set if the drivers are off-streaming.

01:21:51.720 --> 01:21:52.720
Right.

01:21:52.720 --> 01:21:53.720
Yeah.

01:21:53.720 --> 01:21:55.720
Because this network is easier for us.

01:21:55.720 --> 01:21:56.720
It's not easy.

01:21:56.720 --> 01:21:57.720
Yeah, yeah, yeah.

01:21:57.720 --> 01:21:58.720
Well, thank you for doing that.

01:21:58.720 --> 01:21:59.720
Yeah.

01:21:59.720 --> 01:22:04.720
So we're out of time.

01:22:04.720 --> 01:22:07.720
Many thanks to the wonderful panel and all the audience.

01:22:07.720 --> 01:22:13.720
Thank you, Alexios, for organizing.

01:22:13.720 --> 01:22:14.720
Yeah, yeah.

01:22:14.720 --> 01:22:15.720
Sure, definitely.

01:22:15.720 --> 01:22:16.720
Come on.

01:22:16.720 --> 01:22:17.720
That's good.

01:22:17.720 --> 01:22:21.720
So we have one last session, which is an open Q&A on

01:22:21.720 --> 01:22:27.720
everything S-bomb for whoever is interested and still alive.

01:22:27.720 --> 01:22:56.720
Thank you.

WEBVTT

00:00.000 --> 00:07.000
I'm going to start with the first part.

00:07.000 --> 00:08.000
Perfect.

00:08.000 --> 00:09.000
Thank you.

00:09.000 --> 00:10.000
Thank you, everyone.

00:10.000 --> 00:11.000
All right.

00:11.000 --> 00:21.000
So just to give a little introduction, I need to mute myself real quick.

00:21.000 --> 00:25.000
Just to give a little introduction about myself, my name is Alfred.

00:25.000 --> 00:26.000
Alfred Neumayer.

00:26.000 --> 00:32.080
I've been involved with the UBports project on Ubuntu Touch for about four to close to

00:32.080 --> 00:34.280
five years now.

00:34.280 --> 00:42.720
And I have started out with porting devices over to Ubuntu Touch over to devices that

00:42.720 --> 00:46.200
used to run Android kernels and Android drivers, not mainline.

00:46.200 --> 00:51.160
I used and reused the highly bits that we made up.

00:51.160 --> 00:59.600
And for that matter, I gained a lot of experience with the desktop later on because I started

00:59.600 --> 01:04.160
out with the phone and I really wanted to have this tablet experience with a touchpad

01:04.160 --> 01:05.360
and a keyboard.

01:05.360 --> 01:09.960
I couldn't get it quite right until some later hardware offered the ability to do so.

01:09.960 --> 01:15.800
But in the meantime, I was very interested in the desktop talk and what can we accomplish

01:15.800 --> 01:20.600
with the desktop convergence as the keyword.

01:20.600 --> 01:24.720
And I'm going to mention that one real quick.

01:24.720 --> 01:30.000
Let's see if the convergence thing actually does what it's supposed to do, right?

01:30.000 --> 01:31.000
Okay.

01:31.000 --> 01:33.120
Black screen.

01:33.120 --> 01:36.120
Does it stay black?

01:36.120 --> 01:40.120
There you go.

01:40.120 --> 01:41.120
Okay.

01:41.120 --> 01:47.600
A fingerprint reader doesn't want to work, but this one does.

01:47.600 --> 01:53.640
So yeah, you can actually, with Lemuria at least, you can use the phone as the virtual

01:53.640 --> 02:00.840
touchpad and virtual keyboard just to give it a little bit more presentation feel.

02:00.840 --> 02:01.840
We need to...

02:01.840 --> 02:02.840
Where's the full screen?

02:02.840 --> 02:03.840
Is there a full screen?

02:03.840 --> 02:06.840
Do we have full screen?

02:06.840 --> 02:10.680
Otherwise, that one is sufficient, I hope.

02:10.680 --> 02:11.680
Right?

02:11.680 --> 02:12.680
Yeah, that's it.

02:12.680 --> 02:14.680
That was a really obvious waste running.

02:14.680 --> 02:15.680
Sorry.

02:15.680 --> 02:17.440
Broke it to you.

02:17.440 --> 02:22.160
So the memory on the desktop, the method of the pocket size desktop.

02:22.160 --> 02:27.160
As we can see, it is totally possible to do so considering that we're still at the starting

02:27.160 --> 02:30.280
phase of where this really can go.

02:30.280 --> 02:34.240
So I'm going to talk about a little bit of the history, then about the evil convergence

02:34.240 --> 02:40.640
word, the word that we all like to use, but so many people use in so many different senses,

02:40.640 --> 02:46.840
so many different ways, then how we migrated over a few technology pieces like the system

02:46.840 --> 02:52.600
layer and the windowing protocol, the UI toolkit I'm going to introduce to you, and notable

02:52.600 --> 02:57.600
components that should you be interested in either working with us or taking your stuff

02:57.600 --> 03:04.160
and working on your own stuff, bring it over to another distro, you're totally free to

03:04.160 --> 03:08.280
do so and I will mention a few components that you might be interested in.

03:08.280 --> 03:09.280
So what do we have?

03:09.280 --> 03:10.280
The history.

03:10.280 --> 03:19.640
2013, the year of Ubuntu phone, as we hoped, as some of us hoped, as it did not drop until

03:19.640 --> 03:22.640
it really dropped and that was until 2016.

03:22.640 --> 03:29.560
In 2013 they introduced the Lemire shell, what's now called Lemire, they called it Unity

03:29.560 --> 03:34.640
8 back then as a continuation of their desktop efforts and they introduced MIR, the MIR Server

03:34.640 --> 03:43.440
Library that allows developers of compositors to easily create a new, now a days Wayland

03:43.440 --> 03:47.640
based compositor back then they used their own protocol which caused a lot of problems

03:47.640 --> 03:52.720
for some people in the community, but they turned around, they implemented Wayland on

03:52.720 --> 04:00.880
top of their own display stack, display server, which is Wayland compatible now a days, so

04:00.880 --> 04:01.880
that's something.

04:01.880 --> 04:07.680
2016, five devices have been released with Ubuntu touchpad installed which is quite interesting

04:07.680 --> 04:16.280
for something that was so niche, so yay, that was so niche, that gives me a hint that I

04:16.280 --> 04:19.600
should speed up talking.

04:19.600 --> 04:26.920
So five devices released, one tablet, four smart phones and they all ran like Android

04:26.920 --> 04:32.400
adaptations that they ported over using libhiberz, that's how they quickly made it to market

04:32.400 --> 04:37.520
very easily, I know for some people that's not interesting at all, but if you want to

04:37.520 --> 04:45.000
go to market really quickly that's sadly what they had to do and others before them also

04:45.000 --> 04:50.560
had to do it, even Carson Monk who started the libhiberz project, even him himself he

04:50.560 --> 04:54.800
said, well if you want to do it quickly you need to do it that way.

04:54.800 --> 05:02.400
2017, Canonical gives the Ubuntu Touch project to UB ports, we took it over, Canonical couldn't

05:02.400 --> 05:08.160
finance it anymore, they had no interest in keeping up with the project overall and gave

05:08.160 --> 05:13.680
it over to us and we are since then trying to make the best out of it and we have released

05:13.680 --> 05:22.400
24 OTAs and we're in the process of releasing our first final images of focal based Ubuntu

05:22.400 --> 05:26.440
Touch 2004.

05:26.440 --> 05:31.160
We already have a beta version which you can download and install and select a few of your

05:31.160 --> 05:33.280
devices but yeah.

05:33.280 --> 05:36.440
And Unity 8 gets renamed to Lemiri, why?

05:36.440 --> 05:42.240
Because it was very important for others to package it up without asking Canonical for

05:42.240 --> 05:48.960
every single license, copyright related license question.

05:48.960 --> 05:54.440
So we renamed everything from Canonical and Ubuntu to Lemiri so that it's generic, others

05:54.440 --> 05:58.400
can make use of it and they can package it for their distributions.

05:58.400 --> 06:04.080
So convergence, what do we mean by convergence, goddamn.

06:04.080 --> 06:07.440
Screen real estate, first of all, let's go back to the basics.

06:07.440 --> 06:11.440
The screen real estate, how many things can I actually put on the phone or on a tablet

06:11.440 --> 06:13.440
or on a desktop?

06:13.440 --> 06:21.080
What's the next property, is it multi-monitor capable, is there a possibility that you can

06:21.080 --> 06:28.600
plug in an external monitor into your phone and have it work easily without much configuration

06:28.600 --> 06:32.080
and can you do so wisely too?

06:32.080 --> 06:38.680
Wired, wisely, both of them can work and which input methods are available to your

06:38.680 --> 06:42.320
device at the moment that you want to use it.

06:42.320 --> 06:49.080
We support various types of input devices from touch, keyboard, everything that you

06:49.080 --> 06:54.000
expect nowadays from a personal computing device which accounts phones into the mix

06:54.000 --> 06:55.840
as well.

06:55.840 --> 07:02.280
And we are pretty much ready to deliver events, input events to applications whenever they

07:02.280 --> 07:09.720
need to be delivered and they deliver everything that the application expects.

07:09.720 --> 07:15.840
If there's a new protocol coming up, we are pretty much future proof due to the MIR team

07:15.840 --> 07:17.680
working on their stuff.

07:17.680 --> 07:23.920
The way the MIR handles the input and passes it on to the compositor is very much making

07:23.920 --> 07:31.800
it possible to increase the abilities of input methods overall and that gives me a hint to

07:31.800 --> 07:35.040
shut up again.

07:35.040 --> 07:40.240
So convergence, what is actually convergence?

07:40.240 --> 07:45.600
In our mind and that is the ability to adapt to different usage scenarios.

07:45.600 --> 07:48.360
It's not which device does it run on.

07:48.360 --> 07:54.320
It doesn't mean what output device, it does not only mean what output and input device

07:54.320 --> 07:55.320
do you plug in.

07:55.320 --> 07:57.800
It also means how is it adapting.

07:57.800 --> 08:03.840
So for example, this phone when you use the wireless display capability, it's still a

08:03.840 --> 08:11.600
phone, it's just got a wireless screen attached to it which displays everything that a normal

08:11.600 --> 08:14.560
monitor would do but it's still a phone, it's not wired.

08:14.560 --> 08:20.560
So how do we determine whether something is in phone mode or in desktop mode or tablet

08:20.560 --> 08:22.840
mode and that's what the shell usually does.

08:22.840 --> 08:27.640
I will get to the components and each of their responsibilities later.

08:27.640 --> 08:30.000
But for now, the basics are convergence.

08:30.000 --> 08:35.920
Attach to a usage scenario that you see fit as the shell or as the user basically because

08:35.920 --> 08:41.040
we cater towards what the user might want at a very specific moment in time.

08:41.040 --> 08:44.440
Both the shell and the applications need to be able to adapt.

08:44.440 --> 08:48.360
Without the applications adapting, you have a great shell and you can't use anything with

08:48.360 --> 08:49.400
it.

08:49.400 --> 08:55.880
So we need the applications to follow the same rules, to follow the same standards and

08:55.880 --> 09:01.800
make it easy with our custom UI toolkit that we have built based on Qt and QML.

09:01.800 --> 09:05.260
It actually existed before Qt controls 1 was a thing.

09:05.260 --> 09:11.640
So Canonical had to get something out of the sleeves real quickly and they made up the

09:11.640 --> 09:15.720
now it is called the new UI toolkit.

09:15.720 --> 09:18.280
Back then it was just Ubuntu toolkit.

09:18.280 --> 09:25.000
And another thing that goes into the whole convergence thing is pausing at the application

09:25.000 --> 09:30.040
as you expect nowadays from a phone where the UI thread of an application is paused.

09:30.040 --> 09:31.040
It doesn't do anything.

09:31.040 --> 09:37.600
How can we provide the same functionality with a typical new slash Linux way of handling

09:37.600 --> 09:43.680
things like we don't have this cycle Android process that spawns other services in the background

09:43.680 --> 09:48.360
and it does everything, quote unquote, hidden away from the user.

09:48.360 --> 09:55.320
We as application developers need to think differently about how to approach a modern

09:55.320 --> 10:02.320
day usage scenario with a smartphone being able to power save as well as being feasible

10:02.320 --> 10:05.240
and doing stuff in the background when it's supposed to do it.

10:05.240 --> 10:10.240
Not run in the background every time, all the time, because that's wasting battery.

10:10.240 --> 10:14.840
But we need to make sure that the application life cycle is something that works on a phone

10:14.840 --> 10:19.560
and it might work differently on a tablet and it might work differently on a desktop.

10:19.560 --> 10:21.760
It definitely does differently on a desktop.

10:21.760 --> 10:28.280
You don't want an application to pause underneath your feet or something, pulling the rug away.

10:28.280 --> 10:35.640
So we do this for preservation of battery life and for that we need different policies

10:35.640 --> 10:39.360
for every usage scenario.

10:39.360 --> 10:45.400
And we do that by using Lamere app launch, which is a little library that handles everything

10:45.400 --> 10:47.440
related to launching the applications.

10:47.440 --> 10:51.320
It puts everything in the C group as you expect nowadays.

10:51.320 --> 10:54.380
Specifically it uses system to user sessions for that.

10:54.380 --> 10:58.880
And it also helps with application confinement and security because, on the point of touch

10:58.880 --> 11:04.640
at least, the main goal is to provide a store that other people can download applications

11:04.640 --> 11:10.040
from without worrying too much whether that data can be accessed or not.

11:10.040 --> 11:13.360
Of course we can trust every application but then we would need to review them.

11:13.360 --> 11:18.240
The typical traditional open source way of, Debian way, whatever you might want to call

11:18.240 --> 11:26.160
it of importing data, software code and auditing it and then releasing it to others.

11:26.160 --> 11:27.160
That's not what we want to do.

11:27.160 --> 11:33.520
We want to give app developer easy access to release their stuff to users that they

11:33.520 --> 11:34.960
care about.

11:34.960 --> 11:40.120
For that we need application confinement and a few security practices that are part of

11:40.120 --> 11:47.960
the whole convergence story and of the application lifecycle model that we have.

11:47.960 --> 11:51.000
The result, or at least the dream for Canonical, was this.

11:51.000 --> 11:56.960
You have a phone, a tablet, a laptop and even a TV which can run the same shell.

11:56.960 --> 11:59.040
That's the last missing property of convergence.

11:59.040 --> 12:01.580
You have one code base running everywhere.

12:01.580 --> 12:13.140
You have one code that is sufficiently adaptive to each situation that it works as you expect.

12:13.140 --> 12:15.400
It looks similar enough.

12:15.400 --> 12:21.160
The input methods of course differ but in reality they provide exactly what the user

12:21.160 --> 12:23.760
wants at a specific moment in time.

12:23.760 --> 12:25.980
Swipe on the phone, it works like a phone.

12:25.980 --> 12:27.520
Use your remote control on the TV.

12:27.520 --> 12:28.700
It works like a TV.

12:28.700 --> 12:29.700
It looks similar.

12:29.700 --> 12:31.880
It feels similar.

12:31.880 --> 12:36.000
Use experience part.

12:36.000 --> 12:38.200
Next one, migration to new technologies.

12:38.200 --> 12:40.560
It took us some time.

12:40.560 --> 12:46.840
It took us some time to move over to system D but the concept very much applied because

12:46.840 --> 12:54.480
AppStart back then already used to start stuff as individual session services.

12:54.480 --> 13:00.240
For Lameerie App Launch it reacts to apps appearing and disappearing for us.

13:00.240 --> 13:02.840
It gives us the events.

13:02.840 --> 13:05.000
Application XYZ is gone.

13:05.000 --> 13:08.160
Remove it from the launcher because it's gone and remove all the resources that you have

13:08.160 --> 13:13.440
allocated to RAM.

13:13.440 --> 13:18.720
Migration to new and new and that's a more interesting one because Dapen is pain.

13:18.720 --> 13:25.440
MIR 2.0 dropped support for the old protocol that everyone complained about.

13:25.440 --> 13:31.080
Current Lameerie on Open Touch does a split like Charlotte Claude Van Dam.

13:31.080 --> 13:36.080
In that sense it runs both MIR Client and Wayland.

13:36.080 --> 13:39.560
Through Wayland it also supports X Wayland.

13:39.560 --> 13:45.520
The Wayland support on MIR on Lameerie is good enough that you can actually spawn a

13:45.520 --> 13:51.280
GIMP application running through X Wayland on a LiPybers device or on a MALON device

13:51.280 --> 13:56.000
depending on which X Wayland version you install and it works.

13:56.000 --> 13:59.640
The problem is we want to go Wayland everywhere.

13:59.640 --> 14:04.280
For Wayland everywhere we need to adapt a few new concepts, a few new things that are

14:04.280 --> 14:08.200
right at this moment in development on the MIR side.

14:08.200 --> 14:15.520
So MIRL, an abstraction layer which allows basic windowing to be done to really receive

14:15.520 --> 14:20.040
data about a window being placed somewhere and stuff like that.

14:20.040 --> 14:27.920
MIR oil takes it another step further which gives us the ability to get those trust prompts

14:27.920 --> 14:34.360
that we use on Open Touch, those dialogues that pop up underneath an application and

14:34.360 --> 14:40.120
overlay themselves on top of an application where you have to say, okay, I give this application

14:40.120 --> 14:41.440
access to my GPS.

14:41.440 --> 14:43.320
I give this application access to my microphone.

14:43.320 --> 14:44.560
It doesn't do it by default.

14:44.560 --> 14:45.880
It doesn't allow it.

14:45.880 --> 14:47.960
You as a user need to allow it.

14:47.960 --> 14:52.400
For that we need a few more components like trust prompt integration into MIR oil.

14:52.400 --> 15:01.280
Screen casting is also going to be tough because screen casting is just different enough, mainline

15:01.280 --> 15:06.400
devices versus hybrid devices that buffer passing might work but then how are we going

15:06.400 --> 15:13.560
to tell which buffer looks like an Android buffer?

15:13.560 --> 15:19.000
I think I need to figure out a few things on my side with regards to Wayland and how

15:19.000 --> 15:22.000
WL buffers are supposed to be passed around.

15:22.000 --> 15:29.520
But if anyone here has a lot of Wayland knowledge and wants to help us out here and wants to

15:29.520 --> 15:36.000
have some screen casting for themselves too, please get in touch with me and we can figure

15:36.000 --> 15:42.040
out something that works for both sides, I guess.

15:42.040 --> 15:46.720
The UI toolkit, Lemire UI toolkit, this is a beautiful thing if you ask me.

15:46.720 --> 15:48.520
I really like this.

15:48.520 --> 15:54.600
The way that our browser, for example, that you can see the Chrome of on the top, that's

15:54.600 --> 16:00.440
the Lemire UI toolkit rendering the tabs and depending on whether you resize the window,

16:00.440 --> 16:04.560
it actually turns into something that you have to swipe up from the bottom edge of your

16:04.560 --> 16:13.480
phone because this responsive design thing is one way to achieve convergence in a sense.

16:13.480 --> 16:18.200
The UI toolkit, it follows our human interface guidelines, allows for convergence use cases

16:18.200 --> 16:23.160
and it is used by the Lemire UI shell throughout the code base.

16:23.160 --> 16:28.000
We have something that can be used by both apps and the shell so that both look the same

16:28.000 --> 16:34.480
compared to others who write one toolkit for the shell and one toolkit for everything else.

16:34.480 --> 16:38.440
In this sense, we have something that works on both sides of the equation.

16:38.440 --> 16:45.040
It's abstracted by Qt and Qt does everything for us, but what it does not do for us is

16:45.040 --> 16:47.400
handle the Wayland connections.

16:47.400 --> 16:55.120
For that, we need MIR and we need Qt MIR as an integration point that takes MIR's window

16:55.120 --> 17:03.840
contents, the buffers, and displays them on the screen or rather the scene graph of Qt.

17:03.840 --> 17:08.320
When you put things on the scene graph, it's like this tree type of structure, you put

17:08.320 --> 17:13.840
things on the screen, they get rendered and then they get displayed on the screen as you

17:13.840 --> 17:23.040
expect using OpenGL and Qt MIR also already does basic window management, but it doesn't

17:23.040 --> 17:25.200
do everything that Lemire needs to do.

17:25.200 --> 17:30.080
It already does multiple monitors and also supports multiple input types, whatever you

17:30.080 --> 17:37.120
expect nowadays from a display that can be driven with input devices.

17:37.120 --> 17:44.960
Lemire itself, the shell, uses Qt MIR for the application window presentation, so everything

17:44.960 --> 17:52.000
the Qt MIR gets from MIR, it gives further down to Lemire.

17:52.000 --> 17:53.400
Lemire displays it.

17:53.400 --> 18:00.980
We can even put some shader effects onto those tiny windows and make it a little colorful,

18:00.980 --> 18:08.060
make them explode as you used to from compass times and have them render quite interesting

18:03.120 --> 18:24.040
image is what you expect.

18:08.060 --> 18:14.360
stuff just because of the way that Qt does animation in QML, which is quite interesting.

18:14.360 --> 18:18.560
It also does more sophisticated window management, so window snapping, multiple workspaces, the

18:18.560 --> 18:24.040
whole dimension of the

18:24.040 --> 18:25.040
Ethercast, that's another one.

18:25.040 --> 18:28.360
This one is not for the mainline folks yet.

18:28.360 --> 18:32.760
I think this is an invitation for mainland folks to help us get it working on the Pine

18:32.760 --> 18:39.080
Phone Pro, for example, which someone in the community has actually started a port on.

18:39.080 --> 18:46.040
They got Ubuntu Touch running on the Pine Phone Pro with Lemire, with everything that

18:46.040 --> 18:54.680
you expect, even the trust prompts, because they required a few patches to our side.

18:54.680 --> 19:01.480
It doesn't know how to take those DRM and GBM allocated buffers and pass it on to an

19:01.480 --> 19:02.480
encoder.

19:02.480 --> 19:08.440
We just need the screencasting and the video encoding to be done quickly, then we can achieve

19:08.440 --> 19:16.440
sort of like 20% CPU usage on one core type of deal for wireless display support.

19:16.440 --> 19:24.640
So 20% of one CPU core being in use, for me that counts as nothing almost.

19:24.640 --> 19:31.920
It's definitely usable, and I regularly do it with my Pixel 3a and it works flawlessly,

19:31.920 --> 19:32.920
right?

19:32.920 --> 19:37.720
And one last notable component, or two of them, is the onscreen keyboard, which also

19:37.720 --> 19:41.960
plays into the whole Lemire story, so to say.

19:41.960 --> 19:48.040
So Malit, we use Malit as the onscreen keyboard framework, and Lemire keyboard is a plug-in

19:48.040 --> 19:55.000
to it, which connects over Wayland or over Mere client to the Shell, and says, hey, I'm

19:55.000 --> 19:57.720
here, take me as your input device.

19:57.720 --> 20:01.520
And Shell says, yes, I like you.

20:01.520 --> 20:08.400
In that sense, the Lemire keyboard, it uses the Lemire UI toolkit as well, as you would

20:08.400 --> 20:15.520
expect, and it also has some nice little features like you swipe up, when you have the onscreen

20:15.520 --> 20:20.920
keyboard sliding up, and you swipe up from the bottom edge, you get to do text selections

20:20.920 --> 20:28.240
very nicely, and you can also do the same with the space bar, with the space key.

20:28.240 --> 20:31.560
That's a totally awesome thing to play around with.

20:31.560 --> 20:33.800
And with that being done, I think.

20:33.800 --> 20:36.800
We have five minutes left in total.

20:36.800 --> 20:37.800
In total?

20:37.800 --> 20:38.800
Yes.

20:38.800 --> 20:42.080
Then we're going to skip the demo because you saw everything already.

20:42.080 --> 20:45.120
Well, that's pretty much it.

20:45.120 --> 20:49.280
If you have any questions, I will play around with the device.

20:49.280 --> 20:51.600
We can interactively together use it, right?

20:51.600 --> 20:52.600
Okay.

20:52.600 --> 20:53.600
There's a question.

20:53.600 --> 21:01.200
So if I want to use my phone as an input device on Gentoo, do I install Malit or something?

21:01.200 --> 21:02.800
As an input device on what?

21:02.800 --> 21:03.800
Gentoo.

21:03.800 --> 21:10.720
Are you planning to bring the Shell over the Lemire experience to Gentoo, for that matter?

21:10.720 --> 21:16.840
I want, for example, I have Gentoo, I have Malit, and I want to use my phone as the touchpad.

21:16.840 --> 21:17.840
Oh, no, no.

21:17.840 --> 21:19.560
That's because it is integrated.

21:19.560 --> 21:24.080
This is the virtual touchpad of the phone, and it's because it's integrated with the

21:24.080 --> 21:29.200
Shell, with the Malit desktop that we are running.

21:29.200 --> 21:30.200
This is onscreen.

21:30.200 --> 21:32.200
This is Lemire, yeah.

21:32.200 --> 21:34.320
This is all integrated into Lemire.

21:34.320 --> 21:38.600
So Lemire knows this is a virtual touchpad.

21:38.600 --> 21:43.080
Let me do all the virtual touchpad stuff, and it does so by...

21:43.080 --> 21:46.480
Is it available as a separate package that I can...

21:46.480 --> 21:47.960
No, no, no, no, no.

21:47.960 --> 21:51.880
It's integrated into the system's desktop.

21:51.880 --> 21:53.400
We're not playing Lego here.

21:53.400 --> 21:54.400
I'm sorry.

21:54.400 --> 22:02.080
I didn't want to sound mean, but it's like those things needed to be integrated because

22:02.080 --> 22:06.560
they wanted to release very soon, very quickly, very on time.

22:06.560 --> 22:11.480
I plan to have a separate library, for example, by using...

22:11.480 --> 22:18.440
It uses U inputs, the typical user space injects events into the Shell.

22:18.440 --> 22:19.560
That's all it does.

22:19.560 --> 22:20.720
U events.

22:20.720 --> 22:21.720
U input, specifically.

22:21.720 --> 22:22.720
Sorry for my intellectual environment.

22:22.720 --> 22:23.720
No.

22:23.720 --> 22:32.720
Is there a plan to have a separate package that I can use in different distribution,

22:32.720 --> 22:36.520
where I use a valor, for example?

22:36.520 --> 22:37.520
This is valent.

22:37.520 --> 22:39.640
This is totally valent, where you use valent.

22:39.640 --> 22:41.400
This is a valent desktop.

22:41.400 --> 22:47.000
This is the desktop, but it also does the virtual screen, virtual input methods for

22:47.000 --> 22:48.000
you.

22:48.000 --> 22:56.320
You could, in theory, create a new Android, selfish, all of them, Mobian application that

22:56.320 --> 23:02.080
just does that and transfers it over the wire to a desktop.

23:02.080 --> 23:03.480
But this is not it.

23:03.480 --> 23:04.480
This is all integrated.

23:04.480 --> 23:06.480
You want something like CnRd.

23:06.480 --> 23:11.480
The CnRd is a tool which allows you to set a separate machine running and then move your

23:11.480 --> 23:13.480
mouse over the screen border.

23:13.480 --> 23:17.480
They want something like CnRd, you can set that up and use the mouse over a new device.

23:17.480 --> 23:25.480
CnRd doesn't work at the moment, but work is underway to make sure that you work.

23:25.480 --> 23:28.480
Oh, multiple workspaces.

23:28.480 --> 23:30.480
I haven't shown that you're that.

23:30.480 --> 23:32.480
Multiple workspaces.

23:32.480 --> 23:35.480
And a workspace.

23:35.480 --> 23:36.480
Hooray.

23:36.480 --> 23:39.480
How do you enable this desktop mode?

23:39.480 --> 23:42.480
Just connected and go?

23:42.480 --> 23:45.480
You just connected and it's done.

23:45.480 --> 23:46.480
Right.

23:46.480 --> 23:52.480
We do detect certain properties of the screen, whether it is a TV screen, projector, monitor,

23:52.480 --> 23:53.720
integrated thing.

23:53.720 --> 24:02.000
We have a whole genome full of different types of monitors that can be connected.

24:02.000 --> 24:09.680
We also do a check by screen size, I think by scaling of the device.

24:09.680 --> 24:18.640
So if you put it on an 11-inch device, depending on the pixel density, it would behave differently.

24:18.640 --> 24:20.960
But yeah.

24:20.960 --> 24:22.240
That's pretty much how it looks like.

24:22.240 --> 24:25.640
This is a terminal that I'm not going to input my password in.

24:25.640 --> 24:26.640
Yeah?

24:26.640 --> 24:28.320
Which device is it running on now?

24:28.320 --> 24:29.320
This is the Fairform 4.

24:29.320 --> 24:30.320
Okay.

24:30.320 --> 24:32.320
All right.

24:32.320 --> 24:42.600
While we ask the last questions, Pablo can already start setting up stuff for the next

24:42.600 --> 24:45.440
so that ends the demo part, I guess.

24:45.440 --> 24:46.440
Yes.

24:46.440 --> 24:47.440
Sorry for that.

24:47.440 --> 24:50.440
But you still have some time for question or answers while Pablo's here.

24:50.440 --> 24:51.440
All right.

24:51.440 --> 24:52.440
Sure.

24:52.440 --> 25:06.800
Can anyone see

25:03.520 --> 25:09.580
Yes.

25:06.800 --> 1193:27:50.816
them?

WEBVTT

00:00.000 --> 00:17.400
So, hello. Oh, it vanished. Okay. Oh, it reappeared. So, hello. My name is Armin Le Grant. I'm

00:17.400 --> 00:24.000
working on the graphics stack for a long time, as many of you know. And this is actually

00:24.000 --> 00:29.920
also a kind of update from the LibreOffice conference where I already talked about system-dependent

00:29.920 --> 00:36.160
primitive renders and why they are important. I'm talking about them for years, as you know.

00:36.160 --> 00:45.440
And at the last conference, I was so... I wished to promise to implement a prototype, and I did,

00:45.440 --> 00:55.000
and it's finished. And I did it on Direct2D, and it renders what you expected to render. So,

00:55.000 --> 01:03.320
with Direct2D, of course, it's on Windows. But there was no special reason for Direct2D. I just

01:03.320 --> 01:12.240
wanted to try out if it fits well to a standard graphic library, and if I could figure out how

01:12.240 --> 01:20.560
to do it myself, because I didn't know Direct2D too good myself. So, it was some safe training,

01:20.560 --> 01:33.920
too. So, it's finished. It's working. And everyone can have an example now how to do some system-dependent

01:33.920 --> 01:39.920
primitive render, if he wants to. So, what happens when painting? I don't want to go in detail about

01:39.920 --> 01:50.000
that. I have tried to formulate what's all happening, so you can just check it when you

01:50.000 --> 01:58.360
download the presentation. That's the history, why it happened, what happened. Also, some history.

01:58.360 --> 02:09.560
So, what did I do? Just started with a simple primitive processor, and it's feature-complete,

02:09.560 --> 02:15.240
because it supports all necessary primitives. There are four primitives you have to support,

02:15.240 --> 02:22.320
and some grouping primitives you have to support, and there are quite some extra primitives

02:22.320 --> 02:28.040
supported to get some more speed into it, which is not necessary to be feature-complete, because,

02:28.040 --> 02:35.800
as I hope you know all now, you can decompose a primitive, and it just dismantles the simpler

02:35.800 --> 02:45.160
primitives, which can then be rendered. So, it's in a single source file, so no hacking required.

02:45.160 --> 02:50.560
Inside this single source file, you can do whatever you want. It's just 2,000 lines,

02:50.560 --> 02:56.880
so not too much if you compare it with some backend implementations, which are spreaded

02:56.880 --> 03:08.920
over the whole office. It translates primitive data directly to direct2D, uses already available

03:08.920 --> 03:14.960
system-dependent buffering, which was not used in other implementations. I don't know

03:14.960 --> 03:21.680
why, because it's working and available. It does not need any adaption of bitmap bitmapX,

03:21.680 --> 03:27.880
which of course would be even better to do, so to directly use the data without converting

03:27.880 --> 03:34.760
it. But now, it's just converted once and held in this standard system-dependent buffer.

03:34.760 --> 03:38.960
So it's quite fast, and you can try yourself, because it's in the master, so if you have

03:38.960 --> 03:44.640
a Windows Pro version and you started with the environment variable mentioned here, you

03:44.640 --> 03:50.120
will get the new renderer, and you will see the added view of the impulse and the parts

03:50.120 --> 03:55.840
of Witer and Kalk, as far as, say, support primitive rendering, rendered directly by

03:55.840 --> 04:03.640
direct2D without using output device at all. So that's proof of concept, and I delivered.

04:03.640 --> 04:15.080
So now, I hope we find some guys who can help. These are the ones I added to make it faster,

04:15.080 --> 04:22.080
and it's not even optimized, but already pretty fast, because just think about the layers

04:22.080 --> 04:27.960
which are used. We have the model. It creates primitives. The primitives are thrown at a

04:27.960 --> 04:37.600
renderer currently to the VCL Pixel renderer. That renderer packs it to output device, still

04:37.600 --> 04:43.320
to output device, and that output device sends it to a backend. So you have a five-level

04:43.320 --> 04:51.880
stack and output device alone does a lot of work in between, old, un-maintainable, incredible

04:51.880 --> 04:58.840
stuff in between. So what a system-dependent primitive renderer does, it removes the three

04:58.840 --> 05:07.520
last steps and packs it into one. You go directly to the renderer you want, in this case direct2D.

05:07.520 --> 05:13.920
So what does it look like when you let it run? It looks the same, and that was exactly

05:13.920 --> 05:20.880
the target. It looks the same, but it's fast, and it does not use output device. So what

05:20.880 --> 05:26.400
else can be done? Currently it has no support for text, so text is decomposed and rendered

05:26.400 --> 05:33.360
as anti-aliased poly polygons, not too bad, but of course for production state we would

05:33.360 --> 05:40.840
need something more. And direct support for gradients, so for direct2D I already looked

05:40.840 --> 05:46.120
a little bit into it. It might just be done as a custom effect, which is some kind of

05:46.120 --> 05:54.120
texturing. So with some more work this could easily be extended to product quality. Let's

05:54.120 --> 06:00.800
see if we find resources to do with this system.

06:00.800 --> 06:08.160
So what also happened? Krallen started a system-dependent primitive renderer on Kyrol. Thanks Krallen,

06:08.160 --> 06:17.560
you're my man. So he just tested out by copy-pasting the structure and filling it out with Kyrol

06:17.560 --> 06:22.320
stuff and it does render some things. There are some KFETs and it would need some more

06:22.320 --> 06:28.240
love. But it's easy maintainable and can be extended. So another proof of concept that

06:28.240 --> 06:36.480
this really works well. So in the process I also did some upstream cleanup stuff in

06:36.480 --> 06:42.120
the master, which was in the race. It was another reason to do this proof of concept

06:42.120 --> 06:49.240
and prototype. I can no promise that you can do exactly the same in drawing layer and do

06:49.240 --> 06:57.000
your own system-dependent primitive renderer for any target system without having to fear

06:57.000 --> 07:01.920
that you get hung on something in the master, which would be in the way because I had to

07:01.920 --> 07:11.200
clean that up anyways. The other point is, this is good for edit view visualizations,

07:11.200 --> 07:22.720
but what about the rest which is still painting using output device? So I did two more experiments.

07:22.720 --> 07:29.360
One is forward calls in the backends. So the backends has a lean API. I just made a proof

07:29.360 --> 07:36.680
of concept prototype. You can find it in Garrett with the link I gave. You can edit as a patch

07:36.680 --> 07:43.000
to the current office, compile it and see it running. And you will see that it currently

07:43.000 --> 07:53.560
forwards a single method, draw a rectangle for test. And to make it visible in the office,

07:53.560 --> 07:58.480
it's just a little bit color coded so we can see it. So that works perfectly. And the good

07:58.480 --> 08:04.360
thing is the backends are libraries themselves. You can just link them against a drawing layer

08:04.360 --> 08:09.960
and all functionality can be in drawing layer and you're storing layer stuff. The other

08:09.960 --> 08:17.040
way I tried was a kind of draw for water in the output device itself. So for every paint

08:17.040 --> 08:24.080
command, call something in a virtual structure, which is then overloaded in output device.

08:24.080 --> 08:31.280
Also works flawlessly. And I also use the draw rect again. And this is proof of concept

08:31.280 --> 08:36.840
too. There's also a Garrett link. You can just use that link, patch it into your office,

08:36.840 --> 08:46.960
compile and see it running. You get the same color styling to see how it's running. Yeah.

08:46.960 --> 08:55.040
So which way to continue? Best convert all to LibreOffice primitives. I always wanted

08:55.040 --> 09:02.600
to have that done, but I know it's not possible. Combination of one of this solutions with

09:02.600 --> 09:09.920
system dependent primitives or worst, just keep it like this. Like always. So I'm still

09:09.920 --> 09:16.520
very interested to do this, but I did this prototype now mostly in private with some

09:16.520 --> 09:25.520
support from Torsten. Thanks. But I cannot continue doing it in the needed intensity

09:25.520 --> 09:31.280
just privately. So without getting resources, this will fail again. And we will stay at

09:31.280 --> 09:35.880
VCL output device forever. That's it.

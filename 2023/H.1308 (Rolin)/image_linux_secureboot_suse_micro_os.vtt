WEBVTT

00:00.000 --> 00:14.960
Okay, and so our final in-person talk, the last talk will be recorded playback.

00:14.960 --> 00:22.320
And now we have Ignaz Foster talking about OpenSUSE MicroS and the technical details.

00:22.320 --> 00:25.760
So thanks for coming.

00:25.760 --> 00:27.800
Thanks for the introduction and thanks for joining.

00:27.800 --> 00:32.560
A selfless talk will be about OpenSUSE MicroS.

00:32.560 --> 00:39.240
We have several topics to cover and not much time, so I'll just go over them quickly.

00:39.240 --> 00:44.880
We can't go into too much detail of here, but yeah, we'll see.

00:44.880 --> 00:46.120
Just one slide back.

00:46.120 --> 00:47.120
My name is Ignaz.

00:47.120 --> 00:53.800
I'm working for SUSE and yeah, I'm working as a research engineer.

00:53.800 --> 00:55.640
So what are today's topics?

00:55.640 --> 01:00.240
First of all, I'll give you a short introduction on OpenSUSE MicroS itself.

01:00.240 --> 01:03.760
How is it built up and on which foundations is it built up?

01:03.760 --> 01:09.240
Then we'll have a short look about the update and rollback mechanisms we are using there

01:09.240 --> 01:14.080
and something we haven't talked a lot about today on configuration file management on

01:14.080 --> 01:17.320
our approach to handle these in image-based systems.

01:17.320 --> 01:23.120
We probably won't make it to the full disk encryption and trust it's boot part, but I

01:23.120 --> 01:27.480
can just refer to Len's talk from earlier today.

01:27.480 --> 01:34.200
So when we are talking about OpenSUSE MicroS, we are basically talking about some product

01:34.200 --> 01:37.400
of the whole OpenSUSE universe.

01:37.400 --> 01:41.240
The most known products there are Tumbleweed and Leap.

01:41.240 --> 01:46.560
Tumbleweed is our rolling release distribution and Leap is our stable distribution, stable

01:46.560 --> 01:52.280
not in a sense of Tumbleweed crashes all the time, but stable in a sense of the API doesn't

01:52.280 --> 01:55.680
change all the time.

01:55.680 --> 01:59.200
Leap itself is based on SUSE Linux Enterprise.

01:59.200 --> 02:05.440
SUSE Linux Enterprise in turn is based on a Tumbleweed snapshot which will then merge

02:05.440 --> 02:07.560
into a stable product.

02:07.560 --> 02:13.600
So when we are talking about MicroS, we still have the same products basically.

02:13.600 --> 02:18.840
We have OpenSUSE MicroS which is based on Tumbleweed and we have OpenSUSE Leap Micro

02:18.840 --> 02:21.720
which is based on Leap.

02:21.720 --> 02:25.880
So basically we also have the same ingredients in there.

02:25.880 --> 02:31.840
We still have the RPM packages as a base.

02:31.840 --> 02:38.920
To be exact, exactly the same packages we have in the Tumbleweed or Leap distributions

02:38.920 --> 02:41.720
and we are building up on these.

02:41.720 --> 02:51.380
You may know OpenSUSE as one of the large users of Bt

02:51.380 --> 02:56.880
just the default, but when we are talking about MicroS, then BtFS will be mandatory.

02:56.880 --> 03:04.680
You have to use it because we rely on these features really deeply.

03:04.680 --> 03:08.360
First of all, that's snapshots.

03:08.360 --> 03:11.600
These are the snapshots.

03:11.600 --> 03:19.040
When we are creating an update, we will need those snapshots to have the forward and rollback

03:19.040 --> 03:20.040
handling.

03:20.040 --> 03:22.160
BtFS has a huge advantage.

03:22.160 --> 03:24.880
We have heard that from a previous talk already.

03:24.880 --> 03:27.520
BtFS has copy and write functionality.

03:27.520 --> 03:32.600
When we do an update, it will be the smallest update possible basically.

03:32.600 --> 03:40.440
We don't have AP partitioning where we have to have two partitions the same size but can

03:40.440 --> 03:44.800
have a minimal snapshot for that.

03:44.800 --> 03:51.200
When we are talking about MicroS, if it's based on Tumbleweed and Leap, what's the actual

03:51.200 --> 03:53.560
difference compared to them?

03:53.560 --> 03:58.360
First of all, it's a read-only root file system which is, I guess, common for all the image-based

03:58.360 --> 04:02.480
systems we heard of today.

04:02.480 --> 04:05.040
It contains a minimal package selection.

04:05.040 --> 04:09.800
Minimal doesn't necessarily mean that it's the smallest distribution possible but a minimal

04:09.800 --> 04:13.280
package set for what it's trying to do.

04:13.280 --> 04:17.760
What it's trying to do is being a single-purpose system.

04:17.760 --> 04:23.960
It evolved from a project called OpenSouza Cubic which was a Kubernetes distribution

04:23.960 --> 04:27.680
until we discovered that you can use it for so much more.

04:27.680 --> 04:34.280
Basically, what it's nowadays is a single-purpose system including running containers but you

04:34.280 --> 04:40.920
can use it for any system or any use case you actually want to have.

04:40.920 --> 04:46.960
You also have a MicroS desktop so your single use case would be running a desktop there

04:46.960 --> 04:54.360
with flatpacks as packages for using your applications.

04:54.360 --> 05:05.520
That single-purpose system approach also means you can install packages from the Tumbleweed

05:05.520 --> 05:12.880
and Leap distributions but it's not designed to be used that way.

05:12.880 --> 05:23.880
You should use containers for your actual load or you can say you install one dedicated

05:23.880 --> 05:28.560
package for example if you want to run it as a mail server or whatever.

05:28.560 --> 05:33.040
If you have a look at our commercial site where we have the SousaLix Enterprise Microproduct,

05:33.040 --> 05:36.000
we even have a very limited package set.

05:36.000 --> 05:41.760
You can't even install all the packages you can from Tumbleweed and Leap to make that

05:41.760 --> 05:51.040
clear that it's really meant to be used in a quite a restricted way for example for workloads,

05:51.040 --> 05:56.680
for example for cluster nodes or for embedded systems.

05:56.680 --> 06:00.600
Especially for embedded systems, we also have another very important point namely it's

06:00.600 --> 06:02.360
a self-maintaining system.

06:02.360 --> 06:07.760
You basically install it and then you in theory can't forget about it because it will just

06:07.760 --> 06:10.200
update and maintain itself.

06:10.200 --> 06:17.320
We'll have a short look at that later how that works.

06:17.320 --> 06:23.320
When we are talking about updates, I said it's a read-only system so you still have

06:23.320 --> 06:28.880
to be able to update the system somehow if it's not image-based.

06:28.880 --> 06:38.920
For that we are basically using the B2FS snapshot functionality which the B2FS snapshots are

06:38.920 --> 06:41.680
snapshots of the root file system.

06:41.680 --> 06:44.200
That's the important part.

06:44.200 --> 06:49.640
If you have a workload, for example containers, it's running in VAR.

06:49.640 --> 06:55.680
Of course you also have etc for your configuration files but the root file system basically what's

06:55.680 --> 07:02.800
below user is that part that is actually snapshotted and read-only.

07:02.800 --> 07:12.240
When we have an update, we will just create a new snapshot, the blue square on the second

07:12.240 --> 07:17.240
point and perform the update in there.

07:17.240 --> 07:23.640
The blue snapshot is a B2FS snapshot so it has minimal overhead.

07:23.640 --> 07:28.320
It will just be created in microseconds.

07:28.320 --> 07:32.440
There's no performance penalty for doing that.

07:32.440 --> 07:36.600
Then the update will be performed in that snapshot, for example by just calling the

07:36.600 --> 07:41.860
OpenSouce world superdub for doing a system update.

07:41.860 --> 07:50.540
If anything should go wrong in that step, then that snapshot can just be discarded again

07:50.540 --> 07:52.640
and we are back at square one.

07:52.640 --> 08:00.080
We just have the currently running system and the new snapshot, the active system won't

08:00.080 --> 08:02.920
even have seen the new snapshot.

08:02.920 --> 08:11.460
If the update was successful, then that snapshot will be marked as the new default snapshot.

08:11.460 --> 08:18.400
That means if we reboot the system just like AB partitioning, that snapshot will be used

08:18.400 --> 08:24.080
as the new boot file system.

08:24.080 --> 08:29.120
We have a second step, but that will be later, just a second.

08:29.120 --> 08:35.360
Let me talk about it immediately.

08:35.360 --> 08:40.320
We have a second step at boot called Health Tracker.

08:40.320 --> 08:47.480
If Health Tracker should detect that something is not working as expected, for example a

08:47.480 --> 08:54.200
service you expect it doesn't come up, then an automatic rollback will be performed again.

08:54.200 --> 08:59.960
We will be back at square one again.

08:59.960 --> 09:04.960
It behaves as nothing would have been changed and we can wait for the bug fix for whatever

09:04.960 --> 09:10.520
broke the actual update.

09:10.520 --> 09:17.720
All the metric happens in an application called transactional update and a new library called

09:17.720 --> 09:18.800
TUQL.

09:18.800 --> 09:21.600
Transaction update was originally a shell script.

09:21.600 --> 09:27.320
It called all the open SUSE specific stuff, for example calling super for the package

09:27.320 --> 09:36.440
management or calling MKInnID for rebuilding the InnID.

09:36.440 --> 09:43.000
Something which needed right access, so had to modify the root file system, was just wrapped

09:43.000 --> 09:45.320
with that wrapper script.

09:45.320 --> 09:50.040
Out of that, a new library emerged called libTUQL.

09:50.040 --> 09:54.080
That one is supposed to be platform agnostic.

09:54.080 --> 09:56.920
It includes C, C++ and D

09:56.920 --> 10:00.360
was bindings.

10:00.360 --> 10:06.080
The only implementation currently is for Btriv S and Snapper, but if you want to, you could

10:06.080 --> 10:07.920
also just write another backend.

10:07.920 --> 10:14.400
It's prepared for that for more general snapshot management.

10:14.400 --> 10:24.600
We have, for example, a microDNF plugin to be exact.

10:24.600 --> 10:30.880
You could just use that one library for that.

10:30.880 --> 10:38.320
I just said if you want to activate that snapshot, you would usually reboot and have that snapshot

10:38.320 --> 10:39.800
activated.

10:39.800 --> 10:45.040
That's the atomic part, which is important for making sure that you don't touch the currently

10:45.040 --> 10:52.760
running system, but make sure the update is activated in one atomic step.

10:52.760 --> 10:59.440
With the next transaction update version, there will be also a new option called transaction

10:59.440 --> 11:01.360
update apply.

11:01.360 --> 11:08.280
What that one does is it will just mount basically user into the currently running

11:08.280 --> 11:09.280
system.

11:09.280 --> 11:14.880
That was possible if you heard the talk from Ludwig two talks ago.

11:14.880 --> 11:20.960
That was possible because of the user merge, because practically everything the system requires

11:20.960 --> 11:24.100
is below user.

11:24.100 --> 11:32.040
If it isn't, it should be changed in the future, but for microS, that one's working very reliably

11:32.040 --> 11:35.000
already.

11:35.000 --> 11:39.720
If you just update or if you just installed a new package in the new snapshot, that one

11:39.720 --> 11:46.360
will be totally painless because you just have the new package available immediately.

11:46.360 --> 11:51.560
If you change system services, and I don't know what, then maybe you should still think

11:51.560 --> 11:57.400
about rebooting afterwards because it's basically the same when you're running an update in

11:57.400 --> 12:10.120
a running system, basically an update or superdub in a running system.

12:10.120 --> 12:12.000
I talked about rollback already.

12:12.000 --> 12:17.680
If you reboot the system and something doesn't work as expected, then it will perform an

12:17.680 --> 12:19.360
automatic rollback.

12:19.360 --> 12:27.400
With tracker, you can see the URL at the bottom itself provides an interface basically for

12:27.400 --> 12:28.760
custom plugins.

12:28.760 --> 12:33.400
You have to know yourself which services are running on your system, and you have to know

12:33.400 --> 12:34.960
yourself how to check them.

12:34.960 --> 12:42.080
As said, it's a single purpose system, so I hope you know what you're doing.

12:42.080 --> 12:48.760
You can just extend it with custom plugins where you define what defines a correctly

12:48.760 --> 12:52.800
running system.

12:52.800 --> 12:55.640
Let's have a look at the time.

12:55.640 --> 12:56.640
Excellent.

12:56.640 --> 12:59.880
Let's have a look at the configuration file management.

12:59.880 --> 13:11.160
When we are talking about read-only root file systems, we still have to have some directories

13:11.160 --> 13:12.160
of files writable.

13:12.160 --> 13:19.400
We've just seen that with the Ubuntu core talk in contrast to Ubuntu core for OpenSUSE

13:19.400 --> 13:20.400
micros.

13:20.400 --> 13:24.680
All of WA and all of etc are writable.

13:24.680 --> 13:29.080
WA is a separate subvolume.

13:29.080 --> 13:32.680
For etc, we are using a mechanism called overlays.

13:32.680 --> 13:37.880
It's basically just the kernel overlay of S file system.

13:37.880 --> 13:43.200
That one may need a bit more explanation.

13:43.200 --> 13:50.840
If we have a look at the hcfs tab entry for etc, it looks overly long and overly complicated.

13:50.840 --> 13:55.360
But in the end, it's just the two lines which are colored.

13:55.360 --> 14:01.600
We have the upper-der when we are just performing an update.

14:01.600 --> 14:07.080
That's the overlay of the next snapshot.

14:07.080 --> 14:12.240
The lower-der is the directory of the currently running system.

14:12.240 --> 14:20.600
To avoid having stacks over stacks over stacks, you'll just sync the state of the previous

14:20.600 --> 14:25.040
system as the base of the new snapshot.

14:25.040 --> 14:30.180
That's the three layers we are talking about.

14:30.180 --> 14:40.020
If we have a look at that in detail, what's happening on configuration file changes?

14:40.020 --> 14:46.520
If we have the case of file one, that's a really old file.

14:46.520 --> 14:49.960
That file has always existed, was never changed.

14:49.960 --> 14:51.560
That's no problem at all.

14:51.560 --> 14:56.100
Basically we are just having a look from the top to the bottom.

14:56.100 --> 14:57.260
Nothing is in upper-der.

14:57.260 --> 14:58.960
Nothing is in lower-der one.

14:58.960 --> 15:04.200
Every version of lower-der two will be used.

15:04.200 --> 15:08.080
File two is interesting because that one has an old state.

15:08.080 --> 15:11.120
During the update, that file was actually changed.

15:11.120 --> 15:18.480
It seems either the package refreshed it or some postscript modified it or whatever happened

15:18.480 --> 15:19.480
to it.

15:19.480 --> 15:23.680
In any case, we have a new version of that file.

15:23.680 --> 15:28.200
As soon as you reboot into the new snapshot, you'll see that version of the file, older

15:28.200 --> 15:34.480
snapshots will see that version of the file.

15:34.480 --> 15:37.240
File four, file five and file six are similar.

15:37.240 --> 15:38.240
Those are quite easy.

15:38.240 --> 15:41.440
That one is new in the next snapshot.

15:41.440 --> 15:45.360
That one was new in the previous snapshot and those were modified into the snapshot

15:45.360 --> 15:46.640
before.

15:46.640 --> 15:54.880
The interesting thing is file three because that one exists both in the current snapshot

15:54.880 --> 16:00.680
and in the new snapshot and that may indicate a conflict.

16:00.680 --> 16:07.240
Because as soon as you perform an update or create the new snapshot, the state of the

16:07.240 --> 16:13.100
file will be frozen basically and that one will be used as the base for the new snapshot.

16:13.100 --> 16:20.740
If you change the file before rebooting the system, then the new layer won't see that

16:20.740 --> 16:24.520
new file anymore.

16:24.520 --> 16:30.480
Whether you're operating on an old version of the file or you'd have to check there will

16:30.480 --> 16:36.160
be a warning when you root the system that there may be a conflict if the file in lower

16:36.160 --> 16:44.160
tier one is the file in upper tier.

16:44.160 --> 16:51.800
That's our approach to handling current systems, current packages as we have them from vendors,

16:51.800 --> 16:57.960
from our own distribution and having a pragmatic approach to handling those configuration files.

16:57.960 --> 17:01.560
But in the end, we don't want to have that at all.

17:01.560 --> 17:09.760
In the end, we want to have the files which are packaged to be completely in user.

17:09.760 --> 17:13.480
We don't want to have them in etc at all.

17:13.480 --> 17:21.360
Only changes that were explicitly done by the admin are supposed to be in etc.

17:21.360 --> 17:30.200
That's where we are really approaching our final goal.

17:30.200 --> 17:33.680
For open source micros, we almost achieved that goal.

17:33.680 --> 17:40.880
There are still some problematic files, for example, etcfs type of course, such a singular

17:40.880 --> 17:47.280
file which you can't extend if you have an application and also want to make it possible

17:47.280 --> 17:49.360
to split those files.

17:49.360 --> 17:52.560
We have developed a library called libecon.

17:52.560 --> 17:57.000
You can just embed it and we'll do all the things automatically just in case you're interested

17:57.000 --> 17:59.000
in that.

17:59.000 --> 18:06.560
We have made several pull requests and patches for projects which are used by open source

18:06.560 --> 18:14.400
micros to fix those use cases for us.

18:14.400 --> 18:21.480
In the end, I think we took a quite pragmatic approach using existing technologies to just

18:21.480 --> 18:28.560
be able to use your existing infrastructure, your existing packages, and preserve the compatibility

18:28.560 --> 18:32.520
with all the legacy software which may exist out there.

18:32.520 --> 18:43.600
We are basically doing the opposite of most other distributions by extending the, let's

18:43.600 --> 18:51.840
say, existing distributions to the new use cases.

18:51.840 --> 18:56.560
As I feared, I'll just refer to Len's talk from earlier today.

18:56.560 --> 18:59.200
We do support full disk encryption.

18:59.200 --> 19:06.360
We do support trusty boot and we also have measurement support.

19:06.360 --> 19:11.600
Let's better get to the questions part just in case you have some.

19:11.600 --> 19:22.680
Thank you very much for your talk.

19:22.680 --> 19:28.800
I was pestering your colleagues out here moments before this talk.

19:28.800 --> 19:34.240
Do you have any plans to migrate the old qubit docs to micros?

19:34.240 --> 19:41.720
Because for someone who's new to transactional systems, it isn't immediately obvious how

19:41.720 --> 19:46.960
the classical administration style translates to transactional one.

19:46.960 --> 19:51.280
Yes, we have a new documentation.

19:51.280 --> 19:53.600
The problem is micros doesn't include documentation.

19:53.600 --> 20:00.200
If you're in an embedded use case or using it for containers, the main pages are just

20:00.200 --> 20:02.680
overhead which is not needed.

20:02.680 --> 20:08.160
We have a separate documentation server which will just provide all the documentation, but

20:08.160 --> 20:11.320
I forgot which one it is.

20:11.320 --> 20:12.320
You have to ask me later.

20:12.320 --> 20:16.080
I'll search it for you.

20:16.080 --> 20:19.160
I hope these search engines have picked it up meanwhile.

20:19.160 --> 20:24.400
It's a few weeks old.

20:24.400 --> 20:26.440
There is a question in the chat.

20:26.440 --> 20:32.080
How is micros related to ALP?

20:32.080 --> 20:42.520
Basically, the current state of open-sUSE-ELP which is supposed to be the next generation

20:42.520 --> 20:50.720
of our SUSE-LIMS enterprise, whatever emerged out of that.

20:50.720 --> 20:57.040
Basically, open-sUSE-ALP is based on open-sUSE-micros in its current state.

20:57.040 --> 21:03.760
There will be more use cases than just the container use cases, but that's the base which

21:03.760 --> 21:07.600
it was initially put onto.

21:07.600 --> 21:11.240
A lot of things you can do with open-sUSE-micros.

21:11.240 --> 21:13.040
You can also do with open-sUSE-ALP.

21:13.040 --> 21:19.640
We even share parts of the documentation currently, but open-sUSE-ALP is more than just open-sUSE-micros.

21:19.640 --> 21:25.600
It's just the same foundation currently.

21:25.600 --> 21:28.440
It's just the same foundation.

21:28.440 --> 21:32.240
Going once, going twice.

21:32.240 --> 21:33.240
Thank you very much.

21:33.240 --> 21:56.640
That was wonderful.

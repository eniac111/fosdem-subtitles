1
0:00:00.000 --> 0:00:07.000
Okay. So today I'm not going to talk about image based or anything that I'm going to

2
0:00:12.040 --> 0:00:14.000
talk about.

3
0:00:14.000 --> 0:00:15.000
Containers.

4
0:00:15.000 --> 0:00:17.000
So not just containers.

5
0:00:17.000 --> 0:00:18.000
Sorry.

6
0:00:18.000 --> 0:00:20.000
There will be different ones there.

7
0:00:20.000 --> 0:00:21.000
Okay.

8
0:00:21.000 --> 0:00:31.000
So we have a demonstration and CPMs and such. And we have a demonstration if you act up

9
0:00:31.000 --> 0:00:38.000
making sure that what you run on some device is the code that you expect. Checking it from

10
0:00:38.000 --> 0:00:41.000
another device that you trust.

11
0:00:41.000 --> 0:00:47.000
So everybody in this room I guess you're coming here with what we changed in the next slide

12
0:00:47.000 --> 0:00:54.000
when you brought your computer.

13
0:00:54.000 --> 0:01:01.000
Then you just look at the UI.

14
0:01:01.000 --> 0:01:08.000
We will then change the computer controller.

15
0:01:08.000 --> 0:01:13.000
Oh yes, I was on mute. Sorry.

16
0:01:13.000 --> 0:01:19.000
So again maybe for the remote audience, when you get a boot chain, you put up your computer,

17
0:01:19.000 --> 0:01:24.000
you have UFI goes to bootloader, goes to the kernel, goes to initramfs.

18
0:01:24.000 --> 0:01:32.000
And then because we are talking about a lot today, security things, you want to crypt

19
0:01:32.000 --> 0:01:38.000
your disk partition and so enter a passphrase to unlock it.

20
0:01:38.000 --> 0:01:45.000
Then if you want to make sure that what you've loaded is what you expect, you can store measurements,

21
0:01:45.000 --> 0:01:50.000
so signatures, hashes of every step inside the TPM.

22
0:01:50.000 --> 0:01:52.000
A TPM is a passive component.

23
0:01:52.000 --> 0:01:59.000
It is just there to store information, perform some cryptographic computation on it if you

24
0:01:59.000 --> 0:02:03.000
ask it, but it doesn't block anything in the boot chain, right?

25
0:02:03.000 --> 0:02:09.000
It is just there to store and execute commands that you pass to it.

26
0:02:09.000 --> 0:02:16.000
And so later on, after the boot is done, you can go back, for instance, in init in your kernel,

27
0:02:16.000 --> 0:02:23.000
to read back what you had in the TPM and check that what you have is what you expect.

28
0:02:23.000 --> 0:02:30.000
The problem is there is an issue if it's not what you expect, you end up here, you enter your passphrase,

29
0:02:30.000 --> 0:02:35.000
but your system was already compromised into the passphrase that you just entered, maybe

30
0:02:35.000 --> 0:02:41.000
got extra created, and now your disk is compromised as well.

31
0:02:41.000 --> 0:02:46.000
That's typically the case when you have offline attacks on a laptop you may have forgotten

32
0:02:46.000 --> 0:02:52.000
or left unattended for the conference room.

33
0:02:52.000 --> 0:03:02.000
So what we can do and what people in large organizations typically do is use remote attestation.

34
0:03:02.000 --> 0:03:10.000
So you have an app started, for instance, in the init RAMFS, which will talk to the TPM,

35
0:03:10.000 --> 0:03:20.000
get the measurements, and then ask a remote attestation server somewhere trusted to check

36
0:03:20.000 --> 0:03:23.000
that the measurements are what's expected.

37
0:03:23.000 --> 0:03:28.000
And that's where what you got in the previous talk, that you want to have images that are

38
0:03:28.000 --> 0:03:33.000
reproducible, that are signed, comes very key because a remote attestation server would

39
0:03:33.000 --> 0:03:38.000
typically be your organization server, it knows about the signature, so you can check

40
0:03:38.000 --> 0:03:46.000
that the image is the one that it signed, that it is the one that is blessed by your security team.

41
0:03:46.000 --> 0:03:50.000
And then if everything is fine, typically the remote attestation server would hand back

42
0:03:50.000 --> 0:03:59.000
a secret to your dedicated attestation client, and the client could use that secret to decrypt

43
0:03:59.000 --> 0:04:00.000
your disk.

44
0:04:00.000 --> 0:04:03.000
And in that case you don't even need to enter a passphrase anymore.

45
0:04:03.000 --> 0:04:13.000
I mean, you could also add a passphrase if you want to be more sure, but if you had some

46
0:04:13.000 --> 0:04:22.000
kind of control on the attestation server, then you may not even need the passphrase.

47
0:04:22.000 --> 0:04:26.000
The issue is that everybody in this room, maybe some of you work at big companies, but

48
0:04:26.000 --> 0:04:28.000
not everybody, obviously.

49
0:04:28.000 --> 0:04:31.000
And so how do you set up the server?

50
0:04:31.000 --> 0:04:33.000
Do you need to run something in the cloud?

51
0:04:33.000 --> 0:04:37.000
It's super inconvenient.

52
0:04:37.000 --> 0:04:45.000
As a matter of fact, all of you, I think, have a server in their pocket.

53
0:04:45.000 --> 0:04:53.000
It's called a mobile phone, and so you just need to run the remote attestation server.

54
0:04:53.000 --> 0:04:59.000
OK, that's the security part because I work for a government agency.

55
0:04:59.000 --> 0:05:08.000
And so you have the server run on your phone, and then you can communicate with your laptop

56
0:05:08.000 --> 0:05:10.000
over Bluetooth.

57
0:05:10.000 --> 0:05:12.000
And that's what we implemented.

58
0:05:12.000 --> 0:05:17.000
A user-friendly, lightweight, TPM remote attestation running over Bluetooth with a server, well,

59
0:05:17.000 --> 0:05:22.000
client, it depends who will change names, but one of them running on your phone and

60
0:05:22.000 --> 0:05:25.000
the other on your laptop.

61
0:05:25.000 --> 0:05:33.000
It's an idea that was prototype by Matthew Garrett a couple of years ago at Linux Connect

62
0:05:33.000 --> 0:05:39.000
Australia, but it was just a rough prototype, and basically you're trying to make a production

63
0:05:39.000 --> 0:05:42.000
grade, at least hacker grade.

64
0:05:42.000 --> 0:05:45.000
So we have the server running on the laptop.

65
0:05:45.000 --> 0:05:50.000
You can know I'm switching names between client and server because we can't decide.

66
0:05:50.000 --> 0:05:57.000
So on your laptop, you have the server, it's written in Go, it talks to Bluetooth stack,

67
0:05:57.000 --> 0:06:07.000
and then we have clients for Android and iOS written, well, for the TPM part in Go, and

68
0:06:07.000 --> 0:06:13.000
then for the UI in Kotlin or Swift.

69
0:06:13.000 --> 0:06:19.000
So the way it works is when you start the server on the laptop, it shows a QR code with

70
0:06:19.000 --> 0:06:28.000
a key so that we can encrypt the communication between the laptop and the phone and pair

71
0:06:28.000 --> 0:06:29.000
them in a secure way.

72
0:06:29.000 --> 0:06:36.000
You scan the QR code on your phone, it gives you the key, and then on first use, you have

73
0:06:36.000 --> 0:06:43.000
a trust and first use step where you need to kind of trust the measurements the very

74
0:06:43.000 --> 0:06:44.000
first time.

75
0:06:44.000 --> 0:06:50.000
We do not support right now downloading trusted measurements from an external server the way

76
0:06:50.000 --> 0:06:53.000
you would do if you are in a large organization.

77
0:06:53.000 --> 0:06:58.000
Remember, this is for individual users, but we could extend it to support that use case

78
0:06:58.000 --> 0:06:59.000
if needed.

79
0:06:59.000 --> 0:07:07.000
And then every time you want to test and let things haven't changed, then you just render

80
0:07:07.000 --> 0:07:10.000
the other here again on the laptop.

81
0:07:10.000 --> 0:07:12.000
You don't need to scan the QR code anymore.

82
0:07:12.000 --> 0:07:18.000
You just start the attestation and the client, it tells of our Bluetooth automatically using

83
0:07:18.000 --> 0:07:25.000
the key that it remembered, it exchange cryptographically the results of the measurements.

84
0:07:25.000 --> 0:07:29.000
Thanks to the TPM remote attestation protocol, you can check that it is the same physical

85
0:07:29.000 --> 0:07:31.000
machine, or at least the same physical TPM.

86
0:07:31.000 --> 0:07:39.000
So if you left your laptop and attend in the first demo room, unless the attacker put it

87
0:07:39.000 --> 0:07:43.000
up and swap TPM stuff like that, it doesn't happen.

88
0:07:43.000 --> 0:07:51.000
So it can really make sure it is the same hardware it is talking to, or it is the same

89
0:07:51.000 --> 0:07:52.000
TPM.

90
0:07:52.000 --> 0:07:58.000
And then it checks that the measurements of the boot chain haven't changed since last

91
0:07:58.000 --> 0:07:59.000
time.

92
0:07:59.000 --> 0:08:04.000
And it can send back a secret optionally to the laptop if you want to use it for this

93
0:08:04.000 --> 0:08:05.000
encryption.

94
0:08:05.000 --> 0:08:09.760
Of course, it doesn't send a secret back if things have failed.

95
0:08:09.760 --> 0:08:16.440
So we have a demo, and because we know how a demo works, it is a recorded video.

96
0:08:16.440 --> 0:08:24.680
I mean, I can also try the demo for real afterwards.

97
0:08:24.680 --> 0:08:33.160
So this is running in a virtual machine created with MayKozie that was mentioned in previous

98
0:08:33.160 --> 0:08:34.160
talks.

99
0:08:34.160 --> 0:08:36.160
So now I'll first show the enrollment.

100
0:08:36.160 --> 0:08:40.960
So the virtual machine is booting for the first time.

101
0:08:40.960 --> 0:08:42.680
So on the left, you have the virtual machine.

102
0:08:42.680 --> 0:08:45.240
On the right, you have the phone.

103
0:08:45.240 --> 0:08:51.160
In that case, the iOS client, because it is much more beautiful, because my intern spent

104
0:08:51.160 --> 0:08:53.160
a lot more time working on it.

105
0:08:53.160 --> 0:08:55.120
But I don't have Xcode.

106
0:08:55.120 --> 0:08:57.680
So the client I reviewed is the Android one.

107
0:08:57.680 --> 0:09:01.720
And so the one you get on GitHub has fewer features.

108
0:09:01.720 --> 0:09:02.720
I'm sorry.

109
0:09:02.720 --> 0:09:06.280
Eventually, we'll merge everything back.

110
0:09:06.280 --> 0:09:11.000
So here, the first time we boot, we need to enter a passphrase, because we haven't enrolled

111
0:09:11.000 --> 0:09:12.000
yet.

112
0:09:12.000 --> 0:09:17.640
So it's the bottom of the screen, but we run the old trial server to perform the initial

113
0:09:17.640 --> 0:09:22.520
trust and first use enrollment, now that we are fully booted to align Xcode.

114
0:09:22.520 --> 0:09:24.160
So here, you have to trust your system.

115
0:09:24.160 --> 0:09:30.200
It's the first time you boot if it's already compromised your host.

116
0:09:30.200 --> 0:09:35.880
It's going to display the QR code that we are going to scan with the phone.

117
0:09:35.880 --> 0:09:42.200
And then it starts at station, showing the steps on both sides, get the measurements.

118
0:09:42.200 --> 0:09:45.560
And now we have the device registered on the right.

119
0:09:45.560 --> 0:09:47.600
So we can change its name.

120
0:09:47.600 --> 0:09:52.040
We know when we created it when we last ran an attestation.

121
0:09:52.040 --> 0:09:58.740
And as you'll see, you can edit the security policy.

122
0:09:58.740 --> 0:10:02.000
So the way it works, when you boot is, you choose what kind of measurements you want

123
0:10:02.000 --> 0:10:03.000
to check.

124
0:10:03.000 --> 0:10:09.920
Again, this is only in the iOS application, but coming soon on Android.

125
0:10:09.920 --> 0:10:21.160
Then the next step is to run system decrypt enroll, so that because when we enroll the

126
0:10:21.160 --> 0:10:27.800
phone, we send back a secret to the laptop, which was stored in the TPM in a special register,

127
0:10:27.800 --> 0:10:30.620
in PCR9.

128
0:10:30.620 --> 0:10:36.240
And so here we run system decrypt enroll, so that we add another factor, another slot

129
0:10:36.240 --> 0:10:43.760
to unlock the disk based not on the passphrase, but on the content on TPM register 9.

130
0:10:43.760 --> 0:10:46.840
So here basically, yeah, that's what we did.

131
0:10:46.840 --> 0:10:51.600
And now we regenerate the initramfs using drag cut modules.

132
0:10:51.600 --> 0:10:57.360
We would like to get rid of them because they are very buggy, but maybe see previous talk

133
0:10:57.360 --> 0:11:04.760
one day we can, so that we can enable Ultra Blue and startup.

134
0:11:04.760 --> 0:11:12.280
And here we start again, but now startup stops at some point, starting the Ultra Blue server.

135
0:11:12.280 --> 0:11:19.880
And we go on the phone and just press this button, the play button, starting an attestation,

136
0:11:19.880 --> 0:11:21.440
fetching the measurements.

137
0:11:21.440 --> 0:11:22.740
It works.

138
0:11:22.740 --> 0:11:24.160
So we send back the secret.

139
0:11:24.160 --> 0:11:28.880
And we don't need to enter a passphrase anymore, because we send back the secret, so it unlocked

140
0:11:28.880 --> 0:11:31.120
based on the secret.

141
0:11:31.120 --> 0:11:35.640
Now what happens if something has changed in the boot?

142
0:11:35.640 --> 0:11:43.600
So again, we start an attestation.

143
0:11:43.600 --> 0:11:45.440
And here we do not send back the secret.

144
0:11:45.440 --> 0:11:50.040
We say, oh, something is different this time.

145
0:11:50.040 --> 0:11:53.000
It's in PCR8.

146
0:11:53.000 --> 0:11:54.000
It has changed.

147
0:11:54.000 --> 0:11:58.440
And PCR8, we provide some info to the user, is expected to contain the hash of the kernel

148
0:11:58.440 --> 0:11:59.600
command line.

149
0:11:59.600 --> 0:12:01.200
Then you can even look at the diff.

150
0:12:01.200 --> 0:12:06.800
And if you look at the diff, you can see that you have a new command line option, super

151
0:12:06.800 --> 0:12:10.480
AVLopt, that has been added.

152
0:12:10.480 --> 0:12:15.440
So this data, you cannot really trust it, but you can trust that this data, its digest,

153
0:12:15.440 --> 0:12:20.560
is the same as the one stored in the TPM.

154
0:12:20.560 --> 0:12:23.200
And then you can choose what you want to do.

155
0:12:23.200 --> 0:12:25.560
You can say, OK, this is a legitimate update.

156
0:12:25.560 --> 0:12:27.480
For instance, I updated my firmware.

157
0:12:27.480 --> 0:12:30.360
It's an expected change, so I save the new one.

158
0:12:30.360 --> 0:12:34.920
You can say, OK, trust, but only once, as you would do in a browser.

159
0:12:34.920 --> 0:12:37.040
Or you can say, oh, no, it's definitely an attack.

160
0:12:37.040 --> 0:12:41.240
I want to reject it, maybe call some security team.

161
0:12:41.240 --> 0:12:43.920
We haven't implemented that yet.

162
0:12:43.920 --> 0:12:47.840
But do not send back the secret in any case.

163
0:12:47.840 --> 0:12:50.240
That's what we do here.

164
0:12:50.240 --> 0:12:52.680
We reject it.

165
0:12:52.680 --> 0:13:00.560
And so it falls back to asking you a passphrase to end up your disk.

166
0:13:00.560 --> 0:13:02.920
And that's about it for today.

167
0:13:02.920 --> 0:13:04.920
So you can, it's versatile.

168
0:13:04.920 --> 0:13:07.520
You can embed it in any tramFS.

169
0:13:07.520 --> 0:13:09.520
You can use it as a second factor.

170
0:13:09.520 --> 0:13:14.880
We provide in the release sample makers a script to build the VM that I just demonstrated.

171
0:13:14.880 --> 0:13:20.680
We also just today published a release just for you, first-time attendees, so that you

172
0:13:20.680 --> 0:13:22.400
do not need to rebuild everything.

173
0:13:22.400 --> 0:13:25.520
You can just test.

174
0:13:25.520 --> 0:13:30.720
Then if you're interested about the protocol, you have five minutes of questions.

175
0:13:30.720 --> 0:13:37.200
But trust us, we asked the security team, I mean the cryptography team in our lab to

176
0:13:37.200 --> 0:13:38.600
review it.

177
0:13:38.600 --> 0:13:39.680
It's fairly standard.

178
0:13:39.680 --> 0:13:44.240
It's fairly standard for a mutatestation protocol.

179
0:13:44.240 --> 0:13:47.600
And so, yeah, we want to integrate more.

180
0:13:47.600 --> 0:13:50.920
That's why we are here today to talk to you.

181
0:13:50.920 --> 0:13:58.960
So go on ancfr slash ultra blue, add slash release if you want some binaries for Android

182
0:13:58.960 --> 0:14:02.560
and x86 Linux.

183
0:14:02.560 --> 0:14:06.920
And yeah, I'm here for questions.

184
0:14:06.920 --> 0:14:13.640
I'll start with a question.

185
0:14:13.640 --> 0:14:16.920
How practical would it be to run this on your laptop?

186
0:14:16.920 --> 0:14:27.480
Well, I just basically mentored Loic, but I commented Loic with Nicolas Bouchinais,

187
0:14:27.480 --> 0:14:30.000
who should be in this room somewhere hiding.

188
0:14:30.000 --> 0:14:32.520
Yes, here.

189
0:14:32.520 --> 0:14:37.480
And Nicolas mentioned just yesterday that he's now quite ready to use it on his laptop.

190
0:14:37.480 --> 0:14:38.920
So I guess ask him.

191
0:14:38.920 --> 0:14:45.480
I don't even have secure boot enabled on this laptop.

192
0:14:45.480 --> 0:14:51.080
So I guess the French NSA doesn't allow you to use that.

193
0:14:51.080 --> 0:14:56.200
So it's like, I mean, this is the public source.

194
0:14:56.200 --> 0:14:58.880
So it's endorsed by our agency.

195
0:14:58.880 --> 0:15:05.880
It's been endorsed in the sense that it's okay to release the code publicly.

196
0:15:05.880 --> 0:15:09.520
We have reviewed it as carefully as we can.

197
0:15:09.520 --> 0:15:13.160
We do not consider it production grade right now.

198
0:15:13.160 --> 0:15:22.360
Hi, have you thought about using it to assess the IMA log at runtime as well?

199
0:15:22.360 --> 0:15:27.440
So for files that are accessed against some network accessible database, not only for

200
0:15:27.440 --> 0:15:30.440
boot, but also for checks at runtime.

201
0:15:30.440 --> 0:15:37.880
So I think for checks that there are two things here.

202
0:15:37.880 --> 0:15:45.200
For checks at runtime of your file system, I think you want to use more like the variety

203
0:15:45.200 --> 0:15:49.080
and other mechanisms that we have.

204
0:15:49.080 --> 0:15:54.080
But the TPM doesn't only have uses at boot time.

205
0:15:54.080 --> 0:15:58.640
So the fact that you run remote attestation, this could be done later.

206
0:15:58.640 --> 0:16:04.200
The advantage to make it early is that you can detect if you're compromised in putting

207
0:16:04.200 --> 0:16:06.200
your class well, basically.

208
0:16:06.200 --> 0:16:11.280
Yes, I see some questions here in the back.

209
0:16:11.280 --> 0:16:14.520
Let's say that nobody swaps your TPM.

210
0:16:14.520 --> 0:16:16.960
Like yes, put that case aside.

211
0:16:16.960 --> 0:16:22.080
Could you get the same level of attestation just with signatures with the TPM?

212
0:16:22.080 --> 0:16:25.560
Like let's say you don't think that somebody was going to swap your TPM.

213
0:16:25.560 --> 0:16:32.040
So could you just like check some all the parts of the boot chain and just like sign

214
0:16:32.040 --> 0:16:36.920
the hashes and just add boot, verify the signature with TPM?

215
0:16:36.920 --> 0:16:45.600
Yes, but the problem is how do you trust what you see on the screen of your laptop?

216
0:16:45.600 --> 0:16:48.400
The idea that the phone remains in your pocket.

217
0:16:48.400 --> 0:16:54.400
So the phone is trusted or it's not trusted to have two devices than one because it's

218
0:16:54.400 --> 0:16:56.640
harder to compromise two devices.

219
0:16:56.640 --> 0:17:03.600
So if something in your bootloader is compromised, it could show you on your computer that, okay,

220
0:17:03.600 --> 0:17:07.200
the TPM measures checkout, et cetera.

221
0:17:07.200 --> 0:17:12.160
And this is even more true for something that's called dynamic root trust measurement, root

222
0:17:12.160 --> 0:17:13.640
of trust measurements.

223
0:17:13.640 --> 0:17:18.400
So not only trusting your bios to make the measurements, but like some special instructions

224
0:17:18.400 --> 0:17:24.360
in CPUs, whether you restart the root of trust later in the boot process.

225
0:17:24.360 --> 0:17:32.520
But for this to work, the check has to be external.

226
0:17:32.520 --> 0:17:34.120
You said it's not production ready.

227
0:17:34.120 --> 0:17:37.440
Do you see it being production ready anytime soon?

228
0:17:37.440 --> 0:17:40.160
Is that the goal?

229
0:17:40.160 --> 0:17:44.760
It's not a stated goal of the agency.

230
0:17:44.760 --> 0:17:50.960
I'd be very happy for it to be used more widely.

231
0:17:50.960 --> 0:17:56.560
And I think for this to happen, we need people outside of the agency interested.

232
0:17:56.560 --> 0:17:59.960
Yeah, looks great.

233
0:17:59.960 --> 0:18:03.880
I have a question regarding the app on the mobile phone.

234
0:18:03.880 --> 0:18:08.560
So how does the app know that it's speaking to a trusted server or the server that it

235
0:18:08.560 --> 0:18:09.720
can trust?

236
0:18:09.720 --> 0:18:16.680
So does it exchange keys with the server on first use or how does it work?

237
0:18:16.680 --> 0:18:23.360
So there is a trust on first use, so there are two levels of security.

238
0:18:23.360 --> 0:18:31.280
First, the Bluetooth communication is encrypted and the key for that communication is embedded

239
0:18:31.280 --> 0:18:36.040
in the QR code that you scan first.

240
0:18:36.040 --> 0:18:38.640
And then the identity of the TPM.

241
0:18:38.640 --> 0:18:48.120
The TPM has a secret key inside and uses it to answer the public key stored in the app

242
0:18:48.120 --> 0:18:49.120
on the mobile phone.

243
0:18:49.120 --> 0:18:54.320
And so the app can check that it talks to the expected TPM.

244
0:18:54.320 --> 0:19:00.520
So basically, the encryption key is used to attest that it's the same operating system

245
0:19:00.520 --> 0:19:02.200
or in each RAMFS.

246
0:19:02.200 --> 0:19:09.240
And the TPM key is used to check that it's the same TPM.

247
0:19:09.240 --> 0:19:15.400
Yeah, but that's still, as far as I understand, does not prevent a malicious server to send

248
0:19:15.400 --> 0:19:20.800
the app the wrong values or to just imagine the values and send them.

249
0:19:20.800 --> 0:19:21.800
Boom.

250
0:19:21.800 --> 0:19:31.680
So that is something that we haven't implemented right now because we wanted it to be easy

251
0:19:31.680 --> 0:19:37.320
to test with virtual machines and software TPMs.

252
0:19:37.320 --> 0:19:46.600
But one thing is that the TPMs certificates, basically, you have a list.

253
0:19:46.600 --> 0:19:50.040
The TPM keys are signed by vendor.

254
0:19:50.040 --> 0:19:53.820
And so you have a list of the keys of the vendor that are used to sign the certificates.

255
0:19:53.820 --> 0:19:59.000
So when you get the quote from the TPM, you can check that it's a hardware TPM by some

256
0:19:59.000 --> 0:20:03.240
well-known manufacturers and not some accumulated TPM.

257
0:20:03.240 --> 0:20:10.280
So you can be sure that you're actually talking to a physical TPM device.

258
0:20:10.280 --> 0:20:13.520
And so the server cannot mess with that.

259
0:20:13.520 --> 0:20:14.760
But you're right.

260
0:20:14.760 --> 0:20:22.600
We haven't implemented this right now, otherwise the demo on purpose, so to say, because otherwise

261
0:20:22.600 --> 0:20:24.560
the demo wouldn't work.

262
0:20:24.560 --> 0:20:27.720
That's an option I want to add.

263
0:20:27.720 --> 0:20:29.440
Very good question.

264
0:20:29.440 --> 0:20:30.440
This is using Bluetooth.

265
0:20:30.440 --> 0:20:33.600
Bluetooth specification is very complicated.

266
0:20:33.600 --> 0:20:39.640
How much does it rely on Bluetooth working fine as expected?

267
0:20:39.640 --> 0:20:43.480
So it's using Bluetooth low energy.

268
0:20:43.480 --> 0:20:51.160
It's relying on the Go Bluetooth library to work fine.

269
0:20:51.160 --> 0:20:59.120
So we don't use any of the Bluetooth stack encryption for the encryption part.

270
0:20:59.120 --> 0:21:01.800
We roll out our stuff.

271
0:21:01.800 --> 0:21:10.680
And we layered the code so that it's mostly agnostic to the underlying transport.

272
0:21:10.680 --> 0:21:15.960
So if you want it to run on your infrared, it should be relatively easy to port.

273
0:21:15.960 --> 0:21:20.200
It is not allowed to code that.

274
0:21:20.200 --> 0:21:26.760
And we are extremely conservative in that we just abort as soon as we receive packets

275
0:21:26.760 --> 0:21:29.840
out of orders or unexpected packets.

276
0:21:29.840 --> 0:21:30.840
OK.

277
0:21:30.840 --> 0:21:33.840
Last question from online.

278
0:21:33.840 --> 0:21:40.440
Someone asked if any distribution expressed any interest in making it in the Ultra Blue.

279
0:21:40.440 --> 0:21:42.360
Yes, in fact.

280
0:21:42.360 --> 0:21:44.360
But not officially.

281
0:21:44.360 --> 0:21:51.320
Twitter message is we presented this at Open Source PMR conference last September as well.

282
0:21:51.320 --> 0:21:57.040
And after that, there was some interest online and people saying that that were federal.

283
0:21:57.040 --> 0:21:58.040
They may be interested.

284
0:21:58.040 --> 0:22:00.400
But it was not official federal position.

285
0:22:00.400 --> 0:22:01.400
Some federal contributors.

286
0:22:01.400 --> 0:22:08.000
I can say that this is interesting to that.

287
0:22:08.000 --> 0:22:09.000
Thank you.

288
0:22:09.000 --> 0:22:10.000
Thanks for the speaker.

289
0:22:10.000 --> 0:22:17.520
And we have one.


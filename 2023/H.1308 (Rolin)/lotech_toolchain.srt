1
0:00:00.000 --> 0:00:16.520
A very quick update on how we use C++, C++ standards in LibreOffice to finish off this

2
0:00:16.520 --> 0:00:19.920
afternoon.

3
0:00:19.920 --> 0:00:23.920
So yeah, we're still using C++17.

4
0:00:23.920 --> 0:00:28.120
Almost there's one thing that keeps cropping up.

5
0:00:28.120 --> 0:00:33.000
I think Noah tried to sneak it in twice and Mike once.

6
0:00:33.000 --> 0:00:40.700
This is this unsuspecting standard from cars thing where you have a string view of characters

7
0:00:40.700 --> 0:00:46.520
and you want to get an integer or floating point value out of that and there's a standard

8
0:00:46.520 --> 0:00:47.520
function for that.

9
0:00:47.520 --> 0:00:54.680
Unfortunately, it's not in the standard C++8 or only in 8 and only in 11 for floating point

10
0:00:54.680 --> 0:00:58.280
values which we don't have, we're still stuck at 7.

11
0:00:58.280 --> 0:01:05.400
So people keep trying to add that to the UNO libraries and I as the gatekeeper of these

12
0:01:05.400 --> 0:01:10.000
UNO libraries which we never want to change because then we have these maintenance problems.

13
0:01:10.000 --> 0:01:12.560
I keep banging them back.

14
0:01:12.560 --> 0:01:13.560
We don't need that.

15
0:01:13.560 --> 0:01:19.560
We don't need to add anything there because we'll have C++17 functionality for it anyway

16
0:01:19.560 --> 0:01:22.880
and I keep saying that for years now.

17
0:01:22.880 --> 0:01:28.360
At one point we'll get there, I'm pretty sure.

18
0:01:28.360 --> 0:01:31.120
Just C++17 for now still.

19
0:01:31.120 --> 0:01:36.880
But of course we're making use of whatever gets available, becomes available in the latest

20
0:01:36.880 --> 0:01:45.280
standard so that C++20 is out for two, three years now and C++23 is almost finished.

21
0:01:45.280 --> 0:01:51.680
It's the standardizing stuff takes its time but it's quite frozen by now.

22
0:01:51.680 --> 0:01:58.360
And then there's always these small things mostly in the standard library that are easy

23
0:01:58.360 --> 0:02:07.240
to approximate and then we usually make use of those ideas in our own code and have one

24
0:02:07.240 --> 0:02:15.800
header file, one include file where we either use the original alias to our O3TL namespace

25
0:02:15.800 --> 0:02:23.960
or implement our own approximation which we then throw out once we have that available.

26
0:02:23.960 --> 0:02:30.400
So this is the span thing similar to the string view where you just have a range of values,

27
0:02:30.400 --> 0:02:32.240
start and length.

28
0:02:32.240 --> 0:02:37.200
Then these comparison functions, they are very interesting if you don't know them, then

29
0:02:37.200 --> 0:02:38.200
check them out.

30
0:02:38.200 --> 0:02:42.880
So you always have a hard time comparing two integers in C and C++ if they are of different

31
0:02:42.880 --> 0:02:47.120
types signed and unsigned and you get surprising results.

32
0:02:47.120 --> 0:02:53.800
And finally in C++20 they decided to come up with ugly syntax functions but they will

33
0:02:53.800 --> 0:02:58.960
do the right thing whatever types you throw at them and we have at least one place where

34
0:02:58.960 --> 0:03:02.240
we use them by now for good measure.

35
0:03:02.240 --> 0:03:07.120
And another example is these standard unreachable magic function that they introduced.

36
0:03:07.120 --> 0:03:10.960
We still have a macro for that to approximate it.

37
0:03:10.960 --> 0:03:17.160
So if there is a place in your code where you can't reach so a default in a switch and

38
0:03:17.160 --> 0:03:21.040
you don't want to return any nonsense from that and the compiler would warn you that

39
0:03:21.040 --> 0:03:25.840
you don't have a return statement there then just add an unreachable there to tell the

40
0:03:25.840 --> 0:03:32.120
compiler this is impossible to reach anyway.

41
0:03:32.120 --> 0:03:40.280
Then there is bigger features or beyond library features that we try to make use of one way

42
0:03:40.280 --> 0:03:42.000
or another.

43
0:03:42.000 --> 0:03:48.400
For example the C++20 const eval similar to const expression where you have something

44
0:03:48.400 --> 0:03:56.360
that should be computed at compile time and constexpr is do it at compile time if possible

45
0:03:56.360 --> 0:04:02.280
otherwise do it at runtime and const eval is forcing you to do it at compile time.

46
0:04:02.280 --> 0:04:07.880
The trick there is if you have a function that has some research and you make that function

47
0:04:07.880 --> 0:04:14.760
and const eval function then if the assert would not hold then you get a compilation

48
0:04:14.760 --> 0:04:21.320
error instead of just a runtime error later on or not even an error if you build with

49
0:04:21.320 --> 0:04:26.160
the assert disabled and we make use of that in some places like this.

50
0:04:26.160 --> 0:04:32.040
We have this color class and I think Noel again at one point tried to get rid of the

51
0:04:32.040 --> 0:04:37.840
ambiguity whether it has alpha channel or not so we now have a constructor that wants

52
0:04:37.840 --> 0:04:42.880
to make sure you pass in some value that doesn't have an alpha channel in there so we have

53
0:04:42.880 --> 0:04:49.000
an assert in there and if we have const eval in the latest compilers then we use it and

54
0:04:49.000 --> 0:04:55.680
then we would get a compiler at compilation time error already if you pass in some value

55
0:04:55.680 --> 0:05:04.040
that does have an alpha channel after all so that helped the improvement of the change

56
0:05:04.040 --> 0:05:09.320
in the code from the old semantics to the new semantics.

57
0:05:09.320 --> 0:05:15.280
So we have a if around that if have Cpp const eval then use const eval otherwise we use

58
0:05:15.280 --> 0:05:21.760
constexpr and in our config script we have lots of checks whether we can use const eval

59
0:05:21.760 --> 0:05:27.680
and unfortunately only Clang by now even the latest compiler versions we have five checks

60
0:05:27.680 --> 0:05:35.040
in there for bugs that we discovered with all these const eval implementations and Clang

61
0:05:35.040 --> 0:05:42.160
the latest one has all its bugs sorted out but GCC and the Microsoft compiler still can't

62
0:05:42.160 --> 0:05:50.960
use it so that shows how if you have a feature sheet of what the compilers support and there

63
0:05:50.960 --> 0:05:55.360
are ticks for that don't trust that too much if you then actually try to use it you run

64
0:05:55.360 --> 0:06:06.320
into all kinds of issues and then of course coming up is issues there even bigger way

65
0:06:06.320 --> 0:06:15.280
you can't use some ifdef trickery or some include file value approximate things because

66
0:06:15.280 --> 0:06:21.760
two things that come to my mind are the concepts in C++20 which would make code really more

67
0:06:21.760 --> 0:06:30.500
readable but which is hard to do in some macro way.

68
0:06:30.500 --> 0:06:36.080
We have one place I think by now where we have again around this requires thing we have

69
0:06:36.080 --> 0:06:43.280
an ifdef or if we have a C++20 implementation that supports it there is one place where

70
0:06:43.280 --> 0:06:49.440
we have some function that internally does some dangerous dynamic casting and you know

71
0:06:49.440 --> 0:06:54.520
proxies didn't support dynamic casting so I wanted to make sure that we never use that

72
0:06:54.520 --> 0:07:02.400
function on a template type that is you know could be a proxy so I came up with this wonderful

73
0:07:02.400 --> 0:07:09.200
requires cloth there too if you have a new enough compiler to get that sorted out at

74
0:07:09.200 --> 0:07:15.200
run time and otherwise we ignore it an even bigger thing is modules and I guess we will

75
0:07:15.200 --> 0:07:23.040
have to wait for others to come up with real implementations of that or real world usage

76
0:07:23.040 --> 0:07:28.080
to see how we would make use of them.

77
0:07:28.080 --> 0:07:37.160
But even if these features are out in the distant future in some cases still what we

78
0:07:37.160 --> 0:07:47.360
already can do is try to force the compilers hard to run our code and demonstrate to them

79
0:07:47.360 --> 0:07:52.120
that they what bugs they have worry what bugs are in the standard library implementations

80
0:07:52.120 --> 0:08:00.460
if they introduce new things so what I do is opt into this thing to use whatever compiler

81
0:08:00.460 --> 0:08:08.440
you use with the latest C++ version that compiler implements which is typically C++23 by now

82
0:08:08.440 --> 0:08:15.600
and then have a big matrix of platforms and compilers and libraries run time standard

83
0:08:15.600 --> 0:08:21.360
run time libraries to build on and find all kinds of interesting bugs whenever I update

84
0:08:21.360 --> 0:08:28.320
one of those things and then mail the people mail Jonathan that he introduced something

85
0:08:28.320 --> 0:08:36.800
new in the standard C++ that doesn't make clang happy and so forth and these people

86
0:08:36.800 --> 0:08:41.760
are happy that we are the guinea pigs for them and that's it.

87
0:08:41.760 --> 0:08:42.760
Time for beer.

88
0:08:42.760 --> 0:08:52.680
I guess we have time for questions if there are any questions.

89
0:08:52.680 --> 0:08:59.800
Who do you contact if you find a bug in the microsauce compiler?

90
0:08:59.800 --> 0:09:07.520
They do have a web form now that you can fill in and I think I even got a response one.

91
0:09:07.520 --> 0:09:14.120
Mike Agansky brought that up.

92
0:09:14.120 --> 0:09:24.400
One more question since we're at the end of the track.

93
0:09:24.400 --> 0:09:29.640
What's the status of modules in compilers because as far as I know only Visual Studio

94
0:09:29.640 --> 0:09:33.120
does it and does it kind of sort of?

95
0:09:33.120 --> 0:09:40.760
No, I think they're all three by now in their hedge trunk versions.

96
0:09:40.760 --> 0:09:52.960
They support them, I think they claim it works but I didn't ever try it.

97
0:09:52.960 --> 0:09:59.200
A module is a new way of organizing so that you don't have this issue of having all these

98
0:09:59.200 --> 0:10:01.000
includes that you need to include.

99
0:10:01.000 --> 0:10:06.200
This is like precompiled, a newer version of precompiled headers actually.

100
0:10:06.200 --> 0:10:12.080
Yeah, that sums it up.

101
0:10:12.080 --> 0:10:37.000
Thanks again.


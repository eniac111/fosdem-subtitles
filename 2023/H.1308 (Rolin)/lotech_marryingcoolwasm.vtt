WEBVTT

00:00.000 --> 00:03.500
Cool. Hi everyone. My name is Balazs Wargo and I'm working at Olu

00:03.500 --> 00:18.720
Tropia, GMB, and this presentation I would like to talk about WebAssembly, M-scripted

00:18.720 --> 00:24.740
technology running the Collabra online in WebAssembly and the headless conversion stuff

00:24.740 --> 00:33.840
in WebAssembly as well. So let's get started with the Collabra online in WebAssembly stuff.

00:33.840 --> 00:41.320
So it was a common project with the Collabra. We were together with Tor and Mihai Shtan.

00:41.320 --> 00:47.240
The goal was to approach offline document editing. On this slide there is a initial

00:47.240 --> 00:56.560
script design for this. The goal was that when the connection breaks in a browser,

00:56.560 --> 01:03.680
the application is activated and that contains the Collabra online server functionality.

01:03.680 --> 01:09.040
And when the connection is restored, the document will be edited in the Collabra online server

01:09.040 --> 01:15.560
again. I think Tor will talk about a little bit more. But to make it work, first we had

01:15.560 --> 01:27.720
to build it in WebAssembly. For that, we are using the M-scripton compiler 2 chain. So

01:27.720 --> 01:36.400
let's talk about that. The M-scripton is a complete open source compiler 2 chain to WebAssembly.

01:36.400 --> 01:44.360
Using M-scripton you can compile C and C++ code or any other languages that uses LLVM

01:44.360 --> 01:51.760
into WebAssembly and you can run it on the web or Node.js or other runtimes. The M-scripton

01:51.760 --> 02:01.040
generates small and fast code and the default output format is WebAssembly and highly optimizable

02:01.040 --> 02:09.000
executable format that runs almost as fast as the native code.

02:09.000 --> 02:14.960
Little bit about M-scripton 2 chain. The main tool is the M-scripton compiler frontend.

02:14.960 --> 02:24.880
This is a drop-in replacement for a standard compiler like ECC or C-lang. The E-MCC uses

02:24.880 --> 02:34.480
K-lang and LLVM to compile to WebAssembly. E-MCC also emits JavaScript that provides

02:34.480 --> 02:41.920
API support to the compiled code. The JavaScript can be executed by Node.js or from within

02:41.920 --> 02:53.640
HTML in a browser. There are more information there, but you can read that. About porting

02:53.640 --> 03:02.360
code to use M-scripton. Support for portable C and C++ code is fairly comprehensive and

03:02.360 --> 03:09.120
supported for the C standard library, C++ standard library, and the exception, etc.

03:09.120 --> 03:16.160
It's very good and also the OpenGL supports. Okay, the multithreading is supported but

03:16.160 --> 03:21.720
depends on the shared array buffer which is still being standardized and implemented by

03:21.720 --> 03:30.280
browsers. Now let's see the porting, how it works in case of columbra online. The building

03:30.280 --> 03:37.840
for wasm, the M-scripton is a bit immature and some projects needed to patch in to make

03:37.840 --> 03:44.600
it work. First we need to build the bro-office core. With M-scripton, earlier the best was

03:44.600 --> 03:49.320
to use the feature wasn't in branch but nowadays it's working with upstream. Mustard with

03:49.320 --> 03:57.160
the Qt 5 framework and then it needed to build the columbra online. Dependence is the ZFTD

03:57.160 --> 04:11.320
libraries, the poco library requires two patches to make it work. Then it's necessary to build

04:11.320 --> 04:18.760
the columbra online code and then linking all the binaries and executables together.

04:18.760 --> 04:27.480
Linked-in-wasm executable uses a lot of memory and without optimizations or with the O1 flags

04:27.480 --> 04:34.920
it should work anywhere but there are different kind of flags like the O2, earlier flags which

04:34.920 --> 04:42.800
is the default and some link time optimization happens that uses very much RAM and because

04:42.800 --> 04:49.200
of that it causes segmentation error so we are using the O1 flag in case of online and

04:49.200 --> 04:59.560
also in case of the LibreOffice core. A little bit about running but Tor will talk about

04:59.560 --> 05:05.800
it more. Structure is quite similar to the columbra office iOS and Android applications.

05:05.800 --> 05:14.680
There are one differences that in case of mobile the C++ code is what transfers and

05:14.680 --> 05:24.920
then that then loads the HTML page into WebKit in which the JavaScript runs in the WebAssembly

05:24.920 --> 05:31.760
application the other way around the web page is naturally the one that is loaded and then

05:31.760 --> 05:42.080
the JavaScript code then starts running the C++ code as a WebAssembly. You can see an

05:42.080 --> 05:47.800
image about it, it's a document tile in the browser, it's running in WebAssembly, there

05:47.800 --> 05:54.920
are some Dactu's where you can debug. It's working but still needs some optimization

05:54.920 --> 06:01.520
work which is in progress. If you have an image in the document it's quite slow but

06:01.520 --> 06:11.880
we are working on that as well. Let's talk about a little bit some another WebAssembly

06:11.880 --> 06:19.200
work at Allotropia. We have also worked on a headless conversion product. Last time in

06:19.200 --> 06:25.200
LibroCon there was a little demo about it but it wasn't completely a headless conversion

06:25.200 --> 06:33.960
but now I make a video about it and let's see how it works now. We are not using the

06:33.960 --> 06:41.480
Qt 5 framework anymore and we are also using the unique HTML which is created in the Libro

06:41.480 --> 06:52.120
V score by Emscripton. Let's hope the video works. It's working. This is the very basic

06:52.120 --> 07:00.920
HTML page but it can make any kind of HTML work. There is just a button. You can select

07:00.920 --> 07:10.200
multiple files and using the convert tool arguments, convert it the document and you

07:10.200 --> 07:20.160
can convert it any kind of format that the Libro V score can do. Documented and downloaded

07:20.160 --> 07:28.040
and you can see it in the browser as well. There is a common line in the browser where

07:28.040 --> 07:34.360
you can see the results. But the HTML page can be edited and that's a future plan to

07:34.360 --> 07:45.560
make it much more nicer. Also some future plans at Allotropia we would like to call in

07:45.560 --> 07:55.240
a function called from JavaScript and creating for that UI. Emscripton provides various options

07:55.240 --> 08:02.080
for connecting normal JavaScript and compact code which range from functions to call compiles,

08:02.080 --> 08:11.240
C++ from JavaScript and the versa. So to accessing environment variables from compiled codes.

08:11.240 --> 08:19.480
These options are the web IDL, binder and the mbind. It's binding between C++ and JavaScript

08:19.480 --> 08:28.000
and all in C++ code and it is to be used in a natural manner from JavaScript. That's also

08:28.000 --> 08:38.360
our future plan. I think that's all. Thank you for that.

08:38.360 --> 08:59.160
One minute for questions, maybe one question and an answer if there's any.

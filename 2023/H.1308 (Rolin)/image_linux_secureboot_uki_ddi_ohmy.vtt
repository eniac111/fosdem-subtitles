WEBVTT

00:00.000 --> 00:13.160
Good morning and welcome to the very first image-based Linux and secure measured boot

00:13.160 --> 00:14.160
devroom.

00:14.160 --> 00:16.960
A bit of a mouthful, we'll try a shorter one next year.

00:16.960 --> 00:19.120
So let me start by introducing myself.

00:19.120 --> 00:20.840
My name is Luca.

00:20.840 --> 00:26.000
By day I am a software engineer in the Linux systems group at Microsoft where I work on

00:26.000 --> 00:31.000
the Azure infrastructure and by night I contribute to various open source projects.

00:31.000 --> 00:39.120
I am a system demontainer, Debian developer, a bunch of other stuff that I forget and neglect.

00:39.120 --> 00:44.440
So I will give you the introduction to the devroom and an overview of all the topics

00:44.440 --> 00:49.120
that we will touch on to hopefully give you a holistic view of what image-based Linux

00:49.120 --> 00:50.200
is.

00:50.200 --> 00:56.000
So let me start by saying thank you to all the organizers and co-organizers for this

00:56.000 --> 01:01.120
devroom, especially to Thilo, who unfortunately could not make it to Brussels this year, but

01:01.120 --> 01:06.360
he did most of the work on the first website and CFP and so on.

01:06.360 --> 01:08.960
So thank you Thilo if you are watching.

01:08.960 --> 01:11.720
Now some boring logistics.

01:11.720 --> 01:17.520
This devroom has a five minutes break between talks to allow to switch some speed over.

01:17.520 --> 01:24.240
We have a 10 minutes break at 10 past 12 and we finish at 20 past two.

01:24.240 --> 01:27.480
Next devroom starts at half past two.

01:27.480 --> 01:32.080
Now in case this is your first false demo, or it's not, but you never noticed, everything

01:32.080 --> 01:34.320
is live streamed and recorded.

01:34.320 --> 01:38.400
If you are not comfortable with having your back of your head recorded or live streamed,

01:38.400 --> 01:40.920
best against the justice to sit at the sides.

01:40.920 --> 01:45.320
If you ask questions, remember again there will be live streamed and recorded.

01:45.320 --> 01:47.920
If you're not comfortable with that, there's a matrix chat.

01:47.920 --> 01:53.060
You can ask a question there and our devroom organizers will repeat it for you.

01:53.060 --> 01:55.240
We do want people to ask questions.

01:55.240 --> 01:57.200
Please do so.

01:57.200 --> 02:00.120
Please do not just start shouting at the presenter.

02:00.120 --> 02:04.560
Raise your hand and then we will come to you with a microphone.

02:04.560 --> 02:10.560
If you're a speaker and people shout a question at you, please first repeat it and then answer

02:10.560 --> 02:12.040
it.

02:12.040 --> 02:14.080
And I think that's it.

02:14.080 --> 02:16.680
Now let's get into the interesting stuff.

02:16.680 --> 02:18.960
What is image based Linux?

02:18.960 --> 02:23.920
Now if you're an embedded person or addition to that word, you're probably thinking, what

02:23.920 --> 02:24.920
are these guys talking about?

02:24.920 --> 02:27.320
We've been doing image based Linux for 30 years.

02:27.320 --> 02:28.320
It's nothing new.

02:28.320 --> 02:30.680
And you wouldn't be completely wrong.

02:30.680 --> 02:37.800
Now the difference is that our focus within this ecosystem is on the security aspect.

02:37.800 --> 02:41.200
Because let's face it, Linux runs everywhere.

02:41.200 --> 02:44.560
Most of our infrastructure and economy runs through Linux these days, all the public clouds

02:44.560 --> 02:46.840
run on Linux, even Azure.

02:46.840 --> 02:51.480
So we want to get our security story straight.

02:51.480 --> 02:52.480
What does that mean?

02:52.480 --> 02:54.880
What are some of the basic concepts?

02:54.880 --> 03:01.160
First of all, we want to have first class support for at least one, if not both, of

03:01.160 --> 03:05.160
UFIS secure boot and TPM based measurements.

03:05.160 --> 03:07.080
Hopefully both.

03:07.080 --> 03:11.400
Because the goal here is to extend the chain of trust at boot.

03:11.400 --> 03:18.640
Now if you are using a generic Linux distribution like Debian or Ubuntu or Fedora, the story

03:18.640 --> 03:25.040
in your firmware to kernel chain of trust is pretty well buttoned up by now.

03:25.040 --> 03:28.720
Because a lot of people did a lot of work in the past 12 years to get their story straight

03:28.720 --> 03:31.800
and they keep doing that to maintain it.

03:31.800 --> 03:37.840
So in your generic distribution you will have your firmware which verifies the first stage

03:37.840 --> 03:41.360
boot loader which will be shim, signed by Microsoft.

03:41.360 --> 03:45.360
And then shim, the first stage boot loader verifies the second stage boot loader and

03:45.360 --> 03:46.360
verifies the kernel.

03:46.360 --> 03:49.440
And the kernel verifies the kernel modules.

03:49.440 --> 03:54.440
So if you are within rank zero, the chain of trust is pretty solid.

03:54.440 --> 03:59.440
There is this small little thing to the side called user space where things are not so

03:59.440 --> 04:03.080
pitchy and that is what we are trying to improve.

04:03.080 --> 04:08.040
So just a quick summary, we will go into more details but we want either of these to be

04:08.040 --> 04:09.040
signed.

04:09.040 --> 04:12.200
Either of these are completely unprotected right now in most distributions.

04:12.200 --> 04:14.000
They are built locally.

04:14.000 --> 04:19.680
If an attacker or malware can get right access to that, they can embed their malware in there

04:19.680 --> 04:21.680
and you will be known the wiser.

04:21.680 --> 04:23.160
That's a bit of a problem.

04:23.160 --> 04:24.160
Same thing for UFIS.

04:24.160 --> 04:29.520
It probably is encrypted these days but that helps for offline attacks, not online ones.

04:29.520 --> 04:31.760
We want to do better there.

04:31.760 --> 04:37.280
One of the key requirements to use any of the specification infrastructure tools that

04:37.280 --> 04:41.920
we see is you need to have an hermetic ZS user.

04:41.920 --> 04:42.920
What does that mean?

04:42.920 --> 04:46.080
It means your vendor tree must be within ZS user.

04:46.080 --> 04:52.080
If you are in one of those handful of distributions, they still have the top level bins bin or

04:52.080 --> 04:56.080
libdirectories that are not sim links, it's time to move on.

04:56.080 --> 05:01.360
Even there will be a manage finally kicking and screaming but manage to get into merged

05:01.360 --> 05:02.920
users.

05:02.920 --> 05:05.480
That is our core requirement.

05:05.480 --> 05:12.400
The people who work on this stuff kind of got together from various distributions, companies,

05:12.400 --> 05:13.400
projects.

05:13.400 --> 05:15.240
We created this UAPI group.

05:15.240 --> 05:16.800
We have a nice website.

05:16.800 --> 05:20.720
We have a GitHub organization with a discussion tab.

05:20.720 --> 05:23.200
There's already quite some interesting discussions going on there.

05:23.200 --> 05:28.360
I encourage people who are interested in these topics to check that out.

05:28.360 --> 05:30.720
What does actual image-based Linux mean?

05:30.720 --> 05:35.000
This is my personal understanding and analysis.

05:35.000 --> 05:39.360
My point of view, I see at least three different flavors of this.

05:39.360 --> 05:44.800
There's the pure image-based one, it's the one that I do in Azure, where you build images,

05:44.800 --> 05:50.960
your whole images, and you ship to the machines, you have the N-verity to cover the root file

05:50.960 --> 05:51.960
system.

05:51.960 --> 05:54.560
The next talk we go into details.

05:54.560 --> 05:57.400
Then we have AB schemes for upgrade and upgrades.

05:57.400 --> 05:58.400
Nothing groundbreaking.

05:58.400 --> 06:01.520
Android has been doing this for 15 years or whatever.

06:01.520 --> 06:07.920
The second camp is the OSTree one, pure or RPM-based, like Fedora core for example.

06:07.920 --> 06:13.000
What they do there is they build either packages or OSTree snapshots and then they apply them

06:13.000 --> 06:14.000
locally.

06:14.000 --> 06:17.360
If you reboot into the next snapshot or a different one, it's like a GIT tree for your

06:17.360 --> 06:19.360
file system.

06:19.360 --> 06:24.400
The root file system there is either ephemeral or immutable runtime.

06:24.400 --> 06:25.400
I cannot remember.

06:25.400 --> 06:26.400
You cannot change it.

06:26.400 --> 06:28.240
You reboot into the new one.

06:28.240 --> 06:30.680
BattleFS camp, very similar.

06:30.680 --> 06:35.120
Instead of OSTree, you use the BattleFS snapshotting capabilities.

06:35.120 --> 06:38.040
You install a package, it doesn't get installed in your rootFS.

06:38.040 --> 06:41.840
You install it into the new snapshot and then reboot into it.

06:41.840 --> 06:46.520
The core thing I want you to take away from this is that there are different flavors,

06:46.520 --> 06:49.040
ways of stringing things up together.

06:49.040 --> 06:50.040
That's okay.

06:50.040 --> 06:53.240
That's what Linux is great at, this diversity.

06:53.240 --> 07:00.000
The core important concept is that we share goals, we share tools, infrastructure, and

07:00.000 --> 07:05.480
specifications, because we want the same thing in different ways.

07:05.480 --> 07:07.480
Let's look at some of these specifications.

07:07.480 --> 07:08.480
Fair warning.

07:08.480 --> 07:11.280
There's a lot of acronyms coming your way now.

07:11.280 --> 07:12.840
I apologize in advance.

07:12.840 --> 07:16.560
Now, UKI, you will hear a lot about this today.

07:16.560 --> 07:18.200
Unified kernel image.

07:18.200 --> 07:19.200
What is this?

07:19.200 --> 07:24.360
A UKI is a single p binary, a UFI executable.

07:24.360 --> 07:25.360
Why is it good?

07:25.360 --> 07:29.840
Because you mix a UFI stub, a kernel, and an ETRD.

07:29.840 --> 07:33.280
Then you can sign it for secure boot.

07:33.280 --> 07:35.880
Remember I talked about the ETRD being unsecured before?

07:35.880 --> 07:37.840
This is how we fix it.

07:37.840 --> 07:40.440
The ETRD is no longer built locally.

07:40.440 --> 07:43.280
It's built by the vendor and shipped inside the UKI.

07:43.280 --> 07:47.680
It's signed and it's verified as part of the boot process.

07:47.680 --> 07:51.360
I will go into details in this process because one of the next talks will tell you everything

07:51.360 --> 07:53.560
about this.

07:53.560 --> 07:57.200
The UKI is dropped into the boot partition or ESP.

07:57.200 --> 08:03.640
Then it's out of discover by boot loaders implementing the BLS, boot loader specification.

08:03.640 --> 08:08.440
What does that mean is that you don't need to configure your system to pick the UKI up

08:08.440 --> 08:10.560
when you boot.

08:10.560 --> 08:16.160
The boot loader will parse what's available, get information out of it from the UKI itself,

08:16.160 --> 08:17.680
and present you a menu.

08:17.680 --> 08:21.440
It's top and plug and play basically.

08:21.440 --> 08:23.560
This is supported by system in boot.

08:23.560 --> 08:25.200
There are patches for grab as well.

08:25.200 --> 08:31.680
I think Fedora will ship with those patches and hopefully they make it very upstream.

08:31.680 --> 08:39.280
Another good thing about the UKIs is that not just we sign them and verify them as one,

08:39.280 --> 08:45.200
but also we can then predictably measure them into TPM in PCR11.

08:45.200 --> 08:46.800
The hashes will always match.

08:46.800 --> 08:49.720
If that doesn't make any sense to you, that's okay.

08:49.720 --> 08:53.320
Then later we tell you everything about TPM and measurements.

08:53.320 --> 08:59.920
I just mentioned it here so you have overarching view of why this stuff is good.

08:59.920 --> 09:03.400
We want to do some future work here, but the important thing is the specification is at

09:03.400 --> 09:05.600
this URL.

09:05.600 --> 09:06.600
That's for UKIs.

09:06.600 --> 09:07.600
Now, next one.

09:07.600 --> 09:12.640
This is my favorite one, DDI, discoverable disk image.

09:12.640 --> 09:13.640
What is this thing?

09:13.640 --> 09:17.760
It's just a raw image wrapped into a GPT partition table.

09:17.760 --> 09:21.000
The good thing is that it is self-described.

09:21.000 --> 09:26.600
Each partition is tagged with a UID that is fixed and tells you what the purpose of the

09:26.600 --> 09:27.840
partition is.

09:27.840 --> 09:33.640
You don't need to say root equal devs da5 because the partition is tagged with UID that

09:33.640 --> 09:38.640
says I'm the root of this.

09:38.640 --> 09:44.760
Because security is important to us, this natively first class supports the severity

09:44.760 --> 09:45.760
for protection.

09:45.760 --> 09:47.760
Again, the severity will be delved into later.

09:47.760 --> 09:48.880
I won't tell you what it is.

09:48.880 --> 09:53.840
It's for securing the partition against tampering.

09:53.840 --> 10:00.520
All tools that support DDI support the severity natively.

10:00.520 --> 10:05.320
Other important thing is that given they are self-described, you just pass them to the

10:05.320 --> 10:10.080
right tool and they do the right thing that you expect out of the box.

10:10.080 --> 10:15.080
You put it in a few disks where the ESP was, it's at the DDI.

10:15.080 --> 10:19.160
System D will automatically find the root partition by looking at the UID and boot it

10:19.160 --> 10:20.520
from the inter-ly.

10:20.520 --> 10:26.640
If you pass the DDI to N-spawn, it will automatically use it for the root file system or the container

10:26.640 --> 10:27.640
you are booting.

10:27.640 --> 10:32.880
You pass it to portable D or the system service as root image and it will automatically use

10:32.880 --> 10:37.160
for the root file system of that mount namespace.

10:37.160 --> 10:42.600
You pass it to C-Zext and it will be automatically used to extend the root file system.

10:42.600 --> 10:46.000
We've seen an example that means.

10:46.000 --> 10:51.640
One image format, self-described, give it to many tools, they do the right thing automatically.

10:51.640 --> 10:53.120
Security has first class concept.

10:53.120 --> 10:54.960
Now, what is C-Zext?

10:54.960 --> 10:59.240
This is important for the inter-ly talk later.

10:59.240 --> 11:01.480
It's a specific type of DDI.

11:01.480 --> 11:04.720
It can be used to extend a root file system.

11:04.720 --> 11:09.840
It will ship the user hierarchy or the shop if you are a third party vendor.

11:09.840 --> 11:14.640
It's identified by the extension release file which matches the format of the OS release

11:14.640 --> 11:17.240
file that you are probably familiar with.

11:17.240 --> 11:21.400
Specification of this is a dead URL.

11:21.400 --> 11:30.200
You get a root of S-DDI, bunch of C-Zext-DIs and BAM, you get an OVEREFS read-only that

11:30.200 --> 11:32.600
sums the content of all those images.

11:32.600 --> 11:35.680
Again, this is important for the later talk.

11:35.680 --> 11:40.840
Again, security, first class citizen, the D-M-VERE, the support of all of these and all the tools

11:40.840 --> 11:43.960
that use these C-Zext-DIs.

11:43.960 --> 11:49.080
Some ideas before, you pass it to the right tool, it does the right thing by default.

11:49.080 --> 11:55.040
If it's your ESP, we see how it's being used to extend the Intel D. If it's on VAR or

11:55.040 --> 11:58.760
ETC, system D will use it to extend your rootFS.

11:58.760 --> 12:01.720
You pass it to portable D or to a system E service.

12:01.720 --> 12:07.200
It will extend the rootFS of the service or portable service.

12:07.200 --> 12:11.760
Again, with security in mind, so it's all protected and all new and enforced by the

12:11.760 --> 12:12.760
kernel.

12:12.760 --> 12:15.760
You pass it to N-spawn and nothing happens because you don't support it yet.

12:15.760 --> 12:18.920
We should add that probably at some point.

12:18.920 --> 12:21.480
Specification of this URL.

12:21.480 --> 12:28.560
Now, all of this might sound like the increment rumbling of a Raving lunatic, but I swear

12:28.560 --> 12:29.560
it's real.

12:29.560 --> 12:30.560
It exists.

12:30.560 --> 12:31.800
It's used in production.

12:31.800 --> 12:34.240
What you can see here is the stuff that I work on.

12:34.240 --> 12:40.440
It's a PCI Express card that has an ARM64 system on a chip.

12:40.440 --> 12:43.160
It's used in the Azure host.

12:43.160 --> 12:48.920
The machines that run Azure virtual machines have these cards plugged in and the Linux

12:48.920 --> 12:54.720
RnOS provides offloading and acceleration for the Azure nodes.

12:54.720 --> 12:58.200
If you use Azure, you already use this DVI stuff.

12:58.200 --> 13:03.080
You just don't know about it because we use DVI extensively and we are looking into UKIs

13:03.080 --> 13:04.080
as well.

13:04.080 --> 13:05.080
This is all real.

13:05.080 --> 13:06.760
It's all true.

13:06.760 --> 13:10.600
Now, to conclude, come talk to us.

13:10.600 --> 13:13.040
We usually don't bite.

13:13.040 --> 13:19.120
Here's again the URL for the website and for the GitHub organization.

13:19.120 --> 13:24.160
We want you to join us and embrace some of the secure way of doing Linux.

13:24.160 --> 13:27.200
We want you to help us extend the specifications.

13:27.200 --> 13:34.760
Also, we want to finally get the world class of security bugs extinguished.

13:34.760 --> 13:37.760
Any questions?

13:37.760 --> 13:40.320
Yes?

13:40.320 --> 13:42.720
Microphone.

13:42.720 --> 13:44.840
Hi.

13:44.840 --> 13:53.720
How would you compare UKIs to fit images from U-Boot which also supports signing and packaging

13:53.720 --> 13:55.760
all these parts into one single image?

13:55.760 --> 13:56.760
Yes.

13:56.760 --> 13:57.760
It is actually quite similar.

13:57.760 --> 14:05.520
Now, of course, U-Boot is a firmware slash boot order environment used by embedded devices

14:05.520 --> 14:08.200
essentially.

14:08.200 --> 14:14.400
They support this fit format flattened image table and they have very similar concept,

14:14.400 --> 14:15.400
absolutely.

14:15.400 --> 14:19.440
The main difference is done with TPMs in mind.

14:19.440 --> 14:24.400
I'm not sure U-Boot, they don't support that and measure everything.

14:24.400 --> 14:26.440
I'm not very familiar with that.

14:26.440 --> 14:28.240
They are very similar concepts.

14:28.240 --> 14:30.720
I don't know what the main difference would be.

14:30.720 --> 14:33.320
It's just different environments, I guess.

14:33.320 --> 14:37.040
This is mainly for UFI.

14:37.040 --> 14:39.880
U-Boot is a specific boot loader environment.

14:39.880 --> 14:42.760
It can also run on the environment.

14:42.760 --> 14:43.760
All right.

14:43.760 --> 14:44.760
Okay.

14:44.760 --> 14:50.680
They are very similar I guess then.

14:50.680 --> 14:52.480
Thank you for the talk.

14:52.480 --> 15:00.880
From my understanding, we often in usual distribution have shim sign and grub sign but we don't

15:00.880 --> 15:05.600
have system D-Boot sign or a XT Linux sign or U-Boot sign.

15:05.600 --> 15:12.120
What is the plan in the future to have those signs maybe?

15:12.120 --> 15:13.120
Excellent question.

15:13.120 --> 15:21.440
Now, there is a group of people working on this problem of UFI and UFI 2.0 and everything

15:21.440 --> 15:24.760
that happened with the secure core PCs.

15:24.760 --> 15:26.480
Things are moving.

15:26.480 --> 15:30.080
I can't tell you much more than that right now.

15:30.080 --> 15:35.760
We do want to get S-D-Boot sign for some internal use cases so we want to get that

15:35.760 --> 15:43.120
allow listed to be allowed to be used as a payload for a second stage loader for shim.

15:43.120 --> 15:44.500
We have not done that yet.

15:44.500 --> 15:48.400
We would like to have that done at some point in the near future.

15:48.400 --> 15:49.400
Thank you.

15:49.400 --> 15:56.720
Can I make a comment?

15:56.720 --> 16:04.360
So a kind of intermediate option is to have it signed by a certificate that is provided

16:04.360 --> 16:10.360
by the distribution and it's protected by the hardware security measurements and so

16:10.360 --> 16:17.200
on but it's not trusted by shim and then you can self enroll on the first boot and have

16:17.200 --> 16:20.760
like a trust on first boot thing.

16:20.760 --> 16:26.200
We've done a bunch of work on S-D-Boot to allow self-enrollment on first use so you

16:26.200 --> 16:27.200
can always do that.

16:27.200 --> 16:28.720
Of course, it doesn't work by default.

16:28.720 --> 16:33.720
You need to do the self-enrollment but it's a step in your direction.

16:33.720 --> 16:34.720
Yes, thank you.

16:34.720 --> 16:35.720
Anything else?

16:35.720 --> 16:37.640
Any pass please?

16:37.640 --> 16:39.640
Thank you.

16:39.640 --> 16:45.280
If you compile yourself a Linux kernel, what you have to do then?

16:45.280 --> 16:56.240
So we in system 8253, we ship a tool called ukify, you can pronounce it however you want

16:56.240 --> 17:01.520
and that will, this one, will allow you to easily put together a uki.

17:01.520 --> 17:05.280
Of course, in that case, you cannot sign with your off-site key.

17:05.280 --> 17:09.920
You need to do self-key enrollment and whatnot but it is possible to build a uki locally.

17:09.920 --> 17:10.920
Absolutely.

17:10.920 --> 17:14.120
You need to sort out the signature by yourself, of course.

17:14.120 --> 17:20.920
I think that was at the back.

17:20.920 --> 17:25.600
You mentioned, well, I saw in one of your slides the abbreviation DPS.

17:25.600 --> 17:26.600
DPS, yes.

17:26.600 --> 17:27.600
What does that mean?

17:27.600 --> 17:30.760
Sorry, yes, I should have said that.

17:30.760 --> 17:32.160
Discoverable partition specification, yes.

17:32.160 --> 17:34.440
Told you there were a lot of acronyms.

17:34.440 --> 17:39.680
So that is the list of all the GUIDs and what they define, rootfs, a verity, var, tmp, blah,

17:39.680 --> 17:40.680
blah, etc.

17:40.680 --> 17:41.680
Thank you.

17:41.680 --> 17:42.680
Thank you.

17:42.680 --> 17:43.680
I completely forgot about that.

17:43.680 --> 17:45.240
I think we are at three minutes.

17:45.240 --> 17:48.720
Any more questions?

17:48.720 --> 17:49.720
Anything online?

17:49.720 --> 17:50.720
No.

17:50.720 --> 17:51.720
Going once, going twice.

17:51.720 --> 18:14.480
Well, thank you very much then.

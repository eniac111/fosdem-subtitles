1
0:00:00.000 --> 0:00:13.440
So this talk will be a follow-up to the one I did at the LibreOffice conference last year

2
0:00:13.440 --> 0:00:14.440
in September.

3
0:00:14.440 --> 0:00:19.280
That was about content controls in a writer in general.

4
0:00:19.280 --> 0:00:25.600
And some of the follow-up work was expected, some of that was more like a surprise.

5
0:00:25.600 --> 0:00:33.440
So a couple of incremental improvements appeared in the past half year.

6
0:00:33.440 --> 0:00:41.760
So it seemed like a good idea to overview where we are compared to where we were in

7
0:00:41.760 --> 0:00:44.480
September.

8
0:00:44.480 --> 0:00:50.360
So for those who don't know me, I'm Miklos Weina, I'm from Hungary.

9
0:00:50.360 --> 0:00:55.360
I used to be very much involved in the writer RTF import-export.

10
0:00:55.360 --> 0:01:02.120
So much these days about, I'm still focused on writer, I work for Collabra.

11
0:01:02.120 --> 0:01:11.320
And for content controls, for the scope of this talk, we talk about this rich text content

12
0:01:11.320 --> 0:01:12.400
controls.

13
0:01:12.400 --> 0:01:15.400
It's like it's for fulfilling.

14
0:01:15.400 --> 0:01:23.080
We used to have these input fields in writer already where you can provide some placeholder

15
0:01:23.080 --> 0:01:29.000
text and you can mark that this is the place of the document where you can type when you

16
0:01:29.000 --> 0:01:30.720
fill in some form.

17
0:01:30.720 --> 0:01:35.600
But one big limitation of that was that it was beyond its own fields and fields can't

18
0:01:35.600 --> 0:01:39.280
have formatting, so it was really just for plain text.

19
0:01:39.280 --> 0:01:44.240
And where writer really shines is more like there can be a rich text.

20
0:01:44.240 --> 0:01:49.320
So we want something that provides rich text, so that's where you can have rich text content

21
0:01:49.320 --> 0:01:53.200
controls.

22
0:01:53.200 --> 0:02:00.480
The Oaxima specification calls these structured documents tags, but it's really the same thing.

23
0:02:00.480 --> 0:02:07.320
They are user interface calls these content controls, so we also call them content controls.

24
0:02:07.320 --> 0:02:15.800
And the way it's structured is that you can, once you have paragraph text, then you can

25
0:02:15.800 --> 0:02:18.080
have multiple text portions inside that.

26
0:02:18.080 --> 0:02:23.800
So let's say you have some text, normal text, and then some bold text, and then again normal

27
0:02:23.800 --> 0:02:29.880
text, then we split up the paragraph text to three portions, the normal one, the bold

28
0:02:29.880 --> 0:02:32.280
one, and again the normal one.

29
0:02:32.280 --> 0:02:39.640
And for fields, the restriction was that you can't have multiple of these text portions

30
0:02:39.640 --> 0:02:42.760
inside that's two if you are there.

31
0:02:42.760 --> 0:02:47.760
And content control support this, so you can have multiple portions.

32
0:02:47.760 --> 0:02:53.400
Although they are limited to a single paragraph, at least this inline content controls that

33
0:02:53.400 --> 0:02:55.680
I'm talking about.

34
0:02:55.680 --> 0:03:01.120
So you can't have a content control starting at some random point in the document and ending

35
0:03:01.120 --> 0:03:03.280
at some random point.

36
0:03:03.280 --> 0:03:06.000
Perhaps you know that you can do that with bookmarks.

37
0:03:06.000 --> 0:03:11.760
It might start inside the table and outside the table, and field marks can provide the

38
0:03:11.760 --> 0:03:13.480
same thing.

39
0:03:13.480 --> 0:03:19.200
Content controls are intentionally limited to be inside a single paragraph.

40
0:03:19.200 --> 0:03:25.800
So we enforce that when you create them, we enforce this when you edit them, we enforce

41
0:03:25.800 --> 0:03:31.560
this during exporting to Docx and ODT.

42
0:03:31.560 --> 0:03:36.240
So this is an invariant that we want to maintain.

43
0:03:36.240 --> 0:03:41.840
Another complexity is that it's possible to do nothing for this.

44
0:03:41.840 --> 0:03:48.720
So when you look at how we write this in ExoMod, then ExoMod elements naturally support nesting.

45
0:03:48.720 --> 0:03:51.840
And we call this well-formed nesting.

46
0:03:51.840 --> 0:03:58.640
So the outer content control starts, and then the inner one starts, and then it's a requirement

47
0:03:58.640 --> 0:04:04.400
that the inner one will finish, and then the outer one will finish.

48
0:04:04.400 --> 0:04:10.360
So you can do nesting, but you can do the start one, start two, finish the first, and

49
0:04:10.360 --> 0:04:15.800
finish the last, similar to what you know from HTML, for example.

50
0:04:15.800 --> 0:04:21.400
So we want to support this setup, that you can do nesting, but not in a random order.

51
0:04:21.400 --> 0:04:27.920
And you can include multiple text portions, but not random positions with start and then

52
0:04:27.920 --> 0:04:33.480
what constrain that they are in a single paragraph.

53
0:04:33.480 --> 0:04:40.320
And if you have fields, then fields typically have some kind of instruction text, like

54
0:04:40.320 --> 0:04:43.320
commands, and there is the field result.

55
0:04:43.320 --> 0:04:47.480
Content controls are more like annotations and a piece of text.

56
0:04:47.480 --> 0:04:52.520
So you have some start and end, and you can have a bunch of properties on top of that.

57
0:04:52.520 --> 0:04:58.480
You will see you can give it a title, you can give it an alias, you can define the type

58
0:04:58.480 --> 0:05:00.200
and so on.

59
0:05:00.200 --> 0:05:04.960
So the rich text is the simplest type, where you just say that you can fill in something

60
0:05:04.960 --> 0:05:12.800
here and if the task is like provide your one-liner command from this presentation,

61
0:05:12.800 --> 0:05:17.040
then you say it was really bad, like really, really.

62
0:05:17.040 --> 0:05:22.320
So you select the really and mark it bad, because it was really bad.

63
0:05:22.320 --> 0:05:27.960
But you can do multiple paragraphs, you can write a novel on how bad that was.

64
0:05:27.960 --> 0:05:30.560
So that was rich text.

65
0:05:30.560 --> 0:05:41.800
And so somehow the picture is missing the top pixels,

66
0:05:41.800 --> 0:05:45.080
so you missed the whole point.

67
0:05:45.080 --> 0:05:48.840
But I will explain what you should see there.

68
0:05:48.840 --> 0:05:54.280
It's called, I think, the Veruse and the Interface cause this title, but in the markup we call

69
0:05:54.280 --> 0:05:56.760
this alias, but it's the same sign.

70
0:05:56.760 --> 0:06:02.480
The point is that you have some complex form and you are supposed to fill in the date,

71
0:06:02.480 --> 0:06:05.000
the date and the date and finally the date.

72
0:06:05.000 --> 0:06:08.760
And of course they mean that that means you are registering your company and there was

73
0:06:08.760 --> 0:06:14.480
a date when you created the company, there was a date when you filed the papers for it

74
0:06:14.480 --> 0:06:19.440
and there was a date when the first employee was hired and sent in.

75
0:06:19.440 --> 0:06:23.440
But it's just the date, so it's very confusing to fill that in.

76
0:06:23.440 --> 0:06:28.320
And what content controls can provide is that when you enter that content control, then

77
0:06:28.320 --> 0:06:34.480
there is a small pop-up similar to when you added headers and you get the name of the

78
0:06:34.480 --> 0:06:35.880
paste style and so on.

79
0:06:35.880 --> 0:06:41.120
So you get some tool tape explaining what exactly you are filling in.

80
0:06:41.120 --> 0:06:46.000
That might be half, so let's say the text would normally just say that you need to enter

81
0:06:46.000 --> 0:06:51.520
information about the, let's say, the birth data.

82
0:06:51.520 --> 0:06:56.480
But that means that they want the birth location and the birth date and then when you enter

83
0:06:56.480 --> 0:07:01.000
the content control, they can give you this hand so that it's a bit easier.

84
0:07:01.000 --> 0:07:09.640
So the output, the field inform might conform to what was expected, how some regulation

85
0:07:09.640 --> 0:07:11.040
is expected.

86
0:07:11.040 --> 0:07:17.520
But when you try to enter it as a mere mortal, you are actually able to fill it in because

87
0:07:17.520 --> 0:07:22.080
you don't need to look up some time pages of documentation, how to fill in that form.

88
0:07:22.080 --> 0:07:27.440
You go to the form and you get enough helpful context information so that you can just do

89
0:07:27.440 --> 0:07:29.300
that.

90
0:07:29.300 --> 0:07:35.040
So these aliases and tags were initially missing on the right-hand side and now we stop on

91
0:07:35.040 --> 0:07:38.800
it.

92
0:07:38.800 --> 0:07:44.240
Then one other problem was that I mentioned you can have multiple text portions inside

93
0:07:44.240 --> 0:07:45.680
the single content control.

94
0:07:45.680 --> 0:07:53.920
So what you see on the above screenshot is that we have an X character, then a new line

95
0:07:53.920 --> 0:07:55.760
break, so we kind of hack it around.

96
0:07:55.760 --> 0:08:00.240
Technically, it's still a single program, but you see it's multiple lines.

97
0:08:00.240 --> 0:08:05.060
And then we even define some tab stop and then tab portion.

98
0:08:05.060 --> 0:08:12.560
So technically, it's still a single program, but you see that this is at least three different

99
0:08:12.560 --> 0:08:13.560
text portions.

100
0:08:13.560 --> 0:08:18.640
And we used to take each and every text portion and then it's PDF widgets for that.

101
0:08:18.640 --> 0:08:24.800
So in this case, when you export this to PDF and you wanted to fill in the PDF form, then

102
0:08:24.800 --> 0:08:29.560
you got three different pages, which is a nonsense, which was not the intention.

103
0:08:29.560 --> 0:08:35.280
So in case originally the placeholder text would be multiple portions there in the right

104
0:08:35.280 --> 0:08:41.800
turn, then we still take the bounding rectangle of the content control and just omit a single

105
0:08:41.800 --> 0:08:49.280
widget as probably the user would expect.

106
0:08:49.280 --> 0:08:56.160
Then another thing is the primary use case we had in mind was that you create some editable

107
0:08:56.160 --> 0:09:03.240
writer document and at the very end, you export that to PDF and the actual form filling will

108
0:09:03.240 --> 0:09:05.860
probably happen in some PDF reader.

109
0:09:05.860 --> 0:09:13.040
But you might also have some slightly different workflow where you mark most of the document

110
0:09:13.040 --> 0:09:20.220
as read only and then you can have the editable document handed out to users and they actually

111
0:09:20.220 --> 0:09:22.280
fill in the form in the writer.

112
0:09:22.280 --> 0:09:26.360
Now the trouble is that in case we made the document read only, then you can't fill in

113
0:09:26.360 --> 0:09:32.160
the form because you change these content controls and they are part of the document

114
0:09:32.160 --> 0:09:33.640
and the whole document is read only.

115
0:09:33.640 --> 0:09:36.360
So that content control is also read only.

116
0:09:36.360 --> 0:09:38.880
Now this was working with input fields before.

117
0:09:38.880 --> 0:09:42.160
They had various problems, but this bit was working.

118
0:09:42.160 --> 0:09:46.440
They knew that they are an exception from this general read only.

119
0:09:46.440 --> 0:09:49.000
It was possible to fill in input fields.

120
0:09:49.000 --> 0:09:51.240
Now we do the same.

121
0:09:51.240 --> 0:09:58.800
And we can have this setup that the whole document is read only, but the content control

122
0:09:58.800 --> 0:10:04.120
can be still added here.

123
0:10:04.120 --> 0:10:11.960
Another thing was that if you look at what Word provides for VBA, if you want to manipulate

124
0:10:11.960 --> 0:10:18.360
these content controls, then they have an understanding of what is the list of content

125
0:10:18.360 --> 0:10:19.940
controls in the document.

126
0:10:19.940 --> 0:10:27.800
This can be very handy in case you want to have some macro that automatically processes

127
0:10:27.800 --> 0:10:31.040
the already filled in document.

128
0:10:31.040 --> 0:10:35.440
There are other ways to do that, but one way is that you write some macro that will extract

129
0:10:35.440 --> 0:10:38.840
all the filled in results from the document.

130
0:10:38.840 --> 0:10:43.280
For that, they can just go to the first content control, the second one query, how many content

131
0:10:43.280 --> 0:10:45.840
controls you have in the document, and so on.

132
0:10:45.840 --> 0:10:48.720
But on the writer side, this is really just a formatting on a program.

133
0:10:48.720 --> 0:10:53.560
So you would have to scan the entire document to find out if you have any content controls

134
0:10:53.560 --> 0:10:54.560
at all.

135
0:10:54.560 --> 0:11:00.840
So we don't have this random access to content controls.

136
0:11:00.840 --> 0:11:06.960
Initially we ignore this VBA problem, but when Justin was trying to build a VBA compact

137
0:11:06.960 --> 0:11:12.000
layer on top of content controls, then he found that there is no random access to content

138
0:11:12.000 --> 0:11:13.000
controls.

139
0:11:13.000 --> 0:11:18.200
So you can't do this without scanning the whole document, which can be very slow, so

140
0:11:18.200 --> 0:11:20.640
this is not great.

141
0:11:20.640 --> 0:11:24.520
And we discovered that actually footnotes already provide this.

142
0:11:24.520 --> 0:11:28.200
That's also kind of formatting on some piece of paragraph tags.

143
0:11:28.200 --> 0:11:33.880
And that has this manager that will track as footnotes are created and deleted, and

144
0:11:33.880 --> 0:11:37.400
then you can quickly get a list of all the footnotes in the document.

145
0:11:37.400 --> 0:11:40.200
So why can't we do the same for content controls?

146
0:11:40.200 --> 0:11:42.880
And yeah, you can do that.

147
0:11:42.880 --> 0:11:51.960
So now there is some Star Basic access, or actually Uno API access, that's visible in

148
0:11:51.960 --> 0:11:52.960
basic.

149
0:11:52.960 --> 0:11:58.720
And also there is a VBA compact layer on top of that where you can query how many content

150
0:11:58.720 --> 0:12:00.760
controls you have.

151
0:12:00.760 --> 0:12:07.960
If you fill in these alias things, then you can even say that I want to jump to the birth

152
0:12:07.960 --> 0:12:11.840
date content control without saying that is the third one.

153
0:12:11.840 --> 0:12:15.560
So if you insert something in between, then it won't break.

154
0:12:15.560 --> 0:12:21.880
So this manager provides that what's necessary here.

155
0:12:21.880 --> 0:12:27.160
Another thing was that initially when I was adding dropdowns, I wanted to incrementally

156
0:12:27.160 --> 0:12:30.840
extend what's available in rich text content controls.

157
0:12:30.840 --> 0:12:36.040
So the idea was that in case there are list items for this content control, you know that's

158
0:12:36.040 --> 0:12:38.240
then probably a dropdown.

159
0:12:38.240 --> 0:12:40.100
But there is complexity there.

160
0:12:40.100 --> 0:12:44.120
You can have dropdowns, okay?

161
0:12:44.120 --> 0:12:48.720
You can have dropdowns, and you can have combo boxes.

162
0:12:48.720 --> 0:12:53.760
And it's possible that you can't say which one it is.

163
0:12:53.760 --> 0:12:56.960
If it has list items, it might be any of that.

164
0:12:56.960 --> 0:13:01.360
And also it turns out it's valid to have a dropdown with no items.

165
0:13:01.360 --> 0:13:02.800
So that's what you see there.

166
0:13:02.800 --> 0:13:04.040
Notice that's working.

167
0:13:04.040 --> 0:13:07.720
We explicitly track if that's a combo box or a dropdown.

168
0:13:07.720 --> 0:13:10.240
And then you can have both types.

169
0:13:10.240 --> 0:13:16.640
We enforce that if it's possible to just choose one item from a complete list, or you can

170
0:13:16.640 --> 0:13:19.280
also have free form text there.

171
0:13:19.280 --> 0:13:24.000
And also in case some existing document for whatever reason has no list items, then we

172
0:13:24.000 --> 0:13:25.000
don't break that.

173
0:13:25.000 --> 0:13:29.440
And we don't implicitly turn that to rich text content control just because it has no

174
0:13:29.440 --> 0:13:32.280
list items.

175
0:13:32.280 --> 0:13:34.040
I think this is the last one.

176
0:13:34.040 --> 0:13:38.880
So, Hossein was doing lots of testing on content control.

177
0:13:38.880 --> 0:13:43.240
And of course the first thing he was trying is some Persian text.

178
0:13:43.240 --> 0:13:46.960
And of course it was breaking.

179
0:13:46.960 --> 0:13:48.880
I think it has three pieces.

180
0:13:48.880 --> 0:13:51.240
So one was the positioning.

181
0:13:51.240 --> 0:13:57.320
If you have the dropdown arrow on the left-hand side now for RTO text, that means that if

182
0:13:57.320 --> 0:14:03.040
you take the position of the whole bounding rectangle, then you need to shift that to

183
0:14:03.040 --> 0:14:05.240
the left to have the correct position.

184
0:14:05.240 --> 0:14:09.640
So fixing up the position based on the direction of the text frame.

185
0:14:09.640 --> 0:14:13.440
So the paragraph was one thing.

186
0:14:13.440 --> 0:14:21.120
Then also what you render inside the bounding rectangle for the arrow button and for that

187
0:14:21.120 --> 0:14:24.280
frame that needed fixing.

188
0:14:24.280 --> 0:14:29.200
And the last thing is that if you see a button, then you might have the silly idea to click

189
0:14:29.200 --> 0:14:30.320
on the button.

190
0:14:30.320 --> 0:14:32.400
And you expect that something happens.

191
0:14:32.400 --> 0:14:38.880
But we need to do this heat testing to decide if you clicked on the button or not.

192
0:14:38.880 --> 0:14:44.840
And if you do that, then we need to handle this correctly for RTO versions, RTO.

193
0:14:44.840 --> 0:14:46.560
So that's no more working.

194
0:14:46.560 --> 0:14:47.560
So this is it.

195
0:14:47.560 --> 0:14:49.240
There was some polish.

196
0:14:49.240 --> 0:14:54.600
Since the LibreOffice conference is still what the feature set it provides is still

197
0:14:54.600 --> 0:15:01.040
something that meant to be one-to-one possible to map to the word feature set.

198
0:15:01.040 --> 0:15:05.280
We tried to fully save this to ODF without any loss.

199
0:15:05.280 --> 0:15:07.280
You can export that to a PDF.

200
0:15:07.280 --> 0:15:08.280
There are these various types.

201
0:15:08.280 --> 0:15:10.880
You can see a few types there.

202
0:15:10.880 --> 0:15:16.920
And basically more properties are now added, some small editing improvements.

203
0:15:16.920 --> 0:15:20.800
And it's a little bit easier to script that now.

204
0:15:20.800 --> 0:15:22.400
So that's what we have.

205
0:15:22.400 --> 0:15:23.400
Thanks for listening.

206
0:15:23.400 --> 0:15:34.800
I hope you enjoyed propagate test testing times.

207
0:15:34.800 --> 0:15:41.420
Thank you.


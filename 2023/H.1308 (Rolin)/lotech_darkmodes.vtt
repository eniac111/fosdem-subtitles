WEBVTT

00:00.000 --> 00:07.160
We're off as dark modes.

00:07.160 --> 00:09.320
Just have a quick look at the various bits that I'm talking about.

00:09.320 --> 00:13.240
On the right hand side we've got the widgetry, that's what I'm talking about mostly.

00:13.240 --> 00:19.500
And then around the document, the application background and the document colors and calling

00:19.500 --> 00:23.520
them application colors and I'm calling the rest widgetry.

00:23.520 --> 00:28.520
That's a screenshot of dark mode, GNOME, our GTK version.

00:28.520 --> 00:32.000
Just overview, most cases what we have is the issue that you have to inform the platform

00:32.000 --> 00:34.320
that your application is up to get into dark mode.

00:34.320 --> 00:38.760
You have to determine the application colors, the ones that you're going to use for a document

00:38.760 --> 00:42.160
background and all the rest have to be extracted from the theme somehow.

00:42.160 --> 00:44.240
We have custom widgets in various places.

00:44.240 --> 00:47.840
They all need to know the appropriate colors to use foreground and background.

00:47.840 --> 00:52.600
The most common obvious problem is that most things have been light mode so far.

00:52.600 --> 00:56.920
People have just decided to draw with a random color and they know that the background is

00:56.920 --> 01:00.640
light and it has worked for them until now perfectly fine.

01:00.640 --> 01:02.640
Now they have to explicitly set the background.

01:02.640 --> 01:06.880
So if you're a developer here and you're doing previews, you're doing any custom widgets,

01:06.880 --> 01:10.000
just make sure you're setting both colors, foreground and background colors together,

01:10.000 --> 01:13.760
not just foreground and the assumption that your background is suitable because it won't

01:13.760 --> 01:16.440
be anymore and it isn't.

01:16.440 --> 01:21.000
Conversion adjudicated dark mode, there's two different modes of doing things.

01:21.000 --> 01:23.680
In GTK we're using actual native GTK widgets.

01:23.680 --> 01:27.760
On the other platform we're using our VCL widgets and we themed them to look like the

01:27.760 --> 01:31.720
actual platform widgets but they're not the platform widgets, they're VCL widgets but

01:31.720 --> 01:37.960
the GTK case, they actually are GTK widgets which means that GTK conversion to dark mode

01:37.960 --> 01:38.960
is pretty easy.

01:38.960 --> 01:44.280
We just listen to the dark mode change on the platform on GNOME.

01:44.280 --> 01:49.640
We find out what is dark mode and we tell GTK that we want GTK to be in dark mode and

01:49.640 --> 01:53.280
then all the GTK widget looks after itself so all of that stuff just draws itself in

01:53.280 --> 01:55.880
dark mode automatically, we have nothing to worry about.

01:55.880 --> 01:59.920
All we have to do then is extract the colors from the team, tell our custom widgets for

01:59.920 --> 02:04.280
colors and foregrounds and backgrounds we want and use the application colors then and

02:04.280 --> 02:06.440
the appropriate locations.

02:06.440 --> 02:11.480
That's all okay because in the case of GTK any of the stuff we were using to query for

02:11.480 --> 02:16.440
theme colors continues to work in dark mode so if we ask for the application background

02:16.440 --> 02:20.940
and we put GTK into dark mode and we ask it for an application background we get something

02:20.940 --> 02:24.840
that we can use straight away which would seem obvious but it's not what's happening

02:24.840 --> 02:28.840
on the other platforms and that's where things get quite difficult.

02:28.840 --> 02:32.040
Mac OS is medium difficulty.

02:32.040 --> 02:38.200
When you opt in by telling Mac OS that you're dark mode enabled and then you query the Mac

02:38.200 --> 02:43.480
OS teams for colors you get results back that are meaningful as long as you stick to the

02:43.480 --> 02:45.680
non-deprecated ones.

02:45.680 --> 02:49.680
Some of the cases for Mac we were not querying the team for background colors, we were just

02:49.680 --> 02:55.480
using hair-coded colors so if we update things pretty much to query what we should be using

02:55.480 --> 03:00.120
for the application background color and so forth and so on we get something meaningful

03:00.120 --> 03:04.800
in dark mode as well and it's all easy for those cases.

03:04.800 --> 03:08.440
For the widget tree though things become more difficult.

03:08.440 --> 03:14.320
On Mac what we have been doing is clicking harder.

03:14.320 --> 03:20.640
Mac there is a drawing interface we've been using all these years to draw onto our VCL

03:20.640 --> 03:23.520
widgets what the Mac button should look like.

03:23.520 --> 03:24.880
Those API's there.

03:24.880 --> 03:28.600
If you go Google for the API you'll find no documentation for them.

03:28.600 --> 03:33.720
There seems to be no acknowledgment on any of the Apple documentation pages that this

03:33.720 --> 03:38.300
API even exists or ever exists and the problem is that even in dark mode it draws in light

03:38.300 --> 03:43.840
mode so any of the stuff we were using on Mac to draw things will only draw light mode

03:43.840 --> 03:47.600
so it's all out of date and it's all not supported.

03:47.600 --> 03:51.240
The problem there is we have to roll forward to something that is working and there's a

03:51.240 --> 03:57.120
whole set of other API's on Mac that we can use but we actually basically use the real

03:57.120 --> 03:58.120
Mac widgets.

03:58.120 --> 04:02.040
We keep a few of them cached and we ask the real Mac widgets to render themselves onto

04:02.040 --> 04:07.640
our VCL widgets with blank text so that we get what it looks like.

04:07.640 --> 04:11.960
On Mac some of the things such as buttons will only render in fixed sizes so if we have

04:11.960 --> 04:18.440
a VCL widget that's big and you want to render a Mac button onto it, it will only render

04:18.440 --> 04:22.000
a small slice of it so you have to make sure that your buttons are the right size or you

04:22.000 --> 04:27.240
have to change Mac buttons into one of the other supported styles which will render into

04:27.240 --> 04:32.360
whatever random space you give it but some modes you can't.

04:32.360 --> 04:35.080
So it's very tricky.

04:35.080 --> 04:39.120
Some of these Mac widgets if you actually try and create them in a thread that they

04:39.120 --> 04:43.200
abort so you have to actually create them in your main thread and keep them for when

04:43.200 --> 04:45.360
you do want to draw on a thread later on.

04:45.360 --> 04:47.960
You can make it work.

04:47.960 --> 04:53.920
We're doing things much more at a distance when we're running with the full Mac widgets.

04:53.920 --> 04:56.280
We can't render a small part of a scroll bar.

04:56.280 --> 05:00.440
You've got to render the scroll bar basically so we have to work with things a bit more

05:00.440 --> 05:02.880
difficult than we did in the past.

05:02.880 --> 05:06.440
So it means that our work for tabpains and scroll bars are particularly complicated.

05:06.440 --> 05:12.480
We've got these focus rings, our focus rings, even though we attempt to draw them the way

05:12.480 --> 05:16.520
the documentation is just to draw them, they're narrower than they should be so they're not

05:16.520 --> 05:20.120
as prominent as I'd like them to be.

05:20.120 --> 05:24.120
There's again this draw focus ring mask with frame which is supposedly supposed to draw

05:24.120 --> 05:27.760
these things but when I try it with different widgets it works with some, it doesn't work

05:27.760 --> 05:28.760
with others.

05:28.760 --> 05:32.400
There's a lot of trial and error with a lot of this stuff.

05:32.400 --> 05:38.240
This feature for wallpaper tinting where one thing behind the other shows up, I never got

05:38.240 --> 05:39.240
it to work.

05:39.240 --> 05:42.080
The accent colors work out of the box.

05:42.080 --> 05:45.280
So let's go shoot, shoot, shoot at that.

05:45.280 --> 05:49.400
Mac it all works fine so that's what it looks like now using the new APIs, accent color

05:49.400 --> 05:53.240
in my case is ready to just pick one, application colors blah blah blah.

05:53.240 --> 05:57.120
It all works fine.

05:57.120 --> 06:01.000
The changing of all the drawing stuff means that the light mode has changed as well, hopefully

06:01.000 --> 06:05.240
for the better, hopefully, but it has made an effect there.

06:05.240 --> 06:09.520
Windows then has the highest difficulty opting in that you want to tell Windows that you

06:09.520 --> 06:11.520
are a dark mode application.

06:11.520 --> 06:15.440
Any of the stuff that we've been using all this time over the last 20 plus years, all

06:15.440 --> 06:22.520
those APIs, there isn't an obvious way that Windows has given us to support dark mode.

06:22.520 --> 06:27.640
And if you actually use Windows in dark mode and you launch the file dialogue you'll see

06:27.640 --> 06:31.640
that it's all the old widgets but it is using dark mode.

06:31.640 --> 06:34.080
File Explorer moves in dark mode as well.

06:34.080 --> 06:35.520
So they do it for their own.

06:35.520 --> 06:39.840
There's various ways of hacking this and the documented stuff we pulled out of that URL

06:39.840 --> 06:42.360
and the other projects blah blah blah are all doing it.

06:42.360 --> 06:47.440
So there's a whole hecky way of doing this that is all based on undocumented ordinance

06:47.440 --> 06:51.960
which is very unsatisfactory and fragile.

06:51.960 --> 06:52.960
That's what we're doing.

06:52.960 --> 06:56.080
These are the API we're using there.

06:56.080 --> 07:01.280
Unlike the Mac case, the APIs still work and they will give you dark mode but only for

07:01.280 --> 07:02.280
certain things.

07:02.280 --> 07:05.720
In other words, only if you pretend to be the two things that we've shown in the previous

07:05.720 --> 07:06.720
style.

07:06.720 --> 07:11.440
If you pretend to be Explorer or the CFD common file dialogue, then you render in dark mode

07:11.440 --> 07:16.000
but only for certain widgets, the ones that exist in those two applications.

07:16.000 --> 07:21.360
So you have to basically restrict yourself to what palettes of widgets are available

07:21.360 --> 07:22.840
in the two cases which is fine.

07:22.840 --> 07:25.880
Scorebars are fine but you have to hack them in like that.

07:25.880 --> 07:30.600
It's very unsatisfactory but it does function.

07:30.600 --> 07:35.400
Unlike Mac, if you use the case for asking query for specific colors, you get back to

07:35.400 --> 07:38.200
light mode colors if you use the existing APIs.

07:38.200 --> 07:43.600
You have to update that and again, you're limited to the widgets that are listed earlier

07:43.600 --> 07:48.880
so you have to get set the explorer theme or set the CFD team and then query for what

07:48.880 --> 07:50.160
you know exists.

07:50.160 --> 07:56.280
The big lack is that there is no tab pane or notebook or tab pane available in any of

07:56.280 --> 07:57.280
those applications.

07:57.280 --> 08:02.000
So in those cases, we're falling back to basically being a button which is why we have some

08:02.000 --> 08:04.640
complexities around that.

08:04.640 --> 08:08.440
Dark mode, Windows 1, that's what it looks like and in Windows final stuff, there's other

08:08.440 --> 08:15.400
stuff which is not dark mode which is even more complicated when it comes to the accessibility

08:15.400 --> 08:16.560
high contrast mode.

08:16.560 --> 08:22.600
So if anybody knows anything about that, last section knows about accessibility, let me

08:22.600 --> 08:24.720
know at some stage and we'll figure it out.

08:24.720 --> 08:28.640
So if you've got complexities, that's why it's done the way it is.

08:28.640 --> 08:29.640
That's the end.

08:29.640 --> 08:55.600
Thank you.

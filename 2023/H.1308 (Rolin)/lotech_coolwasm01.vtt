WEBVTT

00:00.000 --> 00:13.120
Let me start. This talk is partly about the same thing as the previous talk, so repetition

00:13.120 --> 00:22.360
is the mother of invention or mother of what's it called, mother's to the orumest. And here,

00:22.360 --> 00:28.720
so as Balash mentioned, the problem that this is supposed to solve is that if you are editing

00:28.720 --> 00:36.760
some document in Collabara Online, and for instance, on your laptop and then the connection

00:36.760 --> 00:45.840
breaks because you are going into a tunnel or something else happens, and then you can

00:45.840 --> 00:54.280
just seamlessly, eventually, it will start using the local bus instead in the browser

00:54.280 --> 01:00.240
and the same document that has been downloaded without you knowing into the browser's memory,

01:00.240 --> 01:18.320
not to your file system. Yeah, so the solution is that. And of course, implementing this

01:18.320 --> 01:27.880
actually will be quite a problem or quite hard, but we are already working on it and

01:27.880 --> 01:40.080
I assume it will be successful. And then when the connection comes up again, you can, or

01:40.080 --> 01:48.040
the document will be uploaded to the Collabara Online server and everything will continue

01:48.040 --> 01:54.880
and then using the online server. And I'm using the name Cobosm for this or actually

01:54.880 --> 02:06.280
was Thorsten who invented that name, I think. And what we don't think is a solution at least

02:06.280 --> 02:14.800
for some customers is to install Collabara Office locally because there are situations

02:14.800 --> 02:21.000
where you are not allowed to install third party software very easily. And if you did

02:21.000 --> 02:30.000
that and wanted to be prepared for this connection in Collabara Online, you would have to keep

02:30.000 --> 02:37.120
downloading the document yourself anyway all the time and then start Collabara Office locally

02:37.120 --> 02:50.800
separately. And what is WebAssembly? Well, this is what Balazs already told you. One

02:50.800 --> 02:59.280
thing that I guess could be mentioned is that this WebAssembly runs in the same sandbox

02:59.280 --> 03:06.880
as a web page and it has access to the same things that JavaScript has access to or more

03:06.880 --> 03:13.120
importantly doesn't have access to anything that JavaScript doesn't have access to. So

03:13.120 --> 03:21.680
it's quite safe. It can't read any random files on your disk and so on. And WebAssembly

03:21.680 --> 03:30.520
doesn't even have access to the, direct access to the DOM, to the HTML page, but it can easily

03:30.520 --> 03:37.480
run on JavaScript in a way that has access. So that's not that important. There are also

03:37.480 --> 03:43.760
awesome environments that are not in the browser. I don't remember what it's called. There's

03:43.760 --> 03:53.360
something, well, at least one such exists. And WebAssembly is supported in most current

03:53.360 --> 04:10.800
servers. Firefox, Chrome, Safari, Edge. Are there any others? Mscripten, toolchain, is

04:10.800 --> 04:18.560
this Clang-based toolchain. I'm not sure if the C and C++ library are like, are they considered

04:18.560 --> 04:27.880
part of Mscripten or not? Probably yes. And this C library contains much of normal Linux

04:27.880 --> 04:38.280
or POSIX functionality. Also, threading using pthreads. And there's even a in-memory file

04:38.280 --> 04:48.880
system that you can use to pass files from building the most application into the application

04:48.880 --> 05:02.080
at runtime. Some of these very traditional Unix functionalities are a bit oddly implemented,

05:02.080 --> 05:08.280
which can be surprising. For instance, pipes, which are like 50 years old and have always

05:08.280 --> 05:13.760
worked the same way in Unix in most days, suddenly are non-blocking, which was a surprise

05:13.760 --> 05:24.000
to us. And they use a very specific version of Mscripten currently. We could try to update

05:24.000 --> 05:33.280
on new one. I think it will work also. But this selecting what version of Mscripten to

05:33.280 --> 05:43.160
use and what toolchain options to use has been quite complicated. There are so many

05:43.160 --> 05:49.640
different versions to choose from, and they all have slightly different issues or functionality

05:49.640 --> 06:05.960
differences. So once you have something that works, you tend to stick to it. And the code

06:05.960 --> 06:14.880
version application, it contains all the relevant C++ code of LibreOffice Core itself and also

06:14.880 --> 06:23.360
all the external libraries that LibreOffice uses, plus then the C++ code of LibreOffice,

06:23.360 --> 06:35.280
I mean, Collabara Online. And then the same JavaScript code as in Collabara Online is also

06:35.280 --> 06:48.800
used of course. And that is what provides the UI. And compared to the typical Mscripten

06:48.800 --> 06:57.920
examples, you see if you start reading about Mscripten, in this case the Wasm code doesn't

06:57.920 --> 07:11.040
do any UI itself, but all UI is handled by this JavaScript layer. And the application

07:11.040 --> 07:20.680
structure is quite similar to the iOS and Android apps. They are built in quite a similar

07:20.680 --> 07:27.920
way, constructed in a similar way. And just like in these apps, instead of having several

07:27.920 --> 07:41.760
processes, there is just one process and multiple threads. And here you can see how the Collabara

07:41.760 --> 07:56.760
Online is constructed and then they communicate using WebSockets. And in COBASM, instead of

07:56.760 --> 08:04.680
several processes, we have multiple threads and as such the message passing between them

08:04.680 --> 08:18.200
is more or less the same as in the web-based Collabara Online server. And this is actually

08:18.200 --> 08:24.720
something that should be eventually improved. As you see, instead of all this message passing,

08:24.720 --> 08:31.920
we could just simply call the function directory that will handle the message eventually. So

08:31.920 --> 08:46.000
that should be faster and easier or let's say simpler on the system.

08:46.000 --> 08:54.200
Here are some pointers how to build this thing. You first compile LibreOffice Core and then

08:54.200 --> 09:06.160
the online dependencies and then online. And if you need to run this through a web server

09:06.160 --> 09:16.880
because you can't use these shared array buffers if you load a page from a file URL. And here

09:16.880 --> 09:24.480
is a sample screenshot where I actually then disconnected the internet and it still continued

09:24.480 --> 09:38.080
working. And that's it. Thanks to Allotropia for doing this initial work and making LibreOffice

09:38.080 --> 09:47.880
work as a WebSockets application. I'm not sure why I put this thing on this page but...

09:47.880 --> 10:10.960
Well, yeah, it was Allotropia who figured out what versions work and so on. So that's all.

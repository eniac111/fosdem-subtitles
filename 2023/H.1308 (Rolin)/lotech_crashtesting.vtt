WEBVTT

00:00.000 --> 00:15.260
Okay, hello, I'm Gabo Telleman from Allotopia, Bienvillea, and I would like to talk about

00:15.260 --> 00:20.360
how we do crash testing in the backyard.

00:20.360 --> 00:23.800
So let's start.

00:23.800 --> 00:26.240
What is even this crash testing?

00:26.240 --> 00:34.760
Crash testing is a QA sub-project of TDF and it runs on the master branch around every

00:34.760 --> 00:36.780
second week.

00:36.780 --> 00:40.120
So what is this testing?

00:40.120 --> 00:48.960
It's testing continuously opening files, saving them in different formats, and reopening of

00:48.960 --> 00:51.480
those saved files.

00:51.480 --> 00:59.400
And make sure that crashes during this workflow don't happen because that's kind of bad for

00:59.400 --> 01:03.040
user perspective.

01:03.040 --> 01:10.360
And usually this process sends a resulting mail to the developers list and interested

01:10.360 --> 01:17.880
parties like Mosley Kowlan fix those crashes.

01:17.880 --> 01:27.360
And that's good on master branch, but what if the long-term support branches, which we

01:27.360 --> 01:31.880
maintain for customers, introduce such errors?

01:31.880 --> 01:34.760
That would be kind of bad for customers.

01:34.760 --> 01:40.640
So we wanted to avoid that in the longer run.

01:40.640 --> 01:42.640
Okay.

01:42.640 --> 01:49.360
So what are the prerequisites for this work?

01:49.360 --> 01:55.480
You need first some hardware, a beefy system with many CPU threads because there is a lot

01:55.480 --> 01:58.760
of files to test.

01:58.760 --> 02:06.280
And of course, a bunch of files, tens of thousands.

02:06.280 --> 02:11.880
And this can be downloaded using scripts in the core repository.

02:11.880 --> 02:16.600
Then you need the crash testing scripts themselves.

02:16.600 --> 02:25.120
You need to download them and on the beefy system, configure them to build LibreOffice,

02:25.120 --> 02:33.520
run them on the set of files you have first downloaded and also interpret the results.

02:33.520 --> 02:39.200
So this is how the beefy system looks in real life.

02:39.200 --> 02:44.760
It's nothing entirely in the backyard, but on the couch, let's say.

02:44.760 --> 02:57.960
It was only some 40 CPUs or so and a lot of disk space as well.

02:57.960 --> 03:05.760
Next second step is downloading files.

03:05.760 --> 03:10.440
First script is called like this in the core repository.

03:10.440 --> 03:17.160
And this makes, is downloads user made file attachments from public backtrack cars such

03:17.160 --> 03:25.440
as TDF and Apache OpenOffice, backzilla, Linux distribution, backtrack cars and other software

03:25.440 --> 03:31.960
backtrack cars such as KOffice, GNumeric and Abi word.

03:31.960 --> 03:39.760
And it has some lovely or less lovely on user friendly properties such as you need to install

03:39.760 --> 03:49.920
some extra Python modules and set an environment variable to tailor for your hardware so that

03:49.920 --> 03:53.400
the download happens quite quickly.

03:53.400 --> 03:58.840
And you need to run it from the target directory.

03:58.840 --> 04:03.800
That's all that gave it at this script.

04:03.800 --> 04:09.880
Next second script is our website scraper code like this.

04:09.880 --> 04:12.440
It needs also some Python modules.

04:12.440 --> 04:20.640
You can add the target directory as parameter and some Microsoft Office themed forums will

04:20.640 --> 04:27.400
need registration before this can work on them and login data needs to be stored in

04:27.400 --> 04:30.520
a format file.

04:30.520 --> 04:35.680
Next getting the crash testing scripts themselves.

04:35.680 --> 04:43.440
It's not in the core repository but this other country dev tools repository and in the test

04:43.440 --> 04:46.560
backzilla files directory.

04:46.560 --> 04:51.560
So how to make sense of that?

04:51.560 --> 04:58.320
In the environment is also very important and this is the most difficult part of this

04:58.320 --> 05:01.080
talk.

05:01.080 --> 05:08.800
So before you start running the scripts you need to confirm the environment with this

05:08.800 --> 05:10.480
config file.

05:10.480 --> 05:18.480
It needs to be placed on that path.

05:18.480 --> 05:27.760
There are some defaults in the dev tools repository but you should override those.

05:27.760 --> 05:35.600
The most important settings are this compiler.

05:35.600 --> 05:46.200
The compiler version GCC or Clang works the same in this regard but you just need to take

05:46.200 --> 05:55.960
care that the old version of LibreOffice you want to compile actually compiles with your

05:55.960 --> 05:57.800
compiler.

05:57.800 --> 06:03.520
You need to set the parallelism how many CPU threads you have.

06:03.520 --> 06:11.760
It's with workers environment variable and the most important thing is the path for this

06:11.760 --> 06:14.760
script.

06:14.760 --> 06:24.800
So we need the location of the files to test which were downloaded by the two scripts two

06:24.800 --> 06:35.040
slides ago and after that you need to hardcode the dev tools repository path with this TT

06:35.040 --> 06:45.880
pass and next is source therefore the LibreOffice core repository clone which you also need to

06:45.880 --> 06:57.280
compile and you need a build directory where the output of the compilation will go.

06:57.280 --> 07:03.200
So in the build directory you need also place the autogen input file.

07:03.200 --> 07:13.120
It's also in the dev tools repository.

07:13.120 --> 07:19.480
Of course you don't want to send the casual email and upload the results to the DDF site

07:19.480 --> 07:27.600
because it's internal for the company so you need to set these two other two last variables.

07:27.600 --> 07:39.880
Okay next it's easy there is a crash test data variable for the downloaded files.

07:39.880 --> 07:49.600
You need to copy your files there and execute the command share script which will do all

07:49.600 --> 07:58.800
the heavy lifting and basically that's all.

07:58.800 --> 08:09.520
These are the crash test data directory under logs and the mere TXT file will be the summary

08:09.520 --> 08:12.360
of the run.

08:12.360 --> 08:20.940
Next step is finding what went wrong and fix the actual crashes which is just casual back

08:20.940 --> 08:25.280
porting back fixing.

08:25.280 --> 08:35.040
So what were what are gains of upstream from this work?

08:35.040 --> 08:37.000
There are some.

08:37.000 --> 08:43.360
I made these scripts a lot more configurable so you can set them up more easily for other

08:43.360 --> 08:46.120
companies.

08:46.120 --> 08:58.080
Before that it was it was only fixed only able to run on the DDF server and it was a

08:58.080 --> 09:03.040
kind of a pain to transplant it to another machine.

09:03.040 --> 09:08.880
There was a little bit of performance gain there was a bottleneck and upstream also can

09:08.880 --> 09:13.800
run this and this work more quickly.

09:13.800 --> 09:16.840
And that's all.

09:16.840 --> 09:33.280
Thanks for the attention.

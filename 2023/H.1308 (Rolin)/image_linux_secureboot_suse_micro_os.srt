1
0:00:00.000 --> 0:00:14.960
Okay, and so our final in-person talk, the last talk will be recorded playback.

2
0:00:14.960 --> 0:00:22.320
And now we have Ignaz Foster talking about OpenSUSE MicroS and the technical details.

3
0:00:22.320 --> 0:00:25.760
So thanks for coming.

4
0:00:25.760 --> 0:00:27.800
Thanks for the introduction and thanks for joining.

5
0:00:27.800 --> 0:00:32.560
A selfless talk will be about OpenSUSE MicroS.

6
0:00:32.560 --> 0:00:39.240
We have several topics to cover and not much time, so I'll just go over them quickly.

7
0:00:39.240 --> 0:00:44.880
We can't go into too much detail of here, but yeah, we'll see.

8
0:00:44.880 --> 0:00:46.120
Just one slide back.

9
0:00:46.120 --> 0:00:47.120
My name is Ignaz.

10
0:00:47.120 --> 0:00:53.800
I'm working for SUSE and yeah, I'm working as a research engineer.

11
0:00:53.800 --> 0:00:55.640
So what are today's topics?

12
0:00:55.640 --> 0:01:00.240
First of all, I'll give you a short introduction on OpenSUSE MicroS itself.

13
0:01:00.240 --> 0:01:03.760
How is it built up and on which foundations is it built up?

14
0:01:03.760 --> 0:01:09.240
Then we'll have a short look about the update and rollback mechanisms we are using there

15
0:01:09.240 --> 0:01:14.080
and something we haven't talked a lot about today on configuration file management on

16
0:01:14.080 --> 0:01:17.320
our approach to handle these in image-based systems.

17
0:01:17.320 --> 0:01:23.120
We probably won't make it to the full disk encryption and trust it's boot part, but I

18
0:01:23.120 --> 0:01:27.480
can just refer to Len's talk from earlier today.

19
0:01:27.480 --> 0:01:34.200
So when we are talking about OpenSUSE MicroS, we are basically talking about some product

20
0:01:34.200 --> 0:01:37.400
of the whole OpenSUSE universe.

21
0:01:37.400 --> 0:01:41.240
The most known products there are Tumbleweed and Leap.

22
0:01:41.240 --> 0:01:46.560
Tumbleweed is our rolling release distribution and Leap is our stable distribution, stable

23
0:01:46.560 --> 0:01:52.280
not in a sense of Tumbleweed crashes all the time, but stable in a sense of the API doesn't

24
0:01:52.280 --> 0:01:55.680
change all the time.

25
0:01:55.680 --> 0:01:59.200
Leap itself is based on SUSE Linux Enterprise.

26
0:01:59.200 --> 0:02:05.440
SUSE Linux Enterprise in turn is based on a Tumbleweed snapshot which will then merge

27
0:02:05.440 --> 0:02:07.560
into a stable product.

28
0:02:07.560 --> 0:02:13.600
So when we are talking about MicroS, we still have the same products basically.

29
0:02:13.600 --> 0:02:18.840
We have OpenSUSE MicroS which is based on Tumbleweed and we have OpenSUSE Leap Micro

30
0:02:18.840 --> 0:02:21.720
which is based on Leap.

31
0:02:21.720 --> 0:02:25.880
So basically we also have the same ingredients in there.

32
0:02:25.880 --> 0:02:31.840
We still have the RPM packages as a base.

33
0:02:31.840 --> 0:02:38.920
To be exact, exactly the same packages we have in the Tumbleweed or Leap distributions

34
0:02:38.920 --> 0:02:41.720
and we are building up on these.

35
0:02:41.720 --> 0:02:51.380
You may know OpenSUSE as one of the large users of Bt

36
0:02:51.380 --> 0:02:56.880
just the default, but when we are talking about MicroS, then BtFS will be mandatory.

37
0:02:56.880 --> 0:03:04.680
You have to use it because we rely on these features really deeply.

38
0:03:04.680 --> 0:03:08.360
First of all, that's snapshots.

39
0:03:08.360 --> 0:03:11.600
These are the snapshots.

40
0:03:11.600 --> 0:03:19.040
When we are creating an update, we will need those snapshots to have the forward and rollback

41
0:03:19.040 --> 0:03:20.040
handling.

42
0:03:20.040 --> 0:03:22.160
BtFS has a huge advantage.

43
0:03:22.160 --> 0:03:24.880
We have heard that from a previous talk already.

44
0:03:24.880 --> 0:03:27.520
BtFS has copy and write functionality.

45
0:03:27.520 --> 0:03:32.600
When we do an update, it will be the smallest update possible basically.

46
0:03:32.600 --> 0:03:40.440
We don't have AP partitioning where we have to have two partitions the same size but can

47
0:03:40.440 --> 0:03:44.800
have a minimal snapshot for that.

48
0:03:44.800 --> 0:03:51.200
When we are talking about MicroS, if it's based on Tumbleweed and Leap, what's the actual

49
0:03:51.200 --> 0:03:53.560
difference compared to them?

50
0:03:53.560 --> 0:03:58.360
First of all, it's a read-only root file system which is, I guess, common for all the image-based

51
0:03:58.360 --> 0:04:02.480
systems we heard of today.

52
0:04:02.480 --> 0:04:05.040
It contains a minimal package selection.

53
0:04:05.040 --> 0:04:09.800
Minimal doesn't necessarily mean that it's the smallest distribution possible but a minimal

54
0:04:09.800 --> 0:04:13.280
package set for what it's trying to do.

55
0:04:13.280 --> 0:04:17.760
What it's trying to do is being a single-purpose system.

56
0:04:17.760 --> 0:04:23.960
It evolved from a project called OpenSouza Cubic which was a Kubernetes distribution

57
0:04:23.960 --> 0:04:27.680
until we discovered that you can use it for so much more.

58
0:04:27.680 --> 0:04:34.280
Basically, what it's nowadays is a single-purpose system including running containers but you

59
0:04:34.280 --> 0:04:40.920
can use it for any system or any use case you actually want to have.

60
0:04:40.920 --> 0:04:46.960
You also have a MicroS desktop so your single use case would be running a desktop there

61
0:04:46.960 --> 0:04:54.360
with flatpacks as packages for using your applications.

62
0:04:54.360 --> 0:05:05.520
That single-purpose system approach also means you can install packages from the Tumbleweed

63
0:05:05.520 --> 0:05:12.880
and Leap distributions but it's not designed to be used that way.

64
0:05:12.880 --> 0:05:23.880
You should use containers for your actual load or you can say you install one dedicated

65
0:05:23.880 --> 0:05:28.560
package for example if you want to run it as a mail server or whatever.

66
0:05:28.560 --> 0:05:33.040
If you have a look at our commercial site where we have the SousaLix Enterprise Microproduct,

67
0:05:33.040 --> 0:05:36.000
we even have a very limited package set.

68
0:05:36.000 --> 0:05:41.760
You can't even install all the packages you can from Tumbleweed and Leap to make that

69
0:05:41.760 --> 0:05:51.040
clear that it's really meant to be used in a quite a restricted way for example for workloads,

70
0:05:51.040 --> 0:05:56.680
for example for cluster nodes or for embedded systems.

71
0:05:56.680 --> 0:06:00.600
Especially for embedded systems, we also have another very important point namely it's

72
0:06:00.600 --> 0:06:02.360
a self-maintaining system.

73
0:06:02.360 --> 0:06:07.760
You basically install it and then you in theory can't forget about it because it will just

74
0:06:07.760 --> 0:06:10.200
update and maintain itself.

75
0:06:10.200 --> 0:06:17.320
We'll have a short look at that later how that works.

76
0:06:17.320 --> 0:06:23.320
When we are talking about updates, I said it's a read-only system so you still have

77
0:06:23.320 --> 0:06:28.880
to be able to update the system somehow if it's not image-based.

78
0:06:28.880 --> 0:06:38.920
For that we are basically using the B2FS snapshot functionality which the B2FS snapshots are

79
0:06:38.920 --> 0:06:41.680
snapshots of the root file system.

80
0:06:41.680 --> 0:06:44.200
That's the important part.

81
0:06:44.200 --> 0:06:49.640
If you have a workload, for example containers, it's running in VAR.

82
0:06:49.640 --> 0:06:55.680
Of course you also have etc for your configuration files but the root file system basically what's

83
0:06:55.680 --> 0:07:02.800
below user is that part that is actually snapshotted and read-only.

84
0:07:02.800 --> 0:07:12.240
When we have an update, we will just create a new snapshot, the blue square on the second

85
0:07:12.240 --> 0:07:17.240
point and perform the update in there.

86
0:07:17.240 --> 0:07:23.640
The blue snapshot is a B2FS snapshot so it has minimal overhead.

87
0:07:23.640 --> 0:07:28.320
It will just be created in microseconds.

88
0:07:28.320 --> 0:07:32.440
There's no performance penalty for doing that.

89
0:07:32.440 --> 0:07:36.600
Then the update will be performed in that snapshot, for example by just calling the

90
0:07:36.600 --> 0:07:41.860
OpenSouce world superdub for doing a system update.

91
0:07:41.860 --> 0:07:50.540
If anything should go wrong in that step, then that snapshot can just be discarded again

92
0:07:50.540 --> 0:07:52.640
and we are back at square one.

93
0:07:52.640 --> 0:08:00.080
We just have the currently running system and the new snapshot, the active system won't

94
0:08:00.080 --> 0:08:02.920
even have seen the new snapshot.

95
0:08:02.920 --> 0:08:11.460
If the update was successful, then that snapshot will be marked as the new default snapshot.

96
0:08:11.460 --> 0:08:18.400
That means if we reboot the system just like AB partitioning, that snapshot will be used

97
0:08:18.400 --> 0:08:24.080
as the new boot file system.

98
0:08:24.080 --> 0:08:29.120
We have a second step, but that will be later, just a second.

99
0:08:29.120 --> 0:08:35.360
Let me talk about it immediately.

100
0:08:35.360 --> 0:08:40.320
We have a second step at boot called Health Tracker.

101
0:08:40.320 --> 0:08:47.480
If Health Tracker should detect that something is not working as expected, for example a

102
0:08:47.480 --> 0:08:54.200
service you expect it doesn't come up, then an automatic rollback will be performed again.

103
0:08:54.200 --> 0:08:59.960
We will be back at square one again.

104
0:08:59.960 --> 0:09:04.960
It behaves as nothing would have been changed and we can wait for the bug fix for whatever

105
0:09:04.960 --> 0:09:10.520
broke the actual update.

106
0:09:10.520 --> 0:09:17.720
All the metric happens in an application called transactional update and a new library called

107
0:09:17.720 --> 0:09:18.800
TUQL.

108
0:09:18.800 --> 0:09:21.600
Transaction update was originally a shell script.

109
0:09:21.600 --> 0:09:27.320
It called all the open SUSE specific stuff, for example calling super for the package

110
0:09:27.320 --> 0:09:36.440
management or calling MKInnID for rebuilding the InnID.

111
0:09:36.440 --> 0:09:43.000
Something which needed right access, so had to modify the root file system, was just wrapped

112
0:09:43.000 --> 0:09:45.320
with that wrapper script.

113
0:09:45.320 --> 0:09:50.040
Out of that, a new library emerged called libTUQL.

114
0:09:50.040 --> 0:09:54.080
That one is supposed to be platform agnostic.

115
0:09:54.080 --> 0:09:38.920
It includes C, C++ and D

116
0:09:56.920 --> 0:10:00.360
was bindings.

117
0:10:00.360 --> 0:10:06.080
The only implementation currently is for Btriv S and Snapper, but if you want to, you could

118
0:10:06.080 --> 0:10:07.920
also just write another backend.

119
0:10:07.920 --> 0:10:14.400
It's prepared for that for more general snapshot management.

120
0:10:14.400 --> 0:10:24.600
We have, for example, a microDNF plugin to be exact.

121
0:10:24.600 --> 0:10:30.880
You could just use that one library for that.

122
0:10:30.880 --> 0:10:38.320
I just said if you want to activate that snapshot, you would usually reboot and have that snapshot

123
0:10:38.320 --> 0:10:39.800
activated.

124
0:10:39.800 --> 0:10:45.040
That's the atomic part, which is important for making sure that you don't touch the currently

125
0:10:45.040 --> 0:10:52.760
running system, but make sure the update is activated in one atomic step.

126
0:10:52.760 --> 0:10:59.440
With the next transaction update version, there will be also a new option called transaction

127
0:10:59.440 --> 0:11:01.360
update apply.

128
0:11:01.360 --> 0:11:08.280
What that one does is it will just mount basically user into the currently running

129
0:11:08.280 --> 0:11:09.280
system.

130
0:11:09.280 --> 0:11:14.880
That was possible if you heard the talk from Ludwig two talks ago.

131
0:11:14.880 --> 0:11:20.960
That was possible because of the user merge, because practically everything the system requires

132
0:11:20.960 --> 0:11:24.100
is below user.

133
0:11:24.100 --> 0:11:32.040
If it isn't, it should be changed in the future, but for microS, that one's working very reliably

134
0:11:32.040 --> 0:11:35.000
already.

135
0:11:35.000 --> 0:11:39.720
If you just update or if you just installed a new package in the new snapshot, that one

136
0:11:39.720 --> 0:11:46.360
will be totally painless because you just have the new package available immediately.

137
0:11:46.360 --> 0:11:51.560
If you change system services, and I don't know what, then maybe you should still think

138
0:11:51.560 --> 0:11:57.400
about rebooting afterwards because it's basically the same when you're running an update in

139
0:11:57.400 --> 0:12:10.120
a running system, basically an update or superdub in a running system.

140
0:12:10.120 --> 0:12:12.000
I talked about rollback already.

141
0:12:12.000 --> 0:12:17.680
If you reboot the system and something doesn't work as expected, then it will perform an

142
0:12:17.680 --> 0:12:19.360
automatic rollback.

143
0:12:19.360 --> 0:12:27.400
With tracker, you can see the URL at the bottom itself provides an interface basically for

144
0:12:27.400 --> 0:12:28.760
custom plugins.

145
0:12:28.760 --> 0:12:33.400
You have to know yourself which services are running on your system, and you have to know

146
0:12:33.400 --> 0:12:34.960
yourself how to check them.

147
0:12:34.960 --> 0:12:42.080
As said, it's a single purpose system, so I hope you know what you're doing.

148
0:12:42.080 --> 0:12:48.760
You can just extend it with custom plugins where you define what defines a correctly

149
0:12:48.760 --> 0:12:52.800
running system.

150
0:12:52.800 --> 0:12:55.640
Let's have a look at the time.

151
0:12:55.640 --> 0:12:56.640
Excellent.

152
0:12:56.640 --> 0:12:59.880
Let's have a look at the configuration file management.

153
0:12:59.880 --> 0:13:11.160
When we are talking about read-only root file systems, we still have to have some directories

154
0:13:11.160 --> 0:13:12.160
of files writable.

155
0:13:12.160 --> 0:13:19.400
We've just seen that with the Ubuntu core talk in contrast to Ubuntu core for OpenSUSE

156
0:13:19.400 --> 0:13:20.400
micros.

157
0:13:20.400 --> 0:13:24.680
All of WA and all of etc are writable.

158
0:13:24.680 --> 0:13:29.080
WA is a separate subvolume.

159
0:13:29.080 --> 0:13:32.680
For etc, we are using a mechanism called overlays.

160
0:13:32.680 --> 0:13:37.880
It's basically just the kernel overlay of S file system.

161
0:13:37.880 --> 0:13:43.200
That one may need a bit more explanation.

162
0:13:43.200 --> 0:13:50.840
If we have a look at the hcfs tab entry for etc, it looks overly long and overly complicated.

163
0:13:50.840 --> 0:13:55.360
But in the end, it's just the two lines which are colored.

164
0:13:55.360 --> 0:14:01.600
We have the upper-der when we are just performing an update.

165
0:14:01.600 --> 0:14:07.080
That's the overlay of the next snapshot.

166
0:14:07.080 --> 0:14:12.240
The lower-der is the directory of the currently running system.

167
0:14:12.240 --> 0:14:20.600
To avoid having stacks over stacks over stacks, you'll just sync the state of the previous

168
0:14:20.600 --> 0:14:25.040
system as the base of the new snapshot.

169
0:14:25.040 --> 0:14:30.180
That's the three layers we are talking about.

170
0:14:30.180 --> 0:14:40.020
If we have a look at that in detail, what's happening on configuration file changes?

171
0:14:40.020 --> 0:14:46.520
If we have the case of file one, that's a really old file.

172
0:14:46.520 --> 0:14:49.960
That file has always existed, was never changed.

173
0:14:49.960 --> 0:14:51.560
That's no problem at all.

174
0:14:51.560 --> 0:14:56.100
Basically we are just having a look from the top to the bottom.

175
0:14:56.100 --> 0:14:57.260
Nothing is in upper-der.

176
0:14:57.260 --> 0:14:58.960
Nothing is in lower-der one.

177
0:14:58.960 --> 0:15:04.200
Every version of lower-der two will be used.

178
0:15:04.200 --> 0:15:08.080
File two is interesting because that one has an old state.

179
0:15:08.080 --> 0:15:11.120
During the update, that file was actually changed.

180
0:15:11.120 --> 0:15:18.480
It seems either the package refreshed it or some postscript modified it or whatever happened

181
0:15:18.480 --> 0:15:19.480
to it.

182
0:15:19.480 --> 0:15:23.680
In any case, we have a new version of that file.

183
0:15:23.680 --> 0:15:28.200
As soon as you reboot into the new snapshot, you'll see that version of the file, older

184
0:15:28.200 --> 0:15:34.480
snapshots will see that version of the file.

185
0:15:34.480 --> 0:15:37.240
File four, file five and file six are similar.

186
0:15:37.240 --> 0:15:38.240
Those are quite easy.

187
0:15:38.240 --> 0:15:41.440
That one is new in the next snapshot.

188
0:15:41.440 --> 0:15:45.360
That one was new in the previous snapshot and those were modified into the snapshot

189
0:15:45.360 --> 0:15:46.640
before.

190
0:15:46.640 --> 0:15:54.880
The interesting thing is file three because that one exists both in the current snapshot

191
0:15:54.880 --> 0:16:00.680
and in the new snapshot and that may indicate a conflict.

192
0:16:00.680 --> 0:16:07.240
Because as soon as you perform an update or create the new snapshot, the state of the

193
0:16:07.240 --> 0:16:13.100
file will be frozen basically and that one will be used as the base for the new snapshot.

194
0:16:13.100 --> 0:16:20.740
If you change the file before rebooting the system, then the new layer won't see that

195
0:16:20.740 --> 0:16:24.520
new file anymore.

196
0:16:24.520 --> 0:16:30.480
Whether you're operating on an old version of the file or you'd have to check there will

197
0:16:30.480 --> 0:16:36.160
be a warning when you root the system that there may be a conflict if the file in lower

198
0:16:36.160 --> 0:16:44.160
tier one is the file in upper tier.

199
0:16:44.160 --> 0:16:51.800
That's our approach to handling current systems, current packages as we have them from vendors,

200
0:16:51.800 --> 0:16:57.960
from our own distribution and having a pragmatic approach to handling those configuration files.

201
0:16:57.960 --> 0:17:01.560
But in the end, we don't want to have that at all.

202
0:17:01.560 --> 0:17:09.760
In the end, we want to have the files which are packaged to be completely in user.

203
0:17:09.760 --> 0:17:13.480
We don't want to have them in etc at all.

204
0:17:13.480 --> 0:17:21.360
Only changes that were explicitly done by the admin are supposed to be in etc.

205
0:17:21.360 --> 0:17:30.200
That's where we are really approaching our final goal.

206
0:17:30.200 --> 0:17:33.680
For open source micros, we almost achieved that goal.

207
0:17:33.680 --> 0:17:40.880
There are still some problematic files, for example, etcfs type of course, such a singular

208
0:17:40.880 --> 0:17:47.280
file which you can't extend if you have an application and also want to make it possible

209
0:17:47.280 --> 0:17:49.360
to split those files.

210
0:17:49.360 --> 0:17:52.560
We have developed a library called libecon.

211
0:17:52.560 --> 0:17:57.000
You can just embed it and we'll do all the things automatically just in case you're interested

212
0:17:57.000 --> 0:17:59.000
in that.

213
0:17:59.000 --> 0:18:06.560
We have made several pull requests and patches for projects which are used by open source

214
0:18:06.560 --> 0:18:14.400
micros to fix those use cases for us.

215
0:18:14.400 --> 0:18:21.480
In the end, I think we took a quite pragmatic approach using existing technologies to just

216
0:18:21.480 --> 0:18:28.560
be able to use your existing infrastructure, your existing packages, and preserve the compatibility

217
0:18:28.560 --> 0:18:32.520
with all the legacy software which may exist out there.

218
0:18:32.520 --> 0:18:43.600
We are basically doing the opposite of most other distributions by extending the, let's

219
0:18:43.600 --> 0:18:51.840
say, existing distributions to the new use cases.

220
0:18:51.840 --> 0:18:56.560
As I feared, I'll just refer to Len's talk from earlier today.

221
0:18:56.560 --> 0:18:59.200
We do support full disk encryption.

222
0:18:59.200 --> 0:19:06.360
We do support trusty boot and we also have measurement support.

223
0:19:06.360 --> 0:19:11.600
Let's better get to the questions part just in case you have some.

224
0:19:11.600 --> 0:19:22.680
Thank you very much for your talk.

225
0:19:22.680 --> 0:19:28.800
I was pestering your colleagues out here moments before this talk.

226
0:19:28.800 --> 0:19:34.240
Do you have any plans to migrate the old qubit docs to micros?

227
0:19:34.240 --> 0:19:41.720
Because for someone who's new to transactional systems, it isn't immediately obvious how

228
0:19:41.720 --> 0:19:46.960
the classical administration style translates to transactional one.

229
0:19:46.960 --> 0:19:51.280
Yes, we have a new documentation.

230
0:19:51.280 --> 0:19:53.600
The problem is micros doesn't include documentation.

231
0:19:53.600 --> 0:20:00.200
If you're in an embedded use case or using it for containers, the main pages are just

232
0:20:00.200 --> 0:20:02.680
overhead which is not needed.

233
0:20:02.680 --> 0:20:08.160
We have a separate documentation server which will just provide all the documentation, but

234
0:20:08.160 --> 0:20:11.320
I forgot which one it is.

235
0:20:11.320 --> 0:20:12.320
You have to ask me later.

236
0:20:12.320 --> 0:20:16.080
I'll search it for you.

237
0:20:16.080 --> 0:20:19.160
I hope these search engines have picked it up meanwhile.

238
0:20:19.160 --> 0:20:24.400
It's a few weeks old.

239
0:20:24.400 --> 0:20:26.440
There is a question in the chat.

240
0:20:26.440 --> 0:20:32.080
How is micros related to ALP?

241
0:20:32.080 --> 0:20:42.520
Basically, the current state of open-sUSE-ELP which is supposed to be the next generation

242
0:20:42.520 --> 0:20:50.720
of our SUSE-LIMS enterprise, whatever emerged out of that.

243
0:20:50.720 --> 0:20:57.040
Basically, open-sUSE-ALP is based on open-sUSE-micros in its current state.

244
0:20:57.040 --> 0:21:03.760
There will be more use cases than just the container use cases, but that's the base which

245
0:21:03.760 --> 0:21:07.600
it was initially put onto.

246
0:21:07.600 --> 0:21:11.240
A lot of things you can do with open-sUSE-micros.

247
0:21:11.240 --> 0:21:13.040
You can also do with open-sUSE-ALP.

248
0:21:13.040 --> 0:21:19.640
We even share parts of the documentation currently, but open-sUSE-ALP is more than just open-sUSE-micros.

249
0:21:19.640 --> 0:21:25.600
It's just the same foundation currently.

250
0:21:25.600 --> 0:21:28.440
It's just the same foundation.

251
0:21:28.440 --> 0:21:32.240
Going once, going twice.

252
0:21:32.240 --> 0:21:33.240
Thank you very much.

253
0:21:33.240 --> 0:21:56.640
That was wonderful.


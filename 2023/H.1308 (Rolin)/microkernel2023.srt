1
0:00:00.000 --> 0:00:08.360
All righty.

2
0:00:08.360 --> 0:00:09.360
So hi, everyone.

3
0:00:09.360 --> 0:00:10.360
I'm Razvan.

4
0:00:10.360 --> 0:00:17.600
We are now part of the microkernel component as a component-based OS dev room.

5
0:00:17.600 --> 0:00:19.300
It's a pleasure to have you all here.

6
0:00:19.300 --> 0:00:20.500
We're going to start right away.

7
0:00:20.500 --> 0:00:22.620
So we have, I think, 10 talks.

8
0:00:22.620 --> 0:00:27.540
We're going to delve into microkernel, UNICOL, and component-based OS topics.

9
0:00:27.540 --> 0:00:31.640
We're going to start with Martin, with his talk on the state of the microkernel environment.

10
0:00:31.640 --> 0:00:33.000
So Martin, please go ahead.

11
0:00:33.000 --> 0:00:34.000
Thank you.

12
0:00:34.000 --> 0:00:35.160
Good morning.

13
0:00:35.160 --> 0:00:36.160
Thanks for coming.

14
0:00:36.160 --> 0:00:37.160
Welcome.

15
0:00:37.160 --> 0:00:43.000
It's my pleasure and honor to open this dev room today.

16
0:00:43.000 --> 0:00:48.180
And it's also a great pleasure that we can continue this tradition of this dev room since

17
0:00:48.180 --> 0:00:49.560
2012.

18
0:00:49.560 --> 0:00:54.080
I would like to thank Razvan for organizing the dev room this year.

19
0:00:54.080 --> 0:00:55.920
And let's go to it.

20
0:00:55.920 --> 0:01:04.000
So my talk will be about the currently developed micro kernels that I'm aware of.

21
0:01:04.000 --> 0:01:05.520
Maybe I'm missing some.

22
0:01:05.520 --> 0:01:08.040
But this should be like an overview.

23
0:01:08.040 --> 0:01:14.800
If you might be interested in seriously using a microkernel or just trying it out, what

24
0:01:14.800 --> 0:01:16.840
you can expect.

25
0:01:16.840 --> 0:01:19.360
This first slide is about me.

26
0:01:19.360 --> 0:01:21.160
I won't go into it.

27
0:01:21.160 --> 0:01:26.960
Let me just say that I have been working with micro kernels and contributing to micro kernels

28
0:01:26.960 --> 0:01:32.360
for almost 20 years now, half of my lifetime.

29
0:01:32.360 --> 0:01:38.920
I assume that most people here do know what a microkernel is, or at least most people

30
0:01:38.920 --> 0:01:41.440
have some kind of idea.

31
0:01:41.440 --> 0:01:48.760
But I will still try to very briefly introduce the micro kernels to you.

32
0:01:48.760 --> 0:01:53.560
Maybe I will save a few minutes for the follow up speakers.

33
0:01:53.560 --> 0:01:59.560
So a microkernel based operating system is a fundamental way how to achieve operating

34
0:01:59.560 --> 0:02:03.500
system reliability and dependability.

35
0:02:03.500 --> 0:02:11.520
By the means of having purpose of the architecture, especially driven by specific design principles.

36
0:02:11.520 --> 0:02:15.980
Now every microkernel has their own design principles.

37
0:02:15.980 --> 0:02:19.680
This is where the different implementations differ, obviously.

38
0:02:19.680 --> 0:02:26.980
But I think there are three common universal design principles, the separation of concerns,

39
0:02:26.980 --> 0:02:32.760
the split of mechanism and policy, and the principle of least privilege.

40
0:02:32.760 --> 0:02:40.360
So this generally results in a system that is modular, customizable, and verifiable,

41
0:02:40.360 --> 0:02:43.280
potentially formally verifiable.

42
0:02:43.280 --> 0:02:50.840
By the way, some micro kernels do have a minimality as an explicit design principle,

43
0:02:50.840 --> 0:02:53.300
but many micro kernels actually don't.

44
0:02:53.300 --> 0:02:58.600
So the micro part in the microkernel and the whole microkernel term is a little bit of

45
0:02:58.600 --> 0:03:01.840
a misnomer, at least as I see it.

46
0:03:01.840 --> 0:03:05.760
Because having the microkernel as small as possible is not necessary.

47
0:03:05.760 --> 0:03:09.900
The a priori goal is just the result of the other design principles.

48
0:03:09.900 --> 0:03:14.400
And I really think that there is no point in comparing whether one microkernel might

49
0:03:14.400 --> 0:03:19.720
have 20,000 lines of code and the other one, 30,000, it's really comparing the post to

50
0:03:19.720 --> 0:03:21.760
oranges.

51
0:03:21.760 --> 0:03:26.800
These design principles also don't affect just the kernel design, but potentially also

52
0:03:26.800 --> 0:03:28.960
the user space design.

53
0:03:28.960 --> 0:03:35.720
So therefore you might see descriptions like microkernel multi-server operating system

54
0:03:35.720 --> 0:03:38.240
with fine-grained components.

55
0:03:38.240 --> 0:03:44.720
This means that not only the kernel is non-monolithic, maybe that would be a better term, but we

56
0:03:44.720 --> 0:03:52.080
are stuck with the microkernel term, but also this might suggest that in many of these systems

57
0:03:52.080 --> 0:03:57.200
also there are no monoliths in the user space.

58
0:03:57.200 --> 0:03:59.880
I have some slides about the history, but I will skip them.

59
0:03:59.880 --> 0:04:02.360
You can go to the slides if you are interested.

60
0:04:02.360 --> 0:04:10.600
Just one note, the idea of micro kernels has been around almost as long as the idea of

61
0:04:10.600 --> 0:04:12.000
operating systems.

62
0:04:12.000 --> 0:04:20.520
So if some people say that micro kernels are strange, are they strange over engineered

63
0:04:20.520 --> 0:04:27.280
idea that proper operating systems should be monolithic because this was the way how

64
0:04:27.280 --> 0:04:34.240
they started and et cetera, I don't think those are very valid arguments.

65
0:04:34.240 --> 0:04:36.920
So let's go to the core of my talk.

66
0:04:36.920 --> 0:04:43.480
There is a website, microkernel.info, which is basically a condensed version of this.

67
0:04:43.480 --> 0:04:52.360
So this is a very simple site that lists the current state of the art open source micro

68
0:04:52.360 --> 0:04:53.320
kernels.

69
0:04:53.320 --> 0:05:00.920
So if you are interested or if you are looking around, going to this site is probably a good

70
0:05:00.920 --> 0:05:01.920
idea.

71
0:05:01.920 --> 0:05:06.320
By the way, this site was started by Yakub Mirmash, my colleague, and I'm maintaining it right

72
0:05:06.320 --> 0:05:07.320
now.

73
0:05:07.320 --> 0:05:12.840
Of course, if you are a microkernel developer and you don't see your project on this site,

74
0:05:12.840 --> 0:05:15.360
just send us a pull request.

75
0:05:15.360 --> 0:05:17.440
It's so simple.

76
0:05:17.440 --> 0:05:20.480
Okay, let's start with the overview.

77
0:05:20.480 --> 0:05:30.880
I should say that there are surprisingly many projects, active projects that are microkernel

78
0:05:30.880 --> 0:05:33.400
based.

79
0:05:33.400 --> 0:05:39.080
And for a microkernel developer, this is really exciting times, I would say.

80
0:05:39.080 --> 0:05:49.920
So Gnode by Gnode Labs is perhaps the most versatile example of a microkernel based operating

81
0:05:49.920 --> 0:05:56.120
system, but I mind you, it's actually not an operating system in the common sense, like

82
0:05:56.120 --> 0:05:59.360
you would consider Windows or a GNU Linux distribution.

83
0:05:59.360 --> 0:06:02.840
It's actually an operating system construction kit.

84
0:06:02.840 --> 0:06:11.320
So it's a way how to pick and match different operating system components, including different

85
0:06:11.320 --> 0:06:20.320
micro kernels or kernels in general, with some user space components and how to build

86
0:06:20.320 --> 0:06:25.200
a bespoke operating system for your specific needs.

87
0:06:25.200 --> 0:06:29.840
So what is really interesting about Gnode that you can really use all these different

88
0:06:29.840 --> 0:06:38.560
micro kernels like SCL4, Fiasco OC, micro hypervisors like Nova, and you can even use their own

89
0:06:38.560 --> 0:06:46.800
custom microkernel, which is called base-HW, or you can even run this infrastructure onto

90
0:06:46.800 --> 0:06:50.520
both Linux for development purposes maybe.

91
0:06:50.520 --> 0:06:57.800
There is strong focus on resource accounting and management in Gnode.

92
0:06:57.800 --> 0:07:01.960
You can read the Gnode book for the details.

93
0:07:01.960 --> 0:07:08.320
Gnode is driven by a commercial company, so they have customers, somebody is paying them

94
0:07:08.320 --> 0:07:10.040
to do that.

95
0:07:10.040 --> 0:07:13.880
They don't state their references publicly, as far as I know.

96
0:07:13.880 --> 0:07:18.400
I might know some, but I'm not in the liberty to name them.

97
0:07:18.400 --> 0:07:24.680
And there is also this thing called Scalp OS, which is like a pre-built distribution of

98
0:07:24.680 --> 0:07:25.680
Gnode.

99
0:07:25.680 --> 0:07:33.080
So if you would like to try something that you don't have to pre-configure in advance

100
0:07:33.080 --> 0:07:39.040
for your specific needs, you can go for that.

101
0:07:39.040 --> 0:07:48.040
This is a picture from Norman Feske, one of the co-authors of Gnode from, I think, FOSDAM

102
0:07:48.040 --> 0:07:49.560
2017.

103
0:07:49.560 --> 0:07:55.560
So maybe the image is a little bit outdated, but I still think it gives you the big picture.

104
0:07:55.560 --> 0:08:02.920
So you have all these components like different kernels, different user space, runtime environments,

105
0:08:02.920 --> 0:08:04.040
if I can say.

106
0:08:04.040 --> 0:08:11.960
So this one is, for example, Unix-like runtime environment, drivers and UI components and

107
0:08:11.960 --> 0:08:13.480
stuff like that.

108
0:08:13.480 --> 0:08:16.680
And you mix and match them.

109
0:08:16.680 --> 0:08:25.200
And then this is a screenshot of the Scalp OS, so like this one instantiation of Gnode.

110
0:08:25.200 --> 0:08:34.600
And you see that it's actually a nice desktop-oriented operating system.

111
0:08:34.600 --> 0:08:37.680
Some final closing remarks to Gnode.

112
0:08:37.680 --> 0:08:47.000
I really like Base-HW, as the bespoke microkernel for Gnode, because it's really nicely integrated

113
0:08:47.000 --> 0:08:49.640
with the rest of the system.

114
0:08:49.640 --> 0:08:55.480
For some reason that I don't know, I don't understand, but there are Gnode guys here,

115
0:08:55.480 --> 0:08:57.160
you can ask them.

116
0:08:57.160 --> 0:09:03.280
I don't see complete feature parity of Base-HW with the other microkernel's support.

117
0:09:03.280 --> 0:09:09.240
So as far as I know, there is no support for hardware virtualization.

118
0:09:09.240 --> 0:09:14.100
And this is not a criticism, this is just a comment.

119
0:09:14.100 --> 0:09:20.160
If you start playing with Gnode, you need to read some documentation.

120
0:09:20.160 --> 0:09:24.680
There is very nice documentation available, no doubt about it.

121
0:09:24.680 --> 0:09:31.440
But really it's not so simple by just downloading an image and running it and expecting a fully

122
0:09:31.440 --> 0:09:34.480
blown desktop environment.

123
0:09:34.480 --> 0:09:37.440
At least not from just by booting it.

124
0:09:37.440 --> 0:09:39.780
You have to do something.

125
0:09:39.780 --> 0:09:42.400
But I think it's definitely worth it.

126
0:09:42.400 --> 0:09:44.920
So there are some links you can follow.

127
0:09:44.920 --> 0:09:48.920
It's an open source project, by the way.

128
0:09:48.920 --> 0:09:57.720
Now let me talk about L4E, which is something slightly similar, some aspects different,

129
0:09:57.720 --> 0:10:01.000
by my current employer, current concept.

130
0:10:01.000 --> 0:10:06.000
So this is also a production grade microkernel-based environment.

131
0:10:06.000 --> 0:10:10.320
A little bit more integrated, I would say, because we basically support just the one

132
0:10:10.320 --> 0:10:18.720
kernel, which we called the L4E microkernel, but you all know it by the name Fiasco.

133
0:10:18.720 --> 0:10:24.800
We use this name currently because Fiasco is a very poor name, trust me.

134
0:10:24.800 --> 0:10:32.200
So we strongly focus on virtualization, we strongly focus on safety and security certification

135
0:10:32.200 --> 0:10:33.580
currently.

136
0:10:33.580 --> 0:10:39.800
And we also have customers, because we are a company that pays us, et cetera.

137
0:10:39.800 --> 0:10:46.640
I'm again not in the liberty to name them, but I can say that if you're going to buy

138
0:10:46.640 --> 0:10:52.920
a new car from a German car manufacturer, there is a high chance you will be running

139
0:10:52.920 --> 0:10:53.920
L4E.

140
0:10:53.920 --> 0:11:02.880
There will be L4E code running in the software stack of that car.

141
0:11:02.880 --> 0:11:10.640
To be honest, the code base is not the most verbosely commented that I have seen, especially

142
0:11:10.640 --> 0:11:11.920
the kernel itself.

143
0:11:11.920 --> 0:11:19.480
So again, the learning curve is a little bit steep, but at least there are some scenarios

144
0:11:19.480 --> 0:11:27.160
you can just build or download and pre-built image, and this will show you the potential

145
0:11:27.160 --> 0:11:29.520
to a certain degree.

146
0:11:29.520 --> 0:11:30.520
And here are some links.

147
0:11:30.520 --> 0:11:34.040
Again, it's an open source project.

148
0:11:34.040 --> 0:11:41.680
Now let's talk about Helen OS, which is to compare with the previous two.

149
0:11:41.680 --> 0:11:43.480
It's a slightly different breed.

150
0:11:43.480 --> 0:11:45.840
So this is like an integrated operating system.

151
0:11:45.840 --> 0:11:52.560
So the purpose is to build it or download an image, boot it, and be presented with a

152
0:11:52.560 --> 0:11:59.720
subenvironment with a shell and some mostly familiar commands which you can use to explore

153
0:11:59.720 --> 0:12:00.720
the system.

154
0:12:00.720 --> 0:12:05.520
So it's not about compile time or deployment time configuration.

155
0:12:05.520 --> 0:12:10.040
It's really about configuring the system at runtime as you go.

156
0:12:10.040 --> 0:12:15.120
What do you expect from a desktop-oriented OS?

157
0:12:15.120 --> 0:12:20.720
And of course, I'm a little bit biased because this is my project, but I would argue that

158
0:12:20.720 --> 0:12:29.640
if you want to understand how a microkernel-based system works inside, this is the one to understand

159
0:12:29.640 --> 0:12:34.920
and to pick because of the lower entry barrier.

160
0:12:34.920 --> 0:12:39.880
The code base is portable, self-contained, well-structured.

161
0:12:39.880 --> 0:12:46.280
So for example, we know how to use directories and not only a single level of them.

162
0:12:46.280 --> 0:12:51.160
So this is how we structure the system to be more understandable.

163
0:12:51.160 --> 0:12:54.480
The code is well-commented, and this is not just my observation.

164
0:12:54.480 --> 0:13:02.880
If you run a tool that will analyze the sources, you will get a number around 30, 35% of commands,

165
0:13:02.880 --> 0:13:05.840
which is not bad.

166
0:13:05.840 --> 0:13:09.560
And believe me, I have seen many microkernel code bases.

167
0:13:09.560 --> 0:13:17.200
I have seen the code of many operating systems in general, and I can tell the difference.

168
0:13:17.200 --> 0:13:23.280
So I would compare Hellen-OS to something like the Solaris kernel in terms of the structure

169
0:13:23.280 --> 0:13:27.600
and commands and stuff like that.

170
0:13:27.600 --> 0:13:34.440
And we also prefer to use our native components, so no ported components or components that

171
0:13:34.440 --> 0:13:45.520
might use some unicernal layers to really make the system feel coherent.

172
0:13:45.520 --> 0:13:47.200
Let's put it that way.

173
0:13:47.200 --> 0:13:53.200
So this is how it looks like when you boot the image, which you can compile or download.

174
0:13:53.200 --> 0:13:57.640
So you have a user interface, a shell, et cetera.

175
0:13:57.640 --> 0:14:03.600
And we have some interesting features that are not present in the other microkernels.

176
0:14:03.600 --> 0:14:10.240
So we are portable not only in theory, but also in real life.

177
0:14:10.240 --> 0:14:17.960
So we support eight different architectures, including strange beasts like Itanium.

178
0:14:17.960 --> 0:14:21.200
And yes, the RISC-V port is still not finished.

179
0:14:21.200 --> 0:14:24.720
And that goes to me.

180
0:14:24.720 --> 0:14:32.180
We are using asynchronous IPC, which transplantry uses shared memory for performance.

181
0:14:32.180 --> 0:14:37.540
We have interrupt controller drivers in user space compared to some other microkernels.

182
0:14:37.540 --> 0:14:43.720
We have a fully decomponentized TCP IP stack.

183
0:14:43.720 --> 0:14:51.120
We support USB 3.0, and we have a sound stack, so just a few highlights.

184
0:14:51.120 --> 0:14:53.720
I will go quickly through these slides.

185
0:14:53.720 --> 0:15:00.360
We don't have the time to go to the details, but the microkernel, while being quite small,

186
0:15:00.360 --> 0:15:01.760
still has a structure.

187
0:15:01.760 --> 0:15:07.820
So we have a well-defined hardware abstraction layer in the kernel.

188
0:15:07.820 --> 0:15:13.040
This is how the user space or how the entire architecture of the system looks like.

189
0:15:13.040 --> 0:15:19.720
So you might see some similarities with the G-node image, but the difference is that all

190
0:15:19.720 --> 0:15:25.640
of this is potentially running in the system for all the time, depending on the actual

191
0:15:25.640 --> 0:15:28.740
configuration of your machine.

192
0:15:28.740 --> 0:15:34.200
And there are some device drivers, which are somehow structured in a tree, starting with

193
0:15:34.200 --> 0:15:36.680
some platform drivers, et cetera.

194
0:15:36.680 --> 0:15:42.520
If you want the details, please come to me.

195
0:15:42.520 --> 0:15:45.240
It's a community-driven effort currently.

196
0:15:45.240 --> 0:15:52.160
So yeah, we are not so fast regarding the development, but we still do some regular

197
0:15:52.160 --> 0:15:53.160
releases.

198
0:15:53.160 --> 0:15:56.920
And sadly, we don't support some of the new hardware features.

199
0:15:56.920 --> 0:16:01.640
If you'd like to contribute, you are more than welcome.

200
0:16:01.640 --> 0:16:08.960
Vuxia by Google is a relatively new kit on the blog.

201
0:16:08.960 --> 0:16:15.080
It's a microkernel-based system that is strongly focusing on the Internet of Things, specifically

202
0:16:15.080 --> 0:16:24.200
their target is to support maintenance, remote management, and remote upgrading of a fleet

203
0:16:24.200 --> 0:16:25.920
of devices.

204
0:16:25.920 --> 0:16:34.600
So imagine, for example, the Google Nest Hub, which is the device where Vuxia is being shipped

205
0:16:34.600 --> 0:16:44.320
currently with, and they even managed to do a remote update of all those Nest Hubs from

206
0:16:44.320 --> 0:16:51.920
the previous Linux-based OS to Vuxia over the air without the users even noticing.

207
0:16:51.920 --> 0:16:56.480
So I think this is quite impressive.

208
0:16:56.480 --> 0:17:02.560
The microkernel is called Zercon, and it's capability-based message-passing microkernel.

209
0:17:02.560 --> 0:17:07.040
And I have spoken to the developers why they don't actually stress that it's a microkernel.

210
0:17:07.040 --> 0:17:14.200
And it's their deliberate choice to somehow underplay, understate that it's a microkernel,

211
0:17:14.200 --> 0:17:17.880
because of some bad press of the term.

212
0:17:17.880 --> 0:17:23.760
So they don't call it a microkernel explicitly, unless you ask them, but it is a microkernel

213
0:17:23.760 --> 0:17:27.560
for sure.

214
0:17:27.560 --> 0:17:34.480
This is how it looks like on the Nest Hub, or this is the way how you can tell whether

215
0:17:34.480 --> 0:17:39.840
your device is still running Linux or is running Vuxia.

216
0:17:39.840 --> 0:17:46.360
And yeah, the learning curve, again, somewhat steep, because this is not a desktop-oriented

217
0:17:46.360 --> 0:17:50.920
system or a server-oriented system that would be Unix-like.

218
0:17:50.920 --> 0:17:57.200
You have to install a non-trivial toolchain and a custom emulator, sort of like when you

219
0:17:57.200 --> 0:18:00.360
do Android development and other things.

220
0:18:00.360 --> 0:18:07.160
But again, what I believe is very nice about Vuxia, that they are only using their own

221
0:18:07.160 --> 0:18:12.120
native core components, not ported components.

222
0:18:12.120 --> 0:18:14.680
And it's an open source project.

223
0:18:14.680 --> 0:18:23.360
Managarb, again, relatively younger operating system, which is microkernel-based, at least

224
0:18:23.360 --> 0:18:27.000
compared to the first three.

225
0:18:27.000 --> 0:18:36.280
One of the key features, a fully asynchronous kernel design, which tries to somehow mitigate

226
0:18:36.280 --> 0:18:41.840
some performance problems by implementing some features in the kernel, which might not

227
0:18:41.840 --> 0:18:48.440
be considered pure by microkernel purists, like the page cache.

228
0:18:48.440 --> 0:18:57.520
And Managarb tries to be compatible with Linux, so they already support the Wayline Protocol

229
0:18:57.520 --> 0:19:02.840
in Western and some other applications.

230
0:19:02.840 --> 0:19:06.680
They even have some accelerated GPU drivers, or at least one.

231
0:19:06.680 --> 0:19:11.440
And it's an open source project, and this is how it looks like.

232
0:19:11.440 --> 0:19:18.080
Of course, you can run more than just the clock there, but yeah, you get the idea.

233
0:19:18.080 --> 0:19:25.520
Redux, another interesting microkernel-based operating system that tries to be Unix-like.

234
0:19:25.520 --> 0:19:33.200
But this one has this primary feature of being implemented almost completely in Rust.

235
0:19:33.200 --> 0:19:38.960
Also the core user-based components are written in Rust, like the libc.

236
0:19:38.960 --> 0:19:43.960
So they have actually a C library written in Rust.

237
0:19:43.960 --> 0:19:47.000
Interesting.

238
0:19:47.000 --> 0:19:48.000
What to say?

239
0:19:48.000 --> 0:19:56.960
Again, POSIX compatibility layer, they already support some interesting end-user applications

240
0:19:56.960 --> 0:20:02.040
and libraries, and it's an open source project again.

241
0:20:02.040 --> 0:20:04.360
And this is how it looks like when you boot it.

242
0:20:04.360 --> 0:20:16.120
So again, you can run a terminal with Bash, in this case, and just explore the system.

243
0:20:16.120 --> 0:20:21.720
A little bit aside, there are also other, let's say, currently non-open source microkernels

244
0:20:21.720 --> 0:20:22.720
being around.

245
0:20:22.720 --> 0:20:26.360
I just tried to mention them here very quickly.

246
0:20:26.360 --> 0:20:30.400
I know it was them, but just to complete the picture.

247
0:20:30.400 --> 0:20:37.200
So Huawei is working on something which they call HomeMonk.

248
0:20:37.200 --> 0:20:45.240
It's actually quite buried under this Harmony OS brand, and it's a little bit confusing

249
0:20:45.240 --> 0:20:51.920
because you might have heard rumors, the original ones, that Harmony OS will be a microkernel

250
0:20:51.920 --> 0:20:56.840
based system, then Huawei released something that was clearly Linux-based.

251
0:20:56.840 --> 0:21:03.600
So yeah, this did not resonate well with our technical folks.

252
0:21:03.600 --> 0:21:06.720
But the point is that this is just a marketing confusion.

253
0:21:06.720 --> 0:21:12.060
So Harmony OS is a common brand for different operating systems.

254
0:21:12.060 --> 0:21:13.400
One of them is Linux-based.

255
0:21:13.400 --> 0:21:17.640
One of them is LiteOS-based, which is a real-time kernel by Huawei.

256
0:21:17.640 --> 0:21:25.120
And the most progressive one unreleased so far is the microkernel-based.

257
0:21:25.120 --> 0:21:35.880
The microkernel was originally inspired by best practices and state-of-the-art in other

258
0:21:35.880 --> 0:21:41.560
micro kernels, but it's a clean slate implementation and design.

259
0:21:41.560 --> 0:21:47.920
For example, they have the capability-based physical memory management in user space,

260
0:21:47.920 --> 0:21:52.400
so the kernel does not manage the physical memory.

261
0:21:52.400 --> 0:21:59.600
It's sort of similar, the design is sort of similar to a CL4, but it's slightly more practical,

262
0:21:59.600 --> 0:22:01.080
in my personal opinion.

263
0:22:01.080 --> 0:22:05.080
Sorry that I can't go into the details.

264
0:22:05.080 --> 0:22:09.720
And they also target safety and security certification.

265
0:22:09.720 --> 0:22:15.800
And actually, this is also running in the wild as trusted execution environment in several

266
0:22:15.800 --> 0:22:18.080
Huawei smartphones.

267
0:22:18.080 --> 0:22:26.440
Then there is this R&D project called DAQ, which is primarily being driven by my former

268
0:22:26.440 --> 0:22:34.240
colleagues at the Dresden Research Center, which tries to be, again, a completely clean

269
0:22:34.240 --> 0:22:37.960
slate design and implementation.

270
0:22:37.960 --> 0:22:44.120
The primary goal was really to use state-of-the-art best practices and software engineering to

271
0:22:44.120 --> 0:22:48.120
achieve really the highest code quality and maintainability.

272
0:22:48.120 --> 0:22:53.240
For example, one of the goals was to be fully MSRAC compliant.

273
0:22:53.240 --> 0:23:03.440
Another goals were high-level safety and security certification and other interesting features.

274
0:23:03.440 --> 0:23:04.960
It's an R&D project.

275
0:23:04.960 --> 0:23:09.200
And honestly, I don't know what's the current state, maybe you can informally ask some of

276
0:23:09.200 --> 0:23:15.880
the Huawei guys here, but it's good to know that this is there.

277
0:23:15.880 --> 0:23:18.760
Very quickly, some other systems.

278
0:23:18.760 --> 0:23:28.480
BlueHort, for 30 years, the intended replacement of Linux in the GNU Linux equation, still alive,

279
0:23:28.480 --> 0:23:32.520
still kicking, still with semi-regular releases.

280
0:23:32.520 --> 0:23:38.080
And yeah, you can actually run 70% of the VM packages on top of it, which is not bad.

281
0:23:38.080 --> 0:23:44.560
Honestly, yes, it's limited to 32-bit x86.

282
0:23:44.560 --> 0:23:53.680
But I always say if they would get one-third, one-fourth of the Linux contributors, they

283
0:23:53.680 --> 0:23:57.360
would finish it in a few months.

284
0:23:57.360 --> 0:24:04.520
ARS, which is a microkernel-based operating system based on the Helios microkernel, which

285
0:24:04.520 --> 0:24:10.520
is supposedly inspired by a CL4.

286
0:24:10.520 --> 0:24:18.240
There will be a talk later today from the author, so I'll skip the details for now.

287
0:24:18.240 --> 0:24:25.080
Composite, another microkernel-based project that is focusing on predictability and component

288
0:24:25.080 --> 0:24:27.120
composition.

289
0:24:27.120 --> 0:24:37.600
The kernel itself is designed as lockless, and it has user space scheduling, and it uses

290
0:24:37.600 --> 0:24:39.120
thread migration IPC.

291
0:24:39.120 --> 0:24:48.040
So if you remember vaguely the idea from Mac 3.0 from Fort Tor, this is the continuation

292
0:24:48.040 --> 0:24:49.840
of that.

293
0:24:49.840 --> 0:24:58.080
And there is UXRT, which is like a user space part built on top of a CL4.

294
0:24:58.080 --> 0:25:04.560
This is still an ongoing project in early stages of the development.

295
0:25:04.560 --> 0:25:07.320
Let's see how it goes.

296
0:25:07.320 --> 0:25:10.840
And finally, let's mention a few standard micro kernels.

297
0:25:10.840 --> 0:25:13.840
So these are not entire operating systems.

298
0:25:13.840 --> 0:25:16.520
These are just the kernel building blocks.

299
0:25:16.520 --> 0:25:23.360
Nova, micro-hypervisor by Udo, is again alive and kicking.

300
0:25:23.360 --> 0:25:29.160
It has been used by bedrock systems as their primary product, as I believe.

301
0:25:29.160 --> 0:25:34.560
So this is one of the projects that sort of went into limbo for many years, and now they

302
0:25:34.560 --> 0:25:37.080
are alive again.

303
0:25:37.080 --> 0:25:43.640
By the way, G-node, I believe, is maintaining their fork of Nova, or maybe Nova with their

304
0:25:43.640 --> 0:25:45.120
own patches.

305
0:25:45.120 --> 0:25:52.360
But there is also HEDRON, which is an official fork of Nova from Cybers, and they are also

306
0:25:52.360 --> 0:25:55.600
using it as their commercial product.

307
0:25:55.600 --> 0:26:03.040
Again, I think there might be Yulian somewhere here who might tell you more.

308
0:26:03.040 --> 0:26:10.040
As CL4, of course, the microkernel with the most, I would say, the most visible formal

309
0:26:10.040 --> 0:26:11.560
verification story.

310
0:26:11.560 --> 0:26:13.520
We need to mention it.

311
0:26:13.520 --> 0:26:27.520
We also need to say that Google has adopted a CL4 recently as their foundation for secure

312
0:26:27.520 --> 0:26:32.040
firmware sort of something like that.

313
0:26:32.040 --> 0:26:41.600
I'm not really sure what are the targets of this cantrip OS, also as Kata OS, but it's

314
0:26:41.600 --> 0:26:43.440
a static configuration mostly.

315
0:26:43.440 --> 0:26:48.160
So it's not a dynamic system, it's a static configuration system.

316
0:26:48.160 --> 0:26:54.920
And in that same area, I would mention also the MOOAN separation kernel, which again is

317
0:26:54.920 --> 0:27:02.120
a separation kernel, so its primary goal is to do static partitioning, but I think it

318
0:27:02.120 --> 0:27:06.280
belongs to the family.

319
0:27:06.280 --> 0:27:12.560
And yeah, sadly there are some microkernels that are interesting, worth looking into for

320
0:27:12.560 --> 0:27:20.600
inspiration, but are currently in limbo, like Escape and three, Linux 3, Herbigalia and Redleaf.

321
0:27:20.600 --> 0:27:23.080
I hope they will be resurrected.

322
0:27:23.080 --> 0:27:29.040
And of course, I might continue with a list of other microkernels that are certifiably

323
0:27:29.040 --> 0:27:30.040
dead.

324
0:27:30.040 --> 0:27:35.840
And of course, those could be resurrected as well, and it's always good to know the

325
0:27:35.840 --> 0:27:37.240
history, right?

326
0:27:37.240 --> 0:27:40.520
Yeah, but I will stop here.

327
0:27:40.520 --> 0:27:41.520
Thank you.

328
0:27:41.520 --> 0:27:43.480
If you have any questions, I would be happy to answer them.

329
0:27:43.480 --> 0:27:45.480
Right, thank you so much, Marty.

330
0:27:45.480 --> 0:27:49.480
If there are, yeah, please.

331
0:27:49.480 --> 0:27:56.040
We have time, yeah, two questions, two questions.

332
0:27:56.040 --> 0:27:59.600
Hello, congratulations for your excellent talk.

333
0:27:59.600 --> 0:28:01.640
Thank you.

334
0:28:01.640 --> 0:28:07.760
Among all those that you studied, which one you think would be more compatible to the

335
0:28:07.760 --> 0:28:13.080
Linux end user base, like for a person to use Linux?

336
0:28:13.080 --> 0:28:18.840
I mean, that is a good question.

337
0:28:18.840 --> 0:28:19.840
Thank you.

338
0:28:19.840 --> 0:28:24.600
So the question is which of those systems would be most Linux compatible?

339
0:28:24.600 --> 0:28:29.880
Most of them actually, most of the systems that I have presented do have some POSIX compatibility

340
0:28:29.880 --> 0:28:30.880
layer.

341
0:28:30.880 --> 0:28:35.400
So I would not make this as the only criterion.

342
0:28:35.400 --> 0:28:40.880
I understand it might be important for you, but I would look also into other aspects of

343
0:28:40.880 --> 0:28:47.720
that, because most of the systems do provide some kind of Linux compatibility.

344
0:28:47.720 --> 0:28:53.720
But if you would be looking for something that is really Linux compatible by design,

345
0:28:53.720 --> 0:29:00.280
or that makes it as one of its primary goals, then I would probably go for Managar.

346
0:29:00.280 --> 0:29:07.440
But again, this is just a first idea, first suggestion.

347
0:29:07.440 --> 0:29:10.840
I would not rule out the others.

348
0:29:10.840 --> 0:29:11.840
Thank you.

349
0:29:11.840 --> 0:29:13.840
Any other questions?

350
0:29:13.840 --> 0:29:14.840
Alex.

351
0:29:14.840 --> 0:29:15.840
Hi.

352
0:29:15.840 --> 0:29:20.080
Thank you for the talk.

353
0:29:20.080 --> 0:29:25.040
So what trends do you think you'll see in the next few years with the microcovid?

354
0:29:25.040 --> 0:29:26.960
That's a tricky question, but thanks for that.

355
0:29:26.960 --> 0:29:29.720
So the question was about the trends.

356
0:29:29.720 --> 0:29:40.200
So I think there will be this kind of retargeting of the systems to very specific use cases,

357
0:29:40.200 --> 0:29:41.880
like Fuxia is doing.

358
0:29:41.880 --> 0:29:51.760
So really implementing custom microcovid-based operating systems that really do fulfill the

359
0:29:51.760 --> 0:29:55.400
specific needs of those areas.

360
0:29:55.400 --> 0:29:56.400
That's one thing.

361
0:29:56.400 --> 0:30:01.200
The other thing that I would like to see, I'm not sure if it's going to happen soon,

362
0:30:01.200 --> 0:30:05.780
but I would like to see more hardware-software co-design.

363
0:30:05.780 --> 0:30:14.000
So basically, the actual appeal of microc terminals is the fact that most current CPUs don't

364
0:30:14.000 --> 0:30:19.160
really provide hardware features that would help the microc terminals, especially in the

365
0:30:19.160 --> 0:30:20.880
terms of performance.

366
0:30:20.880 --> 0:30:23.440
And we see this vicious cycle.

367
0:30:23.440 --> 0:30:30.480
The microc terminals are not performing greatly on the current hardware, so nobody is using

368
0:30:30.480 --> 0:30:31.600
them.

369
0:30:31.600 --> 0:30:40.040
So the hardware vendors don't see a need for changing the CPUs to provide features that

370
0:30:40.040 --> 0:30:42.800
would help the microc terminals.

371
0:30:42.800 --> 0:30:48.800
But I think with RISC-V and the democratization of the hardware design, I think this might

372
0:30:48.800 --> 0:30:51.640
change, hopefully, quite soon.

373
0:30:51.640 --> 0:30:58.200
The third trend that I definitely see, which was probably also seen on the slides, is really

374
0:30:58.200 --> 0:31:03.960
the certifications in terms of safety, security, and hopefully more for more verification,

375
0:31:03.960 --> 0:31:06.520
because this is where microc terminals really excel.

376
0:31:06.520 --> 0:31:09.360
So why not go for it?

377
0:31:09.360 --> 0:31:10.360
Okay.

378
0:31:10.360 --> 0:31:12.080
Thank you so much, Martin.

379
0:31:12.080 --> 0:31:22.040
Thank you.


WEBVTT

00:00.000 --> 00:14.000
I'm going to talk to you today about machine OS.

00:14.000 --> 00:33.000
US, we've been working on for a couple of years and its design points are focused on appliances for data centers, lights out, hands off environments.

00:33.000 --> 00:55.000
Over a year or so ago, we presented at the Clinic Security Summit with some details about securing secrets into PIMS for data center devices with some of the information about how we are going to keep those secrets fit in these environments.

00:55.000 --> 01:19.000
Key pieces that we've incorporated from that design discussion on machine OS focus on use of security platform and the TPM2 device that we need to guard a unique identity and key piece that would be placed into a TPM that we use for identity and device authenticity.

01:19.000 --> 01:34.000
And further, the operating system may be able to extract the TPM secrets if we have security booted all the way up to kernel user heads and that the change for us is still verified.

01:34.000 --> 01:56.000
It ensures that we are the device, all the device we expect and the one software we expect as well before we can access these secrets. We also include support for unencrypted storage for access to data protection and incorporating continuous updates.

01:56.000 --> 02:15.000
Your trust for machine OS is a certificate that an associated key pair, which we protected in TPM hardware. The certificate holds a product, ID and serial number that binds it to the physical system that we are using it.

02:15.000 --> 02:41.000
And then, the certificate key pair in TPM, those are inserted at manufacturing time and then the certificate will give us a new identity to verify that the device is authentic and that we will be running the software that we accept the product expects and that it hasn't been tampered with.

02:41.000 --> 02:51.000
At the run time of the box frame, for the last, we start with our device for TPM.

10:41.000 --> 11:06.000
Thank you.

11:11.000 --> 11:21.020
That protects us from the unusual expectant

11:21.020 --> 11:25.020
of the current checks.

11:25.020 --> 11:29.020
We've loaded and we're executing sort of a normal view of how the kernel comes up.

11:29.020 --> 11:33.020
We'll transition into the loaded end of our MFSes startup

11:33.020 --> 11:37.020
and then we get into where the machine OS creates the line.

11:37.020 --> 11:43.020
We're going to unlock the storage to pull out our EA policies

11:43.020 --> 11:49.020
that's loaded into the TPM and we need to access the registers to make sure that the values

11:49.020 --> 11:53.020
in these registers are what we expect.

11:53.020 --> 11:58.020
If they're not for them, we help the system run off on the board for something that's been modified

11:58.020 --> 12:05.020
and we don't have access to any of the secrets in the TPM that we've locked away.

12:05.020 --> 12:09.020
On success though, we can load our little trust keys and certs

12:09.020 --> 12:14.020
which pass phrases that are protected in the TPM, loaded into the key

12:14.020 --> 12:18.020
and used for only by the root.

12:18.020 --> 12:24.020
And then once we have attracted that information, we extend the HCR7 with a rolling measurement

12:24.020 --> 12:33.020
which will protect further access to the TPM from any of the runtime services.

12:33.020 --> 12:40.020
Before we start the containers of the runtime service, we brought along that we have to go through steps

12:40.020 --> 12:48.020
to ensure that the images that were included on the system match the product

12:48.020 --> 12:50.020
and the product's expectations.

12:50.020 --> 12:59.020
And these will have been signed by the product certificates to verify certificates, signatures

12:59.020 --> 13:02.020
and that all winds up going so we'll go ahead and activate those.

13:02.020 --> 13:10.020
So for each of the OCI images in the manifest, those will be mounted up and then the services can be started.

13:10.020 --> 13:16.020
We also option to give this into a particular OCI that we call the Obstacles

13:16.020 --> 13:19.020
and it's also across the environment.

13:19.020 --> 13:27.020
That's what we're perfectly fine running just out of the area.

13:27.020 --> 13:34.020
So for the OCI, we want to ensure that the image is stored, haven't been modeled

13:34.020 --> 13:41.020
and the way we do that is the standard builds as a squash effect for all the layers in the OCI

13:41.020 --> 13:44.020
which is a read-only file system that is mounted.

13:44.020 --> 13:50.020
In addition to the squash-effect layer, those setting images have very much issues that were calculated and built up

13:50.020 --> 13:58.020
and with that we can build a game-threatening block device in Linux which on access as we read

13:58.020 --> 14:05.020
the first time we accessed that block device, the kernel will do the work of patching and then communicating

14:05.020 --> 14:11.020
evaluating whether that block is valid or it's been tampered with.

14:11.020 --> 14:17.020
In the case of tampered with, then the IO for reading will fail, it can't just stop the system to be rebooted,

14:17.020 --> 14:20.020
we won't move further on the system.

14:20.020 --> 14:27.020
For more details, later today one of my colleagues Scott Moser will be in the containment's dev room at 1405

14:27.020 --> 14:30.020
talking more about this in depth.

14:30.020 --> 14:35.020
Please go see him later.

14:35.020 --> 14:43.020
For our updates, we have continuous updates as we can sync from our image repository

14:43.020 --> 14:47.020
and an update is much like what we do when we reboot up.

14:47.020 --> 14:53.020
We have to go through the same sort of verification of signatures such that we know that this is the software

14:53.020 --> 15:00.020
that's expected for the device that we're running on and that all of the layers that we pulled out have been signed correctly.

15:00.020 --> 15:04.020
Once we've applied that, we can update our configuration database,

15:04.020 --> 15:09.020
that point to those versions for currently executing containers, we can simply restart them,

15:09.020 --> 15:21.020
but if we have changes to reboot RFS or UKI, we'll need to reboot the system so that we can execute those versions.

15:21.020 --> 15:30.020
Lastly, for offline protection or other prevention of maybe that is sort of an excellent town or a zero day turnover kernel,

15:30.020 --> 15:40.020
we need to talk about verification and wait until the rest of the verification...

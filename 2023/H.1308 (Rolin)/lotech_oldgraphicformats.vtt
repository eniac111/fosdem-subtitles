WEBVTT

00:00.000 --> 00:05.860
Welcome back to Gen

00:05.860 --> 00:12.180
A

00:12.180 --> 00:14.360
computer

00:14.360 --> 00:17.080
to be disconnected from the machine.

00:40.200 --> 00:42.760
Hello, my name is Paris

00:42.760 --> 00:48.440
and my talk is about supporting old proprietary graphic formats.

00:48.440 --> 00:54.280
Specifically, we're going to be talking about the WMF and the EMF formats from Windows.

00:55.960 --> 01:03.080
So what is a WMF? And this also applies to the EMFs, but the WMF is a Windows meta file.

01:03.080 --> 01:08.840
It is a graphics format that supports vector and raster operations, mostly vector.

01:08.840 --> 01:12.920
It was introduced in the early 1990s in comparison.

01:12.920 --> 01:18.120
A different vector format like the SVG was released in 2001.

01:18.120 --> 01:23.720
It is composed of a set of GDI drawing commands and structures.

01:23.720 --> 01:32.120
These drawing commands are played back in order to render the graphic within what is known as the playback device context.

01:32.120 --> 01:35.720
And it is not as widely supported as SVGs.

01:35.720 --> 01:43.400
Essentially, this means that you can code this format into existence by writing some GDI functions.

01:45.400 --> 01:48.520
What are the difficulties in supporting this format?

01:48.520 --> 01:53.960
So the WMF files are application and device dependent.

01:53.960 --> 01:59.240
The EMF files later that were later introduced try to solve this issue,

01:59.240 --> 02:04.760
but the WMF files are more difficult in that way.

02:04.760 --> 02:09.720
The device context that is associated with a WMF file cannot be queried.

02:09.720 --> 02:15.320
That is, an application cannot retrieve the device resolution data, font metrics and so on.

02:15.320 --> 02:21.240
So if you made a WMF file for a specific device, you cannot really know.

02:21.240 --> 02:27.960
If you try to render on a different device, you don't really know the device it was built for.

02:27.960 --> 02:32.440
There is a format specification for this, but a lot of things are missing.

02:32.440 --> 02:36.760
And there are some edge cases with undefined behavior.

02:36.760 --> 02:41.880
And pinpointing the root cause of a buggy file can be tricky.

02:41.880 --> 02:45.320
So how do you debug a WMF? Well, there's a lot of ways.

02:45.320 --> 02:50.920
I'm going to present the way that I do it, usually.

02:50.920 --> 02:54.600
So you would want to get the drawing commands, the GDI drawing commands.

02:54.600 --> 02:57.880
And there are multiple ways of doing so more than I listed.

02:57.880 --> 03:02.840
One is MSO dumper. It is created and used by LibreOffice developers.

03:02.840 --> 03:05.560
And it dumps the drawing commands.

03:05.560 --> 03:07.800
Another one is the Metafile Explorer.

03:08.760 --> 03:12.680
It allows for viewing and stepping through the drawing commands.

03:12.680 --> 03:15.880
So you can easily understand which command does what.

03:16.520 --> 03:21.320
And then there is the enum Metafile GDI function, which is defined in the GDI header,

03:22.120 --> 03:25.320
which allows to enumerate the drawing commands in WMF file

03:25.320 --> 03:29.960
and call a callback function. A similar function also exists for EMF files.

03:31.640 --> 03:34.280
This is an example of an EMF drawing command.

03:34.280 --> 03:36.840
WMF drawing commands look very similar, of course.

03:36.840 --> 03:39.400
This is the function signature. It takes some parameters.

03:39.960 --> 03:43.480
And this is what the record looks within the file

03:44.280 --> 03:47.160
if you open it in the aforementioned debugger.

03:48.040 --> 03:51.480
So it's very similar to the function signature itself.

03:51.480 --> 03:57.240
So after you obtain the drawing commands, you want to debug.

03:59.160 --> 04:03.880
Because WMF is such a platform-dependent graphic format,

04:04.520 --> 04:09.000
sometimes it's good to compare with other WMF reader implementations,

04:09.800 --> 04:18.760
like PowerPoint, to understand exactly what the graphic looks like in other implementations.

04:18.760 --> 04:24.520
Then you would want to identify which drawing commands cause the bug.

04:25.160 --> 04:27.800
You would, you know, the drawing commands that you obtained,

04:27.800 --> 04:33.320
you would step through them and try to pinpoint what exactly causes the bug.

04:35.160 --> 04:39.320
It is important to also reduce the relevant commands as much as possible.

04:40.040 --> 04:43.480
WMF files can contain thousands of drawing commands,

04:43.480 --> 04:47.000
and stepping through all of them is very tricky.

04:47.000 --> 04:50.760
So, for example, a way to do this is to simplify the problematic file

04:50.760 --> 04:54.920
or make a new one that reproduces the bug in LibreOffice.

04:55.720 --> 04:59.960
And then you work around these buggy commands to find out what is wrong.

05:01.560 --> 05:03.480
Easier said than done, but yeah.

05:05.480 --> 05:08.840
Finally, you want to make sure you didn't break something.

05:09.720 --> 05:12.440
It is good to create a unit test for your fix using

05:12.440 --> 05:15.160
the minimally reproducible example you created before.

05:15.160 --> 05:18.920
You run the appropriate test suits, you probably broke something,

05:18.920 --> 05:23.880
so you go back to step one, and then you confirm that round-tripping works as expected.

05:24.520 --> 05:29.640
And then you also, I should mention, monitor the WMF file to,

05:30.200 --> 05:34.200
the fix you made for the WMF file to make sure it doesn't break something in the future.

05:34.200 --> 05:44.200
And that is all. Thank you.

1
0:00:00.000 --> 0:00:15.260
Okay, hello, I'm Gabo Telleman from Allotopia, Bienvillea, and I would like to talk about

2
0:00:15.260 --> 0:00:20.360
how we do crash testing in the backyard.

3
0:00:20.360 --> 0:00:23.800
So let's start.

4
0:00:23.800 --> 0:00:26.240
What is even this crash testing?

5
0:00:26.240 --> 0:00:34.760
Crash testing is a QA sub-project of TDF and it runs on the master branch around every

6
0:00:34.760 --> 0:00:36.780
second week.

7
0:00:36.780 --> 0:00:40.120
So what is this testing?

8
0:00:40.120 --> 0:00:48.960
It's testing continuously opening files, saving them in different formats, and reopening of

9
0:00:48.960 --> 0:00:51.480
those saved files.

10
0:00:51.480 --> 0:00:59.400
And make sure that crashes during this workflow don't happen because that's kind of bad for

11
0:00:59.400 --> 0:01:03.040
user perspective.

12
0:01:03.040 --> 0:01:10.360
And usually this process sends a resulting mail to the developers list and interested

13
0:01:10.360 --> 0:01:17.880
parties like Mosley Kowlan fix those crashes.

14
0:01:17.880 --> 0:01:27.360
And that's good on master branch, but what if the long-term support branches, which we

15
0:01:27.360 --> 0:01:31.880
maintain for customers, introduce such errors?

16
0:01:31.880 --> 0:01:34.760
That would be kind of bad for customers.

17
0:01:34.760 --> 0:01:40.640
So we wanted to avoid that in the longer run.

18
0:01:40.640 --> 0:01:42.640
Okay.

19
0:01:42.640 --> 0:01:49.360
So what are the prerequisites for this work?

20
0:01:49.360 --> 0:01:55.480
You need first some hardware, a beefy system with many CPU threads because there is a lot

21
0:01:55.480 --> 0:01:58.760
of files to test.

22
0:01:58.760 --> 0:02:06.280
And of course, a bunch of files, tens of thousands.

23
0:02:06.280 --> 0:02:11.880
And this can be downloaded using scripts in the core repository.

24
0:02:11.880 --> 0:02:16.600
Then you need the crash testing scripts themselves.

25
0:02:16.600 --> 0:02:25.120
You need to download them and on the beefy system, configure them to build LibreOffice,

26
0:02:25.120 --> 0:02:33.520
run them on the set of files you have first downloaded and also interpret the results.

27
0:02:33.520 --> 0:02:39.200
So this is how the beefy system looks in real life.

28
0:02:39.200 --> 0:02:44.760
It's nothing entirely in the backyard, but on the couch, let's say.

29
0:02:44.760 --> 0:02:57.960
It was only some 40 CPUs or so and a lot of disk space as well.

30
0:02:57.960 --> 0:03:05.760
Next second step is downloading files.

31
0:03:05.760 --> 0:03:10.440
First script is called like this in the core repository.

32
0:03:10.440 --> 0:03:17.160
And this makes, is downloads user made file attachments from public backtrack cars such

33
0:03:17.160 --> 0:03:25.440
as TDF and Apache OpenOffice, backzilla, Linux distribution, backtrack cars and other software

34
0:03:25.440 --> 0:03:31.960
backtrack cars such as KOffice, GNumeric and Abi word.

35
0:03:31.960 --> 0:03:39.760
And it has some lovely or less lovely on user friendly properties such as you need to install

36
0:03:39.760 --> 0:03:49.920
some extra Python modules and set an environment variable to tailor for your hardware so that

37
0:03:49.920 --> 0:03:53.400
the download happens quite quickly.

38
0:03:53.400 --> 0:03:58.840
And you need to run it from the target directory.

39
0:03:58.840 --> 0:04:03.800
That's all that gave it at this script.

40
0:04:03.800 --> 0:04:09.880
Next second script is our website scraper code like this.

41
0:04:09.880 --> 0:04:12.440
It needs also some Python modules.

42
0:04:12.440 --> 0:04:20.640
You can add the target directory as parameter and some Microsoft Office themed forums will

43
0:04:20.640 --> 0:04:27.400
need registration before this can work on them and login data needs to be stored in

44
0:04:27.400 --> 0:04:30.520
a format file.

45
0:04:30.520 --> 0:04:35.680
Next getting the crash testing scripts themselves.

46
0:04:35.680 --> 0:04:43.440
It's not in the core repository but this other country dev tools repository and in the test

47
0:04:43.440 --> 0:04:46.560
backzilla files directory.

48
0:04:46.560 --> 0:04:51.560
So how to make sense of that?

49
0:04:51.560 --> 0:04:58.320
In the environment is also very important and this is the most difficult part of this

50
0:04:58.320 --> 0:05:01.080
talk.

51
0:05:01.080 --> 0:05:08.800
So before you start running the scripts you need to confirm the environment with this

52
0:05:08.800 --> 0:05:10.480
config file.

53
0:05:10.480 --> 0:05:18.480
It needs to be placed on that path.

54
0:05:18.480 --> 0:05:27.760
There are some defaults in the dev tools repository but you should override those.

55
0:05:27.760 --> 0:05:35.600
The most important settings are this compiler.

56
0:05:35.600 --> 0:05:46.200
The compiler version GCC or Clang works the same in this regard but you just need to take

57
0:05:46.200 --> 0:05:55.960
care that the old version of LibreOffice you want to compile actually compiles with your

58
0:05:55.960 --> 0:05:57.800
compiler.

59
0:05:57.800 --> 0:06:03.520
You need to set the parallelism how many CPU threads you have.

60
0:06:03.520 --> 0:06:11.760
It's with workers environment variable and the most important thing is the path for this

61
0:06:11.760 --> 0:06:14.760
script.

62
0:06:14.760 --> 0:06:24.800
So we need the location of the files to test which were downloaded by the two scripts two

63
0:06:24.800 --> 0:06:35.040
slides ago and after that you need to hardcode the dev tools repository path with this TT

64
0:06:35.040 --> 0:06:45.880
pass and next is source therefore the LibreOffice core repository clone which you also need to

65
0:06:45.880 --> 0:06:57.280
compile and you need a build directory where the output of the compilation will go.

66
0:06:57.280 --> 0:07:03.200
So in the build directory you need also place the autogen input file.

67
0:07:03.200 --> 0:07:13.120
It's also in the dev tools repository.

68
0:07:13.120 --> 0:07:19.480
Of course you don't want to send the casual email and upload the results to the DDF site

69
0:07:19.480 --> 0:07:27.600
because it's internal for the company so you need to set these two other two last variables.

70
0:07:27.600 --> 0:07:39.880
Okay next it's easy there is a crash test data variable for the downloaded files.

71
0:07:39.880 --> 0:07:49.600
You need to copy your files there and execute the command share script which will do all

72
0:07:49.600 --> 0:07:58.800
the heavy lifting and basically that's all.

73
0:07:58.800 --> 0:08:09.520
These are the crash test data directory under logs and the mere TXT file will be the summary

74
0:08:09.520 --> 0:08:12.360
of the run.

75
0:08:12.360 --> 0:08:20.940
Next step is finding what went wrong and fix the actual crashes which is just casual back

76
0:08:20.940 --> 0:08:25.280
porting back fixing.

77
0:08:25.280 --> 0:08:35.040
So what were what are gains of upstream from this work?

78
0:08:35.040 --> 0:08:37.000
There are some.

79
0:08:37.000 --> 0:08:43.360
I made these scripts a lot more configurable so you can set them up more easily for other

80
0:08:43.360 --> 0:08:46.120
companies.

81
0:08:46.120 --> 0:08:58.080
Before that it was it was only fixed only able to run on the DDF server and it was a

82
0:08:58.080 --> 0:09:03.040
kind of a pain to transplant it to another machine.

83
0:09:03.040 --> 0:09:08.880
There was a little bit of performance gain there was a bottleneck and upstream also can

84
0:09:08.880 --> 0:09:13.800
run this and this work more quickly.

85
0:09:13.800 --> 0:09:16.840
And that's all.

86
0:09:16.840 --> 0:09:33.280
Thanks for the attention.


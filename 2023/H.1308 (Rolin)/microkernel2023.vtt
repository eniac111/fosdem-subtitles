WEBVTT

00:00.000 --> 00:08.360
All righty.

00:08.360 --> 00:09.360
So hi, everyone.

00:09.360 --> 00:10.360
I'm Razvan.

00:10.360 --> 00:17.600
We are now part of the microkernel component as a component-based OS dev room.

00:17.600 --> 00:19.300
It's a pleasure to have you all here.

00:19.300 --> 00:20.500
We're going to start right away.

00:20.500 --> 00:22.620
So we have, I think, 10 talks.

00:22.620 --> 00:27.540
We're going to delve into microkernel, UNICOL, and component-based OS topics.

00:27.540 --> 00:31.640
We're going to start with Martin, with his talk on the state of the microkernel environment.

00:31.640 --> 00:33.000
So Martin, please go ahead.

00:33.000 --> 00:34.000
Thank you.

00:34.000 --> 00:35.160
Good morning.

00:35.160 --> 00:36.160
Thanks for coming.

00:36.160 --> 00:37.160
Welcome.

00:37.160 --> 00:43.000
It's my pleasure and honor to open this dev room today.

00:43.000 --> 00:48.180
And it's also a great pleasure that we can continue this tradition of this dev room since

00:48.180 --> 00:49.560
2012.

00:49.560 --> 00:54.080
I would like to thank Razvan for organizing the dev room this year.

00:54.080 --> 00:55.920
And let's go to it.

00:55.920 --> 01:04.000
So my talk will be about the currently developed micro kernels that I'm aware of.

01:04.000 --> 01:05.520
Maybe I'm missing some.

01:05.520 --> 01:08.040
But this should be like an overview.

01:08.040 --> 01:14.800
If you might be interested in seriously using a microkernel or just trying it out, what

01:14.800 --> 01:16.840
you can expect.

01:16.840 --> 01:19.360
This first slide is about me.

01:19.360 --> 01:21.160
I won't go into it.

01:21.160 --> 01:26.960
Let me just say that I have been working with micro kernels and contributing to micro kernels

01:26.960 --> 01:32.360
for almost 20 years now, half of my lifetime.

01:32.360 --> 01:38.920
I assume that most people here do know what a microkernel is, or at least most people

01:38.920 --> 01:41.440
have some kind of idea.

01:41.440 --> 01:48.760
But I will still try to very briefly introduce the micro kernels to you.

01:48.760 --> 01:53.560
Maybe I will save a few minutes for the follow up speakers.

01:53.560 --> 01:59.560
So a microkernel based operating system is a fundamental way how to achieve operating

01:59.560 --> 02:03.500
system reliability and dependability.

02:03.500 --> 02:11.520
By the means of having purpose of the architecture, especially driven by specific design principles.

02:11.520 --> 02:15.980
Now every microkernel has their own design principles.

02:15.980 --> 02:19.680
This is where the different implementations differ, obviously.

02:19.680 --> 02:26.980
But I think there are three common universal design principles, the separation of concerns,

02:26.980 --> 02:32.760
the split of mechanism and policy, and the principle of least privilege.

02:32.760 --> 02:40.360
So this generally results in a system that is modular, customizable, and verifiable,

02:40.360 --> 02:43.280
potentially formally verifiable.

02:43.280 --> 02:50.840
By the way, some micro kernels do have a minimality as an explicit design principle,

02:50.840 --> 02:53.300
but many micro kernels actually don't.

02:53.300 --> 02:58.600
So the micro part in the microkernel and the whole microkernel term is a little bit of

02:58.600 --> 03:01.840
a misnomer, at least as I see it.

03:01.840 --> 03:05.760
Because having the microkernel as small as possible is not necessary.

03:05.760 --> 03:09.900
The a priori goal is just the result of the other design principles.

03:09.900 --> 03:14.400
And I really think that there is no point in comparing whether one microkernel might

03:14.400 --> 03:19.720
have 20,000 lines of code and the other one, 30,000, it's really comparing the post to

03:19.720 --> 03:21.760
oranges.

03:21.760 --> 03:26.800
These design principles also don't affect just the kernel design, but potentially also

03:26.800 --> 03:28.960
the user space design.

03:28.960 --> 03:35.720
So therefore you might see descriptions like microkernel multi-server operating system

03:35.720 --> 03:38.240
with fine-grained components.

03:38.240 --> 03:44.720
This means that not only the kernel is non-monolithic, maybe that would be a better term, but we

03:44.720 --> 03:52.080
are stuck with the microkernel term, but also this might suggest that in many of these systems

03:52.080 --> 03:57.200
also there are no monoliths in the user space.

03:57.200 --> 03:59.880
I have some slides about the history, but I will skip them.

03:59.880 --> 04:02.360
You can go to the slides if you are interested.

04:02.360 --> 04:10.600
Just one note, the idea of micro kernels has been around almost as long as the idea of

04:10.600 --> 04:12.000
operating systems.

04:12.000 --> 04:20.520
So if some people say that micro kernels are strange, are they strange over engineered

04:20.520 --> 04:27.280
idea that proper operating systems should be monolithic because this was the way how

04:27.280 --> 04:34.240
they started and et cetera, I don't think those are very valid arguments.

04:34.240 --> 04:36.920
So let's go to the core of my talk.

04:36.920 --> 04:43.480
There is a website, microkernel.info, which is basically a condensed version of this.

04:43.480 --> 04:52.360
So this is a very simple site that lists the current state of the art open source micro

04:52.360 --> 04:53.320
kernels.

04:53.320 --> 05:00.920
So if you are interested or if you are looking around, going to this site is probably a good

05:00.920 --> 05:01.920
idea.

05:01.920 --> 05:06.320
By the way, this site was started by Yakub Mirmash, my colleague, and I'm maintaining it right

05:06.320 --> 05:07.320
now.

05:07.320 --> 05:12.840
Of course, if you are a microkernel developer and you don't see your project on this site,

05:12.840 --> 05:15.360
just send us a pull request.

05:15.360 --> 05:17.440
It's so simple.

05:17.440 --> 05:20.480
Okay, let's start with the overview.

05:20.480 --> 05:30.880
I should say that there are surprisingly many projects, active projects that are microkernel

05:30.880 --> 05:33.400
based.

05:33.400 --> 05:39.080
And for a microkernel developer, this is really exciting times, I would say.

05:39.080 --> 05:49.920
So Gnode by Gnode Labs is perhaps the most versatile example of a microkernel based operating

05:49.920 --> 05:56.120
system, but I mind you, it's actually not an operating system in the common sense, like

05:56.120 --> 05:59.360
you would consider Windows or a GNU Linux distribution.

05:59.360 --> 06:02.840
It's actually an operating system construction kit.

06:02.840 --> 06:11.320
So it's a way how to pick and match different operating system components, including different

06:11.320 --> 06:20.320
micro kernels or kernels in general, with some user space components and how to build

06:20.320 --> 06:25.200
a bespoke operating system for your specific needs.

06:25.200 --> 06:29.840
So what is really interesting about Gnode that you can really use all these different

06:29.840 --> 06:38.560
micro kernels like SCL4, Fiasco OC, micro hypervisors like Nova, and you can even use their own

06:38.560 --> 06:46.800
custom microkernel, which is called base-HW, or you can even run this infrastructure onto

06:46.800 --> 06:50.520
both Linux for development purposes maybe.

06:50.520 --> 06:57.800
There is strong focus on resource accounting and management in Gnode.

06:57.800 --> 07:01.960
You can read the Gnode book for the details.

07:01.960 --> 07:08.320
Gnode is driven by a commercial company, so they have customers, somebody is paying them

07:08.320 --> 07:10.040
to do that.

07:10.040 --> 07:13.880
They don't state their references publicly, as far as I know.

07:13.880 --> 07:18.400
I might know some, but I'm not in the liberty to name them.

07:18.400 --> 07:24.680
And there is also this thing called Scalp OS, which is like a pre-built distribution of

07:24.680 --> 07:25.680
Gnode.

07:25.680 --> 07:33.080
So if you would like to try something that you don't have to pre-configure in advance

07:33.080 --> 07:39.040
for your specific needs, you can go for that.

07:39.040 --> 07:48.040
This is a picture from Norman Feske, one of the co-authors of Gnode from, I think, FOSDAM

07:48.040 --> 07:49.560
2017.

07:49.560 --> 07:55.560
So maybe the image is a little bit outdated, but I still think it gives you the big picture.

07:55.560 --> 08:02.920
So you have all these components like different kernels, different user space, runtime environments,

08:02.920 --> 08:04.040
if I can say.

08:04.040 --> 08:11.960
So this one is, for example, Unix-like runtime environment, drivers and UI components and

08:11.960 --> 08:13.480
stuff like that.

08:13.480 --> 08:16.680
And you mix and match them.

08:16.680 --> 08:25.200
And then this is a screenshot of the Scalp OS, so like this one instantiation of Gnode.

08:25.200 --> 08:34.600
And you see that it's actually a nice desktop-oriented operating system.

08:34.600 --> 08:37.680
Some final closing remarks to Gnode.

08:37.680 --> 08:47.000
I really like Base-HW, as the bespoke microkernel for Gnode, because it's really nicely integrated

08:47.000 --> 08:49.640
with the rest of the system.

08:49.640 --> 08:55.480
For some reason that I don't know, I don't understand, but there are Gnode guys here,

08:55.480 --> 08:57.160
you can ask them.

08:57.160 --> 09:03.280
I don't see complete feature parity of Base-HW with the other microkernel's support.

09:03.280 --> 09:09.240
So as far as I know, there is no support for hardware virtualization.

09:09.240 --> 09:14.100
And this is not a criticism, this is just a comment.

09:14.100 --> 09:20.160
If you start playing with Gnode, you need to read some documentation.

09:20.160 --> 09:24.680
There is very nice documentation available, no doubt about it.

09:24.680 --> 09:31.440
But really it's not so simple by just downloading an image and running it and expecting a fully

09:31.440 --> 09:34.480
blown desktop environment.

09:34.480 --> 09:37.440
At least not from just by booting it.

09:37.440 --> 09:39.780
You have to do something.

09:39.780 --> 09:42.400
But I think it's definitely worth it.

09:42.400 --> 09:44.920
So there are some links you can follow.

09:44.920 --> 09:48.920
It's an open source project, by the way.

09:48.920 --> 09:57.720
Now let me talk about L4E, which is something slightly similar, some aspects different,

09:57.720 --> 10:01.000
by my current employer, current concept.

10:01.000 --> 10:06.000
So this is also a production grade microkernel-based environment.

10:06.000 --> 10:10.320
A little bit more integrated, I would say, because we basically support just the one

10:10.320 --> 10:18.720
kernel, which we called the L4E microkernel, but you all know it by the name Fiasco.

10:18.720 --> 10:24.800
We use this name currently because Fiasco is a very poor name, trust me.

10:24.800 --> 10:32.200
So we strongly focus on virtualization, we strongly focus on safety and security certification

10:32.200 --> 10:33.580
currently.

10:33.580 --> 10:39.800
And we also have customers, because we are a company that pays us, et cetera.

10:39.800 --> 10:46.640
I'm again not in the liberty to name them, but I can say that if you're going to buy

10:46.640 --> 10:52.920
a new car from a German car manufacturer, there is a high chance you will be running

10:52.920 --> 10:53.920
L4E.

10:53.920 --> 11:02.880
There will be L4E code running in the software stack of that car.

11:02.880 --> 11:10.640
To be honest, the code base is not the most verbosely commented that I have seen, especially

11:10.640 --> 11:11.920
the kernel itself.

11:11.920 --> 11:19.480
So again, the learning curve is a little bit steep, but at least there are some scenarios

11:19.480 --> 11:27.160
you can just build or download and pre-built image, and this will show you the potential

11:27.160 --> 11:29.520
to a certain degree.

11:29.520 --> 11:30.520
And here are some links.

11:30.520 --> 11:34.040
Again, it's an open source project.

11:34.040 --> 11:41.680
Now let's talk about Helen OS, which is to compare with the previous two.

11:41.680 --> 11:43.480
It's a slightly different breed.

11:43.480 --> 11:45.840
So this is like an integrated operating system.

11:45.840 --> 11:52.560
So the purpose is to build it or download an image, boot it, and be presented with a

11:52.560 --> 11:59.720
subenvironment with a shell and some mostly familiar commands which you can use to explore

11:59.720 --> 12:00.720
the system.

12:00.720 --> 12:05.520
So it's not about compile time or deployment time configuration.

12:05.520 --> 12:10.040
It's really about configuring the system at runtime as you go.

12:10.040 --> 12:15.120
What do you expect from a desktop-oriented OS?

12:15.120 --> 12:20.720
And of course, I'm a little bit biased because this is my project, but I would argue that

12:20.720 --> 12:29.640
if you want to understand how a microkernel-based system works inside, this is the one to understand

12:29.640 --> 12:34.920
and to pick because of the lower entry barrier.

12:34.920 --> 12:39.880
The code base is portable, self-contained, well-structured.

12:39.880 --> 12:46.280
So for example, we know how to use directories and not only a single level of them.

12:46.280 --> 12:51.160
So this is how we structure the system to be more understandable.

12:51.160 --> 12:54.480
The code is well-commented, and this is not just my observation.

12:54.480 --> 13:02.880
If you run a tool that will analyze the sources, you will get a number around 30, 35% of commands,

13:02.880 --> 13:05.840
which is not bad.

13:05.840 --> 13:09.560
And believe me, I have seen many microkernel code bases.

13:09.560 --> 13:17.200
I have seen the code of many operating systems in general, and I can tell the difference.

13:17.200 --> 13:23.280
So I would compare Hellen-OS to something like the Solaris kernel in terms of the structure

13:23.280 --> 13:27.600
and commands and stuff like that.

13:27.600 --> 13:34.440
And we also prefer to use our native components, so no ported components or components that

13:34.440 --> 13:45.520
might use some unicernal layers to really make the system feel coherent.

13:45.520 --> 13:47.200
Let's put it that way.

13:47.200 --> 13:53.200
So this is how it looks like when you boot the image, which you can compile or download.

13:53.200 --> 13:57.640
So you have a user interface, a shell, et cetera.

13:57.640 --> 14:03.600
And we have some interesting features that are not present in the other microkernels.

14:03.600 --> 14:10.240
So we are portable not only in theory, but also in real life.

14:10.240 --> 14:17.960
So we support eight different architectures, including strange beasts like Itanium.

14:17.960 --> 14:21.200
And yes, the RISC-V port is still not finished.

14:21.200 --> 14:24.720
And that goes to me.

14:24.720 --> 14:32.180
We are using asynchronous IPC, which transplantry uses shared memory for performance.

14:32.180 --> 14:37.540
We have interrupt controller drivers in user space compared to some other microkernels.

14:37.540 --> 14:43.720
We have a fully decomponentized TCP IP stack.

14:43.720 --> 14:51.120
We support USB 3.0, and we have a sound stack, so just a few highlights.

14:51.120 --> 14:53.720
I will go quickly through these slides.

14:53.720 --> 15:00.360
We don't have the time to go to the details, but the microkernel, while being quite small,

15:00.360 --> 15:01.760
still has a structure.

15:01.760 --> 15:07.820
So we have a well-defined hardware abstraction layer in the kernel.

15:07.820 --> 15:13.040
This is how the user space or how the entire architecture of the system looks like.

15:13.040 --> 15:19.720
So you might see some similarities with the G-node image, but the difference is that all

15:19.720 --> 15:25.640
of this is potentially running in the system for all the time, depending on the actual

15:25.640 --> 15:28.740
configuration of your machine.

15:28.740 --> 15:34.200
And there are some device drivers, which are somehow structured in a tree, starting with

15:34.200 --> 15:36.680
some platform drivers, et cetera.

15:36.680 --> 15:42.520
If you want the details, please come to me.

15:42.520 --> 15:45.240
It's a community-driven effort currently.

15:45.240 --> 15:52.160
So yeah, we are not so fast regarding the development, but we still do some regular

15:52.160 --> 15:53.160
releases.

15:53.160 --> 15:56.920
And sadly, we don't support some of the new hardware features.

15:56.920 --> 16:01.640
If you'd like to contribute, you are more than welcome.

16:01.640 --> 16:08.960
Vuxia by Google is a relatively new kit on the blog.

16:08.960 --> 16:15.080
It's a microkernel-based system that is strongly focusing on the Internet of Things, specifically

16:15.080 --> 16:24.200
their target is to support maintenance, remote management, and remote upgrading of a fleet

16:24.200 --> 16:25.920
of devices.

16:25.920 --> 16:34.600
So imagine, for example, the Google Nest Hub, which is the device where Vuxia is being shipped

16:34.600 --> 16:44.320
currently with, and they even managed to do a remote update of all those Nest Hubs from

16:44.320 --> 16:51.920
the previous Linux-based OS to Vuxia over the air without the users even noticing.

16:51.920 --> 16:56.480
So I think this is quite impressive.

16:56.480 --> 17:02.560
The microkernel is called Zercon, and it's capability-based message-passing microkernel.

17:02.560 --> 17:07.040
And I have spoken to the developers why they don't actually stress that it's a microkernel.

17:07.040 --> 17:14.200
And it's their deliberate choice to somehow underplay, understate that it's a microkernel,

17:14.200 --> 17:17.880
because of some bad press of the term.

17:17.880 --> 17:23.760
So they don't call it a microkernel explicitly, unless you ask them, but it is a microkernel

17:23.760 --> 17:27.560
for sure.

17:27.560 --> 17:34.480
This is how it looks like on the Nest Hub, or this is the way how you can tell whether

17:34.480 --> 17:39.840
your device is still running Linux or is running Vuxia.

17:39.840 --> 17:46.360
And yeah, the learning curve, again, somewhat steep, because this is not a desktop-oriented

17:46.360 --> 17:50.920
system or a server-oriented system that would be Unix-like.

17:50.920 --> 17:57.200
You have to install a non-trivial toolchain and a custom emulator, sort of like when you

17:57.200 --> 18:00.360
do Android development and other things.

18:00.360 --> 18:07.160
But again, what I believe is very nice about Vuxia, that they are only using their own

18:07.160 --> 18:12.120
native core components, not ported components.

18:12.120 --> 18:14.680
And it's an open source project.

18:14.680 --> 18:23.360
Managarb, again, relatively younger operating system, which is microkernel-based, at least

18:23.360 --> 18:27.000
compared to the first three.

18:27.000 --> 18:36.280
One of the key features, a fully asynchronous kernel design, which tries to somehow mitigate

18:36.280 --> 18:41.840
some performance problems by implementing some features in the kernel, which might not

18:41.840 --> 18:48.440
be considered pure by microkernel purists, like the page cache.

18:48.440 --> 18:57.520
And Managarb tries to be compatible with Linux, so they already support the Wayline Protocol

18:57.520 --> 19:02.840
in Western and some other applications.

19:02.840 --> 19:06.680
They even have some accelerated GPU drivers, or at least one.

19:06.680 --> 19:11.440
And it's an open source project, and this is how it looks like.

19:11.440 --> 19:18.080
Of course, you can run more than just the clock there, but yeah, you get the idea.

19:18.080 --> 19:25.520
Redux, another interesting microkernel-based operating system that tries to be Unix-like.

19:25.520 --> 19:33.200
But this one has this primary feature of being implemented almost completely in Rust.

19:33.200 --> 19:38.960
Also the core user-based components are written in Rust, like the libc.

19:38.960 --> 19:43.960
So they have actually a C library written in Rust.

19:43.960 --> 19:47.000
Interesting.

19:47.000 --> 19:48.000
What to say?

19:48.000 --> 19:56.960
Again, POSIX compatibility layer, they already support some interesting end-user applications

19:56.960 --> 20:02.040
and libraries, and it's an open source project again.

20:02.040 --> 20:04.360
And this is how it looks like when you boot it.

20:04.360 --> 20:16.120
So again, you can run a terminal with Bash, in this case, and just explore the system.

20:16.120 --> 20:21.720
A little bit aside, there are also other, let's say, currently non-open source microkernels

20:21.720 --> 20:22.720
being around.

20:22.720 --> 20:26.360
I just tried to mention them here very quickly.

20:26.360 --> 20:30.400
I know it was them, but just to complete the picture.

20:30.400 --> 20:37.200
So Huawei is working on something which they call HomeMonk.

20:37.200 --> 20:45.240
It's actually quite buried under this Harmony OS brand, and it's a little bit confusing

20:45.240 --> 20:51.920
because you might have heard rumors, the original ones, that Harmony OS will be a microkernel

20:51.920 --> 20:56.840
based system, then Huawei released something that was clearly Linux-based.

20:56.840 --> 21:03.600
So yeah, this did not resonate well with our technical folks.

21:03.600 --> 21:06.720
But the point is that this is just a marketing confusion.

21:06.720 --> 21:12.060
So Harmony OS is a common brand for different operating systems.

21:12.060 --> 21:13.400
One of them is Linux-based.

21:13.400 --> 21:17.640
One of them is LiteOS-based, which is a real-time kernel by Huawei.

21:17.640 --> 21:25.120
And the most progressive one unreleased so far is the microkernel-based.

21:25.120 --> 21:35.880
The microkernel was originally inspired by best practices and state-of-the-art in other

21:35.880 --> 21:41.560
micro kernels, but it's a clean slate implementation and design.

21:41.560 --> 21:47.920
For example, they have the capability-based physical memory management in user space,

21:47.920 --> 21:52.400
so the kernel does not manage the physical memory.

21:52.400 --> 21:59.600
It's sort of similar, the design is sort of similar to a CL4, but it's slightly more practical,

21:59.600 --> 22:01.080
in my personal opinion.

22:01.080 --> 22:05.080
Sorry that I can't go into the details.

22:05.080 --> 22:09.720
And they also target safety and security certification.

22:09.720 --> 22:15.800
And actually, this is also running in the wild as trusted execution environment in several

22:15.800 --> 22:18.080
Huawei smartphones.

22:18.080 --> 22:26.440
Then there is this R&D project called DAQ, which is primarily being driven by my former

22:26.440 --> 22:34.240
colleagues at the Dresden Research Center, which tries to be, again, a completely clean

22:34.240 --> 22:37.960
slate design and implementation.

22:37.960 --> 22:44.120
The primary goal was really to use state-of-the-art best practices and software engineering to

22:44.120 --> 22:48.120
achieve really the highest code quality and maintainability.

22:48.120 --> 22:53.240
For example, one of the goals was to be fully MSRAC compliant.

22:53.240 --> 23:03.440
Another goals were high-level safety and security certification and other interesting features.

23:03.440 --> 23:04.960
It's an R&D project.

23:04.960 --> 23:09.200
And honestly, I don't know what's the current state, maybe you can informally ask some of

23:09.200 --> 23:15.880
the Huawei guys here, but it's good to know that this is there.

23:15.880 --> 23:18.760
Very quickly, some other systems.

23:18.760 --> 23:28.480
BlueHort, for 30 years, the intended replacement of Linux in the GNU Linux equation, still alive,

23:28.480 --> 23:32.520
still kicking, still with semi-regular releases.

23:32.520 --> 23:38.080
And yeah, you can actually run 70% of the VM packages on top of it, which is not bad.

23:38.080 --> 23:44.560
Honestly, yes, it's limited to 32-bit x86.

23:44.560 --> 23:53.680
But I always say if they would get one-third, one-fourth of the Linux contributors, they

23:53.680 --> 23:57.360
would finish it in a few months.

23:57.360 --> 24:04.520
ARS, which is a microkernel-based operating system based on the Helios microkernel, which

24:04.520 --> 24:10.520
is supposedly inspired by a CL4.

24:10.520 --> 24:18.240
There will be a talk later today from the author, so I'll skip the details for now.

24:18.240 --> 24:25.080
Composite, another microkernel-based project that is focusing on predictability and component

24:25.080 --> 24:27.120
composition.

24:27.120 --> 24:37.600
The kernel itself is designed as lockless, and it has user space scheduling, and it uses

24:37.600 --> 24:39.120
thread migration IPC.

24:39.120 --> 24:48.040
So if you remember vaguely the idea from Mac 3.0 from Fort Tor, this is the continuation

24:48.040 --> 24:49.840
of that.

24:49.840 --> 24:58.080
And there is UXRT, which is like a user space part built on top of a CL4.

24:58.080 --> 25:04.560
This is still an ongoing project in early stages of the development.

25:04.560 --> 25:07.320
Let's see how it goes.

25:07.320 --> 25:10.840
And finally, let's mention a few standard micro kernels.

25:10.840 --> 25:13.840
So these are not entire operating systems.

25:13.840 --> 25:16.520
These are just the kernel building blocks.

25:16.520 --> 25:23.360
Nova, micro-hypervisor by Udo, is again alive and kicking.

25:23.360 --> 25:29.160
It has been used by bedrock systems as their primary product, as I believe.

25:29.160 --> 25:34.560
So this is one of the projects that sort of went into limbo for many years, and now they

25:34.560 --> 25:37.080
are alive again.

25:37.080 --> 25:43.640
By the way, G-node, I believe, is maintaining their fork of Nova, or maybe Nova with their

25:43.640 --> 25:45.120
own patches.

25:45.120 --> 25:52.360
But there is also HEDRON, which is an official fork of Nova from Cybers, and they are also

25:52.360 --> 25:55.600
using it as their commercial product.

25:55.600 --> 26:03.040
Again, I think there might be Yulian somewhere here who might tell you more.

26:03.040 --> 26:10.040
As CL4, of course, the microkernel with the most, I would say, the most visible formal

26:10.040 --> 26:11.560
verification story.

26:11.560 --> 26:13.520
We need to mention it.

26:13.520 --> 26:27.520
We also need to say that Google has adopted a CL4 recently as their foundation for secure

26:27.520 --> 26:32.040
firmware sort of something like that.

26:32.040 --> 26:41.600
I'm not really sure what are the targets of this cantrip OS, also as Kata OS, but it's

26:41.600 --> 26:43.440
a static configuration mostly.

26:43.440 --> 26:48.160
So it's not a dynamic system, it's a static configuration system.

26:48.160 --> 26:54.920
And in that same area, I would mention also the MOOAN separation kernel, which again is

26:54.920 --> 27:02.120
a separation kernel, so its primary goal is to do static partitioning, but I think it

27:02.120 --> 27:06.280
belongs to the family.

27:06.280 --> 27:12.560
And yeah, sadly there are some microkernels that are interesting, worth looking into for

27:12.560 --> 27:20.600
inspiration, but are currently in limbo, like Escape and three, Linux 3, Herbigalia and Redleaf.

27:20.600 --> 27:23.080
I hope they will be resurrected.

27:23.080 --> 27:29.040
And of course, I might continue with a list of other microkernels that are certifiably

27:29.040 --> 27:30.040
dead.

27:30.040 --> 27:35.840
And of course, those could be resurrected as well, and it's always good to know the

27:35.840 --> 27:37.240
history, right?

27:37.240 --> 27:40.520
Yeah, but I will stop here.

27:40.520 --> 27:41.520
Thank you.

27:41.520 --> 27:43.480
If you have any questions, I would be happy to answer them.

27:43.480 --> 27:45.480
Right, thank you so much, Marty.

27:45.480 --> 27:49.480
If there are, yeah, please.

27:49.480 --> 27:56.040
We have time, yeah, two questions, two questions.

27:56.040 --> 27:59.600
Hello, congratulations for your excellent talk.

27:59.600 --> 28:01.640
Thank you.

28:01.640 --> 28:07.760
Among all those that you studied, which one you think would be more compatible to the

28:07.760 --> 28:13.080
Linux end user base, like for a person to use Linux?

28:13.080 --> 28:18.840
I mean, that is a good question.

28:18.840 --> 28:19.840
Thank you.

28:19.840 --> 28:24.600
So the question is which of those systems would be most Linux compatible?

28:24.600 --> 28:29.880
Most of them actually, most of the systems that I have presented do have some POSIX compatibility

28:29.880 --> 28:30.880
layer.

28:30.880 --> 28:35.400
So I would not make this as the only criterion.

28:35.400 --> 28:40.880
I understand it might be important for you, but I would look also into other aspects of

28:40.880 --> 28:47.720
that, because most of the systems do provide some kind of Linux compatibility.

28:47.720 --> 28:53.720
But if you would be looking for something that is really Linux compatible by design,

28:53.720 --> 29:00.280
or that makes it as one of its primary goals, then I would probably go for Managar.

29:00.280 --> 29:07.440
But again, this is just a first idea, first suggestion.

29:07.440 --> 29:10.840
I would not rule out the others.

29:10.840 --> 29:11.840
Thank you.

29:11.840 --> 29:13.840
Any other questions?

29:13.840 --> 29:14.840
Alex.

29:14.840 --> 29:15.840
Hi.

29:15.840 --> 29:20.080
Thank you for the talk.

29:20.080 --> 29:25.040
So what trends do you think you'll see in the next few years with the microcovid?

29:25.040 --> 29:26.960
That's a tricky question, but thanks for that.

29:26.960 --> 29:29.720
So the question was about the trends.

29:29.720 --> 29:40.200
So I think there will be this kind of retargeting of the systems to very specific use cases,

29:40.200 --> 29:41.880
like Fuxia is doing.

29:41.880 --> 29:51.760
So really implementing custom microcovid-based operating systems that really do fulfill the

29:51.760 --> 29:55.400
specific needs of those areas.

29:55.400 --> 29:56.400
That's one thing.

29:56.400 --> 30:01.200
The other thing that I would like to see, I'm not sure if it's going to happen soon,

30:01.200 --> 30:05.780
but I would like to see more hardware-software co-design.

30:05.780 --> 30:14.000
So basically, the actual appeal of microc terminals is the fact that most current CPUs don't

30:14.000 --> 30:19.160
really provide hardware features that would help the microc terminals, especially in the

30:19.160 --> 30:20.880
terms of performance.

30:20.880 --> 30:23.440
And we see this vicious cycle.

30:23.440 --> 30:30.480
The microc terminals are not performing greatly on the current hardware, so nobody is using

30:30.480 --> 30:31.600
them.

30:31.600 --> 30:40.040
So the hardware vendors don't see a need for changing the CPUs to provide features that

30:40.040 --> 30:42.800
would help the microc terminals.

30:42.800 --> 30:48.800
But I think with RISC-V and the democratization of the hardware design, I think this might

30:48.800 --> 30:51.640
change, hopefully, quite soon.

30:51.640 --> 30:58.200
The third trend that I definitely see, which was probably also seen on the slides, is really

30:58.200 --> 31:03.960
the certifications in terms of safety, security, and hopefully more for more verification,

31:03.960 --> 31:06.520
because this is where microc terminals really excel.

31:06.520 --> 31:09.360
So why not go for it?

31:09.360 --> 31:10.360
Okay.

31:10.360 --> 31:12.080
Thank you so much, Martin.

31:12.080 --> 31:22.040
Thank you.

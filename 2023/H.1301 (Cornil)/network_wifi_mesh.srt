1
0:00:00.000 --> 0:00:01.000
Okay.

2
0:00:01.000 --> 0:00:02.000
Yeah.

3
0:00:02.000 --> 0:00:13.200
Hello, everyone, and welcome to my presentation.

4
0:00:13.200 --> 0:00:14.680
I am Frélic Kombogert.

5
0:00:14.680 --> 0:00:17.100
I work for a company called Mind.

6
0:00:17.100 --> 0:00:22.520
And I'm here to present to you the Purple Mesh Project, which is an open source Wi-Fi

7
0:00:22.520 --> 0:00:27.720
mesh solution.

8
0:00:27.720 --> 0:00:31.320
So who am I?

9
0:00:31.320 --> 0:00:36.120
Like I said, I'm an embedded software developer, and I work for Mind.

10
0:00:36.120 --> 0:00:41.280
And since 2020, I've been a project manager for this Purple Mesh Project at the Purple

11
0:00:41.280 --> 0:00:42.280
Foundation.

12
0:00:42.280 --> 0:00:51.480
And, yeah, feel free to email me if you want after presentation, if you have any more questions

13
0:00:51.480 --> 0:00:54.160
afterwards.

14
0:00:54.160 --> 0:00:55.520
So what is the Purple Foundation?

15
0:00:55.520 --> 0:01:02.640
So the Purple Foundation is really a very big conglomeration of the telecoms industry.

16
0:01:02.640 --> 0:01:13.200
So if you look at the logos that I have there, there are a lot of ISPs in there, like AT&T,

17
0:01:13.200 --> 0:01:19.320
like Doge Telecom, like Dish, like Verizon, Vodafone.

18
0:01:19.320 --> 0:01:25.480
So there's a lot of big ISPs in Purple Foundation, and also some hardware manufacturers, so

19
0:01:25.480 --> 0:01:33.840
like ASCII, MediaTek, MaxDinier, Kowm.

20
0:01:33.840 --> 0:01:41.960
And so basically what we do is we sponsor the development of router firmware.

21
0:01:41.960 --> 0:01:50.320
And yeah, so how this came about is essentially operators, they want to provide their users

22
0:01:50.320 --> 0:01:55.960
– so with operators, I mean internet service providers – they want to provide their users

23
0:01:55.960 --> 0:02:04.180
with access points and routers, because not everyone can go out and buy them and configure

24
0:02:04.180 --> 0:02:06.800
them themselves.

25
0:02:06.800 --> 0:02:12.160
But all of the software development is not really their core expertise.

26
0:02:12.160 --> 0:02:16.640
So traditionally they've relied on stacks developed by hardware, the hardware partners,

27
0:02:16.640 --> 0:02:25.040
but they also – this is not their core expertise, and so Purple Foundation was kind of created

28
0:02:25.040 --> 0:02:30.120
to collaborate on this with various partners.

29
0:02:30.120 --> 0:02:35.480
So the main projects that we're working on are Purple OS, which is a router firmware

30
0:02:35.480 --> 0:02:38.800
based on OpenWRT.

31
0:02:38.800 --> 0:02:44.640
Purple Mesh, which is a subject of this presentation, and also Noteware VS Lifecycle Management,

32
0:02:44.640 --> 0:02:52.520
which is kind of an attempt to create an up-store infrastructure, which is really cool actually.

33
0:02:52.520 --> 0:02:59.440
And we are also heavily involved in talking about router security and router data models,

34
0:02:59.440 --> 0:03:04.800
so basically the API of a router.

35
0:03:04.800 --> 0:03:10.040
So that's kind of the overview of the Purple Foundation.

36
0:03:10.040 --> 0:03:17.720
So Purple Mesh itself is an IEEE 1905 stack, so this is a layer 2.5 protocol, so it sits

37
0:03:17.720 --> 0:03:22.400
on top of Wi-Fi and Ethernet, but below IP.

38
0:03:22.400 --> 0:03:27.400
And the stack itself is based on open-source Intel codes.

39
0:03:27.400 --> 0:03:33.960
So we are fully functional, easy mesh implementation with both agent and controller roles supported,

40
0:03:33.960 --> 0:03:39.120
and I will talk later about what that means.

41
0:03:39.120 --> 0:03:43.800
And we have extensive API standardization effort as well in collaboration with the Broadbent

42
0:03:43.800 --> 0:03:44.800
Forum.

43
0:03:44.800 --> 0:03:52.760
So we don't just want to write an API, we want to really think about it, and so we are

44
0:03:52.760 --> 0:03:59.520
collaborating on that with industry, other industry fora.

45
0:03:59.520 --> 0:04:07.400
And we also have very heavy emphasis on testing, so we have some Wi-Fi alliance test buds that

46
0:04:07.400 --> 0:04:11.400
we extensively test with.

47
0:04:11.400 --> 0:04:15.600
So I said Purple Mesh is an easy mesh implementation, so what do I mean by that?

48
0:04:15.600 --> 0:04:25.680
So this is the easy mesh protocol, it's a Wi-Fi alliance standard, just as Wi-Fi 6 and

49
0:04:25.680 --> 0:04:29.840
Wi-Fi 7 are Wi-Fi alliance standards.

50
0:04:29.840 --> 0:04:33.340
And this is all meant to simplify your Wi-Fi management.

51
0:04:33.340 --> 0:04:45.000
So for Wi-Fi, often the problem that we have is you want to add an X point to your network,

52
0:04:45.000 --> 0:04:52.280
and so you want to add an X point to your network, but then you need to configure it,

53
0:04:52.280 --> 0:04:56.360
and then it needs to, and that can be quite tedious.

54
0:04:56.360 --> 0:05:04.480
So the easy mesh protocol can do that for you, so you just onboard new devices using

55
0:05:04.480 --> 0:05:10.680
WPS pairing, which is also extended by the easy mesh standards, and the device will automatically

56
0:05:10.680 --> 0:05:16.000
join your network and have all of your settings, including pass phrases, and the bands it needs

57
0:05:16.000 --> 0:05:23.440
to operate on, the SSIDs, any guest networks that you have configured, and so on.

58
0:05:23.440 --> 0:05:28.440
And another thing that the easy mesh standard does is it shares the configuration, so if

59
0:05:28.440 --> 0:05:33.400
you want to change that configuration, if you want to add SSIDs, if you want to add

60
0:05:33.400 --> 0:05:38.080
guest networks or change any other part of your Wi-Fi configuration, you only need to

61
0:05:38.080 --> 0:05:45.140
do that in one place, and it's applied to all of your X points in your entire network.

62
0:05:45.140 --> 0:05:55.840
And finally also, it gathers a lot of metrics about your network, which can be used to optimize

63
0:05:55.840 --> 0:05:59.280
how devices connect to your network.

64
0:05:59.280 --> 0:06:06.740
So in the image there, you see various X points, and you also see various network devices,

65
0:06:06.740 --> 0:06:13.160
and so what can often happen is that an X point that is used in your network simply

66
0:06:13.160 --> 0:06:17.800
gets overloaded because all of the devices try to connect to that X point, and your other

67
0:06:17.800 --> 0:06:24.280
X points don't see any use, and especially if you have a precarious backhaul that can

68
0:06:24.280 --> 0:06:27.760
lead to some performance problems.

69
0:06:27.760 --> 0:06:33.400
So applications that use the easy mesh standards, they can monitor this, they can see that there

70
0:06:33.400 --> 0:06:41.800
is a problem, and they can try to steer this device to use different X points.

71
0:06:41.800 --> 0:06:49.640
Just solving performance problems in your network.

72
0:06:49.640 --> 0:06:56.720
So purpose mesh is an easy mesh implementation, so basically we implement all of the functionality

73
0:06:56.720 --> 0:06:59.560
that I've just described.

74
0:06:59.560 --> 0:07:05.680
It is portable to a number of different router operating systems, all based on Linux, so

75
0:07:05.680 --> 0:07:13.800
OpenWRT, Purple OS, and RDKB in particular, it's also portable in theory to other Linux-based

76
0:07:13.800 --> 0:07:16.040
operating systems.

77
0:07:16.040 --> 0:07:22.520
The main dependency that we have is we rely on software bus, like Ubisoft or Arbus is

78
0:07:22.520 --> 0:07:30.480
typically used in these router operating systems, but we could also support something like Dbus

79
0:07:30.480 --> 0:07:32.920
for other platforms.

80
0:07:32.920 --> 0:07:39.880
The main problem that we encounter when trying to port Purple Mesh to new platforms is we

81
0:07:39.880 --> 0:07:45.720
need really good Wi-Fi drivers, because something like mesh networking tests your Wi-Fi drivers

82
0:07:45.720 --> 0:07:55.080
like nothing else, and we find that most Wi-Fi drivers simply are not good enough to support

83
0:07:55.080 --> 0:07:58.960
all the functionality that we need.

84
0:07:58.960 --> 0:08:06.920
So that is one thing that we are also active in within Purple, is we try to spur innovation

85
0:08:06.920 --> 0:08:14.480
in the Wi-Fi drivers, so we collaborate, or we try to collaborate with hardware vendors

86
0:08:14.480 --> 0:08:22.480
to make sure that their drivers are not just capable enough to support mesh, but that this

87
0:08:22.480 --> 0:08:26.640
is also done in their open source drivers.

88
0:08:26.640 --> 0:08:33.440
So we do still support some proprietary drivers for some hardware, but this is very much transitional,

89
0:08:33.440 --> 0:08:43.120
and we hope to get various vendors to open source their wireless drivers and make sure

90
0:08:43.120 --> 0:08:48.800
that all the functionality that we need is supported by those open drivers based on config

91
0:08:48.800 --> 0:08:54.720
82.11 and NLL82.11.

92
0:08:54.720 --> 0:09:04.480
So why did we develop Purple Mesh?

93
0:09:04.480 --> 0:09:11.960
Basically like I mentioned, Purple is a whole community of different service providers coming

94
0:09:11.960 --> 0:09:18.960
together to develop a single solution, so instead of everyone having to develop their

95
0:09:18.960 --> 0:09:28.560
own software, it makes sense to collaborate. Also, by developing the software ourselves,

96
0:09:28.560 --> 0:09:34.840
the service providers, they get independence from system chip vendors.

97
0:09:34.840 --> 0:09:40.160
So what we've seen in the past, and what we still sometimes see, is that there are SoC

98
0:09:40.160 --> 0:09:46.560
vendors that try to force you to use their own proprietary software and to depend on

99
0:09:46.560 --> 0:09:55.640
that their proprietary interfaces, and that creates a vendor lock-in within the ecosystem,

100
0:09:55.640 --> 0:10:03.320
and that is something that we are very much aware of and are trying to combat as well.

101
0:10:03.320 --> 0:10:11.320
And another good reason to develop Purple Mesh, and in fact the original reason, is

102
0:10:11.320 --> 0:10:21.800
as a stress test for the wireless drivers, because like I mentioned, Wi-Fi Mesh, it taxes

103
0:10:21.800 --> 0:10:27.560
your Wi-Fi drivers in ways that nothing else does.

104
0:10:27.560 --> 0:10:38.880
And that was kind of the original motivation of Purple Mesh was to act as a test for open

105
0:10:38.880 --> 0:10:47.160
source Wi-Fi drivers, but it kind of ballooned from there.

106
0:10:47.160 --> 0:10:53.280
And one other thing that we do is try to encourage the development of a common API for easy mesh

107
0:10:53.280 --> 0:11:01.320
implementations. This API is usable for remote management, for network diagnostics, and to

108
0:11:01.320 --> 0:11:08.840
enable others to create router apps to configure Wi-Fi so they can plug into Purple Mesh, and

109
0:11:08.840 --> 0:11:20.880
use it to smartly configure your own Wi-Fi. This also is enabled by the LCM project, which

110
0:11:20.880 --> 0:11:30.000
allows you to add router apps to your router, and some of those might use Purple Mesh to

111
0:11:30.000 --> 0:11:43.560
optimize your network, or to show you more information about your network.

112
0:11:43.560 --> 0:11:52.080
Okay, so let me check the time here. We do have time. Okay, so yeah, easy mesh itself.

113
0:11:52.080 --> 0:11:59.960
Like I mentioned, it's based on IEEE 1905. This is a very extensible protocol on top

114
0:11:59.960 --> 0:12:11.960
of Ethernet and Wi-Fi. It's used a fixed multicast address, and the main feature of it is it

115
0:12:11.960 --> 0:12:23.320
works with TLVs, so type length value tuples. And you can add as many of these as you like.

116
0:12:23.320 --> 0:12:34.640
And the way easy mesh works is it defines a set of TLVs that have specific use. So for

117
0:12:34.640 --> 0:12:42.480
instance, TLVs to configure access points, or to report certain metrics, or to discover

118
0:12:42.480 --> 0:12:56.320
devices on the network, things like that. So one thing that easy mesh does is it uses

119
0:12:56.320 --> 0:13:02.080
– so one thing that easy mesh can also be used for is discovery of devices on the network.

120
0:13:02.080 --> 0:13:09.760
So all IEEE 1905 devices, they can report all of their neighboring devices in the network,

121
0:13:09.760 --> 0:13:16.040
and that helps you get a topology map of all of the devices that are present in your network.

122
0:13:16.040 --> 0:13:25.280
So it's easy to discover what's currently living in your network. And so this is also,

123
0:13:25.280 --> 0:13:33.280
of course, a vital tool to allow you to optimize the network. And one other thing that we get

124
0:13:33.280 --> 0:13:41.600
is metrics, like I mentioned, so you can see how well the connection is between various

125
0:13:41.600 --> 0:13:45.920
devices that you might have in your network, like your laptops and your smartphones and

126
0:13:45.920 --> 0:13:52.600
your smart TVs. How well is the connection to their access points? And is there any possibility

127
0:13:52.600 --> 0:13:59.520
that we can connect them to a different access point that has maybe a better connection?

128
0:13:59.520 --> 0:14:06.400
So this is also very useful. And yeah, once we've determined that we would actually like

129
0:14:06.400 --> 0:14:13.120
advice to connect to a different access point, this is something that we can also do. So

130
0:14:13.120 --> 0:14:19.400
the easy mesh protocol includes messages to steer advice. And what we will do is the controller

131
0:14:19.400 --> 0:14:27.560
will tell the agents, try to tell a station connected to you to disconnect. There's a

132
0:14:27.560 --> 0:14:35.440
number of mechanisms for that in the Wi-Fi standards, like 8211K, 8211V. They are not

133
0:14:35.440 --> 0:14:41.880
always supported by all devices, in particular, smartphones have a habit of ignoring them.

134
0:14:41.880 --> 0:14:45.880
So what we can also then do as a final option is to just blacklist the device, not allow

135
0:14:45.880 --> 0:14:51.040
it to connect to an agent anymore. So it's forced to connect to a different wireless

136
0:14:51.040 --> 0:15:08.400
access point. One other very crucial functionality is onboarding. So if you add a new agent,

137
0:15:08.400 --> 0:15:20.280
it's easy for them to find the controller and then onboard through WPS or DPP, new standards

138
0:15:20.280 --> 0:15:36.920
from Wi-Fi lines. So in conclusion, so Wi-Fi integers, they are getting more complex. And

139
0:15:36.920 --> 0:15:40.840
that means they also need to get smarter. And that is really what we are doing within

140
0:15:40.840 --> 0:15:47.720
the PRP mesh project and PRP ecosystem in general, is we are trying to make Wi-Fi smarter.

141
0:15:47.720 --> 0:16:03.400
And we can use your help with that. One thing that's also crucial to know is that open source

142
0:16:03.400 --> 0:16:14.840
is also very useful to get vendor independence. So no more vendor lock-in. That is really

143
0:16:14.840 --> 0:16:24.480
a very big deal. And also, yeah, sometimes you can find open ecosystems out there, even

144
0:16:24.480 --> 0:16:30.920
where you might not expect it. So all of the things that I've talked about is these router

145
0:16:30.920 --> 0:16:39.480
operating systems, this LCM, App Store ecosystem, and PRP mesh itself, it's all open source.

146
0:16:39.480 --> 0:16:47.920
But right now, it's still developed by the ISPs, basically, and PRP Foundation itself.

147
0:16:47.920 --> 0:16:56.040
We don't get a lot of external contributions. But yeah, we welcome everyone who wants. So

148
0:16:56.040 --> 0:17:06.960
yeah, check us out when you can. And yeah, related to that also, so you can make good

149
0:17:06.960 --> 0:17:15.000
money developing open source codes. So yeah, this is where I plug my own company, Minds.

150
0:17:15.000 --> 0:17:22.320
We are software consultants, especially focused on embedded software and open source. And

151
0:17:22.320 --> 0:17:30.160
we are hiring. So yeah, I'll be around here outside of the hall after presentation. So

152
0:17:30.160 --> 0:17:46.880
yeah, hit me up if that sounds interesting to you. All right. Any questions?

153
0:17:46.880 --> 0:17:52.040
So the operators and ISPs have previously gotten together and made something called

154
0:17:52.040 --> 0:17:57.800
HomeNet. And that went very much the same direction. And then they decided they didn't

155
0:17:57.800 --> 0:18:01.520
like it because it supports you getting more than one internet provider and using that

156
0:18:01.520 --> 0:18:06.400
at the same time, which this does not support. And this also doesn't support other things,

157
0:18:06.400 --> 0:18:13.440
for example, meshing well with Zigbee or HomeNet automation stuff. So I would ask you, have

158
0:18:13.440 --> 0:18:18.200
you actually evaluated whether this is a good standard to implement? Do you think this is

159
0:18:18.200 --> 0:18:22.920
a good standard to implement? And if yes, why?

160
0:18:22.920 --> 0:18:31.000
Yeah, an interesting question. I am not familiar with this HomeNet you're talking about, although

161
0:18:31.000 --> 0:18:37.880
behind you, Walter, definitely is. Maybe I can answer that because I'm one of the operators.

162
0:18:37.880 --> 0:18:42.440
And I was in the HomeNet working group as well. I rejected being the chair at some point

163
0:18:42.440 --> 0:18:49.200
in time. HomeNet was very challenging in the sense that it decided to remove all existing

164
0:18:49.200 --> 0:18:54.200
protocols to communicate with the individual devices, such as let's get rid of the HEP,

165
0:18:54.200 --> 0:19:00.480
let's go do something else. So from a point of view of a realistic framework, a realistic

166
0:19:00.480 --> 0:19:05.920
path to get there, that was a problem. There are some parts of HomeNet such as HNCP that

167
0:19:05.920 --> 0:19:10.880
have been reused by some proprietary vendors here and there, but it's all died. Now, when

168
0:19:10.880 --> 0:19:15.120
it comes to the lineage of EasyMesh, that's a whole different story. And why it's based

169
0:19:15.120 --> 0:19:19.680
on 1905, it was essentially a few companies that got together and said, what are we going

170
0:19:19.680 --> 0:19:23.920
to do? Are we going to do it at layer two? Are we going to do it at layer three? And

171
0:19:23.920 --> 0:19:29.560
it's mostly based on internal pressures of, well, we have something that's 1905 based.

172
0:19:29.560 --> 0:19:34.360
It works together with our power line devices already. Let's use that as a basis. It wasn't

173
0:19:34.360 --> 0:19:43.800
too fond of it, but VHS versus Betamaxa and V2000, right? So to me, I still see value

174
0:19:43.800 --> 0:19:51.880
in HomeNet in trying to get some of the concepts in there. Now, the other problem with HomeNet,

175
0:19:51.880 --> 0:19:55.360
and I had the discussion with the chair at the time as well, is this mentality that there

176
0:19:55.360 --> 0:20:03.600
was that every access point had its own IP range rather than what the reality is in a

177
0:20:03.600 --> 0:20:08.200
wireless network in a home, which is that it's all a layer two. It's all one single

178
0:20:08.200 --> 0:20:13.120
layer two. If you do this steering that's really explained by our device in milliseconds

179
0:20:13.120 --> 0:20:19.440
switches from one access point to another while consistently maintaining a video call

180
0:20:19.440 --> 0:20:23.240
or something like that, you're not going to get a different IP address. You're not going

181
0:20:23.240 --> 0:20:28.000
to restart your TCP connection or whatever. It doesn't make any sense. So doing this at

182
0:20:28.000 --> 0:20:35.760
layer two just makes a lot more sense than the HomeNet concept of multiple segments and

183
0:20:35.760 --> 0:20:45.680
passing on from there. So HomeNet does have the advantage that you don't need special

184
0:20:45.680 --> 0:20:53.720
hardware support in supporting the four frame 802.11 to get the data along. I do actually

185
0:20:53.720 --> 0:20:57.280
agree with most of your points, and I think that the best solution is somewhere in the

186
0:20:57.280 --> 0:21:03.440
middle between the two because this is so Wi-Fi centric that it can't really support

187
0:21:03.440 --> 0:21:10.480
things that aren't Wi-Fi, but it is better for Wi-Fi itself, which I think is to a good

188
0:21:10.480 --> 0:21:14.680
degree your point, especially with the mobility. So the question is, is it possible to build

189
0:21:14.680 --> 0:21:24.960
both into one thing maybe? Let's continue this conversation. Yes, so right. So the it's

190
0:21:24.960 --> 0:21:28.320
that's the nice thing of being in based on so Wi-Fi Alliance has focused purely on the

191
0:21:28.320 --> 0:21:34.640
wireless side. The rest of us are making sure that wired connections retain support, especially

192
0:21:34.640 --> 0:21:42.280
Ethernet. Now, the good thing about 1905 is that it is a protocol that supports also other

193
0:21:42.280 --> 0:21:49.080
not only Ethernet, but also other things. 1905.1a added standard support for G.HN. You could

194
0:21:49.080 --> 0:21:55.240
have so there's a modeling for on top of Mocha. So you have you can have coax a twisted pair,

195
0:21:55.240 --> 0:22:01.080
an intern in home fiber, etc. protocols are all supported. We just need to keep the Wi-Fi

196
0:22:01.080 --> 0:22:06.000
Alliance almost from time to time because they're modeling using Wi-Fi Wi-Fi Alliance

197
0:22:06.000 --> 0:22:11.080
data elements of the network. Topology tends to ignore everything that's not wireless.

198
0:22:11.080 --> 0:22:16.200
But when it comes to supporting network ports on a particular switch, etc. That's all that

199
0:22:16.200 --> 0:22:21.360
all comes natively in 1905. So that's fully supported by by easy mesh. And we make sure

200
0:22:21.360 --> 0:22:29.000
that that is supported in purple mesh. Indeed, that is indeed very important. We try to go

201
0:22:29.000 --> 0:22:39.040
beyond Wi-Fi. You mentioned that most hardware is not compatible, but can you give some examples

202
0:22:39.040 --> 0:22:52.560
maybe which hardware is? Yeah. So what I think Qualcomm is tends to be fairly good about

203
0:22:52.560 --> 0:23:04.800
their hardware drivers. Broadcom is not as good. So yeah, a message for anyone considering

204
0:23:04.800 --> 0:23:17.120
basing trying to make a new SOC avoid Broadcom. A bit more detail. I did get Broadcom to agree

205
0:23:17.120 --> 0:23:22.280
to support this as well. And it is supported. There are some gaps in what the proprietary

206
0:23:22.280 --> 0:23:27.160
drivers support at the moment and what they supported in a later 2011. So Linux wireless

207
0:23:27.160 --> 0:23:31.440
does need to get upset. We've identified the gaps and we hope to work with the with the

208
0:23:31.440 --> 0:23:35.960
host AP and the Linux wireless community fix that. Now me as an operator, I've given it

209
0:23:35.960 --> 0:23:41.560
a hard requirements to all our silicon vendors who want to do a gateway or an access point

210
0:23:41.560 --> 0:23:47.680
that they must comply with this. And we do have general support for it. It's just that

211
0:23:47.680 --> 0:23:52.400
every time there's a new standard coming out, such as Wi-Fi seven now that they first develop

212
0:23:52.400 --> 0:23:56.560
proprietary interfaces and we need to keep them on the right track. That's a bit of the

213
0:23:56.560 --> 0:24:01.560
that's the challenge, essentially. I did mention before that the purple foundation is also

214
0:24:01.560 --> 0:24:08.840
involved in trying to set standards for for Wi-Fi drivers and low level API. That's my

215
0:24:08.840 --> 0:24:13.200
part of the low level API. This definition of that's I'm the chair of that to make sure

216
0:24:13.200 --> 0:24:22.520
that they're that's all the proprietary silicon uses standard Linux interfaces. Some more

217
0:24:22.520 --> 0:24:36.360
questions. Someone over there. Yeah. Hello. In terms of vulnerability management, is there

218
0:24:36.360 --> 0:24:42.560
a way for the agents to be updated from the central agent or in some other way without

219
0:24:42.560 --> 0:24:50.400
losing connectivity or would would the need to patch something because everything to drop.

220
0:24:50.400 --> 0:24:57.840
So if I understand correctly, the question is where it's possible to steer a device without

221
0:24:57.840 --> 0:25:02.400
causing the connection to drop. Right. Either steer it or because you said that it's highly

222
0:25:02.400 --> 0:25:07.420
demanding on the wireless driver to to do that. So I'm guessing that in case you also

223
0:25:07.420 --> 0:25:12.180
need to patch something you're risking the connection. So is there some handling internally

224
0:25:12.180 --> 0:25:17.520
to ensure that even during an update could be a rolling update, for example, one agent

225
0:25:17.520 --> 0:25:21.920
at a time or something like that. Is there some like provision to make sure that it's

226
0:25:21.920 --> 0:25:27.760
not gonna cost connectivity if it doesn't update or is something that's still not being

227
0:25:27.760 --> 0:25:36.360
developed yet. I think if you reconfigure a network like change as I this and so on

228
0:25:36.360 --> 0:25:46.240
connection will drop. No. Okay. Yeah. My apologies. I'm not I'm not super into all the technical

229
0:25:46.240 --> 0:25:53.240
details. But apparently there are ways there are ways to manage that and so that your connections

230
0:25:53.240 --> 0:26:01.520
are not dropping. And I should also mention the virtual BSS projects, which we are also

231
0:26:01.520 --> 0:26:09.000
collaborating on with with an organization called cable apps. And there the goal is to

232
0:26:09.000 --> 0:26:18.800
have a single virtual AP per device. So basically an AP that follows your device around by by

233
0:26:18.800 --> 0:26:23.880
means of by way of speaking. So it means that your phone, for instance, will always see

234
0:26:23.880 --> 0:26:30.280
the same AP regardless of where you go. And and this means that no connections ever need

235
0:26:30.280 --> 0:26:35.440
to get dropped when you move around. This is also a very interesting project that we

236
0:26:35.440 --> 0:26:43.400
are working on at the moment. So this, yeah. But yeah, in general, no, the answer to your

237
0:26:43.400 --> 0:26:54.280
questions is no, the connection doesn't need to drop. Any more questions? So it is all

238
0:26:54.280 --> 0:26:59.560
very interesting. The question is, is there any off the shelf equipment, which are more

239
0:26:59.560 --> 0:27:06.960
so it's made, right? Yes, we have some some reference hardware that you can just buy on

240
0:27:06.960 --> 0:27:14.200
Amazon or other places. This sort of separately available that you can test the permission.

241
0:27:14.200 --> 0:27:21.080
Yes. So we have two reference devices, the G line, it's B13 hundreds and the two is only

242
0:27:21.080 --> 0:27:27.520
are that are readily available. And we will be adding more in the future as well. And

243
0:27:27.520 --> 0:27:41.480
I guess it is mentioned somewhere. So yes. So if you if you go to our to our page for

244
0:27:41.480 --> 0:27:46.960
purple mesh, we have a lot of documentation on the wiki, including documentation about

245
0:27:46.960 --> 0:28:00.960
which hardware to get. So I think, you know, so, yeah, actually, I had it there. So we

246
0:28:00.960 --> 0:28:07.440
have in the getting started guides, we have a section here on device purchasing options.

247
0:28:07.440 --> 0:28:15.720
So as you can see, I would recommend the tourism and the G line. It's the net gear Rex 40 is

248
0:28:15.720 --> 0:28:20.800
no longer really supported because it's it lacks a crucial feature that's required for

249
0:28:20.800 --> 0:28:36.680
wireless back also, I would not recommend that one. Okay, thank you. My questions. I

250
0:28:36.680 --> 0:28:47.720
think we're good. There are no more questions for you. Thank you very much for the presentation.


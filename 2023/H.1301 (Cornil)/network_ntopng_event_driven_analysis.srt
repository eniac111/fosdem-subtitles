1
0:00:00.000 --> 0:00:14.480
Okay, good morning. This time it's our turn to talk about something different, end-to-end

2
0:00:14.480 --> 0:00:22.480
G. What is end-to-end G? It's an open source application, of course, we are here. And you

3
0:00:22.480 --> 0:00:29.680
can download the code on GitHub, you'll see the link at the end of the talk. What is end-to-end

4
0:00:29.680 --> 0:00:33.960
G doing? It is, first of all, a real-time network traffic monitoring application. So

5
0:00:33.960 --> 0:00:39.400
it means that it displays you on a web interface what is happening in your network live. Okay,

6
0:00:39.400 --> 0:00:45.160
no delay. This unless, of course, we are receiving flows coming from a router that are somehow

7
0:00:45.160 --> 0:00:51.600
a little bit delayed because by nature they are on average, so they have a certain lifetime.

8
0:00:51.600 --> 0:00:56.080
And it is designed for network monitoring and cybersecurity. It means that there are

9
0:00:56.080 --> 0:01:02.160
some behavioral checks. So we are not bound to rules. You have seen Surikata presentation

10
0:01:02.160 --> 0:01:07.640
before. You see there are some rules in case this happens then. So this is not our case.

11
0:01:07.640 --> 0:01:13.240
So we work based on behavior. So it means that if you have a host that is misbehaving,

12
0:01:13.240 --> 0:01:17.000
more or less similar to what you have seen before, that suddenly start to send too much

13
0:01:17.000 --> 0:01:24.160
traffic with respect to the past or starting to, you know, fire up a new application. So

14
0:01:24.160 --> 0:01:31.040
accept connection on a certain port for TLS that was not open before. This is a typical

15
0:01:31.040 --> 0:01:37.800
example. So therefore it means that the application simply starts up and learns what is happening

16
0:01:37.800 --> 0:01:43.600
on the network. There are some levels of learning. So sometime it is an immediate learning because,

17
0:01:43.600 --> 0:01:48.720
you know, you specify some sort of configuration. But usually this is not the case. The case

18
0:01:48.720 --> 0:01:53.560
is that the application learns what is happening in case something goes wrong, goes different,

19
0:01:53.560 --> 0:02:03.120
fires up an alert. This is the idea. And the architecture is actually divided in two parts.

20
0:02:03.120 --> 0:02:09.720
First of all, the pocket processing part. That is based on more or less PF ring or lead

21
0:02:09.720 --> 0:02:15.840
pickup. So this means that you can run Windows, Linux, MacOS, FreeBSD, whatever. Instead,

22
0:02:15.840 --> 0:02:21.040
PF ring is something that we have co-developed that is a Linux technology for accelerating

23
0:02:21.040 --> 0:02:26.120
packet capture. But not only for that, but also for merging traffic for multiple adopters,

24
0:02:26.120 --> 0:02:32.440
for distributing traffic. So it's much more than simply RX acceleration. On top of this,

25
0:02:32.440 --> 0:02:36.640
there is an open source library that we still maintain at the end of call NDPI. So this

26
0:02:36.640 --> 0:02:40.400
is the only open source library that is doing the pocketing spectrum. But for us, it means

27
0:02:40.400 --> 0:02:45.040
that we try to understand from the traffic what is the application protocol. So if it's

28
0:02:45.040 --> 0:02:52.880
TLS, if it's a generic protocol, if it's Google MA, but it's a very specific protocol. And

29
0:02:52.880 --> 0:02:57.840
out of the traffic, we extract the metadata. So for instance, we extract certificate information

30
0:02:57.840 --> 0:03:03.360
and we generate something we call risk. So we're looking at the traffic, we see if there

31
0:03:03.360 --> 0:03:08.440
is something wrong, okay, such as an expired certificate just to give you an idea. And

32
0:03:08.440 --> 0:03:13.480
we trigger an alert. On top of this, there is a top NG because this is the first part

33
0:03:13.480 --> 0:03:18.520
that is basically provided by the operating system. And top NG has a C++ engine that is

34
0:03:18.520 --> 0:03:25.080
processing packets that is, in essence, doing traffic analysis creates internally, okay,

35
0:03:25.080 --> 0:03:29.120
the representation of the data based on the concept of network interfaces because we can

36
0:03:29.120 --> 0:03:33.280
have a multiple network interfaces from which the traffic is received. It can be a virtual

37
0:03:33.280 --> 0:03:38.880
interface such as, you know, NetFlow collection or a physical interface, ETH0. And then we

38
0:03:38.880 --> 0:03:43.800
have something we call behavioral checks, where we check flows and host. Flows means

39
0:03:43.800 --> 0:03:50.600
that each independent communication such as a TCP connection is checked. Instead, a host,

40
0:03:50.600 --> 0:03:55.320
we take the host as a whole. So in essence, if host is doing a port scan, each individual

41
0:03:55.320 --> 0:04:01.000
communication is okay or more or less okay. But the fact that this host is doing this,

42
0:04:01.000 --> 0:04:05.600
you know, in a sequence, in a network, on a host, it's a problem. So this is called

43
0:04:05.600 --> 0:04:10.360
behavioral checks. And on top of this, we trigger alerts, okay, that can be consumed

44
0:04:10.360 --> 0:04:16.720
locally or sent elsewhere. This is the first part. On top of this, we have the Lua interface,

45
0:04:16.720 --> 0:04:23.840
why Lua? Because we like C++, but C++ is something not for everybody, okay? So we need

46
0:04:23.840 --> 0:04:28.080
to simplify, for instance, the development of the web interface. So for instance, the

47
0:04:28.080 --> 0:04:33.460
REST API is written in Lua sitting on top of C++. So we have created an API that allows

48
0:04:33.460 --> 0:04:39.160
us to avoid typical problems of C++. At the same time, we simplify the way the application

49
0:04:39.160 --> 0:04:46.000
is working. So therefore, we use Lua for operations that are not critical, such as the Web GUI

50
0:04:46.000 --> 0:04:52.760
or for checking interfaces that are not necessarily real time. So for the SNMP, for SNMP, we fetch

51
0:04:52.760 --> 0:05:00.320
the data every five minutes and do the checks. So traffic injection, as I said, is done in

52
0:05:00.320 --> 0:05:07.200
multiple ways. Sometime in serial traffic, so packets. Sometime it is not. It's a flaw.

53
0:05:07.200 --> 0:05:14.360
And it is handled by the C++ engine. So the C++ engine is doing it efficiently. And then

54
0:05:14.360 --> 0:05:19.440
we have other type of ingestions based on events. So something that we don't really

55
0:05:19.440 --> 0:05:24.800
control completely, but that are relevant for us. So we have seen Surikata, the presentation

56
0:05:24.800 --> 0:05:32.080
before, some minutes ago. This is a typical example of input. Why this? Because as I said

57
0:05:32.080 --> 0:05:36.880
at the beginning, we don't have rules. We don't want to have rules. So we don't want

58
0:05:36.880 --> 0:05:43.320
to say if the payload contains this and this and this and this then. Because we don't believe

59
0:05:43.320 --> 0:05:47.280
that this is what we should do. Instead, there are wonderful tools such as Surikata that

60
0:05:47.280 --> 0:05:51.720
are doing that very well. So therefore, the idea is to combine natural monitoring and

61
0:05:51.720 --> 0:05:56.040
behavior analysis with this type of tools. So therefore, indirectly, through tools as

62
0:05:56.040 --> 0:06:01.800
Surikata is optional. Of course, you don't have to run it with Ntoppenji monitoring.

63
0:06:01.800 --> 0:06:06.920
You can have this type of information that can be combined directly by Ntoppenji. Of

64
0:06:06.920 --> 0:06:12.880
course, we have five more logs and syslog. Why this is important? Because we can have

65
0:06:12.880 --> 0:06:17.320
a look at information that is not visible from the traffic. So we always play with packets

66
0:06:17.320 --> 0:06:23.680
like mine and Osprego. But we understand that packets have limitations, especially for encryption.

67
0:06:23.680 --> 0:06:27.880
So we have seen before, a rule saying if you are downloading a binary application. That

68
0:06:27.880 --> 0:06:33.560
is fine if it's plain text. But if TLS, you will never see that happen. So you have to

69
0:06:33.560 --> 0:06:40.040
use things as a rule on top of this, on top of this, but they are just guesses. So instead,

70
0:06:40.040 --> 0:06:45.560
if through syslog or other means, we know that. So for example, we see an attacker or

71
0:06:45.560 --> 0:06:49.240
a WordPress saying that this host is trying to guess the password of the administrator

72
0:06:49.240 --> 0:06:53.080
user. This is much relevant information. And from the network standpoint, it looks simply

73
0:06:53.080 --> 0:06:58.360
nice. Everything is OK. The problem is from the application. That's why we believe in

74
0:06:58.360 --> 0:07:02.480
network. But at the same time, we need to have some other information that is injected

75
0:07:02.480 --> 0:07:07.880
into the application. And of course, we have historical data. We use a database called

76
0:07:07.880 --> 0:07:13.880
Clickhouse. So we can put a billion of records. Everything is working very fast. This is also

77
0:07:13.880 --> 0:07:22.960
an open source database. And for time series, we use round-robin database or InfluxDB. And

78
0:07:22.960 --> 0:07:28.880
as I said before, we have checks that are divided in two parts. C++ for efficiency.

79
0:07:28.880 --> 0:07:34.480
So the fast part, in essence, where you have to process traffic in line, such as when you

80
0:07:34.480 --> 0:07:39.360
have a packet, an incoming packet, you have to check if this packet belonging to a flow

81
0:07:39.360 --> 0:07:47.320
is relevant. And then we have other type of checks that are not so real time. So for a

82
0:07:47.320 --> 0:07:54.000
check on an SNMP interface that need to be easy to be developed. But at the same time,

83
0:07:54.000 --> 0:07:58.200
that don't need to be fast. Because as I said, if we pull SNMP in five minutes, we have plenty

84
0:07:58.200 --> 0:08:04.360
of time for doing that. And of course, we have notification that we send out. So for

85
0:08:04.360 --> 0:08:09.720
things, we trigger a shell script, a webhook, syslog, email, telegram, you know, usually

86
0:08:09.720 --> 0:08:14.320
things. Nothing new here. Okay, let's now start the talk after this introduction of

87
0:08:14.320 --> 0:08:21.240
Ntof-NG. The problem is the following. So we have added over 150 checks, behavioral

88
0:08:21.240 --> 0:08:26.040
checks on the traffic. But there is always somebody that comes and says, I want to do

89
0:08:26.040 --> 0:08:32.080
something different. How can we support these people? How can we enable new programmers

90
0:08:32.080 --> 0:08:36.880
or let's say people that used to use Python, shell script, you know, this type of running

91
0:08:36.880 --> 0:08:42.920
language or that don't want to learn the antennas of our application? How can we do that? And

92
0:08:42.920 --> 0:08:47.400
many times this happens when you are in a rush. So there is an attack. There is something

93
0:08:47.400 --> 0:08:54.040
happening on your network that you want to check. And we have, you know, two levels of

94
0:08:54.040 --> 0:08:58.760
the problem. First of all, we have to extend the behavioral checks in order to have some

95
0:08:58.760 --> 0:09:04.560
behavioral detection in a different way. And in the second part that Alfredo will describe

96
0:09:04.560 --> 0:09:10.280
later. So how can we use Ntof-NG as a data lake from languages such as Python, for instance,

97
0:09:10.280 --> 0:09:16.200
that is very popular? So that you can use Ntof-NG as a source of data for your application.

98
0:09:16.200 --> 0:09:22.000
Of course, you have time series. As I said, we save data in InfluxDB if you want. So therefore

99
0:09:22.000 --> 0:09:26.240
you can use Grafana for creating your own dashboard. But these are simple dashboards.

100
0:09:26.240 --> 0:09:30.080
So if we want to do something more complicated, if we want to go beyond that, in addition

101
0:09:30.080 --> 0:09:38.640
to that, how can we do that? So this is the idea today. So we like C++. C++ is super efficient.

102
0:09:38.640 --> 0:09:44.520
We like it. Okay. We are used to play with it since many years. But we understand that

103
0:09:44.520 --> 0:09:49.920
it's not what everybody wants. Okay. We need something easier. And we would like to understand

104
0:09:49.920 --> 0:09:56.280
also how it was possible to develop checks in minutes for people who are saying, okay,

105
0:09:56.280 --> 0:10:00.760
if I see this specific certificate or if I see this specific behavior, then there is

106
0:10:00.760 --> 0:10:06.240
a problem. Something very peculiar to an organization. So not general for everybody, but for specific

107
0:10:06.240 --> 0:10:10.460
people. So for instance, how do I trigger an alert if there is traffic, TLS traffic

108
0:10:10.460 --> 0:10:14.720
within host A and B? So for instance, a printer should not make any TLS traffic just to make

109
0:10:14.720 --> 0:10:20.280
an example. So if this happens and how can I trigger an alert? Another problem is the

110
0:10:20.280 --> 0:10:26.040
following. If I have a certificate signed by a certain organization, or for instance,

111
0:10:26.040 --> 0:10:31.680
if I have a bit tolerant connection is going above one gigabit or notify me if there is

112
0:10:31.680 --> 0:10:37.480
a zoom call with bad quality, things like this, things like, you know, very, very peculiar,

113
0:10:37.480 --> 0:10:44.160
very specific checks that people wants to do. Maybe on an operating, sorry, on autonomous

114
0:10:44.160 --> 0:10:49.720
system and not on another or an network and not to another. So things that are not general

115
0:10:49.720 --> 0:10:55.880
that we can implement for everybody. How can we do that? So let me talk how it works in

116
0:10:55.880 --> 0:11:01.160
top NGA internally. Let's have a look at the flow. Also our communication. So on top NGA

117
0:11:01.160 --> 0:11:06.560
creates a data structure inside itself as soon as we see the first packet of the flow.

118
0:11:06.560 --> 0:11:11.880
So we see IP source, IP destination, source parts of destination, protocol, VLAN, whatever.

119
0:11:11.880 --> 0:11:17.200
And then this is the first event that is relevant for us. And then as I said, everything sits

120
0:11:17.200 --> 0:11:23.320
on top of NDPI, so the yellow part. So we have another event when the application protocol

121
0:11:23.320 --> 0:11:28.240
is detected. Actually, this one is divided in two parts. First of all, as soon as the

122
0:11:28.240 --> 0:11:34.560
main protocol is detected, such as TLS, okay, and then we can refine this information with

123
0:11:34.560 --> 0:11:39.240
metadata saying, okay, this is TLS that is going to Google mail and not Google search

124
0:11:39.240 --> 0:11:44.880
or Google something else, okay. So second event and NDPI. And then we have for long-standing

125
0:11:44.880 --> 0:11:51.320
flows some periodic activities. So in essence every minute we do something different, something

126
0:11:51.320 --> 0:11:56.840
like I want to trigger an action. And then at the end, the flow and notification. So

127
0:11:56.840 --> 0:12:05.160
as soon as the flow is over. So what we wanted to do, we wanted to create a low API that

128
0:12:05.160 --> 0:12:10.280
allows people to create the simple checks that are efficient, efficient enough for most

129
0:12:10.280 --> 0:12:14.000
people because not everybody needs one on the gigabit, but many people have one gigabit

130
0:12:14.000 --> 0:12:19.840
networks or, you know, two, five gigabit networks. So they have, they need some sort of efficiency,

131
0:12:19.840 --> 0:12:24.360
but they are not super extreme. So let's say use Lua for prototyping a check for some

132
0:12:24.360 --> 0:12:29.200
people who need speed or use Lua for people who have, let's say, an industrial network

133
0:12:29.200 --> 0:12:35.440
or a network that is, you know, running at one gigabit or two. So in essence we have created

134
0:12:35.440 --> 0:12:42.960
an API that allows from Lua to see internally in NtopNG properties of the flow. For example,

135
0:12:42.960 --> 0:12:47.760
the number of bytes, multicast, layers seven information, this type of things. And the

136
0:12:47.760 --> 0:12:53.320
API calls are very small. So in essence we don't want, you know, the application to be

137
0:12:53.320 --> 0:12:58.200
inefficient simply because we download to Lua the representation of the host, the representation

138
0:12:58.200 --> 0:13:03.000
of the flow. Simply the method that we are interested in. So in the left side you will

139
0:13:03.000 --> 0:13:07.040
see the C++ code, how it implements the stuff. On the right side you will see an example

140
0:13:07.040 --> 0:13:14.280
of the Lua code. So in this case, just to give you an idea of how it works, so whenever

141
0:13:14.280 --> 0:13:17.560
there is one of the events, so for instance we have to check the flow because, you know,

142
0:13:17.560 --> 0:13:22.480
NDPI is over, so the protocol has been detected. So if you want to block, let's say, a Google

143
0:13:22.480 --> 0:13:29.640
Mail, okay, so what you need to do is to execute a Lua check after this happened. So in essence

144
0:13:29.640 --> 0:13:35.920
inside the C++ code we have put the code to the Lua VM that executes a script. A script

145
0:13:35.920 --> 0:13:42.520
can be applied to many flows, not just for one. So this is where this happens. And this

146
0:13:42.520 --> 0:13:47.560
is an example of a check. So with a simple example, if you have a flow that is either

147
0:13:47.560 --> 0:13:59.640
TLS or QUIC, started from host 192.68.1.178.2.1.1, and if it's TLS and if the protocol issue

148
0:13:59.640 --> 0:14:07.480
is, so a very simple check that a friend of mine has asked because it's monitoring IoT

149
0:14:07.480 --> 0:14:15.080
networks and they found a vulnerability on a specific type of rule and the client was

150
0:14:15.080 --> 0:14:20.520
a specific device. So something that is not JIRA. Okay, so this is the way it works. Very

151
0:14:20.520 --> 0:14:24.840
simple to write. The problem is the following. That the overhead introduced, this is a very

152
0:14:24.840 --> 0:14:29.800
slow Intel I3, so just to give you an idea of the super-waste case, is 30 microseconds

153
0:14:29.800 --> 0:14:35.400
for everything, okay, in average. Whereas with C++ we can do it in one microsecond.

154
0:14:35.400 --> 0:14:41.400
Now you say this is bad. In a way it is bad, I agree, because we are 30 times lower. But

155
0:14:41.400 --> 0:14:45.400
you have to think, first of all, on one gigabit networks that this is not the problem. Also

156
0:14:45.400 --> 0:14:49.960
you have to think that most of these checks are asynchronous. This is one of the few ones

157
0:14:49.960 --> 0:14:54.280
that are synchronous. So in essence, as soon as the protocol has been detected, we call

158
0:14:54.280 --> 0:14:58.640
this method. But it is not why the packets are coming. So in essence, we have another

159
0:14:58.640 --> 0:15:03.800
threat that is calling this while the traffic is coming. But we don't stop the execution

160
0:15:03.800 --> 0:15:08.520
tree. So in essence, just to make it short, so if you take this overhead that you have

161
0:15:08.520 --> 0:15:13.800
introduced and you sum to everything and you stay below certain boundaries, so if you want

162
0:15:13.800 --> 0:15:18.600
for every minute to execute the flow checks on all the flows, you are good, okay. And

163
0:15:18.600 --> 0:15:23.760
of course we trigger another. And the result of the alert is a notification on the GUI

164
0:15:23.760 --> 0:15:28.280
that can be sent, for instance, through Microsoft Teams, just to give you an idea. Or we can

165
0:15:28.280 --> 0:15:33.480
trigger a shell script for something or can send an alert to my friend on Telegram. So

166
0:15:33.480 --> 0:15:41.320
this is the way it works. Okay, now I have this. Okay, so we have seen how to extend

167
0:15:41.320 --> 0:15:47.560
the Entopng engine with lower scripts to access traffic information and use those information

168
0:15:47.560 --> 0:15:54.080
to check the traffic and trigger alerts, for instance. Now recently released also a Python

169
0:15:54.080 --> 0:16:00.920
package that you can install with pip install Entopng that allows you to, you can use it

170
0:16:00.920 --> 0:16:09.760
as a library to create a Python script which is able to access traffic information in Entopng.

171
0:16:09.760 --> 0:16:13.920
And this happens through the REST API. This means that you can run your script even on

172
0:16:13.920 --> 0:16:23.040
a remote location. For example, you can access live data in Entopng. In this case, we're

173
0:16:23.040 --> 0:16:30.000
importing the Entopng class. We are connecting to Entopng using the Entopng class. We get

174
0:16:30.000 --> 0:16:37.760
an instance of an interface, Entopng, for instance, ETH0. We use this method to get

175
0:16:37.760 --> 0:16:44.240
all the hosts which are active in my network with all the metadata. And there are plenty

176
0:16:44.240 --> 0:16:48.760
of methods in this class or in another class in this library that allows you to get traffic

177
0:16:48.760 --> 0:16:57.560
information. So you can get alerts, flows, hosts, whatever. And you can also get historical

178
0:16:57.560 --> 0:17:02.800
data. So same way, you connect to Entopng, you get an interface. From this interface,

179
0:17:02.800 --> 0:17:07.760
you get an instance of the historical class. And you can run queries in the database. For

180
0:17:07.760 --> 0:17:13.320
instance, you can get alert statistics from this time to this time, for instance, for

181
0:17:13.320 --> 0:17:21.640
the last 24 hours and just print all the alerts that you have.

182
0:17:21.640 --> 0:17:30.080
Now those are two examples of querying the engine to get the data. Of course, we have

183
0:17:30.080 --> 0:17:37.520
seen that Entopng is able to run a check or an external event that takes something, an

184
0:17:37.520 --> 0:17:42.960
event. We can trigger an alert. And we have seen that Entopng supports several endpoints.

185
0:17:42.960 --> 0:17:51.560
So we can send this alert using mail, a messaging system like telegrams, like we can run a share

186
0:17:51.560 --> 0:17:58.000
script, we can call a webbook. So we can run a share script, for instance. And this script

187
0:17:58.000 --> 0:18:03.160
can be a Python script.

188
0:18:03.160 --> 0:18:09.480
So let's try to put all the pieces together. So we receive an event, which is generated

189
0:18:09.480 --> 0:18:15.640
by an internal check or an external check. This event can call a Python script. This

190
0:18:15.640 --> 0:18:21.480
Python script can get information from the alert itself or can query the engine through

191
0:18:21.480 --> 0:18:28.920
these API that we created to get more data, to fetch more data and argument the alert information.

192
0:18:28.920 --> 0:18:36.320
And this can have some logic and trigger some action. So you can write your actions here

193
0:18:36.320 --> 0:18:38.880
to react to this event.

194
0:18:38.880 --> 0:18:42.480
In order to implement these, what you have to do in Entopng is, first of all, you have

195
0:18:42.480 --> 0:18:48.040
to enable the check that you want to use to analyze the traffic. For instance, in this

196
0:18:48.040 --> 0:18:58.840
case, we are using a custom check that the user creates in Lua's look up here before.

197
0:18:58.840 --> 0:19:03.840
Then if you want to write your Python script that reacts to this event, you have to write

198
0:19:03.840 --> 0:19:10.720
an alert tender, which is a script that you place on the Entopng script shell. And this

199
0:19:10.720 --> 0:19:16.360
case is a simple script, which is just getting in a standard input the traffic information,

200
0:19:16.360 --> 0:19:22.840
metadata. And for instance, if the other type is our user script, I want to do something.

201
0:19:22.840 --> 0:19:29.360
In this case, I'm just logging the IP address related to the host that triggered the alert

202
0:19:29.360 --> 0:19:34.360
and a message from our custom script.

203
0:19:34.360 --> 0:19:39.480
Then you have to go inside Entopng. You go under notifications. You set that you want

204
0:19:39.480 --> 0:19:45.960
to send alerts to the shell script. Here you have all the options like email, whatever.

205
0:19:45.960 --> 0:19:50.840
You select your handler. And then you specify for your handler that you want to receive

206
0:19:50.840 --> 0:19:56.120
just critical alerts. So you specify the severity. You specify the category that you want to

207
0:19:56.120 --> 0:20:01.040
have alerts that you want to handle, in this case, cybersecurity and the entity. In this

208
0:20:01.040 --> 0:20:08.000
case, I want to handle alerts about hosts.

209
0:20:08.000 --> 0:20:13.600
And then we can extend our handler. We have seen how to print just the alert information,

210
0:20:13.600 --> 0:20:21.040
but we can, again, we can use our Python library, Entopng, to access more information about

211
0:20:21.040 --> 0:20:26.920
the host. So we receive this alert, which has been triggered on a specific host in our

212
0:20:26.920 --> 0:20:32.640
network. For instance, this host has been infected by a malware. It's generating unexpected

213
0:20:32.640 --> 0:20:39.920
traffic, whatever. We want to get more information about this host to build the report, for instance.

214
0:20:39.920 --> 0:20:43.800
In fact, in our library, we also have the ability to generate a report, or you can generate

215
0:20:43.800 --> 0:20:52.440
your own report using the API that we have. So we build this report and send an email.

216
0:20:52.440 --> 0:20:57.520
So this is a simple script that you can use. It's a few lines of code to handle alerts

217
0:20:57.520 --> 0:21:05.480
and generate reports and get, for instance, an email or your mobile phone with the alert.

218
0:21:05.480 --> 0:21:11.600
So this is the big picture of the example that we are seeing right now. So we have defined

219
0:21:11.600 --> 0:21:18.840
user script that triggers an alert, or we receive, again, events from any other source

220
0:21:18.840 --> 0:21:24.660
or internal checks. We are calling our script, which is getting more information from the

221
0:21:24.660 --> 0:21:30.920
engine to build the report and send this report by mail. So the result is this. So the system

222
0:21:30.920 --> 0:21:36.440
is checking your traffic, is building a report when something happens, and will send you

223
0:21:36.440 --> 0:21:42.640
an email with a report of the traffic for the host with the top alerts sorted by severity

224
0:21:42.640 --> 0:21:48.400
or by count, the top contacts for the host, the chart of the traffic generated by the

225
0:21:48.400 --> 0:21:55.720
host where you can add more, like the top applications used by the host, et cetera.

226
0:21:55.720 --> 0:22:01.200
Do you want to wrap up? OK. So we have seen that within TopNG you can collect traffic

227
0:22:01.200 --> 0:21:57.720
information from traffic, flows, events, events from S

228
0:22:05.720 --> 0:22:14.280
udigada, for instance, et cetera. And when we started with, actually, Luca started with

229
0:22:14.280 --> 0:22:20.080
on top, then we moved to TopNG. It was mainly a traffic monitoring tool. Today is also a

230
0:22:20.080 --> 0:22:28.080
cyber security tool able to do behavioral checks, not just for providing visibility,

231
0:22:28.080 --> 0:22:35.120
but also providing cyber security monitoring. And you're now able to extend this engine

232
0:22:35.120 --> 0:22:44.120
both with your scripts integrated in TopNG or even with C++ plugins, let's say checks,

233
0:22:44.120 --> 0:22:52.400
if you need to scale with performance, or you can use our Python library to write Python

234
0:22:52.400 --> 0:23:00.320
tools that can run externally, even remote boxes to access traffic information in the

235
0:23:00.320 --> 0:23:06.040
TopNG engine and be, for instance, a PDF, as we have seen, with reporting what's going

236
0:23:06.040 --> 0:23:10.520
on in your network. Of course, all the code is available on GitHub. So if you want to

237
0:23:10.520 --> 0:23:20.680
contribute, you are welcome, especially now you don't have excuses. We have a lot of libraries,

238
0:23:20.680 --> 0:23:26.120
scripting languages for interacting with the engine. So something else to add?

239
0:23:26.120 --> 0:23:31.120
No. The only thing I want to say is that this is an efficient way from our point of view

240
0:23:31.120 --> 0:23:36.240
to do network monitoring and cyber security, and at the same time to extract information

241
0:23:36.240 --> 0:23:41.720
in a way that does not interfere with the main engine that allows, I believe, most of

242
0:23:41.720 --> 0:23:45.880
people sitting in this room to do whatever they like to create a monitoring tool that

243
0:23:45.880 --> 0:23:50.880
is tailored for their own needs. And that's a fair set that is open source. That's all.

244
0:23:50.880 --> 0:24:01.880
Thank you very much. Any questions?

245
0:24:01.880 --> 0:24:10.240
It's just a simple question. How does it compare with CN2s? It looks like it does everything

246
0:24:10.240 --> 0:24:11.360
CN2s.

247
0:24:11.360 --> 0:24:12.360
CN2s.

248
0:24:12.360 --> 0:24:17.880
Yeah. I don't know the tools.

249
0:24:17.880 --> 0:24:18.880
No problem.

250
0:24:18.880 --> 0:24:21.920
I am not familiar with them.

251
0:24:21.920 --> 0:24:22.920
Any other question?

252
0:24:22.920 --> 0:24:47.800
The scripts can be compiled to be more performant, or do you not have this task in your develop

253
0:24:47.800 --> 0:24:57.800
timeline, to compile scripts to have more performance? Lua script or like CCC, we saw

254
0:24:57.800 --> 0:25:07.680
that CCC script take one millisecond, but the Lua script take 30 milliseconds. Microsens.

255
0:25:07.680 --> 0:25:08.680
Okay.

256
0:25:08.680 --> 0:25:16.360
Yes, of course. You can compile them, but you have to call it in C++ at the moment.

257
0:25:16.360 --> 0:25:21.520
So we use Lua just in time to compile the one seen before by some switch, but it is

258
0:25:21.520 --> 0:25:25.760
not available everywhere for its own arm, and we want to support it as berries. So yes,

259
0:25:25.760 --> 0:25:31.040
it is possible, but again, these are microseconds, not milliseconds. So one million of them per

260
0:25:31.040 --> 0:25:32.040
second.

261
0:25:32.040 --> 0:25:36.200
Any questions? Anybody else?

262
0:25:36.200 --> 0:25:50.200
Hi. Thank you. Do you have some figures about performance you are able to achieve on typical

263
0:25:50.200 --> 0:26:00.080
server about flow per second? Some figure to share on the Lua scripting, and also some

264
0:26:00.080 --> 0:26:05.360
example on Python, which should be less efficient?

265
0:26:05.360 --> 0:26:12.600
Okay. When you process packets with Entopng itself, you are able to process like a few

266
0:26:12.600 --> 0:26:20.760
gigabit per second, depending on the driver's use, how you tune Entopng, let's say, to scale

267
0:26:20.760 --> 0:26:27.360
with the performance, you can get 10 gigabit for instance, but more or less, we range from

268
0:26:27.360 --> 0:26:32.560
a few gigabit to 10 gigabit in Entopng itself. You can use it in combination with our probes,

269
0:26:32.560 --> 0:26:37.880
which is Mprobe, or we have other probes like Cento. In that case, you can scale with a

270
0:26:37.880 --> 0:26:45.000
performance up to 100 gigabit per second, but the architecture changes a bit.

271
0:26:45.000 --> 0:26:47.520
Yeah. It's one 100 gigabit in plus.

272
0:26:47.520 --> 0:26:53.840
Yeah. As of the checks, it depends on the checks that you enable, of course.

273
0:26:53.840 --> 0:27:03.200
Okay. I think we are running out of time. Many thanks for being here now.


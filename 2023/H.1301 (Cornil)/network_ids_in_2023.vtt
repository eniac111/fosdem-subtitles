WEBVTT

00:00.000 --> 00:10.840
All right, thanks for having me folks.

00:10.840 --> 00:18.300
So let's have a quick chat about Suricata, open source ideas, network security monitoring

00:18.300 --> 00:21.060
and all those sorts of things.

00:21.060 --> 00:26.400
And what it used to look like before and what it looks like now, at least from our perspective,

00:26.400 --> 00:32.480
and all the things that we need to take care of and the things that we have still challenges

00:32.480 --> 00:34.520
with.

00:34.520 --> 00:37.000
So a quick overview of the agenda.

00:37.000 --> 00:43.240
We're going to talk about what is Suricata, how it started, how it evolved, challenges

00:43.240 --> 00:50.160
when we're monitoring the traffic and how to get involved basically and how it worked.

00:50.160 --> 00:53.320
First of all, I'll introduce Eric, he's my colleague.

00:53.320 --> 00:57.240
He was supposed to be here today, but he flies gas cancelled and he couldn't make it.

00:57.240 --> 00:59.360
But we did the presentation together.

00:59.360 --> 01:00.360
So apologies.

01:00.360 --> 01:04.000
He actually just touched down at the Brussels airport.

01:04.000 --> 01:06.480
So Eric is the CTO of Staunles Network.

01:06.480 --> 01:07.880
He's part of the OSF team.

01:07.880 --> 01:14.240
That's where I met him during the Suricata, developing during the Suricata project.

01:14.240 --> 01:19.160
He's also an OSF member of the board of directors.

01:19.160 --> 01:24.840
Linux kernel developer, he maintains also Sirius and Celcs.

01:24.840 --> 01:26.480
And that's the Twitter handle in there.

01:26.480 --> 01:28.040
So apologies Eric could not make it.

01:28.040 --> 01:30.160
And that's why I'm making the introduction with him.

01:30.160 --> 01:34.200
He's a great open source colleague and a friend.

01:34.200 --> 01:36.320
My name is Peter Mannev.

01:36.320 --> 01:39.480
I am 13, almost 14 years with Suricata.

01:39.480 --> 01:46.520
I'm part of the OSF exec team and where I usually do a lot of things around Suricata

01:46.520 --> 01:48.600
queuing and trainings.

01:48.600 --> 01:50.920
I'm also chief strategy officer of Staunles Networks.

01:50.920 --> 01:54.960
I'm one of the maintainers for the open source distribution in Celcs.

01:54.960 --> 01:58.760
I really like thread hunting and lots of open source around it.

01:58.760 --> 02:03.240
I'm guessing lots of people here in the conference too.

02:03.240 --> 02:07.840
So what is actually Suricata?

02:07.840 --> 02:12.120
So basically a high performance network security monitoring engine.

02:12.120 --> 02:18.560
That can do active or passive monitoring and also produces a lot of application and process

02:18.560 --> 02:20.520
protocol metadata.

02:20.520 --> 02:26.480
Open source, GPL2 code is available on GitHub of course.

02:26.480 --> 02:30.480
And basically produces when you plug Suricata in the network, it just gives you this high

02:30.480 --> 02:33.960
level situation of what's happening on the network, what's going on, something you should

02:33.960 --> 02:37.360
be aware of or something you didn't know or to confirm things.

02:37.360 --> 02:42.680
For example, you know, you have these a lot of angles like trust but verify to use the

02:42.680 --> 02:43.680
famous quote.

02:43.680 --> 02:46.400
You know, when you have zero trust architectures, you want to confirm that they're actually

02:46.400 --> 02:47.600
implemented.

02:47.600 --> 02:52.160
It's one thing to implement, it's another thing to confirm that it's there.

02:52.160 --> 02:56.880
And actually Suricata is used by a lot of organizations, a lot of people.

02:56.880 --> 02:57.880
It's awesome to see it.

02:57.880 --> 03:02.320
I'm really, really thankful for that and all the feedback.

03:02.320 --> 03:07.280
And sometimes organizations will use it even without knowing because it's embedded in a

03:07.280 --> 03:11.480
lot of vendor appliances and similar.

03:11.480 --> 03:16.320
So what can Suricata do?

03:16.320 --> 03:20.040
Well, today it's a few options there.

03:20.040 --> 03:22.480
It's an IDS system, so intrusion detection system.

03:22.480 --> 03:25.980
It could be in passive mode, right?

03:25.980 --> 03:30.760
So it could be inline, intrusion prevention system where it actually actively stops or

03:30.760 --> 03:32.920
enables a connection to pass through or not.

03:32.920 --> 03:36.880
It can also be just purely network security monitoring perspective.

03:36.880 --> 03:38.360
You know, it works without rules.

03:38.360 --> 03:44.360
It can just generate all sorts of protocol flow data, file extraction and similar.

03:44.360 --> 03:49.800
It can also store everything it sees on disk, so it can also do full packet capture.

03:49.800 --> 03:54.600
And very often you see uses of Suricata in combinations like this.

03:54.600 --> 04:00.760
So for example, IDS plus NSM mode with all the network protocol data and full packet

04:00.760 --> 04:02.000
capture and similar.

04:02.000 --> 04:05.800
There is also something new coming up in Suricata 7.

04:05.800 --> 04:11.960
Suricata 7 RC was just released this week.

04:11.960 --> 04:21.720
And it's called conditional PCAP capture, which is actually code introduced and developed

04:21.720 --> 04:24.040
and donated by Eric.

04:24.040 --> 04:28.120
What it allows you to do is, so for example, if you have an alert, it will save that whole

04:28.120 --> 04:29.120
session.

04:29.120 --> 04:30.400
So not just the packet, but the full session.

04:30.400 --> 04:35.560
So in that way you actually have the full sessions for all alerts stored in PCAP as opposed

04:35.560 --> 04:41.540
to having to do full packet capture, which in a lot of cases might be prohibitive.

04:41.540 --> 04:46.960
So basically use the network to defend ourselves.

04:46.960 --> 04:48.280
Observe protect adapt.

04:48.280 --> 04:49.280
That's what we do.

04:49.280 --> 04:52.240
That's what we try to excel at every day.

04:52.240 --> 04:57.120
And this is a quick snapshot from actually our website.

04:57.120 --> 04:58.640
So some major features.

04:58.640 --> 05:06.240
To name a few, YAML configuration, JSON for output, multithreaded, there's hardware acceleration

05:06.240 --> 05:10.480
and that becomes more and more relevant these days because the speeds are going up and up

05:10.480 --> 05:12.480
all the time.

05:12.480 --> 05:14.640
Network metadata login by a lot of protocols.

05:14.640 --> 05:18.320
We're going to name all of them here.

05:18.320 --> 05:19.560
Some of the main ones are here.

05:19.560 --> 05:28.680
More advanced parsing and automatic detection of HTTP DNS, SMB, SMTPTLS, all those guys

05:28.680 --> 05:30.000
and more.

05:30.000 --> 05:34.280
One thing that Surigata does very well is file extraction.

05:34.280 --> 05:41.800
SMB, FTP, HTTP, HTTP2, SMTP, all that.

05:41.800 --> 05:48.160
And the cool feature about that is actually it automatically deduplicates when it's extracted.

05:48.160 --> 05:53.320
So if the same file is seen 10 times, it will only be saved or extracted once to disk.

05:53.320 --> 05:56.240
So in other words, saving a lot of space.

05:56.240 --> 05:58.680
Really a lot.

05:58.680 --> 06:03.200
And of course, support for SCADA, that's upcoming and we need more and more of that.

06:03.200 --> 06:06.360
But it's also very relevant these days.

06:06.360 --> 06:07.560
So why the network?

06:07.560 --> 06:12.320
Well, because everything happens from the network.

06:12.320 --> 06:18.440
Everything from social media to finance to name it, everything is on the network.

06:18.440 --> 06:22.480
So the good people are there, the bad people are there.

06:22.480 --> 06:33.120
So even if you have malicious actors getting in, even to get in is actually 99% of the

06:33.120 --> 06:35.600
cases, it's over the network.

06:35.600 --> 06:40.200
And once they get in, they need to either exfiltrate or move laterally or do some other

06:40.200 --> 06:41.200
part.

06:41.200 --> 06:42.280
That's still happening on the network.

06:42.280 --> 06:45.600
So you have to be able to observe that.

06:45.600 --> 06:48.760
It's not the only place where you need to observe from security perspective.

06:48.760 --> 06:54.680
There's others, of course, but the network is one of the major ones.

06:54.680 --> 06:59.680
And while you're doing all that, when you're confirming if things are configured as expected

06:59.680 --> 07:04.800
or not, or if all the connections are correct, or there's no some anomaly and all things

07:04.800 --> 07:10.040
like that, you have to be able to identify and stop this activity.

07:10.040 --> 07:12.840
Granted, there are differences.

07:12.840 --> 07:17.960
So a university network is totally different from a bank corporate network.

07:17.960 --> 07:21.960
There's totally different things.

07:21.960 --> 07:25.240
So network metadata logging.

07:25.240 --> 07:35.160
So we actually provide a lot of metadata around any alert event or metadata just on its own.

07:35.160 --> 07:36.360
You don't need to have an alert.

07:36.360 --> 07:42.720
So default output format is JSON, right, JavaScript object notation.

07:42.720 --> 07:47.360
And on the right hand side here, you can see actually a picture, a small snippet actually

07:47.360 --> 07:51.980
of an event type, HTTP or an HTTP protocol.

07:51.980 --> 07:55.640
So all the different protocols have their own event type and they're logged in like

07:55.640 --> 07:56.640
that.

07:56.640 --> 08:00.120
And then next to that, you also have alerts.

08:00.120 --> 08:05.080
So file identification and extraction.

08:05.080 --> 08:08.920
One thing to mention is that file identification is done on the fly.

08:08.920 --> 08:14.840
And it's automatic, regardless of extensions and similar things like that, is just using

08:14.840 --> 08:19.760
lib magic and those tools to be able to identify a file.

08:19.760 --> 08:23.920
So if it's like an executable, it's a PDF or if it's a PDF, but with an extension TXT,

08:23.920 --> 08:29.340
we'll still be able to match and extract if you want to that file.

08:29.340 --> 08:38.360
You can also match on share sums and other attributes of the file info events.

08:38.360 --> 08:42.120
So as I mentioned, extract the storage system, deduplicate it.

08:42.120 --> 08:50.600
That really saves a lot of conversations with finance about sizing.

08:50.600 --> 08:54.080
So we have some pickup capabilities.

08:54.080 --> 08:57.560
Now what do I mean by that?

08:57.560 --> 09:02.400
Besides the fact that Srikata can actually store everything on disk and do full packet

09:02.400 --> 09:05.000
captures, Srikata can also read pickups.

09:05.000 --> 09:12.080
It's actually, that part is also used a lot in a lot of sandboxes, including, so for example,

09:12.080 --> 09:13.080
there is a few out there.

09:13.080 --> 09:18.400
If you Google sandbox, for example, there's a few that even offer free public services.

09:18.400 --> 09:24.600
But to name one, anyone is like that actually automatically when a sample is detonated,

09:24.600 --> 09:28.880
they also save the network traffic.

09:28.880 --> 09:34.720
And that's also run by Srikata just to see what network protocol data and alerts are

09:34.720 --> 09:35.720
in there.

09:35.720 --> 09:38.760
So Srikata can, you know, it can read a single pink app.

09:38.760 --> 09:43.400
You can actually spin up a unique socket, let's say, and just feed pickups to it every

09:43.400 --> 09:45.400
now and then.

09:45.400 --> 09:49.880
You can point it to a folder and it will keep reading from that folder until it reads all

09:49.880 --> 09:50.880
the pickups.

09:50.880 --> 09:54.560
Or if there is nothing there, it will pause and it will stop.

09:54.560 --> 09:57.560
And when you throw a pickup in the folder, it will continue really automatically.

09:57.560 --> 10:02.200
It's really, really automated in that part.

10:02.200 --> 10:06.520
And of course, you need to have multiple instances just to be on the safe side with that new

10:06.520 --> 10:07.520
chain.

10:07.520 --> 10:10.360
So in QA, you want to move it into PROB.

10:10.360 --> 10:16.160
So passive monitoring, how does it actually work?

10:16.160 --> 10:17.160
Here's an example.

10:17.160 --> 10:22.120
Basically, we hooked up to a tap or a mirror port on a switch and we just sniffed the traffic.

10:22.120 --> 10:26.440
Now, where you place that, you're going to need probably multiple sensors in different

10:26.440 --> 10:27.440
scenarios.

10:27.440 --> 10:31.900
You know, it depends where you have on-prem cloud, virtual infrastructure and all that.

10:31.900 --> 10:34.260
So you have to probably have multiple things.

10:34.260 --> 10:38.720
But in general, this is basically where it sits in passive mode.

10:38.720 --> 10:44.920
So it logs all the alerts, the protocol metadata, any file instruction events, pickups and all

10:44.920 --> 10:50.800
those things based on the monitoring that it does for that network.

10:50.800 --> 10:53.640
Now active monitoring, this is a little bit different.

10:53.640 --> 10:55.280
We stay in line.

10:55.280 --> 10:57.720
So we allow or not traffic to pass.

10:57.720 --> 10:59.120
This is a bit more business critical.

10:59.120 --> 11:00.600
Well, no, not a bit more.

11:00.600 --> 11:06.920
It's much more critical because it's actually able to stop effectively traffic.

11:06.920 --> 11:12.400
So a lot more testing and due diligence and queuing is needed there.

11:12.400 --> 11:13.800
But basically, how does it work?

11:13.800 --> 11:16.600
So basically, you have this setup here.

11:16.600 --> 11:22.320
You have a user employee that receives a malicious document.

11:22.320 --> 11:28.880
Usually in a lot of cases, it all starts with some sort of link or attachment that is being

11:28.880 --> 11:32.080
without intention opened by a user or clicked by a user.

11:32.080 --> 11:38.120
So you have a network request and usually there is some sort of a signature or a rule

11:38.120 --> 11:41.840
that vets the traffic or inspects the traffic and says, yes, you can pass, no, you cannot

11:41.840 --> 11:42.840
pass.

11:42.840 --> 11:46.720
And this is a very basic example here, for example, a PowerShell script.

11:46.720 --> 11:48.400
And then based on that, there is a verdict.

11:48.400 --> 11:51.920
Yes, you can go or no, you cannot go.

11:51.920 --> 11:53.640
Either or.

11:53.640 --> 11:55.040
And that's the inline mode, right?

11:55.040 --> 12:00.600
So there you're actually actively making decisions of what can and cannot pass and similar.

12:00.600 --> 12:04.720
So one is much more acute.

12:04.720 --> 12:09.400
The other one is much easier because in the passive mode, you're just monitoring traffic.

12:09.400 --> 12:13.840
So a little bit about our history and how we get there.

12:13.840 --> 12:17.960
How did we get here?

12:17.960 --> 12:22.600
So first lines of code, 2007 by Victor Julian.

12:22.600 --> 12:27.920
As a lead developer of Suicata, first release was in 2009.

12:27.920 --> 12:34.800
I joined the project 2010 April, May, somewhere around there.

12:34.800 --> 12:37.660
So we are open source GPL.

12:37.660 --> 12:45.120
We actually have actively contributors and people contributing code, test, donations

12:45.120 --> 12:47.280
from 23 different countries at the moment.

12:47.280 --> 12:53.200
Or at least that was the last statistic, but basically all continents.

12:53.200 --> 12:56.160
Suicata is owned by a nonprofit foundation.

12:56.160 --> 13:01.600
The Suicata code, it's open source and it's on GitHub, but it's owned by a nonprofit foundation

13:01.600 --> 13:07.480
on purpose and the purpose is actually so that it could never be sold.

13:07.480 --> 13:10.280
That's it.

13:10.280 --> 13:14.480
And this is basically how we started.

13:14.480 --> 13:17.040
OSFnet, you'll find a little bit more info.

13:17.040 --> 13:21.760
So as I mentioned, a little bit of a visual representation in there.

13:21.760 --> 13:29.160
So our first Suicata training, believe it or not, it was in 2013 and our first Suicon

13:29.160 --> 13:32.080
was in 2015.

13:32.080 --> 13:38.680
And those were a lot of fun events and we learned a lot just by talking and interacting

13:38.680 --> 13:39.840
with the community.

13:39.840 --> 13:46.000
So a big help there from the community.

13:46.000 --> 13:52.560
And how did it used to work and look back in the day?

13:52.560 --> 13:55.200
So I had to generate that.

13:55.200 --> 13:58.920
This is basically an alert of what it looked like 14 years ago, what it looked like 20

13:58.920 --> 14:00.080
years ago as well.

14:00.080 --> 14:11.400
So I had to generate that manually to look at what it produces.

14:11.400 --> 14:17.960
So basically that's an alert from 14, 15, 20 years ago, things like that.

14:17.960 --> 14:19.520
Not much to see there.

14:19.520 --> 14:20.920
Not much to say there, right?

14:20.920 --> 14:24.280
So you have an IP and a port and a message.

14:24.280 --> 14:26.280
What are you going to do with it?

14:26.280 --> 14:30.800
Now you need to go find other tools, other protocol logs.

14:30.800 --> 14:35.400
You need to go to different machines to figure out what this IP is, what's that port, what's

14:35.400 --> 14:37.720
happened before, what happened after.

14:37.720 --> 14:38.720
Is it a server?

14:38.720 --> 14:39.720
Is it a laptop?

14:39.720 --> 14:41.600
Is it, guess, whatever it is.

14:41.600 --> 14:44.440
So you needed to do a lot of work.

14:44.440 --> 14:48.200
This was just like a message.

14:48.200 --> 14:52.400
But back then it was one of the few things that were there, right?

14:52.400 --> 14:54.720
So there was nothing more than that.

14:54.720 --> 14:58.000
So fast forward to today.

14:58.000 --> 15:02.560
So this is an example for an alert, but in a graphical interface anyway.

15:02.560 --> 15:08.880
So you have the alert, you have the signature metadata, you have in this case its HTTP protocol.

15:08.880 --> 15:12.560
And a lot of things do happen over clear text, by the way, because it's not vetted that much,

15:12.560 --> 15:15.800
especially in some environments.

15:15.800 --> 15:22.240
And you also have the flow record, packets, bytes to clients to server, similar things,

15:22.240 --> 15:23.560
durations, and all those things.

15:23.560 --> 15:29.440
So you have a much better understanding when you look at an alert now, aha, okay, so this

15:29.440 --> 15:32.920
is the status code, this is the request, this is the file, and all those things.

15:32.920 --> 15:35.640
So you can actually judge much more.

15:35.640 --> 15:43.360
And one thing that actually came with time in Suricata is something called Flow ID.

15:43.360 --> 15:50.280
What Flow ID allows you, this was natively introduced in Suricata in 2014, what Flow ID

15:50.280 --> 15:56.800
allows you to achieve is basically to correlate the specific alert to any and other protocol

15:56.800 --> 15:58.600
data from the same flow and session.

15:58.600 --> 16:03.200
So if you have an alert over SMB or something like that, you have all the SMB protocol records,

16:03.200 --> 16:08.760
the extracted files, you know, a pickup saved if you need the pickup, you have all that

16:08.760 --> 16:10.320
in the package.

16:10.320 --> 16:14.680
So much bigger evolution than what you saw in the previous screenshot.

16:14.680 --> 16:18.160
So how it works, this is a screenshot, for example, from ebox.

16:18.160 --> 16:24.640
It's a tool developed by Jason Ish, he's our colleague from the Suricata team.

16:24.640 --> 16:27.120
And here's a quick example.

16:27.120 --> 16:30.700
Yeah, every session has a Flow ID, right?

16:30.700 --> 16:36.040
So here is an alert with a Flow ID, and that translates to, in this case, the Flow ID correlates

16:36.040 --> 16:43.080
the alerts to the flow record, to the HTTP record, to the file info, which is actually

16:43.080 --> 16:47.760
the file metadata for that file transaction.

16:47.760 --> 16:53.520
So much bigger, much better visibility, and you can actually make a decision much faster

16:53.520 --> 16:58.420
than needing to go look in other tools.

16:58.420 --> 17:02.960
This is actually a showcase of Flow ID by Sirius, which is an open source web interface

17:02.960 --> 17:05.980
as part of Celcs that they help maintain.

17:05.980 --> 17:10.580
But in any way, here is the file info on the bottom that is highlighted.

17:10.580 --> 17:17.640
You have the shad, the file magic, and everything is correlated between alerts, file info, flow

17:17.640 --> 17:24.240
protocol logs by the help of that Flow ID, which helps glue everything together.

17:24.240 --> 17:26.900
So really, really powerful.

17:26.900 --> 17:31.560
If I need, often enough, I need to explain Suricata in one slide today.

17:31.560 --> 17:33.400
This is what Suricata does today.

17:33.400 --> 17:35.440
One IDS plus NSM mode.

17:35.440 --> 17:39.800
So you have the alerts, you have the protocol data, you have the network logs, the file

17:39.800 --> 17:43.760
transactions, you're doing file transactions, and the pickup recordings, right?

17:43.760 --> 17:45.960
So you have everything in a package.

17:45.960 --> 17:50.320
It's much different when I started the list.

17:50.320 --> 17:52.160
So we have evolved.

17:52.160 --> 17:55.960
And here is another run that is possible.

17:55.960 --> 18:01.880
So you could actually, it's a little known fact that Suricata alerts are only about 5,

18:01.880 --> 18:04.440
10% of all data that it produces.

18:04.440 --> 18:08.640
The rest of the data is all protocols, data, metadata, and things like that.

18:08.640 --> 18:11.080
The alerts are very, very small part.

18:11.080 --> 18:14.760
And alerts, now at least I look at them as just a context.

18:14.760 --> 18:15.760
It gives me something.

18:15.760 --> 18:18.240
It gives me an idea of what's happening.

18:18.240 --> 18:19.840
That's it and that's all.

18:19.840 --> 18:21.880
I don't necessarily look at it as true or false positives.

18:21.880 --> 18:24.520
It's just like, okay, so that's what happened.

18:24.520 --> 18:27.960
I need the context around it.

18:27.960 --> 18:34.000
Suricata can function without signatures or those two, although it's not recommended because

18:34.000 --> 18:36.960
they help highlight certain events.

18:36.960 --> 18:38.800
So what challenges do we have?

18:38.800 --> 18:42.320
Well, all those years we need to keep the pace, right?

18:42.320 --> 18:43.320
We need to adapt.

18:43.320 --> 18:47.040
We need to move forward.

18:47.040 --> 18:49.160
Signatures have evolved at least in Suricata.

18:49.160 --> 18:56.120
Back in the day, it used to be a pattern match, a buffer overflow, some content triggering

18:56.120 --> 18:58.120
in the payload.

18:58.120 --> 19:00.880
It was very bounded with the IPS mindset.

19:00.880 --> 19:01.880
So you have to stop it.

19:01.880 --> 19:03.920
You have to look for something specific.

19:03.920 --> 19:04.920
It's expensive.

19:04.920 --> 19:11.400
It's CPU intensive actually to look on the fly at the 100 gigabit a second, for example,

19:11.400 --> 19:15.240
for a pattern.

19:15.240 --> 19:20.220
For example, in IPAC, you need to block, stop, protect the assets and similar.

19:20.220 --> 19:26.620
So we need to evolve from that to actually a bit more behavior analytics and including

19:26.620 --> 19:28.880
from the perspective of infrastructure, right?

19:28.880 --> 19:33.320
So I can say, hey, how many proxies they have on the network, right?

19:33.320 --> 19:34.320
That's interesting.

19:34.320 --> 19:37.680
Do you have proxies somewhere that, NGINX, for example, proxies that somewhere in the

19:37.680 --> 19:40.280
network that they don't expect them to be?

19:40.280 --> 19:43.280
That sort of visibility, that kind of difference.

19:43.280 --> 19:48.200
So TLS, okay, TLS is encrypted, sure.

19:48.200 --> 19:50.680
But the handshake is encrypted.

19:50.680 --> 19:53.760
And during the handshake, you can see a lot of things, including ciphers and things like

19:53.760 --> 19:54.760
that.

19:54.760 --> 19:56.160
What do you care about the cipher?

19:56.160 --> 19:57.160
Of course you do.

19:57.160 --> 19:58.160
Is it secure?

19:58.160 --> 19:59.160
Is it degraded?

19:59.160 --> 20:00.160
Is it recommended?

20:00.160 --> 20:03.960
Do you have applications that are using degraded ciphers?

20:03.960 --> 20:04.960
How do you know?

20:04.960 --> 20:06.520
Network security monitoring.

20:06.520 --> 20:08.600
That's the easiest way to do it, actually.

20:08.600 --> 20:13.600
For one, much easier than the other way.

20:13.600 --> 20:16.280
Put it that way.

20:16.280 --> 20:23.120
So you have system updates.

20:23.120 --> 20:27.880
You know, who's updating Debian, who's updating Ubuntu, things like that.

20:27.880 --> 20:29.280
They're very visible on the network.

20:29.280 --> 20:30.280
You know.

20:30.280 --> 20:32.520
And it's not about the actual system of data.

20:32.520 --> 20:38.080
It's about actually do you expect it to happen where it happens and where it happens.

20:38.080 --> 20:41.840
So, yeah, we need to evolve towards that direction.

20:41.840 --> 20:47.960
And we have managed actually to do a huge leap there.

20:47.960 --> 20:49.380
More protocol implementation, right?

20:49.380 --> 20:50.760
So we need more and more protocols.

20:50.760 --> 20:51.760
Of course we do.

20:51.760 --> 20:56.120
But, you know, as it says here, it's no longer a network grip.

20:56.120 --> 20:57.440
So you have different protocols.

20:57.440 --> 21:03.600
You need application layer identification regardless of the port, you know.

21:03.600 --> 21:05.120
So it has to be automated.

21:05.120 --> 21:06.680
You need parsing.

21:06.680 --> 21:07.680
You need logging.

21:07.680 --> 21:09.040
You need to parse the protocol.

21:09.040 --> 21:10.920
You need to log it correctly.

21:10.920 --> 21:13.840
All those things require time and effort.

21:13.840 --> 21:17.560
You need specific keywords so you can hook up detection to for different parts of the

21:17.560 --> 21:20.880
protocol.

21:20.880 --> 21:25.300
And we need like secure protocol implementation.

21:25.300 --> 21:33.440
So by that way, Suricata needs to parse everything and anything on the network.

21:33.440 --> 21:37.200
And trust me, everything and anything on the network doesn't fold the RFC.

21:37.200 --> 21:38.900
It just doesn't.

21:38.900 --> 21:43.160
So we need to follow the RFC one and two, we don't.

21:43.160 --> 21:45.440
Because we can't, you know, we can't crash.

21:45.440 --> 21:52.000
We need to actually keep inspecting and alert for problems.

21:52.000 --> 22:01.360
Everybody has, not everybody, a lot of tools have vulnerability based on protocol process.

22:01.360 --> 22:02.360
Work Shack has a lot.

22:02.360 --> 22:04.160
Suricata has a few and similar.

22:04.160 --> 22:09.320
So one way to battle and combat that is the combination of Rust and known for.

22:09.320 --> 22:10.400
Memory safety, thread safety.

22:10.400 --> 22:11.760
C is not safe, right?

22:11.760 --> 22:15.280
C memory requests manual.

22:15.280 --> 22:17.200
If it's not done correctly, it's not done properly.

22:17.200 --> 22:21.640
Sec false memlix, they can all occur in there.

22:21.640 --> 22:24.600
Here's an example of Rust known parser that we use in Suricata.

22:24.600 --> 22:31.840
So the Suricata is a combination of C and Rust known implementation.

22:31.840 --> 22:36.680
And that started only a couple years ago and it's more and more of that just to help us

22:36.680 --> 22:40.000
be more safe when we inspect and do things.

22:40.000 --> 22:41.360
There's the outside evolution, right?

22:41.360 --> 22:46.400
So networks, speeds increase, demand increases.

22:46.400 --> 22:49.160
There is encryption, there's less visibility.

22:49.160 --> 22:52.080
But a lot of data.

22:52.080 --> 22:58.760
I was earlier, in January, I had a talk at a different conference and after the talk

22:58.760 --> 23:05.080
a person approached me, he's like, do you have any recommendations of how to improve

23:05.080 --> 23:06.080
Suricata performance?

23:06.080 --> 23:07.080
I'm like, yeah, sure.

23:07.080 --> 23:10.760
And I said, what's your setup?

23:10.760 --> 23:14.920
He's like, we have over 25, 100 give it solutions.

23:14.920 --> 23:19.440
I'm like, okay, we need to talk.

23:19.440 --> 23:20.920
So it's very interesting.

23:20.920 --> 23:23.000
Things like that are dominant and happening.

23:23.000 --> 23:29.160
So it's different, you need to keep up with those evolutions too and make sure that these

23:29.160 --> 23:33.920
people actually can, these setups and people can benefit from everything we do.

23:33.920 --> 23:36.680
Challenges, there's a lot.

23:36.680 --> 23:41.540
Everything from mirroring the traffic to one-sided traffic to encryption to NIC of loading because

23:41.540 --> 23:45.400
we actually do need to inspect the traffic as the end user or the end device will see

23:45.400 --> 23:52.880
it, not as the devices in the network pass it over to one another.

23:52.880 --> 23:59.000
The volume, size of logs, it's not uncommon to have, depending on the link speed, of course,

23:59.000 --> 24:02.520
it's not uncommon to have one, two, three, five more billion of logs a day.

24:02.520 --> 24:03.760
What do you do with them?

24:03.760 --> 24:05.520
That's a different topic.

24:05.520 --> 24:08.960
So here it comes, the deduplication and all the stuff that we actually also need to take

24:08.960 --> 24:12.040
care of.

24:12.040 --> 24:16.560
And QA anyone while we have this?

24:16.560 --> 24:18.340
It's quite an effort.

24:18.340 --> 24:22.680
So when we talk about encryption, I mentioned, so depending on the protocol version and similar

24:22.680 --> 24:27.800
things you have TLS one, two, one, three, one, one, all sorts of things.

24:27.800 --> 24:31.880
But during the clear handshake, you can actually extract a lot of information.

24:31.880 --> 24:34.080
These are some of the things that we extract actually.

24:34.080 --> 24:39.880
The SNI, the subject, e-shore, you can deduct Cypher calls from there as well, J83, J83S,

24:39.880 --> 24:42.200
fingerprinting, TLS version is similar.

24:42.200 --> 24:46.760
So we need to tell Suricata what to do when it detects that the connection is encrypted.

24:46.760 --> 24:47.760
So what do you do?

24:47.760 --> 24:48.760
You want to keep inspecting it?

24:48.760 --> 24:55.920
You want to keep it pointless because it's encrypted or you want to pass it to a specific,

24:55.920 --> 24:59.880
some hardware has already built a function so it can say bypass it on the hardware level

24:59.880 --> 25:03.320
as soon as it takes it's encrypted because there's nothing more we can do.

25:03.320 --> 25:07.400
There's certain things that we can take, continue on tracking and generate logs, for example,

25:07.400 --> 25:10.000
the flow, how big is it and things like that.

25:10.000 --> 25:14.480
But we need to be able to relate that information because it's pointless, as I mentioned, if

25:14.480 --> 25:15.480
it's encrypted.

25:15.480 --> 25:21.720
We know a lot of decryption devices in similar things that Suricata sticks next to or behind,

25:21.720 --> 25:25.880
but that's a setup, that's an architecture issue.

25:25.880 --> 25:32.400
So these four major factors that impact Suricata performance, rules, Suricata version, hardware

25:32.400 --> 25:33.880
using type of traffic.

25:33.880 --> 25:37.640
Again, university traffic is much more different than a regular corporate traffic where everything

25:37.640 --> 25:38.640
is vetted.

25:38.640 --> 25:46.440
So you learn a lot from both deployments, for example, just using these two as an example.

25:46.440 --> 25:47.440
We're software, right?

25:47.440 --> 25:48.440
So we need to run any hardware.

25:48.440 --> 25:50.600
Now that's not easy to achieve.

25:50.600 --> 25:55.680
We need a lot of resistance, QAing and all those similar things.

25:55.680 --> 26:00.000
So what actually happens, so here's an example of workers more than Suricata.

26:00.000 --> 26:03.520
As you can see, this is a network card and it has different cues.

26:03.520 --> 26:11.720
In each protocol, sorry, each thread, each record actually enters and goes through these

26:11.720 --> 26:16.440
points, capture the cold stream, detect output, output, especially when you're writing.

26:16.440 --> 26:21.960
So it needs to be in that, this is an example of that specific order when the traffic comes

26:21.960 --> 26:25.720
to the network, how it's passed to the Suricata and what Suricata goes through in a very high

26:25.720 --> 26:29.040
level.

26:29.040 --> 26:33.800
Most of Nixxer are made for web file servers at scale.

26:33.800 --> 26:37.080
They're not specifically made for ideas, some are.

26:37.080 --> 26:41.680
But ideas need to see the traffic, the network security monitoring needs to see the traffic

26:41.680 --> 26:45.520
as this end device will actually see it in order.

26:45.520 --> 26:53.000
Everything needs to be in order in the same flow so that we can expect it properly.

26:53.000 --> 26:58.280
And a small word, so back in the day when I started, there was different capture methods

26:58.280 --> 27:00.440
and they evolved over time.

26:59.720 --> 27:26.080
packet XDP and similar, but we need to have different methods.

27:00.440 --> 27:05.320
But one of the fastest things that was back there was PF ring and that was actually, we

27:05.320 --> 27:08.560
received a lot of help from Luca and Alfredo.

27:08.560 --> 27:09.760
Thank you guys.

27:09.760 --> 27:15.680
So kernel 2.6 and 2.0 above, the PL frame was the only thing that offered speed and

27:15.680 --> 27:16.680
performance.

27:16.680 --> 27:26.080
There is others that we were upcoming in the Suricata 7, you know, DPDK, A

27:26.080 --> 27:30.840
I am going just to finish up here.

27:30.840 --> 27:36.200
And so QA and Suricata, a lot of, we need to cover a lot of angles.

27:36.200 --> 27:38.640
We have called on GitHub, we have called in GitLab.

27:38.640 --> 27:43.880
When you submit a PR publicly, it goes through an automated checks to as much as possible

27:43.880 --> 27:46.600
before we put it in the coldest.

27:46.600 --> 27:49.300
Private runs, there's units, there's thousands of checks.

27:49.300 --> 27:54.320
So anytime you submit a PR or a code, it automatically triggers checks.

27:54.320 --> 27:57.480
And some of them could finish nightly.

27:57.480 --> 28:02.980
This is a GitLab screenshot going through some checks.

28:02.980 --> 28:07.960
Some of these checks can include thousands of definitions inside.

28:07.960 --> 28:10.000
In one check, we have 22,000 files extracted.

28:10.000 --> 28:13.480
We need to make sure all of them are there the same way they were there before the code

28:13.480 --> 28:14.480
change.

28:14.480 --> 28:16.640
Things like that need to happen.

28:16.640 --> 28:20.600
And here's an example of a PR that's going through a regular checks on GitHub.

28:20.600 --> 28:22.360
That information is actually public on GitHub.

28:22.360 --> 28:28.840
You can see in all the different OS compilation that it goes through, address sanitizers,

28:28.840 --> 28:35.120
leak sanitizers, code analysis, CPP checks, all those things need to actually happen before

28:35.120 --> 28:39.880
we can say, okay, we could put this code without affecting us.

28:39.880 --> 28:42.640
Regressions, traffic replace, and similar.

28:42.640 --> 28:45.180
I am going over with a time apologies.

28:45.180 --> 28:49.500
This is how to contribute.

28:49.500 --> 28:59.520
Any feature and code can be donated, put in on our redmine ticket and start the discussion.

28:59.520 --> 29:03.040
And the current reviews could be done on GitHub.

29:03.040 --> 29:04.320
They're public.

29:04.320 --> 29:09.800
So in conclusion, it has to work because you need to create a community around it.

29:09.800 --> 29:13.680
And the power is in the community because it's going to have a lot of ideas, a lot of

29:13.680 --> 29:15.760
feedback, and you need to be open about it.

29:15.760 --> 29:21.680
You need to have open discussions about roadmap and input from all the different people that

29:21.680 --> 29:24.400
are actually using it.

29:24.400 --> 29:31.680
And that is the, our point is that is the ultimate power comes in numbers.

29:31.680 --> 29:34.480
Thank you very much for having me here.

29:34.480 --> 29:35.480
Much appreciated.

29:35.480 --> 29:36.480
Open to questions.

29:36.480 --> 29:37.480
Thank you, Peter.

29:37.480 --> 29:38.480
Anybody has one question?

29:38.480 --> 29:39.480
One question here.

29:39.480 --> 29:49.920
I'm just wondering, I don't know what the current debate is, but have you had NVIDIA

29:49.920 --> 29:53.560
Blue field as well?

29:53.560 --> 29:57.000
And how was the circuit in the process?

29:57.000 --> 29:59.000
Have I looked at, sorry I'm not here.

29:59.000 --> 30:01.000
NVIDIA Blue field, it's this part of the process.

30:01.000 --> 30:02.600
Oh yes, yes, yes, yes, yes, yes, yes.

30:02.600 --> 30:04.160
We have a conversation going, yes?

30:04.160 --> 30:05.160
Okay, cool.

30:05.160 --> 30:06.160
Yeah, yeah.

30:06.160 --> 30:09.920
That's part of the whole process, staying and keeping on.

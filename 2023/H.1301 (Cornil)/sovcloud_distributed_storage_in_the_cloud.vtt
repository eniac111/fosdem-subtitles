WEBVTT

00:00.000 --> 00:10.760
Okay, well, some of you may be here for my first presentation.

00:10.760 --> 00:18.760
This one is going to be different in much more technology focused, if you will.

00:18.760 --> 00:25.080
And we will talk about their distributed storage in the cloud, right?

00:25.080 --> 00:31.920
And my goal of this presentation is kind of provide you a very general overview as an

00:31.920 --> 00:35.480
of options which exist.

00:35.480 --> 00:39.080
I am not an expert, right?

00:39.080 --> 00:42.040
And probably something I'm going to say is even going to be wrong, right?

00:42.040 --> 00:47.160
So if it is, then say, say like, this is fucking wrong, Peter, you know, so I can fix my slides.

00:47.160 --> 00:50.400
So when I talk the next time, I am, has a wrong stuff, right?

00:50.400 --> 00:51.400
So don't be shy.

00:51.400 --> 00:58.640
Be engaged and that's going to be fun for, more fun for all of us.

00:58.640 --> 01:05.160
So the thing I would say to start with, we discussed about it, as I believe there is

01:05.160 --> 01:08.360
a different ways you can approach your cloud, right?

01:08.360 --> 01:15.080
One is where you really kind of walk in with the cloud provider and then another one is

01:15.080 --> 01:24.880
what you really use, one of the really there open source solutions out there.

01:24.880 --> 01:33.320
And as I spoke in my previous presentation, we can see what's, well, like I would imagine

01:33.320 --> 01:36.520
that is how the cloud was originally taken.

01:36.520 --> 01:41.040
Well, I won't spend too much time on this because I already had a presentation, but

01:41.040 --> 01:45.280
and also because we are not have too much time.

01:45.280 --> 01:54.680
Now one thing what I often have people asking me is about their open source, right?

01:54.680 --> 01:58.640
Which I think this conference is about.

01:58.640 --> 02:05.280
And if you are thinking in the open source from the business standpoint, right?

02:05.280 --> 02:11.880
We often see a lot of those different companies, right?

02:11.880 --> 02:17.120
Which promote them as open source or somewhere around open source.

02:17.120 --> 02:21.160
But how do you know if it is for real, right?

02:21.160 --> 02:28.320
And of course, one of those you can look at the open source license and so on, right?

02:28.320 --> 02:30.520
And this is all their good stuff.

02:30.520 --> 02:33.840
Another is also to make sure what you ask yourself, right?

02:33.840 --> 02:37.080
Or maybe even kind of company representative some of the questions, right?

02:37.080 --> 02:39.280
About how things look, right?

02:39.280 --> 02:46.840
One is you always think about how you can deploy that kind of solution product, right?

02:46.840 --> 02:51.800
On your own without getting any additional cost, right?

02:51.800 --> 02:55.400
Because software may be kind of open source, but they can, right?

02:55.400 --> 03:00.800
And the source is available, but well, actually maybe their, you know, binaries are provided

03:00.800 --> 03:03.400
only to four people who have a commercial subscription.

03:03.400 --> 03:08.400
Well, in this case, it's maybe technically open source, but on the practical side, there

03:08.400 --> 03:13.720
is some of those problems, right?

03:13.720 --> 03:19.800
And especially I have seen some open source projects which would essentially, you know,

03:19.800 --> 03:23.000
withhold details about the build process, right?

03:23.000 --> 03:28.560
So it's not easy, right, to do that, right?

03:28.560 --> 03:34.160
And another question that I always like to look at is a choice of vendors if you need

03:34.160 --> 03:36.520
any help, right?

03:36.520 --> 03:46.240
For many companies, just saying, hey, we're just doing to go ourself is not going to work

03:46.240 --> 03:48.360
or want to hire somebody.

03:48.360 --> 03:54.880
And in some of the new kind of license around open source have been kind of some restrictions.

03:54.880 --> 04:02.040
Well, you know what, you cannot provide the consultant services around this software,

04:02.040 --> 04:03.040
right?

04:03.040 --> 04:05.960
Or something like that as a license, right?

04:05.960 --> 04:12.920
And I think the very valuable thing about the open source is to see wherever you can

04:12.920 --> 04:16.120
improve the software for your purpose.

04:16.120 --> 04:20.080
If something in an open source doesn't really fit, right, can you contribute to that?

04:20.080 --> 04:28.720
And again, that I think is another very interesting property of open source software where maybe

04:28.720 --> 04:30.480
different shades, right?

04:30.480 --> 04:39.360
Sometimes open source vendors may be more or less open to that kind of things.

04:39.360 --> 04:44.480
Well, now we've had maybe open source public service announcement.

04:44.480 --> 04:46.880
I would touch briefly about open source.

04:46.880 --> 04:51.040
I think I spoke about that, the previous speaker spoke about that as well.

04:51.040 --> 04:54.640
That is a fantastic API, right?

04:54.640 --> 05:01.460
And that is something we are going to focus on here, right?

05:01.460 --> 05:08.160
And why I mentioned Kubernetes here, right, as we are going to talk about the open source

05:08.160 --> 05:14.120
storage in the cloud, I will focus a lot about, hey, what exactly choices you have in the

05:14.120 --> 05:22.560
Kubernetes environment, right, because if you're really speaking about the cloud, right,

05:22.560 --> 05:30.840
modern life scale application, a lot of that is now being built around Kubernetes.

05:30.840 --> 05:32.280
Okay.

05:32.280 --> 05:38.600
Now this storage in the cloud, what does that really correspond to?

05:38.600 --> 05:44.560
Well there are a lot of different storage types we really can't consider those days,

05:44.560 --> 05:45.560
right?

05:45.560 --> 05:51.680
And here is the list which ranges from the simple stuff as a node local storage all the

05:51.680 --> 05:53.840
way to the databases, right?

05:53.840 --> 05:57.640
I define storage myself in a very general way in this case, hey, we're all you need

05:57.640 --> 06:01.520
to store the data somewhere, well that is a storage, right?

06:01.520 --> 06:06.520
Now there are some of those things like a node local storage are relatively simple,

06:06.520 --> 06:07.520
right?

06:07.520 --> 06:12.080
You know, direct replacement from like a, well, file systems we have on our operating

06:12.080 --> 06:15.000
system for a long time.

06:15.000 --> 06:20.480
The others such as databases can be very complicated.

06:20.480 --> 06:23.080
It is not just, well, a database, right?

06:23.080 --> 06:29.720
But we can see databases being different by data model query language like various internal

06:29.720 --> 06:33.040
design decisions and so on and so forth, right?

06:33.040 --> 06:37.680
Even if you look at the data model, right, these are some of the most common data models

06:37.680 --> 06:40.680
which you would see.

06:40.680 --> 06:49.000
And what is interesting, or the last I think like maybe 10 years by now we see really this

06:49.000 --> 06:56.320
explosion of the different special purpose databases versus approach before where we

06:56.320 --> 07:03.800
I think had like relational databases absolutely dominating ecosystem.

07:03.800 --> 07:09.560
What is also interesting in this regard is what we are having the databases right now

07:09.560 --> 07:22.320
not just being focused on a single data model, but many databases are able to support multiple

07:22.320 --> 07:30.440
data models, right, which is I think is a big trend and even potentially speak multiple

07:30.440 --> 07:32.240
protocols, right?

07:32.240 --> 07:34.200
Like here are some examples, right?

07:34.200 --> 07:41.120
If you look at the click house which is data analytical database, it is able to talk click

07:41.120 --> 07:45.560
house but as well as postgres, SQL and MySQL protocol, right?

07:45.560 --> 07:50.680
So the idea is, hey, you know, wherever programming language and libraries you already use, you

07:50.680 --> 07:56.200
can just connect to us and, you know, run your queries, you know, fantastic idea, right?

07:56.200 --> 08:03.240
Or the time series database, Victoria Metrics also is able is implementing things like InfluxDB

08:03.240 --> 08:10.800
and Graphite API for data ingest, again, to think very, very smart.

08:10.800 --> 08:18.200
We also see some frameworks which allow us to do some of conversion and translation.

08:18.200 --> 08:25.760
For example, FEREDB, the projects allow you to use postgresQL backend with MongoDB front

08:25.760 --> 08:26.760
end, right?

08:26.760 --> 08:34.560
Or Amazon released recently Babelfish which turns your postgresQL in Microsoft SQL compatible

08:34.560 --> 08:35.840
database, right?

08:35.840 --> 08:46.680
So a lot of this, I think, you know, interesting integration is going on those days.

08:46.680 --> 08:57.960
If you look at their databases, you also see a lot of difference in a database for a purpose

08:57.960 --> 08:59.480
and design, right?

08:59.480 --> 09:05.640
Like we are speaking about operational analytical, how is it used, how it's internally structured

09:05.640 --> 09:07.340
and so on and so forth, right?

09:07.340 --> 09:16.360
And why am I listing that is because if you look at their at a complicated environment,

09:16.360 --> 09:21.440
right, with a lot of complicated database, it's very unlikely you will be limited only

09:21.440 --> 09:23.120
to one database, right?

09:23.120 --> 09:26.680
Of course, as the previous speaker mentioned, well, you know what, you probably don't want

09:26.680 --> 09:33.440
to have 50 because that is way too much complexity, right?

09:33.440 --> 09:39.440
And you want to be very mindful about how you introduce them to you, to your environment,

09:39.440 --> 09:46.880
but it's probably going to be more than one those days.

09:46.880 --> 09:51.260
Now we also speak about besides storage about distributed storage.

09:51.260 --> 09:55.760
Like why is that important?

09:55.760 --> 10:05.000
Well if you think about this, that is all of redundancy performance and scale, right?

10:05.000 --> 10:10.720
I mean, saying if I just have a storage which is not distributed, right, which is kind of

10:10.720 --> 10:19.080
really sort of leads with one device only, I will be limited and all of those.

10:19.080 --> 10:24.200
I think this is even more important in the cloud, right?

10:24.200 --> 10:29.120
Because if you look at the age before the cloud, often we would be in a case where we

10:29.120 --> 10:36.040
have some one very powerful, very redundant server, right, maybe with a hot swap rate

10:36.040 --> 10:38.720
and redundant power supplies, right?

10:38.720 --> 10:42.480
And we expect that beast is never going to go down, right?

10:42.480 --> 10:46.080
Well, that is not how we operate in the cloud anymore, right?

10:46.080 --> 10:50.360
We assume any company in the cloud is going to die, right?

10:50.360 --> 10:54.080
And they actually do die more frequently, right?

10:54.080 --> 10:59.200
If you look at the stats within like a mean time within failures, let's say 4 VMs compared

10:59.200 --> 11:06.600
to what you could get with some beast from the past, well, it's going to be different,

11:06.600 --> 11:07.600
right?

11:07.600 --> 11:14.680
But that means we need things distributed at least from a high availability standpoint.

11:14.680 --> 11:15.680
Okay.

11:15.680 --> 11:24.200
With that, let's look a little bit about storage types as promised.

11:24.200 --> 11:27.520
One is our commodity storage types, right?

11:27.520 --> 11:31.240
And this comments to the previous talks, I did this.

11:31.240 --> 11:36.480
Commodity storage types, they are pretty much the same in every cloud.

11:36.480 --> 11:43.680
Their minor differences, but they are, I would say, like a commodity building blocks, right?

11:43.680 --> 11:49.120
We have a relatively simple interface and usually it is relatively easy to migrate.

11:49.120 --> 11:57.240
So the lock-in, right, the word we don't like on this track, right, is going to be relatively

11:57.240 --> 12:00.520
low with them.

12:00.520 --> 12:03.920
One is node local storage, I mentioned.

12:03.920 --> 12:12.600
Hey, well, it's pretty much every major and even your second tier cloud typically offer

12:12.600 --> 12:16.160
you some kind of local storage, right?

12:16.160 --> 12:22.080
And it can vary in terms of performance it offers and so on and so forth.

12:22.080 --> 12:28.520
But that is pretty much the same, right, from what that gives you, right?

12:28.520 --> 12:32.000
And that is fantastic, right?

12:32.000 --> 12:38.260
But again, that is where I would, if you are looking from that, I would focus on the performance

12:38.260 --> 12:43.560
because that is where surprises can await you, right, and say, hey, this cloud vendor

12:43.560 --> 12:46.800
and dad both have a storage, right?

12:46.800 --> 12:54.240
One of them has its, you know, implemented as a very fast NVMe flash storage, other something

12:54.240 --> 13:01.640
not so fast, well, that may have a very big difference for your application.

13:01.640 --> 13:06.920
The second most common one would be natural block storage, right?

13:06.920 --> 13:12.400
That's typically how we store the data so that can, in the cloud, so it can survive

13:12.400 --> 13:18.480
their death of an instance and Amazon would be EBS, right, and all the other cloud has

13:18.480 --> 13:21.960
something similar.

13:21.960 --> 13:28.200
We also have some additional solutions, in this case coming from the property vendors,

13:28.200 --> 13:40.840
right, like from those vendors, right, which, you know, provide you some additional features.

13:40.840 --> 13:46.840
And there is actually quite a lot of different solutions which exist if you want to roll

13:46.840 --> 13:53.360
out their block storage in the open source, right?

13:53.360 --> 14:03.400
And I think this is kind of very cool and that shows how things evolve in open source

14:03.400 --> 14:04.400
space, right?

14:04.400 --> 14:10.520
We had a surface block storage idea for a long time, so a lot of projects evolve, right,

14:10.520 --> 14:15.520
and they have a lot of choices.

14:15.520 --> 14:21.320
The next type of storage in the cloud would be your file storage, right?

14:21.320 --> 14:27.760
Like when you can say, hey, I can mine something, mount something locally, not as a block device,

14:27.760 --> 14:35.960
but as a file system, in many cases that would be your NFS or SMB-compatible file system

14:35.960 --> 14:36.960
or both, right?

14:36.960 --> 14:40.720
Again, all the clouds will support something other.

14:40.720 --> 14:47.280
File systems, there are a number of major property cloud vendors, they support sort

14:47.280 --> 14:48.400
of solution.

14:48.400 --> 14:55.520
In this case, and again in open source, there are also solutions in this case, right?

14:55.520 --> 14:58.560
And you can see there is like some connections, right?

14:58.560 --> 15:03.880
So many open source protocols, you just say, hey, we are focusing on the storage, right?

15:03.880 --> 15:08.240
They may provide different interfaces, right?

15:08.240 --> 15:15.320
And well, and if you, and that's kind of makes sense.

15:15.320 --> 15:18.400
The next one would be the object store, right?

15:18.400 --> 15:24.320
And that is, I think, a very important component which appeared in the cloud.

15:24.320 --> 15:27.320
And that is interesting when you come over to storage, right?

15:27.320 --> 15:32.320
Because if you think about the age before the cloud, we always had that, you know, local

15:32.320 --> 15:38.880
file system, we had like, you know, network servers, right, with your remote file system

15:38.880 --> 15:39.880
for a very long time.

15:39.880 --> 15:48.000
But we didn't really have anything like S3, right, until the, like at least kind of in

15:48.000 --> 15:49.800
any common use, right?

15:49.800 --> 15:57.560
And that has appeared and used a lot those days as a building block for many applications.

15:57.560 --> 15:58.760
Because it's actually very cool, right?

15:58.760 --> 16:00.920
It's kind of bottomless, right?

16:00.920 --> 16:06.880
You can access it on HTTP directly, so you don't have to, you know, process the past

16:06.880 --> 16:11.400
data through your application all the time, right?

16:11.400 --> 16:14.600
It's very scalable and so on and so forth.

16:14.600 --> 16:21.760
Even many databases, those days, again, like both proprietary and open source are now starting

16:21.760 --> 16:30.680
to be built by using object store as a backend instead of your conventional file system.

16:30.680 --> 16:38.840
I think what is interesting in this case is what there are a lot of also object store

16:38.840 --> 16:40.400
cloud vendors which exist, right?

16:40.400 --> 16:49.680
So it's not just Amazon, like, or even kind of major cloud anymore, right?

16:49.680 --> 16:55.240
And here you can see like two types of commercial vendors, right?

16:55.240 --> 17:03.160
Our usual suspects, NetApp and Portworx, they do have a solution for S3 compatibility, right?

17:03.160 --> 17:09.760
But also we have solutions like Wasabi or Blockbase, right, which are offering you S3

17:09.760 --> 17:17.560
which you can, comparable services which we can use as less costly replacements or kind

17:17.560 --> 17:20.560
of like a supplemental to your main cloud, right?

17:20.560 --> 17:22.200
For example, you may say, well, you know what?

17:22.200 --> 17:28.280
I have my stuff in Amazon but I want to make sure also backup somewhere else, you know,

17:28.280 --> 17:29.680
just so well.

17:29.680 --> 17:33.680
There are numbers of vendors out there.

17:33.680 --> 17:47.240
And then if you want to like run the storage in your, well, locally, right, there are also

17:47.240 --> 17:50.440
now number of vendors.

17:50.440 --> 17:54.880
And I specifically wanted to flag with Minio in this case because I think they have been

17:54.880 --> 18:06.720
the most successful, right, as providing S3 compatible interface in their, for private

18:06.720 --> 18:10.280
cloud in those days.

18:10.280 --> 18:11.840
Okay.

18:11.840 --> 18:15.440
Now let's look at the databases and data stores.

18:15.440 --> 18:20.080
I think the interesting thing about the database and data stores is what unlike the previous

18:20.080 --> 18:26.240
storage types which are kind of related to the commoditized, right, have relatively

18:26.240 --> 18:30.840
simple interfaces and relatively simple to replace.

18:30.840 --> 18:37.360
Like if you store data in S3, right, and now want to store it with Minio, well, guess what,

18:37.360 --> 18:38.360
right?

18:38.360 --> 18:43.200
You have a different endpoint, maybe have some, you know, little configuration differences

18:43.200 --> 18:45.720
that that is not a big deal.

18:45.720 --> 18:49.600
Database is very different, right?

18:49.600 --> 18:57.160
And even so-called, I would say, like a similar offerings actually often end up to being very

18:57.160 --> 19:06.240
distant because of their, well, of a lot of complexity which exists in the database space,

19:06.240 --> 19:07.240
right?

19:07.240 --> 19:12.840
So that is, I think, where using some open source solution is especially important.

19:12.840 --> 19:15.520
So let's look at some of the databases in this case.

19:15.520 --> 19:21.600
What I would call Q stream data pipelines, right, wherever we want to call it, right?

19:21.600 --> 19:27.800
That is increasingly is a very important component of modern, you know, data driven architectures,

19:27.800 --> 19:28.800
right?

19:28.800 --> 19:31.760
You often want to say, hey, we have a data comes in, right?

19:31.760 --> 19:37.080
And maybe it kind of flows to a number of, you know, consumers being maybe, you know,

19:37.080 --> 19:40.560
processed along the way.

19:40.560 --> 19:45.880
It's kind of your data plumbing, right?

19:45.880 --> 19:49.760
It's not conventional database, but it's very important.

19:49.760 --> 19:53.160
What I think is interesting in this case, right, is what there are actually a lot of

19:53.160 --> 19:54.160
options.

19:54.160 --> 20:00.960
Well, you see at the Amazon AWS, right, and they probably will have more services than

20:00.960 --> 20:01.960
that, right?

20:01.960 --> 20:04.960
They have a huge amount of solutions in this case.

20:04.960 --> 20:09.440
Some of that is because they kind of started first, right, maybe implement something and

20:09.440 --> 20:14.480
then open source solution exists, right?

20:14.480 --> 20:20.520
And in general, right, because Amazon has a huge number of different services those

20:20.520 --> 20:21.520
days.

20:21.520 --> 20:26.180
I think it's like more than 200.

20:26.180 --> 20:36.840
If you look at the proprietary solutions, in this case, you can see Kafka is the, I

20:36.840 --> 20:45.080
think, the most common solution these days for building your plumbing.

20:45.080 --> 20:49.440
And then additionally, we can see this technology Red Panda coming up, which is saying, hey,

20:49.440 --> 20:53.400
we are providing to you something which is Kafka compatible.

20:53.400 --> 20:59.200
Remember, I mentioned earlier, right, those days people are often building compatibility

20:59.200 --> 21:06.760
of existing protocols, but it is faster, simpler, yada, yada, right?

21:06.760 --> 21:14.720
I put them in a proprietary side, like specifically Red Panda, because they are one of those companies

21:14.720 --> 21:24.200
which started as an open source and then later changed the license to, you know, something

21:24.200 --> 21:25.680
not quite open source.

21:25.680 --> 21:30.280
We do have a lot of solutions in open source.

21:30.280 --> 21:39.240
It's good to point out that Kafka instead is Apache open source project, right?

21:39.240 --> 21:43.560
Confluent has a commercial offerings built on a Kafka, but Kafka itself an open source

21:43.560 --> 21:50.000
as well as actually many other open source solutions in this space.

21:50.000 --> 21:55.440
What I think is interesting in terms of like queues, there is also often certain solutions

21:55.440 --> 21:59.840
which exist in the given programming language ecosystem, right?

21:59.840 --> 22:05.640
So you will find what often, you know, go-long people will have their own choices compared

22:05.640 --> 22:07.560
to the Java people, right?

22:07.560 --> 22:11.880
And so on and so forth.

22:11.880 --> 22:18.080
If you look at relational databases, well, in the cloud, we have a lot of choices often

22:18.080 --> 22:27.560
ranging from providing you a wrapped and extended open source databases to also a proprietary

22:27.560 --> 22:29.320
database available in the cloud, right?

22:29.320 --> 22:39.320
If you want Oracle or Microsoft SQL, typically that also is available on most of the cloud.

22:39.320 --> 22:49.000
What you also see in this case, so there are a lot of property solutions in this case,

22:49.000 --> 22:52.000
right, which exist, right?

22:52.000 --> 23:02.000
And in many cases you'll find those either coming from your property vendor or you see

23:02.000 --> 23:14.240
a lot of companies those days which are providing the property management service, right, around

23:14.240 --> 23:15.680
open source databases.

23:15.680 --> 23:24.320
So for example, you'll find Avian here, right, which is on like one extended provider management

23:24.320 --> 23:31.520
services for a lot of open source databases, but I still put them as property vendor because

23:31.520 --> 23:36.840
if you can say, hey, you know, is there this open source version of your kind of fancy

23:36.840 --> 23:37.840
GUI, right?

23:37.840 --> 23:41.400
So instead of paying you, can I take it and add it in my own data center?

23:41.400 --> 23:44.280
Well, the answer would be no, right?

23:44.280 --> 23:51.880
So, so, foundation, like its solution includes open source data components as a core database,

23:51.880 --> 23:55.480
but as a whole it is, it is not, right?

23:55.480 --> 23:59.800
And that applies to many vendors in those days.

23:59.800 --> 24:08.240
Now if you look at the open source, there are actually a lot of databases available

24:08.240 --> 24:14.840
both from like an old guard like MySQL, Postgres, MariaDB, right, as well as a new folks in

24:14.840 --> 24:25.720
the book like Ugovyte, TIGB, Pircon also provides our own version for MySQL and Postgres, but

24:25.720 --> 24:34.320
typically that is, requires more of, I would say like manual work to deploy, right, compared

24:34.320 --> 24:41.880
to databases as a service which exists in a proprietary space.

24:41.880 --> 24:44.800
Here are some choices in analytical spaces, right?

24:44.800 --> 24:51.720
That is, I think, one of the big decisions for relational databases because of kind of

24:51.720 --> 24:56.680
building a database which optimizes for transactional workload and analytical workload is kind of

24:56.680 --> 24:57.760
quite different, right?

24:57.760 --> 25:02.920
They are designed and shown very, very different, right?

25:02.920 --> 25:08.480
And so there are typically different choices out there.

25:08.480 --> 25:12.520
There is a little bit of overlap those days, right?

25:12.520 --> 25:18.760
Some databases position themselves as hdap, hybrid transaction analytical databases, but

25:18.760 --> 25:28.440
typically the databases are, you know, with one thing or for another.

25:28.440 --> 25:35.240
Here are some relational and analytical databases property, right?

25:35.240 --> 25:46.200
You can see number of very common solution here and then you also have a number of open

25:46.200 --> 25:49.280
source solutions in this case as well, right?

25:49.280 --> 25:53.840
I think what is very interesting is what, as you look at the analytical standpoint,

25:53.840 --> 26:03.720
that they are, it's also like a very big focus, right, if a very large amount of needs, right?

26:03.720 --> 26:10.240
So for example, if you look, some databases mentioned here like, you know, Preston, right,

26:10.240 --> 26:14.560
and saying, hey, we want you to provide information so you can take data from all the different

26:14.560 --> 26:18.560
data sources, right, and join and query wherever you'd like, right?

26:18.560 --> 26:20.720
That's very valid use case, right?

26:20.720 --> 26:24.080
Something like, you know, click house focus on saying, hey, we provide you sort of like

26:24.080 --> 26:25.920
a real time analytics, right?

26:25.920 --> 26:30.920
If you want to insert the data and then have it available for a query next second, well,

26:30.920 --> 26:34.320
that's something what we focus on, right?

26:34.320 --> 26:43.080
Or tigb, as I mentioned, they are the hdap database, okay?

26:43.080 --> 26:46.600
Have some sign to speed up.

26:46.600 --> 26:54.200
So the other class of databases, which is quite important, is the document store, right?

26:54.200 --> 27:01.400
I think if you look at for many, you know, simple applications, some new developers,

27:01.400 --> 27:06.240
right, you just say, hey, you know what, SQL, relational databases, yada yada, too complicated,

27:06.240 --> 27:07.240
right?

27:07.240 --> 27:12.520
You want just to stuff our JavaScript objects directly in database and work with that natively,

27:12.520 --> 27:20.120
not trying to spread them on normalized schema and relational database.

27:20.120 --> 27:26.320
All of the cloud vendors, major one, they're offering their property solution in this space,

27:26.320 --> 27:30.720
as well as we do have number of property solutions in this case.

27:30.720 --> 27:38.160
Like I would say MongoDB and Couchbase are probably the most popular in this regard,

27:38.160 --> 27:44.160
which come in both cloud and enterprise space.

27:44.160 --> 27:49.080
Now if you look at the open source, that is where I would have to say like both open source

27:49.080 --> 27:50.680
and source available, right?

27:50.680 --> 27:58.320
Because well, frankly, the most popular document database is MongoDB, which few years back

27:58.320 --> 28:01.560
ditched open source license, right?

28:01.560 --> 28:06.280
And well, so it is not open source solution anymore, right?

28:06.280 --> 28:13.520
If you're looking for open source compatible, right, there is an early stage open source

28:13.520 --> 28:21.240
MongoDB compatibility, there is early stage project ferret DB, which provides interface

28:21.240 --> 28:25.800
for Postgres, right, which I mentioned.

28:25.800 --> 28:31.480
One thing I would point out here is what relational databases, actually, the lot of work recently

28:31.480 --> 28:37.040
is being much better for document store, right, specifically in JSON support, where you take

28:37.040 --> 28:43.680
MySQL, Postgres, right, or even SQLite, all of them are also usable, right?

28:43.680 --> 28:48.320
So in some cases when you say, well, you know what, I want to have some document store,

28:48.320 --> 28:58.520
but I don't really completely hate open relational databases, that also can be a choice.

28:58.520 --> 29:02.440
Key value stores, that is another important model.

29:02.440 --> 29:06.400
In this case, I think it's interesting what they really can go into two different buckets,

29:06.400 --> 29:07.400
right?

29:07.400 --> 29:12.200
One is, hey, we are using that for caching, it's kind of in memory, transient, if you

29:12.200 --> 29:15.400
lose it, we don't care, but we want that to be fast.

29:15.400 --> 29:18.640
There is number of solution here.

29:18.640 --> 29:23.680
For a property in all cloud solutions, I think Redis is a main leader.

29:23.680 --> 29:31.160
In this case, we have both Redis Enterprise and the cloud.

29:31.160 --> 29:38.120
If you look at the open source key value storage, solutions in my opinion, we also have a key

29:38.120 --> 29:43.880
value, or I would say like a key value plus plus, because some of those solutions have

29:43.880 --> 29:51.800
a much more powerful language than key value, would be DynamoDB, CosmosDB, Bigtable, right,

29:51.800 --> 30:00.960
in a cloud space, Redis Cloud, and the enterprise versions of open source solutions, that's

30:00.960 --> 30:03.760
what exists here.

30:03.760 --> 30:12.080
Here are some examples of open source solutions, which have key value stores, and again, like

30:12.080 --> 30:14.720
a key value store plus plus.

30:14.720 --> 30:24.760
You would find, especially Iris Pike mentioned here, they are, well, do much more than a

30:24.760 --> 30:31.800
key value store, Cassandra as well, but they, I would say, don't position themselves as,

30:31.800 --> 30:36.360
I would say, powerful as document stores.

30:36.360 --> 30:46.520
So, yes, we have also time series databases, that is another class I wanted to cover here.

30:46.520 --> 30:54.920
Right, again, you can see solutions from a property, vendors, from a cloud vendors, property

30:54.920 --> 30:59.960
vendors, and probably what they're most interested here is their open source.

30:59.960 --> 31:06.720
It is also interesting what the time series database is also related in you, in technology

31:06.720 --> 31:14.960
which has a lot more, I would say, choices those days.

31:14.960 --> 31:16.960
Well, let me finish.

31:16.960 --> 31:26.000
I would also mention maybe Percona's role, right, in all of this and what we are trying

31:26.000 --> 31:27.000
to do, right?

31:27.000 --> 31:33.000
What we try to do is to really see, to push the boundaries on what possible, specifically

31:33.000 --> 31:34.000
open source databases.

31:34.000 --> 31:41.920
Like, hey, you know what, if you want to have something which is totally open source, our

31:41.920 --> 31:46.120
focus is on MySQL, MongoDB, and Postgres.

31:46.120 --> 31:49.480
I mentioned MongoDB is not open source anymore.

31:49.480 --> 31:58.880
Well, that's not our choice, right, but our choice, and we are having as much of our tooling

31:58.880 --> 32:03.520
even for MongoDB open source as possible.

32:03.520 --> 32:07.640
And what we build is 100% open source software around that, right?

32:07.640 --> 32:14.040
If you look at our distributions for MySQL, MongoDB, and Postgres, right, generally include

32:14.040 --> 32:19.800
a lot of features of enterprise companies need, like, you know, all you'd see in authentication,

32:19.800 --> 32:26.440
whatever, but it is completely open source, and we focus both on your kind of conventional

32:26.440 --> 32:35.560
or old deployments on Linux as well as we have operators for Kubernetes, right?

32:35.560 --> 32:46.320
I think you have, like, some of the more advanced databases out there, and all that stuff, again,

32:46.320 --> 32:49.320
besides MongoDB is open source.

32:49.320 --> 32:51.960
We don't have any proprietary solution.

32:51.960 --> 32:57.640
Plus, we do have a pure quantum monitoring management, which we position as a single

32:57.640 --> 33:03.080
tooling where you can monitor and manage databases.

33:03.080 --> 33:09.960
You know, you can get something similar to a database as a service experience with Kubernetes

33:09.960 --> 33:14.880
back end, and again, that is all, you know, 100% open source, which you can play with

33:14.880 --> 33:16.880
if you choose.

33:16.880 --> 33:23.480
So to finish it up with our storage in the cloud, right, as you probably have seen me

33:23.480 --> 33:28.400
going through that, right, some of you I see falling asleep, some of you rolling in your

33:28.400 --> 33:33.960
eyes and that is totally appropriate reaction, right, because there's a lot of shit out there,

33:33.960 --> 33:34.960
right?

33:34.960 --> 33:39.880
It's like a lot of options out there.

33:39.880 --> 33:43.960
So important to know here, hey, there is no one size fits all, right?

33:43.960 --> 33:50.920
You guys can look with fits for your job for what your applications need.

33:50.920 --> 33:57.840
But one thing I wanted you to come out with cases, like one last most of the takeaway is

33:57.840 --> 34:04.920
what we could see in all, like, whatever slice and dice, all those areas, there have been

34:04.920 --> 34:13.540
a choice of more than one open source solutions available in every single class of storage

34:13.540 --> 34:15.480
you may need in the cloud.

34:15.480 --> 34:23.440
So that's all I had.

34:23.440 --> 34:29.040
Thank you.

34:29.040 --> 34:32.880
We have a little time for questions.

34:32.880 --> 34:37.800
Hello.

34:37.800 --> 34:53.040
My question is about an interesting tool which used to exist and Percona used to have it

34:53.040 --> 34:57.680
in the MySQL package.

34:57.680 --> 34:58.680
Hand a socket.

34:58.680 --> 34:59.680
Yes.

34:59.680 --> 35:04.120
So I think it was kind of discontinued and I don't think it supports MySQL starting from

35:04.120 --> 35:05.680
5.7.

35:05.680 --> 35:13.640
So is there any movement in direction of supporting this kind of tool which enables you to access

35:13.640 --> 35:20.920
your relational database both ways in a traditional SQL way and in a highly available, highly...

35:20.920 --> 35:22.080
Well, that's right.

35:22.080 --> 35:27.960
So the question is about the hand or socket interface for MySQL.

35:27.960 --> 35:35.160
And yes, and there was this interface, right, gradually it's, I would say, came mostly out

35:35.160 --> 35:39.400
of use, right, and we, you know, stopped supporting that.

35:39.400 --> 35:43.320
If you're con as well, there's a couple of replacements, right?

35:43.320 --> 35:50.520
One is which I think generally cover most of the use case of what hand or socket did.

35:50.520 --> 35:54.560
One is MySQL supports memcache protocol, right?

35:54.560 --> 35:59.560
So if you look at four key value store memcache comparabilities out there and then there is

35:59.560 --> 36:03.640
also something called docstore, right?

36:03.640 --> 36:12.040
That is MongoDB-like protocol, right, which allow you to store documents, like JSON documents

36:12.040 --> 36:13.040
in the MySQL.

36:13.040 --> 36:14.760
That is an other choice, right?

36:14.760 --> 36:20.960
So I think within those two, well, it covers most of the hand or socket use case as well.

36:20.960 --> 36:22.960
Okay.

36:22.960 --> 36:46.040
Thank you, Peter.

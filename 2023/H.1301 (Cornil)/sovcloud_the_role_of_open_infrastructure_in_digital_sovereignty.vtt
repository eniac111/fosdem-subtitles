WEBVTT

00:00.000 --> 00:10.000
Only one minute late.

00:10.000 --> 00:15.680
It's been a long day, so bear with me.

00:15.680 --> 00:18.120
So hello, everyone.

00:18.120 --> 00:22.460
Thanks for joining this talk so late in the day.

00:22.460 --> 00:23.460
My name is Thierry Carreras.

00:23.460 --> 00:28.760
I work for the Open Infrastructure Foundation, which is the home for the OpenStack project

00:28.760 --> 00:31.920
and Kata containers and a few others.

00:31.920 --> 00:35.680
From the accent, you can probably tell I'm based in France.

00:35.680 --> 00:42.480
And so I'm very aware of the questions around digital sovereignty.

00:42.480 --> 00:48.240
And I wanted to use this talk to give you a sense of why from our perspective, digital

00:48.240 --> 00:56.160
sovereignty really matters and how can Open Infrastructure help in that area.

00:56.160 --> 00:58.600
But first, what do we mean by digital sovereignty?

00:58.600 --> 01:02.040
If you've been in this room for the whole day, I'm pretty sure you've already heard

01:02.040 --> 01:03.040
10 definitions.

01:03.040 --> 01:06.040
I'll just add one.

01:06.040 --> 01:11.520
Obviously, the digital sovereignty is around access to data.

01:11.520 --> 01:17.200
And the 21st century is really global and driven by software.

01:17.200 --> 01:22.480
And so in a fast-changing world, whoever adapts the fastest really wins.

01:22.480 --> 01:25.080
It's really a question of disrupt or be disrupted.

01:25.080 --> 01:30.680
So the ability to adapt fast and ship new features fast and deliver new applications

01:30.680 --> 01:34.080
fast is really critical.

01:34.080 --> 01:38.360
But the way you deliver those applications has really been evolving over the past 20

01:38.360 --> 01:39.360
years.

01:39.360 --> 01:43.200
20 years ago, if you started the same time I started, you would procure some physical

01:43.200 --> 01:49.080
hardware and as an application deployer, you would install your operating system, your

01:49.080 --> 01:52.800
dependencies, and your application on top of that.

01:52.800 --> 01:54.460
But that was a bit inconvenient.

01:54.460 --> 01:56.920
So we added more and more layers.

01:56.920 --> 02:00.280
The first layer we added was hardware virtualization.

02:00.280 --> 02:04.360
Abstracting the server, your application is running on from the physical hardware that

02:04.360 --> 02:05.880
runs it.

02:05.880 --> 02:08.920
And you gained a lot of efficiency doing that.

02:08.920 --> 02:14.000
Then we added another layer, which is cloud APIs, which allows you to programmatically

02:14.000 --> 02:17.900
access those virtualized resources.

02:17.900 --> 02:20.120
And so you have those two concepts.

02:20.120 --> 02:25.060
You have programmable infrastructure on one side and you have cloud aware applications

02:25.060 --> 02:28.380
being deployed on top of that.

02:28.380 --> 02:33.800
And this programmable infrastructure is really key to reach the next level of velocity because

02:33.800 --> 02:38.620
machines need to be able to provision the resources that they need by themselves.

02:38.620 --> 02:45.160
And so you really need that programmable infrastructure to reach the next level of velocity and ability

02:45.160 --> 02:47.200
to deliver applications fast.

02:47.200 --> 02:53.200
But building up this programmable infrastructure by yourself is really a challenge.

02:53.200 --> 02:57.880
It's complex to do and it's difficult to find talent that knows how to do it because there

02:57.880 --> 02:59.880
is a lot of demand for those skills.

02:59.880 --> 03:04.960
Luckily, you can pay others to do it for you by using public clouds, available public clouds,

03:04.960 --> 03:07.160
or managed private clouds.

03:07.160 --> 03:12.960
But the trick is the cloud market is really cornered by a couple of internet giants based

03:12.960 --> 03:15.000
in the US or China.

03:15.000 --> 03:20.440
So this really creates a challenge for European governments and companies.

03:20.440 --> 03:26.120
The challenge is that in order to stay competitive, European companies really need access to programmable

03:26.120 --> 03:27.600
infrastructure.

03:27.600 --> 03:33.480
But the most obvious way to get to that programmable infrastructure is to use a hyperscaler cloud

03:33.480 --> 03:36.680
based in the US.

03:36.680 --> 03:41.960
But data is really the basic resource of the 21st century and which legislation your data

03:41.960 --> 03:47.760
leaves under, like Ludovik just said, really ultimately defines who controls it.

03:47.760 --> 03:53.920
Like the US government can compel any US company to disclose their customer data.

03:53.920 --> 03:58.200
In case of a geopolitical conflict, you can see the US government shutting down access

03:58.200 --> 04:03.640
to vital data that is hosted on a US-based company.

04:03.640 --> 04:07.920
This creates really a significant geopolitical vulnerability.

04:07.920 --> 04:12.840
And if the last 10 years are any guide, this vulnerability, if we don't address it, will

04:12.840 --> 04:14.680
only grow.

04:14.680 --> 04:19.280
With the recent pandemic, with the war in Ukraine, we've seen growing willingness by

04:19.280 --> 04:25.400
governments to weaponize their control of the international supply chain.

04:25.400 --> 04:30.720
So really, even assuming good intent from those governments and companies, we are all

04:30.720 --> 04:32.600
friends, right?

04:32.600 --> 04:39.280
The legislation the data leaves under actually affects which laws apply to it.

04:39.280 --> 04:41.120
Obvious statement.

04:41.120 --> 04:46.440
But Europe has really very progressive privacy laws that protect individuals from the reach

04:46.440 --> 04:49.840
of greedy data aggregation companies.

04:49.840 --> 04:55.480
And so how do we enforce those laws in a world where all of that data actually lives in a

04:55.480 --> 04:58.480
place where those laws do not apply?

04:58.480 --> 05:01.720
So even if you assume good intent, there is the risk there.

05:01.720 --> 05:07.760
The solution is, of course, to build our own European-based public clouds.

05:07.760 --> 05:11.200
But it's easier said than done.

05:11.200 --> 05:17.440
Europe really has a vibrant ecosystem of companies, but it really lacks the giants that can compete

05:17.440 --> 05:20.560
with a Google or a Microsoft or an Amazon.

05:20.560 --> 05:28.760
So how can we turn that vibrant ecosystem of smaller actors from a liability to an asset?

05:28.760 --> 05:35.040
We in France have really acknowledged this critical geopolitical vulnerability for a

05:35.040 --> 05:36.040
while.

05:36.040 --> 05:42.360
But I would say that the previous attempts at solving it weren't super successful.

05:42.360 --> 05:48.480
Like for example, we had several attempts at building giant sovereign clouds in the

05:48.480 --> 05:54.040
past, but they were really not adapted to the nature of the European ecosystem.

05:54.040 --> 05:59.240
More recently, they moved towards mandating locally operated systems, which is a great

05:59.240 --> 06:03.920
step, especially as far as government data is concerned.

06:03.920 --> 06:09.840
And for others, it also encouraged cataloguing and describing available services through

06:09.840 --> 06:15.040
initiatives like Gaia X, which make it clear which laws and policy really apply to the

06:15.040 --> 06:16.040
data.

06:16.040 --> 06:22.000
But those efforts were really easily, trivially walked around by the hyperscaler companies.

06:22.000 --> 06:25.720
Some of them co-opted the requirements through local partnerships.

06:25.720 --> 06:31.920
So they would work with a local EU-based company to help them run locally the thing.

06:31.920 --> 06:39.200
So the problem is working with EU-based organizations to run the services locally really maintains

06:39.200 --> 06:41.680
this critical technological dependency.

06:41.680 --> 06:48.600
Like Amazon could just shut down access or weaponize access to information really easily.

06:48.600 --> 06:53.000
In some, I picked on Amazon right now, but it's actually the wrong approach because they're

06:53.000 --> 06:55.280
actually not the ones doing that.

06:55.280 --> 06:58.520
Google and Microsoft have been doing a lot more partnerships.

06:58.520 --> 07:05.200
Amazon just decided to lobby against the law and trying to convince legislators that depriving

07:05.200 --> 07:12.760
EU companies from the amazing Amazon Web Services would critically impact their ability to be

07:12.760 --> 07:15.600
innovative and competitive on the market.

07:15.600 --> 07:20.600
So they basically try to convince legislators that if they don't let people access freely

07:20.600 --> 07:26.520
Amazon Web Services, we're doomed because obviously we can't do that here.

07:26.520 --> 07:28.160
So what do we do now?

07:28.160 --> 07:30.560
In that context, I think open infrastructure can help.

07:30.560 --> 07:35.120
And I want to explain what we mean by open infrastructure first.

07:35.120 --> 07:37.720
What is it and why can it help?

07:37.720 --> 07:42.280
So if we go back to our picture from earlier, programmable infrastructure and cloud aware

07:42.280 --> 07:47.200
applications being deployed on top of that, open infrastructure is really open source

07:47.200 --> 07:52.040
solutions that help you provide that programmable infrastructure.

07:52.040 --> 07:57.960
And standard there used by millions of CPU cores all around the world is a stack composed

07:57.960 --> 08:03.920
of Linux at the virtualization layer, an open stack at the cloud APIs layer, and Kubernetes

08:03.920 --> 08:09.240
at the application orchestration layer, what we call the locky stack.

08:09.240 --> 08:12.680
But why would you use open source for infrastructure?

08:12.680 --> 08:15.760
Why does it matter?

08:15.760 --> 08:21.680
First it really gives everyone access to infrastructure providing technology.

08:21.680 --> 08:23.880
All organizations, all countries.

08:23.880 --> 08:29.020
It really allows to distribute the future more evenly and by making those technologies

08:29.020 --> 08:34.360
accessible to all, you actually allow everyone to play and innovate.

08:34.360 --> 08:40.520
Without friction or having to ask for permission, you maximize innovation as a result.

08:40.520 --> 08:47.040
But beyond those two key benefits, you actually have three properties of open infrastructure

08:47.040 --> 08:54.760
that make it really suitable for using it in a digital sovereignty context.

08:54.760 --> 08:56.520
Independence is one of them.

08:56.520 --> 09:00.900
Open infrastructure is not just open source, it's also openly developed.

09:00.900 --> 09:07.040
So Linux, OpenStack, Kubernetes, those are all developed not by a single vendor, but

09:07.040 --> 09:10.760
by a massive global open collaboration.

09:10.760 --> 09:16.680
And that means everyone can participate on a live playing field under a neutral governance.

09:16.680 --> 09:18.440
Nobody is owning the keys to the kingdom.

09:18.440 --> 09:22.820
Nobody will pull the rug below you by selling to someone else.

09:22.820 --> 09:26.280
Another benefit of open development is transparency.

09:26.280 --> 09:28.840
All technical discussions are happening in the open.

09:28.840 --> 09:32.280
All governance decisions are publicly documented.

09:32.280 --> 09:39.000
Trust is really essential in building a digital sovereign, digitally sovereign cloud system.

09:39.000 --> 09:42.080
And open infrastructure is really naturally transparent.

09:42.080 --> 09:49.840
And finally, being able, giving everyone access to that technology, it allows everyone to

09:49.840 --> 09:53.280
standardize on using the same solutions, which enables interoperability.

09:53.280 --> 10:00.720
Interoperability is really the main challenge for federating a group of smaller actors to

10:00.720 --> 10:06.240
compete with giants because it's really hard to eliminate the differences and present a

10:06.240 --> 10:08.840
coherent user experience.

10:08.840 --> 10:11.040
So you can standardize on available features.

10:11.040 --> 10:12.400
That's a good first step.

10:12.400 --> 10:15.840
You can expose the same APIs, which is even better.

10:15.840 --> 10:19.960
Using the same technical stack obviously is one step above that.

10:19.960 --> 10:25.440
And so EU companies that are standardized on the Loki stack, like Deutsche Telekom,

10:25.440 --> 10:31.880
Chlora, I've seen a hoodie there, OVH Cloud in France, Orange Business Services, Benero

10:31.880 --> 10:37.480
Exign, Fomania Cloudfellow in Poland, Elastix in the Nordics, they all give you the same

10:37.480 --> 10:42.760
APIs backed by the same software and showing good interoperability.

10:42.760 --> 10:48.240
And once combined, all of those public cloud providers give you enough points of presence

10:48.240 --> 10:52.800
and capacity to actually revile any of the hyperscalers.

10:52.800 --> 10:59.960
But in order to increase interoperability even further, you can build a common distribution

10:59.960 --> 11:05.520
and share operational practices that will give you the next level, I mean, perfect interoperability

11:05.520 --> 11:10.000
because it will be basically the same software running in the same conditions in different

11:10.000 --> 11:11.200
data centers.

11:11.200 --> 11:16.680
And this is what the Solvran Cloud Stack project aims to solve and will have a presentation

11:16.680 --> 11:19.200
later.

11:19.200 --> 11:21.040
Here you are, biker.

11:21.040 --> 11:27.120
So I suspect it will go into a lot more details, but I'll just summarize for those who will

11:27.120 --> 11:28.560
not stay in the room.

11:28.560 --> 11:33.600
Solvran Cloud Stack, as the name implies, is an initiative aiming to build a standard

11:33.600 --> 11:38.240
stack for providing software and infrastructure.

11:38.240 --> 11:42.840
It's composed of a standard Loki stack, also making use of Ceph, which is another open

11:42.840 --> 11:44.920
infrastructure component.

11:44.920 --> 11:51.400
It's aiming at enabling a federation of highly interoperable infrastructure providers.

11:51.400 --> 11:58.040
And it's going beyond proposing the same features, exposing the same APIs, running the same software

11:58.040 --> 12:04.120
to sharing the operational choices and best practices.

12:04.120 --> 12:09.080
It's also openly developed open source so anyone can join and participate in a level

12:09.080 --> 12:10.720
playing field.

12:10.720 --> 12:14.520
And I'll conclude on that in summary.

12:14.520 --> 12:21.360
Solvran T is a major challenge for Europe in the 21st century, especially around infrastructure

12:21.360 --> 12:27.520
layers because if we leave the hyperscalers in full control of that layer, we are going

12:27.520 --> 12:35.840
to be easily cut from our sources of information in case of any tension.

12:35.840 --> 12:40.120
Open infrastructure is open source solutions for providing infrastructure for applications

12:40.120 --> 12:42.520
and data.

12:42.520 --> 12:47.960
It enables independence, transparency, and interoperability, which are necessary to really

12:47.960 --> 12:54.040
federate a bunch of local actors to compete with the US-based giants.

12:54.040 --> 12:59.560
And so if you care about digital sovereignty, as you should, have a look at the open infrastructure

12:59.560 --> 13:03.680
power providers that I mentioned, but also at Solvran Cloud Stack and stay in the room

13:03.680 --> 13:09.360
to see the Kurtz presentation later today.

13:09.360 --> 13:10.360
Thanks for listening.

13:10.360 --> 13:21.240
And we have plenty of time for questions.

13:21.240 --> 13:24.240
Questions?

13:24.240 --> 13:33.120
Hi, my name is Michael.

13:33.120 --> 13:37.440
I tried to deploy OpenStack about a decade ago in our internal stuff.

13:37.440 --> 13:38.440
We found it very difficult.

13:38.440 --> 13:43.960
In fact, one of the problems we had were an organization about 12 people.

13:43.960 --> 13:48.680
And OpenStack was clearly appropriate for an organization of 100 people.

13:48.680 --> 13:55.960
And so we went for both simpler solutions, you know, plain-zen KVM and hyperscaler sides

13:55.960 --> 13:57.200
of things.

13:57.200 --> 14:03.160
And my impression is that it hasn't changed much, that OpenStack has a scaling issue,

14:03.160 --> 14:08.600
meaning it's great for large systems and large installations, but it's not good for small

14:08.600 --> 14:09.600
systems.

14:09.600 --> 14:16.640
And so what that means is that I don't develop for the stack that you want to deploy.

14:16.640 --> 14:21.280
I develop for something else because I can't afford to maintain that piece.

14:21.280 --> 14:24.680
One of the annoyances, and I'll just let you answer good, one of the annoyances at the time

14:24.680 --> 14:28.360
was the V6 support was abysmal.

14:28.360 --> 14:34.240
And it's better now, but my impression is still that Kubernetes, for instance, is like,

14:34.240 --> 14:35.240
what's an IPv6?

14:35.240 --> 14:36.640
They just don't care.

14:36.640 --> 14:42.400
And I wonder in this common operational choices and carrier stuff that you're talking about,

14:42.400 --> 14:46.720
whether this is...you're going to address this issue of, well, I can't really move

14:46.720 --> 14:51.880
a cluster from point A to point B if I have overlapping 1918 address spaces.

14:51.880 --> 14:57.200
I need V6 and I need it to work natively and well so that I don't have to think about this

14:57.200 --> 14:58.200
nonsense.

14:58.200 --> 15:06.040
So should I repeat the question for...I hope the question was recorded.

15:06.040 --> 15:13.720
So first on the concern around the size of deployment or the inability to scale down

15:13.720 --> 15:15.360
to simpler deployments.

15:15.360 --> 15:19.560
I would say that it has improved a lot.

15:19.560 --> 15:22.760
Providing infrastructure is really a difficult job.

15:22.760 --> 15:26.400
It's not like something you would deploy on your garage.

15:26.400 --> 15:32.080
If you're at a stage where, like you say, a company with 10 people, I don't think there

15:32.080 --> 15:34.360
is much sense in doing it.

15:34.360 --> 15:42.800
But the main concern was really keeping up to date with upgrades and the cycle of six

15:42.800 --> 15:44.720
months releases that we had.

15:44.720 --> 15:50.440
And we made a lot of progress there in securing the updates, in limiting the amount of changes

15:50.440 --> 15:52.960
that are happening over a cycle of six months.

15:52.960 --> 15:55.920
Pretty mature and stable now.

15:55.920 --> 16:04.640
And we are seeing teams of relatively small numbers running gigantic systems like Ubisoft,

16:04.640 --> 16:10.800
for example, is running a very large OpenStack private cloud for their game servers.

16:10.800 --> 16:15.960
And it's a team of 10 to 12, what they said in the latest webcast.

16:15.960 --> 16:21.760
So obviously, yeah, more for 100 people company than a 410 people company.

16:21.760 --> 16:28.160
In terms of, I think distributions like Server and Cloudstack and others, where there is

16:28.160 --> 16:34.400
also more guidance in the type of options that you should be deploying, more partners

16:34.400 --> 16:38.440
you can really rely on and sharing the same issues will further help.

16:38.440 --> 16:47.800
But it's true that it's more targeted to people that have enough, I would say, the minimum

16:47.800 --> 16:53.000
size of the deployment is more like dozens of servers than three or four servers, for

16:53.000 --> 16:54.000
sure.

16:54.000 --> 16:58.880
In terms of the v6 support, I'm actually a bit surprised because OpenStack had IPv6

16:58.880 --> 17:00.880
support before Amazon did.

17:00.880 --> 17:03.720
Amazon is total stock.

17:03.720 --> 17:10.800
Maybe that's placing the bar very low.

17:10.800 --> 17:15.960
And I don't necessarily have the dual contact that I'm interested in hearing more about

17:15.960 --> 17:18.600
it if we can do that.

17:18.600 --> 17:25.520
But it feels like overall, in terms of updates, and I'm actually very surprised when I talk

17:25.520 --> 17:29.200
to some of the big deployments that we have and see that they're actually running it with

17:29.200 --> 17:32.120
a team of three or four people.

17:32.120 --> 17:35.880
So I would say, I'm not an operator myself.

17:35.880 --> 17:38.240
I'm not running an OpenStack cloud myself.

17:38.240 --> 17:45.680
It's difficult to see directly how easy it is or how difficult it is.

17:45.680 --> 17:52.640
But what we are seeing from practical data is that the more we go, the smaller the teams

17:52.640 --> 17:54.640
are.

17:54.640 --> 17:57.440
We have clearly a talent shortage, so it's difficult to fight talent.

17:57.440 --> 18:03.080
I would say that's the main challenge right now for OpenStack is really the difficulty

18:03.080 --> 18:06.080
to find people that actually have experience doing it.

18:06.080 --> 18:12.840
So most of the companies that are deploying it today, especially in Western Europe, France,

18:12.840 --> 18:17.880
and Germany, there is a lot of training of new people.

18:17.880 --> 18:24.240
They will train their own teams because finding talent on the market is very, very difficult.

18:24.240 --> 18:30.600
I would say that's the main blocker right now if you had to cite one.

18:30.600 --> 18:33.600
Other questions?

18:33.600 --> 18:37.840
Well, if not, thank you all.

18:37.840 --> 18:40.840
I'll be in the room for the rest of the day.

18:40.840 --> 19:04.320
Thank you so much.

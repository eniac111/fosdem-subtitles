1
0:00:00.000 --> 0:00:10.840
All right, thanks for having me folks.

2
0:00:10.840 --> 0:00:18.300
So let's have a quick chat about Suricata, open source ideas, network security monitoring

3
0:00:18.300 --> 0:00:21.060
and all those sorts of things.

4
0:00:21.060 --> 0:00:26.400
And what it used to look like before and what it looks like now, at least from our perspective,

5
0:00:26.400 --> 0:00:32.480
and all the things that we need to take care of and the things that we have still challenges

6
0:00:32.480 --> 0:00:34.520
with.

7
0:00:34.520 --> 0:00:37.000
So a quick overview of the agenda.

8
0:00:37.000 --> 0:00:43.240
We're going to talk about what is Suricata, how it started, how it evolved, challenges

9
0:00:43.240 --> 0:00:50.160
when we're monitoring the traffic and how to get involved basically and how it worked.

10
0:00:50.160 --> 0:00:53.320
First of all, I'll introduce Eric, he's my colleague.

11
0:00:53.320 --> 0:00:57.240
He was supposed to be here today, but he flies gas cancelled and he couldn't make it.

12
0:00:57.240 --> 0:00:59.360
But we did the presentation together.

13
0:00:59.360 --> 0:01:00.360
So apologies.

14
0:01:00.360 --> 0:01:04.000
He actually just touched down at the Brussels airport.

15
0:01:04.000 --> 0:01:06.480
So Eric is the CTO of Staunles Network.

16
0:01:06.480 --> 0:01:07.880
He's part of the OSF team.

17
0:01:07.880 --> 0:01:14.240
That's where I met him during the Suricata, developing during the Suricata project.

18
0:01:14.240 --> 0:01:19.160
He's also an OSF member of the board of directors.

19
0:01:19.160 --> 0:01:24.840
Linux kernel developer, he maintains also Sirius and Celcs.

20
0:01:24.840 --> 0:01:26.480
And that's the Twitter handle in there.

21
0:01:26.480 --> 0:01:28.040
So apologies Eric could not make it.

22
0:01:28.040 --> 0:01:30.160
And that's why I'm making the introduction with him.

23
0:01:30.160 --> 0:01:34.200
He's a great open source colleague and a friend.

24
0:01:34.200 --> 0:01:36.320
My name is Peter Mannev.

25
0:01:36.320 --> 0:01:39.480
I am 13, almost 14 years with Suricata.

26
0:01:39.480 --> 0:01:46.520
I'm part of the OSF exec team and where I usually do a lot of things around Suricata

27
0:01:46.520 --> 0:01:48.600
queuing and trainings.

28
0:01:48.600 --> 0:01:50.920
I'm also chief strategy officer of Staunles Networks.

29
0:01:50.920 --> 0:01:54.960
I'm one of the maintainers for the open source distribution in Celcs.

30
0:01:54.960 --> 0:01:58.760
I really like thread hunting and lots of open source around it.

31
0:01:58.760 --> 0:02:03.240
I'm guessing lots of people here in the conference too.

32
0:02:03.240 --> 0:02:07.840
So what is actually Suricata?

33
0:02:07.840 --> 0:02:12.120
So basically a high performance network security monitoring engine.

34
0:02:12.120 --> 0:02:18.560
That can do active or passive monitoring and also produces a lot of application and process

35
0:02:18.560 --> 0:02:20.520
protocol metadata.

36
0:02:20.520 --> 0:02:26.480
Open source, GPL2 code is available on GitHub of course.

37
0:02:26.480 --> 0:02:30.480
And basically produces when you plug Suricata in the network, it just gives you this high

38
0:02:30.480 --> 0:02:33.960
level situation of what's happening on the network, what's going on, something you should

39
0:02:33.960 --> 0:02:37.360
be aware of or something you didn't know or to confirm things.

40
0:02:37.360 --> 0:02:42.680
For example, you know, you have these a lot of angles like trust but verify to use the

41
0:02:42.680 --> 0:02:43.680
famous quote.

42
0:02:43.680 --> 0:02:46.400
You know, when you have zero trust architectures, you want to confirm that they're actually

43
0:02:46.400 --> 0:02:47.600
implemented.

44
0:02:47.600 --> 0:02:52.160
It's one thing to implement, it's another thing to confirm that it's there.

45
0:02:52.160 --> 0:02:56.880
And actually Suricata is used by a lot of organizations, a lot of people.

46
0:02:56.880 --> 0:02:57.880
It's awesome to see it.

47
0:02:57.880 --> 0:03:02.320
I'm really, really thankful for that and all the feedback.

48
0:03:02.320 --> 0:03:07.280
And sometimes organizations will use it even without knowing because it's embedded in a

49
0:03:07.280 --> 0:03:11.480
lot of vendor appliances and similar.

50
0:03:11.480 --> 0:03:16.320
So what can Suricata do?

51
0:03:16.320 --> 0:03:20.040
Well, today it's a few options there.

52
0:03:20.040 --> 0:03:22.480
It's an IDS system, so intrusion detection system.

53
0:03:22.480 --> 0:03:25.980
It could be in passive mode, right?

54
0:03:25.980 --> 0:03:30.760
So it could be inline, intrusion prevention system where it actually actively stops or

55
0:03:30.760 --> 0:03:32.920
enables a connection to pass through or not.

56
0:03:32.920 --> 0:03:36.880
It can also be just purely network security monitoring perspective.

57
0:03:36.880 --> 0:03:38.360
You know, it works without rules.

58
0:03:38.360 --> 0:03:44.360
It can just generate all sorts of protocol flow data, file extraction and similar.

59
0:03:44.360 --> 0:03:49.800
It can also store everything it sees on disk, so it can also do full packet capture.

60
0:03:49.800 --> 0:03:54.600
And very often you see uses of Suricata in combinations like this.

61
0:03:54.600 --> 0:04:00.760
So for example, IDS plus NSM mode with all the network protocol data and full packet

62
0:04:00.760 --> 0:04:02.000
capture and similar.

63
0:04:02.000 --> 0:04:05.800
There is also something new coming up in Suricata 7.

64
0:04:05.800 --> 0:04:11.960
Suricata 7 RC was just released this week.

65
0:04:11.960 --> 0:04:21.720
And it's called conditional PCAP capture, which is actually code introduced and developed

66
0:04:21.720 --> 0:04:24.040
and donated by Eric.

67
0:04:24.040 --> 0:04:28.120
What it allows you to do is, so for example, if you have an alert, it will save that whole

68
0:04:28.120 --> 0:04:29.120
session.

69
0:04:29.120 --> 0:04:30.400
So not just the packet, but the full session.

70
0:04:30.400 --> 0:04:35.560
So in that way you actually have the full sessions for all alerts stored in PCAP as opposed

71
0:04:35.560 --> 0:04:41.540
to having to do full packet capture, which in a lot of cases might be prohibitive.

72
0:04:41.540 --> 0:04:46.960
So basically use the network to defend ourselves.

73
0:04:46.960 --> 0:04:48.280
Observe protect adapt.

74
0:04:48.280 --> 0:04:49.280
That's what we do.

75
0:04:49.280 --> 0:04:52.240
That's what we try to excel at every day.

76
0:04:52.240 --> 0:04:57.120
And this is a quick snapshot from actually our website.

77
0:04:57.120 --> 0:04:58.640
So some major features.

78
0:04:58.640 --> 0:05:06.240
To name a few, YAML configuration, JSON for output, multithreaded, there's hardware acceleration

79
0:05:06.240 --> 0:05:10.480
and that becomes more and more relevant these days because the speeds are going up and up

80
0:05:10.480 --> 0:05:12.480
all the time.

81
0:05:12.480 --> 0:05:14.640
Network metadata login by a lot of protocols.

82
0:05:14.640 --> 0:05:18.320
We're going to name all of them here.

83
0:05:18.320 --> 0:05:19.560
Some of the main ones are here.

84
0:05:19.560 --> 0:05:28.680
More advanced parsing and automatic detection of HTTP DNS, SMB, SMTPTLS, all those guys

85
0:05:28.680 --> 0:05:30.000
and more.

86
0:05:30.000 --> 0:05:34.280
One thing that Surigata does very well is file extraction.

87
0:05:34.280 --> 0:05:41.800
SMB, FTP, HTTP, HTTP2, SMTP, all that.

88
0:05:41.800 --> 0:05:48.160
And the cool feature about that is actually it automatically deduplicates when it's extracted.

89
0:05:48.160 --> 0:05:53.320
So if the same file is seen 10 times, it will only be saved or extracted once to disk.

90
0:05:53.320 --> 0:05:56.240
So in other words, saving a lot of space.

91
0:05:56.240 --> 0:05:58.680
Really a lot.

92
0:05:58.680 --> 0:06:03.200
And of course, support for SCADA, that's upcoming and we need more and more of that.

93
0:06:03.200 --> 0:06:06.360
But it's also very relevant these days.

94
0:06:06.360 --> 0:06:07.560
So why the network?

95
0:06:07.560 --> 0:06:12.320
Well, because everything happens from the network.

96
0:06:12.320 --> 0:06:18.440
Everything from social media to finance to name it, everything is on the network.

97
0:06:18.440 --> 0:06:22.480
So the good people are there, the bad people are there.

98
0:06:22.480 --> 0:06:33.120
So even if you have malicious actors getting in, even to get in is actually 99% of the

99
0:06:33.120 --> 0:06:35.600
cases, it's over the network.

100
0:06:35.600 --> 0:06:40.200
And once they get in, they need to either exfiltrate or move laterally or do some other

101
0:06:40.200 --> 0:06:41.200
part.

102
0:06:41.200 --> 0:06:42.280
That's still happening on the network.

103
0:06:42.280 --> 0:06:45.600
So you have to be able to observe that.

104
0:06:45.600 --> 0:06:48.760
It's not the only place where you need to observe from security perspective.

105
0:06:48.760 --> 0:06:54.680
There's others, of course, but the network is one of the major ones.

106
0:06:54.680 --> 0:06:59.680
And while you're doing all that, when you're confirming if things are configured as expected

107
0:06:59.680 --> 0:07:04.800
or not, or if all the connections are correct, or there's no some anomaly and all things

108
0:07:04.800 --> 0:07:10.040
like that, you have to be able to identify and stop this activity.

109
0:07:10.040 --> 0:07:12.840
Granted, there are differences.

110
0:07:12.840 --> 0:07:17.960
So a university network is totally different from a bank corporate network.

111
0:07:17.960 --> 0:07:21.960
There's totally different things.

112
0:07:21.960 --> 0:07:25.240
So network metadata logging.

113
0:07:25.240 --> 0:07:35.160
So we actually provide a lot of metadata around any alert event or metadata just on its own.

114
0:07:35.160 --> 0:07:36.360
You don't need to have an alert.

115
0:07:36.360 --> 0:07:42.720
So default output format is JSON, right, JavaScript object notation.

116
0:07:42.720 --> 0:07:47.360
And on the right hand side here, you can see actually a picture, a small snippet actually

117
0:07:47.360 --> 0:07:51.980
of an event type, HTTP or an HTTP protocol.

118
0:07:51.980 --> 0:07:55.640
So all the different protocols have their own event type and they're logged in like

119
0:07:55.640 --> 0:07:56.640
that.

120
0:07:56.640 --> 0:08:00.120
And then next to that, you also have alerts.

121
0:08:00.120 --> 0:08:05.080
So file identification and extraction.

122
0:08:05.080 --> 0:08:08.920
One thing to mention is that file identification is done on the fly.

123
0:08:08.920 --> 0:08:14.840
And it's automatic, regardless of extensions and similar things like that, is just using

124
0:08:14.840 --> 0:08:19.760
lib magic and those tools to be able to identify a file.

125
0:08:19.760 --> 0:08:23.920
So if it's like an executable, it's a PDF or if it's a PDF, but with an extension TXT,

126
0:08:23.920 --> 0:08:29.340
we'll still be able to match and extract if you want to that file.

127
0:08:29.340 --> 0:08:38.360
You can also match on share sums and other attributes of the file info events.

128
0:08:38.360 --> 0:08:42.120
So as I mentioned, extract the storage system, deduplicate it.

129
0:08:42.120 --> 0:08:50.600
That really saves a lot of conversations with finance about sizing.

130
0:08:50.600 --> 0:08:54.080
So we have some pickup capabilities.

131
0:08:54.080 --> 0:08:57.560
Now what do I mean by that?

132
0:08:57.560 --> 0:09:02.400
Besides the fact that Srikata can actually store everything on disk and do full packet

133
0:09:02.400 --> 0:09:05.000
captures, Srikata can also read pickups.

134
0:09:05.000 --> 0:09:12.080
It's actually, that part is also used a lot in a lot of sandboxes, including, so for example,

135
0:09:12.080 --> 0:09:13.080
there is a few out there.

136
0:09:13.080 --> 0:09:18.400
If you Google sandbox, for example, there's a few that even offer free public services.

137
0:09:18.400 --> 0:09:24.600
But to name one, anyone is like that actually automatically when a sample is detonated,

138
0:09:24.600 --> 0:09:28.880
they also save the network traffic.

139
0:09:28.880 --> 0:09:34.720
And that's also run by Srikata just to see what network protocol data and alerts are

140
0:09:34.720 --> 0:09:35.720
in there.

141
0:09:35.720 --> 0:09:38.760
So Srikata can, you know, it can read a single pink app.

142
0:09:38.760 --> 0:09:43.400
You can actually spin up a unique socket, let's say, and just feed pickups to it every

143
0:09:43.400 --> 0:09:45.400
now and then.

144
0:09:45.400 --> 0:09:49.880
You can point it to a folder and it will keep reading from that folder until it reads all

145
0:09:49.880 --> 0:09:50.880
the pickups.

146
0:09:50.880 --> 0:09:54.560
Or if there is nothing there, it will pause and it will stop.

147
0:09:54.560 --> 0:09:57.560
And when you throw a pickup in the folder, it will continue really automatically.

148
0:09:57.560 --> 0:10:02.200
It's really, really automated in that part.

149
0:10:02.200 --> 0:10:06.520
And of course, you need to have multiple instances just to be on the safe side with that new

150
0:10:06.520 --> 0:10:07.520
chain.

151
0:10:07.520 --> 0:10:10.360
So in QA, you want to move it into PROB.

152
0:10:10.360 --> 0:10:16.160
So passive monitoring, how does it actually work?

153
0:10:16.160 --> 0:10:17.160
Here's an example.

154
0:10:17.160 --> 0:10:22.120
Basically, we hooked up to a tap or a mirror port on a switch and we just sniffed the traffic.

155
0:10:22.120 --> 0:10:26.440
Now, where you place that, you're going to need probably multiple sensors in different

156
0:10:26.440 --> 0:10:27.440
scenarios.

157
0:10:27.440 --> 0:10:31.900
You know, it depends where you have on-prem cloud, virtual infrastructure and all that.

158
0:10:31.900 --> 0:10:34.260
So you have to probably have multiple things.

159
0:10:34.260 --> 0:10:38.720
But in general, this is basically where it sits in passive mode.

160
0:10:38.720 --> 0:10:44.920
So it logs all the alerts, the protocol metadata, any file instruction events, pickups and all

161
0:10:44.920 --> 0:10:50.800
those things based on the monitoring that it does for that network.

162
0:10:50.800 --> 0:10:53.640
Now active monitoring, this is a little bit different.

163
0:10:53.640 --> 0:10:55.280
We stay in line.

164
0:10:55.280 --> 0:10:57.720
So we allow or not traffic to pass.

165
0:10:57.720 --> 0:10:59.120
This is a bit more business critical.

166
0:10:59.120 --> 0:11:00.600
Well, no, not a bit more.

167
0:11:00.600 --> 0:11:06.920
It's much more critical because it's actually able to stop effectively traffic.

168
0:11:06.920 --> 0:11:12.400
So a lot more testing and due diligence and queuing is needed there.

169
0:11:12.400 --> 0:11:13.800
But basically, how does it work?

170
0:11:13.800 --> 0:11:16.600
So basically, you have this setup here.

171
0:11:16.600 --> 0:11:22.320
You have a user employee that receives a malicious document.

172
0:11:22.320 --> 0:11:28.880
Usually in a lot of cases, it all starts with some sort of link or attachment that is being

173
0:11:28.880 --> 0:11:32.080
without intention opened by a user or clicked by a user.

174
0:11:32.080 --> 0:11:38.120
So you have a network request and usually there is some sort of a signature or a rule

175
0:11:38.120 --> 0:11:41.840
that vets the traffic or inspects the traffic and says, yes, you can pass, no, you cannot

176
0:11:41.840 --> 0:11:42.840
pass.

177
0:11:42.840 --> 0:11:46.720
And this is a very basic example here, for example, a PowerShell script.

178
0:11:46.720 --> 0:11:48.400
And then based on that, there is a verdict.

179
0:11:48.400 --> 0:11:51.920
Yes, you can go or no, you cannot go.

180
0:11:51.920 --> 0:11:53.640
Either or.

181
0:11:53.640 --> 0:11:55.040
And that's the inline mode, right?

182
0:11:55.040 --> 0:12:00.600
So there you're actually actively making decisions of what can and cannot pass and similar.

183
0:12:00.600 --> 0:12:04.720
So one is much more acute.

184
0:12:04.720 --> 0:12:09.400
The other one is much easier because in the passive mode, you're just monitoring traffic.

185
0:12:09.400 --> 0:12:13.840
So a little bit about our history and how we get there.

186
0:12:13.840 --> 0:12:17.960
How did we get here?

187
0:12:17.960 --> 0:12:22.600
So first lines of code, 2007 by Victor Julian.

188
0:12:22.600 --> 0:12:27.920
As a lead developer of Suicata, first release was in 2009.

189
0:12:27.920 --> 0:12:34.800
I joined the project 2010 April, May, somewhere around there.

190
0:12:34.800 --> 0:12:37.660
So we are open source GPL.

191
0:12:37.660 --> 0:12:45.120
We actually have actively contributors and people contributing code, test, donations

192
0:12:45.120 --> 0:12:47.280
from 23 different countries at the moment.

193
0:12:47.280 --> 0:12:53.200
Or at least that was the last statistic, but basically all continents.

194
0:12:53.200 --> 0:12:56.160
Suicata is owned by a nonprofit foundation.

195
0:12:56.160 --> 0:13:01.600
The Suicata code, it's open source and it's on GitHub, but it's owned by a nonprofit foundation

196
0:13:01.600 --> 0:13:07.480
on purpose and the purpose is actually so that it could never be sold.

197
0:13:07.480 --> 0:13:10.280
That's it.

198
0:13:10.280 --> 0:13:14.480
And this is basically how we started.

199
0:13:14.480 --> 0:13:17.040
OSFnet, you'll find a little bit more info.

200
0:13:17.040 --> 0:13:21.760
So as I mentioned, a little bit of a visual representation in there.

201
0:13:21.760 --> 0:13:29.160
So our first Suicata training, believe it or not, it was in 2013 and our first Suicon

202
0:13:29.160 --> 0:13:32.080
was in 2015.

203
0:13:32.080 --> 0:13:38.680
And those were a lot of fun events and we learned a lot just by talking and interacting

204
0:13:38.680 --> 0:13:39.840
with the community.

205
0:13:39.840 --> 0:13:46.000
So a big help there from the community.

206
0:13:46.000 --> 0:13:52.560
And how did it used to work and look back in the day?

207
0:13:52.560 --> 0:13:55.200
So I had to generate that.

208
0:13:55.200 --> 0:13:58.920
This is basically an alert of what it looked like 14 years ago, what it looked like 20

209
0:13:58.920 --> 0:14:00.080
years ago as well.

210
0:14:00.080 --> 0:14:11.400
So I had to generate that manually to look at what it produces.

211
0:14:11.400 --> 0:14:17.960
So basically that's an alert from 14, 15, 20 years ago, things like that.

212
0:14:17.960 --> 0:14:19.520
Not much to see there.

213
0:14:19.520 --> 0:14:20.920
Not much to say there, right?

214
0:14:20.920 --> 0:14:24.280
So you have an IP and a port and a message.

215
0:14:24.280 --> 0:14:26.280
What are you going to do with it?

216
0:14:26.280 --> 0:14:30.800
Now you need to go find other tools, other protocol logs.

217
0:14:30.800 --> 0:14:35.400
You need to go to different machines to figure out what this IP is, what's that port, what's

218
0:14:35.400 --> 0:14:37.720
happened before, what happened after.

219
0:14:37.720 --> 0:14:38.720
Is it a server?

220
0:14:38.720 --> 0:14:39.720
Is it a laptop?

221
0:14:39.720 --> 0:14:41.600
Is it, guess, whatever it is.

222
0:14:41.600 --> 0:14:44.440
So you needed to do a lot of work.

223
0:14:44.440 --> 0:14:48.200
This was just like a message.

224
0:14:48.200 --> 0:14:52.400
But back then it was one of the few things that were there, right?

225
0:14:52.400 --> 0:14:54.720
So there was nothing more than that.

226
0:14:54.720 --> 0:14:58.000
So fast forward to today.

227
0:14:58.000 --> 0:15:02.560
So this is an example for an alert, but in a graphical interface anyway.

228
0:15:02.560 --> 0:15:08.880
So you have the alert, you have the signature metadata, you have in this case its HTTP protocol.

229
0:15:08.880 --> 0:15:12.560
And a lot of things do happen over clear text, by the way, because it's not vetted that much,

230
0:15:12.560 --> 0:15:15.800
especially in some environments.

231
0:15:15.800 --> 0:15:22.240
And you also have the flow record, packets, bytes to clients to server, similar things,

232
0:15:22.240 --> 0:15:23.560
durations, and all those things.

233
0:15:23.560 --> 0:15:29.440
So you have a much better understanding when you look at an alert now, aha, okay, so this

234
0:15:29.440 --> 0:15:32.920
is the status code, this is the request, this is the file, and all those things.

235
0:15:32.920 --> 0:15:35.640
So you can actually judge much more.

236
0:15:35.640 --> 0:15:43.360
And one thing that actually came with time in Suricata is something called Flow ID.

237
0:15:43.360 --> 0:15:50.280
What Flow ID allows you, this was natively introduced in Suricata in 2014, what Flow ID

238
0:15:50.280 --> 0:15:56.800
allows you to achieve is basically to correlate the specific alert to any and other protocol

239
0:15:56.800 --> 0:15:58.600
data from the same flow and session.

240
0:15:58.600 --> 0:16:03.200
So if you have an alert over SMB or something like that, you have all the SMB protocol records,

241
0:16:03.200 --> 0:16:08.760
the extracted files, you know, a pickup saved if you need the pickup, you have all that

242
0:16:08.760 --> 0:16:10.320
in the package.

243
0:16:10.320 --> 0:16:14.680
So much bigger evolution than what you saw in the previous screenshot.

244
0:16:14.680 --> 0:16:18.160
So how it works, this is a screenshot, for example, from ebox.

245
0:16:18.160 --> 0:16:24.640
It's a tool developed by Jason Ish, he's our colleague from the Suricata team.

246
0:16:24.640 --> 0:16:27.120
And here's a quick example.

247
0:16:27.120 --> 0:16:30.700
Yeah, every session has a Flow ID, right?

248
0:16:30.700 --> 0:16:36.040
So here is an alert with a Flow ID, and that translates to, in this case, the Flow ID correlates

249
0:16:36.040 --> 0:16:43.080
the alerts to the flow record, to the HTTP record, to the file info, which is actually

250
0:16:43.080 --> 0:16:47.760
the file metadata for that file transaction.

251
0:16:47.760 --> 0:16:53.520
So much bigger, much better visibility, and you can actually make a decision much faster

252
0:16:53.520 --> 0:16:58.420
than needing to go look in other tools.

253
0:16:58.420 --> 0:17:02.960
This is actually a showcase of Flow ID by Sirius, which is an open source web interface

254
0:17:02.960 --> 0:17:05.980
as part of Celcs that they help maintain.

255
0:17:05.980 --> 0:17:10.580
But in any way, here is the file info on the bottom that is highlighted.

256
0:17:10.580 --> 0:17:17.640
You have the shad, the file magic, and everything is correlated between alerts, file info, flow

257
0:17:17.640 --> 0:17:24.240
protocol logs by the help of that Flow ID, which helps glue everything together.

258
0:17:24.240 --> 0:17:26.900
So really, really powerful.

259
0:17:26.900 --> 0:17:31.560
If I need, often enough, I need to explain Suricata in one slide today.

260
0:17:31.560 --> 0:17:33.400
This is what Suricata does today.

261
0:17:33.400 --> 0:17:35.440
One IDS plus NSM mode.

262
0:17:35.440 --> 0:17:39.800
So you have the alerts, you have the protocol data, you have the network logs, the file

263
0:17:39.800 --> 0:17:43.760
transactions, you're doing file transactions, and the pickup recordings, right?

264
0:17:43.760 --> 0:17:45.960
So you have everything in a package.

265
0:17:45.960 --> 0:17:50.320
It's much different when I started the list.

266
0:17:50.320 --> 0:17:52.160
So we have evolved.

267
0:17:52.160 --> 0:17:55.960
And here is another run that is possible.

268
0:17:55.960 --> 0:18:01.880
So you could actually, it's a little known fact that Suricata alerts are only about 5,

269
0:18:01.880 --> 0:18:04.440
10% of all data that it produces.

270
0:18:04.440 --> 0:18:08.640
The rest of the data is all protocols, data, metadata, and things like that.

271
0:18:08.640 --> 0:18:11.080
The alerts are very, very small part.

272
0:18:11.080 --> 0:18:14.760
And alerts, now at least I look at them as just a context.

273
0:18:14.760 --> 0:18:15.760
It gives me something.

274
0:18:15.760 --> 0:18:18.240
It gives me an idea of what's happening.

275
0:18:18.240 --> 0:18:19.840
That's it and that's all.

276
0:18:19.840 --> 0:18:21.880
I don't necessarily look at it as true or false positives.

277
0:18:21.880 --> 0:18:24.520
It's just like, okay, so that's what happened.

278
0:18:24.520 --> 0:18:27.960
I need the context around it.

279
0:18:27.960 --> 0:18:34.000
Suricata can function without signatures or those two, although it's not recommended because

280
0:18:34.000 --> 0:18:36.960
they help highlight certain events.

281
0:18:36.960 --> 0:18:38.800
So what challenges do we have?

282
0:18:38.800 --> 0:18:42.320
Well, all those years we need to keep the pace, right?

283
0:18:42.320 --> 0:18:43.320
We need to adapt.

284
0:18:43.320 --> 0:18:47.040
We need to move forward.

285
0:18:47.040 --> 0:18:49.160
Signatures have evolved at least in Suricata.

286
0:18:49.160 --> 0:18:56.120
Back in the day, it used to be a pattern match, a buffer overflow, some content triggering

287
0:18:56.120 --> 0:18:58.120
in the payload.

288
0:18:58.120 --> 0:19:00.880
It was very bounded with the IPS mindset.

289
0:19:00.880 --> 0:19:01.880
So you have to stop it.

290
0:19:01.880 --> 0:19:03.920
You have to look for something specific.

291
0:19:03.920 --> 0:19:04.920
It's expensive.

292
0:19:04.920 --> 0:19:11.400
It's CPU intensive actually to look on the fly at the 100 gigabit a second, for example,

293
0:19:11.400 --> 0:19:15.240
for a pattern.

294
0:19:15.240 --> 0:19:20.220
For example, in IPAC, you need to block, stop, protect the assets and similar.

295
0:19:20.220 --> 0:19:26.620
So we need to evolve from that to actually a bit more behavior analytics and including

296
0:19:26.620 --> 0:19:28.880
from the perspective of infrastructure, right?

297
0:19:28.880 --> 0:19:33.320
So I can say, hey, how many proxies they have on the network, right?

298
0:19:33.320 --> 0:19:34.320
That's interesting.

299
0:19:34.320 --> 0:19:37.680
Do you have proxies somewhere that, NGINX, for example, proxies that somewhere in the

300
0:19:37.680 --> 0:19:40.280
network that they don't expect them to be?

301
0:19:40.280 --> 0:19:43.280
That sort of visibility, that kind of difference.

302
0:19:43.280 --> 0:19:48.200
So TLS, okay, TLS is encrypted, sure.

303
0:19:48.200 --> 0:19:50.680
But the handshake is encrypted.

304
0:19:50.680 --> 0:19:53.760
And during the handshake, you can see a lot of things, including ciphers and things like

305
0:19:53.760 --> 0:19:54.760
that.

306
0:19:54.760 --> 0:19:56.160
What do you care about the cipher?

307
0:19:56.160 --> 0:19:57.160
Of course you do.

308
0:19:57.160 --> 0:19:58.160
Is it secure?

309
0:19:58.160 --> 0:19:59.160
Is it degraded?

310
0:19:59.160 --> 0:20:00.160
Is it recommended?

311
0:20:00.160 --> 0:20:03.960
Do you have applications that are using degraded ciphers?

312
0:20:03.960 --> 0:20:04.960
How do you know?

313
0:20:04.960 --> 0:20:06.520
Network security monitoring.

314
0:20:06.520 --> 0:20:08.600
That's the easiest way to do it, actually.

315
0:20:08.600 --> 0:20:13.600
For one, much easier than the other way.

316
0:20:13.600 --> 0:20:16.280
Put it that way.

317
0:20:16.280 --> 0:20:23.120
So you have system updates.

318
0:20:23.120 --> 0:20:27.880
You know, who's updating Debian, who's updating Ubuntu, things like that.

319
0:20:27.880 --> 0:20:29.280
They're very visible on the network.

320
0:20:29.280 --> 0:20:30.280
You know.

321
0:20:30.280 --> 0:20:32.520
And it's not about the actual system of data.

322
0:20:32.520 --> 0:20:38.080
It's about actually do you expect it to happen where it happens and where it happens.

323
0:20:38.080 --> 0:20:41.840
So, yeah, we need to evolve towards that direction.

324
0:20:41.840 --> 0:20:47.960
And we have managed actually to do a huge leap there.

325
0:20:47.960 --> 0:20:49.380
More protocol implementation, right?

326
0:20:49.380 --> 0:20:50.760
So we need more and more protocols.

327
0:20:50.760 --> 0:20:51.760
Of course we do.

328
0:20:51.760 --> 0:20:56.120
But, you know, as it says here, it's no longer a network grip.

329
0:20:56.120 --> 0:20:57.440
So you have different protocols.

330
0:20:57.440 --> 0:21:03.600
You need application layer identification regardless of the port, you know.

331
0:21:03.600 --> 0:21:05.120
So it has to be automated.

332
0:21:05.120 --> 0:21:06.680
You need parsing.

333
0:21:06.680 --> 0:21:07.680
You need logging.

334
0:21:07.680 --> 0:21:09.040
You need to parse the protocol.

335
0:21:09.040 --> 0:21:10.920
You need to log it correctly.

336
0:21:10.920 --> 0:21:13.840
All those things require time and effort.

337
0:21:13.840 --> 0:21:17.560
You need specific keywords so you can hook up detection to for different parts of the

338
0:21:17.560 --> 0:21:20.880
protocol.

339
0:21:20.880 --> 0:21:25.300
And we need like secure protocol implementation.

340
0:21:25.300 --> 0:21:33.440
So by that way, Suricata needs to parse everything and anything on the network.

341
0:21:33.440 --> 0:21:37.200
And trust me, everything and anything on the network doesn't fold the RFC.

342
0:21:37.200 --> 0:21:38.900
It just doesn't.

343
0:21:38.900 --> 0:21:43.160
So we need to follow the RFC one and two, we don't.

344
0:21:43.160 --> 0:21:45.440
Because we can't, you know, we can't crash.

345
0:21:45.440 --> 0:21:52.000
We need to actually keep inspecting and alert for problems.

346
0:21:52.000 --> 0:22:01.360
Everybody has, not everybody, a lot of tools have vulnerability based on protocol process.

347
0:22:01.360 --> 0:22:02.360
Work Shack has a lot.

348
0:22:02.360 --> 0:22:04.160
Suricata has a few and similar.

349
0:22:04.160 --> 0:22:09.320
So one way to battle and combat that is the combination of Rust and known for.

350
0:22:09.320 --> 0:22:10.400
Memory safety, thread safety.

351
0:22:10.400 --> 0:22:11.760
C is not safe, right?

352
0:22:11.760 --> 0:22:15.280
C memory requests manual.

353
0:22:15.280 --> 0:22:17.200
If it's not done correctly, it's not done properly.

354
0:22:17.200 --> 0:22:21.640
Sec false memlix, they can all occur in there.

355
0:22:21.640 --> 0:22:24.600
Here's an example of Rust known parser that we use in Suricata.

356
0:22:24.600 --> 0:22:31.840
So the Suricata is a combination of C and Rust known implementation.

357
0:22:31.840 --> 0:22:36.680
And that started only a couple years ago and it's more and more of that just to help us

358
0:22:36.680 --> 0:22:40.000
be more safe when we inspect and do things.

359
0:22:40.000 --> 0:22:41.360
There's the outside evolution, right?

360
0:22:41.360 --> 0:22:46.400
So networks, speeds increase, demand increases.

361
0:22:46.400 --> 0:22:49.160
There is encryption, there's less visibility.

362
0:22:49.160 --> 0:22:52.080
But a lot of data.

363
0:22:52.080 --> 0:22:58.760
I was earlier, in January, I had a talk at a different conference and after the talk

364
0:22:58.760 --> 0:23:05.080
a person approached me, he's like, do you have any recommendations of how to improve

365
0:23:05.080 --> 0:23:06.080
Suricata performance?

366
0:23:06.080 --> 0:23:07.080
I'm like, yeah, sure.

367
0:23:07.080 --> 0:23:10.760
And I said, what's your setup?

368
0:23:10.760 --> 0:23:14.920
He's like, we have over 25, 100 give it solutions.

369
0:23:14.920 --> 0:23:19.440
I'm like, okay, we need to talk.

370
0:23:19.440 --> 0:23:20.920
So it's very interesting.

371
0:23:20.920 --> 0:23:23.000
Things like that are dominant and happening.

372
0:23:23.000 --> 0:23:29.160
So it's different, you need to keep up with those evolutions too and make sure that these

373
0:23:29.160 --> 0:23:33.920
people actually can, these setups and people can benefit from everything we do.

374
0:23:33.920 --> 0:23:36.680
Challenges, there's a lot.

375
0:23:36.680 --> 0:23:41.540
Everything from mirroring the traffic to one-sided traffic to encryption to NIC of loading because

376
0:23:41.540 --> 0:23:45.400
we actually do need to inspect the traffic as the end user or the end device will see

377
0:23:45.400 --> 0:23:52.880
it, not as the devices in the network pass it over to one another.

378
0:23:52.880 --> 0:23:59.000
The volume, size of logs, it's not uncommon to have, depending on the link speed, of course,

379
0:23:59.000 --> 0:24:02.520
it's not uncommon to have one, two, three, five more billion of logs a day.

380
0:24:02.520 --> 0:24:03.760
What do you do with them?

381
0:24:03.760 --> 0:24:05.520
That's a different topic.

382
0:24:05.520 --> 0:24:08.960
So here it comes, the deduplication and all the stuff that we actually also need to take

383
0:24:08.960 --> 0:24:12.040
care of.

384
0:24:12.040 --> 0:24:16.560
And QA anyone while we have this?

385
0:24:16.560 --> 0:24:18.340
It's quite an effort.

386
0:24:18.340 --> 0:24:22.680
So when we talk about encryption, I mentioned, so depending on the protocol version and similar

387
0:24:22.680 --> 0:24:27.800
things you have TLS one, two, one, three, one, one, all sorts of things.

388
0:24:27.800 --> 0:24:31.880
But during the clear handshake, you can actually extract a lot of information.

389
0:24:31.880 --> 0:24:34.080
These are some of the things that we extract actually.

390
0:24:34.080 --> 0:24:39.880
The SNI, the subject, e-shore, you can deduct Cypher calls from there as well, J83, J83S,

391
0:24:39.880 --> 0:24:42.200
fingerprinting, TLS version is similar.

392
0:24:42.200 --> 0:24:46.760
So we need to tell Suricata what to do when it detects that the connection is encrypted.

393
0:24:46.760 --> 0:24:47.760
So what do you do?

394
0:24:47.760 --> 0:24:48.760
You want to keep inspecting it?

395
0:24:48.760 --> 0:24:55.920
You want to keep it pointless because it's encrypted or you want to pass it to a specific,

396
0:24:55.920 --> 0:24:59.880
some hardware has already built a function so it can say bypass it on the hardware level

397
0:24:59.880 --> 0:25:03.320
as soon as it takes it's encrypted because there's nothing more we can do.

398
0:25:03.320 --> 0:25:07.400
There's certain things that we can take, continue on tracking and generate logs, for example,

399
0:25:07.400 --> 0:25:10.000
the flow, how big is it and things like that.

400
0:25:10.000 --> 0:25:14.480
But we need to be able to relate that information because it's pointless, as I mentioned, if

401
0:25:14.480 --> 0:25:15.480
it's encrypted.

402
0:25:15.480 --> 0:25:21.720
We know a lot of decryption devices in similar things that Suricata sticks next to or behind,

403
0:25:21.720 --> 0:25:25.880
but that's a setup, that's an architecture issue.

404
0:25:25.880 --> 0:25:32.400
So these four major factors that impact Suricata performance, rules, Suricata version, hardware

405
0:25:32.400 --> 0:25:33.880
using type of traffic.

406
0:25:33.880 --> 0:25:37.640
Again, university traffic is much more different than a regular corporate traffic where everything

407
0:25:37.640 --> 0:25:38.640
is vetted.

408
0:25:38.640 --> 0:25:46.440
So you learn a lot from both deployments, for example, just using these two as an example.

409
0:25:46.440 --> 0:25:47.440
We're software, right?

410
0:25:47.440 --> 0:25:48.440
So we need to run any hardware.

411
0:25:48.440 --> 0:25:50.600
Now that's not easy to achieve.

412
0:25:50.600 --> 0:25:55.680
We need a lot of resistance, QAing and all those similar things.

413
0:25:55.680 --> 0:26:00.000
So what actually happens, so here's an example of workers more than Suricata.

414
0:26:00.000 --> 0:26:03.520
As you can see, this is a network card and it has different cues.

415
0:26:03.520 --> 0:26:11.720
In each protocol, sorry, each thread, each record actually enters and goes through these

416
0:26:11.720 --> 0:26:16.440
points, capture the cold stream, detect output, output, especially when you're writing.

417
0:26:16.440 --> 0:26:21.960
So it needs to be in that, this is an example of that specific order when the traffic comes

418
0:26:21.960 --> 0:26:25.720
to the network, how it's passed to the Suricata and what Suricata goes through in a very high

419
0:26:25.720 --> 0:26:29.040
level.

420
0:26:29.040 --> 0:26:33.800
Most of Nixxer are made for web file servers at scale.

421
0:26:33.800 --> 0:26:37.080
They're not specifically made for ideas, some are.

422
0:26:37.080 --> 0:26:41.680
But ideas need to see the traffic, the network security monitoring needs to see the traffic

423
0:26:41.680 --> 0:26:45.520
as this end device will actually see it in order.

424
0:26:45.520 --> 0:26:53.000
Everything needs to be in order in the same flow so that we can expect it properly.

425
0:26:53.000 --> 0:26:58.280
And a small word, so back in the day when I started, there was different capture methods

426
0:26:58.280 --> 0:27:00.440
and they evolved over time.

427
0:27:00.440 --> 0:27:05.320
But one of the fastest things that was back there was PF ring and that was actually, we

428
0:27:05.320 --> 0:27:08.560
received a lot of help from Luca and Alfredo.

429
0:27:08.560 --> 0:27:09.760
Thank you guys.

430
0:27:09.760 --> 0:27:15.680
So kernel 2.6 and 2.0 above, the PL frame was the only thing that offered speed and

431
0:27:15.680 --> 0:27:16.680
performance.

432
0:27:16.680 --> 0:26:59.720
There is others that we were upcoming in the Suricata 7, you know, DPDK, A

433
0:26:59.720 --> 0:27:26.080
packet XDP and similar, but we need to have different methods.

434
0:27:26.080 --> 0:27:30.840
I am going just to finish up here.

435
0:27:30.840 --> 0:27:36.200
And so QA and Suricata, a lot of, we need to cover a lot of angles.

436
0:27:36.200 --> 0:27:38.640
We have called on GitHub, we have called in GitLab.

437
0:27:38.640 --> 0:27:43.880
When you submit a PR publicly, it goes through an automated checks to as much as possible

438
0:27:43.880 --> 0:27:46.600
before we put it in the coldest.

439
0:27:46.600 --> 0:27:49.300
Private runs, there's units, there's thousands of checks.

440
0:27:49.300 --> 0:27:54.320
So anytime you submit a PR or a code, it automatically triggers checks.

441
0:27:54.320 --> 0:27:57.480
And some of them could finish nightly.

442
0:27:57.480 --> 0:28:02.980
This is a GitLab screenshot going through some checks.

443
0:28:02.980 --> 0:28:07.960
Some of these checks can include thousands of definitions inside.

444
0:28:07.960 --> 0:28:10.000
In one check, we have 22,000 files extracted.

445
0:28:10.000 --> 0:28:13.480
We need to make sure all of them are there the same way they were there before the code

446
0:28:13.480 --> 0:28:14.480
change.

447
0:28:14.480 --> 0:28:16.640
Things like that need to happen.

448
0:28:16.640 --> 0:28:20.600
And here's an example of a PR that's going through a regular checks on GitHub.

449
0:28:20.600 --> 0:28:22.360
That information is actually public on GitHub.

450
0:28:22.360 --> 0:28:28.840
You can see in all the different OS compilation that it goes through, address sanitizers,

451
0:28:28.840 --> 0:28:35.120
leak sanitizers, code analysis, CPP checks, all those things need to actually happen before

452
0:28:35.120 --> 0:28:39.880
we can say, okay, we could put this code without affecting us.

453
0:28:39.880 --> 0:28:42.640
Regressions, traffic replace, and similar.

454
0:28:42.640 --> 0:28:45.180
I am going over with a time apologies.

455
0:28:45.180 --> 0:28:49.500
This is how to contribute.

456
0:28:49.500 --> 0:28:59.520
Any feature and code can be donated, put in on our redmine ticket and start the discussion.

457
0:28:59.520 --> 0:29:03.040
And the current reviews could be done on GitHub.

458
0:29:03.040 --> 0:29:04.320
They're public.

459
0:29:04.320 --> 0:29:09.800
So in conclusion, it has to work because you need to create a community around it.

460
0:29:09.800 --> 0:29:13.680
And the power is in the community because it's going to have a lot of ideas, a lot of

461
0:29:13.680 --> 0:29:15.760
feedback, and you need to be open about it.

462
0:29:15.760 --> 0:29:21.680
You need to have open discussions about roadmap and input from all the different people that

463
0:29:21.680 --> 0:29:24.400
are actually using it.

464
0:29:24.400 --> 0:29:31.680
And that is the, our point is that is the ultimate power comes in numbers.

465
0:29:31.680 --> 0:29:34.480
Thank you very much for having me here.

466
0:29:34.480 --> 0:29:35.480
Much appreciated.

467
0:29:35.480 --> 0:29:36.480
Open to questions.

468
0:29:36.480 --> 0:29:37.480
Thank you, Peter.

469
0:29:37.480 --> 0:29:38.480
Anybody has one question?

470
0:29:38.480 --> 0:29:39.480
One question here.

471
0:29:39.480 --> 0:29:49.920
I'm just wondering, I don't know what the current debate is, but have you had NVIDIA

472
0:29:49.920 --> 0:29:53.560
Blue field as well?

473
0:29:53.560 --> 0:29:57.000
And how was the circuit in the process?

474
0:29:57.000 --> 0:29:59.000
Have I looked at, sorry I'm not here.

475
0:29:59.000 --> 0:30:01.000
NVIDIA Blue field, it's this part of the process.

476
0:30:01.000 --> 0:30:02.600
Oh yes, yes, yes, yes, yes, yes, yes.

477
0:30:02.600 --> 0:30:04.160
We have a conversation going, yes?

478
0:30:04.160 --> 0:30:05.160
Okay, cool.

479
0:30:05.160 --> 0:30:06.160
Yeah, yeah.

480
0:30:06.160 --> 0:30:09.920
That's part of the whole process, staying and keeping on.


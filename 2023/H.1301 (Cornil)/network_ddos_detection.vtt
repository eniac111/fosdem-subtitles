WEBVTT

00:00.000 --> 00:08.240
Hello, thank you for coming.

00:08.240 --> 00:10.760
I'm very happy to see lots of people here.

00:10.760 --> 00:13.920
I hope you will enjoy my presentation.

00:13.920 --> 00:21.580
So I'm Pawel and I will talk about DDoS detection using open source tool.

00:21.580 --> 00:27.000
So first of all, where and why I'm talking here.

00:27.000 --> 00:28.920
I'm software engineer.

00:28.920 --> 00:34.360
I got formal educational software engineer and since beginning of my career, I started

00:34.360 --> 00:38.880
working on open source and my first programming language was quite unusual, I would say.

00:38.880 --> 00:40.680
It was Perl.

00:40.680 --> 00:45.800
So not fortunately choice for so many people, but for me it was a way into industry.

00:45.800 --> 00:47.920
So I worked for domain name register.

00:47.920 --> 00:50.800
I worked for cloud compute company.

00:50.800 --> 00:53.400
I worked for internet exchange.

00:53.400 --> 01:00.280
And finally I got a job for global CDN provider and I ended up working in cybersecurity.

01:00.280 --> 01:08.240
So what I'm doing now, I'm in charge of development of cybersecurity product for network security

01:08.240 --> 01:11.580
and this product is called FastNetMonter.

01:11.580 --> 01:18.640
So I would like to start from brief description of what is FastNetMonter.

01:18.640 --> 01:21.120
FastNetMonter is an application.

01:21.120 --> 01:23.280
So it's a very first thing to clarify.

01:23.280 --> 01:29.720
It's cross-platform application and why I'm saying cross-platform, I mean Linux, MacOS,

01:29.720 --> 01:31.840
VBSD, OpenBSD.

01:31.840 --> 01:34.120
It's not yet on Windows, but it's still.

01:34.120 --> 01:39.120
And main purpose of FastNetMonter is the DDoS detection for networks.

01:39.120 --> 01:45.240
From technical perspective, FastNetMonter is implemented using modern C++.

01:45.240 --> 01:48.600
Back in time it was quite interesting story when FastNetMonter was started, very, very

01:48.600 --> 01:54.160
first version of it in 2013 was implemented in C++11.

01:54.160 --> 01:59.680
But because of compilers in some way, not so very modern distribution, they had to move

01:59.680 --> 02:02.160
back to C++98.

02:02.160 --> 02:05.740
Since that we still support modern versions.

02:05.740 --> 02:10.280
No way to like, no reason to maintain compatibility with this very outdated stuff and now it's

02:10.280 --> 02:13.000
like, it's really good for C++.

02:13.000 --> 02:22.000
It's kind of C++ actually in Rehacking, Creding, and changing if you prefer to do so.

02:22.000 --> 02:24.040
And I know this feeling.

02:24.040 --> 02:28.800
When you hear about new stuff which may be relevant for you, that's the first urge to

02:28.800 --> 02:31.360
maybe, should I try it now immediately?

02:31.360 --> 02:32.880
Because what is the point with documentation?

02:32.880 --> 02:34.640
What's the point to hear my presentation?

02:34.640 --> 02:36.360
If you can just install it right now.

02:36.360 --> 02:37.900
It did very long.

02:37.900 --> 02:39.000
It was very long journey.

02:39.000 --> 02:47.400
I would like to thank our maintainers who made it possible that FastNetMonter has so

02:47.400 --> 02:48.960
many distributions.

02:48.960 --> 02:53.880
For almost every single popular distribution, I used mostly for server environment and production

02:53.880 --> 02:57.080
environment, you may install FastNetMonter on just single command.

02:57.080 --> 03:01.320
So you may start it right now if you prefer.

03:01.320 --> 03:07.560
And if for some reasons your distribution have no distillation FastNetMonter or you

03:07.560 --> 03:13.880
want to just install it for some distribution is not covered by our official packages, there

03:13.880 --> 03:17.680
is installation tool.

03:17.680 --> 03:19.680
Let's go forward.

03:19.680 --> 03:24.680
Because most of the time we talk about what our tools and our products can do.

03:24.680 --> 03:26.760
I would like to start from an unusual angle.

03:26.760 --> 03:30.920
I would like to highlight what we can do because it's important.

03:30.920 --> 03:34.760
Because there are so many tools for DDoS detection.

03:34.760 --> 03:37.960
There are so many angles of DDoS detection.

03:37.960 --> 03:39.320
It's detection part.

03:39.320 --> 03:40.680
It's mitigation part.

03:40.680 --> 03:43.560
It can be implemented on premise and in cloud.

03:43.560 --> 03:47.760
And before we go into details what we are doing, we need to highlight what we are not

03:47.760 --> 03:50.760
doing.

03:50.760 --> 03:55.520
And if you have any issues with your website or your blog, I'm sorry.

03:55.520 --> 03:57.020
We can't help you.

03:57.020 --> 03:58.880
It's not the point of FastNetMonter.

03:58.880 --> 04:03.240
It may indirectly help your carrier or service provider.

04:03.240 --> 04:09.000
But for your case, it's better to use cloud services because it's not that complicated

04:09.000 --> 04:10.200
to move site around.

04:10.200 --> 04:14.520
Because normally if I'm talking about really a normal site, it's quite easy to move into

04:14.520 --> 04:19.600
a content delivery network and then cover it from the desk.

04:19.600 --> 04:25.640
And if you have some issues with DDoS when you play on your Xbox or PlayStation, also

04:25.640 --> 04:26.640
I'm sorry.

04:26.640 --> 04:28.640
We cannot help you.

04:28.640 --> 04:33.400
I explicitly decided to add this slide because you have too many questions.

04:33.400 --> 04:36.880
And I think it's one of the really serious problems in modern days because you cannot

04:36.880 --> 04:40.320
play because of DDoS.

04:40.320 --> 04:45.720
And if you use managed service provider, it may be public cloud.

04:45.720 --> 04:47.880
It may be private cloud.

04:47.880 --> 04:53.080
And when I say managed, it means that somebody is in charge of keeping your service running.

04:53.080 --> 04:57.480
And in this case, it's very unlikely that you have access for your network.

04:57.480 --> 05:02.920
I mean, administrative level of access is a bit change policy, inspire policy, change

05:02.920 --> 05:03.920
router configuration.

05:03.920 --> 05:08.320
And in this case, it's better to escalate to your service provider like, how for help?

05:08.320 --> 05:09.600
So we have something.

05:09.600 --> 05:10.880
We have some problems.

05:10.880 --> 05:13.280
Help us.

05:13.280 --> 05:15.640
And finally, what FastNetMonter can help you?

05:15.640 --> 05:18.360
FastNetMonter is not to protect specific service.

05:18.360 --> 05:21.480
FastNetMonter here to protect your network.

05:21.480 --> 05:24.560
And when I'm saying to protect network, it has very different meaning from protecting

05:24.560 --> 05:25.960
specific entity.

05:25.960 --> 05:29.920
Main purpose of FastNetMonter is to keep up time of all network in general.

05:29.920 --> 05:36.000
And when I'm saying in general, it means that keep it running for 99% of customers'

05:36.000 --> 05:40.600
eyeball services behind the specific network.

05:40.600 --> 05:44.840
And I'll explain how we can do it.

05:44.840 --> 05:49.000
What kind of attacks we can protect your network from?

05:49.000 --> 05:50.920
Again, there are so many types of attacks.

05:50.920 --> 05:54.800
There are so many opinions about classification of attack.

05:54.800 --> 05:58.360
I'm not going to go into details about what the kinds of data are.

05:58.360 --> 06:02.640
I would like to focus it from well-described OSI model approach.

06:02.640 --> 06:04.560
So what we can help you?

06:04.560 --> 06:09.180
We can help you with IPv4 and IPv6 at the same time.

06:09.180 --> 06:11.440
If you still use IPv4, please don't.

06:11.440 --> 06:13.180
Please move away from it.

06:13.180 --> 06:19.920
And in terms of layers of OSI model, we can help you only with levels L3 and level 4.

06:19.920 --> 06:26.600
And if you have some specific ideas what is the option to filter out traffic using HTTP

06:26.600 --> 06:32.800
or two or three protocol encrypted by TLS, it's better, I guess, to just present it like

06:32.800 --> 06:36.720
Suricata because FastNetMonter is a little bit autoscoped.

06:36.720 --> 06:40.440
Because main purpose of FastNetMonter is to detect volumetric DDoS attack.

06:40.440 --> 06:44.040
And when I say volumetric, it means at least hundreds of megabits.

06:44.040 --> 06:50.640
But mostly in general case for average size of DDoS in modern days, it's around 8 gigabits.

06:50.640 --> 06:52.920
And in some cases, it's exceptionally high.

06:52.920 --> 06:54.880
It's maybe hundreds of gigabits.

06:54.880 --> 06:56.760
But on average, it's just a few gigabits.

06:56.760 --> 07:02.040
And that's purpose of FastNet, to take this kind of attack.

07:02.040 --> 07:08.200
So what is the very first step when we assume that network is under DDoS?

07:08.200 --> 07:13.000
Because when I say assume, can we say for sure is that DDoS?

07:13.000 --> 07:18.160
Because in so many cases, how we actually can observe DDoS attack against our network.

07:18.160 --> 07:21.360
Like you check your phone, it's not working.

07:21.360 --> 07:22.760
Your website is not working.

07:22.760 --> 07:27.080
You check laptop in your office, and for some reason, something doesn't work as expected.

07:27.080 --> 07:29.240
Our customer is calling you.

07:29.240 --> 07:34.280
And first step is to confirm that actually DDoS.

07:34.280 --> 07:38.960
Because it may be not DDoS, it may be fire alarm in your data center.

07:38.960 --> 07:41.640
Why it's extremely important to assume that it's actually DDoS?

07:41.640 --> 07:43.560
Because it may be something different.

07:43.560 --> 07:49.480
And in case of fire, it's way more important and way more different kind of actions to

07:49.480 --> 07:52.480
remedy the DDoS detection.

07:52.480 --> 07:57.000
And if you know by accident that some people, your colleagues working in data center right

07:57.000 --> 08:01.440
now, and it's like the same timeline, you receive call from customer like, something

08:01.440 --> 08:03.520
doesn't work.

08:03.520 --> 08:06.960
It's very unlikely that it's DDoS.

08:06.960 --> 08:12.600
It's maybe caused by this configuration because there are so many ways how we can figure downtime

08:12.600 --> 08:15.880
in our networks.

08:15.880 --> 08:22.080
And okay, we covered most of the sources which can cause network DDoS, network downtime.

08:22.080 --> 08:24.080
We said actually DDoS, but...

08:24.080 --> 08:27.520
And look, even this one, it's not DDoS.

08:27.520 --> 08:29.680
This one is it can cause havoc.

08:29.680 --> 08:36.320
It can bring down whole cities, countries, data centers, but it's still not DDoS.

08:36.320 --> 08:42.840
And what is it for how we can say like this was for sure DDoS and graphs.

08:42.840 --> 08:46.600
The only way to be 100% sure it's graphs.

08:46.600 --> 08:52.320
And by looking on this graph, if you know like, okay, my network generates like 100,000

08:52.320 --> 08:54.840
packets per second, or like 100 gigabytes.

08:54.840 --> 09:00.400
And if you can see spikes by 20 gigabytes, it's very unlikely it was caused by Samsung

09:00.400 --> 09:01.400
normal.

09:01.400 --> 09:03.920
It's very, very like it is DDoS.

09:03.920 --> 09:08.280
So it's first level of remediation, at first level how Fasten one can help you.

09:08.280 --> 09:13.960
Fasten one can say for sure, in this kind of dashboard that you are under DDoS.

09:13.960 --> 09:17.600
And then you can actually do it appropriately because you are well prepared.

09:17.600 --> 09:19.920
You know what you can do.

09:19.920 --> 09:23.360
And what we can do in this case.

09:23.360 --> 09:26.160
Fasten one provides lots of different dashboards.

09:26.160 --> 09:33.000
And main benefit of those dashboards is that they're built not on physical level of network.

09:33.000 --> 09:38.480
But when I'm saying physical level of network, I mean a port counter, slot for specific interface,

09:38.480 --> 09:40.520
slot for specific router.

09:40.520 --> 09:45.000
And what Fasten one can do, it's more of the review of your network from logical level.

09:45.000 --> 09:51.360
When I say logical level, it's more from networks, prefixes, specific services.

09:51.360 --> 09:56.080
And in this case, Fasten one can provide a required amount of granularity.

09:56.080 --> 09:58.360
It's like total traffic for your network.

09:58.360 --> 10:00.120
In this case, you can say, total time coming back.

10:00.120 --> 10:03.560
And in case of any spikes here, you may see it almost immediately.

10:03.560 --> 10:05.720
It's one of the benefits of Fastenet Monet.

10:05.720 --> 10:07.240
It's not historical data.

10:07.240 --> 10:11.040
It's data which actually was just received from your routers.

10:11.040 --> 10:14.400
It's almost real-time data.

10:14.400 --> 10:19.960
And so in the same case, again, from logical perspective, it's not a button.

10:19.960 --> 10:25.420
Instead of seeing what is the load for specific interface on my router, you can see information

10:25.420 --> 10:28.960
about how much traffic you have for specific prefix.

10:28.960 --> 10:32.960
And you're well aware what kind of service is trying in specific prefix.

10:32.960 --> 10:37.920
And so you can understand something wrong with this specific prefix.

10:37.920 --> 10:42.600
And again, the latest level of granularity, you may find island traffic for per host because

10:42.600 --> 10:47.800
you may know that for specific prefix, you just have two services, very important services

10:47.800 --> 10:48.800
running.

10:48.800 --> 10:50.760
And then you can check what is the load, for example.

10:50.760 --> 10:54.000
And you can see immediately, again, in real time, what's wrong.

10:54.000 --> 10:58.440
If you can see spike for the specific service, OK, we found it.

10:58.440 --> 11:05.600
And Fastenet Monet graphic capabilities include complete sub-platform, fluxDB, graphit, and

11:05.600 --> 11:07.560
plenty of graphana dashboard.

11:07.560 --> 11:12.440
I would like to thank the community for contributing so many great dashboards because when we started

11:12.440 --> 11:15.920
this idea, we implemented a few of them, quite basic ones.

11:15.920 --> 11:19.200
But the community did a really great job by playing two of them.

11:19.200 --> 11:24.680
And actually, most of them are way better than our official dashboards.

11:24.680 --> 11:26.560
And what is the source of this data?

11:26.560 --> 11:29.480
Is it AI or something different?

11:29.480 --> 11:30.480
No.

11:30.480 --> 11:35.320
So we receive this information from routers or switches in your network.

11:35.320 --> 11:40.920
And from perspective of protocols, we support almost all available protocols in market.

11:40.920 --> 11:42.440
And of course, one of the most popular ones.

11:42.440 --> 11:45.520
It's NetFlow, it's IPv6, S-Flow.

11:45.520 --> 11:51.160
And in case of last resort, if you have no Nethly, but NetFlow or IPv6 in your network,

11:51.160 --> 11:53.680
you can try to use PortMirror.

11:53.680 --> 11:58.160
All cases, Fastenet Monet can handle a really significant amount of traffic.

11:58.160 --> 12:03.120
And there are plenty of confirmed deployments of Fastenet Monet, exceeding at least two

12:03.120 --> 12:06.920
terabytes of capacity in total.

12:06.920 --> 12:12.080
So after you've got all information, you may check it manually.

12:12.080 --> 12:16.960
For example, again, at this moment, this Fastenet Monet, you will see what's your total load.

12:16.960 --> 12:19.160
What is load for specific network?

12:19.160 --> 12:21.120
What is load for specific cost?

12:21.120 --> 12:26.720
And for small networks, you may find immediately what is the victim.

12:26.720 --> 12:31.280
Because in case of small network, you know, OK, I have 12 services, maybe 20.

12:31.280 --> 12:33.640
And you can check one by one.

12:33.640 --> 12:38.640
Can we do it for DDoS detection?

12:38.640 --> 12:45.920
And this one is just not very precise map of United Kingdom.

12:45.920 --> 12:49.360
And you can see there are lots of interconnections.

12:49.360 --> 12:51.400
This is the largest country of the planet.

12:51.400 --> 12:53.680
But you can see amount of interconnections.

12:53.680 --> 12:54.680
It's incredible.

12:54.680 --> 13:00.400
Even for medium-sized internet service providers or telecom providers, they may cover at least

13:00.400 --> 13:03.000
multiple countries.

13:03.000 --> 13:07.360
And you can see amount of towns, even regions, is incredible.

13:07.360 --> 13:15.200
And if you talk about networks covering multiple European countries or multiple countries in

13:15.200 --> 13:19.520
maybe, for example, Asia, it's an incredible amount of locations, an incredible amount

13:19.520 --> 13:20.520
of entities.

13:20.520 --> 13:23.840
You cannot check, like, for example, we are under DDoS.

13:23.840 --> 13:25.160
You know for sure.

13:25.160 --> 13:29.560
Let's check every single one plus million city in Europe.

13:29.560 --> 13:31.120
We cannot do it manually.

13:31.120 --> 13:32.120
It's just impossible.

13:32.120 --> 13:36.640
And every single time, moving from large cities, we need to move to regions.

13:36.640 --> 13:41.640
Then we need to check household, by household, because this specific attack, it may begin

13:41.640 --> 13:45.680
specific person playing like a four-night game.

13:45.680 --> 13:50.200
In this specific building, you cannot do it manually, unfortunately.

13:50.200 --> 13:55.160
If we move a little bit to data centers, data center normally, as we can make here, it's

13:55.160 --> 13:58.160
single building, maybe huge building.

13:58.160 --> 14:00.360
But it's still just one building.

14:00.360 --> 14:02.180
It's not scattered over like continent.

14:02.180 --> 14:06.080
It's not scattered over like thousands of kilometers.

14:06.080 --> 14:07.800
Is it easy to find out?

14:07.800 --> 14:08.800
No, unfortunately.

14:08.800 --> 14:14.000
Because sadly, in data center, we have more entities, more potential victims of DDoS than

14:14.000 --> 14:17.920
actually for large telecom networks.

14:17.920 --> 14:19.600
And what we can do?

14:19.600 --> 14:23.360
Of course, as I mentioned, you can manually check every single host available in your

14:23.360 --> 14:29.160
network because we already got pretty great dashboard and we have real-time data coming

14:29.160 --> 14:31.720
from your routers.

14:31.720 --> 14:32.720
What is the logic?

14:32.720 --> 14:35.040
What is the way how we can actually find that?

14:35.040 --> 14:38.920
Again, we have data about what is the bandwidth for a specific network?

14:38.920 --> 14:41.680
What is the packet rate for a specific network?

14:41.680 --> 14:45.040
And we can check every single host in our network and find out.

14:45.040 --> 14:49.600
And again, in case of data center and large telecom networks, it's impossible to do it

14:49.600 --> 14:50.600
manually.

14:50.600 --> 14:52.840
That's the reason how FastNet1 can help you.

14:52.840 --> 14:55.040
FastNet1 can do it for you.

14:55.040 --> 14:57.600
And it can do it really fast.

14:57.600 --> 15:04.120
For almost all protocols supported by FastNet1, we can offer detection time in less than five

15:04.120 --> 15:05.120
seconds.

15:05.120 --> 15:08.760
So it's not about FastNet1 can say, look, you're under DDoS.

15:08.760 --> 15:10.520
Because it may be clear from graphs.

15:10.520 --> 15:15.920
And this point of time, FastNet1 can find out what is the specific service in your network

15:15.920 --> 15:18.160
which is under attack right now.

15:18.160 --> 15:20.480
And you will have this information in five seconds.

15:20.480 --> 15:23.720
So why it's important, like five seconds?

15:23.720 --> 15:24.720
Why?

15:24.720 --> 15:25.720
Can we wait a little bit?

15:25.720 --> 15:28.200
Like have a cup of tea or coffee and wait?

15:28.200 --> 15:29.720
Unfortunately, we cannot.

15:29.720 --> 15:30.720
That's the main problem.

15:30.720 --> 15:37.840
Back in time when I started to work with DDoS attacks, it was around 2008.

15:37.840 --> 15:43.760
You can wait for around half hour when DDoS attack starts from something like 10 megabits,

15:43.760 --> 15:45.360
maybe then 15 megabits, 100 megabits.

15:45.360 --> 15:51.040
And we have a cup of coffee, wait a little bit, 20, like something like 50 megabits,

15:51.040 --> 15:52.040
100 megabits.

15:52.040 --> 15:53.160
It's growing.

15:53.160 --> 15:58.160
And now what we can see attack on the skeleton from like 100 megabits to tens of gigabits

15:58.160 --> 15:59.920
in like a few seconds.

15:59.920 --> 16:05.120
And human being, unfortunately, ahead of me, cannot handle it so fast.

16:05.120 --> 16:11.800
We need some machines because people who actually run DDoS, they have lots of automation.

16:11.800 --> 16:15.320
And without having automation in place, we cannot defend it.

16:15.320 --> 16:17.720
So FastNet1 provides this option for you.

16:17.720 --> 16:21.760
And instead of checking every single host in your network vendor, because it's still

16:21.760 --> 16:26.560
an option, you can verify when you receive reports from FastNet1, you can check graphs

16:26.560 --> 16:27.560
like is it DDoS?

16:27.560 --> 16:28.640
Is it looking like DDoS?

16:28.640 --> 16:34.640
Because FastNet1 inside, it uses very simple rules like each specific host in my network

16:34.640 --> 16:37.520
generates more than five gigabits of bandwidth.

16:37.520 --> 16:43.000
And each specific host in my network generates more than 100,000 packets per second.

16:43.000 --> 16:45.680
It's clearly DDoS.

16:45.680 --> 16:52.800
And after detection, what we can do, and very first step, which is available for every single

16:52.800 --> 16:56.960
carrier on this planet, unfortunately, it's free.

16:56.960 --> 16:58.920
Everything called BGP black hole.

16:58.920 --> 17:04.640
BGP black hole needs a little bit more clarification how it works.

17:04.640 --> 17:08.920
And because of name, you may guess if you put something into black hole, you never see

17:08.920 --> 17:09.920
it again.

17:09.920 --> 17:11.120
And that's the point.

17:11.120 --> 17:19.280
And how FastNet1 can help and can rely on BGP black hole to stop DDoS from network.

17:19.280 --> 17:25.880
At the beginning of my presentation, I mentioned that FastNet1 here to protect your network,

17:25.880 --> 17:27.280
without specific service.

17:27.280 --> 17:33.320
And it's really important because BGP black hole can be described in many words because

17:33.320 --> 17:35.520
it's quite complicated abstraction.

17:35.520 --> 17:41.360
But I would call it, it's like religion sacrifice made by network engineers to keep their network

17:41.360 --> 17:42.360
running.

17:42.360 --> 17:44.960
Why is it sacrifice?

17:44.960 --> 17:49.240
Because when you do black, because like at this point of time, you know, for example,

17:49.240 --> 17:51.920
for our network, we have 20,000 of hosts.

17:51.920 --> 17:57.840
Just imagine every single host, it's residential building in somewhere in Europe.

17:57.840 --> 18:01.520
And we know for sure, we are receiving DDoS right now.

18:01.520 --> 18:03.800
And our service degraded.

18:03.800 --> 18:05.280
Our customers calling us.

18:05.280 --> 18:06.680
Our site doesn't work.

18:06.680 --> 18:08.080
Nothing works fine.

18:08.080 --> 18:12.720
And we can find out what is the victim of this specific attack using FastNet1.

18:12.720 --> 18:19.360
And we know specific host, which is IPv4 or IPv6, which is a target of this DDoS attack.

18:19.360 --> 18:25.200
And what we need to do using BGP black hole, we need to stop all traffic from coming to

18:25.200 --> 18:27.720
this specific host.

18:27.720 --> 18:32.600
Which means if we effectively disabling and unplugging this specific customer or service

18:32.600 --> 18:39.440
from the internet, and that how BGP black hole works, it's not about like firewall, which

18:39.440 --> 18:41.680
may block attackers.

18:41.680 --> 18:49.000
In this case, we literally manually voluntarily block target or attack.

18:49.000 --> 18:50.000
Just to save our network.

18:50.000 --> 18:56.760
And that's only purpose of FastNet1, to stop it and do it automatically for you.

18:56.760 --> 19:01.760
So after you stop it, and you can see exactly on this diagram.

19:01.760 --> 19:06.400
So we maintain uptime of network.

19:06.400 --> 19:11.560
And everything is skip working by sacrificing just one host on your network.

19:11.560 --> 19:15.000
And it doesn't mean that you just block it and go away, send it.

19:15.000 --> 19:16.200
I can give you an email to customer.

19:16.200 --> 19:17.560
Look, we block it your service.

19:17.560 --> 19:19.240
We can help you.

19:19.240 --> 19:22.320
There are so many ways how you can actually keep this host running.

19:22.320 --> 19:28.120
But again, before you apply some actions, create plan, what we can do, maybe you can

19:28.120 --> 19:33.320
call some specific providers to provide the fence for it.

19:33.320 --> 19:39.880
You need to have some actions.

19:39.880 --> 19:44.280
And better to apply these kind of actions in quiet environment.

19:44.280 --> 19:50.920
Instead of having to deal with 20,000 of calling customers every single like minute, you may

19:50.920 --> 19:52.600
block specific target.

19:52.600 --> 19:56.080
You may keep uptime of your network back.

19:56.080 --> 20:00.680
And when your network is back to operation, in quiet environment, in way quieter environment,

20:00.680 --> 20:05.800
nobody here, nobody calling you, decide, I would like cup of coffee or tea, what is the

20:05.800 --> 20:09.320
option, what we can do for this specific customer.

20:09.320 --> 20:11.720
And then how FastNet1 can help you.

20:11.720 --> 20:17.160
And since beginning, when FastNet1 was built, it was open source from very fast version.

20:17.160 --> 20:19.760
And a lot of features, I just explained it.

20:19.760 --> 20:23.080
They were implemented by our master plan or our roadmap.

20:23.080 --> 20:25.320
They were part of community requests.

20:25.320 --> 20:28.640
We received a GitHub because of look, there is an option.

20:28.640 --> 20:31.080
I have a problem and I would like to solve it.

20:31.080 --> 20:34.320
So since the beginning, FastNet1 was community-driven project.

20:34.320 --> 20:38.280
And we have lots of community channels, how you can collaborate with us, how you can share

20:38.280 --> 20:40.360
your stories, how you can ask questions.

20:40.360 --> 20:44.160
And please join all of them and I will help you to answer your questions.

20:44.160 --> 20:45.160
Thank you.

20:45.160 --> 20:46.160
Anybody has questions?

20:46.160 --> 20:47.160
Hi, thanks a lot.

20:47.160 --> 20:48.160
Quite interesting.

20:48.160 --> 20:56.240
So I just wanted to ask you if you ever felt the need to extend the way you want to.

20:56.240 --> 21:12.680
Hi, thanks a lot, quite interesting.

21:12.680 --> 21:21.320
Like for example, any flavor of open config specifications or eventually BMP instead of

21:21.320 --> 21:22.320
BGP.

21:22.320 --> 21:23.320
That's a great question.

21:23.320 --> 21:29.160
So the question was, is it possible to use protocols like Open BMP or OpenConf to feed

21:29.160 --> 21:31.240
more information to FastNet1?

21:31.240 --> 21:35.880
In current generation of FastNet1 detection tools, we mostly rely on traffic telemetry

21:35.880 --> 21:40.080
protocols, which actually carries part of network packet.

21:40.080 --> 21:43.760
It's maybe header of network packet or it may be some meta-information about source

21:43.760 --> 21:47.120
port, source IP, destination port, destination IP.

21:47.120 --> 21:50.280
And we don't use data about BGP directly.

21:50.280 --> 21:55.000
The only way how we can actually interact with BGP is that we have internal BGP demand

21:55.000 --> 22:00.880
based on Go BGP, which actually injects information and announces routers to your network.

22:00.880 --> 22:03.480
So we have no backward integration from network.

22:03.480 --> 22:07.360
So we have no way how we can learn information from your network.

22:07.360 --> 22:13.020
But because of different APIs, we offer different ways to automate and run callback scripts

22:13.020 --> 22:14.800
instead of just running BGP.

22:14.800 --> 22:19.000
You can run your own Python script and then you can rely on information from third-party

22:19.000 --> 22:23.560
source and combine this information and make decisions using this information.

22:23.560 --> 22:28.320
I was merely asking because, for example, with the GNMI, you can have a sort of retroaction

22:28.320 --> 22:29.320
on the network.

22:29.320 --> 22:35.160
So you can, according to what you're receiving using IP fix, for example, you can have an

22:35.160 --> 22:37.400
action directly on routers, for example.

22:37.400 --> 22:38.400
Yes.

22:38.400 --> 22:43.840
It is one of the ways how you can actually use so-called callback scripts because when

22:43.840 --> 22:49.560
Fastenit on detects attack, it can run specific script, it may be Bash script, Python script,

22:49.560 --> 22:50.560
Perl script.

22:50.560 --> 22:54.200
And in this script, you will have access to basic information about attack and information.

22:54.200 --> 22:55.200
What is the target?

22:55.200 --> 22:56.600
What is host target?

22:56.600 --> 22:57.800
What is the type of attack?

22:57.800 --> 22:59.480
What is prefix target?

22:59.480 --> 23:04.200
And then using any automation protocol, you can run actions on routers.

23:04.200 --> 23:09.800
And because of most of the routers, there are no standard way how we can inject this

23:09.800 --> 23:12.680
kind of information for every single vendor available on market.

23:12.680 --> 23:17.160
And we decide to earn more, more these tasks to market communities, so to implement it

23:17.160 --> 23:18.160
on your own.

23:18.160 --> 23:19.160
Thank you.

23:19.160 --> 23:28.440
And if you implement it, share this community.

23:28.440 --> 23:31.440
Can you do BGP flow spec to like Blackhole?

23:31.440 --> 23:34.280
That's a great question.

23:34.280 --> 23:41.920
So back in time, we had BGP flow spec support based on exaBGP, but it was like POC level

23:41.920 --> 23:49.080
quality of implementation because it was just literally hardcore, at least for DNS and SSDP

23:49.080 --> 23:50.280
amplification.

23:50.280 --> 23:51.280
But it worked well.

23:51.280 --> 23:56.360
So the only, but unfortunately, because of complexity of working this API of exaBGP flow

23:56.360 --> 23:59.160
spec protocol, we decided to remove this capability.

23:59.160 --> 24:03.640
And now the only one way how you can actually inject flow spec roles, like because you can

24:03.640 --> 24:09.880
implement Blackhole using flow spec, you can run it using go BGP command line from callback

24:09.880 --> 24:12.320
scripts of fast-forward.

24:12.320 --> 24:13.320
Okay.

24:13.320 --> 24:14.320
Thank you.

24:14.320 --> 24:15.320
Any more questions?

24:15.320 --> 24:16.320
No.

24:16.320 --> 24:17.320
Thank you very much.

24:17.320 --> 24:18.320
Thank you for listening.

24:18.320 --> 24:19.320
Thank you.

24:19.320 --> 24:20.320
Thank you.

24:20.320 --> 24:21.320
Thank you.

24:21.320 --> 24:22.320
Thank you.

24:22.320 --> 24:23.320
Thank you.

24:23.320 --> 24:24.320
Thank you.

24:24.320 --> 24:25.320
Thank you.

24:25.320 --> 24:26.320
Thank you.

24:26.320 --> 24:42.200
Thank you.

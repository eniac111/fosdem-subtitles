WEBVTT

00:00.000 --> 00:15.240
the next talk is by Scott. He's going to talk about quick starting, secure container storage

00:15.240 --> 00:27.440
using squash of us overlay and de-embarity. Okay. My audible. Yes. Okay. Hi. Yeah, I'm

00:27.440 --> 00:33.440
Scott Moser. I work for Cisco Systems. And over the past three years or so, we've been

00:33.440 --> 00:42.480
working on a project internally that is that implements a lot of the image based workflows

00:42.480 --> 00:46.840
that was in another that we were talking about in another room. And just kind of building

00:46.840 --> 00:53.240
up that piece by piece. That is called project machine. And so that's what I primarily am

00:53.240 --> 01:01.520
working on and stuff around that. So through that, we kind of came to some needs and desires

01:01.520 --> 01:09.440
to change how we were running containers. And that's what we got here. The goal, the

01:09.440 --> 01:15.880
goals pretty simple of this talk and our goal was really just to replace replace the tar

01:15.880 --> 01:26.480
and gzip format in an OCI image with squash of s and discuss why there's benefits of that.

01:26.480 --> 01:31.520
I'll show some comparisons of what what the registry data looks like what the registry

01:31.520 --> 01:39.120
sees and compare it. What the runtime looks like and what what's different there. And

01:39.120 --> 01:48.840
then I'll give a little demo. And the sales pitch part, we use there's two tools that

01:48.840 --> 01:54.840
are that are ours. They're open source, but they're they're decent tools. So show them

01:54.840 --> 01:59.920
here as stacker. And we signed with cosine, we published his odd and then we run with

01:59.920 --> 02:09.400
LXC. Probably everybody's here is familiar with LXC. So in order to get squash FS file

02:09.400 --> 02:17.120
system squash FS file system images in a registry, it looks a lot like it does in it with tar

02:17.120 --> 02:24.600
gzip images. We put just files that go into registry. The metadata contains a list of

02:24.600 --> 02:32.680
images. All right. Yeah. Let's see. The index is a list of images. Each of those images

02:32.680 --> 02:38.520
has a list of layers. And then the difference really is just in the type of the media type

02:38.520 --> 02:50.240
of the layer. So we get Yeah, and then and then first. And so we both have a sign check

02:50.240 --> 02:55.200
some of the tar ball in both cases, or the image right that data is there so you can

02:55.200 --> 03:01.360
know what it is. And then in addition on the squash FS one, we've put some we put the

03:01.360 --> 03:08.720
DM Verity hash, the root hash in the metadata and we sign that that come into play later.

03:08.720 --> 03:29.240
Oh, backward. There we go. So now run type at runtime that the the images really do look

03:29.240 --> 03:37.400
this very similar. Both of them they we uncompressed with tar and gzip or we we we mount we either

03:37.400 --> 03:42.760
copy the image out of the repository to a place on the on the disk. And then we can

03:42.760 --> 03:48.480
either share that that same location for every container, or you can mount it. You can take

03:48.480 --> 03:52.600
a copy of it for each container that you're going to launch. You know, that path makes

03:52.600 --> 03:59.720
garbage collection a little bit easier. And then in tar world, if you want to compare

03:59.720 --> 04:04.920
the the data that you're running, you want to compare the file system that is running

04:04.920 --> 04:09.320
versus the thing that you downloaded. That's a real pain in the rear end, right? You got

04:09.320 --> 04:14.120
to basically look at all the contents of all the files and look at their modification times

04:14.120 --> 04:18.720
and compare that to the compressed tar ball, you know, extract it and just compare it to

04:18.720 --> 04:26.080
file system trees. It's a real pain with with squash FS. The image is there. You it was read

04:26.080 --> 04:30.400
only and you just shot summit and the shot some matches the shot some that you downloaded

04:30.400 --> 04:36.400
and you know you're good. Right? So there's a lot of benefit out of that. The primary reason

04:36.400 --> 04:41.840
that we kind of got here and we're looking into something else was really that once you've

04:41.840 --> 04:46.400
extracted a tar file system out, there's kind of no way to put it back in, you know, you

04:46.400 --> 04:54.800
can't ever really get back and and verify that you're running what you what you thought.

04:54.800 --> 05:02.360
So and then in the runtime, other benefits of squash of S and Verity is we get in privilege

05:02.360 --> 05:08.720
with privileged mounts. If we're running a container that is real root and can do a mount,

05:08.720 --> 05:13.280
then we can use that deem verity data that we got in there so that the kernel can actually

05:13.280 --> 05:22.480
then verify that the data is used as is as it as it reads it off the desk. And then but

05:22.480 --> 05:28.160
is unprivileged when we're unprivileged running unprivileged containers. If you can't do

05:28.160 --> 05:36.200
a mount, we do a mount with squash fuse and there you can't you can't use deem verity.

05:36.200 --> 05:42.640
There's no to my knowledge way to use a block device or use the device mapper and get block

05:42.640 --> 05:52.400
device get deem verity without being real root. So let's see. And then another benefit

05:52.400 --> 05:56.800
is the file system doesn't implement right, right? So you're not going to be a tent. You're

05:56.800 --> 06:03.520
not going to be attacked from the file system. Nobody's going to be replacing a binary there.

06:03.520 --> 06:07.120
If they're going to get to it, they have to come in like from the other side and modify

06:07.120 --> 06:14.480
the disk, the data, but that should be caught via check some more deem verity. So but that

06:14.480 --> 06:18.520
comes at a little bit of cost because basically everybody and their brother can read a tar

06:18.520 --> 06:25.760
ball right and at this point but not but squash F as is a little bit less readable, although

06:25.760 --> 06:36.120
there's there's good tools, but they're not as widely as widely deployed. Oh, yeah, and

06:36.120 --> 06:42.560
I just want to point out like so really the changes here it's it's not it's not evolution.

06:42.560 --> 06:47.080
It's not revolutionary. It's evolutionary. It's a small change. There's changes being

06:47.080 --> 06:54.920
discussed for like OCI image v2 or v2 repositories and different file formats that would really

06:54.920 --> 06:59.840
kind of revolutionize thing and do much, much, much better than this. But this is a significant

06:59.840 --> 07:11.360
improvement upon upon what's there right now. So I said there overlay overlay fs doesn't

07:11.360 --> 07:19.240
have any right support or let's see I'm sorry squash fs doesn't have right support so you

07:19.240 --> 07:23.800
end up having to use overlay overlay again was talked about in the image container or

07:23.800 --> 07:28.320
in the image based workflow track all the time. I'm not sure how well people are aware

07:28.320 --> 07:34.120
of here, but I think it's probably generally fairly common knowledge. It's a kernel file

07:34.120 --> 07:41.600
system. It's very mature and you can basically stack stack file system data on top of each

07:41.600 --> 07:48.400
other and get the same basic tree that the tar that extracting a series of layers for

07:48.400 --> 07:57.280
OCI image gets you. I don't know really which came first if it was the overlay file system

07:57.280 --> 08:03.720
in the kernel or in the whiteouts there or the whiteouts that are in a tar ball layer.

08:03.720 --> 08:09.760
I don't know which came first, but they look very similar. So the ones we're using and

08:09.760 --> 08:16.920
the ones that stack or stores in its stack or stores in the images are just the same

08:16.920 --> 08:21.520
as the kernel writes them. So we just use the overlay there and then it's a it's simple

08:21.520 --> 08:31.920
very use useful. Yeah. Yeah. And then I say overlay bugs are present in the kernel. It

08:31.920 --> 08:37.280
has slightly different semantics than some other file systems, but largely over the past

08:37.280 --> 08:43.960
10 years they have been really well squashed. So this it works real well. And then the last

08:43.960 --> 08:48.600
thing is that if you're using an overlay, you can easily see the changes that that were

08:48.600 --> 08:53.360
made to a file system because they're basically all on a single tree. You can look under you

08:53.360 --> 09:04.440
can look at the overlay layer and see these are the files that were written. So DM Verity

09:04.440 --> 09:11.160
is the device mapper verification. And it's just a feature in the kernel that basically

09:11.160 --> 09:17.680
provides uses technology called a Merkel tree, which allows you to provide a hash of the

09:17.680 --> 09:24.520
top and then each each blocks and cascading down are just our hashes that are built into

09:24.520 --> 09:32.520
that. So basically you can mount the thing up immediately and start reading. And what

09:32.520 --> 09:38.560
will happen is you you get bad reads if there's bad data or I learned today that you can also

09:38.560 --> 09:44.880
you could trigger like a crash or something if data was not if there was an integrity

09:44.880 --> 09:54.880
about violation there. So let's see. Yeah. So that's the invari very useful. But again,

09:54.880 --> 10:07.960
that only works as real root. So let's go ahead and try to do a demo of this now. Yeah,

10:07.960 --> 10:11.160
you anybody if you're if you think I'm just giving the sales pitch maybe I am I don't

10:11.160 --> 10:15.920
say a lot of good things about software in general. But these two that I'm selling are

10:15.920 --> 10:20.560
reasonable pieces of software and they may help you. So we're going to build with stacker.

10:20.560 --> 10:24.440
We're going to sign things with cosine. We're going to publish to Zot. And we're going to

10:24.440 --> 10:31.680
run Alex and we're going to run things with LXC. Let's see. See how this goes. This worked

10:31.680 --> 10:49.520
at 3am last night. So you know, let's see. I just do that. All right. So this is a stacker

10:49.520 --> 10:55.680
file. And then again, stackers are built tool. It's really very similar to Docker in where

10:55.680 --> 11:01.640
it's capable of it runs completely unprivileged. It can run it can also run privilege but runs

11:01.640 --> 11:08.920
completely unprivileged and allows you to build OCI images. You can build them either

11:08.920 --> 11:18.040
in tar or in squash squash FF file system type. Let's see. It is it's a very mature project

11:18.040 --> 11:25.720
and it's work and it works for it's working towards CNCF inclusion. So it it works and

11:25.720 --> 11:31.920
it pretty much works out of the box. It's not single binary. It runs on most on distros

11:31.920 --> 11:36.840
pretty close out of the box. So you don't need to have a huge stack to try it out. So

11:36.840 --> 12:02.520
I'm going to go ahead and do stacker build. I'm going to I'm going to do this because

12:02.520 --> 12:07.880
yeah, there's no way I was going to type that right. All right. So there we said build. I

12:07.880 --> 12:14.880
want to build both this the layer types tar and squash FF and and then substitute. It

12:14.880 --> 12:20.400
just provides some mechanism to substitute inside the the YAML file. I don't want to

12:20.400 --> 12:26.600
go to Docker right now. I'd rather go to you know, a local a local's off that I'm running.

12:26.600 --> 12:30.720
So there it didn't actually build that clearly. It didn't it didn't do all that apt and everything.

12:30.720 --> 12:38.080
It was already built. So it reused its cache. And now we can go ahead and cosine or yeah,

12:38.080 --> 12:55.520
we'll publish those images. So the oh yeah. So there, here's the two images that it built.

12:55.520 --> 13:01.920
It built one called squa talk talk dash talk talk root dash squash FF and one just called

13:01.920 --> 13:06.000
talk root and the one without that is a star and then up there is GZIP and then you can

13:06.000 --> 13:13.400
see that this is a these are the same image manifest type. And so largely tools will still

13:13.400 --> 13:18.040
be able to read the squash files as the squash data that we put up like scope a will still

13:18.040 --> 13:24.640
copy it down. You can still move them around without a whole lot of extra work. Let's see.

13:24.640 --> 13:38.120
So now go ahead and publish those

13:38.120 --> 13:43.920
publish those two images. And that just uploaded them to a local's that's running here that

13:43.920 --> 13:59.200
I've got running on on local host. And let's see now. That right? What did I mean? Cosine

13:59.200 --> 14:13.880
come on. I didn't mean that. So go ahead and generate a cosine care a key pair and then

14:13.880 --> 14:23.600
that is enforced currently in Etsy containers. That yeah, that's there basically I say anything

14:23.600 --> 14:29.080
that come from local host there needs to be signed by by this key that we just did. So

14:29.080 --> 14:45.240
we're going to need to go ahead and sign that stuff. Cosine is telling me that in that log

14:45.240 --> 14:50.480
verbiage that nobody's really going to read is telling me that you should not just you

14:50.480 --> 14:57.200
know refer to an image in a repository by its name you should give the hash because otherwise

14:57.200 --> 15:08.880
it might not be what you think you're signing. So that's bad practice. Shame on me. All right.

15:08.880 --> 15:22.440
See so now we've got now we've got stuff published into Zot. Our local Zot is running. And we

15:22.440 --> 15:29.440
can see these images are in Zot. And Zot is just Zot is another thing that we run. It's

15:29.440 --> 15:36.080
a it's a it runs a OCI registry. It's really it's really good software. You run it locally

15:36.080 --> 15:40.440
very easily. It's one binary. You take it a little bit of config and then you can you

15:40.440 --> 15:46.240
can run a you know a Docker registry. The biggest benefit that I see out of it is that I don't

15:46.240 --> 15:53.480
I don't hit the Docker. Gosh bandwidth threshold right because out of our company out whatever

15:53.480 --> 15:58.840
it is out of that lab that usually gets hit by like 7am in the morning. So if you don't

15:58.840 --> 16:07.080
have something caching then you're out of luck. Let's see. So now we've got images in

16:07.080 --> 16:11.880
our local Zot. We've got we've signed them. We built them signed them and published them

16:11.880 --> 16:19.600
to a local repository. And now I can say now I can go ahead and try to run one. So this

16:19.600 --> 16:27.320
is just this is the status quo. This is a create a user namespace container. And then

16:27.320 --> 16:53.800
I can elixir elixir start my in. I meant now. Let you watch it boot. So there's just that's

16:53.800 --> 16:58.280
just the tar one. It extracted that to the file system. It mounted up the file system

16:58.280 --> 17:11.800
in a user namespace and it let me run. Come on now. Okay now we can do the same thing.

17:11.800 --> 17:18.800
But instead of using the talk root of fast will use the talk root of fast squash of fast.

17:18.800 --> 17:33.240
We'll name this image. So that then it copied the OCI it pulled down the OCI data out of

17:33.240 --> 17:39.160
the Zot repository put on disk and then and then is ready for me to run it when I run

17:39.160 --> 18:03.800
it. I hope. There. All right. So now I've got running on the system. Let's see. Here

18:03.800 --> 18:15.200
I've got an overlay file system show it like is mounted underneath that

18:15.200 --> 18:20.160
these squash fused binaries got mounted one one and then another and then another and then

18:20.160 --> 18:25.200
an overlay over the top of those three. So this is running completely completely unprivileged.

18:25.200 --> 18:35.200
I can mount those up and use them in place. Go ahead and see how much time in my mind.

18:35.200 --> 18:40.640
Okay. Then I think I can show another one running as root but it's basically oh actually

18:40.640 --> 18:48.160
yeah I will go ahead and try to start that just because if I can. The one that the thing

18:48.160 --> 19:04.400
the show there is that. Oh no I should end and ask and take questions. Yeah because I

19:04.400 --> 19:12.800
was saying I wasn't sure if you were. So yeah so thanks for listening. I just want to thank

19:12.800 --> 19:17.360
God for letting me be here and you know spend another day on software and complaining about

19:17.360 --> 19:21.800
software and think my team for letting and for helping me out my family for letting me

19:21.800 --> 19:28.200
be gone and Cisco on you guys for coming. This is project machine and anybody got any

19:28.200 --> 19:45.080
questions. Sorry. We have time for one question. All right. Cool. Very clear. Feel free to

19:45.080 --> 19:52.080
reach out and thank you. Thank you.

WEBVTT

00:00.000 --> 00:13.000
Okay. Our next talk is going to start right now. Mark's already on stage. He's going to

00:13.000 --> 00:18.080
talk about automating secrets, rotation, and Kubernetes, and please quiet down so we can

00:18.080 --> 00:34.080
understand him. Okay. Hello. Can you hear me? All right. So thank you for joining here today. My name is...

00:34.080 --> 00:52.080
My name is Mark. I'm an engineer at Cisco. For the last couple of years, or maybe the better part of the decade, my primary job was helping engineering teams around their business applications and

00:52.080 --> 01:11.080
Kubernetes and helping them succeed without having to get into too much details about Kubernetes. And let me start with the story. I'm pretty sure this will sound familiar to a lot of us here. A couple of years ago, I was in the middle of debugging

01:11.080 --> 01:30.080
session. It was already the middle of the night. Everyone was tired. And finally, we found a problem. I committed the change, pushed the code, and then suddenly all the buzz went off. We received an email from AWS that a pair of

01:30.080 --> 01:48.080
credentials was committed in a public repository. Who did something like that before? Come on. I'm pretty sure it's more than that. There's no shame in that. Everyone has to go through that once. So we obviously had to

01:48.080 --> 02:04.080
rebuild the credentials, generate a new pair, and deploy it to production. And we were able to do that because we had, like, good secret management pipeline in place. And this kind of thing is why rotating secrets or being able to

02:04.080 --> 02:19.080
rotate secrets is important. Because if you have an incident like this, you have to be able to act quickly and rotate those secrets and make sure that, well, in a first case scenario, people may steal your data in a better scenario

02:19.080 --> 02:37.080
than AWS, someone might start mining Bitcoin. But you have to be able to react quickly. Another reason why this is a very important topic is we often have to meet certain compliance requirements that require us to rotate every secret we have, like, every 90 days.

02:37.080 --> 02:55.080
And I'm pretty sure many of us have to deal with that. But the worst of all, the worst situation of all is when you don't even know that a secret has been leaked. Or maybe an angry ex-employee took something with home and you don't even know that

02:55.080 --> 03:05.080
happened. And they are stealing your data. They are stealing your customers' data. Or they are mining Bitcoin in a better situation.

03:05.080 --> 03:18.080
And so probably nobody disputes that secret rotation is important. But unfortunately, it comes with its own self-challenges, which often turns people away from actually caring about this.

03:18.080 --> 03:29.080
And obviously, secret rotation or managing secrets or configuration is a very complex problem, especially in a Kubernetes environment where you may have multiple different clusters, multiple different

03:29.080 --> 03:42.080
spaces where you have to deploy these secrets, many different secrets and configuration, which means it takes a lot of time to do it right. And it's still an error from process.

03:42.080 --> 03:57.080
And in an idea scenario, if you screw something up, it may not result in an actual outage or incident. But it may, which is obviously, it would affect the business, which is what we wanted to avoid in the first place by making these secret

03:57.080 --> 04:16.080
rotations. So all these challenges and why it's important points to that secret rotation should be possible. I mean, it's probably always possible, but I've seen situations where rotating certain secrets would have been very,

04:16.080 --> 04:31.080
very hard, like it would have taken hours, which is a problem. But so it should be possible and you should be able to do it relatively quickly. Secret rotation should also be as much automated as possible.

04:31.080 --> 04:46.080
And so we are not really trustworthy, like we make mistakes, exhibit A. So it should be automated as much as possible and humans should interact with secrets and secret rotation as little as possible.

04:46.080 --> 04:58.080
And finally, secret rotation should happen periodically. You shouldn't have a secret that you use for years because, as I mentioned, you don't know if it's been leaked.

04:58.080 --> 05:11.080
How do you know if your system is secure or not? So how does secret rotation look like in general? We are not even talking about Kubernetes here.

05:11.080 --> 05:27.080
First, you need to have a secret store. If you don't have a secret store, then the whole thing is a lot more complex than it should be. You have a secret store where you store your secrets, and then you have some solution to deploy those secrets to your production environment

05:27.080 --> 05:40.080
or production environments. Now, when you need to change a secret, depending on what type of secret it is, you have to go to the secret provider, which may be a third-party provider like AWS or GitHub or anything like that.

05:40.080 --> 05:51.080
You have to issue a new pair of credentials or generate a new secret, change that in the secret store, and then you need some sort of mechanism to deploy the new secret.

05:51.080 --> 06:02.080
That probably should be an automatic process that notices the secret change, and it should deploy the secrets for you in your production environment.

06:02.080 --> 06:17.080
Now, in some cases, if you have a secret store that supports that, for example, Hashicorp's vault, your secret store may be able to automatically issue credentials for you, for example, for AWS, your database, or whatever else Hashicorp's vault supports.

06:17.080 --> 06:25.080
So you don't even need to do that manually. Hashicorp's vault takes care of that, and that's like the best case scenario.

06:25.080 --> 06:33.080
Now, how does this look like in Kubernetes? First of all, you have to decide whether you want to use Kubernetes secrets at all or not.

06:33.080 --> 06:42.080
There are options when you don't have to use Kubernetes secrets, but that's probably the easiest way to many secrets in Kubernetes.

06:42.080 --> 06:54.080
And the reason why generally people don't like using Kubernetes secrets is because they have this notion that Kubernetes secrets are not secure because they are base 64 encoded and that's not secure.

06:54.080 --> 07:08.080
So that's an entirely different conversation. The bottom line is if you have Envelope encryption enabled, which is disabled by default, then you're probably safe using Kubernetes secrets.

07:08.080 --> 07:17.080
Now, if you decided to use Kubernetes secrets, then you need something that deploys the secrets from your secret store to Kubernetes.

07:17.080 --> 07:27.080
And this could be, for example, the external secrets operator. There are other solutions, but this is probably the one that the community organizes around a lot lately.

07:27.080 --> 07:41.080
So external secrets operator is able to synchronize your secrets from an external store, external being to Kubernetes in this case. For example, Hashicorp's vault or AWS secret manager or whatever else you have.

07:41.080 --> 07:58.080
External secrets operator is able to synchronize secrets to Kubernetes secrets. And it's also able to pick up changes. It doesn't actively monitor changes, but periodically it takes a look at the secrets and if something changes, then it synchronizes the changes to Kubernetes.

07:58.080 --> 08:09.080
So we have that part covered and then you can use the Kubernetes secrets either as environment variables or model them as files. However, you want to use them.

08:09.080 --> 08:24.080
Now the secrets change. What then? So if you mount secrets as files and your application is able to pick up that change, then you don't have anything to do.

08:24.080 --> 08:37.080
Your application will already reload the configuration and you have the whole thing covered. Now, if your application can't do that, or if your application uses environment variables, you mount secrets as environment variables.

08:37.080 --> 08:56.080
But that's a more difficult problem. And for years, we didn't really have a solution for that other than manual restarts. A couple of years ago, this component called reloader appeared on the market, which basically watches workloads that have that reference to secrets.

08:56.080 --> 09:08.080
And it also watches the secrets, obviously. And when it detects a change, it triggers a standard workload rollout, similarly to how you would do that with kubectl rollout, for example.

09:08.080 --> 09:21.080
So it may change the annotation of the workload and that would result in the workload being rolled out, which means that it would run with the new environment variables and it would remount the secret with the changed file.

09:21.080 --> 09:30.080
And if we take a look at the whole process from the previous diagram, we don't have one component that takes care of the deployment in this case, but we have two.

09:30.080 --> 09:45.080
One that synchronizes the secrets from the secret store to Kubernetes and the other one that takes care of the rollouts or making sure that the workloads notice the secret change.

09:45.080 --> 09:56.080
Now let's take a look at a very quick demo, how that looks like in action. And I have a repository prepared. You can go ahead and try it if you want to.

09:56.080 --> 10:06.080
And I have a Kubernetes cluster running here with both external secrets and reloader installed. And in addition to that, we have like a simple echo server.

10:06.080 --> 10:19.080
So let's take a look at it. We just output something. So let's take a look at how we configure external secrets first.

10:19.080 --> 10:30.080
So as I mentioned, you configure external secrets or maybe I don't need to mention, I don't know. But you configure external secrets via custom resources, which means you create...

10:30.080 --> 10:43.080
Can you see it from the back? Okay, cool. So you configure external secrets via custom resource called external secret and you tell external secrets to...

10:43.080 --> 10:51.080
You tell external secrets how to and from which external store should it synchronize secrets from and where it should put it.

10:51.080 --> 11:02.080
So in this case, we are telling external secrets to synchronize secrets from a store I created and called as fake. This is basically a static secret store in this case.

11:02.080 --> 11:21.080
It synchronizes secrets into a secret called foobar and it's going to synchronize from the fake secret store under the key foo slash bar to a key under hello in the Kubernetes secret.

11:21.080 --> 11:33.080
So let's take a look at if we do in fact have that secret there. So we have a foobar secret that's good so far.

11:33.080 --> 11:49.080
And we have a hello key here. I'm not sure if you can see that. Now, if I change this secret right now, this...

11:49.080 --> 12:04.080
So this is just a command that patches the external or the fake store to change the secret value. If I go back and check the secret value, it should be changed to everyone.

12:04.080 --> 12:17.080
Now, if I try to curdle the service again, there are no changes here. So if I manually restart the pod...

12:17.080 --> 12:34.080
Let's see, do I have the command here? Yeah, I have a rollout command. If I manually restart the pod and restart the port forward as well, then I should see that the secret value is in fact changed.

12:34.080 --> 12:52.080
Maybe I haven't shown you, but I do have the application deployment here that references the foobar secret. All right. So now we have the secret synchronization part covered.

12:52.080 --> 13:16.080
Let's see how it works if I want the workload to be automatically rolled out when the secret changes. So I can annotate the echo server with this reloader annotation, which will make reloader start watching this workload and the secrets mounted in it.

13:16.080 --> 13:36.080
So nothing changed yet. I should still see everyone. That's fine. And now let's change the secret again to FOSDEM. So if I... Yeah, the secret is changed to FOSDEM.

13:36.080 --> 13:48.080
And if we take a look at the... I probably have to restart this. If we take a look at the service, it should now say hello FOSDEM.

13:48.080 --> 14:01.080
So in this case, I didn't have to restart the virtual manually because reloader did that for me when I changed the secret. When I changed the secret in the store, that external secret synchronized into the Kubernetes secret.

14:01.080 --> 14:30.080
And reloader noticed that change, so it rolled out the deployment. So that's what I wanted to show you today. If you have any questions, I'm happy to answer them.

14:30.080 --> 14:43.080
Hi, thanks for your presentation. Can we use reloader? Can you speak up, please, because I can't hear you. Please stay quiet while we are still asking questions. Thank you.

14:43.080 --> 14:58.080
Thank you. Can we use reloader without Kubernetes secrets? Because we're one of... Can we use reloader without syncing to Kubernetes secrets?

14:58.080 --> 15:08.080
I mean, you absolutely can. So with reloader, you can watch either secrets or config maps or both if you want to. But you need to use Kubernetes secrets and config maps.

15:08.080 --> 15:19.080
How you change secrets is up to you. If you don't want to automatically synchronize, you don't have to. You can use reloader just to trigger a reload without using external secrets or synchronized secrets.

15:19.080 --> 15:36.080
So if you want to do that manually, you can absolutely do that. Does it answer your question? No.

15:36.080 --> 15:50.080
I would like to do something like synchronize secrets right into volumes, for example. Like skipping Kubernetes secrets totally because we don't want to...

15:50.080 --> 16:07.080
No, probably reloader is not really useful in that case. But I see what you mean. So for example, if you use something like bolt-m and you grab the secrets directly from within the pod and you want to trigger a reload, then...

16:07.080 --> 16:25.080
No, reloader can't be used that way. But we are actually... So I'm from Cisco and before that I was working for Bonsai Cloud and we are working on a solution right now exactly for that so we can have like a component that watches secrets that have external

16:25.080 --> 16:41.080
bolt references and reloads component or trigger reloads for workloads based on those changes. But none of these tools support that at the moment.

16:41.080 --> 17:01.080
So are there some risks of using this method instead of using for example a secret vault? I mean with a secret vault, if you watch for a secret that should be written in a file or somewhere, if the secret

17:01.080 --> 17:20.080
changes, vault usually emit a signal like a sig up to reload the process. So what when the secret changes? Usually vault emit a signal, an up signal to reload the process and load the configuration.

17:20.080 --> 17:36.080
In this way you are reloading the whole container so there are some risks. The problem is that only works if you talk to vault directly from your workloads and with the solution you don't have to integrate vault directly like you can use whatever secret

17:36.080 --> 17:52.080
story you want to. And the problem is that vault doesn't actually know where it should set its signal. So in this case you may deploy the secrets to a number of different clusters and the logical students wouldn't know where to send those signals.

17:52.080 --> 18:13.080
So the minor advantage is that it's fully transparent to the solution. I don't know. We have time for one more question. Okay. Any advice about some tools to do the rotation on the other part? Like for example rotate the standard database credentials, something like that, that will

18:13.080 --> 18:29.080
automatically update in the secret store then trigger the rotation? The problem with that is that secret providers, like there are many different secret providers. So it's really hard to build a central solution for that. But hashicorp's vault is one.

18:29.080 --> 18:44.080
Like hashicorp's vault is a bunch of old backends or something like that that you can use to issue credentials for example to a Postgres database and that credential can actually have a TTL deadline and then after a certain time hashicorp's

18:44.080 --> 19:00.080
vault would issue a new pair of credentials and then external secrets would be able to synchronize those credentials. We actually use that with AWS back end and that's how we rotate database credentials every 90 days. Okay. Thank you so much for the talk. Thank you for all the questions.

19:00.080 --> 19:15.080
Thank you for staying quiet.

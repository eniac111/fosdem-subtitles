WEBVTT

00:00.000 --> 00:08.360
Our next talk is by Peter.

00:08.360 --> 00:13.880
He's going to talk about database in a container to debas on Kubernetes.

00:13.880 --> 00:16.520
I hope I pronounced this correctly.

00:16.520 --> 00:17.520
Yeah.

00:17.520 --> 00:18.520
Okay.

00:18.520 --> 00:19.520
Hello, everyone.

00:19.520 --> 00:21.520
You hear me well?

00:21.520 --> 00:22.520
Okay.

00:22.520 --> 00:23.520
Cool.

00:23.520 --> 00:27.440
So, let me ask first.

00:27.440 --> 00:34.120
How many of you folks have been involved with open source in 90s?

00:34.120 --> 00:36.600
Anyone remember those days?

00:36.600 --> 00:39.360
So, well, I was.

00:39.360 --> 00:48.360
And for me, in those times, right, you remember that open source was, well, quite different

00:48.360 --> 00:49.360
than today, right?

00:49.360 --> 00:53.280
You needed a lot of elbows greased, right?

00:53.280 --> 00:57.640
I remember how you have to, you know, download the source packages, maybe patch them some

00:57.640 --> 01:03.320
way to make sure it works if your particular compiler, right, and, you know, figure out

01:03.320 --> 01:10.920
all the libraries, dependencies, all this kind of stuff to make it work, right?

01:10.920 --> 01:17.800
And you could feel that certain pride for just installing some applications.

01:17.800 --> 01:23.080
And since that, we had this never-ending move to simplicity.

01:23.080 --> 01:31.360
Making it possible to run open source software more and more easily, right?

01:31.360 --> 01:35.200
So, from that, download sources, patch and compile.

01:35.200 --> 01:41.360
We had a wonderful invention of TarGZ binaries and install script.

01:41.360 --> 01:42.880
Anybody remembers those?

01:42.880 --> 01:43.880
No?

01:43.880 --> 01:44.880
So, I'm do, right?

01:44.880 --> 01:48.200
And then they go with like packages of dependencies.

01:48.200 --> 01:52.160
And then those have been in repositories, right?

01:52.160 --> 01:56.440
And in the end, they're coming to say, hey, you know what, now we don't really care about

01:56.440 --> 01:57.880
the disk space anymore.

01:57.880 --> 02:03.040
So we just, you know, jumble it all together as a, you know, docker or snap packages, right,

02:03.040 --> 02:05.800
with no dependencies, right?

02:05.800 --> 02:11.960
So we got a lot of that move to their simplicity.

02:11.960 --> 02:17.560
And obviously, that is, you know, fantastic and convenient.

02:17.560 --> 02:25.400
One of those ways, which is very popular, is docker.

02:25.400 --> 02:30.920
And a question in our talk, as it relates to the database and what is my background,

02:30.920 --> 02:39.240
is to what extent you can and should use database with those technologies?

02:39.240 --> 02:45.800
And if you look at the docker, we use that actually quite a lot in particular in test

02:45.800 --> 02:48.960
and dev environment, right?

02:48.960 --> 02:55.080
What is wonderful about docker, if you want, several database versions, right, or wherever

02:55.080 --> 03:01.160
you can, install them very easily on the same node, which don't conflict with each other,

03:01.160 --> 03:07.720
right there in, you know, your classical Linux operating system, if you want to install,

03:07.720 --> 03:13.920
you know, MySQL, 556.7 at the same time, because you maybe want to make sure your application

03:13.920 --> 03:15.440
is working in the firm.

03:15.440 --> 03:17.240
But good luck, right?

03:17.240 --> 03:21.960
They all conflict on the shared files and so on and so forth.

03:21.960 --> 03:23.920
Dockers enable that, right?

03:23.920 --> 03:27.520
And that is absolutely fantastic.

03:27.520 --> 03:32.640
And also, you can use solutions like a docker compose and bunch of hours if you want to,

03:32.640 --> 03:38.280
you know, deploy your application and, you know, database, it depends on in a docker

03:38.280 --> 03:44.320
containers, make it very easily, very nicely.

03:44.320 --> 03:53.120
Now if you look at docker in production, though, it is also possible, though we actually see

03:53.120 --> 03:55.280
less than that.

03:55.280 --> 03:59.920
Some of cancels come from overhead, and I would say these are mostly unfounded those

03:59.920 --> 04:06.640
days, but if you really, like Google, you can still find some articles saying like some

04:06.640 --> 04:14.280
scary stories about docker and database being absolutely horrible, right?

04:14.280 --> 04:20.800
But also you need to take care of, in this case, is a little bit of extra complexity,

04:20.800 --> 04:25.400
which I know especially a lot of not-docker experts have been beaten by.

04:25.400 --> 04:32.000
Like you have to have your database on a data volume for best results.

04:32.000 --> 04:38.720
Otherwise, you can remove your data container, right, and boom, all your data is gone.

04:38.720 --> 04:44.880
Now that is a very different experience compared to, let's say, uninstalling the RPM or depth

04:44.880 --> 04:50.400
package on Linux, where you can uninstall the database package your data remains so you

04:50.400 --> 04:55.920
can install a different one, right, in docker, unless you have the data stored in a separate

04:55.920 --> 05:05.360
volume, you will trash your data, right, to give if you're moving their container.

05:05.360 --> 05:19.040
So in production, that is somewhere you need a lot of monitoring and observability, okay.

05:19.040 --> 05:21.960
Okay, hopefully that will settle.

05:21.960 --> 05:30.840
So if you look at the introduction, we often need some observability, right, and monitoring,

05:30.840 --> 05:40.160
which initially lacked support for docker, which I think got a lot better those days.

05:40.160 --> 05:44.240
So what is the state of open source databases with docker?

05:44.240 --> 05:51.760
If you think about that, what most open source databases out there have official docker images.

05:51.760 --> 05:58.000
For those which don't, you will find a variety of unofficial docker images out there, right,

05:58.000 --> 06:01.960
so you can pretty much run it everywhere.

06:01.960 --> 06:05.600
It is very commonly deployed for test and dev.

06:05.600 --> 06:09.680
You will, if you look at the docker stats, you will see like hundreds of millions of

06:09.680 --> 06:14.320
downloads, like a docker pools for many, many of them.

06:14.320 --> 06:18.480
Though I would say in production, it is limited, right.

06:18.480 --> 06:23.920
I know some companies say, hey, we have deployed our production with docker with, let's say,

06:23.920 --> 06:31.800
a custom orchestration system, but I would not say that is very common.

06:31.800 --> 06:36.920
You know, at your corner, for our software, for database, we support, we essentially do

06:36.920 --> 06:38.280
the same thing.

06:38.280 --> 06:43.000
We provide their docker packages for everything.

06:43.000 --> 06:50.480
So if you are just sticking to docker, to pure docker, what problems are not solved

06:50.480 --> 06:53.920
very well in this environment?

06:53.920 --> 06:58.720
The third thing, I think, the most important one is, you know, date two operations.

06:58.720 --> 07:04.240
The databases are interesting, right, in a way, unlike the application where you often

07:04.240 --> 07:07.920
can say, hey, you know what, let's just, you know, tear it down and redeploy it from scratch,

07:07.920 --> 07:15.520
right, and that is the approach which is increasingly often taken, right, instead of just, you know,

07:15.520 --> 07:22.120
modifying their application right well.

07:22.120 --> 07:25.480
You cannot really do that with a database.

07:25.480 --> 07:32.880
You know, database is something which has to retain the data, not lose any transactions

07:32.880 --> 07:38.080
which have been committed and so on and so forth, and that means what majority of complexity

07:38.080 --> 07:43.160
and majority of the life in database happens is what's called day two, right, after you

07:43.160 --> 07:45.080
have the deployed, right.

07:45.080 --> 07:51.800
And docker-wise simplifies your installation, does not do anything really to solve all that

07:51.800 --> 07:52.800
needs to.

07:52.800 --> 07:59.680
Upgrade database, you don't really have the ability, and so on and so forth, right.

07:59.680 --> 08:10.400
Also we can see what a lot of database management problems for real production database have

08:10.400 --> 08:18.840
to be done in context of a cluster because every real production database will require

08:18.840 --> 08:23.680
high availability and that is cannot be done by the single instance, right, that has to

08:23.680 --> 08:30.040
be some sort of distributed cluster and docker doesn't really help us in this regard.

08:30.040 --> 08:31.040
So what does?

08:31.040 --> 08:38.640
Well, as you may have guessed, that would be a Kubernetes, right, really there are,

08:38.640 --> 08:44.000
there have been some other container orchestration system for years, but I think you can say

08:44.000 --> 08:51.200
with confidence is what docker has won at this level and in this regard it has a, you

08:51.200 --> 08:56.480
know, largest, largest market share.

08:56.480 --> 09:02.840
So where do we see the state of Kubernetes and databases?

09:02.840 --> 09:11.440
Well, the relationship has been kind of complicated through years, why?

09:11.440 --> 09:18.320
Because Kubernetes initially was designed for a stateless application, right, and if

09:18.320 --> 09:23.280
you're saying, well, something is designed for a stateless application, you can say,

09:23.280 --> 09:26.520
using that for databases, are you freaking crazy?

09:26.520 --> 09:30.360
The database are the opposite of stateless, right, the database where we're supposed to

09:30.360 --> 09:38.600
have our states, right, and I think that is something which has been getting improvement,

09:38.600 --> 09:48.120
right, and now the Kubernetes is actually quite capable to run databases as well.

09:48.120 --> 09:51.480
But that wasn't always the case, right, I think this is interesting to look at this

09:51.480 --> 09:57.680
tweet which is what, like almost like four years ago, right, at that time, which in this

09:57.680 --> 10:05.880
case, KC Hightower, which is one of the very, well, you know, the expert and the third leader

10:05.880 --> 10:13.320
in the Kubernetes space, was not very sure, right, about running databases on Kubernetes,

10:13.320 --> 10:18.120
right, well, let's see what has changed and look at some stats.

10:18.120 --> 10:25.040
Now over the last few years, in the Kubernetes space, we had this doc community, right, which

10:25.040 --> 10:32.880
stands for data on Kubernetes community, very active, right, and really working to enable

10:32.880 --> 10:37.200
running data intensive applications on Kubernetes.

10:37.200 --> 10:44.200
And I think we've quite good results, right, these are actually like a little bit outdated,

10:44.200 --> 10:52.080
like from the last year, pool results, right, but we could see what there is a fair amount

10:52.080 --> 11:02.160
of companies running some significant number of data intensive applications on Kubernetes

11:02.160 --> 11:04.080
already.

11:04.080 --> 11:10.200
Here are some stats which are newer from a cloud native foundation this day, right, and

11:10.200 --> 11:17.680
these are comparing 2021 to 2022, right, essentially just last year starts where we can see what

11:17.680 --> 11:29.440
goes with databases was the second most common workload, well, second most fastest growing

11:29.440 --> 11:35.280
kind of workload, which is the flow in Kubernetes, right, so we can see what the things are

11:35.280 --> 11:41.120
changing, right, now you can see also some other stuff like messaging and big data, all

11:41.120 --> 11:47.320
of those are also actually data intensive applications, right, so we can see Kubernetes

11:47.320 --> 11:53.400
have moved in this field, right, now here is our interesting data point, right, if you

11:53.400 --> 11:59.080
look at the database as a service, public database as a service, right, you would see

11:59.080 --> 12:05.320
many independent database as a service solutions which have been released over the last, you

12:05.320 --> 12:09.800
know, three, four years actually Kubernetes built, right, based on Kubernetes, right,

12:09.800 --> 12:19.720
here are, you know, number of companies, right, which you may have held, which are running

12:19.720 --> 12:28.960
their public database as a service on Kubernetes, so I hope by this point I have convinced you

12:28.960 --> 12:35.400
what the database is on Kubernetes is, you know, quite possible and can be run quite

12:35.400 --> 12:38.960
successful.

12:38.960 --> 12:44.520
Now what is wonderful about Kubernetes specifically?

12:44.520 --> 12:52.480
Well I mentioned that as a container orchestration system, right, but I also can think about

12:52.480 --> 12:58.160
that as essentially an operating system, which is focused on the, you know, data center,

12:58.160 --> 13:05.840
right, a set of data centers, environment rather than on a single node.

13:05.840 --> 13:10.680
What I think is particularly great when it comes to the databases, it has a very robust

13:10.680 --> 13:17.040
mechanics to deal with all kind of failures, node failures and some others, right, because

13:17.040 --> 13:22.600
this is actually quite complicated problems, right, if you think about like a very large

13:22.600 --> 13:29.840
systems you have to be thinking about failures happening all the time, so for maybe multiple

13:29.840 --> 13:37.360
failures at the same time, right, and really doing that manually, right, as you would have

13:37.360 --> 13:43.560
to do if you want to, let's say, roll out your highly available system on a, you know,

13:43.560 --> 13:51.400
like a bare metal or a bunch of VMs, right, it is tough, right, it is tough to get that,

13:51.400 --> 13:56.960
you know, last one, two, wherever, or maybe even kind of zero one percent of edge cases,

13:56.960 --> 14:05.040
which is absolutely essential for running applications and scale.

14:05.040 --> 14:10.440
Specifically for databases, these typically are being built with the operator framework,

14:10.440 --> 14:16.440
right, the operator framework is something which as a name says allows you to put a lot

14:16.440 --> 14:23.360
of logic in, right, and say, hey, do what a skilled database operator would do, because

14:23.360 --> 14:29.160
being stateful, database needs like an extra care, right, how you are going to upgrade

14:29.160 --> 14:33.800
the cluster, right, well, you know what, you don't shut all the database nodes down, right,

14:33.800 --> 14:38.520
and then change between your version and spin up, well, no, you don't do it this way in

14:38.520 --> 14:44.200
databases, you often need to follow some process, you know, upgrade them one after another,

14:44.200 --> 14:50.240
maybe when to ensure your grade was successful, database was warmed up appropriately, right,

14:50.240 --> 14:56.400
and all the nuance things which databases at scale need.

14:56.400 --> 15:06.160
Now if you look at the databases on Kubernetes, we can see their pickup by vendors is slower,

15:06.160 --> 15:16.280
right, if you think about, you know, the many of them would have operators that are not

15:16.280 --> 15:25.240
quite existing, right, or quite limited, and I would say a lot of reason for that is what

15:25.240 --> 15:30.600
in this age vendors often would want you to rather to go to the database as a service

15:30.600 --> 15:36.600
solution, right, idea, hey, you know, if you are, how you would like you to develop cloud

15:36.600 --> 15:43.560
native applications is go to our solution, right, if you are playing with, you know,

15:43.560 --> 15:51.080
MariaDB, go to SkySQL, right, if you are, you know, MongoDB, go to MongoDB Atlas, right,

15:51.080 --> 15:56.480
and so on and so forth, right, but in this case you often steal a lot of third party

15:56.480 --> 16:02.040
solutions were developed, and then slowly but surely many vendors they start to pick

16:02.040 --> 16:06.760
up, right, because hey, you know what, it's better to have a Kubernetes operator and people

16:06.760 --> 16:13.760
doing something else entirely, right, so we have, for example, official operators for

16:13.760 --> 16:23.840
MySQL or MariaDB or even MongoDB, they are, though, relatively limited at this point.

16:23.840 --> 16:30.400
Now from our side, we've been in this operator game, I think, for a while, and for MySQL,

16:30.400 --> 16:42.440
MongoDB has pretty robust solutions, right, which you can use.

16:42.440 --> 16:47.880
What I would say is the problem with Kubernetes in this case.

16:47.880 --> 16:56.840
Well, if you look in this case of the Kubernetes, it can be quite complicated, right, and the

16:56.840 --> 17:02.840
running database is something you need to really be careful because often you don't get

17:02.840 --> 17:08.960
a second chance, right, if you sort of lost your database, well, that can be already very

17:08.960 --> 17:20.960
big and serious issue for your business, right, and setting up Kubernetes for a database,

17:20.960 --> 17:31.960
for like a storage and backup, right, can be quite advanced skill at this point.

17:31.960 --> 17:38.160
Now if you look at the databases, where we see their state of art simplicity, I would

17:38.160 --> 17:50.600
say, is in a database as a service, right, and databases as a service as it available

17:50.600 --> 17:56.880
in a proprietary cloud, I think, brings a lot of great usability, but of course also

17:56.880 --> 17:57.880
at a great cost.

17:57.880 --> 18:05.320
And in this case, I mean both as direct cost as well as a vendor lock-in, which happens.

18:05.320 --> 18:09.560
In this case, if you look at the database of the servers as they exist right now, there

18:09.560 --> 18:14.920
are a number of proprietary databases as a service offerings, like obviously any launch

18:14.920 --> 18:16.680
cloud has them.

18:16.680 --> 18:22.360
Then there are some database vendors, right, which have their own.

18:22.360 --> 18:29.040
You think about MongoDB, SkySQL from RETB, Cochroach, Cloud, TimeScale, everybody also

18:29.040 --> 18:32.640
has their own branded database cloud those days.

18:32.640 --> 18:36.800
And there is also a bunch of other vendors, right, which has also their own proprietary

18:36.800 --> 18:44.360
database management framework, like Avian Instaclassers gets you that.

18:44.360 --> 18:48.640
Now why database as a service is important from my standpoint?

18:48.640 --> 18:53.400
Because it really removes a lot of toil, right, managing high availability, like things of,

18:53.400 --> 18:58.120
hey, you know, patching, like security updates, it's all can be done either automatically

18:58.120 --> 19:04.120
or, you know, like a pretty much push data solution in the backups, makes things easy

19:04.120 --> 19:07.560
to scale, right, hey, you know what I want to scale, right, instead of figuring out how

19:07.560 --> 19:10.040
to do that.

19:10.040 --> 19:20.360
But the problem with a database as a service, as it comes right now, it often would be what

19:20.360 --> 19:27.960
I would call like a hotel California compatibility, right, like you can move into something as

19:27.960 --> 19:36.240
Amazon Aurora, right, from your, you know, of cloud installation, but then it may be

19:36.240 --> 19:39.000
very hard to move back.

19:39.000 --> 19:45.560
In fact, a lot of work out there is done exactly to make that, that hard.

19:45.560 --> 19:51.400
What also would see with a lot of the cloud vendors is those solutions, they are called

19:51.400 --> 19:54.720
fully managed, right.

19:54.720 --> 20:02.400
Well, and fully managed is kind of over a market in my opinion, right, because when

20:02.400 --> 20:07.200
you talk to Amazon, for example, they say, oh, our solution is fully managed.

20:07.200 --> 20:09.800
Okay, so who is responsible for database security?

20:09.800 --> 20:11.560
Oh, that's shared responsibility.

20:11.560 --> 20:12.560
Who's going to tune that?

20:12.560 --> 20:14.560
Oh, that's shared responsibility.

20:14.560 --> 20:17.240
Well, what if I could not share responsibility, right?

20:17.240 --> 20:22.480
Everything is shared responsibility and that means, well, which you may not find from the

20:22.480 --> 20:29.320
marketing pages, you still need people to understand databases on your stuff.

20:29.320 --> 20:34.680
Those if the budgets have been reallocated to a fully managed database service providers,

20:34.680 --> 20:42.800
you may not have those people or enough of your people on the team.

20:42.800 --> 20:48.000
Now my concern, of course, with those commercial databases service solution is that it is a

20:48.000 --> 20:54.160
vendor looking, as I mentioned right now, right, which may be, you know, painful for

20:54.160 --> 20:55.160
some, right.

20:55.160 --> 21:00.240
Maybe some of you have heard about 37 signals who recently wrote this article about why

21:00.240 --> 21:07.480
they live in the cloud and saying, oh, my gosh, that is like so expensive, right.

21:07.480 --> 21:11.480
And they mentioned specifically expense and a lot of, you know, fully managed database

21:11.480 --> 21:14.000
solutions they have been doing.

21:14.000 --> 21:21.040
But that is also something likely to come, become even more painful.

21:21.040 --> 21:26.720
So anybody of you recognize this young, good-looking guy over here?

21:26.720 --> 21:27.720
Anyone?

21:27.720 --> 21:34.120
Well, this is Mr. Larry Ellison, right.

21:34.120 --> 21:41.560
And what Mr. Larry Ellison was doing in 80s, he was really saving people from the nasty

21:41.560 --> 21:48.760
big blue and a vendor looking which was happening right with the mainframe, right.

21:48.760 --> 21:54.960
But we go, we understand what happened, you know, couple of decades after, later, after

21:54.960 --> 21:59.480
people were sufficiently saved by the Oracle.

21:59.480 --> 22:00.480
Now what do we say?

22:00.480 --> 22:08.240
Well, Oracle doesn't have customers, Oracle has hostages, right.

22:08.240 --> 22:18.280
So that is what we should expect with a database vendor looking as well, right, as you sufficiently

22:18.280 --> 22:27.440
adopt all of those like wonderful extra features and you don't have a way back anymore, right.

22:27.440 --> 22:34.680
You can expect their cost of escalating as if Oracle.

22:34.680 --> 22:41.320
In my opinion though, there is a good way to use the cloud, I would say, as indicates

22:41.320 --> 22:49.520
here where you can really use the cloud as a commodity and build the value through their

22:49.520 --> 23:02.800
open source solutions as a Kubernetes and really look at this side, right.

23:02.800 --> 23:09.200
Instead of really building relationship on the property or cloud vendors, you can see

23:09.200 --> 23:16.600
how you can embrace their solutions which are coming from open source stacks like a

23:16.600 --> 23:20.680
one in a cloud computing foundation.

23:20.680 --> 23:23.360
You can see this as an example, right.

23:23.360 --> 23:25.320
And there are a lot of icons here.

23:25.320 --> 23:33.080
You probably cannot really read all of them but the point what I want to indicate here

23:33.080 --> 23:41.040
is just how big is an open source ecosystem is and you probably find some projects for

23:41.040 --> 23:51.120
almost any need which you would have in like a property cloud but they're open source.

23:51.120 --> 23:59.880
In my experience what I would like to see and what you're working on as per corner in

23:59.880 --> 24:06.200
the database space to really provide a fully open source solution which you can write on

24:06.200 --> 24:13.440
variety of environments, right, like hey, you want it on a cloud, you want it in any

24:13.440 --> 24:16.960
of the on-prem environment, well, you got it, right.

24:16.960 --> 24:23.440
You should be able to do that with no changes.

24:23.440 --> 24:29.120
If you are just looking for the basics, actually, well, I take it back.

24:29.120 --> 24:37.960
If you are having a lot of Kubernetes experience in your company already, actually their Kubernetes

24:37.960 --> 24:42.440
database operators are already pretty cool, right.

24:42.440 --> 24:47.560
They really, you know, eliminate so much of toil, right.

24:47.560 --> 24:52.040
And you can check this, you know, tutorial which shows you how you set up a cluster,

24:52.040 --> 24:57.600
scale it, you know, wherever, back it up, right, really, you know, just a couple of

24:57.600 --> 25:02.360
single comments compared to what that would do on Linux.

25:02.360 --> 25:07.560
It's like on a bare Linux is a lot more complicated.

25:07.560 --> 25:14.920
And for those who like more of, you know, graphical user interface similar to what Amazon

25:14.920 --> 25:20.920
RDS or other cloud vendors provide, we are also working on that through our solution

25:20.920 --> 25:24.760
PMM which is also 100% open source.

25:24.760 --> 25:32.200
Well, like you can, you know, check it out.

25:32.200 --> 25:38.720
So if, in the end, we would like to see, right, and hopefully we will see more similar solution

25:38.720 --> 25:46.640
coming up from a industry where we have open source databases as a service experience.

25:46.640 --> 25:49.520
Some people wonder in this case, like, what does that really mean?

25:49.520 --> 25:54.160
Because databases as a service supposed to be like a fully managed.

25:54.160 --> 25:58.080
And what I mean by that is this, right.

25:58.080 --> 26:02.240
First part of a database as a service is your interface and experience.

26:02.240 --> 26:08.080
Like, hey, I deploy the database in a couple of clicks, right, or like a single API call.

26:08.080 --> 26:13.960
Well, and nothing prevents us having an open source software which has those features.

26:13.960 --> 26:16.520
We can do it, right, and we should do it.

26:16.520 --> 26:19.560
Now, of course, there is an other piece, right.

26:19.560 --> 26:27.360
Typically, then things go beyond software ability to deal with that.

26:27.360 --> 26:33.520
There are some people, you know, in Amazon, right, or, you know, SkySquad or Avian, right,

26:33.520 --> 26:35.520
any of those providers, right.

26:35.520 --> 26:40.640
And of course, that is something, well, you don't get if you get a software alone.

26:40.640 --> 26:45.720
But that is something I believe you should have a choice where you are building those

26:45.720 --> 26:48.320
troubleshooting skills in-house.

26:48.320 --> 26:52.800
If that is the choice you take, right, or you should be able to pick from a variety of

26:52.800 --> 26:59.680
vendors, right, which can provide that kind of need for you, right, to provide a full

26:59.680 --> 27:05.520
database as a service experience comparable to the get-in and commercial cloud those days.

27:05.520 --> 27:14.200
So with that, let me finish up with this, right, is what, if you look at the database

27:14.200 --> 27:19.160
as a service, the databases, they have been really going from container to full database

27:19.160 --> 27:27.440
experience in the open source side quite well.

27:27.440 --> 27:32.160
We can see what the Docker support is very mature.

27:32.160 --> 27:36.600
Kubernetes, I think, is getting there, right, if a lot of people using that already.

27:36.600 --> 27:41.360
And the database's experience in the open source space is still work in progress, but

27:41.360 --> 27:49.160
I would expect it's coming mature in both from Percona and other vendors in a few years.

27:49.160 --> 27:57.960
And well, because of the open source, you can be part of solution in this case by, you

27:57.960 --> 28:03.520
know, by contributing to the ecosystem.

28:03.520 --> 28:10.480
So I think the database as a service has won, right, because of unparalleled convenience

28:10.480 --> 28:17.480
and you know what, deep down, we're all suckers for that.

28:17.480 --> 28:23.320
The software vendor lock-in sucks, right, I don't think anybody wants to build the company.

28:23.320 --> 28:30.800
And as in many other areas, I believe the open source is coming for rescue as well.

28:30.800 --> 28:40.960
With that, that's all ahead.

28:40.960 --> 28:49.480
Okay, we have time for about one, maybe two questions.

28:49.480 --> 29:03.400
Hi, thank you for your presentation.

29:03.400 --> 29:08.880
Quick question about the more operational side of running a database in Docker or in

29:08.880 --> 29:10.160
Kubernetes.

29:10.160 --> 29:16.160
So the main part people are usually scared about is of course the stateful part of it.

29:16.160 --> 29:23.320
So the storing the data somewhere should be for like file system snapshots or doing backups

29:23.320 --> 29:24.320
and so on.

29:24.320 --> 29:29.800
So that's in a way stored in a separate place afterwards.

29:29.800 --> 29:35.440
For that second building block, what kind of services would you suggest in that case?

29:35.440 --> 29:41.960
Yeah, so the question is about some operational aspects about running a database on Kubernetes

29:41.960 --> 29:46.680
and specifically as it relates to the storage, right?

29:46.680 --> 29:49.560
In our experience, a lot of that depends on what already exists.

29:49.560 --> 29:59.200
I think one of the big improvements in Kubernetes recently was having a unified CSI, right,

29:59.200 --> 30:05.440
internal storage interface, which allows now a lot more flexibility than before, right,

30:05.440 --> 30:07.240
and it's ever-improving, right?

30:07.240 --> 30:13.280
For example, snapshots, they're building in, right, or you can now like a scale the volume

30:13.280 --> 30:15.360
in many cases, right?

30:15.360 --> 30:20.760
So that is what we rely on.

30:20.760 --> 30:22.400
Okay.

30:22.400 --> 30:26.320
We're unfortunately out of time.

30:26.320 --> 30:27.320
Thank you for the talk.

30:27.320 --> 30:28.320
Thank you for being here.

30:28.320 --> 30:29.320
Okay.

30:29.320 --> 30:32.320
Well, and I will be outside so you guys have a few more questions.

30:32.320 --> 30:33.320
Happy to answer.

30:33.320 --> 30:40.320
Thank you.

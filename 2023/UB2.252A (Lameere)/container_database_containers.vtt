WEBVTT

00:00.000 --> 00:10.000
Hi everyone, how are you? How is hosting the weekend? Good?

00:10.000 --> 00:13.000
Yes. That's nice. I'm happy to be here.

00:13.000 --> 00:21.000
It's my first time in Europe and it's the first time that I will talk in English for a first event in person.

00:21.000 --> 00:24.000
This is pretty nice. My name is Edet Buja.

00:24.000 --> 00:35.000
I am a technology evangelist at Percona and this is a very basic and friendly introduction about databases and containers.

00:35.000 --> 00:46.000
About me, I am from Peru in South America. I am working as Six Months in Percona.

00:46.000 --> 00:52.000
It's an open source company. We create open source databases free.

00:52.000 --> 00:59.000
I am a Google woman tech maker. I was nominated as a docker captain last year.

00:59.000 --> 01:04.000
And I am a database and container enthusiast.

01:04.000 --> 01:11.000
You can follow me on Twitter and LinkedIn. I use to post about containers, Kubernetes, open source.

01:11.000 --> 01:24.000
For the agenda today, we are going to see about containers.

01:24.000 --> 01:31.000
We will see docker architecture. We will see the workflow between the components of docker.

01:31.000 --> 01:37.000
We are going to have two examples of how you run in a single Percona Server MySQL container.

01:37.000 --> 01:43.000
And we are going to run multiple containers for Percona Server MySQL.

01:43.000 --> 01:51.000
We will see the docker volume, how this is important in this world of databases on containers.

01:51.000 --> 01:57.000
We will see backups, restores of databases and best practices.

01:57.000 --> 02:02.000
Let's start it. What's a container?

02:02.000 --> 02:07.000
How many of you know what's with docker?

02:07.000 --> 02:14.000
Yeah, a lot. Okay, that's nice. Docker or do you use other tools?

02:14.000 --> 02:18.000
Yeah, there are different kinds of tools for container as application, right?

02:18.000 --> 02:30.000
But in a container, it's like a single unit, lightweight unit of software that package everything that you need for your application.

02:30.000 --> 02:35.000
When we run applications, when we build applications, we know that we need a lot of packages, right?

02:35.000 --> 02:43.000
If you are running, for example, if you are building a Java application, you need libraries, dependencies, many things to run your application.

02:43.000 --> 02:53.000
So everything has to be containerized in a single unit of software, and this is going to be isolated for other things, like your infrastructure.

02:53.000 --> 03:02.000
And the good thing is that your container can run on different platforms, in your laptop, in your server, in your cloud.

03:02.000 --> 03:11.000
With this, we end with the problem that we have when we say, hey, your program runs, yes, this works just on my computer.

03:11.000 --> 03:15.000
But no, it has to run in different platforms.

03:15.000 --> 03:27.000
We don't need to have this problem to dependencies and other kind of things when we test our application in other platforms.

03:27.000 --> 03:31.000
There are different tools, as I say, for containerization.

03:31.000 --> 03:34.000
We have container runtime interface, for example.

03:34.000 --> 03:43.000
We have container D, and we have Docker that is the tool that we are going to focus now.

03:43.000 --> 03:50.000
All these tools are also in the cloud native computing foundation ecosystem.

03:50.000 --> 03:53.000
If you see the landscape, you will see a lot of tools there.

03:53.000 --> 03:57.000
There is a part for containerization, and there are more than three.

03:57.000 --> 04:02.000
There is a lot of tools for that.

04:02.000 --> 04:06.000
The Docker architecture is a...

04:06.000 --> 04:09.000
It works like a client server model.

04:09.000 --> 04:16.000
We have the Docker DMO, which is going to process all the commands, is going to make all the...

04:16.000 --> 04:27.000
It's going to start to listen to the client always, and the client is going to send requests to the DMO through the recipe.

04:27.000 --> 04:35.000
With this model, the Docker DMO can also manage network containers, images, and Docker volumes.

04:35.000 --> 04:44.000
If we go more in detail, we will see that we have the client, the DMO, that is also called the engine of Docker,

04:44.000 --> 04:50.000
and we have another component that could be your Docker registry, the public, which is Docker Hub,

04:50.000 --> 04:58.000
where all the images, official images are published, and also we can have our own private registry,

04:58.000 --> 05:02.000
in case we don't want to share it with the public.

05:02.000 --> 05:07.000
So in this case, this is the flow of a component.

05:07.000 --> 05:17.000
For example, if we do a pull, we are going to try to bring the image from the Docker Hub into the Docker DMO cache.

05:17.000 --> 05:23.000
If the Docker DMO doesn't find the image in cache, it's going to bring it from the Docker Hub.

05:23.000 --> 05:28.000
But if this is in cache, it's going to take it just that and start to process it.

05:28.000 --> 05:37.000
Same with Docker build. When we run Docker build from the client, the Docker DMO will try to take a Docker file.

05:37.000 --> 05:47.000
A Docker file is a recipe with a lot of instructions where we put all the commands to run our application and deploy it.

05:47.000 --> 05:57.000
So the Docker DMO is going to take the Docker file and build it, build the image, and if you want, we can also run it.

05:57.000 --> 06:09.000
When we run, we will create a container. The container is our application that is already alive and is ready to make connections of petitions.

06:09.000 --> 06:19.000
One more thing here is that we can have everything in our host, or we can have clients, remote clients,

06:19.000 --> 06:31.000
that could make petitions to the Docker DMO. So container benefits.

06:31.000 --> 06:38.000
There are pros and cons, but now I'm going to focus on these benefits, the containers give us.

06:38.000 --> 06:50.000
So one of these is we can reduce costs with this because we can run several containers in a single infrastructure, that's infrastructure that we have,

06:50.000 --> 06:55.000
because of the technology of containers, it's different than the virtualization.

06:55.000 --> 07:06.000
In virtualization, we use the hypervisor, and when you create virtual machines, it consumes more resources from your infrastructure,

07:06.000 --> 07:11.000
but when you use containers, it's very different. You are using the technology of containers,

07:11.000 --> 07:16.000
it would make it possible to run a lot of containers in a single machine.

07:16.000 --> 07:19.000
So for that reason, it's possible to reduce costs.

07:19.000 --> 07:25.000
Also, the containers are very friendly with continuous integration and continuous delivery process.

07:25.000 --> 07:38.000
If you have a big application, a monolithic application, and you want to run containers, you want to integrate it in the DevOps process,

07:38.000 --> 07:46.000
this is going to be hard, we have to work like microservices to make each service as a container,

07:46.000 --> 07:51.000
and include it in the continuous integration and continuous delivery process.

07:51.000 --> 08:00.000
It's easy, when we build our application over a container, it's easy to kill it, it's easy to create it again, it's easy to fail,

08:00.000 --> 08:05.000
and the process is faster.

08:05.000 --> 08:08.000
Another benefit is the multi-cloud compatibility.

08:08.000 --> 08:17.000
With the time several companies try to migrate to a hybrid cloud, they just don't want to have everything on premise,

08:17.000 --> 08:23.000
they also want to scale, they want to grow, so for a reason they opt for cloud,

08:23.000 --> 08:32.000
and containers fit very good in this.

08:32.000 --> 08:40.000
You can install Docker, I know you did it, several, you can choose your distro,

08:40.000 --> 08:47.000
you use Debian, CentOS, everything, so you can go to the official Docker documentation and easily look all the steps.

08:47.000 --> 09:00.000
When you install this, it will install the Docker client, the Docker DMO, and other tools that you will need to use Docker in your local matching.

09:00.000 --> 09:08.000
We already talked about containers, but this talk is about exploring database on containers.

09:08.000 --> 09:16.000
We are going to talk about MySQL, which is this base relational database, we know that it's a database,

09:16.000 --> 09:23.000
and to run MySQL on containers, we need to understand how volumes work,

09:23.000 --> 09:28.000
because the most important thing running databases on containers is the data.

09:28.000 --> 09:36.000
If we lost the data, we lost everything.

09:36.000 --> 09:40.000
For the next slides, we are going to focus in this part.

09:40.000 --> 09:45.000
We will use the image of Percona server for MySQL.

09:45.000 --> 09:54.000
This Percona server for MySQL is open source, it's like MySQL, but with more nice things,

09:54.000 --> 10:00.000
and you can use it, it's open source, it's in Docker Hub, so we will use this image,

10:00.000 --> 10:03.000
and we will create a Docker container.

10:03.000 --> 10:08.000
We will see how it works with all volumes, we will see the layers in Docker,

10:08.000 --> 10:16.000
and then we will create a persistent volume, and we will see how it changes in the layers of Docker.

10:16.000 --> 10:25.000
So, just here, to see that if you want to have an image, it's necessary to have a Docker file.

10:25.000 --> 10:31.000
Who used, who did a Docker file before? By yourself? Yeah, that's good.

10:31.000 --> 10:35.000
A Docker file is a recipe where you will put everything for your application,

10:35.000 --> 10:42.000
so you need this to create an image, then you need the image to create your Docker container.

10:42.000 --> 10:48.000
There are three essential steps here to remember how Docker works.

10:48.000 --> 10:53.000
Okay.

10:53.000 --> 10:59.000
We will run a single Percona server MySQL for container.

10:59.000 --> 11:06.000
We will use Docker run to create the image, right?

11:06.000 --> 11:13.000
No. We don't use Docker run to create the image, we use Docker run to create a container.

11:13.000 --> 11:25.000
So, we use this to create a container, so we will do dash D to say run this container in the background.

11:25.000 --> 11:32.000
I want to use the terminal, and I will call it Percona server for my Percona server one.

11:32.000 --> 11:39.000
I will pass it like the environment variable, variable environment for the root.

11:39.000 --> 11:43.000
This is not a good practice here, this is just to show how we are going to create a container,

11:43.000 --> 11:46.000
and we will use this official Percona server for MySQL.

11:46.000 --> 11:52.000
With this, I am creating a container, right? I'm creating a container with this one.

11:52.000 --> 12:02.000
Okay. So, if we go to Docker image LS, this is going to pull the image of Percona server,

12:02.000 --> 12:05.000
and then it will create the container.

12:05.000 --> 12:08.000
That command is going to do two things.

12:08.000 --> 12:14.000
It's going to bring the image from the official Docker hack, and it's going to create a container.

12:14.000 --> 12:21.000
So, if we see Docker container PS, our container is up.

12:21.000 --> 12:28.000
Okay. After we have that database, we need to add data.

12:28.000 --> 12:34.000
We will add databases, we will add data, we will change registers, we will have transactions,

12:34.000 --> 12:38.000
many things that we can do like a regular database.

12:42.000 --> 12:49.000
Okay. If we run a single Percona server in MySQL container, we know volume, how it works in layers.

12:49.000 --> 12:56.000
If we see this in green, there are layers from Percona server image.

12:56.000 --> 13:01.000
This is the image that we pull it, that we can change. This is just react only.

13:01.000 --> 13:07.000
We can change this, but in top of that, it's going to be created a layer, a new layer.

13:07.000 --> 13:11.000
This layer, this layer is react only. I can add data.

13:11.000 --> 13:18.000
This layer is the one that will contain all the things that I am doing in Docker.

13:18.000 --> 13:22.000
On that image, on that container, I added a new database.

13:22.000 --> 13:26.000
Yes. I create a new registry, I delete it, I add the transactions.

13:26.000 --> 13:28.000
All this is going to save it here.

13:28.000 --> 13:34.000
But what happens if I don't have volume? My container is ephemeral, right?

13:34.000 --> 13:37.000
It could die. It could crash. My machine could crash.

13:37.000 --> 13:43.000
And all my data is going to be lost. I will lose all the data.

13:43.000 --> 13:48.000
We will see how it works with multiple containers.

13:48.000 --> 13:53.000
To run multiple containers with the same image, if we see this is the same image,

13:53.000 --> 13:57.000
the same version of the image, we will just change the name of this container.

13:57.000 --> 14:02.000
Also, we can change another thing, because this is a database, right?

14:02.000 --> 14:09.000
What thing we can change it? They run in a port, right?

14:09.000 --> 14:13.000
In which port my SQL used to run?

14:13.000 --> 14:20.000
Yeah. So I need to change the port for the other container to avoid the conflict.

14:20.000 --> 14:24.000
Okay.

14:24.000 --> 14:28.000
How it works in layers. The same.

14:28.000 --> 14:33.000
We will use the same layer. We will use the same layer for Percona, Percona Server,

14:33.000 --> 14:38.000
which we can modify, but in top of that, we are going to have two layers more.

14:38.000 --> 14:43.000
One of the first containers that I created and the second for the other, that I can add.

14:43.000 --> 14:48.000
I can add data. I can change things. But once again, if I don't have volume,

14:48.000 --> 14:53.000
this is going to die. But this is how to work if we want to create an application

14:53.000 --> 15:02.000
when it doesn't matter if we save the state of this application.

15:02.000 --> 15:07.000
Volumes open the door for a stateful application for run efficiently in Docker.

15:07.000 --> 15:14.000
This is important. Persist data in databases is really important for this kind of application,

15:14.000 --> 15:21.000
because sometimes we think that, like Kubernetes, the other things was created for a stateless application,

15:21.000 --> 15:26.000
but now we have options to use stateful applications on containers, and this is one of the reasons.

15:26.000 --> 15:31.000
Create volumes. So it's pretty easy to create volume.

15:31.000 --> 15:38.000
We can create a volume just with dash V or dash dash volume, and we can say it,

15:38.000 --> 15:43.000
we can create a Docker volume with Docker run and detach.

15:43.000 --> 15:49.000
We will call it Percona Server, the same process, and when we say dash V,

15:49.000 --> 15:56.000
we are saying, okay, this will be my volume in a host, in my local data directory,

15:56.000 --> 16:02.000
and this one is going to be inside my container.

16:02.000 --> 16:11.000
So this is like a mirror from this image.

16:11.000 --> 16:17.000
And how it works. In layers, we have the same, the layer that we can modify,

16:17.000 --> 16:22.000
and in top of that, we are going to create another layer, but in this case, we are adding,

16:22.000 --> 16:29.000
we are creating the mounted volume in BarLiftMySQL.

16:29.000 --> 16:33.000
There are other directories that we can create the volume.

16:33.000 --> 16:40.000
I am just adding, as an example, this, because in MySQL, we have configuration files,

16:40.000 --> 16:47.000
we have logs, we have another things, but for that, we want to create these volumes, for all of that things.

16:47.000 --> 16:53.000
I am just adding, as an example, BarLiftMySQL, which is also a directory that is very important,

16:53.000 --> 16:58.000
and this local directory is the one that could be in my host, but it's not recommended,

16:58.000 --> 17:02.000
because if your host crashes, everything crashes too, with your volumes.

17:02.000 --> 17:15.000
It's preferable to run it in a remote host.

17:15.000 --> 17:21.000
Okay, two backups. Who here make backups?

17:21.000 --> 17:25.000
Okay, I used a very easy way to make backups.

17:25.000 --> 17:31.000
I used it for logical backups, my SQL dump, used in the container,

17:31.000 --> 17:36.000
and for physical backups, we use in the company Perconxtra backup,

17:36.000 --> 17:42.000
which is have more features to have that physical backup.

17:42.000 --> 17:47.000
And for restore, I will use also my SQL dump.

17:47.000 --> 17:53.000
And we don't use Perconxtra backup in this case, because it has a lot of things.

17:53.000 --> 18:02.000
For backup, I will execute a backup in a container that is already running.

18:02.000 --> 18:06.000
Percona server backup is already running. Let's see that we created,

18:06.000 --> 18:14.000
and we are executing Docker exit, it, to enter into the Percona in that container,

18:14.000 --> 18:22.000
and type that common, my SQL dump, to create a backup of the database.

18:22.000 --> 18:30.000
So the backup is going to be in that file, dump SQL, and the same process with restore,

18:30.000 --> 18:35.000
we can take that backup, and this is a different container.

18:35.000 --> 18:39.000
We are going to restore the dot SQL file in a different container.

18:39.000 --> 18:47.000
In this case, in Percona server restore, using my SQL, just that common, my SQL.

18:47.000 --> 18:53.000
Okay, best practices or some recommendation to use containers in database?

18:53.000 --> 18:55.000
Okay.

18:55.000 --> 19:01.000
And one of this is that we can keep constantly monitoring our database

19:01.000 --> 19:05.000
and the whole system, because we don't know when we are going to don't have

19:05.000 --> 19:09.000
enough resources for our containers, we should be aware of that,

19:09.000 --> 19:13.000
or have notifications to say, hey, you don't have a no disk,

19:13.000 --> 19:18.000
you don't have a no memory, so provision, or try to scale in your resources,

19:18.000 --> 19:23.000
so we should keep monitor. Using some tools for that, for example, is PMM,

19:23.000 --> 19:28.000
we can use open source monitors to monitor our databases on containers.

19:28.000 --> 19:33.000
We can store data in persistent volume outside the container,

19:33.000 --> 19:39.000
it recommended no inside the container, because it's easy to create plans for recovery,

19:39.000 --> 19:44.000
we can restore the data easily, also on fast.

19:44.000 --> 19:49.000
We should limit the resources of utilization of our containers.

19:49.000 --> 19:57.000
Our containers, we know that they are small, but also we should limit when they are a lot.

19:57.000 --> 20:04.000
And we should regularly have backups of the database,

20:04.000 --> 20:08.000
and store these backups in a different location.

20:08.000 --> 20:13.000
And have a plan of migration and disaster recovery is really great.

20:13.000 --> 20:18.000
In that case, having a monitoring tool helps a lot.

20:18.000 --> 20:22.000
And what more?

20:22.000 --> 20:28.000
That's all. You can find me in LinkedIn and Twitter.

20:28.000 --> 20:30.000
Anyone?

20:30.000 --> 20:32.000
So.

20:32.000 --> 20:35.000
APPLAUSE

20:38.000 --> 20:40.000
Okay, we have time for questions.

20:40.000 --> 20:44.000
If you absolutely need to leave, and you can't wait until the talk is over,

20:44.000 --> 20:59.000
please do so as quietly as possible so we can understand the questions. Thanks.

20:59.000 --> 21:02.000
Hi, thank you so much for your talk. It was really interesting.

21:02.000 --> 21:07.000
I'm wondering what kind of limitations do you see when you're speaking about having a databases,

21:07.000 --> 21:09.000
running in containers?

21:09.000 --> 21:13.000
There is storage limitations, CPU or something else?

21:13.000 --> 21:20.000
Guys, can you please be a little quiet so we can understand the question?

21:20.000 --> 21:22.000
Alright, I will try to move the microphone.

21:22.000 --> 21:25.000
Yeah, you. The people can you. Thank you.

21:25.000 --> 21:29.000
I was wondering, maybe, like, first of all, really cool talk. Thank you so much.

21:29.000 --> 21:34.000
My question would be, could you maybe talk us through some kind of limitation that you can see

21:34.000 --> 21:39.000
when you're running databases and containers?

21:39.000 --> 21:44.000
You didn't understand it?

21:44.000 --> 21:46.000
Thank you so much for the talk. It was really cool.

21:46.000 --> 21:51.000
Maybe you can share with us some kind of limitations that you see when you're running to the solution

21:51.000 --> 21:54.000
of running databases inside containers, right?

21:54.000 --> 21:56.000
You cannot really run very big databases.

21:56.000 --> 22:01.000
You probably will have a problem with the solution.

22:01.000 --> 22:03.000
What kind of limitations do you see?

22:03.000 --> 22:06.000
So.

22:06.000 --> 22:08.000
Yeah, he's asking about.

22:08.000 --> 22:14.000
Sorry, the question is about what limitations you can run into with database containers.

22:14.000 --> 22:20.000
Yeah, I don't want to say this, but it depends really on the business.

22:20.000 --> 22:23.000
Okay, if you want to invest a lot of money in infrastructure,

22:23.000 --> 22:30.000
because at the end, your database, the volume that you have is not going to be part of your container.

22:30.000 --> 22:32.000
It's going to be outside.

22:32.000 --> 22:33.000
And this depends on you.

22:33.000 --> 22:37.000
You want to invest a lot of money to save that data. It's good.

22:37.000 --> 22:39.000
You want to replicate it?

22:39.000 --> 22:43.000
Please try and be quiet while we are asking questions.

22:43.000 --> 23:10.000
Are there any more questions?

23:10.000 --> 23:14.000
There is one more question from the back. So please be quiet.

23:14.000 --> 23:16.000
Thank you.

23:16.000 --> 23:19.000
Hello.

23:19.000 --> 23:23.000
I wanted to ask, did you notice any kind of performance issues?

23:23.000 --> 23:24.000
Did you benchmark things?

23:24.000 --> 23:33.000
Did you identify some kind of overheads going on when you can't internalize a database like MySQL

23:33.000 --> 23:38.000
or other kind of databases really?

23:38.000 --> 23:52.000
Thank you.

23:52.000 --> 23:56.000
Sorry.

23:56.000 --> 24:00.000
Sorry, I didn't get your question.

24:00.000 --> 24:18.000
I'm just going to ask you, when you can internalize a database, did you notice any kind of overheads, compute, memory, or disk, essentially,

24:18.000 --> 24:29.000
where you can see that the database performance or operation is significantly affected by the fact of being containerized?

24:29.000 --> 24:40.000
I'm not sure about that, but if you use open source tools to monitor your containers on databases, you can have like a visualization of these things.

24:40.000 --> 24:51.000
If you don't have enough resources, so it can show you like alerts or things like that where you can figure out where exactly is your limitation.

24:51.000 --> 24:56.000
Okay. So for example, did you run benchmark?

24:56.000 --> 25:02.000
No.

25:02.000 --> 25:04.000
Could you help me?

25:04.000 --> 25:05.000
Okay. Could you help me to answer that?

25:05.000 --> 25:08.000
Okay. My friend is going to help me to answer this.

25:08.000 --> 25:09.000
All right. Thank you.

25:09.000 --> 25:11.000
Yeah. Thank you to you.

25:11.000 --> 25:19.000
Hey, so usually the performance degradation is around 2%, 3%, 4%.

25:19.000 --> 25:27.000
The issue is more about how you configure the database, kind of storage, if it's local or network storage.

25:27.000 --> 25:33.000
But the virtualization is minimal. It's like running on a EC2 instance.

25:33.000 --> 25:47.000
Okay. So there is an impact, miserable, at least you say around 4% or 5%, but you say that's not going to be the, that there are configurations we can do to try to avoid that.

25:47.000 --> 25:56.000
Do you have any kind of paper or any kind of resources that we might use to avoid those kind of bottlenecks?

25:56.000 --> 26:05.000
If I got correctly, not much. The measure that we do in databases is measuring TPS.

26:05.000 --> 26:24.000
So you will notice on, if we're running benchmarks with Sysbench, for example, 3%, like if you are running 1,000 queries per second, you will get 980, 990 queries per second when containerized.

26:24.000 --> 26:32.000
Okay. And do you have any kind of recommendations, kind of generic recommendations you can do so that when you run a database in a container,

26:32.000 --> 26:39.000
here is what you can do to try and negate some of the performance bottlenecks that you guys have noticed?

26:39.000 --> 26:51.000
To be honest, on real-day activities, I would say 99% of the performance will come from how you configure my SQL.

26:51.000 --> 27:04.000
The containerization is like just a small piece of the game. You can make more effect by modifying the database configuration.

27:04.000 --> 27:06.000
Alright. Thank you very much.

27:06.000 --> 27:22.000
Thanks to you.

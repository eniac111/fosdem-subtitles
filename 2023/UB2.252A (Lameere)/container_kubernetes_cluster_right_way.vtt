WEBVTT

00:00.000 --> 00:07.000
Hello. Hello. Okay. So, welcome to the Contano's Dev Room at FOSDEM 2023. We're all very happy

00:16.580 --> 00:22.320
to be back in person in completely filled room as usual for this track. And we've got

00:22.320 --> 00:28.920
our first speaker who's going to be talking about drawing Kubernetes cluster the right

00:28.920 --> 00:35.920
way. Take it away.

00:35.920 --> 00:50.920
Okay. So, yeah, you see the title of the talk. And the nature of Kubernetes is a little bit

00:50.920 --> 00:57.920
specific. I would say, and that's why this talk exists and I hope can be beneficial.

01:06.600 --> 01:13.760
If we speak about the Kubernetes specific, the first thing we actually think about is

01:13.760 --> 01:20.760
the high-entrance threshold. First of all, we have tremendous amount of objects or entities,

01:23.560 --> 01:30.560
I would say, which interact with each other in some predictable or not always predictable

01:30.560 --> 01:41.560
manner. So, the slide just lists few of them. And as you know, Google likes inventing new entities with specific names which are doing something non-standard from the point of view of pre-Google systems. So, we have a lot of

02:00.560 --> 02:07.560
objects. You have pods, services which are not traditional service. You have a large amount

02:10.040 --> 02:17.040
of controllers. You have labels, lectures. You have some objects which are really Kubernetes

02:17.040 --> 02:24.040
specific and such as deployments. Then you have specific tools or components or concepts

02:24.040 --> 02:31.040
to control all these orchestrated together set of containers. And due to this complexity,

02:38.960 --> 02:45.960
you really need good and simple drawing to illustrate it. Well, from the cognitive load

02:45.960 --> 02:52.960
theory, we divide cognitive load in several groups, actually in three groups. The one

02:56.400 --> 03:02.280
is early on cognitive load related to the subject you are presenting and to other groups

03:02.280 --> 03:09.280
are more related to the way you present the subject and decreasing cognitive load for

03:09.280 --> 03:16.280
presentation. Actually, free some mind resources of the consumer of your drawing and makes it

03:20.080 --> 03:27.080
much easier to understand. And that is really needed in case of Kubernetes. The specific

03:29.000 --> 03:36.000
of Kubernetes cluster relies on two things. The first thing is, well, we can traditionally

03:36.000 --> 03:43.000
think about the cluster of virtual machines as cluster of some machines connected in one

03:47.560 --> 03:54.560
network. But actually, a traditional networking based approach in case of Kubernetes is not

03:55.480 --> 04:02.480
so beneficial. First of all, the network in case of the Kubernetes cluster is more about

04:02.480 --> 04:09.480
namespaces, network policies, granted or not granted access and so on. And actually, well,

04:11.480 --> 04:17.480
virtual machines are still machines. They are somehow virtually connected with each other,

04:17.480 --> 04:24.480
but that's not the problem of you as a cluster creator. It's actually the problem of Kubernetes

04:24.480 --> 04:31.480
itself to manage this and no reasons to draw it on your diagram. Then you have to draw

04:37.240 --> 04:44.240
objects, Kubernetes objects, you have to combine objects in groups and just connecting them

04:44.280 --> 04:51.280
with some network lines is not helpful. And if speaking about grouping, the other problem

04:51.280 --> 04:58.280
is that sometimes groups should be presented as objects and sometimes groups should be

04:58.720 --> 05:05.720
presented as groups. It's really Kubernetes and it's really a Kubernetes way of thinking

05:06.800 --> 05:12.320
about, well, things and you have to deal with it. We will see it a little bit later. So let's

05:12.320 --> 05:19.320
try to look how people are drawing Kubernetes clusters. The first thing to think about is

05:21.760 --> 05:28.760
using some black and white drawing a traditional way. Maybe an old school graph is example

05:28.760 --> 05:35.240
would be the good starting point. Well, what's good with it? It's graph is recognizable and

05:35.240 --> 05:42.240
people will say, ah, he uses graph is cool. But as you remember, your Kubernetes cluster

05:44.440 --> 05:51.440
is not a graph. Yes, it's not actually good to use network diagram in traditional ways.

05:51.600 --> 05:58.600
So using graphs is nothing good as well. Well, some author, by the way, on the bottom you

05:58.600 --> 06:05.600
have the source of the slide of the drawing and regards to the author. Some are using

06:11.280 --> 06:18.280
LibreOffice diagrams with blocks and lines. You see not too much lines here. It's good.

06:18.280 --> 06:25.280
And it's really better than the previous one and really easier to understand. Then you

06:33.600 --> 06:40.600
see that shades of gray are using to distinguish group of objects one from another. Actually,

06:40.600 --> 06:47.600
it's a good approach. So grouping should be actively used in black and white drawing as

06:51.280 --> 06:58.280
well. And you see if you just draw rectangles without using color, it will be dull a little

06:58.280 --> 07:05.280
bit and it will be a little bit empty. You will look at it and think, is it a diagram

07:10.800 --> 07:17.800
at all? Okay. If we are speaking that shades of gray are beneficial to distinguish groups

07:17.800 --> 07:24.800
of objects one from another, then what about colors? Colors are also beneficial. Frankly,

07:29.280 --> 07:36.280
speaking, this diagram comes from the official Kubernetes documentation from Google. What

07:36.280 --> 07:43.280
good with it? It uses colors. What's bad with it? Never use black text on blue background

07:53.880 --> 08:00.880
because blue and black has the lowest possible value of contrast. Other examples, just a

08:00.880 --> 08:07.880
few of them. Just to notice that people are actively using colors. This one at least uses

08:15.080 --> 08:22.080
white on black. It would be more readable. Well, actually, if you choose colors, the

08:22.080 --> 08:29.080
good idea is to use color wheel, especially if you are more confident with containers

08:36.400 --> 08:43.400
than with color combinations. So color wheel allows you to choose colors with good contrast

08:43.400 --> 08:50.400
and which are complementary to the main color you choose. You can even follow the color

08:50.400 --> 08:57.400
scheme of your website or of your slides or anything like this. It will give you the unique

09:00.920 --> 09:07.920
and recognizable diagrams. So if you linked the color wheel available online on the slide

09:07.920 --> 09:14.920
and I would say it's a good thing to use. So a little bit more about networking diagrams.

09:18.920 --> 09:24.920
They're actually second drawing from the official Kubernetes documentation. What's good? It

09:24.920 --> 09:31.920
has stacks. Stacks are also good in grouping. It has some UML like arrows which are actually

09:31.920 --> 09:38.920
not inheritance. Just used for some aesthetic reasons, I think. And it's clearly drawn in

09:43.160 --> 09:50.160
LibreOffice. So if Google is okay with drawing things in LibreOffice, why not? And it uses

09:50.160 --> 09:57.160
some traditional networking icons, but just to put something except rectangles here. The

09:57.160 --> 10:04.160
really good example from Red Hat, sorry, you see colors with grouping. You see few network

10:06.160 --> 10:13.160
icons which are just objects to make the overall drawing more interesting and not overloading

10:13.160 --> 10:20.160
your mind. A little bit more about networking diagrams. If you have lines and arrows, not

10:23.160 --> 10:29.160
to show that everything is connected with everything, but to guide viewer how to scan

10:29.160 --> 10:36.160
this diagram, then in this case networks are really good. Network is really good. Network

10:36.160 --> 10:43.160
I mean lines, arrows. But if you add more icons, it will be a disaster. The diagram

10:46.160 --> 10:53.160
becomes really difficult to read. Tiny icons, all tiny icons are looking similar and will

10:53.160 --> 11:00.160
be lost. So you can see that the lines are not connected. So you can see that the lines

11:00.160 --> 11:07.160
are not connected. Tiny icons are all looking similar and will be lost. Sequence drawing

11:08.160 --> 11:15.160
as well. We were speaking that arrows are good in putting some order in which the reader

11:16.160 --> 11:23.160
should scan it. Sequence numbers are okay as well. But once again, don't overdo it. Also,

11:23.160 --> 11:30.160
it's popular to make some experiments with shape of objects. Non-rectangular blocks are

11:30.160 --> 11:36.160
rather good. You can use them. Official Google documentation has a portion of diagrams with

11:38.160 --> 11:44.160
something like this. If you are lucky, it will be a good sample of art. If you are not

11:44.160 --> 11:50.160
lucky, it will be a good sample of art. If you are not lucky, it will be a good sample

11:50.160 --> 11:57.160
of art. If you are not lucky, it will not. So guess whether you need it or not.

11:59.160 --> 12:04.160
Code fragments. When you create flight, it's typical to put code fragments inside your

12:04.160 --> 12:11.160
diagrams. Some UML files or something like this. YAML, I mean, of course. It works rather

12:11.160 --> 12:19.160
well. Don't forget about colors. But probably not in web documentation or something like

12:19.160 --> 12:26.160
this. One more point is to speak about the official Kubernetes icons. Well, blue haptagons

12:28.160 --> 12:40.160
specify objects. Blue haptagons specify groups. They are very similar. Is it easy to scan?

12:40.160 --> 12:53.160
No. It's not. It's a good example. Sorry. We have much worse examples. Which were officially

12:53.160 --> 13:06.160
presented as an example to follow. It was slides on this one, exceptionally. This one was

13:06.160 --> 13:17.160
present in slides on Google Drive. I have noticed it was removed from the readme file. But it's

13:17.160 --> 13:22.160
still present over the Internet. It's difficult to close things when you have made them public

13:22.160 --> 13:37.160
once again. So what to use? The first. A lot of angled shapes increase stress level. It's

13:37.160 --> 13:45.160
known from psychology. So if you use official Kubernetes icons, use just a few of them,

13:45.160 --> 13:52.160
not too much. And probably you would like to use grouping with rectangles with rounded

13:52.160 --> 14:01.160
corners. Just, oh, sorry. Like this one. To reduce the overall level of stress caused

14:01.160 --> 14:14.160
by these angular icons. And what else? Few is better than more in this case. Well, the

14:14.160 --> 14:25.160
conclusions. The first thing to take care of is low consumption of icons. Which saves

14:25.160 --> 14:33.160
your user from visual overload. More text, less icons. Like in Unix, you know, text is

14:33.160 --> 14:46.160
okay. Then color. Color runs, well, not the world, but definitely runs your presentation.

14:46.160 --> 14:54.160
Just use good color combinations. It's really a good idea to follow. Then round corners will

14:54.160 --> 15:01.160
save your presentation as well. They are really important, especially if you use several

15:01.160 --> 15:07.160
official icons to let people know that you are, well, the person who knows that these

15:07.160 --> 15:17.160
icons exist. Then what about ideal drawing? Rectangles. Just few lines as a gaze

15:17.160 --> 15:23.160
and course. Then maybe some numbers if you need to show sequence of actions. Maybe some

15:23.160 --> 15:30.160
arrows if you need to show the sequence of actions. Then a good idea is to mix official

15:30.160 --> 15:37.160
kubernetes icons with some other icons if you need more than two or three of them. It

15:37.160 --> 15:48.160
sounds strange, but it really works. Then the last advice. Using several simple drawings

15:48.160 --> 15:58.160
instead of one complicated drawing is a really good way to present your cluster. Actually,

15:58.160 --> 16:04.160
it relates not only to kubernetes. Several simple drawings are almost always better than

16:04.160 --> 16:10.160
one complicated drawing, but in case of kubernetes and this additional cognitive

16:10.160 --> 16:28.160
flow it's really important. Then probably that's the last slide. Thank you.

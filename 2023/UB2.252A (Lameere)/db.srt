1
0:00:00.000 --> 0:00:12.800
Hello, everyone. Could you hear me well? How do you feel today? Sunday? Did you wake up

2
0:00:12.800 --> 0:00:21.880
with energy? Or you are like... We have energy, right? Okay. That's good. I'm in a book from

3
0:00:21.880 --> 0:00:28.280
Peru. I travel to Europe for the first time for this event. And it's the first time also

4
0:00:28.280 --> 0:00:36.120
doing a talk in English. So if I have some mistake, I hope you can understand this. I

5
0:00:36.120 --> 0:00:41.400
am a technology evangelist at Percona. I started six months ago. It's a really great company

6
0:00:41.400 --> 0:00:46.360
focusing on databases. And if you want to follow me on Twitter or want to connect, I

7
0:00:46.360 --> 0:00:52.200
will be really happy by Ling Ling. So I used to publish things about open source containers,

8
0:00:52.200 --> 0:01:05.920
and I'm from Peru. I am a Google woman touch maker. I was nominated as a doctor. And I

9
0:01:05.920 --> 0:01:15.720
am a container and database enthusiast. So this talk is about monitoring your database

10
0:01:15.720 --> 0:01:20.360
with open source tools. We are going to focus on PMM. How many of you did you hear about

11
0:01:20.360 --> 0:01:30.000
PMM before? Percona monitoring and management. Okay. So it's something new for this room.

12
0:01:30.000 --> 0:01:40.200
And this is a perspective of a beginner view. So this is not something advanced. I will

13
0:01:40.200 --> 0:01:48.920
see this monitoring tool as a beginner perspective because I am learning about databases in the

14
0:01:48.920 --> 0:01:54.680
company where I am working, Percona. So we are going to evaluate why it's important the

15
0:01:54.680 --> 0:02:02.800
value of monitoring databases. Also we will see PMM, Percona monitoring and management,

16
0:02:02.800 --> 0:02:09.880
and how we can effectively see the dashboards and graphs that we can get to monitor and

17
0:02:09.880 --> 0:02:19.120
manage our databases. All this time I was working in a database company, I asked myself,

18
0:02:19.120 --> 0:02:26.560
and I realized the importance is to monitor databases because we can just have one database

19
0:02:26.560 --> 0:02:33.040
running for us. We can have several of them. We can have it in cloud, in infra. So it's

20
0:02:33.040 --> 0:02:39.880
very important and it's why we should ask why we should care about databases, why we

21
0:02:39.880 --> 0:02:45.280
should care about monitoring these databases. And we can ask those questions like is my

22
0:02:45.280 --> 0:02:51.280
database performing well? So as we start to work with databases, there are several queries

23
0:02:51.280 --> 0:02:57.640
that we make. So these queries maybe is not executing in the time that we expected. It

24
0:02:57.640 --> 0:03:04.720
could take more time and it's going to have a bottleneck in the time that we are executing.

25
0:03:04.720 --> 0:03:14.680
So we should care about this and know that there are metrics that where we should detect

26
0:03:14.680 --> 0:03:21.960
the problem for the performance of our databases. Another question that could ask ourselves

27
0:03:21.960 --> 0:03:28.440
is our databases are available and accepting connections. We can have several databases

28
0:03:28.440 --> 0:03:34.480
and many connections could be made, but if we don't put a limit in these connections,

29
0:03:34.480 --> 0:03:42.840
it could just crash. But if we put a limit, also we should be aware when we are achieving

30
0:03:42.840 --> 0:03:48.640
or we are reaching that limit to increase or maybe to stop the connection. But if this

31
0:03:48.640 --> 0:03:58.200
is, we pass the limit, so this is going to be a problem in our databases, right? If this

32
0:03:58.200 --> 0:04:04.520
is an e-commerce company, it can happen because the user is going to wait just two seconds

33
0:04:04.520 --> 0:04:11.520
or maybe one second to go to the next page faster. But if we did this in three seconds,

34
0:04:11.520 --> 0:04:19.520
five seconds, the user is going to go to another page and we lost as a business. Is my sister

35
0:04:19.520 --> 0:04:30.520
Estable? We also monitor the infrastructure where our databases are running, not just

36
0:04:30.520 --> 0:04:35.560
the databases, because it is running over an infrastructure. We are using CPUs, memory,

37
0:04:35.560 --> 0:04:47.560
and we are not able to provision these resources on time. We will be in problem for our databases.

38
0:04:47.560 --> 0:04:56.880
I'm having avoidable time. So if our software is not, if our hardware is not enough, so

39
0:04:56.880 --> 0:05:05.520
our application could crash and we can have hardware failures or network outage. We should

40
0:05:05.520 --> 0:05:16.800
be aware of these metrics to avoid these problems. So we have also can have human errors or these

41
0:05:16.800 --> 0:05:28.240
crashes, these crashes. So there are metrics that we can see to identify this before. So

42
0:05:28.240 --> 0:05:34.840
but we can just see what are the problems when we are having the problems. We can also

43
0:05:34.840 --> 0:05:39.720
prevent these problems, asking these questions. I am minimizing performance issues that can

44
0:05:39.720 --> 0:05:49.560
impact my business. I am able to identify these issues before they happen because there

45
0:05:49.560 --> 0:05:55.880
is a way to prevent. As a previous example, if we are reaching the limit, we can see it

46
0:05:55.880 --> 0:06:01.960
before we are reaching it. So we can prevent maybe provisioning more resources, maybe checking

47
0:06:01.960 --> 0:06:09.840
the query that we already saw that is taking too much time executing. So there are ways

48
0:06:09.840 --> 0:06:18.760
how we can prevent these problems. Nowadays, there are challenges that we have when we

49
0:06:18.760 --> 0:06:26.000
think to monitor databases. For example, the data volume grow. We don't talk about gigabytes

50
0:06:26.000 --> 0:06:34.880
now. We are talking about terabytes or maybe more because the data that the database has

51
0:06:34.880 --> 0:06:42.800
is a lot. It is a challenge to monitor these days. The complexity of the model databases,

52
0:06:42.800 --> 0:06:50.440
right now it is SQL databases, not SQL databases. The database has different models. It could

53
0:06:50.440 --> 0:06:56.640
run in different cloud providers. It could have different models. So the complexity just

54
0:06:56.640 --> 0:07:05.920
grows. Now it is different than before. The data loss, so it is one race that we should

55
0:07:05.920 --> 0:07:16.120
try to monitor, to prevent it. Lack of visibility. If we don't have these things ready to check

56
0:07:16.120 --> 0:07:22.720
it, if we have to do another thing, like maybe create scripts, Linux script or JavaScript

57
0:07:22.720 --> 0:07:27.200
to check it and to get this metrics, we don't have that data on time. We don't have that

58
0:07:27.200 --> 0:07:32.080
metrics on time. But if we have that visibility, it is going to be easy for us to detect these

59
0:07:32.080 --> 0:07:38.200
problems to monitor our databases. Even better, if we have every single dashboard where we

60
0:07:38.200 --> 0:07:50.200
can visualize it. We can monitor many things. But with this, we have different databases.

61
0:07:50.200 --> 0:07:56.240
They can have MySQL. They can have other kind of databases. So it depends on the business,

62
0:07:56.240 --> 0:08:01.960
what we want to monitor, what metrics we are going to get to monitor. But if we don't know

63
0:08:01.960 --> 0:08:06.600
in all these things that we have for databases, we are going to get a lot of things that maybe

64
0:08:06.600 --> 0:08:11.920
we don't need and create alerts for maybe things that we really don't need. We are not

65
0:08:11.920 --> 0:08:18.920
focusing in that business exactly. We should try to focus to monitor, to monitor, we should

66
0:08:18.920 --> 0:08:25.240
try to focus in the business. What's the metrics that are important for us, for our business?

67
0:08:25.240 --> 0:08:29.400
Integration with other tools. So with the time we can do continuous integration, continuous

68
0:08:29.400 --> 0:08:35.360
delivery things. So it increases also the complexity to monitor our databases because

69
0:08:35.360 --> 0:08:41.200
this is not in a single place. This goes over a process that also devolves. Many things

70
0:08:41.200 --> 0:08:53.280
are being automated. Now that we know why we should care about monitored databases,

71
0:08:53.280 --> 0:08:59.040
we will talk about one of the solutions that will help us to monitor. This is Percona Monitoring

72
0:08:59.040 --> 0:09:06.440
and Management, which is PMM. This is an open source tool and free tools, also based in

73
0:09:06.440 --> 0:09:12.840
other open source tools like MySQL. This led us to monitor databases like MySQL, MariaDB,

74
0:09:12.840 --> 0:09:18.560
PostgreSQL, MongoDB. But not just that. As I said before, this also led us to monitor

75
0:09:18.560 --> 0:09:24.560
the infrastructure where our databases are running. It's important to know about that.

76
0:09:24.560 --> 0:09:32.200
And it also helped us to performance our databases, to simplify the management of these databases

77
0:09:32.200 --> 0:09:41.400
and we can exchange the security. Percona Monitoring and Management is built on top

78
0:09:41.400 --> 0:09:48.280
of other open source tools like Grafana. I know many of you use Grafana, right? Who

79
0:09:48.280 --> 0:09:57.360
use Grafana? Okay. A lot. And Victoria Metrics also to establish this data that metrics we

80
0:09:57.360 --> 0:10:03.560
collect for a long time. We are using ClickHose too to create this reports in real time with

81
0:10:03.560 --> 0:10:09.560
all these metrics that we collect in the time. We are using PostgreSQL to establish all the

82
0:10:09.560 --> 0:10:16.080
metadata and all these metrics for databases, all the important data that we have in PMM.

83
0:10:16.080 --> 0:10:22.400
And everything that we visualize is saved in this database set. And we use Docker to

84
0:10:22.400 --> 0:10:30.320
install PMM. We can containerize the installation of PMM, the client and the server and using

85
0:10:30.320 --> 0:10:41.680
in different platforms. We also use Kubernetes for Kubernetes operators for scaling our databases.

86
0:10:41.680 --> 0:10:47.400
There are three levels of when we talk about PMM interface. This is the big one, which

87
0:10:47.400 --> 0:10:55.080
is a dashboard that we all know. But we can go deeper and see the graphs. That is a graphical

88
0:10:55.080 --> 0:11:03.760
representation of the metrics in long period of time. And we have the metrics also, which

89
0:11:03.760 --> 0:11:13.440
is a countable number that represents some value, some important value of our infrastructure

90
0:11:13.440 --> 0:11:25.200
of our database. Okay. As I tell before, what we want to monitor is going to depend on our

91
0:11:25.200 --> 0:11:30.560
business. We are not going to monitor the same metrics as another business. It depends

92
0:11:30.560 --> 0:11:35.760
a lot of that. And we also should be aware of the layers that we create that should be

93
0:11:35.760 --> 0:11:45.000
focused on what we do as a business and create these alert and notifications that could be

94
0:11:45.000 --> 0:11:51.720
notified when we need it. So it could be integrated with Slack, with many other tools that we have

95
0:11:51.720 --> 0:12:02.360
in the hand to know when the problem is happening. Exactly. So important metrics. Some of that

96
0:12:02.360 --> 0:12:13.080
that we can check it with PMM, high CPU, high memory usage, and this high disk EO part of

97
0:12:13.080 --> 0:12:20.560
the infrastructure, the amount of user connections. We can know when the data grow and other kind

98
0:12:20.560 --> 0:12:27.520
of metrics that we can have. Could somebody tell me what other kind of metrics we can

99
0:12:27.520 --> 0:12:40.400
check it with PMM? With some monitoring tool? A part of the infrastructure or? Okay. We'll

100
0:12:40.400 --> 0:12:47.680
check. If we see the long query response times, as I say, some queries could take some time.

101
0:12:47.680 --> 0:12:56.520
PMM has a very good dashboard, which is this. It's come query analytics dashboard where we can see

102
0:12:56.520 --> 0:13:09.320
for a specific we can see all the queries that are for our databases. In this case, I'm seeing all

103
0:13:09.320 --> 0:13:17.360
the top queries that are running in our databases. But also we have an option to check it here if we

104
0:13:17.360 --> 0:13:24.720
want to check for my SQL for Postgres or MongoDB. We will see the amount of queries per second,

105
0:13:24.720 --> 0:13:30.920
for example, that we are running and how time is taking. So if we open this dashboard when we are

106
0:13:30.920 --> 0:13:36.320
working in databases, the first thing that we are going to see is, okay, this query is taking too

107
0:13:36.320 --> 0:13:42.080
much time. In this case, no. But if we have a query that is taking too much time or is running a lot

108
0:13:42.080 --> 0:13:47.360
of queries per second, we can see the first one and we can start the troubleshooting from that point.

109
0:13:47.360 --> 0:13:56.720
The high CPU utilization is part of the infrastructure. Also, it's important to know how

110
0:13:56.720 --> 0:14:01.800
is this going. For example, this dashboard in PMM, in Percona monitoring and management,

111
0:14:01.800 --> 0:14:10.120
we can see for a specific note, we can check a note because we can have different notes running

112
0:14:10.120 --> 0:14:20.600
in our infrastructure. And in this case, for example, we have 25% of our disk that is using.

113
0:14:20.600 --> 0:14:29.240
This may be not a good example because I checked it last 12 hours, but we can check our disk usage

114
0:14:29.240 --> 0:14:37.000
during six months or more and then is when we can see and take decisions. Let's see if this is like

115
0:14:37.000 --> 0:14:43.200
six months, we are using just 25% of our disk. It could be a problem because we have a lot of

116
0:14:43.200 --> 0:14:50.480
infrastructure that we are not using and we are wasting money, right, because of this space that

117
0:14:50.480 --> 0:15:00.880
we are not using in six months. We can reduce our CPU and save money. High memory usage is this

118
0:15:00.880 --> 0:15:10.320
dashboard where we can see the amount of memory that I have for my databases and also can see

119
0:15:10.320 --> 0:15:21.200
what is using for Kakache, what is being used, what is going to be ready to be free. This is good

120
0:15:21.200 --> 0:15:27.640
because we can also see when we are reaching the limit of the memory and we can take actions to

121
0:15:27.640 --> 0:15:35.240
provision another disk. We can say that this is very easy when we are working in cloud because

122
0:15:35.240 --> 0:15:42.160
just we click in a button and say, hey, provision another disk or increment the memory, but if we

123
0:15:42.160 --> 0:15:50.600
are working in an infra, maybe in a private cloud, this is hard because we have to prepare the

124
0:15:50.600 --> 0:15:56.200
logistics to get another disk, another memory is going to take time and have this kind of

125
0:15:56.200 --> 0:16:07.640
visualization helps. The amount of input output that we make in our disk, you also can check it

126
0:16:07.640 --> 0:16:17.120
in this graph. We can see that this is your latency here. How is in this case is stable,

127
0:16:17.120 --> 0:16:26.880
but we can have light peaks to see where we are detecting these problems. User connections, as I

128
0:16:26.880 --> 0:16:35.280
say, it helps to monitor the number of active database connections and size it appropriately,

129
0:16:35.280 --> 0:16:44.080
put limits in our connections for our databases. We have in this case MySQL connections. We can

130
0:16:44.080 --> 0:16:51.800
see that for other databases, too, but in this case it is also stable. We are going to have spikes

131
0:16:51.800 --> 0:17:01.840
when we can see that we are working with a lot of transactions on our databases and we can take

132
0:17:01.840 --> 0:17:11.280
actions with that. In this case, the maximum of connections allowed is 151. We are in 150. If

133
0:17:11.280 --> 0:17:23.960
this is going to be 151, this is going to alert us. You have to check this. So, data grow also. We

134
0:17:23.960 --> 0:17:32.480
can see a dashboard where we can see where our data is a lot when we are inserting a lot of

135
0:17:32.480 --> 0:17:39.080
data in our databases or we are just removing things. So, in this case, it is going to show

136
0:17:39.080 --> 0:17:50.000
when my database start. It is not like too good to see it here, but if I have time, yes, I still

137
0:17:50.000 --> 0:17:58.480
have in time. Still have in time? You are right. To show something, to show the dashboard. I have

138
0:17:58.480 --> 0:18:08.520
time. Yeah. Okay. Okay. If you want to try it right now, we can check this PMM demo per con

139
0:18:08.520 --> 0:18:14.960
graph. You can enter. Right now we are going to check the dashboard. But what we learned now,

140
0:18:14.960 --> 0:18:25.440
it was why some aspects that let me think what we should keep away and monitoring our databases

141
0:18:25.440 --> 0:18:31.360
and also how to explore PMM, which is an open source tool, is available there. You have to

142
0:18:31.360 --> 0:18:37.440
double and start to check it and explore it and it is easy to visualize things. So, we are going

143
0:18:37.440 --> 0:18:47.440
to check now PMM. You can also enter to this link. So, it is free to experiment. Let's see.

144
0:18:47.440 --> 0:18:58.520
It is going to open. Yes. This is the dashboard that we have. We have several notes that we can

145
0:18:58.520 --> 0:19:05.540
choose here. A lot of them. So, it depends on the database. We have notes of MongoDB, MySQL,

146
0:19:05.540 --> 0:19:15.200
Postgres, and MySQL proxy also. We can check the details for a specific time. 12, 4. It is not

147
0:19:15.200 --> 0:19:24.920
enough maybe for some things. But maybe six months, three months, we have a lot of things here. So,

148
0:19:24.920 --> 0:19:31.400
we also can check things about the system operator. I don't have access right now to see that. But we

149
0:19:31.400 --> 0:19:43.840
can also register alertings for this. In this case, we have three databases that are being

150
0:19:43.840 --> 0:19:53.160
monitored for Postgres. One of that is the database for PMM itself. We have nine databases in Mongo

151
0:19:53.160 --> 0:19:59.440
and 15 databases in MySQL. This is a good thing for PMM because you can see everything in one

152
0:19:59.440 --> 0:20:12.960
single dashboard. We can go deeper for each note or for each database as you want. This is all.

153
0:20:12.960 --> 0:20:15.360
Thank you so much. If you have some questions.

154
0:20:15.360 --> 0:20:30.960
Thanks a lot for the interesting talk. Does anyone have questions?

155
0:20:30.960 --> 0:20:41.480
Hi. Hello. Good morning. The query monitoring dashboard, do have some advices on how to

156
0:20:41.480 --> 0:20:55.960
perform these queries, the bad queries, the slow queries? So, how to perform the bad queries,

157
0:20:55.960 --> 0:21:05.640
the slow queries? How to rewrite them? Yes. If you go deeper into that query, you will open

158
0:21:05.640 --> 0:21:11.400
another dashboard where you are going to be able to see suggestions. You are doing something bad

159
0:21:11.400 --> 0:21:21.280
here and you can fix it with that. Thank you for the talk, first of all. One question regarding

160
0:21:21.280 --> 0:21:31.720
the PMM query analytics. Is it possible to filter by connection and not by database? I want all

161
0:21:31.720 --> 0:21:39.040
queries from one connection instead of... Is it possible? Yes. You can have just one connection.

162
0:21:39.040 --> 0:22:02.520
Okay. Then we have to talk. Yes. Thank you.


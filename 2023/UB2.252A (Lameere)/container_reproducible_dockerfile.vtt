WEBVTT

00:00.000 --> 00:07.240
Our next talk is by Akihiro.

00:07.240 --> 00:12.000
He's going to talk about Bit4Bit reproducible builds with Docker files.

00:12.000 --> 00:21.520
Hi, I'm Akihiro Sada from NTT Corporation at Zebra.

00:21.520 --> 00:29.840
In this session, I talk about Bit4Bit reproducible build with Dockerfile.

00:29.840 --> 00:37.440
Depending on the determinants of the timestamps and the object-produced versions, I have a

00:37.440 --> 00:44.720
demo and you can reproduce my demo by yourselves using this repo,

00:44.720 --> 00:53.200
www.tav.com.slash-reproducible.com.

00:53.200 --> 00:57.480
Let's begin with water reproducible builds.

00:57.480 --> 01:05.320
Which means producing exactly the same binary when you have the same source.

01:05.320 --> 01:13.960
For containers, the source means Dockerfile and every source code files that are referred

01:13.960 --> 01:16.760
from the Dockerfile.

01:16.760 --> 01:26.480
And the binary means OCR images, including the tar layers and the metadata JSONs.

01:26.480 --> 01:36.200
This reproducibility has to be accessible by anybody at any time, but not necessarily

01:36.200 --> 01:38.880
on any machine.

01:38.880 --> 01:45.600
Because typically your machine has to have a specific version of two chains.

01:45.600 --> 01:53.040
And sometimes you have to use a specific version of the host operating system with a specific

01:53.040 --> 01:58.040
file system and with a specific CPU.

01:58.040 --> 02:06.560
So this limitation is very far from ideal, but this is sometimes in NTT Pro.

02:06.560 --> 02:11.160
So why do we need reproducible builds?

02:11.160 --> 02:16.920
It's because we want to verify the actual source code of the binary, not the claimed

02:16.920 --> 02:19.280
source code.

02:19.280 --> 02:27.080
The actual source code may differ from the claimed source code when the environment,

02:27.080 --> 02:36.960
such as the developer's laptop or CD server, such as changes or dev action is compromised.

02:36.960 --> 02:43.960
Or when the developer simply has malicious intent.

02:43.960 --> 02:51.600
So we want to be sure we have actual source code and if the builds are reproducible, we

02:51.600 --> 02:56.600
can be sure that we have actual source codes.

02:56.600 --> 03:02.520
Otherwise we are not sure whether we have the actual source code or not.

03:02.520 --> 03:09.560
Maybe we are using some compromised source code.

03:09.560 --> 03:15.560
So reproducible build is really great, but it's not a policy.

03:15.560 --> 03:21.680
Especially reproducibility has nothing to do with whether the source code is safe to

03:21.680 --> 03:23.360
use.

03:23.360 --> 03:27.880
The source code may still contain malicious codes.

03:27.880 --> 03:35.760
So reproducible builds make sense only when you actually review the source code by yourself.

03:35.760 --> 03:46.880
So it's really time taking job and very few people are motivated to bother doing that.

03:46.880 --> 03:51.680
But this problem is beyond scope of my talk.

03:51.680 --> 03:59.200
So maybe this task can be automated using some AI in the next couple of years.

03:59.200 --> 04:01.760
But it's beyond scope at this stop.

04:01.760 --> 04:04.760
I don't know.

04:04.760 --> 04:15.080
And it was hard to make the builds reproducible, especially with Docker files.

04:15.080 --> 04:19.880
So there were three major changes.

04:19.880 --> 04:24.680
The most obvious one is timestamps.

04:24.680 --> 04:36.480
Such as the timestamps of the files in OCI tar layers and other timestamps in OCI JSON.

04:36.480 --> 04:43.880
Such as ORZ, OpenContinance, image, create it.

04:43.880 --> 04:50.440
And we also have timestamps in the image histories.

04:50.440 --> 04:54.920
It can be printable with Docker history commands.

04:54.920 --> 04:58.320
So the timestamp problem is the most obvious one.

04:58.320 --> 05:04.360
But the timestamp problem is relatively easy to solve.

05:04.360 --> 05:06.520
So the biggest problem is not timestamps.

05:06.520 --> 05:11.360
The biggest problem is non-deterministic of aftergates.

05:11.360 --> 05:18.400
So when you run aftergates, the package version that is installable with aftergates changes

05:18.400 --> 05:20.280
every time.

05:20.280 --> 05:23.180
And of course, this is not specific to absolute.

05:23.180 --> 05:35.160
So the same problem exists in DNF, APK, JIPA, Pacman, and almost all package managers.

05:35.160 --> 05:43.000
Actually Nix, the package manager, has solved this issue with a version cleaning system

05:43.000 --> 05:45.240
called Flix.

05:45.240 --> 05:51.560
But Nix is very complex and still hard for most people to run.

05:51.560 --> 05:58.320
And Gix is also similar, but Gix is still complex and very hard.

05:58.320 --> 06:05.840
So most people still want to use aftergates or DNF or APK.

06:05.840 --> 06:12.600
And the third problem shown here is characteristics of the file systems.

06:12.600 --> 06:17.760
Such as hard links and X attributes.

06:17.760 --> 06:32.360
So these special characteristics may differ across file systems.

06:32.360 --> 06:42.080
So reproducible builds were really hard in the ecosystem of a Docker file.

06:42.080 --> 06:48.600
But it's now supported in Buildkit version 0.11.

06:48.600 --> 06:55.800
Buildkit is a modern image building framework made for Docker and Moby.

06:55.800 --> 07:02.720
And it has been embedded in the Docker demo since Docker version 18.06.

07:02.720 --> 07:05.480
But it's not specific to Docker and Moby.

07:05.480 --> 07:13.560
So it can be also used as a sound-alarm demo called Buildkit D. And Buildkit D can be executed

07:13.560 --> 07:23.760
inside Kubernetes or NetCity or Potomar or any other control engines that supports OCI

07:23.760 --> 07:24.760
specs.

07:24.760 --> 07:32.880
Buildkit version 8.1 was released the last month with Buildkit support for reproducing

07:32.880 --> 07:35.160
timestamps.

07:35.160 --> 07:40.840
Next to Tony Stigley who is a version of this work.

07:40.840 --> 07:48.160
And this version 0.11 still needs really complex Docker files.

07:48.160 --> 08:04.800
But the next version 0.12 is likely to require less complex Docker files.

08:04.800 --> 08:11.560
And reproducing timestamps is supported using the special build org called Source Date

08:11.560 --> 08:13.840
Epoch.

08:13.540 --> 08:14.540
construction.

08:13.840 --> 08:21.520
This build org conforms to the reproducible builds.org's source date epoch spec, which

08:14.540 --> 08:34.760
And the argument value is usually expected to be set to the

08:21.520 --> 08:34.760
is available under HTTPS

08:34.760 --> 08:43.880
next epoch representation of the GIT commit to this using GIT log dash one dash dash pretty

08:43.880 --> 08:45.880
equal passability.

08:45.880 --> 08:59.920
So you get an integer number that corresponds to the sequence since 1970, generally first.

08:59.920 --> 09:07.280
And this source date epoch is exposed to the run instruction of the Docker file as the

09:07.280 --> 09:09.840
environment variable.

09:09.840 --> 09:19.440
And in addition, it's also consumed by Buildkit itself for the timestamps in the OCI JSONs.

09:19.440 --> 09:29.400
But that's for the timestamps in the OCI tie layers and Buildkit version 0.11.

09:29.400 --> 09:40.520
This is planned to be improved in version 0.12.

09:40.520 --> 09:47.920
So as I mentioned in the previous slide, there is a bunch of cables in version 0.11.

09:47.920 --> 09:57.640
So especially the file timestamps currently has to be explicitly touched with using the

09:57.640 --> 10:08.240
command command, XR command and the touch command like this very complex script.

10:08.240 --> 10:13.880
And that already takes more than three lines.

10:13.880 --> 10:21.080
And also you have to squash all the layers to eliminate over a first white glass that

10:21.080 --> 10:29.320
are created on removing the files in the continuous because the timestamps of the whiteouts are

10:29.320 --> 10:35.600
not reproducible in Buildkit version 0.11.

10:35.600 --> 10:42.040
And also there's a restriction on the mount point trajectories.

10:42.040 --> 10:50.680
So cache mount points can be only created under TMPFS such as Threshold.

10:50.680 --> 10:58.800
And also hard links are not reproducible depending on the file system stamp filter.

10:58.800 --> 11:02.680
So in this version we still have a bunch of cables.

11:02.680 --> 11:13.560
But these cables are already being improved in my project list 3560.

11:13.560 --> 11:17.080
It's not merged in the master branch yet.

11:17.080 --> 11:26.200
But I hope that this project will be merged in the next version 0.12 in the next couple

11:26.200 --> 11:33.720
of weeks or maybe in the next couple of months.

11:33.720 --> 11:37.520
The next topic is reproducing package versions.

11:37.520 --> 11:41.080
This is the most important topic of this talk.

11:41.080 --> 11:48.280
The package versions are hard to reproduce because most distributions do not retain all

11:48.280 --> 11:50.720
the packages.

11:50.720 --> 11:56.720
For example Ubuntu does not retain all the packages as far as I can see.

11:56.720 --> 11:59.200
Debian does.

11:59.200 --> 12:03.640
But the package archives are not mirrored widely.

12:03.640 --> 12:13.120
And basically we only have the central snapshot. Debian.org and only a few mirrors.

12:13.120 --> 12:22.160
This is causing too much load on the central server, snapshot. Debian.org.

12:22.160 --> 12:29.760
So basically this snapshot. Debian.org server can't be used in the CI environments because

12:29.760 --> 12:34.320
it's really slow and it's really freaky.

12:34.320 --> 12:39.640
And this slowness and the freckiest program will get even worse when more people begin

12:39.640 --> 12:44.120
to make their builds reproducible.

12:44.120 --> 12:54.120
This situation is very similar for Fedora and Linux as well.

12:54.120 --> 12:58.180
And Reprogate is my solution for this program.

12:58.180 --> 13:08.200
This is a decentralized and reproducible frontend for Aftergate, DNF, APK and Perkmar.

13:08.200 --> 13:16.600
The package version can be locked with SHA256, SAMS5 and packages can be fetched from several

13:16.600 --> 13:30.520
transports such as HTTP, OCL, OCL registries, IPFS, Local 5 systems and NFS.

13:30.520 --> 13:38.680
By default, Reprogate attempts to fetch the packages from dev.debian.orz using the package

13:38.680 --> 13:39.680
name.

13:39.680 --> 13:47.040
So dev.debian.orz server is fast but it's ephemeral.

13:47.040 --> 13:51.160
It doesn't retain all the packages.

13:51.160 --> 14:01.560
So for all packages, Reprogate automatically horsebacks to devian.notset.fwar using the

14:01.560 --> 14:05.720
SHA256 hash.

14:05.720 --> 14:16.680
This is relatively slow but this server provides processing snapshots of all the packages.

14:16.680 --> 14:26.920
You can also configure Reprogate to use OCL registries, IPFS and Local 5 system.

14:26.920 --> 14:35.240
Reprogate currently supports the five distributions, Debian, Ubuntu, Fedora, Alpine and Linux.

14:35.240 --> 14:41.680
Reprogate is expected to be used in containers but can be used with non-continent environments

14:41.680 --> 14:44.440
as well.

14:44.440 --> 14:46.720
The command user is like this.

14:46.720 --> 14:53.320
So you run Reprogate hash generate to generate the hash file and run apt-get install hero

14:53.320 --> 15:03.560
to install hero packages and Reprogate hash generate again and you will get SHA256, SAMS5

15:03.560 --> 15:04.800
like this.

15:04.800 --> 15:15.160
So this file contains hash of 12 slash main slash hero slash hero 2.10 and d6 photo to

15:15.160 --> 15:16.160
dev.

15:16.160 --> 15:25.240
And inside the containers you can run Reprogate install with this SHA256, SAMS5 and Reprogate

15:25.240 --> 15:34.680
fetch this package from HTTP after get repo or maybe from OCL registry or maybe from IPFS

15:34.680 --> 15:40.760
or maybe from NMS depending on the configuration.

15:40.760 --> 15:43.160
And here is the demo.

15:43.160 --> 15:51.760
So to reproduce this demo you have to run specific version of build kit version 0.11.0.

15:51.760 --> 16:05.720
And in this directory I have SHA256, SAMS5 like this.

16:05.720 --> 16:13.560
This is mostly for running GCC.

16:13.560 --> 16:24.000
And Docker file is a complex machine generated and it has a bunch of work arounds like this

16:24.000 --> 16:28.040
for source list stuffs.

16:28.040 --> 16:48.280
And you can use this to test reproducibility.

16:48.280 --> 16:59.720
It takes a few minutes but the result is like this so you will get the same hash 0a3bc

16:59.720 --> 17:11.680
fub67c85 on any machine such as on detailed actions or local laptops.

17:11.680 --> 17:19.080
So you can try this by yourself on your own machine.

17:19.080 --> 17:25.240
And the future works includes simplifying the Docker files and cache management.

17:25.240 --> 17:31.760
I'm also trying to improve interoperability with 26 stages x6 opt and x6 APK for cross

17:31.760 --> 17:33.920
cooperation.

17:33.920 --> 17:40.480
And also the reproducibility should be testable with open SSS, source of provenance.

17:40.480 --> 17:49.280
And probably more contributions are welcome for these topics.

17:49.280 --> 17:51.880
And here is the wrap up of my talk.

17:51.880 --> 17:57.480
So reproducible builds help to adjust the origin of the binary.

17:57.480 --> 18:03.760
And it challenges like non-deterministic time stamps and the project versions.

18:03.760 --> 18:10.240
And the project version 0.11 adds preliminary support for source data APK.

18:10.240 --> 18:19.040
And the project can be used for reproducing the project version with 5, 6 sums.

18:19.040 --> 18:25.720
And I think the demo is still running so I can't show the results of the demo but that

18:25.720 --> 18:30.920
should be like this result.

18:30.920 --> 18:38.400
Any questions?

18:38.400 --> 18:44.360
Would it be fair to say that this sacrifices security in favor of reproducibility because

18:44.360 --> 18:48.760
you would have to keep that list of hashes maintained to make sure that the packages

18:48.760 --> 18:52.120
downloaded are always like the most secure ones?

18:52.120 --> 18:56.240
So your question was how to make it hash wise, right?

18:56.240 --> 19:03.040
How do you make sure that the list of package hashes is always pointing to the most secure

19:03.040 --> 19:07.280
versions of a package?

19:07.280 --> 19:15.440
So you can use reproget hash

19:15.440 --> 19:18.120
and make the hash file like this.

19:18.120 --> 19:28.920
You can also create the hash file by yourself just with text editor or maybe just your own

19:28.920 --> 19:33.280
NSR tool to maintain this hash file.

19:33.280 --> 19:38.000
Okay, we're out of time.

19:38.000 --> 19:40.000
Thank you for the talk.

19:40.000 --> 19:41.000
Thanks everyone for attending.

19:41.000 --> 20:10.120
Clapping

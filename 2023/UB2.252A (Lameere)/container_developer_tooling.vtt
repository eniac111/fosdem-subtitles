WEBVTT

00:00.000 --> 00:12.720
I guess I don't have to give a big introduction. A lot of you know Phil, right? He's going

00:12.720 --> 00:16.760
to talk about Turing the container developer tooling landscape.

00:16.760 --> 00:45.760
Alright. Hi everybody. I think I'm on. Yeah, you're on. Yeah, so thanks for coming. It seems like Fosom is back. We've got a packed containers room. I think my talk is mostly a warm up for AcaHero after me. So a lot of familiar faces here. A lot of good talk so far.

00:45.760 --> 01:01.760
Maybe this one will be a little bit different than the last few talks. We've been talking a lot about containers and various environments, but we haven't really talked about tools. You've seen a few tools used in some of the demos.

01:01.760 --> 01:19.760
And so I'm just going to talk through where we are these days with development tooling. Interesting that it's 2023 and interesting year and that we're now 10 years since Solomon Hikes gave this demo during a lightning talk at PyCon.

01:19.760 --> 01:37.760
I think it was like April. So getting pretty close to 10 years since someone saw Docker being run at the command line for the first time. And what an interesting demo was because he misspelled hello world and that's now permanently in the history of the internet forever.

01:37.760 --> 01:55.760
But you know, we've been using containers for a long time now. Apologies to those who are big Solaris fans or BSD obviously containers and the technologies behind them existed, you know, in other operating systems before Docker.

01:55.760 --> 02:08.760
But essentially at this point, you know, everything that's been demoed today has been on Linux. There was a great kind of intro in one of the earlier talks about namespaces and C groups.

02:08.760 --> 02:25.760
This picture is old because people keep creating new namespaces so it doesn't work anymore. This was a cool image way back in the day because it was the perfect number to create like a flat packed box. So you create your box out of the namespaces and then you shape your box with C groups.

02:25.760 --> 02:33.760
What what size do you want it to be? What limits do you want to place on that? And apologies to my friends at Microsoft again.

02:33.760 --> 02:46.760
There are containers on on Windows as well these days. But again, for the for the lion share of use cases, these are the features and the technologies we've been using to create containers.

02:46.760 --> 02:56.760
But let's not forget there's other pieces to the puzzle, whether using Docker or some other runtime. There's SE Linux or app armor in use their second profiles.

02:56.760 --> 03:09.760
The images we've been constructing millions of them are constructed around Linux concepts libraries binaries that are basically Linux user space file systems.

03:09.760 --> 03:15.760
And then there's the Linux capabilities that we add or remove or default in our container run times.

03:15.760 --> 03:27.760
So again, all these things are very Linux specific. And yet, you know, where are developers developing these containers? Where that what tools are they using on one platforms?

03:27.760 --> 03:39.760
And I got a little nervous coming to FOSDOM because I thought, oh boy, everybody in this room, there's Linux on the laptop actually is is alive and well at FOSDOM but not so much other places in the world.

03:39.760 --> 03:53.760
As many of you know, I spent way way too long trying to create this slide because I kept trying to find better data on the split of who's using what operating systems for developers.

03:53.760 --> 04:08.760
It's pretty easy to find that Windows is still very heavily used. If you work for a large company, they may hand you a laptop and enforce that use a very specific image of Windows locked down in various ways.

04:08.760 --> 04:17.760
Mac has been growing in popularity for a long time now. A lot of developers use Macs, myself included at the moment.

04:17.760 --> 04:28.760
The problem is it's really hard to gauge how many people use Linux. If you look at the stack overflow developer surveys, you get numbers as high as 30 or 40% in the past few years.

04:28.760 --> 04:39.760
But the way they're asking the questions, it's hard to know if people are saying I'm developing in a Linux instance somewhere in the cloud or I'm actually running Linux on my laptop.

04:39.760 --> 04:47.760
And since we're in Brussels, if you're at dinner somewhere, it turns out someone might overhear your conversation at dinner and they're also at FOSDOM.

04:47.760 --> 04:58.760
So someone point me at a new data source, JetBrains has a developer survey that they've been doing for a number of years and they had the slightly different numbers.

04:58.760 --> 05:09.760
They had 60% for Windows and Mac and Linux were actually almost exactly the same at around 25 or 26% each.

05:09.760 --> 05:18.760
So regardless, we know that people are on various platforms and they're wanting to develop Linux containers.

05:18.760 --> 05:27.760
The easy solution is, hey, we have tons of virtualization options. I don't know, looks like a lot of younger people here.

05:27.760 --> 05:36.760
When I was a developer and VMware came out, I was like, wow, this is magic. I'm like able to run this other operating system on my laptop.

05:36.760 --> 05:43.760
Parallels is out there, KVM, VirtualBox, Vagrant, all these options to be able to run a VM.

05:43.760 --> 05:56.760
And obviously that's one very simple solution to, I need to run Linux, but my physical thing that I have that my manager gave me or that my work provides,

05:56.760 --> 05:59.760
can't run Linux, so I'll just run a VM.

05:59.760 --> 06:09.760
But this solution brings about some new problems because now I have another OS image to manage and it's got updates and maybe security issues.

06:09.760 --> 06:17.760
And so now I'm managing my laptop or my desktop and also this other OS. I have these VM boundary issues.

06:17.760 --> 06:27.760
So I'm on my host and I've checked out some source code, but it's not in my VM and I got to figure out this file sharing and figure out how to do networking.

06:27.760 --> 06:33.760
I want to run a container in the VM and I want to access it and now I figure out how this works with the network.

06:33.760 --> 06:43.760
And there's also just my kind of developer workflow. There's some inhibitors, the fact that this thing's in a VM and I have a tool I want to run, but it's only on my host.

06:43.760 --> 06:49.760
And so again, this becomes potentially clunky to operate in these two worlds.

06:49.760 --> 06:57.760
Way back in the early days of Docker, one of the solutions that someone came up with was Docker Machine.

06:57.760 --> 07:02.760
It was this really nice simple way to sort of do this VM management on your behalf.

07:02.760 --> 07:06.760
You export your Docker host variable and point to the right place.

07:06.760 --> 07:15.760
And all of a sudden it seems like you're using Docker on the host and all the magic of the VM management is done for you.

07:15.760 --> 07:22.760
It was fairly simplistic and so over the years pieces of that are what became Docker desktop.

07:22.760 --> 07:26.760
This is a screen grab, I think, from one of the Windows versions.

07:26.760 --> 07:35.760
But again, 2016, 2017 and beyond for Mac and Windows, a more complete solution was developed.

07:35.760 --> 07:37.760
It also included a ton of other tools.

07:37.760 --> 07:39.760
So you didn't just have your runtime.

07:39.760 --> 07:43.760
Runtime you had Docker compose. You had image signing from Notary.

07:43.760 --> 07:46.760
You had a full Kubernetes cluster that you could access.

07:46.760 --> 07:49.760
It was also being managed by this VM.

07:49.760 --> 07:58.760
So again, there were people sort of trying to make this easier for the developer who wasn't on Linux to develop their Linux containers

07:58.760 --> 08:05.760
that maybe they were going to deploy into a production environment that ran Linux somewhere in the cloud or in a data center.

08:05.760 --> 08:07.760
So this was great.

08:07.760 --> 08:09.760
It felt seamless to the developer.

08:09.760 --> 08:13.760
It felt like I was running my container commands locally.

08:13.760 --> 08:16.760
I'm doing Docker build, Docker run.

08:16.760 --> 08:24.760
The file and networking, people smarter than me had figured out the magic of all this pass through that just seemed seamless and easy to use.

08:24.760 --> 08:34.760
And now there was bundling of these other tools, you know, relevant things that I needed to use were already there in the VM for me.

08:34.760 --> 08:37.760
Meanwhile, everyone wasn't using Docker.

08:37.760 --> 08:45.760
We had the container D project, which I'm wearing my container D t-shirt, but also the sweater so you can't see it.

08:45.760 --> 08:47.760
We have pod man.

08:47.760 --> 08:49.760
There's been some demos today that have used pod man.

08:49.760 --> 08:54.760
Red Hat was building their own suite of tools with Creo and pod man.

08:54.760 --> 09:03.760
And I don't know if we have any high performance computing HPC folks in the room, but Singularity was gaining popularity now known as app tainer.

09:03.760 --> 09:15.760
So again, there's these other technologies, other run times, other tools that people were using, and maybe Docker desktop was really not meaningful to that group of people.

09:15.760 --> 09:23.760
And so over the years, other solutions for those other run times have been developed.

09:23.760 --> 09:27.760
And so obviously pod man desktop is one of those.

09:27.760 --> 09:29.760
There was just a new release lately.

09:29.760 --> 09:38.760
I think it's been around for about a year, although pieces of how to run pod man on your Mac or Windows have existed maybe more than that.

09:38.760 --> 09:44.760
But the official pod man desktop product has been around or project has been around for about a year.

09:44.760 --> 09:48.760
You get Windows, Linux and Mac OS support.

09:48.760 --> 09:52.760
And it has Kubernetes.

09:52.760 --> 09:54.760
It has a plugin system.

09:54.760 --> 10:05.760
They just recently developed a new DNS and networking service that is a little more amenable to desktop laptop environments than using CNI plugins.

10:05.760 --> 10:09.760
And again, it's built around tools that have been in development for many years.

10:09.760 --> 10:11.760
Pod man build a scope.

10:11.760 --> 10:16.760
And the containers libraries that these are built around.

10:16.760 --> 10:23.760
And again, because those things were built with certain features like the rootless and unprivileged work, the demonless runtime with pod man.

10:23.760 --> 10:25.760
And C run.

10:25.760 --> 10:30.760
You get all those same features, but now you can run it on your Mac or your Windows system.

10:30.760 --> 10:39.760
If that's your local developer environment and you get all the same capabilities if you were using pod man on a Linux system.

10:39.760 --> 10:44.760
So you get both all the Docker command line compatibility that pod man originally developed.

10:44.760 --> 10:52.760
But with live pod, you also get the Docker API, which may be important for tools you're using that try and integrate directly with the Docker API.

10:52.760 --> 10:55.760
If you're not in that world.

10:55.760 --> 11:01.760
There's Lima nerd CTL and container Dia sort of a stack of projects.

11:01.760 --> 11:04.760
Nerd CTL similar to pod man.

11:04.760 --> 11:10.760
Provides you that same Docker command line API with composed support.

11:10.760 --> 11:12.760
It uses QMU for virtualization.

11:12.760 --> 11:16.760
So this is the Lima component.

11:16.760 --> 11:25.760
That handles again the file sharing the network pass through via some additional projects that are part of that Lima scope.

11:25.760 --> 11:29.760
Again, this is all focused on Mac OS so far today.

11:29.760 --> 11:37.760
I think there's some discussions around Windows support and aca heroes here and maybe able to speak more to that than I can.

11:37.760 --> 11:45.760
One of the benefits of being built around container D is that this stack can also expose, expose the data to the user.

11:45.760 --> 11:56.760
Expose experimental features like lazy loading, snapshotters, image encryption and other sort of sub projects of container D that are out there today.

11:56.760 --> 12:02.760
Nerd CTL as it's packaged by default gives you rootless on privilege mode.

12:02.760 --> 12:10.760
So if you run it through Lima, you're getting again, rootless on privilege containers running underneath that on Mac.

12:10.760 --> 12:16.760
A few projects that are built on top of that are Rancher desktop and Co Lima.

12:16.760 --> 12:23.760
Rancher desktop, obviously many of you have heard of the Rancher suite of projects and products.

12:23.760 --> 12:32.760
They created a desktop platform that built on the Lima foundation for their Mac OS support.

12:32.760 --> 12:41.760
Both of these projects also found that some of their user base either needed the Docker API or had very specific ties to Docker.

12:41.760 --> 12:48.760
So you can get both of these projects, not just with container D and Nerd CTL, but also get the Docker engine.

12:48.760 --> 12:53.760
In fact, Co Lima, if you install it by default, does install Docker.

12:53.760 --> 12:55.760
They both provide Kubernetes clusters.

12:55.760 --> 13:01.760
So again, if local development environments and Kubernetes, that combination is important to you.

13:01.760 --> 13:12.760
They both provide that Rancher desktop also adds Windows and Linux support in addition, and that's not using Lima underneath.

13:12.760 --> 13:18.760
So the last project I wanted to talk about came out of my team AWS.

13:18.760 --> 13:22.760
This is a project we just launched in November last year.

13:22.760 --> 13:25.760
So just a few months ago, it's called Finch.

13:25.760 --> 13:35.760
And it builds on the same stack as Rancher desktop and Co Lima, where we're using Lima, Nerd CTL and Buildkit to provide that Docker command line,

13:35.760 --> 13:41.760
Docker build support, Docker compose support inside of the on your Mac.

13:41.760 --> 13:46.760
And so there's homebrew packaging and Apple sign installer packages for that.

13:46.760 --> 13:49.760
It supports RM64 and Intel.

13:49.760 --> 13:58.760
And also because of QMU and its capabilities, you can build containers and no matter what your host CPU is,

13:58.760 --> 14:03.760
you can build containers for Intel or RM64.

14:03.760 --> 14:13.760
And again, the host CPU itself can be any of the either Apple Silicon, M1, M2, or the Intel based Mac.

14:13.760 --> 14:22.760
So again, we're a young project, our plans for an extension framework similar to Podman desktop and Docker desktop,

14:22.760 --> 14:34.760
so that we want that same model of you can add features and add capabilities without having to add them to the Finch project itself to extend it to other use cases.

14:34.760 --> 14:41.760
And we're also planning similar to Rancher desktop for adding Windows and Linux support.

14:41.760 --> 14:45.760
Obviously, we're not really building a completely new tool.

14:45.760 --> 14:48.760
We're packaging most of these existing components.

14:48.760 --> 14:50.760
So we're working upstream.

14:50.760 --> 14:54.760
There's myself and a few other container demaintainers.

14:54.760 --> 14:56.760
We're working in Lima.

14:56.760 --> 14:59.760
We have a few pull requests merged in Lima.

14:59.760 --> 15:08.760
We had in the latest Nerd CTL release a few weeks ago, we had five different Amazon folks mentioned in the release notes.

15:08.760 --> 15:11.760
We're planning to add some features to BuildKit.

15:11.760 --> 15:17.760
And we also have several people working in the OCI specs like the recent reference type work.

15:17.760 --> 15:24.760
So again, a lot of the work we do in Finch is really building out capabilities in these underlying projects,

15:24.760 --> 15:28.760
not so much building a brand new interface on top.

15:28.760 --> 15:31.760
And we want it to be a community open source project.

15:31.760 --> 15:34.760
So we're working on a public roadmap.

15:34.760 --> 15:41.760
Obviously, there's a GitHub repository here where you can go and see what we're doing,

15:41.760 --> 15:44.760
open to external contribution.

15:44.760 --> 15:49.760
And what we'd really love collaboration on is this added operating system support.

15:49.760 --> 15:53.760
Again, some of that work might be in Lima or elsewhere,

15:53.760 --> 15:57.760
but we'd love to add Windows and Linux support.

15:57.760 --> 16:04.760
And then understanding the best way to design this extension system that you can already use with other tools that I mentioned.

16:04.760 --> 16:08.760
We're also on the CNCF Slack in the channel Finch.

16:08.760 --> 16:16.760
So with that, that was a whirlwind tour through what's available for desktop tooling today with containers.

16:16.760 --> 16:19.760
And I think we have a few minutes for questions.

16:19.760 --> 16:30.760
Yeah, any questions?

16:30.760 --> 16:39.760
Hi.

16:39.760 --> 16:45.760
What was the motivation to create Finch when there was already this whole ecosystem?

16:45.760 --> 16:52.760
If I think I understood the question, why create Finch when there was Rancher desktop or Colema or Lima?

16:52.760 --> 16:54.760
Yeah, that's a good question.

16:54.760 --> 17:00.760
So each of those tools kind of has its own natural inclination with Rancher desktop.

17:00.760 --> 17:08.760
The focus was great local Kubernetes environment and a GUI and some management around it and including Docker.

17:08.760 --> 17:11.760
We wanted something simpler that's just the command line tool.

17:11.760 --> 17:17.760
And so we talked to the Rancher folks about maybe having a common upstream.

17:17.760 --> 17:24.760
Maybe Finch becomes that common upstream of Lima, container D, nerd CTL, build kit.

17:24.760 --> 17:28.760
So that might still be in the works.

17:28.760 --> 17:34.760
And then Colema is a very small project.

17:34.760 --> 17:36.760
There's one maintainer.

17:36.760 --> 17:38.760
He's kind of working on his own.

17:38.760 --> 17:43.760
And again, we were looking at, you know, he's got Docker in there.

17:43.760 --> 17:45.760
He's got Kubernetes.

17:45.760 --> 17:54.760
And we wanted to, again, focus just on the container interloop lifecycle, build containers, run containers, push containers to registries.

17:54.760 --> 18:03.760
And so essentially it's just a simplification that we think there's still lots of ability for collaboration with those other projects

18:03.760 --> 18:10.760
because we're all using the same stack below us.

18:10.760 --> 18:27.760
We have time for one more fairly quick question.

18:27.760 --> 18:35.760
How easy it is to pick up Finch for someone who's just started working as a developer?

18:35.760 --> 18:37.760
Yeah, how easy to use.

18:37.760 --> 18:40.760
What's the learning curve compared to Docker?

18:40.760 --> 18:48.760
Yeah. So again, most of these tools are built around the sort of understood Docker command line tool.

18:48.760 --> 18:53.760
So if you've already used Docker, like it's the same commands, the same flags.

18:53.760 --> 18:56.760
So in that sense, there's no real learning curve.

18:56.760 --> 18:58.760
They're just brand new to containers.

18:58.760 --> 19:06.760
It's really the same effort that you'd have to do to learn Docker or Podman or Finch or anything else.

19:06.760 --> 19:14.760
So it's really about your understanding of kind of the existing developer tooling space built around Docker.

19:14.760 --> 19:16.760
Okay, thank you.

19:16.760 --> 19:19.760
Please leave quietly when we are still asking questions.

19:19.760 --> 19:26.760
Other than that, thank you.

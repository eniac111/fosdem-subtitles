1
0:00:00.000 --> 0:00:14.120
We want to start and that means I need to once again ask you to quiet down please so

2
0:00:14.120 --> 0:00:16.760
that we can hear our speaker.

3
0:00:16.760 --> 0:00:22.000
Our next talk is by Adrian Raber and he's going to talk about Kubernetes and Checkpoint

4
0:00:22.000 --> 0:00:25.000
Restore.

5
0:00:25.000 --> 0:00:29.840
So, welcome everyone to my conference.

6
0:00:29.840 --> 0:00:32.960
We're going to talk about Kubernetes and Checkpoint Restore.

7
0:00:32.960 --> 0:00:33.960
Please quiet down.

8
0:00:33.960 --> 0:00:40.440
So, I've actually done the talk about container migration here in 2020.

9
0:00:40.440 --> 0:00:42.760
This was using Portman in the last three years.

10
0:00:42.760 --> 0:00:46.880
I was able to move it into Kubernetes.

11
0:00:46.880 --> 0:00:47.880
It's not on.

12
0:00:47.880 --> 0:00:48.880
It is on.

13
0:00:48.880 --> 0:00:49.880
It's green.

14
0:00:49.880 --> 0:00:50.880
It's on.

15
0:00:50.880 --> 0:00:51.880
It's a bad.

16
0:00:51.880 --> 0:00:52.880
Better now.

17
0:00:52.880 --> 0:00:53.880
No.

18
0:00:53.880 --> 0:00:54.880
To soft.

19
0:00:54.880 --> 0:00:55.880
To soft.

20
0:00:55.880 --> 0:01:02.880
What's to soft?

21
0:01:02.880 --> 0:01:08.880
You think the only thing that we can do is move it slightly down.

22
0:01:08.880 --> 0:01:09.880
Better now?

23
0:01:09.880 --> 0:01:10.880
No.

24
0:01:10.880 --> 0:01:13.880
You can turn it up.

25
0:01:13.880 --> 0:01:15.880
Oh, there it was.

26
0:01:15.880 --> 0:01:16.880
That's for the...

27
0:01:16.880 --> 0:01:18.880
Is that a two mic?

28
0:01:18.880 --> 0:01:19.880
It's green.

29
0:01:19.880 --> 0:01:20.880
It's green.

30
0:01:20.880 --> 0:01:21.880
It's green.

31
0:01:21.880 --> 0:01:22.880
It's green.

32
0:01:22.880 --> 0:01:23.880
Better now.

33
0:01:23.880 --> 0:01:24.880
Better now.

34
0:01:24.880 --> 0:01:27.880
No, not too good.

35
0:01:27.880 --> 0:01:30.880
Is it better now?

36
0:01:30.880 --> 0:01:34.880
No, no, no, no, no.

37
0:01:34.880 --> 0:01:37.880
Okay, we got to make do with what we have for now.

38
0:01:37.880 --> 0:01:46.880
But please, if you all quiet down, we can hear our speaker a lot better.

39
0:01:46.880 --> 0:01:51.880
Okay, so I'm working on process migration for at least 13 years now.

40
0:01:51.880 --> 0:01:56.880
I'm involved in CRIU, which is the basis for the container migration we are doing here

41
0:01:56.880 --> 0:01:57.880
today.

42
0:01:57.880 --> 0:02:00.880
I don't know.

43
0:02:00.880 --> 0:02:02.880
Since around 2012.

44
0:02:02.880 --> 0:02:07.880
And I'm focusing mainly on container migration since 2015.

45
0:02:07.880 --> 0:02:13.880
So the agenda for today's session here is...

46
0:02:13.880 --> 0:02:14.880
Can we turn something down?

47
0:02:14.880 --> 0:02:18.880
I get feedback.

48
0:02:18.880 --> 0:02:19.880
Okay.

49
0:02:19.880 --> 0:02:21.880
So the agenda is something like...

50
0:02:21.880 --> 0:02:26.880
I'm going to talk a bit about background of checkpoint restore, especially how CRIU

51
0:02:26.880 --> 0:02:28.880
is integrated in different things.

52
0:02:28.880 --> 0:02:34.880
Then I will present use cases for container checkpoint restore, container migration.

53
0:02:34.880 --> 0:02:38.880
Then I want to talk about few technical details about CRIU.

54
0:02:38.880 --> 0:02:40.880
I might make this very short, depending on the time.

55
0:02:40.880 --> 0:02:45.880
And then I want to talk about a future of checkpoint restore, especially in Kubernetes,

56
0:02:45.880 --> 0:02:49.880
what we are thinking about topic right now.

57
0:02:49.880 --> 0:02:53.880
So checkpoint restore in user space is the name of the tool CRIU.

58
0:02:53.880 --> 0:02:58.880
The reason for the name is that checkpointing and restoring is a thing for over 20 years

59
0:02:58.880 --> 0:03:00.880
now in Linux, even longer maybe.

60
0:03:00.880 --> 0:03:01.880
And there were different implementations.

61
0:03:01.880 --> 0:03:03.880
There were ones using an external module.

62
0:03:03.880 --> 0:03:06.880
There were ones doing LD preload.

63
0:03:06.880 --> 0:03:09.880
And around 2006 or 2008, there was something called...

64
0:03:09.880 --> 0:03:12.880
It was a patch set for the Linux kernel to do it in the kernel.

65
0:03:12.880 --> 0:03:14.880
It was over 100 patches.

66
0:03:14.880 --> 0:03:18.880
It was never merged because it was really huge and complicated.

67
0:03:18.880 --> 0:03:24.880
And because the in kernel thing didn't work, CRIU was named in user space

68
0:03:24.880 --> 0:03:29.880
because it's not in the kernel, it's in user space.

69
0:03:29.880 --> 0:03:33.880
There are multiple integrations of CRIU in different container engines,

70
0:03:33.880 --> 0:03:34.880
run times, orchestration.

71
0:03:34.880 --> 0:03:37.880
The first one to mention here is OpenVz.

72
0:03:37.880 --> 0:03:41.880
They invented CRIU for their container product many years ago

73
0:03:41.880 --> 0:03:45.880
to live migrate containers from one node to another.

74
0:03:45.880 --> 0:03:50.880
So the thing is about CRIU, it has been developed with containers in mind.

75
0:03:50.880 --> 0:03:56.880
At the time, it was for different containers probably, but it's for containers.

76
0:03:56.880 --> 0:04:01.880
And that's why it works as well as it does today.

77
0:04:01.880 --> 0:04:07.880
Then we know that Google uses CRIU in their internal container engine called Borg.

78
0:04:07.880 --> 0:04:12.880
I have no details about it except the things I've heard at conferences from them.

79
0:04:12.880 --> 0:04:21.880
So what they told us, CRIU upstream, is that they use container migration

80
0:04:21.880 --> 0:04:25.880
for low priority jobs on nodes.

81
0:04:25.880 --> 0:04:30.880
And if there's not enough resources, then the container will be migrated.

82
0:04:30.880 --> 0:04:36.880
They said they killed the container before and restarted it somewhere else.

83
0:04:36.880 --> 0:04:41.880
All the work was lost and now they can just migrate it to another node.

84
0:04:41.880 --> 0:04:47.880
And they say they use it for background tasks like the example they gave is

85
0:04:47.880 --> 0:04:50.880
YouTube recoding of things which happens in the background.

86
0:04:50.880 --> 0:04:52.880
It's not time-critical.

87
0:04:52.880 --> 0:04:55.880
So that's why they use Checkpoint Restore for.

88
0:04:55.880 --> 0:04:59.880
Then there's an integration in CXD which enables you to migrate container

89
0:04:59.880 --> 0:05:01.880
from one host to another.

90
0:05:01.880 --> 0:05:03.880
Then it's integrated in Docker.

91
0:05:03.880 --> 0:05:08.880
It's integrated in Portman. This is what I have been working on the last five years mainly.

92
0:05:08.880 --> 0:05:16.880
And the thing I've been working on in the last three years to get it into Kubernetes

93
0:05:16.880 --> 0:05:20.880
is to integrate CRIU support into CRIO.

94
0:05:20.880 --> 0:05:26.880
This is one of the existing container engines which Kubernetes can use.

95
0:05:26.880 --> 0:05:31.880
Interestingly enough, there's a ticket about container live migration in Kubernetes

96
0:05:31.880 --> 0:05:35.880
since 2015. Since then, nothing has happened.

97
0:05:35.880 --> 0:05:42.880
Until now, where we kind of can migrate container, we can definitely checkpoint them.

98
0:05:42.880 --> 0:05:48.880
And we introduced this into Kubernetes and the label forensic container checkpointing.

99
0:05:48.880 --> 0:05:55.880
So this was an interesting experience for me because I was not aware how Kubernetes processes

100
0:05:55.880 --> 0:05:57.880
are working to get something new in there.

101
0:05:57.880 --> 0:06:01.880
So I wrote some code, I submitted the patches and then nothing happened.

102
0:06:01.880 --> 0:06:06.880
And then at some point people told me, yeah, you have to write something called a Kubernetes enhancement proposal.

103
0:06:06.880 --> 0:06:09.880
It's a document where you describe what you want to do.

104
0:06:09.880 --> 0:06:12.880
So I did this. So this is the links to the documents.

105
0:06:12.880 --> 0:06:18.880
I wrote for this. The third link is then the pull request for the actual code changes, which is Merch now.

106
0:06:18.880 --> 0:06:28.880
And the last link is a blog post where it is described how to today use forensic container checkpointing

107
0:06:28.880 --> 0:06:30.880
in combination with Kubernetes.

108
0:06:30.880 --> 0:06:36.880
The reason for the name forensic container checkpointing is we were looking at a way to introduce

109
0:06:36.880 --> 0:06:42.880
checkpointing into Kubernetes with the minimal impact on Kubernetes.

110
0:06:42.880 --> 0:06:50.880
The thing is it's a more or less completely new concept for containers because Kubernetes thinks about containers.

111
0:06:50.880 --> 0:06:54.880
You start them, you stop them, they're done, you don't care about anything.

112
0:06:54.880 --> 0:07:01.880
And now there's something new there which tries to, okay, but I can still move my container from one node to another node,

113
0:07:01.880 --> 0:07:03.880
keep all the state.

114
0:07:03.880 --> 0:07:08.880
And so it was a long discussion to get it into Kubernetes.

115
0:07:08.880 --> 0:07:16.880
The idea behind forensic container checkpointing is you have a container running somewhere and you suspect there might be something wrong.

116
0:07:16.880 --> 0:07:18.880
You don't want to immediately stop it.

117
0:07:18.880 --> 0:07:22.880
Maybe the attacker can detect if you stop it and remove things from it.

118
0:07:22.880 --> 0:07:24.880
So you can take a checkpoint from the container.

119
0:07:24.880 --> 0:07:26.880
The container never knows it was checkpointed.

120
0:07:26.880 --> 0:07:30.880
You can analyze it in a sandbox environment somewhere else.

121
0:07:30.880 --> 0:07:38.880
You can look at all the memory pages offline without the container running or you can restart it as many times as you want.

122
0:07:38.880 --> 0:07:45.880
So that's the idea for forensic container checkpointing and under which label it's currently available in Kubernetes.

123
0:07:45.880 --> 0:07:49.880
So use cases for checkpoint and restore container migration.

124
0:07:49.880 --> 0:07:53.880
I have a couple of them and one has a demo which relies on the network.

125
0:07:53.880 --> 0:07:55.880
So we will see if this works.

126
0:07:55.880 --> 0:08:03.880
So first and maybe simplest use case for checkpoint restore in for containers is reboot and save state.

127
0:08:03.880 --> 0:08:06.880
So I have a host with a blue kernel running on it.

128
0:08:06.880 --> 0:08:08.880
The kernel is getting out of the state.

129
0:08:08.880 --> 0:08:10.880
I have to update it.

130
0:08:10.880 --> 0:08:14.880
I have a stateful container because for stateless containers, it doesn't make sense.

131
0:08:14.880 --> 0:08:17.880
But the container, the stateful container takes some time to start.

132
0:08:17.880 --> 0:08:21.880
So what can you do with checkpoint restore?

133
0:08:21.880 --> 0:08:28.880
You can take a copy of the container, write it to the disk with all the state, with all memory pages saved as they were just before.

134
0:08:28.880 --> 0:08:34.880
You update the kernel, you reboot the system and it comes up with a green kernel with all security holes fixed.

135
0:08:34.880 --> 0:08:38.880
But a container, you can restore it without waiting a long time.

136
0:08:38.880 --> 0:08:42.880
It's immediately there on your rebooted host.

137
0:08:42.880 --> 0:08:46.880
Another use case which is similar to this is quick startup use case.

138
0:08:46.880 --> 0:08:51.880
I have people were talking to me about this.

139
0:08:51.880 --> 0:08:54.880
So this is what people actually use in production from what I've been told.

140
0:08:54.880 --> 0:08:57.880
So they have a container it takes forever to start.

141
0:08:57.880 --> 0:09:05.880
They said it takes like eight minutes to initialize and they have some software as a service thing where they want customers to have a container immediately.

142
0:09:05.880 --> 0:09:08.880
So what they do, they don't initialize it from scratch.

143
0:09:08.880 --> 0:09:15.880
They take a checkpoint once it's initialized and then they can create multiple copies really fast of the container in matters of time.

144
0:09:15.880 --> 0:09:21.880
And so the customers can have their containers faster and maybe they are happier.

145
0:09:21.880 --> 0:09:26.880
So the next thing is the combination of those things is container live migration.

146
0:09:26.880 --> 0:09:35.880
I have a source node, I have a destination node and I want to move my container from one system to the other system without losing the state of the container.

147
0:09:35.880 --> 0:09:43.880
So I take a checkpoint and then I can restore the container on the destination system one or multiple times.

148
0:09:43.880 --> 0:09:47.880
And this is the place where I want to do my demo.

149
0:09:47.880 --> 0:09:49.880
So let's see.

150
0:09:49.880 --> 0:10:01.880
So I want to have a Kubernetes thing running here and I have a small YAML file with two containers.

151
0:10:01.880 --> 0:10:11.880
Let's have a look at the YAML file.

152
0:10:11.880 --> 0:10:14.880
So it's a part with two containers.

153
0:10:14.880 --> 0:10:16.880
One is called Wildfly.

154
0:10:16.880 --> 0:10:20.880
This is a Wildfly-based Java-based application and the other one is Counter.

155
0:10:20.880 --> 0:10:22.880
Both are really simple, stateful containers.

156
0:10:22.880 --> 0:10:25.880
If I do a request to the container, I get back a number.

157
0:10:25.880 --> 0:10:29.880
The number is increased and second time the number is the increased number.

158
0:10:29.880 --> 0:10:32.880
So let's talk to the container.

159
0:10:32.880 --> 0:10:37.880
Hopefully it works.

160
0:10:37.880 --> 0:10:42.880
Okay, this is hard to read but I think I need this ID.

161
0:10:42.880 --> 0:10:51.880
So I'll just do a curl to the container here and then I need to replace the ID to figure out the IP address of my...

162
0:10:51.880 --> 0:10:53.880
Where's my mouse here?

163
0:10:53.880 --> 0:10:55.880
Container.

164
0:10:55.880 --> 0:10:59.880
And it returns counter zero, counter one, counter two.

165
0:10:59.880 --> 0:11:02.880
So it's stateful but it's simple.

166
0:11:02.880 --> 0:11:07.880
So to use Checkpoint Restore in Kubernetes,

167
0:11:07.880 --> 0:11:12.880
so this is currently a kubelet only interface because we still don't know how it...

168
0:11:12.880 --> 0:11:19.880
It's the best way to integrate it into Kubernetes so it's not straightforward yet to use it but it's there.

169
0:11:19.880 --> 0:11:23.880
So I'm also doing a curl.

170
0:11:23.880 --> 0:11:25.880
Let's find my command in the history.

171
0:11:25.880 --> 0:11:27.880
Now that's the wrong one.

172
0:11:27.880 --> 0:11:33.880
Sorry.

173
0:11:33.880 --> 0:11:35.880
Almost have it.

174
0:11:35.880 --> 0:11:37.880
Okay, so this is the command.

175
0:11:37.880 --> 0:11:40.880
So what I'm doing here, I'm just talking to the kubelet.

176
0:11:40.880 --> 0:11:48.880
You see the HTTPS address at the end of the long line and it says I'm using the Checkpoint API endpoint

177
0:11:48.880 --> 0:11:56.880
and I'm trying to checkpoint a container in the default Kubernetes namespace in the pod counters and the container counters.

178
0:11:56.880 --> 0:12:02.880
So I'm doing this and now it's creating the checkpoint in the back and if I'm looking at what it says,

179
0:12:02.880 --> 0:12:10.880
it just created a file somewhere which contains all file system changes, all memory pages, the complete state of the container.

180
0:12:10.880 --> 0:12:18.880
And now I want to migrate it to another host and now I have to create an OCI image out of it.

181
0:12:18.880 --> 0:12:24.880
I'm using Builder here and then I'm saying...

182
0:12:24.880 --> 0:12:30.880
I'll give it an annotation so that the destination knows this is a container image.

183
0:12:30.880 --> 0:12:37.880
Then I'm going to include the checkpoint archive into the container, into the image.

184
0:12:37.880 --> 0:12:40.880
And then I will say commit.

185
0:12:40.880 --> 0:12:42.880
It's the wrong one.

186
0:12:42.880 --> 0:12:46.880
Commit and I'm going to call it checkpoint image latest.

187
0:12:46.880 --> 0:12:56.880
So now I have OCI type container image locally which contains the checkpoint and now I will push it to a registry.

188
0:12:56.880 --> 0:13:02.880
Here it was and I will call it tech39.

189
0:13:02.880 --> 0:13:08.880
And now it's getting pushed to a registry so this works pretty good but this VM is not local.

190
0:13:08.880 --> 0:13:15.880
And now I want to restore the container on my local VM and that's happening here.

191
0:13:15.880 --> 0:13:19.880
I'll try to control PS.

192
0:13:19.880 --> 0:13:21.880
So nothing is running.

193
0:13:21.880 --> 0:13:28.880
Then I have to edit my YAML file.

194
0:13:28.880 --> 0:13:31.880
And so it's pretty similar to the one I had before.

195
0:13:31.880 --> 0:13:39.880
I have a pod called counters and I have a container wildfly which is started from a normal image

196
0:13:39.880 --> 0:13:48.880
and the other container called counter is started from the checkpoint image.

197
0:13:48.880 --> 0:13:52.880
And now I say apply.

198
0:13:52.880 --> 0:13:58.880
And now let's see what the network says.

199
0:13:58.880 --> 0:14:01.880
If it likes me.

200
0:14:01.880 --> 0:14:07.880
So it now says, so it's really hard to read because it's a large font but it said pulling the initial image.

201
0:14:07.880 --> 0:14:09.880
So that's already there so it doesn't need to pull.

202
0:14:09.880 --> 0:14:12.880
It created a container wildfly.

203
0:14:12.880 --> 0:14:18.880
It started a container wildfly and now it's actually pulling the checkpoint archive from the registry.

204
0:14:18.880 --> 0:14:22.880
Oh, and it's created a container and started a container.

205
0:14:22.880 --> 0:14:25.880
So now we have a restored container hopefully running here.

206
0:14:25.880 --> 0:14:33.880
Let's get the idea, the ID of the container and let's talk to the container again.

207
0:14:33.880 --> 0:14:39.880
And so now we shouldn't see counter zero but counter three or four.

208
0:14:39.880 --> 0:14:41.880
I don't remember what it was last time.

209
0:14:41.880 --> 0:14:45.880
This is the right idea.

210
0:14:45.880 --> 0:14:52.880
So now we have a stateful migration of a container from one Kubernetes host to another Kubernetes host

211
0:14:52.880 --> 0:15:01.880
by creating a checkpoint, pushing it to a registry and then kind of tricking Kubernetes into starting a container

212
0:15:01.880 --> 0:15:05.880
but in the background we kind of used a checkpoint container.

213
0:15:05.880 --> 0:15:11.880
So Kubernetes thinks it started a container, a normal container, but there was a checkpoint container behind it.

214
0:15:11.880 --> 0:15:18.880
So the checkpoint restore, the restoring of the checkpoint all happens in the container engine below it in cryo

215
0:15:18.880 --> 0:15:21.880
and for Kubernetes it's just a normal container.

216
0:15:21.880 --> 0:15:23.880
It has restored.

217
0:15:23.880 --> 0:15:28.880
So back to my slides.

218
0:15:28.880 --> 0:15:38.880
So another use case people are interested in a lot which I have never thought about is spot instances which AWS and Google has.

219
0:15:38.880 --> 0:15:44.880
It's cheap machines which you can get but the deal is they can take it away anytime they want.

220
0:15:44.880 --> 0:15:47.880
Like you have two minutes before they take it away.

221
0:15:47.880 --> 0:15:53.880
And so if you have checkpointing, it's now independent of Kubernetes or not,

222
0:15:53.880 --> 0:15:59.880
you have Kubernetes on your spot instances, you can checkpoint your containers right into some storage

223
0:15:59.880 --> 0:16:10.880
and then restore the container on another system and still use spot instances without losing any of your calculation work, whatever it was doing.

224
0:16:10.880 --> 0:16:14.880
So something about Cree use.

225
0:16:14.880 --> 0:16:19.880
So I mentioned everything we are doing here is using Cree use.

226
0:16:19.880 --> 0:16:27.880
The call stack is basically the Q-Blet talks to cryo, cryo talks to run C, run C talks to Cree use, Cree use does the checkpoint

227
0:16:27.880 --> 0:16:31.880
and then each layer adds some metadata to it and so that's how we have it.

228
0:16:31.880 --> 0:16:38.880
But all the main work of checkpointing a process is done by Cree use and some details about Cree use.

229
0:16:38.880 --> 0:16:47.880
So of course the first step is it's checkpointing the container and Cree use is P trace or the secret freezer to stop all processes in the container

230
0:16:47.880 --> 0:16:54.880
and then we look at PROC PIT to collect information about the processes.

231
0:16:54.880 --> 0:17:01.880
That's also one of the reasons why it's called in user space because we use existing user space interfaces.

232
0:17:01.880 --> 0:17:08.880
Cree use over the years added additional interfaces to the kernel but they've never been checkpoint only.

233
0:17:08.880 --> 0:17:14.880
They are usually just adding additional information you can get from a running process.

234
0:17:14.880 --> 0:17:22.880
So once all the information in PROC PIT has been collected by Cree use, another part of Cree use comes which is called the parasite code.

235
0:17:22.880 --> 0:17:30.880
The parasite code is injected into the process and it's now running as a daemon in the address space of the process

236
0:17:30.880 --> 0:17:40.880
and this way Cree use can talk to this parasite code and now get information about the process from inside the address space of the process.

237
0:17:40.880 --> 0:17:48.880
This is especially used for memory pages to get to dump them all really fast to this but a lot of steps are done by the parasite code

238
0:17:48.880 --> 0:17:53.880
which is injected into the target process we want to checkpoint.

239
0:17:53.880 --> 0:17:59.880
The parasite code is removed after usage and the process never knows it was under the control from the parasite code.

240
0:17:59.880 --> 0:18:07.880
I have a diagram which tries to show how this could look like so we have the original process code to be checkpointed.

241
0:18:07.880 --> 0:18:17.880
We take something out of the code, we put the parasite code in the original process, now the parasite code is running,

242
0:18:17.880 --> 0:18:24.880
doing the things it has to do and then we remove it and the program looks the same as it was before.

243
0:18:24.880 --> 0:18:31.880
At this point all checkpointing information has been written to disk and the process is killed or continues running.

244
0:18:31.880 --> 0:18:37.880
This really depends on what you want to do.

245
0:18:37.880 --> 0:18:43.880
We are not aware of any effect on the process if it continues to run after checkpointing.

246
0:18:43.880 --> 0:18:50.880
To migrate the process you have the last step is restoring and what CreeU does is it reads all the checkpoint images,

247
0:18:50.880 --> 0:18:57.880
then it recreates the process tree of the container by doing a clone, clone 3 for each PID, a thread ID,

248
0:18:57.880 --> 0:19:07.880
and then the process tree is recreated as before and then CreeU kind of morphs all the processes in the process tree to the original process

249
0:19:07.880 --> 0:19:12.880
and always a good example is file descriptors.

250
0:19:12.880 --> 0:19:21.880
What CreeU does during checkpointing, it looks at all the file descriptors, looks the ID and the file name, the path

251
0:19:21.880 --> 0:19:29.880
and the file pointer where it is in during restore it's just put again so it opens the same file with the same file ID

252
0:19:29.880 --> 0:19:40.880
and then it points the file pointer to the same location and then the process can continue to run and then the file is the same as it was before.

253
0:19:40.880 --> 0:19:46.880
Then all the memory pages are loaded back into memory and mapped to the right location.

254
0:19:46.880 --> 0:19:51.880
All the security settings like app-ammer, as in XACCOM we do this really late in CreeU

255
0:19:51.880 --> 0:20:03.880
because some of these things make restoring difficult but it's happening late so it's working well.

256
0:20:03.880 --> 0:20:11.880
Then when everything, all the resources are restored, all the memory pages are back then CreeU tells the process to continue to run

257
0:20:11.880 --> 0:20:14.880
and then you have a restored process.

258
0:20:14.880 --> 0:20:18.880
So now to what's next in Kubernetes.

259
0:20:18.880 --> 0:20:26.880
So we can kind of migrate a container like I have shown but we are only at the start of the whole thing.

260
0:20:26.880 --> 0:20:34.880
So the next thing would maybe be kubectl checkpoint so that you don't have to talk directly to the kubelet.

261
0:20:34.880 --> 0:20:43.880
For kubectl checkpoint one of the things which is currently under discussion is if you do a checkpoint all of a sudden you have all the memory pages on disk

262
0:20:43.880 --> 0:20:47.880
all secrets, private keys, random numbers, whatever.

263
0:20:47.880 --> 0:20:57.880
So what we do for the current Kubernetes setup is we, it's only readable by root because if you root then you could easily access the memory of all the processes.

264
0:20:57.880 --> 0:21:05.880
So if the checkpoint archive is also only readable as root it's the same problem you have.

265
0:21:05.880 --> 0:21:11.880
The thing is you can take the checkpoint archive, move it to another machine and then maybe somebody else can read it.

266
0:21:11.880 --> 0:21:15.880
There's still a problem that you can leak information you don't want to leak.

267
0:21:15.880 --> 0:21:20.880
So the thing we are thinking about is to maybe encrypt the image.

268
0:21:20.880 --> 0:21:25.880
We don't know yet if we do it at the OCI image level or at the CreeU level.

269
0:21:25.880 --> 0:21:29.880
We're talking about but it's not yet clear what we want to do.

270
0:21:29.880 --> 0:21:35.880
But at some point the goal is definitely to have something like kubectl checkpoint to make it easy.

271
0:21:35.880 --> 0:21:42.880
Then I've shown only how I can checkpoint a container out of a pod and restore it into another pod.

272
0:21:42.880 --> 0:21:46.880
So the other thing would be to do a complete pod checkpoint restore.

273
0:21:46.880 --> 0:21:56.880
I've done proof of concepts of this so this is not really a technical challenge but you have to figure out how can the interface in Kubernetes look to implement this.

274
0:21:56.880 --> 0:22:06.880
Then maybe if all of this works maybe you can do a kubectl migrate to just tell Kubernetes please migrate this container to some other node, to some other hosts.

275
0:22:06.880 --> 0:22:16.880
And if this works then maybe we also could have schedule integration that if certain resources are getting low, low priority containers can be moved to another place.

276
0:22:16.880 --> 0:22:25.880
Another thing which we are also discussing concerning this is so I've shown you I've migrated a container with my own private OCI image standard.

277
0:22:25.880 --> 0:22:28.880
Which is the thing which I came up with.

278
0:22:28.880 --> 0:22:31.880
It's a tar file with some metadata in it.

279
0:22:31.880 --> 0:22:44.880
But we would like to have it standardized so that other container engines can use that information, the standard and not the thing I came up with which just felt like the right thing to do.

280
0:22:44.880 --> 0:22:47.880
So this is the place where the standardization discussion is going on.

281
0:22:47.880 --> 0:22:55.880
It's not going on really fast or anything like this but yeah I guess that's how creating a standard works.

282
0:22:55.880 --> 0:22:57.880
And with this I'm at the end of my talk.

283
0:22:57.880 --> 0:23:01.880
The summary is basically Cree you can checkpoint and restore containers.

284
0:23:01.880 --> 0:23:03.880
It's integrated in different container engines.

285
0:23:03.880 --> 0:23:05.880
It's used in production.

286
0:23:05.880 --> 0:23:15.880
Use cases are things like reboot into new kernel without losing container states, start multiple copies quickly, migrate running containers, the new spot instances I've been asked about.

287
0:23:15.880 --> 0:23:21.880
This has all been done under the forensic container checkpoint in Kubernetes enhancement proposal.

288
0:23:21.880 --> 0:23:31.880
And currently we trick Kubernetes to restore a container by using create and start without letting Kubernetes know that it's a checkpoint.

289
0:23:31.880 --> 0:23:33.880
And with this I'm at the end.

290
0:23:33.880 --> 0:23:35.880
Thanks for your time and I guess.

291
0:23:35.880 --> 0:23:37.880
I guess the question.

292
0:23:43.880 --> 0:23:45.880
We have time for questions.

293
0:23:47.880 --> 0:23:49.880
I have two questions.

294
0:23:49.880 --> 0:23:51.880
The first one is Howard.

295
0:23:53.880 --> 0:23:57.880
One second please stay quiet until the talk is over.

296
0:23:57.880 --> 0:23:59.880
So two questions.

297
0:23:59.880 --> 0:24:09.880
How are network connections handled when the containers are stored and the other question is does Cree you support some kind of optimization in incremental checkpoints?

298
0:24:09.880 --> 0:24:11.880
Okay. So the first question is network connections.

299
0:24:11.880 --> 0:24:18.880
So Cree you can checkpoint and restore TCP connections if established.

300
0:24:18.880 --> 0:24:28.880
Establish is an interesting thing if they're just open and listening it's not really a difficult thing to do but it can restore established TCP connections.

301
0:24:28.880 --> 0:24:42.880
But I'm not sure it's important in the case of Kubernetes because if you migrate maybe you migrate to some other cluster or somewhere else maybe the network is set up differently.

302
0:24:42.880 --> 0:24:48.880
And you can only restore a TCP connection if the destiny of both IP addresses of the connection are the same.

303
0:24:48.880 --> 0:24:54.880
And it all makes sense for live migration because at some point the TCP timers will time out anyway.

304
0:24:54.880 --> 0:25:05.880
But I think maybe it would make sense if you migrate a part and keep the TCP connections between the container and the part alive then it would make sense.

305
0:25:05.880 --> 0:25:07.880
It's technically possible.

306
0:25:07.880 --> 0:25:15.880
I'm not sure how important it is for external connections but for internal connections it makes sense.

307
0:25:15.880 --> 0:25:26.880
The other question was about optimization. So Cree you itself supports pre-copy and post-copy migration techniques just like VMs.

308
0:25:26.880 --> 0:25:41.880
So you can take a copy of the memory, move it to the destination then just do the diff at the end or you can do page faults on missing pages and missing pages are then used, are then collected during the run time.

309
0:25:41.880 --> 0:25:49.880
It's all just like QMU does, all the technology is the same but it's not integrated into Kubernetes at all.

310
0:25:49.880 --> 0:25:58.880
My question was more like if I do many take points, are the each consecutive ones smaller? Is it reusing data from the previous ones?

311
0:25:58.880 --> 0:26:03.880
Technically it's possible in Portman we can do this.

312
0:26:03.880 --> 0:26:12.880
The only thing is you have to decide when you do the checkpoint, is this an incremental checkpoint or not because the checkpoint looks differently.

313
0:26:12.880 --> 0:26:27.880
So if we know it's an incremental checkpoint only the memory pages are dumped and if it's the final checkpoint we have to dump everything and if it's the first checkpoint you say it's the final checkpoint you cannot do an incremental checkpoint on that one.

314
0:26:27.880 --> 0:26:36.880
Okay, very impressive thing. Except network what else do you know will not be possible to migrate?

315
0:26:36.880 --> 0:26:44.880
I'm impressed by this thing but except network you mentioned is there anything else that cannot be checkpoints?

316
0:26:44.880 --> 0:26:55.880
Okay, so the main problem is every external hardware like InfiniBand, GPUs, FPGAs because they're stayed in the hardware and we cannot get it out.

317
0:26:55.880 --> 0:27:13.880
Two years ago AMD actually provided a plugin for Creus to get the state out of their GPGPUs so Creus should be able to checkpoint restore processes using AMD GPUs.

318
0:27:13.880 --> 0:27:29.880
I never use it myself, I don't have one but they implemented it so I assume it's working and so everything external hardware where you don't have the state in the kernel that's the main limitation.

319
0:27:29.880 --> 0:27:46.880
Hi, thank you for this. You said there's parasite code, does that mean it changes the container hash and if so how do you propose to secure them again and make sure that's your parasite code and that's somebody else's?

320
0:27:46.880 --> 0:27:59.880
I didn't get it 100%. Something about container hashes and making sure it's... I think the worry is that if you inject parasite code that the container hashes change somehow.

321
0:27:59.880 --> 0:28:15.880
It doesn't? Okay, if it doesn't change the container hash... The parasite code is removed afterwards so it's... Okay, thank you.

322
0:28:15.880 --> 0:28:25.880
Thank you, excellent talk. How big are the images that... The size of the process memory used or the total process allocated to the system?

323
0:28:25.880 --> 0:28:34.880
I don't hear anything in the front. I'm sorry. How big are the images that you restore? Is it the size of the memory used by each process?

324
0:28:34.880 --> 0:28:49.880
Exactly, so the size of the checkpoint is basically the size of all memory pages which we dump. All the additional information which Kree is dumping is compared to it is really small and then it depends if you do something like an

325
0:28:49.880 --> 0:29:05.880
importment or docker, if you do a diff you usually see which files changed in the container to your base image and this comes on top of it. All files which change, we include all the files completely into the checkpoint whether we don't include diffs.

326
0:29:05.880 --> 0:29:20.880
While I'm bringing the mic over there, has anything changed in terms of how complex process treats you can restore because we're thinking about... We discussed using it for system deservices for example, Kree.

327
0:29:20.880 --> 0:29:32.880
One of your limitations that you usually had is as soon as you ran something fairly complex inside of the container and you tried to checkpoint restore it with Kree, it would just fail because it would use kernel features that it wouldn't support.

328
0:29:32.880 --> 0:29:53.880
So the biggest problem we're currently seeing is containers using systemD because systemD is very advanced, it uses things nobody else uses so this is a point where Kree might fail because it seems like at least from Kree's point or from what I've seen nobody uses as many new kernel features as systemD does

329
0:29:53.880 --> 0:30:15.880
and so it sometimes fails if systemD is running there. But usually I don't see often people in the OCI container world using systemD. I guess it would be a good idea to have a real in-it system even in your container but it's not something people do so it's not something we get complaints at all about.

330
0:30:15.880 --> 0:30:39.880
Yeah, I also thought this talk was very interesting. So I saw that you had these... talked about having these cube control migrate and cube control checkpoints because I'm thinking that mostly what you want to migrate might be like a stateful application for example, like a stateful...

331
0:30:39.880 --> 0:30:54.880
What is it called? Stateful something. So I was thinking maybe you could have something in the stateful deploy whatever it's called instead of drain. Say you want to drain a node.

332
0:30:54.880 --> 0:31:13.880
One of the first implementations I did was using drain. I added an option to Qtl drain which is called checkpoints. So all containers were checkpointed during drain and then they were restored during boot up.

333
0:31:13.880 --> 0:31:25.880
Okay, sorry for being the buskill but we're out of time. Thank you for the talk, that was really interesting and thank you everyone for attending and being so quiet during your questions.


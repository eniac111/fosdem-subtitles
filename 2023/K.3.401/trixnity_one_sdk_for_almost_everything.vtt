WEBVTT

00:00.000 --> 00:13.760
So welcome to my talk about Trixity, one matrix SDK for almost everything.

00:13.760 --> 00:20.700
I added written in Kotlin a few days ago, so maybe there are some Kotlin fanboys here.

00:20.700 --> 00:24.400
Yeah, let me first introduce myself.

00:24.400 --> 00:30.240
I am Benedict and my friends often see me as a kid when it comes to data prediction

00:30.240 --> 00:31.720
and data security.

00:31.720 --> 00:39.480
But I convinced them to come to Matrix anyhow, so I have 20 users, family and friends on

00:39.480 --> 00:42.480
my own Matrix home server.

00:42.480 --> 00:48.960
My first contact with Matrix was four to five years ago and I gained a lot of experience

00:48.960 --> 00:51.800
with it since then.

00:51.800 --> 00:59.960
And so much I founded Connect2X and this is just a company that is developing a Timmy

00:59.960 --> 01:06.340
and that is a TI messenger for the medical health sector in Germany.

01:06.340 --> 01:08.360
Now let's start with Trixity.

01:08.360 --> 01:19.080
Trixity is a Matrix SDK and it is for developing clients, bots, app servers and servers.

01:19.080 --> 01:27.280
It is multi-platform capable, so everyone thinks Kotlin is JVM only, it is not.

01:27.280 --> 01:30.880
You can compile it to JS and you can compile it to native.

01:30.880 --> 01:33.580
That's important for iOS.

01:33.580 --> 01:39.560
So we all have that target with Trixity.

01:39.560 --> 01:46.960
And it's also developed test-driven, so we have a high test coverage and it is licensed

01:46.960 --> 01:51.720
under the Apache 2 license.

01:51.720 --> 01:55.400
You may wonder why another SDK?

01:55.400 --> 02:03.720
So back in January 2020 there were only a few multi-platform SDKs to choose from.

02:03.720 --> 02:12.080
If I remember correctly there was the Matrix Rust SDK but it was in a very early stage.

02:12.080 --> 02:21.560
And there was the Dart SDK but very likely this forces you to use Flutter in the UI,

02:21.560 --> 02:28.160
so there isn't a real free choice which UI framework you want to use, especially when

02:28.160 --> 02:35.880
you want to use native UI technologies, for example on Android Compose or on iOS Swift.

02:35.880 --> 02:43.760
Additionally, most SDKs didn't have a very strict typing of events and the rest endpoints.

02:43.760 --> 02:48.080
And also the extensibility was a bit limited.

02:48.080 --> 02:54.520
Even if the next point is not that important, SDKs were really bound to its purpose.

02:54.520 --> 03:00.280
So you've had an SDK for a client, for a server, for a bot and so on.

03:00.280 --> 03:10.760
So you have to learn a new SDK for each purpose of application for Matrix.

03:10.760 --> 03:12.400
Why I chose Kotlin?

03:12.400 --> 03:19.320
Chose Kotlin because it is a statically typed language which compiles, as I mentioned, to

03:19.320 --> 03:21.600
JVM, JS and native.

03:21.600 --> 03:24.440
And you don't need bindings.

03:24.440 --> 03:32.160
Like in Rust, when you use JS you get JS, you don't need to make bindings over Wasm

03:32.160 --> 03:33.520
or something.

03:33.520 --> 03:39.840
And on native you can just call it from your Swift or Objective-C code in Xcode and have

03:39.840 --> 03:42.840
access to Trixity.

03:42.840 --> 03:51.320
Moreover, besides shared common code, it is possible to write platform specific code.

03:51.320 --> 03:56.080
You just define a common interface and depending on the platform, the actual implementation

03:56.080 --> 03:58.040
can be different.

03:58.040 --> 04:03.960
This way you have access to platform specific APIs and libraries which can be very helpful

04:03.960 --> 04:08.880
when implementing encryption like AES for attachments.

04:08.880 --> 04:13.880
So you have on each platform can you use the native encryption algorithms the platform

04:13.880 --> 04:16.680
gives you already.

04:16.680 --> 04:23.360
And last but not least, you can define your own domain specific language.

04:23.360 --> 04:26.640
You will see later what I did with that.

04:26.640 --> 04:29.920
So let's start with the core of Trixity.

04:29.920 --> 04:38.440
The core contains all basic data structures of the spec and its serialization algorithms.

04:38.440 --> 04:43.920
This includes events, identifiers like user IDs, event IDs and so on.

04:43.920 --> 04:51.720
And other things like cross signing keys, device keys.

04:51.720 --> 04:58.720
One goal of developing Trixity was the ability to add custom events which are strictly typed.

04:58.720 --> 05:05.160
So this is achieved by mapping event types to just a serializer.

05:05.160 --> 05:13.880
In this example we add a new type of M.PumPumCAD with this of the Kotlin type CAD event content

05:13.880 --> 05:19.560
so you have access to all fields of this CAD event content and don't have to mess around

05:19.560 --> 05:23.680
with the JSON.

05:23.680 --> 05:28.200
The next layer of Trixity is the API layer.

05:28.200 --> 05:34.240
Each API has its model which defines all endpoints of the API.

05:34.240 --> 05:42.040
The actual client and server implementation just use these endpoints and so as a consequence

05:42.040 --> 05:44.640
there is no need to define things twice.

05:44.640 --> 05:46.880
They are using the same Kotlin object.

05:46.880 --> 05:52.000
So a Kotlin object represents an endpoint on the matrix side.

05:52.000 --> 05:56.160
A Kotlin class, not Kotlin object, sorry.

05:56.160 --> 06:00.940
The best way to show this to you is with an example.

06:00.940 --> 06:04.240
This example is the endpoint leave room.

06:04.240 --> 06:08.960
You just implement matrix endpoint, give him the types.

06:08.960 --> 06:17.200
And in this case unit is the response so we don't get a JSON as response, just a headed

06:17.200 --> 06:20.680
HTTP OK or an empty JSON.

06:20.680 --> 06:28.200
And you can also define a request, a URL, HTTP method and all that.

06:28.200 --> 06:40.920
And you can use this to call, to use a client, matrix client on the client side to call these

06:40.920 --> 06:41.920
endpoints.

06:41.920 --> 06:46.840
So you create a leave room object, a request and you get the response.

06:46.840 --> 06:48.840
That's all on the client side.

06:48.840 --> 06:52.540
And the same thing on the server side.

06:52.540 --> 06:59.400
So you define an endpoint, give it the type you expect as a request and in the context

06:59.400 --> 07:07.000
object you have access to the request and can answer with the response.

07:07.000 --> 07:11.920
To make it a bit more easier for developers there is a bit of abstraction on top of that

07:11.920 --> 07:15.800
so you can also just call leave room.

07:15.800 --> 07:20.600
So you don't have to know which endpoint are there existing.

07:20.600 --> 07:26.720
You just type point on your IDE and see OK there's a leave room, I can leave a room.

07:26.720 --> 07:32.120
And the same on the server side so you just need to implement an interface and see all

07:32.120 --> 07:40.880
your endpoints you have to implement to be a fully featured matrix server API.

07:40.880 --> 07:46.200
Regardless of the API there is Trixity Arm and Trixity Crypto.

07:46.200 --> 07:51.800
Trixity Arm is just a wrapper for Lib Arm as mentioned a platform independent implementation

07:51.800 --> 07:58.920
doesn't need to worry about the actual platform specific implementations.

07:58.920 --> 08:08.760
So you have when you use Trixity Arm you don't need to know how Lib Arm is accessed.

08:08.760 --> 08:17.360
So on the JVM I use JNA, on JS this is done via Wasm and on native just C interrupt from

08:17.360 --> 08:20.880
Kotlin.

08:20.880 --> 08:26.920
Lib Arm is also packaged into Trixity Arm so as a developer you doesn't need to ship

08:26.920 --> 08:36.120
the build C library and it is just loaded automatically so you just you don't need to

08:36.120 --> 08:42.520
init your encryption like in other libraries it's just loaded.

08:42.520 --> 08:50.440
My plan is to migrate that to Wodosemic but currently UniFFI we heard of that in another

08:50.440 --> 08:54.860
talk does not support Wasm targets.

08:54.860 --> 09:03.440
So currently I can Wodosemic just only use in Kotlin JVM and native but I also want to

09:03.440 --> 09:09.320
use JavaScript so this project is currently on ice.

09:09.320 --> 09:14.440
Trixity Crypto currently implements the key management and allows to decrypt and encrypt

09:14.440 --> 09:21.880
events and in the future it will be more so you can reuse the completely complete crypto

09:21.880 --> 09:28.760
stuff for example in app services.

09:28.760 --> 09:36.760
Trixity Client allows you to, oh sorry, the most abstract layer are Trixity Client and

09:36.760 --> 09:40.120
Trixity App Service.

09:40.120 --> 09:45.120
While Trixity App Service is still very basic and does not have a persistent layer, Trixity

09:45.120 --> 09:50.120
Client allows you to choose which database and which media store implementation you want

09:50.120 --> 09:51.960
to use.

09:51.960 --> 09:57.720
And on top of that there is something that isn't released yet, we are not sure how to

09:57.720 --> 10:03.960
release because we have to make money with our company.

10:03.960 --> 10:11.600
It is Trixity Messenger, this is just the view model representation of a messenger so

10:11.600 --> 10:20.160
you only have to implement thin UI layer where when the user clicks a button the UI send

10:20.160 --> 10:26.520
this to the view model and the view model says okay send a message or go to this room

10:26.520 --> 10:29.080
or any other stuff.

10:29.080 --> 10:40.640
And with this approach we have implemented an iOS client in a few weeks with one person.

10:40.640 --> 10:45.960
So Trixity Client allows you to implement a nearly fully featured matrix client or bot.

10:45.960 --> 10:55.860
So if you were at the matrix Rust SDK talk you can just use their representation and

10:55.860 --> 10:58.680
instead of Rust you write colon.

10:58.680 --> 11:05.560
So everything that matrix Rust SDK does also does Trixity.

11:05.560 --> 11:13.000
Some features like sliding zoom aren't there because we want to follow the stable matrix

11:13.000 --> 11:19.200
specs so we doesn't implement any MSCs.

11:19.200 --> 11:25.840
So we have all the E2E features, the exchangeability data stores and media stores, we have a lot

11:25.840 --> 11:31.800
of reactive cache on top of that notification, thumbnail generation, all that stuff you need

11:31.800 --> 11:36.100
to implement a client.

11:36.100 --> 11:45.840
There are already some media store wrappers that we implemented for all targets expect

11:45.840 --> 11:47.680
browsers.

11:47.680 --> 11:54.920
We just use the file system and on browsers we just use index.db.

11:54.920 --> 11:59.440
Next I want to talk about how I accidentally created a cache.

11:59.440 --> 12:06.720
So on the left side you see the relation between the UI, Trixity and the storage layer.

12:06.720 --> 12:11.480
And because reactive UIs are really common I want Trixity to give the UI access to the

12:11.480 --> 12:13.840
data in a reactive way.

12:13.840 --> 12:20.560
So if anything changes the UI should immediately know about this.

12:20.560 --> 12:29.560
But the question is how, on the one hand there are a few databases which support listeners

12:29.560 --> 12:37.400
to react to changes to the database but on the other hand this would limit support for

12:37.400 --> 12:42.920
multiple supported databases because finding a common interface for listeners would be

12:42.920 --> 12:44.080
hard.

12:44.080 --> 12:50.960
So I started implementing an intermediate layer based on Kotlin flows.

12:50.960 --> 12:56.560
A flow in Kotlin is a reactive data structure so you have a producer on the one side and

12:56.560 --> 12:59.600
a consumer on the other side.

12:59.600 --> 13:08.760
So if the producer changes anything the consumers immediately know about that.

13:08.760 --> 13:15.360
And what does this intermediate layer, it talks to a very thin database layer which

13:15.360 --> 13:21.440
only knows about save, read and delete data.

13:21.440 --> 13:29.360
And if someone wants data from this layer it just reads it from the database or if someone

13:29.360 --> 13:35.960
changes something in this layer it just writes it to the database.

13:35.960 --> 13:41.640
And the values are kept in this layer as long as they are subscribed from anyone.

13:41.640 --> 13:48.560
So this means that if anyone else subscribes to a value he will immediately get the current

13:48.560 --> 13:53.640
value because there is no additional database call needed because it is persisted in the

13:53.640 --> 13:56.000
intermediate layer.

13:56.000 --> 14:01.440
This goes so far that even if there are no subscribers anymore I just keep the value

14:01.440 --> 14:03.680
a bit longer in this layer.

14:03.680 --> 14:11.400
So if someone asks for a value for example 10 seconds later and the value is distorted

14:11.400 --> 14:20.960
he gets the value and there is no database call needed.

14:20.960 --> 14:28.000
And you can now guess what I implemented, it's just cache.

14:28.000 --> 14:32.760
So as you see with this cache everything in Trickity is reactive.

14:32.760 --> 14:39.240
These are just a few examples so you can just get all users or check if a user can invite

14:39.240 --> 14:40.400
another one.

14:40.400 --> 14:50.920
You immediately get the notification if anything has changed.

14:50.920 --> 14:57.760
As mentioned the database layer is really thin so we implemented many database layers.

14:57.760 --> 15:04.080
So SQL based one via Xposed for JVM based targets.

15:04.080 --> 15:11.480
We implemented one with Realm that can be also used on native targets like iOS and for

15:11.480 --> 15:16.760
browsers we have IndexedDB.

15:16.760 --> 15:24.120
So most of the data changes when a Zinc is processed, most of the data changes when a

15:24.120 --> 15:33.800
Zinc is processed so it is way more performant to make a large transaction around the Zinc.

15:33.800 --> 15:40.600
So you don't have a transaction every time the cache writes something into the database.

15:40.600 --> 15:45.960
Trickity just spends a large transaction around Zinc so you have thousands of writes in one

15:45.960 --> 15:48.520
transaction.

15:48.520 --> 15:56.600
So everything is fine, no, then there was Realm and Realm is just a really fast database

15:56.600 --> 16:02.640
but Realm only allows one write transaction at the time.

16:02.640 --> 16:08.920
So if another one wants to write to the database he needs to wait until the first transaction

16:08.920 --> 16:11.160
ended.

16:11.160 --> 16:20.200
And the problem is that while the Zinc is running it may be needed that we have to wait

16:20.200 --> 16:25.160
for outdated keys to be updated to decrypt on stuff.

16:25.160 --> 16:31.760
So if the outdated keys part of Trickity want to write something in the database he needs

16:31.760 --> 16:36.480
to wait until the Zinc is ended but the Zinc waits for the keys to be updated so we have

16:36.480 --> 16:40.980
a deadlock there.

16:40.980 --> 16:46.400
This is one of the reasons why I introduced ASIMC transactions.

16:46.400 --> 16:52.600
The other reason was that most of the time the Zinc processing as I find out with some

16:52.600 --> 16:57.120
benchmark was wasted due to writing to the database.

16:57.120 --> 17:04.340
So processing ASIMC takes a long time because there are so many I.O. operations that the

17:04.340 --> 17:10.280
user have to wait until all operations are done.

17:10.280 --> 17:19.240
So what does ASIMC transaction Trickity mean that all changes to the database are collected

17:19.240 --> 17:21.800
and processed in the background.

17:21.800 --> 17:29.800
So database operations are decoupled from the cache layer and they are just written

17:29.800 --> 17:31.160
in the background.

17:31.160 --> 17:37.020
If everything fails it is raw baked but that's irrelevant in the normal use case.

17:37.020 --> 17:45.080
So we can process even more Zincs at the same time as if we would wait that the transaction

17:45.080 --> 17:47.960
has finished.

17:47.960 --> 17:50.960
And this gave Trickity a huge performance boost.

17:50.960 --> 17:58.760
Actually I released it last week.

17:58.760 --> 18:04.620
I wrote an integration test which just fails if it is not 50% faster.

18:04.620 --> 18:11.080
So it is always green until now.

18:11.080 --> 18:15.700
The next thing I did completely different in Trickity are timelines.

18:15.700 --> 18:22.020
So normally Zims are sent as fragment from the server to the client.

18:22.020 --> 18:29.520
So one fragment contains a few timeline events and if there is a gap you get a token so you

18:29.520 --> 18:34.240
know as a client okay there is a gap I need to fetch to fill that gap and so on.

18:34.240 --> 18:41.120
And these fragments normally are saved as is to the database in clients.

18:41.120 --> 18:45.760
In Trickity I use another approach.

18:45.760 --> 18:51.560
There I have each timeline event pointing to each other and if there is a gap the timeline

18:51.560 --> 18:56.240
event knows about this.

18:56.240 --> 19:05.160
So this allows Trickity to again benefit from cotton flows.

19:05.160 --> 19:11.840
So we have a producer that is the room starting from a timeline event and a subscriber who

19:11.840 --> 19:15.320
wants the next timeline event to fill its timeline.

19:15.320 --> 19:24.060
So this allows us to go really fast through the timeline and build the timeline under

19:24.060 --> 19:31.840
the top and it makes it easier to fill the gaps because we don't have another layer,

19:31.840 --> 19:37.480
fragments we just have timeline events.

19:37.480 --> 19:42.440
And this way it is also possible to very easy connect upgraded rooms.

19:42.440 --> 19:49.340
So that one I released yesterday I think or two days ago.

19:49.340 --> 19:55.400
So the timeline event just shows through another timeline in another room.

19:55.400 --> 20:01.640
So timelines with room upgrades are invisible for users of Trickity.

20:01.640 --> 20:07.120
You just get an infinite timeline until you reach the oldest room and the first timeline

20:07.120 --> 20:10.880
event.

20:10.880 --> 20:14.160
And finally a small example.

20:14.160 --> 20:20.360
So if you want to write a bot that's a good start to use Trickity just to get a feeling

20:20.360 --> 20:22.880
about it how it works.

20:22.880 --> 20:29.420
You can just call get timeline events from now on and what this does is it subscribe

20:29.420 --> 20:35.720
to the flow that I mentioned which builds the timeline and waits until the timeline

20:35.720 --> 20:39.240
event is decrypted because the timeline itself also is a flow.

20:39.240 --> 20:47.400
So if everything changes it is redacted or there's a reaction or a replacement the timeline

20:47.400 --> 20:48.960
event flow changes.

20:48.960 --> 20:56.240
So this get timeline events from now on just wraps it down so you get a timeline event

20:56.240 --> 20:58.320
that is decrypted.

20:58.320 --> 21:04.540
And you can see we can just check what type it has and when we have checked the type we

21:04.540 --> 21:07.080
have access to body.

21:07.080 --> 21:10.840
And then we have send message.

21:10.840 --> 21:15.320
So when you call send message you don't have to worry about if the room is encrypted or

21:15.320 --> 21:16.320
not.

21:16.320 --> 21:22.520
You can just use the DSL that I created to write text messages in image messages and

21:22.520 --> 21:24.140
so on and so on.

21:24.140 --> 21:26.700
And you can also form relations with that.

21:26.700 --> 21:34.560
So you can say like here yeah this is a reply to the timeline event I just got.

21:34.560 --> 21:40.120
And this has extensible events in mind so if in the future there are other content blogs

21:40.120 --> 21:50.000
that are added we can just extend the DSL and you can very very intuitive write your

21:50.000 --> 21:57.520
content with Trixity into an event and into an extensible event.

21:57.520 --> 22:02.960
So here are some projects that are using Trixity and that I know about.

22:02.960 --> 22:07.440
There is Spotify bot, a manza bot.

22:07.440 --> 22:13.480
Someone has created some extensions to better use it for bots and so on.

22:13.480 --> 22:16.480
And there is Trixity examples.

22:16.480 --> 22:17.480
That is from me.

22:17.480 --> 22:23.200
This is just a ping bot part of it you saw here.

22:23.200 --> 22:24.920
It is e2e enabled.

22:24.920 --> 22:32.680
You can just run it in your browser on your Linux machine or on your iOS client or via

22:32.680 --> 22:35.480
the JVM on Android.

22:35.480 --> 22:39.960
And there is also Timmy Messenger that is our messenger from our company but it is not

22:39.960 --> 22:40.960
open source yet.

22:40.960 --> 22:45.920
We plan to but we don't know how because licensing.

22:45.920 --> 22:48.480
Here.

22:48.480 --> 22:54.040
Just try it out and come to me if you have questions.

22:54.040 --> 22:55.480
I am a bit around.

22:55.480 --> 22:57.760
This is the matrix room.

22:57.760 --> 22:59.960
This is my matrix ID.

22:59.960 --> 23:07.160
And if we have time, I just can show you a small demo, I think.

23:07.160 --> 23:11.920
I made a small performance comparison.

23:11.920 --> 23:19.000
It is not representative because it just runs once on my machine and there was no warm up

23:19.000 --> 23:23.480
or multiple runs.

23:23.480 --> 23:29.360
On the left side you see our Timmy client but basically it is just using Trixity.

23:29.360 --> 23:33.920
On the right side there is Element and in the middle is Fluffy Jet.

23:33.920 --> 23:38.000
And now you can give me your bets who is the fastest.

23:38.000 --> 23:41.960
Let's see.

23:41.960 --> 23:46.040
When the red zoom comes, the response from the server reached the client.

23:46.040 --> 23:51.360
So I just looked into the synapse logs when the response was sent.

23:51.360 --> 23:57.120
So we just wait a few seconds and then we see who is first.

23:57.120 --> 24:00.400
And you can look into opening rooms because we have this caching.

24:00.400 --> 24:06.040
It is very fast in our client but I must say Fluffy Jet is also very fast regarding opening

24:06.040 --> 24:07.200
rooms.

24:07.200 --> 24:17.640
So oh, Trixity was fastest and we can open rooms and you see open rooms is also a lot

24:17.640 --> 24:21.120
faster than on Element.

24:21.120 --> 24:29.200
And there was Fluffy Jet and Fluffy Jet also is very fast.

24:29.200 --> 24:36.840
I also have a desktop demo but there, Naiko is the fastest.

24:36.840 --> 24:39.840
This is Naiko, this is Timmy, Element on the web.

24:39.840 --> 24:47.360
It's a bit hard this comparison because Element runs in the web and does not have the mighty

24:47.360 --> 24:53.320
threading other clients have so Naiko just three seconds.

24:53.320 --> 25:01.080
I can just chat around and the next is Timmy on the top left side.

25:01.080 --> 25:06.440
Also very fast opening rooms and switching rooms because it is cached all the time and

25:06.440 --> 25:07.440
events.

25:07.440 --> 25:12.960
Then there was Element and I think also Fluffy Jet.

25:12.960 --> 25:14.800
Yeah, Fluffy Jet also.

25:14.800 --> 25:16.480
Yeah, okay.

25:16.480 --> 25:17.480
That was my talk.

25:17.480 --> 25:18.480
Thank you.

25:18.480 --> 25:19.480
Questions?

25:19.480 --> 25:20.480
Yeah.

25:20.480 --> 25:36.680
How do you prevent data loss with your ASIC transactions?

25:36.680 --> 25:39.840
The transactions are run each after.

25:39.840 --> 25:46.440
So if one transaction fails, the other transactions are just run and you can, the next thing starts

25:46.440 --> 25:47.440
with the old token.

25:47.440 --> 25:53.440
What happens if say your battery runs out whilst a bunch of transactions are queued?

25:53.440 --> 25:55.040
Sorry, sorry, I didn't answer.

25:55.040 --> 25:59.040
If your battery runs out when all those transactions are queued so they haven't been written to

25:59.040 --> 26:00.040
the database?

26:00.040 --> 26:01.920
Yeah, then they are gone.

26:01.920 --> 26:05.840
Your client have to do the work again but mostly this doesn't happen.

26:05.840 --> 26:12.320
If you close your client, all transactions are written that are just opened but it depends

26:12.320 --> 26:18.320
on your platform if it is killed hardly or he at Trixity have a bit time to write the

26:18.320 --> 26:20.280
transactions back to the database.

26:20.280 --> 26:22.920
But it's still very fast to write.

26:22.920 --> 26:29.880
So it's just a bit snappier on mobile devices which are not that fast.

26:29.880 --> 26:37.620
Like my smartphone from 2016, Element, I can't run Element on that because it's too slow.

26:37.620 --> 26:42.800
Then sending messages, 10 seconds later the message is, oh, okay, yes, yes, now we send

26:42.800 --> 26:43.800
the message.

26:43.800 --> 26:50.000
I don't have this problem because Zooms are just faster than the slow IO writing to the

26:50.000 --> 26:57.440
database we have on old smartphones, for example.

26:57.440 --> 26:58.440
Another question.

26:58.440 --> 27:09.600
I go for a domain specific language over just changing together methods to say add a new

27:09.600 --> 27:10.600
continent block.

27:10.600 --> 27:11.600
Is there any benefits to that, DSL?

27:11.600 --> 27:12.600
It's nice to write.

27:12.600 --> 27:13.600
I like DSLs.

27:13.600 --> 27:23.280
In Kotlin we have them all over the language and it feels very intuitive because your IDE

27:23.280 --> 27:31.760
gives you suggestions what methods there are and it's a lot easier to read, I think.

27:31.760 --> 27:35.560
Do the character.

27:35.560 --> 27:36.560
Yeah.

27:36.560 --> 27:40.560
There's Rust and there's Kotlin.

27:40.560 --> 27:52.560
Is there any way to minimize the amount of things that the user has to learn to use all

27:52.560 --> 27:53.560
the time?

27:53.560 --> 27:54.560
I didn't understand the question acoustically.

27:54.560 --> 27:55.560
There's a lot of language learning to make any progress.

27:55.560 --> 28:12.080
Is there any effort to unify this or towards Rust maybe?

28:12.080 --> 28:16.360
To be honest, I don't like Rust.

28:16.360 --> 28:24.240
I just like a higher level of implementing stuff so I didn't spoke with the matrix Rust

28:24.240 --> 28:25.240
team.

28:25.240 --> 28:26.240
I think we are done with the time.

28:26.240 --> 28:27.240
The last question from the audience would be that we can open the windows and the doors

28:27.240 --> 28:28.240
a bit to get more air in.

28:28.240 --> 28:29.240
Thank you very much.

28:29.240 --> 28:46.400
Thank you very much.

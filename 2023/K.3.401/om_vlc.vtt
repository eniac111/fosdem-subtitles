WEBVTT

00:00.000 --> 00:14.000
about FFmpeg advocacy because this guy does everything. Please welcome Jean-Réthis Tham.

00:14.000 --> 00:23.120
Yeah, so I'm going to do two small presentation because those are short talks and I didn't

00:23.120 --> 00:28.240
want to take too much time today. So we're going to speak about FFmpeg and mostly FFmpeg

00:28.240 --> 00:36.160
6.0. But then I will speak about a new project called vlc.js, but it's a lie, it's not really

00:36.160 --> 00:47.040
vlc.js. So who am I? My name is Jean-Réthis. Some of you know me, some don't, so I'm president

00:47.040 --> 00:55.760
of Videland. I've been working on VLC for... Okay, I'm close to 40, so 17 years. I've been involved

00:55.760 --> 01:02.400
in index264, which is a Videland project, David, which is an AV1 decoder, and lately a bit on FFmpeg,

01:02.400 --> 01:09.280
mostly on the community management, which is a funny topic. I shouldn't be the one presenting

01:09.280 --> 01:13.360
this presentation, but the people who should present this presentation are maybe in this room

01:13.360 --> 01:19.520
and don't want to present, so that's why I'm presenting. Jokes aside, if you look at the

01:19.520 --> 01:24.320
first damn open media room, there is almost no FFmpeg talk, which is completely insane.

01:24.320 --> 01:30.000
This year is better, thanks to Kiran and Toorimi, but it's ridiculous. If you look also in the

01:30.000 --> 01:34.800
archives, I look in the archives, there is almost no FFmpeg, general FFmpeg talk. Everything in the

01:34.800 --> 01:38.560
community media, in the open source world, and outside of the open source world, is actually based

01:38.560 --> 01:44.080
on FFmpeg. And when I mean everything, I mean everything you see online, and most of those,

01:44.080 --> 01:48.880
like you go to those big trade shows, and they are all amazing cloud encoding, so on, and it's just

01:48.880 --> 01:56.000
like a very nice one to FFmpeg. And of course, when I say FFmpeg, please understand, this is FFmpeg

01:56.000 --> 02:02.640
plus Linux 264 plus Linux 6.5 plus Linux VPX plus David plus all the other libraries that I forget.

02:03.840 --> 02:13.760
So, and like even on our Vueci or Mademoiselle, or like you know those French fashion things that

02:13.760 --> 02:18.320
we have, which is called Hacker News, even on Hacker News, like when there is a release of FFmpeg,

02:18.320 --> 02:22.560
it's not even the top Hacker News, right? So that means that we are doing something wrong,

02:22.560 --> 02:29.920
which means we don't communicate enough on FFmpeg, so here I am. So the community is healthy. We've

02:29.920 --> 02:36.320
had some fights in the past, to be honest. The folks are long gone, and most of the people

02:36.320 --> 02:41.760
working now on FFmpeg are also parts, lots of new people who are not there at the fork time,

02:41.760 --> 02:45.440
but also people from both folks are still working on FFmpeg. That's pretty cool,

02:45.440 --> 02:50.160
especially since we've not seen that many open source community being able to work together

02:50.160 --> 02:58.080
after those type of events. So here I'm just going to speak just quickly about FFmpeg 5.0,

02:58.080 --> 03:05.840
which was around almost exactly one year ago. It was very important because we try to match the

03:05.840 --> 03:10.320
new release schedules that I'm going to talk about, but it's also like, was probably the biggest

03:10.320 --> 03:18.160
API breakage ever on FFmpeg. I think just a train of commits removing deprecation samples was around

03:18.160 --> 03:26.560
130 commits, and the diff was huge. So some APIs were deprecated in 2013 and were removed in 5.0.

03:27.360 --> 03:32.560
So this is probably going to impact a lot of you, because a lot of distributions are still on 4.4,

03:32.560 --> 03:39.520
but 5.0 is a big change of APIs, and mostly there is one big thing, is that it's one API

03:39.520 --> 03:47.840
to decode both audio and video, and not AV codec video decode 4, 5, 6, and so on. All those APIs.

03:48.640 --> 03:53.520
It's not doing subtitles yet, but I was promised that someone will do it this year. Where is Anton?

03:54.960 --> 04:06.320
Yeah. We did a lot of new things. AV frame base appearing in SW scale, new bit streaming filters,

04:06.320 --> 04:12.880
a lot of things to clean. AV format and AV codec is decenting those two libraries,

04:13.600 --> 04:18.480
working on the decoder contacts, etc. You should look at the release notes on that.

04:20.080 --> 04:25.840
There are some people who are doing amazing work, mostly Andreas and James, who are basically

04:25.840 --> 04:30.320
removing all the craft on FFmpeg. So one day the whole FFmpeg will be thread safe.

04:31.440 --> 04:36.160
Right? We believe that, right? And AV codec, any of the formats will be completely split,

04:36.160 --> 04:41.200
yeah, okay. Maybe not, but there is a lot of work to be done, and that's very important for security

04:41.200 --> 04:48.080
reasons. Michael, who is still probably the oldest FFmpeg contributor, is still fuzzing FFmpeg every

04:48.080 --> 04:55.280
day. Slice thread setting is W scale, IMF de-maxing, which is good because so many professionals are

04:55.280 --> 05:01.280
using IMA format, and they usually do weird things on FFmpeg, or above FFmpeg, and then we have to

05:01.280 --> 05:06.560
deal with their shit because it's wrong glimax, so now we're actually getting that directly into FFmpeg.

05:07.120 --> 05:12.880
Dolby Vision, I'm not sure exactly which part of Dolby Vision, because there is, as many of you know,

05:12.880 --> 05:17.840
five or six profiles, but I think at least profile five were there, and of course a lot of things,

05:17.840 --> 05:25.200
and one of the cool things was the integration of LiPlacibo, which used to be the MPV video filtering

05:25.200 --> 05:31.600
framework, mostly GPU accelerated, that is now into FFmpeg, and you can use that without GPU

05:32.160 --> 05:40.480
easily with emulation. So the old APIs, like you know the old APIs, and now we really, what's

05:40.480 --> 05:46.160
interesting is that it's more async-based, and so you don't need to do those horrible weights.

05:47.920 --> 05:54.560
Five dot one, so that was like six months ago, in July, this one is important for you because

05:54.560 --> 06:00.160
it's an LTS, five dot zero is not LTS, so we try, we're going to try to make that, to fix at least

06:00.160 --> 06:06.240
the security bugs for a couple of years, and it, like most of the things that were added were a

06:06.240 --> 06:11.440
lot of features, but one of the major API that was merged was the change of the audio channel

06:12.080 --> 06:16.720
layout API, which was supposed to come in five dot zero, but we missed, and then we said well

06:16.720 --> 06:23.440
it's going to take too much time, so that we did that with five dot one. A lot of optimization on

06:23.440 --> 06:28.480
ARM in that release, mostly on HEVC decoding, a lot of things on AV1 decoding in hardware,

06:30.000 --> 06:35.280
because there is still 25 different APIs to do hardware acceleration, but soon there will be

06:35.280 --> 06:39.040
a new one that is going to replace all of them, which is Vulkan video decoding, and we'll have

06:39.040 --> 06:49.280
14 standards. JPEG XL decoding, and a lot of things on SVTV1. So yeah, the channel layout

06:49.280 --> 06:55.680
API was developed in 2013, I think by Vittorio, I'm not sure he's around, yeah, Vittorio, that was done

06:55.680 --> 07:01.200
during the fork, and it was quite complex, but this is good because it's ready to do what we

07:01.200 --> 07:06.800
called, well, what marketing calls NGA, which is next generation audio, what marketing also

07:06.800 --> 07:14.240
calls Dolby Atmos, right, those kind of object-based audio, and like the new channel layout API allows

07:14.240 --> 07:19.520
to be a lot more flexible, do custom layouts and weird things without us having to do everything

07:19.520 --> 07:24.720
directly inside FFmpeg. So, and I'm still not starting about my main topic, which is FFmpeg 6.0,

07:25.680 --> 07:28.480
I hope when I was submitting the code that this would have been tagged,

07:30.160 --> 07:36.800
and that's important, I think this is even bigger in terms of a number of commits, and mostly in

07:36.800 --> 07:42.720
terms of contributors, because in the last six months there have been around 191 contributors,

07:42.720 --> 07:49.840
that's huge, and that's a lot bigger than the previous release. What is important? There is not

07:49.840 --> 07:57.760
that many important API breakage and changes, but there is new APIs, and also it's a major bump,

07:57.760 --> 08:02.720
so we are going to remove more things that were deprecated in the last few years, and there was

08:02.720 --> 08:08.400
like two new APIs, so that we didn't remove them in 5.0, but we are going to remove that soon.

08:08.400 --> 08:20.080
Soon. One of the major changes, one of the most difficult things that we've seen is multi-threading

08:20.080 --> 08:28.640
the FFmpeg CLI, right? So all those big guys at YouTube and Vimeo and Facebook, and all those

08:29.200 --> 08:35.600
providers of FFmpeg nice UIs are basically one of the things they complained about is the lack of

08:35.600 --> 08:41.520
multi-threading and FFmpeg, so they invent a lot of weird frameworks to do that, so there is a lot

08:41.520 --> 08:47.760
of work to do that directly inside FFmpeg. It's going to go on for the whole year, I think, for

08:47.760 --> 08:53.520
all 2023, but that means that a lot of things will be better for you to use, and of course when you

08:53.520 --> 08:58.320
do that you need to actually care about thread safety and cleanups, so that's a lot of cleanups.

08:58.320 --> 09:03.520
What was done for 5.0 was that the muxes are now in their own threads, there will be more things.

09:03.520 --> 09:11.920
There is now a RISC-V optimization, or at least the framework to do that inside FFmpeg. One of the

09:11.920 --> 09:16.800
things that is important is that you've probably seen that all the big guys building GPUs have

09:16.800 --> 09:25.040
now shipped AV1 encoders, so in 6.0 we've got Intel and NVIDIA and AMD, so you can actually encode AV1

09:25.040 --> 09:31.520
in hardware, and that's actually very fast, right? You can reach 30 FPS in 1080p without any problem

09:31.520 --> 09:37.840
with those cards, and it's actually decent quality, it's not as good as the SVTA V1, of course, but

09:37.840 --> 09:46.960
it's pretty good. There was a lot of work on the FFT code by Lynn, she's over there, she can tell

09:46.960 --> 09:53.280
you about that, and I think it's like, I don't know how much faster it is, but it's a lot faster, so

09:53.280 --> 09:58.720
all the audio codecs and all the audio filters that require the UZFFT, and sometimes is better

09:58.720 --> 10:06.000
than the external FFT libraries that everyone is using. New RPI for reconstructed frame for

10:06.000 --> 10:12.880
encoders, RBI breakage for deprecation, we have, of course, what I hate, lots of new YUV format and

10:12.880 --> 10:17.200
pixel format, because there is always a good reason to add them, and when I'm downstream as

10:17.200 --> 10:26.640
VLT I hate that, but any. Lots of things on channel layouts and H.264, H.274, mostly about external

10:26.640 --> 10:33.920
filters. One of the big parts on those features is everything related to hardware, so I said about

10:33.920 --> 10:39.920
AV1 hardware decoding, a lot of pixel formats, especially for hardware. There is finally the

10:39.920 --> 10:46.880
Android media codec using directly NDK and not with a Java Crap that is directly integrated into

10:46.880 --> 10:54.640
FFmpeg. I think that requires API Android 23, but I'm not exactly sure, and we also have the

10:54.640 --> 11:00.800
encoding and not just the decoding, but also based on media codec. We have the Intel folks have done

11:00.800 --> 11:08.000
a lot of things to have a 10-bit, 12-bit, 4.2, 2.4, 4.4, VP9 decoding directly inside FFmpeg. That's

11:08.000 --> 11:13.600
one of the reasons why we have new pixel formats. In terms of actual features, there is of course

11:13.600 --> 11:20.640
lots of new codecs, lots of new filters. The ones I prefer are the FTR, which is a

11:20.640 --> 11:29.360
annoying company who doesn't want us to reverse engine that, Bonk, APAC, there is a SIM SSIM 360

11:29.360 --> 11:36.240
filter and some very cool bitstream filter for the DTS to PTS one. Look at that one, it's quite

11:36.240 --> 11:44.080
useful. Yeah, so FFmpeg CLI multishreading, as I said. This is partly done in 6.0. It will be

11:44.080 --> 11:54.240
continued on 6.1 and 7.0. It is difficult and it's long, but this is going to improve all your lives,

11:54.240 --> 12:00.240
or at least especially if you want to do a multi HLS dash, multiple transcode, multiple

12:00.240 --> 12:08.800
resolution and do that directly without using third parties. FFmpeg releases, this is a slide I took

12:08.800 --> 12:15.040
exactly from a previous talk and we never talked about that during FOSDAM, so that's why I'm talking

12:15.040 --> 12:22.000
about it. The problem that was like FFmpeg releases were kind of, well before there was not,

12:22.000 --> 12:27.840
right? So we all took the good show one and hope it was great and then we're seeing what

12:27.840 --> 12:32.880
mplay was doing, then VLC was copying and well if mplay on VLC agreed and everyone was using that,

12:32.880 --> 12:38.240
then we started having releases and done by Michael and sometimes they were not very predictable. So

12:38.240 --> 12:44.000
one of the ideas is to start to come to a more predictable fashion, which is one major

12:45.200 --> 12:50.960
API break and API break every year around December, January, so we're in February and we

12:50.960 --> 12:56.960
fucked this year, but that's the idea, right? So one major where we allow API and API breakage,

12:56.960 --> 13:02.960
right? We remove APIs. When it's deprecated, it must be there for two years before we move that,

13:02.960 --> 13:11.040
but we will bump the SO numbers, right? And then one or two releases during the year,

13:11.040 --> 13:17.200
depending on security and what we need, so 5.0, 5.1, and every two years one of the dot one will be LTS

13:17.200 --> 13:22.800
and we'll continue that for two or three years. So the plan was to do FFmpegs.0 in January,

13:22.800 --> 13:30.640
I hope it's going to come next week, we'll see. Yeah, this was not on schedule, so I'm adding a

13:30.640 --> 13:39.520
a shorter talk in the middle of my two talks. David 1.0 was released last year. It is insane.

13:41.200 --> 13:48.880
200,000 lines of handwritten assembly, I don't think there is any open source project that I

13:48.880 --> 13:55.360
had. I'm not sure there is even a non-open source project that has that much assembly. And yes,

13:55.360 --> 14:00.160
handwritten assembly is faster than using whatever version of whatever compiler and activating

14:00.160 --> 14:06.000
whatever amazing feature that is going to auto vectorize something. We still do 5.8,

14:06.000 --> 14:14.560
16 times faster than C, so don't bring that up. It is insane, yet it's necessary, right? So when

14:14.560 --> 14:21.920
you decode AV1, so AV1 is now in all your iOS devices, all your Android devices, all your

14:21.920 --> 14:26.560
applications that decode AV1. It's on MacOS, it's on Windows, it's of course in Chrome, it's of course

14:26.560 --> 14:33.120
in VLC and PV and all the other things. So it's literally everywhere. A lot of work was done in

14:33.120 --> 14:39.120
the David 1.0 about frame-throwing, like there is lots of, please see the talks from Ronaldo

14:39.120 --> 14:46.080
for a few years ago. Wow, okay, good. About the different spreading models that are inside David,

14:46.080 --> 14:53.680
and David 1.0 has everything in a simpler way. We are going to, it's extremely fast, very fast.

14:53.680 --> 15:02.240
Yes. David 1.0, 1.1 releases is coming soon, soonish. A lot of fixing, especially because

15:02.240 --> 15:07.440
there were a lot of conformance tests that we were not passing, and for some reason they got out,

15:07.440 --> 15:11.280
and there is of course lots of new assembly, especially for AVX 512 and here.

15:13.920 --> 15:21.840
Cool. We're going to speak about, well I'm going to do a demo, which is VLC.js, which is actually

15:21.840 --> 15:38.640
not in JS. So what are we talking about? Yeah. So this is Chrome, and this is why I'm on MacOS,

15:38.640 --> 15:45.840
and not my usual Linux for the people who wonder. This is VLC and FFmpeg and all the dependencies

15:45.840 --> 15:52.960
compiled to WebAssembly, and what you cannot see, but this is doing hardware decoding through Web

15:52.960 --> 15:58.000
Codex, right? So what happens here is that what you're seeing is that it's actually decoded on

15:58.000 --> 16:03.920
the hardware through Web Codex, and then you take the output frame directly into WebGL, and well,

16:03.920 --> 16:11.840
OpenGL ES2, which is compiled to WebGL, and display that. And this is a 4K H.264 MP4, blah, blah, blah.

16:11.840 --> 16:19.440
Okay, that's boring, JB. I can do 4K H.264 everywhere. Sure, sure you can. So let's do

16:19.440 --> 16:26.720
something a bit more complex. So this is the same, probably a device, except it's MKV.

16:27.840 --> 16:33.040
The MKV part is done in Wasm, right? It's a normal VLC demuxer. There is no JavaScript involved,

16:33.040 --> 16:39.680
right? I'm not demuxing MKV and remixing as MP4 like H.L.js. Yes, of course, chapters support,

16:39.680 --> 16:46.720
because, well, what's the use of that? But also, if I found my mouse again, no, where is it?

16:48.000 --> 16:56.560
Yeah, you have also chapter subtitles, which are not WebVTT, right? Normal DVB subtitles.

16:56.560 --> 17:00.400
Okay, so that's not too amazing, right? So let's do something more complex.

17:00.400 --> 17:13.920
Okay, 4K VP9 in software decoding directly inside the web browser. Okay, that's pretty much better,

17:13.920 --> 17:20.800
right? WebM on Mac OS, right? So, well, yeah, but professional, they use like actual format,

17:20.800 --> 17:29.600
like MPactS. Let's do, so that's something that is ATSC over the air, right? So that's HEVC,

17:29.600 --> 17:34.560
A-V-3-T-S, right? All the stuff that is not in the web browser, it's decoded and displayed directly

17:34.560 --> 17:40.000
into your web browser. And that's where you realize that the US TV is really dumb.

17:42.880 --> 17:49.440
Okay, but, okay, so that was hardware accelerated or not, because that was its GDC.

17:50.720 --> 17:57.200
As you can guess, right, I can either force web codec or AV codec. So now I'm going to force

17:57.200 --> 18:01.680
software decoding, and I'm going to show you something a bit more complex, which is,

18:02.560 --> 18:10.560
this is Korean TV, which is interlaced, and the interlacing is happening as a WebGL shader

18:10.560 --> 18:15.680
directly inside your web browser, right? So we're decoding H.264 interlaced. Of course,

18:15.680 --> 18:21.360
we cannot do that by hardware, because of course, API doesn't support interlaced codec. So we decode

18:21.360 --> 18:28.640
full in software, and then we display directly and do sharpening and the interlacing of those

18:28.640 --> 18:35.600
very old multicast formats without any change. Okay, and I guess I got no. Yeah, I got one minute

18:35.600 --> 18:44.240
more. So this is DNA-CHD. Of course, the output is not 4-2-0, but it's 4-2-2, and that's actually

18:44.240 --> 18:49.840
interlaced and decoded as M-X-F directly, all those professional formats, you play that directly

18:49.840 --> 18:57.360
inside the web browser. So of course, if we can do 4-2-2 and down sampling 4-2-2-2, 4-2-0 in software,

18:58.000 --> 19:09.280
well, on the GPU, I can also do 4-4-4. So this is YUV, 4-4-4, 10-bit, right? Of course, BBB, right?

19:09.280 --> 19:17.040
But things that are absolutely not possible with any type of APIs. I probably also can show you

19:17.040 --> 19:25.600
that we can do other filters, and this is a 360 movie that we have with the support on VLC,

19:25.600 --> 19:33.920
and of course, all the mapping from the title to Equio CrankDior is done on the GPU. Of course,

19:33.920 --> 19:41.200
that means that everything that we do with Le Placibo in theory should get in, and I'm out of time.

19:41.200 --> 19:51.440
Thank you.

19:53.440 --> 19:55.120
Do we have any questions from the room?

19:56.560 --> 20:03.360
So, an eighth question. So you said you have 200,000 lines of specialized code,

20:03.360 --> 20:12.320
so perhaps there is no slowdown when you flip or rotate the image or do such transforms,

20:12.320 --> 20:15.360
because you have a specialized version for that. Is it so?

20:15.360 --> 20:18.080
You mean on David or here?

20:18.080 --> 20:19.760
Oh, sorry. I cannot differentiate.

20:20.320 --> 20:26.000
So on David, which really the decoding part, David is 200,000 lines of assembly just to do the

20:26.000 --> 20:30.400
decoding. It's around 35,000 lines per architecture, and we do lots of architectures,

20:30.400 --> 20:35.040
that then they give you a decoding surface, and then we use it in VLC,

20:35.040 --> 20:39.760
MPV, FFM, and we do things, and here we would compile it directly inside WebAssembly,

20:39.760 --> 20:46.080
run that in Web browser, and all the transformations are done then on WebGL. So that doesn't change

20:46.080 --> 20:50.640
anything. No.

20:55.120 --> 20:55.920
No, there shouldn't be.

20:55.920 --> 20:59.040
On the dark question.

21:00.560 --> 21:04.560
Can you compile assembly to WebAssembly assembly?

21:12.000 --> 21:18.160
So one of the things that we tried with Lin, again, was what we call an assembly transpiler,

21:18.160 --> 21:22.640
where you take actually the arm handwritten assembly and try to transpise that to

21:22.640 --> 21:28.480
WebAssembly.scmd, right, so that you could use neon, and do exactly the opposite of what the

21:28.480 --> 21:37.040
the web browser are actually doing, where they take the wasm assembly and compile that just

21:37.040 --> 21:43.360
in time for neon and so on. It's a very insane project that I had the idea a few years ago.

21:43.360 --> 21:48.240
It's really not sure whether we are going to be able to do that, because you're transpiling

21:48.240 --> 21:52.880
assembly, like what the fuck are you talking about? But yes, I think that's the right solution

21:52.880 --> 21:58.240
instead of rewriting, again, all the assembly from FFmpeg and David again. If you have time,

21:58.240 --> 22:03.760
please come and help us. I might actually find also some money for that if people care.

22:08.560 --> 22:12.880
Please ask questions. I don't eat people. Yes.

22:12.880 --> 22:18.160
Last time I checked, I'm filing straight into WebAssembly everything that was thread,

22:18.160 --> 22:22.960
POSIX, everything was pretty not yet finalized. Like what is the process for compile engineer?

22:22.960 --> 22:29.360
It works fine, but that's also why you see that I'm on macOS, right, and I'm on Chrome and now

22:29.360 --> 22:33.680
displaying my usual Firefox and Linux, because in order to have threads, you need to have what we

22:33.680 --> 22:41.040
call shared array objects, which is basically common things. And because in the web world,

22:41.040 --> 22:45.840
what they call web work, it's a serialization and deserialization to move data. Now this is

22:45.840 --> 22:53.520
almost done, works everywhere, mostly on Chrome, now works on Safari, it works on Firefox, but it's

22:53.520 --> 22:58.320
buggy. And also one of the things that is annoying is the off-screen canvas, because you want to be

22:58.320 --> 23:02.960
able to read directly in the back buffer before displaying it. That doesn't work anywhere correctly.

23:02.960 --> 23:10.320
And finally, the hardware decoder only works in Chrome for now. But maybe Firefox will do

23:10.320 --> 23:12.320
something, wouldn't it? Sorry, what's the

23:12.320 --> 23:17.680
sign of the payload that the page has to download to get that 25 megabytes?

23:19.840 --> 23:25.440
So the idea is that we're going to, like VLC is a module approach, so there is like a very small

23:25.440 --> 23:32.160
core and 400, 500, 600 now maybe, modules, and so you'll go, what I want is to actually be able to

23:33.040 --> 23:39.040
load, and that's almost working in theory, so you can load the shared objects. So you would like

23:39.040 --> 23:45.040
only stream the core, and then the core will know which one to go and download. Yes, Steve?

23:58.240 --> 23:59.920
I'm not answering that question, thank you.

23:59.920 --> 24:07.440
So the question was, when is FFmpeg community moving to a sane thing which is Geek Lab?

24:09.040 --> 24:13.920
Not my short, right? Like you know my opinion, right? Video Land, VLC, all the iOS on the

24:13.920 --> 24:19.920
Red port, x264 and so on. Even David is on Geek Lab and would like it. The FFmpeg community

24:20.480 --> 24:25.520
prefers to stay on email. So I think it's a mistake because we are losing too many patches,

24:25.520 --> 24:31.760
because it's very difficult to, but that's a community opinion and the community is a majority.

24:32.400 --> 24:38.320
Last question? So if you're rendering in OpenGL or in the VLCJS, you're bypassing the media engine,

24:38.320 --> 24:43.440
right? So how do you do the audio video synchronization? Well, of course we are. So the

24:43.440 --> 24:48.960
answer is like, how are you doing audio video synchronization? Or like VLC, right? Like the core

24:48.960 --> 24:55.600
of VLC was done by this guy and other guys to actually do live TV, right? So the core VLC is a

24:55.600 --> 25:02.160
clock and the clock is basically working on doing synchronization audio and video and resampling the

25:02.160 --> 25:07.040
audio when it's too late and so on. So here we are doing exactly that, right? So we output audio with

25:07.040 --> 25:12.560
web audio. Well, no. A small part of web audio called audio worklets and so we know how much is

25:12.560 --> 25:17.040
actually being played back and then we control the V out, which is basically the core of VLC to

25:17.040 --> 25:22.000
synchronize audio and video. And we're using that there, but I'm not using any type of media source

25:22.000 --> 25:47.440
extension or any other open media, blah, blah, blah. We are really like, it's mostly a video game. Okay.

WEBVTT

00:00.000 --> 00:06.720
Okay, so hello everyone.

00:06.720 --> 00:07.720
My name is Dan.

00:07.720 --> 00:09.400
I'm from CJRACE project.

00:09.400 --> 00:11.520
Thank you for showing up.

00:11.520 --> 00:18.320
I will be pretty fast, so the rest, if you have any questions later, please, and if you

00:18.320 --> 00:21.200
don't understand something, the slides will be available later.

00:21.200 --> 00:24.900
So I'll do just digestive slides, whatever.

00:24.900 --> 00:30.920
So the company itself sitting behind the project, we are located in Germany and with some back

00:30.920 --> 00:33.240
offices in Romania and Albania.

00:33.240 --> 00:44.760
We did both wholesale as well as real-time retail business.

00:44.760 --> 00:49.480
So we understand by now what means a system outage.

00:49.480 --> 00:53.600
CJRACE, it's a real-time enterprise billing suite.

00:53.600 --> 00:58.840
It's pluggable into existing, it's designed to be pluggable into existing infrastructures.

00:58.840 --> 01:02.640
You can accommodate easily new services and new ideas.

01:02.640 --> 01:10.320
So it's not only for telecommunication, built, you can extend it like the new industries,

01:10.320 --> 01:14.320
IOT, electricity, we are going towards energy as well.

01:14.320 --> 01:17.720
So you can build anything you like.

01:17.720 --> 01:22.440
If you want to sell cars, you can just do it.

01:22.440 --> 01:27.840
And it should be non-intrusive into existing setups, so it should not make you change the

01:27.840 --> 01:29.840
way you are doing things.

01:29.840 --> 01:36.880
We are sharing information with your switch, your router, whatever infrastructure you are

01:36.880 --> 01:39.560
using over there.

01:39.560 --> 01:41.240
It's all open source software.

01:41.240 --> 01:50.640
It was made in born actually in 2010 and we published first sources in 2012.

01:50.640 --> 01:53.960
The sources are available on GitHub.

01:53.960 --> 01:59.640
It's all 100% written in Go, one of the early adopters of Go.

01:59.640 --> 02:03.360
And we have nothing in private repositories.

02:03.360 --> 02:06.120
Of course we appreciate community.

02:06.120 --> 02:10.740
It's performance-oriented, three branches, all three supported.

02:10.740 --> 02:20.400
Our customers, they tend to be like all telecommunication, a bit conservative with upgrading.

02:20.400 --> 02:32.200
So test-driven development, again very sensitive to billing and data, and modular architecture.

02:32.200 --> 02:33.800
It's quite feature-rich.

02:33.800 --> 02:41.280
You can find all this information in the internet, so I don't have to market it to you.

02:41.280 --> 02:46.440
This slide is complex a bit, but I wanted to show you because it relates to the subject

02:46.440 --> 02:51.400
in my talk, how to integrate with your existing infrastructure.

02:51.400 --> 02:56.880
So on the left side here, you see quite a number of agents which we support.

02:56.880 --> 02:58.680
This mostly are developed by us.

02:58.680 --> 03:05.820
There are also other agents like OpenSips module which is built in their software.

03:05.820 --> 03:11.960
So you can build very easily and replace any of our agents.

03:11.960 --> 03:17.560
So what you will do in the end, you will send your API calls because CIGIRAID is all about

03:17.560 --> 03:18.560
APIs.

03:18.560 --> 03:23.640
You will send directly to our session module which you can also see it as central point

03:23.640 --> 03:25.800
of entry.

03:25.800 --> 03:31.240
After that, you will reach other modules of ours or subsystems, although they are also

03:31.240 --> 03:37.560
a standalone API server on their own, but you will be using them through our sessions

03:37.560 --> 03:43.960
where we implement easier integration for your stuff.

03:43.960 --> 03:47.160
So how do you do that?

03:47.160 --> 03:48.920
First you have to load the data.

03:48.920 --> 03:56.000
This is data specific, so you have to follow our format into loading your rating, your

03:56.000 --> 04:02.240
accounting data in case of doing prepaid and postpaid.

04:02.240 --> 04:07.520
We have also some extra subsystems data, but you will be mostly focusing on rating and

04:07.520 --> 04:09.080
accounting.

04:09.080 --> 04:15.920
After you are done with building your data, then you have to understand how we support

04:15.920 --> 04:17.120
sessions.

04:17.120 --> 04:25.040
So you can choose all of these steps or only one which is the last one and the most important

04:25.040 --> 04:26.340
session CDR.

04:26.340 --> 04:34.760
So you can do building in real time via sending us various messages, various APIs, or you

04:34.760 --> 04:39.080
can directly send us the end CDR for building it.

04:39.080 --> 04:46.160
So for example, session authorization, you have the opportunity to extract from the billing

04:46.160 --> 04:55.480
engine, maximum session duration, resource authorization, various session properties,

04:55.480 --> 04:59.640
even password you can retrieve it from the engine site.

04:59.640 --> 05:06.040
And you can also do session routing because we also support LCR on our site.

05:06.040 --> 05:10.520
Then sessions start when your session starts, so you tell us start billing in real time

05:10.520 --> 05:13.400
or start debiting in increments.

05:13.400 --> 05:20.880
You can choose the way, for example, the mobile networks, they are using session updates via

05:20.880 --> 05:28.720
diameter so you can implement your own triggers for incremental debits.

05:28.720 --> 05:36.360
Or you can do like we are doing with open source software we support like FreeSwitch,

05:36.360 --> 05:44.420
Camayilio, OpenSips, send us session start and session stop and we will do the magic behind.

05:44.420 --> 05:49.320
And then there will be the session CDR which can be stand alone or can correct the session

05:49.320 --> 05:50.880
information from real time.

05:50.880 --> 05:54.120
So both will work.

05:54.120 --> 05:57.960
And these are some examples of APIs.

05:57.960 --> 06:04.800
So if you want to implement in your own application like your own switching software or your own,

06:04.800 --> 06:12.080
I don't know, WebRTC application, all you have to do is send us this JSON RPC blobs

06:12.080 --> 06:18.320
and we reply you, for example, this one is replying with the, we by the way use nanoseconds,

06:18.320 --> 06:23.440
you can also get back seconds if you want but we want to be very verbose.

06:23.440 --> 06:27.680
So this one will just retrieve the maximum usage of a session.

06:27.680 --> 06:32.720
And the same with initiation, same you send us the information in your events.

06:32.720 --> 06:41.680
This is fully configurable, flexible, so you can add any number of fields inside.

06:41.680 --> 06:43.800
Same session update and terminate.

06:43.800 --> 06:51.840
And in the end the CDR sample and blob, same story, all API driven.

06:51.840 --> 06:53.840
So this was fast.

06:53.840 --> 06:54.840
Thank you.

06:54.840 --> 07:14.960
Thank you.

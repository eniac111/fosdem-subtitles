WEBVTT

00:00.000 --> 00:12.800
Okay, so yeah, my name is Matthew Wilde.

00:12.800 --> 00:19.320
I'm going to talk about, it's hopefully not too technical talk, but the topics are technical,

00:19.320 --> 00:22.800
but I am trying to keep it general.

00:22.800 --> 00:23.800
So who am I?

00:23.800 --> 00:28.360
I founded the Prusadie XMPP server.

00:28.360 --> 00:35.320
XMPP is an open chat protocol, so the idea is you can choose the software that you use

00:35.320 --> 00:40.360
to chat with, you can choose your service provider, or the providers federate using

00:40.360 --> 00:42.040
a server-to-server protocol.

00:42.040 --> 00:45.560
So this is like some other open federated networks.

00:45.560 --> 00:49.040
There's email, which we're all familiar with, where you can choose your provider, choose

00:49.040 --> 00:51.600
your software.

00:51.600 --> 00:56.480
There's the phone network, which kind of works, and many of you here have probably heard of

00:56.480 --> 01:02.560
Matrix, and that's another very similar like goals to XMPP, where we have an open protocol

01:02.560 --> 01:06.640
and we're doing federation and we're bridging to proprietary networks.

01:06.640 --> 01:10.800
So Prusadie is an XMPP server that you can self-host, it's all open source.

01:10.800 --> 01:16.400
Snicket is a newer thing, which is kind of an all-in-one XMPP setup, it's kind of more

01:16.400 --> 01:18.840
like a self-hosted WhatsApp.

01:18.840 --> 01:22.560
I actually created it for my family, because they were still using WhatsApp, even though

01:22.560 --> 01:27.320
I'd been working on XMPP for a long time.

01:27.320 --> 01:31.760
And so yeah, so Snicket has like apps and stuff, that's all just working out of the

01:31.760 --> 01:34.740
box with voice and video calls and things.

01:34.740 --> 01:40.640
As part of this, I worked on modern XMPP, which is a set of guidelines, UI guidelines,

01:40.640 --> 01:46.680
because the XMPP Standards Foundation, which I'm one of the directors, we publish protocols

01:46.680 --> 01:52.240
and we say this is how you send a file, this is how you send a chat message or make a call,

01:52.240 --> 01:55.160
but we don't say this is how you should structure the UI.

01:55.160 --> 01:59.760
So I wanted to bring some consistency and some good guidelines and help developers with

01:59.760 --> 02:00.760
that.

02:00.760 --> 02:04.640
So yeah, I'm also part of the XMPP Standards Foundation, I'm the executive director, I

02:04.640 --> 02:08.560
work on the board, but I've also been on the technical council, and so yeah, I'm involved

02:08.560 --> 02:10.560
in a lot of XMPP things.

02:10.560 --> 02:17.920
So this talk is focusing on something that I had a grant for from NGI Assure via NLNet,

02:17.920 --> 02:24.880
and it was to work on modernizing XMPP authentication and authorization.

02:24.880 --> 02:31.580
So authentication, you start out connecting to the server and you then have to prove your

02:31.580 --> 02:32.580
identity to the server.

02:32.580 --> 02:38.280
You can't just say, hey, I'm Matthew, because every TCP connection has to be authenticated

02:38.280 --> 02:39.320
somehow.

02:39.320 --> 02:41.120
So how do we do that?

02:41.120 --> 02:46.240
Traditionally, you make the connection and you send a username and your password and

02:46.240 --> 02:52.840
the server tells you if it's correct and then you can proceed to do authenticated stuff.

02:52.840 --> 02:57.280
This is actually how the web works, pretty much.

02:57.280 --> 03:02.600
So you have this HTML form, you put in your username, you put in your password, your password

03:02.600 --> 03:08.720
gets sent to the web server and the server verifies it, and usually on the server side

03:08.720 --> 03:13.400
the password is hashed, which means, I mean, if it's a good place, then it's hashed on

03:13.400 --> 03:17.920
the server side, so then they hash the incoming password and they compare it with the hash

03:17.920 --> 03:22.280
that they have stored.

03:22.280 --> 03:28.800
So XMPP uses a standard authentication protocol called SASL.

03:28.800 --> 03:33.860
It's actually used by a bunch of different protocols and there's currently work to try

03:33.860 --> 03:37.340
and implement it in HTTP as well.

03:37.340 --> 03:44.280
And so SASL defines a bunch of mechanisms and the mechanism says what you send.

03:44.280 --> 03:49.880
And so the simplest one probably is plain and this is exactly what we just saw with

03:49.880 --> 03:55.720
the Hi, I'm Matthew, my password is, and the web is very similar, you're just sending a

03:55.720 --> 03:59.720
username and your password.

03:59.720 --> 04:06.900
And so sending passwords across the wire is absolutely fine because of all these reasons

04:06.900 --> 04:12.760
and nobody ever reuses passwords and they are frequently rotated and updated and they

04:12.760 --> 04:18.280
never contain personal information, so if they're leaked, then no bad consequences.

04:18.280 --> 04:22.800
And they're never also reused across services, which means this is just great because if

04:22.800 --> 04:29.600
passwords ever do get leaked and those hashes may be brute forced, then no one gets access

04:29.600 --> 04:33.320
to any other service than the compromised one, which was already compromised anyway.

04:33.320 --> 04:36.480
Okay, yeah, that was just a joke.

04:36.480 --> 04:40.080
So in XMPP we don't really use plain.

04:40.080 --> 04:44.580
We use another SASL mechanism that someone defined called Scram.

04:44.580 --> 04:48.940
It's not just hey, my password is, it's a challenge response thing.

04:48.940 --> 04:55.680
So there's a bit of magic going on with hashing and it has some really nice features.

04:55.680 --> 04:59.680
It does involve multiple round trips, so yeah, you're going backwards and forwards, but these

04:59.680 --> 05:04.880
by you that the client and the server can only store hashes, so previously we couldn't

05:04.880 --> 05:09.040
have the client store a hash because it has to send the raw password for the server to

05:09.040 --> 05:10.040
hash.

05:10.040 --> 05:14.040
If you only send a hash, then the hash becomes your password, which is kind of weird.

05:14.040 --> 05:17.200
So Scram has multiple iterations of hashing.

05:17.200 --> 05:19.120
It allows the client to store a hash.

05:19.120 --> 05:22.200
It allows the server to still store a hash.

05:22.200 --> 05:25.000
And only hashes are exchanged over the wire.

05:25.000 --> 05:26.120
It's pretty magic.

05:26.120 --> 05:31.960
And the mutual authentication part means that at the end of the authentication exchange,

05:31.960 --> 05:37.040
both the server has authenticated the client and proven yes, this person originally had

05:37.040 --> 05:41.240
the password and they are who they say they are.

05:41.240 --> 05:46.160
But importantly, it allows the client to verify that the server also knows the original password,

05:46.160 --> 05:51.800
which in the past with the plain mechanisms and the web, the server can just lie and say,

05:51.800 --> 05:53.400
yeah, I have your password.

05:53.400 --> 05:56.560
Carry on, send me more sensitive information.

05:56.560 --> 05:58.360
And so we have this mutual authentication.

05:58.360 --> 06:05.720
So when you connect over XMPP and you use Scram, you have this verification that also

06:05.720 --> 06:08.000
the server you're connecting to is the right one.

06:08.000 --> 06:10.600
And yes, we do have this with TLS, obviously.

06:10.600 --> 06:14.620
But there are certain cases where TLS isn't always reliable.

06:14.620 --> 06:18.740
And that's where channel binding comes in, which is a bit more magic.

06:18.740 --> 06:23.760
And this binds your authentication, that mutual authentication stuff to your TLS channel.

06:23.760 --> 06:29.200
And so if you reach the end and the mutual authentication checks out but you find a little

06:29.200 --> 06:36.280
mismatch, this TLS magic can tell you that actually there is someone listening in on

06:36.280 --> 06:37.560
your TLS connection.

06:37.560 --> 06:43.520
And that can be because, for example, your certificate authority was compromised or whatever.

06:43.520 --> 06:47.600
Someone installed a different trust root on your system without you knowing.

06:47.600 --> 06:49.040
And so we can actually detect this.

06:49.040 --> 06:51.040
And it's pretty smart.

06:51.040 --> 06:52.600
All this security comes at a cost.

06:52.600 --> 06:55.080
Obviously, we just talked about why it's necessary.

06:55.080 --> 06:58.760
But it's also still password-based.

06:58.760 --> 07:00.600
So what can we do?

07:00.600 --> 07:05.120
So there's been a lot of interesting development on the web ecosystem in recent years.

07:05.120 --> 07:08.640
They're trying to, like, they've tried fixing stuff.

07:08.640 --> 07:10.960
And it's basically hard.

07:10.960 --> 07:11.960
Users are always going to be users.

07:11.960 --> 07:15.240
They're always going to choose memorable passwords.

07:15.240 --> 07:16.600
And there has been some progress.

07:16.600 --> 07:18.520
There are password managers and so on.

07:18.520 --> 07:23.680
Although they're best practice, they're not widely used amongst normal people.

07:23.680 --> 07:26.720
Probably everyone here, I hope, has a password manager.

07:26.720 --> 07:33.040
So WebAuthn, FIDO2, it's basically a combination of things.

07:33.040 --> 07:38.880
They allow the browser to do some special stuff and help with the authentication.

07:38.880 --> 07:40.800
You can do that with an external hardware token.

07:40.800 --> 07:45.960
But these days, also, browsers are supporting TPM chips inside the hardware, which allows

07:45.960 --> 07:49.560
you to link that authentication securely to a single device.

07:49.560 --> 07:54.400
Passkeys are Apple's thing that they're really pushing, which is based on all this and allows

07:54.400 --> 08:04.280
you to basically create an account without a password and authenticate using this special

08:04.280 --> 08:07.920
key that is only on your device, except it's also synchronized via iCloud.

08:07.920 --> 08:12.960
And so you can access your account from all your devices without ever needing a password,

08:12.960 --> 08:15.800
which is as long as you can access your iCloud account.

08:15.800 --> 08:17.760
That's just one implementation.

08:17.760 --> 08:19.280
There are other things.

08:19.280 --> 08:25.080
The WebAuthn, FIDO2, it's all based on open standards.

08:25.080 --> 08:28.600
But XMPP uses SASL, which is focused on passwords.

08:28.600 --> 08:30.880
So what can we do?

08:30.880 --> 08:37.320
I've been working on this new mechanism in XMPP, which is token-based.

08:37.320 --> 08:44.680
And it builds on some earlier work, which introduces a new SASL mechanism or a family

08:44.680 --> 08:50.880
of mechanisms, which allow you to exchange a hash of the token over the wire.

08:50.880 --> 08:54.840
So we're not sending the raw token.

08:54.840 --> 08:57.400
So it's a bit SCRAM-like in that sense.

08:57.400 --> 09:02.360
It still provides mutual authentication, and it still supports channel binding.

09:02.360 --> 09:05.920
So you still have all those nice features of SCRAM.

09:05.920 --> 09:13.040
It is a single round trip, so there's no back and forth like with SCRAM.

09:13.040 --> 09:19.360
The things that we are weakening in that sense don't matter, because the tokens are not passwords.

09:19.360 --> 09:24.040
And so although there is a slightly reduced level of security around the token compared

09:24.040 --> 09:30.240
to SCRAM, the tokens are temporary.

09:30.240 --> 09:35.040
So if they get leaked, then you can easily revoke them, rotate them.

09:35.040 --> 09:37.520
And they are unique to that service.

09:37.520 --> 09:40.880
And I would hope that if a service is compromised, they're obviously going to revoke all their

09:40.880 --> 09:42.440
tokens straight away.

09:42.440 --> 09:46.640
It's harder to get users to reset all their passwords straight away.

09:46.640 --> 09:50.560
So there's many benefits to using tokens, and we still get all the nice features of

09:50.560 --> 09:51.700
SCRAM.

09:51.700 --> 09:56.000
But users aren't going to generate tokens and enter them themselves.

09:56.000 --> 10:00.720
So this opens the door to two-factor authentication in XMPP as well.

10:00.720 --> 10:04.440
Previously we've had this problem where you can kind of do two-factor authentication,

10:04.440 --> 10:09.760
but every time you drive through a tunnel, then your XMPP app is re-authenticating on

10:09.760 --> 10:13.720
the other side because it's reconnecting to the server and has to reprove who it is.

10:13.720 --> 10:19.080
If it uses the password, then the server is going to say, well, you have the password,

10:19.080 --> 10:23.040
but the whole point of two-factor authentication is to make the password not enough because

10:23.040 --> 10:26.800
of all the weaknesses that passwords entail.

10:26.800 --> 10:30.480
So if you authenticate with a token, instead, then the server knows it issued this token

10:30.480 --> 10:31.480
once.

10:31.480 --> 10:35.600
It issued it to that device, and it knows who you are, and there's a higher security

10:35.600 --> 10:37.660
guarantee around that.

10:37.660 --> 10:43.800
So by using the new SASL mechanisms, they'll see that you're authenticating with a secure

10:43.800 --> 10:50.480
token, and they won't send the two-factor authentication prompts that they usually send.

10:50.480 --> 10:53.520
This is basically how two-factor auth on the web already works.

10:53.520 --> 10:56.040
You provide that web form or whatever.

10:56.040 --> 11:00.040
Maybe you're using pass keys, but once you do that initial authentication step, the web

11:00.040 --> 11:03.680
service is going to send back a cookie that gets stored in your browser in plain text.

11:03.680 --> 11:09.080
And with every request, yes, it's going over HTTPS, but it's still sending that plain text

11:09.080 --> 11:13.840
string, and it doesn't have all the protections of the channel binding and the mutual authentication

11:13.840 --> 11:18.800
that the FAST and SASL mechanisms are supporting.

11:18.800 --> 11:24.320
So in this sense, using FAST over, for example, the new HTTP SASL stuff would be an interesting

11:24.320 --> 11:29.800
security improvement for many secure web applications.

11:29.800 --> 11:34.280
And so the other thing is it opens the door to having passwordless accounts.

11:34.280 --> 11:40.600
So instead of exchanging your password for a token, you could exchange your password

11:40.600 --> 11:44.880
plus a two-factor auth for a token, or you could do something entirely different.

11:44.880 --> 11:48.360
Something came up just at the real time stand downstairs.

11:48.360 --> 11:53.120
Someone wants to do SMS authentication, so they verify SMS kind of like how WhatsApp

11:53.120 --> 11:59.000
or Signal work, and then you will just be given a FAST token, and then you can reconnect

11:59.000 --> 12:01.600
to the server using that.

12:01.600 --> 12:03.920
And that will last for as long as you keep your device active.

12:03.920 --> 12:08.720
If you have an inactive device, then that token will stop being refreshed.

12:08.720 --> 12:15.040
It will eventually expire, and you will have to re-authenticate using SMS or maybe some

12:15.040 --> 12:18.000
recovery mechanism.

12:18.000 --> 12:22.040
And once you've reached up this passwordless account, then obviously you can add other

12:22.040 --> 12:27.800
recovery mechanisms as a backup if you need to.

12:27.800 --> 12:29.760
And yeah, that was kind of the summary of my talk.

12:29.760 --> 12:34.960
I hope there's still time for many questions if you are interested.

12:34.960 --> 12:38.880
So this talk is kind of a complement to a blog post that I wrote on the Presidue blog

12:38.880 --> 12:40.760
about all this stuff.

12:40.760 --> 12:46.720
But the blog post focused mostly on the performance optimizations, because that matters to people.

12:46.720 --> 12:51.120
They want to be reconnected to the server as quickly as possible, because responsiveness

12:51.120 --> 12:53.000
and all this.

12:53.000 --> 12:58.520
And so the blog post focused on the optimization aspects of this.

12:58.520 --> 13:01.960
Today, the talk focuses on the security aspects.

13:01.960 --> 13:04.680
And yeah, there's some more XMPP talks coming up later on.

13:04.680 --> 13:11.240
I am downstairs also in the real-time lounge, which is just down around the corner.

13:11.240 --> 13:13.640
And you can reach me on XMPP or email.

13:13.640 --> 13:17.160
And yeah, happy to answer any questions.

13:17.160 --> 13:24.160
Thank you.

13:24.160 --> 13:27.160
Hi.

13:27.160 --> 13:32.160
It sounds like the fast authentication shares some parallels with JSON web tokens.

13:32.160 --> 13:35.160
Can you tell us where they overlap, where they differ?

13:35.160 --> 13:40.160
Can fast be used in scenarios where JSON web tokens already exist as something better?

13:40.160 --> 13:41.160
Or is it more divergent?

13:41.160 --> 13:42.160
Is it different?

13:42.160 --> 13:43.160
It's pretty different.

13:43.160 --> 13:44.160
So the fast...

13:44.160 --> 13:45.160
Yeah, sorry.

13:45.160 --> 13:53.160
So the question is, ultimately, are JSON web tokens similar, overlapping with fast tokens?

13:53.160 --> 14:01.160
Fast tokens are essentially opaque random strings of a good length for security reasons.

14:01.160 --> 14:05.600
JSON web tokens, they are also embedding stuff inside that token.

14:05.600 --> 14:08.280
A server could do similar.

14:08.280 --> 14:11.240
And when it issues the token, use a JWT instead.

14:11.240 --> 14:14.320
There's not really much benefit to that.

14:14.320 --> 14:18.120
JSON web tokens, they are still useful for some cases, definitely.

14:18.120 --> 14:22.960
But they have a bad reputation with regards to security.

14:22.960 --> 14:25.680
Yeah, it's complicated.

14:25.680 --> 14:27.840
But there's not really much overlap.

14:27.840 --> 14:33.240
They can be kind of used in the same situation, but not entirely.

14:33.240 --> 14:38.560
If you were doing a distributed network where you didn't really necessarily want to have

14:38.560 --> 14:42.400
back-end communication, could you authenticate a fast token against one service, and then

14:42.400 --> 14:47.760
that contains information that could be authenticated with a trusted system that's not sharing a

14:47.760 --> 14:48.760
back-end?

14:48.760 --> 14:49.760
Yeah, absolutely.

14:49.760 --> 14:51.760
Any way that the server can verify the token is valid.

14:51.760 --> 14:52.760
Could you repeat the token?

14:52.760 --> 14:53.760
Sorry.

14:53.760 --> 15:00.120
So yeah, the question is, if you were working on a decentralized system where the authentication

15:00.120 --> 15:04.320
system is separate to the place where the user is logging in, then can you use JWT

15:04.320 --> 15:05.320
in that situation?

15:05.320 --> 15:07.320
And the answer is yes, you could use it.

15:07.320 --> 15:08.320
In that situation?

15:08.320 --> 15:09.320
Yes, yes, you could.

15:09.320 --> 15:10.320
Okay.

15:10.320 --> 15:11.320
Yeah.

15:11.320 --> 15:12.320
Two questions.

15:12.320 --> 15:17.320
Are you attempting to standardize fast for the standards for the second you said tokens

15:17.320 --> 15:21.320
that are disused decay by what methods?

15:21.320 --> 15:27.000
Yeah, so the first question was, are we attempting to standardize fast?

15:27.000 --> 15:28.000
Yes.

15:28.000 --> 15:34.080
So the SASL mechanism that it is based on is already a draft at the IETF.

15:34.080 --> 15:35.840
It's been going a while.

15:35.840 --> 15:42.360
We had a meeting with the SASL working group at the IETF just last month, and they agreed

15:42.360 --> 15:45.680
that this is stuff that is interesting and they want to move forward with because it

15:45.680 --> 15:50.600
is also useful for other protocols, the email ecosystem and many others.

15:50.600 --> 15:56.240
So yes, we are the XMPP layer of this, the whole fast stuff.

15:56.240 --> 15:59.200
That is being standardized at the XMPP Standards Foundation.

15:59.200 --> 16:04.480
So that layer, if another protocol wanted to use it, they'd have to define their own

16:04.480 --> 16:08.160
because the fast stuff specifically is XMPP specific.

16:08.160 --> 16:12.400
They can copy how we've done it, but it has to be translated to a different protocol.

16:12.400 --> 16:14.320
And the second question was, sorry.

16:14.320 --> 16:16.320
How do disuse tokens decay?

16:16.320 --> 16:18.720
How do disuse tokens decay?

16:18.720 --> 16:20.120
That is basically up to the server.

16:20.120 --> 16:25.920
There's an algorithm in the fast specification which is linked from the blog post which tells

16:25.920 --> 16:31.880
you how to implement the server in a way that is going to securely rotate tokens without

16:31.880 --> 16:36.080
having to check every possible token on the server because we don't necessarily know the

16:36.080 --> 16:38.520
user's identity until we verify the token.

16:38.520 --> 16:43.240
So it can be a bit complex, but essentially it's just the server knows the expiry time

16:43.240 --> 16:46.400
of a token when the token was last seen.

16:46.400 --> 16:52.520
And some interesting stuff came up with how to refresh tokens because if the client authenticates

16:52.520 --> 16:56.760
and then you provide it with a new token and immediately expire the old one, so that's

16:56.760 --> 16:58.760
one way of doing the rotation.

16:58.760 --> 17:04.640
There are cases where the client actually reconnected, used the old token, and then

17:04.640 --> 17:10.240
did not receive the new token, got disconnected, and then it gets logged out basically because

17:10.240 --> 17:12.480
it can no longer access.

17:12.480 --> 17:17.440
So the server has to store the last token that the client used and also the new replacement

17:17.440 --> 17:19.660
token it's expecting it to use next.

17:19.660 --> 17:23.680
And if the client never uses that token, then it will eventually issue a new one and work

17:23.680 --> 17:24.680
out that.

17:24.680 --> 17:30.000
That's when you expire the old one completely.

17:30.000 --> 17:33.520
And obviously there is a time limit to that because otherwise someone can carry on using

17:33.520 --> 17:35.520
the old one indefinitely and we don't want that either.

17:35.520 --> 17:37.640
So there's kind of two timeouts built in.

17:37.640 --> 17:38.640
Okay, excellent.

17:38.640 --> 17:39.640
Thank you.

17:39.640 --> 17:58.840
Thank you.

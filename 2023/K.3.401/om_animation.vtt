WEBVTT

00:00.000 --> 00:15.240
Our next speaker is a specialist in the animation industry. Please welcome Frank Rousseau.

00:15.240 --> 00:20.520
Thank you. So hello first them. My name is Frank Rousseau and I'm going to introduce

00:20.520 --> 00:26.400
you to animation movie pipelines. So before going further into the presentations, I'm

00:26.400 --> 00:34.480
going to introduce myself a little bit. I do web applications since 25 years and I do

00:34.480 --> 00:41.800
free software as a professional activity since 10 years and I'm the founder too of a company

00:41.800 --> 00:48.360
named CG Wire. We are a bootstrap company. We are a team of five and we do a product

00:48.360 --> 00:55.760
that is aimed at providing project management services for animation studios and this product

00:55.760 --> 01:05.160
is licensed under LGPL. So now let's talk about pipelines. So what you have to understand

01:05.160 --> 01:10.000
first is that when you do an animation movie, you have to follow a very industrial process

01:10.000 --> 01:15.880
but all the people working on it are creative people. So their main focus is to make beautiful

01:15.880 --> 01:22.080
pictures and they don't really care about the rest. So you have to deal with that two

01:22.080 --> 01:31.840
contradictory aspects and the first thing is to describe the main steps of the needed

01:31.840 --> 01:39.640
to build a movie. So here I'm going to take a simple example that covers the main aspects

01:39.640 --> 01:44.640
of a movie but of course there are subtleties for every movie. But the main idea is that

01:44.640 --> 01:50.880
in every animation productions, you have some elements named assets that will be displayed

01:50.880 --> 01:58.040
in the movie all along the movie and you have the shots which every time the camera frame

01:58.040 --> 02:04.800
is changed, there is a new shot. So the movie is divided in many shots and the asset will

02:04.800 --> 02:11.200
be used in the shots. So when you do, you build an asset, for example, a character,

02:11.200 --> 02:18.280
you have several steps. The first one is the concept phase. It's a 2D step where you will

02:18.280 --> 02:28.440
draw the idea of how you look at the character. Then the next step is to consist in sculpting

02:28.440 --> 02:34.400
the character, making it in 3D. Then you have to paint it. So you have to apply textures

02:34.400 --> 02:42.760
and physical materials. So we named that step shading and the other important step is the

02:42.760 --> 02:51.200
shading. Basically you add bones to your mesh, to your 3D model and you make a puppet of

02:51.200 --> 02:58.880
it. Then once you have all your elements that are animable, you are going to build your

02:58.880 --> 03:05.160
shots. So first you have to, you need to have the animatic. The animatic is basically an

03:05.160 --> 03:12.600
animated storyboard. So it's a super rough version of the shot. Then you go to a 3D

03:12.600 --> 03:19.320
version of the shot, but it's still very rough, which is named the layout. It's more direct

03:19.320 --> 03:26.960
or thin, so to check that everything is well positioned. The second and the third step

03:26.960 --> 03:32.960
is to animate. The goal of the third step is to animate the shot. So here you have the

03:32.960 --> 03:39.440
very precise animations. Here your shot is almost done, but you have to render it so

03:39.440 --> 03:46.240
you add some lights and you make you bring all the elements. You need to do the render

03:46.240 --> 03:52.440
in the same scene and then you run the rendering. Once you have the rendering, you add some

03:52.440 --> 03:58.920
2D effects on top of it and it's a compositing step. After this step, you have the final

03:58.920 --> 04:07.720
picture. So now I talked about 3D animations, but animations can be done in 2D. It's a very

04:07.720 --> 04:15.960
popular style too. So here the steps are a little bit different. We still have the concept,

04:15.960 --> 04:24.040
but then we have the design part. Basically we draw exactly the elements we need in that

04:24.040 --> 04:30.960
step. We have two of the main elements that are used in 2D are the characters and the

04:30.960 --> 04:39.520
backgrounds because every shot has a different background almost. And after that we have

04:39.520 --> 04:44.640
another step where every character will describe all the poses that a character will have.

04:44.640 --> 04:50.680
So it will be easier for the animations that will happen afterwards. And when we do the

04:50.680 --> 04:57.640
shots, we still have this animatic step because if you remember what I said in the previous

04:57.640 --> 05:05.200
slide, it's a 2D, it's all radio 2D operation. Then we do a kind of rough layout and then

05:05.200 --> 05:10.280
we do the animation. The animation happens only on the traits of the elements that are

05:10.280 --> 05:16.800
moving because you know when you see a 2D movie, you always have a beautiful background

05:16.800 --> 05:22.800
and simpler elements that are moving. So we animate the traits, then we color them and

05:22.800 --> 05:27.600
then there is a compositing step which assembles everything, the backgrounds, traits and colors.

05:27.600 --> 05:40.000
And to make sure, and then it gives the final image. So now that gives you the main steps

05:40.000 --> 05:45.800
needed to build a movie. But now the question is how we build the movie. So of course we

05:45.800 --> 05:52.520
use software and in the animation industry there is a strong culture of IP, secret and

05:52.520 --> 06:02.320
proprietary software. So we come from very far on this aspect. And because they are really

06:02.320 --> 06:09.000
using this thing, it's likely things that the image should not be stolen, that they

06:09.000 --> 06:18.040
should, it's better if no one sees the image before the images, before the movies is displayed.

06:18.040 --> 06:26.680
And so basically they are not really friendly with everything which is a point source, but

06:26.680 --> 06:34.040
things tend to change because of several phenomena. The first one is that Python is replacing

06:34.040 --> 06:41.660
every proprietary script language. I didn't mention it on the slide, but FFmpeg is widely

06:41.660 --> 06:49.560
used to do some video operations. And the Academys software foundation is maintaining

06:49.560 --> 06:56.480
many projects around pivot file formats. So it makes easier for studios to collaborate

06:56.480 --> 07:04.240
together. And of course we have Blender which is getting more and more adoptions, which

07:04.240 --> 07:19.920
is getting more and more popular and which perform always better. So all these elements

07:19.920 --> 07:30.520
combined push the industry to change its mindset about collaborations and open software.

07:30.520 --> 07:37.640
Now there is another interesting actor, which is Krita. Krita currently is not widely used

07:37.640 --> 07:43.120
in the industry, but we still can feel the same phenomena as with Blender. There are

07:43.120 --> 07:49.480
tons of tutorials. The software works pretty well and it keeps on improving. There is a

07:49.480 --> 07:55.200
good community. So we can guess that at some point we will have some interesting stuff

07:55.200 --> 08:00.760
that will come from it. Krita is mainly used for digital painting, so it's more interesting

08:00.760 --> 08:09.200
to end everything related to backgrounds or to do textures for 3D. So if we go back to

08:09.200 --> 08:18.800
our building steps, we can apply, we can match a software with every step. So for the concept

08:18.800 --> 08:26.960
we can use Krita for the modeling of Blender. As you will see, Blender is widely used to

08:26.960 --> 08:33.680
manage most of the steps. The shading is a combination of both because Blender will manage

08:33.680 --> 08:39.160
the materials, can handle the texture drawing too, but Krita is a little bit better for

08:39.160 --> 08:47.120
that. For the rigging, Blender can be used. It's not an awesome software for that, but

08:47.120 --> 08:54.000
they want to change everything for their upcoming releases. If they are able to achieve what

08:54.000 --> 09:01.080
they want, it's going to be really awesome. For the shots, we see just right after that

09:01.080 --> 09:10.080
it could be used for the animatic. For the layout, of course animations, it performs

09:10.080 --> 09:17.720
very well, but there are still some steps where it's not yet the right software. For

09:17.720 --> 09:22.760
everything related to FX, there is still a software named Udini that is widely used by

09:22.760 --> 09:29.800
the industry and people won't change it for Blender right now. For the rendering step,

09:29.800 --> 09:36.280
they have a very nice rendering engine, but when I talk with people from the industry

09:36.280 --> 09:42.600
who does really, really complex images, they told me that it's not powerful enough for

09:42.600 --> 09:49.640
the moment, especially because they don't have what we name San Assembly features. The

09:49.640 --> 09:54.400
idea of San Assembly tools is to bring everything that is needed to build a scene, add some

09:54.400 --> 10:08.040
light and have the capability to handle a lot of vertices and animation keys. For that,

10:08.040 --> 10:15.920
there is no right software. There is no competing software to do that. The proprietary software

10:15.920 --> 10:21.160
are much better. We have the same issue with compositing where there is Netrun, which is

10:21.160 --> 10:28.560
a very interesting software, but they have governance issues. I don't know if it's still

10:28.560 --> 10:36.280
maintained and the software currently is not as powerful as proprietary ones. About 2D,

10:36.280 --> 10:43.640
there is something new. It is that Blender recently introduced green spins here, so it

10:43.640 --> 10:50.320
allows to do 2D inside Blenders. It's really a huge change because prior to that, there

10:50.320 --> 10:56.920
was no software to do 2D animations in the open source world that are efficient. Now,

10:56.920 --> 11:05.160
it allows to use Blender on the world pipeline of a 2D production the same way as we use

11:05.160 --> 11:15.240
it on a 3D production. There are still some limitations about every vectorized picture.

11:15.240 --> 11:20.640
People still prefer Illustrator to Inkscape. I used Inkscape personally for some design

11:20.640 --> 11:26.960
stuff. It works pretty well, but it seems that Illustrator is still better. Krita has

11:26.960 --> 11:33.640
many good things, but it's still too limited. But people told me to manage big images. I'm

11:33.640 --> 11:38.880
not sure, but this is what some people from the industry told me. Like I told you, Netrun

11:38.880 --> 11:45.880
is nice but not as good as the competition. There is no good software for effects and

11:45.880 --> 11:51.480
no efficiency in assembly tools. Now, let's talk about the pipeline because

11:51.480 --> 11:56.440
I talked a lot about the building steps, but there is another important part. It is the

11:56.440 --> 12:04.280
glue between all these steps. First, let's see this very cute rabbit because this presentation

12:04.280 --> 12:12.160
is way too serious. I wanted to add this. It's not made with mid-journey or similar.

12:12.160 --> 12:17.520
It's with pictures. I apologize for the author. I totally forgot to mention it and I forgot

12:17.520 --> 12:22.840
the name. I'm really sorry for that. The rabbit is super cute.

12:22.840 --> 12:30.160
Now we can go back to the pipeline. The first brick that is needed to build an efficient

12:30.160 --> 12:35.520
pipeline is a production tracker. The name is very misleading because it's not about

12:35.520 --> 12:41.840
tracking. It's about collaborating. People use it to dispatch tasks, to ship deliveries,

12:41.840 --> 12:48.920
and then to talk around it. There are many single-page applications and they have a strong

12:48.920 --> 12:56.520
API to allow every tool to connect to it. It's very important because there is tons

12:56.520 --> 13:03.300
of interesting data for every user in the studio and it's important to be able to access

13:03.300 --> 13:09.480
all of them. Basically, what allows a production tracker, it's a very simplified version, but

13:09.480 --> 13:16.160
production managers dispatch tasks, artists do the work, direct us with the deliveries

13:16.160 --> 13:22.800
and send feedback to artists who end the iterate together and tools grab and post new data

13:22.800 --> 13:28.400
into it. The other main element is the asset manager.

13:28.400 --> 13:38.520
The asset manager is basically what we... Sorry, I just do it the other way. You can see the

13:38.520 --> 13:44.840
animation production as a big graph. Every elements are tied together, especially because

13:44.840 --> 13:51.960
when, for instance, you do an animation, we'll need all the several models to run the animations,

13:51.960 --> 13:58.080
but we will need specific versions of every model and you have to represent that way or

13:58.080 --> 14:06.760
not. Every node can be considered as the element, the delivery. The links, it depends on how

14:06.760 --> 14:18.240
you want to represent things, but the edges, sorry, can be the operations or the links

14:18.240 --> 14:25.360
between the elements. Of course, everything is stored, every elements are stored on the

14:25.360 --> 14:32.240
file system. Object storage could be used, but in reality, I never seen any studio using

14:32.240 --> 14:42.600
object storage. Everything is saved on shared file system, but still it can be quickly messy,

14:42.600 --> 14:48.360
so an abstraction is needed to manage all these files. Here is an example of graph.

14:48.360 --> 14:54.080
I go fast because I thought that I had 25 minutes to do the presentation. I only have

14:54.080 --> 15:05.640
20, so I'm going to go a little bit faster. Here are some examples of enforce file pass

15:05.640 --> 15:12.160
and file names. What you have to keep in mind is that it should be configurable because

15:12.160 --> 15:17.360
every studio has a different way to store stuff. For asset manager, it's a real challenge

15:17.360 --> 15:24.920
to be able to manage everything. The third part of the pipeline is made of one of the

15:24.920 --> 15:30.520
main bricks of a pipeline is the render manager. In an animation production, you have a ton

15:30.520 --> 15:38.520
of very long jobs to process. For that, you need a render farm that will manage everything

15:38.520 --> 15:45.880
properly and you have a tool to be able to follow each task. You have a suite of small

15:45.880 --> 15:53.200
tools that are used in the productions to have more efficient work.

15:53.200 --> 16:02.960
Now, because the goal of this talk is to build an open source stack for how animation production.

16:02.960 --> 16:08.280
For the production tracker, we use Kitsu. This is a software we developed at CGWire.

16:08.280 --> 16:16.880
With the web applications, we choose very common, very standard libraries and database

16:16.880 --> 16:24.520
to build it. We rely a lot on FFmpeg to normalize all the videos that are passed through Kitsu.

16:24.520 --> 16:30.280
Currently, we don't do crazy stuff with it. The only cool stuff we do is that we push

16:30.280 --> 16:40.240
every FFmpeg jobs into an HICOP, no matter the cluster. I hope that for the future, for

16:40.240 --> 16:45.680
the dimensions, we will be able to talk more about how we manage everything and to show

16:45.680 --> 16:52.240
you that we do super cool stuff with it. Currently, we use it in a very simple way. We choose

16:52.240 --> 16:58.760
a very standard stack to ensure that everyone can contribute and can deploy very easily

16:58.760 --> 17:05.920
the applications if they don't want to use our services and its license under a VPN.

17:05.920 --> 17:13.360
This is how it looks. We have here the list of elements to build, and here we have the

17:13.360 --> 17:19.880
steps needed to build the elements. I won't go further on this because it will require

17:19.880 --> 17:27.760
a full presentation. Then for the asset manager, there is a new tool that is emerging. Its

17:27.760 --> 17:34.320
name is Heian. Formerly, it was OpenPipe. Basically, it allows us to do what I talked

17:34.320 --> 17:43.760
about before. It allows us to manage all the files, but in an abstract way, so artists

17:43.760 --> 17:49.880
can just manage versions and don't think about how it is stored. It comes with many tools

17:49.880 --> 17:54.320
to push things to other tools. It looks a little bit like that. It's a little bit more

17:54.320 --> 18:02.880
or a little bit less sexy, but it's efficient. On the left, you have the file hierarchy.

18:02.880 --> 18:09.160
When you select a step, a building step, you have all the versioning of all the files.

18:09.160 --> 18:16.800
Then you have all the operations you can do on files, which makes it really several times

18:16.800 --> 18:24.040
to everyone in the studio. What you have to understand is that artists are really focused

18:24.040 --> 18:30.360
on making beautiful pictures, but they don't. If they are not senior, they don't think about

18:30.360 --> 18:37.800
if their production is usable by the next step. These kinds of tools, we help them to

18:37.800 --> 18:46.320
do cleaner stuff that are reusable by their colleagues. There is another interesting software,

18:46.320 --> 18:57.360
which is Libroflow or Cabaret. I like it especially because it's really a community thing. It was

18:57.360 --> 19:04.880
done by a technical director in a studio named Supermonks. Another studio named Le Fespatial

19:04.880 --> 19:11.600
used it. Together, they built that software. It's fully open source, so it's community-led.

19:11.600 --> 19:16.600
Two previous tools are company-led, and this one is community-led, so it's very cool to

19:16.600 --> 19:24.840
see that alternative emerging. For the render manager, we have Flaminco

19:24.840 --> 19:30.760
by Blender Foundation, which is dedicated to small teams. We have OpenQ, which is managed

19:30.760 --> 19:39.160
by the Academy Software Foundation, which allows bigger studio to rely on the first

19:39.160 --> 19:45.320
solutions. Here, it's an example of a full open source pipeline, almost full open source

19:45.320 --> 19:56.560
pipeline used by Le Fespatial on a feature film named Sciren, which will be soon in theaters.

19:56.560 --> 20:04.000
And here, it's almost a conclusion, but here, it is how animation of open source stack.

20:04.000 --> 20:09.760
Now we have it. It's very new for the industry, so I'm super happy to be able to show it to

20:09.760 --> 20:17.760
you today. To conclude, now we have an open source stack

20:17.760 --> 20:23.360
that covers almost all the use cases needed to build an animation movie. Of course, it's

20:23.360 --> 20:29.400
mainly led by the Blender Foundation, but there are not much alternatives to Blender

20:29.400 --> 20:34.280
and the open source work, but it's great that it exists, and the work they do is really

20:34.280 --> 20:39.280
amazing. The pipeline stack is covered by what I described.

20:39.280 --> 20:45.440
People don't see that aspect, and we tend to forget it. There are still some changes

20:45.440 --> 20:53.080
in FX, vectorials, drawing, and scene assembly, and compositing, of course. But yes, soon

20:53.080 --> 20:57.120
it will be fixed, I hope. Thank you for your attention, and if you have

20:57.120 --> 21:04.120
any questions, I will be glad to answer after them.

21:04.120 --> 21:11.120
Any questions from the floor? Do you think that Blender will at some point

21:11.120 --> 21:18.960
with no geometry nodes will get to the effects of the thing it will be able to obtain?

21:18.960 --> 21:26.440
Do you think that Blender at some point will be able to compete with Woudini?

21:26.440 --> 21:33.720
I know they do a force on that aspect. On a regular basis, they had some features about

21:33.720 --> 21:39.640
this. The community is very active, so at some point it could change. But I think their

21:39.640 --> 21:45.800
focus is not on it right now, but I cannot talk for them because I'm not part of the

21:45.800 --> 21:52.440
Blender Foundation, but we talk a lot with them. Is there any other questions?

21:52.440 --> 22:11.760
You mentioned Krita, but not GIMP. GIMP is not a good reputation in the animation industry.

22:11.760 --> 22:16.120
I don't understand why because it's a very nice software, but I think that people doing

22:16.120 --> 22:23.120
very complex stuff can find what they want. But from my experience of GIMP is that they

22:23.120 --> 22:28.040
keep on improving it. They really improved the UI, so maybe at some point we will see

22:28.040 --> 22:33.040
more and more usage of GIMP. But I hope because I really love this software too.

22:33.040 --> 22:42.040
Do you have similar stuff for sound?

22:42.040 --> 22:48.040
Do we have similar stuff for sound? I don't know. We are only focused on images.

22:48.040 --> 23:14.040
Thank you.

1
0:00:00.000 --> 0:00:18.380
All right, sorry for the delays, I've had a little bit of technical difficulties.

2
0:00:18.380 --> 0:00:27.240
My name is Flores van Gheil and since 2010 I'm an open source enthusiast and since 2014

3
0:00:27.240 --> 0:00:33.960
I joined my first FOSDEM as a speaker. After that I became an open source, cross open source fanatic.

4
0:00:33.960 --> 0:00:39.000
So I really, really love and appreciate when different open source projects come together

5
0:00:39.000 --> 0:00:46.000
and they strengthen each other's power. And for RocketChat I'm a community liaison, so

6
0:00:46.000 --> 0:00:52.560
I help to engage with community and support and so forth.

7
0:00:52.560 --> 0:00:57.880
So let's get to the chase while we're here, skating open source real time and messaging

8
0:00:57.880 --> 0:01:05.000
systems for the millions. It starts off with what is RocketChat, who here knows what is

9
0:01:05.000 --> 0:01:09.880
RocketChat? We see a few hands there, like half the room already knows it, so that's

10
0:01:09.880 --> 0:01:15.440
great, lots of engagement. In general people know about this side of the story, which is

11
0:01:15.440 --> 0:01:21.600
like team chat, like you know from Slack or Teams if you use that stuff. There's different

12
0:01:21.600 --> 0:01:27.440
other variants, also open source. The cool thing about RocketChat is that it is not the

13
0:01:27.440 --> 0:01:32.360
master of chat, that it wants to control all the chat, no? It wants to include as much

14
0:01:32.360 --> 0:01:37.600
different chat services as possible. Thus if you look up there is Army Channel, imagine

15
0:01:37.600 --> 0:01:43.680
you have like a company with support or sales offices and those have clients. And clients

16
0:01:43.680 --> 0:01:50.000
they don't want to install yet another thing on their phone. No, what they do, they have

17
0:01:50.000 --> 0:01:54.800
email, they have SMS, they have WhatsApp, they have WeChat, they have whatever telegram,

18
0:01:54.800 --> 0:02:00.320
you name a few, so I'm not commercializing one of those. And it will connect via an app

19
0:02:00.320 --> 0:02:05.240
to the Army Channel, meaning that the people in the backlog who have to process that, they

20
0:02:05.240 --> 0:02:12.240
can directly route it and solve the issues. On top of that you can add bots with bot press

21
0:02:12.240 --> 0:02:19.480
or Rasa and that help to automate the task of the people doing those great chores that

22
0:02:19.480 --> 0:02:26.960
make business. Since version 5 there is the option with the metrics to federate, not just

23
0:02:26.960 --> 0:02:34.200
to another RocketChat, but also to other home services. So it's not longer like we're on

24
0:02:34.200 --> 0:02:41.240
an island sitting and please come to us and chat with us. No? Actively federating and

25
0:02:41.240 --> 0:02:48.760
working and collaborating together, all of us. And then as an extra sauce on the cake,

26
0:02:48.760 --> 0:02:53.840
that has a very extended API, not just the normal service calls that you know for creating

27
0:02:53.840 --> 0:02:59.040
users and so forth. No, it also has a real time API, which means that inside your app

28
0:02:59.040 --> 0:03:05.620
or game you can directly engage with the message flows and with the chat. Then when it comes

29
0:03:05.620 --> 0:03:12.920
down to voice calling, RocketChat is agnostic, it's not part of the core to, we support mainly

30
0:03:12.920 --> 0:03:20.760
the chat. So for voice calling you can make your choices. You can use Jitsi from out of

31
0:03:20.760 --> 0:03:29.160
the box, you can add Big Blurton or if needed for corporate reasons, Teams or Google or

32
0:03:29.160 --> 0:03:38.120
a few others. So that's about RocketChat. Now, RocketChat is built like many other software

33
0:03:38.120 --> 0:03:44.400
architectures as a monolith, meaning that it is one service that's supposed to do everything

34
0:03:44.400 --> 0:03:49.840
and that is pretty nice if you have a medium sized organization. Except when things start

35
0:03:49.840 --> 0:04:00.480
to scale, you get running into issues. So it's based upon MongoDB, that's important

36
0:04:00.480 --> 0:04:07.740
to know. Originally it was built in Meteor because at the time it was the best and fastest

37
0:04:07.740 --> 0:04:17.480
and most efficient route of making a real time chat service. So this monolith, you can

38
0:04:17.480 --> 0:04:25.880
scale it horizontally by adding more and combining more monoliths, which obviously has an extent

39
0:04:25.880 --> 0:04:33.480
and you cannot reach beyond a certain point of users. So what RocketChat did after version

40
0:04:33.480 --> 0:04:40.240
five going into six is re-architecting this monolith into a microservices architecture.

41
0:04:40.240 --> 0:04:46.960
You still have the same MongoDB cluster, but on top of there, there is different services

42
0:04:46.960 --> 0:04:52.960
like authentication and presence and the actual chats. And those get divided and they can

43
0:04:52.960 --> 0:05:00.120
fill individually and be restarted individually. So you don't have a dependency that if one

44
0:05:00.120 --> 0:05:06.800
little thing breaks, that your whole system is down. And on top of that, it has the ability

45
0:05:06.800 --> 0:05:15.400
to keep on scaling this way. In order to change this architecture, a new library was chosen.

46
0:05:15.400 --> 0:05:24.080
In this case, it's called molecular and there is alternatives on the market, but due to

47
0:05:24.080 --> 0:05:33.400
functionality and exchange of libraries and code, this module was chosen. It's an MIT

48
0:05:33.400 --> 0:05:39.760
license, extensible, and the most important part is this part here. We want to use nuts,

49
0:05:39.760 --> 0:05:48.480
but it can also work great with MQTT and other messaging brokers like Kafka. Furthermore,

50
0:05:48.480 --> 0:05:57.160
there's many adapters, caching, and extra great features to add upon. So in this re-architecting,

51
0:05:57.160 --> 0:06:04.120
this monolith was the primary choice. Why is that? So there is options which are actually

52
0:06:04.120 --> 0:06:10.880
faster. You see here this one, Kotel, like faster, but the differences between having

53
0:06:10.880 --> 0:06:18.320
your remote actions, remote calls, and your internal calls. Oh no. Next cloud is acting

54
0:06:18.320 --> 0:06:34.160
off. Sorry for that. And then go back to this one. Still solid. The cool thing about Monocler

55
0:06:34.160 --> 0:06:40.800
is that you can change between these remote and local actions and you can switch them

56
0:06:40.800 --> 0:06:47.800
within a proxy. And due to this flexibility, that's the reason why this is chosen as the

57
0:06:47.800 --> 0:06:56.520
primary driver for the architecture of microservices. And then nuts is pretty straightforward. I

58
0:06:56.520 --> 0:07:04.200
imagine that most people in the room have heard about nuts as a standard. It's open source

59
0:07:04.200 --> 0:07:11.920
Apache 2, very modern, fast. There's very different ways of implementation examples.

60
0:07:11.920 --> 0:07:19.000
And the main downside is that it doesn't support queues. And that is solved by inside the Mongo

61
0:07:19.000 --> 0:07:29.120
queue runner that will take over the division of those queue tasks. And that has also great

62
0:07:29.120 --> 0:07:36.280
advantages due to using these libraries. It is possible to make interactive extensions

63
0:07:36.280 --> 0:07:44.440
for developers. And that's also something that we've been facing with coming from Meteor

64
0:07:44.440 --> 0:07:50.320
to React and TypeScript for the apps is that it's much easier for modern day's developer

65
0:07:50.320 --> 0:08:01.360
to adopt the software. And thus the community has more impulse for growth. Perfect. Two

66
0:08:01.360 --> 0:08:09.280
minutes left. So in results, if we look down, this one is the monolith. It's built on 4K

67
0:08:09.280 --> 0:08:14.080
concurrent users due to the fact that that was the maximum that it could hold and could

68
0:08:14.080 --> 0:08:23.720
serve. And doing so, it has usage of 12 gigabytes of RAM as well as 15 virtual CPUs on this

69
0:08:23.720 --> 0:08:32.280
Amazon instance to test it. And for the new architecture, the microservices, it could

70
0:08:32.280 --> 0:08:39.960
hit over 50K with ease. But for making the tests equally, the test was made with 4K concurrent

71
0:08:39.960 --> 0:08:46.880
users. And then you see that the load on the CPUs and the usage of memory is actively reduced.

72
0:08:46.880 --> 0:08:54.800
It's only using three CPUs and five gigabytes of memory to perform the same amount of volume

73
0:08:54.800 --> 0:09:06.560
of users who are actively chatting. So if you want to learn more about RocketChat, this

74
0:09:06.560 --> 0:09:12.400
is our main place where we communicate within the company. It's open.rocket.chat. And it's

75
0:09:12.400 --> 0:09:17.680
open for communities, open for support. Everything happens in one place. Sometimes there's a

76
0:09:17.680 --> 0:09:23.120
little bit of an earthquake due to some updates or new version which is deployed. But within

77
0:09:23.120 --> 0:09:30.200
30 minutes, that's all okay. That means that we take our own pain and thus not leave the

78
0:09:30.200 --> 0:09:36.160
pain at our clients. And the project itself you can find on GitHub. And if you GitHub

79
0:09:36.160 --> 0:09:42.600
one little bit up, there is many different implementations and add-ons and libraries

80
0:09:42.600 --> 0:09:49.440
that help you to integrate RocketChat within your applications as well as connect with

81
0:09:49.440 --> 0:09:55.080
its APIs and its services. I still have 30 seconds left for questions.

82
0:09:55.080 --> 0:10:07.600
So, but my question is, you mentioned I seem to recall that not that long ago, you guys

83
0:10:07.600 --> 0:10:14.840
announced that you choose to use the matrix as a protocol. What would you say if someone

84
0:10:14.840 --> 0:10:21.880
was thinking about choosing one? Like what does RocketChat add on top of what matrix

85
0:10:21.880 --> 0:10:22.880
provides?

86
0:10:22.880 --> 0:10:26.640
I've asked this question many times at the booth and it's pretty easy to answer. So,

87
0:10:26.640 --> 0:10:31.200
what is the added value of RocketChat compared to the matrix because the matrix is already

88
0:10:31.200 --> 0:10:38.760
really, really great if I translate it correctly. And that is actually within tech-savviness.

89
0:10:38.760 --> 0:10:44.360
All of us here at Fostom, we're all so to call nerds or geeks or very technical people

90
0:10:44.360 --> 0:10:52.960
that can take this matrix and make it work. And specifically if you look at marketing

91
0:10:52.960 --> 0:11:00.960
or sales or other roles that are not so tech-savvy, it's much easier to use RocketChat, specifically

92
0:11:00.960 --> 0:11:07.960
with the omni-channel and engaging with the customers. UI looks a bit like Slack, however

93
0:11:07.960 --> 0:11:13.920
it's more slick and it's faster. So, it's easier to adapt and that would be the incentive

94
0:11:13.920 --> 0:11:18.240
to say, okay, go for the RocketChat. If you have a tech-savvy organization and you want

95
0:11:18.240 --> 0:11:24.840
to deep dive and include WebRTC and have all these components under your own control, go

96
0:11:24.840 --> 0:11:32.160
for the matrix. Both have on-prem possibilities, data interoperability, security and to end

97
0:11:32.160 --> 0:11:38.320
encryption. So, that's not the real cause for making this decision.

98
0:11:38.320 --> 0:11:51.760
Any other questions? Okay. Then I thank you very much for attending this late, the last

99
0:11:51.760 --> 0:11:58.160
slot. And if any questions pop up, feel free to join open RocketChat, contact me, contact

100
0:11:58.160 --> 0:12:09.960
Judah, contact Gabriel or anyone that is within there. Thank you.


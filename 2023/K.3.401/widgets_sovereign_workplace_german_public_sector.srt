1
0:00:00.000 --> 0:00:11.840
Welcome, everybody. Good morning to our talk. All the people on stream on video on demand

2
0:00:11.840 --> 0:00:16.480
and of course here in the dev room. My name is Kim and I'm here together with my colleague

3
0:00:16.480 --> 0:00:23.380
Oliver. We are from Nordic and we are going to talk to you about the matrix widgets and

4
0:00:23.380 --> 0:00:29.600
particularly those we develop for the sovereign workplace project in the German public sector.

5
0:00:29.600 --> 0:00:40.280
So, at first, quickly about us, Nordic is an IT consulting company based in Hamburg,

6
0:00:40.280 --> 0:00:47.440
Germany. We are about 40 IT professionals and we, among other things, we develop fast

7
0:00:47.440 --> 0:00:54.000
matrix integrations for productivity software in the public sector in the so-called sovereign

8
0:00:54.000 --> 0:01:03.240
workplace project. We are here today to provide you some insights from that we gained in the

9
0:01:03.240 --> 0:01:11.240
last couple of years. So, what's the sovereign workplace? Let's take a step back and introduce

10
0:01:11.240 --> 0:01:18.200
you all to it. It's a project with the goal of providing IT services to public administration

11
0:01:18.200 --> 0:01:23.520
in Germany and potentially also Europe. It's founded by the German federal ministry of

12
0:01:23.520 --> 0:01:31.000
the interior and community and one of the core aspects is to gain independence from

13
0:01:31.000 --> 0:01:39.840
US cloud services and to retain full control over your data. And there's this suit we call

14
0:01:39.840 --> 0:01:46.400
sovereign workplace which covers many use cases for productivity and it's achieved by

15
0:01:46.400 --> 0:01:51.400
combining the products from many different vendors which you can see on the right here.

16
0:01:51.400 --> 0:01:56.640
But all of this is open source software. So, yeah, you could say this whole project also

17
0:01:56.640 --> 0:02:03.600
supports and maybe funds some of the open source projects here. We could talk a lot

18
0:02:03.600 --> 0:02:07.920
more about the whole sovereign workplace project and that could be a whole talk for itself

19
0:02:07.920 --> 0:02:12.920
on another track but, of course, we are here to talk about matrix and the matrix staff

20
0:02:12.920 --> 0:02:19.440
room. So, yeah, quick overview here. We can see the Univention corporate server and Key

21
0:02:19.440 --> 0:02:25.880
Cloak which implements identity management in the stack. There's Groupware which is done

22
0:02:25.880 --> 0:02:35.680
by OpenXchange. There's Cloud Storage by Nextcloud. There is an office suit which integrates

23
0:02:35.680 --> 0:02:41.400
with Nextcloud very tightly which is Color Barra online. And, of course, there's video

24
0:02:41.400 --> 0:02:47.440
conferencing which is done with JITC right now and perhaps in the future using matrix

25
0:02:47.440 --> 0:02:56.120
natively. And, of course, there's messaging which is done natively on matrix and particularly

26
0:02:56.120 --> 0:03:04.280
using Element as a client. How are we involved in this? Well, together with Element we provide

27
0:03:04.280 --> 0:03:11.120
this real-time communications component which is messaging and also video conferencing.

28
0:03:11.120 --> 0:03:18.080
So there's chat and video. And in particular we are extending this chat use case using

29
0:03:18.080 --> 0:03:26.040
widgets for some specific use cases. So, and this is the crucial part of this talk. The

30
0:03:26.040 --> 0:03:30.800
idea is to provide better integration with other components in the stack and build new

31
0:03:30.800 --> 0:03:37.880
work solutions. So you might be familiar with the concept of a widget and we've seen it

32
0:03:37.880 --> 0:03:44.840
in the previous talks but still I want to summarize a bit. As I said, we can use widgets

33
0:03:44.840 --> 0:03:50.360
to extend the regular chat client functionality for specific use cases and I brought you some

34
0:03:50.360 --> 0:03:56.360
examples here. So essentially it's an option and also this was set before but it's an option

35
0:03:56.360 --> 0:04:05.120
to embed some kind of web app into your existing matrix client and display more functions right

36
0:04:05.120 --> 0:04:10.480
there. So, for example, you can put it in the right bar like Hookshot does here or you

37
0:04:10.480 --> 0:04:18.400
can pin it to the top of the room and it will even adjust to your theme like this countdown.

38
0:04:18.400 --> 0:04:23.960
And there's more there. You can add a lot of widgets at once and see all of them at

39
0:04:23.960 --> 0:04:34.120
once in multiple places. Of course, there's video conferencing which you can also maximize

40
0:04:34.120 --> 0:04:41.280
to view all of the people in the video conference rather than having chat. And, yeah, there's

41
0:04:41.280 --> 0:04:45.720
also this half full screen mode where the chat moves to the right side and you can see

42
0:04:45.720 --> 0:04:54.400
the widgets in full screen-ish style. And there's more. So actually if you're following

43
0:04:54.400 --> 0:05:00.460
Fostom remotely you might find this a familiar site. So you are actually using widgets right

44
0:05:00.460 --> 0:05:07.360
now to watch this and there's this schedule, there's the live stream and also from the

45
0:05:07.360 --> 0:05:15.320
editor side there are widgets to support us. So if you followed closely or you are very

46
0:05:15.320 --> 0:05:23.720
familiar you might have noticed, wait a minute, this is a bit more than just static web pages.

47
0:05:23.720 --> 0:05:28.840
So actually there's a thing called the widget API and that allows your embedded page to

48
0:05:28.840 --> 0:05:38.800
interact with the client but also with the matrix. So for example, from our widgets we

49
0:05:38.800 --> 0:05:45.960
can also send messages, read messages to the room. So one way to explain widgets would

50
0:05:45.960 --> 0:05:55.160
be you could say these are some kind of limited matrix line for a specific use case. And you

51
0:05:55.160 --> 0:06:00.800
can build a lot of things. Really there are endless possibilities and now Oliver is going

52
0:06:00.800 --> 0:06:02.680
to show you a bit more about how that works.

53
0:06:02.680 --> 0:06:13.720
Thanks Kim. So let's head a step back. We're now back. It's a concept that it's a website

54
0:06:13.720 --> 0:06:22.600
that's embedded. So you have an iframe, you'll see it soon. And the iframe is just any static

55
0:06:22.600 --> 0:06:29.840
website and that website has an API that can be used to communicate with the clients. So

56
0:06:29.840 --> 0:06:37.680
for example, in this case element. And then you have the other option that the element

57
0:06:37.680 --> 0:06:43.560
client could be connected to your home server. So it's like I would say a pass through API

58
0:06:43.560 --> 0:06:50.440
which gives the comments of the widget to the home server via the widget API. And with

59
0:06:50.440 --> 0:06:56.040
this API you can do a lot of stuff. So one thing that is important is that this iframe

60
0:06:56.040 --> 0:07:01.640
also allows to have like an isolation. So even though you embed a website there, it's

61
0:07:01.640 --> 0:07:08.160
not like having full access to what the element does. Everything that you do has to be done

62
0:07:08.160 --> 0:07:14.400
via the widget API.

63
0:07:14.400 --> 0:07:20.320
So from the feature perspective of the widget API you can separate it into two parts. So

64
0:07:20.320 --> 0:07:25.400
on the one side you have everything that is related to displaying widget interacting with

65
0:07:25.400 --> 0:07:31.800
the client. For example, Kim showed you that you can have different display modes. There

66
0:07:31.800 --> 0:07:37.480
are also even more. For example, you can have modal widgets that then displayed in a full

67
0:07:37.480 --> 0:07:44.840
screen view. You can set things like always on top where the widget is displayed in the

68
0:07:44.840 --> 0:07:51.560
right bottom corner and it's always there even if you switch to a different room. And

69
0:07:51.560 --> 0:07:57.040
you can do capability requests. I will come to a second what that means. And then you

70
0:07:57.040 --> 0:08:03.160
have the second group of features which is like matrix or room interaction. So that is

71
0:08:03.160 --> 0:08:09.360
everything about sending events, receiving events, state events, room events, or two

72
0:08:09.360 --> 0:08:18.240
device messages as Florian also mentioned today. Some special things like reading relations

73
0:08:18.240 --> 0:08:27.600
and requesting OTC identity tokens that you can use at another service to identify yourself.

74
0:08:27.600 --> 0:08:32.600
So if you go now back to this reading and sending messages, you notice that actually

75
0:08:32.600 --> 0:08:39.320
you could use matrix for non-chat application where you store your data in the room. You

76
0:08:39.320 --> 0:08:48.760
can see it is like a database. We have the term today. And store your stuff there and

77
0:08:48.760 --> 0:08:56.440
have all the benefits of the matrix protocol that you would have for chat two. For example,

78
0:08:56.440 --> 0:09:00.280
you can store your data and have it end to end encrypted. You can collaborate with others

79
0:09:00.280 --> 0:09:06.480
via federation. And all these features are already there and you can see it as like a

80
0:09:06.480 --> 0:09:17.560
nice back end for building collaboration apps. So I already mentioned this word, widget capabilities.

81
0:09:17.560 --> 0:09:25.440
So one issue that you would have if you like provide all these features just to an app

82
0:09:25.440 --> 0:09:31.520
without like having any security, they could do a lot. So actually I could build a widget

83
0:09:31.520 --> 0:09:38.360
that reads all your data and post it somewhere else like which chats you write or does stuff

84
0:09:38.360 --> 0:09:43.440
in your name, for example, it could send messages in your name. Therefore, there is a security

85
0:09:43.440 --> 0:09:49.960
mechanism with this widget capabilities. And it's actually quite similar to what Android

86
0:09:49.960 --> 0:09:57.120
is doing with permissions. So your app, once it is embedded and once you started it, so

87
0:09:57.120 --> 0:10:02.800
every administrator can embed a widget into your room. Once it's embedded, you have the

88
0:10:02.800 --> 0:10:11.840
chance to request specific permissions for your app. And then the user gets a screen

89
0:10:11.840 --> 0:10:17.320
like this. It's quite a long list and can explicitly allow data to be shared with the

90
0:10:17.320 --> 0:10:23.720
widget. And that way you have your control over your data. You don't share anything that

91
0:10:23.720 --> 0:10:31.080
you don't want to share with the third party side. And only then the widget has access

92
0:10:31.080 --> 0:10:59.360
to it.

93
0:10:59.360 --> 0:11:06.320
But maybe grouping and writing better text can help here to avoid this situation where

94
0:11:06.320 --> 0:11:15.520
users just click accept without thinking about what they are sharing. So now I would talk

95
0:11:15.520 --> 0:11:21.520
a little bit about with you about the status of the widget API. So right now it's only

96
0:11:21.520 --> 0:11:30.600
supported completely in element web and desktop. So there is support for widgets in Android

97
0:11:30.600 --> 0:11:37.840
and IOS. But it's more like static web pages without the widget API. And the widget API

98
0:11:37.840 --> 0:11:45.360
is what it gives is this interactivity stuff that you wouldn't have with just a static

99
0:11:45.360 --> 0:11:52.280
web page. Yeah, why is it only supported in the two clients? I think there are at least

100
0:11:52.280 --> 0:11:58.840
two reasons. One reason is that it's not part of the magic spec yet. So there is like a

101
0:11:58.840 --> 0:12:06.080
draft here, which is a spec. But the draft is a bit outdated. It collects some of the

102
0:12:06.080 --> 0:12:12.200
MSCs around it. But a lot of the MSCs are not part of the spec yet. So it makes it,

103
0:12:12.200 --> 0:12:17.200
I guess, quite hard to develop based on it. So it makes it hard for a consumer of the

104
0:12:17.200 --> 0:12:21.540
widget API to develop it. But it would also make it hard as an embedder because you always

105
0:12:21.540 --> 0:12:29.400
have to go through the MSCs, look for stuff that you need and build it. But I think it's

106
0:12:29.400 --> 0:12:34.560
not the only reason why it's not yet fully supported by every client. I think it's also

107
0:12:34.560 --> 0:12:43.520
the situation that it's maybe not the perfect implementation yet. And what I mean with it,

108
0:12:43.520 --> 0:12:49.960
I want to talk about it in the next slide. So if right now I want to extend the widget

109
0:12:49.960 --> 0:12:54.080
API with a new feature, it's not feature complete. So it doesn't support everything you have

110
0:12:54.080 --> 0:12:59.440
in the magic GSS decay. It has a subset of features. But if you want to bring a new feature

111
0:12:59.440 --> 0:13:05.400
into it, right now we have to follow this process. So let's assume that I want to support

112
0:13:05.400 --> 0:13:10.920
uploading content into the media repository. So it would be quite nice for some use cases.

113
0:13:10.920 --> 0:13:18.560
Then I would create an MSC, which I think itself is not a problem. You look into the

114
0:13:18.560 --> 0:13:23.600
current spec of the client server API, look at the behavior. For example, uploading requires

115
0:13:23.600 --> 0:13:30.720
like thinking about Crota, thinking about limits, size limits and stuff like that. And

116
0:13:30.720 --> 0:13:40.920
then how the API responds this information back to you. And so you look at the spec,

117
0:13:40.920 --> 0:13:45.560
copies that behavior. So it's the same. And think about how you integrate into the widget

118
0:13:45.560 --> 0:13:52.720
API. Then the next step you think about like capabilities. How can I prevent users from

119
0:13:52.720 --> 0:13:59.600
doing stuff that they shouldn't do with it? Or how can I keep control about it? And then

120
0:13:59.600 --> 0:14:03.920
you have like a base to start the implementation. You would probably implement it in the magic

121
0:14:03.920 --> 0:14:11.080
switches API repository, which is the API that both embedders of a widget, of widgets

122
0:14:11.080 --> 0:14:17.400
used, but also the widget itself. And the next step you would implement it in element.

123
0:14:17.400 --> 0:14:22.120
And if there would be more clients that support it in all other clients that you want to support

124
0:14:22.120 --> 0:14:28.680
it. And that's actually a lot of work. And just for something that was already there,

125
0:14:28.680 --> 0:14:34.800
right? So if you wouldn't use widgets, you could upload files with the client server

126
0:14:34.800 --> 0:14:41.320
API. And then you notice that you can upload files, how to download them, start the process

127
0:14:41.320 --> 0:14:48.640
over again. So I think it's not the problem with the MSC process, but the problem is that

128
0:14:48.640 --> 0:14:54.320
you have to copy stuff that is already there. So behavior that is already there, specs that

129
0:14:54.320 --> 0:14:58.000
is already there, it would be much better if I could just use the client server API

130
0:14:58.000 --> 0:15:07.800
from my widget. And there's already like the idea of doing that. So there's this MSC that

131
0:15:07.800 --> 0:15:17.880
thinks about how can I share like the client server API with my widget. And it's done in

132
0:15:17.880 --> 0:15:24.440
this example or in this specific MSC by sharing the access token with a widget, which brings

133
0:15:24.440 --> 0:15:30.640
like new challenges. For example, you have to think about capabilities again, but because

134
0:15:30.640 --> 0:15:36.080
if you share the whole access token, then you can do everything. So you would have to

135
0:15:36.080 --> 0:15:43.280
think about how can I restrict the access again. And one idea is there to use a scoped

136
0:15:43.280 --> 0:15:51.000
access tokens that have, there's actually an MSC and I missed it here. You use scoped

137
0:15:51.000 --> 0:15:57.720
access token to create a token that is like only possible, one can only access the stuff

138
0:15:57.720 --> 0:16:03.080
that the user previously allowed the widget. So that's something where you can mirror this

139
0:16:03.080 --> 0:16:09.840
capabilities that you've previous had with a widget API with this approach. So that would

140
0:16:09.840 --> 0:16:15.200
bring us a lot of benefits. So we would actually directly have this feature parity with a client

141
0:16:15.200 --> 0:16:23.480
server API. We can do, yeah, it may be also more performant because now we rely on element

142
0:16:23.480 --> 0:16:30.040
loading all the data and also relaying all our requests to the home server. You could

143
0:16:30.040 --> 0:16:36.440
directly talk to the home server and optimize our challenge or tools. And we would also

144
0:16:36.440 --> 0:16:43.840
assume that's a lot easier to implement because the widget and better, so a client like element

145
0:16:43.840 --> 0:16:50.360
only has to implement the exchange of the credentials to the widget, but not all the

146
0:16:50.360 --> 0:16:56.400
API calls that are available that have to be relayed and capabilities have to be checked

147
0:16:56.400 --> 0:17:02.200
and all that stuff. So it would make the implementation a lot easier and hopefully also bring it to

148
0:17:02.200 --> 0:17:07.560
more clients. There are some challenges. For example, it's actually quite good that element

149
0:17:07.560 --> 0:17:13.440
does all the stuff because as a widget author, you don't have to think about sync. You don't

150
0:17:13.440 --> 0:17:24.160
have to think about E2E, so end-to-end encryption. So it actually makes it quite simple, but probably

151
0:17:24.160 --> 0:17:33.600
that's some challenges we have to solve then. And there's also like this MSC propose to

152
0:17:33.600 --> 0:17:39.800
bring the access token via the URL into the widget, which might also not be the best way.

153
0:17:39.800 --> 0:17:46.280
Maybe OIDC, once it's there, can help us here to delegate the identity and access into the

154
0:17:46.280 --> 0:17:57.280
widget. In the morning, Florian already talked about this Mottoshka mode for element call,

155
0:17:57.280 --> 0:18:05.360
and there they're using the, I think it's called Widget Room Client from the Matix JS SDK, which

156
0:18:05.360 --> 0:18:12.040
is quite cool because it allows you to already start using the Matix JS SDK in your widget,

157
0:18:12.040 --> 0:18:20.680
and it feels like it's a Matix JS SDK, but it's relayed over the widget API and providing

158
0:18:20.680 --> 0:18:33.400
you later on maybe a better way to migrate to this state or to the style of API. So what

159
0:18:33.400 --> 0:18:38.400
would these features bring us or what can you already do with existing widget API? So

160
0:18:38.400 --> 0:18:43.800
you could build really cool, collaborative tools because you have like a real time communication

161
0:18:43.800 --> 0:18:52.200
channel. You can build, you will give some examples later, sorry, I don't give them. You

162
0:18:52.200 --> 0:18:58.760
can build stuff where you would actually normally have to build a backend, a communication layer,

163
0:18:58.760 --> 0:19:04.920
and all this stuff and think about a lot of stuff that Matix already has and brings. You

164
0:19:04.920 --> 0:19:11.640
can use the rooms for data storage. There are actually some tricks needed to do that

165
0:19:11.640 --> 0:19:24.200
efficiently that would be like a talk for itself, but you have the idea that all these

166
0:19:24.200 --> 0:19:30.640
applications that you build could just use it. I talked about real time communication

167
0:19:30.640 --> 0:19:39.280
before, so actually if you use Matix, you have some kind of very slow, real time communication.

168
0:19:39.280 --> 0:19:47.800
It's not suitable for building more complex or more quicker stuff like, for example, a

169
0:19:47.800 --> 0:19:55.480
game or a whiteboard or stuff like that. That's where, for example, Matix FTC comes into play

170
0:19:55.480 --> 0:20:02.040
where you have direct peer to peer connections or via SFUs. If you have access to that in

171
0:20:02.040 --> 0:20:10.640
your widget, that would allow you to build really great stuff. Actually, if you reach

172
0:20:10.640 --> 0:20:17.160
your limits with widgets, you always have the options to switch to more components,

173
0:20:17.160 --> 0:20:23.440
for example, like a bot that is invited into your room and helps you to do stuff that you

174
0:20:23.440 --> 0:20:32.160
could actually not do with just the widget at once on the user side. Kim will give now

175
0:20:32.160 --> 0:20:39.800
some examples for widgets that we built and also does a quick demo.

176
0:20:39.800 --> 0:20:48.560
Thank you, Oliver. Here are our use cases, the widget that we

177
0:20:48.560 --> 0:20:56.960
built. As you can see, there are four of them. The first one we built is the pulse widget.

178
0:20:56.960 --> 0:21:03.600
As you might know, there are pulse in element now. I believe they are coming to the spec.

179
0:21:03.600 --> 0:21:12.880
I think there's an MSC. These allow you to do some simple pulse, but you might have some

180
0:21:12.880 --> 0:21:19.680
cases where you actually need to do some more fancy things, like you want to even use parties,

181
0:21:19.680 --> 0:21:27.240
for example. We built this pulse widget that allows you to cover many more advanced use

182
0:21:27.240 --> 0:21:34.320
cases. In fact, this is already open sourced, the end of last year, I believe, in November,

183
0:21:34.320 --> 0:21:41.760
December sometime. You can find it online under this link on our GitHub.

184
0:21:41.760 --> 0:21:48.880
The next one is the bar cam widget. If you're unfamiliar with the bar cam, the idea is to

185
0:21:48.880 --> 0:21:54.600
meet in a group, collect some topics, and then build a schedule right there and then

186
0:21:54.600 --> 0:22:00.560
have an event based on that schedule. I'm going to show it to you in a minute. This

187
0:22:00.560 --> 0:22:07.160
is our second widget that is also now open source. Further, we are also developing a

188
0:22:07.160 --> 0:22:14.640
meetings widget, which allows you to create appointments within the widget. It will set

189
0:22:14.640 --> 0:22:22.320
up rooms for you and set up the possibility to have a video call right there. This is

190
0:22:22.320 --> 0:22:28.320
work in progress, but will also be open sourced. Then there's also the whiteboard widget we

191
0:22:28.320 --> 0:22:40.480
are building. Again, this is going to be open source at some point when it's finished in

192
0:22:40.480 --> 0:22:45.960
a beta state.

193
0:22:45.960 --> 0:22:50.840
As I said, I want to show you the bar cam widget for a bit. We actually got the chance

194
0:22:50.840 --> 0:23:00.480
to use it productively on Friday at our matrix community meetup. We have prepared a quick

195
0:23:00.480 --> 0:23:11.960
video for you. Right here on the left-hand side, you have the grid. You can, for example,

196
0:23:11.960 --> 0:23:18.320
add tracks. You can edit the track names. You can choose some icons on that axis. Of

197
0:23:18.320 --> 0:23:24.320
course, you can also modify the other axis, which are the different time slots. You can

198
0:23:24.320 --> 0:23:32.040
move stuff around, change the length of stuff. Then once that's set up, you can enable the

199
0:23:32.040 --> 0:23:38.200
topic submission. You and all the other users in the room can create this kind of post-it

200
0:23:38.200 --> 0:23:46.400
cards where you enter your topic and maybe a short description. Then once you send it,

201
0:23:46.400 --> 0:23:56.600
it will appear here on the right in the parking lot. Because this is not yet quite supported

202
0:23:56.600 --> 0:24:05.480
on other platforms than Element Web Desktop, we also built a bot as a compatibility layer,

203
0:24:05.480 --> 0:24:12.320
which allows you to also submit topics through the chat right here. You write a bot command.

204
0:24:12.320 --> 0:24:18.760
The bot will convert it to the event that's read by the widget. You'll see a tick and

205
0:24:18.760 --> 0:24:25.680
it also appears right here in the Select Your Topic button. Here's the first one we created.

206
0:24:25.680 --> 0:24:34.160
At that point, you can even edit as a moderator. Then you just move it into the schedule. Then

207
0:24:34.160 --> 0:24:39.280
you can select the next topic and also review it. Maybe you edit it, maybe you don't, and

208
0:24:39.280 --> 0:24:49.480
put it on your schedule. You have the feature of locking and unlocking submissions for the

209
0:24:49.480 --> 0:25:01.760
non-moderator users in your room. I believe that's it. Thank you very much, everybody.

210
0:25:01.760 --> 0:25:09.840
It's now time for QA. We also have this QR code. If you want to find us on Matrix, you

211
0:25:09.840 --> 0:25:16.400
can use the QR code. You can use this room alias and come talk to us. Of course, you

212
0:25:16.400 --> 0:25:32.640
can also find us in the dev room online.

213
0:25:32.640 --> 0:25:57.360
I think it was two questions. One question was how do users find the widgets that are

214
0:25:57.360 --> 0:26:01.800
installed in a room? Then I think the second question goes more into the direction of integration

215
0:26:01.800 --> 0:26:09.000
managers with dimensions. It's something like that available. Widgets are like state events

216
0:26:09.000 --> 0:26:16.000
in a room. Once you edit it to the room, you have an event with an URL. It could be hosted

217
0:26:16.000 --> 0:26:24.720
on any web server that's embedding it. You have a question about discoverability. Yes,

218
0:26:24.720 --> 0:26:31.480
there are integration managers, for example, dimensions that you can use to add widgets.

219
0:26:31.480 --> 0:26:36.840
At least dimension doesn't have such good support for widgets that use the widget API.

220
0:26:36.840 --> 0:26:44.960
You would probably need something else. I don't know about any integration managers

221
0:26:44.960 --> 0:26:47.480
that support them very well.

222
0:26:47.480 --> 0:27:03.480
Let's just take one of these bar examples. Let's say I wanted to have that widget and

223
0:27:03.480 --> 0:27:04.480
host it.

224
0:27:04.480 --> 0:27:05.440
Right now, you have to have the URL of the widget. Then you can just use the add widget

225
0:27:05.440 --> 0:27:12.240
command and edit to your room. An integration manager would be great. I could just click

226
0:27:12.240 --> 0:27:17.880
and the bottom right of element there is already integration for it.

227
0:27:17.880 --> 0:27:25.480
Then as a room admin or moderator, you even have the ability to pin the widget to the

228
0:27:25.480 --> 0:27:33.440
top of the room, for example, or to maximize it. Then to save that view state for the room.

229
0:27:33.440 --> 0:27:42.200
Then everybody else in the room will automatically also have the widget opened for them.

230
0:27:42.200 --> 0:27:46.640
Also just added additional info. In the sovereign workplace, we have the meeting widget which

231
0:27:46.640 --> 0:27:52.520
is like the start point for creating meetings with widget. There we have some kind of integration

232
0:27:52.520 --> 0:27:56.960
manager built in. It doesn't help for other rooms, but the user already has the option

233
0:27:56.960 --> 0:28:00.120
to just take the widget that they want for the meeting.

234
0:28:00.120 --> 0:28:12.760
I have on my screen in this virtual presentation of the dev room, the widget, which is showing

235
0:28:12.760 --> 0:28:22.760
me all the questions where the people ask the question in there which are most upvoted.

236
0:28:22.760 --> 0:28:25.760
There's a question. They ask me, how do widgets manage the end-to-end encryption? Does widgets

237
0:28:25.760 --> 0:28:26.760
have access to the encrypted routes?

238
0:28:26.760 --> 0:28:31.240
There's a question here. What is the reason why do widgets manage end-to-end encryption?

239
0:28:31.240 --> 0:28:34.560
Right now, it's actually quite transparent to widgets because they don't know about end-to-end

240
0:28:34.560 --> 0:28:41.400
encryption. The client itself does everything and just returns the already decrypted events

241
0:28:41.400 --> 0:28:47.360
to the widget and the other way around. As a widget, I just sent a message over the widget

242
0:28:47.360 --> 0:28:53.380
API and Element, for example, does a heavy lifting of encrypting it and sending it to

243
0:28:53.380 --> 0:28:58.360
the room.

244
0:28:58.360 --> 0:29:07.360
Any more questions?

245
0:29:07.360 --> 0:29:11.360
Is there a matrix RT-C widget?

246
0:29:11.360 --> 0:29:18.560
Yes and no. Element call itself is a widget too. It uses also the widget API and implements

247
0:29:18.560 --> 0:29:24.600
all its stuff, all the semantics RT-C stuff, via the widget API. It's currently I think

248
0:29:24.600 --> 0:29:30.040
the code for that is mainly the matrix JS SDK and then they use this room widget client

249
0:29:30.040 --> 0:29:36.520
to communicate via the widget API with the client and then the room.

250
0:29:36.520 --> 0:29:49.680
Is there a place to discover widgets or is there a collection of widgets where you find

251
0:29:49.680 --> 0:29:50.680
them?

252
0:29:50.680 --> 0:29:53.680
Actually, it's quite hard right now. The question was how to discover widgets. Is there

253
0:29:53.680 --> 0:30:01.160
a place, a central place where you can find them? I would say yes and no. There is integration

254
0:30:01.160 --> 0:30:07.560
like dimensions but it only has a subset of all the widgets that are available built in

255
0:30:07.560 --> 0:30:12.520
and there is right now something like a store or collection where you can easily choose

256
0:30:12.520 --> 0:30:16.000
all of them.

257
0:30:16.000 --> 0:30:22.920
I believe the Matrix.org website either is already or is going to collect a list of all

258
0:30:22.920 --> 0:30:33.880
the available widgets so you can browse them there.

259
0:30:33.880 --> 0:30:38.960
Of course, if you create a widget or any other app yourself, you can make a pull request

260
0:30:38.960 --> 0:30:45.120
against the Matrix website. Please let everybody know about anything you build.

261
0:30:45.120 --> 0:30:56.880
Okay. Thank you very much.


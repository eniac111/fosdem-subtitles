1
0:00:00.000 --> 0:00:06.720
Okay, so hello everyone.

2
0:00:06.720 --> 0:00:07.720
My name is Dan.

3
0:00:07.720 --> 0:00:09.400
I'm from CJRACE project.

4
0:00:09.400 --> 0:00:11.520
Thank you for showing up.

5
0:00:11.520 --> 0:00:18.320
I will be pretty fast, so the rest, if you have any questions later, please, and if you

6
0:00:18.320 --> 0:00:21.200
don't understand something, the slides will be available later.

7
0:00:21.200 --> 0:00:24.900
So I'll do just digestive slides, whatever.

8
0:00:24.900 --> 0:00:30.920
So the company itself sitting behind the project, we are located in Germany and with some back

9
0:00:30.920 --> 0:00:33.240
offices in Romania and Albania.

10
0:00:33.240 --> 0:00:44.760
We did both wholesale as well as real-time retail business.

11
0:00:44.760 --> 0:00:49.480
So we understand by now what means a system outage.

12
0:00:49.480 --> 0:00:53.600
CJRACE, it's a real-time enterprise billing suite.

13
0:00:53.600 --> 0:00:58.840
It's pluggable into existing, it's designed to be pluggable into existing infrastructures.

14
0:00:58.840 --> 0:01:02.640
You can accommodate easily new services and new ideas.

15
0:01:02.640 --> 0:01:10.320
So it's not only for telecommunication, built, you can extend it like the new industries,

16
0:01:10.320 --> 0:01:14.320
IOT, electricity, we are going towards energy as well.

17
0:01:14.320 --> 0:01:17.720
So you can build anything you like.

18
0:01:17.720 --> 0:01:22.440
If you want to sell cars, you can just do it.

19
0:01:22.440 --> 0:01:27.840
And it should be non-intrusive into existing setups, so it should not make you change the

20
0:01:27.840 --> 0:01:29.840
way you are doing things.

21
0:01:29.840 --> 0:01:36.880
We are sharing information with your switch, your router, whatever infrastructure you are

22
0:01:36.880 --> 0:01:39.560
using over there.

23
0:01:39.560 --> 0:01:41.240
It's all open source software.

24
0:01:41.240 --> 0:01:50.640
It was made in born actually in 2010 and we published first sources in 2012.

25
0:01:50.640 --> 0:01:53.960
The sources are available on GitHub.

26
0:01:53.960 --> 0:01:59.640
It's all 100% written in Go, one of the early adopters of Go.

27
0:01:59.640 --> 0:02:03.360
And we have nothing in private repositories.

28
0:02:03.360 --> 0:02:06.120
Of course we appreciate community.

29
0:02:06.120 --> 0:02:10.740
It's performance-oriented, three branches, all three supported.

30
0:02:10.740 --> 0:02:20.400
Our customers, they tend to be like all telecommunication, a bit conservative with upgrading.

31
0:02:20.400 --> 0:02:32.200
So test-driven development, again very sensitive to billing and data, and modular architecture.

32
0:02:32.200 --> 0:02:33.800
It's quite feature-rich.

33
0:02:33.800 --> 0:02:41.280
You can find all this information in the internet, so I don't have to market it to you.

34
0:02:41.280 --> 0:02:46.440
This slide is complex a bit, but I wanted to show you because it relates to the subject

35
0:02:46.440 --> 0:02:51.400
in my talk, how to integrate with your existing infrastructure.

36
0:02:51.400 --> 0:02:56.880
So on the left side here, you see quite a number of agents which we support.

37
0:02:56.880 --> 0:02:58.680
This mostly are developed by us.

38
0:02:58.680 --> 0:03:05.820
There are also other agents like OpenSips module which is built in their software.

39
0:03:05.820 --> 0:03:11.960
So you can build very easily and replace any of our agents.

40
0:03:11.960 --> 0:03:17.560
So what you will do in the end, you will send your API calls because CIGIRAID is all about

41
0:03:17.560 --> 0:03:18.560
APIs.

42
0:03:18.560 --> 0:03:23.640
You will send directly to our session module which you can also see it as central point

43
0:03:23.640 --> 0:03:25.800
of entry.

44
0:03:25.800 --> 0:03:31.240
After that, you will reach other modules of ours or subsystems, although they are also

45
0:03:31.240 --> 0:03:37.560
a standalone API server on their own, but you will be using them through our sessions

46
0:03:37.560 --> 0:03:43.960
where we implement easier integration for your stuff.

47
0:03:43.960 --> 0:03:47.160
So how do you do that?

48
0:03:47.160 --> 0:03:48.920
First you have to load the data.

49
0:03:48.920 --> 0:03:56.000
This is data specific, so you have to follow our format into loading your rating, your

50
0:03:56.000 --> 0:04:02.240
accounting data in case of doing prepaid and postpaid.

51
0:04:02.240 --> 0:04:07.520
We have also some extra subsystems data, but you will be mostly focusing on rating and

52
0:04:07.520 --> 0:04:09.080
accounting.

53
0:04:09.080 --> 0:04:15.920
After you are done with building your data, then you have to understand how we support

54
0:04:15.920 --> 0:04:17.120
sessions.

55
0:04:17.120 --> 0:04:25.040
So you can choose all of these steps or only one which is the last one and the most important

56
0:04:25.040 --> 0:04:26.340
session CDR.

57
0:04:26.340 --> 0:04:34.760
So you can do building in real time via sending us various messages, various APIs, or you

58
0:04:34.760 --> 0:04:39.080
can directly send us the end CDR for building it.

59
0:04:39.080 --> 0:04:46.160
So for example, session authorization, you have the opportunity to extract from the billing

60
0:04:46.160 --> 0:04:55.480
engine, maximum session duration, resource authorization, various session properties,

61
0:04:55.480 --> 0:04:59.640
even password you can retrieve it from the engine site.

62
0:04:59.640 --> 0:05:06.040
And you can also do session routing because we also support LCR on our site.

63
0:05:06.040 --> 0:05:10.520
Then sessions start when your session starts, so you tell us start billing in real time

64
0:05:10.520 --> 0:05:13.400
or start debiting in increments.

65
0:05:13.400 --> 0:05:20.880
You can choose the way, for example, the mobile networks, they are using session updates via

66
0:05:20.880 --> 0:05:28.720
diameter so you can implement your own triggers for incremental debits.

67
0:05:28.720 --> 0:05:36.360
Or you can do like we are doing with open source software we support like FreeSwitch,

68
0:05:36.360 --> 0:05:44.420
Camayilio, OpenSips, send us session start and session stop and we will do the magic behind.

69
0:05:44.420 --> 0:05:49.320
And then there will be the session CDR which can be stand alone or can correct the session

70
0:05:49.320 --> 0:05:50.880
information from real time.

71
0:05:50.880 --> 0:05:54.120
So both will work.

72
0:05:54.120 --> 0:05:57.960
And these are some examples of APIs.

73
0:05:57.960 --> 0:06:04.800
So if you want to implement in your own application like your own switching software or your own,

74
0:06:04.800 --> 0:06:12.080
I don't know, WebRTC application, all you have to do is send us this JSON RPC blobs

75
0:06:12.080 --> 0:06:18.320
and we reply you, for example, this one is replying with the, we by the way use nanoseconds,

76
0:06:18.320 --> 0:06:23.440
you can also get back seconds if you want but we want to be very verbose.

77
0:06:23.440 --> 0:06:27.680
So this one will just retrieve the maximum usage of a session.

78
0:06:27.680 --> 0:06:32.720
And the same with initiation, same you send us the information in your events.

79
0:06:32.720 --> 0:06:41.680
This is fully configurable, flexible, so you can add any number of fields inside.

80
0:06:41.680 --> 0:06:43.800
Same session update and terminate.

81
0:06:43.800 --> 0:06:51.840
And in the end the CDR sample and blob, same story, all API driven.

82
0:06:51.840 --> 0:06:53.840
So this was fast.

83
0:06:53.840 --> 0:06:54.840
Thank you.

84
0:06:54.840 --> 0:07:14.960
Thank you.


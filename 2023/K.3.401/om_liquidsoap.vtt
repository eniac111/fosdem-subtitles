WEBVTT

00:00.000 --> 00:13.000
Okay, so we start again. Our next talk is about liquid soap. Please welcome Romain.

00:13.000 --> 00:20.960
Hello and good morning. We're really happy to be here after, not two but three actually.

00:20.960 --> 00:26.280
And I want to, we gave a talk here before the whole thing happened that I don't want

00:26.280 --> 00:31.720
to talk about and a lot of things happen and I want to go back to it and talk about what

00:31.720 --> 00:38.000
we did both in the code and with the community and the kind of things that happened. So,

00:38.000 --> 00:42.160
first of all, for those who weren't there, the first talk, what is liquid soap? It's

00:42.160 --> 00:47.400
a programming language. Technically, it's a scripting language, scripted language. It's

00:47.400 --> 00:53.720
statically typed with inferred type. So, if you're familiar with TypeScript, it's TypeScript,

00:53.720 --> 00:59.040
but you don't have to write the type, so everything here is a string, an integer, something. What

00:59.040 --> 01:08.440
does the language do? It allows you to create online stream and it's not a low-level tool,

01:08.440 --> 01:14.320
so we delegate that and I'll talk a lot about it. What we want is to empower the user to

01:14.320 --> 01:19.280
rezone about the tool. That's what the language really does well, programming, logic, business

01:19.280 --> 01:23.480
logic. I want to play that song. I want to switch to a live source. So, that's an example

01:23.480 --> 01:32.720
of a full code that we can use to run two outputs on iSCAS based on, playlist, a file,

01:32.720 --> 01:39.120
a list of requests, an input from HTTP, all sort of stuff. So, what has happened with

01:39.120 --> 01:45.400
liquid soap since first day in 2020? We worked with Radio France. That's the reason we came

01:45.400 --> 01:52.200
in 2020 and it was that starting point of a lot of new work because it really created

01:52.200 --> 02:00.320
a new cycle of work and interest. We had a lot of community growth that reflect back

02:00.320 --> 02:04.400
on it in the first part of this talk. Then we do a lot of new features because guess

02:04.400 --> 02:10.760
what? We also had a lot of time during that time and we worked a lot on it. I want to

02:10.760 --> 02:15.920
finish the talk by talking about future development and challenges that we foresee for the future.

02:15.920 --> 02:21.040
First of all, what happened with the community? I started looking back at the stats over the

02:21.040 --> 02:27.160
past three years and I looked at the GitHub stars. It's nice, but it was growing pretty

02:27.160 --> 02:36.200
steadily except for that little bump here when we did the 2.0 release. I looked at the

02:36.200 --> 02:39.480
Slack channel which I want to move out of this platform, but anyway, it was also growing

02:39.480 --> 02:43.360
pretty linearly. I was like, it doesn't seem really anything happened over the past three

02:43.360 --> 02:48.840
years. Then I looked at the issues. That's why I was like, yeah, I remember that. What

02:48.840 --> 02:53.640
happened is when the whole shutdown happened, because we're a project that enables people

02:53.640 --> 02:59.880
to communicate online, it was one of the places that people wanted to go to communicate with

02:59.880 --> 03:07.400
people and to try to reach out, create link, maintain link. We had a lot of people suddenly

03:07.400 --> 03:10.880
were like, I want to do an online stream. I want to put music for my friend to listen

03:10.880 --> 03:15.640
to. I want to do all these things. The second effect, we had a lot of people with time.

03:15.640 --> 03:18.920
We're one of those projects where you're like, oh, we like it. I like it. I'd like to look

03:18.920 --> 03:23.760
at it at some point, but I'm too busy and suddenly I have time. People started using

03:23.760 --> 03:29.960
it, submitting a lot of issues and well, we got busy. One of the things that we did also

03:29.960 --> 03:35.080
is because we didn't have that kind of in-person meeting, Samuel, who's the other co-developer

03:35.080 --> 03:39.960
of the project, decided that we should do an online workshop, which was the thing to

03:39.960 --> 03:45.480
do. It was really good because what really allowed us is to get to meet our community.

03:45.480 --> 03:49.320
I think one of the things that's really nice with this project is that it's both a technical

03:49.320 --> 03:52.960
project, but a lot of our users are actually not technical people. They're like people

03:52.960 --> 03:59.840
who have Burning Man radio at the Burning Man thing. Some of the cute projects we had was

03:59.840 --> 04:06.120
like the top one was a network of community radios in Barcelona where they literally have

04:06.120 --> 04:11.680
trucks that they bring to different neighborhoods to the online reporting of what happens in

04:11.680 --> 04:19.880
the city. The lower one was another Hungarian community radio. That was really good to get

04:19.880 --> 04:25.560
to meet that. I think we valued that a lot. Of course, we have industrial users, but this

04:25.560 --> 04:31.120
is also one of the core motivations for the project for us.

04:31.120 --> 04:35.080
Then eventually another thing we did, again, by project of having a lot of time, which

04:35.080 --> 04:41.400
was mainly Sam working on it, was to write a programming book specialized in audio stream

04:41.400 --> 04:46.280
media stream and how to use LiquidSoup for it. It was very useful on many levels. One

04:46.280 --> 04:51.560
of them is that it forced us to rethink our API and reorganize it. You say, can we do that?

04:51.560 --> 04:55.880
What's a good example to do that? Well, actually, it's not clear. Let's make a nice module that

04:55.880 --> 05:00.600
can do that easily, document it, and also it enabled the users a lot to be more confident

05:00.600 --> 05:06.200
because as I said, most of our users are not programmers. They come to this and they're

05:06.200 --> 05:12.280
like, whoa, never touch a line of code. How can I do? That book was a really good starting

05:12.280 --> 05:20.520
point to get people interested and more confident with the project.

05:20.520 --> 05:27.440
What did we do for the new features though? That's the gist of the work we did. First

05:27.440 --> 05:33.800
of all, we did a lot of language changes because for a long time our focus was more on features.

05:33.800 --> 05:38.960
We only did a lot of output, a lot of input, a lot of different interesting operators.

05:38.960 --> 05:44.960
When you start to want to implement things that are more complex, you also need powerful

05:44.960 --> 05:52.440
language extension or toolbox. Also, we did a lot of FMP integration. Those are the two

05:52.440 --> 05:57.600
things that I'm going to talk next. First, the language change. More expressivity. You

05:57.600 --> 06:03.200
want to enable your users to write code that is nice, readable, that they can understand,

06:03.200 --> 06:07.800
that is powerful, but it doesn't have to have a million lines to do a simple thing. Simple

06:07.800 --> 06:14.560
things like that. These are like spreads to spread out a list. You have a list, you want

06:14.560 --> 06:20.160
to get the first element, last element, and whatever else is left as a remainder.

06:20.160 --> 06:25.360
We could do that before, but you will get to use functions and it was complicated. This

06:25.360 --> 06:29.720
really helps users just visualize the code and be like, all right, I understand what

06:29.720 --> 06:39.160
this is doing and I have much less lines to write it. We implemented a lot of types that

06:39.160 --> 06:43.320
were missing. For instance, a null variable. A lot of that will remain in the sense of

06:43.320 --> 06:49.000
course, dynamic scripting languages like JavaScript or others. We didn't have a null value. We

06:49.000 --> 06:55.600
did a null value and we added a nice operator that says if you have a null on X, if X is

06:55.600 --> 07:01.200
not null, it's a string, then you get X. If it's null, you get the string foo. Stuff like

07:01.200 --> 07:06.440
that. When you start writing actual usable code, you need these things and they are very

07:06.440 --> 07:13.760
useful. You can write functions with optional argument and you can exactly say the user

07:13.760 --> 07:22.720
didn't pass an argument. That's just basic programming language features.

07:22.720 --> 07:29.640
The other thing we did that was very useful is a new module syntax. That basically means

07:29.640 --> 07:34.920
that any value in the language can be attached methods or attributes to it. Here you have

07:34.920 --> 07:42.040
a string and a string has two methods. Well, attributes here, duration, floating number

07:42.040 --> 07:49.640
and BPM. It's basically an object oriented ID but not really an object. More like JavaScript

07:49.640 --> 07:55.960
hash I guess. That means that you can query the song.duration and get the floating point

07:55.960 --> 08:03.560
duration, or you can print the subtitle as a string using the underlying value.

08:03.560 --> 08:07.720
That was really useful because when you want to create something that's easy to use for

08:07.720 --> 08:12.240
a user, you need to structure your language. You need to have modules and you need to have

08:12.240 --> 08:17.960
function in those modules. Also, another typical case is that now you can specialize things.

08:17.960 --> 08:23.560
You have sources that have different functions. All sources have a skip function. It means

08:23.560 --> 08:30.800
that you can get to the next track in your stream. You may have sources that have specific

08:30.800 --> 08:36.480
function. For instance, you can have a source that can insert metadata that's created with

08:36.480 --> 08:42.560
this operator. It will be added a new function that's called insertMetadata. Now you can

08:42.560 --> 08:51.080
use it. Instead of having a billion of general calls that are API based, you can start really

08:51.080 --> 09:00.200
attaching specific use to specific variables and then make things more compact, more specialized,

09:00.200 --> 09:05.640
and very useful for cleaning up your API. Another thing we did after that with the module

09:05.640 --> 09:10.280
is that now we were able to describe high level things. One of those things that's really

09:10.280 --> 09:16.880
painful in statically typed language is parsing JSON. Why? Because JSON can be anything. We

09:16.880 --> 09:22.880
really want to know that name is a string. We really want to know that name is a version.

09:22.880 --> 09:26.920
In language like OCaml, you have to parse an object, iterate through the keys, validate

09:26.920 --> 09:31.680
that it's a string. Every branch of that, you need to think of what you're doing. Our

09:31.680 --> 09:37.560
users, again, not programmers. What do we do? We try to find a primitive that's readable

09:37.560 --> 09:43.560
and easy to use. What are you reading here? You're reading a parsing statement that says

09:43.560 --> 09:48.680
I want to parse and I want to get a module that's going to have a name, a version, and

09:48.680 --> 09:53.840
another script attribute that is itself a module that has a test function. It's what

09:53.840 --> 10:01.120
you get in a package.json for node modules. This is a type annotation that says I want

10:01.120 --> 10:05.680
the name to be a string, the version to be a string, and the script to be a module with

10:05.680 --> 10:10.720
a test that's a string. At runtime, we're going to take all this information and we're

10:10.720 --> 10:14.400
going to try to parse this and we're going to do two things. If we have what we need

10:14.400 --> 10:19.960
in the JSON, you can go on with your script. If we don't, we raise an error, you can catch

10:19.960 --> 10:26.080
the error and reason with it. That really makes parsing of JSON more easier on the user,

10:26.080 --> 10:30.160
which is important because, again, when you want to connect a lot of interconnected systems

10:30.160 --> 10:36.680
for streaming, you want to be able to talk to JSON API. Pretty useful. We did the same

10:36.680 --> 10:45.240
for YAML recently. You can do settings now. That's the new features. There's more, but

10:45.240 --> 10:49.080
I don't want to spend too much time on it because the other part that I want to talk

10:49.080 --> 10:53.480
that's exciting is the FFmpeg integration. That really started after Radio France because

10:53.480 --> 10:58.640
they had a strong need for it and we started looking at the API from FFmpeg. The thing

10:58.640 --> 11:05.400
with the API from FFmpeg is that it's really good. It's amazingly good. It's all very low

11:05.400 --> 11:13.080
level in C. For us, because I didn't mention that LiquidSub is implemented in OCaml, we

11:13.080 --> 11:18.240
need to speak to low level implementation to really be efficient. We can talk to Perl

11:18.240 --> 11:26.080
or to whatever, Python. This C is really simple for us, but it's also extremely abstract.

11:26.080 --> 11:29.680
That really helps us because, again, we want to do what we do well, which is the programming

11:29.680 --> 11:36.320
language side, the logic, the typing, the functions. We're not specialists in multimedia

11:36.320 --> 11:41.640
implementation. We don't want to do that. We want to find people who do it better than

11:41.640 --> 11:47.240
us and interface with it. That's the API for a FFmpeg packet, which is a little tiny bit

11:47.240 --> 11:54.000
of encoded data. It contains, I don't know, an MP3 frame, a video, A or B frame, all the

11:54.000 --> 11:57.720
abstract things I don't want to know about. He's going to tell me two things. He's going

11:57.720 --> 12:05.880
to tell me, this is your data. This is your pointer to a presentation timestamp. Another

12:05.880 --> 12:11.600
thing here tells me, this is the time at which you want to insert this packet in your stream.

12:11.600 --> 12:15.600
This is the data. That's all I need to know because then we can build a stream with it.

12:15.600 --> 12:21.000
We can pass this packet around to our different operators, not even knowing what they contain.

12:21.000 --> 12:25.440
The other thing that FFmpeg really... Yeah, so that's what we started doing. We started

12:25.440 --> 12:31.960
implementing a new encoder that was basically reflecting everything that you see as a parameter

12:31.960 --> 12:41.120
in the FFmpeg comment line. We think that we support it as an option in those encoders.

12:41.120 --> 12:45.440
Why do we think that? It's because another thing that FFmpeg really does really well

12:45.440 --> 12:52.720
is describing their API. I'm sorry, that's not very readable. That's a C structure that

12:52.720 --> 13:03.080
has all the parameters name here for H.264 encoders, description, type, somewhere, and

13:03.080 --> 13:08.720
minimum, maximum value, everything we need to basically write an interface to it. It

13:08.720 --> 13:13.760
also does it for filters. Again, not very readable. Sorry about that, but it's basically

13:13.760 --> 13:20.760
a programmatic interface to everything you need to know about parameters for FFmpeg.

13:20.760 --> 13:27.600
That's also not readable. Great. Then what we can do is this is an FFmpeg filter implemented

13:27.600 --> 13:32.800
in Liquid Soap. If you could read well, you would see that every parameter in the filter,

13:32.800 --> 13:39.560
like speed, is a floating point, optional. It has no value default. They saw no value

13:39.560 --> 13:45.000
default. Sometimes they don't. We get this information from the FFmpeg C API, and we

13:45.000 --> 13:51.760
can plug into it immediately and be very confident that we're using it well. One of the things

13:51.760 --> 13:58.960
it allows us to do is to actually have scripted manipulation of FFmpeg primitive-like filters.

13:58.960 --> 14:04.400
We take a source, and we want to define a filter that is a flanger followed by a highpass

14:04.400 --> 14:09.640
and then output it. You need a graph. That's just part of the C API. You need a source.

14:09.640 --> 14:14.400
You create a new input from it. That's the FFmpeg side. That's what they call a new input.

14:14.400 --> 14:18.240
You pass it to the filter with the parameters. Everything is typed here, so we can check.

14:18.240 --> 14:23.520
That is the right value. Then you create an output. Around that, you have a high-level

14:23.520 --> 14:30.560
description of your filter. I don't know if you all have manipulated FFmpeg filters,

14:30.560 --> 14:35.640
but when you want to do complex filters, they have a description graph that's pretty hard

14:35.640 --> 14:40.360
to read. I'm used to that, so I'm biased. I can read these things easier, but also it's

14:40.360 --> 14:46.480
kind of more descriptive. It's typed, too. This is another filter. It takes an audio,

14:46.480 --> 14:51.360
splits it into two sources. One of them is going to go through a flanger. The other one

14:51.360 --> 14:55.200
is a highpass. This is some conversion that was required. I don't know why. Then you merge

14:55.200 --> 15:00.240
them back. We're describing now a graph that branches out, do two filtering, and comes

15:00.240 --> 15:08.360
back together. This is a simple one, but you could use that to do a multi-band compressor,

15:08.360 --> 15:13.640
for instance. You can do that in FFmpeg. It's a little bit more structured and readable

15:13.640 --> 15:20.600
and also type safe. Next, I want to talk about how we implemented that. Yeah, I still have

15:20.600 --> 15:27.800
some time. This is the timeline for us. Infinite time. We start it here, and we go all the way

15:27.800 --> 15:33.920
here. If you use your imagination, all these little horizontal dots are audio packets that

15:33.920 --> 15:40.440
came from FFmpeg. Vertical ones are video frame. This is your stream of data that you're

15:40.440 --> 15:47.400
sending to an ice castle to anything. What we do is that we find the lowest common denominator

15:47.400 --> 15:53.320
between the video rate and the audio rate. We need to find a little chunk of time that

15:53.320 --> 15:58.200
will contain the same amount of audio and data. Most of the time with the parameters

15:58.200 --> 16:04.800
we have internally, it would be 0.04 seconds. That's what we call our frame. Then the idea

16:04.800 --> 16:11.280
of the streaming loop, on-strip parsed and prepared all your outputs, is to just recreate

16:11.280 --> 16:19.120
that frame every 0.04 seconds infinitely many times. That just creates your stream. Here's

16:19.120 --> 16:23.360
an example. We have a simple script. It has two outputs. It wants to save to a file and

16:23.360 --> 16:29.600
send to an icecast server. FFmpeg is an operator that will take the first source available.

16:29.600 --> 16:34.520
The first one is an input. It's a hardboard. It's one of the operators we have that can

16:34.520 --> 16:40.880
receive icecast clients. Let's say you want a DJ to connect to your radio. You can direct

16:40.880 --> 16:46.680
them to this input, and they start streaming. The FFmpeg will stream that data immediately.

16:46.680 --> 16:51.440
If it's not available, we have a queue of requests that you can... Let's say you want to send

16:51.440 --> 16:54.960
a track to be played immediately after the following one. Every now and then you can

16:54.960 --> 17:00.960
send a request here. Otherwise, we have a playlist of files in the directory. If that

17:00.960 --> 17:05.000
is not available, we have some kind of fallback. Just in case everything fails, something that's

17:05.000 --> 17:09.120
going to say, I don't know, we're having technical issues. Please come back.

17:09.120 --> 17:16.640
Now we're going to run the streaming algorithm and see how we do that. Output.file starts.

17:16.640 --> 17:22.760
It always goes back from the output down to the inputs. The reason is because all of that

17:22.760 --> 17:28.000
is dynamic. There's no reason to start asking these people here to prepare data. They might

17:28.000 --> 17:33.520
not be used because up in the graph, the fallback might choose to use just one of them. We have

17:33.520 --> 17:42.000
to start from the output, bring it down. I have an empty frame, a cycle 23, sudden streaming

17:42.000 --> 17:47.640
cycle, and I want to fill it up with 0.04 seconds of data. I go to the fallback and say,

17:47.640 --> 17:52.920
hey, can you fill up this frame? Fallback is like, sure, let me ask first. Input the

17:52.920 --> 17:58.320
hard bar, not available. But request.queue has something in the queue, actually. Let

17:58.320 --> 18:03.440
me pass it down, pass it down to this operator. Request.queue partially fills the frame. It

18:03.440 --> 18:08.440
added a little bit of audio and one video frame. What you can think about it is that

18:08.440 --> 18:14.440
it was just finishing a track. Remember, request.queue takes files when you want to play them, so

18:14.440 --> 18:20.120
I don't know. It's just done playing the jingle or the commercial that you want it to finish.

18:20.120 --> 18:24.960
That's it. I'm done. It's a partial fill of the frame, in which case it comes back to

18:24.960 --> 18:32.680
the fallback that says, I need more. Playlist is not available. For some reason, the directory

18:32.680 --> 18:38.240
is empty. We go back to the single and say, hey, single, can you fill this frame? One

18:38.240 --> 18:43.320
of the things we do when we start the script is that we actually double check that we have

18:43.320 --> 18:47.120
at least one operator here that's always going to be available. That's what happens here.

18:47.120 --> 18:52.400
The fallback is being used. Single is the, sure, I got a file. I prepared it. It's back

18:52.400 --> 18:58.120
and decode it. Boom. Finish filling up the frame. Then it goes all the way up the tree.

18:58.120 --> 19:02.320
We're ready to encode that, save it in the file.

19:02.320 --> 19:07.360
Now comes the second one, which is the icecast output. Same thing. It's like, hey, I need

19:07.360 --> 19:12.480
to send data to my icecast server. It goes back to the fallback. Then what we do here,

19:12.480 --> 19:17.320
of course, we cache stuff. We know that fallback has already produced the whole frame. We have

19:17.320 --> 19:27.040
saved it. We can just fill it up here, send it back to icecast, again, encode it if needed,

19:27.040 --> 19:28.040
send it back.

19:28.040 --> 19:32.960
The thing that's really nice with this algorithm is that, again, we don't really care about

19:32.960 --> 19:36.760
what's in the frame. We just care that we know that we can fill it up and we know how

19:36.760 --> 19:39.800
much it's filled, and then we can pass it down.

19:39.800 --> 19:46.520
These things can actually be FFmpeg encoded packet. Not a problem. They can be raw PCM,

19:46.520 --> 19:51.680
and then we have to encode them. Again, we are just looking at things from a high level

19:51.680 --> 20:00.360
perspective. If the time for that whole cycle was t, we have two possibilities. If we generated

20:00.360 --> 20:07.640
0.04 second in less than 0.04 second for the computer, it means that we run faster than

20:07.640 --> 20:12.840
the real time. We can sleep a little bit because we're generating things in real time.

20:12.840 --> 20:16.960
If not, we have a problem. We need to catch up, so we need to run the loop again as fast

20:16.960 --> 20:21.320
as possible. Basically, if you're in the red, you have a problem. It means that, I don't

20:21.320 --> 20:25.560
know, encoding takes too long. Something happened in your script. You cannot produce in real

20:25.560 --> 20:30.560
time. What we want is to be in the green all the time so that we know we can deliver the

20:30.560 --> 20:34.720
content at a real time rate all the time.

20:34.720 --> 20:44.840
That's how it works. Because I told you all that we now can use encoded content, we're

20:44.840 --> 20:49.880
having a little bit of problems that I won't have time to describe here, but essentially,

20:49.880 --> 20:55.520
sometimes we have to do a lower level understanding of what's happened in the bit stream.

20:55.520 --> 21:03.080
Basically, in FFmpeg, you have things that's called extra data. If you take an MP4 media,

21:03.080 --> 21:07.200
everything that is needed to decode like fman table is in the header, it's communicated

21:07.200 --> 21:13.040
first, and then all the packets, the frames after that don't have it. If you take MPEG-TS,

21:13.040 --> 21:17.520
because MPEG-TS doesn't have a global header, every frame is going to have that data. That

21:17.520 --> 21:22.000
was a problem because now we do things that FFmpeg doesn't do, which is a live switch

21:22.000 --> 21:29.160
between two different bit streams. This is a RTMP input, this is a file, MP4. When we

21:29.160 --> 21:34.720
live switch, if we started with this one, for instance, the MUXR from FFmpeg might say,

21:34.720 --> 21:41.560
oh, you know what? If we started with this one, the MUXR would say, I know that all my

21:41.560 --> 21:45.800
friends are going to have the private data that I need, I can go on with it. Then we

21:45.800 --> 21:49.760
live switch to that, and suddenly we start receiving frames that don't have it. The MUXR

21:49.760 --> 21:53.560
is like, whoops, I cannot do it. We have to insert those filters here to make sure that

21:53.560 --> 21:57.880
they're always present, which is a problem for us because it means that the user has

21:57.880 --> 22:02.300
to think about low-level stuff. That's part of one of the questions that I was wondering

22:02.300 --> 22:07.400
if FFmpeg might find some of the beautiful abstraction they have to alleviate that kind

22:07.400 --> 22:08.400
of problem.

22:08.400 --> 22:14.800
All right, almost done. I'm going to finish real quick. We have a 2.0 X-release with tracks

22:14.800 --> 22:20.000
so you can manipulate and remix different track, let's say, do an MKV with French English

22:20.000 --> 22:26.440
and Italian soundtrack and encode it in different format. We want to rewrite the whole clocking

22:26.440 --> 22:30.800
system and streaming because OCaml 5 now does concurrency. It's pretty exciting. We want

22:30.800 --> 22:37.400
to think about JavaScript and WSM because we can do it and why not. I'm very interested

22:37.400 --> 22:43.320
to see what VLC does because that's the next part and why they do it.

22:43.320 --> 22:49.600
Long-term development, though, is what we are wondering about because we have grown

22:49.600 --> 22:53.520
a lot of community, but most of our users are not programmers and our programming language

22:53.520 --> 22:58.680
is OCaml, which is still a niche language, and we're two developers, someone and myself.

22:58.680 --> 23:04.080
One of the questions, the project is 20 years. We are 40-year-old. At some point, you need

23:04.080 --> 23:09.040
to think about moving on. What we have done so far is do a lot of automation, which is

23:09.040 --> 23:13.920
very powerful. It allows us to focus on the code and have less testing to do. We have

23:13.920 --> 23:18.640
automated relays. We do CI to run all the tests every time. We have augmented the number

23:18.640 --> 23:22.080
of automated tests we have so that we catch everything very quickly instead of relying

23:22.080 --> 23:27.240
on a lot of manual testing. But it's far as a challenge to think about how we can bring

23:27.240 --> 23:35.040
in more developers that like OCaml, like radio, is a pretty intersection of two niche things.

23:35.040 --> 23:42.040
That's it for me, and thank you very much for your time, and maybe there are questions.

24:35.040 --> 24:42.800
It was actually an answer. There are APIs in FFmpeg to inform the user of the CI API

24:42.800 --> 24:46.440
whether or not they need to insert those filters. I see that there is automatic insertion of

24:46.440 --> 24:51.040
those filters in the code. I guess I have to have another pass at making sure I understand

24:51.040 --> 24:55.880
when and how. I regretfully for this presentation, I didn't dive again, and I remember that sometimes

24:55.880 --> 24:59.600
it becomes a little bit intricate. But thank you very much. I will definitely have another

24:59.600 --> 25:00.600
look.

25:00.600 --> 25:09.240
It's possible to control the running script using an external automation, especially like

25:09.240 --> 25:11.360
editing running playlists.

25:11.360 --> 25:19.360
Yeah, absolutely. Are there any tools to control a running script from the external user? We

25:19.360 --> 25:24.720
have a lot of different options. The traditional one, the old one was a telnet connection.

25:24.720 --> 25:31.880
But we have a fully featured HTTP server, so you can write your own API endpoints. Because

25:31.880 --> 25:36.320
every source has their own methods now that are attached to it, and you can run scripts,

25:36.320 --> 25:40.120
you can basically take a source and say, okay, there's a function that inserts metadata.

25:40.120 --> 25:44.920
I plugged that into running everything else. We're a programming language, so yeah, we

25:44.920 --> 25:46.920
have a lot of different options for that, for sure.

25:46.920 --> 25:55.720
Last question. Can you use LiquidSub to do static operations, not for to compare spikes

25:55.720 --> 26:04.480
and not with the goal of doing streaming, just to apply operations on many video files?

26:04.480 --> 26:08.400
The answer is yes, because the clock doesn't have to be real. Oh yeah. Can you use LiquidSub

26:08.400 --> 26:12.400
to do offline processing faster than real time and not just real time? The answer is

26:12.400 --> 26:16.160
yes, because you can run a clock that says, I don't want you to be real time, I want you

26:16.160 --> 26:20.760
to run as fast as possible. But the sub answer is that it's not a common case, it's not commonly

26:20.760 --> 26:25.280
tested, and that's part of the thing that I want to bring on more when we rewrite the

26:25.280 --> 26:29.840
streaming. Because for instance, a request needs to resolve a file, which needs to make

26:29.840 --> 26:33.800
a network request, download the file, test it, you can decode that. Most of the time we

26:33.800 --> 26:37.080
expect that to take a while, but it's not been tested a lot when you want to run very,

26:37.080 --> 26:40.440
very fast, and you run into race conditions that are very different.

26:40.440 --> 26:42.280
Okay. Thank you very much.

26:42.280 --> 26:43.280
Thank you.

26:43.280 --> 26:48.960
Thank you.

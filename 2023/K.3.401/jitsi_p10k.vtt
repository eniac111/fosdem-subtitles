WEBVTT

00:00.000 --> 00:14.640
Well, alright. I'll get going since we're here. My name is Saul and today I'd like to

00:14.640 --> 00:19.120
talk to you about our little project P10K or how to get 10,000 participants into a

00:19.120 --> 00:22.000
GTSI meeting. I...

00:22.000 --> 00:23.600
Sorry? My voice?

00:23.600 --> 00:28.280
No, it doesn't go on the loudspeakers. It's just for the recording. It is, but it is.

00:28.280 --> 00:35.320
Sorry, I lost my voice. I'll try. I suppose most of you know what it is, but for those

00:35.320 --> 00:41.720
who don't, it's a WebRTC compatible video conferencing application. I'd like to say

00:41.720 --> 00:46.640
that I can think of it in three ways. A set of open source projects that allow you to

00:46.640 --> 00:52.040
either deploy it or, you know, piecemeal it and build something with it. It's also a set

00:52.040 --> 00:57.920
of APIs and mobile SDKs so you can embed it into your existing application and it's fully

00:57.920 --> 01:03.120
open source Apache 2 license and we have a pretty vibrant community that helps us build

01:03.120 --> 01:11.120
some stuff. So I've talked about scaling GTSI meet a couple of years ago here at FOSDEM

01:11.120 --> 01:18.520
with what we did during the pandemic. Also at ComCom about how we reached 500 participants.

01:18.520 --> 01:24.440
But then of course somebody will ask, how do you do more, right? So that's what I'm

01:24.440 --> 01:31.920
about to go on today. A quick TLDR on what the trick is to scale up is mostly to cheat

01:31.920 --> 01:37.840
because it turns out that you never see 10,000 participants at the same time. So you need

01:37.840 --> 01:43.760
to paginate and not show all of them at the same time, not load them at the same time.

01:43.760 --> 01:47.440
Also on the back end, you don't want to be, you know, taking care of 10,000 things at

01:47.440 --> 01:53.560
once. You want to be really careful avoiding re-renders on the React side of things, so

01:53.560 --> 02:00.160
on your front end. You definitely don't want to have 10,000 things. And very importantly,

02:00.160 --> 02:05.720
reducing the signaling. And this is kind of the crux of the thing. So with all of those

02:05.720 --> 02:12.200
things we ended up getting 500 participants in a single meeting. All of them are fully

02:12.200 --> 02:18.240
functional bidirectional audio video participants. They will never all have video on, so that's

02:18.240 --> 02:19.240
sort of fine.

02:19.240 --> 02:25.200
I'm going to go a quick run through our architecture. So when we dive into XMPP, we know what we're

02:25.200 --> 02:31.240
talking about. XMPP is our core signal protocol. You heard it from Matt for chat. So all the

02:31.240 --> 02:36.720
participants joined an XMPP muck, so a group chat. And then our focus, Jekofo negotiates

02:36.720 --> 02:42.840
a session with each participant. And then they all end up mixed in the JVP, which is

02:42.840 --> 02:49.280
where we allocate the media. So this is like a back of a napkin design level, but it's

02:49.280 --> 02:57.080
pretty accurate. Prosthodies are XMPP server of choice. And Jekofo is the one that will

02:57.080 --> 03:03.080
allocate sessions here and then establish sessions with the users. So they all end up

03:03.080 --> 03:05.280
having this connection.

03:05.280 --> 03:12.320
Now how do you go about solving 10,000 participants? Well, first of all, we do some research. And

03:12.320 --> 03:18.440
what we knew is that presence is Tansa. So XMPP presence was our Achilles heel. So we

03:18.440 --> 03:25.760
needed to sort that out. And intuitively, when you need to support many of something,

03:25.760 --> 03:30.200
you think of, well, I'll partition it in smaller chunks, and maybe that's how I do it. So there

03:30.200 --> 03:34.040
is federated muck for that. So we thought maybe that's where it goes. And turns out

03:34.040 --> 03:39.960
the military had sort of researched this problem as well. And there is this cool white paper

03:39.960 --> 03:45.800
called Federated Multi-User Chat for military deployments. And one of the things they got

03:45.800 --> 03:53.160
there is how to avoid these presence flooding. And they do that with the visitor role. And

03:53.160 --> 03:56.800
that's where we got the idea from. So the idea is that we're going to have two types

03:56.800 --> 04:04.120
of users, the active users and passive users. And we don't need to know about all these

04:04.120 --> 04:08.480
passive users. All these audience, we just need to know the number. We don't need to

04:08.480 --> 04:13.440
draw a tile for them. They don't need to be as apparent that they're participating in

04:13.440 --> 04:18.400
the meeting. They're just viewers. And this is what the visitor role in XMPP muck lingo

04:18.400 --> 04:25.280
means. So a passive participant can then become an active participant by switching the role.

04:25.280 --> 04:29.040
Because we're not building live streaming. So what we want to build is a way to actually

04:29.040 --> 04:33.240
actively be able to participate. Anybody of those 10,000 participants should be able to

04:33.240 --> 04:42.360
take the mic anytime. Scenarios for this, earnings calls on publicly traded companies,

04:42.360 --> 04:49.880
just because we can, you name it. So step two, how do we test it? Because if we build

04:49.880 --> 04:54.560
it, we need to be able to know we have accomplished our goal. And in order to test 10,000 participants,

04:54.560 --> 05:01.180
you need, well, 10,000 participants. So we use a big-ass lineum grid. And we created

05:01.180 --> 05:05.880
some lightweight clients so that we could have a lot of chumps to join the call. They've

05:05.880 --> 05:11.880
got no UI. We spawn multiple browser windows with multiple tabs with multiple of these

05:11.880 --> 05:18.200
clients. And a recent trick is we use insertable streams to drop all media. One thing you can

05:18.200 --> 05:22.600
do is modify it. And another thing you can do is drop it. So they say nothing. And then

05:22.600 --> 05:26.080
they are a lot more lightweight than our Selenium grid. Otherwise, it would take millions just

05:26.080 --> 05:32.320
to test if what you're doing is right. There's a PR by Philip Hanke actually to do something

05:32.320 --> 05:38.720
like Chrome would say, black frames, very tiny ones. So maybe that's where we go in

05:38.720 --> 05:44.320
the future as well. And we also delay track creation so that we don't create tracks. If

05:44.320 --> 05:49.320
you join muted, we don't need to do the whole create a video track that is useless and things

05:49.320 --> 05:55.880
like this. And the next thing is we scale the signaling. And the way we do it is we

05:55.880 --> 06:01.040
ended up having multiple prosody servers. This is one node, but it could be spread to

06:01.040 --> 06:06.360
multiple nodes. So we have the main prosody server, which is where the active participants

06:06.360 --> 06:13.280
join the meeting. And then we have up to five extra nodes which we call visitor nodes, where

06:13.280 --> 06:20.120
people join in this visitor role. So the presence is not broadcasted. Jikofo will decide which

06:20.120 --> 06:25.760
one you join, usually depending on the capacity. And the trick to actually become an active

06:25.760 --> 06:31.560
participant is to just join this one, join the main one afterwards. And we can do that

06:31.560 --> 06:40.800
very fast because you don't need to recreate the XMPP connection. So now in order to establish

06:40.800 --> 06:46.160
this sort of mesh, we ended up using Federation, even though it's like within a single server,

06:46.160 --> 06:52.680
but still. So there's server to server bidirectional connections to avoid having duplicated connections.

06:52.680 --> 06:57.480
So custom modules, that's where prosody shines because it allows us to do all these customizations

06:57.480 --> 07:03.300
to mirror chat messages that have been typed in a visitor node to the main node and back.

07:03.300 --> 07:10.560
So to kind of fake it that they are in separate instances actually. And as I said, becoming

07:10.560 --> 07:15.320
active is fast because you don't need to recreate the XMPP connection, just you need to join

07:15.320 --> 07:22.280
a different MOOC. Our step number four is to have an improved topology for media routing.

07:22.280 --> 07:27.160
Currently we have Octo, which allows us to spread the load across multiple bridges. But

07:27.160 --> 07:31.400
this doesn't work very well for such a large load. You need like a tree style topology

07:31.400 --> 07:37.160
where some people are just receiving and a full mesh for those who are actively participating.

07:37.160 --> 07:46.040
So both loads can be spread. And last, we need to fix up the UI, let's say. So we don't

07:46.040 --> 07:51.280
need to render the visitors. We just need to know that there is, you know, 100 people

07:51.280 --> 07:57.520
and then 9,000 visitors. And that's it. So we want to refine the UI a little bit. We're

07:57.520 --> 08:01.680
thinking of using like the raised hand functionality to become an active participant. So you raise

08:01.680 --> 08:08.280
your hand, you are approved and then you become active. That's how we're thinking about it.

08:08.280 --> 08:13.920
Now some of it is in the present, some of it is in the future. So how is it going? We

08:13.920 --> 08:24.120
got there with 51 bridges. We got 10,009 participants. So it worked out. There's still some work

08:24.120 --> 08:30.480
to do. So the UI is not yet final. We're polishing up a little bit. And we're still

08:30.480 --> 08:35.720
need to add some more modules to mirror all the data we want, like the polls and other

08:35.720 --> 08:42.080
stuff. And we're thinking that maybe we don't really need to support 500 active participants

08:42.080 --> 08:47.000
because that's a weird conference, really. So that number could actually be lower or

08:47.000 --> 08:50.880
pretty much configurable. So you can say, I want this very many active participants and

08:50.880 --> 08:55.720
the rest, it will be visitors. And that's that. And of course, we need to make it easy

08:55.720 --> 09:01.160
to deploy for everyone. Right now, this is a bit held together with Duct Tape. Before

09:01.160 --> 09:07.120
I go, I'd like to give a shout out to the heroes that worked on the gaps of this. You

09:07.120 --> 09:13.480
may know their names from our community. Boy is Demento and Jonathan. Incredible characters.

09:13.480 --> 09:21.080
And I'm relaying the message. I know the words, but they did the work. And I'd like to share

09:21.080 --> 09:25.720
the love we have for Prosody. We wouldn't have been able to do it, I think, without

09:25.720 --> 09:32.120
such a flexible piece of software. They help us. We help them. It's a very nice relationship

09:32.120 --> 09:39.120
we have with the project. We love Matt and team. So shout out to them. And since that's

09:39.120 --> 09:44.200
all I got, you can follow the progress there. We have documentation actually how to deploy

09:44.200 --> 09:51.120
the existing way of doing things. Again, early stages, but it's there. And if you have any

09:51.120 --> 10:02.120
questions, well, I'm around here. Or find me online. Thank you very much.

1
0:00:00.000 --> 0:00:11.080
So let's start. So our next talk is about two very interesting worlds, broadcast and

2
0:00:11.080 --> 0:00:18.440
WebRTC. Please welcome Dan.

3
0:00:18.440 --> 0:00:25.800
Thanks everyone. So yes, merging two worlds, broadcast and WebRTC. So yes, I'm Dan Jenkins.

4
0:00:25.800 --> 0:00:32.880
I've been doing stuff with WebRTC for probably just over ten years now. And I guess very

5
0:00:32.880 --> 0:00:39.560
recently I've been more involved in air quote broadcast. And there are other ways that you

6
0:00:39.560 --> 0:00:49.640
can talk to me. Email, Twitter, that thing that's about to die. And Mastodon. So merging

7
0:00:49.640 --> 0:00:54.520
two worlds, broadcast and WebRTC. So I guess to talk about WebRTC and broadcast, we need

8
0:00:54.520 --> 0:01:01.080
a few definitions of some of the things we're going to talk about. So WebRTC, what is WebRTC?

9
0:01:01.080 --> 0:01:08.760
How many in the room know about how WebRTC really works? Hands up. Okay. About 25% of

10
0:01:08.760 --> 0:01:15.480
you. So that's good. So WebRTC is encrypted by default, sub second glass to glass, open

11
0:01:15.480 --> 0:01:22.040
source completely, two way communications, no defined signaling, which is kind of a good

12
0:01:22.040 --> 0:01:29.000
thing. And it's got a load of required codecs that you have to implement to be compliant.

13
0:01:29.000 --> 0:01:35.320
I use the word compliant. I don't think anyone's actually going. You're not compliant. But

14
0:01:35.320 --> 0:01:39.920
hopefully they will one day. It's embedded in every single browser. So that's the key

15
0:01:39.920 --> 0:01:47.400
thing here. Every single phone in every single pocket can do WebRTC without having to download

16
0:01:47.400 --> 0:01:52.920
anything. And that is the key thing. You can use your own codecs, but you can't use them

17
0:01:52.920 --> 0:01:58.880
from within a browser today. You could build something natively and use your own codec.

18
0:01:58.880 --> 0:02:06.160
But takes away some of the magic. Delivery is over UDP. And it's got a load of nap busting

19
0:02:06.160 --> 0:02:12.700
stuff with what we call ice. And there's one main thing called lib WebRTC that everyone

20
0:02:12.700 --> 0:02:20.640
talks to everyone else about as though it's WebRTC. It's not. There's lib WebRTC provided

21
0:02:20.640 --> 0:02:26.540
by Google, but they don't really provide it anymore as pre built stuff. But then there

22
0:02:26.540 --> 0:02:35.800
are loads of other open source independent versions available in many different languages.

23
0:02:35.800 --> 0:02:40.960
No signaling defined in the specs. So that's a big thing here. It was a good thing when

24
0:02:40.960 --> 0:02:47.600
it got made. When WebRTC first kind of became a thing. We'll come back to that later. So

25
0:02:47.600 --> 0:02:53.560
then there's SRT. SRT is a secure reliable transport. How many people in the room use

26
0:02:53.560 --> 0:03:01.080
SRT or know how SRT works? Probably about 25%. But it was a different 25% than before,

27
0:03:01.080 --> 0:03:06.880
mostly. So again, it's open source. It's used heavily in the broadcasting industry. It is

28
0:03:06.880 --> 0:03:14.680
UDP based. It really requires native apps. No browsers involved at all. It can be encrypted

29
0:03:14.680 --> 0:03:22.780
optionally. Most people use it encrypted. But you can use it without. And it is completely

30
0:03:22.780 --> 0:03:29.120
and utterly codec agnostic. But again, there are usually predefineds that people use. It

31
0:03:29.120 --> 0:03:37.760
can be sub second. But usually it's not. And it can be used within across the internet

32
0:03:37.760 --> 0:03:45.120
or within a LAN. NDI. How many people in the room have used NDI and know how it works?

33
0:03:45.120 --> 0:03:50.560
About 25%. Some of the same crowd again. So network device interface. I mean, who came

34
0:03:50.560 --> 0:03:57.720
up with a stupid name like that? Network device interface. So what am I actually doing? I

35
0:03:57.720 --> 0:04:06.320
always forget what it's actually referring to. It is not open source. And it comes in

36
0:04:06.320 --> 0:04:12.520
multiple forms. So there's pure NDI, which gives you a huge amount of data. Then there's

37
0:04:12.520 --> 0:04:20.520
HX, HX2 and HX3. Designed to work only within a LAN. Yes, you can make NDI kind of work

38
0:04:20.520 --> 0:04:27.280
across the internet now. But it's not really NDI, right? It's actually using WebRTC to

39
0:04:27.280 --> 0:04:34.360
do some of the magic. So ultimately it's designed to work within a LAN. And it's not open source,

40
0:04:34.360 --> 0:04:39.880
but it is free to use. But the licensing is a little bit confusing some of the times.

41
0:04:39.880 --> 0:04:47.320
So yeah, it's a bit of a weird one. But again, it is hugely popular. And yes, it uses UDP

42
0:04:47.320 --> 0:04:52.720
as well. All the good things with media use UDP, right? Then there's RIST. How many people

43
0:04:52.720 --> 0:05:04.560
have actually used RIST? OK. How many people understand how RIST actually works? So for

44
0:05:04.560 --> 0:05:10.680
the recording, I know. 1% of the room, 2% of the room. So RIST is actually really quite

45
0:05:10.680 --> 0:05:16.240
interesting. It is reliable internet stream transport. And to be honest, I've never used

46
0:05:16.240 --> 0:05:21.200
it. But I had to learn how it actually works to be able to confidently talk about it in

47
0:05:21.200 --> 0:05:27.320
front of you guys. So again, it's open source. It's UDP based. It is encrypted. It's RTP

48
0:05:27.320 --> 0:05:32.400
based. And it's relatively new in the grand scheme of things. And it can work within a

49
0:05:32.400 --> 0:05:37.960
WAN or a LAN. The other forms of media transport are not worth talking about right now. Because

50
0:05:37.960 --> 0:05:44.120
they're not really real time. And I know some of you are going to look at me and go, hmm.

51
0:05:44.120 --> 0:05:53.000
But bear with me. So merging two worlds. WebRTC and broadcast. And broadcast and WebRTC. They're

52
0:05:53.000 --> 0:05:59.360
two worlds that have not really come together in the past ten years. I know lots of people

53
0:05:59.360 --> 0:06:04.000
from the broadcast industry look at WebRTC as a dirty thing. It doesn't do this and it

54
0:06:04.000 --> 0:06:08.940
doesn't do that. But hopefully that's all changing for the better. Right? So they can

55
0:06:08.940 --> 0:06:16.600
now live in harmony. Hopefully. Maybe. So because of something called WIP and WEP. So let's

56
0:06:16.600 --> 0:06:23.400
take a look at WIP and WEP. WIP stands for the WebRTC, HTTP ingestion protocol. And this

57
0:06:23.400 --> 0:06:28.560
is how it works. I'm not going to bore you going through that. But I mean, ultimately,

58
0:06:28.560 --> 0:06:35.680
there's an HTTP request, request response, and then media flows. It should be as simple

59
0:06:35.680 --> 0:06:44.200
as that. Right? Then there's WEP. Which is the WebRTC HTTP Egress protocol. Kind of looks

60
0:06:44.200 --> 0:06:50.240
similar, right? So that's really great. And then there's this third one called WOW. WebRTC

61
0:06:50.240 --> 0:06:55.680
HTTP offer answer protocol. I wish it did exist. I think it would be really cool. But

62
0:06:55.680 --> 0:07:01.840
it doesn't exist. I messaged the author of both WIP and WEP this morning and went, we

63
0:07:01.840 --> 0:07:10.480
can just get rid of WIP and WEP and just have WOW. But no. So, yeah, these strangely look

64
0:07:10.480 --> 0:07:15.640
like signaling protocols to me. Right? And I said it was really great that WebRTC didn't

65
0:07:15.640 --> 0:07:23.600
have a signaling protocol. Didn't they? Well, it was great back in the day. It drove innovation.

66
0:07:23.600 --> 0:07:27.760
It drove many, many different applications to do things in their own way that made sense

67
0:07:27.760 --> 0:07:32.680
to them. They didn't have to use XMPP. They didn't have to use SIP. They could if they

68
0:07:32.680 --> 0:07:39.360
wanted to. And many did. Or you could go build something yourself using a JSON API, GraphQL,

69
0:07:39.360 --> 0:07:44.120
whatever suited you the most. Right? There was no defined way of going here's an offer

70
0:07:44.120 --> 0:07:52.760
and here's an answer. It was great. Until it wasn't. I say it wasn't. Because no enforced

71
0:07:52.760 --> 0:07:57.960
signaling protocol meant there was a lack of industry support. So we had all of these

72
0:07:57.960 --> 0:08:02.640
islands that didn't really know how to talk to one another. One of those problems that

73
0:08:02.640 --> 0:08:11.120
Matrix is trying to solve. But ultimately we had the likes of Jitsi and Teams and Google,

74
0:08:11.120 --> 0:08:19.560
Google me and whatever else. All doing great WebRTC things. They're quite great. But none

75
0:08:19.560 --> 0:08:24.000
of them could like interrupt with one another. And that was a real shame. And it meant that

76
0:08:24.000 --> 0:08:28.840
when we came to the broadcast industry, no one wanted to say implement, oh, how do I

77
0:08:28.840 --> 0:08:35.800
talk to MillerCast? How do I talk to Dolby? How do I talk to Flowcast? Whatever. They

78
0:08:35.800 --> 0:08:44.440
were never going to implement these 10 SDKs, 20 SDKs, to be able to talk to specific companies,

79
0:08:44.440 --> 0:08:53.640
services. So, yeah. How do you use WebRTC to deliver media while implementing a different

80
0:08:53.640 --> 0:09:01.200
API for everyone? And the simple answer is you didn't. The broadcast industry as a whole

81
0:09:01.200 --> 0:09:09.000
didn't enjoy WebRTC for many reasons. Not just lack of signaling. But many, this signaling

82
0:09:09.000 --> 0:09:15.960
was one of them. So you used a different protocol that would solve everything, right? Whether

83
0:09:15.960 --> 0:09:21.640
or not it was RTMP, whether or not it was Wrist or SRT or whatever. So whether or not

84
0:09:21.640 --> 0:09:30.080
you're a fan of WebRTC or you're not, it does have its uses. So up until recently you'd

85
0:09:30.080 --> 0:09:38.760
have to use an SDK or whatever and interop was really, really difficult. WIP and WEP.

86
0:09:38.760 --> 0:09:45.760
So yep, WIP and WEP. I'm actually going to try and get Sergio to change ingestion over

87
0:09:45.760 --> 0:09:53.520
to ingress or ingest just so that it kind of flows nicely with one another. And they're

88
0:09:53.520 --> 0:09:59.600
both drafts in the IETF. Drafts are nothing to be scared of. We all know that. Some businesses

89
0:09:59.600 --> 0:10:04.400
don't. Some businesses look at it and go, it's still a draft. We're not going to do

90
0:10:04.400 --> 0:10:10.520
anything with that. But we all know that drafts can be a really good thing. So what is actually

91
0:10:10.520 --> 0:10:17.840
WIP and WEP? Why have you come here today to find out what they are? So WIP. So you

92
0:10:17.840 --> 0:10:23.160
do a HTTP post up to a server. So WIP and WEP are really designed around getting media

93
0:10:23.160 --> 0:10:29.280
from a server, not another peer that's within a firewall NAT or anything like that. It's

94
0:10:29.280 --> 0:10:35.480
designed for here's a client, here's a server. I want to put media here or I want to go grab

95
0:10:35.480 --> 0:10:43.680
media from there. So WIP. You do an HTTP post with an SDP offer and then within the response

96
0:10:43.680 --> 0:10:50.240
you get an SDP answer. And then you're done. That's pretty much it. We can all go home

97
0:10:50.240 --> 0:10:57.720
now. WIP, pretty much exactly the same. You do an HTTP post with an SDP offer and you

98
0:10:57.720 --> 0:11:03.960
get an SDP answer in response. And you're done. They are pretty much not quite identical

99
0:11:03.960 --> 0:11:14.800
with one another. But they are. You do one HTTP request. Well, you can also do I's,

100
0:11:14.800 --> 0:11:21.000
trickle I's using options, requests and whatever else. But in its most basic form, you can

101
0:11:21.000 --> 0:11:28.760
do one request and one response and get media flowing. So what does that really get us that

102
0:11:28.760 --> 0:11:38.760
we didn't have before? Hardware encoders. For me, being able to bake in WIP and WEP

103
0:11:38.760 --> 0:11:47.800
support into hardware encoders and software is the biggest thing. And, yeah, the Talon

104
0:11:47.800 --> 0:11:55.760
hardware encoders support WIP today. With others, I know are about to support it as

105
0:11:55.760 --> 0:12:03.280
well. Software support. OBS. So there's already historically, there's been a version of OBS

106
0:12:03.280 --> 0:12:13.760
that was WebRTC-ified by the Cosmo team. But it was very much kind of designed around like

107
0:12:13.760 --> 0:12:19.400
offering up to MillerCast mostly. But they supported it and you could do stuff with it.

108
0:12:19.400 --> 0:12:27.960
But today there's a pull request open on OBS to add WebRTC support into OBS using WebRTC

109
0:12:27.960 --> 0:12:33.900
Rust. We've heard a lot about Rust in this room today. And that's absolutely fantastic.

110
0:12:33.900 --> 0:12:43.960
So now you'll be able to publish to a WIP endpoint and be able to just do it with a

111
0:12:43.960 --> 0:12:49.480
URL. And that's really quite cool. And then once that's been merged in, the plan is to

112
0:12:49.480 --> 0:12:58.560
add WIP support as far as I understand and then add continuing added extras around extra

113
0:12:58.560 --> 0:13:05.200
provisions around RTP headers, specific things. But at the moment, it's a very basic pull

114
0:13:05.200 --> 0:13:09.080
request. I say it's a basic pull request. It's a very complicated pull request from

115
0:13:09.080 --> 0:13:15.940
what I understand. But you've got to start somewhere without all the bells and whistles.

116
0:13:15.940 --> 0:13:23.640
Software support. Again, so GStreamer. GStreamer now supports WIP and WIP as syncs and sources.

117
0:13:23.640 --> 0:13:31.760
And this is absolutely huge. Again, it got properly released in 1.22. It was released

118
0:13:31.760 --> 0:13:39.640
earlier, but obviously 1.22 is not a development release. And so you can go and use WIP and

119
0:13:39.640 --> 0:13:46.760
WIP from GStreamer today. And there's loads of platform support out there. Dolby slash

120
0:13:46.760 --> 0:13:56.040
MillerCast support it. CloudFlare support it in CloudFlare stream. And then BroadcastBridge,

121
0:13:56.040 --> 0:14:03.800
my product also supports WIP and WIP. So yay, this is great, right? So using WebRTC for

122
0:14:03.800 --> 0:14:09.360
ingress and egress just got a whole load easier. There's now a standard. It's a fairly easy

123
0:14:09.360 --> 0:14:16.840
standard. And we can just kind of get on with our lives, right? So Simulcast and SVC are

124
0:14:16.840 --> 0:14:23.320
both supported. They're called out in the draft. You can do this. Because ultimately,

125
0:14:23.320 --> 0:14:29.160
it's just an HTTP request transferring SDP, right? Anything you could do within your SDP,

126
0:14:29.160 --> 0:14:36.680
you can do within WIP and WIP, basically. Yes, SDP still remains. If you don't know

127
0:14:36.680 --> 0:14:42.400
what SDP is, it's a block of text that magically says, here's how to set up media. And, you

128
0:14:42.400 --> 0:14:49.160
know, it's probably at worst, I don't know, 300 lines of code. I haven't looked recently.

129
0:14:49.160 --> 0:14:55.280
It's huge. It can be huge. Because it can tell either side, this is how I, this is,

130
0:14:55.280 --> 0:14:59.720
these are all of the codecs that I support. These are all of the codecs that, and then

131
0:14:59.720 --> 0:15:06.360
the answer comes in and goes, yeah, we're going to negotiate this. So SDP is a mess.

132
0:15:06.360 --> 0:15:11.000
But it does its job really, really well at the end of the day. And because it's just

133
0:15:11.000 --> 0:15:19.240
SDP, just SDP that we're using with WebRTC everywhere, it gives us the freedom to be

134
0:15:19.240 --> 0:15:24.600
able to do whatever we want. So that's extra codecs. That's being able to just say, oh,

135
0:15:24.600 --> 0:15:30.400
I'm going to make a random codec that does something very, very specific to my use case.

136
0:15:30.400 --> 0:15:35.560
It's not going to work in a browser, but it does work for my use case. And if both ends

137
0:15:35.560 --> 0:15:41.320
know how to talk about that codec, then you can do that. Opus Red, for example, Opus Red

138
0:15:41.320 --> 0:15:45.680
hopefully will become standard in the browser. I don't think it is today. I think it's still

139
0:15:45.680 --> 0:15:56.680
behind a flag. But being able to put in redundant packets of audio is really quite cool. So

140
0:15:56.680 --> 0:16:01.120
hopefully that's going to turn up in a browser soon. But yeah, it also allows you to do RTP

141
0:16:01.120 --> 0:16:09.000
header extensions, like DTX, et cetera. So yeah, I mean, you're all looking at me like,

142
0:16:09.000 --> 0:16:14.160
this is a bit boring, right? And yeah, whip and whip is a bit boring. It's not groundbreaking

143
0:16:14.160 --> 0:16:18.880
at all. And like, sorry, Sergio, he's going to watch this later. He's the author of both

144
0:16:18.880 --> 0:16:24.640
or co-author of both. Yeah, it's not groundbreaking at all, right? It's just an HTTP offer and

145
0:16:24.640 --> 0:16:31.520
answer. It should be called WOAH, right? No traction for that in the room. Okay. There

146
0:16:31.520 --> 0:16:36.000
is some state handling in there as well. Obviously, you have to keep track of things and whatever

147
0:16:36.000 --> 0:16:42.320
else. But I mean, it's really great. So it gives everyone these two common protocols

148
0:16:42.320 --> 0:16:48.040
for send and receive. And that leads to open innovation and open source projects. So there's

149
0:16:48.040 --> 0:16:55.320
already projects out there that do SRT to whip. So you can take in your SRT that you've

150
0:16:55.320 --> 0:17:00.000
been using for the past however many years, and then you can make it whip because your

151
0:17:00.000 --> 0:17:04.600
media server only understands WebRTC, right? There are projects out there, G Streamer being

152
0:17:04.600 --> 0:17:13.240
one of them. There's WebServer from the Meet Echo team. There's WebPlayer from the Meet

153
0:17:13.240 --> 0:17:24.560
Echo team. And Ivan from Sweden. The whip server, again, whip client. These are all

154
0:17:24.560 --> 0:17:29.980
browser-based tools or they're all command line tools or they're all server tools that

155
0:17:29.980 --> 0:17:39.040
talk to Janus for you to be able to make Janus understand whip and whip. So it's a great

156
0:17:39.040 --> 0:17:45.280
time to start looking at WebRTC if you haven't already done so in the past. I've got the

157
0:17:45.280 --> 0:17:51.520
same slide twice somehow. Side note, G Streamer. G Streamer is really cool. It allows you to

158
0:17:51.520 --> 0:17:55.280
point all of these things to all of these things, right? And it's really quite cool

159
0:17:55.280 --> 0:18:02.000
and it even supports RTMP. You don't have to love WebRTC and you don't have to love

160
0:18:02.000 --> 0:18:08.320
everything about it. I mean, I certainly don't love WebRTC every day. There are times that

161
0:18:08.320 --> 0:18:14.840
I literally want to throw it against the wall. But it does its job really, really well and

162
0:18:14.840 --> 0:18:22.640
is incredibly useful. And it is just another tool in the toolbox. Sometimes SRT isn't right.

163
0:18:22.640 --> 0:18:30.480
Sometimes Wrist isn't going to be right. Sometimes you are just going to need WebRTC. So whip

164
0:18:30.480 --> 0:18:36.400
and whip open up all of those possibilities. And I haven't talked in detail about any of

165
0:18:36.400 --> 0:18:43.680
them. But hopefully you've got enough information to get going. So thank you very much. And

166
0:18:43.680 --> 0:18:50.820
oh, one more thing. ComCon2023 is a conference that I run in the UK. And that's happening

167
0:18:50.820 --> 0:18:57.180
this year for the first time in person since before the pandemic. So expect an announcement

168
0:18:57.180 --> 0:19:08.440
on dates and venue soon. And that's me. Thank you very, very much. And we're hiring just

169
0:19:08.440 --> 0:19:16.600
like everyone else. So if you want to do software engineering in the UK around these kinds of

170
0:19:16.600 --> 0:19:28.200
technologies, then go to jobs.everycastlabs.uk. Any questions from the floor? Have you used

171
0:19:28.200 --> 0:19:39.360
the CDI, the WSSDI and JPGetSS? WSSDI, sorry? And JPGetSS? No. It's for real-time streaming

172
0:19:39.360 --> 0:19:48.520
broadcast and compress the video. Oh, okay. I'll comment. So I didn't catch all of the

173
0:19:48.520 --> 0:20:00.160
detail. AWS is... Right. No, I haven't used AWS's product called CDI. I try not to use

174
0:20:00.160 --> 0:20:06.680
anything AWS, to be perfectly honest. Because, you know, when's it going to disappear? But

175
0:20:06.680 --> 0:20:18.280
no, I haven't. So AWS's product does broadcast uncompressed stuff. Okay. Is there any matrix

176
0:20:18.280 --> 0:20:24.880
effort with WIP and WEP? So is there any matrix effort around WIP and WEP? I honestly don't

177
0:20:24.880 --> 0:20:31.600
know. I can't imagine so, because they're designed to like... Matrix is designed to

178
0:20:31.600 --> 0:20:37.000
kind of bridge between media servers. And so they already have ties into those media

179
0:20:37.000 --> 0:20:43.560
servers. So they wouldn't need WIP and WEP, I imagine. But that would be a question for

180
0:20:43.560 --> 0:20:49.200
the Matrix team. But I don't imagine it turning up. You had a question.

181
0:20:49.200 --> 0:20:54.760
You mentioned some new cast and SVC are supported. I haven't read the latest... Do they have

182
0:20:54.760 --> 0:21:01.720
like a way to layer selection on the client? So the question is, Simulcast and SVC are

183
0:21:01.720 --> 0:21:10.360
supported in the draft. Does it tell you how to layer select? No. There's a note that says,

184
0:21:10.360 --> 0:21:15.880
oh, there's nothing stopping you from doing Simulcast or SVC. But as far as I could see

185
0:21:15.880 --> 0:21:21.000
this morning, when I was finishing off my slides, there's no detail. There's no further

186
0:21:21.000 --> 0:21:28.200
detail on that. But yes, we shall see. But there's still drafts. There's still time to

187
0:21:28.200 --> 0:21:33.720
add detail and stop things from happening that we don't necessarily agree with.

188
0:21:33.720 --> 0:21:43.880
Does that hardware you showed support SVC or Simulcast?

189
0:21:43.880 --> 0:21:50.760
I don't think so. From memory. I've not actually used the hardware myself. I've just read the

190
0:21:50.760 --> 0:21:56.120
press releases and talked to people that are using it. As far as I'm aware, they're not.

191
0:21:56.120 --> 0:22:02.760
They are just using a stream that they're getting and one stream with one layer. But

192
0:22:02.760 --> 0:22:12.240
yes, SVC is kind of the future of having options. And so it needs to be a first-class citizen

193
0:22:12.240 --> 0:22:18.920
in whatever we're doing in the future. And it's now released VP9 SVC. And I think AV1

194
0:22:18.920 --> 0:22:24.520
SVC are now released in Chrome. That's going to be released into stable very, very, very

195
0:22:24.520 --> 0:22:32.000
soon. So we're going to have all of these options in the browser natively really soon.

196
0:22:32.000 --> 0:22:50.520
Any other questions? Thank you very much.


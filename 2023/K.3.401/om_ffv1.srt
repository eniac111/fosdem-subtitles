1
0:00:00.000 --> 0:00:27.040
Okay, let's start. So our next talk is about the FSD1 ecosystem done by someone who knows

2
0:00:27.040 --> 0:00:37.040
that very well. Please welcome Jerome. Hello. A bit sooner than Baptiste said, but we don't

3
0:00:37.040 --> 0:00:45.280
speak enough about FFmpeg, so we'll speak about FFmpeg a bit more, but not about a very fancy

4
0:00:45.280 --> 0:00:58.000
codecs. The word is about the lossy compression H265, VVC or AV1, but we will speak about something

5
0:00:58.000 --> 0:01:07.440
a bit more boring. It is the lossless compression. Because some people need to do some broadcasting

6
0:01:07.440 --> 0:01:14.800
and just broadcast and forget the content. People can watch and have a lot of compression

7
0:01:14.800 --> 0:01:25.120
artifacts. If it is visually lossless or if visually it is not so high level of artifacts,

8
0:01:25.120 --> 0:01:31.360
it is fine. But for some other people, having a lossless video coding format is very important.

9
0:01:32.080 --> 0:01:40.880
And also something open, so no patterns and so on. So FFV1 fits a lot of things about that. It is

10
0:01:40.880 --> 0:01:48.480
a very old technology, more than 30 years old technology, so no pattern for sure. There is also

11
0:01:48.480 --> 0:01:56.160
a good reference encoder and decoder. It is FFmpeg. Thank you, FFmpeg. It is widespread, so a lot of

12
0:01:56.160 --> 0:02:03.200
people can use it. We can embed FFV1 in a lot of different containers. The most used are AVI for

13
0:02:03.200 --> 0:02:12.960
all people, MP4, Matroska, MxF also. And FFV1 has a good balance between compression and speed

14
0:02:12.960 --> 0:02:23.120
and also a bit about cost. Because there are some competitions, some open formats, also in FFmpeg,

15
0:02:23.120 --> 0:02:27.920
they can have a good compression, but they are very slow or the compression is not so good.

16
0:02:27.920 --> 0:02:35.520
And outside of FFmpeg, we have JPEG 2000, for example, but encoders are pretty expensive

17
0:02:35.520 --> 0:02:43.440
sometimes and so on. But FFV1 is natively in FFmpeg, the compression is good, the speed

18
0:02:43.440 --> 0:02:48.640
for a lossless format is not so bad. So we use it a lot in some configurations.

19
0:02:50.800 --> 0:02:56.960
Especially because we've opened an open format and an open source implementation,

20
0:02:56.960 --> 0:03:04.960
it is easy to expand depending on the need we have. So with FFmpeg, we have only black and white

21
0:03:04.960 --> 0:03:14.240
or YUV or RGB, and we can also add an alpha journal. We can expand it up to 16 bits per component.

22
0:03:14.240 --> 0:03:23.280
So from 8 to 16, and also if we need 12 or 10, we can adapt a lot of FFV1 format for

23
0:03:23.280 --> 0:03:30.160
being able to support every input we need. With the latest development a few years ago,

24
0:03:30.160 --> 0:03:36.560
we have also a good multi-freed system in FFV1. We have checksum, so we are sure that

25
0:03:37.200 --> 0:03:43.600
when we store the content, we can detect if there is a problem during the storage.

26
0:03:43.600 --> 0:03:52.720
A lot of work was done by Michael Nider-Mayer a few years ago, so he is a main developer of FFV1.

27
0:03:53.680 --> 0:04:02.240
So thank you to him about that. It helped a lot. So we are aware that, yeah, lossless

28
0:04:03.440 --> 0:04:09.680
compression is a very niche market because not so many people need it compared to the

29
0:04:09.680 --> 0:04:21.280
broadcasting or the lossless compression like H264 or AV1 and so on. And these people who need that

30
0:04:21.840 --> 0:04:27.360
are not rich, but it is pretty important for them to have a lossless compression.

31
0:04:27.360 --> 0:04:32.400
And also, actually, it is also for us important because a lot of users who need

32
0:04:32.400 --> 0:04:42.240
lossless compression work in archives so far our heritage in 100, 1000 years, we need to have the

33
0:04:42.240 --> 0:04:50.560
content. And for that also, it is important to keep the content as the best possible.

34
0:04:50.560 --> 0:04:57.920
So no compression artifacts. It is the reason these people, they want no compression, no

35
0:04:57.920 --> 0:05:08.000
lossy compression. And in this niche market from archives, some entities discovered that

36
0:05:08.640 --> 0:05:15.680
paying for FFV1 development inside FFmpeg, for example, is a lot less costly than buying

37
0:05:15.680 --> 0:05:22.560
products on the shelves. Even if the product are there, when you buy a product, it is pretty

38
0:05:22.560 --> 0:05:28.320
expensive. It is a package. You need to buy a package. And actually, if we take this money

39
0:05:28.320 --> 0:05:37.600
and don't buy the products on the shelves and we develop a product inside FFmpeg, it is less costly.

40
0:05:38.160 --> 0:05:43.680
And then after that, other entities discovered that, oh, it is an FFmpeg and it is open,

41
0:05:44.400 --> 0:05:51.520
it is free, off-charge, no patent. The software is also free, open source and free. And there

42
0:05:51.520 --> 0:05:57.120
are a lot of workers for them too. So it is very good for these people. They are not rich. They

43
0:05:57.120 --> 0:06:03.920
need to have this lossless compression and FFmpeg is perfect for that. But yeah, they need to trust

44
0:06:03.920 --> 0:06:11.840
that this choice is sustainable and FFV1 is in FFmpeg, but it is not a standard. So

45
0:06:11.840 --> 0:06:22.480
the archive wanted to have more trust in the format. So it is not only about code, but we need

46
0:06:22.480 --> 0:06:32.720
also to have a standard, for example. And there was a work by the Open Union and there was a project

47
0:06:32.720 --> 0:06:39.440
called Preformer to help archive to have checks on their file. And for the documents in archive,

48
0:06:39.440 --> 0:06:46.560
it was easy, PDF, it is a nice standard, fine. For images, when they do scan, it is also not so bad.

49
0:06:46.560 --> 0:06:54.560
They have TIFF, it is a nice standard, it is good. But now they have a lot of AV content. And for that,

50
0:06:54.560 --> 0:07:04.880
there was no open and standardized format. So they decided to sponsor some work on Matroska and FFV1

51
0:07:04.880 --> 0:07:15.040
and PCM for the audio. So no format for that. So we tried to work with Preformer and we

52
0:07:16.800 --> 0:07:27.360
helped to create an ITF working group. And why ITF and not ISO or SMBTE is mainly because ITF has

53
0:07:27.360 --> 0:07:34.080
no payroll for the standards. So it is very useful for people who are not rich,

54
0:07:34.080 --> 0:07:40.480
a lot of archive are very small. They don't have the money to pay a lot of different standards

55
0:07:40.480 --> 0:07:50.080
and so on. And also, ITF is very welcoming new people, helping them to create a new standard.

56
0:07:50.080 --> 0:07:56.720
So thank you to ITF for that. On our site, we focused on different formats. So Matroska for

57
0:07:56.720 --> 0:08:04.480
the container part, FFV1 for the video part and also for some lossless audio compression flag.

58
0:08:06.320 --> 0:08:13.600
So now with ITF, we are working well. It is a bit slow because we are mostly now volunteers,

59
0:08:13.600 --> 0:08:20.240
but we are still working inside the CELAR working group. So Matroska,

60
0:08:20.240 --> 0:08:28.800
it is still a work in progress. Some part, EBML, the base of Matroska is already published.

61
0:08:29.520 --> 0:08:34.960
It is an AIFC. So it is good. Now we are working on the core of Matroska.

62
0:08:36.480 --> 0:08:42.560
It is on the way and then we will work on the codec, on the tags part and so on.

63
0:08:42.560 --> 0:08:51.600
A lot of work is done by Steve Lom. Thank you to him. And thank you, Steve, you are there.

64
0:08:51.600 --> 0:09:01.120
Also for FFV1, we worked on having a standard. So now the version 0, 1 and 3 are published.

65
0:09:01.120 --> 0:09:08.800
It is an AIFC. So people are more confident in that. And we want to have also FFV1 version 4,

66
0:09:08.800 --> 0:09:14.320
but we still need more development about that. About the flag, the audio part,

67
0:09:15.920 --> 0:09:22.640
it is still on the way. There is an ITF last call. So the specification is nearly ready,

68
0:09:23.360 --> 0:09:30.000
but there is still some review by the ITF to do. So Martin is working a lot on that.

69
0:09:30.000 --> 0:09:33.520
And we hope to have the AIFC maybe next month.

70
0:09:33.520 --> 0:09:43.600
But for video formats, it is not only in the ITF world, it is not only Matroska.

71
0:09:43.600 --> 0:09:52.800
We also need to have it accepted a bit more everywhere. So we asked to SMT to accept FFV1

72
0:09:52.800 --> 0:10:01.280
in MXF. So it is not something easy because SMT you need to register and you need to pay a lot

73
0:10:01.280 --> 0:10:10.160
and so on. But thanks to the Library of Congress, they wanted that to replace JPEG 2000 by FFV1.

74
0:10:10.160 --> 0:10:19.600
So they worked with SMT and now FFV1 is officially supported by MXF. So it is not a standard,

75
0:10:19.600 --> 0:10:25.840
but it is a RDD. So register, disclosure document, a bit like a poor eyes in MXF.

76
0:10:25.840 --> 0:10:35.120
We have the universal label from MXF available for FFV1. It is not a hack. It is registered in

77
0:10:35.120 --> 0:10:47.520
the SMT. So FFV1 is not only in FFmpeg and not only in Matroska. It is also in other containers

78
0:10:47.520 --> 0:10:54.240
and not only the one used on the web. It is also used in MXF. So more for broadcasting.

79
0:10:54.240 --> 0:11:03.760
FFmpeg has support of FFV1 in MXF for demuxing for the moment. And we sent a patch for the

80
0:11:03.760 --> 0:11:11.440
mux in on FFmpeg level. So it is on the way to have a good support of FFV1 in MXF inside FFmpeg

81
0:11:11.440 --> 0:11:22.080
directly. For the archive, it is not only about storing the files. It is also being sure that the

82
0:11:22.080 --> 0:11:30.480
files are perfect compared to the specifications. So we work with an ecosystem. So it is not only

83
0:11:30.480 --> 0:11:35.280
the code. So we create a file and then we put in the storage. We want to be sure that

84
0:11:36.560 --> 0:11:44.560
later it will be readable because it is not just immediate usage. It is for the future. So

85
0:11:45.360 --> 0:11:50.960
a lot of people need to be sure that the file is fine. So we created a conformance checker

86
0:11:50.960 --> 0:12:00.480
called MediaCrunch. And based on the specification from Matroska and FFV1, for example, we can say

87
0:12:00.480 --> 0:12:06.080
that the file is conformed or not to the specification. And before putting the file in

88
0:12:06.080 --> 0:12:11.680
the storage, we are sure that the file is conformed to specifications so that it will be easy to read

89
0:12:11.680 --> 0:12:25.360
it later. But sometimes in the archive, we have different inputs with very different formats and

90
0:12:25.360 --> 0:12:32.320
with some proprietary formats, sometimes about less storage. So for the archive, it is very

91
0:12:32.320 --> 0:12:40.880
difficult to be sure that in 100 years, they will be able to play a file with a codec

92
0:12:40.880 --> 0:12:50.080
available for Windows 95, for example, and it is only 32 bits and it is only for Intel CPU,

93
0:12:50.080 --> 0:12:59.120
but maybe in 100 years, there will be only an ARIN. So it is better to convert. And for that,

94
0:12:59.120 --> 0:13:06.640
a lot of people are using FFmpeg. So thank you, FFmpeg, for that. And archives, the Film Institute,

95
0:13:06.640 --> 0:13:16.560
and so on, they use FFmpeg. They don't develop FFmpeg, but the community needs also to do some

96
0:13:16.560 --> 0:13:23.440
scripts. So they publish scripts about how to use FFmpeg. So we have two examples there about how

97
0:13:23.440 --> 0:13:33.920
archives are using FFmpeg for doing the transcoding. Another practical usage in Film Archives

98
0:13:33.920 --> 0:13:43.760
is that usually they receive from the scanner, the PIX files. So they don't have only one file,

99
0:13:43.760 --> 0:13:52.080
they have one file per image. So it is totally crazy for the file system. And it is difficult

100
0:13:52.080 --> 0:14:02.640
to store. It is very huge. There is no compression and so on. So we can help with open source formats.

101
0:14:02.640 --> 0:14:09.680
So with Matroska, FFV1, and Flak, why not? It is still huge because it is lossless compression.

102
0:14:09.680 --> 0:14:16.080
But dividing by two, the cost of the storage is good to take when you have petabytes of content.

103
0:14:18.160 --> 0:14:26.640
The issue is that not all workflow accept FFV1 and Matroska. So we need something

104
0:14:26.640 --> 0:14:37.680
for doing the conversion between DPX and FFV1. There is sometimes some legal commitments. It is

105
0:14:37.680 --> 0:14:45.600
a bit crazy, but we need to have the exact same file. So if a DPX file comes in, the legal

106
0:14:45.600 --> 0:14:53.040
requirement is to provide the DPX file when it is requested by the state, for example.

107
0:14:53.040 --> 0:15:01.680
So far the compression is not so good because FFV1 compresses the video, but not the DPX header,

108
0:15:01.680 --> 0:15:15.280
for example. So we need a bigger ecosystem than FFV1 alone because FFV1 is about the video

109
0:15:15.280 --> 0:15:24.400
compression, but not everything besides the video content. So we created a tool called Rokukt.

110
0:15:25.200 --> 0:15:32.080
This tool fills the gap between what exists, FFmpeg, and what is needed to save the

111
0:15:32.080 --> 0:15:40.400
DPX header, for example. So with Rokukt, we take the DPX header, we store it in an attachment in

112
0:15:40.400 --> 0:15:49.200
Matroska. So it is also useful to have an open source container format because we can expand it

113
0:15:49.200 --> 0:15:58.000
and so on very easily. And we send the video content to FFmpeg. FFmpeg does the compression.

114
0:15:58.560 --> 0:16:04.960
And besides that, when we need again the DPX, we decode with FFmpeg, we inject again the DPX header,

115
0:16:04.960 --> 0:16:17.920
and we create from that the exact source file. So we have this ecosystem around FFV1, and we want

116
0:16:17.920 --> 0:16:27.440
to expand it to have... What could we do with that? If everyone is good, but speed... Okay,

117
0:16:27.440 --> 0:16:34.640
it is good, but we could be better, maybe. We want to expand the decoder, and encoder

118
0:16:34.640 --> 0:16:41.760
maybe with SIMP or GPU acceleration, but we need to work on that. And then maybe if we have

119
0:16:41.760 --> 0:16:52.240
overnight, we will create FFV1 version 4 inside the IETF system. So as a summary, code is important.

120
0:16:52.240 --> 0:16:59.040
For example, FFmpeg has a very good FV1 encoder and decoder, but it is not enough because we need

121
0:16:59.040 --> 0:17:05.680
to make user communicate and to share the scripts. We need to have a format reviewed

122
0:17:05.680 --> 0:17:12.560
by a standardization body to be sure that the format is fine. With the IETF, when we worked

123
0:17:13.360 --> 0:17:21.040
on having a standard about FFV1, for example, we found some bugs in the reference encoder.

124
0:17:21.040 --> 0:17:30.080
So it was good to have reviewers about that. And we create for that a big committee, not only about

125
0:17:32.080 --> 0:17:40.560
the code, the FFV1 code, but also the users. And with that, we show that open source can also help

126
0:17:40.560 --> 0:17:51.040
about niche needs and not only broadcasting and the big things like YouTube and so on.

127
0:17:51.040 --> 0:17:53.280
It is finished. So if you have questions.

128
0:17:53.280 --> 0:18:14.080
So the main increase was about speed coding. I had that question since before. So maybe the

129
0:18:14.080 --> 0:18:24.160
next version could be comparable to JPEG access. You mean maybe JPEG Excel? There is an access.

130
0:18:24.160 --> 0:18:35.920
Yes, exactly. How is it comparable to JPEG access? So if it is, there was some discussion

131
0:18:35.920 --> 0:18:46.880
between us and JPEG access developers. So JPEG access is actually a bit based of FFV1. The developer

132
0:18:46.880 --> 0:18:56.240
took part of JPEG 2000 and also part of FFV1 for creating JPEG2 access. So there was a path

133
0:18:56.240 --> 0:19:07.200
between something from FFV1 actually in JPEG access. JPEG access is also open, but the

134
0:19:07.200 --> 0:19:17.680
specification is not open also. For FFV1, the specification at IETF, there is a copyright on it

135
0:19:17.680 --> 0:19:27.440
and you cannot modify it. But the version in our GitHub is totally open source also. It is

136
0:19:30.320 --> 0:19:37.840
creative command license. So also a big difference between FFV1 and JPEG access is that

137
0:19:37.840 --> 0:19:49.360
FFV1 is easier to understand about the compression mechanism and also that the specification license

138
0:19:49.360 --> 0:19:56.000
is open also. And for us, it is very important that everything is open, not only the compression

139
0:19:56.000 --> 0:20:03.440
and the decompression, but also the specification. But we need to do more performance comparison

140
0:20:03.440 --> 0:20:08.320
between speed or compression efficiency with JPEG access for sure.

141
0:20:13.040 --> 0:20:20.240
Just to continue on JPEG access, there is also the issue that JPEG access is not royalty free.

142
0:20:21.040 --> 0:20:25.520
So that also is a consideration. But

143
0:20:25.520 --> 0:20:33.200
there is an issue about JPEG access about

144
0:20:33.200 --> 0:20:40.640
royalty. It is not completely sure about there is some risk about patterns, but the

145
0:20:41.360 --> 0:20:49.200
JPEG access developers wanted that it is more or less free. So there is a discussion about that.

146
0:20:49.200 --> 0:20:56.400
But it is based on JPEG 2000 and there was some risk of patterns with JPEG 2000, but the lossless

147
0:20:56.400 --> 0:21:03.360
part of JPEG 2000. So there is exactly some risk about patterns in the compression system.

148
0:21:03.360 --> 0:21:08.960
With FFV1, we are completely sure that there is no pattern because we created nothing about that.

149
0:21:08.960 --> 0:21:17.760
So I didn't really have a question, but I just want to thank the FFV1 project because it was,

150
0:21:18.800 --> 0:21:27.840
I made a free lossless image format at Flip and was quite inspired by FFV1 in the sense of the

151
0:21:27.840 --> 0:21:34.160
entropy coding and the context modeling that is going on there. It was inspired by FFV1. And now

152
0:21:34.160 --> 0:21:40.880
how these things have moved from Flip to JPEG Excel, which is other JPEG standard,

153
0:21:42.400 --> 0:21:49.040
where some of the context modeling of FFV1 actually is used in JPEG Excel as well.

154
0:21:50.480 --> 0:22:01.520
So the remark was about FFV1 helped to create Flip and then JPEG Excel. So it is part, FFV1 was

155
0:22:01.520 --> 0:22:11.360
maybe, yeah, maybe I misunderstood. You talk about JPEG access and I mix up with JPEG Excel.

156
0:22:11.360 --> 0:22:20.800
I wanted to say about JPEG Excel. So sorry about the confusion. So the names are confusing.

157
0:22:22.000 --> 0:22:28.960
So FFV1 was the base of JPEG Excel and now we need to do some comparison between what

158
0:22:28.960 --> 0:22:38.400
is FFV1 now and what if JPEG Excel can help more than FFV1. But for the moment,

159
0:22:38.400 --> 0:22:44.000
it is pretty important for us to have open specifications and not behind the payroll.

160
0:22:44.000 --> 0:22:47.840
So with IETF for us, it is very important to have that.

161
0:22:48.640 --> 0:22:55.520
Yeah, I agree that IETF is much better in that regard than ISO, which puts all the specifications

162
0:22:55.520 --> 0:23:04.560
behind the payroll, which is not helpful. Yeah, one other issue with JPEG Excel is the payroll.

163
0:23:05.520 --> 0:23:12.800
Another question. In comparison to raw video, what kind of compression ratio can someone tap?

164
0:23:12.800 --> 0:23:20.880
We, the compression ratio is between one to three, between half. The average is half.

165
0:23:20.880 --> 0:23:28.560
Sometimes it is a third, sometimes a bit more. But the average compression ratio is dividing

166
0:23:28.560 --> 0:23:36.560
by two, the storage cost. Is the algorithm itself extensible? In the future, let's say you have a

167
0:23:36.560 --> 0:23:42.800
new compression algorithm that gets better ratios. Can you switch that? We could switch. FFV1

168
0:23:42.800 --> 0:23:50.080
is based off the range coder for the moment, but if we find something better, we could switch.

169
0:23:51.600 --> 0:23:57.360
There is a discussion for FFV1 version 4 about what to use instead.

170
0:24:00.560 --> 0:24:06.320
Is there a theoretical limit on how much you can divide the file based on the information of,

171
0:24:06.320 --> 0:24:15.600
for example, the video? Is there a limit about the compression ratio? It is more that the content

172
0:24:15.600 --> 0:24:24.560
itself we need to avoid to lose a pixel. So if you have a black frame, it is very, very small.

173
0:24:24.560 --> 0:24:34.160
So the range coder, you can store in two bytes. If it is only black, it will be repeated and there

174
0:24:34.160 --> 0:24:41.440
is no bit consuming about that. But this is not a use case we have in reality.

175
0:24:43.920 --> 0:24:52.560
How does the output file size compare with other codecs that use high-quality parameters?

176
0:24:52.560 --> 0:25:04.880
Compared to lossy compression, you mean a lot. The files are, if you have...


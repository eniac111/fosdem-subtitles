1
0:00:00.000 --> 0:00:07.120
Okay, my name is Nuno.

2
0:00:07.120 --> 0:00:14.720
I've been around VoIP and RTC for the last, I think, 15 years.

3
0:00:14.720 --> 0:00:19.120
The last 10 more involved with open source.

4
0:00:19.120 --> 0:00:27.440
And well, right now I'm working at Talk Desk, which is a contact center cloud-driven company.

5
0:00:27.440 --> 0:00:34.280
And we are starting adopting more and more open source technology into the company.

6
0:00:34.280 --> 0:00:37.920
And well, that's what also drives me.

7
0:00:37.920 --> 0:00:42.440
So my talk will be about secure pavements over VoIP calls in the cloud.

8
0:00:42.440 --> 0:00:46.360
It's something that all contact centers probably need.

9
0:00:46.360 --> 0:00:54.800
And in order to do this, we have to follow some rules and specifications.

10
0:00:54.800 --> 0:00:57.720
And let's dive into that.

11
0:00:57.720 --> 0:01:05.720
Okay, so I'll be telling you what PCI DSS is, what was the existing problem, and what

12
0:01:05.720 --> 0:01:14.800
was the solution for our own implementation, the actual architecture of the solution.

13
0:01:14.800 --> 0:01:30.800
And payment card industry data security standard.

14
0:01:30.800 --> 0:01:41.480
Well, it's a standard that was put together by a bunch of companies like American Express,

15
0:01:41.480 --> 0:01:44.800
Discover, Vastacard, Visa, etc.

16
0:01:44.800 --> 0:01:48.960
So they created a bunch of mandatory rules for the industry.

17
0:01:48.960 --> 0:01:54.920
This is called the PCI data security standard.

18
0:01:54.920 --> 0:02:02.720
And well, in PCI lingo, all business that process credit cards are referred as merchants,

19
0:02:02.720 --> 0:02:05.920
which is our case at Talk Desk.

20
0:02:05.920 --> 0:02:15.880
And whenever we are big or small, we have to follow these rules for credit card security.

21
0:02:15.880 --> 0:02:24.040
And basically, there are very different levels for the merchants, the ones that process like

22
0:02:24.040 --> 0:02:28.120
6 million transactions, whatever.

23
0:02:28.120 --> 0:02:30.800
So they are level one.

24
0:02:30.800 --> 0:02:38.840
We contact centers, if they're not that big, they end up in the levels three or four.

25
0:02:38.840 --> 0:02:42.520
Again, SAQs.

26
0:02:42.520 --> 0:02:45.920
So SAQs are self-assessment, questionnaire level.

27
0:02:45.920 --> 0:02:53.160
So we have to kind of answer some questions to see where we fit.

28
0:02:53.160 --> 0:03:05.120
And basically, since we are an electronic processing company, we fit in under SAQA.

29
0:03:05.120 --> 0:03:08.480
And so no face-to-face merchants.

30
0:03:08.480 --> 0:03:13.440
Everything is done with e-commerce or telephone.

31
0:03:13.440 --> 0:03:17.800
So this is where we are at.

32
0:03:17.800 --> 0:03:24.220
So the existing problem and solution, why we did something different.

33
0:03:24.220 --> 0:03:32.400
So in order to do this kind of payments, we were using some proprietary equipment like

34
0:03:32.400 --> 0:03:36.720
SBCs, et cetera.

35
0:03:36.720 --> 0:03:41.840
And everything in the end sometimes had some failures.

36
0:03:41.840 --> 0:03:48.960
There's the usage of DTMFs on this a lot, at least for typing the credit card number.

37
0:03:48.960 --> 0:03:51.440
We need to use DTMFs.

38
0:03:51.440 --> 0:03:58.760
But besides the credit card numbers itself, we have also to use DTMFs like to tell the

39
0:03:58.760 --> 0:04:07.080
partner that the actual partner will be speaking more about it later.

40
0:04:07.080 --> 0:04:14.280
The partner basically needs to know when you want to have your channel secure for the actual

41
0:04:14.280 --> 0:04:20.080
customer to be able to start typing the credit card information.

42
0:04:20.080 --> 0:04:26.340
That is then, was being done by the usage of a PIN on the agent side.

43
0:04:26.340 --> 0:04:32.880
So the agent would basically use his dialer in the screen most of the times to type a

44
0:04:32.880 --> 0:04:37.840
PIN in order to engage with the PCI partner.

45
0:04:37.840 --> 0:04:45.000
And if all went well, the actual customer would be hearing a voice telling him the call

46
0:04:45.000 --> 0:04:47.920
is now in a secure situation.

47
0:04:47.920 --> 0:04:52.820
You can follow up like typing the credit card.

48
0:04:52.820 --> 0:04:58.800
Most of the times this works, but there are a lot of times that the DTMFs are not well

49
0:04:58.800 --> 0:05:00.900
recognized.

50
0:05:00.900 --> 0:05:08.200
Sometimes the SBC failed completely because there was a need, in order, I will be on that

51
0:05:08.200 --> 0:05:16.800
later on again, but there was a need of transcoding the actual DTMF from the RTP to SIP infos

52
0:05:16.800 --> 0:05:26.560
in order to tell the partner about the actual DTMF, the number.

53
0:05:26.560 --> 0:05:34.440
And well, we also have a very hard time integrating the SBC world, the proprietary world with

54
0:05:34.440 --> 0:05:43.840
modern APIs in order to have more fluent scenarios.

55
0:05:43.840 --> 0:05:50.360
The alternative, the solution, basically we decide to use Cameleo and RTP Engine for the

56
0:05:50.360 --> 0:05:52.480
new solution.

57
0:05:52.480 --> 0:05:59.160
It lets us have more easy to adapt and evolve.

58
0:05:59.160 --> 0:06:03.940
It's easy to integrate with modern APIs.

59
0:06:03.940 --> 0:06:07.120
Everything can be done with SIP.

60
0:06:07.120 --> 0:06:12.000
And we will get into the actual architecture next.

61
0:06:12.000 --> 0:06:22.560
So about architecture, the PCI environment itself needs to be contained from whatever

62
0:06:22.560 --> 0:06:26.640
you have in your VoIP for normal calls.

63
0:06:26.640 --> 0:06:29.240
It has to be separate and contained.

64
0:06:29.240 --> 0:06:38.560
So in order to actually use payments, so the phone number that the customer uses to call

65
0:06:38.560 --> 0:06:43.080
and do a payment basically goes through a contained environment.

66
0:06:43.080 --> 0:06:47.040
In our case, we are all in AWS.

67
0:06:47.040 --> 0:06:52.920
So we have basically a separate account just for this.

68
0:06:52.920 --> 0:07:02.000
And for our new implementation, we did everything with infrastructure as code.

69
0:07:02.000 --> 0:07:10.000
And by doing CI CD, we were able to deploy without the need of logging into a machine

70
0:07:10.000 --> 0:07:17.000
or having SSH access or that kind of stuff.

71
0:07:17.000 --> 0:07:20.560
So about the actual architecture for this.

72
0:07:20.560 --> 0:07:29.560
So we have the actual carrier and we have this CPaaS, which are asterisk, can be cloud,

73
0:07:29.560 --> 0:07:36.360
a cloud provider like Twilio or Nexmo or SignalWire, whatever.

74
0:07:36.360 --> 0:07:41.920
And this secure router is what we call this new solution that we developed.

75
0:07:41.920 --> 0:07:49.680
It's basically several possible instances of Camellio and RTP engine.

76
0:07:49.680 --> 0:07:52.840
And there's in the top the PCI partner.

77
0:07:52.840 --> 0:07:57.080
This is the actual partner that processes the payments.

78
0:07:57.080 --> 0:08:03.440
So we don't process and we don't touch the actual credit card data.

79
0:08:03.440 --> 0:08:08.280
And the way this works is basically the call comes in from the carrier side if it's an

80
0:08:08.280 --> 0:08:13.320
inbound one and it goes through like this.

81
0:08:13.320 --> 0:08:23.800
This is the media for the normal call without being still under the secure channel for payments.

82
0:08:23.800 --> 0:08:28.320
So the call comes in, it ends up in the agent on this side.

83
0:08:28.320 --> 0:08:38.160
And whenever the agent wants to, in this case, these blue arrow here, it goes always through

84
0:08:38.160 --> 0:08:39.480
the PCI partner.

85
0:08:39.480 --> 0:08:45.340
The PCI partner injects a new header in the SIP with a token.

86
0:08:45.340 --> 0:08:53.760
So the token comes back down here and it is extracted and is sent to a smaller L per microservice.

87
0:08:53.760 --> 0:09:03.920
This microserver basically then uses an internal API to tell the CPAS and the actual call that

88
0:09:03.920 --> 0:09:11.640
is coming in as that token for starting the securization process in case of a payment

89
0:09:11.640 --> 0:09:14.400
needs to be done.

90
0:09:14.400 --> 0:09:19.560
So the signaling goes always through the PCI partner.

91
0:09:19.560 --> 0:09:25.520
The media goes from the carrier to the CPAS side without leaving.

92
0:09:25.520 --> 0:09:34.760
And whenever the agent on the CPAS wants to start the secure process for starting a payment,

93
0:09:34.760 --> 0:09:44.440
basically he uses the token that was passed into his UI and that triggers re-invites from

94
0:09:44.440 --> 0:09:52.400
the PCI partner down to our secure routers and basically the media starts flowing through

95
0:09:52.400 --> 0:09:58.120
them for the actual time of the payment processing.

96
0:09:58.120 --> 0:10:01.700
So this is basically how this works.

97
0:10:01.700 --> 0:10:12.320
So this yellow square here means that we are under a closed environment just for PCI.

98
0:10:12.320 --> 0:10:18.840
We have to follow that because rules imply that.

99
0:10:18.840 --> 0:10:23.760
And basically some snippets on the infrastructure as code for this.

100
0:10:23.760 --> 0:10:34.200
So we are using a bunch of Terraform with Ansible in order to deploy everything automatically.

101
0:10:34.200 --> 0:10:36.640
Sorry it doesn't read too much here.

102
0:10:36.640 --> 0:10:40.320
Sorry about that.

103
0:10:40.320 --> 0:10:46.280
But here we are telling for in this part it's the dispatcher that we are populating for

104
0:10:46.280 --> 0:10:48.800
Camellio.

105
0:10:48.800 --> 0:10:55.200
There's also some information about how the process of Camellio started, the certifiers

106
0:10:55.200 --> 0:10:59.200
that are used for TLS.

107
0:10:59.200 --> 0:11:05.120
A lot of description for the services.

108
0:11:05.120 --> 0:11:06.120
So yeah.

109
0:11:06.120 --> 0:11:12.760
Yeah, the one before.

110
0:11:12.760 --> 0:11:14.760
Okay.

111
0:11:14.760 --> 0:11:23.880
Yeah, yeah, yeah.

112
0:11:23.880 --> 0:11:28.680
Here it's a small snippet of the Camellio config file itself.

113
0:11:28.680 --> 0:11:38.360
So in this case, sorry about, it's unreadable, but it's where the actual engage with RTP

114
0:11:38.360 --> 0:11:39.600
agent was happening.

115
0:11:39.600 --> 0:11:47.060
So we have a bunch of ciphers here that need to be used.

116
0:11:47.060 --> 0:11:56.080
But by using this and with containerization, so the actual Camellio is put inside a container.

117
0:11:56.080 --> 0:12:04.800
The container is then launched, mapping an external volume with some defaults.

118
0:12:04.800 --> 0:12:13.640
And that way we don't need basically to touch, human touch this deployment.

119
0:12:13.640 --> 0:12:16.360
Okay.

120
0:12:16.360 --> 0:12:19.200
Another important part, we rely a lot on DNS.

121
0:12:19.200 --> 0:12:29.960
So we use NAPTR records with SRVs for basically describe where our instances are.

122
0:12:29.960 --> 0:12:37.360
So the PCI partner uses DNS to speak to us, the carrier the same thing, the CPAS the same

123
0:12:37.360 --> 0:12:38.440
thing.

124
0:12:38.440 --> 0:12:45.800
And by doing this and without need to be stateful for anything, we can basically launch the

125
0:12:45.800 --> 0:12:49.680
number of instances that we want.

126
0:12:49.680 --> 0:12:55.200
Since we are using AWS and we need basically this kind of deploys to happen in several

127
0:12:55.200 --> 0:13:02.040
regions of the world, we also do that very easily by using this approach.

128
0:13:02.040 --> 0:13:13.520
And as I say here, R-coding is almost not a great thing, but in this case, as I say around

129
0:13:13.520 --> 0:13:23.400
here, it gives the rigidity that we need to fulfill the requirements and the standards

130
0:13:23.400 --> 0:13:26.720
and it proved to work well.

131
0:13:26.720 --> 0:13:33.920
So how it actually works, this is a screenshot of the UI that the agent sees.

132
0:13:33.920 --> 0:13:41.040
So basically these are what we call context cards for the agent.

133
0:13:41.040 --> 0:13:46.400
One of the context cards gives the PCI token that comes in the SIP and then it's extracted

134
0:13:46.400 --> 0:13:55.560
in Camellio and sent to our internal API for the contact center layer and it appears there.

135
0:13:55.560 --> 0:14:04.520
So whenever the agent needs to start payment, he just needs to press a button that will

136
0:14:04.520 --> 0:14:16.120
use that token and the call will be in what is known as a secure state for payment.

137
0:14:16.120 --> 0:14:21.920
Okay, wrapping up.

138
0:14:21.920 --> 0:14:27.420
So something about the certification process and the audit.

139
0:14:27.420 --> 0:14:34.840
Every entity that wants to be processing payments needs to go through this every year.

140
0:14:34.840 --> 0:14:39.520
The certification needs to be renewed every year.

141
0:14:39.520 --> 0:14:49.680
The one that we did more recently was last November and the year before still was on

142
0:14:49.680 --> 0:14:53.160
the old proprietary stuff.

143
0:14:53.160 --> 0:15:02.600
There were several small issues that kept open from last year to this year and by using

144
0:15:02.600 --> 0:15:09.400
the new implementation, we basically passed everything.

145
0:15:09.400 --> 0:15:13.640
The solution is put under the test for pen tests.

146
0:15:13.640 --> 0:15:19.580
It's something that is in the runbook of the audit.

147
0:15:19.580 --> 0:15:26.200
So everything passed, I didn't mention, but the actual infrastructure code also configures

148
0:15:26.200 --> 0:15:29.960
the firewalls in AWS.

149
0:15:29.960 --> 0:15:39.680
So we just have the ports that we need to work with open and we have also ACLs for the

150
0:15:39.680 --> 0:15:46.120
PCI partners that we are using to process payments, the carriers, the same thing.

151
0:15:46.120 --> 0:15:48.440
So that's the way we did it.

152
0:15:48.440 --> 0:15:53.920
And in the end, basically the audit identified some strengths for this.

153
0:15:53.920 --> 0:15:59.280
So they told there was excellent management and procedures in this.

154
0:15:59.280 --> 0:16:06.640
We adopted a risk treatment approach and we always used certified service providers for

155
0:16:06.640 --> 0:16:15.800
carriers and for the partners that do the payments, they also need to be PCI certified

156
0:16:15.800 --> 0:16:20.560
for the carriers.

157
0:16:20.560 --> 0:16:29.840
This architecture basically lets you use any carrier you want, but you have to kind of

158
0:16:29.840 --> 0:16:36.120
decide if you really trust some of the carriers that you put into this because basically if

159
0:16:36.120 --> 0:16:44.400
you integrate this with PBX or so from a client, let's say, you can always intercept the call

160
0:16:44.400 --> 0:16:48.520
on inside and that could not be good.

161
0:16:48.520 --> 0:16:51.840
So yeah, that was it.

162
0:16:51.840 --> 0:16:53.760
And that's what I add.

163
0:16:53.760 --> 0:16:56.760
Thank you.

164
0:16:56.760 --> 0:17:03.200
Okay.

165
0:17:03.200 --> 0:17:06.000
I guess any questions?

166
0:17:06.000 --> 0:17:11.080
There's one over there.

167
0:17:11.080 --> 0:17:18.360
Hi, so the PCI compliance partner that you've got that does the merchant services, do you

168
0:17:18.360 --> 0:17:25.200
find that your solution's been built around one particular payment provider or is the solution

169
0:17:25.200 --> 0:17:28.800
that you've built sort of your benefit as well to work with other ones as well?

170
0:17:28.800 --> 0:17:30.800
Did they follow the same paradigm?

171
0:17:30.800 --> 0:17:38.360
Yeah, there's small differences when you basically switch a PCI partner that processes the payments,

172
0:17:38.360 --> 0:17:39.360
right?

173
0:17:39.360 --> 0:17:46.520
There's small differences between them, but we basically worked with three, four partners

174
0:17:46.520 --> 0:17:50.520
for this and they most use SIP.

175
0:17:50.520 --> 0:17:54.960
If they use only SIP, that's the best option.

176
0:17:54.960 --> 0:18:00.520
The one that I presented here, it's the most complex one because it involves re-invites

177
0:18:00.520 --> 0:18:08.400
sending media to them during the actual payment process, but it will depend.

178
0:18:08.400 --> 0:18:12.960
So sometimes it's more direct and easy.

179
0:18:12.960 --> 0:18:20.080
The case that I spoke about was the most complex one that involved media redirects and that

180
0:18:20.080 --> 0:18:21.080
kind of stuff.

181
0:18:21.080 --> 0:18:23.400
Can you recommend any specifically?

182
0:18:23.400 --> 0:18:26.280
Any partner?

183
0:18:26.280 --> 0:18:27.280
Not really.

184
0:18:27.280 --> 0:18:34.840
I guess all the, if you, I really don't want to say names here, but if you basically look

185
0:18:34.840 --> 0:18:42.800
for the most relevant ones in the internet, they're the ones that will work under this.

186
0:18:42.800 --> 0:18:43.800
Fine.

187
0:18:43.800 --> 0:18:44.800
Thank you.

188
0:18:44.800 --> 0:18:45.800
Yeah.

189
0:18:45.800 --> 0:19:12.180
Thank you.


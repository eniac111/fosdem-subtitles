WEBVTT

00:00.000 --> 00:11.500
So, hi everyone again, I'll leave you from OpenSips here and I'm going to be quickly

00:11.500 --> 00:16.620
going through what has been happening in the last year and what is new in the latest OpenSips

00:16.620 --> 00:29.980
3.3 release, which is pretty much focused on IM and RCS and a bit of extension to the

00:29.980 --> 00:35.240
both IMS and on the UC, on the call center side.

00:35.240 --> 00:40.820
And the reason why we went this route with this iteration, right, because we have one

00:40.820 --> 00:49.580
major release each year, is that we've talked to the community and also read a bit of papers

00:49.580 --> 00:56.840
like this one from a Juniper saying that RCS is growing, it's getting more and more adoption,

00:56.840 --> 01:04.640
the subscriber population is forecasted to grow to like at least 2 billion devices within

01:04.640 --> 01:06.620
the next few years.

01:06.620 --> 01:13.100
So why not make a bit of additions on this part.

01:13.100 --> 01:19.840
And one of the first, so here you can see, hopefully the font is not too small, kind

01:19.840 --> 01:30.920
of the entire ecosystem that we have in mind here, where OpenSips, we make all these microservices

01:30.920 --> 01:34.440
catering to various components of the platform.

01:34.440 --> 01:42.240
We can have, there is the MSRP protocol which I'm going to quickly go through, so we are

01:42.240 --> 01:44.680
seeing a relay there.

01:44.680 --> 01:53.800
There is also some gatewaying necessity for clients which don't support MSRP yet they

01:53.800 --> 01:57.440
still need to be integrated with the platform.

01:57.440 --> 02:04.400
There is gatewaying to the IMS side, right, using RCS capabilities and also the contact

02:04.400 --> 02:05.400
center, right.

02:05.400 --> 02:14.160
And with the IM, we have, this is what we had, right, the simple message SIP method,

02:14.160 --> 02:17.680
request reply, nothing much past that.

02:17.680 --> 02:23.400
But then there is also this MSRP protocol which is not that new, right, it's 15 years

02:23.400 --> 02:24.400
old.

02:24.400 --> 02:31.600
But so it's, so far we've just seen it as you could use some other software for it,

02:31.600 --> 02:35.200
right, there was also the MSRP relay project that you could use.

02:35.200 --> 02:43.760
But now there is the need to have this closer in OpenSips and gain more access, more control

02:43.760 --> 02:50.200
over the sessions and that's why we went and implemented the protocol as well.

02:50.200 --> 02:57.840
So for example, this enables features like the RCS I was talking about, right.

02:57.840 --> 03:05.640
You could see RCS as a turbocharged SMS, so it's pretty much SMS with all of these nice

03:05.640 --> 03:11.640
capabilities like read-rend, write-receipts, file transfer, photo sharing natively into

03:11.640 --> 03:12.640
the phone, right.

03:12.640 --> 03:17.240
And the OTT app like WhatsApp, iMessage to give you all that.

03:17.240 --> 03:18.900
That is the idea with RCS.

03:18.900 --> 03:25.040
And it's why Google is pushing it forward and why Apple is pretty much reluctant or

03:25.040 --> 03:29.440
neutral towards it because they already have the iMessage, so why also work on something

03:29.440 --> 03:34.160
that conflicts with your own application, right.

03:34.160 --> 03:38.400
So MSRP, not much time to go into it.

03:38.400 --> 03:40.580
Maybe we can take a look at a couple of request replies.

03:40.580 --> 03:46.840
So here it's a, you set up the session like a regular call and if we look at the SDP,

03:46.840 --> 03:55.280
right, we get the source part that each site is advertising and from now on they will exchange

03:55.280 --> 03:57.520
these MSRP messages.

03:57.520 --> 04:04.680
So it kind of look like similar to SIP messages and in the payload we see the messages, right,

04:04.680 --> 04:06.840
the chat part.

04:06.840 --> 04:09.420
And this is how the stack looks in OpenSips.

04:09.420 --> 04:12.800
It's kind of a three layer architecture.

04:12.800 --> 04:16.400
Right on the bottom there is the protocol and if you're familiar with OpenSips you know

04:16.400 --> 04:23.080
the other proto underscore modules, right, your TCP, your TLS, your WebSocket and all

04:23.080 --> 04:24.080
of those.

04:24.080 --> 04:26.440
Now there is the MSRP as well.

04:26.440 --> 04:32.360
And the first module we built on top of it is the relay which as the name suggests there

04:32.360 --> 04:35.840
is not that much going on.

04:35.840 --> 04:42.240
But also it solves the problem of authentication which it's in the MSRP protocol the auth

04:42.240 --> 04:50.480
method and it gives you some useful callbacks to supply the credentials, right.

04:50.480 --> 04:57.280
Also on the egress side gives you the possibility to select the destination and that's pretty

04:57.280 --> 05:00.200
much about the relay.

05:00.200 --> 05:06.160
The user agent is a bit more interesting in the sense that you can interact with it in

05:06.160 --> 05:07.680
various ways.

05:07.680 --> 05:13.240
Also first from the OpenSips configuration script you have this where I'm going to show

05:13.240 --> 05:17.240
you some call flows so you can get an idea of how it works.

05:17.240 --> 05:20.780
But also through the management interface, right, which is HTTP based.

05:20.780 --> 05:27.440
So you get this you can implement it from your Web applications for example and initiate

05:27.440 --> 05:30.880
and control sessions that way for example.

05:30.880 --> 05:34.600
Okay, so there are no animations.

05:34.600 --> 05:41.480
So here if we take them from top to bottom we can see an example of a Web app that is

05:41.480 --> 05:43.720
obviously not MSRP enabled.

05:43.720 --> 05:49.220
Talking to an MSRP enabled application like a Web phone.

05:49.220 --> 05:56.000
And on the app side you use MI, right, like HTTP invocations.

05:56.000 --> 06:01.080
Like start sessions, send message or end session which get nicely converted on the outbound

06:01.080 --> 06:03.480
leg to SIP calls, right.

06:03.480 --> 06:10.980
It's a SIP call that then only has these MSRP mid-dialog messages.

06:10.980 --> 06:21.000
And on the other direction the SIP calls initiated by the MSRP phone get converted into events

06:21.000 --> 06:22.000
for the application.

06:22.000 --> 06:25.600
You can subscribe to it via whatever channel you want to receive them on.

06:25.600 --> 06:31.440
JSON RPC or stuff like that.

06:31.440 --> 06:35.120
So the next one was the gateway, right.

06:35.120 --> 06:44.520
The MSRP gateway that helps us include the classic SIP clients which are only capable

06:44.520 --> 06:45.520
of SIP message, right.

06:45.520 --> 06:47.200
They don't know MSRP.

06:47.200 --> 06:53.980
But it does this nice conversion of like these simple request reply messages.

06:53.980 --> 06:58.160
It actually converts them to a session with the MSRP enabled phone.

06:58.160 --> 07:04.420
So these sessions are kept by Open SIPs transparently and they are even closed.

07:04.420 --> 07:09.960
For example, since there is no way of knowing when it decides to stop a chat, for example,

07:09.960 --> 07:12.480
right, we just close them based on inactivity.

07:12.480 --> 07:14.520
We just time them out.

07:14.520 --> 07:20.120
Whereas so this is when the simple, sure, one minute left, okay.

07:20.120 --> 07:24.080
So that is pretty much on the gateway.

07:24.080 --> 07:28.800
The call center, some additions here, right.

07:28.800 --> 07:34.040
Because now we got some more types of workloads or capabilities for the call center agents.

07:34.040 --> 07:37.400
They can handle both chat messages and voice.

07:37.400 --> 07:41.560
So a cool thing about chats is that now they can do parallel work, right.

07:41.560 --> 07:45.320
You can do two calls at the same time but you can have four chat windows open.

07:45.320 --> 07:50.880
So there's this problem of balancing the incoming requests in the queue, right.

07:50.880 --> 07:56.200
So you have calls and chats from various parts of the platform and now there is this problem

07:56.200 --> 08:02.240
of correctly balancing them to your available agent based on their capabilities, right.

08:02.240 --> 08:06.640
Some of them may have chat enabled in their applications, some of them not.

08:06.640 --> 08:10.120
There are a few modes to control that.

08:10.120 --> 08:16.800
And on the IMS side, of course, the possibility to build custom diameter requests.

08:16.800 --> 08:22.000
And pretty much that's it on the UC side and IMS Narsias.

08:22.000 --> 08:24.680
A couple more additions on status and reporting.

08:24.680 --> 08:30.480
So now OpenSips is a lot more verbose with regards to how its internal state looks like.

08:30.480 --> 08:35.680
Some additions on the TCP engine also giving control over TCP connections.

08:35.680 --> 08:41.320
And that's about it as far as I have here with OpenSips 3.3 and I would like to welcome

08:41.320 --> 08:47.600
everybody to the newly announced OpenSips conference this year where we will be unveiling

08:47.600 --> 08:52.840
what's been going on with the 3.4 and what we are working on on that side.

08:52.840 --> 09:07.680
And with that, I'm not sure if there are any more questions, but thank you for your attention.

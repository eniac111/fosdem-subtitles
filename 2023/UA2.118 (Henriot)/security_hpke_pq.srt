1
0:00:00.000 --> 0:00:15.800
We are starting in a couple of seconds, so welcome Norbert.

2
0:00:15.800 --> 0:00:16.800
Thank you.

3
0:00:16.800 --> 0:00:18.520
I hope you can hear me, right?

4
0:00:18.520 --> 0:00:20.540
So yeah, my name is Norbert Poj.

5
0:00:20.540 --> 0:00:22.800
I work at Red Hat.

6
0:00:22.800 --> 0:00:28.000
And today I will talk about hybrid public key encryption.

7
0:00:28.000 --> 0:00:31.840
And later we will source it with some post quantum.

8
0:00:31.840 --> 0:00:38.480
OK, so is here anybody who already knows about HPK, please raise your hand.

9
0:00:38.480 --> 0:00:39.880
Oh, nice.

10
0:00:39.880 --> 0:00:43.440
There is quite a few people.

11
0:00:43.440 --> 0:00:44.440
OK.

12
0:00:44.440 --> 0:00:46.720
OK, so who doesn't know?

13
0:00:46.720 --> 0:00:51.240
HPK stands for hybrid public key encryption.

14
0:00:51.240 --> 0:00:54.280
It's symmetric and asymmetric.

15
0:00:54.280 --> 0:00:59.560
Like it's combining both into a scheme.

16
0:00:59.560 --> 0:01:03.840
It uses a key encapsulation mechanism.

17
0:01:03.840 --> 0:01:05.440
It's used for key exchange.

18
0:01:05.440 --> 0:01:10.280
It's like key exchanges, like you have like Diffie-Hellman.

19
0:01:10.280 --> 0:01:14.380
This is a bit different approach.

20
0:01:14.380 --> 0:01:20.360
You can find the RFC and the 9180.

21
0:01:20.360 --> 0:01:26.480
So yeah, we have the fundamental parts of the HPK scheme.

22
0:01:26.480 --> 0:01:34.040
You have like key encapsulation method, the key derivation or key schedule, and AEID,

23
0:01:34.040 --> 0:01:39.280
which provides the encryption of the messages itself.

24
0:01:39.280 --> 0:01:43.000
Below you can see listed the algorithms which are supported.

25
0:01:43.000 --> 0:01:49.160
For the key encapsulation method we have prime curves and the Edward curves.

26
0:01:49.160 --> 0:02:00.680
For the key derivation we use SHA versions and the AEID supports AES and Chachapoli.

27
0:02:00.680 --> 0:02:06.160
So yeah, some familiar like words you will find later.

28
0:02:06.160 --> 0:02:13.840
For the CAM operations we have key generations, encapsulation and decapsulation.

29
0:02:13.840 --> 0:02:22.080
For the KDF we have extract and expand, the extract generates a key from some input data

30
0:02:22.080 --> 0:02:33.240
and expands this extracted K to some length we wish.

31
0:02:33.240 --> 0:02:38.880
For the AEID we have seal and open, which are encrypt and decrypt.

32
0:02:38.880 --> 0:02:43.480
It's just an alias to it.

33
0:02:43.480 --> 0:02:48.360
So let's talk about how does it work.

34
0:02:48.360 --> 0:02:56.760
At the one side you can see the CAM and the K schedule, encryption context and AEID.

35
0:02:56.760 --> 0:03:04.080
Encryption context divides asymmetric on the left and symmetric on the right.

36
0:03:04.080 --> 0:03:12.440
This is really important because like you will see later that this diversion enables

37
0:03:12.440 --> 0:03:21.120
us to change parts in it and leave the scheme still impact.

38
0:03:21.120 --> 0:03:28.240
So let's say we want to use different algorithms for the K encapsulation method and we just

39
0:03:28.240 --> 0:03:34.200
change it and proceed with the scheme itself.

40
0:03:34.200 --> 0:03:47.160
So we use K derivation to the K encapsulation, create an encryption context which means,

41
0:03:47.160 --> 0:03:54.320
which will consist of data we will need to do encryption of some data or messages in

42
0:03:54.320 --> 0:03:57.720
the AEID.

43
0:03:57.720 --> 0:04:06.240
And the last part, like symmetric part is the AEID where we like grab some messages,

44
0:04:06.240 --> 0:04:07.640
encrypt it and send it over.

45
0:04:07.640 --> 0:04:09.960
So this is the communication part.

46
0:04:09.960 --> 0:04:14.320
Now I want some feedback from the last row.

47
0:04:14.320 --> 0:04:17.480
Is it readable?

48
0:04:17.480 --> 0:04:18.680
Okay thank you.

49
0:04:18.680 --> 0:04:21.440
So this is a formal diagram.

50
0:04:21.440 --> 0:04:22.440
How does it work?

51
0:04:22.440 --> 0:04:24.160
I will go through.

52
0:04:24.160 --> 0:04:30.080
So we have Bob on the right and Alice on the left.

53
0:04:30.080 --> 0:04:37.240
We will assume that Bob have some private key which already shared with Alice.

54
0:04:37.240 --> 0:04:41.560
We don't care in the HPK how.

55
0:04:41.560 --> 0:04:46.680
So let's pretend that Alice knows the public key of Bob.

56
0:04:46.680 --> 0:04:49.440
Then we will start with the encapsulation.

57
0:04:49.440 --> 0:04:59.720
So Alice generates a temporary key pair called ephemeral.

58
0:04:59.720 --> 0:05:12.000
So here it's the P key E and S key E. And we will use Bob's private key and Alice's

59
0:05:12.000 --> 0:05:22.040
public key and private key to make Diffie-Hellman which will give us a shared secret.

60
0:05:22.040 --> 0:05:28.640
Then we use the shared secret in the K diversion function to create a common key.

61
0:05:28.640 --> 0:05:38.280
Then we send over our public ephemeral key to Bob so he can do the same to get the shared

62
0:05:38.280 --> 0:05:39.280
secret.

63
0:05:39.280 --> 0:05:47.600
Here, like so we encapsulate it, send it over and now we are at Bob.

64
0:05:47.600 --> 0:05:50.680
Bob does the encapsulation.

65
0:05:50.680 --> 0:05:54.280
He has his private key and Alice's public key.

66
0:05:54.280 --> 0:05:57.200
Does the Diffie-Hellman get the same shared secret?

67
0:05:57.200 --> 0:06:01.160
The shared secret is again used at the KDF and we have a common key.

68
0:06:01.160 --> 0:06:07.000
So the common key is the same at Alice and Bob.

69
0:06:07.000 --> 0:06:11.480
This is the end of the K encapsulation part.

70
0:06:11.480 --> 0:06:14.480
Now we move to K schedule.

71
0:06:14.480 --> 0:06:24.480
So we get this common key, use the extract to generate some salt, let's say.

72
0:06:24.480 --> 0:06:31.800
Then expand it to get a key and expand it one more time but with different information

73
0:06:31.800 --> 0:06:36.760
as you can see here to get anance.

74
0:06:36.760 --> 0:06:44.640
And then the third one is secret for exportation.

75
0:06:44.640 --> 0:06:53.400
So now we have set up the communication and we can do actually encrypted message conversations

76
0:06:53.400 --> 0:06:56.560
which is the seal and open.

77
0:06:56.560 --> 0:07:04.360
As you can see, we use the key, the nonce, some additional information and the key, the

78
0:07:04.360 --> 0:07:07.920
private text, plain text.

79
0:07:07.920 --> 0:07:09.880
Thank you.

80
0:07:09.880 --> 0:07:14.760
So here you can see XOR.

81
0:07:14.760 --> 0:07:23.240
The messages are counted so every message has a counter and we XOR it with the nonce.

82
0:07:23.240 --> 0:07:32.200
Therefore every message will be different even if the message is like the same.

83
0:07:32.200 --> 0:07:36.640
So if the plain text is the same, we will get a different cipher text.

84
0:07:36.640 --> 0:07:38.920
That's the reason.

85
0:07:38.920 --> 0:07:41.960
So we have this nice scheme.

86
0:07:41.960 --> 0:07:44.680
What can we use it for?

87
0:07:44.680 --> 0:07:49.680
Possible messages are the MLS or messaging player security.

88
0:07:49.680 --> 0:07:57.280
It's quite new stuff, I think, maybe one year old.

89
0:07:57.280 --> 0:08:07.840
And MLS uses, so MLS solves a problem where we want to communicate.

90
0:08:07.840 --> 0:08:10.800
We have communicating parties more than two.

91
0:08:10.800 --> 0:08:14.840
So let's say I want to communicate with you but I want to communicate with you and you

92
0:08:14.840 --> 0:08:15.840
and you.

93
0:08:15.840 --> 0:08:23.640
So it's harder to exchange keys this way because then we have like a two-way communication.

94
0:08:23.640 --> 0:08:25.220
It's easy, right?

95
0:08:25.220 --> 0:08:28.400
So this is the problem that MLS solves.

96
0:08:28.400 --> 0:08:37.120
Then we have the TLS client hello and Obelvios DNS over HTTPAs.

97
0:08:37.120 --> 0:08:41.720
The last one is I think new one too.

98
0:08:41.720 --> 0:08:48.640
That solves the encryption of the IP address of the requester.

99
0:08:48.640 --> 0:08:50.640
Okay.

100
0:08:50.640 --> 0:08:53.600
So HPK comes with three modes.

101
0:08:53.600 --> 0:08:59.920
The first one is the basic and then there are two more providing authentication.

102
0:08:59.920 --> 0:09:09.480
We have authentication mode with private key or a pre-shared key in the PSK mode.

103
0:09:09.480 --> 0:09:16.320
Or we can combine the both and have the out PSK mode.

104
0:09:16.320 --> 0:09:18.440
What about the security?

105
0:09:18.440 --> 0:09:31.920
The base mode is programmed to be secure against indistinguishability, ciphertext, and the authenticated

106
0:09:31.920 --> 0:09:37.960
modes are outside there and inside there is secure.

107
0:09:37.960 --> 0:09:44.240
So later on you can find the report at the references.

108
0:09:44.240 --> 0:09:49.760
So let's move to the post quantum stuff.

109
0:09:49.760 --> 0:09:56.140
As I said before, the K encapsulation and the AEID are separated.

110
0:09:56.140 --> 0:10:03.480
So to make a post quantum we can just put post quantum algorithms to the K encapsulation

111
0:10:03.480 --> 0:10:10.360
method and we will get post quantum HPK.

112
0:10:10.360 --> 0:10:15.600
The proposal was for Kyber and Syke but as most of you know, Syke is already out of the

113
0:10:15.600 --> 0:10:16.600
game.

114
0:10:16.600 --> 0:10:23.520
Kyber is one of the NIST finalists for K exchange methods.

115
0:10:23.520 --> 0:10:29.960
It uses CAM the same way instead of DH style K exchange.

116
0:10:29.960 --> 0:10:38.040
It is a lattice based game standing upon learning with errors and running problem and Kyber

117
0:10:38.040 --> 0:10:45.920
is proven to be IND, CCI2, secure2.

118
0:10:45.920 --> 0:10:53.720
So we have this NIST diagram again where we can see hybrid version.

119
0:10:53.720 --> 0:10:59.200
We have post quantum only version of HPK and hybrid.

120
0:10:59.200 --> 0:11:07.200
Hybrid uses post quantum and the old algorithms too for the K encapsulation method like if

121
0:11:07.200 --> 0:11:12.040
one breaks you can still have some security.

122
0:11:12.040 --> 0:11:18.320
So you can see gray boxes here.

123
0:11:18.320 --> 0:11:26.880
These boxes are the old algorithms which means if we eliminate them the post quantum version

124
0:11:26.880 --> 0:11:28.480
will be visible.

125
0:11:28.480 --> 0:11:31.600
That means the same way.

126
0:11:31.600 --> 0:11:35.560
So first I will go through the post quantum.

127
0:11:35.560 --> 0:11:43.200
Game vape generates a key pair pre-OR HPK and let's say that Alice already knows that

128
0:11:43.200 --> 0:11:46.440
key.

129
0:11:46.440 --> 0:11:57.560
A difference here is that we don't do classical Diffie-Hellman but we encrypt some random

130
0:11:57.560 --> 0:12:02.400
data and we will get a shared secret here.

131
0:12:02.400 --> 0:12:12.600
And the ciphertext of that shared secret.

132
0:12:12.600 --> 0:12:20.840
Then we do the K derivation to get the common key, send over the ciphertext of the shared

133
0:12:20.840 --> 0:12:28.160
secret to Bob who can decrypt it and do the same here.

134
0:12:28.160 --> 0:12:38.400
And as you can see everything else is the same as the basic HPK.

135
0:12:38.400 --> 0:12:47.440
For the hybrid mode the only difference is here.

136
0:12:47.440 --> 0:12:57.920
So for the KDF the post quantum and the basic shared secret is concatenated and everything

137
0:12:57.920 --> 0:13:01.800
else should be the same.

138
0:13:01.800 --> 0:13:06.000
So what is the security of the post quantum?

139
0:13:06.000 --> 0:13:13.520
In the base mode it's still INCCA2 secure because the KAM algorithm is proven to be

140
0:13:13.520 --> 0:13:18.600
INCCA2 secure.

141
0:13:18.600 --> 0:13:24.920
For the hybrid mode it needs more proof because the concatenation there and the auto-education

142
0:13:24.920 --> 0:13:34.800
for both like both hybrid and PQ only would need more work.

143
0:13:34.800 --> 0:13:38.080
So let's see some benchmarks.

144
0:13:38.080 --> 0:13:43.280
I got this benchmark from the paper which you can see below.

145
0:13:43.280 --> 0:13:51.080
They were done on Intel Core E7 with four cores, eight megabytes of cache and eight

146
0:13:51.080 --> 0:14:01.480
gigabyte of RAM using AWCLST cryptographic library.

147
0:14:01.480 --> 0:14:11.800
And the environment each algorithm was run 10,000 times and the first and fourth quartile

148
0:14:11.800 --> 0:14:17.560
was eliminated of the measures to make it more accurate.

149
0:14:17.560 --> 0:14:26.360
The measures are in CPU clock cycles and I think it was medium or something like that.

150
0:14:26.360 --> 0:14:34.760
So here you can see psych which is now eliminated but I think it's a nice reference but it was

151
0:14:34.760 --> 0:14:41.320
a lot slower.

152
0:14:41.320 --> 0:14:56.280
Blue one is the basic HPGA, then the green one is a hybrid one and here the yellow is

153
0:14:56.280 --> 0:14:58.120
Kiber only.

154
0:14:58.120 --> 0:15:06.640
And as you can see it is faster than the Edward curve which is interesting.

155
0:15:06.640 --> 0:15:09.520
Then there is one more graph.

156
0:15:09.520 --> 0:15:20.320
Here you can see the green lines which tells us that the K-accapsulation method is constant

157
0:15:20.320 --> 0:15:27.440
time so it doesn't constant in a way that it doesn't affect the encryption itself because

158
0:15:27.440 --> 0:15:35.520
the tests were done for data encryption for one kilobyte of data, 10 kilobyte, 100 kilobyte

159
0:15:35.520 --> 0:15:38.200
and one megabyte of data.

160
0:15:38.200 --> 0:15:45.260
So as you can see the cost is more on the encryption of the data itself.

161
0:15:45.260 --> 0:15:48.480
So there is a red line.

162
0:15:48.480 --> 0:15:51.180
You can see that's for reference.

163
0:15:51.180 --> 0:16:03.040
This is a version of RSA encrypting 240 bytes of data.

164
0:16:03.040 --> 0:16:15.480
So here you can see references if you want to read more about it and thank you for attention.

165
0:16:15.480 --> 0:16:20.440
So any questions?

166
0:16:20.440 --> 0:16:26.600
We had some question on metrics so I will try to read it.

167
0:16:26.600 --> 0:16:32.440
The question was how do we make quite quantum resistant crypto work on constrained devices?

168
0:16:32.440 --> 0:16:37.680
How do we make quantum resistant crypto work on constrained devices?

169
0:16:37.680 --> 0:16:52.520
Well, that's a good question.

170
0:16:52.520 --> 0:16:55.040
I don't know the answer for.

171
0:16:55.040 --> 0:16:57.040
Sorry for that.

172
0:16:57.040 --> 0:17:07.280
So any other question here?

173
0:17:07.280 --> 0:17:08.840
Thank you.

174
0:17:08.840 --> 0:17:13.960
The last slide, I think page 15 you showed some benchmarks but these are on the whole

175
0:17:13.960 --> 0:17:15.120
encryption, right?

176
0:17:15.120 --> 0:17:19.400
Like not only the exchange of the keys and the setup of the symmetric key but the whole

177
0:17:19.400 --> 0:17:21.600
exchange, right?

178
0:17:21.600 --> 0:17:22.600
They are both.

179
0:17:22.600 --> 0:17:28.440
So as you can see the green line is like the key exchange itself and then you have like

180
0:17:28.440 --> 0:17:31.800
the seal and the open operation here.

181
0:17:31.800 --> 0:17:38.440
So if you take for example one message and one key exchange, that's what the benchmark

182
0:17:38.440 --> 0:17:39.440
says.

183
0:17:39.440 --> 0:17:40.440
Like it's together.

184
0:17:40.440 --> 0:17:41.920
Yeah, okay, all right.

185
0:17:41.920 --> 0:17:48.400
And which was expected because anyway the quantum, the post quantum part is only in

186
0:17:48.400 --> 0:17:50.160
the beginning of the exchange.

187
0:17:50.160 --> 0:17:58.400
And then when the symmetric key is established, you continue with using your AEAD.

188
0:17:58.400 --> 0:17:59.400
Yes that's correct.

189
0:17:59.400 --> 0:18:00.560
All right, thanks.

190
0:18:00.560 --> 0:18:05.840
So the post quantum part is only at the key exchange and later on it is the same.

191
0:18:05.840 --> 0:18:07.840
Okay, any other question?

192
0:18:07.840 --> 0:18:14.680
Yeah, I just wanted to say that the post quantum is more about like a symmetric key.

193
0:18:14.680 --> 0:18:19.480
It doesn't really affect the symmetric part so it's okay.

194
0:18:19.480 --> 0:18:23.120
Any other questions around here?

195
0:18:23.120 --> 0:18:26.360
If not we can probably thank you for your talk.

196
0:18:26.360 --> 0:18:55.040
Thank you for the questions.


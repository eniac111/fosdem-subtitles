1
0:00:00.000 --> 0:00:01.000
Hello?

2
0:00:01.000 --> 0:00:02.000
Okay.

3
0:00:02.000 --> 0:00:03.000
Now it works.

4
0:00:03.000 --> 0:00:04.000
Kind of, right?

5
0:00:04.000 --> 0:00:05.000
We've got...

6
0:00:05.000 --> 0:00:06.000
Okay.

7
0:00:06.000 --> 0:00:07.000
So hello, everyone.

8
0:00:07.000 --> 0:00:08.000
Welcome.

9
0:00:08.000 --> 0:00:09.000
Welcome to Security Dev Room.

10
0:00:09.000 --> 0:00:14.000
And we've got our next talk about Key Lime and Dremel at the station, which will be given

11
0:00:14.000 --> 0:00:16.000
by Understand and...

12
0:00:16.000 --> 0:00:17.000
Sorry.

13
0:00:17.000 --> 0:00:18.000
Okay.

14
0:00:18.000 --> 0:00:23.000
So, we're going to go to the next room.

15
0:00:23.000 --> 0:00:30.000
Sorry.

16
0:00:30.000 --> 0:00:31.000
So welcome.

17
0:00:31.000 --> 0:00:33.000
Sorry about the trouble.

18
0:00:33.000 --> 0:00:36.000
So I'm Anders Sorsakie.

19
0:00:36.000 --> 0:00:38.000
I'm a software engineer at Red Hat.

20
0:00:38.000 --> 0:00:40.000
And I'm here with Sauer.

21
0:00:40.000 --> 0:00:41.000
Yeah.

22
0:00:41.000 --> 0:00:42.000
I'm Tore.

23
0:00:42.000 --> 0:00:45.400
And I'm a maintainer of Linux distribution for a school and universities.

24
0:00:45.400 --> 0:00:47.400
And I'm also a maintainer of Key Lime.

25
0:00:47.400 --> 0:00:48.400
Yeah.

26
0:00:48.400 --> 0:00:51.680
So we are here to talk about remote at the station with Key Lime.

27
0:00:51.680 --> 0:00:54.600
So let's get started.

28
0:00:54.600 --> 0:01:00.040
Imagine you are like a car vendor who maintains and updates the systems running in cars, but

29
0:01:00.040 --> 0:01:06.440
you want to make sure that the systems in the cars were not modified so that you can

30
0:01:06.440 --> 0:01:12.840
check if the customer is too eligible to receive the latest updates or something like that.

31
0:01:12.840 --> 0:01:18.240
Or you are a software company building software in the cloud, but I want to make sure that

32
0:01:18.240 --> 0:01:22.160
the build tooling was not modified.

33
0:01:22.160 --> 0:01:28.080
Or you are a telecom company that wants to make sure that the systems you deployed that

34
0:01:28.080 --> 0:01:31.800
controls antennas, they were not modified.

35
0:01:31.800 --> 0:01:38.880
So what all these cases have in common is first, they are remote.

36
0:01:38.880 --> 0:01:44.040
Second, you don't really have full control of the systems in the world.

37
0:01:44.040 --> 0:01:52.260
So the question is, how can you check that the system was not modified in the wild?

38
0:01:52.260 --> 0:01:58.720
So our way would be if you could somehow get some information about the system and then

39
0:01:58.720 --> 0:02:02.720
check if it's what you expected from that.

40
0:02:02.720 --> 0:02:11.400
And of course, in case it's not, then you would want to have a way to react on that.

41
0:02:11.400 --> 0:02:18.320
So if you can do that continuously, get the information checked, then you have a monitoring

42
0:02:18.320 --> 0:02:22.600
of the integrity of the system.

43
0:02:22.600 --> 0:02:30.040
So that's one of the things the remote at this stage can provide is to check remote

44
0:02:30.040 --> 0:02:34.520
integrity, remote machine integrity, how it works.

45
0:02:34.520 --> 0:02:40.840
So you have a trusted entity running in some controlled environment, and then you have

46
0:02:40.840 --> 0:02:45.800
a trusted agent on the other side running on the monitoring system.

47
0:02:45.800 --> 0:02:53.920
And you ask for the information to that agent and gets back some information called a quote.

48
0:02:53.920 --> 0:03:02.640
Then you can verify that that agent is running in a machine in the state that you trust.

49
0:03:02.640 --> 0:03:06.960
So that comes with the problem of trust.

50
0:03:06.960 --> 0:03:14.400
So how can you trust the machine or the agent running in some machine that you don't control?

51
0:03:14.400 --> 0:03:22.480
So you don't really trust directly the agent, but you trust on a hardware root of trust,

52
0:03:22.480 --> 0:03:26.520
which is the trusted platform model or TPM.

53
0:03:26.520 --> 0:03:27.920
What are the TPMs?

54
0:03:27.920 --> 0:03:36.400
They are pieces of hardware that can perform crypto operations such as dirty keys, signing,

55
0:03:36.400 --> 0:03:45.480
data, and it has this special key and certificate called e-endorsement key, which are generated

56
0:03:45.480 --> 0:03:47.080
during manufacturing.

57
0:03:47.080 --> 0:03:54.520
So the manufacturer generates the key and publishes the CA certificate so that you can

58
0:03:54.520 --> 0:03:59.080
verify that it is legitimate.

59
0:03:59.080 --> 0:04:07.000
And then this EKE, the endorsement keys, can't sign data directly, but you can generate the

60
0:04:07.000 --> 0:04:12.800
attestation keys that are associated with that endorsement key in a way that you can

61
0:04:12.800 --> 0:04:19.560
verify the origin of some assigned data so that you can make sure that that data was

62
0:04:19.560 --> 0:04:25.520
signed by that specific TPM.

63
0:04:25.520 --> 0:04:32.240
And another important thing that the TPM has are the platform conversion registers, which

64
0:04:32.240 --> 0:04:40.800
are special registers designed to start measurements about the system in a way that you can verify

65
0:04:40.800 --> 0:04:43.720
the integrity.

66
0:04:43.720 --> 0:04:48.400
So how these measurements are done?

67
0:04:48.400 --> 0:04:57.560
During boot, each step of the boot is measured by the UFI into the TPM via the PCR extend

68
0:04:57.560 --> 0:04:59.360
operation.

69
0:04:59.360 --> 0:05:09.360
So each step the boot process goes, you get a hash of the binary or the software that

70
0:05:09.360 --> 0:05:13.320
is running and extend into a PCR.

71
0:05:13.320 --> 0:05:17.000
I will explain that soon.

72
0:05:17.000 --> 0:05:25.160
And so during boot, the UEFI is responsible for measuring the boot steps into the TPM.

73
0:05:25.160 --> 0:05:32.400
And after boot, then the kernel integrity measurement architecture, or IMA, will measure

74
0:05:32.400 --> 0:05:34.960
any open file that matches a policy.

75
0:05:34.960 --> 0:05:43.240
You can configure the IMA, and it will measure the files open into a PCI as well.

76
0:05:43.240 --> 0:05:54.200
So if you have the information like the state of the PCR and the event log or all the operations,

77
0:05:54.200 --> 0:06:00.100
extend operations that were performed, then you can verify the integrity of the machine.

78
0:06:00.100 --> 0:06:06.160
So how this PCR extend algorithm works is kind of simple.

79
0:06:06.160 --> 0:06:15.440
You get the old value starting the PCR, concatenated with the measurement from the data.

80
0:06:15.440 --> 0:06:18.620
So this measurement is basically a hash.

81
0:06:18.620 --> 0:06:24.280
So you concatenate the old value with the hash of the measurement, calculate the hash

82
0:06:24.280 --> 0:06:33.040
of all of these, and put back into the PCR.

83
0:06:33.040 --> 0:06:36.160
So that's done for each step.

84
0:06:36.160 --> 0:06:43.480
So of course, these PCRs, if you know a bit of TPM, they don't match the actual numbers.

85
0:06:43.480 --> 0:06:46.760
But this is just for illustration.

86
0:06:46.760 --> 0:06:57.280
So after measuring all these steps, you have the final value in the PCR that you can calculate

87
0:06:57.280 --> 0:07:05.640
like a golden value, which you calculate the hash of all the PCR values, and you have a

88
0:07:05.640 --> 0:07:09.200
representation of the state of the machine.

89
0:07:09.200 --> 0:07:12.560
And that can be verified.

90
0:07:12.560 --> 0:07:16.600
So how key lime works.

91
0:07:16.600 --> 0:07:22.960
So in the left side, you have a trusted entity where you, like probably a machine that you

92
0:07:22.960 --> 0:07:27.800
control, where you run the verifier side of the key lime.

93
0:07:27.800 --> 0:07:29.760
It's a server.

94
0:07:29.760 --> 0:07:34.480
And on the right side, you have the monitored system.

95
0:07:34.480 --> 0:07:35.480
It is remote.

96
0:07:35.480 --> 0:07:37.680
You don't have complete control of it.

97
0:07:37.680 --> 0:07:42.480
But the agent has access to the TPM installed in that machine.

98
0:07:42.480 --> 0:07:51.240
And so the server can verify, the verifier can request a state to the agent.

99
0:07:51.240 --> 0:08:00.040
And the agent will access the TPM to get the code, meaning the PCR values, and also together

100
0:08:00.040 --> 0:08:07.640
with the event logs or all the PCR extend operations that were performed, and throw

101
0:08:07.640 --> 0:08:13.320
it back to the verifier.

102
0:08:13.320 --> 0:08:21.640
And then the verifier can verify first the origin of that piece of data because it's

103
0:08:21.640 --> 0:08:24.360
signed by the AEK key.

104
0:08:24.360 --> 0:08:29.320
So you can make sure that that data came from that machine that contains that TPM.

105
0:08:29.320 --> 0:08:34.640
And you can verify the identity of the TPM using the EK certificate.

106
0:08:34.640 --> 0:08:42.640
And with the values you obtained for the PCRs and the event log, you can replay all the

107
0:08:42.640 --> 0:08:50.240
extend operations so that in the end you can get the values that it should have.

108
0:08:50.240 --> 0:08:59.040
And so without this information, you can verify the integrity of the machine.

109
0:08:59.040 --> 0:09:05.880
Since you also got the information from IMA, like all the files that were open and matched

110
0:09:05.880 --> 0:09:14.240
some policy, what are the IMA will calculate the hash of open files that match some policy

111
0:09:14.240 --> 0:09:15.920
and extend to the PCR.

112
0:09:15.920 --> 0:09:22.640
So you get this log containing the file names and the matching hashes.

113
0:09:22.640 --> 0:09:32.360
So you can also with some policy engine verify the integrity of individual files in the remote

114
0:09:32.360 --> 0:09:33.360
machine.

115
0:09:33.360 --> 0:09:41.880
So you can like full integrity view of the remote machine.

116
0:09:41.880 --> 0:09:49.720
So with that information, the verifier can check if it's okay, the testation was successful.

117
0:09:49.720 --> 0:09:55.520
But if it was not, it doesn't match what you expected, then it's a failure.

118
0:09:55.520 --> 0:10:02.440
So in case of failure, we have a revocation framework, which is a way to...

119
0:10:02.440 --> 0:10:11.520
So you can configure some actions to the verifier, some script that it can run to perform some

120
0:10:11.520 --> 0:10:12.520
action.

121
0:10:12.520 --> 0:10:13.940
It can be some web hooks.

122
0:10:13.940 --> 0:10:18.680
So if some attestation fails, it sends some requests to some web hook.

123
0:10:18.680 --> 0:10:25.840
Or you can notify the agents directly via REST API and send some payload to be trigger

124
0:10:25.840 --> 0:10:27.640
some operation there.

125
0:10:27.640 --> 0:10:33.560
The simplest scenario, for example, if you had a cluster with various machines and one

126
0:10:33.560 --> 0:10:40.280
of them failed attestation, you cannot find the others to remove that node from the cluster

127
0:10:40.280 --> 0:10:43.640
by blocking the network connectivity, for example.

128
0:10:43.640 --> 0:10:47.080
So that's how Key Lime works in general.

129
0:10:47.080 --> 0:10:49.560
So now I'm passing the mic to Tor.

130
0:10:49.560 --> 0:10:53.480
He will continue with the real world stuff.

131
0:10:53.480 --> 0:10:58.800
Yeah, so now we heard how Key Lime works.

132
0:10:58.800 --> 0:11:05.160
And we want to show that you can use it in production and what are the challenges that

133
0:11:05.160 --> 0:11:07.960
you will run into if you want to try that.

134
0:11:07.960 --> 0:11:10.480
We have three main scenarios there.

135
0:11:10.480 --> 0:11:17.100
We have first the policy creation, then the monitoring, and then how to react on that.

136
0:11:17.100 --> 0:11:23.400
So the first part is we want to create policies for our system.

137
0:11:23.400 --> 0:11:29.160
For that, we need to know what is actually on our system and what are our systems.

138
0:11:29.160 --> 0:11:33.440
So from a software side perspective, it's normal that we integrate.

139
0:11:33.440 --> 0:11:35.000
We have a CI-CD pipeline.

140
0:11:35.000 --> 0:11:36.720
We get what data gets into that.

141
0:11:36.720 --> 0:11:39.060
And we want to save the hashes there.

142
0:11:39.060 --> 0:11:41.080
But we need also a lot of other stuff.

143
0:11:41.080 --> 0:11:47.200
We want to know what packages are installed, where they end up on our system, have their

144
0:11:47.200 --> 0:11:48.200
signatures.

145
0:11:48.200 --> 0:11:49.800
Can we verify that?

146
0:11:49.800 --> 0:11:54.320
That is what we normally want to have, and either this information is already provided

147
0:11:54.320 --> 0:11:59.000
by the distribution or we need to generate that on our own.

148
0:11:59.000 --> 0:12:03.000
Then on the hardware side, we need to know what kind of hardware we're running.

149
0:12:03.000 --> 0:12:06.040
So as we said, we have the EK, so the endorsement key.

150
0:12:06.040 --> 0:12:10.900
We need to at least know that to trust the TPM in some regard.

151
0:12:10.900 --> 0:12:15.000
And then ideally, we want to also know what firmware is running on that device and which

152
0:12:15.000 --> 0:12:16.720
configuration do we have.

153
0:12:16.720 --> 0:12:20.760
For example, do we allow CQ to be disabled and enabled?

154
0:12:20.760 --> 0:12:25.640
Do we have our own keys on there and stuff like that?

155
0:12:25.640 --> 0:12:31.400
So if you have all that information, we can go to the other side, which is the monitoring.

156
0:12:31.400 --> 0:12:35.440
That part is implemented by Keyline.

157
0:12:35.440 --> 0:12:39.800
If you have all the necessary information, we provide documentation and tools to generate

158
0:12:39.800 --> 0:12:43.560
a policy for that and you can feed it in that and so on.

159
0:12:43.560 --> 0:12:51.240
The challenge that you run into here is that for many of you, probably I'm a measured boot

160
0:12:51.240 --> 0:12:55.080
and TPMs are new.

161
0:12:55.080 --> 0:13:01.160
If you run into issues, then you also need to try to understand how that works to debug

162
0:13:01.160 --> 0:13:02.160
it.

163
0:13:02.160 --> 0:13:06.920
So that is a challenge you run into that you still need a good understanding of those technologies

164
0:13:06.920 --> 0:13:10.080
to make your life easier.

165
0:13:10.080 --> 0:13:13.240
But yeah, that is mostly solved by Keyline.

166
0:13:13.240 --> 0:13:19.040
Then we come to the non-technical side, which is we need to react somehow when we have a

167
0:13:19.040 --> 0:13:21.720
revocation failure.

168
0:13:21.720 --> 0:13:24.640
Is that a lot actually relevant for us?

169
0:13:24.640 --> 0:13:28.960
Because if we have like a file changes in TEMP, we don't really care.

170
0:13:28.960 --> 0:13:32.800
But then who needs to be notified if you have that?

171
0:13:32.800 --> 0:13:37.040
Then how do we tie that in our current monitoring infrastructure, for example, like with the

172
0:13:37.040 --> 0:13:38.040
WebHawks?

173
0:13:38.040 --> 0:13:44.000
And lastly, if you're a company and it's a potential security breach if Keyline fares

174
0:13:44.000 --> 0:13:46.120
in the way that you configured it.

175
0:13:46.120 --> 0:13:52.360
So there are service agreements in place which need to notify and how do we respond for that.

176
0:13:52.360 --> 0:14:01.840
But going now from the general part to actual examples, I work on a Linux distribution that

177
0:14:01.840 --> 0:14:09.720
does exams for schools and universities called LANDSTICK and we developed with the University

178
0:14:09.720 --> 0:14:16.920
of Applied Sciences and Arts, Northwestern Switzerland, also called FRNV, a system called

179
0:14:16.920 --> 0:14:21.920
Campla which is secure, bring your own device exams.

180
0:14:21.920 --> 0:14:24.560
So what is the problem here?

181
0:14:24.560 --> 0:14:28.800
The students want to bring their own device, their own notebook into the lecture hall and

182
0:14:28.800 --> 0:14:31.080
want to write their exams on that.

183
0:14:31.080 --> 0:14:34.960
We don't want to touch their operating system, so we do something which we call bring your

184
0:14:34.960 --> 0:14:35.960
own hardware.

185
0:14:35.960 --> 0:14:41.440
They bring their own hardware and we boot a live Linux system on that system and remotely

186
0:14:41.440 --> 0:14:45.480
attest if that system is running correctly.

187
0:14:45.480 --> 0:14:46.520
So what do we have?

188
0:14:46.520 --> 0:14:50.280
We have our hardware which has a hard drive and a TPM.

189
0:14:50.280 --> 0:14:55.900
Now we boot the distribution called LANDSTICK and on that we have the key lime agent running

190
0:14:55.900 --> 0:14:58.860
and also Imer and our measured boot stuff.

191
0:14:58.860 --> 0:15:02.960
And now the interesting part is we just care about the TPM.

192
0:15:02.960 --> 0:15:07.520
We don't care about the hard drive and what is on that system otherwise.

193
0:15:07.520 --> 0:15:13.200
So now we have the actual server solution.

194
0:15:13.200 --> 0:15:21.080
So we register to the exam system and this also includes that we register to key lime.

195
0:15:21.080 --> 0:15:27.240
Then we check in return if the system is actually in a trustworthy state and if that's the case,

196
0:15:27.240 --> 0:15:34.920
we release the exam files which is in our case normally RDP session which then connects

197
0:15:34.920 --> 0:15:40.480
to the cloud where the people are actually writing their exams.

198
0:15:40.480 --> 0:15:44.800
So why are we doing that this way?

199
0:15:44.800 --> 0:15:50.480
The first one is that we guarantee that the environment for every student is the same

200
0:15:50.480 --> 0:15:55.920
because they only provide their hardware and it's basically a terminal to connect to the

201
0:15:55.920 --> 0:16:01.600
actual exam so if there's computing intensive stuff then it doesn't really matter.

202
0:16:01.600 --> 0:16:07.400
And also because they only bring their own hardware and don't need to install monitoring

203
0:16:07.400 --> 0:16:13.400
software on their system to write the exam, we don't care what data is on that.

204
0:16:13.400 --> 0:16:14.640
We don't want to know.

205
0:16:14.640 --> 0:16:19.840
It's first for privacy and also to make setup way easier.

206
0:16:19.840 --> 0:16:26.240
Now, back to a more traditional scenario that more of you are probably familiar with the

207
0:16:26.240 --> 0:16:27.240
cloud.

208
0:16:27.240 --> 0:16:34.560
There we have the example that IBM uses for hypervisor at the station and they don't use

209
0:16:34.560 --> 0:16:38.160
run time at the station so not AMR.

210
0:16:38.160 --> 0:16:44.400
They use measure boot to see if the hypervisor booted up correctly.

211
0:16:44.400 --> 0:16:51.280
So their challenges were that implementing the actual response procedures, so the procedure

212
0:16:51.280 --> 0:16:59.960
from we have an alert to how do we deal with that now, that is the difficult part because

213
0:16:59.960 --> 0:17:04.920
the one is the technical side but how do we structure our teams in a way that we can guarantee

214
0:17:04.920 --> 0:17:05.920
that.

215
0:17:05.920 --> 0:17:14.040
Then also the other ones are eliminating false positives that ties into the first point because

216
0:17:14.040 --> 0:17:18.760
if a human needs to react, then we want to have no false positives and also no false

217
0:17:18.760 --> 0:17:21.080
negatives ideally.

218
0:17:21.080 --> 0:17:26.040
And false negatives are for security very, very bad so we don't want to have that.

219
0:17:26.040 --> 0:17:29.320
And lastly is keeping the policies up to date.

220
0:17:29.320 --> 0:17:34.640
Even if you roll your own distribution and are big enough, it's very difficult to be

221
0:17:34.640 --> 0:17:39.520
up to date on the policies and integrate them automatically.

222
0:17:39.520 --> 0:17:44.480
And lastly they have an escalation chain just for illustration purposes, they use key lime

223
0:17:44.480 --> 0:17:50.680
to monitor that, tie that into their Jira system and then have an actual person react

224
0:17:50.680 --> 0:17:53.640
on the other side.

225
0:17:53.640 --> 0:18:01.440
And then one point from a distribution, so in this case from SUSE, I asked them and they

226
0:18:01.440 --> 0:18:06.640
integrated key lime into pretty much any product, so it's an open SUSE today if you want to

227
0:18:06.640 --> 0:18:10.160
use it in micro S, there's instruction to do that.

228
0:18:10.160 --> 0:18:14.520
And then also in SUSE enterprise Linux and an ALP.

229
0:18:14.520 --> 0:18:21.720
Their challenges also were integrating it with SELinux fully and making IMA usable.

230
0:18:21.720 --> 0:18:26.720
So do we have signatures, how do we provide the hashes?

231
0:18:26.720 --> 0:18:35.600
And the general thing for distribution is how do we provide robust policies in general?

232
0:18:35.600 --> 0:18:43.480
Because we want users to try out the technology and want to experiment with that, but how

233
0:18:43.480 --> 0:18:45.600
do we give them the starting point?

234
0:18:45.600 --> 0:18:50.040
And that is still very difficult because as we saw, there are many data points that need

235
0:18:50.040 --> 0:18:55.280
to be collected and that is a challenge that they're trying to solve actively by making

236
0:18:55.280 --> 0:18:59.880
getting the signatures and the hashes easier.

237
0:18:59.880 --> 0:19:05.560
So to say for the end, try remote attestation today.

238
0:19:05.560 --> 0:19:12.080
The technology that you need to do that is pretty much in every device that you have

239
0:19:12.080 --> 0:19:14.240
like in a notebook that you can use.

240
0:19:14.240 --> 0:19:16.720
So you can find key lime at key lime.def.

241
0:19:16.720 --> 0:19:20.560
And yeah, thank you.

242
0:19:20.560 --> 0:19:30.720
So do we have questions?

243
0:19:30.720 --> 0:19:36.400
Lots of questions.

244
0:19:36.400 --> 0:19:38.640
Thank you for a great presentation.

245
0:19:38.640 --> 0:19:43.960
One question, you talked a lot about the verification side of the processing.

246
0:19:43.960 --> 0:19:50.320
You talked a lot about the verification side, but to have the golden values or the PCRs

247
0:19:50.320 --> 0:19:53.240
in your verified system, you need to provision them.

248
0:19:53.240 --> 0:20:00.200
So I was not sure the distribution side of things was how do you manage that in key lime?

249
0:20:00.200 --> 0:20:02.440
Could you shed some light on that?

250
0:20:02.440 --> 0:20:03.440
Yeah.

251
0:20:03.440 --> 0:20:11.280
So with the golden values, we have the values in the TPM and then they are also tied to

252
0:20:11.280 --> 0:20:14.360
Event Lock and IMR and like measured boot.

253
0:20:14.360 --> 0:20:20.280
And we solve that issue that we don't actually need golden values by having a policy engine.

254
0:20:20.280 --> 0:20:26.240
Basically that verifies the logs itself, checks if those match the values, but then we check

255
0:20:26.240 --> 0:20:28.480
the logs and not the end value.

256
0:20:28.480 --> 0:20:33.320
So and then a distribution can help because they can provide like a lot of the signatures

257
0:20:33.320 --> 0:20:38.080
already and which files are in which packages and how they end up.

258
0:20:38.080 --> 0:20:41.560
That makes the life for the distribution easier.

259
0:20:41.560 --> 0:20:44.440
Yes, sir.

260
0:20:44.440 --> 0:20:47.440
Questions?

261
0:20:47.440 --> 0:20:50.120
What is the performance of the switch check?

262
0:20:50.120 --> 0:20:54.360
How much time does it take and how much data is required for switch here?

263
0:20:54.360 --> 0:20:57.920
Monitoring?

264
0:20:57.920 --> 0:21:06.040
From what I saw, I don't have like a benchmarks for that, but it's pretty quick, like 200

265
0:21:06.040 --> 0:21:08.680
milliseconds, something like that.

266
0:21:08.680 --> 0:21:18.200
So the round trip from the request to the response is like 200 milliseconds in my tests,

267
0:21:18.200 --> 0:21:20.960
but of course it's on my machine, right?

268
0:21:20.960 --> 0:21:24.160
We don't have benchmarks for the performance.

269
0:21:24.160 --> 0:21:28.120
Yes, so it heavily also depends what you want to attest.

270
0:21:28.120 --> 0:21:34.120
If you just have measured boot, it's the quote time on the hardware TPM maximum to a second.

271
0:21:34.120 --> 0:21:40.520
And then it's like a couple of most megabytes, single digits that you have a data that is

272
0:21:40.520 --> 0:21:42.960
transferred.

273
0:21:42.960 --> 0:21:48.880
You had said that one of the challenges of implementation was dealing with false positives

274
0:21:48.880 --> 0:21:50.480
and maybe false negatives.

275
0:21:50.480 --> 0:21:53.960
Can you give some examples of when that would occur?

276
0:21:53.960 --> 0:21:59.080
Yes, because we are still talking over the network.

277
0:21:59.080 --> 0:22:03.480
That is like a false positive if the network connection goes down.

278
0:22:03.480 --> 0:22:08.000
And the other one is it's kind of a false positive and not really is if your policy

279
0:22:08.000 --> 0:22:11.000
is not up to date.

280
0:22:11.000 --> 0:22:14.800
For the system, it's not a false positive in the traditional sense, but it's false positive

281
0:22:14.800 --> 0:22:19.320
because you don't want that alert actually to happen.

282
0:22:19.320 --> 0:22:23.000
For the university use case, how do you know that you are actually talking to the real

283
0:22:23.000 --> 0:22:25.440
TPM in the laptop?

284
0:22:25.440 --> 0:22:27.880
So we have two ways.

285
0:22:27.880 --> 0:22:34.160
First we verify against the hardware manufacturer.

286
0:22:34.160 --> 0:22:36.840
So they have a CA that we can verify against.

287
0:22:36.840 --> 0:22:43.440
And also we can enroll the notebooks directly, so we check if the device is, which I forgot

288
0:22:43.440 --> 0:22:47.640
to say that the university part is still proof of concept.

289
0:22:47.640 --> 0:22:55.440
So we are currently working on it, but it's not rolled out like large scale.

290
0:22:55.440 --> 0:23:03.320
How do you make sure that a measurement, an alert event, a new change happened?

291
0:23:03.320 --> 0:23:07.760
And how do you make sure that it's not intercepted over the network?

292
0:23:07.760 --> 0:23:12.200
Sorry, once again.

293
0:23:12.200 --> 0:23:16.200
How do you make sure that when there's an event saying that there's a change in the

294
0:23:16.200 --> 0:23:22.080
machine, a new measurement that appears, how do you make sure that the event is not intercepted

295
0:23:22.080 --> 0:23:27.760
in the network between the monitored machine and the trusted system?

296
0:23:27.760 --> 0:23:35.120
So is the question, how do we deal with the losing connection between the agent, the monitored

297
0:23:35.120 --> 0:23:37.240
system and the verifier?

298
0:23:37.240 --> 0:23:42.680
Losing connection or having maybe something in between, making sure that it does not go

299
0:23:42.680 --> 0:23:47.920
to the trusted system.

300
0:23:47.920 --> 0:23:52.720
There's something in between that makes sure that you're never going to be notified that

301
0:23:52.720 --> 0:24:01.840
a system is going to be compromised or just became compromised.

302
0:24:01.840 --> 0:24:07.840
If we have a blocking connection between the agent and the verifier side, then we get a

303
0:24:07.840 --> 0:24:11.280
timeout at somewhat and then the agent gets automatically distrusted.

304
0:24:11.280 --> 0:24:17.600
And if you said from the notification system itself, if you say we notify all the other

305
0:24:17.600 --> 0:24:19.680
agents, of course then there is an issue.

306
0:24:19.680 --> 0:24:24.160
If you cannot reach to them on a trusted channel, then it's basically getting over in that direction.

307
0:24:24.160 --> 0:24:29.400
So you need to get your revocation alerts if you want to guarantee them all the time

308
0:24:29.400 --> 0:24:30.760
through a trusted channel.

309
0:24:30.760 --> 0:24:35.320
So the trust boundary is for the attestation part that we see that, but the revocation

310
0:24:35.320 --> 0:24:41.840
part if you want to reach that, then it needs to go through a trusted channel.

311
0:24:41.840 --> 0:24:46.920
So continuing on this question, actually, I think how do you make sure that your actual

312
0:24:46.920 --> 0:24:52.040
verifier is connected to the right agent and you don't have a man in the middle attack

313
0:24:52.040 --> 0:24:56.560
that's happening and rerouting this to a fake agent and fake TPM?

314
0:24:56.560 --> 0:25:00.240
So that's tied with the EK certificate.

315
0:25:00.240 --> 0:25:06.280
So you trust the manufacturer because when they manufacture the TPM, they will create

316
0:25:06.280 --> 0:25:11.200
this key that cannot be modified or removed in any way.

317
0:25:11.200 --> 0:25:14.760
So it provides the identity to the TPM.

318
0:25:14.760 --> 0:25:22.920
So when you get the information from the TPM or from some agent, you can verify that that

319
0:25:22.920 --> 0:25:32.040
data came from the TPM that has some EK key because it's signed and you can verify the

320
0:25:32.040 --> 0:25:36.680
origin using the CA certificate provided by the member factor.

321
0:25:36.680 --> 0:25:45.160
So you can check that the TPM is exactly the one you expected using the EK certificate.

322
0:25:45.160 --> 0:25:46.160
Okay.

323
0:25:46.160 --> 0:25:47.160
Thank you for the talk.

324
0:25:47.160 --> 0:25:48.160
Thank you for all the questions.

325
0:25:48.160 --> 0:25:49.160
We are out of time.

326
0:25:49.160 --> 0:26:07.280
Thank you.


1
0:00:00.000 --> 0:00:02.060
you

2
0:00:30.000 --> 0:00:32.060
you

3
0:01:00.000 --> 0:01:02.060
you

4
0:01:30.000 --> 0:01:32.060
you

5
0:02:00.000 --> 0:02:02.060
you

6
0:02:30.000 --> 0:02:32.060
you

7
0:03:00.000 --> 0:03:02.060
you

8
0:03:30.000 --> 0:03:32.060
you

9
0:04:00.000 --> 0:04:02.060
you

10
0:04:30.000 --> 0:04:32.060
you

11
0:05:00.000 --> 0:05:02.060
you

12
0:05:30.000 --> 0:05:32.060
you

13
0:06:00.000 --> 0:06:02.060
you

14
0:06:30.000 --> 0:06:32.060
you

15
0:07:00.000 --> 0:07:02.060
you

16
0:07:30.000 --> 0:07:32.060
you

17
0:08:00.000 --> 0:08:02.100
you

18
0:08:30.000 --> 0:08:32.060
you

19
0:09:00.000 --> 0:09:02.100
you

20
0:09:30.000 --> 0:09:32.100
you

21
0:10:00.000 --> 0:10:02.100
you

22
0:10:30.000 --> 0:10:32.100
you

23
0:11:00.000 --> 0:11:02.100
you

24
0:11:30.000 --> 0:11:32.100
you

25
0:12:00.000 --> 0:12:02.100
you

26
0:12:30.000 --> 0:12:37.120
so that's all from my side in this little review on the elliptic itself and thinking and

27
0:12:37.120 --> 0:12:39.120
and the implementations in pretty so far

28
0:12:39.120 --> 0:13:03.640
hi

29
0:13:03.640 --> 0:13:12.000
homomorphic encryption, NPC, VDFs, and then even when you start to mount recursion and

30
0:13:12.000 --> 0:13:18.320
curve cycles and pairing friendly curves, each time it seems to be we will try to standardize

31
0:13:18.320 --> 0:13:24.400
curves, and then discover like, oh, there's some new property, like maybe unknown order

32
0:13:24.400 --> 0:13:26.200
groups or hyperlyptic.

33
0:13:26.200 --> 0:13:34.560
I think the movement of this restreto and decaf goes in the direction in instead of

34
0:13:34.560 --> 0:13:40.040
standardize an elliptic curve itself, it is standardizing a variety of elliptic curves,

35
0:13:40.040 --> 0:13:47.040
then you have the operations and the maths to work with any elliptic curves in this variety.

36
0:13:47.040 --> 0:13:52.520
So this will bring us the possibility to have this, like another service that is providing

37
0:13:52.520 --> 0:13:58.920
random elliptic curves on the net, and you can pick one from there and forget about the

38
0:13:58.920 --> 0:14:01.360
thing that we are showing the same elliptic curves of this.

39
0:14:01.360 --> 0:14:09.800
The way that the current standards that exist are fixing an elliptic curve, one or another,

40
0:14:09.800 --> 0:14:13.800
but fixing it in a specific way.

41
0:14:13.800 --> 0:14:20.680
I have answered it because you say about homomorphic, but the homomorphic is huge.

42
0:14:20.680 --> 0:14:25.120
It's a very interesting field, but it's a huge field.

43
0:14:25.120 --> 0:14:29.120
Okay, I can see.

44
0:14:29.120 --> 0:14:31.800
Another question.

45
0:14:31.800 --> 0:14:39.320
In many protocols and also in IoT devices, you are bottlenecked by speed and also by signature

46
0:14:39.320 --> 0:14:40.320
size.

47
0:14:40.320 --> 0:14:45.400
You said that with Jacobi-Quartic curve, you can go faster and also smaller.

48
0:14:45.400 --> 0:14:49.880
How fast, how much faster and how much smaller?

49
0:14:49.880 --> 0:14:57.080
I have in the paper of the Jacobi-Quartic people, the speed is explained.

50
0:14:57.080 --> 0:14:59.120
I don't have the numbers of mine now.

51
0:14:59.120 --> 0:15:04.920
I have the numbers of mine about the size because the sizes in signatures in elliptic

52
0:15:04.920 --> 0:15:11.200
curves are 64 bytes, and the proposal, the schema they propose for the Jacobi-Quartic,

53
0:15:11.200 --> 0:15:15.320
it's 84 bytes.

54
0:15:15.320 --> 0:15:19.240
So it's like a third, smaller.

55
0:15:19.240 --> 0:15:25.480
But it's still bigger than BLS signatures who are about 32 to 48 because you only need

56
0:15:25.480 --> 0:15:28.960
a single point on curve.

57
0:15:28.960 --> 0:15:33.000
In the signature, in the signature, you are not putting only the point.

58
0:15:33.000 --> 0:15:36.000
There are three, if I remember correctly, there are three.

59
0:15:36.000 --> 0:15:39.400
BLS signatures, it's only one point.

60
0:15:39.400 --> 0:15:40.400
Which signature?

61
0:15:40.400 --> 0:15:43.640
BLS from Danbony.

62
0:15:43.640 --> 0:15:49.360
But it's shorter than 48 bytes.

63
0:15:49.360 --> 0:15:51.800
It depends on the base curve you use.

64
0:15:51.800 --> 0:15:58.320
But it's only, so if you use, well, 32-byte signatures are not deemed secure enough because

65
0:15:58.320 --> 0:16:00.200
you have pairing issues.

66
0:16:00.200 --> 0:16:09.880
But 48 provides 128 bytes of security.

67
0:16:09.880 --> 0:16:16.360
What I know is that the 8-volt curves variety is 64 bytes.

68
0:16:16.360 --> 0:16:22.400
Okay, are there any questions?

69
0:16:22.400 --> 0:16:25.480
No, then.

70
0:16:25.480 --> 0:16:27.080
Okay.

71
0:16:27.080 --> 0:16:36.840
Have you looked at Genos II curves because I saw that they actually outperformed Genos

72
0:16:36.840 --> 0:16:37.840
II?

73
0:16:37.840 --> 0:16:38.840
Yeah.

74
0:16:38.840 --> 0:16:43.240
They outperformed Genos I. I saw DJB was really in the center.

75
0:16:43.240 --> 0:16:45.240
You are hyper-eliptic curves.

76
0:16:45.240 --> 0:16:47.240
Yeah, the Picard group.

77
0:16:47.240 --> 0:16:49.680
This is a very nice subject also.

78
0:16:49.680 --> 0:16:56.040
I think banks are the ones that are putting more money in hyper-eliptic curves.

79
0:16:56.040 --> 0:16:57.040
They are not using points.

80
0:16:57.040 --> 0:17:03.880
They are using a matrix of the Jacobian of the point.

81
0:17:03.880 --> 0:17:09.760
Right now, I only heard about banks putting money there.

82
0:17:09.760 --> 0:17:18.040
I haven't seen an implementation in open source.

83
0:17:18.040 --> 0:17:19.040
Any other?

84
0:17:19.040 --> 0:17:20.040
Well, no.

85
0:17:20.040 --> 0:17:21.040
Thank you.

86
0:17:21.040 --> 0:17:34.760
Thank you.


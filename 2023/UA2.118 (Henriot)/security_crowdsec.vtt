WEBVTT

00:00.000 --> 00:13.240
Hello, everyone. My name is Amzah and this is my colleague Sebastian. We are working

00:13.240 --> 00:18.560
at CrowdSec and today we're going to introduce you CrowdSec, show you how, explain you how

00:18.560 --> 00:26.440
it works and show you how we can protect your Kubernetes cluster using it. So how CrowdSec

00:26.440 --> 00:37.760
was created. We start with the basic statement that... Yeah, so, cyber security, we start

00:37.760 --> 00:42.920
with the basic statement that cyber security is not a problem of means. As you can see,

00:42.920 --> 00:48.960
those big companies have huge amount dedicated to cyber security. They have security teams,

00:48.960 --> 00:55.280
but they get still hacked. And the reason we think that the reason why is because, sorry,

00:55.280 --> 01:05.000
because they try to fight alone, like using the superhero approach, fighting alone attackers

01:05.000 --> 01:11.560
while those attackers are sometimes collaborating together to attack. So as we are a lot of

01:11.560 --> 01:19.320
users that want to run legitimate businesses, why not collaborating all together to fight

01:19.320 --> 01:27.800
those attackers? So how this collaborative IPS works. So basically, CrowdSec needs to

01:27.800 --> 01:35.960
ingest logs. So we have a lot of handled data sources like flat file, basic. It can also

01:35.960 --> 01:41.800
act as a syslog server to receive syslog inputs. It can also read your Docker container

01:41.800 --> 01:49.280
output logs on the cloud part. We have a cloud trail on the stream processing. We also can

01:49.280 --> 01:56.800
have Kafka, Kinesis, and so on. Then we have the IDS part. So the IDS part is a component,

01:56.800 --> 02:05.440
what we call the agent. The agent is here to pass the logs and detect bad behaviors.

02:05.440 --> 02:14.000
And this is where the community aspect starts. We have a hub, like Docker Hub, where we wrote,

02:14.000 --> 02:21.040
sorry, our scenarios to detect the common attacks. And we share them with the community.

02:21.040 --> 02:28.720
And then here the other users, they write their own parsers to handle the new services,

02:28.720 --> 02:34.160
new bad behaviors, et cetera. And they share them with the community. You can also write

02:34.160 --> 02:41.240
your own scenarios to detect, like, a specific behavior in your internal infrastructure,

02:41.240 --> 02:48.320
for example, and not share it, of course. And once this detection is done, we have the

02:48.320 --> 02:57.360
IPS part. So the IPS part is what we call, it's another component of CrowdSec called

02:57.360 --> 03:06.960
the bouncers. And the bouncers are here to allow you to do a remediation in multiple

03:06.960 --> 03:11.640
parts of your infrastructure. So, for example, the basic one is to have the firewall bouncers.

03:11.640 --> 03:17.320
So the firewall bouncer will communicate with the CrowdSec, get the decisions, and block

03:17.320 --> 03:23.480
them at the firewall level. That you want sometimes have a smarter remediation. Like,

03:23.480 --> 03:29.040
for example, you run an eShop. And we know that sometimes we have a lot of clients that

03:29.040 --> 03:35.000
are behind a single IP. So what we want to do is to, when a bad behavior is detected

03:35.000 --> 03:42.600
from an IP, we want to push a capture to the user. So we let humans steal access to the

03:42.600 --> 03:49.720
website, but block the bots. And, of course, we have a lot of other bouncers on the cloud

03:49.720 --> 03:56.880
side or also other bouncers that are written by us and by the community, of course. And

03:56.880 --> 04:05.320
they are also available in the hub. And when this remediation is done, we have the reputation

04:05.320 --> 04:11.040
part and what we call the community block list. So we receive the signals for, we send

04:11.040 --> 04:16.160
the signal to the community, to the central API, sorry. We receive all those signals,

04:16.160 --> 04:21.640
we create them, and then we return to the community the most aggressive IPs. So you

04:21.640 --> 04:27.920
are protecting yourself and protecting the community. And you benefit also from the community

04:27.920 --> 04:39.840
feeds. So we are, CloudSec already deal with a lot of common attacks, more than 50. Web

04:39.840 --> 04:44.960
scan, post scan, conditional scan, stuffing. But also, thanks to the inference engine of

04:44.960 --> 04:52.400
CloudSec, you can, it allows us to detect more complex attacks, like, for example, LCV

04:52.400 --> 04:59.520
DDoS or credit card stuffing, which is a very business-specific issue. So, for example,

04:59.520 --> 05:04.000
when you have for credit card stuffing, it's when an attacker buys some credit cards from

05:04.000 --> 05:10.800
a shady website and wants to test if those credit cards are valid. So here we go to the

05:10.800 --> 05:17.400
eShop and try to do small purchases. So you can detect this kind of attacks, also bot

05:17.400 --> 05:25.760
scalping, etc. Basically, you can detect, if it's in the logs, as CloudSec, in just logs, you

05:25.760 --> 05:34.040
can detect it. And thanks to that, we are building a real-time map, sorry, of cyber

05:34.040 --> 05:40.880
criminals. It's kind of like ways between cybersecurity. So the more we are, and the more

05:40.880 --> 05:48.560
efficient is the radar. And, of course, it will allow us to kill the most important resource

05:48.560 --> 06:00.920
for the attackers, which is the IP addresses. Now I will let my colleague take the next slide.

06:00.920 --> 06:09.240
Hello, everyone. So first thing, so about privacy, because as Amza mentioned, you do send us

06:09.240 --> 06:17.400
data about the attacks you see. But we do collect only the strict minimum to be able to build

06:17.400 --> 06:23.560
the community blockage. This means that your logs will never, ever leave your own server. Logs are

06:23.560 --> 06:29.440
processed locally by CloudSec, and you will only send some metadata about the behaviors that are

06:29.440 --> 06:36.680
detected by CloudSec. So those metadata are just the IP that you blocked, the reason why, so for

06:36.680 --> 06:43.800
example, the SSH could force, and the time at which you block the attack. And that's it, nothing

06:43.800 --> 06:50.440
else. And also, this part is totally optional. If you do not want to send anything to us or the

06:50.440 --> 06:55.760
community, you don't have to. But if you don't send data, if you don't share with the community,

06:55.760 --> 07:01.480
in return you will not get the community block list. And also we keep the data for the least

07:01.480 --> 07:06.640
amount of time possible. So basically every IP in the community block list will be automatically

07:06.640 --> 07:13.640
deleted after one week if the IP does not perform any more attack on the community. And for the

07:13.640 --> 07:20.560
raw data we receive, after three months it's degraded and after nine months it's totally

07:20.560 --> 07:27.560
deleted. Now, how do we build this community block list? Because we receive reports from all

07:29.900 --> 07:35.200
over the community, but we cannot trust those reports because it's just an API. If someone

07:35.200 --> 07:40.720
wants to, if someone wants to send us the information that ISO 1.1.1 performing a SSH

07:40.720 --> 07:47.720
could force my server, we have no way, basically, to know if it's true or not. So we build, we

07:47.720 --> 07:54.620
build something called the consensus. So we get the report from all over the community. And

07:54.620 --> 07:59.620
then each user in the community has a trust score. So this score is really how much trust you.

08:02.660 --> 08:08.500
It's built over time, so the longer you are part of the community, the more your score will

08:08.500 --> 08:14.280
increase. But it will also take into account how active you are in the community. So if you

08:14.280 --> 08:20.880
report just one IP per day or someone that is reporting 100 IP per day, we will just give a

08:20.880 --> 08:27.060
slightly better score to the user reporting 100 IP per day. And we will also correlate your

08:27.060 --> 08:31.900
report with other community members. If you are the only one sending us the information about

08:31.900 --> 08:37.960
a particular IP, this IP will never go into the community block list because we cannot confirm

08:37.960 --> 08:44.980
that it is indeed an IP trying to attack servers on the internet. But if, uh, if multiple users

08:49.620 --> 08:55.020
report the same IP, then we will be more confident about the fact that this report is

08:55.020 --> 09:00.020
uh, exact. We do also run some uh, oniparts and because those are fully controlled by us, they

09:00.020 --> 09:05.040
are fully trusted. So if someone tried to attack them, we know that this is an actual report.

09:05.040 --> 09:10.040
Uh, we do also have some whiteles because if someone send us IP belonging, for example, to

09:10.040 --> 09:15.040
uh, to have a cloud flare, uh, obviously this is not something we want to redistribute uh, to

09:15.040 --> 09:20.040
the community. And again, if you do send us too many uh, false positive report like this, your

09:20.040 --> 09:25.040
score will be reduced because we know that your report are potentially false. And lastly, we

09:37.080 --> 09:42.720
do also have some more um, advanced algorithms that for example, we look at the bigger picture,

09:42.720 --> 09:49.720
uh, if you take a slash 24 network and like 50% of this network is already uh, in the community

09:51.060 --> 09:56.640
block list, when if we see another IP belonging to this network, it's quite likely that this

09:56.640 --> 10:01.640
IP is also bad. Same thing for example, if the IP report it to us exposes uh, like I don't know,

10:04.080 --> 10:10.080
attended server, uh, 20 different service on the internet, again, it's more likely that the IP

10:10.080 --> 10:15.080
has been compromised. And so when a report goes through everything, we will take a decision

10:17.580 --> 10:22.460
and it will go into what we call the fire database or the community block list and it will

10:22.460 --> 10:27.460
be pulled automatically by all uh, the community member. Now also for the usefulness of the

10:34.440 --> 10:38.780
community block list, a while back we ran a small experiment where we had two different

10:38.780 --> 10:44.520
servers exposed on the internet. Uh, on the same thing provider, those two server had the exact

10:44.520 --> 10:49.580
same set of services exposed on, exposed on the internet so to adjust the web server and

10:49.580 --> 10:55.220
the SSL server. The only difference between them was one was using the community block list and

10:55.220 --> 11:00.220
the other one was not. On the one using the community block list, we saw a one 92% less attack

11:00.220 --> 11:05.240
uh, on the server detected by protect. So because basically most of the IPs that are trying to

11:09.380 --> 11:15.180
scan uh, your server exposed on the internet are basically trying to do it for all the internet

11:15.180 --> 11:19.380
and so this is just some background noise you don't really care about it, you can just block it

11:19.380 --> 11:24.380
before it can try to attack you. Another thing that we get uh, asked quite often is, okay so I

11:30.820 --> 11:32.860
want to replace my firewall with

11:32.860 --> 11:39.200
I want to replace my auditing system with scratch or whatever. Please don't do that. It's

11:39.200 --> 11:44.700
not designed uh, to do that. We don't compete with this kind of solution but on the contrary, we

11:44.700 --> 11:49.700
can help them to, to be more useful. So for example, uh, if you have an auditing system

11:52.680 --> 11:58.160
telling you that, okay so I saw uh, command execution on the server and to the car by

11:58.160 --> 12:04.060
batch or something or whatever. But you, you can configure a code select to pass this log to

12:04.060 --> 12:08.800
detect this behavior and just to send you a notification. It does not have to be something

12:08.800 --> 12:14.540
about an IP address, it can be a local behavior as well. Or something, something with fire

12:14.540 --> 12:20.640
wall. You don't have to uh, go into uh, the configuration at the IP, just add the IP in

12:20.640 --> 12:27.220
code sec with one simple command and then you code sec will take care of pushing this

12:27.220 --> 12:32.220
information to your firewall and the IP will be blocked. Um, so for the uh, architecture uh, of

12:36.020 --> 12:43.000
code sec, so as I, as I mentioned before, so code sec will ingest some logs, pass them. So this

12:43.000 --> 12:49.700
is the, the, the role of what we call the agent. Uh, the agent will read your logs, pass them

12:49.700 --> 12:54.440
and confirm them against scenario. So scenario just something that describe a malicious

12:54.440 --> 13:00.680
behavior. For example, a brute force and wondering to scan your website and so on. When the

13:00.680 --> 13:06.560
agent detect a malicious behavior, it will create an alert and will be sending this alert to

13:06.560 --> 13:11.420
another component of code sec, the local API. So this means that the agent can live on one

13:11.420 --> 13:17.360
server, the local API can live on another server. The local API will take this alert and

13:17.360 --> 13:23.400
transform it into a decision. For example, by default it's a four hour ban on the IP. But you

13:23.400 --> 13:29.180
can customize this behavior and for example you can say, so uh, this IP is French, uh, it

13:29.180 --> 13:36.180
performs something related to uh, an HTTP attack. So instead of just banning it, I'm going to

13:36.180 --> 13:41.180
uh, ask my uh, bonzer to display a capture for this IP for four hours, for example. Um, so and

13:45.520 --> 13:51.500
when uh, so when the local API receive, receive a decision, it will be sending us information

13:51.500 --> 13:57.500
about the alert. And in exchange you will receive the community blocklets. Uh, the local API

13:57.500 --> 14:03.280
is also used by the bonzer, so the components that do actually apply the decision because

14:03.280 --> 14:07.980
code sec by itself will just do the detection part. It will not block anything. For that you

14:07.980 --> 14:13.780
need bonzer. So we have uh, quite a few of them. The most popular one is probably the fire

14:13.780 --> 14:18.160
all bonzer that will interact with the local firewall uh, of the server where the bonzer is

14:18.160 --> 14:23.700
only to block the IP. Uh, but we do also support uh, web server for example in Genix. And in

14:23.700 --> 14:29.600
this case because we are at a higher level in the network, you can display capture to the

14:29.600 --> 14:34.600
user instead of, instead of just grouping the request. Um, so here uh, it's the um, design

14:40.580 --> 14:45.580
that will be uh, used in the following uh, demo. So, very small kubectl-scr running locally

14:47.780 --> 14:52.780
with just two nodes. One agent per node deployed as a demand set. Uh, one local API for the

14:52.780 --> 14:57.780
agent to be able to send the alert. Uh, the agent will be reading the logs of uh, the ingress

15:02.600 --> 15:07.600
of the cluster and this case is Angelix ingress and we will have a, a bonzer, the Angelix

15:07.600 --> 15:12.740
bonzer running on the ingress to uh, block automatically the IP if code sec wants to

15:12.740 --> 15:22.740
bonzer. Okay, thank you. So uh, as we have, we are crazy guys, we gonna do a live demo. And uh,

15:28.080 --> 15:33.080
yeah, uh, just think I have some. So, as Sebastian said, we gonna, we have a small uh,

15:33.080 --> 15:38.080
locally of course, not online. Uh, thanks. Ah yes, of course, sorry. Thank you. Okay, so, uh,

15:51.400 --> 15:56.400
what we gonna do is to um, so, sorry for that, but I will uh, so this terfum uh, will create

15:56.400 --> 16:01.400
uh, Kubernetes cluster with two nodes. Uh, with the ingress controller, uh, Angelix and uh,

16:09.840 --> 16:14.840
uh, a hello world app like it's a demo application. Uh, nice. Okay. So here we can see that.

16:14.840 --> 16:21.840
Okay, we have one, uh, ingress controller and we have two nodes. Okay, so what we will do now, uh,

16:28.880 --> 16:33.720
I will not spend time to explain you like the, the, the crowd sec values because we released

16:33.720 --> 16:39.600
an hand chart that will allow you to install crowd sec in a Kubernetes cluster. As he said,

16:39.600 --> 16:44.600
it's deployed a demo set, so in each node, it will deploy a crowd sec agent and one lapi, so

16:46.000 --> 16:51.000
local API in a, in a specific name space. And of course your decisions will be centralized,

16:53.140 --> 16:58.140
uh, across all your, uh, nodes. So here we will install, uh, crowd sec. So basically just

16:58.140 --> 17:04.140
install the crowd sec is in these values. Uh, and this is the hand chart. Of course I already

17:09.680 --> 17:14.680
import my repo in the name space, card sec and create it if it's not exist the name space. So

17:14.680 --> 17:26.680
here if we are, okay. Ah yeah, as I popped a new cluster, I have to wait for the, uh, image download

17:26.680 --> 17:37.680
better. It will come tomorrow. Okay. What I can do, yeah, of course, uh, what I can do is to show

17:37.680 --> 17:49.680
you that I'm able to access my hello world app. So it's basically a Nello world. So each return,

17:49.680 --> 17:59.680
uh, two O O and okay. We have one pod that is running. Okay. So this is the, this is the

18:19.680 --> 18:43.680
demo effect as usual. Uh, let's install wait. Ah, okay. So now, uh, yeah, we're gonna fetch this

18:43.680 --> 18:55.680
one. So, okay. I will, uh, follow my logs from the, this agent. So logs minus F agent and, and

18:57.680 --> 19:04.680
all right. So here's my crowd sec logs. So now what I will do is to, uh, run Nikto, which is a, a

19:04.680 --> 19:14.680
simple, okay. A simple web scanner to attack my, uh, hello world application. And here we can see

19:16.680 --> 19:22.680
that I can even already, okay. Here we can see that it automatically detects as it's automatically

19:23.680 --> 19:28.680
parsing the logs of the ingress controller. It detects some bad behaviors because I already

19:28.680 --> 19:34.680
installed, uh, like a collections that are bundles of parsers and scenarios. And you can see that

19:34.680 --> 19:43.680
it detect bad user agent, some sensitive file access, pat traversal, et cetera. So if I, uh, do

19:43.680 --> 19:55.680
something like that and get a shell on crowd sec, sorry for the noise, uh, local API. And if I list

19:55.680 --> 20:03.680
the decisions that were taken, we can see that we have, uh, six, uh, other entries like this one

20:04.680 --> 20:09.680
because we detect several times my IP as I'm working locally. That's why we have those IPs. And

20:10.680 --> 20:15.680
this is the last, uh, behavior that was detected. So now what we will do is to install the bouncer

20:16.680 --> 20:21.680
because we are detecting, but we get still, uh, access to the, to the application. So now we will

20:21.680 --> 20:26.680
patch our, uh, ingress controller, uh, to install the new app plugin to communicate with the local

20:26.680 --> 20:35.680
API and get banned of course. So now here we have the command so we can go fast and head and at

20:35.680 --> 20:54.680
time. So I'm upgrading my capabilities, uh, my English controller. Sorry. Uh, okay. Okay. So now if

20:54.680 --> 21:00.680
we try to access now to, uh, the hello world application, we can see that we will be, we will

21:00.680 --> 21:12.680
receive a four or three. So if I do this, oh, ah, it was failing. Sorry. I didn't see that. Uh, why?

21:18.680 --> 21:20.680
Yeah.

21:20.680 --> 21:22.680
Yeah.

21:28.680 --> 21:32.680
Let's wait for this and upgrade.

21:32.680 --> 21:55.680
Okay. Okay. Nice. So it's popping the new, uh, ingress controller. Of course it's local. That's why

21:55.680 --> 22:06.680
we have only one pod. I don't recommend that in production. Um, so it's deploying the new ingress

22:06.680 --> 22:15.680
controller, uh, and loading of course the crowd sake bouncer. It's a new library that is talking

22:15.680 --> 22:29.680
with the local API and on each request we have this check. Come on.

22:29.680 --> 22:33.680
Yes.

22:41.680 --> 22:50.680
Uh, and yes, of course, uh, I think we ended. No, we have still time so we can take some questions and

22:50.680 --> 22:56.680
I will follow up for like one question. So there is one fast question for one minute. Feel free to

22:56.680 --> 23:02.680
answer it. Oh, okay. Uh, to, to hand, just to hand the demonstration, uh, it's running and now we

23:02.680 --> 23:12.680
have a four or three. So that's it. And, uh, okay. So thank you.

23:18.680 --> 23:23.680
This is the challenge with the demo demonstrations. Uh, if you have some questions, don't hesitate.

23:23.680 --> 23:29.680
And of course we have some, uh, stickers, so don't hesitate to, to, to come to us.

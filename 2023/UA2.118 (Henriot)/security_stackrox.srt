1
0:00:00.000 --> 0:00:02.000
Welcome, Ruthvik.

2
0:00:00.000 --> 0:00:02.000
Thank you.

3
0:00:02.000 --> 0:00:04.000
Good evening, everyone.

4
0:00:04.000 --> 0:00:07.000
Thanks for coming back for the late evening talk.

5
0:00:07.000 --> 0:00:09.000
I appreciate your time.

6
0:00:09.000 --> 0:00:11.000
So my name is Ruthvik Shih-Sagar.

7
0:00:11.000 --> 0:00:14.000
I work at Tredad as a senior technical support engineer.

8
0:00:14.000 --> 0:00:17.000
I mainly work on solving open-ended problems,

9
0:00:17.000 --> 0:00:19.000
and I'm also working on solving the problems

10
0:00:19.000 --> 0:00:21.000
in the future.

11
0:00:21.000 --> 0:00:24.000
And I'm working on solving the problems in the future.

12
0:00:24.000 --> 0:00:31.000
So with the recent time and security threats or attacks,

13
0:00:31.000 --> 0:00:34.000
we have seen that container-run Kubernetes adoption

14
0:00:34.000 --> 0:00:36.000
has equally increased.

15
0:00:36.000 --> 0:00:39.000
With that, security has become a biggest concern, right?

16
0:00:39.000 --> 0:00:43.000
So we'll see how Strykerox is paving the way

17
0:00:43.000 --> 0:00:45.000
for Kubernetes native security.

18
0:00:45.000 --> 0:00:48.000
So I'm going to talk about the future of the future.

19
0:00:48.000 --> 0:00:51.000
So I'm going to talk about the future of the future of the future.

20
0:00:51.000 --> 0:00:55.000
And how Strykerox is paving the way for Kubernetes native security

21
0:00:55.000 --> 0:00:59.000
and helping us to achieve or resolve the security issues

22
0:00:59.000 --> 0:01:02.000
with ease and automation.

23
0:01:02.000 --> 0:01:06.000
So this is the brief agenda for today's talk.

24
0:01:06.000 --> 0:01:10.000
So in the first few slides, we'll discuss current state

25
0:01:10.000 --> 0:01:13.000
of Kubernetes security, what are the best practices,

26
0:01:13.000 --> 0:01:19.000
and how DevSecOps benefits into the security posture,

27
0:01:19.000 --> 0:01:22.000
how to shift-left the security for your developers

28
0:01:22.000 --> 0:01:24.000
as well as your security admins.

29
0:01:24.000 --> 0:01:27.000
And then we will see how Strykerox ecosystem

30
0:01:27.000 --> 0:01:31.000
is helping end users, developers, as well as your security teams

31
0:01:31.000 --> 0:01:36.000
to overcome the security issues with ease.

32
0:01:36.000 --> 0:01:42.000
And then we will have some demo at the end.

33
0:01:42.000 --> 0:01:45.000
So first of all, let's understand what is zero-to-security,

34
0:01:45.000 --> 0:01:48.000
why we require zero-to-security, right?

35
0:01:48.000 --> 0:01:52.000
Zero-to-security is basically a framework which requires

36
0:01:52.000 --> 0:01:57.000
all the users to be authenticated and authorized continuously

37
0:01:57.000 --> 0:02:02.000
before they're being granted an access to your application and data.

38
0:02:02.000 --> 0:02:05.000
So if you manage to achieve zero-to-security model,

39
0:02:05.000 --> 0:02:10.000
then I would say that we could resolve or minimize the impact

40
0:02:10.000 --> 0:02:14.000
at the very early stage of your application lifecycle.

41
0:02:14.000 --> 0:02:20.000
Then how exactly zero-to-security fits into the software supply chain?

42
0:02:20.000 --> 0:02:22.000
So what exactly is software supply chain?

43
0:02:22.000 --> 0:02:29.000
It includes everything, everyone and everything that touches your application code

44
0:02:29.000 --> 0:02:32.000
into entire software development lifecycle, right?

45
0:02:32.000 --> 0:02:36.000
It could be your deployment, it could be your final artifact,

46
0:02:36.000 --> 0:02:38.000
it could be your CI-CD pipeline.

47
0:02:38.000 --> 0:02:43.000
So it's essential that we build the application in such a way

48
0:02:43.000 --> 0:02:49.000
that the assurance at every stage of application is being taken seriously.

49
0:02:49.000 --> 0:02:54.000
That way we could achieve the pressure of software supply chain.

50
0:02:54.000 --> 0:02:58.000
So yeah, we can see that securing dependencies,

51
0:02:58.000 --> 0:03:02.000
securing code, securing containers, as well as the infrastructure

52
0:03:02.000 --> 0:03:08.000
are all part of the software supply chain.

53
0:03:08.000 --> 0:03:10.000
Let me ask you this question.

54
0:03:10.000 --> 0:03:13.000
If you are using Kubernetes or in general any applications,

55
0:03:13.000 --> 0:03:18.000
have you ever delayed or slowed down the application deployment into production

56
0:03:18.000 --> 0:03:22.000
due to container security concerns?

57
0:03:22.000 --> 0:03:26.000
Any one of you?

58
0:03:26.000 --> 0:03:31.000
All right, I assume so because that's how we go through application lifecycle.

59
0:03:31.000 --> 0:03:35.000
We deploy the application, then we analyze the application behavior

60
0:03:35.000 --> 0:03:39.000
and we detect the vulnerabilities.

61
0:03:39.000 --> 0:03:43.000
So in the recent trend, we have seen some common factors

62
0:03:43.000 --> 0:03:48.000
or common anti-patterns which were causing delays for an application

63
0:03:48.000 --> 0:03:51.000
to get deployed on the production.

64
0:03:51.000 --> 0:03:55.000
So misconfiguration has topped the percentage.

65
0:03:55.000 --> 0:03:58.000
Following that, we have vulnerabilities to remediate, right?

66
0:03:58.000 --> 0:04:03.000
So for example, we kind of able to detect the vulnerabilities

67
0:04:03.000 --> 0:04:07.000
but somehow we tend to overlook them or we could not assess them accurately.

68
0:04:07.000 --> 0:04:11.000
That leads to the vulnerability.

69
0:04:11.000 --> 0:04:15.000
I mean, we get to know that, okay, vulnerability exists

70
0:04:15.000 --> 0:04:20.000
but there are no proper ways or tooling to fix that kind of vulnerability.

71
0:04:20.000 --> 0:04:23.000
Then we ultimately have security issues at the runtime,

72
0:04:23.000 --> 0:04:31.000
you know, which could be costly or it could affect your entire production.

73
0:04:31.000 --> 0:04:39.000
So how can we make sure that these kind of issues are reduced, let's say?

74
0:04:39.000 --> 0:04:43.000
So in today's world, we need DevSecOps approach.

75
0:04:43.000 --> 0:04:45.000
DevOps, just DevOps isn't enough, right?

76
0:04:45.000 --> 0:04:48.000
We need DevSecOps approach to shift-flave the security

77
0:04:48.000 --> 0:04:52.000
from our traditional security practices.

78
0:04:52.000 --> 0:04:57.000
So DevSecOps helps us define microservices architecture.

79
0:04:57.000 --> 0:05:01.000
It provides us declarative definition to, you know,

80
0:05:01.000 --> 0:05:05.000
harden your security parameters, network policies and deployment conflicts.

81
0:05:05.000 --> 0:05:08.000
It also makes sure that the infrastructure stays immutable

82
0:05:08.000 --> 0:05:12.000
so at the runtime, nobody else is allowed to touch the software

83
0:05:12.000 --> 0:05:17.000
or your application deployment.

84
0:05:17.000 --> 0:05:20.000
At the same time, it is important that we know

85
0:05:20.000 --> 0:05:23.000
Kubernetes native security is increasingly critical

86
0:05:23.000 --> 0:05:30.000
and securing supply chain is also equally essential.

87
0:05:30.000 --> 0:05:33.000
So what are the basic Kubernetes security scan challenges?

88
0:05:33.000 --> 0:05:37.000
So we know that containers are numerous and everywhere.

89
0:05:37.000 --> 0:05:42.000
If I have to put analogy, like we say that everything is a file in Linux.

90
0:05:42.000 --> 0:05:45.000
In a similar way, everything runs in a container

91
0:05:45.000 --> 0:05:47.000
when we talk about Kubernetes, right?

92
0:05:47.000 --> 0:05:51.000
So they may tend to pose compliance challenges.

93
0:05:51.000 --> 0:05:55.000
Every container image is tied up with some of the other container registry, right?

94
0:05:55.000 --> 0:06:00.000
So sometimes we even forget to add TLS-based authentication

95
0:06:00.000 --> 0:06:04.000
to our image registry that may expose security threats

96
0:06:04.000 --> 0:06:08.000
or the internet if at all we expose that.

97
0:06:08.000 --> 0:06:11.000
And we are also aware that containers, by default,

98
0:06:11.000 --> 0:06:14.000
talk to each other without any network policies.

99
0:06:14.000 --> 0:06:19.000
So it is important that we define network policies at the early stages.

100
0:06:19.000 --> 0:06:24.000
And this one, I think most of you can relate that when we talk Kubernetes,

101
0:06:24.000 --> 0:06:26.000
all of the configurations looks pretty easy,

102
0:06:26.000 --> 0:06:30.000
but defaults are usually the less secure, right?

103
0:06:30.000 --> 0:06:34.000
So we as admin or developer have to proactively understand

104
0:06:34.000 --> 0:06:37.000
what configuration or what risk tolerance required

105
0:06:37.000 --> 0:06:42.000
for my organization or developer environment.

106
0:06:42.000 --> 0:06:48.000
So in Kubernetes, application lifecycle span across three phases mainly.

107
0:06:48.000 --> 0:06:52.000
That is build phase, deployment phase, and runtime phase.

108
0:06:52.000 --> 0:06:57.000
So how we can make sure that we secure each and every stage of the application, right?

109
0:06:57.000 --> 0:06:59.000
So when we talk about build phase,

110
0:06:59.000 --> 0:07:04.000
it's important that we isolate the vulnerability of security issue at the earliest.

111
0:07:04.000 --> 0:07:10.000
Otherwise, it would be very costly and risky to detect the vulnerabilities at the runtime, right?

112
0:07:10.000 --> 0:07:14.000
So what we can do, we can use minimal base images

113
0:07:14.000 --> 0:07:18.000
so that we can avoid unnecessary package managers

114
0:07:18.000 --> 0:07:22.000
or any executable programs into your container images.

115
0:07:22.000 --> 0:07:27.000
Then we can always use image scanner to identify known vulnerabilities.

116
0:07:27.000 --> 0:07:31.000
I think identifying vulnerabilities just once is not enough.

117
0:07:31.000 --> 0:07:35.000
You need to make sure that whatever security integration scanner you are using,

118
0:07:35.000 --> 0:07:37.000
that will continuously validate your container images

119
0:07:37.000 --> 0:07:43.000
and send the real-time alerts to your development team as well as security admins.

120
0:07:43.000 --> 0:07:48.000
Then, yes, at the build phase, we need to integrate CI CD pipeline.

121
0:07:48.000 --> 0:07:52.000
So that way, most of the things become automated,

122
0:07:52.000 --> 0:07:55.000
and you don't have to look around each and every build config

123
0:07:55.000 --> 0:07:59.000
to understand where the security issue lies through CI CD pipeline.

124
0:07:59.000 --> 0:08:03.000
If the stage gets filled, your production won't be affected

125
0:08:03.000 --> 0:08:06.000
and build would be stopped over there.

126
0:08:06.000 --> 0:08:10.000
Then at the deployment phase, as I mentioned,

127
0:08:10.000 --> 0:08:13.000
the default deployment config doesn't come with a network policy.

128
0:08:13.000 --> 0:08:19.000
We need to understand what services that deployment is trying to communicate,

129
0:08:19.000 --> 0:08:24.000
what are the ports that are defined in the deployment config,

130
0:08:24.000 --> 0:08:27.000
and accordingly, we can define our own network policies.

131
0:08:27.000 --> 0:08:32.000
Then we also need to make sure that the deployment doesn't allow root level privileges

132
0:08:32.000 --> 0:08:37.000
or any unknown users, user IDs to access your application.

133
0:08:37.000 --> 0:08:42.000
You should be always aware what users are going to access your application.

134
0:08:42.000 --> 0:08:46.000
And then, yes, we can extend the image scanning to deployment phase.

135
0:08:46.000 --> 0:08:51.000
So it's important that we do not restrict our image scanning at the build phase,

136
0:08:51.000 --> 0:08:55.000
but we continue doing that at the deployment phase as well.

137
0:08:55.000 --> 0:09:01.000
Then runtime phase, as I mentioned, we need to extend our scanning at the runtime as well.

138
0:09:01.000 --> 0:09:07.000
So we can easily understand and quickly understand what issues have appeared

139
0:09:07.000 --> 0:09:10.000
and what actions I need to take.

140
0:09:10.000 --> 0:09:16.000
It also helps monitoring network traffic to limit unnecessary or insecure communications.

141
0:09:16.000 --> 0:09:21.000
Then if we find any suspicious activity, and at the same time,

142
0:09:21.000 --> 0:09:24.000
if we have multiple replicas of your application,

143
0:09:24.000 --> 0:09:27.000
then we can compare all the replicas and processes runtime

144
0:09:27.000 --> 0:09:32.000
to understand what anonymous activity is happening.

145
0:09:32.000 --> 0:09:40.000
So to overcome all the challenges, we see Strykerox is helping the end users and the community as well.

146
0:09:40.000 --> 0:09:44.000
So why Strykerox is open source, right?

147
0:09:44.000 --> 0:09:51.000
Red Hat believes open model when it comes to your software or developing the application.

148
0:09:51.000 --> 0:10:00.000
And we believe that open source software can significantly help developers to drive the project with innovation

149
0:10:00.000 --> 0:10:03.000
as well as foster the collaboration within community.

150
0:10:03.000 --> 0:10:08.000
So Strykerox is working towards providing the open source solution,

151
0:10:08.000 --> 0:10:16.000
which will allow end users to decide how they want to protect their Kubernetes clusters.

152
0:10:16.000 --> 0:10:20.000
So let's understand what Strykerox has to offer us.

153
0:10:20.000 --> 0:10:28.000
It enables users to address all significant security cases across entire application lifecycle that we discussed, right?

154
0:10:28.000 --> 0:10:31.000
Right from your build, deployment and runtime.

155
0:10:31.000 --> 0:10:35.000
It also gives you greater visibility over vulnerability management,

156
0:10:35.000 --> 0:10:41.000
configuration management, network segmentation, compliance, threat detection, incident response,

157
0:10:41.000 --> 0:10:45.000
and risk profiling and tolerance.

158
0:10:45.000 --> 0:10:52.000
So Strykerox has a policy engine that allows users to run the policies out of the box,

159
0:10:52.000 --> 0:10:57.000
meaning that let's say if I have a severity with a CVSS score greater than or equal to 7,

160
0:10:57.000 --> 0:11:05.000
then I could have an alert for the same CVSS score and understand what deployments are associated with it.

161
0:11:05.000 --> 0:11:11.000
Then Strykerox API allows users to integrate with the image scanning tools, CI CD tools,

162
0:11:11.000 --> 0:11:15.000
container runtimes of their own choice, secret management, DevOps notification,

163
0:11:15.000 --> 0:11:20.000
to ease security flow end to end.

164
0:11:20.000 --> 0:11:23.000
You can also run it on any cloud or hybrid cloud,

165
0:11:23.000 --> 0:11:30.000
or if you want to choose on-prem, you can deploy it over there.

166
0:11:30.000 --> 0:11:33.000
So this is the bird-eye view architecture, I would say,

167
0:11:33.000 --> 0:11:37.000
where you would see a central in the blue box as a central hub,

168
0:11:37.000 --> 0:11:42.000
which gets exposed over load balancer for the clients to consume the Strykerox API.

169
0:11:42.000 --> 0:11:45.000
It is written in the REST API.

170
0:11:45.000 --> 0:11:48.000
And then we have sensor admission controller collector,

171
0:11:48.000 --> 0:11:52.000
which is logically group and called as a secured cluster, right?

172
0:11:52.000 --> 0:11:56.000
So you can, once you configure this set of components,

173
0:11:56.000 --> 0:11:59.000
you can call a Kubernetes cluster as a secured cluster.

174
0:11:59.000 --> 0:12:05.000
And then you can keep on adding as many Kubernetes clusters as you want into the central.

175
0:12:05.000 --> 0:12:10.000
The central also has scanner, which aggregates the vulnerability feeds

176
0:12:10.000 --> 0:12:13.000
that are fetched from the central.

177
0:12:13.000 --> 0:12:17.000
So central basically collect vulnerabilities feed from option sources

178
0:12:17.000 --> 0:12:20.000
as well as in the database.

179
0:12:20.000 --> 0:12:23.000
Then on each and every node, we would have collector agent,

180
0:12:23.000 --> 0:12:29.000
which will collect host level data for the container network and the runtime.

181
0:12:29.000 --> 0:12:34.000
So this is the UI where, let's say, if I have integrated 100,

182
0:12:34.000 --> 0:12:39.000
100 Kubernetes clusters, then how can I manage or understand

183
0:12:39.000 --> 0:12:40.000
how those are behaving?

184
0:12:40.000 --> 0:12:43.000
What are the healthy components and what are unhealthy?

185
0:12:43.000 --> 0:12:49.000
So we can have a quick look to see how systems are performing.

186
0:12:49.000 --> 0:12:52.000
So what problem set, when Strykerox going to solve?

187
0:12:52.000 --> 0:12:55.000
So these are four problem set statements,

188
0:12:55.000 --> 0:12:59.000
which I found very common between developers and security teams

189
0:12:59.000 --> 0:13:01.000
to understand whether my container contains,

190
0:13:01.000 --> 0:13:03.000
contain compromised infrastructure.

191
0:13:03.000 --> 0:13:05.000
Are there any known vulnerabilities?

192
0:13:05.000 --> 0:13:08.000
Are there any runtime and OS layers contained up to date?

193
0:13:08.000 --> 0:13:13.000
Is my Kubernetes cluster compliant with industry certified security benchmarks?

194
0:13:13.000 --> 0:13:17.000
So let's see how Strykerox solve these problems.

195
0:13:17.000 --> 0:13:23.000
So Strykerox scanner identifies the vulnerabilities in the base image

196
0:13:23.000 --> 0:13:25.000
package that are installed by the package managers,

197
0:13:25.000 --> 0:13:28.000
then programming language specific dependencies,

198
0:13:28.000 --> 0:13:30.000
programming runtime and frameworks.

199
0:13:30.000 --> 0:13:33.000
It supports package formats, which I have mentioned there.

200
0:13:33.000 --> 0:13:38.000
And I believe most of you work with the same package formats.

201
0:13:38.000 --> 0:13:42.000
And there are supported operating systems like Alpy and Amazon,

202
0:13:42.000 --> 0:13:45.000
CentOS, Red Hat and the President.

203
0:13:45.000 --> 0:13:49.000
So managing compliance is equally important for our organizations

204
0:13:49.000 --> 0:13:52.000
to the security standard.

205
0:13:52.000 --> 0:13:55.000
So it supports out of the box compliance standards like CS,

206
0:13:55.000 --> 0:14:00.000
benchmark for Kubernetes Docker, then HIPAA, NIST, PCI.

207
0:14:00.000 --> 0:14:03.000
So you can run scans through this profile.

208
0:14:03.000 --> 0:14:09.000
So Strykerox basically collects snapshot of your Kubernetes cluster.

209
0:14:09.000 --> 0:14:14.000
Then it aggregates the data and analyzes what checks are being passed

210
0:14:14.000 --> 0:14:16.000
and what checks are getting filled.

211
0:14:16.000 --> 0:14:20.000
It will help to evaluate your for the regulatory compliance.

212
0:14:20.000 --> 0:14:24.000
It will help to harden your Docker and underlying container runtime.

213
0:14:24.000 --> 0:14:31.000
So this is the UI where you can see passing percentage across your

214
0:14:31.000 --> 0:14:36.000
cluster, across namespaces, across the nodes, right?

215
0:14:36.000 --> 0:14:42.000
So you can have a better idea where the issue or what compliance

216
0:14:42.000 --> 0:14:43.000
checks are filling.

217
0:14:43.000 --> 0:14:46.000
Accordingly, you can navigate to that in the right section.

218
0:14:46.000 --> 0:14:51.000
Here you will see what controls are filling, what needs to be set.

219
0:14:51.000 --> 0:14:54.000
For example, here I have taken example of CNF files,

220
0:14:54.000 --> 0:14:58.000
which says that the file permission should be more restricted.

221
0:14:58.000 --> 0:15:03.000
You can accordingly take the actions and fix that control.

222
0:15:03.000 --> 0:15:05.000
So what is collector?

223
0:15:05.000 --> 0:15:11.000
Collector overall helps all the Strykerox ecosystem to maintain

224
0:15:11.000 --> 0:15:17.000
and manage the container runtime activities as well as host level processes information.

225
0:15:17.000 --> 0:15:21.000
So it's an agent that runs on every node under strict performance limitations

226
0:15:21.000 --> 0:15:25.000
and gather data via the kernel module or a BPF probes.

227
0:15:25.000 --> 0:15:30.000
It collects, it analyzes and monitor content activity on cluster nodes, right?

228
0:15:30.000 --> 0:15:34.000
It collects information about runtime and network activity and sends

229
0:15:34.000 --> 0:15:36.000
collected data to the sensor.

230
0:15:36.000 --> 0:15:43.000
Sensor will help center to display all the data over the UI.

231
0:15:43.000 --> 0:15:45.000
Okay, we will quickly see.

232
0:15:45.000 --> 0:15:51.000
This is a traditional way of how we used to see at kernel when we

233
0:15:51.000 --> 0:15:53.000
deployed the application, right?

234
0:15:53.000 --> 0:15:56.000
We have user space where user application runs.

235
0:15:56.000 --> 0:16:00.000
And for every resource that we need in user application,

236
0:16:00.000 --> 0:16:02.000
we need system calls.

237
0:16:02.000 --> 0:16:06.000
So when user requests any data, the kernel copies that information

238
0:16:06.000 --> 0:16:08.000
from kernel space to user space.

239
0:16:08.000 --> 0:16:14.000
But due to some limitations, it is not possible for user to access

240
0:16:14.000 --> 0:16:17.000
everything that is into the kernel space, right?

241
0:16:17.000 --> 0:16:22.000
And this was not a problem when we talk about a single Linux source,

242
0:16:22.000 --> 0:16:26.000
but the container adoption, we know that the number of processes

243
0:16:26.000 --> 0:16:29.000
that may run on a Linux source has increased,

244
0:16:29.000 --> 0:16:31.000
the density of containers has increased, right?

245
0:16:31.000 --> 0:16:35.000
So resource overhead managing container issues,

246
0:16:35.000 --> 0:16:38.000
container runtime issues has become a great challenge.

247
0:16:38.000 --> 0:16:42.000
So all these activities require kernel support that we know.

248
0:16:42.000 --> 0:16:44.000
So how do we overcome that?

249
0:16:44.000 --> 0:16:46.000
We can use EBPF probes.

250
0:16:46.000 --> 0:16:47.000
What is that?

251
0:16:47.000 --> 0:16:49.000
It is an extended bucket packet filter, right?

252
0:16:49.000 --> 0:16:51.000
It is not just a packet filter.

253
0:16:51.000 --> 0:16:52.000
It is more than that.

254
0:16:52.000 --> 0:16:56.000
It helps us in networking, pressing, profiling,

255
0:16:56.000 --> 0:16:59.000
observability and monitoring, and security.

256
0:16:59.000 --> 0:17:03.000
I will quickly go ahead because of time constraint.

257
0:17:03.000 --> 0:17:06.000
Then we have network policies.

258
0:17:06.000 --> 0:17:09.000
In Kubernetes, we know that by default network is,

259
0:17:09.000 --> 0:17:11.000
network policies are not there.

260
0:17:11.000 --> 0:17:14.000
We need to define our network policies by our own.

261
0:17:14.000 --> 0:17:16.000
But considering a production grid environment,

262
0:17:16.000 --> 0:17:20.000
it is really difficult to write each and every network policy,

263
0:17:20.000 --> 0:17:25.000
I mean, because sometimes we do not understand what source,

264
0:17:25.000 --> 0:17:28.000
from what source the traffic is coming.

265
0:17:28.000 --> 0:17:30.000
At large scale, it could be difficult, right?

266
0:17:30.000 --> 0:17:36.000
So it provides network graph, network segmentation to understand

267
0:17:36.000 --> 0:17:40.000
or to modify baselines so that we can define, okay,

268
0:17:40.000 --> 0:17:43.000
if traffic is coming from this source,

269
0:17:43.000 --> 0:17:46.000
then this should be blocked or network policy should be created

270
0:17:46.000 --> 0:17:51.000
according to this baseline.

271
0:17:51.000 --> 0:17:55.000
So this provides this.

272
0:17:55.000 --> 0:17:58.000
So, yeah, we cyclops provide a network simulator,

273
0:17:58.000 --> 0:18:01.000
a network policy simulator through which you can understand

274
0:18:01.000 --> 0:18:04.000
what are the active connection from where the connection is coming,

275
0:18:04.000 --> 0:18:09.000
whether it is allowed by the deployment or whether it is anonymous.

276
0:18:09.000 --> 0:18:12.000
Accordingly, you can define your baseline and restricted traffic.

277
0:18:12.000 --> 0:18:15.000
It will help us to create the network policies at the runtime.

278
0:18:15.000 --> 0:18:17.000
So we can just copy that network policy

279
0:18:17.000 --> 0:18:23.000
and configure it in our Kubernetes cluster.

280
0:18:23.000 --> 0:18:25.000
Then we have admission controller.

281
0:18:25.000 --> 0:18:28.000
So it basically helps control to enforce the security policies

282
0:18:28.000 --> 0:18:30.000
before Kubernetes creates workload,

283
0:18:30.000 --> 0:18:33.000
for example, deployment, demonstrates.

284
0:18:33.000 --> 0:18:37.000
It intercepts the API request when any program runs

285
0:18:37.000 --> 0:18:39.000
or application runs into the pod.

286
0:18:39.000 --> 0:18:43.000
So in StackRocks, we use admission controller with security policies

287
0:18:43.000 --> 0:18:48.000
so that any policy gets violated, then it will immediately prevent

288
0:18:48.000 --> 0:18:54.000
the deployment from getting into running straight.

289
0:18:54.000 --> 0:18:59.000
Okay, so I'll quickly show a demo where I have given an example

290
0:18:59.000 --> 0:19:05.000
of log forces for Shell CV and to understand

291
0:19:05.000 --> 0:19:08.000
how it can prevent the deployment.

292
0:19:08.000 --> 0:19:27.000
Just let me show it quickly.

293
0:19:27.000 --> 0:19:29.000
I hope screen is visible.

294
0:19:29.000 --> 0:19:39.000
Yeah, so this is the cluster dashboard

295
0:19:39.000 --> 0:19:41.000
where I can see images at the most risk,

296
0:19:41.000 --> 0:19:46.000
what are the policies, current policies violated.

297
0:19:46.000 --> 0:19:49.000
So StackRocks provides some default policies

298
0:19:49.000 --> 0:19:54.000
as per the best practices pertaining to the security posture.

299
0:19:54.000 --> 0:19:57.000
So considering the criticality of the log forces,

300
0:19:57.000 --> 0:20:01.000
we have included this policy as well.

301
0:20:01.000 --> 0:20:04.000
So you can configure policies into two modes,

302
0:20:04.000 --> 0:20:06.000
inform as well as enforce.

303
0:20:06.000 --> 0:20:08.000
So currently, if I look at this policy,

304
0:20:08.000 --> 0:20:11.000
it is into inform mode only.

305
0:20:11.000 --> 0:20:34.000
So I have edited it and make it enforce.

306
0:20:34.000 --> 0:20:40.000
Yeah, so it executes on build stage, deployment stage.

307
0:20:40.000 --> 0:20:46.000
I marked inform and enforce and enable it for the deployment phase.

308
0:20:46.000 --> 0:20:50.000
So once the policy created, it will show whether any existing

309
0:20:50.000 --> 0:20:54.000
deployments are violating this policy or not.

310
0:20:54.000 --> 0:20:57.000
Then for the demonstration purpose,

311
0:20:57.000 --> 0:21:00.000
I have run a vulnerable deployment which has this log

312
0:21:00.000 --> 0:21:06.000
for Shell CV80.

313
0:21:06.000 --> 0:21:14.000
So this container image has the vulnerable app.

314
0:21:14.000 --> 0:21:17.000
So in the parallel terminal, I have

315
0:21:17.000 --> 0:21:27.000
keep a watch to trace the events in the runtime.

316
0:21:27.000 --> 0:21:30.000
So as soon as I create this deployment,

317
0:21:30.000 --> 0:21:34.000
you will see that the ports are getting terminated because

318
0:21:34.000 --> 0:21:35.000
of the policy violation.

319
0:21:35.000 --> 0:21:38.000
So it won't allow the port to get into a running state

320
0:21:38.000 --> 0:21:43.000
because of policy violation.

321
0:21:43.000 --> 0:21:46.000
And in the events, you will see that stack

322
0:21:46.000 --> 0:21:48.000
document enforcement has been detected,

323
0:21:48.000 --> 0:21:58.000
and the deployment has been scaled to zero.

324
0:21:58.000 --> 0:22:02.000
OK, time is up.

325
0:22:02.000 --> 0:22:04.000
I have one more demo, quick demo, if you would like to see.

326
0:22:04.000 --> 0:22:07.000
Let me know.

327
0:22:07.000 --> 0:22:08.000
Quick demo, yeah.

328
0:22:08.000 --> 0:22:15.000
That would be interesting.

329
0:22:15.000 --> 0:22:19.000
So in this demo, I have explained how we can leverage the DevSecOps

330
0:22:19.000 --> 0:22:21.000
approach to shift the security.

331
0:22:21.000 --> 0:22:25.000
For that, I have used Tekton in the pipeline operator,

332
0:22:25.000 --> 0:22:27.000
which is deploying an open shift.

333
0:22:27.000 --> 0:22:30.000
So this operator is nothing but using Tekton framework

334
0:22:30.000 --> 0:22:31.000
under the hood.

335
0:22:31.000 --> 0:22:36.000
Let's see it quickly.

336
0:22:36.000 --> 0:22:38.000
So it provides a standard CI-CD pipeline definition

337
0:22:38.000 --> 0:22:40.000
in a declarative approach, right?

338
0:22:40.000 --> 0:22:43.000
So we can define the task as well as pipeline,

339
0:22:43.000 --> 0:22:47.000
which further than can be portable across all your Kubernetes

340
0:22:47.000 --> 0:22:49.000
infrastructure.

341
0:22:49.000 --> 0:22:53.000
So I have defined this three tasks where images,

342
0:22:53.000 --> 0:22:57.000
image will be checked and scanned.

343
0:22:57.000 --> 0:23:00.000
In the task, in the background, it is calling a StackRox API

344
0:23:00.000 --> 0:23:02.000
through rockctl.

345
0:23:02.000 --> 0:23:04.000
It's same as kubectl.

346
0:23:04.000 --> 0:23:09.000
It talks with the StackRox API and performs the scanning

347
0:23:09.000 --> 0:23:15.000
for the image.

348
0:23:15.000 --> 0:23:17.000
So these two tasks I have mentioned in the pipeline

349
0:23:17.000 --> 0:23:20.000
definition image check and image scan.

350
0:23:20.000 --> 0:23:23.000
And there is one more secret where I have provided StackRox

351
0:23:23.000 --> 0:23:29.000
API endpoint and the credential.

352
0:23:29.000 --> 0:23:32.000
Yeah.

353
0:23:32.000 --> 0:23:39.000
So we'll create a namespace called pipeline demo.

354
0:23:39.000 --> 0:23:43.000
Then I have created secret as well as the pipeline definition.

355
0:23:43.000 --> 0:23:49.000
Next, we will execute those tasks.

356
0:23:49.000 --> 0:23:54.000
We'll switch to development mode and see that pipeline

357
0:23:54.000 --> 0:23:55.000
has been defined, OK?

358
0:23:55.000 --> 0:23:59.000
So these two tasks are there.

359
0:23:59.000 --> 0:24:01.000
Pipeline run is not initiated yet.

360
0:24:01.000 --> 0:24:04.000
So we'll initiate the pipeline run.

361
0:24:04.000 --> 0:24:07.000
We'll pass the container image that we want to scan.

362
0:24:07.000 --> 0:24:15.000
For example, here I have provided MySQL 80.

363
0:24:15.000 --> 0:24:16.000
So pipeline has been created.

364
0:24:16.000 --> 0:24:21.000
You can check the logs, real-time logs, through tecton.

365
0:24:21.000 --> 0:24:26.000
It provides a client for tecton through which you can perform

366
0:24:26.000 --> 0:24:33.000
the operations.

367
0:24:33.000 --> 0:24:36.000
So it also gives you better visibility if in case your

368
0:24:36.000 --> 0:24:37.000
tasks are failing.

369
0:24:37.000 --> 0:24:40.000
For example, here my credentials were expired.

370
0:24:40.000 --> 0:24:42.000
So I had to refresh the credentials and then I ran

371
0:24:42.000 --> 0:24:49.000
the pipeline.

372
0:24:49.000 --> 0:24:54.000
Now we will see the pipeline gets into running state.

373
0:24:54.000 --> 0:24:56.000
The tasks has been passed.

374
0:24:56.000 --> 0:25:01.000
Now we will see all the CV that are associated with this

375
0:25:01.000 --> 0:25:03.000
particular container images.

376
0:25:03.000 --> 0:25:08.000
You can get each and every CV ID, each CVSS code, and you can

377
0:25:08.000 --> 0:25:13.000
accordingly share those security with the security admin.

378
0:25:13.000 --> 0:25:16.000
You can also check policy violation through image check

379
0:25:16.000 --> 0:25:22.000
task to understand what policies have been violated, what are

380
0:25:22.000 --> 0:25:26.000
their ratings, whether those are rated as low or moderate

381
0:25:26.000 --> 0:25:29.000
or risky.

382
0:25:29.000 --> 0:25:32.000
Yes.

383
0:25:32.000 --> 0:25:42.000
That is it.

384
0:25:42.000 --> 0:25:48.000
So I have put some resources for you to go ahead and get

385
0:25:48.000 --> 0:25:51.000
started with the community project.

386
0:25:51.000 --> 0:25:54.000
You can also hop into our Slack channel.

387
0:25:54.000 --> 0:25:58.000
And, yes, that is it from my side.

388
0:25:58.000 --> 0:26:09.000
So do we have some questions here?

389
0:26:09.000 --> 0:26:12.000
Thanks for the excellent presentation.

390
0:26:12.000 --> 0:26:15.000
I have one question regarding you mentioned a lot about the

391
0:26:15.000 --> 0:26:17.000
agent which is kind of scanning and detecting the

392
0:26:17.000 --> 0:26:18.000
vulnerabilities.

393
0:26:18.000 --> 0:26:21.000
You briefly touched upon the object central.

394
0:26:21.000 --> 0:26:26.000
I think if I understand correctly, you pushing that

395
0:26:26.000 --> 0:26:30.000
detection of vulnerabilities into the central, is that right?

396
0:26:30.000 --> 0:26:31.000
Yes.

397
0:26:31.000 --> 0:26:35.000
So central fetches the vulnerability feeds from the

398
0:26:35.000 --> 0:26:36.000
option sources.

399
0:26:36.000 --> 0:26:39.000
Or let's say you have a database.

400
0:26:39.000 --> 0:26:42.000
So every five minutes it will keep on checking what

401
0:26:42.000 --> 0:26:45.000
vulnerabilities are present in the option.

402
0:26:45.000 --> 0:26:48.000
So accordingly, once in download, then the collector or

403
0:26:48.000 --> 0:26:52.000
the sensor fetches those data into your respective

404
0:26:52.000 --> 0:26:53.000
Kubernetes cluster.

405
0:26:53.000 --> 0:26:57.000
So what if when the container is running, the pod is running

406
0:26:57.000 --> 0:27:03.000
and suddenly the agent checks the vulnerability database and

407
0:27:03.000 --> 0:27:07.000
detects possibly that the version running in the pod has

408
0:27:07.000 --> 0:27:09.000
having some critical vulnerability.

409
0:27:09.000 --> 0:27:12.000
What actions would it do, actually?

410
0:27:12.000 --> 0:27:16.000
It actually depends on us what actions we want the admission

411
0:27:16.000 --> 0:27:17.000
controller to perform.

412
0:27:17.000 --> 0:27:22.000
Either we can have it in formal so that we understand, okay,

413
0:27:22.000 --> 0:27:23.000
policy is violated.

414
0:27:23.000 --> 0:27:27.000
But whether that is really affecting my workload or the

415
0:27:27.000 --> 0:27:29.000
runtime, accordingly we can take actions.

416
0:27:29.000 --> 0:27:33.000
If we want strictly not to allow any deployment to run as

417
0:27:33.000 --> 0:27:36.000
soon as the policy is violated, we can put it into

418
0:27:36.000 --> 0:27:37.000
enforce mode.

419
0:27:37.000 --> 0:27:40.000
And we can decide at what stage we want to terminate that.

420
0:27:40.000 --> 0:27:43.000
At the build stage, deploy stage, or at the runtime.

421
0:27:43.000 --> 0:27:45.000
It's basically based on your policy.

422
0:27:45.000 --> 0:27:46.000
Yes, yes, yes.

423
0:27:46.000 --> 0:27:51.000
And the central is kind of accessible by is it like a

424
0:27:51.000 --> 0:27:55.000
closed environment or it is open where anywhere anyone can

425
0:27:55.000 --> 0:27:56.000
access that.

426
0:27:56.000 --> 0:28:01.000
It can be configured in online mode as well as air gap

427
0:28:01.000 --> 0:28:02.000
environment.

428
0:28:02.000 --> 0:28:06.000
So again, it depends on your organizational requirements,

429
0:28:06.000 --> 0:28:08.000
how you want to install it.

430
0:28:08.000 --> 0:28:11.000
In terms of offline mode, you can always download those

431
0:28:11.000 --> 0:28:16.000
vulnerability fields or kernel probes modules in your secure

432
0:28:16.000 --> 0:28:20.000
host and then you can inject those to center offline.

433
0:28:20.000 --> 0:28:22.000
That option is also there.

434
0:28:22.000 --> 0:28:23.000
Thank you.

435
0:28:23.000 --> 0:28:26.000
Any other questions?

436
0:28:26.000 --> 0:28:27.000
Yes.

437
0:28:27.000 --> 0:28:31.000
I just have a question.

438
0:28:31.000 --> 0:28:35.000
Can you use Stack Rocks as a honey pot?

439
0:28:35.000 --> 0:28:41.000
I mean, can you just let the intruder or the security thing

440
0:28:41.000 --> 0:28:46.000
to go to actually get a like a description of all the things

441
0:28:46.000 --> 0:28:51.000
it's doing, the attacker instead.

442
0:28:51.000 --> 0:28:55.000
So let's say you not just cut it because you just right now

443
0:28:55.000 --> 0:28:59.000
basically applying a policy, you're cutting the thing.

444
0:28:59.000 --> 0:29:03.000
But can you let it just isolate the container and let it run

445
0:29:03.000 --> 0:29:07.000
just to have four and six out of it, see how things are

446
0:29:07.000 --> 0:29:09.000
behaving?

447
0:29:09.000 --> 0:29:13.000
Yeah, other than policies, we can always do the risk analysis.

448
0:29:13.000 --> 0:29:18.000
Sometimes it happens that vulnerability that may found

449
0:29:18.000 --> 0:29:21.000
as a critical, but in terms of my application, I might not

450
0:29:21.000 --> 0:29:25.000
have that vulnerable code at the runtime stage, right?

451
0:29:25.000 --> 0:29:28.000
So I can always mark that vulnerability as a false

452
0:29:28.000 --> 0:29:34.000
positive or I can defer that vulnerability.

453
0:29:34.000 --> 0:29:36.000
Does that answer your question or you have something else?

454
0:29:36.000 --> 0:29:38.000
Yeah, I mean, as long as you can get, I mean, sometimes

455
0:29:38.000 --> 0:29:42.000
the scenario is that you have the port actually in production

456
0:29:42.000 --> 0:29:46.000
and something happens to it and you want to actually isolate

457
0:29:46.000 --> 0:29:48.000
it, but you still want to have four and six.

458
0:29:48.000 --> 0:29:50.000
You don't want to just cut it.

459
0:29:50.000 --> 0:29:52.000
You just want to understand the attack.

460
0:29:52.000 --> 0:29:54.000
That is my...

461
0:29:54.000 --> 0:29:57.000
Yeah, so in terms of isolation, it gives us a rich context

462
0:29:57.000 --> 0:30:01.000
from the UI at what layer the vulnerability is present.

463
0:30:01.000 --> 0:30:04.000
For example, we can inspect each and every docker layer.

464
0:30:04.000 --> 0:30:09.000
It allows us to see at what component the vulnerability exists.

465
0:30:09.000 --> 0:30:13.000
So you can always modify the image.

466
0:30:13.000 --> 0:30:19.000
You can build it again and patch the changes.

467
0:30:19.000 --> 0:30:20.000
Thank you for the question.

468
0:30:20.000 --> 0:30:21.000
Thank you for the talk.

469
0:30:21.000 --> 0:30:23.000
I think we are out of the time.

470
0:30:23.000 --> 0:30:52.000
Thank you.


WEBVTT

00:00.000 --> 00:12.480
Thank you.

00:12.480 --> 00:13.800
So my name is Joost van Dijk.

00:13.800 --> 00:17.280
Disclaimer, I work for a commercial company called Yubico.

00:17.280 --> 00:19.040
So maybe you've heard of Yubikis.

00:19.040 --> 00:21.040
Yubico produces those Yubikis.

00:21.040 --> 00:23.400
But I'm not going to talk about Yubikis.

00:23.400 --> 00:26.000
I'm going to talk about a technology called Fido.

00:26.000 --> 00:31.200
And many of you will have seen the previous presentation that was about an application

00:31.200 --> 00:32.200
of Fido.

00:32.200 --> 00:37.760
So the goal of this presentation is to move on to the next slide somehow.

00:37.760 --> 00:38.760
Yep.

00:38.760 --> 00:41.080
To explain what Fido is.

00:41.080 --> 00:45.640
So I give a quick introduction to Fido and then what you can use it for.

00:45.640 --> 00:50.480
And many people will already have seen it for, for example, for authentication.

00:50.480 --> 00:55.360
But I'm going to talk about things that are, so for authentication on the web primarily.

00:55.360 --> 01:01.160
I'm going to talk about things that are, that Fido can be used for that is not involving

01:01.160 --> 01:02.400
a web browser.

01:02.400 --> 01:04.560
And these things are less, less are well known.

01:04.560 --> 01:08.320
So I think it's interesting to have a look at the applications.

01:08.320 --> 01:14.240
And I'll give examples of open source software that you can use today that are actually using

01:14.240 --> 01:19.280
Fido to do, to do things that are, that don't involve a browser.

01:19.280 --> 01:22.380
So let me first explain about Fido.

01:22.380 --> 01:27.300
So Fido is actually a set of specifications.

01:27.300 --> 01:29.060
One is by the World Wide Web Consortium.

01:29.060 --> 01:32.320
That's about using it in a web browser primarily.

01:32.320 --> 01:34.840
And the other one is using security keys.

01:34.840 --> 01:41.480
So the tokens like this that are typically in your key ring, this is called a roaming

01:41.480 --> 01:43.320
authenticator in Fido.

01:43.320 --> 01:49.080
And the idea is that you protect your private keys on a piece of hardware that has protection

01:49.080 --> 01:53.360
against extracting key material.

01:53.360 --> 01:58.360
So this protocol is called CTAP.

01:58.360 --> 01:59.880
And that's by a different organization.

01:59.880 --> 02:01.760
It's called Fido Alliance.

02:01.760 --> 02:07.000
And so this is specifically talking to authenticators like this one.

02:07.000 --> 02:08.240
So how does that work?

02:08.240 --> 02:12.840
So I'm simplifying things because there's a lot of details that I don't want to get

02:12.840 --> 02:15.700
into because that takes too much time.

02:15.700 --> 02:24.240
So if we have some relying party, so let's first look at the web authentications part.

02:24.240 --> 02:26.400
So using a web browser typically.

02:26.400 --> 02:29.520
So a relying party that will be typically a web server.

02:29.520 --> 02:34.640
And authentication works by, yeah, like many authentication protocols, you use a challenge

02:34.640 --> 02:42.160
response mechanism where you use asymmetric cryptography to sign a challenge.

02:42.160 --> 02:46.040
And then you have the verifier so the relying party can check the signature.

02:46.040 --> 02:49.120
And if it works out, then you're authenticated.

02:49.120 --> 02:57.080
So the idea is that these two protocols, the web of N is basically used in a web setting.

02:57.080 --> 03:00.680
So for example, the web server can send a challenge to a browser.

03:00.680 --> 03:08.800
And then the browser uses the web of N API, which is simply a JavaScript API to initiate

03:08.800 --> 03:13.640
the registration of a public key or authentication using that public key.

03:13.640 --> 03:16.960
So that's web of N. That's in the web part.

03:16.960 --> 03:24.720
And then on the back end, your web browser will communicate with a security key, so this

03:24.720 --> 03:31.040
roaming authenticator, just relaying that challenge, asking the key to sign it, and

03:31.040 --> 03:35.780
then the response is passed on to the relying party and will verify it.

03:35.780 --> 03:41.120
So what's all the fuss with the pass keys and FIDO and anti-phishing?

03:41.120 --> 03:43.200
Well that's the merit of FIDO2.

03:43.200 --> 03:44.880
It has phishing protection.

03:44.880 --> 03:49.440
And that is because in this challenge, the web browser can help you secure things by

03:49.440 --> 03:52.440
injecting the origin of the site that you are authenticating with.

03:52.440 --> 03:54.560
So this is included in the signature.

03:54.560 --> 03:58.800
So if you end up at the phishing site, the signature won't match because it will have

03:58.800 --> 04:03.000
a different identifier for the web server.

04:03.000 --> 04:09.600
So this is why FIDO is phishing, protecting you against phishing.

04:09.600 --> 04:12.720
But actually I'm not going to talk about this use case.

04:12.720 --> 04:16.640
I'm going to talk about the right part of this image where we use CTAP to communicate

04:16.640 --> 04:18.860
with an authenticator.

04:18.860 --> 04:22.720
So these are all kinds of authenticators.

04:22.720 --> 04:29.160
I work for a company that produces these authenticators, but it's an open standard, so anyone can build

04:29.160 --> 04:31.540
a security key.

04:31.540 --> 04:35.200
So I'm using security key and roaming authenticator interchangeably.

04:35.200 --> 04:39.120
But these are all security keys by different vendors.

04:39.120 --> 04:41.360
So of course my employer is there.

04:41.360 --> 04:48.240
But there's also Fayshaun, for example, Google, NitroKey, SoloKeys.

04:48.240 --> 04:51.520
And that's interesting because that's actually also open source hardware.

04:51.520 --> 04:53.240
So anyone can build a solo key.

04:53.240 --> 04:55.920
The firmware is open source, everything.

04:55.920 --> 05:00.840
NitroKey actually uses the same software base, firmware base.

05:00.840 --> 05:07.240
So these are all anything I talk about in this talk will work with any of these security

05:07.240 --> 05:08.920
keys.

05:08.920 --> 05:10.280
So how does this protocol work?

05:10.280 --> 05:12.560
So I'm focusing on CTAP, the backend.

05:12.560 --> 05:15.840
So talking to an authenticator.

05:15.840 --> 05:19.720
Well the idea is that first you have to register.

05:19.720 --> 05:26.840
So registration is just to register your public key with this verifier, this relying party,

05:26.840 --> 05:28.360
whoever that is.

05:28.360 --> 05:31.560
And then later you can use that public key for authentication.

05:31.560 --> 05:34.760
So there's two steps, registration, authentication.

05:34.760 --> 05:38.760
And so in the registration steps, so I'm not going to talk about all the details, but you

05:38.760 --> 05:47.920
just register your public key with a relying party.

05:47.920 --> 05:51.200
And this is including something called the relying party ID.

05:51.200 --> 05:57.240
So in web of N this is the identifier of the web server.

05:57.240 --> 06:00.160
But in other applications it can be anything.

06:00.160 --> 06:04.320
But the idea is that it is included in any signature that you generate.

06:04.320 --> 06:09.760
And so you fix this relying party ID when you register.

06:09.760 --> 06:13.840
And later with authentication this relying party ID is included in the signature so you

06:13.840 --> 06:18.680
can as a relying party verify that it is used for your application.

06:18.680 --> 06:22.920
So you cannot use the same public key for some other application with a different relying

06:22.920 --> 06:25.240
party ID.

06:25.240 --> 06:28.920
So I'm not going into too much detail.

06:28.920 --> 06:35.500
Now you might think, well, I can do this stuff with PGP, I can do it with smart cards.

06:35.500 --> 06:43.040
So what is different about security keys if you're not using it in a web browser?

06:43.040 --> 06:48.920
Well actually many of the things that I'm talking about will also work with PGP or other

06:48.920 --> 06:49.920
technologies.

06:49.920 --> 06:53.880
Although there are some specific features that are not always included.

06:53.880 --> 06:56.040
And one of them is attestation.

06:56.040 --> 07:02.440
So attestation means that you can prove that some signature was generated with a security

07:02.440 --> 07:04.240
key.

07:04.240 --> 07:10.400
So of course if you know that the public key is generated on a security key then obviously

07:10.400 --> 07:11.400
that is the case.

07:11.400 --> 07:17.280
But if you're dealing with someone that claims to have a security key but you're not sure,

07:17.280 --> 07:20.120
you can actually verify it by this process called attestation.

07:20.120 --> 07:28.480
So you can prove that someone uses, let's say, a Google Titan key to generate a signature.

07:28.480 --> 07:30.900
So this is what's called attestation.

07:30.900 --> 07:36.320
And there's a service hosted by the FIDO Alliance, or the organization that actually produces

07:36.320 --> 07:39.640
those specifications.

07:39.640 --> 07:40.880
And they host metadata.

07:40.880 --> 07:44.840
So if you have a security key it will have a unique identifier.

07:44.840 --> 07:50.960
So not unique for that particular YubiKey but unique for the Maker model.

07:50.960 --> 08:00.320
So any, let's say, any Titan key or any Fayshaun key or any YubiKey that is of a particular

08:00.320 --> 08:03.240
Maker model will have the same identifier.

08:03.240 --> 08:08.680
And in the specs it says that at least 100,000 keys need to use that same identifier if they

08:08.680 --> 08:10.360
are the same Maker model.

08:10.360 --> 08:16.080
So it can be sure that, let's say, that the signature is generated by a Titan key.

08:16.080 --> 08:17.080
And that is also interesting.

08:17.080 --> 08:25.520
So attestation together with metadata, they really add something to this process.

08:25.520 --> 08:28.360
So here's an example of the metadata.

08:28.360 --> 08:31.000
So someone built a nice web view of the metadata.

08:31.000 --> 08:36.640
So you can look up things like, of course, who's the vendor of this YubiKey or this security

08:36.640 --> 08:37.640
key.

08:37.640 --> 08:41.160
And also is it using protected hardware?

08:41.160 --> 08:45.120
And is it certified to a certain security web?

08:45.120 --> 08:50.400
So all these things you can actually use in a, actually, yeah.

08:50.400 --> 08:52.160
So I'm not going to do any demos.

08:52.160 --> 08:55.480
So I include all my demo slides for you to try yourself.

08:55.480 --> 08:56.600
So we don't have time here.

08:56.600 --> 09:00.040
But I'll just leave them in the slides so you can actually try.

09:00.040 --> 09:03.880
So this is a way to extract metadata.

09:03.880 --> 09:05.240
So it's a bit technical.

09:05.240 --> 09:09.520
But if you want to try it, please do.

09:09.520 --> 09:13.800
Then about open source software.

09:13.800 --> 09:18.400
So Yubico publishes a FIDO library.

09:18.400 --> 09:21.600
And it's actually used by a lot of open source projects.

09:21.600 --> 09:25.800
So this is open source, although it's produced by Yubico.

09:25.800 --> 09:29.800
And yeah, if you look at, for example, GitHub and you look at all the projects that use

09:29.800 --> 09:34.280
this library, then there's lots of interesting projects that do it.

09:34.280 --> 09:40.440
And that means that you can use a security key, any security key, by any vendor using

09:40.440 --> 09:42.480
that software.

09:42.480 --> 09:46.720
And yeah, what I'll do in this, in the rest of the talk, is give you some examples.

09:46.720 --> 09:52.960
Because it's interesting that although FIDO was primarily intended to do authentication,

09:52.960 --> 09:53.960
you can actually do other things.

09:53.960 --> 09:54.960
You can do encryption.

09:54.960 --> 09:55.960
You can do signing.

09:55.960 --> 09:58.400
And you can actually store things on the Yubico.

09:58.400 --> 10:02.900
So I'll give an example of all these features.

10:02.900 --> 10:07.940
So let's start with a very simple example, like a pluggable authentication module.

10:07.940 --> 10:13.720
So that's another open source library that is included in many Linux distributions.

10:13.720 --> 10:33.560
The idea is that you can...

10:33.560 --> 10:55.040
Oh, yay!

10:55.040 --> 10:57.100
you

11:25.040 --> 11:27.100
you

11:55.040 --> 11:57.100
you

12:25.040 --> 12:27.100
you

12:55.040 --> 12:57.100
you

13:25.040 --> 13:27.100
you

13:55.040 --> 13:57.100
you

14:25.040 --> 14:27.100
you

14:55.040 --> 14:57.100
you

15:25.040 --> 15:27.100
you

15:55.040 --> 15:57.100
you

15:57.100 --> 15:59.160
you

15:59.160 --> 16:01.240
you

16:01.240 --> 16:03.320
you

16:03.320 --> 16:05.380
you

16:05.380 --> 16:07.440
you

16:07.440 --> 16:09.520
you

16:09.520 --> 16:11.600
you

16:11.600 --> 16:13.680
you

16:13.680 --> 16:15.760
you

16:15.760 --> 16:17.760
you

16:17.760 --> 16:19.760
you

16:19.760 --> 16:21.760
open source software

16:21.760 --> 16:23.760
you can try it out yourself

16:23.760 --> 16:25.760
but let's give a practical example

16:25.760 --> 16:28.400
let's say that you want to encrypt your hard disk

16:28.400 --> 16:30.560
you're on a Linux system you're using the lux

16:30.560 --> 16:32.760
and typically this is done using a password

16:32.760 --> 16:37.760
instead of using a password you can also use a security key

16:37.760 --> 16:39.260
a FIDO key

16:39.260 --> 16:44.760
that instead of deriving some encryption key from your password

16:44.760 --> 16:50.760
it will derive the encryption key from this extra key that is generated on your security key

16:50.760 --> 16:57.760
so this this means that if you want to decrypt your hard disk you just need to insert your security key

16:57.760 --> 17:04.760
so this is what you have factor to extra to get some extra confidence that only you can decrypt that hard disk

17:04.760 --> 17:08.760
so worth the look now

17:08.760 --> 17:12.760
then there's another extension called large blocks

17:12.760 --> 17:16.760
and this is for storing things on your security key

17:16.760 --> 17:22.760
and so it doesn't have a lot of space but this is typically used for storing certificates

17:22.760 --> 17:27.760
so let's say you're using SSH and you use SSH with SSH certificates

17:27.760 --> 17:30.760
these are small files

17:30.760 --> 17:33.760
and it's it's feasible to store them on your security key

17:33.760 --> 17:38.760
so this is an extension that is not very often implemented at the moment

17:38.760 --> 17:41.760
so the

17:41.760 --> 17:45.760
I think there are a couple of vendors that actually implement this

17:45.760 --> 17:50.760
but it means that if you if you move to a different system and you want to log in there

17:50.760 --> 17:55.760
you can actually take your security key and extract both the public key and the certificates

17:55.760 --> 17:59.760
of course the privacy stays on your key and your security key

17:59.760 --> 18:02.760
and then log into a remote server from there

18:02.760 --> 18:07.760
because so everything is contained in the same security key

18:07.760 --> 18:11.760
here's an example how you do this with the tools

18:11.760 --> 18:15.760
do it yourself if you have the key that supports it

18:15.760 --> 18:19.760
finally last example about this attestation

18:19.760 --> 18:23.760
so if you generate an SSH key that is backed by a security key

18:23.760 --> 18:27.760
you can actually ask the security key to provide attestation

18:27.760 --> 18:33.760
so there's this extra parameter in SSH keygen that will extract the attestation data

18:33.760 --> 18:38.760
it's called that you can look up in the FIDO metadata service

18:38.760 --> 18:43.760
and this way you can prove that the signature was generated

18:43.760 --> 18:48.760
by some security key and you can look up exactly which one

18:48.760 --> 18:53.760
and you're certain that this is done with secure hardware

18:53.760 --> 18:56.760
okay

18:56.760 --> 18:59.760
you can try it out

18:59.760 --> 19:02.760
so getting to a conclusion

19:02.760 --> 19:06.760
so I'm not saying you have to stop using PGP or anything

19:06.760 --> 19:11.760
this is an alternative to doing things with secure hardware

19:11.760 --> 19:17.760
and the idea is now that since all the big vendors like Apple and Google and Microsoft

19:17.760 --> 19:24.760
they've jumped on the FIDO bandwagon so we can see a lot more support for FIDO in the future

19:24.760 --> 19:28.760
that means that a lot more people will own a FIDO security key

19:28.760 --> 19:33.760
for example, already mentioned this morning is if you have an Apple iOS device

19:33.760 --> 19:38.760
you can protect your Apple ID using a FIDO security key

19:38.760 --> 19:43.760
so it's built into iOS 16.3 I think

19:43.760 --> 19:48.760
so this means that it is a viable alternative

19:48.760 --> 19:54.760
that's actually also a lot cheaper than many of the other hardware keys that you can buy

19:54.760 --> 19:56.760
like a smart card

19:56.760 --> 20:00.760
so I think for 20 or 30 bucks you can buy a FIDO security key

20:00.760 --> 20:06.760
whereas smart cards are usually, especially if you consider all the middleware

20:06.760 --> 20:10.760
and everything else that you need to get it working

20:10.760 --> 20:14.760
that can be a lot more expensive

20:14.760 --> 20:18.760
so just a list of our resources if you want to look up things

20:18.760 --> 20:21.760
of course you can also contact me, I'll be here all day

20:21.760 --> 20:28.760
and happy to take questions if there are any

20:28.760 --> 20:32.760
Hi, I have a question about the attestation process

20:32.760 --> 20:36.760
and open implementations of FIDO2

20:36.760 --> 20:41.760
if you have an open implementation is it possible to get that certified with FIDO2 Alliance

20:41.760 --> 20:46.760
my understanding is that in order to enable people to compile their own binaries

20:46.760 --> 20:49.760
to put on their own open keys, is that possible or is it not?

20:49.760 --> 20:52.760
Yes, so as a relying party

20:52.760 --> 21:00.760
so there's a certification process that you can use to test if you are compatible with the FIDO standards

21:00.760 --> 21:06.760
and so there's different certification programs

21:06.760 --> 21:10.760
the most heavy ones are for the actual security keys

21:10.760 --> 21:15.760
so there you have to actually do a lot of work to get it certified

21:15.760 --> 21:19.760
but there's also a self certification toolkit I think

21:19.760 --> 21:23.760
that you can use to see if you are compatible with FIDO standards

21:23.760 --> 21:27.760
so there's a lot of tests you can run against your own relying party software

21:27.760 --> 21:29.760
you can use them at least, right?

21:29.760 --> 21:31.760
yeah, yeah

21:32.760 --> 21:34.760
any other questions?

21:34.760 --> 21:39.760
what is publicly known about hardware tokens failure rates

21:39.760 --> 21:42.760
at least for popular models

21:42.760 --> 21:48.760
and how many identical devices would you enroll for the most important things personally?

21:48.760 --> 21:51.760
the question is I think twofold

21:51.760 --> 21:54.760
first is about failure rates

21:54.760 --> 22:00.760
actually I don't know about failure rates but of course there's different ways to do user verification

22:00.760 --> 22:05.760
and I skipped over it a bit but to use a security key you need to either touch it

22:05.760 --> 22:09.760
and sometimes also prove that you are using it

22:09.760 --> 22:13.760
and this is done typically with a pin or with a biometric

22:13.760 --> 22:18.760
so I've never seen a security key fail

22:18.760 --> 22:23.760
except when it's using biometrics because of course that is a less

22:23.760 --> 22:29.760
so every biometric has a false acceptance rate and a false rejection rate

22:29.760 --> 22:37.760
and yeah I don't know numbers but it differs with different vendors

22:37.760 --> 22:42.760
so I think Apple doesn't say anything about their false acceptance rate for example

22:42.760 --> 22:47.760
so I guess you just have to trust them and that is with many vendors

22:47.760 --> 22:51.760
I missed the second part of your question

22:51.760 --> 22:56.760
do you have any identical devices to enroll at once or use of a line?

22:56.760 --> 23:00.760
oh yeah, so already mentioned if you lose your security key you have a problem

23:00.760 --> 23:05.760
so you want to have multiple public keys registered

23:05.760 --> 23:08.760
and how many that depends on the relying party

23:08.760 --> 23:14.760
so some relying parties initially only allowed you to register one

23:14.760 --> 23:19.760
so that's pretty useless because if you lose that one then you're out of business

23:19.760 --> 23:26.760
so usually there are several and I think for example on an Apple iOS device

23:26.760 --> 23:30.760
you can now register six but that's really depending on the relying party

23:30.760 --> 23:37.760
so some have an infinite number so you can just register as many as you like

23:37.760 --> 23:40.760
but that's really depending on the relying party

23:40.760 --> 23:43.760
okay we've got time for our last question, there is an icy hand here

23:48.760 --> 23:55.760
so I guess if you have now a single point of failure with a USB socket

23:55.760 --> 24:04.760
especially if you are travelling so are there any plans to have implementation

24:04.760 --> 24:09.760
for the Bluetooth FIDO standards

24:09.760 --> 24:19.760
so we can still work if USB is broken maybe at the phone or whatever

24:19.760 --> 24:23.760
keep it a little quiet because I have trouble hearing the question

24:23.760 --> 24:35.760
are there any plans for the Bluetooth support in the libraries

24:35.760 --> 24:46.760
because especially if I'm travelling I often have problems with USB sockets

24:46.760 --> 24:53.760
so I would have a single point of failure there

24:53.760 --> 24:58.760
so you're saying if you have problems with your USB sockets then you cannot use a key

24:58.760 --> 25:00.760
so is there an alternative?

25:00.760 --> 25:03.760
and I would prefer to have some Bluetooth fallback then

25:03.760 --> 25:09.760
and the FIDO standard also specifies FIDO over Bluetooth

25:09.760 --> 25:14.760
but I don't see it's only implemented on Windows

25:14.760 --> 25:20.760
and Android but not on the Linux side please

25:20.760 --> 25:24.760
sorry, Bluetooth, yeah

25:24.760 --> 25:29.760
so Bluetooth support is not in this libfido 2, it only has USB and NFC

25:29.760 --> 25:34.760
no Bluetooth but there may be an addition in the next version of CTAP

25:34.760 --> 25:39.760
there will be a way to, and maybe you've seen it in Google Chrome

25:39.760 --> 25:42.760
you can generate a QR code so that you can use your phone

25:42.760 --> 25:45.760
so if you have to introduce your phone as an authenticator

25:45.760 --> 25:50.760
you can do it over Bluetooth low energy but the Bluetooth channel is only used for proximity

25:50.760 --> 25:53.760
it's not used to actually transfer anything

25:53.760 --> 25:59.760
for example if you register a key, your public key is not submitted over Bluetooth

25:59.760 --> 26:02.760
but that will be in the next version of CTAP

26:02.760 --> 26:14.760
thank you for the talk, we are out of the time, so applause

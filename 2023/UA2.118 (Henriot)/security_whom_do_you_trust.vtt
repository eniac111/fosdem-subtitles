WEBVTT

00:00.000 --> 00:09.140
So, next presenter, who is Theo?

00:09.140 --> 00:11.840
Theo, yes.

00:11.840 --> 00:15.440
So, talking about crypto pads.

00:15.440 --> 00:16.440
Yes.

00:16.440 --> 00:17.440
The floor is yours.

00:17.440 --> 00:18.440
Thank you.

00:18.440 --> 00:20.720
Yeah, whom do you trust?

00:20.720 --> 00:26.880
I think this question is really a serious question, especially for privacy and collaboration

00:26.880 --> 00:30.000
in today's internet.

00:30.000 --> 00:38.720
And well, yeah, let's directly start with this question or with what collaboration is.

00:38.720 --> 00:44.520
And collaborative editing is that multiple people work on the same document at the same

00:44.520 --> 00:51.520
time and they want that their changes are transmitted in near real time.

00:51.520 --> 00:57.180
So here in this example, you see that one person writes there, the update is propagated

00:57.180 --> 01:03.640
to the server and the server further forwards the message to all other users.

01:03.640 --> 01:10.040
Here you see that in this generic example that the server can see all messages.

01:10.040 --> 01:16.400
The server has a local copy of the document and updates as soon as it gets a message from

01:16.400 --> 01:19.120
a user.

01:19.120 --> 01:25.640
And already here we should say, we're like, okay, so whom do we need to trust?

01:25.640 --> 01:34.200
We obviously need to trust the server in this example because the server can see the documents.

01:34.200 --> 01:39.560
So this leads me to the second part, to the privacy that we want.

01:39.560 --> 01:46.160
And here I give you some informal definition and we say that no untrusted entity can infer

01:46.160 --> 01:52.480
personal information, document content, or who the collaborators are.

01:52.480 --> 01:58.680
So for an untrusted party, the document should look like this, just like snippets.

01:58.680 --> 02:03.320
And this untrusted party should not infer any information.

02:03.320 --> 02:09.080
Here the key point is that it's an untrusted entity because this does not hold for everyone.

02:09.080 --> 02:14.880
For example, the collaborators, they should be able to read the document.

02:14.880 --> 02:19.000
So the question is whom we trust.

02:19.000 --> 02:26.440
And I'll start with the solution that's probably the most used today.

02:26.440 --> 02:30.080
And yeah, why not trust Google and co?

02:30.080 --> 02:32.000
And there are maybe many reasons.

02:32.000 --> 02:37.320
I just want to give you one example, and it's the case of Disha Ravi.

02:37.320 --> 02:44.240
Here Naomi Klein, a famous environmental activist writes that India targets climate activists

02:44.240 --> 02:46.640
with the help of big tech.

02:46.640 --> 02:53.000
Tech giants like Google and Facebook appear to be abating and abating a vicious government

02:53.000 --> 02:56.200
campaign against Indian climate activists.

02:56.200 --> 03:06.360
So what happened here, there was a, can not go too far to the side, was climate activist

03:06.360 --> 03:14.080
Disha Ravi, who founded the Indian, was co-founder of the Indian chapter of Fridays for Future.

03:14.080 --> 03:21.200
And they worked on my Google Docs where they discussed how to help Indian farmer protests.

03:21.200 --> 03:27.200
And there was stuff like use this tweet or you can write a letter to your government.

03:27.200 --> 03:32.120
This document was leaked publicly on Twitter, I think.

03:32.120 --> 03:40.040
And then the Indian government thought of this is a conspiratious theory and wanted

03:40.040 --> 03:44.880
to track down who actually wrote this document.

03:44.880 --> 03:51.720
So they asked Google, and Google helped them and said, this and this and this person.

03:51.720 --> 03:56.440
And then Disha Ravi was arrested for a few days.

03:56.440 --> 04:05.680
She was later on, she was against Fried, and there was no sentence against her in the end.

04:05.680 --> 04:13.280
And nevertheless, this shows that we cannot really trust Google to host sensitive documents.

04:13.280 --> 04:18.560
So what can we do against or what is an alternative solution?

04:18.560 --> 04:24.360
And I think one of the most obvious answers, especially at a conference like here, is to

04:24.360 --> 04:27.620
say that we need to control the software.

04:27.620 --> 04:32.960
We need to have the server and the client's open source, because if this is the case,

04:32.960 --> 04:40.960
then we can host the software on our own instance, on our own server, and we can decide whom

04:40.960 --> 04:45.240
we want to give the data.

04:45.240 --> 04:46.560
And yeah.

04:46.560 --> 04:49.960
So this would be a first approach.

04:49.960 --> 04:54.360
So we could say, yeah, it's phenomenal software, we are safe.

04:54.360 --> 04:59.440
And this is exactly a quotation here from Chitzi Meat.

04:59.440 --> 05:05.240
And they say that the possibility to run your own instance completely removes the need to

05:05.240 --> 05:12.320
trust the third-party provider and therefore eliminates the need for end-to-end encryption.

05:12.320 --> 05:15.680
So they say exactly this, you can run it your own.

05:15.680 --> 05:18.560
You don't need any other precautiousness.

05:18.560 --> 05:22.880
No, this is fine, because it's open source.

05:22.880 --> 05:27.880
Chitzi Meat is a video conferencing platform you may be familiar with.

05:27.880 --> 05:32.200
So this is a bit different, I'll come to it later.

05:32.200 --> 05:38.600
And also interesting is that they removed the statement from their website only a bit

05:38.600 --> 05:42.100
after I started to prepare my talk.

05:42.100 --> 05:45.680
So this is from December 2022.

05:45.680 --> 05:48.640
But well, are we really safe?

05:48.640 --> 05:52.640
And to answer these questions, there are some more questions.

05:52.640 --> 05:55.800
Can really everybody run their own instance?

05:55.800 --> 06:01.560
I mean, yes, probably most of you have the technical capabilities.

06:01.560 --> 06:04.440
But do other people have this capability?

06:04.440 --> 06:06.560
Do they have the infrastructure?

06:06.560 --> 06:08.720
Do they have the money to run this?

06:08.720 --> 06:11.120
No, probably not.

06:11.120 --> 06:16.480
And the second question is, do you really want to trust a system administrator to see

06:16.480 --> 06:18.240
all your documents?

06:18.240 --> 06:23.600
So imagine you're in a company and you're working in a collaborative system and you

06:23.600 --> 06:26.920
have the salary sheets online.

06:26.920 --> 06:29.560
You want the system administrator to read that?

06:29.560 --> 06:31.720
No, probably not.

06:31.720 --> 06:37.840
Even if you trust them in the first place.

06:37.840 --> 06:43.240
And this is where the difference is to video conferencing is that documents are not ephemeral.

06:43.240 --> 06:48.400
So a video stream you can safely delete after the conference has ended.

06:48.400 --> 06:53.880
But a document must be stored in the server because you want to access it later.

06:53.880 --> 07:01.040
And this means you do not only need to protect your documents currently, but also in the

07:01.040 --> 07:02.360
long term.

07:02.360 --> 07:08.360
So that if the server is under attack or an attacker gets access to it, they should not

07:08.360 --> 07:10.960
have access to the documents.

07:10.960 --> 07:19.000
Okay, so if you see this, then you probably think we need end-to-end encryption.

07:19.000 --> 07:25.600
And end-to-end encryption is in principle that you have one party, let's say Alice,

07:25.600 --> 07:28.240
and Alice encrypts a document.

07:28.240 --> 07:34.360
They send it to Bob and Bob decrypts it.

07:34.360 --> 07:43.120
And in the middle, the data is not readable, so this is the encrypted ciphertext.

07:43.120 --> 07:47.560
And you see here, it's exactly the snippets we want.

07:47.560 --> 07:52.440
So this technically looks good, and we could say, okay, we apply this.

07:52.440 --> 07:56.200
And we can say it's end-to-end encrypted, we are safe.

07:56.200 --> 08:00.280
And here's a statement of Google, and they say that with Google Workspace client-side

08:00.280 --> 08:05.960
encryption, content encryption is handled in the client's browser before any data is

08:05.960 --> 08:08.520
transmitted.

08:08.520 --> 08:13.800
So here first note that client-side encryption is not the same as end-to-end encryption.

08:13.800 --> 08:19.480
It's different, especially in the question who holds the key.

08:19.480 --> 08:24.960
In client-side encryption, it's not you as a user who holds the key, but the keys are

08:24.960 --> 08:28.880
stored on a third party server.

08:28.880 --> 08:34.920
So there comes again this question of trust, if you trust this third party server.

08:34.920 --> 08:40.320
Okay, so we could say it's end-to-end encrypted, we are safe.

08:40.320 --> 08:45.120
Well really, first are the metadata.

08:45.120 --> 08:50.680
And metadata is all about who connects to the server at which time, from which IP address,

08:50.680 --> 08:57.960
who collaborates, which people are accessing the document at the same time.

08:57.960 --> 09:04.280
And all these metadata, they are still there, even if the content is encrypted.

09:04.280 --> 09:08.080
So yeah, still a problem.

09:08.080 --> 09:14.800
And second, we have Kirchhoff's principle from cryptography, which says that a cryptosystem

09:14.800 --> 09:22.600
should be secure even if everything about the system except the key is public knowledge.

09:22.600 --> 09:28.520
So you should be able to release all the code and all information except the key, and it

09:28.520 --> 09:30.880
should still be secure.

09:30.880 --> 09:34.200
And for me, it's really urge for open source.

09:34.200 --> 09:40.680
And yeah, that's why I think it, yeah, it urge for open source.

09:40.680 --> 09:43.680
So we see that we need both of them.

09:43.680 --> 09:47.040
And here I want to present you CripPad.

09:47.040 --> 09:52.800
CripPad is an online collaborative editing tool.

09:52.800 --> 09:54.600
There are multiple parts of it.

09:54.600 --> 09:55.760
There is a whiteboard.

09:55.760 --> 09:58.400
There is code marked down.

09:58.400 --> 10:04.880
There are slides like these ones and documents.

10:04.880 --> 10:10.080
It's open source software from the client source.

10:10.080 --> 10:15.280
It's the client code is open source as well as the server code.

10:15.280 --> 10:17.520
So you can host your own instance.

10:17.520 --> 10:22.280
And there are about 200 main instances.

10:22.280 --> 10:27.720
We at the CripPad team, we host a flagship instance which has about 200,000 registered

10:27.720 --> 10:31.360
users.

10:31.360 --> 10:33.520
And how does CripPad encrypt?

10:33.520 --> 10:36.400
So in CripPad, we have this end to end encryption.

10:36.400 --> 10:43.680
We have that an update is propagated in encryption form, in encrypted form, and the server only

10:43.680 --> 10:47.200
has an encrypted state of the document.

10:47.200 --> 10:53.400
So the server cannot infer the actual content of the document.

10:53.400 --> 10:55.280
And how do we share the keys?

10:55.280 --> 11:01.320
In the most basic way, we share the keys over the fragment in the amplifier of the URLs.

11:01.320 --> 11:05.920
That means we put the keys after the hashtag of the URL.

11:05.920 --> 11:12.320
Like this, you can easily share a document.

11:12.320 --> 11:13.320
What do we trust?

11:13.320 --> 11:16.720
As I said, you still have the metadata.

11:16.720 --> 11:19.880
So you still need some trust.

11:19.880 --> 11:25.520
In CripPad, you have to trust that the server is not an active attacker.

11:25.520 --> 11:31.920
That means that you expect that you trust that the server acts according to the protocol.

11:31.920 --> 11:38.600
It runs the correct code and it does not deliver any malicious things.

11:38.600 --> 11:40.440
Or it does not repeat stuff and so on.

11:40.440 --> 11:43.280
It does not reorder stuff like this.

11:43.280 --> 11:47.200
And why do we have this trust requirement?

11:47.200 --> 11:49.240
There are two reasons.

11:49.240 --> 11:51.240
The first one is practical.

11:51.240 --> 11:58.000
We have a web application where you get client source code from the server.

11:58.000 --> 12:03.000
So if the server would deliver bogus client code, well, then every security guarantee

12:03.000 --> 12:04.840
is lost.

12:04.840 --> 12:10.720
And then there is a second one, which is more theoretical.

12:10.720 --> 12:13.640
Namely that the server can always delete files.

12:13.640 --> 12:18.680
Even if they are encrypted, the server can delete them without problem.

12:18.680 --> 12:20.080
Okay.

12:20.080 --> 12:22.440
So you see that you need some trust.

12:22.440 --> 12:28.400
But the cool thing about CripPad is that there are other stuff which you don't have to trust.

12:28.400 --> 12:33.920
Namely, the server could be an honest but curious attacker.

12:33.920 --> 12:40.040
That means that even if the server watches you, you're still safe.

12:40.040 --> 12:42.800
You don't have to trust the server that it does not watch you.

12:42.800 --> 12:46.320
No, it's explicitly allowed.

12:46.320 --> 12:49.040
And why do we have that?

12:49.040 --> 12:54.000
Well, the server may become corrupt.

12:54.000 --> 13:03.200
Even if you trust it to be not actively malicious, it still may be at some point in time it may

13:03.200 --> 13:04.200
be corrupt.

13:04.200 --> 13:10.520
And this was especially the case here in last summer where there was the CripPad instance

13:10.520 --> 13:13.640
hosted by Germany's private party.

13:13.640 --> 13:19.960
And on this instance, some sensitive documents about the G7 summit were leaked.

13:19.960 --> 13:24.920
And then the police asked the private party to hand out their data.

13:24.920 --> 13:27.240
Otherwise, they would cease the server.

13:27.240 --> 13:30.360
So the police got access to this data.

13:30.360 --> 13:33.120
And now the police could not read anything.

13:33.120 --> 13:35.680
They could not read the documents.

13:35.680 --> 13:39.200
Namely because everything was end to end encryption.

13:39.200 --> 13:45.280
So this shows that even if you trust it in the first place, we still cannot be sure that

13:45.280 --> 13:49.280
it's trustworthy forever.

13:49.280 --> 13:53.760
And this setting, yeah, and as I said, this setting is exactly covered in this honest

13:53.760 --> 13:58.680
but curious attacker which we allow.

13:58.680 --> 14:02.920
There's also another point of view to look at this.

14:02.920 --> 14:06.840
We could also say that we protect the server from its users.

14:06.840 --> 14:15.680
So for example, the server administrator of the CripPad of Germany's private party was

14:15.680 --> 14:17.680
not guilty.

14:17.680 --> 14:23.640
How could they know what documents were published on their server because it's encrypted?

14:23.640 --> 14:31.240
So this shows that such encryption is also nice for you in term assistant administrator

14:31.240 --> 14:40.120
because it allows you to offer this service without taking too much risk to you.

14:40.120 --> 14:46.760
So yeah, as a take home message, I really want to say that we need both.

14:46.760 --> 14:52.680
We need open source and end to end encryption for good trust assumption.

14:52.680 --> 14:55.160
And with this, I'm at the end of my presentation.

14:55.160 --> 14:57.920
Shout out to my team.

14:57.920 --> 15:03.840
This David is there somewhere, Wolfgang is there, and Ludo is also there.

15:03.840 --> 15:05.640
I am here.

15:05.640 --> 15:11.480
And CripPad is developed at XWiki in France by this small team.

15:11.480 --> 15:13.880
We have a stand here in the K building.

15:13.880 --> 15:17.080
Yeah, come by, drop by, we have stickers.

15:17.080 --> 15:18.080
Thank you.

15:18.080 --> 15:45.400
So are there any questions?

15:45.400 --> 15:49.840
Would a peer-to-peer version be possible to reduce risks with the server, and would it

15:49.840 --> 15:50.840
help?

15:50.840 --> 15:54.880
Yeah, it would be possible, theoretically.

15:54.880 --> 16:00.360
The main point why we have a server is that we want that the documents are accessible

16:00.360 --> 16:01.880
all the time.

16:01.880 --> 16:08.680
So in a peer-to-peer setting, you'll firstly have the requirement that always one party

16:08.680 --> 16:11.080
must be online.

16:11.080 --> 16:15.240
And we don't want that.

16:15.240 --> 16:18.520
So another question?

16:18.520 --> 16:20.560
Thank you very much.

16:20.560 --> 16:24.640
You say we need open source and E2EE for good trust assumptions.

16:24.640 --> 16:30.360
I would suggest you might need a slightly stronger statement.

16:30.360 --> 16:33.920
The code on the server has to be open source as well.

16:33.920 --> 16:38.760
So potentially you need something like the Athera GPL.

16:38.760 --> 16:43.800
And in terms of the E2EE, you need post-quantum resistance.

16:43.800 --> 16:46.480
Yeah, good.

16:46.480 --> 16:51.240
If you have those two things, then maybe you have good trust assumptions.

16:51.240 --> 16:54.400
Yeah, good point.

16:54.400 --> 16:59.600
Crip-pat is licensed under the A2EEPL, so this point is easily answerable.

16:59.600 --> 17:03.320
And on the second point we are working on, we are looking on how to make Crip-pat secure

17:03.320 --> 17:09.560
in a post-quantum world.

17:09.560 --> 17:10.560
Thank you very much.

17:10.560 --> 17:16.720
You mentioned that it's problematic to have the metadata still.

17:16.720 --> 17:21.840
So what is Crip-pat doing against that, or how can we make sure that the server is not

17:21.840 --> 17:23.840
collecting metadata?

17:23.840 --> 17:27.120
Yeah, there are two answers to this.

17:27.120 --> 17:31.960
One is that there's always some metadata which will be there, for example the IP address

17:31.960 --> 17:34.480
or the browser agent.

17:34.480 --> 17:35.960
This one we have to live with.

17:35.960 --> 17:41.320
And this is also the case why it's important that you can host it on your own instance.

17:41.320 --> 17:48.920
And then the second part is that Crip-pat collects as few information about you as possible.

17:48.920 --> 17:54.080
So for example, we don't have a list of users, of user names.

17:54.080 --> 17:58.080
There's even no list of hashed user names.

17:58.080 --> 18:04.440
So we just hash the user, the user name and the password locally on the client side, and

18:04.440 --> 18:07.960
generate from this all the keys.

18:07.960 --> 18:17.080
So this is just as an illustration how we try to ensure to have as few metadata as possible.

18:17.080 --> 18:18.680
Good afternoon.

18:18.680 --> 18:23.240
In answer to the first question you answered that you don't use peer-to-peer because you

18:23.240 --> 18:25.000
want the server to be online all the time.

18:25.000 --> 18:29.120
Does the server have to be unique, or can you have multiple servers just in case one

18:29.120 --> 18:32.880
gets in the hands of the police or gets out for some reason?

18:32.880 --> 18:35.000
Are you speaking of federation?

18:35.000 --> 18:36.000
Yes.

18:36.000 --> 18:37.000
Okay.

18:37.000 --> 18:41.080
Possibly, currently there is no possibility for federation.

18:41.080 --> 18:50.400
No, sadly not.

18:50.400 --> 18:55.960
You mentioned the case where a server was rated by police, so they have the server.

18:55.960 --> 19:00.400
Is it not enough then to have that server and also have somebody's browser history with

19:00.400 --> 19:08.960
the key in the URL and then that conversation is open?

19:08.960 --> 19:13.800
So if I got your answer, if you got your question correctly, it was if an attacker has access

19:13.800 --> 19:18.800
to the server and to the URL, then they have full knowledge.

19:18.800 --> 19:19.800
Yeah.

19:19.800 --> 19:27.760
That's the case because the URL leaks the full URL, including the part after the hash,

19:27.760 --> 19:32.480
which is not sent to the server, if the attacker has this, yeah, then they have the key to

19:32.480 --> 19:37.720
the server and add the key to the document and can decrypt it.

19:37.720 --> 19:39.720
They are connected.

19:39.720 --> 19:42.520
So yes.

19:42.520 --> 19:50.840
How does editing collaborators adding, removing work do you like re-encrypt the file of different

19:50.840 --> 19:54.960
keys every time, or how do you handle that?

19:54.960 --> 20:04.280
So we only send updates, so it's not the entire file every time, and it's symmetrically encrypted.

20:04.280 --> 20:08.480
In order, there are two ways you can access a document in a read-only mode.

20:08.480 --> 20:11.760
There you have the keys for decryption.

20:11.760 --> 20:20.480
To prove that you're able to update the document, you need to sign it with a signing key.

20:20.480 --> 20:22.940
But the keys are static for a document.

20:22.940 --> 20:29.600
But if a user gets removed from read access, they would still be able to read the file

20:29.600 --> 20:32.800
after it's being modified, wouldn't they?

20:32.800 --> 20:34.800
Yes, exactly.

20:34.800 --> 20:35.800
Yeah.

20:35.800 --> 20:36.800
Yeah.

20:36.800 --> 20:46.400
They will still be able to read it.

20:46.400 --> 20:51.840
There is, there are access lists which we have which can defend against this scenario.

20:51.840 --> 20:58.600
Yeah, this is also something we're working on.

20:58.600 --> 21:02.400
And maybe if I can just mention something which a bit more goes into these detailed

21:02.400 --> 21:03.400
questions.

21:03.400 --> 21:05.840
We just published a white paper.

21:05.840 --> 21:11.720
You can go to our website on crippat.org and check it out.

21:11.720 --> 21:23.760
Also if there are no other questions.

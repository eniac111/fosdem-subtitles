WEBVTT

00:00.000 --> 00:02.060
you

00:30.000 --> 00:32.060
you

01:00.000 --> 01:02.060
you

01:30.000 --> 01:32.060
you

02:00.000 --> 02:02.060
you

02:30.000 --> 02:32.060
you

03:00.000 --> 03:02.060
you

03:30.000 --> 03:32.060
you

04:00.000 --> 04:02.060
you

04:30.000 --> 04:32.060
you

05:00.000 --> 05:02.060
you

05:30.000 --> 05:32.060
you

06:00.000 --> 06:02.060
you

06:30.000 --> 06:32.060
you

07:00.000 --> 07:02.060
you

07:30.000 --> 07:32.060
you

08:00.000 --> 08:02.100
you

08:30.000 --> 08:32.060
you

09:00.000 --> 09:02.100
you

09:30.000 --> 09:32.100
you

10:00.000 --> 10:02.100
you

10:30.000 --> 10:32.100
you

11:00.000 --> 11:02.100
you

11:30.000 --> 11:32.100
you

12:00.000 --> 12:02.100
you

12:30.000 --> 12:37.120
so that's all from my side in this little review on the elliptic itself and thinking and

12:37.120 --> 12:39.120
and the implementations in pretty so far

12:39.120 --> 13:03.640
hi

13:03.640 --> 13:12.000
homomorphic encryption, NPC, VDFs, and then even when you start to mount recursion and

13:12.000 --> 13:18.320
curve cycles and pairing friendly curves, each time it seems to be we will try to standardize

13:18.320 --> 13:24.400
curves, and then discover like, oh, there's some new property, like maybe unknown order

13:24.400 --> 13:26.200
groups or hyperlyptic.

13:26.200 --> 13:34.560
I think the movement of this restreto and decaf goes in the direction in instead of

13:34.560 --> 13:40.040
standardize an elliptic curve itself, it is standardizing a variety of elliptic curves,

13:40.040 --> 13:47.040
then you have the operations and the maths to work with any elliptic curves in this variety.

13:47.040 --> 13:52.520
So this will bring us the possibility to have this, like another service that is providing

13:52.520 --> 13:58.920
random elliptic curves on the net, and you can pick one from there and forget about the

13:58.920 --> 14:01.360
thing that we are showing the same elliptic curves of this.

14:01.360 --> 14:09.800
The way that the current standards that exist are fixing an elliptic curve, one or another,

14:09.800 --> 14:13.800
but fixing it in a specific way.

14:13.800 --> 14:20.680
I have answered it because you say about homomorphic, but the homomorphic is huge.

14:20.680 --> 14:25.120
It's a very interesting field, but it's a huge field.

14:25.120 --> 14:29.120
Okay, I can see.

14:29.120 --> 14:31.800
Another question.

14:31.800 --> 14:39.320
In many protocols and also in IoT devices, you are bottlenecked by speed and also by signature

14:39.320 --> 14:40.320
size.

14:40.320 --> 14:45.400
You said that with Jacobi-Quartic curve, you can go faster and also smaller.

14:45.400 --> 14:49.880
How fast, how much faster and how much smaller?

14:49.880 --> 14:57.080
I have in the paper of the Jacobi-Quartic people, the speed is explained.

14:57.080 --> 14:59.120
I don't have the numbers of mine now.

14:59.120 --> 15:04.920
I have the numbers of mine about the size because the sizes in signatures in elliptic

15:04.920 --> 15:11.200
curves are 64 bytes, and the proposal, the schema they propose for the Jacobi-Quartic,

15:11.200 --> 15:15.320
it's 84 bytes.

15:15.320 --> 15:19.240
So it's like a third, smaller.

15:19.240 --> 15:25.480
But it's still bigger than BLS signatures who are about 32 to 48 because you only need

15:25.480 --> 15:28.960
a single point on curve.

15:28.960 --> 15:33.000
In the signature, in the signature, you are not putting only the point.

15:33.000 --> 15:36.000
There are three, if I remember correctly, there are three.

15:36.000 --> 15:39.400
BLS signatures, it's only one point.

15:39.400 --> 15:40.400
Which signature?

15:40.400 --> 15:43.640
BLS from Danbony.

15:43.640 --> 15:49.360
But it's shorter than 48 bytes.

15:49.360 --> 15:51.800
It depends on the base curve you use.

15:51.800 --> 15:58.320
But it's only, so if you use, well, 32-byte signatures are not deemed secure enough because

15:58.320 --> 16:00.200
you have pairing issues.

16:00.200 --> 16:09.880
But 48 provides 128 bytes of security.

16:09.880 --> 16:16.360
What I know is that the 8-volt curves variety is 64 bytes.

16:16.360 --> 16:22.400
Okay, are there any questions?

16:22.400 --> 16:25.480
No, then.

16:25.480 --> 16:27.080
Okay.

16:27.080 --> 16:36.840
Have you looked at Genos II curves because I saw that they actually outperformed Genos

16:36.840 --> 16:37.840
II?

16:37.840 --> 16:38.840
Yeah.

16:38.840 --> 16:43.240
They outperformed Genos I. I saw DJB was really in the center.

16:43.240 --> 16:45.240
You are hyper-eliptic curves.

16:45.240 --> 16:47.240
Yeah, the Picard group.

16:47.240 --> 16:49.680
This is a very nice subject also.

16:49.680 --> 16:56.040
I think banks are the ones that are putting more money in hyper-eliptic curves.

16:56.040 --> 16:57.040
They are not using points.

16:57.040 --> 17:03.880
They are using a matrix of the Jacobian of the point.

17:03.880 --> 17:09.760
Right now, I only heard about banks putting money there.

17:09.760 --> 17:18.040
I haven't seen an implementation in open source.

17:18.040 --> 17:19.040
Any other?

17:19.040 --> 17:20.040
Well, no.

17:20.040 --> 17:21.040
Thank you.

17:21.040 --> 17:34.760
Thank you.

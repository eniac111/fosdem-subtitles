1
0:00:00.000 --> 0:00:12.480
Thank you.

2
0:00:12.480 --> 0:00:13.800
So my name is Joost van Dijk.

3
0:00:13.800 --> 0:00:17.280
Disclaimer, I work for a commercial company called Yubico.

4
0:00:17.280 --> 0:00:19.040
So maybe you've heard of Yubikis.

5
0:00:19.040 --> 0:00:21.040
Yubico produces those Yubikis.

6
0:00:21.040 --> 0:00:23.400
But I'm not going to talk about Yubikis.

7
0:00:23.400 --> 0:00:26.000
I'm going to talk about a technology called Fido.

8
0:00:26.000 --> 0:00:31.200
And many of you will have seen the previous presentation that was about an application

9
0:00:31.200 --> 0:00:32.200
of Fido.

10
0:00:32.200 --> 0:00:37.760
So the goal of this presentation is to move on to the next slide somehow.

11
0:00:37.760 --> 0:00:38.760
Yep.

12
0:00:38.760 --> 0:00:41.080
To explain what Fido is.

13
0:00:41.080 --> 0:00:45.640
So I give a quick introduction to Fido and then what you can use it for.

14
0:00:45.640 --> 0:00:50.480
And many people will already have seen it for, for example, for authentication.

15
0:00:50.480 --> 0:00:55.360
But I'm going to talk about things that are, so for authentication on the web primarily.

16
0:00:55.360 --> 0:01:01.160
I'm going to talk about things that are, that Fido can be used for that is not involving

17
0:01:01.160 --> 0:01:02.400
a web browser.

18
0:01:02.400 --> 0:01:04.560
And these things are less, less are well known.

19
0:01:04.560 --> 0:01:08.320
So I think it's interesting to have a look at the applications.

20
0:01:08.320 --> 0:01:14.240
And I'll give examples of open source software that you can use today that are actually using

21
0:01:14.240 --> 0:01:19.280
Fido to do, to do things that are, that don't involve a browser.

22
0:01:19.280 --> 0:01:22.380
So let me first explain about Fido.

23
0:01:22.380 --> 0:01:27.300
So Fido is actually a set of specifications.

24
0:01:27.300 --> 0:01:29.060
One is by the World Wide Web Consortium.

25
0:01:29.060 --> 0:01:32.320
That's about using it in a web browser primarily.

26
0:01:32.320 --> 0:01:34.840
And the other one is using security keys.

27
0:01:34.840 --> 0:01:41.480
So the tokens like this that are typically in your key ring, this is called a roaming

28
0:01:41.480 --> 0:01:43.320
authenticator in Fido.

29
0:01:43.320 --> 0:01:49.080
And the idea is that you protect your private keys on a piece of hardware that has protection

30
0:01:49.080 --> 0:01:53.360
against extracting key material.

31
0:01:53.360 --> 0:01:58.360
So this protocol is called CTAP.

32
0:01:58.360 --> 0:01:59.880
And that's by a different organization.

33
0:01:59.880 --> 0:02:01.760
It's called Fido Alliance.

34
0:02:01.760 --> 0:02:07.000
And so this is specifically talking to authenticators like this one.

35
0:02:07.000 --> 0:02:08.240
So how does that work?

36
0:02:08.240 --> 0:02:12.840
So I'm simplifying things because there's a lot of details that I don't want to get

37
0:02:12.840 --> 0:02:15.700
into because that takes too much time.

38
0:02:15.700 --> 0:02:24.240
So if we have some relying party, so let's first look at the web authentications part.

39
0:02:24.240 --> 0:02:26.400
So using a web browser typically.

40
0:02:26.400 --> 0:02:29.520
So a relying party that will be typically a web server.

41
0:02:29.520 --> 0:02:34.640
And authentication works by, yeah, like many authentication protocols, you use a challenge

42
0:02:34.640 --> 0:02:42.160
response mechanism where you use asymmetric cryptography to sign a challenge.

43
0:02:42.160 --> 0:02:46.040
And then you have the verifier so the relying party can check the signature.

44
0:02:46.040 --> 0:02:49.120
And if it works out, then you're authenticated.

45
0:02:49.120 --> 0:02:57.080
So the idea is that these two protocols, the web of N is basically used in a web setting.

46
0:02:57.080 --> 0:03:00.680
So for example, the web server can send a challenge to a browser.

47
0:03:00.680 --> 0:03:08.800
And then the browser uses the web of N API, which is simply a JavaScript API to initiate

48
0:03:08.800 --> 0:03:13.640
the registration of a public key or authentication using that public key.

49
0:03:13.640 --> 0:03:16.960
So that's web of N. That's in the web part.

50
0:03:16.960 --> 0:03:24.720
And then on the back end, your web browser will communicate with a security key, so this

51
0:03:24.720 --> 0:03:31.040
roaming authenticator, just relaying that challenge, asking the key to sign it, and

52
0:03:31.040 --> 0:03:35.780
then the response is passed on to the relying party and will verify it.

53
0:03:35.780 --> 0:03:41.120
So what's all the fuss with the pass keys and FIDO and anti-phishing?

54
0:03:41.120 --> 0:03:43.200
Well that's the merit of FIDO2.

55
0:03:43.200 --> 0:03:44.880
It has phishing protection.

56
0:03:44.880 --> 0:03:49.440
And that is because in this challenge, the web browser can help you secure things by

57
0:03:49.440 --> 0:03:52.440
injecting the origin of the site that you are authenticating with.

58
0:03:52.440 --> 0:03:54.560
So this is included in the signature.

59
0:03:54.560 --> 0:03:58.800
So if you end up at the phishing site, the signature won't match because it will have

60
0:03:58.800 --> 0:04:03.000
a different identifier for the web server.

61
0:04:03.000 --> 0:04:09.600
So this is why FIDO is phishing, protecting you against phishing.

62
0:04:09.600 --> 0:04:12.720
But actually I'm not going to talk about this use case.

63
0:04:12.720 --> 0:04:16.640
I'm going to talk about the right part of this image where we use CTAP to communicate

64
0:04:16.640 --> 0:04:18.860
with an authenticator.

65
0:04:18.860 --> 0:04:22.720
So these are all kinds of authenticators.

66
0:04:22.720 --> 0:04:29.160
I work for a company that produces these authenticators, but it's an open standard, so anyone can build

67
0:04:29.160 --> 0:04:31.540
a security key.

68
0:04:31.540 --> 0:04:35.200
So I'm using security key and roaming authenticator interchangeably.

69
0:04:35.200 --> 0:04:39.120
But these are all security keys by different vendors.

70
0:04:39.120 --> 0:04:41.360
So of course my employer is there.

71
0:04:41.360 --> 0:04:48.240
But there's also Fayshaun, for example, Google, NitroKey, SoloKeys.

72
0:04:48.240 --> 0:04:51.520
And that's interesting because that's actually also open source hardware.

73
0:04:51.520 --> 0:04:53.240
So anyone can build a solo key.

74
0:04:53.240 --> 0:04:55.920
The firmware is open source, everything.

75
0:04:55.920 --> 0:05:00.840
NitroKey actually uses the same software base, firmware base.

76
0:05:00.840 --> 0:05:07.240
So these are all anything I talk about in this talk will work with any of these security

77
0:05:07.240 --> 0:05:08.920
keys.

78
0:05:08.920 --> 0:05:10.280
So how does this protocol work?

79
0:05:10.280 --> 0:05:12.560
So I'm focusing on CTAP, the backend.

80
0:05:12.560 --> 0:05:15.840
So talking to an authenticator.

81
0:05:15.840 --> 0:05:19.720
Well the idea is that first you have to register.

82
0:05:19.720 --> 0:05:26.840
So registration is just to register your public key with this verifier, this relying party,

83
0:05:26.840 --> 0:05:28.360
whoever that is.

84
0:05:28.360 --> 0:05:31.560
And then later you can use that public key for authentication.

85
0:05:31.560 --> 0:05:34.760
So there's two steps, registration, authentication.

86
0:05:34.760 --> 0:05:38.760
And so in the registration steps, so I'm not going to talk about all the details, but you

87
0:05:38.760 --> 0:05:47.920
just register your public key with a relying party.

88
0:05:47.920 --> 0:05:51.200
And this is including something called the relying party ID.

89
0:05:51.200 --> 0:05:57.240
So in web of N this is the identifier of the web server.

90
0:05:57.240 --> 0:06:00.160
But in other applications it can be anything.

91
0:06:00.160 --> 0:06:04.320
But the idea is that it is included in any signature that you generate.

92
0:06:04.320 --> 0:06:09.760
And so you fix this relying party ID when you register.

93
0:06:09.760 --> 0:06:13.840
And later with authentication this relying party ID is included in the signature so you

94
0:06:13.840 --> 0:06:18.680
can as a relying party verify that it is used for your application.

95
0:06:18.680 --> 0:06:22.920
So you cannot use the same public key for some other application with a different relying

96
0:06:22.920 --> 0:06:25.240
party ID.

97
0:06:25.240 --> 0:06:28.920
So I'm not going into too much detail.

98
0:06:28.920 --> 0:06:35.500
Now you might think, well, I can do this stuff with PGP, I can do it with smart cards.

99
0:06:35.500 --> 0:06:43.040
So what is different about security keys if you're not using it in a web browser?

100
0:06:43.040 --> 0:06:48.920
Well actually many of the things that I'm talking about will also work with PGP or other

101
0:06:48.920 --> 0:06:49.920
technologies.

102
0:06:49.920 --> 0:06:53.880
Although there are some specific features that are not always included.

103
0:06:53.880 --> 0:06:56.040
And one of them is attestation.

104
0:06:56.040 --> 0:07:02.440
So attestation means that you can prove that some signature was generated with a security

105
0:07:02.440 --> 0:07:04.240
key.

106
0:07:04.240 --> 0:07:10.400
So of course if you know that the public key is generated on a security key then obviously

107
0:07:10.400 --> 0:07:11.400
that is the case.

108
0:07:11.400 --> 0:07:17.280
But if you're dealing with someone that claims to have a security key but you're not sure,

109
0:07:17.280 --> 0:07:20.120
you can actually verify it by this process called attestation.

110
0:07:20.120 --> 0:07:28.480
So you can prove that someone uses, let's say, a Google Titan key to generate a signature.

111
0:07:28.480 --> 0:07:30.900
So this is what's called attestation.

112
0:07:30.900 --> 0:07:36.320
And there's a service hosted by the FIDO Alliance, or the organization that actually produces

113
0:07:36.320 --> 0:07:39.640
those specifications.

114
0:07:39.640 --> 0:07:40.880
And they host metadata.

115
0:07:40.880 --> 0:07:44.840
So if you have a security key it will have a unique identifier.

116
0:07:44.840 --> 0:07:50.960
So not unique for that particular YubiKey but unique for the Maker model.

117
0:07:50.960 --> 0:08:00.320
So any, let's say, any Titan key or any Fayshaun key or any YubiKey that is of a particular

118
0:08:00.320 --> 0:08:03.240
Maker model will have the same identifier.

119
0:08:03.240 --> 0:08:08.680
And in the specs it says that at least 100,000 keys need to use that same identifier if they

120
0:08:08.680 --> 0:08:10.360
are the same Maker model.

121
0:08:10.360 --> 0:08:16.080
So it can be sure that, let's say, that the signature is generated by a Titan key.

122
0:08:16.080 --> 0:08:17.080
And that is also interesting.

123
0:08:17.080 --> 0:08:25.520
So attestation together with metadata, they really add something to this process.

124
0:08:25.520 --> 0:08:28.360
So here's an example of the metadata.

125
0:08:28.360 --> 0:08:31.000
So someone built a nice web view of the metadata.

126
0:08:31.000 --> 0:08:36.640
So you can look up things like, of course, who's the vendor of this YubiKey or this security

127
0:08:36.640 --> 0:08:37.640
key.

128
0:08:37.640 --> 0:08:41.160
And also is it using protected hardware?

129
0:08:41.160 --> 0:08:45.120
And is it certified to a certain security web?

130
0:08:45.120 --> 0:08:50.400
So all these things you can actually use in a, actually, yeah.

131
0:08:50.400 --> 0:08:52.160
So I'm not going to do any demos.

132
0:08:52.160 --> 0:08:55.480
So I include all my demo slides for you to try yourself.

133
0:08:55.480 --> 0:08:56.600
So we don't have time here.

134
0:08:56.600 --> 0:09:00.040
But I'll just leave them in the slides so you can actually try.

135
0:09:00.040 --> 0:09:03.880
So this is a way to extract metadata.

136
0:09:03.880 --> 0:09:05.240
So it's a bit technical.

137
0:09:05.240 --> 0:09:09.520
But if you want to try it, please do.

138
0:09:09.520 --> 0:09:13.800
Then about open source software.

139
0:09:13.800 --> 0:09:18.400
So Yubico publishes a FIDO library.

140
0:09:18.400 --> 0:09:21.600
And it's actually used by a lot of open source projects.

141
0:09:21.600 --> 0:09:25.800
So this is open source, although it's produced by Yubico.

142
0:09:25.800 --> 0:09:29.800
And yeah, if you look at, for example, GitHub and you look at all the projects that use

143
0:09:29.800 --> 0:09:34.280
this library, then there's lots of interesting projects that do it.

144
0:09:34.280 --> 0:09:40.440
And that means that you can use a security key, any security key, by any vendor using

145
0:09:40.440 --> 0:09:42.480
that software.

146
0:09:42.480 --> 0:09:46.720
And yeah, what I'll do in this, in the rest of the talk, is give you some examples.

147
0:09:46.720 --> 0:09:52.960
Because it's interesting that although FIDO was primarily intended to do authentication,

148
0:09:52.960 --> 0:09:53.960
you can actually do other things.

149
0:09:53.960 --> 0:09:54.960
You can do encryption.

150
0:09:54.960 --> 0:09:55.960
You can do signing.

151
0:09:55.960 --> 0:09:58.400
And you can actually store things on the Yubico.

152
0:09:58.400 --> 0:10:02.900
So I'll give an example of all these features.

153
0:10:02.900 --> 0:10:07.940
So let's start with a very simple example, like a pluggable authentication module.

154
0:10:07.940 --> 0:10:13.720
So that's another open source library that is included in many Linux distributions.

155
0:10:13.720 --> 0:10:33.560
The idea is that you can...

156
0:10:33.560 --> 0:10:55.040
Oh, yay!

157
0:10:55.040 --> 0:10:57.100
you

158
0:11:25.040 --> 0:11:27.100
you

159
0:11:55.040 --> 0:11:57.100
you

160
0:12:25.040 --> 0:12:27.100
you

161
0:12:55.040 --> 0:12:57.100
you

162
0:13:25.040 --> 0:13:27.100
you

163
0:13:55.040 --> 0:13:57.100
you

164
0:14:25.040 --> 0:14:27.100
you

165
0:14:55.040 --> 0:14:57.100
you

166
0:15:25.040 --> 0:15:27.100
you

167
0:15:55.040 --> 0:15:57.100
you

168
0:15:57.100 --> 0:15:59.160
you

169
0:15:59.160 --> 0:16:01.240
you

170
0:16:01.240 --> 0:16:03.320
you

171
0:16:03.320 --> 0:16:05.380
you

172
0:16:05.380 --> 0:16:07.440
you

173
0:16:07.440 --> 0:16:09.520
you

174
0:16:09.520 --> 0:16:11.600
you

175
0:16:11.600 --> 0:16:13.680
you

176
0:16:13.680 --> 0:16:15.760
you

177
0:16:15.760 --> 0:16:17.760
you

178
0:16:17.760 --> 0:16:19.760
you

179
0:16:19.760 --> 0:16:21.760
open source software

180
0:16:21.760 --> 0:16:23.760
you can try it out yourself

181
0:16:23.760 --> 0:16:25.760
but let's give a practical example

182
0:16:25.760 --> 0:16:28.400
let's say that you want to encrypt your hard disk

183
0:16:28.400 --> 0:16:30.560
you're on a Linux system you're using the lux

184
0:16:30.560 --> 0:16:32.760
and typically this is done using a password

185
0:16:32.760 --> 0:16:37.760
instead of using a password you can also use a security key

186
0:16:37.760 --> 0:16:39.260
a FIDO key

187
0:16:39.260 --> 0:16:44.760
that instead of deriving some encryption key from your password

188
0:16:44.760 --> 0:16:50.760
it will derive the encryption key from this extra key that is generated on your security key

189
0:16:50.760 --> 0:16:57.760
so this this means that if you want to decrypt your hard disk you just need to insert your security key

190
0:16:57.760 --> 0:17:04.760
so this is what you have factor to extra to get some extra confidence that only you can decrypt that hard disk

191
0:17:04.760 --> 0:17:08.760
so worth the look now

192
0:17:08.760 --> 0:17:12.760
then there's another extension called large blocks

193
0:17:12.760 --> 0:17:16.760
and this is for storing things on your security key

194
0:17:16.760 --> 0:17:22.760
and so it doesn't have a lot of space but this is typically used for storing certificates

195
0:17:22.760 --> 0:17:27.760
so let's say you're using SSH and you use SSH with SSH certificates

196
0:17:27.760 --> 0:17:30.760
these are small files

197
0:17:30.760 --> 0:17:33.760
and it's it's feasible to store them on your security key

198
0:17:33.760 --> 0:17:38.760
so this is an extension that is not very often implemented at the moment

199
0:17:38.760 --> 0:17:41.760
so the

200
0:17:41.760 --> 0:17:45.760
I think there are a couple of vendors that actually implement this

201
0:17:45.760 --> 0:17:50.760
but it means that if you if you move to a different system and you want to log in there

202
0:17:50.760 --> 0:17:55.760
you can actually take your security key and extract both the public key and the certificates

203
0:17:55.760 --> 0:17:59.760
of course the privacy stays on your key and your security key

204
0:17:59.760 --> 0:18:02.760
and then log into a remote server from there

205
0:18:02.760 --> 0:18:07.760
because so everything is contained in the same security key

206
0:18:07.760 --> 0:18:11.760
here's an example how you do this with the tools

207
0:18:11.760 --> 0:18:15.760
do it yourself if you have the key that supports it

208
0:18:15.760 --> 0:18:19.760
finally last example about this attestation

209
0:18:19.760 --> 0:18:23.760
so if you generate an SSH key that is backed by a security key

210
0:18:23.760 --> 0:18:27.760
you can actually ask the security key to provide attestation

211
0:18:27.760 --> 0:18:33.760
so there's this extra parameter in SSH keygen that will extract the attestation data

212
0:18:33.760 --> 0:18:38.760
it's called that you can look up in the FIDO metadata service

213
0:18:38.760 --> 0:18:43.760
and this way you can prove that the signature was generated

214
0:18:43.760 --> 0:18:48.760
by some security key and you can look up exactly which one

215
0:18:48.760 --> 0:18:53.760
and you're certain that this is done with secure hardware

216
0:18:53.760 --> 0:18:56.760
okay

217
0:18:56.760 --> 0:18:59.760
you can try it out

218
0:18:59.760 --> 0:19:02.760
so getting to a conclusion

219
0:19:02.760 --> 0:19:06.760
so I'm not saying you have to stop using PGP or anything

220
0:19:06.760 --> 0:19:11.760
this is an alternative to doing things with secure hardware

221
0:19:11.760 --> 0:19:17.760
and the idea is now that since all the big vendors like Apple and Google and Microsoft

222
0:19:17.760 --> 0:19:24.760
they've jumped on the FIDO bandwagon so we can see a lot more support for FIDO in the future

223
0:19:24.760 --> 0:19:28.760
that means that a lot more people will own a FIDO security key

224
0:19:28.760 --> 0:19:33.760
for example, already mentioned this morning is if you have an Apple iOS device

225
0:19:33.760 --> 0:19:38.760
you can protect your Apple ID using a FIDO security key

226
0:19:38.760 --> 0:19:43.760
so it's built into iOS 16.3 I think

227
0:19:43.760 --> 0:19:48.760
so this means that it is a viable alternative

228
0:19:48.760 --> 0:19:54.760
that's actually also a lot cheaper than many of the other hardware keys that you can buy

229
0:19:54.760 --> 0:19:56.760
like a smart card

230
0:19:56.760 --> 0:20:00.760
so I think for 20 or 30 bucks you can buy a FIDO security key

231
0:20:00.760 --> 0:20:06.760
whereas smart cards are usually, especially if you consider all the middleware

232
0:20:06.760 --> 0:20:10.760
and everything else that you need to get it working

233
0:20:10.760 --> 0:20:14.760
that can be a lot more expensive

234
0:20:14.760 --> 0:20:18.760
so just a list of our resources if you want to look up things

235
0:20:18.760 --> 0:20:21.760
of course you can also contact me, I'll be here all day

236
0:20:21.760 --> 0:20:28.760
and happy to take questions if there are any

237
0:20:28.760 --> 0:20:32.760
Hi, I have a question about the attestation process

238
0:20:32.760 --> 0:20:36.760
and open implementations of FIDO2

239
0:20:36.760 --> 0:20:41.760
if you have an open implementation is it possible to get that certified with FIDO2 Alliance

240
0:20:41.760 --> 0:20:46.760
my understanding is that in order to enable people to compile their own binaries

241
0:20:46.760 --> 0:20:49.760
to put on their own open keys, is that possible or is it not?

242
0:20:49.760 --> 0:20:52.760
Yes, so as a relying party

243
0:20:52.760 --> 0:21:00.760
so there's a certification process that you can use to test if you are compatible with the FIDO standards

244
0:21:00.760 --> 0:21:06.760
and so there's different certification programs

245
0:21:06.760 --> 0:21:10.760
the most heavy ones are for the actual security keys

246
0:21:10.760 --> 0:21:15.760
so there you have to actually do a lot of work to get it certified

247
0:21:15.760 --> 0:21:19.760
but there's also a self certification toolkit I think

248
0:21:19.760 --> 0:21:23.760
that you can use to see if you are compatible with FIDO standards

249
0:21:23.760 --> 0:21:27.760
so there's a lot of tests you can run against your own relying party software

250
0:21:27.760 --> 0:21:29.760
you can use them at least, right?

251
0:21:29.760 --> 0:21:31.760
yeah, yeah

252
0:21:32.760 --> 0:21:34.760
any other questions?

253
0:21:34.760 --> 0:21:39.760
what is publicly known about hardware tokens failure rates

254
0:21:39.760 --> 0:21:42.760
at least for popular models

255
0:21:42.760 --> 0:21:48.760
and how many identical devices would you enroll for the most important things personally?

256
0:21:48.760 --> 0:21:51.760
the question is I think twofold

257
0:21:51.760 --> 0:21:54.760
first is about failure rates

258
0:21:54.760 --> 0:22:00.760
actually I don't know about failure rates but of course there's different ways to do user verification

259
0:22:00.760 --> 0:22:05.760
and I skipped over it a bit but to use a security key you need to either touch it

260
0:22:05.760 --> 0:22:09.760
and sometimes also prove that you are using it

261
0:22:09.760 --> 0:22:13.760
and this is done typically with a pin or with a biometric

262
0:22:13.760 --> 0:22:18.760
so I've never seen a security key fail

263
0:22:18.760 --> 0:22:23.760
except when it's using biometrics because of course that is a less

264
0:22:23.760 --> 0:22:29.760
so every biometric has a false acceptance rate and a false rejection rate

265
0:22:29.760 --> 0:22:37.760
and yeah I don't know numbers but it differs with different vendors

266
0:22:37.760 --> 0:22:42.760
so I think Apple doesn't say anything about their false acceptance rate for example

267
0:22:42.760 --> 0:22:47.760
so I guess you just have to trust them and that is with many vendors

268
0:22:47.760 --> 0:22:51.760
I missed the second part of your question

269
0:22:51.760 --> 0:22:56.760
do you have any identical devices to enroll at once or use of a line?

270
0:22:56.760 --> 0:23:00.760
oh yeah, so already mentioned if you lose your security key you have a problem

271
0:23:00.760 --> 0:23:05.760
so you want to have multiple public keys registered

272
0:23:05.760 --> 0:23:08.760
and how many that depends on the relying party

273
0:23:08.760 --> 0:23:14.760
so some relying parties initially only allowed you to register one

274
0:23:14.760 --> 0:23:19.760
so that's pretty useless because if you lose that one then you're out of business

275
0:23:19.760 --> 0:23:26.760
so usually there are several and I think for example on an Apple iOS device

276
0:23:26.760 --> 0:23:30.760
you can now register six but that's really depending on the relying party

277
0:23:30.760 --> 0:23:37.760
so some have an infinite number so you can just register as many as you like

278
0:23:37.760 --> 0:23:40.760
but that's really depending on the relying party

279
0:23:40.760 --> 0:23:43.760
okay we've got time for our last question, there is an icy hand here

280
0:23:48.760 --> 0:23:55.760
so I guess if you have now a single point of failure with a USB socket

281
0:23:55.760 --> 0:24:04.760
especially if you are travelling so are there any plans to have implementation

282
0:24:04.760 --> 0:24:09.760
for the Bluetooth FIDO standards

283
0:24:09.760 --> 0:24:19.760
so we can still work if USB is broken maybe at the phone or whatever

284
0:24:19.760 --> 0:24:23.760
keep it a little quiet because I have trouble hearing the question

285
0:24:23.760 --> 0:24:35.760
are there any plans for the Bluetooth support in the libraries

286
0:24:35.760 --> 0:24:46.760
because especially if I'm travelling I often have problems with USB sockets

287
0:24:46.760 --> 0:24:53.760
so I would have a single point of failure there

288
0:24:53.760 --> 0:24:58.760
so you're saying if you have problems with your USB sockets then you cannot use a key

289
0:24:58.760 --> 0:25:00.760
so is there an alternative?

290
0:25:00.760 --> 0:25:03.760
and I would prefer to have some Bluetooth fallback then

291
0:25:03.760 --> 0:25:09.760
and the FIDO standard also specifies FIDO over Bluetooth

292
0:25:09.760 --> 0:25:14.760
but I don't see it's only implemented on Windows

293
0:25:14.760 --> 0:25:20.760
and Android but not on the Linux side please

294
0:25:20.760 --> 0:25:24.760
sorry, Bluetooth, yeah

295
0:25:24.760 --> 0:25:29.760
so Bluetooth support is not in this libfido 2, it only has USB and NFC

296
0:25:29.760 --> 0:25:34.760
no Bluetooth but there may be an addition in the next version of CTAP

297
0:25:34.760 --> 0:25:39.760
there will be a way to, and maybe you've seen it in Google Chrome

298
0:25:39.760 --> 0:25:42.760
you can generate a QR code so that you can use your phone

299
0:25:42.760 --> 0:25:45.760
so if you have to introduce your phone as an authenticator

300
0:25:45.760 --> 0:25:50.760
you can do it over Bluetooth low energy but the Bluetooth channel is only used for proximity

301
0:25:50.760 --> 0:25:53.760
it's not used to actually transfer anything

302
0:25:53.760 --> 0:25:59.760
for example if you register a key, your public key is not submitted over Bluetooth

303
0:25:59.760 --> 0:26:02.760
but that will be in the next version of CTAP

304
0:26:02.760 --> 0:26:14.760
thank you for the talk, we are out of the time, so applause


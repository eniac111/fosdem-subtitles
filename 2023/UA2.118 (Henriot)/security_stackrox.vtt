WEBVTT

00:00.000 --> 00:02.000
Welcome, Ruthvik.

00:00.000 --> 00:02.000
Thank you.

00:02.000 --> 00:04.000
Good evening, everyone.

00:04.000 --> 00:07.000
Thanks for coming back for the late evening talk.

00:07.000 --> 00:09.000
I appreciate your time.

00:09.000 --> 00:11.000
So my name is Ruthvik Shih-Sagar.

00:11.000 --> 00:14.000
I work at Tredad as a senior technical support engineer.

00:14.000 --> 00:17.000
I mainly work on solving open-ended problems,

00:17.000 --> 00:19.000
and I'm also working on solving the problems

00:19.000 --> 00:21.000
in the future.

00:21.000 --> 00:24.000
And I'm working on solving the problems in the future.

00:24.000 --> 00:31.000
So with the recent time and security threats or attacks,

00:31.000 --> 00:34.000
we have seen that container-run Kubernetes adoption

00:34.000 --> 00:36.000
has equally increased.

00:36.000 --> 00:39.000
With that, security has become a biggest concern, right?

00:39.000 --> 00:43.000
So we'll see how Strykerox is paving the way

00:43.000 --> 00:45.000
for Kubernetes native security.

00:45.000 --> 00:48.000
So I'm going to talk about the future of the future.

00:48.000 --> 00:51.000
So I'm going to talk about the future of the future of the future.

00:51.000 --> 00:55.000
And how Strykerox is paving the way for Kubernetes native security

00:55.000 --> 00:59.000
and helping us to achieve or resolve the security issues

00:59.000 --> 01:02.000
with ease and automation.

01:02.000 --> 01:06.000
So this is the brief agenda for today's talk.

01:06.000 --> 01:10.000
So in the first few slides, we'll discuss current state

01:10.000 --> 01:13.000
of Kubernetes security, what are the best practices,

01:13.000 --> 01:19.000
and how DevSecOps benefits into the security posture,

01:19.000 --> 01:22.000
how to shift-left the security for your developers

01:22.000 --> 01:24.000
as well as your security admins.

01:24.000 --> 01:27.000
And then we will see how Strykerox ecosystem

01:27.000 --> 01:31.000
is helping end users, developers, as well as your security teams

01:31.000 --> 01:36.000
to overcome the security issues with ease.

01:36.000 --> 01:42.000
And then we will have some demo at the end.

01:42.000 --> 01:45.000
So first of all, let's understand what is zero-to-security,

01:45.000 --> 01:48.000
why we require zero-to-security, right?

01:48.000 --> 01:52.000
Zero-to-security is basically a framework which requires

01:52.000 --> 01:57.000
all the users to be authenticated and authorized continuously

01:57.000 --> 02:02.000
before they're being granted an access to your application and data.

02:02.000 --> 02:05.000
So if you manage to achieve zero-to-security model,

02:05.000 --> 02:10.000
then I would say that we could resolve or minimize the impact

02:10.000 --> 02:14.000
at the very early stage of your application lifecycle.

02:14.000 --> 02:20.000
Then how exactly zero-to-security fits into the software supply chain?

02:20.000 --> 02:22.000
So what exactly is software supply chain?

02:22.000 --> 02:29.000
It includes everything, everyone and everything that touches your application code

02:29.000 --> 02:32.000
into entire software development lifecycle, right?

02:32.000 --> 02:36.000
It could be your deployment, it could be your final artifact,

02:36.000 --> 02:38.000
it could be your CI-CD pipeline.

02:38.000 --> 02:43.000
So it's essential that we build the application in such a way

02:43.000 --> 02:49.000
that the assurance at every stage of application is being taken seriously.

02:49.000 --> 02:54.000
That way we could achieve the pressure of software supply chain.

02:54.000 --> 02:58.000
So yeah, we can see that securing dependencies,

02:58.000 --> 03:02.000
securing code, securing containers, as well as the infrastructure

03:02.000 --> 03:08.000
are all part of the software supply chain.

03:08.000 --> 03:10.000
Let me ask you this question.

03:10.000 --> 03:13.000
If you are using Kubernetes or in general any applications,

03:13.000 --> 03:18.000
have you ever delayed or slowed down the application deployment into production

03:18.000 --> 03:22.000
due to container security concerns?

03:22.000 --> 03:26.000
Any one of you?

03:26.000 --> 03:31.000
All right, I assume so because that's how we go through application lifecycle.

03:31.000 --> 03:35.000
We deploy the application, then we analyze the application behavior

03:35.000 --> 03:39.000
and we detect the vulnerabilities.

03:39.000 --> 03:43.000
So in the recent trend, we have seen some common factors

03:43.000 --> 03:48.000
or common anti-patterns which were causing delays for an application

03:48.000 --> 03:51.000
to get deployed on the production.

03:51.000 --> 03:55.000
So misconfiguration has topped the percentage.

03:55.000 --> 03:58.000
Following that, we have vulnerabilities to remediate, right?

03:58.000 --> 04:03.000
So for example, we kind of able to detect the vulnerabilities

04:03.000 --> 04:07.000
but somehow we tend to overlook them or we could not assess them accurately.

04:07.000 --> 04:11.000
That leads to the vulnerability.

04:11.000 --> 04:15.000
I mean, we get to know that, okay, vulnerability exists

04:15.000 --> 04:20.000
but there are no proper ways or tooling to fix that kind of vulnerability.

04:20.000 --> 04:23.000
Then we ultimately have security issues at the runtime,

04:23.000 --> 04:31.000
you know, which could be costly or it could affect your entire production.

04:31.000 --> 04:39.000
So how can we make sure that these kind of issues are reduced, let's say?

04:39.000 --> 04:43.000
So in today's world, we need DevSecOps approach.

04:43.000 --> 04:45.000
DevOps, just DevOps isn't enough, right?

04:45.000 --> 04:48.000
We need DevSecOps approach to shift-flave the security

04:48.000 --> 04:52.000
from our traditional security practices.

04:52.000 --> 04:57.000
So DevSecOps helps us define microservices architecture.

04:57.000 --> 05:01.000
It provides us declarative definition to, you know,

05:01.000 --> 05:05.000
harden your security parameters, network policies and deployment conflicts.

05:05.000 --> 05:08.000
It also makes sure that the infrastructure stays immutable

05:08.000 --> 05:12.000
so at the runtime, nobody else is allowed to touch the software

05:12.000 --> 05:17.000
or your application deployment.

05:17.000 --> 05:20.000
At the same time, it is important that we know

05:20.000 --> 05:23.000
Kubernetes native security is increasingly critical

05:23.000 --> 05:30.000
and securing supply chain is also equally essential.

05:30.000 --> 05:33.000
So what are the basic Kubernetes security scan challenges?

05:33.000 --> 05:37.000
So we know that containers are numerous and everywhere.

05:37.000 --> 05:42.000
If I have to put analogy, like we say that everything is a file in Linux.

05:42.000 --> 05:45.000
In a similar way, everything runs in a container

05:45.000 --> 05:47.000
when we talk about Kubernetes, right?

05:47.000 --> 05:51.000
So they may tend to pose compliance challenges.

05:51.000 --> 05:55.000
Every container image is tied up with some of the other container registry, right?

05:55.000 --> 06:00.000
So sometimes we even forget to add TLS-based authentication

06:00.000 --> 06:04.000
to our image registry that may expose security threats

06:04.000 --> 06:08.000
or the internet if at all we expose that.

06:08.000 --> 06:11.000
And we are also aware that containers, by default,

06:11.000 --> 06:14.000
talk to each other without any network policies.

06:14.000 --> 06:19.000
So it is important that we define network policies at the early stages.

06:19.000 --> 06:24.000
And this one, I think most of you can relate that when we talk Kubernetes,

06:24.000 --> 06:26.000
all of the configurations looks pretty easy,

06:26.000 --> 06:30.000
but defaults are usually the less secure, right?

06:30.000 --> 06:34.000
So we as admin or developer have to proactively understand

06:34.000 --> 06:37.000
what configuration or what risk tolerance required

06:37.000 --> 06:42.000
for my organization or developer environment.

06:42.000 --> 06:48.000
So in Kubernetes, application lifecycle span across three phases mainly.

06:48.000 --> 06:52.000
That is build phase, deployment phase, and runtime phase.

06:52.000 --> 06:57.000
So how we can make sure that we secure each and every stage of the application, right?

06:57.000 --> 06:59.000
So when we talk about build phase,

06:59.000 --> 07:04.000
it's important that we isolate the vulnerability of security issue at the earliest.

07:04.000 --> 07:10.000
Otherwise, it would be very costly and risky to detect the vulnerabilities at the runtime, right?

07:10.000 --> 07:14.000
So what we can do, we can use minimal base images

07:14.000 --> 07:18.000
so that we can avoid unnecessary package managers

07:18.000 --> 07:22.000
or any executable programs into your container images.

07:22.000 --> 07:27.000
Then we can always use image scanner to identify known vulnerabilities.

07:27.000 --> 07:31.000
I think identifying vulnerabilities just once is not enough.

07:31.000 --> 07:35.000
You need to make sure that whatever security integration scanner you are using,

07:35.000 --> 07:37.000
that will continuously validate your container images

07:37.000 --> 07:43.000
and send the real-time alerts to your development team as well as security admins.

07:43.000 --> 07:48.000
Then, yes, at the build phase, we need to integrate CI CD pipeline.

07:48.000 --> 07:52.000
So that way, most of the things become automated,

07:52.000 --> 07:55.000
and you don't have to look around each and every build config

07:55.000 --> 07:59.000
to understand where the security issue lies through CI CD pipeline.

07:59.000 --> 08:03.000
If the stage gets filled, your production won't be affected

08:03.000 --> 08:06.000
and build would be stopped over there.

08:06.000 --> 08:10.000
Then at the deployment phase, as I mentioned,

08:10.000 --> 08:13.000
the default deployment config doesn't come with a network policy.

08:13.000 --> 08:19.000
We need to understand what services that deployment is trying to communicate,

08:19.000 --> 08:24.000
what are the ports that are defined in the deployment config,

08:24.000 --> 08:27.000
and accordingly, we can define our own network policies.

08:27.000 --> 08:32.000
Then we also need to make sure that the deployment doesn't allow root level privileges

08:32.000 --> 08:37.000
or any unknown users, user IDs to access your application.

08:37.000 --> 08:42.000
You should be always aware what users are going to access your application.

08:42.000 --> 08:46.000
And then, yes, we can extend the image scanning to deployment phase.

08:46.000 --> 08:51.000
So it's important that we do not restrict our image scanning at the build phase,

08:51.000 --> 08:55.000
but we continue doing that at the deployment phase as well.

08:55.000 --> 09:01.000
Then runtime phase, as I mentioned, we need to extend our scanning at the runtime as well.

09:01.000 --> 09:07.000
So we can easily understand and quickly understand what issues have appeared

09:07.000 --> 09:10.000
and what actions I need to take.

09:10.000 --> 09:16.000
It also helps monitoring network traffic to limit unnecessary or insecure communications.

09:16.000 --> 09:21.000
Then if we find any suspicious activity, and at the same time,

09:21.000 --> 09:24.000
if we have multiple replicas of your application,

09:24.000 --> 09:27.000
then we can compare all the replicas and processes runtime

09:27.000 --> 09:32.000
to understand what anonymous activity is happening.

09:32.000 --> 09:40.000
So to overcome all the challenges, we see Strykerox is helping the end users and the community as well.

09:40.000 --> 09:44.000
So why Strykerox is open source, right?

09:44.000 --> 09:51.000
Red Hat believes open model when it comes to your software or developing the application.

09:51.000 --> 10:00.000
And we believe that open source software can significantly help developers to drive the project with innovation

10:00.000 --> 10:03.000
as well as foster the collaboration within community.

10:03.000 --> 10:08.000
So Strykerox is working towards providing the open source solution,

10:08.000 --> 10:16.000
which will allow end users to decide how they want to protect their Kubernetes clusters.

10:16.000 --> 10:20.000
So let's understand what Strykerox has to offer us.

10:20.000 --> 10:28.000
It enables users to address all significant security cases across entire application lifecycle that we discussed, right?

10:28.000 --> 10:31.000
Right from your build, deployment and runtime.

10:31.000 --> 10:35.000
It also gives you greater visibility over vulnerability management,

10:35.000 --> 10:41.000
configuration management, network segmentation, compliance, threat detection, incident response,

10:41.000 --> 10:45.000
and risk profiling and tolerance.

10:45.000 --> 10:52.000
So Strykerox has a policy engine that allows users to run the policies out of the box,

10:52.000 --> 10:57.000
meaning that let's say if I have a severity with a CVSS score greater than or equal to 7,

10:57.000 --> 11:05.000
then I could have an alert for the same CVSS score and understand what deployments are associated with it.

11:05.000 --> 11:11.000
Then Strykerox API allows users to integrate with the image scanning tools, CI CD tools,

11:11.000 --> 11:15.000
container runtimes of their own choice, secret management, DevOps notification,

11:15.000 --> 11:20.000
to ease security flow end to end.

11:20.000 --> 11:23.000
You can also run it on any cloud or hybrid cloud,

11:23.000 --> 11:30.000
or if you want to choose on-prem, you can deploy it over there.

11:30.000 --> 11:33.000
So this is the bird-eye view architecture, I would say,

11:33.000 --> 11:37.000
where you would see a central in the blue box as a central hub,

11:37.000 --> 11:42.000
which gets exposed over load balancer for the clients to consume the Strykerox API.

11:42.000 --> 11:45.000
It is written in the REST API.

11:45.000 --> 11:48.000
And then we have sensor admission controller collector,

11:48.000 --> 11:52.000
which is logically group and called as a secured cluster, right?

11:52.000 --> 11:56.000
So you can, once you configure this set of components,

11:56.000 --> 11:59.000
you can call a Kubernetes cluster as a secured cluster.

11:59.000 --> 12:05.000
And then you can keep on adding as many Kubernetes clusters as you want into the central.

12:05.000 --> 12:10.000
The central also has scanner, which aggregates the vulnerability feeds

12:10.000 --> 12:13.000
that are fetched from the central.

12:13.000 --> 12:17.000
So central basically collect vulnerabilities feed from option sources

12:17.000 --> 12:20.000
as well as in the database.

12:20.000 --> 12:23.000
Then on each and every node, we would have collector agent,

12:23.000 --> 12:29.000
which will collect host level data for the container network and the runtime.

12:29.000 --> 12:34.000
So this is the UI where, let's say, if I have integrated 100,

12:34.000 --> 12:39.000
100 Kubernetes clusters, then how can I manage or understand

12:39.000 --> 12:40.000
how those are behaving?

12:40.000 --> 12:43.000
What are the healthy components and what are unhealthy?

12:43.000 --> 12:49.000
So we can have a quick look to see how systems are performing.

12:49.000 --> 12:52.000
So what problem set, when Strykerox going to solve?

12:52.000 --> 12:55.000
So these are four problem set statements,

12:55.000 --> 12:59.000
which I found very common between developers and security teams

12:59.000 --> 13:01.000
to understand whether my container contains,

13:01.000 --> 13:03.000
contain compromised infrastructure.

13:03.000 --> 13:05.000
Are there any known vulnerabilities?

13:05.000 --> 13:08.000
Are there any runtime and OS layers contained up to date?

13:08.000 --> 13:13.000
Is my Kubernetes cluster compliant with industry certified security benchmarks?

13:13.000 --> 13:17.000
So let's see how Strykerox solve these problems.

13:17.000 --> 13:23.000
So Strykerox scanner identifies the vulnerabilities in the base image

13:23.000 --> 13:25.000
package that are installed by the package managers,

13:25.000 --> 13:28.000
then programming language specific dependencies,

13:28.000 --> 13:30.000
programming runtime and frameworks.

13:30.000 --> 13:33.000
It supports package formats, which I have mentioned there.

13:33.000 --> 13:38.000
And I believe most of you work with the same package formats.

13:38.000 --> 13:42.000
And there are supported operating systems like Alpy and Amazon,

13:42.000 --> 13:45.000
CentOS, Red Hat and the President.

13:45.000 --> 13:49.000
So managing compliance is equally important for our organizations

13:49.000 --> 13:52.000
to the security standard.

13:52.000 --> 13:55.000
So it supports out of the box compliance standards like CS,

13:55.000 --> 14:00.000
benchmark for Kubernetes Docker, then HIPAA, NIST, PCI.

14:00.000 --> 14:03.000
So you can run scans through this profile.

14:03.000 --> 14:09.000
So Strykerox basically collects snapshot of your Kubernetes cluster.

14:09.000 --> 14:14.000
Then it aggregates the data and analyzes what checks are being passed

14:14.000 --> 14:16.000
and what checks are getting filled.

14:16.000 --> 14:20.000
It will help to evaluate your for the regulatory compliance.

14:20.000 --> 14:24.000
It will help to harden your Docker and underlying container runtime.

14:24.000 --> 14:31.000
So this is the UI where you can see passing percentage across your

14:31.000 --> 14:36.000
cluster, across namespaces, across the nodes, right?

14:36.000 --> 14:42.000
So you can have a better idea where the issue or what compliance

14:42.000 --> 14:43.000
checks are filling.

14:43.000 --> 14:46.000
Accordingly, you can navigate to that in the right section.

14:46.000 --> 14:51.000
Here you will see what controls are filling, what needs to be set.

14:51.000 --> 14:54.000
For example, here I have taken example of CNF files,

14:54.000 --> 14:58.000
which says that the file permission should be more restricted.

14:58.000 --> 15:03.000
You can accordingly take the actions and fix that control.

15:03.000 --> 15:05.000
So what is collector?

15:05.000 --> 15:11.000
Collector overall helps all the Strykerox ecosystem to maintain

15:11.000 --> 15:17.000
and manage the container runtime activities as well as host level processes information.

15:17.000 --> 15:21.000
So it's an agent that runs on every node under strict performance limitations

15:21.000 --> 15:25.000
and gather data via the kernel module or a BPF probes.

15:25.000 --> 15:30.000
It collects, it analyzes and monitor content activity on cluster nodes, right?

15:30.000 --> 15:34.000
It collects information about runtime and network activity and sends

15:34.000 --> 15:36.000
collected data to the sensor.

15:36.000 --> 15:43.000
Sensor will help center to display all the data over the UI.

15:43.000 --> 15:45.000
Okay, we will quickly see.

15:45.000 --> 15:51.000
This is a traditional way of how we used to see at kernel when we

15:51.000 --> 15:53.000
deployed the application, right?

15:53.000 --> 15:56.000
We have user space where user application runs.

15:56.000 --> 16:00.000
And for every resource that we need in user application,

16:00.000 --> 16:02.000
we need system calls.

16:02.000 --> 16:06.000
So when user requests any data, the kernel copies that information

16:06.000 --> 16:08.000
from kernel space to user space.

16:08.000 --> 16:14.000
But due to some limitations, it is not possible for user to access

16:14.000 --> 16:17.000
everything that is into the kernel space, right?

16:17.000 --> 16:22.000
And this was not a problem when we talk about a single Linux source,

16:22.000 --> 16:26.000
but the container adoption, we know that the number of processes

16:26.000 --> 16:29.000
that may run on a Linux source has increased,

16:29.000 --> 16:31.000
the density of containers has increased, right?

16:31.000 --> 16:35.000
So resource overhead managing container issues,

16:35.000 --> 16:38.000
container runtime issues has become a great challenge.

16:38.000 --> 16:42.000
So all these activities require kernel support that we know.

16:42.000 --> 16:44.000
So how do we overcome that?

16:44.000 --> 16:46.000
We can use EBPF probes.

16:46.000 --> 16:47.000
What is that?

16:47.000 --> 16:49.000
It is an extended bucket packet filter, right?

16:49.000 --> 16:51.000
It is not just a packet filter.

16:51.000 --> 16:52.000
It is more than that.

16:52.000 --> 16:56.000
It helps us in networking, pressing, profiling,

16:56.000 --> 16:59.000
observability and monitoring, and security.

16:59.000 --> 17:03.000
I will quickly go ahead because of time constraint.

17:03.000 --> 17:06.000
Then we have network policies.

17:06.000 --> 17:09.000
In Kubernetes, we know that by default network is,

17:09.000 --> 17:11.000
network policies are not there.

17:11.000 --> 17:14.000
We need to define our network policies by our own.

17:14.000 --> 17:16.000
But considering a production grid environment,

17:16.000 --> 17:20.000
it is really difficult to write each and every network policy,

17:20.000 --> 17:25.000
I mean, because sometimes we do not understand what source,

17:25.000 --> 17:28.000
from what source the traffic is coming.

17:28.000 --> 17:30.000
At large scale, it could be difficult, right?

17:30.000 --> 17:36.000
So it provides network graph, network segmentation to understand

17:36.000 --> 17:40.000
or to modify baselines so that we can define, okay,

17:40.000 --> 17:43.000
if traffic is coming from this source,

17:43.000 --> 17:46.000
then this should be blocked or network policy should be created

17:46.000 --> 17:51.000
according to this baseline.

17:51.000 --> 17:55.000
So this provides this.

17:55.000 --> 17:58.000
So, yeah, we cyclops provide a network simulator,

17:58.000 --> 18:01.000
a network policy simulator through which you can understand

18:01.000 --> 18:04.000
what are the active connection from where the connection is coming,

18:04.000 --> 18:09.000
whether it is allowed by the deployment or whether it is anonymous.

18:09.000 --> 18:12.000
Accordingly, you can define your baseline and restricted traffic.

18:12.000 --> 18:15.000
It will help us to create the network policies at the runtime.

18:15.000 --> 18:17.000
So we can just copy that network policy

18:17.000 --> 18:23.000
and configure it in our Kubernetes cluster.

18:23.000 --> 18:25.000
Then we have admission controller.

18:25.000 --> 18:28.000
So it basically helps control to enforce the security policies

18:28.000 --> 18:30.000
before Kubernetes creates workload,

18:30.000 --> 18:33.000
for example, deployment, demonstrates.

18:33.000 --> 18:37.000
It intercepts the API request when any program runs

18:37.000 --> 18:39.000
or application runs into the pod.

18:39.000 --> 18:43.000
So in StackRocks, we use admission controller with security policies

18:43.000 --> 18:48.000
so that any policy gets violated, then it will immediately prevent

18:48.000 --> 18:54.000
the deployment from getting into running straight.

18:54.000 --> 18:59.000
Okay, so I'll quickly show a demo where I have given an example

18:59.000 --> 19:05.000
of log forces for Shell CV and to understand

19:05.000 --> 19:08.000
how it can prevent the deployment.

19:08.000 --> 19:27.000
Just let me show it quickly.

19:27.000 --> 19:29.000
I hope screen is visible.

19:29.000 --> 19:39.000
Yeah, so this is the cluster dashboard

19:39.000 --> 19:41.000
where I can see images at the most risk,

19:41.000 --> 19:46.000
what are the policies, current policies violated.

19:46.000 --> 19:49.000
So StackRocks provides some default policies

19:49.000 --> 19:54.000
as per the best practices pertaining to the security posture.

19:54.000 --> 19:57.000
So considering the criticality of the log forces,

19:57.000 --> 20:01.000
we have included this policy as well.

20:01.000 --> 20:04.000
So you can configure policies into two modes,

20:04.000 --> 20:06.000
inform as well as enforce.

20:06.000 --> 20:08.000
So currently, if I look at this policy,

20:08.000 --> 20:11.000
it is into inform mode only.

20:11.000 --> 20:34.000
So I have edited it and make it enforce.

20:34.000 --> 20:40.000
Yeah, so it executes on build stage, deployment stage.

20:40.000 --> 20:46.000
I marked inform and enforce and enable it for the deployment phase.

20:46.000 --> 20:50.000
So once the policy created, it will show whether any existing

20:50.000 --> 20:54.000
deployments are violating this policy or not.

20:54.000 --> 20:57.000
Then for the demonstration purpose,

20:57.000 --> 21:00.000
I have run a vulnerable deployment which has this log

21:00.000 --> 21:06.000
for Shell CV80.

21:06.000 --> 21:14.000
So this container image has the vulnerable app.

21:14.000 --> 21:17.000
So in the parallel terminal, I have

21:17.000 --> 21:27.000
keep a watch to trace the events in the runtime.

21:27.000 --> 21:30.000
So as soon as I create this deployment,

21:30.000 --> 21:34.000
you will see that the ports are getting terminated because

21:34.000 --> 21:35.000
of the policy violation.

21:35.000 --> 21:38.000
So it won't allow the port to get into a running state

21:38.000 --> 21:43.000
because of policy violation.

21:43.000 --> 21:46.000
And in the events, you will see that stack

21:46.000 --> 21:48.000
document enforcement has been detected,

21:48.000 --> 21:58.000
and the deployment has been scaled to zero.

21:58.000 --> 22:02.000
OK, time is up.

22:02.000 --> 22:04.000
I have one more demo, quick demo, if you would like to see.

22:04.000 --> 22:07.000
Let me know.

22:07.000 --> 22:08.000
Quick demo, yeah.

22:08.000 --> 22:15.000
That would be interesting.

22:15.000 --> 22:19.000
So in this demo, I have explained how we can leverage the DevSecOps

22:19.000 --> 22:21.000
approach to shift the security.

22:21.000 --> 22:25.000
For that, I have used Tekton in the pipeline operator,

22:25.000 --> 22:27.000
which is deploying an open shift.

22:27.000 --> 22:30.000
So this operator is nothing but using Tekton framework

22:30.000 --> 22:31.000
under the hood.

22:31.000 --> 22:36.000
Let's see it quickly.

22:36.000 --> 22:38.000
So it provides a standard CI-CD pipeline definition

22:38.000 --> 22:40.000
in a declarative approach, right?

22:40.000 --> 22:43.000
So we can define the task as well as pipeline,

22:43.000 --> 22:47.000
which further than can be portable across all your Kubernetes

22:47.000 --> 22:49.000
infrastructure.

22:49.000 --> 22:53.000
So I have defined this three tasks where images,

22:53.000 --> 22:57.000
image will be checked and scanned.

22:57.000 --> 23:00.000
In the task, in the background, it is calling a StackRox API

23:00.000 --> 23:02.000
through rockctl.

23:02.000 --> 23:04.000
It's same as kubectl.

23:04.000 --> 23:09.000
It talks with the StackRox API and performs the scanning

23:09.000 --> 23:15.000
for the image.

23:15.000 --> 23:17.000
So these two tasks I have mentioned in the pipeline

23:17.000 --> 23:20.000
definition image check and image scan.

23:20.000 --> 23:23.000
And there is one more secret where I have provided StackRox

23:23.000 --> 23:29.000
API endpoint and the credential.

23:29.000 --> 23:32.000
Yeah.

23:32.000 --> 23:39.000
So we'll create a namespace called pipeline demo.

23:39.000 --> 23:43.000
Then I have created secret as well as the pipeline definition.

23:43.000 --> 23:49.000
Next, we will execute those tasks.

23:49.000 --> 23:54.000
We'll switch to development mode and see that pipeline

23:54.000 --> 23:55.000
has been defined, OK?

23:55.000 --> 23:59.000
So these two tasks are there.

23:59.000 --> 24:01.000
Pipeline run is not initiated yet.

24:01.000 --> 24:04.000
So we'll initiate the pipeline run.

24:04.000 --> 24:07.000
We'll pass the container image that we want to scan.

24:07.000 --> 24:15.000
For example, here I have provided MySQL 80.

24:15.000 --> 24:16.000
So pipeline has been created.

24:16.000 --> 24:21.000
You can check the logs, real-time logs, through tecton.

24:21.000 --> 24:26.000
It provides a client for tecton through which you can perform

24:26.000 --> 24:33.000
the operations.

24:33.000 --> 24:36.000
So it also gives you better visibility if in case your

24:36.000 --> 24:37.000
tasks are failing.

24:37.000 --> 24:40.000
For example, here my credentials were expired.

24:40.000 --> 24:42.000
So I had to refresh the credentials and then I ran

24:42.000 --> 24:49.000
the pipeline.

24:49.000 --> 24:54.000
Now we will see the pipeline gets into running state.

24:54.000 --> 24:56.000
The tasks has been passed.

24:56.000 --> 25:01.000
Now we will see all the CV that are associated with this

25:01.000 --> 25:03.000
particular container images.

25:03.000 --> 25:08.000
You can get each and every CV ID, each CVSS code, and you can

25:08.000 --> 25:13.000
accordingly share those security with the security admin.

25:13.000 --> 25:16.000
You can also check policy violation through image check

25:16.000 --> 25:22.000
task to understand what policies have been violated, what are

25:22.000 --> 25:26.000
their ratings, whether those are rated as low or moderate

25:26.000 --> 25:29.000
or risky.

25:29.000 --> 25:32.000
Yes.

25:32.000 --> 25:42.000
That is it.

25:42.000 --> 25:48.000
So I have put some resources for you to go ahead and get

25:48.000 --> 25:51.000
started with the community project.

25:51.000 --> 25:54.000
You can also hop into our Slack channel.

25:54.000 --> 25:58.000
And, yes, that is it from my side.

25:58.000 --> 26:09.000
So do we have some questions here?

26:09.000 --> 26:12.000
Thanks for the excellent presentation.

26:12.000 --> 26:15.000
I have one question regarding you mentioned a lot about the

26:15.000 --> 26:17.000
agent which is kind of scanning and detecting the

26:17.000 --> 26:18.000
vulnerabilities.

26:18.000 --> 26:21.000
You briefly touched upon the object central.

26:21.000 --> 26:26.000
I think if I understand correctly, you pushing that

26:26.000 --> 26:30.000
detection of vulnerabilities into the central, is that right?

26:30.000 --> 26:31.000
Yes.

26:31.000 --> 26:35.000
So central fetches the vulnerability feeds from the

26:35.000 --> 26:36.000
option sources.

26:36.000 --> 26:39.000
Or let's say you have a database.

26:39.000 --> 26:42.000
So every five minutes it will keep on checking what

26:42.000 --> 26:45.000
vulnerabilities are present in the option.

26:45.000 --> 26:48.000
So accordingly, once in download, then the collector or

26:48.000 --> 26:52.000
the sensor fetches those data into your respective

26:52.000 --> 26:53.000
Kubernetes cluster.

26:53.000 --> 26:57.000
So what if when the container is running, the pod is running

26:57.000 --> 27:03.000
and suddenly the agent checks the vulnerability database and

27:03.000 --> 27:07.000
detects possibly that the version running in the pod has

27:07.000 --> 27:09.000
having some critical vulnerability.

27:09.000 --> 27:12.000
What actions would it do, actually?

27:12.000 --> 27:16.000
It actually depends on us what actions we want the admission

27:16.000 --> 27:17.000
controller to perform.

27:17.000 --> 27:22.000
Either we can have it in formal so that we understand, okay,

27:22.000 --> 27:23.000
policy is violated.

27:23.000 --> 27:27.000
But whether that is really affecting my workload or the

27:27.000 --> 27:29.000
runtime, accordingly we can take actions.

27:29.000 --> 27:33.000
If we want strictly not to allow any deployment to run as

27:33.000 --> 27:36.000
soon as the policy is violated, we can put it into

27:36.000 --> 27:37.000
enforce mode.

27:37.000 --> 27:40.000
And we can decide at what stage we want to terminate that.

27:40.000 --> 27:43.000
At the build stage, deploy stage, or at the runtime.

27:43.000 --> 27:45.000
It's basically based on your policy.

27:45.000 --> 27:46.000
Yes, yes, yes.

27:46.000 --> 27:51.000
And the central is kind of accessible by is it like a

27:51.000 --> 27:55.000
closed environment or it is open where anywhere anyone can

27:55.000 --> 27:56.000
access that.

27:56.000 --> 28:01.000
It can be configured in online mode as well as air gap

28:01.000 --> 28:02.000
environment.

28:02.000 --> 28:06.000
So again, it depends on your organizational requirements,

28:06.000 --> 28:08.000
how you want to install it.

28:08.000 --> 28:11.000
In terms of offline mode, you can always download those

28:11.000 --> 28:16.000
vulnerability fields or kernel probes modules in your secure

28:16.000 --> 28:20.000
host and then you can inject those to center offline.

28:20.000 --> 28:22.000
That option is also there.

28:22.000 --> 28:23.000
Thank you.

28:23.000 --> 28:26.000
Any other questions?

28:26.000 --> 28:27.000
Yes.

28:27.000 --> 28:31.000
I just have a question.

28:31.000 --> 28:35.000
Can you use Stack Rocks as a honey pot?

28:35.000 --> 28:41.000
I mean, can you just let the intruder or the security thing

28:41.000 --> 28:46.000
to go to actually get a like a description of all the things

28:46.000 --> 28:51.000
it's doing, the attacker instead.

28:51.000 --> 28:55.000
So let's say you not just cut it because you just right now

28:55.000 --> 28:59.000
basically applying a policy, you're cutting the thing.

28:59.000 --> 29:03.000
But can you let it just isolate the container and let it run

29:03.000 --> 29:07.000
just to have four and six out of it, see how things are

29:07.000 --> 29:09.000
behaving?

29:09.000 --> 29:13.000
Yeah, other than policies, we can always do the risk analysis.

29:13.000 --> 29:18.000
Sometimes it happens that vulnerability that may found

29:18.000 --> 29:21.000
as a critical, but in terms of my application, I might not

29:21.000 --> 29:25.000
have that vulnerable code at the runtime stage, right?

29:25.000 --> 29:28.000
So I can always mark that vulnerability as a false

29:28.000 --> 29:34.000
positive or I can defer that vulnerability.

29:34.000 --> 29:36.000
Does that answer your question or you have something else?

29:36.000 --> 29:38.000
Yeah, I mean, as long as you can get, I mean, sometimes

29:38.000 --> 29:42.000
the scenario is that you have the port actually in production

29:42.000 --> 29:46.000
and something happens to it and you want to actually isolate

29:46.000 --> 29:48.000
it, but you still want to have four and six.

29:48.000 --> 29:50.000
You don't want to just cut it.

29:50.000 --> 29:52.000
You just want to understand the attack.

29:52.000 --> 29:54.000
That is my...

29:54.000 --> 29:57.000
Yeah, so in terms of isolation, it gives us a rich context

29:57.000 --> 30:01.000
from the UI at what layer the vulnerability is present.

30:01.000 --> 30:04.000
For example, we can inspect each and every docker layer.

30:04.000 --> 30:09.000
It allows us to see at what component the vulnerability exists.

30:09.000 --> 30:13.000
So you can always modify the image.

30:13.000 --> 30:19.000
You can build it again and patch the changes.

30:19.000 --> 30:20.000
Thank you for the question.

30:20.000 --> 30:21.000
Thank you for the talk.

30:21.000 --> 30:23.000
I think we are out of the time.

30:23.000 --> 30:52.000
Thank you.

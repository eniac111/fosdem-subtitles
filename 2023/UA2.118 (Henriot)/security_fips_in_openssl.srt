1
0:00:00.000 --> 0:00:07.000
the security room. Um next speaker is Dimitri Veljatski. He's talking about OpenCell in

2
0:00:07.000 --> 0:00:14.000
RAL, uh FIPS 140-3 certification. Hello, do you hear me well? Yeah, looks like that. Uh first, who am I? My name is Dimitri

3
0:00:14.000 --> 0:00:21.000
Veljatski. I work in Red Hat as a senior software engineer. I also am OpenCell Committer since

4
0:00:21.000 --> 0:00:28.000
the year 2019 and since the year 2021 I am a member of OpenCell Committer since the year

5
0:00:51.000 --> 0:00:58.000
2019. I'm a member of OpenCell Technical Committee. It's a group of people that manage the project,

6
0:00:58.000 --> 0:01:05.000
the OpenCell project from the technical point of view. My beloved pet project is also related

7
0:01:05.600 --> 0:01:12.600
to OpenCell. It's Russian ghost script implementation. Okay, let's go to the topic. First, what we

8
0:01:12.600 --> 0:01:19.600
shall speak in the first part is what's FIPS, what's FIPS certification, what's certified

9
0:01:27.400 --> 0:01:34.400
from FIPS for FIPS in Red Hat and the OpenCell brief introduction into OpenCell 3.0 architecture

10
0:01:34.400 --> 0:01:41.400
changes. So FIPS is a set of standards, American national standards, requiring which cryptography

11
0:01:52.000 --> 0:01:59.000
and in which limitations should be used. It consists of a series of documents. Some documents

12
0:01:59.000 --> 0:02:06.000
are available public. Some should be bought in the NIST. Some should be bought in the ESO.

13
0:02:09.000 --> 0:02:16.000
These documents are permanently updated. So you should consider the FIPS set of documents

14
0:02:16.000 --> 0:02:27.000
as a code of laws. It is as consistent as code of laws. It leaves subspace for interpretation.

15
0:02:28.000 --> 0:02:35.000
Nobody knows it all. So there are always discussions how to interpret this or that point of the

16
0:02:35.000 --> 0:02:45.000
document. So on and so forth. FIPS certification process is done by some accredited labs that

17
0:02:46.000 --> 0:02:54.000
get the sources from some company that pretends that the code is certifiable. So the code

18
0:02:54.000 --> 0:03:04.000
is set up. They do quite comprehensive tests. Some of them are public. Some of them are not.

19
0:03:05.000 --> 0:03:13.000
Then they return back to us with notes like you should fix this and that. Then we go to

20
0:03:13.000 --> 0:03:25.000
the next iteration. And then the process, if we are lucky, we get the FIPS certificate.

21
0:03:26.000 --> 0:03:34.000
FIPS certificate is necessary for using system in many American government institutes for

22
0:03:34.000 --> 0:03:44.000
many big customers. And again, it provides very good recommendation from security points of view.

23
0:03:45.000 --> 0:03:53.000
So if you use FIPS certified software, it means that you are on the safe side from the security

24
0:03:54.000 --> 0:04:01.000
point of view. Current version of the standard is FIPS 140. That's the first version of the

25
0:04:01.000 --> 0:04:13.000
standard is FIPS 140.3. We in Red Hat certify our distributions for FIPS for several versions.

26
0:04:14.000 --> 0:04:27.000
We usually certify our kernel and several crucial libraries such as an SS, a LIGGICRETE,

27
0:04:27.000 --> 0:04:37.000
LIGGIT, LIGGIT, LIS, and of course OpenSSL. We have a nice blog post explaining what

28
0:04:38.000 --> 0:04:47.000
we certified for Ralot 8. And the approach for Ralot 9 will be basically the same. It's

29
0:04:48.000 --> 0:04:55.000
still ongoing process. So sorry, it's always a problem how to properly add a link in the

30
0:04:55.000 --> 0:05:01.000
presentation. I believe that you can download the presentation from slide or just find the

31
0:05:02.000 --> 0:05:04.000
blog post by the title.

32
0:05:07.000 --> 0:05:18.000
The support of FIPS in OpenSSL has a long history. It has native support in 1.0 series of OpenSSL,

33
0:05:18.000 --> 0:05:25.000
which is currently long out of support. In 1.0 series, there was a set of invasive

34
0:05:26.000 --> 0:05:33.000
runtime checks. If we are in FIPS mode, then please do that. This algorithm is allowed,

35
0:05:34.000 --> 0:05:41.000
this is not, and so on and so forth. Upstream did not provide the native support in 1.1.1

36
0:05:41.000 --> 0:05:51.000
series, but we had explained the original patches. So FIPS support in OpenSSL 1.1.0

37
0:05:52.000 --> 0:05:59.000
series in Ralot was basically a set of patches for libcrypt and libSSL with even more invasive

38
0:05:59.000 --> 0:06:12.000
runtime checks. In OpenSSL 3.0, 3.0, the upstream decided that the model with invasive checks

39
0:06:13.000 --> 0:06:21.000
is badly maintainable, and they redesigned the architecture from scratch and created

40
0:06:21.000 --> 0:06:28.000
so-called provider models. All algorithms are implemented via separate plugins named

41
0:06:29.000 --> 0:06:35.000
provider, and one of these providers, the most important for our purpose is the FIPS one

42
0:06:36.000 --> 0:06:45.000
that contains only FIPS compatible algorithms that build from the same sources with compile

43
0:06:45.000 --> 0:06:53.000
time checks. It's individual library, so we also simplify only this library, not libcrypt

44
0:06:54.000 --> 0:07:02.000
or libSSL as a whole, that also simplifies the process of applying some changes. And

45
0:07:02.000 --> 0:07:14.000
to be sure that you are FIPS compatible, you should use only relevant API, and it costs

46
0:07:15.000 --> 0:07:22.000
a massive open access API duplication in 3.0. So if you pretend that your application is

47
0:07:23.000 --> 0:07:30.000
FIPS compatible, please don't use deprecated API. If you are a software developer, just

48
0:07:30.000 --> 0:07:43.000
add the warning for using a deprecated API. So now let's talk about our patches. Upstream

49
0:07:44.000 --> 0:07:56.000
FIPS provider was designed to match previous version of the FIPS 140-2, and we wanted to

50
0:07:56.000 --> 0:08:08.000
adjust it so it would match FIPS 140-3. Let's begin with the initialization of the library.

51
0:08:09.000 --> 0:08:17.000
Upstream approach implies that FIPS provider is loaded via configuration file, and the

52
0:08:17.000 --> 0:08:30.000
checksum, which is necessary to be sure that provider is the same we want to use, is a part

53
0:08:31.000 --> 0:08:38.000
of this configuration file. This approach was found suboptimal for our purposes because

54
0:08:38.000 --> 0:08:48.000
we can detect that the system as a whole is in FIPS mode. So when we see that Red Hat-based

55
0:08:49.000 --> 0:08:58.000
system is in FIPS mode, we automatically load and activate the FIPS provider. We also get

56
0:08:58.000 --> 0:09:09.000
rid of external checksum. We embed the checksum into the provider, and it significantly reduces

57
0:09:10.000 --> 0:09:19.000
the problem when the checksum is in a separate file or in the integration file. It can be

58
0:09:19.000 --> 0:09:29.000
damaged or just forgotten to copy the file, and it causes unpredictable diagnostics. So

59
0:09:30.000 --> 0:09:36.000
when you have checksum embedded into the provider, everything is much simpler from a maintainability

60
0:09:36.000 --> 0:09:48.000
point of view. And also we removed several algorithms from the FIPS provider. Well, I

61
0:09:49.000 --> 0:09:58.000
will speak about it some minutes later, some slides later. What is the next change we implemented

62
0:09:58.000 --> 0:10:11.000
in our FIPS provider is indicators. Indicators is a new requirement of FIPS 140-3 standard.

63
0:10:12.000 --> 0:10:23.000
We have too many algorithms. They can be combined in too many ways, and not all of the combinations

64
0:10:23.000 --> 0:10:37.000
are approved. So we should use only approved combinations. First, well, there are two possible

65
0:10:38.000 --> 0:10:44.000
approaches. We call it implicit indicators and explicit indicators. The implicit indicators

66
0:10:44.000 --> 0:10:56.000
implies that if you perform the crypto operation and it succeeded, then you are on the safe

67
0:10:57.000 --> 0:11:05.000
side. Unfortunately, as I mentioned before, some combinations of permitted crypto algorithms,

68
0:11:05.000 --> 0:11:14.000
crypto primitives are not permitted by FIPS as a whole. So we had to partly switch to explicit

69
0:11:15.000 --> 0:11:21.000
indicators. The approach with explicit indicators is you try a crypto operation. If you failed,

70
0:11:22.000 --> 0:11:28.000
assuming it was properly set up, then it wasn't approved. If it succeeded, then you probably,

71
0:11:28.000 --> 0:11:38.000
it's well-documented, should check the indicator and see if it's permitted from the FIPS point

72
0:11:39.000 --> 0:11:52.000
of view. Well, this approach is better from several points of view. First, it covers the

73
0:11:52.000 --> 0:12:01.000
caveats when you have a legal combination. And second, well, in real life software, you can use

74
0:12:02.000 --> 0:12:14.000
FIPS non-approved cryptogarism for non-cryptographical purposes, such as MD5 for as a fast enough

75
0:12:14.000 --> 0:12:24.000
cache sub of files. So application knows better what is the purpose of the algorithm usage

76
0:12:26.000 --> 0:12:37.000
sometimes. So we implemented some combination of explicit and implicit indicators. And some

77
0:12:37.000 --> 0:12:47.000
implementation details. Well, we removed the adverse curves from our provider. It was done

78
0:12:48.000 --> 0:12:56.000
because when we were tuning our provider, adverse curves were not permitted for usage in FIPS,

79
0:12:56.000 --> 0:13:06.000
but well, the use of yesterday, the standard that allowed using adverse curves, curve 255.19

80
0:13:07.000 --> 0:13:16.000
and the curves, curve AD448 are permitted. So we probably will have to consider if we

81
0:13:17.000 --> 0:13:24.000
switch these curves on or we'll switch it in some upcoming versions because there is much interest

82
0:13:24.000 --> 0:13:36.000
to discuss. We also removed support of RSA-PQC-S1 encryption in FIPS provider, which is potentially

83
0:13:37.000 --> 0:13:45.000
breaking changes and we are aware of some of our applications that have had to change the RSA

84
0:13:45.000 --> 0:13:56.000
encryption model from PQC-S1 to OAP. And we removed the triple S support from FIPS provider.

85
0:13:58.000 --> 0:14:06.000
One more change we had to implement, also a requirement of new FIPS standard is switching

86
0:14:06.000 --> 0:14:16.000
to non-unser tests for the RSA signatures. The RSA signatures require using a random number,

87
0:14:17.000 --> 0:14:27.000
so every new signature has a different value if you properly implemented the algorithm.

88
0:14:27.000 --> 0:14:41.000
If you use the same random values for the signature, it means the attacker will be able to find out

89
0:14:42.000 --> 0:14:52.000
your private key, so it's dangerous. So we had to add a patch that allows in the test mode

90
0:14:52.000 --> 0:15:02.000
specifying well-known hard-coded random value just for test purposes. We know that upstream

91
0:15:03.000 --> 0:15:11.000
in its upcoming version of the provider used a different approach. They used the predictable

92
0:15:11.000 --> 0:15:23.000
random number generator and probably it's a better approach, we will think about it on some

93
0:15:24.000 --> 0:15:33.000
respine of our certification. Also, new standard implies some strict changes for key derivation

94
0:15:33.000 --> 0:15:42.000
functions. It limits the seeds. You should not use the seeds shorter than 112 bits for

95
0:15:43.000 --> 0:15:55.000
most of the KDF functions. And also it specifies sub-requirements to accept the random number

96
0:15:55.000 --> 0:16:05.000
generators which were not implemented in the upstream provider, so only shell2 functions

97
0:16:06.000 --> 0:16:13.000
are basically allowed for the hash-based random number generators, and all providers support

98
0:16:14.000 --> 0:16:20.000
these requirements. One more change worth mentioning is that according to the 5th 140-3

99
0:16:20.000 --> 0:16:30.000
requirements, it's necessary to clean up memory not only after using private keys but also

100
0:16:31.000 --> 0:16:42.000
for public keys, and there should be consistency checks for freshly generated public keys from private keys.

101
0:16:42.000 --> 0:16:53.000
And the last two points is about other patches in RHEL that are not related directly to FIPS.

102
0:16:54.000 --> 0:17:00.000
They are about overall hardening. We have implemented so-called crypto policies in RHEL 8.

103
0:17:01.000 --> 0:17:07.000
It's a way to ensure that all the crypto libraries and all the applications using these crypto libraries

104
0:17:07.000 --> 0:17:16.000
are consistent from the point of view of algorithms that are permitted to use.

105
0:17:17.000 --> 0:17:32.000
Also, as the FIPS 140-3 standard requires formal allows using shavanko signatures, we remove the support

106
0:17:32.000 --> 0:17:42.000
of it in our FIPS provider because of, well, you can't really rely on security properties of shavanko.

107
0:17:43.000 --> 0:17:58.000
And it may cause problems to application developers, and some application developers have already complained about it.

108
0:17:58.000 --> 0:18:05.000
But please don't use shavanko signatures. It's just and secure.

109
0:18:06.000 --> 0:18:13.000
Okay, thank you. Thank you for your invitation. Feel free to ask questions about the details.

110
0:18:13.000 --> 0:18:31.000
Hey, so you said you're using the provider API for the FIPS stuff. Now, what I was wondering, not all of the

111
0:18:32.000 --> 0:18:38.000
OpenSSL API gets routed through the provider, right? So what I'm doing about packages like SSH that are using

112
0:18:38.000 --> 0:18:42.000
old API, those don't work with FIPS, right?

113
0:18:43.000 --> 0:18:51.000
Well, yes, not all the application use the new API. I correctly understand your question.

114
0:18:52.000 --> 0:18:59.000
Well, my question is, to use that, I need to use the new EVP underscore API, right?

115
0:18:59.000 --> 0:19:14.000
Well, yes, you need to use the EVP underscore API, but it's, well, I don't think you should call it new because it exists for more than 10 years.

116
0:19:15.000 --> 0:19:18.000
That's right. But as like OpenSSL does not use that.

117
0:19:18.000 --> 0:19:29.000
Yes, it's my pain as a maintainer of OpenSSL. We are writing OpenSSL in downstream to use the new API to make it FIPS compatible.

118
0:19:30.000 --> 0:19:32.000
Oh, yeah, that's what I wanted to know. Thanks.

119
0:19:32.000 --> 0:19:47.000
In which of your Red Hat distribution are you supporting this and I guess you don't have backwards compatibility with older applications for OpenSSL.

120
0:19:48.000 --> 0:19:51.000
It only works with FIPS compliant applications, right?

121
0:19:52.000 --> 0:19:54.000
Sorry? Again?

122
0:19:54.000 --> 0:20:02.000
Yeah. Which of your Red Hat distribution supports the FIPS standard? One.

123
0:20:03.000 --> 0:20:15.000
And two, how do you do with backwards compatibility because I guess applications that are not FIPS compliant won't run with your OpenSSL API.

124
0:20:15.000 --> 0:20:27.000
So I'm talking now about a real nine series, but we have we have certificates for a real eight series for a previous version of the standard.

125
0:20:27.000 --> 0:20:48.000
For about the application that use all the PI. Well, as I mentioned before, it's a common approach to provide downstream patches and pull this patches upstream to make this to make the application use the new API.

126
0:20:48.000 --> 0:21:07.000
It's the only possible way. Well, I participated in pushing libfido2 for example, we have downstream patches for OpenSSL, but it also should be libfido2 compatible and it adds problem.

127
0:21:08.000 --> 0:21:12.000
But the general approach is to implement a downstream patch and push it upstream.

128
0:21:12.000 --> 0:21:20.000
Okay. Any other questions? Hands up. No one.

129
0:21:21.000 --> 0:21:26.000
Okay. Thank you very much. Feel free to contact me directly.

130
0:21:36.000 --> 0:21:37.000
Thank you.

131
0:21:37.000 --> 0:21:41.000
Thank you. Much nice.


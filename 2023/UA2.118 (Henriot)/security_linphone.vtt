WEBVTT

00:00.000 --> 00:01.000
Thank you.

00:01.000 --> 00:02.000
My name is Johan Pascal.

00:02.000 --> 00:03.000
I've been contributing on the Linphone project for the past ten years, more or less, and

00:03.000 --> 00:18.680
going to talk about the introduction of post-contem cryptography in the voice of our IP source phone.

00:18.680 --> 00:19.680
So quickly the agenda.

00:19.680 --> 00:20.680
First, some context.

00:20.680 --> 00:24.920
Then we'll dive into the RTP protocol.

00:24.920 --> 00:30.320
And then how we had to modify it to use post-contem cryptography.

00:30.320 --> 00:38.520
Then a few words about hybrid post-contem and classic key exchange and some conclusion.

00:38.520 --> 00:41.640
So first, some context.

00:41.640 --> 00:42.640
Advertising for Linphone first.

00:42.640 --> 00:47.040
It's a project which is around for now more than 20 years.

00:47.040 --> 00:49.360
It's available on lots of platforms.

00:49.360 --> 00:55.520
The idea is that we have a common library and then on top of that, different applications

00:55.520 --> 00:58.280
for different platforms.

00:58.280 --> 01:01.520
It's tried to use at most SIP standards and everything standardized.

01:01.520 --> 01:02.880
I have seen so on.

01:02.880 --> 01:05.400
For audio, video, instant messaging.

01:05.400 --> 01:07.440
We also provide secure group messaging.

01:07.440 --> 01:13.680
It's based on a derivative of single protocol that we presented years ago.

01:13.680 --> 01:19.400
We also provide a SIP proxy which is called Flexi SIP, also open source.

01:19.400 --> 01:20.400
Everything is open source.

01:20.400 --> 01:30.240
And I encourage you to use our free service on SIP which is SIP.linphone.com.

01:30.240 --> 01:37.040
So basically, I don't know if you're familiar with VoIP, but basically you have two streams

01:37.040 --> 01:38.040
of data.

01:38.040 --> 01:42.440
First stream is a signaling path which connects the endpoints together.

01:42.440 --> 01:47.320
And then you have the media stream which actually sends data, video, audio encrypted.

01:47.320 --> 01:49.680
And this one we end to encrypt.

01:49.680 --> 01:55.240
So how it works, there is an RFT for that and a protocol which is called SRTP.

01:55.240 --> 01:58.200
And SRTP is symmetric encryption.

01:58.200 --> 02:02.880
So far we are not very concerned by quantum computers.

02:02.880 --> 02:06.840
Main problem with that is that it occupies an external command engine.

02:06.840 --> 02:09.760
So we have to exchange our symmetric keys.

02:09.760 --> 02:11.840
So for that we have three choices.

02:11.840 --> 02:14.320
The historical one is called SDS.

02:14.320 --> 02:20.160
So on this one, the keys are transmitted in the signaling path which if the signaling

02:20.160 --> 02:25.000
path is protected, which is normally the case by TLS, is okay.

02:25.000 --> 02:30.800
The only weakness is that the SIP proxy gets access to the symmetric keys.

02:30.800 --> 02:33.720
So we are not actually end to end encrypted.

02:33.720 --> 02:39.480
So basically people running the service could decrypt your media stream.

02:39.480 --> 02:44.760
So there is another one which also gets an RFT which is called DTLS SRTP.

02:44.760 --> 02:51.120
Basically on this one, on the media stream you perform a TLS and check, actually a DTLS

02:51.120 --> 02:53.640
and check because it's over UDP.

02:53.640 --> 02:59.960
And this one works well but you have to deploy PKI and you have to manage certificates for

02:59.960 --> 03:02.200
all of your clients and everything.

03:02.200 --> 03:04.880
So it's a bit heavy.

03:04.880 --> 03:06.920
And also you still have to trust someone.

03:06.920 --> 03:10.120
I mean you trust certificates, sure, but still.

03:10.120 --> 03:12.120
And then there is another one that we favor.

03:12.120 --> 03:14.680
Well, all three are available and in front.

03:14.680 --> 03:20.240
But the last one which is called ZRTP, which is one we'll focus on this one today.

03:20.240 --> 03:26.920
And this one on the media path you perform ZRTP protocol which is based on DFLMAN which

03:26.920 --> 03:30.640
using electric curve or a simple DFLMAN.

03:30.640 --> 03:34.880
This one has no salt part of your grade, so which is good.

03:34.880 --> 03:41.000
The only small thing is that you have to confirm, make some kind of spicing that you have to

03:41.000 --> 03:42.400
tell secret code on the phone.

03:42.400 --> 03:45.200
But as you are talking, one with each other.

03:45.200 --> 03:51.080
For the end user it's a bit an annoyance but you have to read once in the world call history

03:51.080 --> 03:53.600
with your other endpoint.

03:53.600 --> 03:56.560
So we think it's acceptable for users.

03:56.560 --> 03:59.560
Obviously one has to get involved in security.

03:59.560 --> 04:01.360
But normally it works.

04:01.360 --> 04:09.240
The experience tells that people focused on security tends to not be driven away by this

04:09.240 --> 04:13.240
small drawback of the protocol.

04:13.240 --> 04:17.720
So it's an Earthie which is now more than 10 years old.

04:17.720 --> 04:23.400
It has been mainly written by Phil Zimaman, the guy behind PGP, which are always focused

04:23.400 --> 04:26.000
on avoiding salt parties.

04:26.000 --> 04:31.480
And it's probably different properties.

04:31.480 --> 04:36.640
I won't explain the key continuity and stuff because this one is unchanged.

04:36.640 --> 04:41.160
And we'll focus on men in the middle attack detection.

04:41.160 --> 04:44.560
So first a small reminder of what is DFLMAN.

04:44.560 --> 04:48.600
So basically it's a protocol where it's completely symmetric.

04:48.600 --> 04:53.920
One part, most part will generate key pair and send the exchange public keys and with

04:53.920 --> 04:58.640
this secret key and other side public keys we'll get to share secret.

04:58.640 --> 05:01.120
So for us it's kind of easy.

05:01.120 --> 05:06.720
Only drawback is it's obviously vulnerable as many key exchange protocol to manage middle

05:06.720 --> 05:07.720
attack.

05:07.720 --> 05:15.080
So main middle attack what it is is basically someone putting herself in the middle and

05:15.080 --> 05:17.680
exchanging keys with both sides.

05:17.680 --> 05:19.640
Exchanging keys with both sides.

05:19.640 --> 05:25.480
So the side cannot know, basically Alice cannot know that Eve is sending her key.

05:25.480 --> 05:30.000
She thinks that Bob is sending the key and she performs the exchange and at the end what

05:30.000 --> 05:34.280
you get is that Alice gets shared secret with Eve and Eve gets another shared secret with

05:34.280 --> 05:40.240
Bob but Alice is convinced that she exchange keys with Bob and she has no ways to actually

05:40.240 --> 05:42.120
detect this.

05:42.120 --> 05:45.120
She has actually some ways.

05:45.120 --> 05:50.120
No?

05:50.120 --> 05:53.120
Yeah?

05:53.120 --> 05:56.120
Okay.

05:56.120 --> 05:59.120
Yeah, sorry.

05:59.120 --> 06:05.400
So the RTPN check is the first phase of discovery.

06:05.400 --> 06:09.800
So what is happening is both endpoints will exchange their capability, their choice of

06:09.800 --> 06:15.720
preferred algorithm stuff like this and then start the actual RTPN check.

06:15.720 --> 06:18.560
So first you have one packet of commit.

06:18.560 --> 06:25.200
I will go into detail now and then you actually perform the DHL man exchange.

06:25.200 --> 06:31.240
So Alice is sending her key, Bob is sending his and they both compute from this.

06:31.240 --> 06:38.360
They will compute the shared secret and adding all the transcript of the communication they

06:38.360 --> 06:43.840
will generate S0 which is a base secret, the output of the RTPN check.

06:43.840 --> 06:50.160
From the S0 they will derive the SRTP keys which what we are trying to do now here and

06:50.160 --> 06:56.600
they also derive some single SAS short authentication string that will be vocally compared over

06:56.600 --> 07:01.800
the phone because we are, Alice and Bob are actually talking to each other.

07:01.800 --> 07:07.480
So the end of the protocol is just some updates and writing in cache for key continuity mechanisms

07:07.480 --> 07:09.560
and stuff that's not really interesting now.

07:09.560 --> 07:15.080
Then after that the SRTP streams start actually and they can talk.

07:15.080 --> 07:20.880
And once they start to talk, once in the cold story they will do this vocal SAS comparison.

07:20.880 --> 07:21.880
What is it for?

07:21.880 --> 07:26.480
The SAS comparison is basically if they want to detect man in the middle attacks they have

07:26.480 --> 07:34.200
to ensure that Alice is using keys that Bob are sent and also Bob want to know that the

07:34.200 --> 07:37.760
key that was sent by Alice is the one he actually got.

07:37.760 --> 07:42.360
So what they could do as they are talking, they could basically read the own keys to

07:42.360 --> 07:43.360
the other.

07:43.360 --> 07:48.560
But the key is something which is few hundred bytes so it's a bit long to read few hundred

07:48.560 --> 07:51.160
bytes of hexadecimal chain over the phone.

07:51.160 --> 07:53.160
No one would do that.

07:53.160 --> 07:58.280
So what they do instead we derive this short authentication strings which is only four

07:58.280 --> 08:02.920
digits and has 20 bits actually derived from 20 bits.

08:02.920 --> 08:09.400
And this SAS is also derived from the SQL 0 which is output of the protocol.

08:09.400 --> 08:13.360
The only problem with that is that you can actually perform a SAS collision with that

08:13.360 --> 08:15.320
because the SAS is very short.

08:15.320 --> 08:17.440
How it would work?

08:17.440 --> 08:22.680
So actually the beginning of the protocol as soon as Alice sent a public key to Bob,

08:22.680 --> 08:30.080
Bob is able to compute S0 because he has his own secret key and he is able to compute the

08:30.080 --> 08:31.520
SAS then.

08:31.520 --> 08:37.320
So what one could do is that if you perform first the RTP exchange with Alice, she got

08:37.320 --> 08:41.600
the SAS one and then she receives Bob's public key.

08:41.600 --> 08:47.440
When she got Bob's public key she can generate a huge set of key pairs until she finds a

08:47.440 --> 08:49.440
SAS that collide.

08:49.440 --> 08:51.960
Basically she will try a lot of, she generates the pairs.

08:51.960 --> 08:57.560
SAS is only 20 bits so if you generate one million keys and try all them you will for

08:57.560 --> 08:59.880
sure find the collision of the SAS.

08:59.880 --> 09:05.160
So to prevent this, Eve is forced to send a commit packet.

09:05.160 --> 09:09.720
In the commit packet what we have we do not have a public key but we have a hash of the

09:09.720 --> 09:11.320
public key.

09:11.320 --> 09:18.000
And so when you receive the hash of the public key Alice will receive for example Bob's hash

09:18.000 --> 09:23.040
public key, she will store it and then when Bob sets the public key she will compare,

09:23.040 --> 09:28.680
she will just hash Bob's public key and she will compare so that way she is sure that

09:28.680 --> 09:36.280
Bob did not wait for receiving a public key and cannot generate millions of key pairs

09:36.280 --> 09:38.560
to find the collision on the SAS.

09:38.560 --> 09:41.760
So this is quite effective and so far so good.

09:41.760 --> 09:46.400
Now we want to switch to using, to use post-pon-tomb cryptography.

09:46.400 --> 09:51.760
Problem with post-pon-tomb is that on the NIST call for standardization they required

09:51.760 --> 09:56.960
all the algorithm to use key encapsulation mechanism and not deferment.

09:56.960 --> 10:02.400
So key encapsulation mechanism is a bit different because there are two sides that are not the

10:02.400 --> 10:03.400
same.

10:03.400 --> 10:05.640
In deferment the two sides were exactly doing the same thing.

10:05.640 --> 10:10.640
They are both generating keys, exchanging public keys and then computing secrets.

10:10.640 --> 10:15.760
There we have one side generating keys, one side encapsulating the key a secret and the

10:15.760 --> 10:19.800
other side will be able to de-capsulate the secret that was encapsulated by the first

10:19.800 --> 10:21.120
one.

10:21.120 --> 10:31.800
So it's not symmetric so we cannot switch directly from deferment to KM form of key exchange.

10:31.800 --> 10:36.600
Obviously KM is still vulnerable to man-in-the-middle attack because nothing has changed.

10:36.600 --> 10:41.160
You can still put someone in the middle and perform the exchange with the other side without

10:41.160 --> 10:44.280
them knowing.

10:44.280 --> 10:50.880
So what we have to do is adapt the RTP and change a little bit the actual handshake,

10:50.880 --> 10:53.600
the central part of the protocol.

10:53.600 --> 11:02.480
So S0 is still derived from the exchange secret and transcript of all the conversation.

11:02.480 --> 11:06.960
I got only commit and two packets but you also have a little packet and stuff.

11:06.960 --> 11:12.120
So in the commit packet the one which used to hold only the hash of the H part of the

11:12.120 --> 11:16.560
second packet from Bob, Bob will now insert his public key.

11:16.560 --> 11:17.560
Why do we do that?

11:17.560 --> 11:19.800
So Alice can encapsulate the secret.

11:19.800 --> 11:24.320
So at this point Alice receives the public key from Bob, she encapsulates the secret

11:24.320 --> 11:28.320
but at this point she is not able to compute S0 because she is missing the second packet

11:28.320 --> 11:30.160
from Bob.

11:30.160 --> 11:38.280
So she will send back the ciphertext so they will put off the encapsulation and at this

11:38.280 --> 11:43.800
point she has the shared secret from the encapsulation but she cannot compute S0.

11:43.800 --> 11:49.040
Bob now receives the shared secret and he can't compute S0 but he already committed

11:49.040 --> 11:54.160
on the H part 2 that he has to send to Alice so still he cannot manipulate the final secret

11:54.160 --> 11:55.200
S0.

11:55.200 --> 11:57.560
And what is in this packet?

11:57.560 --> 12:04.080
It's just a random number that is used once.

12:04.080 --> 12:11.640
So now another problem is that we don't want to focus only on using only a post-quantum

12:11.640 --> 12:16.680
algorithm because we know that sometimes they got broken like for example SIKE which was

12:16.680 --> 12:20.440
broken a bit late in the standardization process.

12:20.440 --> 12:27.480
So it might happen or not in the future so to protect against this weakness, it's possible

12:27.480 --> 12:33.360
weakness, we still want to use a mix of post-quantum and a classic algorithm.

12:33.360 --> 12:40.520
So we'll use both at the same time and in order to not complexify the protocol too much,

12:40.520 --> 12:45.960
the idea is to have one version of the protocol which is being different and the other one

12:45.960 --> 12:51.640
a key encapsulation mechanism and the other one, the protocol won't know exactly if it's

12:51.640 --> 12:56.600
using a mix or not because probably in the future at some point we'll be confident in

12:56.600 --> 13:02.240
us with some post-quantum algorithm and then we'll stop using the classical one, maybe

13:02.240 --> 13:05.800
or not but still the protocol should not be modified at this point.

13:05.800 --> 13:13.480
So protocol is done to use a Kyrium interface without even knowing if it is a mix of classical

13:13.480 --> 13:17.360
and post-quantum or just post-quantum or several post-quantum.

13:17.360 --> 13:25.320
So we made first we have to make a Kyrium interface from a different, this is quite

13:25.320 --> 13:34.240
a standard construction, you can directly use the Diffie-Lman construction to generate

13:34.240 --> 13:40.680
Kipir, then you can send your public key to the other side, the other side will encapsulate,

13:40.680 --> 13:42.680
how would the other side do that?

13:42.680 --> 13:51.880
It would just generate a Kipir for Diffie-Lman, compute the Diffie-Lman and then hash it with

13:51.880 --> 13:58.920
the transcript of the exchange and send back its public key to the other side.

13:58.920 --> 14:04.240
So the capture is quite obvious, same thing on the other side.

14:04.240 --> 14:08.720
And then we combine two or more Kipirms together, so one we just built from a classical Diffie-Lman

14:08.720 --> 14:13.120
or electric Kipir with post-quantum one.

14:13.120 --> 14:19.520
So this way of doing it has been published by Nina Binder, sorry I don't know how to

14:19.520 --> 14:21.520
pronounce the name.

14:21.520 --> 14:27.080
A few years ago, so it's a bit convoluted but if you want more details on why we are

14:27.080 --> 14:30.760
doing this I encourage you to read the paper, it's quite interesting.

14:30.760 --> 14:35.480
So basically what you do, you want to generate the Kipir, you generate Kipir for sets of

14:35.480 --> 14:41.840
algorithms and my example is there, it's only two but you can do more of that and send concatenated

14:41.840 --> 14:46.200
both public keys or all the public keys to the other side.

14:46.200 --> 14:53.000
The encapsulation will just split your public keys to retrieve the individual ones and perform

14:53.000 --> 14:58.000
the encapsulations on all the components.

14:58.000 --> 15:04.160
Then you use hashmax to combine your results, chaining it, so first you combine key one

15:04.160 --> 15:10.600
and then key two and you can add several layers there and the final step is to use the transcript

15:10.600 --> 15:17.880
of all the public keys you received and the encapsulation is completely symmetric.

15:17.880 --> 15:23.040
The paper from Nina Binder is quite clear on why this step is handed, I have no time

15:23.040 --> 15:27.280
to explain it here.

15:27.280 --> 15:37.200
Few more words, we also tweaked the protocol packets because in the D-field man form, the

15:37.200 --> 15:43.360
size you can get is around few hundred bytes but if you start using Kipir for example or

15:43.360 --> 15:49.760
Hqc, the one you will use, you reach several kilobytes and several kilobytes you cannot

15:49.760 --> 15:55.640
send in one datagram of UDP, it's not possible to probably want to arrive.

15:55.640 --> 16:03.920
So what we have to add is a way of fragment the RTP packet, so it's kind of classical

16:03.920 --> 16:11.440
way as just as DTL, C2, or other protocols using UDP.

16:11.440 --> 16:16.680
The only thing is that we made it in a way that packets are not fragmented and the header

16:16.680 --> 16:23.840
is modified but if it's not needed the packet remains exactly the same than the old packet.

16:23.840 --> 16:28.880
The objective in this was to be able to start deploying the new version of the RTP but still

16:28.880 --> 16:33.000
keep compatibility with the old one, old deployment.

16:33.000 --> 16:39.880
So how it's done, in the end we use crypto libraries, Libokus which is from the Open

16:39.880 --> 16:45.800
Quantum Safe project which basically collects all the NIST candidates and Kiber also which

16:45.800 --> 16:54.680
is no more candidate in a convenient way and we use libdecaf and then embed TLS for the

16:54.680 --> 16:59.200
ECDH and hashback functions that we need.

16:59.200 --> 17:08.440
So we've packed it all in an independent module, so our RTP library will use this module but

17:08.440 --> 17:14.040
it's completely independent actually from it so if anyone want to directly use this

17:14.040 --> 17:23.200
hybrid KMM mixing varieties of first quantum and classic exchange it's fully available.

17:23.200 --> 17:29.240
You can combine usually more than two KMMs as it was printed, it's written in Safe Displussed

17:29.240 --> 17:35.960
and in our RTP implementation we deployed it with some already preset combination so

17:35.960 --> 17:43.400
we have X, well you can see them, we tried to mix algorithms with more or less the same

17:43.400 --> 17:56.440
level of security for mixing Kiber R5.12 with X250, this one and it is, as I said before,

17:56.440 --> 18:01.160
fully compatible with the old version so the deployment is progressive, it's basically

18:01.160 --> 18:07.880
in the agreement phase at the beginning if one, if most parties support this version

18:07.880 --> 18:14.680
of the RTP with this algorithm they will use it, if one is old and don't support it they

18:14.680 --> 18:21.760
will just fall back on a classical deployment or electrical deployment.

18:21.760 --> 18:32.440
So just how it looks like, so first you have the RTP and check going and the call is starting

18:32.440 --> 18:38.720
and once the call is started if it's the first one the two endpoints are calling each other

18:38.720 --> 18:45.400
you will get a pop-up that asks you to confirm the security string so most parties will just

18:45.400 --> 18:50.360
confirm it if more or less just say it on the phone, it's written like you have to say

18:50.360 --> 18:56.320
this, the other one confirms you said what is expecting to say and you confirm it then

18:56.320 --> 19:03.080
this will be saved in the RTP cage and we will never be asked again to do that.

19:03.080 --> 19:08.040
During at any time during the call you can check on the call stats and see what kind

19:08.040 --> 19:13.440
of algorithm we use to perform the exchange so on the screenshots you see that it was

19:13.440 --> 19:19.200
using Kiber R5.12 and X250.19.

19:19.200 --> 19:24.320
We have some links just if some of you download the presentation towards the Linfone website

19:24.320 --> 19:31.320
directly pointing to the GitLab where you can find the source code of both the RTP and

19:31.320 --> 19:38.200
our post-contour crypto module and to the publication from Nia Binder explaining how

19:38.200 --> 19:41.440
to hybrid several types.

19:41.440 --> 19:52.720
Here we are, thank you for your attention.

19:52.720 --> 19:57.160
So we've got time for questions and I've got one question on metrics and there is a question

19:57.160 --> 20:01.800
why post-quantum encryption is not enabled in the pre-compiled Linfone SDK?

20:01.800 --> 20:03.760
Sorry, I didn't.

20:03.760 --> 20:10.120
Why the post-quantum encryption is not enabled in the pre-compiled Linfone SDK?

20:10.120 --> 20:11.120
It is now.

20:11.120 --> 20:12.120
It is now?

20:12.120 --> 20:13.120
It is now, okay.

20:13.120 --> 20:14.120
Based on the record.

20:14.120 --> 20:15.120
Yes, sorry.

20:15.120 --> 20:28.520
Hi, given that we are dealing with threat actors that might be capable of dealing, you

20:28.520 --> 20:29.920
know, cracking quantum cryptography.

20:29.920 --> 20:30.920
Sorry.

20:30.920 --> 20:37.200
Okay, given that we are dealing with threat actors that might have a lot of resources,

20:37.200 --> 20:42.000
it seems like one particular attack factor might be to essentially use real-time deep

20:42.000 --> 20:46.360
hate technology to intercept the vocal SAS comparison.

20:46.360 --> 20:50.400
Do you see any particular mitigation for an attack like that?

20:50.400 --> 20:55.400
Well, some kind of attack like this has been already studied and published.

20:55.400 --> 21:01.040
So basically what came out of what I found is that it's kind of easy to use pitch and

21:01.040 --> 21:04.040
detail to synthesize the voice of someone else.

21:04.040 --> 21:08.880
As main problem there would be to insert the SAS at the right moment in conversation without

21:08.880 --> 21:12.800
adding a huge delay in the conversation so that people won't be able to talk.

21:12.800 --> 21:16.800
Basically, if you had like two to three second delays because you have to analyze the signal

21:16.800 --> 21:23.920
and like buffer it to be able to instant back your SAS, people won't talk with three to

21:23.920 --> 21:24.920
four second delays.

21:24.920 --> 21:25.920
There is no way people will talk.

21:25.920 --> 21:26.920
I agree.

21:26.920 --> 21:31.120
I think it's going to be very difficult to do something like that in real time, but I

21:31.120 --> 21:36.120
think that's probably, you know, because your solution looks really, really solid in terms

21:36.120 --> 21:39.960
of being able to fix it like that, so it looks like that might be one of the weaker aspects

21:39.960 --> 21:40.960
of it.

21:40.960 --> 21:41.960
But it's a...

21:41.960 --> 21:45.840
Since now I've been trying to monitor the publication on the subject and I never found

21:45.840 --> 21:50.600
someone able to publish an actual attack on the RTP working really.

21:50.600 --> 21:52.720
So it might depend on some point.

21:52.720 --> 21:53.720
That's great.

21:53.720 --> 21:54.720
Thank you.

21:54.720 --> 22:01.720
Can we be quiet to ask questions, please?

22:01.720 --> 22:02.720
Thank you.

22:02.720 --> 22:10.840
I think I missed it, but then in this particular method that you are doing, is it actually

22:10.840 --> 22:16.880
trusting the middle server that you're using or is it using keys from another like a phone

22:16.880 --> 22:19.520
or something, SIP assuming?

22:19.520 --> 22:22.600
Is this running with the SIP protocol you said?

22:22.600 --> 22:24.400
Wait, I'm sorry, I cannot...

22:24.400 --> 22:25.400
Hello.

22:25.400 --> 22:27.400
The sound is very low.

22:27.400 --> 22:28.400
Hello.

22:28.400 --> 22:29.400
Better, yes.

22:29.400 --> 22:30.400
Yeah.

22:30.400 --> 22:38.400
I wanted to ask if this was being used with a mobile phone to connect to the SIP server

22:38.400 --> 22:41.400
and then use post quantum cryptography as you demonstrate.

22:41.400 --> 22:44.080
Can you go back to the two slides before this?

22:44.080 --> 22:45.080
Yeah.

22:45.080 --> 22:46.080
That's one.

22:46.080 --> 22:53.800
Yeah, so the phone, is it actually trusting the server which is running or is it like

22:53.800 --> 22:59.120
the end-to-end, the actual key is being checked with the other host?

22:59.120 --> 23:04.000
Yeah, this is the main point of the RTP that basically the idea is to not trust anyone,

23:04.000 --> 23:05.000
not your server.

23:05.000 --> 23:09.760
So server will be in charge of connecting the two phones and then the media will go

23:09.760 --> 23:12.080
directly from one to the other one.

23:12.080 --> 23:17.040
The media pass will go straight from one phone to another one and it won't go through the

23:17.040 --> 23:18.040
server.

23:18.040 --> 23:23.800
That's why the RTP exchange is performed on the media pass and not on the SIP signaling

23:23.800 --> 23:25.840
pass.

23:25.840 --> 23:29.640
When you establish a connection, actually, you go through ICE protocol, I don't know

23:29.640 --> 23:35.480
if you're familiar with that, which basically find a way to connect directly because at

23:35.480 --> 23:39.600
the end, you don't want the media to be relayed because you lose too much time.

23:39.600 --> 23:46.720
You have to send media packets directly from one endpoint to the other endpoint.

23:46.720 --> 23:48.720
Hi.

23:48.720 --> 23:51.480
You said that you have to compare the SAS only once.

23:51.480 --> 23:52.480
Yeah.

23:52.480 --> 23:55.160
Is it once per phone or once per user?

23:55.160 --> 23:56.640
It's one per endpoint.

23:56.640 --> 24:06.200
Basically in each endpoint, you have a cache of previous, each time you end the RTP exchange,

24:06.200 --> 24:10.120
you'll keep some shared secret that you'll use the next time.

24:10.120 --> 24:15.520
And so during the exchange, at some point you will compare the shared secret and if

24:15.520 --> 24:20.040
they are the same, you use them to compute a SAS, which is always a verb.

24:20.040 --> 24:25.800
You can always ask to compare the SAS, but it won't pop because the protocol will know

24:25.800 --> 24:29.160
that you performed the exchange before, but it just went from one phone to another phone.

24:29.160 --> 24:30.520
This cache is not shared.

24:30.520 --> 24:31.520
Okay.

24:31.520 --> 24:35.360
So in practical terms, if I buy a new phone and I install the same app with the same account,

24:35.360 --> 24:36.360
I have to do it again.

24:36.360 --> 24:38.680
You have to do it again with all your respondents.

24:38.680 --> 24:39.680
Okay.

24:39.680 --> 24:40.680
Thanks.

24:40.680 --> 24:44.400
We've got time for our last question.

24:44.400 --> 24:47.040
Is there any other last question?

24:47.040 --> 24:49.440
If not, thank you for your call.

24:49.440 --> 24:50.440
Thank you.

24:50.440 --> 25:19.000
Always a pleasure.

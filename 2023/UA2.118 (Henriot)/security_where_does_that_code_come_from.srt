1
0:00:00.000 --> 0:00:10.000
Thank you.

2
0:00:10.000 --> 0:00:11.000
Good afternoon.

3
0:00:11.000 --> 0:00:12.640
Can everyone hear me?

4
0:00:12.640 --> 0:00:16.160
It seems to be working.

5
0:00:16.160 --> 0:00:17.440
All right.

6
0:00:17.440 --> 0:00:23.960
I'm going to talk about Git checkout authentication in the context of supply chain security.

7
0:00:23.960 --> 0:00:26.120
It's one of these buzzwords that we hear a lot today.

8
0:00:26.120 --> 0:00:30.200
And I guess that's because there's a lot to be done in this area.

9
0:00:30.200 --> 0:00:36.480
I have to tell you this is going to be a talk about pre-quantum issues.

10
0:00:36.480 --> 0:00:37.960
So it's going to be different.

11
0:00:37.960 --> 0:00:39.560
All right.

12
0:00:39.560 --> 0:00:43.800
So I'm going to talk about work that has been done in the context of GNU Geeks like Simon

13
0:00:43.800 --> 0:00:45.960
was saying.

14
0:00:45.960 --> 0:00:48.640
Who has never heard about GNU Geeks in this room?

15
0:00:48.640 --> 0:00:51.840
That's a show of hands.

16
0:00:51.840 --> 0:00:52.840
Very few people, actually.

17
0:00:52.840 --> 0:00:53.840
This is weird.

18
0:00:53.840 --> 0:00:54.840
I'm surprised.

19
0:00:54.840 --> 0:00:58.960
Anyway, so this started as part of Geeks.

20
0:00:58.960 --> 0:01:03.680
But as you will see, this is useful beyond Geeks, I think.

21
0:01:03.680 --> 0:01:08.160
So just, yeah, I have to introduce Geeks a little bit.

22
0:01:08.160 --> 0:01:11.860
This is an actual birthday cake that we ate a few months ago to celebrate 10 years of

23
0:01:11.860 --> 0:01:12.860
Geeks.

24
0:01:12.860 --> 0:01:14.960
So it's an actual, yeah.

25
0:01:14.960 --> 0:01:20.360
And it's a real cake.

26
0:01:20.360 --> 0:01:22.360
That's the thing.

27
0:01:22.360 --> 0:01:27.160
Yeah, so it's a distribution, a GNU Linux distribution that you can install standalone

28
0:01:27.160 --> 0:01:30.360
like you would install Debian or something.

29
0:01:30.360 --> 0:01:32.480
You can also install it on top of your system.

30
0:01:32.480 --> 0:01:35.200
If you're already running Debian, for example, this is great.

31
0:01:35.200 --> 0:01:40.120
And you can also have Geeks on top of Debian and that gives you an additional package manager.

32
0:01:40.120 --> 0:01:43.920
But anyway, I'm not going to go into the details of what it's like as a user.

33
0:01:43.920 --> 0:01:48.060
I want to talk about the, you know, what's behind the scenes, right?

34
0:01:48.060 --> 0:01:52.880
So what it looks like from a supply chain viewpoint.

35
0:01:52.880 --> 0:01:57.880
So this is a package definition for Geeks.

36
0:01:57.880 --> 0:02:01.560
Maybe some of you are wondering about the parents, right?

37
0:02:01.560 --> 0:02:02.560
That's okay.

38
0:02:02.560 --> 0:02:04.520
It could be JSON, it could be XML.

39
0:02:04.520 --> 0:02:06.500
You have similar things with other tools.

40
0:02:06.500 --> 0:02:11.020
It's just basically metadata that describes how to build a Hello package.

41
0:02:11.020 --> 0:02:13.160
It's telling you where to get the source code.

42
0:02:13.160 --> 0:02:17.460
That tau.gz file is telling you how to build it with GNU build system.

43
0:02:17.460 --> 0:02:21.480
So configure, make, make install, you know, that kind of thing.

44
0:02:21.480 --> 0:02:27.320
And there are now like more than 20,000 packages in Geeks and they're all defined like this.

45
0:02:27.320 --> 0:02:29.720
So this is source code, right?

46
0:02:29.720 --> 0:02:33.680
And the thing is, Geeks is able to build packages from source.

47
0:02:33.680 --> 0:02:38.920
So conceptually you could think of Geeks as some sort of gen 2, right, in the sense that

48
0:02:38.920 --> 0:02:43.040
it's building packages from source, except that you can actually get pre-built binaries

49
0:02:43.040 --> 0:02:46.000
and that's what people usually do because, you know, it's faster.

50
0:02:46.000 --> 0:02:51.200
Especially if you want to use LibreOffice or, you know, whatnot.

51
0:02:51.200 --> 0:02:55.040
But Geeks is basically as a distro, it's all source code, right?

52
0:02:55.040 --> 0:02:57.540
Package definitions.

53
0:02:57.540 --> 0:03:01.960
And then when you go and build a package, that's also a salient feature.

54
0:03:01.960 --> 0:03:06.760
So if you've ever used or heard about Nix before, this is entirely inherited from Nix.

55
0:03:06.760 --> 0:03:09.120
So this is a functional model.

56
0:03:09.120 --> 0:03:12.120
Basically you say, all right, I want to build that Hello package.

57
0:03:12.120 --> 0:03:16.000
And you run Geeks build Hello and it's going to talk to a daemon that makes an isolated

58
0:03:16.000 --> 0:03:18.180
build of the Hello package.

59
0:03:18.180 --> 0:03:24.040
So it's fully hermetic and that, you know, that removes a whole class of issues of non-reproducibility

60
0:03:24.040 --> 0:03:28.760
issues that you would have without that isolated environment.

61
0:03:28.760 --> 0:03:31.320
Yeah.

62
0:03:31.320 --> 0:03:36.080
And so that means that if you look at all these things that we have in that GNU store

63
0:03:36.080 --> 0:03:40.080
directory, we have tons of packages and stuff in there.

64
0:03:40.080 --> 0:03:43.760
Now they're all going to be bit identical for everyone.

65
0:03:43.760 --> 0:03:45.040
Or nearly.

66
0:03:45.040 --> 0:03:48.600
There can be issues, you know, but usually it's going to be a bit identical.

67
0:03:48.600 --> 0:03:53.960
So typically if I look at that GNU store, blah, blah, blah, Hello thing up there, well, if

68
0:03:53.960 --> 0:03:59.280
I build it actually on my laptop or if you build it on your laptop, you're going to get

69
0:03:59.280 --> 0:04:01.640
both the same hash.

70
0:04:01.640 --> 0:04:03.360
It's going to be identical.

71
0:04:03.360 --> 0:04:08.260
So it's all about reproducible builds, which you've probably heard of.

72
0:04:08.260 --> 0:04:10.800
So this is an effort where many distros are involved.

73
0:04:10.800 --> 0:04:16.080
Debian, of course, has been leading the effort, but there's also NixOS, Arch Linux, blah, blah,

74
0:04:16.080 --> 0:04:19.040
blah, many distros.

75
0:04:19.040 --> 0:04:24.520
It's called reproducible builds, but we could very much call it verifiable builds.

76
0:04:24.520 --> 0:04:29.400
The whole point here is that you don't have to press binaries that you get from a server.

77
0:04:29.400 --> 0:04:34.360
You can always verify that the source that appears, you know, in the package definition

78
0:04:34.360 --> 0:04:39.080
that we saw before actually corresponds to the binary that you have, because you can

79
0:04:39.080 --> 0:04:40.520
always rebuild locally.

80
0:04:40.520 --> 0:04:46.120
You can challenge the servers that provide pre-built binaries and see if it's the same.

81
0:04:46.120 --> 0:04:51.520
So from a supply chain viewpoint, that's pretty big deal, I think.

82
0:04:51.520 --> 0:04:55.280
And Gixx, we're trying to go a little bit further.

83
0:04:55.280 --> 0:04:58.280
So reproducible builds are nice, but it's not sufficient.

84
0:04:58.280 --> 0:05:05.400
Like if you're reproducing bit for bit malicious software, you still have a problem, right?

85
0:05:05.400 --> 0:05:12.400
So you've probably heard about that twisting-twist attack, you know, illustrated by Ken Tamsum

86
0:05:12.400 --> 0:05:13.640
in 1984.

87
0:05:13.640 --> 0:05:15.480
That's a long time ago.

88
0:05:15.480 --> 0:05:17.560
Well, this is a story.

89
0:05:17.560 --> 0:05:22.160
We want to be able to have fully-auditable code that's entirely built from source.

90
0:05:22.160 --> 0:05:25.920
And actually someone over there in the back of the room with other people has been working

91
0:05:25.920 --> 0:05:29.520
on this, has been presenting this last year.

92
0:05:29.520 --> 0:05:32.800
We could talk about it for ages, but I have other things to tell you.

93
0:05:32.800 --> 0:05:39.000
But I encourage you to take a look at that talk by Janneke last two years ago, actually.

94
0:05:39.000 --> 0:05:43.160
The thing is we're about to be able to build the whole Gixx distribution starting from

95
0:05:43.160 --> 0:05:48.320
a binary that's just 357 bytes, I think, right?

96
0:05:48.320 --> 0:05:51.400
So pretty big deal.

97
0:05:51.400 --> 0:05:57.000
All right, now to be more on topic.

98
0:05:57.000 --> 0:06:02.040
So we have these fancy things, you know, reproducible builds, put strappable builds, building everything

99
0:06:02.040 --> 0:06:03.240
from source.

100
0:06:03.240 --> 0:06:06.600
That's nice from a supply chain security viewpoint.

101
0:06:06.600 --> 0:06:13.320
But, you know, for several years we've had that tiny issue, specifically in Gixx.

102
0:06:13.320 --> 0:06:18.920
If you want to update your packages, well, your package collection, the available packages,

103
0:06:18.920 --> 0:06:22.080
and the toolset, you would run Gixx pull.

104
0:06:22.080 --> 0:06:25.560
So it's similar to update in Debian, for example.

105
0:06:25.560 --> 0:06:28.720
That's roughly the same kind of tool.

106
0:06:28.720 --> 0:06:36.360
But it's implemented by fetching code directly from the Git repo of the project.

107
0:06:36.360 --> 0:06:43.760
And you know, as you can imagine, you have to think about the implications of this, right?

108
0:06:43.760 --> 0:06:48.680
We're delivering code directly on users' computers, so we'd better be sure they're actually getting

109
0:06:48.680 --> 0:06:55.200
the real code coming from the Gixx project and not something different.

110
0:06:55.200 --> 0:07:01.560
For example, if the server that hosts the Git repo is attacked, well, we'd rather have

111
0:07:01.560 --> 0:07:06.720
some mechanism to detect that, you know, to make sure that users are not going to download

112
0:07:06.720 --> 0:07:10.880
to clone a Git repo that contains malicious code, right?

113
0:07:10.880 --> 0:07:14.960
So we need something here.

114
0:07:14.960 --> 0:07:18.120
You know, we thought about this for quite a long time, actually.

115
0:07:18.120 --> 0:07:23.320
And the typical answer to this question is the update framework, tough.

116
0:07:23.320 --> 0:07:25.080
I don't know if you've heard about it.

117
0:07:25.080 --> 0:07:29.920
It's sort of the reference for all things update in general.

118
0:07:29.920 --> 0:07:34.960
So it's a specification with implementations in different languages and in different frameworks,

119
0:07:34.960 --> 0:07:40.080
like for Python packaging, for Debian, I think, different things.

120
0:07:40.080 --> 0:07:41.920
But there's one thing.

121
0:07:41.920 --> 0:07:44.960
It's not quite a good fit for our case.

122
0:07:44.960 --> 0:07:49.480
Our case is we're just pulling from a Git repo in the end.

123
0:07:49.480 --> 0:07:54.360
The update framework is more about distributions that look like Debian or FedAware, where you

124
0:07:54.360 --> 0:08:00.200
have binaries on the server, and, you know, people are actually downloading those binaries,

125
0:08:00.200 --> 0:08:04.440
and those binaries are built by machines or developers, blah, blah.

126
0:08:04.440 --> 0:08:08.480
It's a different setup.

127
0:08:08.480 --> 0:08:13.560
So to illustrate that, let me show a bit what the workflow looks like in Gixx.

128
0:08:13.560 --> 0:08:18.600
So here we have what Gixx packages do.

129
0:08:18.600 --> 0:08:21.040
So as a packager, well, you define packages.

130
0:08:21.040 --> 0:08:26.360
So for example, Python, and that's the kind of definition that I showed you before, right?

131
0:08:26.360 --> 0:08:31.800
And then you can test it with Gixx build Python, for example, like Risso.

132
0:08:31.800 --> 0:08:35.400
And eventually, the packager is satisfied with the package, where they eventually push

133
0:08:35.400 --> 0:08:38.120
it to the Git repo.

134
0:08:38.120 --> 0:08:44.660
And as a user, at some point, I'm going to run Gixx pull, which is very similar to Git

135
0:08:44.660 --> 0:08:51.720
pull, except it's also going to compile a few things, but roughly that's like Git pull.

136
0:08:51.720 --> 0:08:56.120
And so at that point, I'm getting the new package definition, and I can run Gixx install

137
0:08:56.120 --> 0:08:58.760
Python, and I'm getting that package.

138
0:08:58.760 --> 0:09:00.680
That's the idea.

139
0:09:00.680 --> 0:09:04.680
And optionally, like I said, you can get prebuilt binaries.

140
0:09:04.680 --> 0:09:07.160
I'm not going to go into details about this.

141
0:09:07.160 --> 0:09:11.640
This is optional, but this is something you usually want.

142
0:09:11.640 --> 0:09:16.760
But it's not baked in the model, like you would say in Debian or Fedora.

143
0:09:16.760 --> 0:09:19.840
It's really something additional.

144
0:09:19.840 --> 0:09:26.800
And because we have reproducible builds, prebuilt binaries are, it's substitutable, right?

145
0:09:26.800 --> 0:09:31.440
The key thing here is that people are going to pull from the Git repo, and we need to

146
0:09:31.440 --> 0:09:36.760
make sure that they are getting the right code, the real code.

147
0:09:36.760 --> 0:09:41.480
So we're really looking at these two things where the users are running Gixx pull or the

148
0:09:41.480 --> 0:09:46.960
build farm that builds packages is running Git pull, and how can we actually make sure

149
0:09:46.960 --> 0:09:48.200
they get the right code?

150
0:09:48.200 --> 0:09:51.920
And this is about authenticating Git checkout.

151
0:09:51.920 --> 0:09:53.400
It's just Git, after all.

152
0:09:53.400 --> 0:09:57.000
There's nothing special here.

153
0:09:57.000 --> 0:10:02.000
So with millions of people using Git, you would think that it's a solved problem, right?

154
0:10:02.000 --> 0:10:04.240
Oh, sorry, I thought.

155
0:10:04.240 --> 0:10:07.280
It is not, actually.

156
0:10:07.280 --> 0:10:11.680
So if you go, for example, to GitHub or GitLab, you can see these verified badges.

157
0:10:11.680 --> 0:10:15.160
This is a screenshot from GitHub.

158
0:10:15.160 --> 0:10:17.360
So you have verified badges.

159
0:10:17.360 --> 0:10:18.360
It's green, it's nice.

160
0:10:18.360 --> 0:10:22.280
You have partially verified, hmm, what does that mean?

161
0:10:22.280 --> 0:10:25.380
And you have also no badges.

162
0:10:25.380 --> 0:10:27.480
So what conclusion can you draw from that?

163
0:10:27.480 --> 0:10:33.200
Is it the real, the authentic repo, or is it not?

164
0:10:33.200 --> 0:10:36.880
You can't really do anything with that.

165
0:10:36.880 --> 0:10:41.200
So at that point of the talk, we need to talk about authentication.

166
0:10:41.200 --> 0:10:47.040
Authentication is about making sure we're getting the real thing, the undisputed credibility.

167
0:10:47.040 --> 0:10:53.340
So we would say we want to make sure that people are getting the Gixx code as coming

168
0:10:53.340 --> 0:10:55.440
from the Gixx project.

169
0:10:55.440 --> 0:10:58.220
That's what it means to me.

170
0:10:58.220 --> 0:11:01.360
So specifically, we want to protect against a number of things.

171
0:11:01.360 --> 0:11:06.360
So we want to assume that potentially an attacker can gain access to the server that hosts the

172
0:11:06.360 --> 0:11:07.680
Git repo.

173
0:11:07.680 --> 0:11:14.680
And from there, the attacker can push more commits on that repo or could introduce malicious

174
0:11:14.680 --> 0:11:20.880
changes in many ways or even make a so-called downgrade attack where the attacker would

175
0:11:20.880 --> 0:11:27.960
revert or actually remove the latest commits, for example, so that users would be tricked

176
0:11:27.960 --> 0:11:33.280
into pulling an older version of Gixx with potentially vulnerable packages and stuff

177
0:11:33.280 --> 0:11:34.280
like that.

178
0:11:34.280 --> 0:11:36.280
So this is what we want to protect against.

179
0:11:36.280 --> 0:11:39.560
What we want to protect against.

180
0:11:39.560 --> 0:11:40.840
There's a couple of additional goals.

181
0:11:40.840 --> 0:11:44.120
We want to make sure we can do offline authentication.

182
0:11:44.120 --> 0:11:49.760
Like we don't want to call out a number of services out there and key ring servers, whatever.

183
0:11:49.760 --> 0:11:55.120
And of course, we want to support changing authorizations in the sense that people contribute

184
0:11:55.120 --> 0:11:57.360
to Gixx and they come and go.

185
0:11:57.360 --> 0:12:04.720
So we need to add new people, new contributors, official contributors, packages, and eventually

186
0:12:04.720 --> 0:12:06.640
maybe we'll remove them.

187
0:12:06.640 --> 0:12:10.520
We need to be able to deal with that.

188
0:12:10.520 --> 0:12:16.520
So the solution, well, we're not yet at the solution, but the intuition at least that

189
0:12:16.520 --> 0:12:17.960
well, this is Git.

190
0:12:17.960 --> 0:12:22.240
So this is a graph of commits, right?

191
0:12:22.240 --> 0:12:24.220
We're just dealing with a graph of commits.

192
0:12:24.220 --> 0:12:31.360
So we have commits here, actually, A, B, C, D, F. And each commit is made by someone.

193
0:12:31.360 --> 0:12:36.760
And the intuition is that we would like to be able to annotate each commit saying, well,

194
0:12:36.760 --> 0:12:42.120
at this point, there's a certain number of people who are authorized to make commits

195
0:12:42.120 --> 0:12:43.720
in the project.

196
0:12:43.720 --> 0:12:47.680
And maybe it's going to change at each node of the commit graph.

197
0:12:47.680 --> 0:12:52.000
And yeah, this is what we would like to do.

198
0:12:52.000 --> 0:12:58.560
The solution we came up with is to have basically inside the repo a file that's called Gixx

199
0:12:58.560 --> 0:13:04.840
authorization that lists the open PGP keys of authorized committers.

200
0:13:04.840 --> 0:13:07.920
It's pretty simple.

201
0:13:07.920 --> 0:13:12.160
And the thing is the file lives inside the repo.

202
0:13:12.160 --> 0:13:17.680
And then we need to have a role to determine whether a given commit is authentic.

203
0:13:17.680 --> 0:13:21.560
And so the role is actually very simple as well.

204
0:13:21.560 --> 0:13:27.120
So commit is authentic if and only if it is signed by one of the authorized committers

205
0:13:27.120 --> 0:13:28.720
of the parent commit.

206
0:13:28.720 --> 0:13:30.440
I got it.

207
0:13:30.440 --> 0:13:32.480
This is the main part of the talk.

208
0:13:32.480 --> 0:13:33.480
I'm almost done, actually.

209
0:13:33.480 --> 0:13:35.680
I could stop here.

210
0:13:35.680 --> 0:13:38.440
So we call this the authorization invariant.

211
0:13:38.440 --> 0:13:40.560
So let's see in practice what this looks like.

212
0:13:40.560 --> 0:13:43.600
So if I go back to my commit graph here.

213
0:13:43.600 --> 0:13:46.280
So let's assume for commit A, this is the first commit.

214
0:13:46.280 --> 0:13:49.940
Let's assume Alice is authorized there, all right.

215
0:13:49.940 --> 0:13:54.860
And then in commit B, Alice is adding Bob as an authorized committer.

216
0:13:54.860 --> 0:13:58.040
So we have this label here.

217
0:13:58.040 --> 0:14:02.500
So at that point, Bob will be authorized to make commits.

218
0:14:02.500 --> 0:14:08.480
And if we look at commit C and E, well, they are made and signed by Bob this time.

219
0:14:08.480 --> 0:14:14.600
And it's perfectly fine because if we look at the parent commit of C, for example, so

220
0:14:14.600 --> 0:14:17.080
this is C, the parent commit is here.

221
0:14:17.080 --> 0:14:23.200
And we can see that Bob is authorized in the parent commit, right.

222
0:14:23.200 --> 0:14:27.760
And likewise with E, we can have a second branch, the purple branch.

223
0:14:27.760 --> 0:14:29.760
And Bob is also committing in that branch.

224
0:14:29.760 --> 0:14:32.920
And this is fine because the parent commit is the same line.

225
0:14:32.920 --> 0:14:36.320
And Bob is authorized here, all right.

226
0:14:36.320 --> 0:14:41.000
And we can keep going that way, you know, remove people and so on and so forth.

227
0:14:41.000 --> 0:14:47.440
So the second example, if we take almost the same one, except that on the purple branch

228
0:14:47.440 --> 0:14:56.160
here, Bob removes Alice from the set of authorized committers, all right.

229
0:14:56.160 --> 0:15:04.000
And then what happens if Alice tries to make a merge commit that has D and E prime as parents?

230
0:15:04.000 --> 0:15:11.800
Well, if we apply the authorization invariant that we showed before, this commit is not

231
0:15:11.800 --> 0:15:12.800
authorized.

232
0:15:12.800 --> 0:15:13.800
It's not genuine.

233
0:15:13.800 --> 0:15:16.160
It's going to be rejected.

234
0:15:16.160 --> 0:15:17.160
That's the idea.

235
0:15:17.160 --> 0:15:23.440
Yeah, there's a small problem that perhaps you've noticed.

236
0:15:23.440 --> 0:15:28.000
We kind of didn't discuss the first commit, right.

237
0:15:28.000 --> 0:15:30.520
There's something to be said about that one too.

238
0:15:30.520 --> 0:15:34.560
Well, we need to introduce the repo in a way.

239
0:15:34.560 --> 0:15:40.560
So we need a way to say, well, this B commit is the first commit where we will start applying

240
0:15:40.560 --> 0:15:42.600
the authorization invariant.

241
0:15:42.600 --> 0:15:44.960
So we call this the introductory commit.

242
0:15:44.960 --> 0:15:49.040
And it's needed because, you know, perhaps you have some history already in your Git

243
0:15:49.040 --> 0:15:52.640
repo at the time you start using this mechanism.

244
0:15:52.640 --> 0:15:57.120
And so we need to be able to say this is the one where it starts.

245
0:15:57.120 --> 0:16:03.520
We call that the introductory commit, and so users are expected to know, you know, what

246
0:16:03.520 --> 0:16:05.800
the introductory commit is.

247
0:16:05.800 --> 0:16:08.920
So for example, this is a specification of a channel in Geeks.

248
0:16:08.920 --> 0:16:11.800
So a channel provides more packages.

249
0:16:11.800 --> 0:16:17.720
And as a user, you would provide not just the URL of the channel, of the repo, but also

250
0:16:17.720 --> 0:16:24.280
the introduction information that tells from which commit we're going to start authenticating.

251
0:16:24.280 --> 0:16:28.280
And that solves the bootstrap problem.

252
0:16:28.280 --> 0:16:33.040
So concretely, now that we have this, if we run Geeks pool, and it's been in production

253
0:16:33.040 --> 0:16:38.040
for a couple of years actually, if we run Geeks pool, well, we are going to have a message

254
0:16:38.040 --> 0:16:43.440
that says we're authenticating channel Geeks and a number of new commits, right.

255
0:16:43.440 --> 0:16:46.280
And it's cached, so it's pretty fast.

256
0:16:46.280 --> 0:16:50.480
If I tell Geeks pool to use a different URL with a mirror, I'm going to get a warning

257
0:16:50.480 --> 0:16:53.120
saying, all right, you chose to use a mirror.

258
0:16:53.120 --> 0:16:54.120
That's fine.

259
0:16:54.120 --> 0:16:58.680
But be aware that this is not the canonical URL, so perhaps it's mirror's tail.

260
0:16:58.680 --> 0:17:05.560
But at least we can tell it's authentic because we've verified the authorization invariant.

261
0:17:05.560 --> 0:17:11.600
But then if some evil attacker, you know, does something bad with the repo, then we're

262
0:17:11.600 --> 0:17:16.160
going to get a narrow message directly saying, no, this commit is not signed by an authorized

263
0:17:16.160 --> 0:17:17.160
key.

264
0:17:17.160 --> 0:17:18.160
You have a problem.

265
0:17:18.160 --> 0:17:21.560
And this is it.

266
0:17:21.560 --> 0:17:26.140
So this is all when using Geeks pool, but there is actually, you can use the same thing even

267
0:17:26.140 --> 0:17:29.380
if you're not using Geeks or even without using a channel.

268
0:17:29.380 --> 0:17:34.080
You can use the Geeks git authenticate command that works the same except it's slower level,

269
0:17:34.080 --> 0:17:39.160
so you have to specify the introductory commit and the key that's signed the introductory

270
0:17:39.160 --> 0:17:40.160
commit.

271
0:17:40.160 --> 0:17:44.960
And the thing is, I think we should all be using that kind of stuff with our git repos

272
0:17:44.960 --> 0:17:49.160
because right now it's a wild west.

273
0:17:49.160 --> 0:17:55.080
But yeah, the key is a bit not super usable, so I understand we'll have to do some work

274
0:17:55.080 --> 0:17:56.080
on this.

275
0:17:56.080 --> 0:17:58.560
If you have ideas, I'm open to them.

276
0:17:58.560 --> 0:18:04.240
Yeah, and you can specify where the key ring, the open PGP key ring is to be found because

277
0:18:04.240 --> 0:18:11.240
this is not going to talk to key servers which are very unreliable, as you probably know.

278
0:18:11.240 --> 0:18:13.120
All right, I didn't mention downgrade attacks.

279
0:18:13.120 --> 0:18:15.440
I have to be fast, right, I guess.

280
0:18:15.440 --> 0:18:18.280
Downgrade attacks.

281
0:18:18.280 --> 0:18:22.800
That's another kind of attack we want to protect against.

282
0:18:22.800 --> 0:18:27.360
And the good thing with Geeks is that Geeks keeps tracks of its own provenance.

283
0:18:27.360 --> 0:18:31.740
So for example, when you are running Geeks, you can run Geeks describe and it's going

284
0:18:31.740 --> 0:18:36.160
to tell you, I was built from this commit.

285
0:18:36.160 --> 0:18:39.600
So it knows where it comes from, so to speak.

286
0:18:39.600 --> 0:18:45.600
And because we have that provenance information, then if you run Geeks pool and it detects

287
0:18:45.600 --> 0:18:52.440
that it's not going to a commit that's a descendant of the one we're currently running, you're

288
0:18:52.440 --> 0:18:55.560
going to have a narrow message, right?

289
0:18:55.560 --> 0:19:00.240
Commit coffee is not a descendant of cabbage, of course.

290
0:19:00.240 --> 0:19:03.880
And this is pretty cool.

291
0:19:03.880 --> 0:19:09.280
And likewise, even at the system level, when you deploy your system, the system itself,

292
0:19:09.280 --> 0:19:13.600
the distribution actually running on your machine records which commit it was built

293
0:19:13.600 --> 0:19:14.840
from.

294
0:19:14.840 --> 0:19:18.480
So we have the information here if we run Geeks system describe.

295
0:19:18.480 --> 0:19:24.760
And so if I run Geeks system reconfigure to update my system, well, potentially I could

296
0:19:24.760 --> 0:19:29.840
get a message that says, no, you're trying to reconfigure to a commit that's older than

297
0:19:29.840 --> 0:19:31.680
the one you're currently running.

298
0:19:31.680 --> 0:19:32.680
That's a problem.

299
0:19:32.680 --> 0:19:38.320
I can override that if I know what I'm doing, but usually you'd better not.

300
0:19:38.320 --> 0:19:40.680
All right.

301
0:19:40.680 --> 0:19:43.800
It's time to wrap up, I guess.

302
0:19:43.800 --> 0:19:46.920
So, to summarize, we have two things here.

303
0:19:46.920 --> 0:19:52.520
We have authenticating Geeks checkouts which is good for Geeks because it gives us safe

304
0:19:52.520 --> 0:19:54.200
Geeks updates.

305
0:19:54.200 --> 0:19:58.920
And because we have safe Geeks updates, we can have unattended upgrades, for example,

306
0:19:58.920 --> 0:20:03.240
and this is super cool, you know, you know that the unattended upgrades are either going

307
0:20:03.240 --> 0:20:07.560
to work and run the right code or they're not going to run at all.

308
0:20:07.560 --> 0:20:10.400
And this is important, I think.

309
0:20:10.400 --> 0:20:15.620
This is inbound and offline, which means all the data needed to perform this authorization

310
0:20:15.620 --> 0:20:19.440
while this authentication step is all inside the Git repo.

311
0:20:19.440 --> 0:20:23.200
There's no need to talk to key servers and stuff.

312
0:20:23.200 --> 0:20:27.360
And you can and should use that kind of tool on your Git repo, I think.

313
0:20:27.360 --> 0:20:30.480
We really need to think collectively about this issue.

314
0:20:30.480 --> 0:20:35.640
And we have, again, protection against the ungraded attacks, which is good for unattended

315
0:20:35.640 --> 0:20:39.880
upgrades, and it's deployed in Geeks for a while now.

316
0:20:39.880 --> 0:20:47.480
There's a paper, if you want to see all the nitty gritty details, there's a URL here.

317
0:20:47.480 --> 0:20:52.920
And yeah, to conclude, I'd like to think a little bit, to reflect a little bit about

318
0:20:52.920 --> 0:20:55.840
all these issues of supply chain security.

319
0:20:55.840 --> 0:21:01.680
I know I'm sharing this one with speakers about SeqStore, for example, and other projects.

320
0:21:01.680 --> 0:21:06.360
And we have a different approach to things, for example, with Geeks we have a unified

321
0:21:06.360 --> 0:21:12.960
deployment toolbox, so we are very much talking about end-to-end integration of the toolset,

322
0:21:12.960 --> 0:21:17.760
verifiability with reproducible bits, for example, auditability, we have the commit

323
0:21:17.760 --> 0:21:24.960
graph, we have all the details available at our disposal, when often popular approaches

324
0:21:24.960 --> 0:21:29.680
are more about assuming that you have a different set of tools, you can have a distro, you can

325
0:21:29.680 --> 0:21:35.240
have Docker, you can have Kubernetes, whatever, and you're just combining everything and thinking

326
0:21:35.240 --> 0:21:42.800
about artifact, flow integrity, attestation, version strings, and stuff like that.

327
0:21:42.800 --> 0:21:48.360
So I think the key is to really think about going from source code to deployed binaries,

328
0:21:48.360 --> 0:21:52.520
that's very much the free software ethos as well, and thinking about ensuring we have

329
0:21:52.520 --> 0:21:58.240
proper provenance tracking and the ability to verify things.

330
0:21:58.240 --> 0:21:59.240
This is it.

331
0:21:59.240 --> 0:22:05.240
Thank you.

332
0:22:05.240 --> 0:22:08.840
Thank you, Ludvig.

333
0:22:08.840 --> 0:22:11.240
We have three minutes for questions.

334
0:22:11.240 --> 0:22:15.320
Hello, thank you for the talk.

335
0:22:15.320 --> 0:22:21.240
A really common workflow is to use GitHub to merge pull requests.

336
0:22:21.240 --> 0:22:27.860
And whenever you merge pull requests, there usually is a merge commit signed by GitHub.

337
0:22:27.860 --> 0:22:35.000
How would you go about allowing mergers by GitHub without allowing GitHub's keys to be

338
0:22:35.000 --> 0:22:38.160
used for arbitrary commits?

339
0:22:38.160 --> 0:22:39.160
That's a very good question.

340
0:22:39.160 --> 0:22:42.240
Actually, there's probably a limitation of this model.

341
0:22:42.240 --> 0:22:46.200
So we're not using GitHub or even GitLab for gigs.

342
0:22:46.200 --> 0:22:51.160
And actual developers are making merge commits, for example.

343
0:22:51.160 --> 0:22:55.040
But typically for automated merge commits, like you have on GitHub, it's not going to

344
0:22:55.040 --> 0:22:57.360
be practical.

345
0:22:57.360 --> 0:23:01.640
It's a limitation.

346
0:23:01.640 --> 0:23:06.680
Hi.

347
0:23:06.680 --> 0:23:12.480
Thank you, first of all, thank you for your brilliant presentation.

348
0:23:12.480 --> 0:23:17.760
I see that Gwigs or Gigs, I have Gigs.

349
0:23:17.760 --> 0:23:18.760
Yeah, thanks.

350
0:23:18.760 --> 0:23:26.240
He's a very promising package manager or even the Linux distribution.

351
0:23:26.240 --> 0:23:35.040
I probably have some off-topic question regarding to your talk, but I still believe that you

352
0:23:35.040 --> 0:23:36.320
can answer it.

353
0:23:36.320 --> 0:23:41.240
It would be enough, yes or no, for me.

354
0:23:41.240 --> 0:23:46.880
Is there some kind of cross-compilation supported by Gigs?

355
0:23:46.880 --> 0:23:47.880
Sorry.

356
0:23:47.880 --> 0:23:50.640
Yeah, there is cross-compilation support, yes.

357
0:23:50.640 --> 0:23:54.280
You can even cross-compile systems.

358
0:23:54.280 --> 0:23:55.280
Quick question.

359
0:23:55.280 --> 0:23:57.040
Thank you so much for your talk.

360
0:23:57.040 --> 0:23:58.040
Quick question.

361
0:23:58.040 --> 0:24:04.000
I saw you're using PGP keys to verify the commits, but these days you can also use SSH

362
0:24:04.000 --> 0:24:05.840
keys to sign your Git commits.

363
0:24:05.840 --> 0:24:08.000
Is this also supported in Gigs?

364
0:24:08.000 --> 0:24:09.960
No, it's all open PGP.

365
0:24:09.960 --> 0:24:13.200
That's a good question.

366
0:24:13.200 --> 0:24:19.200
We started before Git supported anything else as an open PGP, actually.

367
0:24:19.200 --> 0:24:24.400
Yeah, so it's a trade-off, I guess.

368
0:24:24.400 --> 0:24:26.720
Have you considered upstreaming this into Git?

369
0:24:26.720 --> 0:24:28.960
Oh, sorry.

370
0:24:28.960 --> 0:24:33.000
Have there been any ideas about upstreaming this into Git itself?

371
0:24:33.000 --> 0:24:35.720
I did consider it.

372
0:24:35.720 --> 0:24:38.240
It's a bit of work, I guess.

373
0:24:38.240 --> 0:24:44.280
Also we have very tight integration with a small-scale open PGP implementation that can

374
0:24:44.280 --> 0:24:47.120
only do signature verification.

375
0:24:47.120 --> 0:24:52.200
So that would mean also having that into Git itself, which is quite a bit of work.

376
0:24:52.200 --> 0:24:56.360
I think it should be in Git proper eventually, yes.

377
0:24:56.360 --> 0:24:59.240
Okay, final question here.

378
0:24:59.240 --> 0:25:00.240
Thank you.

379
0:25:00.240 --> 0:25:03.240
Have you considered a six-store integration?

380
0:25:03.240 --> 0:25:06.720
Oh, sorry, can you repeat?

381
0:25:06.720 --> 0:25:10.160
Yeah, have you considered a six-store integration?

382
0:25:10.160 --> 0:25:11.480
Is it possible?

383
0:25:11.480 --> 0:25:15.160
Is some work in that direction happening?

384
0:25:15.160 --> 0:25:21.120
No, there's no work in that direction happening, as far as I know.

385
0:25:21.120 --> 0:25:25.800
I guess I'm not sufficiently familiar with six-store to see how it could integrate with

386
0:25:25.800 --> 0:25:29.640
Gigs, but I don't know, maybe there's something we could do.

387
0:25:29.640 --> 0:25:30.640
Thank you.

388
0:25:30.640 --> 0:25:31.640
Thank you, Ludovic.

389
0:25:31.640 --> 0:25:32.640
Five-minute break.

390
0:25:32.640 --> 0:25:51.840
Thank you.


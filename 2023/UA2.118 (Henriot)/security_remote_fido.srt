1
0:00:00.000 --> 0:00:12.680
Okay, so hello everyone. We'll start in a minute. The talk will have 20 minutes and

2
0:00:12.680 --> 0:00:17.760
after that there will be space for questions. If you have questions, please write them into

3
0:00:17.760 --> 0:00:26.360
the metrics room or we will try to run around with the mic. So thank you all for coming

4
0:00:26.360 --> 0:00:32.320
and I will give a word to Alexander Bocovoy who will have the first presentation about

5
0:00:32.320 --> 0:00:47.000
enabling FIDO for remote-limonaged users. Yes. Thank you, Jakob. Thank you everyone

6
0:00:47.000 --> 0:00:54.280
who came today in this drizzle day into a room that is not so easy to find. Let's fight

7
0:00:54.280 --> 0:01:06.160
security with obscurity. Okay. The talk I'm giving here is actually, it was supposed to

8
0:01:06.160 --> 0:01:16.840
be done by Iker who drives this effort at Red Hat. And I have another talk in the afternoon

9
0:01:16.840 --> 0:01:23.760
in the main tracks about passwordless Linux, where we are. This is part of it, but not

10
0:01:23.760 --> 0:01:29.160
the full stuff. So it's kind of a preview of where we are, hopefully with demos and

11
0:01:29.160 --> 0:01:44.840
without demo effect. Let's go. I hope I will be able to get something working. Nice. My

12
0:01:44.840 --> 0:02:07.760
laptop actually locked up. Really? Yeah, I'm trying. It doesn't want to. Okay. Okay.

13
0:02:07.760 --> 0:02:34.280
We'll get there. No, no, no. So the fun part is this is old laptop. This is really old

14
0:02:34.280 --> 0:02:45.400
laptop. My actual laptop got the battery puffed up. So it literally looks like this. It's

15
0:02:45.400 --> 0:02:54.240
sort of a hat, right? Here we're working there. But it means that I cannot fly with that kind

16
0:02:54.240 --> 0:03:01.840
of laptop. And this one is maybe six or seven years old. So it's a bit surprisingly slow

17
0:03:01.840 --> 0:03:11.680
for contemporary software. We have Putin Fedor. Okay. So the old, this talk about is about

18
0:03:11.680 --> 0:03:23.800
a very simple thing. Basically, this is the hardware incorporation of what people call

19
0:03:23.800 --> 0:03:34.000
nowadays as a PUS key or web orphan, which is known as FIDO tool set of specifications.

20
0:03:34.000 --> 0:03:44.160
And actually we start with a small demo, right? If I get the screen working. Okay. I'm not

21
0:03:44.160 --> 0:03:49.800
getting, I don't know what you see there. Maybe you're not seeing anything, but I actually

22
0:03:49.800 --> 0:03:57.560
was able to log in with this token. And what I will be talking about is how I actually

23
0:03:57.560 --> 0:04:18.120
get it. Let's see. Yeah. Yeah. This is the, because I logged in without password, the

24
0:04:18.120 --> 0:04:28.480
storage manager asks me to enter the password to unlock the storage manager, not the, not

25
0:04:28.480 --> 0:04:34.880
to log in with the password. That's another part of the stuff that we have to fix before

26
0:04:34.880 --> 0:04:42.560
we will be able to get into the Linux without all the passwords. Okay. Let me get to the

27
0:04:42.560 --> 0:05:11.920
top. It's really slow. Given. I really hope to get this working. Okay. So, I'm going to

28
0:05:11.920 --> 0:05:27.200
get it. Yay. Finally. So, some time ago, we at Red Hat working on the identity management

29
0:05:27.200 --> 0:05:36.640
on security on the stuff like free AP and SSDS. We started looking into a couple things.

30
0:05:36.640 --> 0:05:49.360
One of them is the how we can get passwordless into our systems. Mostly we talk about remote

31
0:05:49.360 --> 0:05:58.360
service and because that's what most of our customers are using. And many of those customers

32
0:05:58.360 --> 0:06:10.200
started asking about the thing that sort of required them to be enforced for them from

33
0:06:10.200 --> 0:06:18.200
the governments and so on. So, one of those things that is forced is FIDO2 or WebAuth

34
0:06:18.200 --> 0:06:24.840
because well, everybody else supports it. Where everybody else means all these web applications,

35
0:06:24.840 --> 0:06:34.480
all the other operating systems like Microsoft Windows and the others. And, of course, there

36
0:06:34.480 --> 0:06:42.400
are properties that related to this. They are all nice. But the reality is that you

37
0:06:42.400 --> 0:06:50.960
get all of this nicely working mostly in browsers. At least on Linux. And not in all browsers.

38
0:06:50.960 --> 0:06:59.680
Some browsers do not support WebAuth and workflows. Some do. But we need to get these logins into

39
0:06:59.680 --> 0:07:04.840
the actual systems. Because if you are not able to log in into these systems, you cannot

40
0:07:04.840 --> 0:07:12.360
use this passwordless thing. And, of course, from the technical point of view, it's a combination

41
0:07:12.360 --> 0:07:20.920
of some PAM modules and some changes to applications and so on. It shouldn't be that hard, right?

42
0:07:20.920 --> 0:07:26.360
So, there are already PAM modules that implement this. The problem is that if you look at this

43
0:07:26.360 --> 0:07:33.120
from systematic point of view, if you manage thousands of hosts where you need to get access

44
0:07:33.120 --> 0:07:41.720
with the credentials stored somewhere, you need better than just everything defined on

45
0:07:41.720 --> 0:07:47.480
the single machine. So, we started looking into what we have. We have centralized identity

46
0:07:47.480 --> 0:07:55.280
management with free IPA. We have SSDS on the client side that allows to query these

47
0:07:55.280 --> 0:08:01.880
different identity management and so on. So, we started looking at what we can create all

48
0:08:01.880 --> 0:08:11.480
of this. And we wanted to enable use of Fido 2 in the console for these remote managed

49
0:08:11.480 --> 0:08:19.360
users. We start with local authentication. This is what works now. It didn't work a couple

50
0:08:19.360 --> 0:08:26.520
weeks ago. We already have some progress. And the second part will be remote authentication,

51
0:08:26.520 --> 0:08:33.440
but with a twist. Because all the things like remote authentication using native SSH, for

52
0:08:33.440 --> 0:08:41.760
example, protocol, it's really not about this. It's not compatible with the local use of

53
0:08:41.760 --> 0:08:50.360
the Fido 2. It encapsulates some of the principles, but it converts kind of user or assertion

54
0:08:50.360 --> 0:08:57.760
of the Fido 2 into a different form specific to SSH and cannot be reused for anything else.

55
0:08:57.760 --> 0:09:07.200
So, the reality is that's coming from where all these governmental admins or big organizations

56
0:09:07.200 --> 0:09:14.000
admins are getting the pressure from. This pressure came actually a year ago in the form

57
0:09:14.000 --> 0:09:23.360
of what they call zero trust memorandum. The zero trust memorandum is effectively announced

58
0:09:23.360 --> 0:09:33.120
by the executive office of the president of United States to the set of threats that they

59
0:09:33.120 --> 0:09:41.800
got over the last decade or visualized at least in public. So, this memorandum basically

60
0:09:41.800 --> 0:09:50.320
states by the end of fiscal year 2024, a number of things should happen in the governmental

61
0:09:50.320 --> 0:09:58.880
organizations. There are, I think, five big targets that they have to go. And one of these

62
0:09:58.880 --> 0:10:09.440
targets is to switch to passportless everywhere. And to say the truth, governmental organizations

63
0:10:09.440 --> 0:10:17.080
in the U.S. already using passportless form with smart cards. But WebAuthn is called

64
0:10:17.080 --> 0:10:27.440
out as one of the recommended ways of doing it in the memorandum. So, zero trust memorandum

65
0:10:27.440 --> 0:10:34.160
says that basically you have to use either personal identity verifications or smart cards,

66
0:10:34.160 --> 0:10:42.520
we already support that, and WebAuthn is another approach. And go there. There you go. You

67
0:10:42.520 --> 0:10:52.560
see the customers or prospective customers getting pressure from those who drive them,

68
0:10:52.560 --> 0:11:00.400
who give the budgets and so on. And then these customers come to Red Hat and all other companies

69
0:11:00.400 --> 0:11:07.280
and ask to get this working because they have to comply. Not ask comply with this, but the

70
0:11:07.280 --> 0:11:14.080
customers comply with this. The lucky part we have is that all of this actually in the

71
0:11:14.080 --> 0:11:21.920
interest also of the community because, well, it simply improves our state. Not only at

72
0:11:21.920 --> 0:11:28.800
work, but also at home. If we switch to passportless, everywhere we get a bit secure environment,

73
0:11:28.800 --> 0:11:39.640
I hope, given the practices that we preach to at home. But this is the part. So, if you

74
0:11:39.640 --> 0:11:48.320
have remotely managed users, basically define somewhere centralized your accounts, your

75
0:11:48.320 --> 0:11:57.440
POSIX identity, your home directory, your shell and so on, somewhere should be defined

76
0:11:57.440 --> 0:12:04.520
which passwordless credentials you can use. These credentials should be delivered locally.

77
0:12:04.520 --> 0:12:10.400
And if you have a device like this one or maybe the one on the phone, which we do not

78
0:12:10.400 --> 0:12:22.080
support yet, it needs to be verified. It needs to be engaged with applied and so on. And

79
0:12:22.080 --> 0:12:28.800
in this centralized environment, we often have to deal with the fact that you are not

80
0:12:28.800 --> 0:12:34.280
only logging into the single machine, you are jumping somewhere. You are interacting

81
0:12:34.280 --> 0:12:41.640
with other applications. Typically, this transfer of authentication state happens through a

82
0:12:41.640 --> 0:12:49.880
transition from your local authentication to something like Kerberos, which issues a

83
0:12:49.880 --> 0:12:57.040
ticket recording your authenticated state and then uses this ticket to issue other tickets

84
0:12:57.040 --> 0:13:07.560
to other services in the environment that's being built. So, on the high level, in principle,

85
0:13:07.560 --> 0:13:16.200
all the stuff that we deal with in FreeAP and SSD already. For FIDO2, we kind of, this

86
0:13:16.200 --> 0:13:24.120
is the new thing for us, but we use the FIDO2 library that's already existing and shipped

87
0:13:24.120 --> 0:13:32.080
in many distributions for the implementation of the FIDO2 stuff. We store the data at the

88
0:13:32.080 --> 0:13:42.240
LDAP server and fetch there, that's SSD Excel set. And the other part is we integrate with

89
0:13:42.240 --> 0:13:49.160
FreeAP Kerberos implementation to provide the transition from FIDO2 to Kerberos. So,

90
0:13:49.160 --> 0:13:54.720
for the local authentication, what happens is that you have the SSD running on the machine,

91
0:13:54.720 --> 0:14:02.080
it picks up the user information from LDAP record for that user. Part of that record

92
0:14:02.080 --> 0:14:09.200
is the specification of the passkey record, the details, pretty much like in the traditional

93
0:14:09.200 --> 0:14:16.680
way you store them somewhere on the disk, but here you store them remotely. Then, when

94
0:14:16.680 --> 0:14:26.680
token is added and there is a need to log in over PAM, any PAM service, you get a lip

95
0:14:26.680 --> 0:14:34.680
FIDO2 communication with the device and performing its magic, comparing with the record that

96
0:14:34.680 --> 0:14:42.640
you have. So, in LDAP this looks like this. I intentionally included a bunch of stuff

97
0:14:42.640 --> 0:14:50.720
here, but literally all we care about is that we have this passkey attribute and obviously

98
0:14:50.720 --> 0:14:57.240
in LDAP it's a structured store, so you have to have an object class that defines the use

99
0:14:57.240 --> 0:15:06.680
of this attribute. And on IPA level this looks like this. There is a user information which

100
0:15:06.680 --> 0:15:14.400
also has this passkey mapping. This is not in the released version of IPA yet. Hopefully

101
0:15:14.400 --> 0:15:22.520
by, I hope by spring we will get this, but later I will show you where you can get the

102
0:15:22.520 --> 0:15:31.960
test version. So, in IPA case only you get after this login which is currently not working,

103
0:15:31.960 --> 0:15:41.180
so you get a Kerberos ticket. This is how I have a lot of view how it goes in. The presentation

104
0:15:41.180 --> 0:15:47.680
is available on the side, so I'm not focusing on describing these details, but effectively

105
0:15:47.680 --> 0:15:59.540
we extended MIT Kerberos implementation to allow us to communicate with the KDC all these

106
0:15:59.540 --> 0:16:09.800
details related to web often implementation. So, behind KDC on free IPA server we have

107
0:16:09.800 --> 0:16:16.720
relay and party implementation that performs part of this authentication and then uses

108
0:16:16.720 --> 0:16:24.920
Kerberos protocol to transfer the bits between the two sides. So, test it. So, this is actually

109
0:16:24.920 --> 0:16:35.000
a demo of what I kind of ran before I got my presentation working. So, this is the login

110
0:16:35.000 --> 0:16:44.680
screen this morning. And to unlock I have to insert this passkey and press enter. You

111
0:16:44.680 --> 0:16:54.680
don't see the full message because it's so large compared to the actual input string

112
0:16:54.680 --> 0:17:06.280
that GDM shows. Then I just activate the device and magic happens. I log in. How you can play

113
0:17:06.280 --> 0:17:13.000
with this yourself if you want to set up, Iker wrote some instructions in this blog

114
0:17:13.000 --> 0:17:21.000
post and he maintains copper for Fedora. Fedora 36 and 37 at this point. So, you can

115
0:17:21.000 --> 0:17:26.920
get SSDS packages. There is one package that is not installed by default. This is exactly

116
0:17:26.920 --> 0:17:36.040
the support for FIDO2. Then you need to enable it in the SSDS configuration. But if you follow

117
0:17:36.040 --> 0:17:44.360
Iker's instructions, you should get it working. Right now it only works with free IPA because

118
0:17:44.360 --> 0:17:53.000
we have free IPA from that corporate because it has the support for storing passkeys in

119
0:17:53.000 --> 0:18:00.360
the old app server. Okay. And I will stop here because I have like three minutes and

120
0:18:00.360 --> 0:18:06.200
I would like to hear any questions and feedback. This is sort of early stage. I will show a

121
0:18:06.200 --> 0:18:14.560
bit more in the afternoon with the bigger presentation that they have at the main track.

122
0:18:14.560 --> 0:18:22.120
There will be a bit more demos there. But we really would love to hear your feedback

123
0:18:22.120 --> 0:18:44.520
and what you want to see it working there. I have a question. So, what happens if the

124
0:18:44.520 --> 0:18:52.800
key is lost or stopped working or something like that? So, what happens if the key is

125
0:18:52.800 --> 0:19:03.480
lost or stops working because it's a hardware that might blow up, right? That totally depends

126
0:19:03.480 --> 0:19:12.160
on how the system is defined. If the system is defined to allow fallback to other passkeys

127
0:19:12.160 --> 0:19:20.000
or it's allowed to use a different authentication method to fall through to those methods will

128
0:19:20.000 --> 0:19:30.600
happen. If you want to, if the key is lost, for example, user or admin can remove from,

129
0:19:30.600 --> 0:19:37.240
let me get here, from the user entry, you can remove the passkey mapping and then this

130
0:19:37.240 --> 0:19:46.320
user wouldn't be able to use this passkey anymore. So, it's in practice this is a process

131
0:19:46.320 --> 0:19:54.720
thing. You have to define your policies for organizational policies, how you handle any

132
0:19:54.720 --> 0:20:03.200
lost credentials. There's no difference with this. Some systems like, for example, Apple

133
0:20:03.200 --> 0:20:10.360
and MacOS actually forces you to define two separate passkeys, two separate tokens if

134
0:20:10.360 --> 0:20:19.320
you enable one because they think that you most likely will lose one. They probably figure

135
0:20:19.320 --> 0:20:32.920
it out something about the users. Okay. Any other question? Pass the hash. There's nothing

136
0:20:32.920 --> 0:20:41.160
to pass here. So, the whole, I'm not going into details of web often implementation.

137
0:20:41.160 --> 0:20:50.520
It's all, it's fairly secure in this context. Yeah. You have to have actual hardware or

138
0:20:50.520 --> 0:20:55.520
software implementation of the token. You have to have exactly the same key. Key is

139
0:20:55.520 --> 0:21:01.920
not, the private part of the key is typically not leaving the device so it's fairly secure

140
0:21:01.920 --> 0:21:09.640
in that case. Hi. It's Stefan here. Is it possible to add yet another factor to this

141
0:21:09.640 --> 0:21:17.760
authentication? Can you please speak up louder? Sorry. Can you add another factor to this

142
0:21:17.760 --> 0:21:26.880
key that you will bring? Like a, like a, I'm sorry, I'm not here. Guys, could you please

143
0:21:26.880 --> 0:21:33.200
silence a bit? Sorry. I will speak out loud. Can you add another authentication factor

144
0:21:33.200 --> 0:21:39.360
to the process? Like a token next to this physical key? So, you're asking if there's

145
0:21:39.360 --> 0:21:47.800
a possibility to amend use of passkeys with something else. Exactly. I believe it's possible

146
0:21:47.800 --> 0:21:55.320
to, because all of this available over a PAM interface, you can stack up several PAM modules

147
0:21:55.320 --> 0:22:02.960
in it. In SSSD, that wouldn't be possible at this moment to get it, but maybe this would

148
0:22:02.960 --> 0:22:10.160
be a good idea for going forward to allow extending and forcing to use several methods.

149
0:22:10.160 --> 0:22:16.880
Yeah. I will write this down. Okay. I guess I'm out of time. I think we can still have

150
0:22:16.880 --> 0:22:29.560
one last question if there is some. Okay. Nice, nice technology. I have a question about

151
0:22:29.560 --> 0:22:33.440
user nameless login. Is it also supported? Because this is the promise of FIDOT2 that

152
0:22:33.440 --> 0:22:38.640
you can have discoverable credentials stored on the token. So, the only thing you do is

153
0:22:38.640 --> 0:22:44.240
plug in the token and use a fingerprint. Does it also support user nameless and passwordless

154
0:22:44.240 --> 0:22:55.040
login? So, the question is whether login where a system, when you insert the token, identifies

155
0:22:55.040 --> 0:23:03.600
to which user this token belongs to. Does it work or not? Implementation, as right

156
0:23:03.600 --> 0:23:12.080
now does not support it. There is a plan to support discoverable credentials. There are

157
0:23:12.080 --> 0:23:18.800
few things that I would like to address in a presentation in the afternoon related to

158
0:23:18.800 --> 0:23:29.080
UX. Basically, right now we have very limited in how graphical environments allow to do

159
0:23:29.080 --> 0:23:36.040
this discoverability. So, for example, for the smart cards, a couple years ago we changed

160
0:23:36.040 --> 0:23:47.160
GNOME, GDM to extend to allow picking up different identities from the smart card. And if user

161
0:23:47.160 --> 0:23:56.600
has, for example, several identities associated with the same smart card, then GDM allows

162
0:23:56.600 --> 0:24:04.600
to pick up the right one. The same problem comes with the PUS keys. Maybe I'm ended with

163
0:24:04.600 --> 0:24:10.280
the idea of discoverable ones, but it's the same story. So, it's more like not the back

164
0:24:10.280 --> 0:24:17.560
end but the front end, the one that presents you. And user experience is pretty bad right

165
0:24:17.560 --> 0:24:24.520
now on this. But the plan is to fix it eventually. Okay. Thank you, Alexander, for the talk. Thank

166
0:24:24.520 --> 0:24:36.280
you for all the questions.


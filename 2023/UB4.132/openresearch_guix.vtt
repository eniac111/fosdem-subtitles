WEBVTT

00:00.000 --> 00:15.600
So, sorry for the mess. It's a bit impressing all these people and so on. I'm Simon. I'm

00:15.600 --> 00:23.080
working as a research engineer at University of Paris and I will be here to present you

00:23.080 --> 00:35.760
Geeks, to be able to do some reversible research. And there is a group, Geeks HPC, which try

00:35.760 --> 00:47.440
to apply Geeks tooling for scientific context. So, currently we are in a replication and

00:47.440 --> 00:56.600
reproducibility crisis. So, more than 70% of researchers are unable to reproduce the

00:56.600 --> 01:05.840
results of peers or more than half are unable to reproduce their own results. So, we have

01:05.840 --> 01:13.440
a big issue. So, there is many problems of this replication crisis and maybe one solution

01:13.440 --> 01:20.520
is open science. So, what does it mean open science? So, what does it mean science? Science

01:20.520 --> 01:27.360
means being transparent and collective activity. And what is a scientific result? Scientific

01:27.360 --> 01:35.600
result is some experiment, so producing experimental data and then we have some numerical processing.

01:35.600 --> 01:42.160
So, to do that, today we have different way because we need to communicate. So, we need

01:42.160 --> 01:47.360
to write results. So, we need open article to be able to read the results, to share the

01:47.360 --> 01:52.800
data. So, we have open data. We need to share the source code. But there is something that

01:52.800 --> 01:57.760
we never discuss is that all that need to be glued together because there is a numerical

01:57.760 --> 02:02.640
processing. So, we need to glue everything together. So, we need another one. We need

02:02.640 --> 02:14.600
a computational environment. And this is really one of the issue is that if this is not open,

02:14.600 --> 02:21.240
all the other stack is failing. So, that's the topic of today. How do we manage this

02:21.240 --> 02:30.320
computational environment? So, again, a result is a paper, some data and an analysis. And

02:30.320 --> 02:36.640
there is some parts which are, I mean, possible to audit, for example, a paper. You can read

02:36.640 --> 02:42.840
it. A data, you can read the protocol that generates the data. You have analysis, you

02:42.840 --> 02:48.240
can read the script. But there is some part that are opaque. For example, the instrument,

02:48.240 --> 02:54.480
a telescope, a microscope, this is opaque. We don't know how it works. But there is something

02:54.480 --> 03:00.840
that is depend on our collective practice as researchers. And this is something that

03:00.840 --> 03:07.800
we can act on to do a better research. So, the question is to be able to eliminate at

03:07.800 --> 03:20.920
least this dependent and turn this as an auditable task to be really transparent. So, yeah,

03:20.920 --> 03:28.480
from my point of view, a computation and computing is just similar to an instrument. So, we should

03:28.480 --> 03:35.200
apply the same strategy that experimental people are applying for any instrument. And

03:35.200 --> 03:45.520
computing is just an experiment, in fact. So, the challenge about reputible science.

03:45.520 --> 03:49.960
From my point of view, there is two kinds. The first one is controlling the source of

03:49.960 --> 03:57.000
variation. What is different between this and that? So, between this computational environment

03:57.000 --> 04:03.480
and this computational environment. Because as with the telescope, for example, we want

04:03.480 --> 04:08.040
to know what is different between this telescope and this telescope to be sure that what we

04:08.040 --> 04:13.760
are observing is correct. So, from a scientific method, we need that the computational environment

04:13.760 --> 04:20.120
is transparent. And from a scientific knowledge viewpoint, what we are building together need

04:20.120 --> 04:26.480
to be independent. So, what I'm observing, you should observe the same. And this observation

04:26.480 --> 04:32.160
should be sustainable when the time is passing. We should be able to observe the same thing.

04:32.160 --> 04:40.360
Otherwise, it means that maybe we miss something. So, the big question today is with this kind

04:40.360 --> 04:47.880
of context, how do we redo later and elsewhere? So, I did something on my machine and you

04:47.880 --> 04:53.480
have to do this thing on your machine, for example, six months or one year or five years

04:53.480 --> 05:00.960
later with the computer. And this is a big issue and is part of the reputible crisis

05:00.960 --> 05:07.040
in science from my point of view. So, what is a computational environment? Computational

05:07.040 --> 05:13.920
environment implies various points. For example, what is a source code? But, for example, if

05:13.920 --> 05:22.640
say I use Python and this script, okay, we have the source codes of Python is in C and

05:22.640 --> 05:29.040
we have the source code of this Python script, okay. But the Python interpreter require a

05:29.040 --> 05:36.360
C compiler, so we need tools for building. And my script, for example, needs some Python

05:36.360 --> 05:43.640
libraries, so we need also tools for running at runtime. So, each tool has the same issue.

05:43.640 --> 05:49.000
What is the source code? What is the tools for building? And so, this is recursive. So,

05:49.000 --> 05:55.640
this is a bigger issue. And answering all this question is controlling the source of

05:55.640 --> 06:04.160
variation. So, the question is so how do we capture the answer of all this question? So,

06:04.160 --> 06:10.520
the question is not new. We have already tools. Picket manager modifies container. So, for

06:10.520 --> 06:15.200
example, with Picket manager like Appetit for Debian, Yum for Red Hat, you can control

06:15.200 --> 06:19.640
this computational environment. But there is some issue. For example, how do you have

06:19.640 --> 06:24.720
several versions of open blast on the same machine? It doesn't work really easily with

06:24.720 --> 06:32.520
Debian or with Yum and so on. So, there is fixes but it's not really, I mean, practical

06:32.520 --> 06:38.920
is sometimes it's difficult. So, you have to fix this issue, you have environment manager

06:38.920 --> 06:45.560
like Conda, Pip, Modify and so on. But this is really difficult because, for example,

06:45.560 --> 06:53.120
in Conda, how do you know how it is built? What is inside what you install? So, this

06:53.120 --> 07:01.560
is for transparency in science. Modify, how do you use modifies on the laptop? I think

07:01.560 --> 07:08.480
no one. And Docker is for container, Docker, Singularity or whatever is a strategy which

07:08.480 --> 07:12.920
generally based on the previous solution. So, in fact, you have exactly the same problems

07:12.920 --> 07:17.640
and the previous solution. It just helped to move stuff from one place to the other

07:17.640 --> 07:24.720
one but it doesn't help to be able to have the correct thing in the first time. Geeks,

07:24.720 --> 07:31.480
in fact, is all these three solution glued together. So, it tried to fix all the anions

07:31.480 --> 07:39.480
from each to have something, I mean, working, fixing all the issue of everything. So, Geeks

07:39.480 --> 07:44.280
is a package manager like Appetit, Yum, et cetera. It's transactional and declarative.

07:44.280 --> 07:50.040
It means that you can roll back, you can have a concurrent version and so on. It can produce

07:50.040 --> 07:58.760
a Pax which is Docker images, for example. It can produce virtual machines like NCBEL

07:58.760 --> 08:06.240
for deploying on some machine. You can build a complete distribution and it's also a scheme

08:06.240 --> 08:14.920
library so you can extend Geeks. So, okay, the talk is 25 minutes. So, just kind of Appetit

08:14.920 --> 08:20.480
before lunch. So, I don't speak about all that because it's too much. So, I just speak

08:20.480 --> 08:27.360
about how Geeks help in open research from my point of view. So, I think it's really

08:27.360 --> 08:33.880
easy to try. You have just a script and give a look before installing it. It's just a vast

08:33.880 --> 08:39.640
script but check it and you can install Geeks on any recent distribution. So, it's really

08:39.640 --> 08:44.840
easy to try. You are running Debian. You can try Geeks without installing the complete distribution.

08:44.840 --> 08:54.800
You can use Geeks on the top of any distribution and it's really easy to try. Give a try. So,

08:54.800 --> 09:03.080
now, Geeks is just another package manager. So, you have the same command that you have

09:03.080 --> 09:10.120
in any package manager for sharing packages, showing packages, installing packages, removing

09:10.120 --> 09:15.040
packages and so on. It's exactly the same as any package manager. But you have some

09:15.040 --> 09:23.120
more functionality like transactional. So, everything you can do action in the same time.

09:23.120 --> 09:28.120
So, for example, removing and installing in the same transaction or you can roll back.

09:28.120 --> 09:34.160
For example, you install something and you want to roll back to uninstall this thing

09:34.160 --> 09:39.480
without breaking nothing. So, okay, this is another package manager. But is it really

09:39.480 --> 09:46.920
another package manager? So, yeah, we can have a command line. We install remove without

09:46.920 --> 09:52.880
special privilege. So, this is nice. It's transactional. So, there is no broken state.

09:52.880 --> 09:58.960
We have binary substitutes. So, we don't have to wait hours and hours to have our binary.

09:58.960 --> 10:03.680
But this is nice. But what is really, really nice is decorative management. It means that

10:03.680 --> 10:11.720
everything is a configuration file with scheme. But you can declare everything and you can

10:11.720 --> 10:18.440
produce isolated environment on the fly. This is something that's really helpful. And you

10:18.440 --> 10:29.080
can also see Geeks as a factory for the Docker images, for example. So, okay, this is all

10:29.080 --> 10:35.440
interesting feature. But why Geeks is reproducible? Or what does it mean it's reproducible? Reproducible

10:35.440 --> 10:41.600
means, I mean, for reproducibility, we need to talk about what is a version. So, what

10:41.600 --> 10:48.960
is a version? At least say, for example, I use GCC at version 11. Okay, nice. But what

10:48.960 --> 10:55.520
does it mean? Concretely, I use GCC at version 11. It means that you need GCC, the compiler,

10:55.520 --> 11:02.280
but you also need LD, which is a linker. And you know, Benitez, for example, and the Gleepsy

11:02.280 --> 11:08.240
library. But the compiler GCC, it needs, for example, MPC, which is a package that does,

11:08.240 --> 11:16.440
I don't know what exactly, anyway. And you need also MPFR and so on. And you have this

11:16.440 --> 11:24.000
kind of graph. And we can ask the question, is it the same GCC at version 11 if we replace

11:24.000 --> 11:35.160
this MPF4 at version 4.1 by MPF4 at version 4.0? Is it the same GCC or not? And maybe

11:35.160 --> 11:39.360
not. And if it is not the same, maybe we're seeing a difference. How can we show that

11:39.360 --> 11:46.680
we are using the exact same GCC? So this is just an extract of the graph, because the

11:46.680 --> 11:54.080
graph have roots. And yeah, it can be really large. And maybe we can also talk about what

11:54.080 --> 12:01.640
are the roots of this graph. But this is another talk. So when you say that, okay, but I need

12:01.640 --> 12:11.440
to have a version. So what is my version in Geeks? So Geeks describe the state of Geeks.

12:11.440 --> 12:16.840
So in fact, Geeks describe is a version of Geeks. And what it does, in fact, it paints

12:16.840 --> 12:24.440
the complete collection of all the packages and Geeks itself. And because that we are

12:24.440 --> 12:32.920
able to freeze the complete graph, we can move this graph from one place to the other.

12:32.920 --> 12:45.000
So this graph, in fact, describe the nodes of each, the node in this graph specify a

12:45.000 --> 12:50.320
receipt. And this receipt defines the code source, the build time tombs, and the dependency.

12:50.320 --> 12:55.600
So for me, yeah. And this graph can be really, really large. For example, for Skypy, which

12:55.600 --> 13:02.120
is a scientific Python library, there is more than 1,000 nodes. So yeah, it can be really

13:02.120 --> 13:17.640
large. So for when I say GCC at version 11, it means one fixed graph. And providing the

13:17.640 --> 13:24.040
state which describes this complete graph. And I can reproduce this complete graph on

13:24.040 --> 13:30.400
another machine. So this is collaboration in action. So Alice describes the list of

13:30.400 --> 13:38.800
the tools in a manifest declarative way to generate the environment Geeks share and

13:38.800 --> 13:45.520
providing the tools. So this creates an environment containing the tools that are listed in the

13:45.520 --> 13:53.840
manifest file. OK, this is nice. But now she describes the revision of Geeks. So she writes

13:53.840 --> 14:02.640
Geeks describe and this fix the state of Alice. So OK, this Alice is working on her laptop.

14:02.640 --> 14:09.320
But collaboration is share this computational environment. So it's about sharing the state.

14:09.320 --> 14:14.840
To share the state, you need to share one specific graph. To share this graph, you need

14:14.840 --> 14:26.680
to only share these two files. And if Blake has these two files, Blake can create the

14:26.680 --> 14:32.880
exact same computational environment as Alice. So you have the Geeks time machine. You specify

14:32.880 --> 14:40.680
the state of Alice shell and specify the tools that Alice used. And Blake and Alice are running

14:40.680 --> 14:48.040
the exact same computational environment. And for example, if you have Carol who knows

14:48.040 --> 14:54.040
these two files, she also can reproduce the exact same that Alice and Blake. So in fact,

14:54.040 --> 14:59.880
you only need two files. And with these two files, you can reproduce everything from one

14:59.880 --> 15:08.440
place to the other. So in fact, you have this kind of picture. Alice, Blake, Carol are in

15:08.440 --> 15:15.200
different time frame. But they can jump from this time frame, virtually, in different time

15:15.200 --> 15:21.120
frames, to the same place. Because their machines are in different state, but they can temporarily

15:21.120 --> 15:29.040
go to another state to create the computational environment. To make this work when the time

15:29.040 --> 15:34.720
is passing, you need to preserve all the source code. And this is not straightforward. It's

15:34.720 --> 15:39.360
not trivial to preserve all the source code. And you also need some backward compatibility

15:39.360 --> 15:45.320
of the Linux kernel and some compatibility of the hardware. But OK. And when these three

15:45.320 --> 15:50.600
conditions are satisfied, you have the reproducibility. But what is the size of the window, of the

15:50.600 --> 15:54.720
time window, where these three conditions are satisfied? And this is, from my point

15:54.720 --> 16:02.360
of view, unknown. And Geeks is, to my knowledge, a case unique by experimenting to be able,

16:02.360 --> 16:06.920
because we have the tooling to do all that. And now we can know what is the size that

16:06.920 --> 16:13.000
we are able to reproduce the past in the future.

16:13.000 --> 16:18.880
So what is software heritage? So software heritage is an archive. It collects, preserves

16:18.880 --> 16:26.360
software in source code form from a very long term. And Geeks is able to save the source

16:26.360 --> 16:33.360
code of the package and the receipt of the package itself. And Geeks itself is also saved

16:33.360 --> 16:39.640
in software heritage. And Geeks is able to use a software heritage archive to fall back

16:39.640 --> 16:45.200
if a stream disappears. So you have the postdoc working on some GitLab instance. And the account

16:45.200 --> 16:50.560
is closed because the postdoc is moving to other place and so on. And now you have this

16:50.560 --> 16:58.080
paper with this URL with a GitLab package and, oh, no, it doesn't work because the account

16:58.080 --> 17:05.640
is closed. If you were using Geeks, transparently, you can check if the source code is on software

17:05.640 --> 17:13.520
heritage. And this asks really good question about how to fit a software. And do you notice

17:13.520 --> 17:18.680
it only the source? And what about the dependency and the build time options and so on? How

17:18.680 --> 17:25.440
do you fit a software? And how do you fit it? Do you fit with intrinsic identifier,

17:25.440 --> 17:31.920
like checksum, or with intrinsic identifier, like version label? This is not easy. So in

17:31.920 --> 17:40.000
summary, there are three commands. I'm almost done, right? So in summary, you have three

17:40.000 --> 17:45.680
commands. And these three commands, which are Geeks shell, Geeks time machine, and Geeks

17:45.680 --> 17:56.600
time machine. They help you to have a computational environment that you can inspect and collectively

17:56.600 --> 18:04.800
share. So if you have this and two files, manifest and channel files, you are reproducible

18:04.800 --> 18:17.920
over the time. So OK, for offline, because I convinced you that is cool. So here is some

18:17.920 --> 18:28.600
resources to read offline. So Geeks HPC is a group of people trying to apply this Geeks

18:28.600 --> 18:36.240
tooling to scientific research. And we're organizing coffee Geeks, where we drink coffee

18:36.240 --> 18:48.200
and speak about Geeks. There is an article trying to explain this kind of vision of what

18:48.200 --> 18:58.240
Geeks could provide for open research. And for French speaker, there is a one hour tutorial.

18:58.240 --> 19:09.120
And there is a now Geeks is 10 years, so it's kind of ready. So we organized 10 years events

19:09.120 --> 19:14.520
where there is some really nice materials about Geeks. And Geeks is not new at first

19:14.520 --> 19:21.520
time. So here, there is all the number are linked to the previous presentation. So as

19:21.520 --> 19:25.560
you see, there is a 31 presentation about Geeks in first time. So you have a lot of

19:25.560 --> 19:34.480
material about what Geeks can do for your job, for your task. So it ran in production

19:34.480 --> 19:40.360
on big cluster, but also in a lot of laptop and desktop. And here, for example, is two

19:40.360 --> 19:50.840
paper in completely medical and biomedical stuff using Geeks as a tooling, as I presented

19:50.840 --> 19:58.040
about Geeks share time machine and so on. So open science means to be able to trace

19:58.040 --> 20:04.400
and transparent because it's to be able to collectively study bug to bug, to be what

20:04.400 --> 20:08.600
is different from one thing to the other thing. And this is a scientific method. And we have

20:08.600 --> 20:14.320
to apply the scientific method to the computational environment. This is my opinion and the message

20:14.320 --> 20:20.720
that I would like you bring back to home. And if you have Geeks, we can do that by controlling

20:20.720 --> 20:26.640
the environment and compare two different environment to know what is different. So

20:26.640 --> 20:34.720
okay, this is the kind of what we are trying to do with Geeks project. So thank you. And

20:34.720 --> 20:37.720
I'm ready for your question.

20:37.720 --> 21:02.720
Yeah. Yeah. I will try to do my best. Yeah.

21:02.720 --> 21:17.640
Ah, look, look, looking. So the question is, okay, I don't have the root privilege to install

21:17.640 --> 21:21.960
Geeks on the cluster because once Geeks is installed on any cluster, you can, you can

21:21.960 --> 21:26.000
run it without privilege, but you need to install the first time you need to install

21:26.000 --> 21:32.840
Geeks, you need root privilege. And the system administrator of my cluster doesn't mean,

21:32.840 --> 21:38.840
yeah, I need to convince him. So maybe the answer is to say other people are already

21:38.840 --> 21:45.720
doing that. So it's not, I mean, to reduce the scare to provide a new tool. This is what

21:45.720 --> 21:54.200
I would like to try to say, okay, these people are doing it. So maybe it's not so scary.

21:54.200 --> 21:59.040
I think it was after. So yeah.

21:59.040 --> 22:02.280
You mentioned that you're not sure how big the time window is.

22:02.280 --> 22:03.280
Yeah.

22:03.280 --> 22:07.360
If you look today, how far can you back and still reproduce?

22:07.360 --> 22:09.240
So five years, 10 years.

22:09.240 --> 22:15.120
No. So the question is, okay, what is the size of the window and can we go back five

22:15.120 --> 22:22.760
years from now in the past? The issue is that the mechanism to bring back in time or to

22:22.760 --> 22:30.160
travel in time in Geeks had been introduced in 2019. So in fact, with Geeks, we don't

22:30.160 --> 22:39.000
have the tooling to go back earlier. So now, I mean, the zero for Geeks is a version one.

22:39.000 --> 22:40.000
So it's 2019.

22:40.000 --> 22:41.000
Yeah.

22:41.000 --> 22:53.400
A lot of scientists are using Mac OS and not Linux. Is it possible to use all this stuff

22:53.400 --> 22:54.400
even though Geeks can't really run on Mac OS?

22:54.400 --> 22:59.960
So Geeks cannot run on Mac OS, but we can ask the question, is it transparent if we

22:59.960 --> 23:05.240
are running on Mac OS? So is it, are we applying scientific method if we're running on Mac

23:05.240 --> 23:06.240
OS?

23:06.240 --> 23:12.080
I mean, I have not the question, is it a collective decision?

23:12.080 --> 23:13.080
Yeah.

23:13.080 --> 23:23.920
Hello, my name is Ivan. As far as I understand, who is or Geeks provides the same approach

23:23.920 --> 23:26.920
as the Geeks?

23:26.920 --> 23:27.920
Yeah.

23:27.920 --> 23:36.840
I've never used Geeks before, but I have some experience with Nix. Is there any crucial

23:36.840 --> 23:38.200
differences between them?

23:38.200 --> 23:48.520
So from my point of view, sorry, in the slides, there is some appendix. So there is extra

23:48.520 --> 23:53.480
slide and there is one extra slide trying to explain what, from my point of view, the

23:53.480 --> 23:59.200
difference with Nix. So the question is, what is the difference between Nix and Geeks? Because

23:59.200 --> 24:07.200
Geeks use exactly the same package management functional strategy. So what is the difference?

24:07.200 --> 24:12.440
From my point of view, the difference is that you have a continuum in Geeks in the language.

24:12.440 --> 24:21.480
The package I wrote in Scheme and the code of Geeks itself is also wrote in Scheme. The

24:21.480 --> 24:27.280
configuration file I wrote in Scheme. So you have a big continuation with everything. And

24:27.280 --> 24:31.680
because that, you can extend Geeks for your own stuff.

24:31.680 --> 24:39.360
So for example, you can write a package transformation on the fly using, I mean, Geeks as a library.

24:39.360 --> 24:43.600
You cannot do that with Nix because you have a lot of different tooling in C++ and some

24:43.600 --> 24:51.600
patterns. From my point of view, is this unity of the continuum of the language?

24:51.600 --> 24:57.600
As far as I understand, Scheme is a general purpose programming language.

24:57.600 --> 25:08.320
Yeah. But Scheme allow you to write domain specific language. It's a good language to

25:08.320 --> 25:12.440
write domain specific language. So in fact, you have the both of the two worlds. From

25:12.440 --> 25:13.440
my point of view.

25:13.440 --> 25:14.440
Thank you.

25:14.440 --> 25:15.440
Last question.

25:15.440 --> 25:16.440
Oh yeah. Sorry. Last question. Yeah.

25:16.440 --> 25:17.440
That's really tough. In Geeks, we always control the fancy graph even if you're building on

25:17.440 --> 25:18.440
top of it or if you cut the graph.

25:18.440 --> 25:36.240
Yeah. This is a, so when you are running Geeks, for example, on the top of Debian. So how do

25:36.240 --> 25:41.120
we manage the graph and can we cut the graph to reuse a part of the Debian part? I mean,

25:41.120 --> 25:52.120
a part of the graph from Debian. So the question if maybe it could be helpful for some packages.

25:52.120 --> 25:57.680
But when you do that, you are not able to manage the computational environment because

25:57.680 --> 26:04.280
if you have, for example, if I cut the graph on Debian. So I have a state in Debian with

26:04.280 --> 26:10.760
some packages. I cut the graph at some place to use this Debian packages.

26:10.760 --> 26:15.360
If I do that, how my collaborator can cut the graph in the same place with the same

26:15.360 --> 26:20.560
Debian packages. So this is kind of issue of a replaceability. So from a practical point

26:20.560 --> 26:26.520
of view, it could be nice because for example, Debian has some machine learning packages that

26:26.520 --> 26:31.360
are not yet in Geeks. So maybe we can reuse some parts, but from a replaceability point

26:31.360 --> 26:35.640
of view, you lose the property to move from one place to the other.

26:35.640 --> 26:36.640
Thank you.

26:36.640 --> 26:40.520
Thank you.

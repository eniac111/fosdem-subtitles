1
0:00:00.000 --> 0:00:01.000
Okay.

2
0:00:01.000 --> 0:00:02.000
Hello, everybody.

3
0:00:02.000 --> 0:00:03.000
Welcome.

4
0:00:03.000 --> 0:00:04.680
Thank you for coming to my talk.

5
0:00:04.680 --> 0:00:06.880
My name is Brian Duggan.

6
0:00:06.880 --> 0:00:13.720
I'm going to be talking today about something called Termi, which is practical and fun automation

7
0:00:13.720 --> 0:00:16.720
for all your terminal sessions.

8
0:00:16.720 --> 0:00:31.160
I'd like to thank my employer, Instacart, and the Pro Foundation for helping me to be

9
0:00:31.160 --> 0:00:32.160
here.

10
0:00:32.160 --> 0:00:36.160
I'm on the logistics team at Instacart.

11
0:00:36.160 --> 0:00:37.160
Okay.

12
0:00:37.160 --> 0:00:40.160
So here's an outline of the talk.

13
0:00:40.160 --> 0:00:44.160
I'm going to give a quick overview of the concept of Termi.

14
0:00:44.160 --> 0:00:47.600
What it does, what it's all about.

15
0:00:47.600 --> 0:00:49.960
Go through some of the features.

16
0:00:49.960 --> 0:00:52.520
Explain the scripting capabilities.

17
0:00:52.520 --> 0:00:58.040
And then a little bit about why it's written in Raku, which is usually the first question

18
0:00:58.040 --> 0:01:01.640
I get, but I'm saving it for last.

19
0:01:01.640 --> 0:01:02.640
Okay.

20
0:01:02.640 --> 0:01:05.960
So here's the basic concept of Termi.

21
0:01:05.960 --> 0:01:07.560
It works like this.

22
0:01:07.560 --> 0:01:09.040
So you have your shell.

23
0:01:09.040 --> 0:01:11.960
You type Termi to start the session.

24
0:01:11.960 --> 0:01:14.440
It starts a T-Mux session.

25
0:01:14.440 --> 0:01:16.440
How many T-Mux users in here?

26
0:01:16.440 --> 0:01:17.440
Oh, good.

27
0:01:17.440 --> 0:01:18.440
Okay.

28
0:01:18.440 --> 0:01:19.440
Screen.

29
0:01:19.440 --> 0:01:20.440
Okay.

30
0:01:20.440 --> 0:01:23.440
You guys can fight it later.

31
0:01:23.440 --> 0:01:24.440
Okay.

32
0:01:24.440 --> 0:01:27.440
So it starts a T-Mux session.

33
0:01:27.440 --> 0:01:29.440
It puts you in the bottom half.

34
0:01:29.440 --> 0:01:34.440
And basically anything that you type into the bottom half goes into both the bottom

35
0:01:34.440 --> 0:01:36.440
half and the top half.

36
0:01:36.440 --> 0:01:37.440
Okay.

37
0:01:37.440 --> 0:01:39.440
So you type, what is Termi?

38
0:01:39.440 --> 0:01:47.400
And it sends it to the bash shell session at the top, which doesn't know what what means.

39
0:01:47.400 --> 0:01:52.160
Depending on your environment, you'll get some strange error messages about what command

40
0:01:52.160 --> 0:01:54.360
are you trying to type.

41
0:01:54.360 --> 0:01:55.360
So I did this.

42
0:01:55.360 --> 0:02:01.240
And since this is the automation room, I thought, probably, maybe I could just automate this

43
0:02:01.240 --> 0:02:02.240
talk completely.

44
0:02:02.240 --> 0:02:07.760
So I found a command line version of chat GPT on the internet.

45
0:02:07.760 --> 0:02:11.200
And that had a command line wrapper.

46
0:02:11.200 --> 0:02:15.160
I thought maybe I could just get chat GPT to write my entire talk for me, automate it

47
0:02:15.160 --> 0:02:17.320
away, and then I would be done.

48
0:02:17.320 --> 0:02:18.320
Okay.

49
0:02:18.320 --> 0:02:24.800
So I did the pip install, which sends a lot of things to the terminal, as everybody probably

50
0:02:24.800 --> 0:02:26.280
knows.

51
0:02:26.280 --> 0:02:28.280
Lots of recommendations about what to upgrade.

52
0:02:28.280 --> 0:02:31.560
Finally, I have the chat GPT executable.

53
0:02:31.560 --> 0:02:32.840
So I typed that.

54
0:02:32.840 --> 0:02:35.200
And I said, what is Termi?

55
0:02:35.200 --> 0:02:37.600
But did not get very much information.

56
0:02:37.600 --> 0:02:42.040
Since it didn't know about the talk that I hadn't given yet.

57
0:02:42.040 --> 0:02:49.280
So then I said, you know, Termi is being presented at Fostem, which was a little bit better,

58
0:02:49.280 --> 0:02:52.760
but still I had to add a little more substance to the talk.

59
0:02:52.760 --> 0:02:56.880
And then the program hung.

60
0:02:56.880 --> 0:03:03.160
So I had to interrupt it with Control C. And the way you do that with Termi is you use

61
0:03:03.160 --> 0:03:06.400
a backslash, which starts the command.

62
0:03:06.400 --> 0:03:11.760
Everything starts with a backslash, kind of like the Postgres command line interface is

63
0:03:11.760 --> 0:03:13.440
a directive to Termi.

64
0:03:13.440 --> 0:03:18.880
So stop says send a Control C signal to the other pane.

65
0:03:18.880 --> 0:03:22.720
So I got keyboard interrupt, but that wasn't enough to stop it, because that was trapped

66
0:03:22.720 --> 0:03:25.120
by the Python interpreter.

67
0:03:25.120 --> 0:03:26.840
So then I sent another one.

68
0:03:26.840 --> 0:03:34.440
And then that finally gave me a stack trace, which everybody who uses Python sees a lot.

69
0:03:34.440 --> 0:03:38.280
And then finally, I was done with this session.

70
0:03:38.280 --> 0:03:41.440
So the basic concept here is simple.

71
0:03:41.440 --> 0:03:44.000
You have something on the top, something on the bottom.

72
0:03:44.000 --> 0:03:45.640
It's the same.

73
0:03:45.640 --> 0:03:47.280
And the things on the bottom go to the top.

74
0:03:47.280 --> 0:03:50.680
So you have kind of an interactive session.

75
0:03:50.680 --> 0:03:56.440
And then you can also send these additional commands to the top.

76
0:03:56.440 --> 0:04:00.360
So now I'm going to go through some of the features.

77
0:04:00.360 --> 0:04:04.240
So as you saw from the last one, you have everything sort of organized on the bottom,

78
0:04:04.240 --> 0:04:07.840
and if you have stack traces and things on the top, you still have a nice little session

79
0:04:07.840 --> 0:04:10.160
that shows you what you're doing.

80
0:04:10.160 --> 0:04:13.280
And you can set up macros.

81
0:04:13.280 --> 0:04:14.800
You can run scripts.

82
0:04:14.800 --> 0:04:15.800
You can wait for things.

83
0:04:15.800 --> 0:04:22.040
And I'm going to go through a few more of these in detail now in the next few minutes.

84
0:04:22.040 --> 0:04:24.640
So it has GNU read line built in.

85
0:04:24.640 --> 0:04:27.320
It has a few ways of getting history.

86
0:04:27.320 --> 0:04:30.160
Read line is a last command.

87
0:04:30.160 --> 0:04:33.400
There's also fuzzy find, fzf.

88
0:04:33.400 --> 0:04:35.240
You can use fuzzy find for things.

89
0:04:35.240 --> 0:04:38.680
So you can search your history for that.

90
0:04:38.680 --> 0:04:42.800
And it searches right, even if you have several different sessions on the top.

91
0:04:42.800 --> 0:04:48.440
Maybe you're on different machines, or maybe part of it is in some other application.

92
0:04:48.440 --> 0:04:50.000
Some of it is in a shell.

93
0:04:50.000 --> 0:04:54.040
It'll search your local history.

94
0:04:54.040 --> 0:04:57.520
So for instance, let's say you're using a PSQL.

95
0:04:57.520 --> 0:05:02.680
You're connected to a remote database, and you have your local history, and maybe you

96
0:05:02.680 --> 0:05:07.040
run some SQL that's going to show you the long-running queries.

97
0:05:07.040 --> 0:05:09.840
So you can write a macro to send all of this.

98
0:05:09.840 --> 0:05:12.520
And the way you do that is you say slash edit.

99
0:05:12.520 --> 0:05:13.800
Then you have a text editor.

100
0:05:13.800 --> 0:05:16.680
Put your file in an SQL file.

101
0:05:16.680 --> 0:05:22.760
And then slash alias will create a macro that says, you set the name of the macro.

102
0:05:22.760 --> 0:05:30.280
And then slash run says run this little script, which will send it to the other console.

103
0:05:30.280 --> 0:05:37.000
And then after that, you can just type slash find queries, and the top will get the SQL

104
0:05:37.000 --> 0:05:40.240
that you put into the file.

105
0:05:40.240 --> 0:05:43.440
So it can be convenient for things like that.

106
0:05:43.440 --> 0:05:49.120
Or you could use it with Redis, or doing your kernel testing, as we saw in the first talk,

107
0:05:49.120 --> 0:05:50.120
or whatever.

108
0:05:50.120 --> 0:05:54.640
Just any sort of session, you can just make a macro and send it.

109
0:05:54.640 --> 0:05:57.920
So here's another example.

110
0:05:57.920 --> 0:06:03.240
In this case, instead of using a macro, we're going to send standard out from a command

111
0:06:03.240 --> 0:06:06.560
that we run locally to the other pane.

112
0:06:06.560 --> 0:06:11.560
So on the bottom, I say delay three, which means wait three seconds between every line

113
0:06:11.560 --> 0:06:13.240
that you send to the top.

114
0:06:13.240 --> 0:06:18.740
And then slash shell means just run this command, and then show me the output.

115
0:06:18.740 --> 0:06:21.960
So I say slash shell cat eg simple.bash.

116
0:06:21.960 --> 0:06:26.680
And here you can see my bash script, which does an echo, echo docker run.

117
0:06:26.680 --> 0:06:28.680
And then echo hostname.

118
0:06:28.680 --> 0:06:30.240
So then it runs that command.

119
0:06:30.240 --> 0:06:32.840
When I say slash do, it runs that command.

120
0:06:32.840 --> 0:06:37.000
And the output from that command gets sent to the top.

121
0:06:37.000 --> 0:06:39.920
And it's sent after every line, it waits three seconds.

122
0:06:39.920 --> 0:06:45.120
So it sort of throttles the output, which we might need, because it might take docker

123
0:06:45.120 --> 0:06:53.400
a few seconds to start before you run the hostname command on the shell inside the container.

124
0:06:53.400 --> 0:06:54.940
So the bottom is what you're typing.

125
0:06:54.940 --> 0:06:57.600
The top is what you see.

126
0:06:57.600 --> 0:06:59.640
So here's another feature.

127
0:06:59.640 --> 0:07:03.560
So in addition to standard out, you can take the output of the top and send it to standard

128
0:07:03.560 --> 0:07:05.720
in of anything that you write.

129
0:07:05.720 --> 0:07:12.640
So in this example, I'm using the nl command, which basically takes standard in and outputs

130
0:07:12.640 --> 0:07:16.440
line numbers for the commands that are coming in.

131
0:07:16.440 --> 0:07:21.360
So I say sleep three and head user share addict words.

132
0:07:21.360 --> 0:07:26.560
The reason I do sleep three, if you think about it for a second, is because when I do

133
0:07:26.560 --> 0:07:30.700
the exec command, I need time to type it.

134
0:07:30.700 --> 0:07:36.100
So I type sleep three and head, and that gets sent immediately to the shell, which waits

135
0:07:36.100 --> 0:07:37.100
a few seconds.

136
0:07:37.100 --> 0:07:41.720
Then I type exec nl, and then standard in comes in, and then it prints out what goes

137
0:07:41.720 --> 0:07:42.720
out.

138
0:07:42.720 --> 0:07:46.720
So in the real world, you probably won't have to sleep, because there will be constantly

139
0:07:46.720 --> 0:07:49.400
stuff coming through the top terminal.

140
0:07:49.400 --> 0:07:53.480
A few other interesting commands.

141
0:07:53.480 --> 0:08:00.160
So await will just wait for either a string or a regular expression to appear in the top.

142
0:08:00.160 --> 0:08:05.560
In queue is a way to enqueue a command after you've finished awaiting it.

143
0:08:05.560 --> 0:08:11.560
Grep, repeat, send the same thing over and over, maybe add an interval, send a file,

144
0:08:11.560 --> 0:08:15.560
and we already saw what delay does, setting the delay.

145
0:08:15.560 --> 0:08:16.560
And there are actually a lot of commands.

146
0:08:16.560 --> 0:08:17.680
There are 43.

147
0:08:17.680 --> 0:08:20.280
Whenever I needed to do something, I added a new one.

148
0:08:20.280 --> 0:08:25.080
If you have any ideas, send me a PR or send a request.

149
0:08:25.080 --> 0:08:26.880
There are 43 different commands right now.

150
0:08:26.880 --> 0:08:27.880
Actually, 44.

151
0:08:27.880 --> 0:08:31.200
I think I added one this morning.

152
0:08:31.200 --> 0:08:33.200
Okay, so script.

153
0:08:33.200 --> 0:08:35.700
Anybody here use expect?

154
0:08:35.700 --> 0:08:36.700
A few people.

155
0:08:36.700 --> 0:08:43.320
Okay, so expect has been around for a long time, 1993, but it's still pretty useful if

156
0:08:43.320 --> 0:08:49.320
you have to interact with a program that requires a TTY.

157
0:08:49.320 --> 0:08:53.160
So here is an example of an expect script on the left.

158
0:08:53.160 --> 0:08:57.360
In this case, what we're going to do is we're going to start a Docker container again, and

159
0:08:57.360 --> 0:09:02.160
then we're going to run user add to add a user, and then we'd like to set a password

160
0:09:02.160 --> 0:09:03.240
for the user.

161
0:09:03.240 --> 0:09:07.460
So we're going to run the password command, and we're also going to look for the prompts

162
0:09:07.460 --> 0:09:09.080
that are coming back.

163
0:09:09.080 --> 0:09:17.240
Okay, so on the left, we see the way expect works is you say spawn, and then expect takes

164
0:09:17.240 --> 0:09:21.640
a pattern, so root at is what comes back in the prompt.

165
0:09:21.640 --> 0:09:24.160
And then you send user add termee.

166
0:09:24.160 --> 0:09:26.520
We're going to add a user name to termee.

167
0:09:26.520 --> 0:09:33.760
Then it has a regular expression, expect-re, that you can then capture with expect out.

168
0:09:33.760 --> 0:09:36.740
And then finally at the bottom, we're going to print out what we caught.

169
0:09:36.740 --> 0:09:41.080
We captured the fact that the host name was something that was in the prompt.

170
0:09:41.080 --> 0:09:42.680
So you can do the same thing in termee.

171
0:09:42.680 --> 0:09:48.760
You can say user bin end termee, and then set it to be an executable file.

172
0:09:48.760 --> 0:09:52.320
The default is to just send everything, so it's just kind of like you're interacting

173
0:09:52.320 --> 0:09:53.780
from the console.

174
0:09:53.780 --> 0:09:57.160
All the lines just get sent directly to the other pane.

175
0:09:57.160 --> 0:10:04.800
So you just say docker run, and then backslash expect is kind of like the expect command.

176
0:10:04.800 --> 0:10:09.640
There's a little subtlety in there that you usually don't think about, because it's sort

177
0:10:09.640 --> 0:10:12.200
of intuitive as a human.

178
0:10:12.200 --> 0:10:15.800
You type it and you're expecting something, but really there's a race condition there,

179
0:10:15.800 --> 0:10:16.800
right?

180
0:10:16.800 --> 0:10:22.040
Because between the time that you send your command and the time you send the expect command,

181
0:10:22.040 --> 0:10:23.960
the output might have already happened.

182
0:10:23.960 --> 0:10:28.000
So the way that expect deals with it is it keeps track of the stream, and then it kind

183
0:10:28.000 --> 0:10:34.120
of goes back and there's sort of this running, you know, a pointer to the output stream.

184
0:10:34.120 --> 0:10:39.920
And the way we do that with termee is we basically run the expect before we run the command.

185
0:10:39.920 --> 0:10:45.040
So it'll basically say now I'm starting to watch the output, and then it'll send the

186
0:10:45.040 --> 0:10:47.880
output, and then it'll capture it.

187
0:10:47.880 --> 0:10:54.320
So when we run this, and it runs interactively in tmux, so you can see on the top it sends

188
0:10:54.320 --> 0:10:59.440
docker run, pulls the image, and it's waiting now to see the prompt.

189
0:10:59.440 --> 0:11:01.820
So it waits for the route.

190
0:11:01.820 --> 0:11:09.480
And then after that it sends the user add, waits for new password, and then finishes

191
0:11:09.480 --> 0:11:10.860
successfully.

192
0:11:10.860 --> 0:11:15.560
So the output here is in the test anything protocol.

193
0:11:15.560 --> 0:11:16.720
You may or may not be familiar with it.

194
0:11:16.720 --> 0:11:19.640
It's just okay, and then the number of the test.

195
0:11:19.640 --> 0:11:24.160
And then currently if it doesn't get what it expects, then it aborts the tests.

196
0:11:24.160 --> 0:11:29.120
Okay, so quickly I'm just going to say why it's written in Raku.

197
0:11:29.120 --> 0:11:35.960
And the main idea here is that Raku has a lot of very nice ways to do asynchronous programming

198
0:11:35.960 --> 0:11:38.300
and also interact with other commands.

199
0:11:38.300 --> 0:11:48.480
So you can quickly open a pipe to tmux and interact with it using asynchronous processes.

200
0:11:48.480 --> 0:11:51.720
You can run things synchronously.

201
0:11:51.720 --> 0:11:55.520
It's got good not just interprocess but interthread communication.

202
0:11:55.520 --> 0:12:02.120
It has built-in constructs like supplies and channels and promises, which you may be familiar

203
0:12:02.120 --> 0:12:05.580
with from other languages.

204
0:12:05.580 --> 0:12:10.160
So this is like an example of how you could tail a file and create a supply, which is

205
0:12:10.160 --> 0:12:13.240
a built-in type in Raku.

206
0:12:13.240 --> 0:12:16.620
And finally, this is kind of like the implementation of expect.

207
0:12:16.620 --> 0:12:20.680
So it's really pretty straightforward.

208
0:12:20.680 --> 0:12:28.880
You can basically set up an event loop in a separate thread using this construct.

209
0:12:28.880 --> 0:12:32.680
Starts a thread, reacts whenever it says here's an event loop.

210
0:12:32.680 --> 0:12:36.600
And then if it's a string, we look to see if it contains a target.

211
0:12:36.600 --> 0:12:42.800
If it's a regex, then we send it to a channel so that then we can have it available to use

212
0:12:42.800 --> 0:12:43.800
locally.

213
0:12:43.800 --> 0:12:47.800
So even if you're not interested in using termi, you might find some value in using

214
0:12:47.800 --> 0:12:51.320
Raku for automation.

215
0:12:51.320 --> 0:12:52.320
That's the end.

216
0:12:52.320 --> 0:12:55.320
Thank you for listening.

217
0:12:55.320 --> 0:13:02.280
Questions?

218
0:13:02.280 --> 0:13:04.160
I think I have a few minutes.

219
0:13:04.160 --> 0:13:05.160
Okay.

220
0:13:05.160 --> 0:13:19.640
Yeah, that's a good question.

221
0:13:19.640 --> 0:13:26.200
So different shells do different things that you kind of are not really aware of, even

222
0:13:26.200 --> 0:13:28.500
just the simple printing of a prompt.

223
0:13:28.500 --> 0:13:30.600
They don't always send a newline character.

224
0:13:30.600 --> 0:13:34.640
Sometimes they'll send escape sequences that go to the beginning of the line and then go

225
0:13:34.640 --> 0:13:38.580
down the line, or sometimes they'll even redraw the line above it.

226
0:13:38.580 --> 0:13:41.320
So it works fine.

227
0:13:41.320 --> 0:13:46.440
But you just have to be aware of the idiosyncrasies of the various shells in terms of what they

228
0:13:46.440 --> 0:13:48.720
do to the terminal.

229
0:13:48.720 --> 0:13:49.720
It does interfere.

230
0:13:49.720 --> 0:13:53.760
You can, one of the commands is to buffer the lines, and it does get tricky to split

231
0:13:53.760 --> 0:13:56.840
up the lines when there's a lot of cursor movement.

232
0:13:56.840 --> 0:13:57.840
Yeah.

233
0:13:57.840 --> 0:13:58.840
One more.

234
0:13:58.840 --> 0:14:05.400
Does it also work with serial consoles?

235
0:14:05.400 --> 0:14:06.960
With serial consoles.

236
0:14:06.960 --> 0:14:11.080
So that aspect is basically taken care of by TMUX.

237
0:14:11.080 --> 0:14:16.280
So it doesn't do the direct communication with the serial console the way that expect

238
0:14:16.280 --> 0:14:17.280
would.

239
0:14:17.280 --> 0:14:18.280
Yep.

240
0:14:18.280 --> 0:14:19.280
We have one more minute.

241
0:14:19.280 --> 0:14:20.280
Last question.

242
0:14:20.280 --> 0:14:23.280
Who wants to do the honors?

243
0:14:23.280 --> 0:14:24.280
Nobody.

244
0:14:24.280 --> 0:14:25.280
No.

245
0:14:25.280 --> 0:14:29.800
Okay, I'll do the honors.

246
0:14:29.800 --> 0:14:34.680
Are you aware of current users?

247
0:14:34.680 --> 0:14:40.640
So we only have a handful of users, so now is your opportunity to request features.

248
0:14:40.640 --> 0:14:43.480
We don't have to worry too much about backwards compatibility.

249
0:14:43.480 --> 0:14:44.480
That's it.

250
0:14:44.480 --> 0:14:45.480
Thank you.

251
0:14:45.480 --> 0:14:46.480
Okay.

252
0:14:46.480 --> 0:14:47.480
Thank you.

253
0:14:47.480 --> 0:14:48.480
Thank you.

254
0:14:48.480 --> 0:14:49.480
Thank you.

255
0:14:49.480 --> 0:14:50.480
Thank you.

256
0:14:50.480 --> 0:14:51.480
Thank you.

257
0:14:51.480 --> 0:14:52.480
Thank you.

258
0:14:52.480 --> 0:14:53.480
Thank you.

259
0:14:53.480 --> 0:14:54.480
Thank you.

260
0:14:54.480 --> 0:14:58.480
Thank you.


WEBVTT

00:00.000 --> 00:01.000
Okay.

00:01.000 --> 00:02.000
Hello, everybody.

00:02.000 --> 00:03.000
Welcome.

00:03.000 --> 00:04.680
Thank you for coming to my talk.

00:04.680 --> 00:06.880
My name is Brian Duggan.

00:06.880 --> 00:13.720
I'm going to be talking today about something called Termi, which is practical and fun automation

00:13.720 --> 00:16.720
for all your terminal sessions.

00:16.720 --> 00:31.160
I'd like to thank my employer, Instacart, and the Pro Foundation for helping me to be

00:31.160 --> 00:32.160
here.

00:32.160 --> 00:36.160
I'm on the logistics team at Instacart.

00:36.160 --> 00:37.160
Okay.

00:37.160 --> 00:40.160
So here's an outline of the talk.

00:40.160 --> 00:44.160
I'm going to give a quick overview of the concept of Termi.

00:44.160 --> 00:47.600
What it does, what it's all about.

00:47.600 --> 00:49.960
Go through some of the features.

00:49.960 --> 00:52.520
Explain the scripting capabilities.

00:52.520 --> 00:58.040
And then a little bit about why it's written in Raku, which is usually the first question

00:58.040 --> 01:01.640
I get, but I'm saving it for last.

01:01.640 --> 01:02.640
Okay.

01:02.640 --> 01:05.960
So here's the basic concept of Termi.

01:05.960 --> 01:07.560
It works like this.

01:07.560 --> 01:09.040
So you have your shell.

01:09.040 --> 01:11.960
You type Termi to start the session.

01:11.960 --> 01:14.440
It starts a T-Mux session.

01:14.440 --> 01:16.440
How many T-Mux users in here?

01:16.440 --> 01:17.440
Oh, good.

01:17.440 --> 01:18.440
Okay.

01:18.440 --> 01:19.440
Screen.

01:19.440 --> 01:20.440
Okay.

01:20.440 --> 01:23.440
You guys can fight it later.

01:23.440 --> 01:24.440
Okay.

01:24.440 --> 01:27.440
So it starts a T-Mux session.

01:27.440 --> 01:29.440
It puts you in the bottom half.

01:29.440 --> 01:34.440
And basically anything that you type into the bottom half goes into both the bottom

01:34.440 --> 01:36.440
half and the top half.

01:36.440 --> 01:37.440
Okay.

01:37.440 --> 01:39.440
So you type, what is Termi?

01:39.440 --> 01:47.400
And it sends it to the bash shell session at the top, which doesn't know what what means.

01:47.400 --> 01:52.160
Depending on your environment, you'll get some strange error messages about what command

01:52.160 --> 01:54.360
are you trying to type.

01:54.360 --> 01:55.360
So I did this.

01:55.360 --> 02:01.240
And since this is the automation room, I thought, probably, maybe I could just automate this

02:01.240 --> 02:02.240
talk completely.

02:02.240 --> 02:07.760
So I found a command line version of chat GPT on the internet.

02:07.760 --> 02:11.200
And that had a command line wrapper.

02:11.200 --> 02:15.160
I thought maybe I could just get chat GPT to write my entire talk for me, automate it

02:15.160 --> 02:17.320
away, and then I would be done.

02:17.320 --> 02:18.320
Okay.

02:18.320 --> 02:24.800
So I did the pip install, which sends a lot of things to the terminal, as everybody probably

02:24.800 --> 02:26.280
knows.

02:26.280 --> 02:28.280
Lots of recommendations about what to upgrade.

02:28.280 --> 02:31.560
Finally, I have the chat GPT executable.

02:31.560 --> 02:32.840
So I typed that.

02:32.840 --> 02:35.200
And I said, what is Termi?

02:35.200 --> 02:37.600
But did not get very much information.

02:37.600 --> 02:42.040
Since it didn't know about the talk that I hadn't given yet.

02:42.040 --> 02:49.280
So then I said, you know, Termi is being presented at Fostem, which was a little bit better,

02:49.280 --> 02:52.760
but still I had to add a little more substance to the talk.

02:52.760 --> 02:56.880
And then the program hung.

02:56.880 --> 03:03.160
So I had to interrupt it with Control C. And the way you do that with Termi is you use

03:03.160 --> 03:06.400
a backslash, which starts the command.

03:06.400 --> 03:11.760
Everything starts with a backslash, kind of like the Postgres command line interface is

03:11.760 --> 03:13.440
a directive to Termi.

03:13.440 --> 03:18.880
So stop says send a Control C signal to the other pane.

03:18.880 --> 03:22.720
So I got keyboard interrupt, but that wasn't enough to stop it, because that was trapped

03:22.720 --> 03:25.120
by the Python interpreter.

03:25.120 --> 03:26.840
So then I sent another one.

03:26.840 --> 03:34.440
And then that finally gave me a stack trace, which everybody who uses Python sees a lot.

03:34.440 --> 03:38.280
And then finally, I was done with this session.

03:38.280 --> 03:41.440
So the basic concept here is simple.

03:41.440 --> 03:44.000
You have something on the top, something on the bottom.

03:44.000 --> 03:45.640
It's the same.

03:45.640 --> 03:47.280
And the things on the bottom go to the top.

03:47.280 --> 03:50.680
So you have kind of an interactive session.

03:50.680 --> 03:56.440
And then you can also send these additional commands to the top.

03:56.440 --> 04:00.360
So now I'm going to go through some of the features.

04:00.360 --> 04:04.240
So as you saw from the last one, you have everything sort of organized on the bottom,

04:04.240 --> 04:07.840
and if you have stack traces and things on the top, you still have a nice little session

04:07.840 --> 04:10.160
that shows you what you're doing.

04:10.160 --> 04:13.280
And you can set up macros.

04:13.280 --> 04:14.800
You can run scripts.

04:14.800 --> 04:15.800
You can wait for things.

04:15.800 --> 04:22.040
And I'm going to go through a few more of these in detail now in the next few minutes.

04:22.040 --> 04:24.640
So it has GNU read line built in.

04:24.640 --> 04:27.320
It has a few ways of getting history.

04:27.320 --> 04:30.160
Read line is a last command.

04:30.160 --> 04:33.400
There's also fuzzy find, fzf.

04:33.400 --> 04:35.240
You can use fuzzy find for things.

04:35.240 --> 04:38.680
So you can search your history for that.

04:38.680 --> 04:42.800
And it searches right, even if you have several different sessions on the top.

04:42.800 --> 04:48.440
Maybe you're on different machines, or maybe part of it is in some other application.

04:48.440 --> 04:50.000
Some of it is in a shell.

04:50.000 --> 04:54.040
It'll search your local history.

04:54.040 --> 04:57.520
So for instance, let's say you're using a PSQL.

04:57.520 --> 05:02.680
You're connected to a remote database, and you have your local history, and maybe you

05:02.680 --> 05:07.040
run some SQL that's going to show you the long-running queries.

05:07.040 --> 05:09.840
So you can write a macro to send all of this.

05:09.840 --> 05:12.520
And the way you do that is you say slash edit.

05:12.520 --> 05:13.800
Then you have a text editor.

05:13.800 --> 05:16.680
Put your file in an SQL file.

05:16.680 --> 05:22.760
And then slash alias will create a macro that says, you set the name of the macro.

05:22.760 --> 05:30.280
And then slash run says run this little script, which will send it to the other console.

05:30.280 --> 05:37.000
And then after that, you can just type slash find queries, and the top will get the SQL

05:37.000 --> 05:40.240
that you put into the file.

05:40.240 --> 05:43.440
So it can be convenient for things like that.

05:43.440 --> 05:49.120
Or you could use it with Redis, or doing your kernel testing, as we saw in the first talk,

05:49.120 --> 05:50.120
or whatever.

05:50.120 --> 05:54.640
Just any sort of session, you can just make a macro and send it.

05:54.640 --> 05:57.920
So here's another example.

05:57.920 --> 06:03.240
In this case, instead of using a macro, we're going to send standard out from a command

06:03.240 --> 06:06.560
that we run locally to the other pane.

06:06.560 --> 06:11.560
So on the bottom, I say delay three, which means wait three seconds between every line

06:11.560 --> 06:13.240
that you send to the top.

06:13.240 --> 06:18.740
And then slash shell means just run this command, and then show me the output.

06:18.740 --> 06:21.960
So I say slash shell cat eg simple.bash.

06:21.960 --> 06:26.680
And here you can see my bash script, which does an echo, echo docker run.

06:26.680 --> 06:28.680
And then echo hostname.

06:28.680 --> 06:30.240
So then it runs that command.

06:30.240 --> 06:32.840
When I say slash do, it runs that command.

06:32.840 --> 06:37.000
And the output from that command gets sent to the top.

06:37.000 --> 06:39.920
And it's sent after every line, it waits three seconds.

06:39.920 --> 06:45.120
So it sort of throttles the output, which we might need, because it might take docker

06:45.120 --> 06:53.400
a few seconds to start before you run the hostname command on the shell inside the container.

06:53.400 --> 06:54.940
So the bottom is what you're typing.

06:54.940 --> 06:57.600
The top is what you see.

06:57.600 --> 06:59.640
So here's another feature.

06:59.640 --> 07:03.560
So in addition to standard out, you can take the output of the top and send it to standard

07:03.560 --> 07:05.720
in of anything that you write.

07:05.720 --> 07:12.640
So in this example, I'm using the nl command, which basically takes standard in and outputs

07:12.640 --> 07:16.440
line numbers for the commands that are coming in.

07:16.440 --> 07:21.360
So I say sleep three and head user share addict words.

07:21.360 --> 07:26.560
The reason I do sleep three, if you think about it for a second, is because when I do

07:26.560 --> 07:30.700
the exec command, I need time to type it.

07:30.700 --> 07:36.100
So I type sleep three and head, and that gets sent immediately to the shell, which waits

07:36.100 --> 07:37.100
a few seconds.

07:37.100 --> 07:41.720
Then I type exec nl, and then standard in comes in, and then it prints out what goes

07:41.720 --> 07:42.720
out.

07:42.720 --> 07:46.720
So in the real world, you probably won't have to sleep, because there will be constantly

07:46.720 --> 07:49.400
stuff coming through the top terminal.

07:49.400 --> 07:53.480
A few other interesting commands.

07:53.480 --> 08:00.160
So await will just wait for either a string or a regular expression to appear in the top.

08:00.160 --> 08:05.560
In queue is a way to enqueue a command after you've finished awaiting it.

08:05.560 --> 08:11.560
Grep, repeat, send the same thing over and over, maybe add an interval, send a file,

08:11.560 --> 08:15.560
and we already saw what delay does, setting the delay.

08:15.560 --> 08:16.560
And there are actually a lot of commands.

08:16.560 --> 08:17.680
There are 43.

08:17.680 --> 08:20.280
Whenever I needed to do something, I added a new one.

08:20.280 --> 08:25.080
If you have any ideas, send me a PR or send a request.

08:25.080 --> 08:26.880
There are 43 different commands right now.

08:26.880 --> 08:27.880
Actually, 44.

08:27.880 --> 08:31.200
I think I added one this morning.

08:31.200 --> 08:33.200
Okay, so script.

08:33.200 --> 08:35.700
Anybody here use expect?

08:35.700 --> 08:36.700
A few people.

08:36.700 --> 08:43.320
Okay, so expect has been around for a long time, 1993, but it's still pretty useful if

08:43.320 --> 08:49.320
you have to interact with a program that requires a TTY.

08:49.320 --> 08:53.160
So here is an example of an expect script on the left.

08:53.160 --> 08:57.360
In this case, what we're going to do is we're going to start a Docker container again, and

08:57.360 --> 09:02.160
then we're going to run user add to add a user, and then we'd like to set a password

09:02.160 --> 09:03.240
for the user.

09:03.240 --> 09:07.460
So we're going to run the password command, and we're also going to look for the prompts

09:07.460 --> 09:09.080
that are coming back.

09:09.080 --> 09:17.240
Okay, so on the left, we see the way expect works is you say spawn, and then expect takes

09:17.240 --> 09:21.640
a pattern, so root at is what comes back in the prompt.

09:21.640 --> 09:24.160
And then you send user add termee.

09:24.160 --> 09:26.520
We're going to add a user name to termee.

09:26.520 --> 09:33.760
Then it has a regular expression, expect-re, that you can then capture with expect out.

09:33.760 --> 09:36.740
And then finally at the bottom, we're going to print out what we caught.

09:36.740 --> 09:41.080
We captured the fact that the host name was something that was in the prompt.

09:41.080 --> 09:42.680
So you can do the same thing in termee.

09:42.680 --> 09:48.760
You can say user bin end termee, and then set it to be an executable file.

09:48.760 --> 09:52.320
The default is to just send everything, so it's just kind of like you're interacting

09:52.320 --> 09:53.780
from the console.

09:53.780 --> 09:57.160
All the lines just get sent directly to the other pane.

09:57.160 --> 10:04.800
So you just say docker run, and then backslash expect is kind of like the expect command.

10:04.800 --> 10:09.640
There's a little subtlety in there that you usually don't think about, because it's sort

10:09.640 --> 10:12.200
of intuitive as a human.

10:12.200 --> 10:15.800
You type it and you're expecting something, but really there's a race condition there,

10:15.800 --> 10:16.800
right?

10:16.800 --> 10:22.040
Because between the time that you send your command and the time you send the expect command,

10:22.040 --> 10:23.960
the output might have already happened.

10:23.960 --> 10:28.000
So the way that expect deals with it is it keeps track of the stream, and then it kind

10:28.000 --> 10:34.120
of goes back and there's sort of this running, you know, a pointer to the output stream.

10:34.120 --> 10:39.920
And the way we do that with termee is we basically run the expect before we run the command.

10:39.920 --> 10:45.040
So it'll basically say now I'm starting to watch the output, and then it'll send the

10:45.040 --> 10:47.880
output, and then it'll capture it.

10:47.880 --> 10:54.320
So when we run this, and it runs interactively in tmux, so you can see on the top it sends

10:54.320 --> 10:59.440
docker run, pulls the image, and it's waiting now to see the prompt.

10:59.440 --> 11:01.820
So it waits for the route.

11:01.820 --> 11:09.480
And then after that it sends the user add, waits for new password, and then finishes

11:09.480 --> 11:10.860
successfully.

11:10.860 --> 11:15.560
So the output here is in the test anything protocol.

11:15.560 --> 11:16.720
You may or may not be familiar with it.

11:16.720 --> 11:19.640
It's just okay, and then the number of the test.

11:19.640 --> 11:24.160
And then currently if it doesn't get what it expects, then it aborts the tests.

11:24.160 --> 11:29.120
Okay, so quickly I'm just going to say why it's written in Raku.

11:29.120 --> 11:35.960
And the main idea here is that Raku has a lot of very nice ways to do asynchronous programming

11:35.960 --> 11:38.300
and also interact with other commands.

11:38.300 --> 11:48.480
So you can quickly open a pipe to tmux and interact with it using asynchronous processes.

11:48.480 --> 11:51.720
You can run things synchronously.

11:51.720 --> 11:55.520
It's got good not just interprocess but interthread communication.

11:55.520 --> 12:02.120
It has built-in constructs like supplies and channels and promises, which you may be familiar

12:02.120 --> 12:05.580
with from other languages.

12:05.580 --> 12:10.160
So this is like an example of how you could tail a file and create a supply, which is

12:10.160 --> 12:13.240
a built-in type in Raku.

12:13.240 --> 12:16.620
And finally, this is kind of like the implementation of expect.

12:16.620 --> 12:20.680
So it's really pretty straightforward.

12:20.680 --> 12:28.880
You can basically set up an event loop in a separate thread using this construct.

12:28.880 --> 12:32.680
Starts a thread, reacts whenever it says here's an event loop.

12:32.680 --> 12:36.600
And then if it's a string, we look to see if it contains a target.

12:36.600 --> 12:42.800
If it's a regex, then we send it to a channel so that then we can have it available to use

12:42.800 --> 12:43.800
locally.

12:43.800 --> 12:47.800
So even if you're not interested in using termi, you might find some value in using

12:47.800 --> 12:51.320
Raku for automation.

12:51.320 --> 12:52.320
That's the end.

12:52.320 --> 12:55.320
Thank you for listening.

12:55.320 --> 13:02.280
Questions?

13:02.280 --> 13:04.160
I think I have a few minutes.

13:04.160 --> 13:05.160
Okay.

13:05.160 --> 13:19.640
Yeah, that's a good question.

13:19.640 --> 13:26.200
So different shells do different things that you kind of are not really aware of, even

13:26.200 --> 13:28.500
just the simple printing of a prompt.

13:28.500 --> 13:30.600
They don't always send a newline character.

13:30.600 --> 13:34.640
Sometimes they'll send escape sequences that go to the beginning of the line and then go

13:34.640 --> 13:38.580
down the line, or sometimes they'll even redraw the line above it.

13:38.580 --> 13:41.320
So it works fine.

13:41.320 --> 13:46.440
But you just have to be aware of the idiosyncrasies of the various shells in terms of what they

13:46.440 --> 13:48.720
do to the terminal.

13:48.720 --> 13:49.720
It does interfere.

13:49.720 --> 13:53.760
You can, one of the commands is to buffer the lines, and it does get tricky to split

13:53.760 --> 13:56.840
up the lines when there's a lot of cursor movement.

13:56.840 --> 13:57.840
Yeah.

13:57.840 --> 13:58.840
One more.

13:58.840 --> 14:05.400
Does it also work with serial consoles?

14:05.400 --> 14:06.960
With serial consoles.

14:06.960 --> 14:11.080
So that aspect is basically taken care of by TMUX.

14:11.080 --> 14:16.280
So it doesn't do the direct communication with the serial console the way that expect

14:16.280 --> 14:17.280
would.

14:17.280 --> 14:18.280
Yep.

14:18.280 --> 14:19.280
We have one more minute.

14:19.280 --> 14:20.280
Last question.

14:20.280 --> 14:23.280
Who wants to do the honors?

14:23.280 --> 14:24.280
Nobody.

14:24.280 --> 14:25.280
No.

14:25.280 --> 14:29.800
Okay, I'll do the honors.

14:29.800 --> 14:34.680
Are you aware of current users?

14:34.680 --> 14:40.640
So we only have a handful of users, so now is your opportunity to request features.

14:40.640 --> 14:43.480
We don't have to worry too much about backwards compatibility.

14:43.480 --> 14:44.480
That's it.

14:44.480 --> 14:45.480
Thank you.

14:45.480 --> 14:46.480
Okay.

14:46.480 --> 14:47.480
Thank you.

14:47.480 --> 14:48.480
Thank you.

14:48.480 --> 14:49.480
Thank you.

14:49.480 --> 14:50.480
Thank you.

14:50.480 --> 14:51.480
Thank you.

14:51.480 --> 14:52.480
Thank you.

14:52.480 --> 14:53.480
Thank you.

14:53.480 --> 14:54.480
Thank you.

14:54.480 --> 14:58.480
Thank you.

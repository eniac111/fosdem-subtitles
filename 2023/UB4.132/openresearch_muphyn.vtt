WEBVTT

00:00.000 --> 00:12.400
Hello everyone, I'm Dylan Fievez and I'm a research engineer at CERAF Technique Research

00:12.400 --> 00:15.800
Centre in Mons in Belgium.

00:15.800 --> 00:20.680
Today I will present you the software Mephene, which is a graphical tool for modeling and

00:20.680 --> 00:25.360
simulating multiphysics systems.

00:25.360 --> 00:31.160
So the project started with a research project.

00:31.160 --> 00:40.440
It is a collaboration with Thales Alenia Space, so it's a research project funded by the Wallonia,

00:40.440 --> 00:45.400
so a public fund of Belgium.

00:45.400 --> 00:51.400
And the goal of the project is the development of a simulation method to assist in the design

00:51.400 --> 00:56.720
of mechatronic chains with complete multiphysics model.

00:56.720 --> 01:02.960
So in other terms, what are the goals of the project?

01:02.960 --> 01:09.600
It exists different kinds of multiphysics simulation software, the global variable simulation

01:09.600 --> 01:19.260
type like Open Modelica, which simulates a system by an item like a motor, etc.

01:19.260 --> 01:27.120
And we have a local variable simulation like Finite Element Simulation System, Finite Element

01:27.120 --> 01:30.440
Simulation for Multiphysics System.

01:30.440 --> 01:38.840
And both types of simulation are not compatible with each other, so the research project tried

01:38.840 --> 01:54.880
to find another way to simulate a multiphysics model with using electrical analogues modeling.

01:54.880 --> 01:59.840
So the method we want to develop is a simulation in three points.

01:59.840 --> 02:06.680
So the first step is to convert physical system to electrical analogues system.

02:06.680 --> 02:13.680
The second step is to convert those electrical analogues model to numerical model.

02:13.680 --> 02:21.840
And the last step is reducing numerical model with evaluating the inference of each part

02:21.840 --> 02:27.320
of the system to the rest of the system.

02:27.320 --> 02:36.480
And a second point, a more important point for our research is a timescale adaptive model

02:36.480 --> 02:37.880
reduction.

02:37.880 --> 02:39.920
So how to explain that?

02:39.920 --> 02:45.960
In a system, we have a low inertia part in the stem and high inertia.

02:45.960 --> 02:57.560
So low inertia part of the system are a part of the system that evolve quickly in the time

02:57.560 --> 03:03.200
and high inertia evolve slowly with the time.

03:03.200 --> 03:12.960
So when we simulate each one, we don't require the same step size.

03:12.960 --> 03:17.960
Sorry.

03:17.960 --> 03:25.080
When we make a simulation, a physical simulation, we have to find an optimal step size.

03:25.080 --> 03:31.360
If we have a too large step size, the accuracy will decrease.

03:31.360 --> 03:36.720
And if we have a smaller step size, we will have a sufficient accuracy.

03:36.720 --> 03:48.720
But if the step size is too much small, the time to execute the simulation will be increased

03:48.720 --> 03:51.960
for a little gain of accuracy.

03:51.960 --> 03:58.720
So we have multiple inertia part in a multi-physics system.

03:58.720 --> 04:07.040
And we want to find a way to optimize the simulation by using different timesquale in

04:07.040 --> 04:10.400
the system.

04:10.400 --> 04:23.000
So for the project, we have some requirements when we will choose the simulation software.

04:23.000 --> 04:26.800
We need a multi-physics simulation software.

04:26.800 --> 04:31.640
This one must be adaptable.

04:31.640 --> 04:43.120
So it must be able to adapt the model as a function of the condition of simulation, like

04:43.120 --> 04:45.760
the time, et cetera.

04:45.760 --> 04:51.960
And last but not least, the application must be user-friendly.

04:51.960 --> 04:59.400
So we have Simulink with MATLAB or XCOS with Scilab.

04:59.400 --> 05:07.280
That would be a very, very good application for the project.

05:07.280 --> 05:09.160
But Simulink is expensive.

05:09.160 --> 05:19.400
It's a closed source software and not exactly adapted to our requirements.

05:19.400 --> 05:28.560
And it's a closed source software, so we couldn't modify MATLAB like we wanted.

05:28.560 --> 05:30.800
And for XCOS, it's not user-friendly.

05:30.800 --> 05:36.680
And like MATLAB, it doesn't exactly fit with the project requirement.

05:36.680 --> 05:46.640
So we decided to develop our own software that leverages existing powerful Python libraries.

05:46.640 --> 05:50.840
Here is an overview of our application.

05:50.840 --> 05:54.600
It has been used in a regulation system.

05:54.600 --> 06:01.920
And here we have an example of results for this regulation system.

06:01.920 --> 06:10.400
So the software, it's a graphical tool for modeling and simulating multi-physics system.

06:10.400 --> 06:17.800
There is a quick demonstration of how to use the application.

06:17.800 --> 06:26.800
So to build the simulation graph, it's just a drag and drop from a box library to a scheme

06:26.800 --> 06:27.960
drawing.

06:27.960 --> 06:37.160
And then once the simulation graph is done, you can easily launch the simulation.

06:37.160 --> 06:46.480
We can use multiple projects at the same time, save and load projects, et cetera.

06:46.480 --> 06:49.160
So what is the application?

06:49.160 --> 06:52.560
The application is a simulation graph builder.

06:52.560 --> 07:03.160
We have provided some default libraries to use the application if you install it on your

07:03.160 --> 07:04.760
computer.

07:04.760 --> 07:18.720
But you can easily add your own process boxes and can solve all the simulation you've been

07:18.720 --> 07:21.220
building in the application.

07:21.220 --> 07:25.320
We have implemented some default simulation solver.

07:25.320 --> 07:32.460
But you can also add your custom simulation solver.

07:32.460 --> 07:40.400
So here is a list of default boxes in the application.

07:40.400 --> 07:46.740
We have a mat application like addition, multiplication, derivative, et cetera, signal processing with

07:46.740 --> 07:55.680
transfer function, et cetera, sources, and order like a graph display, and also open

07:55.680 --> 08:01.160
model, cache simulation, embedder, et cetera.

08:01.160 --> 08:07.720
So if you want to install the application on your PC and want to create your own library

08:07.720 --> 08:23.720
of boxes, if we want to create our own box, we have to know that a box is defined by two

08:23.720 --> 08:24.720
files.

08:24.720 --> 08:29.580
The first one is a description file written in YAML.

08:29.580 --> 08:35.400
The second one is a code file written in Python.

08:35.400 --> 08:41.380
And there is one condition to make it as a box.

08:41.380 --> 08:48.200
It's that both files must share the same base file name.

08:48.200 --> 08:50.200
So how to create a box?

08:50.200 --> 08:51.440
I will take an example.

08:51.440 --> 09:01.840
I will create a box that is able to display a graphic data in a graph.

09:01.840 --> 09:12.280
So the goal of the box is to display data in a two-axis plot, in the x-axis, the time,

09:12.280 --> 09:15.600
and the y-axis, the value.

09:15.600 --> 09:22.400
The box must be able to display data from one or more sources.

09:22.400 --> 09:29.320
And the graph must be displayed at the end of the simulation.

09:29.320 --> 09:37.680
There is how the box must behave during the simulation and at the end of the simulation.

09:37.680 --> 09:39.600
So how to create the box?

09:39.600 --> 09:46.800
The first step is to define the metadata of the box with the box name, the library name,

09:46.800 --> 09:49.120
version, author, and creation date.

09:49.120 --> 09:54.320
Just metadata of the box.

09:54.320 --> 09:59.360
Then we will define the characteristic of the box.

09:59.360 --> 10:06.760
What I mean by characteristic is all the inputs, all the outputs of the box, and the parameters.

10:06.760 --> 10:15.240
So for the box, for the graphical box, we need three parameters, the title, the label

10:15.240 --> 10:20.280
for y-axis, and the label for x-axis.

10:20.280 --> 10:30.120
We must define the type of the parameter, and we can define a default value.

10:30.120 --> 10:34.500
For the outputs, the box doesn't require any output.

10:34.500 --> 10:38.400
And for the inputs, we have three conditions.

10:38.400 --> 10:44.440
The first one, we have defined a default count of input to one.

10:44.440 --> 10:51.320
So the box, by default, will have one input.

10:51.320 --> 10:54.440
The number of inputs must be unlimited.

10:54.440 --> 11:02.400
So we must write the parameter is infinite to true.

11:02.400 --> 11:07.760
And the number of inputs must be not limited.

11:07.760 --> 11:12.840
That means we can define a range of number of inputs.

11:12.840 --> 11:19.520
So we can limit, for example, the number of inputs from one to five, for example.

11:19.520 --> 11:24.680
But in this case, we won't define any limit.

11:24.680 --> 11:29.500
The next step is to define a behavior.

11:29.500 --> 11:39.320
So how to define the behavior of the box, we write a Python file.

11:39.320 --> 11:49.640
When we write a Python file, we can use all of the available Python libraries.

11:49.640 --> 11:52.640
We have to define three functions.

11:52.640 --> 12:08.560
The first one, an init function.

12:08.560 --> 12:13.560
In our case, this function will init the plot.

12:13.560 --> 12:18.160
The second one is, during the simulation, what will the box do?

12:18.160 --> 12:21.800
What is the process inside the box during the simulation?

12:21.800 --> 12:25.280
In our case, it's saving data.

12:25.280 --> 12:30.120
And what will the box will do after the simulation?

12:30.120 --> 12:36.160
And in our case, it's plot the data.

12:36.160 --> 12:42.880
Then the next step is to connect the description file and the code file, the Python file.

12:42.880 --> 12:55.040
To connect both, you only have to write the name of the associated function.

12:55.040 --> 12:57.920
Then we have created a box.

12:57.920 --> 13:01.280
Now we want to add it in a library.

13:01.280 --> 13:04.080
So a library is just a collection of boxes.

13:04.080 --> 13:11.600
And in practical, a library is just a folder containing a YAML file and a Python file.

13:11.600 --> 13:21.280
For now, a library is a folder that doesn't accept subdirectories.

13:21.280 --> 13:30.680
We can't, at the time, we can't put our file in subdirectories.

13:30.680 --> 13:33.400
It won't be recognized.

13:33.400 --> 13:46.080
So we have our folder, our first box with our two files, second one, et cetera.

13:46.080 --> 13:51.120
And it's how we make a library.

13:51.120 --> 13:59.680
Another feature we added to Muffin is an IPython interaction.

13:59.680 --> 14:03.920
So Muffin can be run in IPython session.

14:03.920 --> 14:11.560
It means that Muffin can access to all the IPython variables, all variables declared

14:11.560 --> 14:15.320
in the IPython environment.

14:15.320 --> 14:21.400
We can use all these variables as simulation parameters.

14:21.400 --> 14:23.880
And the access variable is dynamic.

14:23.880 --> 14:34.880
It means that if we can launch the application at the beginning of the session, declare variables

14:34.880 --> 14:39.240
in the IPython, and use it dynamically.

14:39.240 --> 14:48.360
So if I launch a first simulation with some parameters, I update it after one simulation.

14:48.360 --> 14:55.240
If I launch a second simulation, the second simulation will take the new value into account

14:55.240 --> 14:57.720
for the new simulation.

14:57.720 --> 15:07.160
Or to use it in IPython session, the first step is to load the Muffin extension with

15:07.160 --> 15:10.640
the command loadxt.

15:10.640 --> 15:15.000
And then just run the Muffin command.

15:15.000 --> 15:19.400
There is a demonstration of how it works.

15:19.400 --> 15:27.880
So we have firstly declare our parameter in a notebook.

15:27.880 --> 15:35.640
We will create a simulation with two signed signals.

15:35.640 --> 15:54.680
And then we will configure all the parameters.

15:54.680 --> 16:05.760
We have implemented some information for the user when he writes a wrong variable name,

16:05.760 --> 16:22.680
the application will give the information to the user.

16:22.680 --> 16:26.920
So here we have all of both signals.

16:26.920 --> 16:30.400
The first one at 10 hertz with an amplitude of 10.

16:30.400 --> 16:34.200
And the second one at 5 hertz with an amplitude of 7.

16:34.200 --> 16:39.740
And we will launch the demonstration.

16:39.740 --> 16:45.560
Then we will update the value of the second signal, the amplitude of the second signal

16:45.560 --> 16:53.480
only, and we have a signal with the new values.

16:53.480 --> 16:59.920
We have implemented other control features like saving and loading a project, working

16:59.920 --> 17:03.880
with multiple projects at the same time.

17:03.880 --> 17:08.200
Copy and paste boxes and cut also.

17:08.200 --> 17:11.880
Delete in box.

17:11.880 --> 17:16.520
Then cancel action, etc.

17:16.520 --> 17:30.760
So in conclusion, we have developed our own multi-physics simulation software.

17:30.760 --> 17:37.560
The advantages of this application is that the application is entirely coded in Python.

17:37.560 --> 17:43.940
So we have access to many powerful libraries like NumPy, SciPy, etc. for the application

17:43.940 --> 17:50.520
and for the custom processing boxes and simulation servers.

17:50.520 --> 17:53.880
The application is very adaptive.

17:53.880 --> 18:01.240
What I mean by that is that you can easily implement your own custom boxes and custom

18:01.240 --> 18:04.280
simulation server.

18:04.280 --> 18:09.400
And the application can be associated to an IPython environment.

18:09.400 --> 18:20.400
So Mephene offers an Python alternative to MATLAB plus Simulink.

18:20.400 --> 18:27.600
The disadvantages of the application, it's written in a scripting language.

18:27.600 --> 18:32.680
So we have higher solving times.

18:32.680 --> 18:39.400
It's a young application at the time, so we need more time to offer a lot of features.

18:39.400 --> 18:45.200
And we need more users to improve the experience.

18:45.200 --> 18:47.000
So what's next?

18:47.000 --> 18:51.600
We will have to work on compatibility.

18:51.600 --> 18:56.920
We want to make the transition from PyQT5 to PyQT6.

18:56.920 --> 19:04.760
And we want to add more interactivity with the user to improve the user-friendliness

19:04.760 --> 19:09.240
of the application.

19:09.240 --> 19:15.360
Here is a list of the contributors of the project.

19:15.360 --> 19:18.240
And here is the links of the project.

19:18.240 --> 19:26.120
If you want to read all the source code, you have a link to the GitLab.

19:26.120 --> 19:34.440
And if you want to try the application, we have a package available on PyP.

19:34.440 --> 19:40.240
If you want to try to install it directly in your Python, you can use a pip install

19:40.240 --> 19:43.800
method.

19:43.800 --> 19:47.000
So thank you for your attention.

19:47.000 --> 19:57.600
If you have some more questions.

19:57.600 --> 20:19.960
You said you go through electrical analogy to make the calculation, you use electrical

20:19.960 --> 20:20.960
equation, right?

20:20.960 --> 20:21.960
Sorry?

20:21.960 --> 20:22.960
Can you repeat?

20:22.960 --> 20:23.960
I will repeat after.

20:23.960 --> 20:29.120
You said you come from physical...

20:29.120 --> 20:34.360
We want to make a electronic simulation.

20:34.360 --> 20:48.840
And we want to convert all the parts of the system to electrical analogies.

20:48.840 --> 20:55.840
We don't use any software like...

20:55.840 --> 21:03.640
Sorry, I'm a bit stressed.

21:03.640 --> 21:04.640
Electrical simulation.

21:04.640 --> 21:07.680
I don't remember the name.

21:07.680 --> 21:15.960
But the cons with the software is that the model is not dynamic.

21:15.960 --> 21:21.400
We can't try a lot of sets easily.

21:21.400 --> 21:26.800
But the game of our application is to...

21:26.800 --> 21:35.360
With the time, make a box to create an interface to other multi-physics application.

21:35.360 --> 21:37.200
We don't want to replace those applications.

21:37.200 --> 21:44.560
We just want to create an interface to those applications to use it in our research project.

21:44.560 --> 21:48.960
If I don't want that, because it's important project.

21:48.960 --> 21:54.400
The idea is a lot of process can be simulated with impedance like...

21:54.400 --> 21:55.400
Yeah, yeah, yeah.

21:55.400 --> 21:58.320
Thinking, like thermosters, mechanical stuff.

21:58.320 --> 21:59.320
You had already...

21:59.320 --> 22:06.680
And then between the physical aspect and the electrical, the impedance stuff.

22:06.680 --> 22:11.240
So my question was, do you use electrical equation because they are simpler to solve?

22:11.240 --> 22:15.280
Yeah, very good physical equation.

22:15.280 --> 22:17.280
Sorry guys, there is a stream.

22:17.280 --> 22:19.280
People watching on the web, they can hear you.

22:19.280 --> 22:21.280
You have to go through the mic.

22:21.280 --> 22:24.680
Maybe you can go instead and use the mic if you want to answer that question.

22:24.680 --> 22:25.680
Oh, you can repeat maybe.

22:25.680 --> 22:26.680
You can repeat.

22:26.680 --> 22:28.680
Yeah, that would be great if you could at least summarize.

22:28.680 --> 22:31.680
It's probably the user who understand better the problem.

22:31.680 --> 22:32.680
It's maybe just...

22:32.680 --> 22:33.680
Okay, yeah.

22:33.680 --> 22:41.840
The goal of the project, of the application is to improve the comprehension of the system.

22:41.840 --> 22:53.200
Do you plan to make it where and how you work to evaluate the wide process?

22:53.200 --> 22:55.200
Sorry, I don't have heard...

22:55.200 --> 23:04.080
I'm a bit...

23:04.080 --> 23:27.720
I'm a bit deaf.

23:27.720 --> 23:31.080
Because you want to continue to do a real time simulation?

23:31.080 --> 23:37.280
No, the simulation...

23:37.280 --> 23:39.440
Can we do a real time simulation?

23:39.440 --> 23:41.440
For now, it's not possible.

23:41.440 --> 23:44.920
We want to implement that in the future.

23:44.920 --> 23:50.600
For now, the application, we just run the initialization function, then run the simulation

23:50.600 --> 23:54.840
function and the ending function.

23:54.840 --> 23:59.800
And all the functions are run in one time.

23:59.800 --> 24:07.840
So at the time, we don't have implemented a real time overview of the simulation.

24:07.840 --> 24:13.240
But we plan in the future to add this feature.

24:13.240 --> 24:15.240
Go ahead.

24:15.240 --> 24:18.800
So, no, it's...

24:18.800 --> 24:28.800
In the beginning, you talked about the slow paths and the initial high inertia and lower

24:28.800 --> 24:31.160
inertia paths of your simulations.

24:31.160 --> 24:32.160
Yes.

24:32.160 --> 24:40.560
And you said that your software was designed to deal with local viable solutions and global

24:40.560 --> 24:43.600
viable simulations.

24:43.600 --> 24:48.880
How does that translate into what you've shown us?

24:48.880 --> 24:52.000
Where is the global viable part?

24:52.000 --> 24:54.560
So I repeat the question.

24:54.560 --> 25:04.920
I've said that we have in a system low inertia paths and high inertia paths and also local

25:04.920 --> 25:12.000
viable simulation software and global viable software.

25:12.000 --> 25:13.000
And how...

25:13.000 --> 25:17.720
How does this translate into what you've shown us?

25:17.720 --> 25:19.720
Where is the idea?

25:19.720 --> 25:22.880
Or does it implement it in the application?

25:22.880 --> 25:24.880
Yeah, why is it in the application?

25:24.880 --> 25:29.880
How do these concepts translate into the application you've shown us?

25:29.880 --> 25:32.880
What moment it's a purpose?

25:32.880 --> 25:36.880
At the time, it's not implemented...

25:36.880 --> 25:40.880
It's the background of the project.

25:40.880 --> 25:42.880
All right.

25:42.880 --> 25:46.880
But it's too stable a problem.

25:46.880 --> 25:51.880
So the idea is we want to have too stable those.

25:51.880 --> 25:54.880
And I'm sure that this kind of...

25:54.880 --> 25:57.880
You might forget for the...

25:57.880 --> 26:00.880
Discussion can go on in the...

26:00.880 --> 26:03.880
It's a great part of the first time.

26:03.880 --> 26:05.880
So go on with the discussion.

26:05.880 --> 26:07.880
We should switch speakers now.

26:07.880 --> 26:08.880
Thank you.

26:08.880 --> 26:09.880
Thank you very much.

26:09.880 --> 26:10.880
Thank you.

26:10.880 --> 26:11.880
Thank you.

26:11.880 --> 26:16.880
Can we go for the video today?

26:16.880 --> 26:17.880
Yes.

26:17.880 --> 26:18.880
Sure.

26:18.880 --> 26:23.880
Thank you.

1
0:00:00.000 --> 0:00:12.400
Hello everyone, I'm Dylan Fievez and I'm a research engineer at CERAF Technique Research

2
0:00:12.400 --> 0:00:15.800
Centre in Mons in Belgium.

3
0:00:15.800 --> 0:00:20.680
Today I will present you the software Mephene, which is a graphical tool for modeling and

4
0:00:20.680 --> 0:00:25.360
simulating multiphysics systems.

5
0:00:25.360 --> 0:00:31.160
So the project started with a research project.

6
0:00:31.160 --> 0:00:40.440
It is a collaboration with Thales Alenia Space, so it's a research project funded by the Wallonia,

7
0:00:40.440 --> 0:00:45.400
so a public fund of Belgium.

8
0:00:45.400 --> 0:00:51.400
And the goal of the project is the development of a simulation method to assist in the design

9
0:00:51.400 --> 0:00:56.720
of mechatronic chains with complete multiphysics model.

10
0:00:56.720 --> 0:01:02.960
So in other terms, what are the goals of the project?

11
0:01:02.960 --> 0:01:09.600
It exists different kinds of multiphysics simulation software, the global variable simulation

12
0:01:09.600 --> 0:01:19.260
type like Open Modelica, which simulates a system by an item like a motor, etc.

13
0:01:19.260 --> 0:01:27.120
And we have a local variable simulation like Finite Element Simulation System, Finite Element

14
0:01:27.120 --> 0:01:30.440
Simulation for Multiphysics System.

15
0:01:30.440 --> 0:01:38.840
And both types of simulation are not compatible with each other, so the research project tried

16
0:01:38.840 --> 0:01:54.880
to find another way to simulate a multiphysics model with using electrical analogues modeling.

17
0:01:54.880 --> 0:01:59.840
So the method we want to develop is a simulation in three points.

18
0:01:59.840 --> 0:02:06.680
So the first step is to convert physical system to electrical analogues system.

19
0:02:06.680 --> 0:02:13.680
The second step is to convert those electrical analogues model to numerical model.

20
0:02:13.680 --> 0:02:21.840
And the last step is reducing numerical model with evaluating the inference of each part

21
0:02:21.840 --> 0:02:27.320
of the system to the rest of the system.

22
0:02:27.320 --> 0:02:36.480
And a second point, a more important point for our research is a timescale adaptive model

23
0:02:36.480 --> 0:02:37.880
reduction.

24
0:02:37.880 --> 0:02:39.920
So how to explain that?

25
0:02:39.920 --> 0:02:45.960
In a system, we have a low inertia part in the stem and high inertia.

26
0:02:45.960 --> 0:02:57.560
So low inertia part of the system are a part of the system that evolve quickly in the time

27
0:02:57.560 --> 0:03:03.200
and high inertia evolve slowly with the time.

28
0:03:03.200 --> 0:03:12.960
So when we simulate each one, we don't require the same step size.

29
0:03:12.960 --> 0:03:17.960
Sorry.

30
0:03:17.960 --> 0:03:25.080
When we make a simulation, a physical simulation, we have to find an optimal step size.

31
0:03:25.080 --> 0:03:31.360
If we have a too large step size, the accuracy will decrease.

32
0:03:31.360 --> 0:03:36.720
And if we have a smaller step size, we will have a sufficient accuracy.

33
0:03:36.720 --> 0:03:48.720
But if the step size is too much small, the time to execute the simulation will be increased

34
0:03:48.720 --> 0:03:51.960
for a little gain of accuracy.

35
0:03:51.960 --> 0:03:58.720
So we have multiple inertia part in a multi-physics system.

36
0:03:58.720 --> 0:04:07.040
And we want to find a way to optimize the simulation by using different timesquale in

37
0:04:07.040 --> 0:04:10.400
the system.

38
0:04:10.400 --> 0:04:23.000
So for the project, we have some requirements when we will choose the simulation software.

39
0:04:23.000 --> 0:04:26.800
We need a multi-physics simulation software.

40
0:04:26.800 --> 0:04:31.640
This one must be adaptable.

41
0:04:31.640 --> 0:04:43.120
So it must be able to adapt the model as a function of the condition of simulation, like

42
0:04:43.120 --> 0:04:45.760
the time, et cetera.

43
0:04:45.760 --> 0:04:51.960
And last but not least, the application must be user-friendly.

44
0:04:51.960 --> 0:04:59.400
So we have Simulink with MATLAB or XCOS with Scilab.

45
0:04:59.400 --> 0:05:07.280
That would be a very, very good application for the project.

46
0:05:07.280 --> 0:05:09.160
But Simulink is expensive.

47
0:05:09.160 --> 0:05:19.400
It's a closed source software and not exactly adapted to our requirements.

48
0:05:19.400 --> 0:05:28.560
And it's a closed source software, so we couldn't modify MATLAB like we wanted.

49
0:05:28.560 --> 0:05:30.800
And for XCOS, it's not user-friendly.

50
0:05:30.800 --> 0:05:36.680
And like MATLAB, it doesn't exactly fit with the project requirement.

51
0:05:36.680 --> 0:05:46.640
So we decided to develop our own software that leverages existing powerful Python libraries.

52
0:05:46.640 --> 0:05:50.840
Here is an overview of our application.

53
0:05:50.840 --> 0:05:54.600
It has been used in a regulation system.

54
0:05:54.600 --> 0:06:01.920
And here we have an example of results for this regulation system.

55
0:06:01.920 --> 0:06:10.400
So the software, it's a graphical tool for modeling and simulating multi-physics system.

56
0:06:10.400 --> 0:06:17.800
There is a quick demonstration of how to use the application.

57
0:06:17.800 --> 0:06:26.800
So to build the simulation graph, it's just a drag and drop from a box library to a scheme

58
0:06:26.800 --> 0:06:27.960
drawing.

59
0:06:27.960 --> 0:06:37.160
And then once the simulation graph is done, you can easily launch the simulation.

60
0:06:37.160 --> 0:06:46.480
We can use multiple projects at the same time, save and load projects, et cetera.

61
0:06:46.480 --> 0:06:49.160
So what is the application?

62
0:06:49.160 --> 0:06:52.560
The application is a simulation graph builder.

63
0:06:52.560 --> 0:07:03.160
We have provided some default libraries to use the application if you install it on your

64
0:07:03.160 --> 0:07:04.760
computer.

65
0:07:04.760 --> 0:07:18.720
But you can easily add your own process boxes and can solve all the simulation you've been

66
0:07:18.720 --> 0:07:21.220
building in the application.

67
0:07:21.220 --> 0:07:25.320
We have implemented some default simulation solver.

68
0:07:25.320 --> 0:07:32.460
But you can also add your custom simulation solver.

69
0:07:32.460 --> 0:07:40.400
So here is a list of default boxes in the application.

70
0:07:40.400 --> 0:07:46.740
We have a mat application like addition, multiplication, derivative, et cetera, signal processing with

71
0:07:46.740 --> 0:07:55.680
transfer function, et cetera, sources, and order like a graph display, and also open

72
0:07:55.680 --> 0:08:01.160
model, cache simulation, embedder, et cetera.

73
0:08:01.160 --> 0:08:07.720
So if you want to install the application on your PC and want to create your own library

74
0:08:07.720 --> 0:08:23.720
of boxes, if we want to create our own box, we have to know that a box is defined by two

75
0:08:23.720 --> 0:08:24.720
files.

76
0:08:24.720 --> 0:08:29.580
The first one is a description file written in YAML.

77
0:08:29.580 --> 0:08:35.400
The second one is a code file written in Python.

78
0:08:35.400 --> 0:08:41.380
And there is one condition to make it as a box.

79
0:08:41.380 --> 0:08:48.200
It's that both files must share the same base file name.

80
0:08:48.200 --> 0:08:50.200
So how to create a box?

81
0:08:50.200 --> 0:08:51.440
I will take an example.

82
0:08:51.440 --> 0:09:01.840
I will create a box that is able to display a graphic data in a graph.

83
0:09:01.840 --> 0:09:12.280
So the goal of the box is to display data in a two-axis plot, in the x-axis, the time,

84
0:09:12.280 --> 0:09:15.600
and the y-axis, the value.

85
0:09:15.600 --> 0:09:22.400
The box must be able to display data from one or more sources.

86
0:09:22.400 --> 0:09:29.320
And the graph must be displayed at the end of the simulation.

87
0:09:29.320 --> 0:09:37.680
There is how the box must behave during the simulation and at the end of the simulation.

88
0:09:37.680 --> 0:09:39.600
So how to create the box?

89
0:09:39.600 --> 0:09:46.800
The first step is to define the metadata of the box with the box name, the library name,

90
0:09:46.800 --> 0:09:49.120
version, author, and creation date.

91
0:09:49.120 --> 0:09:54.320
Just metadata of the box.

92
0:09:54.320 --> 0:09:59.360
Then we will define the characteristic of the box.

93
0:09:59.360 --> 0:10:06.760
What I mean by characteristic is all the inputs, all the outputs of the box, and the parameters.

94
0:10:06.760 --> 0:10:15.240
So for the box, for the graphical box, we need three parameters, the title, the label

95
0:10:15.240 --> 0:10:20.280
for y-axis, and the label for x-axis.

96
0:10:20.280 --> 0:10:30.120
We must define the type of the parameter, and we can define a default value.

97
0:10:30.120 --> 0:10:34.500
For the outputs, the box doesn't require any output.

98
0:10:34.500 --> 0:10:38.400
And for the inputs, we have three conditions.

99
0:10:38.400 --> 0:10:44.440
The first one, we have defined a default count of input to one.

100
0:10:44.440 --> 0:10:51.320
So the box, by default, will have one input.

101
0:10:51.320 --> 0:10:54.440
The number of inputs must be unlimited.

102
0:10:54.440 --> 0:11:02.400
So we must write the parameter is infinite to true.

103
0:11:02.400 --> 0:11:07.760
And the number of inputs must be not limited.

104
0:11:07.760 --> 0:11:12.840
That means we can define a range of number of inputs.

105
0:11:12.840 --> 0:11:19.520
So we can limit, for example, the number of inputs from one to five, for example.

106
0:11:19.520 --> 0:11:24.680
But in this case, we won't define any limit.

107
0:11:24.680 --> 0:11:29.500
The next step is to define a behavior.

108
0:11:29.500 --> 0:11:39.320
So how to define the behavior of the box, we write a Python file.

109
0:11:39.320 --> 0:11:49.640
When we write a Python file, we can use all of the available Python libraries.

110
0:11:49.640 --> 0:11:52.640
We have to define three functions.

111
0:11:52.640 --> 0:12:08.560
The first one, an init function.

112
0:12:08.560 --> 0:12:13.560
In our case, this function will init the plot.

113
0:12:13.560 --> 0:12:18.160
The second one is, during the simulation, what will the box do?

114
0:12:18.160 --> 0:12:21.800
What is the process inside the box during the simulation?

115
0:12:21.800 --> 0:12:25.280
In our case, it's saving data.

116
0:12:25.280 --> 0:12:30.120
And what will the box will do after the simulation?

117
0:12:30.120 --> 0:12:36.160
And in our case, it's plot the data.

118
0:12:36.160 --> 0:12:42.880
Then the next step is to connect the description file and the code file, the Python file.

119
0:12:42.880 --> 0:12:55.040
To connect both, you only have to write the name of the associated function.

120
0:12:55.040 --> 0:12:57.920
Then we have created a box.

121
0:12:57.920 --> 0:13:01.280
Now we want to add it in a library.

122
0:13:01.280 --> 0:13:04.080
So a library is just a collection of boxes.

123
0:13:04.080 --> 0:13:11.600
And in practical, a library is just a folder containing a YAML file and a Python file.

124
0:13:11.600 --> 0:13:21.280
For now, a library is a folder that doesn't accept subdirectories.

125
0:13:21.280 --> 0:13:30.680
We can't, at the time, we can't put our file in subdirectories.

126
0:13:30.680 --> 0:13:33.400
It won't be recognized.

127
0:13:33.400 --> 0:13:46.080
So we have our folder, our first box with our two files, second one, et cetera.

128
0:13:46.080 --> 0:13:51.120
And it's how we make a library.

129
0:13:51.120 --> 0:13:59.680
Another feature we added to Muffin is an IPython interaction.

130
0:13:59.680 --> 0:14:03.920
So Muffin can be run in IPython session.

131
0:14:03.920 --> 0:14:11.560
It means that Muffin can access to all the IPython variables, all variables declared

132
0:14:11.560 --> 0:14:15.320
in the IPython environment.

133
0:14:15.320 --> 0:14:21.400
We can use all these variables as simulation parameters.

134
0:14:21.400 --> 0:14:23.880
And the access variable is dynamic.

135
0:14:23.880 --> 0:14:34.880
It means that if we can launch the application at the beginning of the session, declare variables

136
0:14:34.880 --> 0:14:39.240
in the IPython, and use it dynamically.

137
0:14:39.240 --> 0:14:48.360
So if I launch a first simulation with some parameters, I update it after one simulation.

138
0:14:48.360 --> 0:14:55.240
If I launch a second simulation, the second simulation will take the new value into account

139
0:14:55.240 --> 0:14:57.720
for the new simulation.

140
0:14:57.720 --> 0:15:07.160
Or to use it in IPython session, the first step is to load the Muffin extension with

141
0:15:07.160 --> 0:15:10.640
the command loadxt.

142
0:15:10.640 --> 0:15:15.000
And then just run the Muffin command.

143
0:15:15.000 --> 0:15:19.400
There is a demonstration of how it works.

144
0:15:19.400 --> 0:15:27.880
So we have firstly declare our parameter in a notebook.

145
0:15:27.880 --> 0:15:35.640
We will create a simulation with two signed signals.

146
0:15:35.640 --> 0:15:54.680
And then we will configure all the parameters.

147
0:15:54.680 --> 0:16:05.760
We have implemented some information for the user when he writes a wrong variable name,

148
0:16:05.760 --> 0:16:22.680
the application will give the information to the user.

149
0:16:22.680 --> 0:16:26.920
So here we have all of both signals.

150
0:16:26.920 --> 0:16:30.400
The first one at 10 hertz with an amplitude of 10.

151
0:16:30.400 --> 0:16:34.200
And the second one at 5 hertz with an amplitude of 7.

152
0:16:34.200 --> 0:16:39.740
And we will launch the demonstration.

153
0:16:39.740 --> 0:16:45.560
Then we will update the value of the second signal, the amplitude of the second signal

154
0:16:45.560 --> 0:16:53.480
only, and we have a signal with the new values.

155
0:16:53.480 --> 0:16:59.920
We have implemented other control features like saving and loading a project, working

156
0:16:59.920 --> 0:17:03.880
with multiple projects at the same time.

157
0:17:03.880 --> 0:17:08.200
Copy and paste boxes and cut also.

158
0:17:08.200 --> 0:17:11.880
Delete in box.

159
0:17:11.880 --> 0:17:16.520
Then cancel action, etc.

160
0:17:16.520 --> 0:17:30.760
So in conclusion, we have developed our own multi-physics simulation software.

161
0:17:30.760 --> 0:17:37.560
The advantages of this application is that the application is entirely coded in Python.

162
0:17:37.560 --> 0:17:43.940
So we have access to many powerful libraries like NumPy, SciPy, etc. for the application

163
0:17:43.940 --> 0:17:50.520
and for the custom processing boxes and simulation servers.

164
0:17:50.520 --> 0:17:53.880
The application is very adaptive.

165
0:17:53.880 --> 0:18:01.240
What I mean by that is that you can easily implement your own custom boxes and custom

166
0:18:01.240 --> 0:18:04.280
simulation server.

167
0:18:04.280 --> 0:18:09.400
And the application can be associated to an IPython environment.

168
0:18:09.400 --> 0:18:20.400
So Mephene offers an Python alternative to MATLAB plus Simulink.

169
0:18:20.400 --> 0:18:27.600
The disadvantages of the application, it's written in a scripting language.

170
0:18:27.600 --> 0:18:32.680
So we have higher solving times.

171
0:18:32.680 --> 0:18:39.400
It's a young application at the time, so we need more time to offer a lot of features.

172
0:18:39.400 --> 0:18:45.200
And we need more users to improve the experience.

173
0:18:45.200 --> 0:18:47.000
So what's next?

174
0:18:47.000 --> 0:18:51.600
We will have to work on compatibility.

175
0:18:51.600 --> 0:18:56.920
We want to make the transition from PyQT5 to PyQT6.

176
0:18:56.920 --> 0:19:04.760
And we want to add more interactivity with the user to improve the user-friendliness

177
0:19:04.760 --> 0:19:09.240
of the application.

178
0:19:09.240 --> 0:19:15.360
Here is a list of the contributors of the project.

179
0:19:15.360 --> 0:19:18.240
And here is the links of the project.

180
0:19:18.240 --> 0:19:26.120
If you want to read all the source code, you have a link to the GitLab.

181
0:19:26.120 --> 0:19:34.440
And if you want to try the application, we have a package available on PyP.

182
0:19:34.440 --> 0:19:40.240
If you want to try to install it directly in your Python, you can use a pip install

183
0:19:40.240 --> 0:19:43.800
method.

184
0:19:43.800 --> 0:19:47.000
So thank you for your attention.

185
0:19:47.000 --> 0:19:57.600
If you have some more questions.

186
0:19:57.600 --> 0:20:19.960
You said you go through electrical analogy to make the calculation, you use electrical

187
0:20:19.960 --> 0:20:20.960
equation, right?

188
0:20:20.960 --> 0:20:21.960
Sorry?

189
0:20:21.960 --> 0:20:22.960
Can you repeat?

190
0:20:22.960 --> 0:20:23.960
I will repeat after.

191
0:20:23.960 --> 0:20:29.120
You said you come from physical...

192
0:20:29.120 --> 0:20:34.360
We want to make a electronic simulation.

193
0:20:34.360 --> 0:20:48.840
And we want to convert all the parts of the system to electrical analogies.

194
0:20:48.840 --> 0:20:55.840
We don't use any software like...

195
0:20:55.840 --> 0:21:03.640
Sorry, I'm a bit stressed.

196
0:21:03.640 --> 0:21:04.640
Electrical simulation.

197
0:21:04.640 --> 0:21:07.680
I don't remember the name.

198
0:21:07.680 --> 0:21:15.960
But the cons with the software is that the model is not dynamic.

199
0:21:15.960 --> 0:21:21.400
We can't try a lot of sets easily.

200
0:21:21.400 --> 0:21:26.800
But the game of our application is to...

201
0:21:26.800 --> 0:21:35.360
With the time, make a box to create an interface to other multi-physics application.

202
0:21:35.360 --> 0:21:37.200
We don't want to replace those applications.

203
0:21:37.200 --> 0:21:44.560
We just want to create an interface to those applications to use it in our research project.

204
0:21:44.560 --> 0:21:48.960
If I don't want that, because it's important project.

205
0:21:48.960 --> 0:21:54.400
The idea is a lot of process can be simulated with impedance like...

206
0:21:54.400 --> 0:21:55.400
Yeah, yeah, yeah.

207
0:21:55.400 --> 0:21:58.320
Thinking, like thermosters, mechanical stuff.

208
0:21:58.320 --> 0:21:59.320
You had already...

209
0:21:59.320 --> 0:22:06.680
And then between the physical aspect and the electrical, the impedance stuff.

210
0:22:06.680 --> 0:22:11.240
So my question was, do you use electrical equation because they are simpler to solve?

211
0:22:11.240 --> 0:22:15.280
Yeah, very good physical equation.

212
0:22:15.280 --> 0:22:17.280
Sorry guys, there is a stream.

213
0:22:17.280 --> 0:22:19.280
People watching on the web, they can hear you.

214
0:22:19.280 --> 0:22:21.280
You have to go through the mic.

215
0:22:21.280 --> 0:22:24.680
Maybe you can go instead and use the mic if you want to answer that question.

216
0:22:24.680 --> 0:22:25.680
Oh, you can repeat maybe.

217
0:22:25.680 --> 0:22:26.680
You can repeat.

218
0:22:26.680 --> 0:22:28.680
Yeah, that would be great if you could at least summarize.

219
0:22:28.680 --> 0:22:31.680
It's probably the user who understand better the problem.

220
0:22:31.680 --> 0:22:32.680
It's maybe just...

221
0:22:32.680 --> 0:22:33.680
Okay, yeah.

222
0:22:33.680 --> 0:22:41.840
The goal of the project, of the application is to improve the comprehension of the system.

223
0:22:41.840 --> 0:22:53.200
Do you plan to make it where and how you work to evaluate the wide process?

224
0:22:53.200 --> 0:22:55.200
Sorry, I don't have heard...

225
0:22:55.200 --> 0:23:04.080
I'm a bit...

226
0:23:04.080 --> 0:23:27.720
I'm a bit deaf.

227
0:23:27.720 --> 0:23:31.080
Because you want to continue to do a real time simulation?

228
0:23:31.080 --> 0:23:37.280
No, the simulation...

229
0:23:37.280 --> 0:23:39.440
Can we do a real time simulation?

230
0:23:39.440 --> 0:23:41.440
For now, it's not possible.

231
0:23:41.440 --> 0:23:44.920
We want to implement that in the future.

232
0:23:44.920 --> 0:23:50.600
For now, the application, we just run the initialization function, then run the simulation

233
0:23:50.600 --> 0:23:54.840
function and the ending function.

234
0:23:54.840 --> 0:23:59.800
And all the functions are run in one time.

235
0:23:59.800 --> 0:24:07.840
So at the time, we don't have implemented a real time overview of the simulation.

236
0:24:07.840 --> 0:24:13.240
But we plan in the future to add this feature.

237
0:24:13.240 --> 0:24:15.240
Go ahead.

238
0:24:15.240 --> 0:24:18.800
So, no, it's...

239
0:24:18.800 --> 0:24:28.800
In the beginning, you talked about the slow paths and the initial high inertia and lower

240
0:24:28.800 --> 0:24:31.160
inertia paths of your simulations.

241
0:24:31.160 --> 0:24:32.160
Yes.

242
0:24:32.160 --> 0:24:40.560
And you said that your software was designed to deal with local viable solutions and global

243
0:24:40.560 --> 0:24:43.600
viable simulations.

244
0:24:43.600 --> 0:24:48.880
How does that translate into what you've shown us?

245
0:24:48.880 --> 0:24:52.000
Where is the global viable part?

246
0:24:52.000 --> 0:24:54.560
So I repeat the question.

247
0:24:54.560 --> 0:25:04.920
I've said that we have in a system low inertia paths and high inertia paths and also local

248
0:25:04.920 --> 0:25:12.000
viable simulation software and global viable software.

249
0:25:12.000 --> 0:25:13.000
And how...

250
0:25:13.000 --> 0:25:17.720
How does this translate into what you've shown us?

251
0:25:17.720 --> 0:25:19.720
Where is the idea?

252
0:25:19.720 --> 0:25:22.880
Or does it implement it in the application?

253
0:25:22.880 --> 0:25:24.880
Yeah, why is it in the application?

254
0:25:24.880 --> 0:25:29.880
How do these concepts translate into the application you've shown us?

255
0:25:29.880 --> 0:25:32.880
What moment it's a purpose?

256
0:25:32.880 --> 0:25:36.880
At the time, it's not implemented...

257
0:25:36.880 --> 0:25:40.880
It's the background of the project.

258
0:25:40.880 --> 0:25:42.880
All right.

259
0:25:42.880 --> 0:25:46.880
But it's too stable a problem.

260
0:25:46.880 --> 0:25:51.880
So the idea is we want to have too stable those.

261
0:25:51.880 --> 0:25:54.880
And I'm sure that this kind of...

262
0:25:54.880 --> 0:25:57.880
You might forget for the...

263
0:25:57.880 --> 0:26:00.880
Discussion can go on in the...

264
0:26:00.880 --> 0:26:03.880
It's a great part of the first time.

265
0:26:03.880 --> 0:26:05.880
So go on with the discussion.

266
0:26:05.880 --> 0:26:07.880
We should switch speakers now.

267
0:26:07.880 --> 0:26:08.880
Thank you.

268
0:26:08.880 --> 0:26:09.880
Thank you very much.

269
0:26:09.880 --> 0:26:10.880
Thank you.

270
0:26:10.880 --> 0:26:11.880
Thank you.

271
0:26:11.880 --> 0:26:16.880
Can we go for the video today?

272
0:26:16.880 --> 0:26:17.880
Yes.

273
0:26:17.880 --> 0:26:18.880
Sure.

274
0:26:18.880 --> 0:26:23.880
Thank you.


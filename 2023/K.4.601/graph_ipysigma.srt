1
0:00:00.000 --> 0:00:07.000
Okay, welcome everyone.

2
0:00:07.000 --> 0:00:24.000
As you've seen from Adam, two people in notebooks are very important tool and tool that over

3
0:00:24.000 --> 0:00:26.000
each data scientist.

4
0:00:26.000 --> 0:00:32.000
But using graphs, within a notebook has some challenges for visualization.

5
0:00:32.000 --> 0:00:41.000
And so Guillaume will talk about Ipile Zigma today, which is a tool to use ZimaJS as a component

6
0:00:41.000 --> 0:00:44.000
in a Jupyter notebook to put that in the box.

7
0:00:44.000 --> 0:00:47.000
So I'm really looking forward to that and look forward to that.

8
0:00:47.000 --> 0:00:48.000
Thank you.

9
0:00:48.000 --> 0:00:51.000
Well, first this time I'm actually not Guillaume.

10
0:00:51.000 --> 0:00:52.000
Oh, sorry.

11
0:00:52.000 --> 0:00:56.000
Guillaume is sick and so I have 20 minutes.

12
0:00:56.000 --> 0:01:01.000
So I apologize in advance because I'm not the creator of the tool and so I will do as

13
0:01:01.000 --> 0:01:03.000
much as I can to present it.

14
0:01:03.000 --> 0:01:10.000
But Guillaume can answer ZimaJS or by Twitter or any other means if you have more questions

15
0:01:10.000 --> 0:01:13.000
than what I can actually answer myself.

16
0:01:13.000 --> 0:01:22.000
So I will just start by a brief remember of why we sometimes want to use graphs and actually

17
0:01:22.000 --> 0:01:28.000
visualize them and not only do statistics on networks and actually visualize graphs.

18
0:01:28.000 --> 0:01:30.000
And so why do we do visual network analysis?

19
0:01:30.000 --> 0:01:37.000
It actually goes back very old to 1736 and the Bridges of Callebir, which is a classical

20
0:01:37.000 --> 0:01:45.000
mathematical problem that was solved thanks to visualizing the graphs that it was showing.

21
0:01:45.000 --> 0:01:52.000
Later on in France, Moreno did the social grounds where he tried to visualize how a

22
0:01:52.000 --> 0:01:56.000
connected were students in a classroom.

23
0:01:56.000 --> 0:02:06.000
And recently, thanks to the computed, assisted tools, we can do those kind of visualizations

24
0:02:06.000 --> 0:02:16.000
but with massive graphs and try to do computed processing to try and automatically specialize

25
0:02:16.000 --> 0:02:24.000
nodes on a map and also identify clusters within it.

26
0:02:24.000 --> 0:02:33.000
So that brings a different need to actually analyze graphs and actually this helps a lot

27
0:02:33.000 --> 0:02:39.000
understanding and we are coming at Piedra from the field of social sciences and we use

28
0:02:39.000 --> 0:02:44.000
a lot of graphs to interpret social issues in general.

29
0:02:44.000 --> 0:02:47.000
And we use them actually as maps.

30
0:02:47.000 --> 0:02:52.000
So it's not maps in which coordinates make sense.

31
0:02:52.000 --> 0:02:55.000
X and Y don't mean anything and you can paint the map.

32
0:02:55.000 --> 0:03:04.000
But basically what you see on the plane indicates information on the localization of each node

33
0:03:04.000 --> 0:03:07.000
that makes a sense compared to the other nodes.

34
0:03:07.000 --> 0:03:16.000
But I guess that's another example of a map that was made a long time ago on the Nazi internet.

35
0:03:16.000 --> 0:03:26.000
So to do that, there's been over the past years a lot of things that have been developed

36
0:03:26.000 --> 0:03:29.000
including the first desktop ones.

37
0:03:29.000 --> 0:03:38.000
So this tool is in direct heritage of this long lineage which started with Geffi.

38
0:03:38.000 --> 0:03:44.000
I believe later today there will be a condition of Geffi Ocean 1 which finally will go out

39
0:03:44.000 --> 0:03:48.000
soon after there was so many versions already.

40
0:03:48.000 --> 0:03:50.000
So you probably already know Geffi.

41
0:03:50.000 --> 0:03:58.000
But recently we could switch from the actual desktop analysis to actual web representations

42
0:03:58.000 --> 0:04:00.000
thanks to a variety of libraries.

43
0:04:00.000 --> 0:04:03.000
This tree that JS proposes to do it.

44
0:04:03.000 --> 0:04:07.000
But there's also Cytoscape and a bunch of others.

45
0:04:07.000 --> 0:04:15.000
So our community works with Simba and Simba has been developed by people actually close to the people of Geffi.

46
0:04:15.000 --> 0:04:24.000
I don't think XE is here today but XE.jakomi is a small brother of Maturjakomi who speaks about Geffi.

47
0:04:24.000 --> 0:04:26.000
He's the one who invented Simba.

48
0:04:26.000 --> 0:04:31.000
And Guillaume is the co-poster of Simba with XE.

49
0:04:31.000 --> 0:04:33.000
So please take a look at Simba.

50
0:04:33.000 --> 0:04:39.000
I will put the slides to the conference and refine links to all the slides.

51
0:04:39.000 --> 0:04:46.000
And then thanks to Simba we could build a lot of Geffi-like tools but for the web.

52
0:04:46.000 --> 0:04:51.000
So that we could do all those interactions that we do in under Geffi but directly in a web page.

53
0:04:51.000 --> 0:04:57.000
There's been a long history at India Lab and a round of trying to build such tools.

54
0:04:57.000 --> 0:04:59.000
Minivan was one of them.

55
0:04:59.000 --> 0:05:11.000
There's also Nancy which is a very small publishing oriented way of displaying graphs with very small few options.

56
0:05:11.000 --> 0:05:20.000
So that you can just put your GEX file or GraphML file and very easily do what you want to do.

57
0:05:20.000 --> 0:05:27.000
Latina is the one developed by people at Westware right now and is very rich in a lot of features.

58
0:05:27.000 --> 0:05:35.000
And soon I think Matthew and Matthew will talk about it briefly in the next talk about Geffi version 1.

59
0:05:35.000 --> 0:05:41.000
There's a Geffi-like version that's currently being developed and that should come in soon.

60
0:05:41.000 --> 0:05:45.000
Which brings me to all those tools are very nice.

61
0:05:45.000 --> 0:05:53.000
We have all those that are interactive and for us to visualize, explore, publish, manipulate all those graphs.

62
0:05:53.000 --> 0:05:58.000
They all require pre-processed graphs.

63
0:05:58.000 --> 0:06:03.000
You cannot just work with your graph while you're visualizing it.

64
0:06:03.000 --> 0:06:11.000
You have to pre-code your file, using JSON or GEX or GraphML.

65
0:06:11.000 --> 0:06:14.000
Then you load it into the tool and then you can explore it.

66
0:06:14.000 --> 0:06:17.000
But we would like to be able to do that at the same time.

67
0:06:17.000 --> 0:06:17.040
So that's where the idea of I-by-Sigma came from, to try and put within the Jupyter notebook a widget that displays a graph using C-

68
0:06:17.040 --> 0:06:25.040
So that's where the idea of I-by-Sigma came from, to try and put within the Jupyter notebook a widget that displays a graph using C-

69
0:06:25.040 --> 0:06:34.040
So that's really easy to install as long as you have Jupyter.

70
0:06:34.040 --> 0:06:39.000
You usually need a tool to work with graphs under a title.

71
0:06:39.000 --> 0:06:44.000
There's two main ones that you might know already about, NetworkX and iGraph.

72
0:06:44.000 --> 0:06:53.000
I-by-Sigma is built to handle both formats of graphs from both NetworkX and iGraph.

73
0:06:53.000 --> 0:06:59.000
So you just install I-by-Sigma in addition and then I just finished the brief demo.

74
0:06:59.000 --> 0:07:02.000
Maybe a seat.

75
0:07:02.000 --> 0:07:07.000
So we'll do two small exploration of graphs.

76
0:07:07.000 --> 0:07:16.000
There's the first graph that I were working on right now, which is on the, what I call the open source,

77
0:07:16.000 --> 0:07:21.000
I mean, actually larger than that, open access, open world.

78
0:07:21.000 --> 0:07:28.000
It's like FOSDAM, but just in France and the French communities working about that.

79
0:07:28.000 --> 0:07:36.000
And so we built this network of websites, links, together of those French communities of free software.

80
0:07:36.000 --> 0:07:38.000
And let's take a look at this graph.

81
0:07:38.000 --> 0:07:41.000
So first I will import the context.

82
0:07:41.000 --> 0:07:44.000
Then I'm reading the graph that I built already.

83
0:07:44.000 --> 0:07:46.000
So that's all this first example.

84
0:07:46.000 --> 0:07:52.000
So here we have a graph with 621 nodes and 7000 edges.

85
0:07:52.000 --> 0:07:54.000
Let's look at the node.

86
0:07:54.000 --> 0:07:58.000
So the first node, I can see that it's far from Asia.

87
0:07:58.000 --> 0:07:59.000
It's half way dot-out.

88
0:07:59.000 --> 0:08:05.000
I don't know if French people are in the room, but I think people should know that half way.

89
0:08:05.000 --> 0:08:07.000
It's from France.

90
0:08:07.000 --> 0:08:14.000
It's a main NGO in France, about all the tools and the sort of graph.

91
0:08:14.000 --> 0:08:16.000
So we have this image.

92
0:08:16.000 --> 0:08:19.000
That's all the data that was collected while making the graph.

93
0:08:19.000 --> 0:08:28.000
And then let's try to just visualize it by just loading i5-sigma, importing sigma and appearing in the graph.

94
0:08:28.000 --> 0:08:37.000
Here, just bind it with the graph, which is randomly specialized.

95
0:08:37.000 --> 0:08:40.000
We have metadata information.

96
0:08:40.000 --> 0:08:49.000
So we can run the forecast on it.

97
0:08:49.000 --> 0:08:51.000
So very easy.

98
0:08:51.000 --> 0:08:54.000
You see your specialized graph.

99
0:08:54.000 --> 0:09:01.000
Just a few seconds, and then you can pause, and then you can also apply some work.

100
0:09:01.000 --> 0:09:04.000
The graph is too dense for that.

101
0:09:04.000 --> 0:09:07.000
But that's a demo effect.

102
0:09:07.000 --> 0:09:11.000
So yeah, but right now it's just a graph, and we don't have much information.

103
0:09:11.000 --> 0:09:13.000
It's very stuff that we're readable.

104
0:09:13.000 --> 0:09:18.000
So let's go down and try to add a few other options to the sigma code.

105
0:09:18.000 --> 0:09:21.000
So we can set the outside constants.

106
0:09:21.000 --> 0:09:23.000
Let's use the number of pages for.

107
0:09:23.000 --> 0:09:31.000
So here I can see that for this purpose, we code a lot of pages on some specific websites.

108
0:09:31.000 --> 0:09:39.000
Let's forward a little bit more and try to adjust the sizes of the nodes so we can adjust the range of the values for instance.

109
0:09:39.000 --> 0:09:46.000
Here it's a bit readable.

110
0:09:46.000 --> 0:09:47.000
So we get sizes.

111
0:09:47.000 --> 0:09:49.000
Let's add some columns.

112
0:09:49.000 --> 0:09:56.000
So I by sigma proposes some internal metrics that we can compute on the front.

113
0:09:56.000 --> 0:10:03.000
So we want algorithms that generate clusters, and we will apply columns to do that.

114
0:10:03.000 --> 0:09:52.200
I mean we will apply those

115
0:10:05.000 --> 0:10:07.000
We do not have any data as columns.

116
0:10:07.000 --> 0:10:11.000
So here we get the same graph as columns this time.

117
0:10:11.000 --> 0:10:15.000
We can see that there are plenty of communities.

118
0:10:15.000 --> 0:10:21.000
As knowing this network and knowing this community, I can tell you that basically

119
0:10:28.000 --> 0:10:35.000
Here we got the open data, open columns community.

120
0:10:35.000 --> 0:10:41.000
Here we got uphill and basically the NGOs working on open source.

121
0:10:41.000 --> 0:10:47.000
Here we got Gil and mostly a lot of software.

122
0:10:47.000 --> 0:10:51.000
Fedor and all the Linux distributions.

123
0:10:51.000 --> 0:10:59.000
Here we got FFDA, my production, and all the activists working with all the open internet.

124
0:10:59.000 --> 0:11:04.000
And I guess here is more the...

125
0:11:04.000 --> 0:11:06.000
It's also a population.

126
0:11:06.000 --> 0:11:09.000
And all the other stuff.

127
0:11:09.000 --> 0:11:12.000
All those speaking to something?

128
0:11:12.000 --> 0:11:14.000
Yeah, I guess a little bit.

129
0:11:14.000 --> 0:11:19.000
Okay, so now that we got this, let's try to make it a little bit nicer.

130
0:11:19.000 --> 0:11:22.000
We can add, for instance, some column columns.

131
0:11:22.000 --> 0:11:25.000
So something more like a different.

132
0:11:25.000 --> 0:11:32.000
So I just propose to see a stronger column from all of the graphs.

133
0:11:32.000 --> 0:11:39.000
We can also try to do like a Gephi, like a curve, like edges.

134
0:11:39.000 --> 0:11:41.000
All of those are in options.

135
0:11:41.000 --> 0:11:45.000
I guess I'll show you a little bit later on a list of different options.

136
0:11:45.000 --> 0:11:49.000
Here we also put like a picture scene font.

137
0:11:49.000 --> 0:11:52.000
Basically you can do a lot of things.

138
0:11:52.000 --> 0:11:55.000
But all of that so far is mostly like Gephi.

139
0:11:55.000 --> 0:11:58.000
There's no real new thing.

140
0:11:58.000 --> 0:12:03.000
But here's something that we actually propose or something else.

141
0:12:03.000 --> 0:12:06.000
So right now we can see one graph.

142
0:12:06.000 --> 0:12:10.000
But let's try and see multiple ones.

143
0:12:10.000 --> 0:12:15.000
So I buy Sigma Proposis, what we call a Sigma Grid.

144
0:12:15.000 --> 0:12:18.000
And so I will put the same graph, but it will trickle up.

145
0:12:18.000 --> 0:12:24.000
And those will be common options that I set for all version of the graph.

146
0:12:24.000 --> 0:12:27.000
But then within the grid I will add three different version of the graph.

147
0:12:27.000 --> 0:12:31.000
Using different metrics for the size of the node.

148
0:12:31.000 --> 0:12:46.000
So the one on the left one, and we see the ending grid in the middle of the grid, and the right one on the left.

149
0:12:46.000 --> 0:12:53.000
So here are the three graphs which are all synchronized.

150
0:12:53.000 --> 0:12:55.000
It happens at the same time.

151
0:12:55.000 --> 0:13:00.000
If I over a node I will see it on the three different versions.

152
0:13:00.000 --> 0:13:06.000
And then if I zoom a little bit, I guess we can see that...

153
0:13:06.000 --> 0:13:10.000
Well, what can we see?

154
0:13:10.000 --> 0:12:57.120
We can see that

155
0:13:12.000 --> 0:13:18.000
Froma Soft, for instance, is very connected most globally.

156
0:13:18.000 --> 0:13:24.000
But especially it has a very strong in degree and not so big out degree.

157
0:13:24.000 --> 0:13:32.000
Why is that? Because Froma Soft is such a reference in France for open source tools.

158
0:13:32.000 --> 0:13:34.000
It gets a lot of links from the whole community.

159
0:13:34.000 --> 0:13:40.000
And all websites of the Free Software community point to it because it's like a resource.

160
0:13:40.000 --> 0:13:47.000
Whereas, of course, they cannot point to the whole rest of the community.

161
0:13:47.000 --> 0:13:51.000
On another note, I guess we could find...

162
0:13:51.000 --> 0:13:56.000
I think there was Linux.org, the opposite.

163
0:13:56.000 --> 0:14:03.000
It's a media that pretty much talks about anything that happens on open source in France.

164
0:14:03.000 --> 0:14:07.000
And of course, they are the ones having the most outlinks.

165
0:14:07.000 --> 0:14:10.000
All right, so that's just a small example.

166
0:14:10.000 --> 0:14:16.000
Then I can show you maybe another notebook that will show other things.

167
0:14:16.000 --> 0:14:22.000
So this one is a notebook that was built out of data collected by Laura Miguel,

168
0:14:22.000 --> 0:14:24.000
which is a trainee at Media Lab right now.

169
0:14:24.000 --> 0:14:35.000
And she scraped the first-name website, the agendas, to try and get all speakers and rooms over the past 15 years.

170
0:14:35.000 --> 0:14:40.000
So here we will have to build the graph progressively.

171
0:14:40.000 --> 0:14:46.000
We just had a CSV that she scrapes of the data of one speaker and one roomer.

172
0:14:46.000 --> 0:14:49.000
Disclaimer, those speakers have been anonymized.

173
0:14:49.000 --> 0:14:50.000
I mean, pseudonymized.

174
0:14:50.000 --> 0:14:58.000
So you won't find a name that you know about, but they represent actual people.

175
0:14:58.000 --> 0:15:02.000
So let's take a look at, for instance, three examples of the data.

176
0:15:02.000 --> 0:15:04.000
So those are the three first lines.

177
0:15:04.000 --> 0:15:08.000
I mean, that's one line and two other lines that I picked specifically.

178
0:15:08.000 --> 0:15:13.000
This one is one speaker, and she talked about within this track.

179
0:15:13.000 --> 0:15:17.000
Here it was a talk that was shared between two speakers.

180
0:15:17.000 --> 0:15:20.000
So sometimes we get speakers separated by a pipe.

181
0:15:20.000 --> 0:15:30.000
And here is obviously someone that was pseudonymized, but that should be in my seat right now.

182
0:15:30.000 --> 0:15:35.000
And we did many talks in the past, including in this room.

183
0:15:35.000 --> 0:15:38.000
So we will build the graph using networkX.

184
0:15:38.000 --> 0:15:41.000
So for those unknown networkX, it's quite simple.

185
0:15:41.000 --> 0:15:43.000
You just create a new graph.

186
0:15:43.000 --> 0:15:49.000
And then for each row in our CSV, we will, if there's no speaker, we don't take it.

187
0:15:49.000 --> 0:15:54.000
Then we take the track and the year we add a node for each track.

188
0:15:54.000 --> 0:15:59.000
And for each speaker inside the talk, we add a node for the speaker.

189
0:15:59.000 --> 0:16:10.000
And then we had an edge in between those two, and we increment it as a count if it's the second time that we meet him, for instance.

190
0:16:10.000 --> 0:16:18.000
And we also upgrade the year to get, for the edge, the last year that was used.

191
0:16:18.000 --> 0:16:25.000
So by doing that, I built a new graph that has 5,000 nodes and 6,000 links.

192
0:16:25.000 --> 0:16:31.000
Let's take a look at my alternate speaker here.

193
0:16:31.000 --> 0:16:41.000
He was supposed to be a speaker, and apparently he is linked to, in year 2018, to two talks in the graph room.

194
0:16:41.000 --> 0:16:46.000
Yeah, he spoke twice in the room back then.

195
0:16:46.000 --> 0:16:53.000
In JavaScript in 2019 and in 2020 in the open research tools and technology room.

196
0:16:53.000 --> 0:16:56.000
So let's take a look at this graph now.

197
0:16:56.000 --> 0:16:59.000
Yes, there's a comma missing here.

198
0:16:59.000 --> 0:17:01.000
Here it is. No, still.

199
0:17:01.000 --> 0:17:08.000
Yeah, I tried to add this earlier, but I'm not expert enough with it, so I'll remove this.

200
0:17:08.000 --> 0:17:10.000
So here it is.

201
0:17:10.000 --> 0:17:16.000
So this time it's a bipartite graph since we got two kinds of nodes, the tracks and the speakers.

202
0:17:16.000 --> 0:17:23.000
So I decided that the node color will be attached to the part type.

203
0:17:23.000 --> 0:17:34.000
And if I take a look at it, we should see all big dots in blue are the rooms for them, and all pink ones are actually speakers.

204
0:17:34.000 --> 0:17:39.000
And so we can see that there are a lot of lightning talks, of course, every year.

205
0:17:39.000 --> 0:17:48.000
But there are some rooms that have way more speakers, talks than others, probably also because they exist for way longer.

206
0:17:48.000 --> 0:17:50.000
So maybe we can try and explore that.

207
0:17:50.000 --> 0:17:53.000
And that's the main idea.

208
0:17:53.000 --> 0:17:57.000
So, sorry, I don't remember what this one is.

209
0:17:57.000 --> 0:18:00.000
Let's just run it briefly.

210
0:18:00.000 --> 0:18:04.000
I guess it's the same.

211
0:18:04.000 --> 0:18:05.000
Yeah, it's the same. Sorry.

212
0:18:05.000 --> 0:18:06.000
So copy paste.

213
0:18:06.000 --> 0:18:11.000
So what we could do is try and apply other things.

214
0:18:11.000 --> 0:18:13.000
So let's do a grid again.

215
0:18:13.000 --> 0:18:21.000
But this time we'll try and display for each node a gradient of color that will indicate the intensity of the node at this moment.

216
0:18:21.000 --> 0:18:32.000
So to do that, we will, like, for instance, take a look at the year 2012 and the year 2022 and use the strengths of the ALO,

217
0:18:32.000 --> 0:18:37.000
depending on how many talks were associated to this node for this specific year.

218
0:18:37.000 --> 0:18:45.000
So both graphs should show the intensity of the talks during those two years.

219
0:18:45.000 --> 0:18:52.000
So let's show it again.

220
0:18:52.000 --> 0:19:01.000
And here we can see that in 2012, the main rooms that were filled were actually more on desktops, modular lightning talks and embedded.

221
0:19:01.000 --> 0:19:09.000
Whereas in 2022, there are way more rooms that are actually filled and spoken.

222
0:19:09.000 --> 0:19:14.000
Then what we could do is continue working on our graph and continue exploring while working with it.

223
0:19:14.000 --> 0:19:21.000
So at Media Lab, we also have a tool called Polot, which allows us to do a bunch of metrics and calculation on a.

224
0:19:21.000 --> 0:19:23.000
So it's already installed, it's doing faster.

225
0:19:23.000 --> 0:19:28.000
And for instance, it can do a monopartite projection out of a bipartite graph.

226
0:19:28.000 --> 0:19:33.000
So I'm just running this and then we can try and display it.

227
0:19:33.000 --> 0:19:43.000
And here, just in a few lines in Python, I can just see the alternate graph that is the monopartite version of the graph

228
0:19:43.000 --> 0:19:51.000
and just see the links between the rooms depending on when they are co-spoken by speakers.

229
0:19:51.000 --> 0:19:53.000
Let's continue.

230
0:19:53.000 --> 0:19:59.000
And the problem is that if I look at this graph, I can see there are a bunch of nodes isolated.

231
0:19:59.000 --> 0:20:07.000
And so usually when I want to visualize a graph, those are a bit annoying because they take a lot of space in the visualization.

232
0:20:07.000 --> 0:20:08.000
I don't want to see that.

233
0:20:08.000 --> 0:20:19.000
So let's just use Polot's crop to largest component function that will remove all, will keep only the biggest component of the graph.

234
0:20:19.000 --> 0:20:30.000
So then I can display this graph but without all of those single nodes.

235
0:20:30.000 --> 0:20:34.000
And that's a rough idea of what could be done.

236
0:20:34.000 --> 0:20:39.000
Then we can work with the graph and just visualize on the fly.

237
0:20:39.000 --> 0:20:46.000
And I guess I'll conclude by just showing inside the GitHub page of the tool,

238
0:20:46.000 --> 0:20:50.000
there is all the visual variables that are available.

239
0:20:50.000 --> 0:20:56.000
So I showed you already node color, but you can also play on the saturation of the nodes.

240
0:20:56.000 --> 0:21:04.000
You can play on the size we saw, but you can play with the label size, of course, the label color.

241
0:21:04.000 --> 0:21:10.000
You can adjust the border ratio, how big it is.

242
0:21:10.000 --> 0:21:23.000
So basically all visual ways to better help you interpret your graph can be proposed.

243
0:21:23.000 --> 0:21:30.000
You can also add pictograms, use shapes for each node.

244
0:21:30.000 --> 0:21:35.000
You can use halos, like I showed earlier.

245
0:21:35.000 --> 0:21:40.000
And play most also, a lot of those apply to edges.

246
0:21:40.000 --> 0:21:46.000
So you can play on the edges of colors, the form of them, and so on and so on.

247
0:21:46.000 --> 0:21:50.000
And I guess that will be it for me.

248
0:21:50.000 --> 0:22:07.000
And I will take all of your questions.

249
0:22:07.000 --> 0:22:12.000
Sorry, I'm just scrolling back to things that are nicer.

250
0:22:12.000 --> 0:22:14.000
Also a few. Yes.

251
0:22:14.000 --> 0:22:23.000
Can you preserve the layout between the different steps?

252
0:22:23.000 --> 0:22:24.000
That's a good question.

253
0:22:24.000 --> 0:22:29.000
I don't think it has been planned yet.

254
0:22:29.000 --> 0:22:30.000
Yes, sorry.

255
0:22:30.000 --> 0:22:35.000
So the question was, can we maintain the layout from one cell to the other

256
0:22:35.000 --> 0:22:40.000
and not having to re-click to apply the layout every time?

257
0:22:40.000 --> 0:22:42.000
I don't think so.

258
0:22:42.000 --> 0:22:51.000
And what I know is that the layout, the way Forza class works, has some chaos.

259
0:22:51.000 --> 0:22:55.000
But here it's always instantiated on the same scene.

260
0:22:55.000 --> 0:23:00.000
So whenever you run it, it will always generate the same exact layout.

261
0:23:00.000 --> 0:23:02.000
So that's something.

262
0:23:02.000 --> 0:23:06.000
But it won't reuse the one from the previous cells.

263
0:23:06.000 --> 0:23:08.000
That could be something that could be added here.

264
0:23:08.000 --> 0:23:09.000
Yes.

265
0:23:09.000 --> 0:23:12.000
And do you have any numbers on the upper limits of this system?

266
0:23:12.000 --> 0:23:15.000
And the size of the graph, if you can imagine?

267
0:23:15.000 --> 0:23:20.000
Okay, you're in the values of noting this one or the limit.

268
0:23:20.000 --> 0:23:28.000
So the question is about volume and amplitude and how big of a graph we can display with this.

269
0:23:28.000 --> 0:23:32.000
So I believe the limit is actually the one of your browser.

270
0:23:32.000 --> 0:23:38.000
So it will depend on your GPU and your CPU and your RAM.

271
0:23:38.000 --> 0:23:46.000
But I know that SigmaJS properly endoles graphs with, I would say,

272
0:23:46.000 --> 0:23:52.000
hundreds of thousands of nodes and links, I guess.

273
0:23:52.000 --> 0:23:57.000
I know I already displayed one with a few million links and hundreds of thousands of nodes.

274
0:23:57.000 --> 0:24:03.000
It takes a bit more time, of course.

275
0:24:03.000 --> 0:24:08.000
Do you support something like collapsing nodes and expanding them?

276
0:24:08.000 --> 0:24:11.000
So for instance, in these kind of network graphs where you have communities, they could collapse it.

277
0:24:11.000 --> 0:24:13.000
What type of ones?

278
0:24:13.000 --> 0:24:16.000
I mean, they could be selectively expanded as well.

279
0:24:16.000 --> 0:24:26.000
So the question is, can we aggregate and exploit nodes that have, for instance, the same group?

280
0:24:26.000 --> 0:24:32.000
To me, it would be, I don't think it's built-in within SigmaJS for sure.

281
0:24:32.000 --> 0:24:38.000
But maybe in Palette, the library we're showing, the monopartite projection is pretty much this kind of ID.

282
0:24:38.000 --> 0:24:47.000
I don't know. But it might be in Palette.

283
0:24:47.000 --> 0:24:49.000
Yep?

284
0:24:49.000 --> 0:24:51.000
You might find that in the GPU.

285
0:24:51.000 --> 0:24:53.000
Is it using the GPU for...

286
0:24:53.000 --> 0:24:56.000
Yeah, SigmaJS. Sorry.

287
0:24:56.000 --> 0:25:03.000
The question is, does this use the GPU to display the graph? Yes.

288
0:25:03.000 --> 0:25:07.000
SigmaJS is heavily relying on the WebGL.

289
0:25:07.000 --> 0:25:13.000
The previous version of SigmaJS was proposing to choose between Canvas and WebGL.

290
0:25:13.000 --> 0:25:15.000
Right now, it's only WebGL.

291
0:25:15.000 --> 0:25:18.000
So it won't work with all browsers.

292
0:25:18.000 --> 0:25:24.000
But nowadays, most browsers know to work with the GPU.

293
0:25:24.000 --> 0:25:27.000
So, yes.

294
0:25:27.000 --> 0:25:29.000
Thank you so much.

295
0:25:29.000 --> 0:25:58.000
Thank you.


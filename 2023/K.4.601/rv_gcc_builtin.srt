1
0:00:00.000 --> 0:00:13.420
Hello Fozdam. I am Nandini Jamsenas. I am a software toolchain engineer at Embarkazu.

2
0:00:13.420 --> 0:00:23.240
I lead the Core5 GNU toolchain project. I am also a UK electronic scholar from UKESF.

3
0:00:23.240 --> 0:00:34.240
UKESF encourages young electronic students to study electronics and pursue a career in the sector.

4
0:00:34.240 --> 0:00:45.240
UKESF also connects top UK universities with leading employees.

5
0:00:45.240 --> 0:01:01.240
In this talk, I will be giving you a tutorial on how to add a GCC built-in to the RISC-V compiler.

6
0:01:01.240 --> 0:01:08.240
Okay, so what is a built-in? Well, in C++ and C, there are two types of functions.

7
0:01:08.240 --> 0:01:12.240
You've got your user-defined functions and your built-in functions.

8
0:01:12.240 --> 0:01:21.240
User-defined functions are functions that the programmer has defined within their code so they can use it.

9
0:01:21.240 --> 0:01:26.240
But a built-in function are functions that are already implemented in the compiler.

10
0:01:26.240 --> 0:01:35.240
So the programmer doesn't need to write specific code for it and can directly use these built-ins.

11
0:01:35.240 --> 0:01:46.240
Many low-level architectures in GCC use built-ins. Built-ins look superficially like any C function,

12
0:01:46.240 --> 0:01:52.240
but there are intrinsics to the compiler which are directly implemented within.

13
0:01:52.240 --> 0:02:00.240
These built-ins have specific patterns to be matched in the machine description file

14
0:02:00.240 --> 0:02:05.240
and have access to unique individual machine functionalities.

15
0:02:05.240 --> 0:02:15.240
Because they are integrated within GCC, they are more efficient than using just simple inline assembly.

16
0:02:15.240 --> 0:02:27.240
For RISC-V, this presents an excellent opportunity to expose the ISA extension to C and C++ programmers.

17
0:02:27.240 --> 0:02:35.240
This is an example of a simple built-in in GCC which takes the square root of a flow.

18
0:02:35.240 --> 0:02:45.240
There are tons and tons of GCC built-ins, but I don't know if you know, but there's probably like two in RISC-V.

19
0:02:45.240 --> 0:02:49.240
This is why I'm giving you a tutorial about it so we can add more.

20
0:02:49.240 --> 0:02:55.240
It is important to say that yes, we call it a built-in function, but it's not really a function.

21
0:02:55.240 --> 0:03:06.240
There are any corresponding entry or exit points and a just cannot be obtained.

22
0:03:06.240 --> 0:03:11.240
Here is the square root flow built-in that is implemented in GCC.

23
0:03:11.240 --> 0:03:18.240
You can find it in GCCbuiltins.dev. All of the source code will be linked at the end, so don't worry.

24
0:03:18.240 --> 0:03:30.240
I will give that to you. If you want to make a specific RISC-V built-in, then you would go into the link below or the path at the below,

25
0:03:30.240 --> 0:03:37.240
which will be in RISC-V built-ins.cc.

26
0:03:37.240 --> 0:03:43.240
Yes, I'm talking a lot about built-ins. We could simply just use inline assembly.

27
0:03:43.240 --> 0:03:48.240
But this is why we shouldn't be using inline assembly.

28
0:03:48.240 --> 0:03:57.240
If you want to use inline assembly, you have to annoyingly specify the pattern every single time you use inline assembly.

29
0:03:57.240 --> 0:04:07.240
Sometimes you can get it wrong. GCC does not know about this built-in, so there's a huge risk of data flow information being lost.

30
0:04:07.240 --> 0:04:16.240
Again, GCC does not know about this instruction that you're using with inline assembly, so optimization cannot be used.

31
0:04:16.240 --> 0:04:25.240
The reason we use built-in functions, well, all of your data flow information will be retained.

32
0:04:25.240 --> 0:04:28.240
Patterns can be recognized and used elsewhere by GCC.

33
0:04:28.240 --> 0:04:33.240
You only need to specify the pattern once, and that will be in the machine description file.

34
0:04:33.240 --> 0:04:40.240
And then voila, you just need to use your built-ins, put in the arguments, and the program will be fine.

35
0:04:40.240 --> 0:04:46.240
And again, with built-in functions, they're implemented directly in the compiler.

36
0:04:46.240 --> 0:04:51.240
So GCC will know about it and can use the optimization flags.

37
0:04:51.240 --> 0:04:54.240
What do I talk about when I say optimization?

38
0:04:54.240 --> 0:04:58.240
Well, GCC has a bunch of optimization flags.

39
0:04:58.240 --> 0:05:02.240
Here are two that I'm currently using as an example.

40
0:05:02.240 --> 0:05:07.240
The first one is with the flag minus zero.

41
0:05:07.240 --> 0:05:10.240
I don't think that is. That's the basic level of optimization.

42
0:05:10.240 --> 0:05:13.240
In fact, I don't think that's any optimization at all.

43
0:05:13.240 --> 0:05:20.240
This is just hardcore assembly, which you will use for CV.EL, which I'll explain later.

44
0:05:20.240 --> 0:05:29.240
And when you use an optimization flag, minus zero two, that will increase performance, reduce compilation time.

45
0:05:29.240 --> 0:05:36.240
GCC optimizes those assembly instructions because it knows that it doesn't need to be used.

46
0:05:36.240 --> 0:05:40.240
You might have noticed that I'm using CV.ELW.

47
0:05:40.240 --> 0:05:43.240
Probably wondering what the hell that is.

48
0:05:43.240 --> 0:05:53.240
Well, CV.ELW is part of CV3 to E4EP ISO extensions, also Core 5 ISO extensions.

49
0:05:53.240 --> 0:05:58.240
The CV.ELW is part of Event Load extension.

50
0:05:58.240 --> 0:06:05.240
We are currently implementing version two of this in Open Hardware's Core 5 GCC and Binutils.

51
0:06:05.240 --> 0:06:13.240
The first set of extensions, the first set of versioning has the first five extensions.

52
0:06:13.240 --> 0:06:18.240
And then version two has Event Load, SIMD, and bit manipulation.

53
0:06:18.240 --> 0:06:27.240
I would like to emphasize that all of these extensions and instructions are in Binutils, the assembly, and the linker.

54
0:06:27.240 --> 0:06:34.240
But it's time to add built-ins in GCC.

55
0:06:34.240 --> 0:06:37.240
I am going to be using Event Load for this tutorial.

56
0:06:37.240 --> 0:06:45.240
This is because, well, Event Load only has one instruction, so it's a very beginner-friendly task.

57
0:06:45.240 --> 0:06:59.240
That instruction is CV.ELW, which will load a word and cause the CV32E4EP processacle to go into sleep state.

58
0:06:59.240 --> 0:07:07.240
This is an instruction that GCC will not know about because it's very machine-specific.

59
0:07:07.240 --> 0:07:12.240
Thus, we need a built-in.

60
0:07:12.240 --> 0:07:19.240
Before we get into all of this, it is very important to call out the naming conventions of these built-ins.

61
0:07:19.240 --> 0:07:27.240
A general convention name for a built-in in GCC will just be built-in and then the instruction name.

62
0:07:27.240 --> 0:07:34.240
But if you want to make it a RISC-V specific built-in, it will be built-in RISC-V with the vendor and the name.

63
0:07:34.240 --> 0:07:43.240
For a core-5 specific one, it will be built-in, RISC-V, CV for core-5, the extension name, and then the instruction name.

64
0:07:43.240 --> 0:07:52.240
Yes, I understand it's a bit long-winded, but it is very important to emphasize which vendor, which architecture you want to use,

65
0:07:52.240 --> 0:07:54.240
what extension, what instruction.

66
0:07:54.240 --> 0:08:00.240
It just makes it a lot easier for the programmers to know which instructions they want to use.

67
0:08:00.240 --> 0:08:11.240
For my built-in, and if you want to use it, it will be called underscore underscore built-in, underscore RISC-V, underscore CV, underscore ALW, underscore ALW.

68
0:08:11.240 --> 0:08:21.240
Because there's only one instruction, I just call it the same thing.

69
0:08:21.240 --> 0:08:25.240
This is an example of how to use this built-in.

70
0:08:25.240 --> 0:08:34.240
This built-in will take a void pointer, it will be loading it from a specific memory address,

71
0:08:34.240 --> 0:08:46.240
and then loading it into a general purpose register, which is an unsigned 82-bit integer.

72
0:08:46.240 --> 0:08:58.240
From this example, yes, the only thing you'll have to do is just put in the pointer and it will return your unsigned integer value.

73
0:08:58.240 --> 0:09:01.240
Can you speak a little louder, please?

74
0:09:01.240 --> 0:09:04.240
Speak a little louder.

75
0:09:04.240 --> 0:09:08.240
Oh, okay, sorry.

76
0:09:08.240 --> 0:09:18.240
Now that I've spoken about what event load is, it's time to add an extension to GCC.

77
0:09:18.240 --> 0:09:40.240
Most of these implementation for adding an extension will be in RISC-V.com and.cc. We've called our extension XCV, which will be the main extension,

78
0:09:40.240 --> 0:09:50.240
and then it will have eight sub-extensions, which will be XCV, ALW. There isn't any ISO-specific class, so I've just used a macro none,

79
0:09:50.240 --> 0:09:57.240
and this will be the first version of it.

80
0:09:57.240 --> 0:10:12.240
Because I am implementing a sub-extension, we'll have to imply it here by putting the sub-extension first and then the main or parent extension.

81
0:10:12.240 --> 0:10:17.240
Next, we add the corresponding masks and targets.

82
0:10:17.240 --> 0:10:30.240
Before we do all of this, we need to go into RISC-V.opt to emphasize or add the target variable and the corresponding core five flags.

83
0:10:30.240 --> 0:10:40.240
This file is very sensitive, and so you'll have to, even though it's two lines, if you mess it up, then you've got GCC crashing everywhere.

84
0:10:40.240 --> 0:10:58.240
You have to be very careful in this file, and then you use that flag for your corresponding target, but you also use it when you have to specify your GCC options.

85
0:10:58.240 --> 0:11:08.240
I've done that in RISC-V-comin.cc, which is here.

86
0:11:08.240 --> 0:11:16.240
Now, it gets into the interesting stuff to actually define the built-in.

87
0:11:16.240 --> 0:11:26.240
RISC-V has a function already made for us, so we can make these built-ins. That is in RISC-V-built-ins.cc.

88
0:11:26.240 --> 0:11:32.240
It takes in five arguments, and I'll be going through all of these in the following slides.

89
0:11:32.240 --> 0:11:46.240
That will be the instruction name, the built-in name, built-in type, function type, and the availability predicate.

90
0:11:46.240 --> 0:11:54.240
Using this function, I have created my own file, which is called corev.dev.

91
0:11:54.240 --> 0:11:59.240
This is where all the corev-related built-ins will be in.

92
0:11:59.240 --> 0:12:11.240
My first built-in will be in corev.dev, and the name of the instruction name will be CVELSI for single integer.

93
0:12:11.240 --> 0:12:21.240
The name of the built-in that the programmers will be using will be CVELEWEW, but that will be expanded to built-in RISC-V.

94
0:12:21.240 --> 0:12:32.240
Then you've got the corresponding built-in types, function types, availability predicates, and I'll go into that more.

95
0:12:32.240 --> 0:12:41.240
The instruction patterns. This is probably the most difficult part of the whole built-in implementation.

96
0:12:41.240 --> 0:12:47.240
The insert name is the name of the associated instruction pattern in the machine description file.

97
0:12:47.240 --> 0:12:56.240
It takes in five operands, but the last operand is optional, but I recommend you putting it in if you can.

98
0:12:56.240 --> 0:13:05.240
You've got the name, you've got the RTL template, conditions, output template, and instant attributes.

99
0:13:05.240 --> 0:13:19.240
That will be all in RISC-V.md, but I will be creating my own MD for corev-specific, so we don't merge it into RISC-V.md.

100
0:13:19.240 --> 0:13:25.240
This is an example of RTL templates or register transfer language.

101
0:13:25.240 --> 0:13:42.240
It's a template that's very, very similar to intermediate representation that GCC uses. It's a template that GCC will take and then put in the corresponding registers or operands that it needs to do.

102
0:13:42.240 --> 0:13:48.240
This is my instruction pattern that I will be using for this built-in.

103
0:13:48.240 --> 0:14:01.240
The name will be RISC-V.md.md as we've previously defined it.

104
0:14:01.240 --> 0:14:10.240
I am using the set pattern, and this will take a destination register and a source register.

105
0:14:10.240 --> 0:14:18.240
This will be the destination register, the first operand.

106
0:14:18.240 --> 0:14:33.240
I've used the match operand pattern, which will take M as machine mode and the index of this operand, the predictor, and the constraint.

107
0:14:33.240 --> 0:14:43.240
The machine mode for this will be SI, which is a single integer. It's 32 bits. It's zero for the index of this operand.

108
0:14:43.240 --> 0:14:48.240
We usually start with zero for indexing.

109
0:14:48.240 --> 0:14:56.240
The predicate for this will be a register operand as we'll be loading it into a general-purpose register.

110
0:14:56.240 --> 0:15:08.240
The constraint will be equal to R, emphasizing as register equals to meaning it's going to be written to.

111
0:15:08.240 --> 0:15:20.240
The next part of this is the source register, which will be the memory-specific address.

112
0:15:20.240 --> 0:15:29.240
We're using MIM to specify the size of the object being referenced, SI being single integer, 32 bits.

113
0:15:29.240 --> 0:15:41.240
Again, we're using match operand to match the register or the pointer to the specific address.

114
0:15:41.240 --> 0:15:48.240
The index number will be one because that's the next number.

115
0:15:48.240 --> 0:15:59.240
I am using an address operand and then P specifying as pointer.

116
0:15:59.240 --> 0:16:07.240
I am using an unspecced volatile for this instruction because it's a volatile operation. It's very machine-specific.

117
0:16:07.240 --> 0:16:12.240
It can get difficult and there are times where it could be trapped.

118
0:16:12.240 --> 0:16:20.240
We are, I guess, referencing in a state that is fragile and vulnerable.

119
0:16:20.240 --> 0:16:28.240
That is why I've been using an unspecced volatile.

120
0:16:28.240 --> 0:16:37.240
Now that I've talked about the RTL pattern, we talk about the condition.

121
0:16:37.240 --> 0:16:45.240
The condition is important to add so that the instruction can only be generated within these conditions.

122
0:16:45.240 --> 0:17:02.240
You can only generate this pattern if the target is to x-core VELW and that it's not a 64-bit target.

123
0:17:02.240 --> 0:17:07.240
Next, we talk about the orange bit, which is the output template.

124
0:17:07.240 --> 0:17:13.240
The output template will be what you will see in the assembly.

125
0:17:13.240 --> 0:17:20.240
You define it with the instruction name, so C, V, dot, EL, and then slash T for tab.

126
0:17:20.240 --> 0:17:26.240
This is where you use those index numbers to reference which operands you want to use.

127
0:17:26.240 --> 0:17:32.240
I'll be referencing a percent zero and then percent A1.

128
0:17:32.240 --> 0:17:39.240
Percent zero will be the destination register and percent one will be the source register.

129
0:17:39.240 --> 0:17:50.240
I am using percent A to substitute as a memory reference.

130
0:17:50.240 --> 0:17:59.240
Lastly, we talk about the optional operand, but again, this is something we should try to put in if you're going to add a built-in.

131
0:17:59.240 --> 0:18:09.240
We want to tell GCC that this is a load type of instruction and the mode is SI throughout the whole built-in.

132
0:18:09.240 --> 0:18:15.240
The reason I've added this optional operand, I mean, the instructions still can be generated,

133
0:18:15.240 --> 0:18:28.240
but GCC can now optimize it knowing that it's a load, knowing that it's in machine mode SI.

134
0:18:28.240 --> 0:18:31.240
That is now the big part of the built-in.

135
0:18:31.240 --> 0:18:36.240
We've discussed the instant name and the template name.

136
0:18:36.240 --> 0:18:39.240
Now it comes to the built-in types.

137
0:18:39.240 --> 0:18:46.240
In RISC-V, there are currently only two types of built-in types.

138
0:18:46.240 --> 0:18:52.240
Those built-in types can be found in RISC-V-builtins.cc.

139
0:18:52.240 --> 0:18:58.240
This is RISC-V-built-in direct and RISC-V-built-in direct no target.

140
0:18:58.240 --> 0:19:05.240
RISC-V-built-in direct corresponds directly to a machine pattern we've just created,

141
0:19:05.240 --> 0:19:11.240
whereas RISC-V-built-in direct no target does the same thing, but the return type will be void.

142
0:19:11.240 --> 0:19:17.240
But we are returning a general register operand or a 32-bit unsigned integer.

143
0:19:17.240 --> 0:19:25.240
We'll be using RISC-V-built-in direct.

144
0:19:25.240 --> 0:19:29.240
Next comes the function types.

145
0:19:29.240 --> 0:19:35.240
Again, everything is in RISC-V-builtins.cc.

146
0:19:35.240 --> 0:19:40.240
Currently, there are only two types of prototypes for RISC-V.

147
0:19:40.240 --> 0:19:44.240
You can only return.

148
0:19:44.240 --> 0:19:46.240
You can only have a returning type.

149
0:19:46.240 --> 0:19:50.240
You can only have a return type and one argument.

150
0:19:50.240 --> 0:19:57.240
But in coming presentations, I'll be talking about it a bit more,

151
0:19:57.240 --> 0:20:05.240
because I only have 45 minutes to talk about this presentation.

152
0:20:05.240 --> 0:20:12.240
When it comes to defining which return types and argument types we're using,

153
0:20:12.240 --> 0:20:18.240
that will be in RISC-V-F-types.dev.

154
0:20:18.240 --> 0:20:26.240
The comment says that it will expand to RISC-V-underscore unsigned integer

155
0:20:26.240 --> 0:20:36.240
and then a void pointer, because that's what I'll be using for my built-in type.

156
0:20:36.240 --> 0:20:39.240
Lastly, we have the availability predicate.

157
0:20:39.240 --> 0:20:45.240
This is very similar to the conditions we had in the RTL template.

158
0:20:45.240 --> 0:20:52.240
So we use this avail function that has been declared in RISC-V-builtins.cc.

159
0:20:52.240 --> 0:20:57.240
It takes the name of your availability predicate and then the corresponding conditions.

160
0:20:57.240 --> 0:21:02.240
As you can see, it's very similar to the condition we had in the RTL template,

161
0:21:02.240 --> 0:21:13.240
which is a target reference and then it's not a 64-bit target.

162
0:21:13.240 --> 0:21:19.240
Now that we've added the extension and the instruction and the built-in,

163
0:21:19.240 --> 0:21:21.240
it's time to test it.

164
0:21:21.240 --> 0:21:26.240
This is a very simple test just to make sure that it works.

165
0:21:26.240 --> 0:21:29.240
It's a compilation test.

166
0:21:29.240 --> 0:21:31.240
It takes in a void pointer with an offset.

167
0:21:31.240 --> 0:21:35.240
It returns an unsigned 32-bit value.

168
0:21:35.240 --> 0:21:38.240
You can see there are comments on the side.

169
0:21:38.240 --> 0:21:40.240
These are day-jog-new comments.

170
0:21:40.240 --> 0:21:45.240
We are using day-jog-new because we want to use a simulator

171
0:21:45.240 --> 0:21:49.240
or it can be used on microcontrollers.

172
0:21:49.240 --> 0:21:56.240
It's a framework testing model that we use for our test scripts.

173
0:21:56.240 --> 0:22:04.240
The first comment we'll talk about telling it it can be an execution or a compilation test.

174
0:22:04.240 --> 0:22:09.240
This will be a compilation test because we haven't got an executable target yet.

175
0:22:09.240 --> 0:22:13.240
The second line is to tell you the options for this built-in.

176
0:22:13.240 --> 0:22:18.240
If you don't specify the options, then this test won't run because

177
0:22:18.240 --> 0:22:24.240
this instruction only works within x-core-verw.

178
0:22:24.240 --> 0:22:31.240
Then the last line or the last comment will be for checking

179
0:22:31.240 --> 0:22:38.240
if our instruction has been generated in the assembly.

180
0:22:38.240 --> 0:22:40.240
It should be generated once.

181
0:22:40.240 --> 0:22:42.240
There are dashes to escape.

182
0:22:42.240 --> 0:22:58.240
It's very sensitive because it's a regular expression type of framework.

183
0:22:58.240 --> 0:23:01.240
We've got a run script for this.

184
0:23:01.240 --> 0:23:08.240
It's very important to build GCC because I've been running tests without building GCC

185
0:23:08.240 --> 0:23:13.240
and wondering why it doesn't work and it wasn't until our GCC experts told us,

186
0:23:13.240 --> 0:23:14.240
no, you've got to run build.

187
0:23:14.240 --> 0:23:23.240
You have to run GCC and then run it.

188
0:23:23.240 --> 0:23:34.240
This shows the results from our run test scripts.

189
0:23:34.240 --> 0:23:38.240
Although it's just one test, there are 18 passes.

190
0:23:38.240 --> 0:23:42.240
That is because it goes through nine optimization levels.

191
0:23:42.240 --> 0:23:56.240
Each optimization level goes through a scan assembly test and then a compilation test.

192
0:23:56.240 --> 0:24:03.240
Like I promised, I put up the slides for where all of this will be found.

193
0:24:03.240 --> 0:24:10.240
This will be found in GitHub's Open Hardware Core 5 bin utils and Core 5 GCC.

194
0:24:10.240 --> 0:24:13.240
This is also part of the Open Hardware group.

195
0:24:13.240 --> 0:24:21.240
We are still looking for volunteers and people to contribute to this project.

196
0:24:21.240 --> 0:24:26.240
It's very important to also mention the GCC internals manual.

197
0:24:26.240 --> 0:24:29.240
It's probably the guru of GCC.

198
0:24:29.240 --> 0:24:35.240
That's why I rely on the most now.

199
0:24:35.240 --> 0:24:37.240
Thank you for listening to my presentation.

200
0:24:37.240 --> 0:24:49.240
Do you have any questions?

201
0:24:49.240 --> 0:24:50.240
Yes.

202
0:24:50.240 --> 0:25:00.240
I have a question.

203
0:25:00.240 --> 0:25:08.240
I think they use it for various mathematical functions.

204
0:25:08.240 --> 0:25:19.240
I was just wondering, what I'm working on is using higher level compilers to compile into automatically generated kernels.

205
0:25:19.240 --> 0:25:26.240
What's not clear to me right now is that if I use a built-in, I would need to compile to C code.

206
0:25:26.240 --> 0:25:35.240
Is there any way that you can still reuse part of this work without having to use C code or would you always need to go to C code?

207
0:25:35.240 --> 0:25:39.240
For now, I've just been using C code, so I'm not really sure.

208
0:25:39.240 --> 0:25:49.240
If you've got a fork and fork, then there's the C API, so you can use it.

209
0:25:49.240 --> 0:25:55.240
This is in the compiler, so you can find your own.

210
0:25:55.240 --> 0:25:59.240
In this case, you would also use these methods in fork and fork.

211
0:25:59.240 --> 0:26:00.240
You could.

212
0:26:00.240 --> 0:26:20.240
I was a bit confused more about the built-in concept in general.

213
0:26:20.240 --> 0:26:30.240
I mean, usually people use C code to not be machine specific, but if you use it like a built-in, then you become machine specific.

214
0:26:30.240 --> 0:26:31.240
Yeah.

215
0:26:31.240 --> 0:26:34.240
Depends on the built-in.

216
0:26:34.240 --> 0:26:38.240
The GCC has built-ins that are sort of general.

217
0:26:38.240 --> 0:26:44.240
All the math functions, for example, are topology of math.

218
0:26:44.240 --> 0:26:46.240
It's not machine specific.

219
0:26:46.240 --> 0:26:50.240
In a sense, obviously, it will be a compiler specific.

220
0:26:50.240 --> 0:26:58.240
Standard specific in this case, but you can have other kind of mathematics.

221
0:26:58.240 --> 0:27:01.240
Okay, at least architecture specific.

222
0:27:01.240 --> 0:27:04.240
Well, actually, it's not architecture specific.

223
0:27:04.240 --> 0:27:06.240
It's a general.

224
0:27:06.240 --> 0:27:14.240
Yeah, but even for mathematics, built-in functions, you always have all the different, not always, but mostly,

225
0:27:14.240 --> 0:27:17.240
you have kind of architecture specific.

226
0:27:17.240 --> 0:27:31.240
Well, there can be stuff like encoding of numbers or such like.

227
0:27:31.240 --> 0:27:37.240
Actually, that's one way to avoid architecture specifics.

228
0:27:37.240 --> 0:27:52.240
Rather than encoding a non-pattern into your code, just by using a constant or bit pattern and then sort of casting to a proper 14.5, you can use built-in non.

229
0:27:52.240 --> 0:28:06.240
It's a built-in function that produces the correct encoding of a non for your target.

230
0:28:06.240 --> 0:28:10.240
Okay, thank you for listening to my presentation.

231
0:28:10.240 --> 0:28:39.240
Thank you for me.


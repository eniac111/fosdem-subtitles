WEBVTT

00:00.000 --> 00:08.040
So before the 25 minutes, you mean?

00:08.040 --> 00:11.720
So you scheduled to stop at 1445?

00:11.720 --> 00:13.440
So you give me a give me a heads up.

00:13.440 --> 00:15.440
You can do it up to 35.

00:15.440 --> 00:16.440
Okay, yes.

00:16.440 --> 00:17.440
Sounds good.

00:17.440 --> 00:18.440
Okay.

00:18.440 --> 00:19.440
All right, people.

00:19.440 --> 00:20.440
Let's do the second block today.

00:20.440 --> 00:21.440
I'm very happy.

00:21.440 --> 00:22.440
I'm actually excited about his talk.

00:22.440 --> 00:26.080
So Samuel from the

00:26.080 --> 00:33.080
Heavos company will talk about what's going on in this 5 landscape.

00:33.080 --> 00:39.080
And I think I'm excited about the next step in our community.

00:39.080 --> 00:42.440
So take away Samuel.

00:42.440 --> 00:43.440
Thank you.

00:43.440 --> 00:44.440
Thank you.

00:44.440 --> 00:45.440
So yeah, I'm Samuel.

00:45.440 --> 00:47.200
I work for a company called Heavos.

00:47.200 --> 00:51.480
It's a startup that does RISC-V things.

00:51.480 --> 00:55.960
And today I'm going to talk about confidential computing with RISC-V.

00:55.960 --> 01:02.680
And how do we want to implement an open source implementation of confidential computing?

01:02.680 --> 01:06.480
The previous talks have mentioned things like OptiE.

01:06.480 --> 01:09.600
Some of them have mentioned things like SGX or SEV.

01:09.600 --> 01:14.880
Those are all hardware implementation of the security attributes that the first talk talks

01:14.880 --> 01:15.880
about.

01:15.880 --> 01:21.340
Confidentiality, protection of memory, confidentiality of data in use.

01:21.340 --> 01:25.840
And this talk is really about how we want to achieve that with RISC-V and the difference

01:25.840 --> 01:30.520
between the RISC-V implementation and all other existing implementations that everything

01:30.520 --> 01:31.520
is done in the open.

01:31.520 --> 01:33.360
Everything is open source.

01:33.360 --> 01:38.640
And everyone here in that room is free to come and help and contribute to that implementation.

01:38.640 --> 01:40.640
So that's why I think it's interesting.

01:40.640 --> 01:43.520
Hopefully I'm not wrong.

01:43.520 --> 01:45.520
Okay.

01:45.520 --> 01:49.280
Who was in the RISC-V dev room before?

01:49.280 --> 01:50.280
Okay.

01:50.280 --> 01:52.520
So that's needed, huh?

01:52.520 --> 01:53.520
RISC-V.

01:53.520 --> 01:54.520
What is RISC-V?

01:54.520 --> 01:57.800
RISC-V is a free and open ISA.

01:57.800 --> 02:00.640
Not open source ISA because there's no source.

02:00.640 --> 02:03.300
It's an ISA, an instruction set architecture.

02:03.300 --> 02:10.760
So it's free as in everyone can use it, can build a CPU out of it without paying in license,

02:10.760 --> 02:12.200
any fees or anything like this.

02:12.200 --> 02:16.800
Actually everyone is free to take half of the specification, implement some weirdos,

02:16.800 --> 02:17.800
CPU.

02:17.800 --> 02:19.560
It doesn't matter.

02:19.560 --> 02:22.300
You can take whatever you want out of this specification.

02:22.300 --> 02:25.540
And it's open in a sense that everything is defined in the open.

02:25.540 --> 02:33.360
So all the specs that are frozen, that's ratified and accepted by the RISC-V international foundation,

02:33.360 --> 02:37.520
they're ratified and some modification can be added to it, but it's more difficult.

02:37.520 --> 02:41.760
But between the time they start to be specified and the time they are ratified, everything

02:41.760 --> 02:42.760
is open.

02:42.760 --> 02:43.760
So it's on GitHub.

02:43.760 --> 02:48.840
You can go and put some comments and some pull requests on CPU specifications that are

02:48.840 --> 02:50.560
actually used in the real world.

02:50.560 --> 02:54.120
So it's quite interesting.

02:54.120 --> 03:00.320
And yeah, the specifications are released under an open source license.

03:00.320 --> 03:02.840
There are two volumes for the specification.

03:02.840 --> 03:04.240
It's fairly small.

03:04.240 --> 03:10.520
It's actually 300 pages, which is I think almost the same amount of pages that x86 uses

03:10.520 --> 03:15.000
for documenting the move instruction.

03:15.000 --> 03:18.040
So it's a good comparison.

03:18.040 --> 03:19.040
So yeah, it's very small.

03:19.040 --> 03:20.680
It's easy to read.

03:20.680 --> 03:22.240
Just go ahead and grab it.

03:22.240 --> 03:26.480
And yeah, the spec is split into the unprivileged and privileged specification.

03:26.480 --> 03:29.400
And I'm going to talk about this next.

03:29.400 --> 03:33.520
Why is the RISC-V ISA interesting?

03:33.520 --> 03:35.720
So first of all, it's simple, as I just said.

03:35.720 --> 03:40.560
If you look at the specification, if you read the specification, there is no micro-architectural

03:40.560 --> 03:41.560
dependency.

03:41.560 --> 03:46.000
So the specification tells you how the ISA must look like.

03:46.000 --> 03:48.740
It doesn't tell you how it must be implemented.

03:48.740 --> 03:52.480
So everyone is free to go and implement the ISA the way they want.

03:52.480 --> 03:55.320
There is no dependency on a specific implementation.

03:55.320 --> 03:59.880
And probably this is why it's small or actually smaller.

03:59.880 --> 04:00.880
It is modular.

04:00.880 --> 04:07.300
So it's the same specification for everyone, RISC-32, RISC-64.

04:07.300 --> 04:12.080
And it's the same implementation for the developer boards that you can find in the market and

04:12.080 --> 04:17.880
the upcoming like the Ventana, multicore SOC, actually massively multicore SOCs.

04:17.880 --> 04:18.880
It's the same spec.

04:18.880 --> 04:19.880
So it's modular.

04:19.880 --> 04:21.640
Everyone uses the same thing.

04:21.640 --> 04:22.800
And it's stable.

04:22.800 --> 04:29.040
So there's a base ISA and a set of standard extensions that are frozen.

04:29.040 --> 04:33.680
That means that you can rely on this to implement your UCPU and you'll be able to use whatever

04:33.680 --> 04:36.960
applications are running and using those extensions.

04:36.960 --> 04:37.960
Those are frozen.

04:37.960 --> 04:38.960
They're not going to change.

04:38.960 --> 04:42.040
And if they change, they change a backward-compatible way.

04:42.040 --> 04:43.120
And extensions are optional.

04:43.120 --> 04:49.240
So you don't have to implement all extensions to be called a RISC-V CPU.

04:49.240 --> 04:51.480
And this here is the base ISA.

04:51.480 --> 04:53.480
So that's the entire base ISA.

04:53.480 --> 04:54.680
This is small.

04:54.680 --> 04:56.360
It's very small.

04:56.360 --> 04:57.360
It's easy to read.

04:57.360 --> 04:58.360
Well, kind of.

04:58.360 --> 05:02.960
Not on that slide, but it's easy to read and it's small.

05:02.960 --> 05:08.880
I talked about the spec being split between privilege and unprivileged parts.

05:08.880 --> 05:12.440
And I'm going to talk about privilege modes, which is what is defined in the privilege

05:12.440 --> 05:13.440
specification.

05:13.440 --> 05:18.960
I'm going to talk about this because it's relevant, really relevant to the confidential

05:18.960 --> 05:20.760
computing implementation.

05:20.760 --> 05:28.000
So there are three basic privilege modes for a RISC-V CPU to run on.

05:28.000 --> 05:30.560
The user mode, supervisor mode, and machine mode.

05:30.560 --> 05:35.840
And you switch between those modes through two mechanisms.

05:35.840 --> 05:37.080
Actually through instructions.

05:37.080 --> 05:38.960
E-Call and M-RED and S-RED.

05:38.960 --> 05:45.080
So if you're in user mode, if you're a CPU running in user mode, which is typically an

05:45.080 --> 05:49.340
application, you make an E-Call, which is a S-Call, basically.

05:49.340 --> 05:52.300
So to implement S-Calls, you're going to use the E-Call instruction.

05:52.300 --> 05:56.120
And if you're in the kernel and you need firmware services, you're going to make another E-Call

05:56.120 --> 05:59.660
and you go down in the privileged level and you're more privileged.

05:59.660 --> 06:06.960
To go back, to go up and move to a less privileged world, you're going to call M-RED from the

06:06.960 --> 06:12.440
firmware world, from the machine mode, and you're only going to call S-RED to get back

06:12.440 --> 06:14.080
from a system call.

06:14.080 --> 06:20.000
And as I said, those modes actually map to real use cases, what we typically used to.

06:20.000 --> 06:23.080
So the user mode is the application mode.

06:23.080 --> 06:25.600
Supervisor mode is where your kernel is going to run.

06:25.600 --> 06:36.040
And machine mode is where your firmware kind of thing, UFI kind of thing, is going to run.

06:36.040 --> 06:41.960
One very important thing for the confidential computing implementation is the two additional

06:41.960 --> 06:47.160
modes, actually three additional modes that have been added with the hypervisor extension.

06:47.160 --> 06:54.760
So there is an extension to the base RISC-V ISA, it's called the H extension, H as in hypervisor.

06:54.760 --> 07:00.320
And this is an extension that's been added and is frozen, so it's something that is not

07:00.320 --> 07:04.180
going to change for supporting virtualization.

07:04.180 --> 07:09.620
So the mode that I've been adding is the H-HACE mode, the VS mode, and the VU mode.

07:09.620 --> 07:16.180
So you can see in this diagram you can run your application as usually in U-mode, and

07:16.180 --> 07:21.160
then you're going to have your hypervisor, your host kernel, when the X extension is

07:21.160 --> 07:25.000
enabled, it's going to run not on S mode, but on H-HACE mode.

07:25.000 --> 07:28.000
So hypervisor, supervisor mode.

07:28.000 --> 07:33.040
This is where your Linux KVM or Zen kind of thing are running.

07:33.040 --> 07:36.040
And then when you're going to create the virtual machine, the virtual machine is going to be

07:36.040 --> 07:41.240
split, if it's a full Linux virtual machine, it's going to be split into two different

07:41.240 --> 07:46.280
modes, the VU mode, the virtualized user mode, and the virtualized supervisor mode.

07:46.280 --> 07:50.460
So your guest kernel is going to run in a virtualized supervisor mode, and your guest

07:50.460 --> 07:54.960
applications are going to run in a virtualized user mode.

07:54.960 --> 07:57.680
All right.

07:57.680 --> 07:58.880
So confidential computing.

07:58.880 --> 08:06.000
I just did like a scratch course in five minutes of RISC-V, so I hope this makes sense.

08:06.000 --> 08:10.160
But anyways, I needed to do this to kind of explain where we want to go with confidential

08:10.160 --> 08:11.240
computing on RISC-V.

08:11.240 --> 08:18.800
So what we're defining currently in RISC-V for confidential computing is called the Aptie

08:18.800 --> 08:20.800
RISC-V specification.

08:20.800 --> 08:25.600
Aptie as in application, processor, trusted execution environment.

08:25.600 --> 08:29.880
So it's a technical group where everything, again, is open.

08:29.880 --> 08:32.360
So there's a GitHub repo for this technical group.

08:32.360 --> 08:37.160
All specifications are there, the discussions, the minik notes, everything.

08:37.160 --> 08:43.040
And it is not ratified yet, not frozen, so this is a work in progress.

08:43.040 --> 08:49.880
So again, feel free to come and join and help and provide some feedback on that specification.

08:49.880 --> 08:57.480
But it is aimed at becoming the reference confidential computing architecture for RISC-V.

08:57.480 --> 09:01.920
So it's currently in a pretty late state.

09:01.920 --> 09:08.160
It's going to be ratified, not ratified, but accepted pretty soon in a few months.

09:08.160 --> 09:14.000
But it's going to be the reference confidential computing architecture for RISC-V.

09:14.000 --> 09:21.880
It's not an ISA specification, so we don't add to the RISC-V set of instruction and architectural

09:21.880 --> 09:22.880
definitions.

09:22.880 --> 09:25.680
But we do identify a few ISA gaps.

09:25.680 --> 09:30.120
For example, what we call the confidential memory attributes, which I'm going to talk

09:30.120 --> 09:34.440
about later.

09:34.440 --> 09:39.280
And just to clarify things, because we talked about Aptie, and for example, there's an implementation

09:39.280 --> 09:42.000
of Aptie for RISC-V.

09:42.000 --> 09:48.200
The Aptie specification for RISC-V is not aiming at the same set of use cases.

09:48.200 --> 09:53.960
Aptie is really trying to do and support the same use cases as TDX, for those who are familiar

09:53.960 --> 09:59.700
with TDX, or SEV, for those who are familiar with this AMD technology.

09:59.700 --> 10:03.780
And basically, this specification is defining a new class of trusted execution environment

10:03.780 --> 10:04.980
for RISC-V.

10:04.980 --> 10:08.240
And these new class are trusted virtual machines.

10:08.240 --> 10:10.940
So same as TDX, so same as SEV.

10:10.940 --> 10:16.640
The goal is really to run full-blown virtual machine in a confidential computing environment,

10:16.640 --> 10:23.120
where you will have memory and data, confidentiality and integrity, as explained in the first

10:23.120 --> 10:24.120
talk.

10:24.120 --> 10:29.240
And the goal is really for people to take their existing workload, their existing virtual

10:29.240 --> 10:33.800
machine, their existing Kubernetes nodes, and move that into a confidential computing

10:33.800 --> 10:34.800
TE.

10:34.800 --> 10:41.120
The same way they're doing this, or they aim at doing this with SEV or TDX.

10:41.120 --> 10:47.120
So they're really two different set of use cases, and Aptie is aiming at this specific

10:47.120 --> 10:51.120
set of use cases.

10:51.120 --> 10:55.360
So there are a few architecture components that I'm going to talk about.

10:55.360 --> 11:04.400
A Aptie beats per heart, sorry, I didn't mention this, but a heart, H-A-R-T in RISC-V terminology,

11:04.400 --> 11:06.520
is actually a CPU core.

11:06.520 --> 11:08.640
It's a core, it's called a heart.

11:08.640 --> 11:11.160
There's a few components that I'm going to go through.

11:11.160 --> 11:16.520
The security manager, the TSM driver, there's a dependency on the hardware root of trust,

11:16.520 --> 11:23.840
and there's a structure, a non-ISA-specified structure called the memory tracking table.

11:23.840 --> 11:28.680
And to go through all these components and kind of explain what they are and how they're

11:28.680 --> 11:36.960
put together to reach the goal of memory and data protection and integrity guarantees when

11:36.960 --> 11:37.960
it's in use.

11:37.960 --> 11:44.440
I'm going to take an example of how, from a cold start of a RISC-V SOC, we could actually

11:44.440 --> 11:51.280
build a trusted virtual machine with the confidential computing architecture that I'm trying to describe.

11:51.280 --> 12:00.200
Okay, so we have a RISC-V SOC with a few components that are mandatory.

12:00.200 --> 12:05.160
We need an IOMMU, we need a root of trust, we need an MMU obviously.

12:05.160 --> 12:10.720
This is all dependent on the H extension on 64-bit RISC-V.

12:10.720 --> 12:16.240
It's basically RISC-V GC, which is the general purpose specification, plus compress, but

12:16.240 --> 12:19.400
we don't need compress, it's just the G part.

12:19.400 --> 12:26.560
But yeah, it's a full-blown 64-bit RISC-V SOC that's running there with an IOMMU.

12:26.560 --> 12:32.640
We do need and mandates the presence of a hardware root of trust, and we need some sort

12:32.640 --> 12:34.000
of memory protection.

12:34.000 --> 12:38.180
So an MMU, a memory checker, something like this.

12:38.180 --> 12:43.320
The first thing that the root of trust is going to measure and load is called the TSM

12:43.320 --> 12:44.320
driver.

12:44.320 --> 12:48.480
So that's the first component of this confidential computing architecture.

12:48.480 --> 12:54.280
And the TSM driver is the trusted component that runs in M mode, in Fermot mode, that's

12:54.280 --> 12:59.000
going to split the world in non-confidential and confidential.

12:59.000 --> 13:05.760
And the TSM driver is a confidential world switcher, and it's the component that basically

13:05.760 --> 13:13.040
toggles a bit in the RISC-V SOC, the AFTEE bit, to tell if the heart is currently running

13:13.040 --> 13:15.960
in confidential mode or non-confidential mode.

13:15.960 --> 13:21.180
So there is an AFTEE bit that is part of the specification that tells at any point in time

13:21.180 --> 13:27.400
if a specific RISC-V core, RISC-V heart, is running in confidential mode or non-confidential

13:27.400 --> 13:28.400
mode.

13:28.400 --> 13:31.960
And the TSM driver is the component that's going to make that switch, is the component

13:31.960 --> 13:33.560
that is going to toggle that switch.

13:33.560 --> 13:39.160
So it's part of the TCB, it's a trusted component, it's a software trusted component, and that

13:39.160 --> 13:41.320
runs in M mode and it does that.

13:41.320 --> 13:48.440
And basically the TSM driver is going to switch from, for example, non-confidential to confidential

13:48.440 --> 13:54.760
when something in non-confidential like a VMM or KVM or your Linux kernel is sending a

13:54.760 --> 14:02.280
specific TE call, which is an E call, basically a call that allows you to move from supervisor

14:02.280 --> 14:08.400
mode to machine mode, so basically from Linux kernel to TSM driver.

14:08.400 --> 14:13.720
The TSM driver is going to trap this and then is going to toggle the AFTEE bit, which means

14:13.720 --> 14:18.720
it's going to atomically switch the CPU into confidential mode, and then it's going to

14:18.720 --> 14:24.400
move to something called the TSM, the trusted security manager, the TE security manager,

14:24.400 --> 14:25.400
sorry.

14:25.400 --> 14:29.040
And to do that it calls the M-RET instruction and move to TSM.

14:29.040 --> 14:34.520
So we are in the kernel, the kernel makes an E call, the TSM driver toggles the CPU

14:34.520 --> 14:40.240
from non-confidential to confidential and then starts running the TSM, and we're going to

14:40.240 --> 14:42.760
talk about the TSM next.

14:42.760 --> 14:47.840
This is what the TSM driver is mostly about.

14:47.840 --> 14:51.720
The TSM driver, I'm going to talk about the TSM right after this, but the one very important

14:51.720 --> 14:56.040
thing that the TSM driver manages is called the memory tracking table.

14:56.040 --> 15:02.600
The memory tracking table is a piece of memory and the structure of this memory tracking

15:02.600 --> 15:08.240
table is not specified in the confidential computing specification.

15:08.240 --> 15:15.160
It is up to any implementation to decide what it puts in this memory tracking table.

15:15.160 --> 15:21.440
What the specs tells is what this memory tracking table is for, and this is what I'm going to

15:21.440 --> 15:22.600
explain now.

15:22.600 --> 15:29.640
The memory tracking table is enforcing, and just to take back, the memory tracking table

15:29.640 --> 15:31.120
leaves in confidential memory.

15:31.120 --> 15:38.200
So the memory tracking table leaves in a piece of memory that is protected from the non-confidential

15:38.200 --> 15:40.080
world to actually see or tamper with.

15:40.080 --> 15:45.340
So it's encrypted, protected, integrity protected memory.

15:45.340 --> 15:52.800
So the memory tracking table enforces the confidentiality memory attribute for each and

15:52.800 --> 15:55.020
every page on the system.

15:55.020 --> 15:58.200
So it's what we call a PMA page tracker.

15:58.200 --> 16:03.580
So it defines if any memory page is confidential or not.

16:03.580 --> 16:08.020
So you take a physical address, you give that to the MTT, to the memory tracking table,

16:08.020 --> 16:13.440
and the MTT tells you if this address belongs to a confidential page or a non-confidential

16:13.440 --> 16:15.360
page.

16:15.360 --> 16:19.960
So with this memory tracking table, any time you want, for example, the non-confidential

16:19.960 --> 16:25.760
world is trying to access physically a page, the memory tracking table is going to be used

16:25.760 --> 16:30.560
by the CPU to actually check if this page is confidential or non-confidential.

16:30.560 --> 16:34.800
If you're trying to access a confidential page from a non-confidential world, if you're

16:34.800 --> 16:41.440
trying to read memory from your trusted virtual machine from your VMM, from your QMU, from

16:41.440 --> 16:46.480
your KVM, then the memory tracking table is going to tell you this is a confidential page,

16:46.480 --> 16:49.840
and that's going to generate a CPU fault.

16:49.840 --> 16:53.000
And it gives you memory protection.

16:53.000 --> 16:58.600
Depending on how you want to implement memory encryption, basically, to protect your memory,

16:58.600 --> 17:04.500
the memory tracking table will be able to tell you which key you need to use to encrypt

17:04.500 --> 17:07.120
or decrypt that physical page.

17:07.120 --> 17:12.640
And you can decide how you want to implement this, how many keys you want to support, if

17:12.640 --> 17:18.720
you want to add one key per TBM or multiple keys, or it's up to the micro-architectural

17:18.720 --> 17:23.440
implementation of the specification to decide what it does with it.

17:23.440 --> 17:30.320
Okay, so the TSM driver managed the memory tracking table, which gives us memory protection

17:30.320 --> 17:32.440
and integrity.

17:32.440 --> 17:36.560
And the next thing the TSM driver is going to do is going to load and measure the next

17:36.560 --> 17:41.000
component, the next trusted component that now runs in less privileged mode, the TSM,

17:41.000 --> 17:42.920
the TE Security Manager.

17:42.920 --> 17:49.480
The TSM lives at the same level as the Linux kernel, as KVM, as the hypervisor, basically.

17:49.480 --> 17:52.600
But it lives in confidential work.

17:52.600 --> 18:00.200
It lives and runs out of confidential memory, and is only run when the RISC-V CPU is running

18:00.200 --> 18:07.120
with the ATEE bit on, which means it's running when it's in confidential mode.

18:07.120 --> 18:12.900
So the TSM, I don't know if people here are familiar with TDX, but there are some similar

18:12.900 --> 18:19.200
similarities here for those who know TDX, unfortunately.

18:19.200 --> 18:24.440
So TSM, it's the TE Security Manager.

18:24.440 --> 18:28.640
It's a trusted piece between the host VMM and the TVM.

18:28.640 --> 18:32.840
So the TVM is the trusted virtual machine that we're trying to build through those steps.

18:32.840 --> 18:38.720
And nothing from the confidential world can actually touch a trusted virtual machine without

18:38.720 --> 18:43.800
going through the trusted, the TE Security Manager, the TSM.

18:43.800 --> 18:50.060
One very important thing that the TSM does is it manages all the second stage page tables.

18:50.060 --> 18:58.600
So the page tables that allows you to translate TVM physical addresses to host physical addresses,

18:58.600 --> 19:03.480
those are managed by the TSM in confidential memory.

19:03.480 --> 19:09.880
So with the confidential computing implementation, KVM no longer manages the second stage page

19:09.880 --> 19:12.520
tables for the trusted virtual machine.

19:12.520 --> 19:17.560
It's all handled by the TSM, which is trusted in confidential memory.

19:17.560 --> 19:19.960
So that's a very important piece of TSM.

19:19.960 --> 19:24.560
And something really important to understand is that it is a passive component.

19:24.560 --> 19:29.760
So it implements security services that are going to be called by the host VMM.

19:29.760 --> 19:31.320
It doesn't run by itself.

19:31.320 --> 19:36.800
It's not something that schedules a TVM or handles interrupts.

19:36.800 --> 19:37.800
It doesn't do anything like this.

19:37.800 --> 19:42.480
It just replies to security requests that are coming from the host.

19:42.480 --> 19:45.360
The host is in control of the machine.

19:45.360 --> 19:47.680
It's not in control of the trusted virtual machine.

19:47.680 --> 19:49.960
It needs to go through the TSM.

19:49.960 --> 19:54.560
And the TSM is only responsible for this, getting security requests from the host, from

19:54.560 --> 19:58.000
the host VMM, and replying to it.

19:58.000 --> 20:00.740
And we do have an open source implementation for this.

20:00.740 --> 20:02.780
So it's called Salus.

20:02.780 --> 20:04.600
It's on GitHub again.

20:04.600 --> 20:09.720
And it basically implements everything that I just described, plus a lot more different

20:09.720 --> 20:10.720
things.

20:10.720 --> 20:11.940
It's all in the specification.

20:11.940 --> 20:14.240
And it's all open source.

20:14.240 --> 20:16.720
So go there.

20:16.720 --> 20:18.760
Yes.

20:18.760 --> 20:22.640
The TSM also manages the NTT.

20:22.640 --> 20:27.740
So whenever the TSM adds a page to a trusted virtual machine, it's going to add entries

20:27.740 --> 20:29.160
to the NTT.

20:29.160 --> 20:33.240
And it's a little bit more complicated than this because it needs to go through the TSM

20:33.240 --> 20:34.240
driver.

20:34.240 --> 20:39.640
But basically, the NTT is something that is owned by the TSM driver and by the TSM.

20:39.640 --> 20:41.200
OK.

20:41.200 --> 20:44.200
So TSM driver started.

20:44.200 --> 20:45.560
It loaded the TSM.

20:45.560 --> 20:51.160
At some point, we have a host OS by Linux kernel with KVM that starts.

20:51.160 --> 20:54.360
It boots some non-confidential virtual machine.

20:54.360 --> 21:00.600
And it's going to be, well, at some point, someone is going to be starting a trusted

21:00.600 --> 21:04.440
virtual machine, a virtual machine that runs in confidential world.

21:04.440 --> 21:11.720
And to do that, there's a set of ABIs between the host VMM on the left, the non-confidential

21:11.720 --> 21:14.520
world, and the TSM.

21:14.520 --> 21:16.200
And that goes through the TSM driver.

21:16.200 --> 21:22.140
The TSM driver is the trusted piece that actually proxies each and every request from the non-confidential

21:22.140 --> 21:26.240
world to the confidential world, to the TSM, basically.

21:26.240 --> 21:32.760
And those are called the T-E host ABIs because there are, it's a set of binary interfaces

21:32.760 --> 21:39.480
that are called from the host to actually manage and request security features from

21:39.480 --> 21:41.120
the TSM.

21:41.120 --> 21:42.700
Everything is proxied through a TSM driver.

21:42.700 --> 21:48.360
So the TSM driver traps the host sending E calls, SBI calls.

21:48.360 --> 21:53.560
And basically, it traps the calls from the host VMM, from KVM, for example.

21:53.560 --> 21:59.480
And it then schedules the TSM to actually run and handle those calls.

21:59.480 --> 22:07.520
So a few examples, creating and destroying a TVM context, converting non-confidential

22:07.520 --> 22:14.720
memory to confidential, and vice versa, mapping pages from non-confidential world to a TVM.

22:14.720 --> 22:20.000
All those security features, they are requested from the host VMM, from KVM, and they are

22:20.000 --> 22:21.760
managed by the TSM.

22:21.760 --> 22:29.520
So KVM itself, obviously, we don't want KVM to actually take a page and add that to a

22:29.520 --> 22:31.620
TVM, a trusted virtual machine address space.

22:31.620 --> 22:37.440
It has to go through the TSM, which manages all the page tables for this TVM.

22:37.440 --> 22:43.520
And for example, if we want to create a TVM, which is what we're aiming or trying to do

22:43.520 --> 22:46.080
here, it goes through a few steps.

22:46.080 --> 22:54.000
And all those steps here map to an actual T, the host ABI, the ABI between KVM and TSM.

22:54.000 --> 22:55.160
And there are basically seven steps.

22:55.160 --> 22:57.760
The first one is to create a TVM context.

22:57.760 --> 23:04.360
So KVM will ask for having a context so that it can use that context and then start configuring

23:04.360 --> 23:05.480
the TVM.

23:05.480 --> 23:12.840
The next thing the KVM needs to do is to allocate some memory from physical pages to the TSM

23:12.840 --> 23:18.000
so that the TSM can actually build the second stage page tables for the TVM that it's going

23:18.000 --> 23:19.040
to create.

23:19.040 --> 23:21.840
Those second stage page tables are living in confidential memory.

23:21.840 --> 23:22.840
So they cannot be handled.

23:22.840 --> 23:26.920
They must not be handled by KVM, by the host VMM.

23:26.920 --> 23:33.640
So KVM donates pages to TSM, and the TSM is going to use that to build those page tables.

23:33.640 --> 23:37.080
It's not meant to be used by the TVM memory.

23:37.080 --> 23:42.600
It's meant to actually track the second stage page tables for the TVM.

23:42.600 --> 23:50.160
Then KVM is going to tell TSM that some memory region needs to be reserved for the TVM.

23:50.160 --> 23:53.240
So that's basically the TVM address space.

23:53.240 --> 23:59.000
And then KVM is going to allocate pages and move those pages from non-confidential to confidential

23:59.000 --> 24:05.120
and ask TSM to map those pages in the memory region that it just asked for creation in

24:05.120 --> 24:08.320
step number three.

24:08.320 --> 24:14.200
The next thing that KVM needs to do is to create TVM CPUs.

24:14.200 --> 24:22.280
Because basically all the CPU state is contained and managed in confidential memory as well.

24:22.280 --> 24:26.920
All the CPU state that the TVM is going to run on top of is managed by the TSM in confidential

24:26.920 --> 24:33.400
memory so that KVM does not see a TVM general purpose registers values and cannot mess with

24:33.400 --> 24:34.840
it, obviously.

24:34.840 --> 24:37.840
So this is all handled by the TSM as well.

24:37.840 --> 24:44.960
And KVM finalize the TVM and eventually ask TSM to start running the TVM.

24:44.960 --> 24:50.040
And this is where your TVM is starting to run off confidential memory with a VCPU which

24:50.040 --> 24:56.520
state is also kept in confidential memory and protected.

24:56.520 --> 24:57.680
So we have this.

24:57.680 --> 25:03.480
TSM just created a TVM upon the host VM request.

25:03.480 --> 25:06.480
And the TVM can also talk back to the TSM.

25:06.480 --> 25:09.400
The TVM never talks back directly to the host VM.

25:09.400 --> 25:12.120
It only talks back to the TSM.

25:12.120 --> 25:19.560
The same way a non-confidential VM exit would be trapped by the host VM, a confidential

25:19.560 --> 25:26.160
TVM VM exit, for example, or any service that the confidential VM needs will be managed

25:26.160 --> 25:29.200
by the TSM driver or the TSM.

25:29.200 --> 25:34.440
So there are a set of ABIs between the TVM and the TSM.

25:34.440 --> 25:39.880
And for example, I think that I didn't talk about, but attestation is something that is

25:39.880 --> 25:41.920
being requested by the TVM.

25:41.920 --> 25:45.000
So the TVM is going to ask for an attestation evidence.

25:45.000 --> 25:51.320
And this is going to be serviced by the TSM through those ABIs here between the TVM and

25:51.320 --> 25:53.000
the TSM.

25:53.000 --> 25:58.720
So the TVM asks for an attestation report, a signed attestation report, an evidence that

25:58.720 --> 26:03.400
is going to send to a line party to run the full attestation dance whenever it wants to

26:03.400 --> 26:04.840
do that.

26:04.840 --> 26:10.000
And the part of the specification, the confidential computing specification, defines how this

26:10.000 --> 26:17.280
attestation flow is going to be running and more importantly, how the attestation evidence

26:17.280 --> 26:22.560
is going to be built out of which measurements and how this is going to be formatted.

26:22.560 --> 26:30.140
Unlike TDX or SGX or SEV, we do use a standard format.

26:30.140 --> 26:34.520
We use X509 certificates for building an evidence.

26:34.520 --> 26:42.800
So each layer on the chain here from the hardware to the TSM loads, measure, and certificates

26:42.800 --> 26:43.800
the next layer.

26:43.800 --> 26:48.080
So this is based on a specification called TCG DICE.

26:48.080 --> 26:51.600
It's a layered specification for building attestation evidence.

26:51.600 --> 26:56.280
And this is what we use with the RISC-V confidential computing implementation.

26:56.280 --> 27:02.480
Usually the TVM, when it asks for attestation evidence, it will get a certificate from the

27:02.480 --> 27:03.480
TSM.

27:03.480 --> 27:09.160
So the TSM builds the certificate with the entire attestation evidence that is part of

27:09.160 --> 27:13.080
the certificate as an X509 extension.

27:13.080 --> 27:17.480
And this certificate is routed back all the way back to the hardware world trust for a

27:17.480 --> 27:23.240
relying party to then verify and attest or not.

27:23.240 --> 27:25.800
Last thing I want to talk about is IO.

27:25.800 --> 27:30.400
I didn't talk about IO because it's a chapter on its own.

27:30.400 --> 27:32.520
There are two kinds of virtual machine IO.

27:32.520 --> 27:37.960
There's the pyro virtualized IO, also known as VRTIO most of the time.

27:37.960 --> 27:46.640
Doing VRTIO with confidential computing, confidential VM, TDX, SEV, or RISC-V is challenging because

27:46.640 --> 27:51.840
basically the VRTIO device implementation is done by the host VM.

27:51.840 --> 27:56.320
So typically your virtual IONet is going to be done by QMU or by an external process running

27:56.320 --> 27:58.840
out of the host user, for example.

27:58.840 --> 28:03.600
So you must share memory between your TVM and your host VM.

28:03.600 --> 28:05.920
So it's complex.

28:05.920 --> 28:10.360
It's actually not very efficient because you need a software IOTLB and you need to do a

28:10.360 --> 28:16.440
buffer bouncing between confidential and non-confidential to be able to share stuff.

28:16.440 --> 28:22.360
You need to harden your guests so that you can actually somehow trust the host implementation,

28:22.360 --> 28:23.360
et cetera.

28:23.360 --> 28:25.120
So there's a lot of discussion around this.

28:25.120 --> 28:29.760
If you go to the Linux Coco mailing list, it's a Linux kernel mailing list.

28:29.760 --> 28:32.520
There's a lot of heated discussion right now.

28:32.520 --> 28:40.840
And the other IO, surprisingly, the other IO form is direct assignment.

28:40.840 --> 28:42.360
That is even more complex.

28:42.360 --> 28:46.600
Direct assignment basically means you take a PCI device that you don't know, that you

28:46.600 --> 28:53.320
know nothing about, and you add that to your TE trusted compute base.

28:53.320 --> 28:59.400
Basically you're going to say, I want my NVIDIA GPU to be part of my trusted virtual machine.

28:59.400 --> 29:04.720
And to do that, you basically need to attest and authenticate the device that you want

29:04.720 --> 29:06.800
to plug into your TVM.

29:06.800 --> 29:12.160
So there's a lot of specification, not a lot, but a few specification, PCI specification

29:12.160 --> 29:17.960
called T-disp, an IDE for protecting the ID link between your device and your TVM.

29:17.960 --> 29:20.040
You need collaboration from the IMU.

29:20.040 --> 29:21.960
It's a very complex topic.

29:21.960 --> 29:25.080
The first one, Virtio.1, is very much in progress.

29:25.080 --> 29:29.880
The direct assignment one, it's still being defined.

29:29.880 --> 29:33.440
So I rushed that through.

29:33.440 --> 29:34.440
I'm done.

29:34.440 --> 29:35.440
Thanks a lot for listening.

29:35.440 --> 29:36.840
I hope it was useful.

29:36.840 --> 29:37.840
Thank you, Seong-ho.

29:37.840 --> 29:46.800
I have time for questions.

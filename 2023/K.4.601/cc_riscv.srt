1
0:00:00.000 --> 0:00:08.040
So before the 25 minutes, you mean?

2
0:00:08.040 --> 0:00:11.720
So you scheduled to stop at 1445?

3
0:00:11.720 --> 0:00:13.440
So you give me a give me a heads up.

4
0:00:13.440 --> 0:00:15.440
You can do it up to 35.

5
0:00:15.440 --> 0:00:16.440
Okay, yes.

6
0:00:16.440 --> 0:00:17.440
Sounds good.

7
0:00:17.440 --> 0:00:18.440
Okay.

8
0:00:18.440 --> 0:00:19.440
All right, people.

9
0:00:19.440 --> 0:00:20.440
Let's do the second block today.

10
0:00:20.440 --> 0:00:21.440
I'm very happy.

11
0:00:21.440 --> 0:00:22.440
I'm actually excited about his talk.

12
0:00:22.440 --> 0:00:26.080
So Samuel from the

13
0:00:26.080 --> 0:00:33.080
Heavos company will talk about what's going on in this 5 landscape.

14
0:00:33.080 --> 0:00:39.080
And I think I'm excited about the next step in our community.

15
0:00:39.080 --> 0:00:42.440
So take away Samuel.

16
0:00:42.440 --> 0:00:43.440
Thank you.

17
0:00:43.440 --> 0:00:44.440
Thank you.

18
0:00:44.440 --> 0:00:45.440
So yeah, I'm Samuel.

19
0:00:45.440 --> 0:00:47.200
I work for a company called Heavos.

20
0:00:47.200 --> 0:00:51.480
It's a startup that does RISC-V things.

21
0:00:51.480 --> 0:00:55.960
And today I'm going to talk about confidential computing with RISC-V.

22
0:00:55.960 --> 0:01:02.680
And how do we want to implement an open source implementation of confidential computing?

23
0:01:02.680 --> 0:01:06.480
The previous talks have mentioned things like OptiE.

24
0:01:06.480 --> 0:01:09.600
Some of them have mentioned things like SGX or SEV.

25
0:01:09.600 --> 0:01:14.880
Those are all hardware implementation of the security attributes that the first talk talks

26
0:01:14.880 --> 0:01:15.880
about.

27
0:01:15.880 --> 0:01:21.340
Confidentiality, protection of memory, confidentiality of data in use.

28
0:01:21.340 --> 0:01:25.840
And this talk is really about how we want to achieve that with RISC-V and the difference

29
0:01:25.840 --> 0:01:30.520
between the RISC-V implementation and all other existing implementations that everything

30
0:01:30.520 --> 0:01:31.520
is done in the open.

31
0:01:31.520 --> 0:01:33.360
Everything is open source.

32
0:01:33.360 --> 0:01:38.640
And everyone here in that room is free to come and help and contribute to that implementation.

33
0:01:38.640 --> 0:01:40.640
So that's why I think it's interesting.

34
0:01:40.640 --> 0:01:43.520
Hopefully I'm not wrong.

35
0:01:43.520 --> 0:01:45.520
Okay.

36
0:01:45.520 --> 0:01:49.280
Who was in the RISC-V dev room before?

37
0:01:49.280 --> 0:01:50.280
Okay.

38
0:01:50.280 --> 0:01:52.520
So that's needed, huh?

39
0:01:52.520 --> 0:01:53.520
RISC-V.

40
0:01:53.520 --> 0:01:54.520
What is RISC-V?

41
0:01:54.520 --> 0:01:57.800
RISC-V is a free and open ISA.

42
0:01:57.800 --> 0:02:00.640
Not open source ISA because there's no source.

43
0:02:00.640 --> 0:02:03.300
It's an ISA, an instruction set architecture.

44
0:02:03.300 --> 0:02:10.760
So it's free as in everyone can use it, can build a CPU out of it without paying in license,

45
0:02:10.760 --> 0:02:12.200
any fees or anything like this.

46
0:02:12.200 --> 0:02:16.800
Actually everyone is free to take half of the specification, implement some weirdos,

47
0:02:16.800 --> 0:02:17.800
CPU.

48
0:02:17.800 --> 0:02:19.560
It doesn't matter.

49
0:02:19.560 --> 0:02:22.300
You can take whatever you want out of this specification.

50
0:02:22.300 --> 0:02:25.540
And it's open in a sense that everything is defined in the open.

51
0:02:25.540 --> 0:02:33.360
So all the specs that are frozen, that's ratified and accepted by the RISC-V international foundation,

52
0:02:33.360 --> 0:02:37.520
they're ratified and some modification can be added to it, but it's more difficult.

53
0:02:37.520 --> 0:02:41.760
But between the time they start to be specified and the time they are ratified, everything

54
0:02:41.760 --> 0:02:42.760
is open.

55
0:02:42.760 --> 0:02:43.760
So it's on GitHub.

56
0:02:43.760 --> 0:02:48.840
You can go and put some comments and some pull requests on CPU specifications that are

57
0:02:48.840 --> 0:02:50.560
actually used in the real world.

58
0:02:50.560 --> 0:02:54.120
So it's quite interesting.

59
0:02:54.120 --> 0:03:00.320
And yeah, the specifications are released under an open source license.

60
0:03:00.320 --> 0:03:02.840
There are two volumes for the specification.

61
0:03:02.840 --> 0:03:04.240
It's fairly small.

62
0:03:04.240 --> 0:03:10.520
It's actually 300 pages, which is I think almost the same amount of pages that x86 uses

63
0:03:10.520 --> 0:03:15.000
for documenting the move instruction.

64
0:03:15.000 --> 0:03:18.040
So it's a good comparison.

65
0:03:18.040 --> 0:03:19.040
So yeah, it's very small.

66
0:03:19.040 --> 0:03:20.680
It's easy to read.

67
0:03:20.680 --> 0:03:22.240
Just go ahead and grab it.

68
0:03:22.240 --> 0:03:26.480
And yeah, the spec is split into the unprivileged and privileged specification.

69
0:03:26.480 --> 0:03:29.400
And I'm going to talk about this next.

70
0:03:29.400 --> 0:03:33.520
Why is the RISC-V ISA interesting?

71
0:03:33.520 --> 0:03:35.720
So first of all, it's simple, as I just said.

72
0:03:35.720 --> 0:03:40.560
If you look at the specification, if you read the specification, there is no micro-architectural

73
0:03:40.560 --> 0:03:41.560
dependency.

74
0:03:41.560 --> 0:03:46.000
So the specification tells you how the ISA must look like.

75
0:03:46.000 --> 0:03:48.740
It doesn't tell you how it must be implemented.

76
0:03:48.740 --> 0:03:52.480
So everyone is free to go and implement the ISA the way they want.

77
0:03:52.480 --> 0:03:55.320
There is no dependency on a specific implementation.

78
0:03:55.320 --> 0:03:59.880
And probably this is why it's small or actually smaller.

79
0:03:59.880 --> 0:04:00.880
It is modular.

80
0:04:00.880 --> 0:04:07.300
So it's the same specification for everyone, RISC-32, RISC-64.

81
0:04:07.300 --> 0:04:12.080
And it's the same implementation for the developer boards that you can find in the market and

82
0:04:12.080 --> 0:04:17.880
the upcoming like the Ventana, multicore SOC, actually massively multicore SOCs.

83
0:04:17.880 --> 0:04:18.880
It's the same spec.

84
0:04:18.880 --> 0:04:19.880
So it's modular.

85
0:04:19.880 --> 0:04:21.640
Everyone uses the same thing.

86
0:04:21.640 --> 0:04:22.800
And it's stable.

87
0:04:22.800 --> 0:04:29.040
So there's a base ISA and a set of standard extensions that are frozen.

88
0:04:29.040 --> 0:04:33.680
That means that you can rely on this to implement your UCPU and you'll be able to use whatever

89
0:04:33.680 --> 0:04:36.960
applications are running and using those extensions.

90
0:04:36.960 --> 0:04:37.960
Those are frozen.

91
0:04:37.960 --> 0:04:38.960
They're not going to change.

92
0:04:38.960 --> 0:04:42.040
And if they change, they change a backward-compatible way.

93
0:04:42.040 --> 0:04:43.120
And extensions are optional.

94
0:04:43.120 --> 0:04:49.240
So you don't have to implement all extensions to be called a RISC-V CPU.

95
0:04:49.240 --> 0:04:51.480
And this here is the base ISA.

96
0:04:51.480 --> 0:04:53.480
So that's the entire base ISA.

97
0:04:53.480 --> 0:04:54.680
This is small.

98
0:04:54.680 --> 0:04:56.360
It's very small.

99
0:04:56.360 --> 0:04:57.360
It's easy to read.

100
0:04:57.360 --> 0:04:58.360
Well, kind of.

101
0:04:58.360 --> 0:05:02.960
Not on that slide, but it's easy to read and it's small.

102
0:05:02.960 --> 0:05:08.880
I talked about the spec being split between privilege and unprivileged parts.

103
0:05:08.880 --> 0:05:12.440
And I'm going to talk about privilege modes, which is what is defined in the privilege

104
0:05:12.440 --> 0:05:13.440
specification.

105
0:05:13.440 --> 0:05:18.960
I'm going to talk about this because it's relevant, really relevant to the confidential

106
0:05:18.960 --> 0:05:20.760
computing implementation.

107
0:05:20.760 --> 0:05:28.000
So there are three basic privilege modes for a RISC-V CPU to run on.

108
0:05:28.000 --> 0:05:30.560
The user mode, supervisor mode, and machine mode.

109
0:05:30.560 --> 0:05:35.840
And you switch between those modes through two mechanisms.

110
0:05:35.840 --> 0:05:37.080
Actually through instructions.

111
0:05:37.080 --> 0:05:38.960
E-Call and M-RED and S-RED.

112
0:05:38.960 --> 0:05:45.080
So if you're in user mode, if you're a CPU running in user mode, which is typically an

113
0:05:45.080 --> 0:05:49.340
application, you make an E-Call, which is a S-Call, basically.

114
0:05:49.340 --> 0:05:52.300
So to implement S-Calls, you're going to use the E-Call instruction.

115
0:05:52.300 --> 0:05:56.120
And if you're in the kernel and you need firmware services, you're going to make another E-Call

116
0:05:56.120 --> 0:05:59.660
and you go down in the privileged level and you're more privileged.

117
0:05:59.660 --> 0:06:06.960
To go back, to go up and move to a less privileged world, you're going to call M-RED from the

118
0:06:06.960 --> 0:06:12.440
firmware world, from the machine mode, and you're only going to call S-RED to get back

119
0:06:12.440 --> 0:06:14.080
from a system call.

120
0:06:14.080 --> 0:06:20.000
And as I said, those modes actually map to real use cases, what we typically used to.

121
0:06:20.000 --> 0:06:23.080
So the user mode is the application mode.

122
0:06:23.080 --> 0:06:25.600
Supervisor mode is where your kernel is going to run.

123
0:06:25.600 --> 0:06:36.040
And machine mode is where your firmware kind of thing, UFI kind of thing, is going to run.

124
0:06:36.040 --> 0:06:41.960
One very important thing for the confidential computing implementation is the two additional

125
0:06:41.960 --> 0:06:47.160
modes, actually three additional modes that have been added with the hypervisor extension.

126
0:06:47.160 --> 0:06:54.760
So there is an extension to the base RISC-V ISA, it's called the H extension, H as in hypervisor.

127
0:06:54.760 --> 0:07:00.320
And this is an extension that's been added and is frozen, so it's something that is not

128
0:07:00.320 --> 0:07:04.180
going to change for supporting virtualization.

129
0:07:04.180 --> 0:07:09.620
So the mode that I've been adding is the H-HACE mode, the VS mode, and the VU mode.

130
0:07:09.620 --> 0:07:16.180
So you can see in this diagram you can run your application as usually in U-mode, and

131
0:07:16.180 --> 0:07:21.160
then you're going to have your hypervisor, your host kernel, when the X extension is

132
0:07:21.160 --> 0:07:25.000
enabled, it's going to run not on S mode, but on H-HACE mode.

133
0:07:25.000 --> 0:07:28.000
So hypervisor, supervisor mode.

134
0:07:28.000 --> 0:07:33.040
This is where your Linux KVM or Zen kind of thing are running.

135
0:07:33.040 --> 0:07:36.040
And then when you're going to create the virtual machine, the virtual machine is going to be

136
0:07:36.040 --> 0:07:41.240
split, if it's a full Linux virtual machine, it's going to be split into two different

137
0:07:41.240 --> 0:07:46.280
modes, the VU mode, the virtualized user mode, and the virtualized supervisor mode.

138
0:07:46.280 --> 0:07:50.460
So your guest kernel is going to run in a virtualized supervisor mode, and your guest

139
0:07:50.460 --> 0:07:54.960
applications are going to run in a virtualized user mode.

140
0:07:54.960 --> 0:07:57.680
All right.

141
0:07:57.680 --> 0:07:58.880
So confidential computing.

142
0:07:58.880 --> 0:08:06.000
I just did like a scratch course in five minutes of RISC-V, so I hope this makes sense.

143
0:08:06.000 --> 0:08:10.160
But anyways, I needed to do this to kind of explain where we want to go with confidential

144
0:08:10.160 --> 0:08:11.240
computing on RISC-V.

145
0:08:11.240 --> 0:08:18.800
So what we're defining currently in RISC-V for confidential computing is called the Aptie

146
0:08:18.800 --> 0:08:20.800
RISC-V specification.

147
0:08:20.800 --> 0:08:25.600
Aptie as in application, processor, trusted execution environment.

148
0:08:25.600 --> 0:08:29.880
So it's a technical group where everything, again, is open.

149
0:08:29.880 --> 0:08:32.360
So there's a GitHub repo for this technical group.

150
0:08:32.360 --> 0:08:37.160
All specifications are there, the discussions, the minik notes, everything.

151
0:08:37.160 --> 0:08:43.040
And it is not ratified yet, not frozen, so this is a work in progress.

152
0:08:43.040 --> 0:08:49.880
So again, feel free to come and join and help and provide some feedback on that specification.

153
0:08:49.880 --> 0:08:57.480
But it is aimed at becoming the reference confidential computing architecture for RISC-V.

154
0:08:57.480 --> 0:09:01.920
So it's currently in a pretty late state.

155
0:09:01.920 --> 0:09:08.160
It's going to be ratified, not ratified, but accepted pretty soon in a few months.

156
0:09:08.160 --> 0:09:14.000
But it's going to be the reference confidential computing architecture for RISC-V.

157
0:09:14.000 --> 0:09:21.880
It's not an ISA specification, so we don't add to the RISC-V set of instruction and architectural

158
0:09:21.880 --> 0:09:22.880
definitions.

159
0:09:22.880 --> 0:09:25.680
But we do identify a few ISA gaps.

160
0:09:25.680 --> 0:09:30.120
For example, what we call the confidential memory attributes, which I'm going to talk

161
0:09:30.120 --> 0:09:34.440
about later.

162
0:09:34.440 --> 0:09:39.280
And just to clarify things, because we talked about Aptie, and for example, there's an implementation

163
0:09:39.280 --> 0:09:42.000
of Aptie for RISC-V.

164
0:09:42.000 --> 0:09:48.200
The Aptie specification for RISC-V is not aiming at the same set of use cases.

165
0:09:48.200 --> 0:09:53.960
Aptie is really trying to do and support the same use cases as TDX, for those who are familiar

166
0:09:53.960 --> 0:09:59.700
with TDX, or SEV, for those who are familiar with this AMD technology.

167
0:09:59.700 --> 0:10:03.780
And basically, this specification is defining a new class of trusted execution environment

168
0:10:03.780 --> 0:10:04.980
for RISC-V.

169
0:10:04.980 --> 0:10:08.240
And these new class are trusted virtual machines.

170
0:10:08.240 --> 0:10:10.940
So same as TDX, so same as SEV.

171
0:10:10.940 --> 0:10:16.640
The goal is really to run full-blown virtual machine in a confidential computing environment,

172
0:10:16.640 --> 0:10:23.120
where you will have memory and data, confidentiality and integrity, as explained in the first

173
0:10:23.120 --> 0:10:24.120
talk.

174
0:10:24.120 --> 0:10:29.240
And the goal is really for people to take their existing workload, their existing virtual

175
0:10:29.240 --> 0:10:33.800
machine, their existing Kubernetes nodes, and move that into a confidential computing

176
0:10:33.800 --> 0:10:34.800
TE.

177
0:10:34.800 --> 0:10:41.120
The same way they're doing this, or they aim at doing this with SEV or TDX.

178
0:10:41.120 --> 0:10:47.120
So they're really two different set of use cases, and Aptie is aiming at this specific

179
0:10:47.120 --> 0:10:51.120
set of use cases.

180
0:10:51.120 --> 0:10:55.360
So there are a few architecture components that I'm going to talk about.

181
0:10:55.360 --> 0:11:04.400
A Aptie beats per heart, sorry, I didn't mention this, but a heart, H-A-R-T in RISC-V terminology,

182
0:11:04.400 --> 0:11:06.520
is actually a CPU core.

183
0:11:06.520 --> 0:11:08.640
It's a core, it's called a heart.

184
0:11:08.640 --> 0:11:11.160
There's a few components that I'm going to go through.

185
0:11:11.160 --> 0:11:16.520
The security manager, the TSM driver, there's a dependency on the hardware root of trust,

186
0:11:16.520 --> 0:11:23.840
and there's a structure, a non-ISA-specified structure called the memory tracking table.

187
0:11:23.840 --> 0:11:28.680
And to go through all these components and kind of explain what they are and how they're

188
0:11:28.680 --> 0:11:36.960
put together to reach the goal of memory and data protection and integrity guarantees when

189
0:11:36.960 --> 0:11:37.960
it's in use.

190
0:11:37.960 --> 0:11:44.440
I'm going to take an example of how, from a cold start of a RISC-V SOC, we could actually

191
0:11:44.440 --> 0:11:51.280
build a trusted virtual machine with the confidential computing architecture that I'm trying to describe.

192
0:11:51.280 --> 0:12:00.200
Okay, so we have a RISC-V SOC with a few components that are mandatory.

193
0:12:00.200 --> 0:12:05.160
We need an IOMMU, we need a root of trust, we need an MMU obviously.

194
0:12:05.160 --> 0:12:10.720
This is all dependent on the H extension on 64-bit RISC-V.

195
0:12:10.720 --> 0:12:16.240
It's basically RISC-V GC, which is the general purpose specification, plus compress, but

196
0:12:16.240 --> 0:12:19.400
we don't need compress, it's just the G part.

197
0:12:19.400 --> 0:12:26.560
But yeah, it's a full-blown 64-bit RISC-V SOC that's running there with an IOMMU.

198
0:12:26.560 --> 0:12:32.640
We do need and mandates the presence of a hardware root of trust, and we need some sort

199
0:12:32.640 --> 0:12:34.000
of memory protection.

200
0:12:34.000 --> 0:12:38.180
So an MMU, a memory checker, something like this.

201
0:12:38.180 --> 0:12:43.320
The first thing that the root of trust is going to measure and load is called the TSM

202
0:12:43.320 --> 0:12:44.320
driver.

203
0:12:44.320 --> 0:12:48.480
So that's the first component of this confidential computing architecture.

204
0:12:48.480 --> 0:12:54.280
And the TSM driver is the trusted component that runs in M mode, in Fermot mode, that's

205
0:12:54.280 --> 0:12:59.000
going to split the world in non-confidential and confidential.

206
0:12:59.000 --> 0:13:05.760
And the TSM driver is a confidential world switcher, and it's the component that basically

207
0:13:05.760 --> 0:13:13.040
toggles a bit in the RISC-V SOC, the AFTEE bit, to tell if the heart is currently running

208
0:13:13.040 --> 0:13:15.960
in confidential mode or non-confidential mode.

209
0:13:15.960 --> 0:13:21.180
So there is an AFTEE bit that is part of the specification that tells at any point in time

210
0:13:21.180 --> 0:13:27.400
if a specific RISC-V core, RISC-V heart, is running in confidential mode or non-confidential

211
0:13:27.400 --> 0:13:28.400
mode.

212
0:13:28.400 --> 0:13:31.960
And the TSM driver is the component that's going to make that switch, is the component

213
0:13:31.960 --> 0:13:33.560
that is going to toggle that switch.

214
0:13:33.560 --> 0:13:39.160
So it's part of the TCB, it's a trusted component, it's a software trusted component, and that

215
0:13:39.160 --> 0:13:41.320
runs in M mode and it does that.

216
0:13:41.320 --> 0:13:48.440
And basically the TSM driver is going to switch from, for example, non-confidential to confidential

217
0:13:48.440 --> 0:13:54.760
when something in non-confidential like a VMM or KVM or your Linux kernel is sending a

218
0:13:54.760 --> 0:14:02.280
specific TE call, which is an E call, basically a call that allows you to move from supervisor

219
0:14:02.280 --> 0:14:08.400
mode to machine mode, so basically from Linux kernel to TSM driver.

220
0:14:08.400 --> 0:14:13.720
The TSM driver is going to trap this and then is going to toggle the AFTEE bit, which means

221
0:14:13.720 --> 0:14:18.720
it's going to atomically switch the CPU into confidential mode, and then it's going to

222
0:14:18.720 --> 0:14:24.400
move to something called the TSM, the trusted security manager, the TE security manager,

223
0:14:24.400 --> 0:14:25.400
sorry.

224
0:14:25.400 --> 0:14:29.040
And to do that it calls the M-RET instruction and move to TSM.

225
0:14:29.040 --> 0:14:34.520
So we are in the kernel, the kernel makes an E call, the TSM driver toggles the CPU

226
0:14:34.520 --> 0:14:40.240
from non-confidential to confidential and then starts running the TSM, and we're going to

227
0:14:40.240 --> 0:14:42.760
talk about the TSM next.

228
0:14:42.760 --> 0:14:47.840
This is what the TSM driver is mostly about.

229
0:14:47.840 --> 0:14:51.720
The TSM driver, I'm going to talk about the TSM right after this, but the one very important

230
0:14:51.720 --> 0:14:56.040
thing that the TSM driver manages is called the memory tracking table.

231
0:14:56.040 --> 0:15:02.600
The memory tracking table is a piece of memory and the structure of this memory tracking

232
0:15:02.600 --> 0:15:08.240
table is not specified in the confidential computing specification.

233
0:15:08.240 --> 0:15:15.160
It is up to any implementation to decide what it puts in this memory tracking table.

234
0:15:15.160 --> 0:15:21.440
What the specs tells is what this memory tracking table is for, and this is what I'm going to

235
0:15:21.440 --> 0:15:22.600
explain now.

236
0:15:22.600 --> 0:15:29.640
The memory tracking table is enforcing, and just to take back, the memory tracking table

237
0:15:29.640 --> 0:15:31.120
leaves in confidential memory.

238
0:15:31.120 --> 0:15:38.200
So the memory tracking table leaves in a piece of memory that is protected from the non-confidential

239
0:15:38.200 --> 0:15:40.080
world to actually see or tamper with.

240
0:15:40.080 --> 0:15:45.340
So it's encrypted, protected, integrity protected memory.

241
0:15:45.340 --> 0:15:52.800
So the memory tracking table enforces the confidentiality memory attribute for each and

242
0:15:52.800 --> 0:15:55.020
every page on the system.

243
0:15:55.020 --> 0:15:58.200
So it's what we call a PMA page tracker.

244
0:15:58.200 --> 0:16:03.580
So it defines if any memory page is confidential or not.

245
0:16:03.580 --> 0:16:08.020
So you take a physical address, you give that to the MTT, to the memory tracking table,

246
0:16:08.020 --> 0:16:13.440
and the MTT tells you if this address belongs to a confidential page or a non-confidential

247
0:16:13.440 --> 0:16:15.360
page.

248
0:16:15.360 --> 0:16:19.960
So with this memory tracking table, any time you want, for example, the non-confidential

249
0:16:19.960 --> 0:16:25.760
world is trying to access physically a page, the memory tracking table is going to be used

250
0:16:25.760 --> 0:16:30.560
by the CPU to actually check if this page is confidential or non-confidential.

251
0:16:30.560 --> 0:16:34.800
If you're trying to access a confidential page from a non-confidential world, if you're

252
0:16:34.800 --> 0:16:41.440
trying to read memory from your trusted virtual machine from your VMM, from your QMU, from

253
0:16:41.440 --> 0:16:46.480
your KVM, then the memory tracking table is going to tell you this is a confidential page,

254
0:16:46.480 --> 0:16:49.840
and that's going to generate a CPU fault.

255
0:16:49.840 --> 0:16:53.000
And it gives you memory protection.

256
0:16:53.000 --> 0:16:58.600
Depending on how you want to implement memory encryption, basically, to protect your memory,

257
0:16:58.600 --> 0:17:04.500
the memory tracking table will be able to tell you which key you need to use to encrypt

258
0:17:04.500 --> 0:17:07.120
or decrypt that physical page.

259
0:17:07.120 --> 0:17:12.640
And you can decide how you want to implement this, how many keys you want to support, if

260
0:17:12.640 --> 0:17:18.720
you want to add one key per TBM or multiple keys, or it's up to the micro-architectural

261
0:17:18.720 --> 0:17:23.440
implementation of the specification to decide what it does with it.

262
0:17:23.440 --> 0:17:30.320
Okay, so the TSM driver managed the memory tracking table, which gives us memory protection

263
0:17:30.320 --> 0:17:32.440
and integrity.

264
0:17:32.440 --> 0:17:36.560
And the next thing the TSM driver is going to do is going to load and measure the next

265
0:17:36.560 --> 0:17:41.000
component, the next trusted component that now runs in less privileged mode, the TSM,

266
0:17:41.000 --> 0:17:42.920
the TE Security Manager.

267
0:17:42.920 --> 0:17:49.480
The TSM lives at the same level as the Linux kernel, as KVM, as the hypervisor, basically.

268
0:17:49.480 --> 0:17:52.600
But it lives in confidential work.

269
0:17:52.600 --> 0:18:00.200
It lives and runs out of confidential memory, and is only run when the RISC-V CPU is running

270
0:18:00.200 --> 0:18:07.120
with the ATEE bit on, which means it's running when it's in confidential mode.

271
0:18:07.120 --> 0:18:12.900
So the TSM, I don't know if people here are familiar with TDX, but there are some similar

272
0:18:12.900 --> 0:18:19.200
similarities here for those who know TDX, unfortunately.

273
0:18:19.200 --> 0:18:24.440
So TSM, it's the TE Security Manager.

274
0:18:24.440 --> 0:18:28.640
It's a trusted piece between the host VMM and the TVM.

275
0:18:28.640 --> 0:18:32.840
So the TVM is the trusted virtual machine that we're trying to build through those steps.

276
0:18:32.840 --> 0:18:38.720
And nothing from the confidential world can actually touch a trusted virtual machine without

277
0:18:38.720 --> 0:18:43.800
going through the trusted, the TE Security Manager, the TSM.

278
0:18:43.800 --> 0:18:50.060
One very important thing that the TSM does is it manages all the second stage page tables.

279
0:18:50.060 --> 0:18:58.600
So the page tables that allows you to translate TVM physical addresses to host physical addresses,

280
0:18:58.600 --> 0:19:03.480
those are managed by the TSM in confidential memory.

281
0:19:03.480 --> 0:19:09.880
So with the confidential computing implementation, KVM no longer manages the second stage page

282
0:19:09.880 --> 0:19:12.520
tables for the trusted virtual machine.

283
0:19:12.520 --> 0:19:17.560
It's all handled by the TSM, which is trusted in confidential memory.

284
0:19:17.560 --> 0:19:19.960
So that's a very important piece of TSM.

285
0:19:19.960 --> 0:19:24.560
And something really important to understand is that it is a passive component.

286
0:19:24.560 --> 0:19:29.760
So it implements security services that are going to be called by the host VMM.

287
0:19:29.760 --> 0:19:31.320
It doesn't run by itself.

288
0:19:31.320 --> 0:19:36.800
It's not something that schedules a TVM or handles interrupts.

289
0:19:36.800 --> 0:19:37.800
It doesn't do anything like this.

290
0:19:37.800 --> 0:19:42.480
It just replies to security requests that are coming from the host.

291
0:19:42.480 --> 0:19:45.360
The host is in control of the machine.

292
0:19:45.360 --> 0:19:47.680
It's not in control of the trusted virtual machine.

293
0:19:47.680 --> 0:19:49.960
It needs to go through the TSM.

294
0:19:49.960 --> 0:19:54.560
And the TSM is only responsible for this, getting security requests from the host, from

295
0:19:54.560 --> 0:19:58.000
the host VMM, and replying to it.

296
0:19:58.000 --> 0:20:00.740
And we do have an open source implementation for this.

297
0:20:00.740 --> 0:20:02.780
So it's called Salus.

298
0:20:02.780 --> 0:20:04.600
It's on GitHub again.

299
0:20:04.600 --> 0:20:09.720
And it basically implements everything that I just described, plus a lot more different

300
0:20:09.720 --> 0:20:10.720
things.

301
0:20:10.720 --> 0:20:11.940
It's all in the specification.

302
0:20:11.940 --> 0:20:14.240
And it's all open source.

303
0:20:14.240 --> 0:20:16.720
So go there.

304
0:20:16.720 --> 0:20:18.760
Yes.

305
0:20:18.760 --> 0:20:22.640
The TSM also manages the NTT.

306
0:20:22.640 --> 0:20:27.740
So whenever the TSM adds a page to a trusted virtual machine, it's going to add entries

307
0:20:27.740 --> 0:20:29.160
to the NTT.

308
0:20:29.160 --> 0:20:33.240
And it's a little bit more complicated than this because it needs to go through the TSM

309
0:20:33.240 --> 0:20:34.240
driver.

310
0:20:34.240 --> 0:20:39.640
But basically, the NTT is something that is owned by the TSM driver and by the TSM.

311
0:20:39.640 --> 0:20:41.200
OK.

312
0:20:41.200 --> 0:20:44.200
So TSM driver started.

313
0:20:44.200 --> 0:20:45.560
It loaded the TSM.

314
0:20:45.560 --> 0:20:51.160
At some point, we have a host OS by Linux kernel with KVM that starts.

315
0:20:51.160 --> 0:20:54.360
It boots some non-confidential virtual machine.

316
0:20:54.360 --> 0:21:00.600
And it's going to be, well, at some point, someone is going to be starting a trusted

317
0:21:00.600 --> 0:21:04.440
virtual machine, a virtual machine that runs in confidential world.

318
0:21:04.440 --> 0:21:11.720
And to do that, there's a set of ABIs between the host VMM on the left, the non-confidential

319
0:21:11.720 --> 0:21:14.520
world, and the TSM.

320
0:21:14.520 --> 0:21:16.200
And that goes through the TSM driver.

321
0:21:16.200 --> 0:21:22.140
The TSM driver is the trusted piece that actually proxies each and every request from the non-confidential

322
0:21:22.140 --> 0:21:26.240
world to the confidential world, to the TSM, basically.

323
0:21:26.240 --> 0:21:32.760
And those are called the T-E host ABIs because there are, it's a set of binary interfaces

324
0:21:32.760 --> 0:21:39.480
that are called from the host to actually manage and request security features from

325
0:21:39.480 --> 0:21:41.120
the TSM.

326
0:21:41.120 --> 0:21:42.700
Everything is proxied through a TSM driver.

327
0:21:42.700 --> 0:21:48.360
So the TSM driver traps the host sending E calls, SBI calls.

328
0:21:48.360 --> 0:21:53.560
And basically, it traps the calls from the host VMM, from KVM, for example.

329
0:21:53.560 --> 0:21:59.480
And it then schedules the TSM to actually run and handle those calls.

330
0:21:59.480 --> 0:22:07.520
So a few examples, creating and destroying a TVM context, converting non-confidential

331
0:22:07.520 --> 0:22:14.720
memory to confidential, and vice versa, mapping pages from non-confidential world to a TVM.

332
0:22:14.720 --> 0:22:20.000
All those security features, they are requested from the host VMM, from KVM, and they are

333
0:22:20.000 --> 0:22:21.760
managed by the TSM.

334
0:22:21.760 --> 0:22:29.520
So KVM itself, obviously, we don't want KVM to actually take a page and add that to a

335
0:22:29.520 --> 0:22:31.620
TVM, a trusted virtual machine address space.

336
0:22:31.620 --> 0:22:37.440
It has to go through the TSM, which manages all the page tables for this TVM.

337
0:22:37.440 --> 0:22:43.520
And for example, if we want to create a TVM, which is what we're aiming or trying to do

338
0:22:43.520 --> 0:22:46.080
here, it goes through a few steps.

339
0:22:46.080 --> 0:22:54.000
And all those steps here map to an actual T, the host ABI, the ABI between KVM and TSM.

340
0:22:54.000 --> 0:22:55.160
And there are basically seven steps.

341
0:22:55.160 --> 0:22:57.760
The first one is to create a TVM context.

342
0:22:57.760 --> 0:23:04.360
So KVM will ask for having a context so that it can use that context and then start configuring

343
0:23:04.360 --> 0:23:05.480
the TVM.

344
0:23:05.480 --> 0:23:12.840
The next thing the KVM needs to do is to allocate some memory from physical pages to the TSM

345
0:23:12.840 --> 0:23:18.000
so that the TSM can actually build the second stage page tables for the TVM that it's going

346
0:23:18.000 --> 0:23:19.040
to create.

347
0:23:19.040 --> 0:23:21.840
Those second stage page tables are living in confidential memory.

348
0:23:21.840 --> 0:23:22.840
So they cannot be handled.

349
0:23:22.840 --> 0:23:26.920
They must not be handled by KVM, by the host VMM.

350
0:23:26.920 --> 0:23:33.640
So KVM donates pages to TSM, and the TSM is going to use that to build those page tables.

351
0:23:33.640 --> 0:23:37.080
It's not meant to be used by the TVM memory.

352
0:23:37.080 --> 0:23:42.600
It's meant to actually track the second stage page tables for the TVM.

353
0:23:42.600 --> 0:23:50.160
Then KVM is going to tell TSM that some memory region needs to be reserved for the TVM.

354
0:23:50.160 --> 0:23:53.240
So that's basically the TVM address space.

355
0:23:53.240 --> 0:23:59.000
And then KVM is going to allocate pages and move those pages from non-confidential to confidential

356
0:23:59.000 --> 0:24:05.120
and ask TSM to map those pages in the memory region that it just asked for creation in

357
0:24:05.120 --> 0:24:08.320
step number three.

358
0:24:08.320 --> 0:24:14.200
The next thing that KVM needs to do is to create TVM CPUs.

359
0:24:14.200 --> 0:24:22.280
Because basically all the CPU state is contained and managed in confidential memory as well.

360
0:24:22.280 --> 0:24:26.920
All the CPU state that the TVM is going to run on top of is managed by the TSM in confidential

361
0:24:26.920 --> 0:24:33.400
memory so that KVM does not see a TVM general purpose registers values and cannot mess with

362
0:24:33.400 --> 0:24:34.840
it, obviously.

363
0:24:34.840 --> 0:24:37.840
So this is all handled by the TSM as well.

364
0:24:37.840 --> 0:24:44.960
And KVM finalize the TVM and eventually ask TSM to start running the TVM.

365
0:24:44.960 --> 0:24:50.040
And this is where your TVM is starting to run off confidential memory with a VCPU which

366
0:24:50.040 --> 0:24:56.520
state is also kept in confidential memory and protected.

367
0:24:56.520 --> 0:24:57.680
So we have this.

368
0:24:57.680 --> 0:25:03.480
TSM just created a TVM upon the host VM request.

369
0:25:03.480 --> 0:25:06.480
And the TVM can also talk back to the TSM.

370
0:25:06.480 --> 0:25:09.400
The TVM never talks back directly to the host VM.

371
0:25:09.400 --> 0:25:12.120
It only talks back to the TSM.

372
0:25:12.120 --> 0:25:19.560
The same way a non-confidential VM exit would be trapped by the host VM, a confidential

373
0:25:19.560 --> 0:25:26.160
TVM VM exit, for example, or any service that the confidential VM needs will be managed

374
0:25:26.160 --> 0:25:29.200
by the TSM driver or the TSM.

375
0:25:29.200 --> 0:25:34.440
So there are a set of ABIs between the TVM and the TSM.

376
0:25:34.440 --> 0:25:39.880
And for example, I think that I didn't talk about, but attestation is something that is

377
0:25:39.880 --> 0:25:41.920
being requested by the TVM.

378
0:25:41.920 --> 0:25:45.000
So the TVM is going to ask for an attestation evidence.

379
0:25:45.000 --> 0:25:51.320
And this is going to be serviced by the TSM through those ABIs here between the TVM and

380
0:25:51.320 --> 0:25:53.000
the TSM.

381
0:25:53.000 --> 0:25:58.720
So the TVM asks for an attestation report, a signed attestation report, an evidence that

382
0:25:58.720 --> 0:26:03.400
is going to send to a line party to run the full attestation dance whenever it wants to

383
0:26:03.400 --> 0:26:04.840
do that.

384
0:26:04.840 --> 0:26:10.000
And the part of the specification, the confidential computing specification, defines how this

385
0:26:10.000 --> 0:26:17.280
attestation flow is going to be running and more importantly, how the attestation evidence

386
0:26:17.280 --> 0:26:22.560
is going to be built out of which measurements and how this is going to be formatted.

387
0:26:22.560 --> 0:26:30.140
Unlike TDX or SGX or SEV, we do use a standard format.

388
0:26:30.140 --> 0:26:34.520
We use X509 certificates for building an evidence.

389
0:26:34.520 --> 0:26:42.800
So each layer on the chain here from the hardware to the TSM loads, measure, and certificates

390
0:26:42.800 --> 0:26:43.800
the next layer.

391
0:26:43.800 --> 0:26:48.080
So this is based on a specification called TCG DICE.

392
0:26:48.080 --> 0:26:51.600
It's a layered specification for building attestation evidence.

393
0:26:51.600 --> 0:26:56.280
And this is what we use with the RISC-V confidential computing implementation.

394
0:26:56.280 --> 0:27:02.480
Usually the TVM, when it asks for attestation evidence, it will get a certificate from the

395
0:27:02.480 --> 0:27:03.480
TSM.

396
0:27:03.480 --> 0:27:09.160
So the TSM builds the certificate with the entire attestation evidence that is part of

397
0:27:09.160 --> 0:27:13.080
the certificate as an X509 extension.

398
0:27:13.080 --> 0:27:17.480
And this certificate is routed back all the way back to the hardware world trust for a

399
0:27:17.480 --> 0:27:23.240
relying party to then verify and attest or not.

400
0:27:23.240 --> 0:27:25.800
Last thing I want to talk about is IO.

401
0:27:25.800 --> 0:27:30.400
I didn't talk about IO because it's a chapter on its own.

402
0:27:30.400 --> 0:27:32.520
There are two kinds of virtual machine IO.

403
0:27:32.520 --> 0:27:37.960
There's the pyro virtualized IO, also known as VRTIO most of the time.

404
0:27:37.960 --> 0:27:46.640
Doing VRTIO with confidential computing, confidential VM, TDX, SEV, or RISC-V is challenging because

405
0:27:46.640 --> 0:27:51.840
basically the VRTIO device implementation is done by the host VM.

406
0:27:51.840 --> 0:27:56.320
So typically your virtual IONet is going to be done by QMU or by an external process running

407
0:27:56.320 --> 0:27:58.840
out of the host user, for example.

408
0:27:58.840 --> 0:28:03.600
So you must share memory between your TVM and your host VM.

409
0:28:03.600 --> 0:28:05.920
So it's complex.

410
0:28:05.920 --> 0:28:10.360
It's actually not very efficient because you need a software IOTLB and you need to do a

411
0:28:10.360 --> 0:28:16.440
buffer bouncing between confidential and non-confidential to be able to share stuff.

412
0:28:16.440 --> 0:28:22.360
You need to harden your guests so that you can actually somehow trust the host implementation,

413
0:28:22.360 --> 0:28:23.360
et cetera.

414
0:28:23.360 --> 0:28:25.120
So there's a lot of discussion around this.

415
0:28:25.120 --> 0:28:29.760
If you go to the Linux Coco mailing list, it's a Linux kernel mailing list.

416
0:28:29.760 --> 0:28:32.520
There's a lot of heated discussion right now.

417
0:28:32.520 --> 0:28:40.840
And the other IO, surprisingly, the other IO form is direct assignment.

418
0:28:40.840 --> 0:28:42.360
That is even more complex.

419
0:28:42.360 --> 0:28:46.600
Direct assignment basically means you take a PCI device that you don't know, that you

420
0:28:46.600 --> 0:28:53.320
know nothing about, and you add that to your TE trusted compute base.

421
0:28:53.320 --> 0:28:59.400
Basically you're going to say, I want my NVIDIA GPU to be part of my trusted virtual machine.

422
0:28:59.400 --> 0:29:04.720
And to do that, you basically need to attest and authenticate the device that you want

423
0:29:04.720 --> 0:29:06.800
to plug into your TVM.

424
0:29:06.800 --> 0:29:12.160
So there's a lot of specification, not a lot, but a few specification, PCI specification

425
0:29:12.160 --> 0:29:17.960
called T-disp, an IDE for protecting the ID link between your device and your TVM.

426
0:29:17.960 --> 0:29:20.040
You need collaboration from the IMU.

427
0:29:20.040 --> 0:29:21.960
It's a very complex topic.

428
0:29:21.960 --> 0:29:25.080
The first one, Virtio.1, is very much in progress.

429
0:29:25.080 --> 0:29:29.880
The direct assignment one, it's still being defined.

430
0:29:29.880 --> 0:29:33.440
So I rushed that through.

431
0:29:33.440 --> 0:29:34.440
I'm done.

432
0:29:34.440 --> 0:29:35.440
Thanks a lot for listening.

433
0:29:35.440 --> 0:29:36.840
I hope it was useful.

434
0:29:36.840 --> 0:29:37.840
Thank you, Seong-ho.

435
0:29:37.840 --> 0:29:46.800
I have time for questions.


1
0:00:00.000 --> 0:00:09.360
So, good morning, ladies and gentlemen.

2
0:00:09.360 --> 0:00:12.360
I'm Pavel Pisha from Chief Technical University.

3
0:00:12.360 --> 0:00:16.880
I teach computer architectures for something like 20 years.

4
0:00:16.880 --> 0:00:25.320
From year 2000, we followed the foremost Professor Hennessey-Patterson book about the computer

5
0:00:25.320 --> 0:00:26.320
architectures.

6
0:00:26.320 --> 0:00:33.360
And we have used the original Mipsit simulator, which has been distributed with the book,

7
0:00:33.360 --> 0:00:35.240
but it has got dated.

8
0:00:35.240 --> 0:00:41.440
So we decided we need to do something for our students to have a better experience.

9
0:00:41.440 --> 0:00:47.760
And we started first with the Mips simulator, and then we switched to RISC-V.

10
0:00:47.760 --> 0:00:52.460
And this was work, it has this work of the Yakublu Park, our student.

11
0:00:52.460 --> 0:01:07.080
So I hope that everything is working, and I pass him a mic and the stuff.

12
0:01:07.080 --> 0:01:10.560
Okay?

13
0:01:10.560 --> 0:01:21.400
Okay, so good morning.

14
0:01:21.400 --> 0:01:26.560
Over the past decades, computer engineers have been creating faster and faster computers.

15
0:01:26.560 --> 0:01:32.840
Meanwhile, many software engineers kept writing slower and slower software.

16
0:01:32.840 --> 0:01:41.120
And in many areas, this is fine, but in other ones, we need to process pretty much insane

17
0:01:41.120 --> 0:01:44.200
amount of data often in real time.

18
0:01:44.200 --> 0:01:51.320
And to do that, we need really efficient software that can exploit the capabilities of the hardware.

19
0:01:51.320 --> 0:01:56.260
And only software engineers who understand the principles of the hardware can do that.

20
0:01:56.260 --> 0:02:02.640
So to ensure we will have such software engineers, we need to teach our undergraduate students

21
0:02:02.640 --> 0:02:06.320
at least the basics of computer architectures.

22
0:02:06.320 --> 0:02:13.400
And because nobody wants to learn with pen and pencil anymore, we started using graphical

23
0:02:13.400 --> 0:02:14.400
simulator.

24
0:02:14.400 --> 0:02:22.360
So, and he does it more.

25
0:02:22.360 --> 0:02:30.120
Yes.

26
0:02:30.120 --> 0:02:34.180
So we started with a MIPs simulator, as I mentioned, which was shipped with the Hennessey

27
0:02:34.180 --> 0:02:35.480
Patterson books.

28
0:02:35.480 --> 0:02:39.840
However, it had very limited features, and it only worked on Windows.

29
0:02:39.840 --> 0:02:48.680
So in 2019, Carl Kochi, who is sitting over there, created QTMIPS, graphical simulator

30
0:02:48.680 --> 0:02:51.640
of the MIPs maker architecture.

31
0:02:51.640 --> 0:02:55.880
And it was continued with a lot of work of Dr. Picha here.

32
0:02:55.880 --> 0:03:02.800
And in 2002, myself, my colleague, Max Holman, and again a lot of work from Dr. Picha, we

33
0:03:02.800 --> 0:03:08.400
have switched the simulator to RISC-V so that we could switch all the undergraduate computer

34
0:03:08.400 --> 0:03:11.320
architecture teaching to RISC-V.

35
0:03:11.320 --> 0:03:12.760
So we are there.

36
0:03:12.760 --> 0:03:18.440
The simulator is licensed under GPL-3, and it's native simulator.

37
0:03:18.440 --> 0:03:21.120
We are running under QT5 and 6.

38
0:03:21.120 --> 0:03:24.840
It's developed and available on GitHub.

39
0:03:24.840 --> 0:03:31.480
And to better collaborate on the materials, we have joined forces with our sister faculty.

40
0:03:31.480 --> 0:03:37.480
We are from the faculty of electrical engineering, and they are the faculty of information technology.

41
0:03:37.480 --> 0:03:41.200
And we have created what we call computer architectures education projects.

42
0:03:41.200 --> 0:03:47.200
And you can find all the materials that we have recorded, lectures, slides.

43
0:03:47.200 --> 0:03:49.160
You can find it there.

44
0:03:49.160 --> 0:03:54.880
And furthermore, to collaborate with as many people as possible, the university has joined

45
0:03:54.880 --> 0:03:58.440
the RISC-V foundation lately.

46
0:03:58.440 --> 0:04:06.280
So the simulator is called QTR-SIM, and it is currently used by our university, the technical

47
0:04:06.280 --> 0:04:11.560
university in grads, University of Colorado at Colorado Springs, and University of Porto.

48
0:04:11.560 --> 0:04:16.020
The previous MIPs version is still used by the Charles University in Prague and National

49
0:04:16.020 --> 0:04:19.480
Capitalist in University of Athens.

50
0:04:19.480 --> 0:04:24.780
And this talk will focus on the teaching and user perspective.

51
0:04:24.780 --> 0:04:30.680
If you are interested about how it works inside, at least a little bit of it, you can look

52
0:04:30.680 --> 0:04:38.920
up the talk that we gave at the RISC-V International Academy and Engineering Special Interest Group.

53
0:04:38.920 --> 0:04:45.040
So before I dive in, as Dr. Picha mentioned, you can just open this link and follow the

54
0:04:45.040 --> 0:04:47.800
presentation with the simulator running in your browser.

55
0:04:47.800 --> 0:04:50.320
It is in chat.

56
0:04:50.320 --> 0:04:52.160
Great.

57
0:04:52.160 --> 0:04:55.440
So let's dive in.

58
0:04:55.440 --> 0:05:00.320
When we get students who have never heard anything about computers before, we need to

59
0:05:00.320 --> 0:05:02.000
start really simple.

60
0:05:02.000 --> 0:05:09.120
So what we do is that we start with a very simple single cycle microarchitecture, and

61
0:05:09.120 --> 0:05:12.660
we show them how basic instructions are processed there.

62
0:05:12.660 --> 0:05:14.800
So this is the simulator.

63
0:05:14.800 --> 0:05:16.680
This is how it looks when you open it.

64
0:05:16.680 --> 0:05:23.600
So we will hit no pipeline and no cache to get started, and hit start empty because we

65
0:05:23.600 --> 0:05:31.560
will use one of the examples provided, so file examples and simple load and store work.

66
0:05:31.560 --> 0:05:33.720
As you can see, the program is really simple.

67
0:05:33.720 --> 0:05:39.800
It just loads from one part of memory, stores into another, and then goes into a loop using

68
0:05:39.800 --> 0:05:41.460
branch instruction.

69
0:05:41.460 --> 0:05:45.720
So this is the basic view that we start with.

70
0:05:45.720 --> 0:05:51.400
And on the right side, you can see detail of the program memory with address of each

71
0:05:51.400 --> 0:05:57.520
instruction, hexadecimal code of the instruction, and the disassembled instruction itself, where

72
0:05:57.520 --> 0:06:03.360
the last two columns can be edited directly in this view by double clicking and writing

73
0:06:03.360 --> 0:06:07.040
the instruction or pasting the code.

74
0:06:07.040 --> 0:06:14.240
And furthermore, the left-mode column is a place where you can set breakpoints, so you

75
0:06:14.240 --> 0:06:20.160
can use it like a GDB debugger, or at least the simplest part of that.

76
0:06:20.160 --> 0:06:26.880
And now we can move to the heart of the simulator, and that is the visualization of the pipeline.

77
0:06:26.880 --> 0:06:32.240
So if you look closer, on the left, we start with the program counter, program memory,

78
0:06:32.240 --> 0:06:34.320
and circuits to update the program counter.

79
0:06:34.320 --> 0:06:40.960
We load the instruction, and here you can see the hexadecimal value of the instruction

80
0:06:40.960 --> 0:06:46.240
shown on the bus, and it gets to the control unit, where we send all the control signals

81
0:06:46.240 --> 0:06:47.800
that we need.

82
0:06:47.800 --> 0:06:56.240
So we are showing the low-vote instruction, so we need to send the data from memory to

83
0:06:56.240 --> 0:06:59.240
registers.

84
0:06:59.240 --> 0:07:06.760
We need to read the memory, and we will need immediate value for the arithmetical and logical

85
0:07:06.760 --> 0:07:08.600
unit.

86
0:07:08.600 --> 0:07:13.480
Right here we can see mechanisms for resolving branches, but this is low-vote instruction,

87
0:07:13.480 --> 0:07:15.880
so I think there's a thing there.

88
0:07:15.880 --> 0:07:21.360
And here is our arithmetical and logical unit, which has two possible inputs, either from

89
0:07:21.360 --> 0:07:30.040
registers or from PC, and the other one has higher value from registers or from immediate

90
0:07:30.040 --> 0:07:33.640
decode.

91
0:07:33.640 --> 0:07:39.240
Here we get the requested operation of the allow, and here we get the signal whether

92
0:07:39.240 --> 0:07:42.560
the result was zero for branching.

93
0:07:42.560 --> 0:07:49.720
And finally, here we have the data memory, with address, and data to be written.

94
0:07:49.720 --> 0:07:55.280
So we start executing, and we see that the instruction low-vote was highlighted, and

95
0:07:55.280 --> 0:08:02.960
in the register view that appeared up there, we see that value one through eight was written

96
0:08:02.960 --> 0:08:06.360
into the register bank, which is highlighted by the red color.

97
0:08:06.360 --> 0:08:11.600
If we continue, we move to the store-vote instruction, and now the value needed to be

98
0:08:11.600 --> 0:08:14.560
red, so it's blue now.

99
0:08:14.560 --> 0:08:24.160
And if we go back to detail of the view, we see that we read that value from register,

100
0:08:24.160 --> 0:08:29.040
and we are sending it by this bar to the data memory to be stored.

101
0:08:29.040 --> 0:08:34.200
We also read the address from the immediate decode, and we are sending that to the arithmetical

102
0:08:34.200 --> 0:08:39.200
and logical unit to be added to a register, which is in fact zero, so we are just sending

103
0:08:39.200 --> 0:08:43.840
the value to the memory, and now the memory can write.

104
0:08:43.840 --> 0:08:46.720
So let's see what happened in the memory.

105
0:08:46.720 --> 0:08:52.600
Here we can see the address four or four, with the value written, so it corresponds

106
0:08:52.600 --> 0:08:57.520
to the address we have here and to value we have there, and right above it, we can see

107
0:08:57.520 --> 0:09:01.960
the place where we read the value from.

108
0:09:01.960 --> 0:09:07.040
So speaking of the memory view, right now we are working with boards, but we can work

109
0:09:07.040 --> 0:09:13.640
with other sizes, so you can switch the view for the unit to be either word, half-word,

110
0:09:13.640 --> 0:09:19.880
or byte, which will work with respect to both little and big ndns.

111
0:09:19.880 --> 0:09:25.000
And once we add cache, which will be in a moment, we can switch the memory view between

112
0:09:25.000 --> 0:09:30.640
direct view of the memory and view where we are looking through the cache, so we will

113
0:09:30.640 --> 0:09:34.360
see also the cache data.

114
0:09:34.360 --> 0:09:41.520
Now we move to last instruction of Verlongue program, that is the branch equal instruction,

115
0:09:41.520 --> 0:09:48.520
and we will see that we take the destination from immediate, it's negative, so we are jumping

116
0:09:48.520 --> 0:09:49.680
back.

117
0:09:49.680 --> 0:09:55.480
We add it to the program counter, and here we send it back to the program counter.

118
0:09:55.480 --> 0:10:01.880
In the control unit now, the signal for branching, for the most generic one, is active, and we

119
0:10:01.880 --> 0:10:08.780
see that the branch resolving mechanism determines that the branch should be taken.

120
0:10:08.780 --> 0:10:16.160
So we go to the program counter, and instead of taking the program counter plus four, we

121
0:10:16.160 --> 0:10:22.040
are now instructed to switch this multiplexer and take the value computed by the arithmetical

122
0:10:22.040 --> 0:10:23.420
and logical unit.

123
0:10:23.420 --> 0:10:30.000
So here we have detail of the program counter and the register itself in the pipeline.

124
0:10:30.000 --> 0:10:37.000
And as you can see, we continue to the load bar instruction so that we can keep running

125
0:10:37.000 --> 0:10:39.640
in a loop in this example.

126
0:10:39.640 --> 0:10:45.080
So this is a very basic example just for this presentation, but it gives you an idea how

127
0:10:45.080 --> 0:10:48.000
we start with the simple processor.

128
0:10:48.000 --> 0:10:54.280
And when students have idea what the virus are doing and what it all means, we can start

129
0:10:54.280 --> 0:10:58.240
speaking about how to make the CPU faster.

130
0:10:58.240 --> 0:11:03.400
And what we find out is that the memory is slow, so we want to cache it.

131
0:11:03.400 --> 0:11:07.800
However, that's not that simple, there are many ways to cache it, we can cache data,

132
0:11:07.800 --> 0:11:14.080
we can cache instructions, we can choose different sizes of the caches.

133
0:11:14.080 --> 0:11:17.680
And if you do it wrong, it will be worse than doing nothing.

134
0:11:17.680 --> 0:11:20.800
So we really need to think about that.

135
0:11:20.800 --> 0:11:26.120
So we switch to the second option in the configuration and add in time empty.

136
0:11:26.120 --> 0:11:33.040
But this time, we will hit the button up there, which will open integrated editor with syntax

137
0:11:33.040 --> 0:11:35.320
highlight and integrated assembler.

138
0:11:35.320 --> 0:11:38.800
The other options are to open file, to save file, close file.

139
0:11:38.800 --> 0:11:44.200
This is the important one, this is to run the assembler and upload it to memory.

140
0:11:44.200 --> 0:11:50.760
And if you have some more complex project, you can even invoke external make file, except

141
0:11:50.760 --> 0:11:54.560
for web assembler where there is no make.

142
0:11:54.560 --> 0:12:03.000
So we insert a simple selection sort so that you will use, for example, I put it in a

143
0:12:03.000 --> 0:12:04.960
free column so that we can see the program.

144
0:12:04.960 --> 0:12:11.160
But just a simple selection sort was important here that we have data that will be put into

145
0:12:11.160 --> 0:12:18.440
the L file and later start into memory and that will be the data that we want to start.

146
0:12:18.440 --> 0:12:23.880
So we save the file so that we don't lose it and we move to the memory view.

147
0:12:23.880 --> 0:12:27.320
Right here you can see the data that we have inputted.

148
0:12:27.320 --> 0:12:33.120
And on the right side, new windows opens and it's the detail of the data cache.

149
0:12:33.120 --> 0:12:40.240
It has two parts, statistics of the cache performance and it has very detailed view of

150
0:12:40.240 --> 0:12:46.680
the internal structure of the cache and the data that are there right now.

151
0:12:46.680 --> 0:12:49.840
So if we start running, the cache was empty.

152
0:12:49.840 --> 0:12:54.160
So of course, we need to edit and we will miss.

153
0:12:54.160 --> 0:12:58.680
And we will continue adding the value and right now the cache is full.

154
0:12:58.680 --> 0:13:04.840
So first decision that the students need to understand is what shall we edit?

155
0:13:04.840 --> 0:13:14.440
So right now there is random choice so it evicts the first one and we continue running.

156
0:13:14.440 --> 0:13:19.640
And right now the selection sort will start placing values where they should be.

157
0:13:19.640 --> 0:13:25.600
So it moves the value number one to the first one and you see the yellow highlight shows

158
0:13:25.600 --> 0:13:30.600
us that the value is now written in the cache and the cache is dirty.

159
0:13:30.600 --> 0:13:36.920
So right now the cache is using write back policy just to show you the highlight.

160
0:13:36.920 --> 0:13:41.360
And we can continue and now we switch one with five.

161
0:13:41.360 --> 0:13:46.680
And there was a simple example so the array is now sorted but we still need to go over

162
0:13:46.680 --> 0:13:52.280
it because the CPU doesn't see that, it needs to check it.

163
0:13:52.280 --> 0:13:57.320
And because we use the write back policy we also need to run fence instruction to make

164
0:13:57.320 --> 0:14:00.000
sure that everything is stored back to the memory.

165
0:14:00.000 --> 0:14:04.240
So you see there is no highlight anymore and the cache is empty.

166
0:14:04.240 --> 0:14:09.520
And this is a time where we should look at the performance data and we will see that

167
0:14:09.520 --> 0:14:12.400
we have quite an improvement.

168
0:14:12.400 --> 0:14:17.360
Of course, it depends on how fast memory we have and fast cache we have.

169
0:14:17.360 --> 0:14:24.600
So in the configuration you can set the penalties for hits and misses so that this data will

170
0:14:24.600 --> 0:14:28.280
look according to what you need.

171
0:14:28.280 --> 0:14:31.120
So this is the configuration of the data cache.

172
0:14:31.120 --> 0:14:37.480
You can see that we can select different shape of the cache which means number of sets, block

173
0:14:37.480 --> 0:14:42.680
size, degree of associativity and then we have two policies, replacement policy which

174
0:14:42.680 --> 0:14:48.040
is out of random, last recently used or least frequently used.

175
0:14:48.040 --> 0:14:53.280
And write back policy which can be, you can see write back write through, two options

176
0:14:53.280 --> 0:14:55.000
there.

177
0:14:55.000 --> 0:15:00.280
So here is how the detail of the shape of the cache looks for two different configurations

178
0:15:00.280 --> 0:15:06.360
which in fact have the same amount of data there but they will probably have quite different

179
0:15:06.360 --> 0:15:13.640
performance and also your right one, yeah, your right one, it's way more complicated

180
0:15:13.640 --> 0:15:19.560
so the students can examine what this will do to their particular programs and data loads

181
0:15:19.560 --> 0:15:23.640
that they will have.

182
0:15:23.640 --> 0:15:28.760
Of course we have also program cache and I have added this very stupid design where we

183
0:15:28.760 --> 0:15:36.160
have just one cell and well in program you never go to the same, other device so you

184
0:15:36.160 --> 0:15:40.600
can see that we always missed and it's actually worse than doing nothing.

185
0:15:40.600 --> 0:15:44.360
So just an example of that.

186
0:15:44.360 --> 0:15:50.760
And I mentioned that the windows can just appear so if you prepare some example code

187
0:15:50.760 --> 0:15:56.360
for students we can insert special pragmas to make the windows appear so that the students

188
0:15:56.360 --> 0:16:02.000
who have not seen the simulator before can just start with all the tools they need so

189
0:16:02.000 --> 0:16:08.880
we can show any part, we can focus address in memory and so on.

190
0:16:08.880 --> 0:16:15.800
So now we have improved the speed of the memory and we look at the CPU again and we find out

191
0:16:15.800 --> 0:16:20.500
that most of the silicon is just lying there doing nothing most of the time.

192
0:16:20.500 --> 0:16:28.600
So we want to utilize it better so we see that most of the parts are somewhat independent

193
0:16:28.600 --> 0:16:32.360
so we split it into five parts.

194
0:16:32.360 --> 0:16:38.760
So let's go to the third option we will choose pipeline without cache and you can see that

195
0:16:38.760 --> 0:16:45.720
the image got somewhat more complicated however if you remember the previous it's all the

196
0:16:45.720 --> 0:16:47.000
same.

197
0:16:47.000 --> 0:16:52.520
So students already invested some effort into understanding what the image was supposed

198
0:16:52.520 --> 0:16:58.200
to mean so we don't want to move things around we are just adding the minimum amount of things

199
0:16:58.200 --> 0:17:02.000
that we need so that we can continue with the more complex stuff.

200
0:17:02.000 --> 0:17:09.240
So you can see we display all the instructions in each stage of the pipeline we are adding

201
0:17:09.240 --> 0:17:17.640
the interstage registers and the colors are not random we are also using that to show

202
0:17:17.640 --> 0:17:22.780
but which instructions correspond to each stage of the pipeline in the program view

203
0:17:22.780 --> 0:17:30.720
so you can see all the stalls and branches nicely as they progress through the pipeline

204
0:17:30.720 --> 0:17:38.880
and of course we needed to add animated windows to each stage of the pipeline for each file

205
0:17:38.880 --> 0:17:45.680
for both control and data that we have and now we find out that this is not all we need

206
0:17:45.680 --> 0:17:51.880
to do because up until now we assume that okay we process one instruction instruction

207
0:17:51.880 --> 0:17:57.520
is done we continue but right now we start processing instruction but it will take what

208
0:17:57.520 --> 0:18:04.320
former cycles because before we get the result so we have something that's called data hazards

209
0:18:04.320 --> 0:18:09.680
and that means that if you do nothing we will get all the data because the data from the

210
0:18:09.680 --> 0:18:17.960
instruction that we depend on is not already yet so we can have hazards spanning two cycles

211
0:18:17.960 --> 0:18:24.320
in the next instruction and the hazards spanning one cycle in the instruction after technically

212
0:18:24.320 --> 0:18:29.880
there is also hazard in the instruction that is after that but this is something that we

213
0:18:29.880 --> 0:18:34.520
can solve inside the register file without breaking the abstraction of the pipeline so

214
0:18:34.520 --> 0:18:41.680
we will ignore the last days and so what can we do about that well we need to detect those

215
0:18:41.680 --> 0:18:49.120
problems and we need to counteract them in some way so we are adding a hazard unit to

216
0:18:49.120 --> 0:18:58.000
the CPU and it has two options first option is okay we will wait for the data but we said

217
0:18:58.000 --> 0:19:06.120
we want to build a fast CPU and waiting is well not fast so we also have option to forward

218
0:19:06.120 --> 0:19:13.960
the data as we need it so yeah it's in the core tab and it's the option so this is the

219
0:19:13.960 --> 0:19:20.840
CPU with added forwarding paths so what we have here is we are adding path from the right

220
0:19:20.840 --> 0:19:28.520
back stage to get it directly into the execute stage and the multiplexers got bigger and

221
0:19:28.520 --> 0:19:36.680
we are adding second path to forward the data from the memory stage so here is the difference

222
0:19:36.680 --> 0:19:44.240
there is some extra wiring the CPU looks were simpler but it will wait and that's what we

223
0:19:44.240 --> 0:19:50.840
want but it will cost us more to build it because it needs more components so let's

224
0:19:50.840 --> 0:19:56.920
see some actual examples we are again learning the selection sort I showed you before so

225
0:19:56.920 --> 0:20:04.360
we start running this instructions and right now we have our PC instruction that is producing

226
0:20:04.360 --> 0:20:12.800
its value to register 10 and the hazard unit started screaming it doesn't like it so it

227
0:20:12.800 --> 0:20:20.280
tells us it's not very very visible but the text in the red is forward so this is the

228
0:20:20.280 --> 0:20:26.560
hazard that we have here and what happens is that this multiplexer gets value to use

229
0:20:26.560 --> 0:20:32.880
the forwarding bar from the memory stage and instead of using the actual value from registers

230
0:20:32.880 --> 0:20:40.600
we are taking the value for the red path and we get here for the arithmetic logic unit

231
0:20:40.600 --> 0:20:46.240
value hexa 200 which is what we want but you don't know that it but remember that video

232
0:20:46.240 --> 0:20:55.000
it will be imported later okay we don't want to add the extra hardware so we will stall

233
0:20:55.000 --> 0:21:02.600
insert instead so this hazard unit is screaming again but this time it cannot forward so it's

234
0:21:02.600 --> 0:21:11.200
screaming to stall but you can see that the instructions were right next to each other

235
0:21:11.200 --> 0:21:19.080
so that was the first case and we need to actually stall two cycles so we will run next

236
0:21:19.080 --> 0:21:24.520
cycle another knob is inserted and again the hazard unit is screaming so right now we have

237
0:21:24.520 --> 0:21:31.200
any tune-ups but what we have now is that the instructions are far apart enough and

238
0:21:31.200 --> 0:21:42.000
we can continue so we get value thank you 200x again and we are happy well and then

239
0:21:42.000 --> 0:21:49.920
the simulator of course supports the most simple option we do nothing and what happens

240
0:21:49.920 --> 0:21:58.840
here we have the hazard and we get value zero because the registers were initially empty

241
0:21:58.840 --> 0:22:04.080
what is the purpose of this setting is that we will task the students to play the hazard

242
0:22:04.080 --> 0:22:11.360
unit as and play the compiler so they will have to rearrange the instructions and insert

243
0:22:11.360 --> 0:22:17.800
as less knobs as they need to make sure that the result will be correct this will typically

244
0:22:17.800 --> 0:22:24.320
be some kind of homework so we don't want to control that manually so we have a command

245
0:22:24.320 --> 0:22:31.280
line interface which can look something like that and will give you output like that so

246
0:22:31.280 --> 0:22:38.200
the capabilities that we have here is to assemble file to set a configuration to trace instruction

247
0:22:38.200 --> 0:22:44.560
in each stage of the pipeline trace changes to memory and registers also at the end to

248
0:22:44.560 --> 0:22:49.880
dump the memory and registers which is the most useful part because we want to make sure

249
0:22:49.880 --> 0:22:56.720
that the result is the same as it should be for example when the hazard unit is not available

250
0:22:56.720 --> 0:23:04.440
and finally when we want to plug in some data for example when the students are supposed

251
0:23:04.440 --> 0:23:10.160
to sort they should not know the data so we have special option to load data into the

252
0:23:10.160 --> 0:23:20.600
memory and right now we have CPU that for undergraduate students it's quite fast so

253
0:23:20.600 --> 0:23:26.080
but it's quite simple so now instead of making it fast you will make it more complicated

254
0:23:26.080 --> 0:23:32.360
and we are adding memory map peripherals and some very simple operating system emulation

255
0:23:32.360 --> 0:23:37.920
so if we open the templates again you can see that there is template for operating system

256
0:23:37.920 --> 0:23:43.800
and it really does nothing special all it does is prepare for calling system call which

257
0:23:43.800 --> 0:23:54.000
is equal in risk five and we will print how word to file the file is connected to a terminal

258
0:23:54.000 --> 0:24:02.200
so what we actually do is after running the now we get the equal detected you can see

259
0:24:02.200 --> 0:24:07.600
that there is something correct written that is detected syscall so we will stop fetching

260
0:24:07.600 --> 0:24:15.520
new instructions so it's more clear for the students and once we get to memory here is

261
0:24:15.520 --> 0:24:21.960
our hello board in the simulated terminal and you can see that the pipeline is empty

262
0:24:21.960 --> 0:24:28.080
because we are looking at this from the perspective of userland so the operating system is emulated

263
0:24:28.080 --> 0:24:34.800
and we don't see the instructions in the pipeline we just see that the pipeline was flashed

264
0:24:34.800 --> 0:24:42.320
before it was written to us so this is the system calls that we support it's not much

265
0:24:42.320 --> 0:24:50.120
but it's enough to show the basics to the students and this is all the peripherals that

266
0:24:50.120 --> 0:24:55.880
we can play with mainly using the system calls so this is not peripheral but we have control

267
0:24:55.880 --> 0:25:02.760
and status registers well some basic support of them we have an LCD display the terminal

268
0:25:02.760 --> 0:25:09.240
I have already shown you and there are some general purpose I will propose two LEDs three

269
0:25:09.240 --> 0:25:19.760
knobs with buttons and this might seem a little random to you it's not because we also have

270
0:25:19.760 --> 0:25:26.320
this valuable board that has exactly the same peripherals and the simulator is set up in

271
0:25:26.320 --> 0:25:31.040
a way that you can take the same code well not assembly code because unfortunately the

272
0:25:31.040 --> 0:25:40.440
board is ARM but you can take the same C code and run it both on the simulator and

273
0:25:40.440 --> 0:25:50.360
on the real world board and you can move back and forward so I said C code so we can't use

274
0:25:50.360 --> 0:25:56.560
the integrated assembler anymore and we did not implement C compiler so you can use clang

275
0:25:56.560 --> 0:26:04.880
or GCC to compile the file into elf which of course is to be statically linked and what

276
0:26:04.880 --> 0:26:13.400
we do now is instead of hitting the start empty we will here insert the elf executable

277
0:26:13.400 --> 0:26:21.360
and we will hit load machine so this is example of some program that writes to the LCD display

278
0:26:21.360 --> 0:26:28.200
I will not show you the code here because this is one of the tasks that we give our

279
0:26:28.200 --> 0:26:36.720
students but I can show you this code this is available on our D-Lab we write link here

280
0:26:36.720 --> 0:26:46.740
and it is test suite simple formula from the new lip so you can link your code to the new

281
0:26:46.740 --> 0:26:51.840
lip and use it in our simulator or at least some basic parts and we have tested that with

282
0:26:51.840 --> 0:26:58.960
malloc so you can run this and it's connected to the terminal so we can see that some dynamic

283
0:26:58.960 --> 0:27:04.240
allocation takes place and some checks take place and the tests are running successfully

284
0:27:04.240 --> 0:27:11.840
so now you can use actual dynamic allocation inside your simulator and now some conclusions

285
0:27:11.840 --> 0:27:20.560
so frequently asked questions is the simulator cycle accurate that's very important one yes

286
0:27:20.560 --> 0:27:27.080
kinda the thing is we always assume that the memory has enough time to finish and if it

287
0:27:27.080 --> 0:27:33.080
doesn't see people will wait we will not like insert stores or anything we just the memory

288
0:27:33.080 --> 0:27:38.840
will finish but that's the only exception otherwise it's inside written in quite similar

289
0:27:38.840 --> 0:27:47.640
style to Verilog system so it is compliant with the official risk five tests and yes

290
0:27:47.640 --> 0:27:52.760
I can please see this yes in the previous version we have added that and it's integrating

291
0:27:52.760 --> 0:28:00.600
into our CI so every new changes are tested against that we support the graphical parts

292
0:28:00.600 --> 0:28:07.040
so it supports the risk five I with multiplication and also with control and status registers

293
0:28:07.040 --> 0:28:14.320
instructions the command line also supports 64 bits however I yet need to find out how

294
0:28:14.320 --> 0:28:22.040
to fit the 65 bit values into the visualization because it's already quite full and we don't

295
0:28:22.040 --> 0:28:28.080
have a virtual memory yet but somewhere here in other room there is a student who already

296
0:28:28.080 --> 0:28:34.440
promised to take care of that in the next year so in a year he might be presenting the

297
0:28:34.440 --> 0:28:43.080
change here so we'll see so what we plan for the future if we are very close to adding

298
0:28:43.080 --> 0:28:48.720
interrupt support we would like to add compressed instructions and support because that's quite

299
0:28:48.720 --> 0:28:55.520
key part of risk five the only trouble there is it's pretty hard to I'm not sure how to

300
0:28:55.520 --> 0:29:01.240
fit it into the program view because then it needs to be processed sequentially and

301
0:29:01.240 --> 0:29:09.720
I'm not sure how to show it that the students see that it's really half of the size so that's

302
0:29:09.720 --> 0:29:16.960
plan also the instruction encoding in the risk five is somewhat special is especially

303
0:29:16.960 --> 0:29:26.640
around immediate so I would like visualization of each components the blocks that the instruction

304
0:29:26.640 --> 0:29:33.760
is composed of so that that can be seen for each instruction and inspected and edited

305
0:29:33.760 --> 0:29:41.680
we want to interest we want to be able to run a very minimal risk five Linux target

306
0:29:41.680 --> 0:29:49.360
I mentioned the 64 bit visualization and the program here that also the memory it another

307
0:29:49.360 --> 0:29:56.120
nice thing would be to visualize the utilization of the pipeline the image that is typically

308
0:29:56.120 --> 0:30:01.440
in every book when you have squares for each instructions and you see the spaces where

309
0:30:01.440 --> 0:30:06.880
no instructions were executed so it would be nice to add and also even when I made these

310
0:30:06.880 --> 0:30:13.480
slides I would really love to have option to step back because I went one instruction

311
0:30:13.480 --> 0:30:18.360
you know too far and it would be really hard to do it with all memory and everything but

312
0:30:18.360 --> 0:30:24.640
at least for the visualization of the pipeline I would really like it at so if you are a

313
0:30:24.640 --> 0:30:29.880
teacher represent educational institution and you want to use the simulator please do

314
0:30:29.880 --> 0:30:34.520
if you have some problems contact us you'll be happy to cooperate on that if you are a

315
0:30:34.520 --> 0:30:40.240
student or developer this is open source project we accept your request and usually the way

316
0:30:40.240 --> 0:30:47.080
it works is that students do their final thesis on this project so far free and if you are

317
0:30:47.080 --> 0:30:54.640
distribution maintainer you could help me with making putting in the official packages so

318
0:30:54.640 --> 0:31:00.160
you can get the source at GitHub and we also provide where executables for Windows, Linux,

319
0:31:00.160 --> 0:31:10.840
and Mac and we have packages using the open source build system for Ubuntu and Launchpad

320
0:31:10.840 --> 0:31:16.440
for Ubuntu, SUSE, Fedora, and Debian and there are also packages for our and next packages

321
0:31:16.440 --> 0:31:23.920
because those are those that I use and as we mentioned we have the online version as

322
0:31:23.920 --> 0:31:31.240
well so if you would like to read more we have some publications the thesis and our

323
0:31:31.240 --> 0:31:37.960
paper from the Embedded Board Conference last year so those are available and we have this

324
0:31:37.960 --> 0:31:45.600
subject and you can find a lot of the materials at the comparch it's some of the materials

325
0:31:45.600 --> 0:31:53.200
videos some are in Czech many are in English and that's all from me so thank you for attention

326
0:31:53.200 --> 0:31:56.600
for so many people coming.

327
0:31:56.600 --> 0:31:58.600
Please.

328
0:31:58.600 --> 0:32:09.240
How tightly coupled is the simulation of the processor and the visualization?

329
0:32:09.240 --> 0:32:14.640
I was thinking would it be possible to somehow connect something like model sim with the

330
0:32:14.640 --> 0:32:18.000
HTN model or would that be very very difficult?

331
0:32:18.000 --> 0:32:27.160
Sure, so the question was how tightly coupled is the visualization and the simulation so

332
0:32:27.160 --> 0:32:34.400
it's a separated project that is linked together and it's only connected with some data passing

333
0:32:34.400 --> 0:32:41.520
and QT signals so we already have the visualization and the command line that are completely separate

334
0:32:41.520 --> 0:32:46.240
and they are just connecting to the same signals so it's quite well separated but it's not

335
0:32:46.240 --> 0:32:50.080
at all stable.

336
0:32:50.080 --> 0:33:02.440
Any other question?

337
0:33:02.440 --> 0:33:07.840
Okay if you have no other questions we do not work only on the simulators but we do even

338
0:33:07.840 --> 0:33:15.760
the design of peripherals so for example we have open source can every staff we work on

339
0:33:15.760 --> 0:33:23.440
open source replacement of MATLAB and Simulink okay it is toy but we work on such stuff so

340
0:33:23.440 --> 0:33:28.320
if you have interest we have the links to our other project we have experience with

341
0:33:28.320 --> 0:33:33.880
motion control I have about set the errors of experience with embedded system design

342
0:33:33.880 --> 0:33:44.200
including infusion systems for medical applications I have contributed to RTMS project which is

343
0:33:44.200 --> 0:33:53.120
used in European Space Agency and so on we do VHGL design for the experiments of space

344
0:33:53.120 --> 0:33:59.640
grade FPGAs and so on so this is the work which we do to help us our students it is

345
0:33:59.640 --> 0:34:07.400
a lot of work something like eight manières of work in the simulator but it is only for

346
0:34:07.400 --> 0:34:13.480
our students but we do even the stereo stuff for the world for example in socket can in

347
0:34:13.480 --> 0:34:22.320
mainline Linux kernels are our oven stuff contribution drivers and so on okay yeah so

348
0:34:22.320 --> 0:34:47.000
yeah yeah well this is your or no no it is ours yes the visualization that you see is

349
0:34:47.000 --> 0:34:52.840
actually an SVG file that has special annotations which connected to the core previously it

350
0:34:52.840 --> 0:35:01.640
was done by handwritten QT objects but I was not like okay to work with that so I switched

351
0:35:01.640 --> 0:35:07.840
that to the SVG version when you can design it all in graphical editor and then you just

352
0:35:07.840 --> 0:35:18.880
connected to a simulator so that's completely ours.


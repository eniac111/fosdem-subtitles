1
0:00:00.000 --> 0:00:10.000
Hi everyone, how are you? How is hosting the weekend? Good?

2
0:00:10.000 --> 0:00:13.000
Yes. That's nice. I'm happy to be here.

3
0:00:13.000 --> 0:00:21.000
It's my first time in Europe and it's the first time that I will talk in English for a first event in person.

4
0:00:21.000 --> 0:00:24.000
This is pretty nice. My name is Edet Buja.

5
0:00:24.000 --> 0:00:35.000
I am a technology evangelist at Percona and this is a very basic and friendly introduction about databases and containers.

6
0:00:35.000 --> 0:00:46.000
About me, I am from Peru in South America. I am working as Six Months in Percona.

7
0:00:46.000 --> 0:00:52.000
It's an open source company. We create open source databases free.

8
0:00:52.000 --> 0:00:59.000
I am a Google woman tech maker. I was nominated as a docker captain last year.

9
0:00:59.000 --> 0:01:04.000
And I am a database and container enthusiast.

10
0:01:04.000 --> 0:01:11.000
You can follow me on Twitter and LinkedIn. I use to post about containers, Kubernetes, open source.

11
0:01:11.000 --> 0:01:24.000
For the agenda today, we are going to see about containers.

12
0:01:24.000 --> 0:01:31.000
We will see docker architecture. We will see the workflow between the components of docker.

13
0:01:31.000 --> 0:01:37.000
We are going to have two examples of how you run in a single Percona Server MySQL container.

14
0:01:37.000 --> 0:01:43.000
And we are going to run multiple containers for Percona Server MySQL.

15
0:01:43.000 --> 0:01:51.000
We will see the docker volume, how this is important in this world of databases on containers.

16
0:01:51.000 --> 0:01:57.000
We will see backups, restores of databases and best practices.

17
0:01:57.000 --> 0:02:02.000
Let's start it. What's a container?

18
0:02:02.000 --> 0:02:07.000
How many of you know what's with docker?

19
0:02:07.000 --> 0:02:14.000
Yeah, a lot. Okay, that's nice. Docker or do you use other tools?

20
0:02:14.000 --> 0:02:18.000
Yeah, there are different kinds of tools for container as application, right?

21
0:02:18.000 --> 0:02:30.000
But in a container, it's like a single unit, lightweight unit of software that package everything that you need for your application.

22
0:02:30.000 --> 0:02:35.000
When we run applications, when we build applications, we know that we need a lot of packages, right?

23
0:02:35.000 --> 0:02:43.000
If you are running, for example, if you are building a Java application, you need libraries, dependencies, many things to run your application.

24
0:02:43.000 --> 0:02:53.000
So everything has to be containerized in a single unit of software, and this is going to be isolated for other things, like your infrastructure.

25
0:02:53.000 --> 0:03:02.000
And the good thing is that your container can run on different platforms, in your laptop, in your server, in your cloud.

26
0:03:02.000 --> 0:03:11.000
With this, we end with the problem that we have when we say, hey, your program runs, yes, this works just on my computer.

27
0:03:11.000 --> 0:03:15.000
But no, it has to run in different platforms.

28
0:03:15.000 --> 0:03:27.000
We don't need to have this problem to dependencies and other kind of things when we test our application in other platforms.

29
0:03:27.000 --> 0:03:31.000
There are different tools, as I say, for containerization.

30
0:03:31.000 --> 0:03:34.000
We have container runtime interface, for example.

31
0:03:34.000 --> 0:03:43.000
We have container D, and we have Docker that is the tool that we are going to focus now.

32
0:03:43.000 --> 0:03:50.000
All these tools are also in the cloud native computing foundation ecosystem.

33
0:03:50.000 --> 0:03:53.000
If you see the landscape, you will see a lot of tools there.

34
0:03:53.000 --> 0:03:57.000
There is a part for containerization, and there are more than three.

35
0:03:57.000 --> 0:04:02.000
There is a lot of tools for that.

36
0:04:02.000 --> 0:04:06.000
The Docker architecture is a...

37
0:04:06.000 --> 0:04:09.000
It works like a client server model.

38
0:04:09.000 --> 0:04:16.000
We have the Docker DMO, which is going to process all the commands, is going to make all the...

39
0:04:16.000 --> 0:04:27.000
It's going to start to listen to the client always, and the client is going to send requests to the DMO through the recipe.

40
0:04:27.000 --> 0:04:35.000
With this model, the Docker DMO can also manage network containers, images, and Docker volumes.

41
0:04:35.000 --> 0:04:44.000
If we go more in detail, we will see that we have the client, the DMO, that is also called the engine of Docker,

42
0:04:44.000 --> 0:04:50.000
and we have another component that could be your Docker registry, the public, which is Docker Hub,

43
0:04:50.000 --> 0:04:58.000
where all the images, official images are published, and also we can have our own private registry,

44
0:04:58.000 --> 0:05:02.000
in case we don't want to share it with the public.

45
0:05:02.000 --> 0:05:07.000
So in this case, this is the flow of a component.

46
0:05:07.000 --> 0:05:17.000
For example, if we do a pull, we are going to try to bring the image from the Docker Hub into the Docker DMO cache.

47
0:05:17.000 --> 0:05:23.000
If the Docker DMO doesn't find the image in cache, it's going to bring it from the Docker Hub.

48
0:05:23.000 --> 0:05:28.000
But if this is in cache, it's going to take it just that and start to process it.

49
0:05:28.000 --> 0:05:37.000
Same with Docker build. When we run Docker build from the client, the Docker DMO will try to take a Docker file.

50
0:05:37.000 --> 0:05:47.000
A Docker file is a recipe with a lot of instructions where we put all the commands to run our application and deploy it.

51
0:05:47.000 --> 0:05:57.000
So the Docker DMO is going to take the Docker file and build it, build the image, and if you want, we can also run it.

52
0:05:57.000 --> 0:06:09.000
When we run, we will create a container. The container is our application that is already alive and is ready to make connections of petitions.

53
0:06:09.000 --> 0:06:19.000
One more thing here is that we can have everything in our host, or we can have clients, remote clients,

54
0:06:19.000 --> 0:06:31.000
that could make petitions to the Docker DMO. So container benefits.

55
0:06:31.000 --> 0:06:38.000
There are pros and cons, but now I'm going to focus on these benefits, the containers give us.

56
0:06:38.000 --> 0:06:50.000
So one of these is we can reduce costs with this because we can run several containers in a single infrastructure, that's infrastructure that we have,

57
0:06:50.000 --> 0:06:55.000
because of the technology of containers, it's different than the virtualization.

58
0:06:55.000 --> 0:07:06.000
In virtualization, we use the hypervisor, and when you create virtual machines, it consumes more resources from your infrastructure,

59
0:07:06.000 --> 0:07:11.000
but when you use containers, it's very different. You are using the technology of containers,

60
0:07:11.000 --> 0:07:16.000
it would make it possible to run a lot of containers in a single machine.

61
0:07:16.000 --> 0:07:19.000
So for that reason, it's possible to reduce costs.

62
0:07:19.000 --> 0:07:25.000
Also, the containers are very friendly with continuous integration and continuous delivery process.

63
0:07:25.000 --> 0:07:38.000
If you have a big application, a monolithic application, and you want to run containers, you want to integrate it in the DevOps process,

64
0:07:38.000 --> 0:07:46.000
this is going to be hard, we have to work like microservices to make each service as a container,

65
0:07:46.000 --> 0:07:51.000
and include it in the continuous integration and continuous delivery process.

66
0:07:51.000 --> 0:08:00.000
It's easy, when we build our application over a container, it's easy to kill it, it's easy to create it again, it's easy to fail,

67
0:08:00.000 --> 0:08:05.000
and the process is faster.

68
0:08:05.000 --> 0:08:08.000
Another benefit is the multi-cloud compatibility.

69
0:08:08.000 --> 0:08:17.000
With the time several companies try to migrate to a hybrid cloud, they just don't want to have everything on premise,

70
0:08:17.000 --> 0:08:23.000
they also want to scale, they want to grow, so for a reason they opt for cloud,

71
0:08:23.000 --> 0:08:32.000
and containers fit very good in this.

72
0:08:32.000 --> 0:08:40.000
You can install Docker, I know you did it, several, you can choose your distro,

73
0:08:40.000 --> 0:08:47.000
you use Debian, CentOS, everything, so you can go to the official Docker documentation and easily look all the steps.

74
0:08:47.000 --> 0:09:00.000
When you install this, it will install the Docker client, the Docker DMO, and other tools that you will need to use Docker in your local matching.

75
0:09:00.000 --> 0:09:08.000
We already talked about containers, but this talk is about exploring database on containers.

76
0:09:08.000 --> 0:09:16.000
We are going to talk about MySQL, which is this base relational database, we know that it's a database,

77
0:09:16.000 --> 0:09:23.000
and to run MySQL on containers, we need to understand how volumes work,

78
0:09:23.000 --> 0:09:28.000
because the most important thing running databases on containers is the data.

79
0:09:28.000 --> 0:09:36.000
If we lost the data, we lost everything.

80
0:09:36.000 --> 0:09:40.000
For the next slides, we are going to focus in this part.

81
0:09:40.000 --> 0:09:45.000
We will use the image of Percona server for MySQL.

82
0:09:45.000 --> 0:09:54.000
This Percona server for MySQL is open source, it's like MySQL, but with more nice things,

83
0:09:54.000 --> 0:10:00.000
and you can use it, it's open source, it's in Docker Hub, so we will use this image,

84
0:10:00.000 --> 0:10:03.000
and we will create a Docker container.

85
0:10:03.000 --> 0:10:08.000
We will see how it works with all volumes, we will see the layers in Docker,

86
0:10:08.000 --> 0:10:16.000
and then we will create a persistent volume, and we will see how it changes in the layers of Docker.

87
0:10:16.000 --> 0:10:25.000
So, just here, to see that if you want to have an image, it's necessary to have a Docker file.

88
0:10:25.000 --> 0:10:31.000
Who used, who did a Docker file before? By yourself? Yeah, that's good.

89
0:10:31.000 --> 0:10:35.000
A Docker file is a recipe where you will put everything for your application,

90
0:10:35.000 --> 0:10:42.000
so you need this to create an image, then you need the image to create your Docker container.

91
0:10:42.000 --> 0:10:48.000
There are three essential steps here to remember how Docker works.

92
0:10:48.000 --> 0:10:53.000
Okay.

93
0:10:53.000 --> 0:10:59.000
We will run a single Percona server MySQL for container.

94
0:10:59.000 --> 0:11:06.000
We will use Docker run to create the image, right?

95
0:11:06.000 --> 0:11:13.000
No. We don't use Docker run to create the image, we use Docker run to create a container.

96
0:11:13.000 --> 0:11:25.000
So, we use this to create a container, so we will do dash D to say run this container in the background.

97
0:11:25.000 --> 0:11:32.000
I want to use the terminal, and I will call it Percona server for my Percona server one.

98
0:11:32.000 --> 0:11:39.000
I will pass it like the environment variable, variable environment for the root.

99
0:11:39.000 --> 0:11:43.000
This is not a good practice here, this is just to show how we are going to create a container,

100
0:11:43.000 --> 0:11:46.000
and we will use this official Percona server for MySQL.

101
0:11:46.000 --> 0:11:52.000
With this, I am creating a container, right? I'm creating a container with this one.

102
0:11:52.000 --> 0:12:02.000
Okay. So, if we go to Docker image LS, this is going to pull the image of Percona server,

103
0:12:02.000 --> 0:12:05.000
and then it will create the container.

104
0:12:05.000 --> 0:12:08.000
That command is going to do two things.

105
0:12:08.000 --> 0:12:14.000
It's going to bring the image from the official Docker hack, and it's going to create a container.

106
0:12:14.000 --> 0:12:21.000
So, if we see Docker container PS, our container is up.

107
0:12:21.000 --> 0:12:28.000
Okay. After we have that database, we need to add data.

108
0:12:28.000 --> 0:12:34.000
We will add databases, we will add data, we will change registers, we will have transactions,

109
0:12:34.000 --> 0:12:38.000
many things that we can do like a regular database.

110
0:12:42.000 --> 0:12:49.000
Okay. If we run a single Percona server in MySQL container, we know volume, how it works in layers.

111
0:12:49.000 --> 0:12:56.000
If we see this in green, there are layers from Percona server image.

112
0:12:56.000 --> 0:13:01.000
This is the image that we pull it, that we can change. This is just react only.

113
0:13:01.000 --> 0:13:07.000
We can change this, but in top of that, it's going to be created a layer, a new layer.

114
0:13:07.000 --> 0:13:11.000
This layer, this layer is react only. I can add data.

115
0:13:11.000 --> 0:13:18.000
This layer is the one that will contain all the things that I am doing in Docker.

116
0:13:18.000 --> 0:13:22.000
On that image, on that container, I added a new database.

117
0:13:22.000 --> 0:13:26.000
Yes. I create a new registry, I delete it, I add the transactions.

118
0:13:26.000 --> 0:13:28.000
All this is going to save it here.

119
0:13:28.000 --> 0:13:34.000
But what happens if I don't have volume? My container is ephemeral, right?

120
0:13:34.000 --> 0:13:37.000
It could die. It could crash. My machine could crash.

121
0:13:37.000 --> 0:13:43.000
And all my data is going to be lost. I will lose all the data.

122
0:13:43.000 --> 0:13:48.000
We will see how it works with multiple containers.

123
0:13:48.000 --> 0:13:53.000
To run multiple containers with the same image, if we see this is the same image,

124
0:13:53.000 --> 0:13:57.000
the same version of the image, we will just change the name of this container.

125
0:13:57.000 --> 0:14:02.000
Also, we can change another thing, because this is a database, right?

126
0:14:02.000 --> 0:14:09.000
What thing we can change it? They run in a port, right?

127
0:14:09.000 --> 0:14:13.000
In which port my SQL used to run?

128
0:14:13.000 --> 0:14:20.000
Yeah. So I need to change the port for the other container to avoid the conflict.

129
0:14:20.000 --> 0:14:24.000
Okay.

130
0:14:24.000 --> 0:14:28.000
How it works in layers. The same.

131
0:14:28.000 --> 0:14:33.000
We will use the same layer. We will use the same layer for Percona, Percona Server,

132
0:14:33.000 --> 0:14:38.000
which we can modify, but in top of that, we are going to have two layers more.

133
0:14:38.000 --> 0:14:43.000
One of the first containers that I created and the second for the other, that I can add.

134
0:14:43.000 --> 0:14:48.000
I can add data. I can change things. But once again, if I don't have volume,

135
0:14:48.000 --> 0:14:53.000
this is going to die. But this is how to work if we want to create an application

136
0:14:53.000 --> 0:15:02.000
when it doesn't matter if we save the state of this application.

137
0:15:02.000 --> 0:15:07.000
Volumes open the door for a stateful application for run efficiently in Docker.

138
0:15:07.000 --> 0:15:14.000
This is important. Persist data in databases is really important for this kind of application,

139
0:15:14.000 --> 0:15:21.000
because sometimes we think that, like Kubernetes, the other things was created for a stateless application,

140
0:15:21.000 --> 0:15:26.000
but now we have options to use stateful applications on containers, and this is one of the reasons.

141
0:15:26.000 --> 0:15:31.000
Create volumes. So it's pretty easy to create volume.

142
0:15:31.000 --> 0:15:38.000
We can create a volume just with dash V or dash dash volume, and we can say it,

143
0:15:38.000 --> 0:15:43.000
we can create a Docker volume with Docker run and detach.

144
0:15:43.000 --> 0:15:49.000
We will call it Percona Server, the same process, and when we say dash V,

145
0:15:49.000 --> 0:15:56.000
we are saying, okay, this will be my volume in a host, in my local data directory,

146
0:15:56.000 --> 0:16:02.000
and this one is going to be inside my container.

147
0:16:02.000 --> 0:16:11.000
So this is like a mirror from this image.

148
0:16:11.000 --> 0:16:17.000
And how it works. In layers, we have the same, the layer that we can modify,

149
0:16:17.000 --> 0:16:22.000
and in top of that, we are going to create another layer, but in this case, we are adding,

150
0:16:22.000 --> 0:16:29.000
we are creating the mounted volume in BarLiftMySQL.

151
0:16:29.000 --> 0:16:33.000
There are other directories that we can create the volume.

152
0:16:33.000 --> 0:16:40.000
I am just adding, as an example, this, because in MySQL, we have configuration files,

153
0:16:40.000 --> 0:16:47.000
we have logs, we have another things, but for that, we want to create these volumes, for all of that things.

154
0:16:47.000 --> 0:16:53.000
I am just adding, as an example, BarLiftMySQL, which is also a directory that is very important,

155
0:16:53.000 --> 0:16:58.000
and this local directory is the one that could be in my host, but it's not recommended,

156
0:16:58.000 --> 0:17:02.000
because if your host crashes, everything crashes too, with your volumes.

157
0:17:02.000 --> 0:17:15.000
It's preferable to run it in a remote host.

158
0:17:15.000 --> 0:17:21.000
Okay, two backups. Who here make backups?

159
0:17:21.000 --> 0:17:25.000
Okay, I used a very easy way to make backups.

160
0:17:25.000 --> 0:17:31.000
I used it for logical backups, my SQL dump, used in the container,

161
0:17:31.000 --> 0:17:36.000
and for physical backups, we use in the company Perconxtra backup,

162
0:17:36.000 --> 0:17:42.000
which is have more features to have that physical backup.

163
0:17:42.000 --> 0:17:47.000
And for restore, I will use also my SQL dump.

164
0:17:47.000 --> 0:17:53.000
And we don't use Perconxtra backup in this case, because it has a lot of things.

165
0:17:53.000 --> 0:18:02.000
For backup, I will execute a backup in a container that is already running.

166
0:18:02.000 --> 0:18:06.000
Percona server backup is already running. Let's see that we created,

167
0:18:06.000 --> 0:18:14.000
and we are executing Docker exit, it, to enter into the Percona in that container,

168
0:18:14.000 --> 0:18:22.000
and type that common, my SQL dump, to create a backup of the database.

169
0:18:22.000 --> 0:18:30.000
So the backup is going to be in that file, dump SQL, and the same process with restore,

170
0:18:30.000 --> 0:18:35.000
we can take that backup, and this is a different container.

171
0:18:35.000 --> 0:18:39.000
We are going to restore the dot SQL file in a different container.

172
0:18:39.000 --> 0:18:47.000
In this case, in Percona server restore, using my SQL, just that common, my SQL.

173
0:18:47.000 --> 0:18:53.000
Okay, best practices or some recommendation to use containers in database?

174
0:18:53.000 --> 0:18:55.000
Okay.

175
0:18:55.000 --> 0:19:01.000
And one of this is that we can keep constantly monitoring our database

176
0:19:01.000 --> 0:19:05.000
and the whole system, because we don't know when we are going to don't have

177
0:19:05.000 --> 0:19:09.000
enough resources for our containers, we should be aware of that,

178
0:19:09.000 --> 0:19:13.000
or have notifications to say, hey, you don't have a no disk,

179
0:19:13.000 --> 0:19:18.000
you don't have a no memory, so provision, or try to scale in your resources,

180
0:19:18.000 --> 0:19:23.000
so we should keep monitor. Using some tools for that, for example, is PMM,

181
0:19:23.000 --> 0:19:28.000
we can use open source monitors to monitor our databases on containers.

182
0:19:28.000 --> 0:19:33.000
We can store data in persistent volume outside the container,

183
0:19:33.000 --> 0:19:39.000
it recommended no inside the container, because it's easy to create plans for recovery,

184
0:19:39.000 --> 0:19:44.000
we can restore the data easily, also on fast.

185
0:19:44.000 --> 0:19:49.000
We should limit the resources of utilization of our containers.

186
0:19:49.000 --> 0:19:57.000
Our containers, we know that they are small, but also we should limit when they are a lot.

187
0:19:57.000 --> 0:20:04.000
And we should regularly have backups of the database,

188
0:20:04.000 --> 0:20:08.000
and store these backups in a different location.

189
0:20:08.000 --> 0:20:13.000
And have a plan of migration and disaster recovery is really great.

190
0:20:13.000 --> 0:20:18.000
In that case, having a monitoring tool helps a lot.

191
0:20:18.000 --> 0:20:22.000
And what more?

192
0:20:22.000 --> 0:20:28.000
That's all. You can find me in LinkedIn and Twitter.

193
0:20:28.000 --> 0:20:30.000
Anyone?

194
0:20:30.000 --> 0:20:32.000
So.

195
0:20:32.000 --> 0:20:35.000
APPLAUSE

196
0:20:38.000 --> 0:20:40.000
Okay, we have time for questions.

197
0:20:40.000 --> 0:20:44.000
If you absolutely need to leave, and you can't wait until the talk is over,

198
0:20:44.000 --> 0:20:59.000
please do so as quietly as possible so we can understand the questions. Thanks.

199
0:20:59.000 --> 0:21:02.000
Hi, thank you so much for your talk. It was really interesting.

200
0:21:02.000 --> 0:21:07.000
I'm wondering what kind of limitations do you see when you're speaking about having a databases,

201
0:21:07.000 --> 0:21:09.000
running in containers?

202
0:21:09.000 --> 0:21:13.000
There is storage limitations, CPU or something else?

203
0:21:13.000 --> 0:21:20.000
Guys, can you please be a little quiet so we can understand the question?

204
0:21:20.000 --> 0:21:22.000
Alright, I will try to move the microphone.

205
0:21:22.000 --> 0:21:25.000
Yeah, you. The people can you. Thank you.

206
0:21:25.000 --> 0:21:29.000
I was wondering, maybe, like, first of all, really cool talk. Thank you so much.

207
0:21:29.000 --> 0:21:34.000
My question would be, could you maybe talk us through some kind of limitation that you can see

208
0:21:34.000 --> 0:21:39.000
when you're running databases and containers?

209
0:21:39.000 --> 0:21:44.000
You didn't understand it?

210
0:21:44.000 --> 0:21:46.000
Thank you so much for the talk. It was really cool.

211
0:21:46.000 --> 0:21:51.000
Maybe you can share with us some kind of limitations that you see when you're running to the solution

212
0:21:51.000 --> 0:21:54.000
of running databases inside containers, right?

213
0:21:54.000 --> 0:21:56.000
You cannot really run very big databases.

214
0:21:56.000 --> 0:22:01.000
You probably will have a problem with the solution.

215
0:22:01.000 --> 0:22:03.000
What kind of limitations do you see?

216
0:22:03.000 --> 0:22:06.000
So.

217
0:22:06.000 --> 0:22:08.000
Yeah, he's asking about.

218
0:22:08.000 --> 0:22:14.000
Sorry, the question is about what limitations you can run into with database containers.

219
0:22:14.000 --> 0:22:20.000
Yeah, I don't want to say this, but it depends really on the business.

220
0:22:20.000 --> 0:22:23.000
Okay, if you want to invest a lot of money in infrastructure,

221
0:22:23.000 --> 0:22:30.000
because at the end, your database, the volume that you have is not going to be part of your container.

222
0:22:30.000 --> 0:22:32.000
It's going to be outside.

223
0:22:32.000 --> 0:22:33.000
And this depends on you.

224
0:22:33.000 --> 0:22:37.000
You want to invest a lot of money to save that data. It's good.

225
0:22:37.000 --> 0:22:39.000
You want to replicate it?

226
0:22:39.000 --> 0:22:43.000
Please try and be quiet while we are asking questions.

227
0:22:43.000 --> 0:23:10.000
Are there any more questions?

228
0:23:10.000 --> 0:23:14.000
There is one more question from the back. So please be quiet.

229
0:23:14.000 --> 0:23:16.000
Thank you.

230
0:23:16.000 --> 0:23:19.000
Hello.

231
0:23:19.000 --> 0:23:23.000
I wanted to ask, did you notice any kind of performance issues?

232
0:23:23.000 --> 0:23:24.000
Did you benchmark things?

233
0:23:24.000 --> 0:23:33.000
Did you identify some kind of overheads going on when you can't internalize a database like MySQL

234
0:23:33.000 --> 0:23:38.000
or other kind of databases really?

235
0:23:38.000 --> 0:23:52.000
Thank you.

236
0:23:52.000 --> 0:23:56.000
Sorry.

237
0:23:56.000 --> 0:24:00.000
Sorry, I didn't get your question.

238
0:24:00.000 --> 0:24:18.000
I'm just going to ask you, when you can internalize a database, did you notice any kind of overheads, compute, memory, or disk, essentially,

239
0:24:18.000 --> 0:24:29.000
where you can see that the database performance or operation is significantly affected by the fact of being containerized?

240
0:24:29.000 --> 0:24:40.000
I'm not sure about that, but if you use open source tools to monitor your containers on databases, you can have like a visualization of these things.

241
0:24:40.000 --> 0:24:51.000
If you don't have enough resources, so it can show you like alerts or things like that where you can figure out where exactly is your limitation.

242
0:24:51.000 --> 0:24:56.000
Okay. So for example, did you run benchmark?

243
0:24:56.000 --> 0:25:02.000
No.

244
0:25:02.000 --> 0:25:04.000
Could you help me?

245
0:25:04.000 --> 0:25:05.000
Okay. Could you help me to answer that?

246
0:25:05.000 --> 0:25:08.000
Okay. My friend is going to help me to answer this.

247
0:25:08.000 --> 0:25:09.000
All right. Thank you.

248
0:25:09.000 --> 0:25:11.000
Yeah. Thank you to you.

249
0:25:11.000 --> 0:25:19.000
Hey, so usually the performance degradation is around 2%, 3%, 4%.

250
0:25:19.000 --> 0:25:27.000
The issue is more about how you configure the database, kind of storage, if it's local or network storage.

251
0:25:27.000 --> 0:25:33.000
But the virtualization is minimal. It's like running on a EC2 instance.

252
0:25:33.000 --> 0:25:47.000
Okay. So there is an impact, miserable, at least you say around 4% or 5%, but you say that's not going to be the, that there are configurations we can do to try to avoid that.

253
0:25:47.000 --> 0:25:56.000
Do you have any kind of paper or any kind of resources that we might use to avoid those kind of bottlenecks?

254
0:25:56.000 --> 0:26:05.000
If I got correctly, not much. The measure that we do in databases is measuring TPS.

255
0:26:05.000 --> 0:26:24.000
So you will notice on, if we're running benchmarks with Sysbench, for example, 3%, like if you are running 1,000 queries per second, you will get 980, 990 queries per second when containerized.

256
0:26:24.000 --> 0:26:32.000
Okay. And do you have any kind of recommendations, kind of generic recommendations you can do so that when you run a database in a container,

257
0:26:32.000 --> 0:26:39.000
here is what you can do to try and negate some of the performance bottlenecks that you guys have noticed?

258
0:26:39.000 --> 0:26:51.000
To be honest, on real-day activities, I would say 99% of the performance will come from how you configure my SQL.

259
0:26:51.000 --> 0:27:04.000
The containerization is like just a small piece of the game. You can make more effect by modifying the database configuration.

260
0:27:04.000 --> 0:27:06.000
Alright. Thank you very much.

261
0:27:06.000 --> 0:27:22.000
Thanks to you.


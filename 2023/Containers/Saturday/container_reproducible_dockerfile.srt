1
0:00:00.000 --> 0:00:07.240
Our next talk is by Akihiro.

2
0:00:07.240 --> 0:00:12.000
He's going to talk about Bit4Bit reproducible builds with Docker files.

3
0:00:12.000 --> 0:00:21.520
Hi, I'm Akihiro Sada from NTT Corporation at Zebra.

4
0:00:21.520 --> 0:00:29.840
In this session, I talk about Bit4Bit reproducible build with Dockerfile.

5
0:00:29.840 --> 0:00:37.440
Depending on the determinants of the timestamps and the object-produced versions, I have a

6
0:00:37.440 --> 0:00:44.720
demo and you can reproduce my demo by yourselves using this repo,

7
0:00:44.720 --> 0:00:53.200
www.tav.com.slash-reproducible.com.

8
0:00:53.200 --> 0:00:57.480
Let's begin with water reproducible builds.

9
0:00:57.480 --> 0:01:05.320
Which means producing exactly the same binary when you have the same source.

10
0:01:05.320 --> 0:01:13.960
For containers, the source means Dockerfile and every source code files that are referred

11
0:01:13.960 --> 0:01:16.760
from the Dockerfile.

12
0:01:16.760 --> 0:01:26.480
And the binary means OCR images, including the tar layers and the metadata JSONs.

13
0:01:26.480 --> 0:01:36.200
This reproducibility has to be accessible by anybody at any time, but not necessarily

14
0:01:36.200 --> 0:01:38.880
on any machine.

15
0:01:38.880 --> 0:01:45.600
Because typically your machine has to have a specific version of two chains.

16
0:01:45.600 --> 0:01:53.040
And sometimes you have to use a specific version of the host operating system with a specific

17
0:01:53.040 --> 0:01:58.040
file system and with a specific CPU.

18
0:01:58.040 --> 0:02:06.560
So this limitation is very far from ideal, but this is sometimes in NTT Pro.

19
0:02:06.560 --> 0:02:11.160
So why do we need reproducible builds?

20
0:02:11.160 --> 0:02:16.920
It's because we want to verify the actual source code of the binary, not the claimed

21
0:02:16.920 --> 0:02:19.280
source code.

22
0:02:19.280 --> 0:02:27.080
The actual source code may differ from the claimed source code when the environment,

23
0:02:27.080 --> 0:02:36.960
such as the developer's laptop or CD server, such as changes or dev action is compromised.

24
0:02:36.960 --> 0:02:43.960
Or when the developer simply has malicious intent.

25
0:02:43.960 --> 0:02:51.600
So we want to be sure we have actual source code and if the builds are reproducible, we

26
0:02:51.600 --> 0:02:56.600
can be sure that we have actual source codes.

27
0:02:56.600 --> 0:03:02.520
Otherwise we are not sure whether we have the actual source code or not.

28
0:03:02.520 --> 0:03:09.560
Maybe we are using some compromised source code.

29
0:03:09.560 --> 0:03:15.560
So reproducible build is really great, but it's not a policy.

30
0:03:15.560 --> 0:03:21.680
Especially reproducibility has nothing to do with whether the source code is safe to

31
0:03:21.680 --> 0:03:23.360
use.

32
0:03:23.360 --> 0:03:27.880
The source code may still contain malicious codes.

33
0:03:27.880 --> 0:03:35.760
So reproducible builds make sense only when you actually review the source code by yourself.

34
0:03:35.760 --> 0:03:46.880
So it's really time taking job and very few people are motivated to bother doing that.

35
0:03:46.880 --> 0:03:51.680
But this problem is beyond scope of my talk.

36
0:03:51.680 --> 0:03:59.200
So maybe this task can be automated using some AI in the next couple of years.

37
0:03:59.200 --> 0:04:01.760
But it's beyond scope at this stop.

38
0:04:01.760 --> 0:04:04.760
I don't know.

39
0:04:04.760 --> 0:04:15.080
And it was hard to make the builds reproducible, especially with Docker files.

40
0:04:15.080 --> 0:04:19.880
So there were three major changes.

41
0:04:19.880 --> 0:04:24.680
The most obvious one is timestamps.

42
0:04:24.680 --> 0:04:36.480
Such as the timestamps of the files in OCI tar layers and other timestamps in OCI JSON.

43
0:04:36.480 --> 0:04:43.880
Such as ORZ, OpenContinance, image, create it.

44
0:04:43.880 --> 0:04:50.440
And we also have timestamps in the image histories.

45
0:04:50.440 --> 0:04:54.920
It can be printable with Docker history commands.

46
0:04:54.920 --> 0:04:58.320
So the timestamp problem is the most obvious one.

47
0:04:58.320 --> 0:05:04.360
But the timestamp problem is relatively easy to solve.

48
0:05:04.360 --> 0:05:06.520
So the biggest problem is not timestamps.

49
0:05:06.520 --> 0:05:11.360
The biggest problem is non-deterministic of aftergates.

50
0:05:11.360 --> 0:05:18.400
So when you run aftergates, the package version that is installable with aftergates changes

51
0:05:18.400 --> 0:05:20.280
every time.

52
0:05:20.280 --> 0:05:23.180
And of course, this is not specific to absolute.

53
0:05:23.180 --> 0:05:35.160
So the same problem exists in DNF, APK, JIPA, Pacman, and almost all package managers.

54
0:05:35.160 --> 0:05:43.000
Actually Nix, the package manager, has solved this issue with a version cleaning system

55
0:05:43.000 --> 0:05:45.240
called Flix.

56
0:05:45.240 --> 0:05:51.560
But Nix is very complex and still hard for most people to run.

57
0:05:51.560 --> 0:05:58.320
And Gix is also similar, but Gix is still complex and very hard.

58
0:05:58.320 --> 0:06:05.840
So most people still want to use aftergates or DNF or APK.

59
0:06:05.840 --> 0:06:12.600
And the third problem shown here is characteristics of the file systems.

60
0:06:12.600 --> 0:06:17.760
Such as hard links and X attributes.

61
0:06:17.760 --> 0:06:32.360
So these special characteristics may differ across file systems.

62
0:06:32.360 --> 0:06:42.080
So reproducible builds were really hard in the ecosystem of a Docker file.

63
0:06:42.080 --> 0:06:48.600
But it's now supported in Buildkit version 0.11.

64
0:06:48.600 --> 0:06:55.800
Buildkit is a modern image building framework made for Docker and Moby.

65
0:06:55.800 --> 0:07:02.720
And it has been embedded in the Docker demo since Docker version 18.06.

66
0:07:02.720 --> 0:07:05.480
But it's not specific to Docker and Moby.

67
0:07:05.480 --> 0:07:13.560
So it can be also used as a sound-alarm demo called Buildkit D. And Buildkit D can be executed

68
0:07:13.560 --> 0:07:23.760
inside Kubernetes or NetCity or Potomar or any other control engines that supports OCI

69
0:07:23.760 --> 0:07:24.760
specs.

70
0:07:24.760 --> 0:07:32.880
Buildkit version 8.1 was released the last month with Buildkit support for reproducing

71
0:07:32.880 --> 0:07:35.160
timestamps.

72
0:07:35.160 --> 0:07:40.840
Next to Tony Stigley who is a version of this work.

73
0:07:40.840 --> 0:07:48.160
And this version 0.11 still needs really complex Docker files.

74
0:07:48.160 --> 0:08:04.800
But the next version 0.12 is likely to require less complex Docker files.

75
0:08:04.800 --> 0:08:11.560
And reproducing timestamps is supported using the special build org called Source Date

76
0:08:11.560 --> 0:08:13.840
Epoch.

77
0:08:13.840 --> 0:08:21.520
This build org conforms to the reproducible builds.org's source date epoch spec, which

78
0:08:21.520 --> 0:08:13.540
is available under HTTPS

79
0:08:13.540 --> 0:08:14.540
construction.

80
0:08:14.540 --> 0:08:34.760
And the argument value is usually expected to be set to the

81
0:08:34.760 --> 0:08:43.880
next epoch representation of the GIT commit to this using GIT log dash one dash dash pretty

82
0:08:43.880 --> 0:08:45.880
equal passability.

83
0:08:45.880 --> 0:08:59.920
So you get an integer number that corresponds to the sequence since 1970, generally first.

84
0:08:59.920 --> 0:09:07.280
And this source date epoch is exposed to the run instruction of the Docker file as the

85
0:09:07.280 --> 0:09:09.840
environment variable.

86
0:09:09.840 --> 0:09:19.440
And in addition, it's also consumed by Buildkit itself for the timestamps in the OCI JSONs.

87
0:09:19.440 --> 0:09:29.400
But that's for the timestamps in the OCI tie layers and Buildkit version 0.11.

88
0:09:29.400 --> 0:09:40.520
This is planned to be improved in version 0.12.

89
0:09:40.520 --> 0:09:47.920
So as I mentioned in the previous slide, there is a bunch of cables in version 0.11.

90
0:09:47.920 --> 0:09:57.640
So especially the file timestamps currently has to be explicitly touched with using the

91
0:09:57.640 --> 0:10:08.240
command command, XR command and the touch command like this very complex script.

92
0:10:08.240 --> 0:10:13.880
And that already takes more than three lines.

93
0:10:13.880 --> 0:10:21.080
And also you have to squash all the layers to eliminate over a first white glass that

94
0:10:21.080 --> 0:10:29.320
are created on removing the files in the continuous because the timestamps of the whiteouts are

95
0:10:29.320 --> 0:10:35.600
not reproducible in Buildkit version 0.11.

96
0:10:35.600 --> 0:10:42.040
And also there's a restriction on the mount point trajectories.

97
0:10:42.040 --> 0:10:50.680
So cache mount points can be only created under TMPFS such as Threshold.

98
0:10:50.680 --> 0:10:58.800
And also hard links are not reproducible depending on the file system stamp filter.

99
0:10:58.800 --> 0:11:02.680
So in this version we still have a bunch of cables.

100
0:11:02.680 --> 0:11:13.560
But these cables are already being improved in my project list 3560.

101
0:11:13.560 --> 0:11:17.080
It's not merged in the master branch yet.

102
0:11:17.080 --> 0:11:26.200
But I hope that this project will be merged in the next version 0.12 in the next couple

103
0:11:26.200 --> 0:11:33.720
of weeks or maybe in the next couple of months.

104
0:11:33.720 --> 0:11:37.520
The next topic is reproducing package versions.

105
0:11:37.520 --> 0:11:41.080
This is the most important topic of this talk.

106
0:11:41.080 --> 0:11:48.280
The package versions are hard to reproduce because most distributions do not retain all

107
0:11:48.280 --> 0:11:50.720
the packages.

108
0:11:50.720 --> 0:11:56.720
For example Ubuntu does not retain all the packages as far as I can see.

109
0:11:56.720 --> 0:11:59.200
Debian does.

110
0:11:59.200 --> 0:12:03.640
But the package archives are not mirrored widely.

111
0:12:03.640 --> 0:12:13.120
And basically we only have the central snapshot. Debian.org and only a few mirrors.

112
0:12:13.120 --> 0:12:22.160
This is causing too much load on the central server, snapshot. Debian.org.

113
0:12:22.160 --> 0:12:29.760
So basically this snapshot. Debian.org server can't be used in the CI environments because

114
0:12:29.760 --> 0:12:34.320
it's really slow and it's really freaky.

115
0:12:34.320 --> 0:12:39.640
And this slowness and the freckiest program will get even worse when more people begin

116
0:12:39.640 --> 0:12:44.120
to make their builds reproducible.

117
0:12:44.120 --> 0:12:54.120
This situation is very similar for Fedora and Linux as well.

118
0:12:54.120 --> 0:12:58.180
And Reprogate is my solution for this program.

119
0:12:58.180 --> 0:13:08.200
This is a decentralized and reproducible frontend for Aftergate, DNF, APK and Perkmar.

120
0:13:08.200 --> 0:13:16.600
The package version can be locked with SHA256, SAMS5 and packages can be fetched from several

121
0:13:16.600 --> 0:13:30.520
transports such as HTTP, OCL, OCL registries, IPFS, Local 5 systems and NFS.

122
0:13:30.520 --> 0:13:38.680
By default, Reprogate attempts to fetch the packages from dev.debian.orz using the package

123
0:13:38.680 --> 0:13:39.680
name.

124
0:13:39.680 --> 0:13:47.040
So dev.debian.orz server is fast but it's ephemeral.

125
0:13:47.040 --> 0:13:51.160
It doesn't retain all the packages.

126
0:13:51.160 --> 0:14:01.560
So for all packages, Reprogate automatically horsebacks to devian.notset.fwar using the

127
0:14:01.560 --> 0:14:05.720
SHA256 hash.

128
0:14:05.720 --> 0:14:16.680
This is relatively slow but this server provides processing snapshots of all the packages.

129
0:14:16.680 --> 0:14:26.920
You can also configure Reprogate to use OCL registries, IPFS and Local 5 system.

130
0:14:26.920 --> 0:14:35.240
Reprogate currently supports the five distributions, Debian, Ubuntu, Fedora, Alpine and Linux.

131
0:14:35.240 --> 0:14:41.680
Reprogate is expected to be used in containers but can be used with non-continent environments

132
0:14:41.680 --> 0:14:44.440
as well.

133
0:14:44.440 --> 0:14:46.720
The command user is like this.

134
0:14:46.720 --> 0:14:53.320
So you run Reprogate hash generate to generate the hash file and run apt-get install hero

135
0:14:53.320 --> 0:15:03.560
to install hero packages and Reprogate hash generate again and you will get SHA256, SAMS5

136
0:15:03.560 --> 0:15:04.800
like this.

137
0:15:04.800 --> 0:15:15.160
So this file contains hash of 12 slash main slash hero slash hero 2.10 and d6 photo to

138
0:15:15.160 --> 0:15:16.160
dev.

139
0:15:16.160 --> 0:15:25.240
And inside the containers you can run Reprogate install with this SHA256, SAMS5 and Reprogate

140
0:15:25.240 --> 0:15:34.680
fetch this package from HTTP after get repo or maybe from OCL registry or maybe from IPFS

141
0:15:34.680 --> 0:15:40.760
or maybe from NMS depending on the configuration.

142
0:15:40.760 --> 0:15:43.160
And here is the demo.

143
0:15:43.160 --> 0:15:51.760
So to reproduce this demo you have to run specific version of build kit version 0.11.0.

144
0:15:51.760 --> 0:16:05.720
And in this directory I have SHA256, SAMS5 like this.

145
0:16:05.720 --> 0:16:13.560
This is mostly for running GCC.

146
0:16:13.560 --> 0:16:24.000
And Docker file is a complex machine generated and it has a bunch of work arounds like this

147
0:16:24.000 --> 0:16:28.040
for source list stuffs.

148
0:16:28.040 --> 0:16:48.280
And you can use this to test reproducibility.

149
0:16:48.280 --> 0:16:59.720
It takes a few minutes but the result is like this so you will get the same hash 0a3bc

150
0:16:59.720 --> 0:17:11.680
fub67c85 on any machine such as on detailed actions or local laptops.

151
0:17:11.680 --> 0:17:19.080
So you can try this by yourself on your own machine.

152
0:17:19.080 --> 0:17:25.240
And the future works includes simplifying the Docker files and cache management.

153
0:17:25.240 --> 0:17:31.760
I'm also trying to improve interoperability with 26 stages x6 opt and x6 APK for cross

154
0:17:31.760 --> 0:17:33.920
cooperation.

155
0:17:33.920 --> 0:17:40.480
And also the reproducibility should be testable with open SSS, source of provenance.

156
0:17:40.480 --> 0:17:49.280
And probably more contributions are welcome for these topics.

157
0:17:49.280 --> 0:17:51.880
And here is the wrap up of my talk.

158
0:17:51.880 --> 0:17:57.480
So reproducible builds help to adjust the origin of the binary.

159
0:17:57.480 --> 0:18:03.760
And it challenges like non-deterministic time stamps and the project versions.

160
0:18:03.760 --> 0:18:10.240
And the project version 0.11 adds preliminary support for source data APK.

161
0:18:10.240 --> 0:18:19.040
And the project can be used for reproducing the project version with 5, 6 sums.

162
0:18:19.040 --> 0:18:25.720
And I think the demo is still running so I can't show the results of the demo but that

163
0:18:25.720 --> 0:18:30.920
should be like this result.

164
0:18:30.920 --> 0:18:38.400
Any questions?

165
0:18:38.400 --> 0:18:44.360
Would it be fair to say that this sacrifices security in favor of reproducibility because

166
0:18:44.360 --> 0:18:48.760
you would have to keep that list of hashes maintained to make sure that the packages

167
0:18:48.760 --> 0:18:52.120
downloaded are always like the most secure ones?

168
0:18:52.120 --> 0:18:56.240
So your question was how to make it hash wise, right?

169
0:18:56.240 --> 0:19:03.040
How do you make sure that the list of package hashes is always pointing to the most secure

170
0:19:03.040 --> 0:19:07.280
versions of a package?

171
0:19:07.280 --> 0:19:15.440
So you can use reproget hash

172
0:19:15.440 --> 0:19:18.120
and make the hash file like this.

173
0:19:18.120 --> 0:19:28.920
You can also create the hash file by yourself just with text editor or maybe just your own

174
0:19:28.920 --> 0:19:33.280
NSR tool to maintain this hash file.

175
0:19:33.280 --> 0:19:38.000
Okay, we're out of time.

176
0:19:38.000 --> 0:19:40.000
Thank you for the talk.

177
0:19:40.000 --> 0:19:41.000
Thanks everyone for attending.

178
0:19:41.000 --> 0:20:10.120
Clapping


1
0:00:00.000 --> 0:00:17.760
We're starting now. Please. Please quiet down.

2
0:00:17.760 --> 0:00:20.560
Hello folks. Today we are here to talk about Fedora

3
0:00:20.560 --> 0:00:25.800
Corvus and how you can use that to do some fun stuff. The fun stuff being, you know,

4
0:00:25.800 --> 0:00:30.600
hosting your own dedicated multiplayer server so that you and your friends can have some fun.

5
0:00:30.600 --> 0:00:36.400
I'm joined here by Sumantro, Myself, Akash, Deep Dhar. We both work for Red Hat, but we

6
0:00:36.400 --> 0:00:42.720
are Fedora Project contributors and part of Fedora Council as well. So we welcome you to this talk.

7
0:00:42.720 --> 0:00:50.720
Right. So about the things that we would want to talk about, the first and the foremost thing

8
0:00:50.720 --> 0:00:56.440
would of course be the OS, the thing that we run our containers on and why exactly should you give a

9
0:00:56.440 --> 0:01:02.080
damn about it when there are like a plethora of Linux distributions out there with their own twists

10
0:01:02.080 --> 0:01:07.480
and turns attached to them. The next thing is of course putting that operating system to use.

11
0:01:07.480 --> 0:01:13.840
That of course is to have our own dedicated Minecraft server, understand how that process works

12
0:01:13.840 --> 0:01:20.680
and how easy or difficult it can be to actually put that to use. We'll put that to use again for

13
0:01:20.680 --> 0:01:25.720
the Valheim server too because guess what? The community is great and the folks have always

14
0:01:25.720 --> 0:01:31.040
created containers and when it comes to containers, we always have something, some kind of platform

15
0:01:31.040 --> 0:01:37.320
to make use of. And by all means, if you trust me enough, you can totally scan this QR code and

16
0:01:37.320 --> 0:01:42.120
it will lead you to the documentation so you can totally go along with the talk because this will

17
0:01:42.120 --> 0:01:47.200
be more hands-on. We'll be doing stuff over here and we'll be making you folks understand as to

18
0:01:47.200 --> 0:01:53.520
what is happening behind the scenes and why exactly are we doing that. Or you can totally head

19
0:01:53.520 --> 0:01:58.480
over to the schedules page on the container step room and find our links over there. So

20
0:01:58.480 --> 0:02:05.480
documentation is over there as well. Speaking of the operating system that we're going to talk

21
0:02:05.480 --> 0:02:13.280
about, what exactly is Fedora CoreOS? To begin with, it's a set of packages that's very minimal in

22
0:02:13.280 --> 0:02:19.520
nature but it's very focused to the container-based workflows. So you won't get to see a lot of

23
0:02:19.520 --> 0:02:24.880
bells and whistles out of the box. Sure, there's an option to add those by yourself whenever you

24
0:02:24.880 --> 0:02:30.280
feel like. But then again, it's the networking, it's the container-based workflows like Moby,

25
0:02:30.280 --> 0:02:36.120
Podman, which I installed over there as well as some tools like Firewall that you would need to

26
0:02:36.120 --> 0:02:39.600
make sure that people actually connect to your containers and be able to do what they want to

27
0:02:39.600 --> 0:02:46.400
do, which are pre-installed, which gives you just enough of a stuff to get started and a canvas to

28
0:02:46.400 --> 0:02:51.640
actually add your own distributions, your own packages on the top of it and grow upon it as you

29
0:02:51.640 --> 0:02:58.120
go on. And there's this thing called RPMOS tree, which is based on LibOS tree. The entire file

30
0:02:58.120 --> 0:03:03.440
system is transactional in nature, which essentially means that if I were to add packages on the top

31
0:03:03.440 --> 0:03:09.960
of the existing deployment, well, an existing set of installed packages, I can do so by ease

32
0:03:09.960 --> 0:03:14.840
without actually worrying that, oh, what's going to happen if I add this bleeding edge package

33
0:03:14.840 --> 0:03:21.000
when my deployment stopped failing to work? And if it does, you can always find your way back.

34
0:03:21.000 --> 0:03:26.520
It's a good kind of a workflow. So if you understand Git, it's pretty much like that. So you can

35
0:03:26.520 --> 0:03:31.400
always rebase your deployments, your own set collection of packages at any point in time,

36
0:03:31.400 --> 0:03:38.840
and just fall back at any point in time you want to go back to. The next thing is the fact that

37
0:03:38.840 --> 0:03:46.160
this is secure as well as scalable. So we, of course, would like to have this not only deployed in

38
0:03:46.160 --> 0:03:52.280
bare-metal servers, but as well in a plethora of VMs having their own set of purposes. Now,

39
0:03:52.280 --> 0:03:59.840
the way we do that is by the use of configuration. And it's kind of difficult that you need to

40
0:03:59.840 --> 0:04:06.080
configure like tens of thousands of machines with hand. So guess what? You don't. You use

41
0:04:06.080 --> 0:04:10.760
something called beauty in configuration, which is a human readable form of something called

42
0:04:10.760 --> 0:04:17.440
ignition. And what it exactly does is you specify what kind of a change that you want to make on

43
0:04:17.440 --> 0:04:22.720
that operating system. Some users that you want to add, some files that you want to make create,

44
0:04:22.720 --> 0:04:29.480
some networking rules, firewall rules, services to start stuff like that. You can do so so that

45
0:04:29.480 --> 0:04:34.080
when in the first boot you get the operating system exactly the way you want. So you don't really

46
0:04:34.080 --> 0:04:38.560
have to install stuff and then configure it and then do that like a thousand times just because

47
0:04:38.560 --> 0:04:44.840
scalability is a thing. The next thing that I want to talk about is the fact that this operating

48
0:04:44.840 --> 0:04:51.680
system is available in not just x86 underscore 64, but in a lot of other places architecture such as

49
0:04:51.680 --> 0:05:01.120
AR 64 and ST90X as well. And we plan on providing the support for other operating systems architectures

50
0:05:01.120 --> 0:05:10.280
in the coming times. Speaking of the minimal set of packages, how minimal is it that we're talking?

51
0:05:10.280 --> 0:05:17.840
Let's give that a number. So we have like three release sets, the one for stable, the testing,

52
0:05:17.840 --> 0:05:25.160
as well as next they are determined by the number at the penultimate decimal place. So 3.0 is stable,

53
0:05:25.160 --> 0:05:33.240
2.x is testing and 1.x is next. And you can totally see what those purposes are for and why

54
0:05:33.240 --> 0:05:40.920
exactly would someone want to go for a next or stable or vice versa. So say for instance if there's

55
0:05:40.920 --> 0:05:45.560
a contributor who wants to develop this thing they want to test all the bleeding is packages that

56
0:05:45.560 --> 0:05:51.400
come to this platform, they know what they can choose. And for the ones who really want to set up a

57
0:05:51.400 --> 0:05:55.920
server for their home people they don't really want to move around a lot of stuff. They can either go

58
0:05:55.920 --> 0:06:01.480
for stable or they can reach out to our friends at CentOS because they have a CentOS team core as

59
0:06:01.480 --> 0:06:11.960
too. So how exactly does this operating system become secure and scalable? I mean I do sure like

60
0:06:11.960 --> 0:06:20.720
giving a business pitch because it's all buzzwords. So there are ways to make sure that the packages

61
0:06:20.720 --> 0:06:29.400
that you have installed or to say layered on the top of your existing installation, the way it gets

62
0:06:29.400 --> 0:06:35.000
automatically updated is very much in your control, which essentially means that it can go out in the

63
0:06:35.000 --> 0:06:42.240
open, start downloading everything, every new and bleeding it stuff if you ask it to or just hold

64
0:06:42.240 --> 0:06:47.120
back on it just because you want a stable operating system, you want to really curate the packages

65
0:06:47.120 --> 0:06:55.280
that you end up having so you have a lesser variness to updates that you end up having. So it's

66
0:06:55.280 --> 0:07:01.280
totally in your control and by all means there are ways to totally disable automated updates as and

67
0:07:01.280 --> 0:07:08.200
when you see fit. And these updates for the packages that you have installed, these don't get

68
0:07:08.200 --> 0:07:15.720
applied as soon as they get installed but rather you kind of make those applications of those

69
0:07:15.720 --> 0:07:22.080
updates when you want them to happen. Usually it's a reboot because well the service actually

70
0:07:22.080 --> 0:07:28.440
happens to go through all the packages and refresh them based on the updates that has happened in

71
0:07:28.440 --> 0:07:34.040
the last boot but you can always do it either live or in the next time as well. So at any point in

72
0:07:34.040 --> 0:07:38.760
time you feel like that a certain update has gone through which should not have, you can rest assured

73
0:07:38.760 --> 0:07:43.800
because that has not yet applied and you can always fall back to the previous deployment. And oh,

74
0:07:43.800 --> 0:07:49.960
I just happened to explain the last point. So that is rolling back whenever you feel like it. So

75
0:07:49.960 --> 0:07:56.320
depending on how you want to use this, you can use it on a Raspberry Pi if you are having one on

76
0:07:56.320 --> 0:08:02.480
your shelf gathering dust or you can have multiple VMs of yours on that desktop of yours that you

77
0:08:02.480 --> 0:08:08.400
think is a overkill and you don't use it anything else other than gaming. And of course there are

78
0:08:08.400 --> 0:08:13.960
choices to use it on the cloud too which we totally suggest because this is something that we want

79
0:08:13.960 --> 0:08:20.040
to deploy on scale. So the kind of replicated deployment that you can have kind of depends on

80
0:08:20.040 --> 0:08:28.680
the kind of purpose that you would want to use this for. Right. So that's basically about

81
0:08:28.680 --> 0:08:34.840
operating system itself. Now we're going to make that thing, put that thing into use and understand

82
0:08:34.840 --> 0:08:41.040
how we can do some fun stuff. You know, set ourselves up an environment on this laptop itself. I set

83
0:08:41.040 --> 0:08:49.200
myself up a virtualization host and I'll configure it to the way I want it to. So if I want a user,

84
0:08:49.200 --> 0:08:54.840
I'll add it there. If I want a server to run in a certain way, maybe allow for no more than 32

85
0:08:54.840 --> 0:09:01.280
people, I do so too. And by all means here again, this is a thing that you can follow along. So

86
0:09:01.280 --> 0:09:08.880
feel free to read the documentation by scanning the QR code and we'll move on to the next one.

87
0:09:08.880 --> 0:09:15.720
Right. So the setup environment that we have in place is VMware workstation. We really wanted

88
0:09:15.720 --> 0:09:22.320
to make sure that things are a lot more easier and off-limited scope for scope of this presentation.

89
0:09:22.320 --> 0:09:27.280
But you can use Quemu, you can use VirtualBox, you can use anything that you want or if you want to

90
0:09:27.280 --> 0:09:33.520
just nail it, you really want to make use of a bare metal too. And the specification that we

91
0:09:33.520 --> 0:09:38.320
provided it for are listed over here. And for this case, just because we want a server that

92
0:09:38.320 --> 0:09:44.080
actually runs, that actually is something that won't get a lot of packages, a lot of updates

93
0:09:44.080 --> 0:09:48.880
down the line, we really want to make sure that this runs in the long term. We have approached

94
0:09:48.880 --> 0:09:57.080
the stable stream for this one. Right. So I'm going to exit out of the screen for a bit and go

95
0:09:57.080 --> 0:10:07.120
more into detail about the stuff that I talked about over here. Right. So speaking of the

96
0:10:07.120 --> 0:10:18.120
demonstration, I have an entire directory of files that I need. Now these can either be firewall

97
0:10:18.120 --> 0:10:23.680
rules, the system, the units that I want to enable on the first boot, the packages that I want to

98
0:10:23.680 --> 0:10:31.360
install, the configuration for the swap that I want to put into place, stuff like that. So to get

99
0:10:31.360 --> 0:10:37.880
started, like I mentioned, we required a butane configuration. Now what exactly would that be?

100
0:10:37.880 --> 0:10:51.040
Let's find out. PuteCons and ifcauseMind.PU. Well, basically it's just a list of directives that

101
0:10:51.040 --> 0:10:56.160
lets you do the stuff that you want to make happen. So if you want to create users with a set

102
0:10:56.160 --> 0:11:04.280
password for them, add SSS authorized keys, stuff like that, you can have them over here. The same

103
0:11:04.280 --> 0:11:09.160
goes for the stories, the symbolic links that you want to make happen from one folder to another

104
0:11:09.160 --> 0:11:15.680
directory. And you can have files that you source from a remote location and place it to somewhere

105
0:11:15.680 --> 0:11:24.040
else. Then finally we get to the system, the unit spot, where we can actually declare services. Now

106
0:11:24.040 --> 0:11:30.920
these services can either be for installing packages, adding firewall rules, enabling containers,

107
0:11:30.920 --> 0:11:37.600
stuff like that, and you can totally control them the way you want. And finally, there's this

108
0:11:37.600 --> 0:11:43.960
cadence about what needs to be done first that you can use with the use of systemD directives,

109
0:11:43.960 --> 0:11:52.120
like before, depends on, but you can also mention them over here. Right. So as you can see that we

110
0:11:52.120 --> 0:11:57.760
have roughly three systemD units that we have mentioned over here. The first, of course, is to

111
0:11:57.760 --> 0:12:03.640
install portman compose and firewallD. We have portman pre-installed, but not portman compose,

112
0:12:03.640 --> 0:12:10.880
so we might as well end up getting one. And the next is to allow Minecraft server to firewall. So

113
0:12:10.880 --> 0:12:16.000
before that, we, of course, would reboot because, like I mentioned, your updates only get applied

114
0:12:16.000 --> 0:12:22.720
when you want them to be applied, which by this case, by default, is reboot. There's also an option

115
0:12:22.720 --> 0:12:29.720
to apply them live, but then again, you'd want to use them for applications like, well, a text

116
0:12:29.720 --> 0:12:33.920
editor or something of that kind, but definitely not for something that will end up becoming a

117
0:12:33.920 --> 0:12:40.760
service on itself. And then finally starting the dedicated server, now that the stuff that we

118
0:12:40.760 --> 0:12:50.760
needed for the firewallD service rules are everything in place. So just to avoid using more

119
0:12:50.760 --> 0:12:57.200
time during the presentation, what we did was, well, we did that in the hindsight like previously,

120
0:12:57.200 --> 0:13:05.320
and now what we have over here is the IP that we can connect to the container, the one that's

121
0:13:05.320 --> 0:13:11.560
running firewallD, the one that runs that firewallD service as well as the Minecraft dedicated

122
0:13:11.560 --> 0:13:19.560
server. To go forward in detail, I would show the status of the units that I mentioned off,

123
0:13:19.560 --> 0:13:27.480
like those for allowing these, and depending on what kind of condition that you make happen,

124
0:13:27.480 --> 0:13:32.360
you can either make them run once, like if the firewallD service has been enabled, so you don't

125
0:13:32.360 --> 0:13:37.000
want to enable it again, so you can always put a flag of some kind telling that if a certain

126
0:13:37.000 --> 0:13:45.800
condition satisfies, which it seems to have, it won't run again. So the next thing that I want to

127
0:13:45.800 --> 0:13:52.520
show you is of course the server itself. So if I were to follow a certain unit, let's just say

128
0:13:52.520 --> 0:14:00.280
start Minecraft server, but I'm going to save myself some effort and go like that. So we have

129
0:14:00.280 --> 0:14:07.720
this container right here that's running on Pardman, and yeah, there's this internal IP address as

130
0:14:07.720 --> 0:14:15.000
well that lets us connect to that. And finally, about the services that lets you install both

131
0:14:15.000 --> 0:14:22.480
Pardman Compose as well as the firewallD. Well, head over here, where's the terminal? There it is.

132
0:14:22.480 --> 0:14:48.600
And do, of course, mine. Just a moment. And allowing systemD system, allowing Minecraft server

133
0:14:48.600 --> 0:14:54.360
to the firewall. So we have set up the condition with style stat. Once that thing is done, you

134
0:14:54.360 --> 0:15:01.320
create a file called done, allow Minecraft server to firewall. So with the services like these,

135
0:15:01.320 --> 0:15:06.360
we kind of make sure that the service runs exactly when we want it to, and not any time

136
0:15:06.360 --> 0:15:13.000
more than that. So once it's done, it's done. And of course, the condition for setting up in

137
0:15:13.000 --> 0:15:19.920
the first boot kind of falls in line for the one that helps us install these packages, especially

138
0:15:19.920 --> 0:15:27.920
for the Pardman Compose and firewallD. So condition for the first boot is true, but you reboot after

139
0:15:27.920 --> 0:15:34.240
this thing has completely done. And by that, we help applying these packages on the existing

140
0:15:34.240 --> 0:15:42.680
deployment. Right. So we'll go over here, and we'll check the IP address again. This happens to be

141
0:15:42.680 --> 0:15:49.240
this is NAT forwarded. So as much as any of you folks have Minecraft installed, I'm really sorry

142
0:15:49.240 --> 0:15:53.960
that you folks won't be able to connect to this one for the security purposes. But I'm going to

143
0:15:53.960 --> 0:16:02.520
connect to it and see what kind of world it gets me into. So we have the IP 192.168.234.129.

144
0:16:02.520 --> 0:16:09.000
Let's see if it's reachable. Well, actually, it's kind of a firewallD thing if it's the service

145
0:16:09.000 --> 0:16:22.680
runs. And if the rules have been applied, we would be able to. Hmm, strange. Just a moment, folks.

146
0:16:22.680 --> 0:16:40.320
Oh, it seems to have run. Now to have a plan B and a plan C, I have heard stories of folks losing

147
0:16:40.320 --> 0:16:45.400
their presentations. They have like three flash drives. So I also thought of deploying one in my

148
0:16:45.400 --> 0:16:52.640
home. But we probably won't need that because guess what? We have a server that says that it's

149
0:16:52.640 --> 0:17:00.080
running on this host. And it's running on, well, the forced-in setup that we have here. Well,

150
0:17:00.080 --> 0:17:04.360
the other one, the plan C, of course, does not happen to be a plan C anymore because there's

151
0:17:04.360 --> 0:17:15.240
something that I can't reach out to. So I'm going to connect over to this one. Right. So the worst

152
0:17:15.240 --> 0:17:20.480
thing that can happen to a player when the entire Minecraft world has happened. But then again, if

153
0:17:20.480 --> 0:17:30.080
I were to alter it and were to check the logs of the service, I should be able to see that I indeed

154
0:17:30.080 --> 0:17:37.720
have connected and have reached. So, you know, folks can totally get creative with what they can do

155
0:17:37.720 --> 0:17:44.080
with this. They can have their own servers hosted on their local place, maybe have an OCI cloud to

156
0:17:44.080 --> 0:17:49.160
do some reverse proxing to have their friends connect to it as well. The possibilities are endless.

157
0:17:49.160 --> 0:17:56.120
And when it gets deployed on scale, on cloud, it just goes to the next level. And it's not just

158
0:17:56.120 --> 0:18:01.960
for gaming, but rather for if you want to do a local deployment for Plex or anything for that

159
0:18:01.960 --> 0:18:10.640
matter which uses containers, it is possible. Now I'm going to hand it over to Sumanthro to be able

160
0:18:10.640 --> 0:18:18.160
to talk about the Valheim setup. Say back to the presentation. What do you want to?

161
0:18:18.160 --> 0:18:26.520
Hey guys, so exactly much like the Minecraft setup, we have the Valheim setup which is basically

162
0:18:26.520 --> 0:18:33.480
setting up the environment variables, configuring the host, making it work. Technically, all the

163
0:18:33.480 --> 0:18:57.960
documentation has been put out on that QR code. So, if I go over here. Yeah, so all the required

164
0:18:57.960 --> 0:19:08.440
files has been put out here. So, like Akash explained, we have a buton configuration generated by

165
0:19:08.440 --> 0:19:14.960
this ignition file. So, if you look at it over here, the buton configuration has the storage,

166
0:19:14.960 --> 0:19:21.880
the directories, and all we need the files, any rules. And finally, the system unit services

167
0:19:21.880 --> 0:19:33.080
that needs to run, specifically in much like the exact case of Minecraft. If I go back,

168
0:19:33.080 --> 0:19:40.720
this is actually the ignition file. This is the back door of how CoreOS would basically look at

169
0:19:40.720 --> 0:19:48.040
that configuration and parse it for its own purposes. So, this is perfectly mission-readable,

170
0:19:48.040 --> 0:19:55.280
not supposed to be edited by hand. But if you guys wanted to change something, that's supposed

171
0:19:55.280 --> 0:20:00.400
to be on the buton side of things. Coming back to the configuration, there's a root, there's

172
0:20:00.400 --> 0:20:11.360
supposed to be ETC system DE, and then the ZRAM generator service. And this one is swap on ZRAM

173
0:20:11.360 --> 0:20:20.200
service. By default, we have put a ZRAM zero as the default setting. It requires a bunch of RAM,

174
0:20:20.200 --> 0:20:26.640
and we literally have put one of those services over there just to ensure things are going fine.

175
0:20:26.640 --> 0:20:34.800
Going back to my systems, there are going to be a server through the firewall. That's exactly the

176
0:20:34.800 --> 0:20:49.680
same. If I open it, that's a very basic thing. Going back, we have the start-velven dedicated

177
0:20:49.680 --> 0:20:59.360
service, and this one is going to have the podman compose parts, and that's an execute script with

178
0:20:59.360 --> 0:21:08.600
up and down. Coming back to the point, so one more thing, we actually hosted it on private

179
0:21:08.600 --> 0:21:17.320
servers back in the home. The way that we kind of can get it up and running right now is reaching,

180
0:21:17.320 --> 0:21:31.600
I should probably practice turning on microphones before speaking. For the interest of time, what

181
0:21:31.600 --> 0:21:37.760
we'll do is we'll just not show the Valheim demo, unfortunately, apologies for that, but this is

182
0:21:37.760 --> 0:21:42.840
totally reachable on the VM that we have set up over here, and the port that it goes on is

183
0:21:42.840 --> 0:21:49.720
reachable. But the point being that these things are very possible, fun stuff, and kind of gives you

184
0:21:49.720 --> 0:21:55.440
a reason why you would want to try a new workflow where the entire file system, the entire packaging

185
0:21:55.440 --> 0:22:00.120
workflow is nothing but a get kind of a thing, so you can roll back and roll front depending on

186
0:22:00.120 --> 0:22:06.080
what you want to do. And the best thing that you can do is try it out today if you have a VM to

187
0:22:06.080 --> 0:22:13.680
spare or a device to do so. Right, so that's about it for the presentation. We'd really love to have

188
0:22:13.680 --> 0:22:15.440
your questions and answer them too.

189
0:22:15.440 --> 0:22:37.960
We have a bunch of time for questions.

190
0:22:37.960 --> 0:22:49.480
Hello, thank you very much for your presentation. I had a question about the relationship between

191
0:22:49.480 --> 0:22:57.640
Fedora Core, Fedora Core OS, and persistent storage. My understanding is that when you're

192
0:22:57.640 --> 0:23:01.200
working in containers, you want everything to be ethereal and temporary, and don't worry about

193
0:23:01.200 --> 0:23:08.200
that. But you mentioned, if you have some sort of media server, how would you address that sort of

194
0:23:08.200 --> 0:23:14.680
persistent sort of data pool? Is that part of butane or how is that configured and managed?

195
0:23:14.680 --> 0:23:16.680
Do you want to answer?

196
0:23:16.680 --> 0:23:24.200
Right, so the way we have it is by setting up mounts. The way it works is anything that gets

197
0:23:24.200 --> 0:23:29.200
affected by the installation, removal, updating of the packages, these are the ones that are very

198
0:23:29.200 --> 0:23:36.200
transient in nature. So these can get affected. But if you have mounts that lead to some different

199
0:23:36.200 --> 0:23:42.200
place, they most likely won't be. The home directory would most likely stay untouched. So as long as

200
0:23:42.200 --> 0:23:47.200
it does not have anything to do with a certain package, if it's not a file that gets introduced

201
0:23:47.200 --> 0:23:53.200
when you install a package or something of that kind, it for most likely won't be touched and it

202
0:23:53.200 --> 0:24:00.200
would always stay the same.

203
0:24:00.200 --> 0:24:03.200
Any more questions?

204
0:24:03.200 --> 0:24:25.200
Ah, okay.

205
0:24:25.200 --> 0:24:41.200
What is the relationship between Fidora IoT and Fidora IoT?

206
0:24:41.200 --> 0:24:46.200
Has everyone got that? What's the difference between Fidora and what?

207
0:24:46.200 --> 0:24:51.200
Fidora IoT.

208
0:24:51.200 --> 0:24:59.200
So for the record, Fidora IoT was an official addition for a long time, which means Fidora would

209
0:24:59.200 --> 0:25:07.200
push in updates regularly. CoreOS recently became an addition which is a release back, which now

210
0:25:07.200 --> 0:25:13.200
brings into question the release criteria for IoT and the boards that we support. They were very

211
0:25:13.200 --> 0:25:21.200
officially declared as supported. But in case of CoreOS, there's no such official support that was

212
0:25:21.200 --> 0:25:26.200
given before. It was never made an addition. So that's one thing that you're missing out on.

213
0:25:26.200 --> 0:25:32.200
Second thing that you're missing out on is IoT, on the other hand, is released every six months with

214
0:25:32.200 --> 0:25:41.200
the release. Fidora in CoreOS in this case would have a stream cycle, which means the next would be,

215
0:25:41.200 --> 0:25:47.200
if today we get a next stream, in 15 days that would become testing, and then in next 15 days it

216
0:25:47.200 --> 0:25:54.200
would become the stable. And then that's how it's going to roll. Obviously, given the fact that the

217
0:25:54.200 --> 0:26:01.200
next stream is tested by the CoreOS' own CI, which runs for almost all the basic tests which

218
0:26:01.200 --> 0:26:08.200
is required for the thing to run, both are based out of OS tree, but again, every 15 days, CoreOS

219
0:26:08.200 --> 0:26:15.200
updates to the next stream or moves through the next stream. In case of IoT, you get it every six months.

220
0:26:26.200 --> 0:26:34.200
Thanks for the talk. I would love to see this kind of bootstrapping of CoreOS happening on system

221
0:26:34.200 --> 0:26:43.200
D and spawn, for instance. Would that be feasible like having that butane declarative way of just

222
0:26:43.200 --> 0:26:51.200
instantiate me something under system D and spawn? Is that something that can work already?

223
0:26:51.200 --> 0:26:57.200
It technically can, but then again, we kind of have to understand if system D and spawn,

224
0:26:57.200 --> 0:27:04.200
the environment inside of it will have system D or not. It's very much possible. One of the

225
0:27:04.200 --> 0:27:12.200
use cases that I've seen using it is building packages or testing them for that matter. The very

226
0:27:12.200 --> 0:27:19.200
fact that you don't really have to configure it when it's up, but rather decide how it's going to look

227
0:27:19.200 --> 0:27:29.200
like from the get-go, and that deployment can be replicated anywhere. That really makes it a prime image

228
0:27:29.200 --> 0:27:35.200
of some kind. It does not even have to be a container image. That thing can be based upon and using a

229
0:27:35.200 --> 0:27:40.200
virtual machine or system D and spawn, as you mentioned, you can have that kind of blueprint, but

230
0:27:40.200 --> 0:27:47.200
guess what? It's not a container. It's a full-blown operating system which is running like it would on a bare

231
0:27:47.200 --> 0:27:51.200
metal node. Thank you.

232
0:27:58.200 --> 0:28:01.200
This is the last question we can take.

233
0:28:05.200 --> 0:28:13.200
I was wondering this ignition file is only applied on the first startup. Can we make some kind of

234
0:28:13.200 --> 0:28:21.200
declarative configuration for Silverblue, or for not for Silverblue for KOS? Is this also supported?

235
0:28:23.200 --> 0:28:29.200
So if I get your question correctly, you are wondering if a certain configuration can be run again if I want to

236
0:28:29.200 --> 0:28:44.200
on the same deployment.

237
0:28:44.200 --> 0:28:50.200
Right. It's totally possible. The thing that you end up getting after running these many steps after running the

238
0:28:50.200 --> 0:28:57.200
butane configuration is deployment. What you can do is you can use that deployment and run a butane

239
0:28:57.200 --> 0:29:04.200
configuration on the top of it so that it becomes your base deployment and anything that you add on the top of it is the

240
0:29:04.200 --> 0:29:13.200
resulting deployment. The very thing that deployment states in this case is a state in which the operating system is in right now.

241
0:29:13.200 --> 0:29:23.200
So if you just mangle the state to create a new one, that state becomes your existing state. That's about it.

242
0:29:23.200 --> 0:29:32.200
One last thing, guys. We have a Fedora booth. Feel free to go there, grab swags and what not.

243
0:29:32.200 --> 0:29:34.200
And thanks for attending.

244
0:29:34.200 --> 0:29:55.200
Thanks.


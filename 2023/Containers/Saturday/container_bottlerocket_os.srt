1
0:00:00.000 --> 0:00:09.000
And our next talk is by Sean and he's going to talk about bottle rocket.

2
0:00:09.000 --> 0:00:10.000
Thanks.

3
0:00:10.000 --> 0:00:11.000
Thank you.

4
0:00:11.000 --> 0:00:22.000
Yeah, so I'm going to talk about the Bile Rocket container optimized Linux distribution.

5
0:00:22.000 --> 0:00:24.000
My name is Sean McGinnis.

6
0:00:24.000 --> 0:00:29.000
I work, I'm an engineer on the Bile Rocket project and I work at AWS.

7
0:00:29.000 --> 0:00:35.000
So I'll just go over what a container optimized Linux is.

8
0:00:35.000 --> 0:00:39.000
I'm assuming most people in this track probably have an idea.

9
0:00:39.000 --> 0:00:45.000
But go over the basics, talk a little bit about what Bile Rocket is, show a little bit so you get a feel for it.

10
0:00:45.000 --> 0:00:50.000
And what I'd really like is to see others get involved.

11
0:00:50.000 --> 0:01:00.000
So the statement, you know, kind of the mission statement I guess is that it's a free and open source Linux based operating system for hosting containers.

12
0:01:00.000 --> 0:01:03.000
So what does that mean?

13
0:01:03.000 --> 0:01:14.000
Before we get into, you know, the motivations behind that, it's interesting to look at general purpose Linux distributions.

14
0:01:14.000 --> 0:01:23.000
And some of the challenges with using those when you are, when you have hundreds of nodes in a Kubernetes cluster,

15
0:01:23.000 --> 0:01:28.000
you really have a lot of workloads that you're running, containerized workloads that you're running,

16
0:01:28.000 --> 0:01:31.000
and you need to optimize how you're using the resources.

17
0:01:31.000 --> 0:01:39.000
So with most general purpose distros, it's, you know, the configuration is immutable.

18
0:01:39.000 --> 0:01:47.000
You can log into the machine, you can make changes, make adjustments, add, install extra services.

19
0:01:47.000 --> 0:01:56.000
Out of the box, a lot of them come with a lot, you know, kind of a default baseline set of services that you might not necessarily need when you're just trying to run containers.

20
0:01:56.000 --> 0:02:06.000
And that uses more system resources and then also creates more of a security risk of there's more attack service available.

21
0:02:06.000 --> 0:02:12.000
And because of that, because you can log in, you can change things, you can tweak configuration settings,

22
0:02:12.000 --> 0:02:22.000
those kinds of systems are easier to become pets where you really customize that node exactly how you want it,

23
0:02:22.000 --> 0:02:29.000
and you're less likely to just blow that away and spin up a new one, especially when, okay, I've made some changes there.

24
0:02:29.000 --> 0:02:34.000
I don't quite remember what I changed because I was troubleshooting something, there might be something important there.

25
0:02:34.000 --> 0:02:41.000
So now I need to take care of this node and it becomes my pet.

26
0:02:41.000 --> 0:02:50.000
So for container optimized Linux distributions, especially for Bio Rocket,

27
0:02:50.000 --> 0:03:00.000
really try to optimize for just the services that you need running on your Linux machine to be able to run your containers.

28
0:03:00.000 --> 0:03:05.000
That means less resource usage for things that aren't very important to you,

29
0:03:05.000 --> 0:03:11.000
it means less attack area for someone to compromise that machine,

30
0:03:11.000 --> 0:03:18.000
get all kinds of added benefits, faster boot time, smaller image sizes to transfer around.

31
0:03:18.000 --> 0:03:29.000
So with Bio Rocket, we try to make things as small as possible, just what you need.

32
0:03:29.000 --> 0:03:33.000
And try to make it more secure by default.

33
0:03:33.000 --> 0:03:38.000
I don't say secure by default because that's impossible, try to make it more secure.

34
0:03:38.000 --> 0:03:46.000
So really locking things down, making sure that if someone were to try to compromise your host,

35
0:03:46.000 --> 0:03:49.000
they're going to have a hard time doing it.

36
0:03:49.000 --> 0:03:52.000
And it's open source.

37
0:03:52.000 --> 0:04:01.000
Bio Rocket is not a general purpose operating system, if you're looking to do other things besides container workloads,

38
0:04:01.000 --> 0:04:05.000
Bio Rocket is probably not the right distro for you.

39
0:04:05.000 --> 0:04:10.000
It is backed by AWS but it is not an AWS only solution.

40
0:04:10.000 --> 0:04:25.000
Coming from AWS it is very well integrated with AWS but I hope that doesn't stay the primary case for long.

41
0:04:25.000 --> 0:04:28.000
And it is not a container based OS.

42
0:04:28.000 --> 0:04:35.000
So what I mean by that, and this is a lot of, comes up a lot in conversations where there's this confusion

43
0:04:35.000 --> 0:04:44.000
where you talk about a container distro and different people kind of already have a preconception of what that term means.

44
0:04:44.000 --> 0:04:54.000
So the really, the two kind of paradigms that come up are the distro, that's kind of the base image that you build on top of.

45
0:04:54.000 --> 0:04:59.000
So you're docker fell from Bio Rocket versus your OS.

46
0:04:59.000 --> 0:05:03.000
You're running and then on that you spin up containers.

47
0:05:03.000 --> 0:05:11.000
And it really is, when we talk about Bio Rocket being a container optimized Linux, it's that second one.

48
0:05:11.000 --> 0:05:22.000
Bio Rocket is not something that you would use to create a container image.

49
0:05:22.000 --> 0:05:32.000
A little background of Bio Rocket, we, if you see the date in the bottom left there, we launched March 2020.

50
0:05:32.000 --> 0:05:36.000
Which there are a few other things going on around that time.

51
0:05:36.000 --> 0:05:43.000
So didn't quite make the big splash on the launch there that we had hoped for.

52
0:05:43.000 --> 0:05:53.000
But it's great now to actually be back in person in front of people being able to talk about the work that we've done in the last two years, or three years.

53
0:05:53.000 --> 0:05:59.000
And hopefully get the awareness out there a little more.

54
0:05:59.000 --> 0:06:07.000
Bio Rocket, right now we build and distribute different variants.

55
0:06:07.000 --> 0:06:19.000
The variants term for us is, it's the, how we try to optimize things for your specific scenario.

56
0:06:19.000 --> 0:06:28.000
So if you're running Kubernetes 1.22, there is a variant specifically for Kubernetes 1.22.

57
0:06:28.000 --> 0:06:33.000
And Amazon ECS and VMware.

58
0:06:33.000 --> 0:06:40.000
The reason to have these different variants is back to that idea of no extra overhead.

59
0:06:40.000 --> 0:06:50.000
So for these, for the metal variant, we try to limit the number of kernel drivers that are loaded.

60
0:06:50.000 --> 0:07:01.000
The kernel drivers that you need between a metal deployment where you're running on an actual server hardware, versus where you're running in a virtual machine instance, are different.

61
0:07:01.000 --> 0:07:07.000
You know, we would know if you're running in a virtual machine, there's a very small subset of the available drivers that you need to actually do that.

62
0:07:07.000 --> 0:07:10.000
So anything extra is taken out of there.

63
0:07:10.000 --> 0:07:18.000
Any specific agents that are needed to integrate well, like in VMware, we have those baked into that variant.

64
0:07:18.000 --> 0:07:26.000
You pick the variant that you want for your scenario and that gives you a well integrated option.

65
0:07:26.000 --> 0:07:38.000
Now Bio Rocket isn't, you know, we're far from the leaders in container optimized distributions.

66
0:07:38.000 --> 0:07:42.000
CoreOS is one, you know, they really popularized the whole idea.

67
0:07:42.000 --> 0:07:50.000
Flakar is very popular. I just wanted to acknowledge that and make sure that everyone's aware.

68
0:07:50.000 --> 0:07:58.000
There are other options out there. None of the things here are meant to say one is better than the other.

69
0:07:58.000 --> 0:08:04.000
They all approach things from slightly different angles, just because there's maybe a smaller list for one.

70
0:08:04.000 --> 0:08:08.000
You know, if you're using that platform, then you're well integrated.

71
0:08:08.000 --> 0:08:17.000
Maybe that is the best option for you. But Bio Rocket is trying to address all of these kind of similar problem spaces that the other distributions are doing.

72
0:08:17.000 --> 0:08:27.000
We all come at it a little different way, just like how you have Ubuntu and Red Hat and many, many other general purpose distributions.

73
0:08:27.000 --> 0:08:37.000
So to dive into Bio Rocket a little bit, this, there really isn't too much more than these blocks.

74
0:08:37.000 --> 0:08:44.000
You know, we have the base Linux kernel. System.bedewe is used to manage things.

75
0:08:44.000 --> 0:08:48.000
And we actually run two different container instances.

76
0:08:48.000 --> 0:09:02.000
And the reason for this is, again, security. Everything on the left hand side, host containers, are things that are used to manage the node.

77
0:09:02.000 --> 0:09:12.000
They're things that have a little more privilege, that might be able to access things that regular pods that are running on the container instance that's used, say, with Kubernetes,

78
0:09:12.000 --> 0:09:22.000
that would be a little more locked down. And then if there is any security vulnerability, it helps isolate things.

79
0:09:22.000 --> 0:09:36.000
It's an API driven configuration. So when you deploy an instance, you can give a configuration that actually, everything, even though it ends up being a file with settings,

80
0:09:36.000 --> 0:09:48.000
everything goes through the API and that's what actually sets the values for how, what happens when this instance boots up and runs.

81
0:09:48.000 --> 0:09:55.000
The host containers, so again, the things with a little more privilege.

82
0:09:55.000 --> 0:10:02.000
Host container is really where, how you would access the machine.

83
0:10:02.000 --> 0:10:13.000
So Bio Rocket, the actual Bio Rocket base itself, if you look at this actual Linux kernel running and all the systems on there, there's no shell.

84
0:10:13.000 --> 0:10:24.000
There's no SSHD. It really is isolated. You need to physically connect some way to this instance.

85
0:10:24.000 --> 0:10:29.000
So how do you actually do things? And that's where the control container comes in.

86
0:10:29.000 --> 0:10:42.000
That provides an environment that you can connect to and has a few of the tools that you may need if you need to actually interact beyond the API configuration.

87
0:10:42.000 --> 0:10:50.000
One step above that then is from that control container, you can launch the, an admin container.

88
0:10:50.000 --> 0:10:58.000
And that actually does then give you the option to run SSHD. It lets you access more of the system settings.

89
0:10:58.000 --> 0:11:04.000
But it's something that's not run by default and it's not something that we recommend you keep running.

90
0:11:04.000 --> 0:11:12.000
Really, it's there, kind of a break glass if you need it. You need to get in the node. You need to be able to troubleshoot some things.

91
0:11:12.000 --> 0:11:17.000
This is how you would do it by running an admin container.

92
0:11:17.000 --> 0:11:21.000
And then there's also other privileged things that we call bootstrap containers.

93
0:11:21.000 --> 0:11:27.000
Those are things that, they're container images that you can customize and spin up to be able to do special things.

94
0:11:27.000 --> 0:11:38.000
We've seen some cases where, okay, maybe I have some specific file system requirements or I need to do some special thing.

95
0:11:38.000 --> 0:11:48.000
Bootstrap container is one of those host containers that's a little more privileged that you can have it when the system just starts up, initializes.

96
0:11:48.000 --> 0:11:56.000
That can, can set some, do some, some custom things for you.

97
0:11:56.000 --> 0:12:12.000
So to see what this actually looks like, you know, I talk very vaguely about distributions, I'll just show you what it's like to interact with a Biorocket host.

98
0:12:12.000 --> 0:12:23.000
So typically you would, you would, the only way you would interact with the host is through whatever container orchestration you're using.

99
0:12:23.000 --> 0:12:28.000
You shouldn't care what's running, what nodes are actually part of your cluster.

100
0:12:28.000 --> 0:12:33.000
You just have a Kubernetes cluster and you use it.

101
0:12:33.000 --> 0:12:38.000
So you can use things like kubectl to get information about nodes.

102
0:12:38.000 --> 0:12:49.000
You could describe the nodes if you'd like and if you do that, you can see here it's an OS image, Biorocket 1.12.

103
0:12:49.000 --> 0:13:04.000
But most of the time you would just be running your, your services, your pods, your load bands, you know, demon sets, those types of things.

104
0:13:04.000 --> 0:13:10.000
If you need to connect, then you actually need to connect to the console.

105
0:13:10.000 --> 0:13:14.000
So if you're on a bare metal instance, this is actually plugging into the display port.

106
0:13:14.000 --> 0:13:21.000
You know, if you're using a host, a hosting platform, this is whatever console interface that gives you.

107
0:13:21.000 --> 0:13:23.000
And you're presented with this.

108
0:13:23.000 --> 0:13:30.000
It's, this is the control container that, that lets you actually access the host.

109
0:13:30.000 --> 0:13:43.000
So back to that diagram, within these host containers under that container instance, right now the shell that I have is actually this control container.

110
0:13:43.000 --> 0:13:48.000
Because there's no shell on the base OS itself.

111
0:13:48.000 --> 0:13:51.000
So this gives you a little information to help you get started.

112
0:13:51.000 --> 0:13:54.000
There's the API client.

113
0:13:54.000 --> 0:14:09.000
And I can, I can use that to, let's see, I want to get my Kubernetes settings.

114
0:14:09.000 --> 0:14:16.000
But if I look at Kubernetes puts everything under configuration under Etsy Kubernetes by default.

115
0:14:16.000 --> 0:14:20.000
There's nothing there.

116
0:14:20.000 --> 0:14:23.000
There's, there's no shell.

117
0:14:23.000 --> 0:14:32.000
I can't do, let's see, I can't access file.

118
0:14:32.000 --> 0:14:34.000
Can't make changes here.

119
0:14:34.000 --> 0:14:40.000
But there's nothing on here that shows you that this is a, is part of a Kubernetes cluster.

120
0:14:40.000 --> 0:14:43.000
And that's because we're just inside that control container.

121
0:14:43.000 --> 0:14:49.000
This isn't actually that the host OS, the host file system.

122
0:14:49.000 --> 0:15:02.000
The trick that it have there is there is a hidden mount that has, that'll give you some access to the root file system.

123
0:15:02.000 --> 0:15:05.000
But if you notice, I didn't point it out.

124
0:15:05.000 --> 0:15:08.000
There's enable admin container.

125
0:15:08.000 --> 0:15:13.000
It was one of the commands that that banner recommends or lets you know about.

126
0:15:13.000 --> 0:15:17.000
And that's what actually gets you into this admin container that has more access.

127
0:15:17.000 --> 0:15:30.000
So if I do enter admin container.

128
0:15:30.000 --> 0:15:36.000
Maybe I should have reset things.

129
0:15:36.000 --> 0:15:39.000
Normally you just enter admin container.

130
0:15:39.000 --> 0:15:42.000
So that, that spins up that, that container instance because it's not running by default.

131
0:15:42.000 --> 0:15:44.000
It's only when you need it.

132
0:15:44.000 --> 0:15:46.000
So I started up an admin container.

133
0:15:46.000 --> 0:15:49.000
Now I have a shell within the admin container.

134
0:15:49.000 --> 0:15:56.000
So now I'm, now I'm from there.

135
0:15:56.000 --> 0:16:02.000
And, and now that I'm in that container, I have a little more access.

136
0:16:02.000 --> 0:16:08.000
I can see some more files, but it's still not going to give me full access yet.

137
0:16:08.000 --> 0:16:10.000
So there's a tool called Sheltie.

138
0:16:10.000 --> 0:16:17.000
Now that I have that, now there's, I have access to the actual underlying file system.

139
0:16:17.000 --> 0:16:19.000
So now I can go in.

140
0:16:19.000 --> 0:16:26.000
That's the Kubernetes. I want to take a look at the Kubelet config.

141
0:16:26.000 --> 0:16:31.000
All that information is there.

142
0:16:31.000 --> 0:16:33.000
So, yeah.

143
0:16:33.000 --> 0:16:39.000
Aren't command line demos exciting?

144
0:16:39.000 --> 0:16:47.000
So in addition to being able to access the system only through these controlled mechanisms.

145
0:16:47.000 --> 0:16:54.000
So I try to, to limit anything else that, that could be running, that could be used.

146
0:16:54.000 --> 0:16:58.000
There's a root only, a read only root file system.

147
0:16:58.000 --> 0:17:04.000
So even if a container running in your Kubernetes cluster somehow was able to break out,

148
0:17:04.000 --> 0:17:08.000
it's, we'd only have access to the read only file system.

149
0:17:08.000 --> 0:17:11.000
It can't make any changes there.

150
0:17:11.000 --> 0:17:15.000
We also use de-imverity as an extra layer of precaution.

151
0:17:15.000 --> 0:17:24.000
So even if something happened that, that adds some checks and things are locked down.

152
0:17:24.000 --> 0:17:29.000
So really it'd be very difficult to compromise a system.

153
0:17:29.000 --> 0:17:31.000
And then we also use SeLinux.

154
0:17:31.000 --> 0:17:39.000
So there's multiple layers of protections in place here to try to, to limit things.

155
0:17:39.000 --> 0:17:41.000
There's PCI compliance.

156
0:17:41.000 --> 0:17:44.000
Sorry, I don't know what happened to that slide.

157
0:17:44.000 --> 0:17:56.000
And we are looking at FIPS compliance in the future to be able to show that the system really is secure.

158
0:17:56.000 --> 0:18:00.000
So I mentioned it's a read only file system.

159
0:18:00.000 --> 0:18:04.000
The way Bottle Rocket is distributed is it's, it's image-based.

160
0:18:04.000 --> 0:18:06.000
There's no YUM, there's no DNF.

161
0:18:06.000 --> 0:18:09.000
You can't go in there and install extra packages.

162
0:18:09.000 --> 0:18:12.000
So it is, it is a static image.

163
0:18:12.000 --> 0:18:20.000
So one nice thing about that is when you, if you want to upgrade a node to a new release of Bottle Rocket,

164
0:18:20.000 --> 0:18:32.000
the way it works is it'll actually download that newer image and write it to the second partition of the, of the root disk.

165
0:18:32.000 --> 0:18:38.000
And then upgrading really is just switching over and pointing at that new partition.

166
0:18:38.000 --> 0:18:46.000
Because everything, all the settings that you have are persisted as part of what was set through the API server.

167
0:18:46.000 --> 0:18:51.000
It can switch over to this new image, reboot when it comes up.

168
0:18:51.000 --> 0:19:02.000
It reads all those settings again, uses the new image and post is running.

169
0:19:02.000 --> 0:19:06.000
There's, there, we do provide a few tools.

170
0:19:06.000 --> 0:19:09.000
There's a command line interface to be able to check for updates.

171
0:19:09.000 --> 0:19:12.000
That's a pain, especially if you have hundreds of nodes.

172
0:19:12.000 --> 0:19:18.000
But there's things like Bottle Rocket Update Operator, which will handle a lot of this for you.

173
0:19:18.000 --> 0:19:24.000
So if you have a Kubernetes cluster, you can schedule when you want maintenance activities to happen.

174
0:19:24.000 --> 0:19:28.000
That'll automatically go out and look for new versions being released.

175
0:19:28.000 --> 0:19:32.000
And then it'll take care of interacting with Kubernetes to coordinate off nodes,

176
0:19:32.000 --> 0:19:38.000
and then the workloads drained off into others, upgrade those nodes, and then allow things to move back.

177
0:19:38.000 --> 0:19:46.000
So cleanly over, over a period of time, it'll get all of your nodes within the cluster upgraded to the new version.

178
0:19:46.000 --> 0:19:52.000
Or, and this is my preference, just replace the nodes.

179
0:19:52.000 --> 0:19:54.000
They're not customized.

180
0:19:54.000 --> 0:19:58.000
You know you haven't left any special thing on the file system that you need to worry about.

181
0:19:58.000 --> 0:20:02.000
Am I going to lose something if I get rid of this?

182
0:20:02.000 --> 0:20:10.000
You just spin up new nodes, have them join, and then you can get rid of the old nodes and fresh system every time.

183
0:20:10.000 --> 0:20:14.000
Either way works.

184
0:20:14.000 --> 0:20:20.000
The configuration, like I mentioned, most of the time you're passing in a user data file,

185
0:20:20.000 --> 0:20:23.000
and that's in the Tommel format.

186
0:20:23.000 --> 0:20:31.000
But really, you know, we're an equal opportunity markup project.

187
0:20:31.000 --> 0:20:35.000
So depending on how you're doing things, there's YAML.

188
0:20:35.000 --> 0:20:42.000
If you use something like EKS cut all the things configured in YAML, so you can have settings there.

189
0:20:42.000 --> 0:20:50.000
I showed the API client if you actually do want to go and make changes on the command line.

190
0:20:50.000 --> 0:20:58.000
You can use that API client and set and give it a JSON string of the settings that you'd like, or the Tommel.

191
0:20:58.000 --> 0:21:02.000
And they're on the CURL at the bottom in the repo.

192
0:21:02.000 --> 0:21:16.000
There's a full listing of all the different settings that you can do with those configuration files.

193
0:21:16.000 --> 0:21:23.000
Now, the ball rocket handles things slightly different than a lot of other distros.

194
0:21:23.000 --> 0:21:29.000
So that can kind of be a stumbling block when you look at how, you know, if you want to adopt ball rocket

195
0:21:29.000 --> 0:21:32.000
or you're trying it out and trying to see if it works.

196
0:21:32.000 --> 0:21:37.000
So there's a few things to be aware of, I guess, when you do that.

197
0:21:37.000 --> 0:21:50.000
One common thing that I've heard from users is, well, my company requires that I run this antivirus agent on all of my hosts.

198
0:21:50.000 --> 0:21:53.000
If they have containerized that agent, great.

199
0:21:53.000 --> 0:21:55.000
If they haven't, that's an issue.

200
0:21:55.000 --> 0:21:58.000
Like I said, there's no DNF, there's no YAML.

201
0:21:58.000 --> 0:22:00.000
You can't go in there and install software.

202
0:22:00.000 --> 0:22:06.000
So really anything that you need to run on there, any kind of host agents that integrate with systems.

203
0:22:06.000 --> 0:22:10.000
Can be run in privileged containers that can do a lot of things.

204
0:22:10.000 --> 0:22:14.000
It just has to be containerized to be able to run on ball rocket.

205
0:22:14.000 --> 0:22:23.000
And then, like I said, accessing it.

206
0:22:23.000 --> 0:22:27.000
A lot of system admins are used to, okay, I've got all these nodes out there.

207
0:22:27.000 --> 0:22:32.000
I know I just SSH in and that's how I access my system and do things.

208
0:22:32.000 --> 0:22:36.000
So that can be a stumbling block too.

209
0:22:36.000 --> 0:22:39.000
Things are done a little bit differently because things are so locked down.

210
0:22:39.000 --> 0:22:41.000
Pros and cons.

211
0:22:41.000 --> 0:22:46.000
So because things are locked down, you need to enable that admin container.

212
0:22:46.000 --> 0:22:49.000
Then you can enable SSH if you need to.

213
0:22:49.000 --> 0:22:53.000
But it's not going to be there by default.

214
0:22:53.000 --> 0:23:01.000
And then the last thing I wanted to bring up, just because these are two AWS-initiated projects, both open source.

215
0:23:01.000 --> 0:23:09.000
I'll be talking to someone about ball rocket and we'll go into some detail.

216
0:23:09.000 --> 0:23:13.000
And it seems like we're both on the same page talking about the same thing.

217
0:23:13.000 --> 0:23:20.000
And then somehow they say something and we're like, oh, wait, no, you're actually thinking about a different project.

218
0:23:20.000 --> 0:23:22.000
So firecracker is another thing.

219
0:23:22.000 --> 0:23:26.000
That's actually for a virtualized solution.

220
0:23:26.000 --> 0:23:36.000
So that's ball rocket, firecracker, explosive things, but not the same thing.

221
0:23:36.000 --> 0:23:47.000
So my main motivation for getting out and talking about things like this is love to see more people get involved.

222
0:23:47.000 --> 0:23:55.000
Everything that we can right now is up on GitHub under the bottle rocket OS org.

223
0:23:55.000 --> 0:23:59.000
Everything is Apache 2 and MIT licensed.

224
0:23:59.000 --> 0:24:03.000
We try to publish a roadmap under that org.

225
0:24:03.000 --> 0:24:07.000
So if you're curious what's happening, take a look there.

226
0:24:07.000 --> 0:24:14.000
But we'd like to, the people working on the project would like to hear from folks about what they'd like to see.

227
0:24:14.000 --> 0:24:21.000
If you have ideas and you want to bring pull requests, love that.

228
0:24:21.000 --> 0:24:35.000
To actually work on ball rocket, we have the Linux kernel, obviously, C, but most of the bottle rocket pieces of putting all this together is in Rust.

229
0:24:35.000 --> 0:24:45.000
So you will need Linux, you will need Rust, and you will need Docker to be able to perform, to do builds and things like that.

230
0:24:45.000 --> 0:24:57.000
We have a ball rocket SDK image that we publish, so that has the specific Rust like the version, and there are some goal pieces, so it has the Go tool chain.

231
0:24:57.000 --> 0:25:04.000
But you do need a base requirement on your machine to be able to actually run things.

232
0:25:04.000 --> 0:25:08.000
And I say a decent amount of CPU memory storage.

233
0:25:08.000 --> 0:25:17.000
I can't really give an exact number. You're compiling, you're building a distro.

234
0:25:17.000 --> 0:25:27.000
So if you want to do that in a two core, eight gigabyte VM on your laptop, you're going to have to be patient.

235
0:25:27.000 --> 0:25:29.000
That'll take some time.

236
0:25:29.000 --> 0:25:37.000
So really, the more CPU, the more memory that you have, the better that whole situation is going to be.

237
0:25:37.000 --> 0:25:41.000
But there is a building.md file in the repo.

238
0:25:41.000 --> 0:25:54.000
If you are interested in that, take a look, and that will go through everything to get you set up to be able to actually check out the repo, make changes, and compile it.

239
0:25:54.000 --> 0:26:02.000
Another area that I hope is going to help to get people involved, we're looking at what we're calling right now, auto tree builds.

240
0:26:02.000 --> 0:26:08.000
So the variants that I spoke about, having these variants that are very optimized for different situations.

241
0:26:08.000 --> 0:26:15.000
If you wanted to build your own, say you have your own container orchestration platform and you want to integrate Bala Rocket with it,

242
0:26:15.000 --> 0:26:25.000
you would have, right now, you would have to fork the whole repo and do everything within Bala Rocket to get repo itself.

243
0:26:25.000 --> 0:26:29.000
So we're looking at ways, how can we separate things out and make this easier?

244
0:26:29.000 --> 0:26:40.000
So if you have a customized Bala Rocket image that you'd like to make for your company, for your home lab, how can you do that without having to pull everything in?

245
0:26:40.000 --> 0:26:49.000
So if you are interested, you can subscribe to this, 2669 in the GitHub Bala Rocket issues.

246
0:26:49.000 --> 0:27:00.000
And then even if you're not a developer, you don't have the resources to build your own, to be able to compile everything.

247
0:27:00.000 --> 0:27:03.000
If you're not interested in that, that's fine.

248
0:27:03.000 --> 0:27:09.000
We'd love people to just join our community meetings, let us know what you're looking for.

249
0:27:09.000 --> 0:27:16.000
Let us know if there's anything missing from Bala Rocket. Be become part of Bala Rocket itself.

250
0:27:16.000 --> 0:27:26.000
So that happens right now every other week and we manage it through Meetup just to have an easy way to communicate when those are.

251
0:27:26.000 --> 0:27:31.000
There's a HackMD, you can throw your ideas in there and we can discuss them.

252
0:27:31.000 --> 0:27:36.000
So, love to see anybody join there.

253
0:27:36.000 --> 0:27:40.000
So that's meetup.com, Bala Rocket-community.

254
0:27:40.000 --> 0:27:47.000
And with that, I'll open it up if there's any questions.

255
0:27:47.000 --> 0:27:51.000
Oh, okay.

256
0:27:51.000 --> 0:27:54.000
Hey, thanks for a great presentation.

257
0:27:54.000 --> 0:27:58.000
Given that the file systems are immutable, where do logs go?

258
0:27:58.000 --> 0:28:00.000
Does Bala Rocket itself log?

259
0:28:00.000 --> 0:28:05.000
And I understood that the Kubelet is also running non-containerized.

260
0:28:05.000 --> 0:28:08.000
So where do the Kubelet go, logs go, if you use Kubelet?

261
0:28:08.000 --> 0:28:16.000
There are some very targeted areas where we mount a tempFS.

262
0:28:16.000 --> 0:28:25.000
So things like how I was talking about all the settings through the API, you need to use those to spin up Kubelet or to run Kubelet.

263
0:28:25.000 --> 0:28:28.000
It needs to know what settings and needs to read that from a configuration file.

264
0:28:28.000 --> 0:28:33.000
So yeah, so if we have a read-only file system, how does it do that?

265
0:28:33.000 --> 0:28:40.000
On boot, we mount these tempFS mounts in specific places where they're needed.

266
0:28:40.000 --> 0:28:47.000
And then based on reading the configuration settings, that gets written out with a template.

267
0:28:47.000 --> 0:28:56.000
So if changes somehow happen in there, your reboot comes back up and you're exactly how you have things originally.

268
0:28:56.000 --> 0:29:04.000
There's a question in chat, is there a version of Bottle Rocket which is built through run on KVM lib world?

269
0:29:04.000 --> 0:29:12.000
We, there, in the repo, let me see, where did I put that?

270
0:29:12.000 --> 0:29:16.000
In the repo, there is...

271
0:29:19.000 --> 0:29:24.000
Sorry, it must just be under building.

272
0:29:24.000 --> 0:29:30.000
There are instructions. Bottle Rocket can be run on QMU.

273
0:29:30.000 --> 0:29:42.000
So if you, that's a great development tool too, is if you want to make changes and spin things up and just have it running, see how it works.

274
0:29:42.000 --> 0:29:47.000
You can run it as a virtual machine.

275
0:29:47.000 --> 0:29:54.000
Thank you for your...


WEBVTT

00:00.000 --> 00:10.160
Hello, my name is Kai and I'm going to talk to you about Everest AC and DC electric vehicle

00:10.160 --> 00:13.800
charging with open source software and hardware.

00:13.800 --> 00:16.400
First, a few words about myself.

00:16.400 --> 00:21.920
I have a background in computer science and robotics and I've been working at Parionix

00:21.920 --> 00:26.640
on the Everest project since early 2021.

00:26.640 --> 00:29.560
So how do you actually charge a car?

00:29.560 --> 00:34.600
Most of you that have electric vehicles will probably be familiar with these methods, but

00:34.600 --> 00:39.800
I'm just going to recap them real quick so everybody is on the same baseline here.

00:39.800 --> 00:45.920
You have your basic AC charging when you have a portable charger at home that you just plug

00:45.920 --> 00:52.920
into a wall socket or maybe you even have a wall-mounted charging station that can charge

00:52.920 --> 00:57.120
your car with up to 11 or 22 kilowatts.

00:57.120 --> 01:04.880
In public, you sometimes still see these slow AC chargers where you maybe even have to bring

01:04.880 --> 01:06.320
your own cable.

01:06.320 --> 01:11.640
Just plug that one in, plug into your card and you authorize with an RFID card or maybe

01:11.640 --> 01:17.520
even an app and then charging is properly built to your account.

01:17.520 --> 01:24.200
There's an alternative to that, which I would call the smart AC charging with ISO 1511-8

01:24.200 --> 01:31.000
or maybe even plug and charge, which is a much more secure way of authorizing your charging

01:31.000 --> 01:34.360
session with a backend provider.

01:34.360 --> 01:41.200
What's probably for the crowd at this presentation very interesting in the future is the possibility

01:41.200 --> 01:44.200
to have B-directional AC charging.

01:44.200 --> 01:50.480
Think about vehicle-to-grid, vehicle-to-load scenarios where the car can be used maybe

01:50.480 --> 01:56.640
as a solar battery for your home that you can charge when the sun is shining, when energy

01:56.640 --> 02:01.880
is cheap and then you can use that energy in times where the grid is stressed a little

02:01.880 --> 02:08.160
bit and you want to reduce your demand on the electricity grid and then you might be

02:08.160 --> 02:15.880
able to just discharge your car and use your car as a battery for your home.

02:15.880 --> 02:22.000
Also something that people will be most familiar with is the DC charging using the DIN spec

02:22.000 --> 02:24.460
and the ISO norm again.

02:24.460 --> 02:31.960
These are usually the big highway fast chargers where you can charge with up to like 200,

02:31.960 --> 02:34.560
300 kilowatts.

02:34.560 --> 02:37.160
But there's also smaller units for the home.

02:37.160 --> 02:42.440
Think about like DC-DC solar systems and things like that.

02:42.440 --> 02:48.840
Also here what's probably very exciting for all of you is upcoming like B-directional

02:48.840 --> 02:55.480
DC charging and taking energy back out of the car again.

02:55.480 --> 02:56.480
What is Everest?

02:56.480 --> 02:59.800
It's a complete software stack for EV chargers.

02:59.800 --> 03:05.360
It runs on basically any embedded Linux platform out there.

03:05.360 --> 03:10.560
It is released under the Apache 2.0 license and the aim is to support as many different

03:10.560 --> 03:13.200
hardware platforms as possible.

03:13.200 --> 03:19.080
In this talk we're going to mostly focus on building our own charger with an open hardware

03:19.080 --> 03:21.560
designer that I will present later on.

03:21.560 --> 03:27.120
So some of the features that Everest has, it's built on a very modular architecture

03:27.120 --> 03:32.600
where different modules can do very specific things and then they can communicate over

03:32.600 --> 03:35.200
MQTT with each other.

03:35.200 --> 03:43.400
There is also a graphical setup web interface that you can use to configure different topologies

03:43.400 --> 03:44.720
of chargers.

03:44.720 --> 03:50.400
You can see some examples here on the slides and you can also use the same web interface

03:50.400 --> 03:55.960
to do energy management configuration as well.

03:55.960 --> 04:04.720
Next I'm going to quickly go through the steps that you would have to take to use this graphical

04:04.720 --> 04:08.760
setup interface to configure your own charging station.

04:08.760 --> 04:12.720
First we start with an EVSE manager.

04:12.720 --> 04:19.400
This is a module that owns a charging connector and takes care of the charging logic and the

04:19.400 --> 04:27.520
whole charging session handling and it orchestrates all the other modules access to this one connector.

04:27.520 --> 04:35.760
Now we add a board support package which in this case is the ET driver module which will

04:35.760 --> 04:42.600
handle all the control pilot handling the access to the relays and the reading of for

04:42.600 --> 04:47.880
example the RCD currents.

04:47.880 --> 04:49.800
Now we add an energy manager.

04:49.800 --> 04:55.280
This can be just a very simple configuration, a more advanced one I will show you in a few

04:55.280 --> 04:58.320
slides.

04:58.320 --> 05:01.520
Following that we need an authentication mechanism.

05:01.520 --> 05:09.640
Here we add an authentication manager as well as two token providers that will be able to

05:09.640 --> 05:14.240
authenticate our charging session with.

05:14.240 --> 05:17.960
In the next step we can add some cloud connectivity.

05:17.960 --> 05:28.280
In this example we add an OCPP 1.6 JSON module as well as a power meter via Modbus and a

05:28.280 --> 05:34.920
system module that supports the rebooting and the firmware update of the charging station

05:34.920 --> 05:38.400
via OCPP.

05:38.400 --> 05:45.560
And in the last step we add an API module so that external applications can talk to the

05:45.560 --> 05:54.720
average system and read out some pedametry but also control the charging session.

05:54.720 --> 06:00.320
As I mentioned before you can use the same graphical configuration interface to also

06:00.320 --> 06:04.000
configure the energy management.

06:04.000 --> 06:11.200
You can see a more complex energy distribution tree to be able to load balance multiple charging

06:11.200 --> 06:13.920
stations.

06:13.920 --> 06:22.440
Here we add an energy manager as a root node, add a 22 amp fuse to our grid connection and

06:22.440 --> 06:31.920
then as children of that fuse we can add smaller fuses that then connect to the EVSE managers

06:31.920 --> 06:33.400
underneath it.

06:33.400 --> 06:40.320
And these EVSE managers now have different cars connected with different charging goals

06:40.320 --> 06:47.640
and the energy management system is able to schedule charging via a global optimizer so

06:47.640 --> 06:54.720
that every car gets its, yeah gets the most optimal charging schedule assigned to it.

06:54.720 --> 07:00.480
Everest also comes with software and hardware in the loop simulation facilities and it implements

07:00.480 --> 07:07.480
a lot of protocols that are relevant in the EV charging space at the moment like OCPP

07:07.480 --> 07:12.840
2.6 with 2.0.1 support coming very soon.

07:12.840 --> 07:20.620
We have support for ISO 1511-8AC and DC for the DIN spec for the basic PWM charging.

07:20.620 --> 07:26.600
We also have the possibility to do communication with Modbus devices, think about external

07:26.600 --> 07:32.520
power meters for example and also an API over MQTT where you can get some data about the

07:32.520 --> 07:39.880
charging session to maybe integrate into your home automation system.

07:39.880 --> 07:46.760
Everest itself is written in C++ 17 but there's also language bindings for Python and JavaScript

07:46.760 --> 07:53.160
available so you can write modules in all of these three languages whichever suits your

07:53.160 --> 07:54.760
needs the most.

07:54.760 --> 08:00.560
So let's talk about the basic PWM charging.

08:00.560 --> 08:05.880
The car and the charging station can communicate over the so-called control pilot signal.

08:05.880 --> 08:11.200
This is just a plus minus 12 volt signal where the car can lower the positive part of the

08:11.200 --> 08:17.000
signal by adding load resistors and a diode to specific to lower this voltage to a specific

08:17.000 --> 08:18.000
voltage.

08:18.000 --> 08:23.680
For example, 9 volt signals that the car is connected, 6 volt means that the car actually

08:23.680 --> 08:25.780
wants to charge.

08:25.780 --> 08:34.600
Since the charging station then can use a PWM duty cycle to encode the available current

08:34.600 --> 08:41.400
for the car to draw, this is typically between 6 and 32 amps.

08:41.400 --> 08:44.640
So how do you actually build one of these AC chargers?

08:44.640 --> 08:49.280
The good news is an AC charger is not a complicated battery charger.

08:49.280 --> 08:53.240
This part happens on the on-board charger in the car.

08:53.240 --> 08:56.920
The AC charger is just a smart relay.

08:56.920 --> 09:04.220
So what you typically only need is a power path, so a mains connection, some relays,

09:04.220 --> 09:09.600
an RCD for safety, optionally maybe a power meter if you want to know how far your car

09:09.600 --> 09:16.560
has charged already, plus a microcontroller to interface with this control pilot signal.

09:16.560 --> 09:21.600
If you want to do some more advanced things, Linux port is usually a good idea to have

09:21.600 --> 09:23.520
as well.

09:23.520 --> 09:28.720
I'm now going to talk about our open hardware design that we've released, the Yeti and the

09:28.720 --> 09:29.720
YAG ports.

09:29.720 --> 09:36.120
They are available under this GitHub repository and are released under the CERN open hardware

09:36.120 --> 09:40.440
license version 2 in the permissive flavor.

09:40.440 --> 09:46.320
This hardware design has been developed to be as developer friendly as possible, so it

09:46.320 --> 09:55.560
includes a lot of features, but it's obviously not optimized for cost savings or ease of

09:55.560 --> 10:01.520
manufacturing in mind, but it has a lot of very exciting features so you can build all

10:01.520 --> 10:05.640
kinds of charging stations on top of these designs.

10:05.640 --> 10:13.040
It's been designed in keycard 6 and case design files for 3D printing are also available.

10:13.040 --> 10:18.540
So let's talk about the first of these hardware designs, which is the Yeti power board.

10:18.540 --> 10:25.040
It is a 22 kilowatt AC 3-phase power board.

10:25.040 --> 10:32.280
Here on the low left you can see a block diagram of this power board and on the right some

10:32.280 --> 10:37.240
pictures of the upper and the lower side of the board.

10:37.240 --> 10:40.240
Let's talk about the features that the Yeti board has.

10:40.240 --> 10:46.040
It is capable of doing the control pilot signal generation as well as the control pilot signal

10:46.040 --> 10:49.680
sampling in sync with the PWM signal.

10:49.680 --> 10:58.720
It also has onboard relays for 3-phase power switching with welding detection and a 3-phase

10:58.720 --> 11:04.040
power metering support with up to 8 kilohertz of sampling.

11:04.040 --> 11:08.960
There is the possibility to measure voltages, currents, power frequencies of all phases

11:08.960 --> 11:10.600
plus the neutral.

11:10.600 --> 11:17.400
There's an RCD module integrated which can detect DC ground faults as well as AC faults

11:17.400 --> 11:24.040
and it can output the measured leakage current as telemetry.

11:24.040 --> 11:30.160
There's also a 10-pin connector for a high level board to control the Yeti board over

11:30.160 --> 11:31.560
UART.

11:31.560 --> 11:38.720
This is also then used to connect the Yeti to our YAG high level board design which I

11:38.720 --> 11:42.320
will talk about later.

11:42.320 --> 11:46.680
If you want to use the Yeti as a standalone charger which is totally possible, there's

11:46.680 --> 11:51.440
also an external connector for a small LCD.

11:51.440 --> 11:55.920
You can also add Modbus devices for external power meters.

11:55.920 --> 12:01.200
We have some external GPIOs on this board and the board itself can be powered just by

12:01.200 --> 12:07.420
the 110 or 230 volt mains connection with an internal power supply then which is also

12:07.420 --> 12:10.800
capable of supplying the YAG board.

12:10.800 --> 12:16.020
But you can also connect an external 12-volt supply if you so choose.

12:16.020 --> 12:21.440
This board has also a lot of more features which you can then just look up under this

12:21.440 --> 12:22.840
link.

12:22.840 --> 12:28.920
The Yeti comes with an STM32 microcontroller on board and the firmware for this microcontroller

12:28.920 --> 12:33.920
is also available on our GitHub page.

12:33.920 --> 12:39.320
It's licensed under Apache 2.0 license and the purpose of this microcontroller firmware

12:39.320 --> 12:47.000
is that it can control all the devices on the Yeti board and all the electrical safety

12:47.000 --> 12:51.060
relevant code is encapsulated into that firmware.

12:51.060 --> 12:59.480
On top of that, it also does all of the communication of the Yeti board over the UART using protobuf

12:59.480 --> 13:04.200
with a high-level communication board and then with the Everest software.

13:04.200 --> 13:05.760
How do you use this Yeti board?

13:05.760 --> 13:11.640
You can either use it as a standalone charger or you can use it as a power path for a smart

13:11.640 --> 13:12.640
charger.

13:12.640 --> 13:20.200
You can also configure it to do automatic switching between these modes in case the

13:20.200 --> 13:23.560
higher level Linux board fails for some reason.

13:23.560 --> 13:28.760
You can still continue as a standalone charger.

13:28.760 --> 13:34.560
If you want to use the Yeti board as a standalone charger, it is a complete AC charger for electric

13:34.560 --> 13:40.200
vehicles supporting the basic charging I talked about earlier.

13:40.200 --> 13:45.720
This means it contains the complete charging load trick that you need and a car will charge

13:45.720 --> 13:51.520
immediately when you connect it to the board.

13:51.520 --> 13:57.560
There's also some UART connection that you can use to observe the status of the charging

13:57.560 --> 14:02.280
session and also to have limited control over the charging session such as pausing and resuming

14:02.280 --> 14:04.320
the charging.

14:04.320 --> 14:10.160
This mode is what we call the high-level control mode of the firmware.

14:10.160 --> 14:14.760
But you can also use the Yeti board as a power path for a smart charger.

14:14.760 --> 14:21.360
Here you would then switch it into the so-called low-level control mode just with a UART command

14:21.360 --> 14:27.320
and here you must provide the charging logic externally.

14:27.320 --> 14:32.880
Only the basic state machine remains in the microcontroller which is essential for electrical

14:32.880 --> 14:34.880
safety.

14:34.880 --> 14:41.080
An external board is then capable to set the PWM and duty cycle and is able to read back

14:41.080 --> 14:43.160
the control pilot events.

14:43.160 --> 14:48.680
And this is also the mode that Everest then uses to enable the so-called high-level charging

14:48.680 --> 14:52.880
using ISO 1511-8 or the DeanSpec.

14:52.880 --> 14:56.640
I will now explain what this high-level charging mode is.

14:56.640 --> 15:01.720
It uses a power line communication on top of the control pilot PWM signal.

15:01.720 --> 15:07.600
It literally uses the same wire using the Homeplug GreenFi standard and the following

15:07.600 --> 15:13.200
steps need to be done to create a successful high-level charging session.

15:13.200 --> 15:17.760
First a logical network between the charger and the car is set up using a slack.

15:17.760 --> 15:23.480
Then IPV6 link local addresses are set up on both sides.

15:23.480 --> 15:29.320
The car will then send a UDP broadcast to find the charger and the charger replies with

15:29.320 --> 15:32.120
its IP address and port number.

15:32.120 --> 15:39.560
A TCP TLS connection is then created from the car to the charger and over that the ISO

15:39.560 --> 15:48.960
1511-8 protocol is then spoken, which is encoded in some XML data in a binary XML representation

15:48.960 --> 15:49.960
called XE.

15:49.960 --> 15:55.240
Now I'm going to talk to you about the YAK high-level control board.

15:55.240 --> 16:00.400
Here on the right side you can see a few photos of one of these boards assembled and on the

16:00.400 --> 16:06.240
left side you see a block diagram of this high-level control board.

16:06.240 --> 16:12.520
This is used to run Everest on an embedded Linux system.

16:12.520 --> 16:18.360
Some of the features of this YAK control board is that it can receive a Raspberry Pi Compute

16:18.360 --> 16:19.920
module 4.

16:19.920 --> 16:23.800
This is basically your system where you run your Linux on.

16:23.800 --> 16:29.000
It has a 10-pin connector for a direct connection to the 80 board, a real-time clock with a

16:29.000 --> 16:35.680
backup battery, a power line communications GreenFi modem for doing the high-level charging

16:35.680 --> 16:38.160
communication with the car that I just talked about.

16:38.160 --> 16:48.520
There is also a UART and power connector populated for popular RFID modules and there is also

16:48.520 --> 16:51.880
RS485 Modbus connectivity.

16:51.880 --> 16:57.640
You have a Canbus available, you have Ethernet, wireless LAN, you have Bluetooth, USB ports,

16:57.640 --> 17:04.380
there is even a USB client port to be able to flash the flash storage of the compute

17:04.380 --> 17:12.400
module 4 and of course you have lots of external GPIOs to play with.

17:12.400 --> 17:20.360
Now we have everything that we need to put together a basic but also smart charging station.

17:20.360 --> 17:27.000
From right to left you just need a mains free-phase power-in plug.

17:27.000 --> 17:30.920
You need one of these Yeti power boards.

17:30.920 --> 17:37.640
Plug that in, on the other side you plug in a Type 2 connector to your car.

17:37.640 --> 17:45.160
If you then plug this into your car you are already good to go and you will be able to

17:45.160 --> 17:51.640
charge your electric vehicle with up to 22 kilowatts if the vehicle supports it.

17:51.640 --> 17:59.480
If you want to do some more interesting things like try out some of the smart charging protocols

17:59.480 --> 18:05.960
and maybe develop some interesting solutions on top of that you can add this high level

18:05.960 --> 18:16.600
control board and then just start working on some interesting implementations.

18:16.600 --> 18:22.520
Another exciting project that we are working on right now is a DIY B-directional DC charger.

18:22.520 --> 18:26.360
If you have paid attention over the last couple of minutes you will have noticed that the

18:26.360 --> 18:33.480
YAG board already comes prepared with everything that you would need for proper DC communication

18:33.480 --> 18:40.080
because the DC communication is done over the same control pilot wire using the high

18:40.080 --> 18:47.400
level charging protocols and the only things you really just need to build a proper DC

18:47.400 --> 18:53.040
charger is some power electronics and an isolation monitor and then they are pretty much good

18:53.040 --> 18:54.040
to go.

18:54.040 --> 18:59.640
Obviously this is a lot more complicated and we are still hard at work for creating a good

18:59.640 --> 19:07.320
design here but you can definitely stay tuned for more coming in the spring or summer from

19:07.320 --> 19:09.880
us.

19:09.880 --> 19:14.520
If this was interesting for you here is how you can get involved with the Evers project.

19:14.520 --> 19:19.040
You can check out our code on the GitHub organization.

19:19.040 --> 19:22.680
You can also check out the hardware designs and microcontroller firmware.

19:22.680 --> 19:25.600
We do have a maining list if you want to ask some questions.

19:25.600 --> 19:30.400
There is the project page on the Linux Foundation Energy website.

19:30.400 --> 19:35.120
We do have a quick start guide to help you get started with development and on every

19:35.120 --> 19:41.200
fourth first day of the month there is a technical steering committee meeting where we talk about

19:41.200 --> 19:50.400
what we implemented in the last weeks leading up to this technical steering committee meeting.

19:50.400 --> 19:56.000
It's always being announced via the main list and recordings are made available shortly

19:56.000 --> 19:57.600
after on YouTube.

19:57.600 --> 20:06.360
There is also a weekly developer meeting where you can join Evers developers, ask questions

20:06.360 --> 20:08.160
and start contributing.

20:08.160 --> 20:14.680
This meeting happens every Tuesday between 10 and 11 AM Central European time and the

20:14.680 --> 20:18.040
meeting link for that is sent out by our meetings.

20:18.040 --> 20:32.840
Thank you very much for listening and I'm open to receiving questions now.

20:32.840 --> 20:52.360
Hello, I see there is at least one question right now that if you can purchase these boards

20:52.360 --> 20:53.800
pre-made somewhere right now.

20:53.800 --> 21:01.600
I think not yet at the moment and I also don't know if I want to do too much advertising

21:01.600 --> 21:09.600
here but yeah, I think something will be available at least from our company at some point but

21:09.600 --> 21:15.400
you can also totally build your own here.

21:15.400 --> 21:25.200
So, Niko is asking how many of these boards have been produced or tested yet.

21:25.200 --> 21:33.240
So like a few of our developers have had charging stations based on these boards at their home

21:33.240 --> 21:35.960
for way over a year now.

21:35.960 --> 21:38.520
So they've been tested quite heavily.

21:38.520 --> 21:45.080
I'm charging my own electric vehicle basically every day with a charging station based on

21:45.080 --> 21:54.800
this design here and yeah, so they're already well tested.

21:54.800 --> 21:59.520
Especially if you would want to build a product with these boards, you would have to go through

21:59.520 --> 22:07.920
the certification processes because your designs might differ a bit but yeah, the functionality

22:07.920 --> 22:12.040
wise they've been tested quite heavily.

22:12.040 --> 22:18.000
So Thomas is asking if there are any plans on scaling up production.

22:18.000 --> 22:22.240
Well, I guess that kind of depends on the demand.

22:22.240 --> 22:30.560
Right now this kit is thought of as a basis for development, especially doing like Everest

22:30.560 --> 22:38.400
development but I could imagine if the demand is like crazy high that some scaling up of

22:38.400 --> 22:56.600
production would occur at some point in the future.

22:56.600 --> 22:58.640
See some people typing questions.

22:58.640 --> 23:14.440
ERD Junker asked if the DC will be CCS, yes for now the DC would be based on the CCS connector

23:14.440 --> 23:22.720
but it's just because we're based in Europe and that's the common plug here.

23:22.720 --> 23:30.960
I've heard of some people working on something with Trademo at the moment but I'm not completely

23:30.960 --> 23:41.920
sure what the status there is.

23:41.920 --> 23:46.840
So Thomas is asking if there's already an idea how competitive this could be with regards

23:46.840 --> 23:48.240
to commercial charges.

23:48.240 --> 23:56.080
I guess this also kind of aligns with the next question from Buki that the boards have

23:56.080 --> 24:01.160
a lot of functionality on top so I guess a run would come off as quite an expensive charge

24:01.160 --> 24:03.240
and that's true.

24:03.240 --> 24:10.640
Like I said in the presentation the boards are definitely not designed with cost saving

24:10.640 --> 24:19.600
and as less features that you need to build a charging station in there but it's more

24:19.600 --> 24:29.760
like a development kit that probably costs much more than like off the shelf mass produced

24:29.760 --> 24:37.280
charging station would cost but that's also not really the goal of this board.

24:37.280 --> 24:43.680
It's to enable development and to have as many things to play with as possible like

24:43.680 --> 24:53.040
think of the in the SDR space you have these boards where you also have a lot of features

24:53.040 --> 25:01.760
on them but they're not as cheap as like your typical cheap television receiving stick that

25:01.760 --> 25:09.600
you plug into your laptop.

25:09.600 --> 25:32.480
I see still see some typing going on so maybe there's some more questions coming up.

25:32.480 --> 25:57.200
Yes, as Buki is saying there that's also our feeling that especially he said it is a terrible

25:57.200 --> 26:03.760
shortage of open EVSE kits out there and we think so too there are some projects like

26:03.760 --> 26:10.120
you mentioned but definitely a fully featured project especially with a nice open hardware

26:10.120 --> 26:16.160
design that you can just play around with and integrate into your own designs and maybe

26:16.160 --> 26:22.540
even like strip out half of the functionality that you don't need I think is a good thing

26:22.540 --> 26:28.920
especially if ever is being released under such a permissive license with the Apache

26:28.920 --> 26:38.240
2.0 and the hardware designs themselves being under discern open hardware license this could

26:38.240 --> 26:43.540
definitely open up a lot of possibilities for people to play with their own charging

26:43.540 --> 26:52.120
station hardware.

26:52.120 --> 26:57.360
Please ask if this is targeted more towards commercial vendors or more towards hobbyists.

26:57.360 --> 27:03.840
I personally would say it's targeted towards both groups like of course commercial vendors

27:03.840 --> 27:11.440
for the big DC charging stations you probably don't want to build something like that in

27:11.440 --> 27:21.480
your garage at home but you can use the same software stack and like I mentioned also parts

27:21.480 --> 27:27.640
of the hardware stack for that but for hobbyists as well like if you want to integrate it into

27:27.640 --> 27:35.880
your home automation system or if you want to dig in deeper in communication with the

27:35.880 --> 27:42.480
car especially with the ISO 1511-8 coming up and the bidirectional charging possibilities

27:42.480 --> 27:52.000
that will soon open up to many vehicles out there.

27:52.000 --> 27:56.720
And yes as Marco also mentioned obviously academia is also an interesting part there

27:56.720 --> 28:08.480
so you can imagine yeah like students working on EV charging there and things like that.

28:08.480 --> 28:25.760
All right looks like normal questions.

28:25.760 --> 28:34.240
I will definitely be around for a few more minutes in the public room afterwards and

28:34.240 --> 28:40.000
yeah looking forward to some more questions.

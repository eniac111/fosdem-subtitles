1
0:00:00.000 --> 0:00:07.760
Right, so welcome.

2
0:00:07.760 --> 0:00:14.440
My name is Remko and I'm here to talk about two very undeclarative but very minimal and

3
0:00:14.440 --> 0:00:17.320
hopefully useful languages.

4
0:00:17.320 --> 0:00:18.960
So the first one is FOURTH.

5
0:00:18.960 --> 0:00:25.080
FOURTH is a very minimal programming language that's been around since the 70s.

6
0:00:25.080 --> 0:00:31.080
It's had mostly applications in low-level contexts such as embedded systems, spacecraft

7
0:00:31.080 --> 0:00:35.960
controllers and so on, but it's had some other applications as well.

8
0:00:35.960 --> 0:00:40.560
If you look at FOURTH, the most obvious thing to notice is that it's stack-based.

9
0:00:40.560 --> 0:00:45.800
So it uses a reverse polish notation where you first put something on the stack and then

10
0:00:45.800 --> 0:00:47.280
you call a function.

11
0:00:47.280 --> 0:00:53.160
But other than that, it looks like a regular high-level language with syntax for constant

12
0:00:53.160 --> 0:00:58.800
variables for comments, syntax for function definitions, loops and conditions and so on.

13
0:00:58.800 --> 0:01:01.320
But actually that's an illusion.

14
0:01:01.320 --> 0:01:03.620
FOURTH has almost no syntax.

15
0:01:03.620 --> 0:01:07.000
So FOURTH executes through a very simple interpreter loop.

16
0:01:07.000 --> 0:01:13.520
So what it does is it reads something up until the next space and then decides, is it a number?

17
0:01:13.520 --> 0:01:15.720
I'm going to put it on the stack.

18
0:01:15.720 --> 0:01:17.120
Is it something else?

19
0:01:17.120 --> 0:01:21.200
Then I assume it's a function which is called a word in FOURTH and it's going to execute

20
0:01:21.200 --> 0:01:22.440
it.

21
0:01:22.440 --> 0:01:29.120
So symbols is just like any normal word, so it's just a function of FOURTH.

22
0:01:29.120 --> 0:01:30.120
Same goes for the colon.

23
0:01:30.120 --> 0:01:33.920
Colon starts a new definition of a word.

24
0:01:33.920 --> 0:01:39.400
Colon when it executes, it puts the interpreter into a special mode called compilation mode.

25
0:01:39.400 --> 0:01:45.560
Now in this compilation mode, the interpreter still advances token by token, but when it

26
0:01:45.560 --> 0:01:49.460
encounters a number instead of putting it on the stack, what it does is it generates

27
0:01:49.460 --> 0:01:54.960
some codes that will put that number on the stack later when this word is executed.

28
0:01:54.960 --> 0:01:57.000
Same for another symbol.

29
0:01:57.000 --> 0:02:00.300
Instead of calling this function, what it's going to do is it's going to compile some

30
0:02:00.300 --> 0:02:13.480
code that will call this function when this word is executed.

31
0:02:13.480 --> 0:02:19.800
So the same goes actually another, sorry, so it's going to compile.

32
0:02:19.800 --> 0:02:25.560
The exception for this is that there is a thing called immediate words.

33
0:02:25.560 --> 0:02:30.120
Immediate words are always executed even if your interpreter is in compiler mode.

34
0:02:30.120 --> 0:02:35.880
So an example of such an immediate word is the opening parenthesis which starts a comment.

35
0:02:35.880 --> 0:02:40.000
When it executes, what it will do is it will actually consume all the input.

36
0:02:40.000 --> 0:02:49.760
Another immediate word is the semicolon.

37
0:02:49.760 --> 0:02:53.000
So the semicolon is what you see when you end the definition.

38
0:02:53.000 --> 0:02:59.280
What this will do is it will put your interpreter back out of compilation mode into interpretation

39
0:02:59.280 --> 0:03:00.600
mode.

40
0:03:00.600 --> 0:03:04.360
Other of these immediate words are the loops and the ifs and the nels.

41
0:03:04.360 --> 0:03:09.320
You can actually create your own immediate words and as such extend the compiler because

42
0:03:09.320 --> 0:03:11.000
these are executed at compile time.

43
0:03:11.000 --> 0:03:15.660
So you extend the compiler and you create your own language.

44
0:03:15.660 --> 0:03:21.040
So in summary, fourth is actually nothing but a very simple interpreter loop with an

45
0:03:21.040 --> 0:03:23.820
integrated compiler.

46
0:03:23.820 --> 0:03:28.120
There is no syntax, almost to fourth, just space delimited tokens.

47
0:03:28.120 --> 0:03:33.120
All the behavior of the language is in the execution of these definitions.

48
0:03:33.120 --> 0:03:37.160
And you can actually extend the compiler yourself.

49
0:03:37.160 --> 0:03:44.240
This combination of super simplicity and power has actually made fourth a very attractive

50
0:03:44.240 --> 0:03:49.840
language to implement on a new piece of hardware and a restricted piece of hardware.

51
0:03:49.840 --> 0:03:55.000
Typically these fourth implementations are targeted at hardware assembly but you can

52
0:03:55.000 --> 0:03:58.680
actually do this in any low level language.

53
0:03:58.680 --> 0:04:02.040
Which brings me to the second language of my talk, WebAssembly.

54
0:04:02.040 --> 0:04:04.160
So I think everybody here knows WebAssembly.

55
0:04:04.160 --> 0:04:08.600
It's an open standard for portable binary code.

56
0:04:08.600 --> 0:04:11.840
Most browsers can execute WebAssembly.

57
0:04:11.840 --> 0:04:16.160
Many languages can compile to WebAssembly so the result is that you can run all these

58
0:04:16.160 --> 0:04:19.280
languages in a browser.

59
0:04:19.280 --> 0:04:24.360
Although WebAssembly was designed for the web, there's actually nothing web specific

60
0:04:24.360 --> 0:04:25.360
about WebAssembly.

61
0:04:25.360 --> 0:04:30.120
It's just an open standard of portable code.

62
0:04:30.120 --> 0:04:35.800
Most of the information you find online about WebAssembly is about how you compile your

63
0:04:35.800 --> 0:04:40.480
favorite language to WebAssembly or how you run WebAssembly in your browser.

64
0:04:40.480 --> 0:04:45.800
So a few years ago I wanted to figure out what was actually under the hood of WebAssembly.

65
0:04:45.800 --> 0:04:51.920
And at the same time I came across fourth so what I did was I combined both hoping that

66
0:04:51.920 --> 0:04:54.400
I would learn something about both.

67
0:04:54.400 --> 0:04:57.400
So that's why I created WA fourth.

68
0:04:57.400 --> 0:05:00.880
WA fourth is a small fourth system.

69
0:05:00.880 --> 0:05:05.400
It's completely handwritten in WebAssembly and it compiles to WebAssembly.

70
0:05:05.400 --> 0:05:11.320
So goals are, WebAssembly tries to, WA fourth tries to do as much as possible in WebAssembly.

71
0:05:11.320 --> 0:05:16.920
Now the problem is WebAssembly is a portable standard so you cannot do everything in WebAssembly.

72
0:05:16.920 --> 0:05:21.620
For example, it needs to do very few things outside of WebAssembly.

73
0:05:21.620 --> 0:05:27.600
For example, reading or writing a character to the output or reading from the input.

74
0:05:27.600 --> 0:05:30.360
WA fourth tries to be simple.

75
0:05:30.360 --> 0:05:33.120
So it's just one big WebAssembly file handwritten.

76
0:05:33.120 --> 0:05:36.920
There are no dependencies, no complex tools.

77
0:05:36.920 --> 0:05:39.920
The compiler is very simply written.

78
0:05:39.920 --> 0:05:43.840
It still tries to be complete enough to be useful.

79
0:05:43.840 --> 0:05:48.360
There's an ANS standard that defines what a fourth interpreter needs to implement, the

80
0:05:48.360 --> 0:05:50.120
minimal set of words.

81
0:05:50.120 --> 0:05:57.200
WA fourth implements these and implements a bunch of other words as well.

82
0:05:57.200 --> 0:05:58.660
What isn't the goal is speed.

83
0:05:58.660 --> 0:06:03.500
So of course, because WA fourth is implemented in WebAssembly, you're going to get some speed

84
0:06:03.500 --> 0:06:04.800
for free.

85
0:06:04.800 --> 0:06:09.900
But still the compiler is very naive so I don't expect it to be very fast.

86
0:06:09.900 --> 0:06:12.760
Same goes for binary size of the system.

87
0:06:12.760 --> 0:06:15.920
It's written in WebAssembly so it's going to be naturally very small.

88
0:06:15.920 --> 0:06:20.960
In fact, it's about 14 kilobytes of WebAssembly compiled binary WebAssembly.

89
0:06:20.960 --> 0:06:26.400
However, I'm not doing any code golfing or something like that to keep the system small

90
0:06:26.400 --> 0:06:28.880
because I want to keep it simple.

91
0:06:28.880 --> 0:06:35.200
And as most fourths are not really known to be very user friendly and WA fourth is not

92
0:06:35.200 --> 0:06:41.160
different, although it does emit some debugging information to make debugging easier, as you

93
0:06:41.160 --> 0:06:43.840
will see.

94
0:06:43.840 --> 0:06:45.360
So what can you do with WA fourth?

95
0:06:45.360 --> 0:06:51.320
Well, you can embed it in any JavaScript application, which means you can run fourth code inside

96
0:06:51.320 --> 0:06:57.640
your JavaScript and you get bidirectional bindings to the system and back to JavaScript.

97
0:06:57.640 --> 0:07:01.720
To illustrate this, I have a few example applications.

98
0:07:01.720 --> 0:07:08.600
So the first one is the standard fourth console that always exists where you can interactively

99
0:07:08.600 --> 0:07:14.760
execute fourth code and you can even interactively compile code and then run this compiled code.

100
0:07:14.760 --> 0:07:19.080
So it's a repple actually.

101
0:07:19.080 --> 0:07:25.200
I also have a small graphical programming environment where you can create some graphics

102
0:07:25.200 --> 0:07:30.080
using a logo like turtle graphics language, but it uses fourth.

103
0:07:30.080 --> 0:07:32.720
It looks a lot like logo, but it's actually fourth.

104
0:07:32.720 --> 0:07:39.320
And I took this a bit further and then I created a notebook extension, a VS Code extension

105
0:07:39.320 --> 0:07:40.760
to create VS Code notebooks.

106
0:07:40.760 --> 0:07:47.480
So these are actually formatted markdown files interleaved with runnable code.

107
0:07:47.480 --> 0:07:48.480
So you can run this code.

108
0:07:48.480 --> 0:07:52.000
This is ideal for tutorials because you can have the code directly there.

109
0:07:52.000 --> 0:07:53.400
You can execute it.

110
0:07:53.400 --> 0:07:57.760
You can change some parameters and then see what the effect is by rerunning the program.

111
0:07:57.760 --> 0:08:03.600
Now, because this is just WebAssembly and it's just a very small system, there's also

112
0:08:03.600 --> 0:08:09.040
a script that converts these notebooks into a standalone, small standalone HTML file with

113
0:08:09.040 --> 0:08:13.960
all the functionality, but you don't actually need VS Code anymore to run it.

114
0:08:13.960 --> 0:08:19.280
Now let's have a look under the hood.

115
0:08:19.280 --> 0:08:25.940
Like most WebAssembly formats, WebAssembly has a text-based format which is much easier

116
0:08:25.940 --> 0:08:28.840
to read than the binary format for humans.

117
0:08:28.840 --> 0:08:35.640
So this text-based format is based on S expressions, so it looks a lot like Lisp.

118
0:08:35.640 --> 0:08:42.200
So this right part here is the entire fourth interpreter that I described earlier, but

119
0:08:42.200 --> 0:08:44.760
it comes straight out of WA fourth.

120
0:08:44.760 --> 0:08:46.960
It's actually quite easy to understand.

121
0:08:46.960 --> 0:08:52.560
So first it starts by parsing something, parsing the token, and then it's going to either execute

122
0:08:52.560 --> 0:08:56.840
it if it's a function or it's going to compile it if you're in compiler mode.

123
0:08:56.840 --> 0:09:01.080
Or if it's a number, then it's going to put it on the stack or it's going to compile it.

124
0:09:01.080 --> 0:09:10.800
So this tree-like code structure is then transformed to binary WebAssembly using a tool from WebIt.

125
0:09:10.800 --> 0:09:14.560
WebIt is the WebAssembly binary toolkit.

126
0:09:14.560 --> 0:09:19.160
This is actually a toolkit with a lot of tools to work with WebAssembly files.

127
0:09:19.160 --> 0:09:23.840
It's a very interesting project to look at.

128
0:09:23.840 --> 0:09:25.960
So this is the entire interpreter.

129
0:09:25.960 --> 0:09:27.720
The interpreter is actually quite simple.

130
0:09:27.720 --> 0:09:31.200
The interesting part is the part where you have to compile something.

131
0:09:31.200 --> 0:09:33.920
So you have to compile a call when you're in compiler mode.

132
0:09:33.920 --> 0:09:36.360
So how does this work?

133
0:09:36.360 --> 0:09:42.800
Well somewhere in memory there is a hard-coded binary header of a WebAssembly module with

134
0:09:42.800 --> 0:09:44.540
one function in it.

135
0:09:44.540 --> 0:09:49.200
So when a new word definition starts, what happens is some values in this header are

136
0:09:49.200 --> 0:09:54.480
reset and the pointer is initialized to start at the end of the header.

137
0:09:54.480 --> 0:09:59.240
So each time the interpreter, this is the piece of the interpreter, needs to compile

138
0:09:59.240 --> 0:10:01.800
a call to a function.

139
0:10:01.800 --> 0:10:09.360
What it does is it generates some raw WebAssembly hex codes and puts it at the end of the header.

140
0:10:09.360 --> 0:10:15.200
So for example if it needs to do a call, what it does is it generates a hex code for a const

141
0:10:15.200 --> 0:10:21.320
instruction with the index of the function to call and then an indirect call instruction.

142
0:10:21.320 --> 0:10:26.320
And so the compiler keeps on adding binary code to the end of this module.

143
0:10:26.320 --> 0:10:31.680
Now once you reach the end of the definition, this binary piece of code needs to be loaded

144
0:10:31.680 --> 0:10:33.200
into the system.

145
0:10:33.200 --> 0:10:36.240
So WebAssembly doesn't support anything for this yet.

146
0:10:36.240 --> 0:10:43.060
So there's no support for just-in-time compilation, although there are some discussions about it.

147
0:10:43.060 --> 0:10:47.880
So what WA4 does is it takes a pointer to this piece in memory of binary code and it

148
0:10:47.880 --> 0:10:49.520
passes it to the host system.

149
0:10:49.520 --> 0:10:51.760
So in this case it's JavaScript.

150
0:10:51.760 --> 0:10:54.040
And JavaScript has a small piece of code here running.

151
0:10:54.040 --> 0:11:00.200
What it does is it takes this binary, it uses the WebAssembly API to create a new WebAssembly

152
0:11:00.200 --> 0:11:02.880
module and then it instantiates it.

153
0:11:02.880 --> 0:11:05.000
That's all JavaScript has to do.

154
0:11:05.000 --> 0:11:07.440
The rest is tracked by WA4.

155
0:11:07.440 --> 0:11:11.440
It keeps track of which module corresponds to which function that it needs to call or

156
0:11:11.440 --> 0:11:14.800
compile later on.

157
0:11:14.800 --> 0:11:17.540
So here you can see the system in action.

158
0:11:17.540 --> 0:11:23.640
So what's happening here is now you start at a definition, you start by compiling something,

159
0:11:23.640 --> 0:11:29.120
so you're still in compilation mode.

160
0:11:29.120 --> 0:11:33.120
And so it's only when you reach the end of the definition that suddenly you're going

161
0:11:33.120 --> 0:11:38.540
to see a new entry in your WebAssembly debugger with a function that has been loaded.

162
0:11:38.540 --> 0:11:47.840
So this is the generated WebAssembly code that's been generated by the compiler.

163
0:11:47.840 --> 0:11:54.160
You can get even more control over this compilation process by writing your own WebAssembly inside

164
0:11:54.160 --> 0:11:56.160
forth.

165
0:11:56.160 --> 0:11:59.920
So this is actually, this is again no new syntax.

166
0:11:59.920 --> 0:12:03.700
This is just standard forth with some user-defined words.

167
0:12:03.700 --> 0:12:08.760
And there's a direct one-to-one mapping from this to this, if you can read it, that probably

168
0:12:08.760 --> 0:12:10.760
can from there.

169
0:12:10.760 --> 0:12:16.940
The last thing I want to note about implementation detail is that most forts have very efficient

170
0:12:16.940 --> 0:12:19.900
execution by using a system they call threaded code.

171
0:12:19.900 --> 0:12:24.560
So threaded code is actually called doing jump instructions all over the place using

172
0:12:24.560 --> 0:12:27.920
values that come from memory or from registers.

173
0:12:27.920 --> 0:12:30.520
Now this is something you can do in WebAssembly.

174
0:12:30.520 --> 0:12:33.460
WebAssembly only allows structured jumps.

175
0:12:33.460 --> 0:12:37.920
So WebAssembly is actually a structured programming language.

176
0:12:37.920 --> 0:12:40.520
What WebAssembly does have is function tables.

177
0:12:40.520 --> 0:12:45.640
So these are dynamic tables where you can put functions, function references in, and

178
0:12:45.640 --> 0:12:51.800
then it comes with a special instruction where you can say jump to the function at this index.

179
0:12:51.800 --> 0:12:57.360
This is a system that WA-4th uses for calling the words.

180
0:12:57.360 --> 0:13:05.960
Now the downside is that this is a very inefficient system compared to direct calls or jumps.

181
0:13:05.960 --> 0:13:12.600
So I said that speed wasn't really a goal for WA-4th, but it's still interesting to

182
0:13:12.600 --> 0:13:17.820
get some idea of ballpark numbers of speed and size involved.

183
0:13:17.820 --> 0:13:23.160
So I did some very unscientific thing, and I took an algorithm, in this case the SEVE

184
0:13:23.160 --> 0:13:25.120
algorithm to compute prime numbers.

185
0:13:25.120 --> 0:13:29.880
I took a fourth implementation, ported it to JavaScript, CE, WebAssembly, and then ran

186
0:13:29.880 --> 0:13:32.880
it a few times and see what the result was.

187
0:13:32.880 --> 0:13:38.880
Again, this is not a very representative benchmark, but it's just here to get a feel for some

188
0:13:38.880 --> 0:13:39.920
numbers.

189
0:13:39.920 --> 0:13:45.200
So if you look at the execution times, WA-4th is about 10 times faster than a JavaScript

190
0:13:45.200 --> 0:13:46.560
4th version.

191
0:13:46.560 --> 0:13:47.680
This is to be expected.

192
0:13:47.680 --> 0:13:50.360
JavaScript 4th versions do pure interpretation.

193
0:13:50.360 --> 0:13:53.600
WA-4th uses compilation, so there's no surprise there.

194
0:13:53.600 --> 0:14:01.040
What is a bit surprising is that G-4th, which is a native 4th, is not much faster than WA-4th.

195
0:14:01.040 --> 0:14:03.120
I have no idea why this is.

196
0:14:03.120 --> 0:14:05.320
I'm suspicious about this result.

197
0:14:05.320 --> 0:14:10.400
Maybe it's because I'm using an architecture that G-4th isn't optimized for.

198
0:14:10.400 --> 0:14:15.160
JavaScript is 10 times faster than WA-4th, which is also normal because WA-4th needs

199
0:14:15.160 --> 0:14:18.960
to do these constant indirect jumps, and JavaScript doesn't have this problem.

200
0:14:18.960 --> 0:14:23.080
It doesn't need to do any function calling at all.

201
0:14:23.080 --> 0:14:28.440
And then finally, if you have the C version and you compile it to WebAssembly using Mscripton,

202
0:14:28.440 --> 0:14:33.360
it's about as fast as running the raw WebAssembly, and the native version of the algorithm is

203
0:14:33.360 --> 0:14:34.360
slightly faster.

204
0:14:34.360 --> 0:14:39.280
Although you have to say the WebAssembly engine is pretty good at running this code compared

205
0:14:39.280 --> 0:14:41.800
to native code.

206
0:14:41.800 --> 0:14:47.080
So if we look at the size of the runtime and the code that is executed, the main takeaway

207
0:14:47.080 --> 0:14:53.240
here is that WA-4th is actually a very small system.

208
0:14:53.240 --> 0:14:57.200
It's like about 15K, but you need a complete browser to run it.

209
0:14:57.200 --> 0:15:01.880
So that's, of course, huge to run.

210
0:15:01.880 --> 0:15:06.880
So the question is, can we improve this situation?

211
0:15:06.880 --> 0:15:13.320
So actually, there are several standalone implementations of WebAssembly.

212
0:15:13.320 --> 0:15:18.520
In different languages, for example, Webit has a reference implementation in C++.

213
0:15:18.520 --> 0:15:23.800
There's wasm time, which is security focused and speed focused in Rust, but there are several

214
0:15:23.800 --> 0:15:25.840
others.

215
0:15:25.840 --> 0:15:30.680
But these only do the WebAssembly part, so there's still this small piece of code that

216
0:15:30.680 --> 0:15:36.120
is the small pieces that are outside of the system that we need to call out to.

217
0:15:36.120 --> 0:15:40.120
If you wanted to use all these engines and try this out and create a standalone version,

218
0:15:40.120 --> 0:15:44.200
you would need to write this little piece of code in all these languages against all

219
0:15:44.200 --> 0:15:45.200
these APIs.

220
0:15:45.200 --> 0:15:48.680
Luckily, there's something called WebAssembly C API.

221
0:15:48.680 --> 0:15:55.980
And this is a standardized black box API that most of these systems implement.

222
0:15:55.980 --> 0:16:02.720
So actually, the only thing you have to do is write these 200 lines of implementation

223
0:16:02.720 --> 0:16:10.320
in dependency, and then I could drop in any engine I wanted and then have a standalone

224
0:16:10.320 --> 0:16:11.960
version of my system.

225
0:16:11.960 --> 0:16:17.640
Now if we look at the same benchmark again, we can see that speed wise Webit is about

226
0:16:17.640 --> 0:16:21.400
100 times slower than the browser version, which is normal.

227
0:16:21.400 --> 0:16:25.320
I mean, this version in Webit, that's a reference implementation.

228
0:16:25.320 --> 0:16:26.320
It's very naive.

229
0:16:26.320 --> 0:16:30.040
It just does what it needs to do to be functional.

230
0:16:30.040 --> 0:16:33.080
What is a bit weird is that wasn't time which is supposed to be fast.

231
0:16:33.080 --> 0:16:37.800
It's still about 10 times faster than the browser version, and there is no good reason

232
0:16:37.800 --> 0:16:38.800
for this.

233
0:16:38.800 --> 0:16:40.000
So I don't know why this is.

234
0:16:40.000 --> 0:16:42.240
I haven't tried other engines yet.

235
0:16:42.240 --> 0:16:49.680
Now if you look at size, you see that if you use a relatively optimizing system, you still

236
0:16:49.680 --> 0:16:54.000
have 90 megabytes, which is a lot smaller than a browser.

237
0:16:54.000 --> 0:17:00.000
But still, if you have a system of about 15K, this is still big.

238
0:17:00.000 --> 0:17:02.520
Can we do something about this?

239
0:17:02.520 --> 0:17:08.920
Well, you need the WebAssembly runtime to be able to run your fourth code and to compile

240
0:17:08.920 --> 0:17:10.840
your code and load it.

241
0:17:10.840 --> 0:17:14.640
But typically most programs, once you did the first pass and you did all the compilation

242
0:17:14.640 --> 0:17:19.960
necessary, you no longer need a compiler if you want to run the program again.

243
0:17:19.960 --> 0:17:22.360
So you can do some ahead of time compiling.

244
0:17:22.360 --> 0:17:24.480
And this is where WA4C comes in.

245
0:17:24.480 --> 0:17:31.280
So what it does is it takes your fourth program, it uses WA4C to run your program once.

246
0:17:31.280 --> 0:17:35.160
And at the end of the cycle, it's going to look at all the modules that you created.

247
0:17:35.160 --> 0:17:41.040
It's going to combine them all, combine the final state, and then create one big WebAssembly

248
0:17:41.040 --> 0:17:42.440
module out of this.

249
0:17:42.440 --> 0:17:47.440
And it's going to take this big module and then use another tool from Webit.

250
0:17:47.440 --> 0:17:49.760
Webit is really a cool tool set.

251
0:17:49.760 --> 0:17:55.000
It's going to use another tool from Webit called WA4C to transform this big module into

252
0:17:55.000 --> 0:18:00.440
C. And then it's going to use your host compiler to create a native executable.

253
0:18:00.440 --> 0:18:06.320
So the end result is that you have a fourth code to native compiler and your native binary

254
0:18:06.320 --> 0:18:11.680
is your fourth code with the rest of the fourth system still in there, but the compiler left

255
0:18:11.680 --> 0:18:12.680
out.

256
0:18:12.680 --> 0:18:20.080
And the cool thing is that because this is all platform independent stuff up until the

257
0:18:20.080 --> 0:18:23.240
native compiler, you can actually do cross compiling easily.

258
0:18:23.240 --> 0:18:27.280
So you can just do cross compiling from fourth to any architecture you want.

259
0:18:27.280 --> 0:18:32.280
And all this code is about 500 lines and uses a lot of stuff from Webit actually.

260
0:18:32.280 --> 0:18:37.600
And Webit is the only dependency here.

261
0:18:37.600 --> 0:18:42.600
So if you look at our final table of benchmarks, we see that the speed is slightly better than

262
0:18:42.600 --> 0:18:47.120
it was before in the browser version and the binary is becoming a lot smaller.

263
0:18:47.120 --> 0:18:53.320
So the entire system is only about 116K in the end of native code.

264
0:18:53.320 --> 0:18:56.000
Now there's still room for improvement here.

265
0:18:56.000 --> 0:19:02.600
So what WA4C does is it just throws together all these modules and then generates the big

266
0:19:02.600 --> 0:19:04.480
module.

267
0:19:04.480 --> 0:19:08.200
Now this big module, there are no cross module calls anymore.

268
0:19:08.200 --> 0:19:10.720
So what you could do is actually do some post processing.

269
0:19:10.720 --> 0:19:15.840
You could change all these indirect calls into direct calls, which could speed up a

270
0:19:15.840 --> 0:19:19.160
lot because the calls are really the bottleneck here.

271
0:19:19.160 --> 0:19:22.800
Another thing you could do is throw away code that you don't need.

272
0:19:22.800 --> 0:19:28.480
So in conclusion, this was a very fast talk.

273
0:19:28.480 --> 0:19:30.480
I could only touch upon things very briefly.

274
0:19:30.480 --> 0:19:37.000
And what I did was I used fourth to explore low level language implementation in WebAssembly.

275
0:19:37.000 --> 0:19:41.840
Those fourth is so minimal, I was able to keep things very simple, try out a lot of

276
0:19:41.840 --> 0:19:43.200
things and go a lot of places.

277
0:19:43.200 --> 0:19:49.880
But I think a lot of the things that I've shown here are actually applicable to other

278
0:19:49.880 --> 0:19:53.960
languages, so more declarative languages if you want to compare to WebAssembly.

279
0:19:53.960 --> 0:19:59.960
Although I have to say if you don't know fourth yet, I can really recommend having a look

280
0:19:59.960 --> 0:20:05.720
at it because I find that there's some interesting philosophies and concepts behind it.

281
0:20:05.720 --> 0:20:06.720
Thank you.

282
0:20:06.720 --> 0:20:07.720
I have a question.

283
0:20:07.720 --> 0:20:09.220
We seem to be dealing in rather old languages today.

284
0:20:09.220 --> 0:20:10.380
Yeah, yeah, yeah.

285
0:20:10.380 --> 0:20:12.040
I always have been.

286
0:20:12.040 --> 0:20:38.720
So list is sixties, I think, or fifties even.

287
0:20:38.720 --> 0:20:42.960
Yeah, yeah, yeah, yeah.

288
0:20:42.960 --> 0:20:43.960
Yes.

289
0:20:43.960 --> 0:20:46.960
So yes, I.

290
0:20:46.960 --> 0:20:51.000
Okay, one question.

291
0:20:51.000 --> 0:21:03.040
Yeah, one thing is that there was a potentially you could, I'm not sure, one potential direction

292
0:21:03.040 --> 0:21:09.160
is that you could also consider doing the code generation in JavaScript as in you can

293
0:21:09.160 --> 0:21:14.360
just create function out of binary and out of text in JavaScript.

294
0:21:14.360 --> 0:21:18.840
And the same thing, I'm not sure the infrastructure how much can be shared, but the same thing

295
0:21:18.840 --> 0:21:26.320
could happen also JavaScript side as in the thing of compiling the code JavaScript side

296
0:21:26.320 --> 0:21:31.520
and then it's, so it could get to JavaScript.

297
0:21:31.520 --> 0:21:38.040
I'm not sure if it's interesting or.

298
0:21:38.040 --> 0:21:40.720
So the question is, can I reach the same perform?

299
0:21:40.720 --> 0:21:44.720
Can you reach the same performance if you do it in JavaScript?

300
0:21:44.720 --> 0:21:50.880
Potentially there is this thing passing through WebAssembly and this J4, the GSPort you mentioned,

301
0:21:50.880 --> 0:21:54.680
but potentially it's also possible to do code generation in JavaScript.

302
0:21:54.680 --> 0:21:55.680
So yes.

303
0:21:55.680 --> 0:21:58.400
So the question is, can you do also this code generation JavaScript?

304
0:21:58.400 --> 0:22:00.280
Yes, of course you can.

305
0:22:00.280 --> 0:22:01.280
Potentially you can.

306
0:22:01.280 --> 0:22:06.160
So typically what you will see is the handy part because I'm working in WebAssembly is

307
0:22:06.160 --> 0:22:10.080
that I have all the WebAssembly low levels at my disposal.

308
0:22:10.080 --> 0:22:15.800
So the hard part if you go to the other languages is that you're going to be, need to have something

309
0:22:15.800 --> 0:22:20.560
to manipulate these, for example, this function table is very critical.

310
0:22:20.560 --> 0:22:24.120
So you need to be able to talk to that and hook into that.

311
0:22:24.120 --> 0:22:27.320
That's going to be the tricky part, but it's definitely possible.

312
0:22:27.320 --> 0:22:33.200
But it's easier if you do a directing job in WebAssembly, of course, you would never

313
0:22:33.200 --> 0:22:37.920
write a complex language directly in WebAssembly that that's madness.

314
0:22:37.920 --> 0:22:42.480
So you can do it with fourth, but I would not recommend it with anything.

315
0:22:42.480 --> 0:22:43.480
Thank you.

316
0:22:43.480 --> 0:22:44.480
One more question.

317
0:22:44.480 --> 0:22:45.480
One more question.

318
0:22:45.480 --> 0:22:46.480
Yes.

319
0:22:46.480 --> 0:22:52.360
I'm interested because you also use it with SMG to see combi.

320
0:22:52.360 --> 0:22:53.360
Yes.

321
0:22:53.360 --> 0:23:08.160
I didn't know I used the WebAssembly to see compared to performance was quite on par with

322
0:23:08.160 --> 0:23:09.160
the.

323
0:23:09.160 --> 0:23:14.920
So if I took the C algorithm, it was a little it was about it's a bad, bad benchmark.

324
0:23:14.920 --> 0:23:18.120
So the performance was about 10 percent slower.

325
0:23:18.120 --> 0:23:22.680
So it was not much, much slower than pure the native binary.

326
0:23:22.680 --> 0:23:27.280
So it's C compiled to native and C compiled to WebAssembly was only a little bit.

327
0:23:27.280 --> 0:23:29.120
So of course you are running.

328
0:23:29.120 --> 0:23:30.480
That's not the number.

329
0:23:30.480 --> 0:23:31.480
OK.

330
0:23:31.480 --> 0:23:33.120
But you are running in a WebAssembly.

331
0:23:33.120 --> 0:23:36.680
You are running in and still running in a virtual machine.

332
0:23:36.680 --> 0:23:41.040
So the fact that the performance is going to be maybe a little bit slower, but it's

333
0:23:41.040 --> 0:23:44.960
I thought it was still OK, given that you're still in a in a V.M.

334
0:23:44.960 --> 0:23:45.960
We need to solve.

335
0:23:45.960 --> 0:23:46.960
OK.

336
0:23:46.960 --> 0:24:07.560
So senator Meyer, thank you for NOUpFkeep.


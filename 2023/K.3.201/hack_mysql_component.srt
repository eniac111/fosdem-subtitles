1
0:00:00.000 --> 0:00:07.000
What is something you want to do?

2
0:00:07.000 --> 0:00:11.080
Okay, I think we can start.

3
0:00:11.080 --> 0:00:13.720
Let's see if this works.

4
0:00:13.720 --> 0:00:14.720
Yes.

5
0:00:14.720 --> 0:00:18.520
So, yeah, where am I?

6
0:00:18.520 --> 0:00:19.520
I am Frederi Descartes.

7
0:00:19.520 --> 0:00:20.520
I'm local.

8
0:00:20.520 --> 0:00:21.520
I'm from Belgium.

9
0:00:21.520 --> 0:00:24.240
So, this is why I'm often here.

10
0:00:24.240 --> 0:00:27.240
You can follow me on Twitter as Le Fred.

11
0:00:27.240 --> 0:00:30.600
So, if you have any questions, just ask me.

12
0:00:30.600 --> 0:00:33.160
I'm quite old using MySQL.

13
0:00:33.160 --> 0:00:35.600
I started with MySQL 3.20.

14
0:00:35.600 --> 0:00:38.800
I was thinking it was 3.23, but it was 3.20.

15
0:00:38.800 --> 0:00:41.960
I found the CD at home.

16
0:00:41.960 --> 0:00:45.000
Yes, a CD for people who don't know what it is.

17
0:00:45.000 --> 0:00:48.320
Before there was a program in it, and before that was floppy.

18
0:00:48.320 --> 0:00:49.600
I also knew the floppy.

19
0:00:49.600 --> 0:00:53.880
So, as I said, I live in Belgium, and I have a blog where you can find a lot of information

20
0:00:53.880 --> 0:00:56.520
mostly related to MySQL.

21
0:00:56.520 --> 0:01:01.200
So, today I'm going to talk about the component infrastructure.

22
0:01:01.200 --> 0:01:02.200
I'm very sorry.

23
0:01:02.200 --> 0:01:08.520
Usually, we are in a very dark room where, and I changed my slide to be dark slides,

24
0:01:08.520 --> 0:01:12.400
to make it to see them very well, but it seems not okay.

25
0:01:12.400 --> 0:01:22.560
So, we will see that if you want to modify MySQL, you have different ways, creating

26
0:01:22.560 --> 0:01:24.040
a storage engine.

27
0:01:24.040 --> 0:01:26.360
That's one way to modify MySQL.

28
0:01:26.360 --> 0:01:30.760
I want to have my own storage engine to store the data like I want.

29
0:01:30.760 --> 0:01:32.880
I want to create a plugin.

30
0:01:32.880 --> 0:01:34.840
Next session is about that.

31
0:01:34.840 --> 0:01:35.840
Right?

32
0:01:35.840 --> 0:01:36.840
Vinesis.

33
0:01:36.840 --> 0:01:42.000
And, or by creating a component.

34
0:01:42.000 --> 0:01:48.200
We at MySQL, we encourage you to use this component infrastructure if you want to extend

35
0:01:48.200 --> 0:01:53.640
MySQL over the plugin, for example.

36
0:01:53.640 --> 0:01:56.640
That's very, very not easy to read for you.

37
0:01:56.640 --> 0:01:57.640
Sorry.

38
0:01:57.640 --> 0:02:00.840
So, what is this MySQL component infrastructure?

39
0:02:00.840 --> 0:02:08.760
So, it's a modular design for the MySQL server that will allow the developers to extend the

40
0:02:08.760 --> 0:02:12.800
server like I said earlier, right, in a different way.

41
0:02:12.800 --> 0:02:20.960
And such adding a support for new function, new performance schema table, new status variable,

42
0:02:20.960 --> 0:02:26.520
new system variable, all that kind of stuff that you want to extend to MySQL, you will

43
0:02:26.520 --> 0:02:30.760
be able to use the component infrastructure to do that.

44
0:02:30.760 --> 0:02:32.400
And so, what does it mean?

45
0:02:32.400 --> 0:02:39.480
It means that the server will provide you services that you can use to extend MySQL.

46
0:02:39.480 --> 0:02:46.240
And there is, yeah, you don't see it very well here, but there is a component service

47
0:02:46.240 --> 0:02:48.120
inventory page.

48
0:02:48.120 --> 0:02:49.320
The URL is here.

49
0:02:49.320 --> 0:02:56.920
Yes, you will have the slide online so you can read them and copy the URL.

50
0:02:56.920 --> 0:03:03.280
And something very nice is that this component infrastructure is, or you say that, enhancing

51
0:03:03.280 --> 0:03:04.280
all the time.

52
0:03:04.280 --> 0:03:05.280
All right.

53
0:03:05.280 --> 0:03:12.920
So, for example, in MySQL 8.28, we had 137 services defined that you could use.

54
0:03:12.920 --> 0:03:17.920
And in 8.32, it's already 162 services.

55
0:03:17.920 --> 0:03:23.400
So if there is something you would like to do and you don't know how to do it, it's

56
0:03:23.400 --> 0:03:24.680
something you can ask us.

57
0:03:24.680 --> 0:03:29.640
I don't say it's guaranteed that you will have it in the next version, but it's something

58
0:03:29.640 --> 0:03:30.640
we are doing.

59
0:03:30.640 --> 0:03:32.520
We try to improve.

60
0:03:32.520 --> 0:03:33.880
And internally, it's the same.

61
0:03:33.880 --> 0:03:40.520
So when one of the team needs something extra, one of the team creates now services that

62
0:03:40.520 --> 0:03:44.800
we can use to make it more modular like that.

63
0:03:44.800 --> 0:03:50.160
So why do we need to use this MySQL component?

64
0:03:50.160 --> 0:04:01.040
It's because the subsystem of these components is designed to, because there are some issues

65
0:04:01.040 --> 0:04:02.760
with the plugins.

66
0:04:02.760 --> 0:04:09.800
So like, for example, the plugin can only talk to the server and not with other plugins.

67
0:04:09.800 --> 0:04:14.600
Here with components, you could have some components talking to other components.

68
0:04:14.600 --> 0:04:18.120
But something possible.

69
0:04:18.120 --> 0:04:24.720
The plugins have access to the server symbols and they can call them directly, but not really

70
0:04:24.720 --> 0:04:26.160
in consolation.

71
0:04:26.160 --> 0:04:31.720
And there are some, we were discussing that, that it is even possible maybe to create a

72
0:04:31.720 --> 0:04:36.480
component and compile it and then load it for another version of it.

73
0:04:36.480 --> 0:04:44.480
But yeah, it is not something I would recommend to do, but it's possible, right?

74
0:04:44.480 --> 0:04:52.280
You can also create these dependencies between the components, which is very nice.

75
0:04:52.280 --> 0:04:55.080
So we're going to create a component together.

76
0:04:55.080 --> 0:04:59.240
I will do it, but so you can see how it works, right?

77
0:04:59.240 --> 0:05:01.220
And try to see.

78
0:05:01.220 --> 0:05:06.040
My plan is to show you that it's not complicated and that you will be able to create your own

79
0:05:06.040 --> 0:05:07.040
component.

80
0:05:07.040 --> 0:05:11.680
So first thing, and this is for me, I think one of the most difficult part when we want

81
0:05:11.680 --> 0:05:18.000
to extend MySQL is, oh cool, I want to extend it, but what will I do?

82
0:05:18.000 --> 0:05:25.200
And sometimes on Slack or forums, people say, oh, I'm a young developer, I would like to

83
0:05:25.200 --> 0:05:27.200
help the MySQL community.

84
0:05:27.200 --> 0:05:28.200
Yes.

85
0:05:28.200 --> 0:05:29.200
What?

86
0:05:29.200 --> 0:05:32.160
Yes, I would say yes.

87
0:05:32.160 --> 0:05:34.000
Yeah, but why not?

88
0:05:34.000 --> 0:05:35.000
But I will do so.

89
0:05:35.000 --> 0:05:40.560
But people say, oh, I am learning C++ or I want to be in the MySQL community.

90
0:05:40.560 --> 0:05:45.760
I want to create something and what could I do?

91
0:05:45.760 --> 0:05:46.760
That's the plan.

92
0:05:46.760 --> 0:05:54.880
It's to, you know, like Colin was telling earlier, we don't have like a list of features

93
0:05:54.880 --> 0:05:56.480
that we ask community to do.

94
0:05:56.480 --> 0:06:01.800
It's more that the community wants to enhance something, fix something, they will do it,

95
0:06:01.800 --> 0:06:02.800
right?

96
0:06:02.800 --> 0:06:05.960
And so here, the most complicated, what will I do?

97
0:06:05.960 --> 0:06:09.240
How would I extend to your needs?

98
0:06:09.240 --> 0:06:11.200
So this is what we're going to define.

99
0:06:11.200 --> 0:06:15.880
So the first thing is that to be able to use what we're going to use, I want to have a

100
0:06:15.880 --> 0:06:17.560
specific privilege.

101
0:06:17.560 --> 0:06:21.520
So not everybody will be able to use the extension we're going to do.

102
0:06:21.520 --> 0:06:28.060
And I decided to use the sensitive variables observer privilege that was added in 802.29.

103
0:06:28.060 --> 0:06:34.120
So you can also, if you want, create a new privilege for what you are doing.

104
0:06:34.120 --> 0:06:43.040
I've made, I don't know if you have seen, I create a component in 13 blog posts which

105
0:06:43.040 --> 0:06:45.040
was covering a lot of things to do it.

106
0:06:45.040 --> 0:06:48.720
And one of them was to create a privilege and use that privilege.

107
0:06:48.720 --> 0:06:57.440
Then we're going to read a value of some predefined variables on the server and let's say extract

108
0:06:57.440 --> 0:07:04.160
the path of it and then create a performance schema table with the path that we extracted

109
0:07:04.160 --> 0:07:10.240
from this variable and see if there is free space and how many space has been used on

110
0:07:10.240 --> 0:07:14.480
this storage that related to the path.

111
0:07:14.480 --> 0:07:21.040
So it's simple, but it can be very useful that you don't need to have access as a DBA

112
0:07:21.040 --> 0:07:25.000
to the file system to check that.

113
0:07:25.000 --> 0:07:32.600
So to be able to do this, we will need, of course, to use several services that are to

114
0:07:32.600 --> 0:07:39.000
get the information from the privileges, so the security of the threads, to need to have

115
0:07:39.000 --> 0:07:43.400
access to the performance schema table, to create one, to create different fields.

116
0:07:43.400 --> 0:07:48.960
Like here we're going to use the table, but we want to have some big end and stuff like

117
0:07:48.960 --> 0:07:49.960
that.

118
0:07:49.960 --> 0:07:53.880
We also need to have a log built in to create error messages.

119
0:07:53.880 --> 0:07:58.600
We need to send message to the user, for example, oh, you don't have privilege to access this

120
0:07:58.600 --> 0:08:05.880
table, so we need to subscribe and to use all these services to do that.

121
0:08:05.880 --> 0:08:06.880
Yes?

122
0:08:06.880 --> 0:08:12.080
Are these predefined functions that we can use?

123
0:08:12.080 --> 0:08:15.800
These are services, and I will show you how to do that.

124
0:08:15.800 --> 0:08:20.240
So you use these services and then you call them and you get the answer.

125
0:08:20.240 --> 0:08:24.400
It's much easier than on the plugin, for example.

126
0:08:24.400 --> 0:08:26.920
Is there a list in the implementation of services?

127
0:08:26.920 --> 0:08:27.920
Yes.

128
0:08:27.920 --> 0:08:31.760
So the URL I was showing you earlier, it's the list of all the components that you can

129
0:08:31.760 --> 0:08:38.360
use and how to use them.

130
0:08:38.360 --> 0:08:40.280
So which variable are we going to check?

131
0:08:40.280 --> 0:08:48.840
So if you're a MySQL DBA, you need how many variables define a pass that you need to check?

132
0:08:48.840 --> 0:08:50.600
Do you have an ID?

133
0:08:50.600 --> 0:08:57.080
One, two, three, more, less?

134
0:08:57.080 --> 0:08:59.560
It's a quiz.

135
0:08:59.560 --> 0:09:01.120
It's a lot, and more and more.

136
0:09:01.120 --> 0:09:04.400
So for example, we have log bin base name.

137
0:09:04.400 --> 0:09:08.240
We should put the binary logs, we can put them somewhere.

138
0:09:08.240 --> 0:09:13.080
The data there, hopefully you know what it means, it is where the data will be.

139
0:09:13.080 --> 0:09:24.680
So all these can be different paths at a different part that we can store data.

140
0:09:24.680 --> 0:09:30.880
So I will use here a vector of the string and I will put all these variables in it.

141
0:09:30.880 --> 0:09:37.960
This is predefined because I know that this can be, if there is some value in these variables,

142
0:09:37.960 --> 0:09:39.440
I will check that.

143
0:09:39.440 --> 0:09:44.440
Of course, if you want, you can extend that and create, for example, a variable where

144
0:09:44.440 --> 0:09:47.120
you will put the name of the variables to list.

145
0:09:47.120 --> 0:09:48.120
It's possible.

146
0:09:48.120 --> 0:09:50.160
It's just depending what you want to do that.

147
0:09:50.160 --> 0:09:56.220
And this is, for example, all you call, you want to register a new variable.

148
0:09:56.220 --> 0:10:00.160
For example, this variable to parse, I called, right?

149
0:10:00.160 --> 0:10:04.280
This is how you call the MySQL service component, this variable register.

150
0:10:04.280 --> 0:10:07.920
And you register your variable.

151
0:10:07.920 --> 0:10:10.480
Okay.

152
0:10:10.480 --> 0:10:14.800
So let's go to, we are in a conference, right?

153
0:10:14.800 --> 0:10:17.180
So our component will look like this.

154
0:10:17.180 --> 0:10:25.040
So we will, in the MySQL server source directory, there is a component folder.

155
0:10:25.040 --> 0:10:29.880
And in that folder, I will create my disk size component.

156
0:10:29.880 --> 0:10:30.880
So it's another folder.

157
0:10:30.880 --> 0:10:33.600
I will have a CMake list.

158
0:10:33.600 --> 0:10:39.360
And then a disk size cc, disk size.eather, and a disk size pfs, where I put the stuff

159
0:10:39.360 --> 0:10:43.580
for a performance schema.

160
0:10:43.580 --> 0:10:47.720
If we have time, and I think we may have, I will just show you the content of the file.

161
0:10:47.720 --> 0:10:56.000
But before, I will show you what we have in this, some part of it, how to use it.

162
0:10:56.000 --> 0:11:03.600
So for example, if you want to write in the error lock, all our component needs to have

163
0:11:03.600 --> 0:11:04.600
a tag.

164
0:11:04.600 --> 0:11:07.440
So I don't know if this will work.

165
0:11:07.440 --> 0:11:08.440
Seems not.

166
0:11:08.440 --> 0:11:09.440
Oops.

167
0:11:09.440 --> 0:11:10.440
Where is it?

168
0:11:10.440 --> 0:11:11.440
Oh.

169
0:11:11.440 --> 0:11:12.440
Yeah.

170
0:11:12.440 --> 0:11:13.440
It's with the, yeah.

171
0:11:13.440 --> 0:11:18.360
Man, yeah, need to be very slow.

172
0:11:18.360 --> 0:11:20.360
Very slow.

173
0:11:20.360 --> 0:11:21.880
Yeah.

174
0:11:21.880 --> 0:11:22.880
You see here?

175
0:11:22.880 --> 0:11:25.720
Yeah, it's not that useful.

176
0:11:25.720 --> 0:11:29.680
You can, you say lock component tag, and it's disk size.

177
0:11:29.680 --> 0:11:38.120
So every error message that I will create will have this disk size tag in it.

178
0:11:38.120 --> 0:11:40.320
So I will require service place.

179
0:11:40.320 --> 0:11:46.400
So I need to use the lock built-ins, lock built-in strings, because I want to send strings, right?

180
0:11:46.400 --> 0:11:51.560
And this is the service type I will gonna use, and I'm defining here.

181
0:11:51.560 --> 0:12:00.440
And then, for example, when I will initialize my component, right, I will here call this

182
0:12:00.440 --> 0:12:05.520
and initialize the lock objects.

183
0:12:05.520 --> 0:12:13.160
And when I just do lock component error, which type of error it is, can you be a warning?

184
0:12:13.160 --> 0:12:17.560
Here it's information level, print message, initializing.

185
0:12:17.560 --> 0:12:22.080
So every time I will load the component, I will have this.

186
0:12:22.080 --> 0:12:23.440
So this is how we do it.

187
0:12:23.440 --> 0:12:24.760
It's very easy.

188
0:12:24.760 --> 0:12:28.040
So this is some code that you will reuse all the time.

189
0:12:28.040 --> 0:12:35.280
And then in your component, this is the message if you want to print an error message.

190
0:12:35.280 --> 0:12:41.120
So usually it's much more easy than in a plugin.

191
0:12:41.120 --> 0:12:46.180
To check a privilege, so I create here a function have required privilege, right?

192
0:12:46.180 --> 0:12:52.760
And I will send the THD, and also to get the context, to get the security context of THD,

193
0:12:52.760 --> 0:12:54.960
all that, our services.

194
0:12:54.960 --> 0:13:00.640
And then we check, okay, do we have access to this privilege?

195
0:13:00.640 --> 0:13:03.120
And if not, I will say I will print an error.

196
0:13:03.120 --> 0:13:05.560
If it's okay, we can continue.

197
0:13:05.560 --> 0:13:08.160
So here we check the privilege.

198
0:13:08.160 --> 0:13:14.740
So this is how we do it, and it's quite very easy to do all that kind of stuff like this.

199
0:13:14.740 --> 0:13:20.400
And for example, if you want to access a global variable, it's also again,

200
0:13:20.400 --> 0:13:26.280
get the variable from this variable register, get the variable, put the name of the variable,

201
0:13:26.280 --> 0:13:30.040
and you will get the data out of it.

202
0:13:30.040 --> 0:13:34.520
So this is how it works, and it's quite very easy.

203
0:13:34.520 --> 0:13:42.280
And you can extend that, like I said, there is 161 services to create performance schema

204
0:13:42.280 --> 0:13:47.400
table to get information for plenty of stuff.

205
0:13:47.400 --> 0:13:49.260
So it is very, very easy.

206
0:13:49.260 --> 0:13:52.560
So how does it look like when we run this component, right?

207
0:13:52.560 --> 0:13:58.840
So the first thing we do, if you can read it, is we install the component.

208
0:13:58.840 --> 0:14:03.680
So we do install component and then file component disk size.

209
0:14:03.680 --> 0:14:08.160
By default the components, they start with the name component underscore, but

210
0:14:08.160 --> 0:14:10.440
you can change that if you want.

211
0:14:10.440 --> 0:14:14.960
And as you can see, it's okay, it means it has been loaded, right?

212
0:14:14.960 --> 0:14:18.800
If we check in the error lock, because remember we were printing,

213
0:14:18.800 --> 0:14:23.560
initializing when we were loading the component, we will see,

214
0:14:23.560 --> 0:14:27.720
because in Mexico A, the error lock is also part of performance schema table,

215
0:14:27.720 --> 0:14:30.440
so you don't need to go tail file.

216
0:14:30.440 --> 0:14:37.020
We can see that, okay, component disk size reported initializing,

217
0:14:37.020 --> 0:14:42.240
component disk size reported performance schema table has been registered successfully.

218
0:14:42.240 --> 0:14:45.080
So all that information comes from the component and

219
0:14:45.080 --> 0:14:47.560
you can find it in the error lock.

220
0:14:47.560 --> 0:14:51.680
So that's the first thing, we were happy because we were able to load the component

221
0:14:51.680 --> 0:14:54.560
and we see that in error lock the component is written.

222
0:14:56.120 --> 0:15:00.280
And then we can see also here to use it really.

223
0:15:00.280 --> 0:15:03.720
So we do select star from performance schema disk size,

224
0:15:03.720 --> 0:15:06.800
which is the table, the performance schema table we created.

225
0:15:06.800 --> 0:15:13.080
And it gives us all the data, the directory or the path,

226
0:15:13.080 --> 0:15:16.240
from which variable it comes from, right?

227
0:15:16.240 --> 0:15:21.800
And the free size and the total size invites from it.

228
0:15:21.800 --> 0:15:25.320
This is quite very useful, so you can check without having to,

229
0:15:26.600 --> 0:15:28.640
after you can do whatever you want with this information.

230
0:15:28.640 --> 0:15:34.200
But it was to show something relevant and not just a hello world to you guys.

231
0:15:34.200 --> 0:15:37.960
I think this is more useful.

232
0:15:37.960 --> 0:15:40.520
And for example, yeah, you can display or

233
0:15:40.520 --> 0:15:45.160
you can play with a new function like the format bytes and stuff.

234
0:15:45.160 --> 0:15:47.880
And we can see here the free size, total size,

235
0:15:47.880 --> 0:15:53.320
how many percent are used on the disk depending where you want to check.

236
0:15:54.360 --> 0:15:59.200
What do you see here is that everything points on the same SSD on my laptop.

237
0:15:59.200 --> 0:16:01.400
And this is why you have always the same numbers.

238
0:16:01.400 --> 0:16:04.960
Because at the end, it's only the same disk.

239
0:16:04.960 --> 0:16:09.000
But if you use different disks, you will have different values here.

240
0:16:11.800 --> 0:16:17.000
The error, like I said earlier, I was using, we were using this specific

241
0:16:19.800 --> 0:16:20.720
privilege.

242
0:16:20.720 --> 0:16:24.120
So here I'm using another user, which is called resto.

243
0:16:24.120 --> 0:16:26.920
I was for docstore, we were discussing about docstore earlier.

244
0:16:28.040 --> 0:16:31.200
So I want to check in the performance schema table with that user.

245
0:16:31.200 --> 0:16:35.320
And you can see that user doesn't have the privilege we want.

246
0:16:35.320 --> 0:16:39.960
He says, okay, this select is denied because the user cannot, so you don't,

247
0:16:39.960 --> 0:16:43.920
I don't give access to the performance schema table to everybody,

248
0:16:43.920 --> 0:16:45.200
just some specific user.

249
0:16:46.280 --> 0:16:51.760
So some information about the MySQL components, right?

250
0:16:51.760 --> 0:16:56.560
It is, you can see which are the components that are loaded.

251
0:16:56.560 --> 0:16:59.880
So you do select star from MySQL component.

252
0:16:59.880 --> 0:17:02.760
So there is a system table called component.

253
0:17:02.760 --> 0:17:07.520
And you can see which are the component loaded.

254
0:17:07.520 --> 0:17:09.920
And sometimes a component can be part of a group and

255
0:17:09.920 --> 0:17:17.640
then you will see it if they're on the same group or not, which is not the case here.

256
0:17:17.640 --> 0:17:21.440
But you can see here, I have several, so the query attribute is a component,

257
0:17:21.440 --> 0:17:22.360
for example.

258
0:17:22.360 --> 0:17:25.880
And then other component that I'm playing with on my system,

259
0:17:25.880 --> 0:17:30.760
like UUID, V7, and stuff like that, that you can create if you want.

260
0:17:33.680 --> 0:17:38.240
Where are this component on the disk?

261
0:17:38.240 --> 0:17:41.240
It's on the plugin there, same as the plugin.

262
0:17:41.240 --> 0:17:43.560
So you will see where the plugins are.

263
0:17:43.560 --> 0:17:49.440
You have also the components there, and by default, the names start with component.

264
0:17:49.440 --> 0:17:54.360
So the disk size we just created, it's here, component disk size, right?

265
0:17:54.360 --> 0:18:01.320
But, and you can see there are several components already in MySQL by default.

266
0:18:02.920 --> 0:18:07.760
Because we are also using our own infrastructure in MySQL.

267
0:18:10.560 --> 0:18:15.640
So some question that I've heard about the component is that

268
0:18:15.640 --> 0:18:19.920
when we load a component after a restart of the server, what happened with that

269
0:18:19.920 --> 0:18:20.760
component?

270
0:18:20.760 --> 0:18:24.800
So all the component will be reloaded again, in fact.

271
0:18:24.800 --> 0:18:28.080
So if you install the component, when you restart, it will be installed.

272
0:18:28.080 --> 0:18:30.280
So there is no configuration in my CNF.

273
0:18:30.280 --> 0:18:34.160
You need to load it first, and then it will stay loaded.

274
0:18:34.160 --> 0:18:39.360
Meaning that if I remove the component that was installed,

275
0:18:39.360 --> 0:18:43.680
because I like to suffer, right, and what will happen?

276
0:18:43.680 --> 0:18:47.800
In fact, you will have a message that say, this component, for example,

277
0:18:47.800 --> 0:18:50.160
cannot be open, and there is an issue.

278
0:18:50.160 --> 0:18:51.040
But that's the only thing.

279
0:18:51.040 --> 0:18:53.560
It won't block the server, it won't crash.

280
0:18:53.560 --> 0:18:58.240
It will just tell you, okay, this is not there, and it won't be available for you.

281
0:18:58.240 --> 0:19:00.480
So if you are interested, for

282
0:19:00.480 --> 0:19:06.240
example, to see the full code of the component, it's on GitHub.

283
0:19:06.240 --> 0:19:11.840
So on my GitHub, MySQL component disk size, so you can find it.

284
0:19:11.840 --> 0:19:15.000
And also now, it's your turn.

285
0:19:15.000 --> 0:19:17.720
Please show me what you can do and what you can invent and

286
0:19:17.720 --> 0:19:22.800
what you can bring to MySQL, because I think the component infrastructure is

287
0:19:22.800 --> 0:19:31.120
very something cool that you can use to add features to MySQL.

288
0:19:31.120 --> 0:19:35.880
And I hope that finishes you will change your next talk to a component for

289
0:19:35.880 --> 0:19:39.280
the next year, and not as a plugin, right?

290
0:19:39.280 --> 0:19:41.480
So thank you very much for this.

291
0:19:41.480 --> 0:19:44.080
Share your love to MySQL on the social media.

292
0:19:44.080 --> 0:19:47.000
Join us on the community Slack.

293
0:19:47.000 --> 0:19:51.240
So where plenty of people are there to answer questions from development,

294
0:19:51.240 --> 0:19:56.280
consulting, plenty of people from around the world, not working for

295
0:19:56.280 --> 0:19:59.840
MySQL, but in the MySQL community, are also there to answer you.

296
0:19:59.840 --> 0:20:15.840
Do you have questions?


WEBVTT

00:00.000 --> 00:02.060
you

00:30.000 --> 00:59.000
Thank you.

01:00.000 --> 01:25.000
Thank you.

01:30.000 --> 01:32.000
Thank you.

02:00.000 --> 02:02.000
Thank you.

02:30.000 --> 02:32.000
Thank you.

03:00.000 --> 03:02.000
Thank you.

03:31.000 --> 03:48.000
Thank you.

03:48.000 --> 03:49.000
No?

03:49.000 --> 03:50.000
Better?

03:50.000 --> 03:51.000
Okay.

03:51.000 --> 03:52.000
Yeah.

03:52.000 --> 03:53.000
Perfect.

03:53.000 --> 03:59.000
And then let's say the new generations, they moved to this VM-based scheme where they

03:59.000 --> 04:03.000
have an entire VM isolated from the, from the user.

04:03.000 --> 04:08.000
You cut the hypervisor, you create a completely isolated VM and everything that's inside,

04:08.000 --> 04:14.000
like the firmware, the BIOS, the kernel and so forth, is everything is part of that confidential

04:14.000 --> 04:15.000
context.

04:15.000 --> 04:19.000
That means, of course, more code that needs to be trusted that's running in the same kind

04:19.000 --> 04:21.000
of privileged layer.

04:21.000 --> 04:24.000
But you don't have the problem of this restricted system interface.

04:24.000 --> 04:30.000
So you can directly access, do any kind of syscalls, pretty much behave like any other

04:30.000 --> 04:33.000
application inside any other operating system.

04:33.000 --> 04:35.000
And those are these, these two worlds.

04:35.000 --> 04:40.000
And both could be an option for protecting the variety at runtime.

04:40.000 --> 04:51.000
As I said, Rebuild interface, in, in case of the confidential VMs, there's nothing really

04:51.000 --> 04:52.000
we have to change.

04:52.000 --> 04:59.500
And in case of the, the Intel SGX, the process-based world, we have this weird thing where we need

04:59.500 --> 05:03.280
to forward those syscalls to, to the host.

05:03.280 --> 05:10.720
And I guess it's, it's fair to say that the, the right side is probably a lot faster.

05:10.720 --> 05:15.120
But you have this bit more of a stack that you need to trust that has, that's running

05:15.120 --> 05:18.000
inside the same, same context.

05:18.000 --> 05:25.640
Yeah, so, so SGX and process-based limitations.

05:25.640 --> 05:29.160
It's currently, I think it's fair to say it's an Intel-only solution.

05:29.160 --> 05:32.760
You're pretty much locked in with Intel at that point.

05:32.760 --> 05:34.520
Any kind of context switch is expensive.

05:34.520 --> 05:37.840
That means IO is, is expensive.

05:37.840 --> 05:41.480
Any other interrupt is expensive.

05:41.480 --> 05:49.440
And InnoDB, I have to say I'm not a MariaDB expert whatsoever, but for some reason I

05:49.440 --> 05:52.440
know that InnoDB is a, is a problem.

05:52.440 --> 06:00.640
People use different kinds of storage backends, like RocksDB, for example.

06:00.640 --> 06:06.280
So you can just move the, I guess the, the off-the-shelf MariaDB into an SGX.

06:06.280 --> 06:11.240
There's some, some things you have need to fiddle with and then you can make it work.

06:11.240 --> 06:16.080
The upside is you have a very small trusted computing base, a very small amount of code

06:16.080 --> 06:21.040
that you need to trust that runs inside this, this context.

06:21.040 --> 06:29.360
On the other hand, SEV, confidential VM, larger TCB, well that, that means you are more, it's

06:29.360 --> 06:31.400
more lift and shift.

06:31.400 --> 06:37.280
And yeah, Intel is currently not an, it doesn't really have a solution out there that you

06:37.280 --> 06:42.320
can use, but there's Intel TDX coming that's more or less the same as AMD SEV.

06:42.320 --> 06:46.480
There's other stuff coming from ARM and, and, and Riskv and so forth.

06:46.480 --> 06:50.200
Huge attack surface just means, yeah, you have the kernel, you have the firmware, the

06:50.200 --> 06:53.360
bootloader, everything inside the, inside that, that context.

06:53.360 --> 06:57.160
So if you have any kind of vulnerabilities there, you could be potentially attacked even

06:57.160 --> 07:00.560
though you're isolated.

07:00.560 --> 07:04.200
Right.

07:04.200 --> 07:09.840
Apart from memory encryption, I think an important aspect of confidential computing is, is attestation.

07:09.840 --> 07:14.440
That means, remoted attestation just means you get a statement from the chip, from the

07:14.440 --> 07:21.120
CPU about what's running, what code was loaded inside your enclave, your, or your confidential

07:21.120 --> 07:22.320
VM.

07:22.320 --> 07:27.960
And that you, that's, that's signed with a key from the CPU and this key has a certificate

07:27.960 --> 07:34.600
chain back to the hardware vendor so that you can send such a statement about, for example,

07:34.600 --> 07:39.080
this is a MariahDB enclave, a MariahDB container that was loaded inside this enclave.

07:39.080 --> 07:44.140
You can send it to a, to a remote party and establish a secure channel.

07:44.140 --> 07:48.280
For example, exchanging a key, bootstrapping a TLS connection, and then you have a secure

07:48.280 --> 07:50.520
channel through that, through the database.

07:50.520 --> 07:56.080
You can exchange data to your select statements and so forth.

07:56.080 --> 08:03.680
And with SGX, this needs, for example, you can do that by, by having like a small, small

08:03.680 --> 08:08.920
stab that runs before your, before your actual code or next to your actual code that does

08:08.920 --> 08:13.680
that interaction with the CPU and provides you with a attestation statement and then

08:13.680 --> 08:15.680
you can use that.

08:15.680 --> 08:22.480
Felix gave a talk last year, Felix was at the MariahDB dev room about HlessDB.

08:22.480 --> 08:31.400
That's essentially a, that builds up on MariahDB and tries to bring that confidential computing

08:31.400 --> 08:38.720
concept even, even, even closer or even more into the, the, the use case.

08:38.720 --> 08:48.600
After slides from Felix, let me quickly show.

08:48.600 --> 08:55.320
Because what, what we've seen so far is essentially just lift and shift of MariahDB on top of

08:55.320 --> 08:57.760
SGX or top of AMD-SDB.

08:57.760 --> 09:06.840
What HlessDB does, essentially it uses RoxDB for the reasons mentioned and also for, it

09:06.840 --> 09:09.800
has some neat features about the encryption.

09:09.800 --> 09:17.960
So the way it writes blocks makes it very good for the, for the confidential computer

09:17.960 --> 09:23.920
and the attacker model, you can switch things around, you can't do any, any modifications.

09:23.920 --> 09:28.720
And the interesting part is, why I'm showing this, they added a confidential computing

09:28.720 --> 09:29.800
front end.

09:29.800 --> 09:34.360
That means you not only have attestation that your MariahDB runs inside confidential computing

09:34.360 --> 09:39.280
environment, they also give you an attestation about what the database is and who has access

09:39.280 --> 09:40.280
to it.

09:40.280 --> 09:44.920
Essentially when you, when you set it up, you define a small manifest that just gives

09:44.920 --> 09:49.800
the initial database layout like the users, the initial tables, who can modify what with

09:49.800 --> 09:52.240
access to what tables.

09:52.240 --> 09:56.360
And they add that to the, to the attestation statements.

09:56.360 --> 10:01.080
So then you can give, do a remote attestation and you know this is, this is not only MariahDB

10:01.080 --> 10:05.920
running there, but this is MariahDB with those user credentials, those tables.

10:05.920 --> 10:11.880
I think that's integrating this concept of confidential computing more with, with the,

10:11.880 --> 10:15.000
the concept of a confidential database, if you will.

10:15.000 --> 10:20.080
So interesting, as well as DBs also open source, so you can check it out, but if that's, that's

10:20.080 --> 10:22.720
interesting for you, but it's SJ specific.

10:22.720 --> 10:27.440
Let me go back to Arvid's slides.

10:27.440 --> 10:36.040
Yeah, it's his slides, his, his emojis don't take responsibility, but yeah.

10:36.040 --> 10:42.760
The problem with SCV and confidential VMs currently is that you can, you can just lift

10:42.760 --> 10:44.820
and shift MariahDB inside, it will work.

10:44.820 --> 10:52.320
The problem with the current way hypervisors and other cloud providers offer confidential

10:52.320 --> 10:56.720
VMs is that they don't give you full access to the entire stack that runs inside the confidential

10:56.720 --> 10:57.720
VM.

10:57.720 --> 11:02.440
That means they have a firmware shim, you don't know, you can't really verify that loads

11:02.440 --> 11:07.720
your bootloader US and then MariahDB, that breaks the chain of verification from the

11:07.720 --> 11:09.320
hardware essentially.

11:09.320 --> 11:11.760
That's what the slide tries to tell you.

11:11.760 --> 11:20.680
And what we like to have is having the full chain inside this, in this VM verifiable from

11:20.680 --> 11:25.440
the, from the firmware, like from the hyperstatement to the firmware and then up to MariahDB itself.

11:25.440 --> 11:31.200
So yeah, this is a practical problem right now, but hopefully it's going to be solved

11:31.200 --> 11:32.200
soon.

11:32.200 --> 11:37.200
Can you start the hypervisor with your own virus?

11:37.200 --> 11:41.160
Because the virus is on the lowest level.

11:41.160 --> 11:48.400
Currently you can, for example, on Azure you can start on a AMD SCV machine on Hyper-V.

11:48.400 --> 11:50.800
They set the firmware.

11:50.800 --> 11:54.680
But there's a preview where you can define your own firmware.

11:54.680 --> 12:03.040
You can either use direct Linux boot or you define your own UAFI base firmware.

12:03.040 --> 12:08.880
And then you boot the image, the image starts MariahDB and then you go from there.

12:08.880 --> 12:18.600
Yeah, if you want to try that, yeah, of course there's the AMD documentation and stuff.

12:18.600 --> 12:25.040
It's a company called Cloud offers confidential VMs based on SCV.

12:25.040 --> 12:29.480
Apparently there's some, some solution to try it out.

12:29.480 --> 12:30.800
And yeah, EdgelessDB is open source.

12:30.800 --> 12:33.480
You can also try that.

12:33.480 --> 12:35.680
I think that's the last slide.

12:35.680 --> 12:40.320
So not sure if I hit those 20 minutes, but yeah.

12:40.320 --> 12:41.320
Any questions?

12:41.320 --> 12:46.320
What type of usage do you see using this?

12:46.320 --> 12:53.240
Yeah, mostly people that currently want to process sensitive regulated data in the cloud,

12:53.240 --> 12:57.160
like healthcare, telecommunication, this kind of stuff.

12:57.160 --> 13:01.720
They store, they do that on-prem with the database.

13:01.720 --> 13:07.360
They want to move that to the cloud, but they can't because it's not enough that data is

13:07.360 --> 13:11.840
protected at rest and in transit they also need to protect data at runtime.

13:11.840 --> 13:18.320
Or as the EdgelessDB gives guarantees on who has access to the data.

13:18.320 --> 13:19.320
Yeah.

13:19.320 --> 13:26.440
The AMD based question, I'm interested in it after.

13:26.440 --> 13:28.560
What is the reason why it's not compatible?

13:28.560 --> 13:33.280
Is it the asynchronous IO?

13:33.280 --> 13:38.160
To be honest, I am not the best person to answer the question, but I think it's part

13:38.160 --> 13:43.520
of the syscalls that happen when you use InnoDB.

13:43.520 --> 13:46.040
I'm not sure what syscalls are in the problem.

13:46.040 --> 13:49.360
And then you have this context switches and you have a lot more context switches than

13:49.360 --> 13:51.640
when you use RocksDB and that makes it super slow.

13:51.640 --> 13:52.640
That's at least one problem.

13:52.640 --> 13:59.640
I would imagine that RocksDB, well I don't know any detail, but I would assume that it

13:59.640 --> 14:06.320
is synchronous IO for writing those LSM3s so it could be simpler syscalls.

14:06.320 --> 14:07.320
Yeah, yeah.

14:07.320 --> 14:08.320
I think that's...

14:08.320 --> 14:12.040
There was something on Felix's slides along those lines.

14:12.040 --> 14:15.080
But yeah, by the way, if you...

14:15.080 --> 14:16.440
I think this is from last year.

14:16.440 --> 14:22.840
I think there's a recording and Felix speaks about why RocksDB is a better performance

14:22.840 --> 14:23.840
than the InnoDB.

14:23.840 --> 14:24.840
I have a bunch of questions.

14:24.840 --> 14:38.040
First of all, the first slide mentioned the Ponzi schema, some virtual training and touch

14:38.040 --> 14:39.040
this.

14:39.040 --> 14:42.120
What is it?

14:42.120 --> 14:43.120
To be honest...

14:43.120 --> 14:45.400
You can't keep this if you...

14:45.400 --> 14:46.480
I don't know.

14:46.480 --> 14:50.320
This would be a great question for Avid here, something right...

14:50.320 --> 14:52.320
Yeah, at the end.

14:52.320 --> 14:53.320
Yeah.

14:53.320 --> 14:57.680
I'm not sure if Avid is in the chat or if there's a chat, but maybe he can answer that

14:57.680 --> 14:58.680
question.

14:58.680 --> 15:07.680
Okay, the next question is, there was a slide, two slides from the end, there was an object

15:07.680 --> 15:08.680
called SP.

15:08.680 --> 15:09.680
Yes.

15:09.680 --> 15:10.680
Yes, what on the bottom right?

15:10.680 --> 15:11.680
What would it mean?

15:11.680 --> 15:18.560
What would it mean in a chain of trust?

15:18.560 --> 15:19.560
Which one?

15:19.560 --> 15:20.560
This SP?

15:20.560 --> 15:21.560
Yes.

15:21.560 --> 15:24.040
So, this is specific for how AMD implements that.

15:24.040 --> 15:29.520
Essentially, they add a chip, the secure processor.

15:29.520 --> 15:38.360
Yeah, and this basically holds the keys, holds the information, and then you communicate

15:38.360 --> 15:42.960
as the guest, you communicate, you can establish a secure connection to that, go through the

15:42.960 --> 15:47.800
hypervisor to the SP and obtain an annotation statement, for example.

15:47.800 --> 15:51.720
So this is explicitly trusted, right?

15:51.720 --> 15:55.920
So the SP has a firmware, if the firmware has a bug, you could potentially exploit it

15:55.920 --> 15:56.920
and so forth.

15:56.920 --> 15:57.920
Yeah, yeah, I understand.

15:57.920 --> 15:58.920
Okay, okay, okay.

15:58.920 --> 16:08.920
The question is, how do you actually verify and what is the verifiable minimal unit of

16:08.920 --> 16:10.720
the code?

16:10.720 --> 16:17.480
So yeah, in the case of a confidential VM, depending on the hardware, you essentially

16:17.480 --> 16:25.080
can verify, you create measurements of the entire boot chain.

16:25.080 --> 16:32.360
So it's similar to a TPM case, like a measured boot, where you have a statement of the initial

16:32.360 --> 16:37.680
memory layout, the firmware, and then a statement of all the other components in the boot chain.

16:37.680 --> 16:43.640
And the statement just says, this is an isolated VM, this was the boot chain, and this is signed

16:43.640 --> 16:44.640
by AMD.

16:44.640 --> 16:49.680
And this is what you get.

16:49.680 --> 16:54.520
So the VM is okay, but what about process runtime?

16:54.520 --> 17:06.680
How do you lower the code itself and how do you verify it?

17:06.680 --> 17:07.680
Yeah.

17:07.680 --> 17:16.360
So the process space, exactly, so your untrusted host creates the process, loads the memory

17:16.360 --> 17:20.160
pages and then says, okay, I'm done.

17:20.160 --> 17:26.480
And then the secure processor that's part of the CPU will create a hash over those pages

17:26.480 --> 17:34.120
and compare that to the expected measurement that's signed by you as the author of the

17:34.120 --> 17:35.120
enclave.

17:35.120 --> 17:42.640
So you assign, when you build an enclave, you essentially build the expected memory

17:42.640 --> 17:48.240
layout, you assign that, and part of the attestation statement is always this measurement of the

17:48.240 --> 17:50.240
initial memory layout plus your signature.

17:50.240 --> 17:58.240
I see, this is the way to authenticate the actual code before it runs.

17:58.240 --> 17:59.240
Right.

17:59.240 --> 18:05.440
So you somehow think of this with a runtime code, I mean, there are persons who were able

18:05.440 --> 18:09.600
to change the top D, the kernel version on the running machine.

18:09.600 --> 18:14.400
So what's the protection from such?

18:14.400 --> 18:22.240
I mean, yeah, that's part of why you can say this is a bit more fuzzy in terms of what

18:22.240 --> 18:28.520
the attestation statement says, right?

18:28.520 --> 18:34.000
Basically anything that happens after this boot, modifying the memory layout, modifying

18:34.000 --> 18:38.180
what's running there, you can only derive from the initial statement.

18:38.180 --> 18:44.120
So what people do is they use read-only, file a immutable image, this kind of stuff to make

18:44.120 --> 18:46.640
it more locked down.

18:46.640 --> 18:50.080
For example, if you just want Mariah to be, you could bring this to a microkernel that

18:50.080 --> 18:55.640
just is able to run a Mariah to be container, for example.

18:55.640 --> 19:00.160
Still there's a lot of things that can happen at runtime but trying to minimize the TCP

19:00.160 --> 19:01.160
or the trust.

19:01.160 --> 19:02.160
So at this point it looks like a state of defense is at the entrance.

19:02.160 --> 19:03.160
I mean, there is a path to go for sure and there will be a path to also a way to authenticate

19:03.160 --> 19:04.160
the dynamic, the code dynamically or the runtime dynamically.

19:04.160 --> 19:05.160
But at this point I see that this is an entrance defense.

19:05.160 --> 19:06.160
Yeah, yeah.

19:06.160 --> 19:29.960
I mean, if you can derive all the states you will end up in from the initial state, you

19:29.960 --> 19:32.840
will have perfect verification but this is not feasible, of course.

19:32.840 --> 19:36.400
Thanks for answering my question.

19:36.400 --> 19:37.400
Sure.

19:37.400 --> 19:42.600
What memory is encrypted?

19:42.600 --> 19:47.240
The main memory, if you're referring to caches, I'm not sure which cache is.

19:47.240 --> 19:52.600
But you started by saying it's important to have encrypted memory.

19:52.600 --> 19:53.600
Yes.

19:53.600 --> 19:54.600
So what here is encrypted?

19:54.600 --> 19:59.960
So in the confidential VM case, anything off that VM, right, from the firmware layer upwards,

19:59.960 --> 20:05.040
anything that's above the hypervisor, for the process-based, anything that's part of

20:05.040 --> 20:06.040
that process.

20:06.040 --> 20:07.560
So what's the performance course for that?

20:07.560 --> 20:15.960
Yeah, for process-based, with the latest generation, I think it's around 10%, something like that.

20:15.960 --> 20:18.240
The bigger problem are the context switches by far.

20:18.240 --> 20:24.760
For the right-hand side, AMD did measurements and I think they are around, worst case, like

20:24.760 --> 20:25.760
4% to 8%.

20:25.760 --> 20:36.120
What kind of instructions do we use to switch the context to use the Win 0?

20:36.120 --> 20:49.040
What are the instructions that you actually need from the CPU to raise the privileges

20:49.040 --> 20:50.040
on the CPU?

20:50.040 --> 20:51.040
You mean if I want to?

20:51.040 --> 20:56.280
The context switch is usually speaking to raise the CPU operation privilege.

20:56.280 --> 20:59.280
So you want to go into kernel space?

20:59.280 --> 21:00.280
Yes.

21:00.280 --> 21:06.480
There are more than these for hypervisors, for the things that we have to use.

21:06.480 --> 21:14.640
Yeah, so on a process-based, what will just happen if, let's say, you do a write syscall,

21:14.640 --> 21:19.120
the process will trap, you will have an interrupt, and it will automatically...

21:19.120 --> 21:26.840
Save your registers, your state, encrypted, and then clear those registers.

21:26.840 --> 21:35.200
There were some problems in the past, but clear those registers and go to kernel space.

21:35.200 --> 21:42.840
For the VM, they both have additional instructions for doing those confidential computing specifics,

21:42.840 --> 21:48.600
like getting a remote attestation statement or for the confidential VM connecting through

21:48.600 --> 21:49.600
the secure processor.

21:49.600 --> 21:50.600
There's an instruction set addition.

21:50.600 --> 21:59.600
As I said this week, if you do a write call for a block, the kernel, kernel will see it

21:59.600 --> 22:00.600
unencrypted.

22:00.600 --> 22:03.600
If you've got more questions, you need to leave them in the third order.

22:03.600 --> 22:04.600
That's what I'm talking about.

22:04.600 --> 22:05.600
I'll put you on the side.

22:05.600 --> 22:35.560
Thank you.

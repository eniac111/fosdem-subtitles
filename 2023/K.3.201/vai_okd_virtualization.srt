1
0:00:00.000 --> 0:00:12.200
Welcome to the virtualization room.

2
0:00:12.200 --> 0:00:15.920
Similarly, we'll talk about OPD virtualization.

3
0:00:15.920 --> 0:00:17.120
Enjoy.

4
0:00:17.120 --> 0:00:19.840
So, hi-hole.

5
0:00:22.480 --> 0:00:25.840
Nice to see you here.

6
0:00:25.840 --> 0:00:29.480
Today, we're going to talk about OPD virtualization.

7
0:00:29.480 --> 0:00:32.320
We're going to have just a quick intro

8
0:00:32.320 --> 0:00:35.680
for who doesn't really know what OPD virtualization is,

9
0:00:35.680 --> 0:00:38.040
just to get a bit of context.

10
0:00:38.040 --> 0:00:42.540
Then, we are going to see how you can use

11
0:00:42.540 --> 0:00:47.000
a CSC to play with OPD virtualization at home

12
0:00:47.000 --> 0:00:51.360
in a really small footprint just if you want to try it,

13
0:00:51.360 --> 0:00:56.120
or if you want to start developing on OPD virtualization.

14
0:00:56.120 --> 0:00:59.320
We're going to see a couple of new features.

15
0:00:59.320 --> 0:01:02.120
I chose this one because they are cloud-native.

16
0:01:02.120 --> 0:01:06.160
I think that they are a bit different from what you use

17
0:01:06.160 --> 0:01:10.000
to see in a related kind of products.

18
0:01:10.000 --> 0:01:14.480
And then, we are going to see next challenges for us.

19
0:01:14.480 --> 0:01:16.160
So, let's start from OPD.

20
0:01:16.160 --> 0:01:17.480
What OPD is?

21
0:01:17.480 --> 0:01:21.680
OPD is a distribution of Kubernetes.

22
0:01:21.680 --> 0:01:28.360
It's a sibling distribution of OpenShift container platform,

23
0:01:28.360 --> 0:01:31.720
which is the data distribution of Kubernetes.

24
0:01:31.720 --> 0:01:38.480
OPD is the community of the upstream release of a VET.

25
0:01:38.480 --> 0:01:44.600
It's based on physical machines that can be virtual or virtual

26
0:01:44.600 --> 0:01:46.320
machines on a hyperscaler.

27
0:01:46.320 --> 0:01:48.880
In our case, it would be better to use

28
0:01:48.880 --> 0:01:51.160
virtualized nodes just because we are talking

29
0:01:51.160 --> 0:01:54.280
about a virtualization solution.

30
0:01:54.280 --> 0:01:57.200
Then, we are going to have hosts there.

31
0:01:57.200 --> 0:02:00.880
But nowadays, based on Fedora, Kuberos,

32
0:02:00.880 --> 0:02:04.800
but then we are going to see that this is going to change.

33
0:02:04.800 --> 0:02:07.200
Then, we have all the Kubernetes stack.

34
0:02:07.200 --> 0:02:12.040
And you can use it to start your application.

35
0:02:12.040 --> 0:02:14.320
Now, what is kubectl?

36
0:02:14.320 --> 0:02:19.880
Kubernetl is a set of virtualization APIs

37
0:02:19.880 --> 0:02:21.200
for Kubernetes.

38
0:02:21.200 --> 0:02:23.600
So, you can extend the Kubernetes

39
0:02:23.600 --> 0:02:27.160
in order to be able to run virtual machines that

40
0:02:27.160 --> 0:02:31.840
are in containers on your Kubernetes infrastructure.

41
0:02:31.840 --> 0:02:35.560
At the end, it's still using the KVM hypervisor.

42
0:02:35.560 --> 0:02:39.000
It's able to schedule and manage virtual machines

43
0:02:39.000 --> 0:02:42.160
as if they are native Kubernetes objects.

44
0:02:46.600 --> 0:02:51.520
What is its main advantage is that it's cloud-native.

45
0:02:51.520 --> 0:02:56.160
It means that you can use all the Kubernetes stack.

46
0:02:56.160 --> 0:03:00.280
So, the container networking interface for the network,

47
0:03:00.280 --> 0:03:02.520
the container storage interface that you are already

48
0:03:02.520 --> 0:03:04.840
using a Kubernetes for the storage,

49
0:03:04.840 --> 0:03:07.840
it's based on customer source definition and customer

50
0:03:07.840 --> 0:03:12.440
source that are a way to extend Kubernetes with a new API.

51
0:03:12.440 --> 0:03:16.160
It can schedule virtual machine as a native Kubernetes object.

52
0:03:16.160 --> 0:03:21.040
Then, you can manage them to talk with what you already

53
0:03:21.040 --> 0:03:23.320
developed as a microservice.

54
0:03:23.320 --> 0:03:28.000
So, in an ideal world, you are going

55
0:03:28.000 --> 0:03:30.800
to rewrite your application from scratch,

56
0:03:30.800 --> 0:03:33.600
completely splitted into microservices.

57
0:03:33.600 --> 0:03:37.560
In the real world, probably you have a bit of legacy code

58
0:03:37.560 --> 0:03:41.040
or something that is already running in a virtual machine.

59
0:03:41.040 --> 0:03:43.000
When are you supposed to schedule it

60
0:03:43.000 --> 0:03:47.280
on an external hypervisor or on the same infrastructure

61
0:03:47.280 --> 0:03:51.920
that you're using for your microservices with the capability

62
0:03:51.920 --> 0:03:55.800
to have them talking natively to your virtual machines?

63
0:03:55.800 --> 0:04:00.320
Kubernetes is the response for this challenge.

64
0:04:00.320 --> 0:04:04.320
Now, how can you test it at home?

65
0:04:04.320 --> 0:04:06.800
You can easily try it with CSC.

66
0:04:06.800 --> 0:04:11.440
CSC is a really quick way to start playing, debugging,

67
0:04:11.440 --> 0:04:16.080
hacking on OpenShift in general.

68
0:04:16.080 --> 0:04:22.520
CSC is a microdistribution of OpenShift that runs in a virtual

69
0:04:22.520 --> 0:04:25.840
machine that can be executed on your laptop.

70
0:04:25.840 --> 0:04:30.360
It's absolutely not intended for production usage.

71
0:04:30.360 --> 0:04:33.880
It's going to be executed in a virtual machine.

72
0:04:33.880 --> 0:04:36.800
So, it's a single-node cluster.

73
0:04:36.800 --> 0:04:38.480
It's not going to scale out.

74
0:04:38.480 --> 0:04:40.280
It's not going to support upgrades.

75
0:04:40.280 --> 0:04:43.720
It's just a test platform.

76
0:04:43.720 --> 0:04:47.160
In order, here, just a few instructions

77
0:04:47.160 --> 0:04:49.320
if you want to try it at home.

78
0:04:49.320 --> 0:04:54.760
Since we are talking about virtualization product

79
0:04:54.760 --> 0:05:00.840
and you are running it in CSC, which is a virtual machine

80
0:05:00.840 --> 0:05:03.280
as well, you need to enable nested virtualization

81
0:05:03.280 --> 0:05:07.960
on your laptop in order to be able to start virtual machines

82
0:05:07.960 --> 0:05:11.960
inside the CSC one.

83
0:05:11.960 --> 0:05:14.560
Then you can tune the configuration.

84
0:05:14.560 --> 0:05:17.840
Normally, CSC comes with a real-time configuration.

85
0:05:17.840 --> 0:05:20.360
If I'm not wrong, it's about 9 gigs of RAM,

86
0:05:20.360 --> 0:05:22.840
which is not that small, but it's just enough

87
0:05:22.840 --> 0:05:25.640
to run the OKD by itself.

88
0:05:25.640 --> 0:05:28.400
If you want to think about playing with a couple

89
0:05:28.400 --> 0:05:30.400
of virtual machines and so on, it's

90
0:05:30.400 --> 0:05:34.480
better to extend the memory up to at least 20 gigs

91
0:05:34.480 --> 0:05:39.560
in order to be able to do something realistic.

92
0:05:39.560 --> 0:05:43.600
It's also nice that CSC already comes with a kubeviato

93
0:05:43.600 --> 0:05:49.040
host path provision, which is a way to dynamically provision

94
0:05:49.040 --> 0:05:51.600
persistent volumes for your virtual machines.

95
0:05:51.600 --> 0:05:54.600
Because as you can imagine, a pod is something

96
0:05:54.600 --> 0:05:56.240
a female while your virtual machine

97
0:05:56.240 --> 0:05:58.040
needs a persistent volume.

98
0:05:58.040 --> 0:06:01.560
You need a way to provide persistent volumes

99
0:06:01.560 --> 0:06:03.400
for your virtual machines.

100
0:06:03.400 --> 0:06:05.560
CSC is just a virtual machine where

101
0:06:05.560 --> 0:06:08.040
you can run other virtual machines inside,

102
0:06:08.040 --> 0:06:10.840
but you still need a mechanism to provide

103
0:06:10.840 --> 0:06:12.640
persistent volumes for that.

104
0:06:12.640 --> 0:06:15.360
It's already integrated in CSC, but you

105
0:06:15.360 --> 0:06:18.720
have to extend its disk in order to have a bit of space

106
0:06:18.720 --> 0:06:22.200
to create disks.

107
0:06:22.200 --> 0:06:25.560
At the end, you have just to execute a couple of commands,

108
0:06:25.560 --> 0:06:28.320
CSC setup and CSC start.

109
0:06:28.320 --> 0:06:31.280
After a few minutes, you are going

110
0:06:31.280 --> 0:06:35.720
to gain the access to your environment.

111
0:06:35.720 --> 0:06:39.000
You can connect, of course, you can do everything

112
0:06:39.000 --> 0:06:40.160
also from the command line.

113
0:06:40.160 --> 0:06:45.640
Probably much of you are going to prefer using the command

114
0:06:45.640 --> 0:06:48.840
line here using a touch of the screen shot

115
0:06:48.840 --> 0:06:52.480
to the presentation just because they are nicer.

116
0:06:52.480 --> 0:06:55.800
So you can connect to the user interface,

117
0:06:55.800 --> 0:07:00.920
to the admin user interface where you have the operator

118
0:07:00.920 --> 0:07:01.640
AB page.

119
0:07:01.640 --> 0:07:03.560
In the operator AB page, you are going

120
0:07:03.560 --> 0:07:05.840
to find already there because it's

121
0:07:05.840 --> 0:07:09.920
a distributed via the operator AB mechanism.

122
0:07:09.920 --> 0:07:11.960
You are going to find the cube of your type

123
0:07:11.960 --> 0:07:15.640
that converts the cluster operator.

124
0:07:15.640 --> 0:07:18.800
As I mentioned, you don't need to configure the storage.

125
0:07:18.800 --> 0:07:21.960
So you only support it to install the operator

126
0:07:21.960 --> 0:07:23.960
and create a CR to trigger the operator,

127
0:07:23.960 --> 0:07:27.720
but the storage is already pre-configured.

128
0:07:27.720 --> 0:07:31.000
After a while, you will be asked to create the first CR

129
0:07:31.000 --> 0:07:34.200
for the operator in order to configure it.

130
0:07:34.200 --> 0:07:36.400
Here, you can fine tune the configuration

131
0:07:36.400 --> 0:07:40.880
of OKD virtualization for your specific cluster.

132
0:07:40.880 --> 0:07:44.800
In particular, we have a stance called the feature gates

133
0:07:44.800 --> 0:07:49.120
where you can enable optional features.

134
0:07:49.120 --> 0:07:51.600
In the here, we are going to talk about two features.

135
0:07:51.600 --> 0:07:54.360
One of them is already enabled by default,

136
0:07:54.360 --> 0:07:58.880
which is enable common boot image input.

137
0:07:58.880 --> 0:08:03.480
And the other is deploy tech-tone task resources.

138
0:08:03.480 --> 0:08:05.760
This one is not enabled by default.

139
0:08:05.760 --> 0:08:09.360
But if you want to do a tome of what you are going to see now,

140
0:08:09.360 --> 0:08:11.680
you have to enable it.

141
0:08:11.680 --> 0:08:15.520
You can enable it also today, too.

142
0:08:15.520 --> 0:08:19.160
So after a few minutes, the operator is installed.

143
0:08:19.160 --> 0:08:23.760
It's going to also extend the UI with a new tab

144
0:08:23.760 --> 0:08:29.160
where you can see what you can do with your virtual machines.

145
0:08:29.160 --> 0:08:35.800
So now, let's start talking about one of the,

146
0:08:35.800 --> 0:08:38.120
in the last year, we introduced a lot of features.

147
0:08:38.120 --> 0:08:40.840
But today, I want to talk about two of them.

148
0:08:40.840 --> 0:08:43.280
The first one is golden images.

149
0:08:43.280 --> 0:08:43.760
Why?

150
0:08:43.760 --> 0:08:47.320
I think that it's interesting.

151
0:08:47.320 --> 0:08:51.960
Nowadays, if you think to any public round environment

152
0:08:51.960 --> 0:08:56.520
on a public hyperscaler, you are going to find,

153
0:08:56.520 --> 0:08:58.080
it's really used to use them.

154
0:08:58.080 --> 0:08:58.560
Why?

155
0:08:58.560 --> 0:09:02.880
Because you can find their images

156
0:09:02.880 --> 0:09:05.160
for your third operative system.

157
0:09:05.160 --> 0:09:06.680
So they are enabled.

158
0:09:06.680 --> 0:09:09.320
You have just to select one of them, click.

159
0:09:09.320 --> 0:09:10.800
And in a matter of minutes, you are

160
0:09:10.800 --> 0:09:14.080
going to get a virtual machine that it's running.

161
0:09:14.080 --> 0:09:15.920
You don't need to upload your disk.

162
0:09:15.920 --> 0:09:18.880
You don't need to upload eventually an easel.

163
0:09:18.880 --> 0:09:20.960
Start defining virtual machine and so on.

164
0:09:20.960 --> 0:09:22.920
They are really convenient.

165
0:09:22.920 --> 0:09:30.080
We want to have the same experience also in CubeVirt.

166
0:09:30.080 --> 0:09:33.920
So we introduced this feature.

167
0:09:33.920 --> 0:09:36.760
The whole idea is that we are going to have,

168
0:09:36.760 --> 0:09:41.160
or we, sorry, we already have a container registry, which

169
0:09:41.160 --> 0:09:47.600
contains some images with the disk image for virtual machines

170
0:09:47.600 --> 0:09:51.440
that are going to be periodically refreshed

171
0:09:51.440 --> 0:09:55.400
to include a new feature of their operative systems

172
0:09:55.400 --> 0:09:58.160
or security fixes.

173
0:09:58.160 --> 0:10:01.720
Then we have this new object called the data import

174
0:10:01.720 --> 0:10:06.200
persona, which is going to say that you want to periodically

175
0:10:06.200 --> 0:10:11.200
pull an image from that container registry

176
0:10:11.200 --> 0:10:15.600
with a schedule and import it in your cluster.

177
0:10:15.600 --> 0:10:18.680
There is some mechanism in order to configure

178
0:10:18.680 --> 0:10:23.680
the gathered collecting, the attention policy.

179
0:10:23.680 --> 0:10:26.520
But at the end, the idea is that you

180
0:10:26.520 --> 0:10:31.760
are going to find images for popular operative systems

181
0:10:31.760 --> 0:10:35.600
out of the box already available in your cluster.

182
0:10:35.600 --> 0:10:38.080
And they are going to be refreshed over the time.

183
0:10:38.080 --> 0:10:42.400
So each time you, now let's see.

184
0:10:42.400 --> 0:10:46.720
This is the catalog in order to create virtual machines

185
0:10:46.720 --> 0:10:49.840
in the user interface of OKD virtualization.

186
0:10:49.840 --> 0:10:52.080
We have a catalog with objects.

187
0:10:52.080 --> 0:10:54.520
The whole feature is here.

188
0:10:54.520 --> 0:10:57.880
As you can see, for popular operative systems,

189
0:10:57.880 --> 0:11:02.760
we already have a nice label saying that the source is

190
0:11:02.760 --> 0:11:04.120
already available.

191
0:11:04.120 --> 0:11:08.520
It means that this new feature automatically imported

192
0:11:08.520 --> 0:11:12.080
for you a golden image of that operative system.

193
0:11:12.080 --> 0:11:17.440
And it's going to continuously keep it up to date.

194
0:11:17.440 --> 0:11:21.160
The benefit is that when you want to start a virtual machine,

195
0:11:21.160 --> 0:11:23.880
you will be able to do it with a single click.

196
0:11:23.880 --> 0:11:25.440
You can customize the name.

197
0:11:25.440 --> 0:11:28.560
You can say in which namespace it's going to be executed.

198
0:11:28.560 --> 0:11:30.160
But everything is already ready.

199
0:11:30.160 --> 0:11:34.120
With one click, you are going to start your virtual machine.

200
0:11:34.120 --> 0:11:37.000
What is going to happen on the storage side?

201
0:11:37.000 --> 0:11:42.160
We see that we have some existing persistent volume claims

202
0:11:42.160 --> 0:11:45.000
for the disk that got automatically imported.

203
0:11:45.000 --> 0:11:47.160
One of them is going to be cloned

204
0:11:47.160 --> 0:11:49.720
to be your virtual machine.

205
0:11:49.720 --> 0:11:51.960
Depending on the CSI implementation,

206
0:11:51.960 --> 0:11:56.280
this can be even completely flow added to the CSI provider.

207
0:11:56.280 --> 0:11:58.880
It can be really fast.

208
0:11:58.880 --> 0:12:02.320
After a few minutes, your virtual machine is there.

209
0:12:02.320 --> 0:12:06.520
And as you can see, through CloudInit or SysPipe

210
0:12:06.520 --> 0:12:08.800
or whatever, it can be also customized

211
0:12:08.800 --> 0:12:10.520
to use a custom name and so on.

212
0:12:15.000 --> 0:12:18.280
So our data import kernel looks like.

213
0:12:21.560 --> 0:12:25.120
We are saying that we want to have a data source named

214
0:12:25.120 --> 0:12:28.920
Fedora with a schedule with the usual context.

215
0:12:28.920 --> 0:12:30.960
We want to periodically consume images

216
0:12:30.960 --> 0:12:35.160
that are available on Quay, which is a Docker register.

217
0:12:35.160 --> 0:12:37.840
Here, you can see the status and the image is up to date,

218
0:12:37.840 --> 0:12:42.200
meaning that the most fresh version of Fedora

219
0:12:42.200 --> 0:12:45.640
got automatically imported in your cluster.

220
0:12:45.640 --> 0:12:47.920
The important thing is that if you look here,

221
0:12:47.920 --> 0:12:52.200
you see that Fedora, the tag for the Fedora image, is the latest.

222
0:12:52.200 --> 0:12:54.760
It means then when the next release of Fedora

223
0:12:54.760 --> 0:12:57.400
is going to come out, it's going to be automatically

224
0:12:57.400 --> 0:13:01.120
available in your cluster.

225
0:13:01.120 --> 0:13:05.480
Of course, we are providing images for Fedora for centers,

226
0:13:05.480 --> 0:13:07.840
but you can use the same mechanism

227
0:13:07.840 --> 0:13:11.440
and the same infrastructure to import on your cluster

228
0:13:11.440 --> 0:13:14.480
your own images.

229
0:13:14.480 --> 0:13:18.520
You can create custom data source, sorry,

230
0:13:18.520 --> 0:13:22.320
custom data import kernels.

231
0:13:22.320 --> 0:13:26.520
Now I want to talk about an additional really nice feature,

232
0:13:26.520 --> 0:13:30.600
which is Kubernetes Effect on task pipelines.

233
0:13:30.600 --> 0:13:32.520
In the previous section, we see that we

234
0:13:32.520 --> 0:13:37.800
are able to import images for popular operative system,

235
0:13:37.800 --> 0:13:41.040
but maybe there is some other operative system

236
0:13:41.040 --> 0:13:43.840
that requires to create a virtual machine starting

237
0:13:43.840 --> 0:13:47.160
a terminizer and installing it.

238
0:13:47.160 --> 0:13:50.640
So how can we automate it?

239
0:13:50.640 --> 0:13:54.240
We cannot expect that the provider of all the operative

240
0:13:54.240 --> 0:13:57.240
systems in the world are going to use this mechanism

241
0:13:57.240 --> 0:13:58.960
and publish images for us.

242
0:13:58.960 --> 0:14:01.200
We need a way to be able to automate

243
0:14:01.200 --> 0:14:06.640
the creation of the images for other operative systems.

244
0:14:06.640 --> 0:14:09.720
In this case, we are going to use a Tekton pipeline

245
0:14:09.720 --> 0:14:12.000
to automate this.

246
0:14:12.000 --> 0:14:14.600
What Tekton is?

247
0:14:14.600 --> 0:14:19.360
Tekton, also known as OpenShift pipelines,

248
0:14:19.360 --> 0:14:24.280
is a cloud-native continuous integration, continuous

249
0:14:24.280 --> 0:14:27.000
delivery solution.

250
0:14:27.000 --> 0:14:29.240
It's also cloud-native, and it's fully

251
0:14:29.240 --> 0:14:32.240
based on Kubernetes resources.

252
0:14:32.240 --> 0:14:35.840
It uses what are called Tekton blocks

253
0:14:35.840 --> 0:14:40.600
to automate tasks, a structuring the infrastructures.

254
0:14:40.600 --> 0:14:45.280
In the Tekton world, we have tasks.

255
0:14:45.280 --> 0:14:48.840
A task is something that defines a set of a build step,

256
0:14:48.840 --> 0:14:51.440
like compiling a code, and tests,

257
0:14:51.440 --> 0:14:52.960
or building and deploying images.

258
0:14:52.960 --> 0:14:56.600
In our case, we are now interested in deploying

259
0:14:56.600 --> 0:14:58.400
images, but as you can imagine, you

260
0:14:58.400 --> 0:15:01.200
can combine it with other tasks.

261
0:15:01.200 --> 0:15:02.880
Then you can define a pipeline.

262
0:15:02.880 --> 0:15:07.120
A pipeline is a set of orchestrated tasks.

263
0:15:07.120 --> 0:15:09.880
And then you can use a pipeline source, which

264
0:15:09.880 --> 0:15:11.680
is a set of inputs that are going

265
0:15:11.680 --> 0:15:15.760
to be injected into the execution of your pipeline, which

266
0:15:15.760 --> 0:15:17.240
is a pipeline run.

267
0:15:20.040 --> 0:15:23.560
On kubewitt Tekton Task Operator,

268
0:15:23.560 --> 0:15:28.200
we introduced some specific tasks

269
0:15:28.200 --> 0:15:33.000
to create, update, and manage the specific kubewitt

270
0:15:33.000 --> 0:15:36.640
sources, so virtual machines, data volumes, data sources,

271
0:15:36.640 --> 0:15:38.160
templates, and so on.

272
0:15:38.160 --> 0:15:40.320
You are able to populate these images,

273
0:15:40.320 --> 0:15:44.280
even with the libgestfs to inject files, and so on.

274
0:15:44.280 --> 0:15:49.040
You are able to execute scripts, bash, or PowerShell,

275
0:15:49.040 --> 0:15:51.720
and whatever.

276
0:15:51.720 --> 0:15:54.200
We have a set of tasks I don't want to give you,

277
0:15:54.200 --> 0:15:57.440
but some are already available.

278
0:15:57.440 --> 0:15:59.480
We are extending one.

279
0:15:59.480 --> 0:16:02.120
And we have an operator that is going

280
0:16:02.120 --> 0:16:05.840
to populate the task for you on the end of your cluster.

281
0:16:05.840 --> 0:16:09.520
Now we want to see an example pipeline.

282
0:16:09.520 --> 0:16:12.000
This pipeline is going to, we have

283
0:16:12.000 --> 0:16:14.880
two pipelines that are going to be injected by the Tekton Task

284
0:16:14.880 --> 0:16:15.440
Operator.

285
0:16:15.440 --> 0:16:18.560
The first one is called the Windows 10 installer.

286
0:16:18.560 --> 0:16:23.040
It's going to populate a golden image for Windows 10

287
0:16:23.040 --> 0:16:26.280
according to some input that you are going to provide.

288
0:16:26.280 --> 0:16:29.520
The idea is that it's going to copy a template.

289
0:16:29.520 --> 0:16:31.600
It's going to modify a template.

290
0:16:31.600 --> 0:16:37.640
And it's going to start installing Windows from the ISO.

291
0:16:37.640 --> 0:16:41.280
And it's going to create a virtual machine for you.

292
0:16:41.280 --> 0:17:00.080
We can see a small demo.

293
0:17:00.080 --> 0:17:02.760
So here is the pipeline.

294
0:17:02.760 --> 0:17:06.120
We have to provide a few inputs in particular.

295
0:17:06.120 --> 0:17:08.720
We have to provide the ease of the Windows

296
0:17:08.720 --> 0:17:15.720
that we want to install.

297
0:17:15.720 --> 0:17:18.240
And it's the first, yes, there, perfect.

298
0:17:22.680 --> 0:17:24.440
Here we see the pipeline.

299
0:17:24.440 --> 0:17:26.400
The pipeline is going to copy the template.

300
0:17:26.400 --> 0:17:27.880
It's going to modify it.

301
0:17:27.880 --> 0:17:29.720
It's going to create a first VM that

302
0:17:29.720 --> 0:17:32.120
is used in order to install Windows

303
0:17:32.120 --> 0:17:43.520
and then create the Windows image from that VM.

304
0:17:43.520 --> 0:17:46.960
Here is a, now we are simply going to see what is happening.

305
0:17:46.960 --> 0:17:48.440
But everything is fully automated.

306
0:17:48.440 --> 0:17:50.640
You don't really have to watch it.

307
0:17:50.640 --> 0:17:55.120
But if you like, you can also see it live.

308
0:17:55.120 --> 0:17:56.560
Here it's our virtual machine.

309
0:17:56.560 --> 0:17:59.280
And as you can see, it's starting, it's booting.

310
0:17:59.280 --> 0:18:04.080
And it's going to install Windows.

311
0:18:04.080 --> 0:18:07.520
We have also a second pipeline.

312
0:18:07.520 --> 0:18:09.320
I have a demo for that.

313
0:18:09.320 --> 0:18:11.040
It's called Windows Customize.

314
0:18:11.040 --> 0:18:14.000
Probably we are a bit already over time.

315
0:18:14.000 --> 0:18:16.080
The idea of the second pipeline is

316
0:18:16.080 --> 0:18:20.400
that you can customize the image,

317
0:18:20.400 --> 0:18:25.000
running additional steps like installing the software

318
0:18:25.000 --> 0:18:28.040
that you need, modifying the image that it's

319
0:18:28.040 --> 0:18:30.160
going to be one of the golden images

320
0:18:30.160 --> 0:18:31.960
that you are going to provide in your cluster.

321
0:18:31.960 --> 0:18:45.960
So let's move back.

322
0:19:01.960 --> 0:19:05.120
This is the second one.

323
0:19:05.120 --> 0:19:06.320
I'm going to skip the demo.

324
0:19:06.320 --> 0:19:09.720
But if you have any questions, please reach me.

325
0:19:09.720 --> 0:19:14.360
The idea is that we can use this pipeline in this case

326
0:19:14.360 --> 0:19:16.800
to install SQL Server and so on.

327
0:19:20.720 --> 0:19:23.720
What's next?

328
0:19:23.720 --> 0:19:27.000
OKD is going to change.

329
0:19:27.000 --> 0:19:31.320
Now in the beginning, I told you that now it's OKD.

330
0:19:31.320 --> 0:19:34.800
It's based on Fedora CoreOS.

331
0:19:34.800 --> 0:19:37.400
We are going to have a big change there, which

332
0:19:37.400 --> 0:19:41.240
is called OKD centralized streams, which

333
0:19:41.240 --> 0:19:43.440
means that the nodes of OKD are going

334
0:19:43.440 --> 0:19:45.600
to be based on center stream.

335
0:19:45.600 --> 0:19:51.640
And so it's going to be a really upstream for OpenShift Container

336
0:19:51.640 --> 0:19:57.680
Platform, where the nodes are based on Redat CoreOS.

337
0:19:57.680 --> 0:20:01.560
Center stream is the upstream of Redat CoreOS.

338
0:20:01.560 --> 0:20:04.080
Everything on center stream is going

339
0:20:04.080 --> 0:20:07.760
to be built as well using Tekton pipelines,

340
0:20:07.760 --> 0:20:11.160
just because we really believe in that project.

341
0:20:11.160 --> 0:20:12.840
On OKD visualization side, we are

342
0:20:12.840 --> 0:20:15.200
going to introduce many features.

343
0:20:15.200 --> 0:20:18.680
We are going to add more pipelines, more automation.

344
0:20:18.680 --> 0:20:20.520
We are working on our support.

345
0:20:20.520 --> 0:20:23.640
We are working on better the capacity APIs.

346
0:20:23.640 --> 0:20:28.800
We are working to reduce the privileges of the parts

347
0:20:28.800 --> 0:20:31.080
that really execute the virtual machines.

348
0:20:31.080 --> 0:20:33.480
We are working on the real-time area.

349
0:20:36.160 --> 0:20:41.160
And here, a few links if you want to reach us.

350
0:20:41.160 --> 0:20:42.160
Thank you.

351
0:20:42.160 --> 0:20:54.120
Thank you.

352
0:20:54.120 --> 0:20:57.960
There's already OpenStack and Kata containers.

353
0:20:57.960 --> 0:21:04.080
And I wonder how does OKD compares or integrates

354
0:21:04.080 --> 0:21:09.160
or overlaps with these two projects?

355
0:21:09.160 --> 0:21:13.560
So the question is, we already have other projects

356
0:21:13.560 --> 0:21:15.960
like OpenStack, Kata containers.

357
0:21:15.960 --> 0:21:20.840
I want to understand how kube-vert compares to them.

358
0:21:20.840 --> 0:21:24.480
So the first idea is that in kube-vert,

359
0:21:24.480 --> 0:21:30.920
we are managing virtual machines as first-class citizens

360
0:21:30.920 --> 0:21:33.840
on Kubernetes.

361
0:21:33.840 --> 0:21:39.480
You can define a virtual machine with a customer source

362
0:21:39.480 --> 0:21:41.920
because Kubernetes provide a mechanism called

363
0:21:41.920 --> 0:21:44.680
the customer source definition to provide

364
0:21:44.680 --> 0:21:46.560
customer new APIs.

365
0:21:46.560 --> 0:21:48.840
You can use them to define a virtual machine

366
0:21:48.840 --> 0:21:50.560
as a really native object that is

367
0:21:50.560 --> 0:21:53.960
going to be scheduled by the Kubernetes orchestral

368
0:21:53.960 --> 0:21:56.520
alongside the ports and other sources.

369
0:21:56.520 --> 0:21:59.920
The main benefit is that you can expose,

370
0:21:59.920 --> 0:22:03.040
you can use the same storage that you are using for your ports.

371
0:22:03.040 --> 0:22:07.680
You can have your ports talking at a network level

372
0:22:07.680 --> 0:22:09.560
with the virtual machine, natively,

373
0:22:09.560 --> 0:22:12.280
without the need to configure TANs and so on,

374
0:22:12.280 --> 0:22:16.360
because virtual machines are running on the lower stack,

375
0:22:16.360 --> 0:22:20.320
like if you have OpenStack and Kubernetes.

376
0:22:20.320 --> 0:22:22.920
The virtual machine is going to be a first-class citizen

377
0:22:22.920 --> 0:22:26.120
of this infrastructure.

378
0:22:26.120 --> 0:22:29.360
So you think it breaks with OpenStack?

379
0:22:29.360 --> 0:22:31.880
So not really integrated.

380
0:22:31.880 --> 0:22:43.840
If we go here, OK.

381
0:22:43.840 --> 0:22:48.160
Here the idea is that we have something here, which

382
0:22:48.160 --> 0:22:50.760
in our case probably is going to be the metanodes,

383
0:22:50.760 --> 0:22:52.720
but it can be also another hyperscaler.

384
0:22:52.720 --> 0:22:54.920
But in that case, you need nested virtualization,

385
0:22:54.920 --> 0:22:58.000
which is not always the best idea.

386
0:22:58.000 --> 0:23:01.160
Then you have Linux host nodes.

387
0:23:01.160 --> 0:23:03.600
Now we've federated the device, but in the future,

388
0:23:03.600 --> 0:23:04.920
we've sent those streams.

389
0:23:04.920 --> 0:23:07.720
And here you have the Kubernetes stack.

390
0:23:07.720 --> 0:23:11.600
Kubernetes is going to schedule ports as containers

391
0:23:11.600 --> 0:23:15.240
on those nodes and virtual machines there.

392
0:23:15.240 --> 0:23:22.520
So you don't really care of what you have on the last level.

393
0:23:22.520 --> 0:23:26.080
Yeah, you showed how to install Windows and prepare

394
0:23:26.080 --> 0:23:28.080
image decisions from pipelines.

395
0:23:28.080 --> 0:23:30.400
Isn't it easier to use simple doctor file

396
0:23:30.400 --> 0:23:33.280
and if it's possible to use just a doctor file?

397
0:23:33.280 --> 0:23:36.200
Enjoy that on the way that children understand

398
0:23:36.200 --> 0:23:38.440
their own decisions.

399
0:23:38.440 --> 0:23:41.520
OK, so he asked the question, is you

400
0:23:41.520 --> 0:23:44.440
showed how to use a pipeline in order

401
0:23:44.440 --> 0:23:47.880
to prepare an image for Windows?

402
0:23:47.880 --> 0:23:51.400
Isn't it simpler to direct the user doctor file

403
0:23:51.400 --> 0:23:53.040
to create a container?

404
0:23:53.040 --> 0:23:54.640
So in theory, it is.

405
0:23:54.640 --> 0:23:58.280
But you have to start from another running virtual machine

406
0:23:58.280 --> 0:24:02.520
and take the disk because Microsoft is providing

407
0:24:02.520 --> 0:24:07.520
an ISO with a tool that you have to execute.

408
0:24:07.520 --> 0:24:11.040
But you can use the same built-in test and guess

409
0:24:11.040 --> 0:24:15.040
which tools to install Windows inside the doctor file.

410
0:24:15.040 --> 0:24:16.400
But you have to execute it.

411
0:24:16.400 --> 0:24:19.040
I mean, you have to execute the binary of the installer.

412
0:24:19.040 --> 0:24:24.880
So you have to, at the end, you are manually running something

413
0:24:24.880 --> 0:24:27.360
that it's going to install Windows.

414
0:24:27.360 --> 0:24:30.360
And at the end, you need to take a snapshot, which

415
0:24:30.360 --> 0:24:33.400
is going to be your image.

416
0:24:33.400 --> 0:24:34.600
You want to automate it.

417
0:24:34.600 --> 0:24:37.320
You want to continuously execute it

418
0:24:37.320 --> 0:24:40.760
in order to fetch up data.

419
0:24:40.760 --> 0:24:43.760
How we solved this, we automated it with a pipeline

420
0:24:43.760 --> 0:24:45.240
because we have a set of tasks.

421
0:24:45.240 --> 0:24:49.760
And so the pipeline is the most smart way

422
0:24:49.760 --> 0:24:58.760
to execute and monitor them.

423
0:24:58.760 --> 0:24:59.760
Sure.

424
0:24:59.760 --> 0:25:00.640
Last one.

425
0:25:00.640 --> 0:25:06.640
Which format are the golden image disks using?

426
0:25:06.640 --> 0:25:13.720
Which format are the user for the operative system disks?

427
0:25:13.720 --> 0:25:15.960
No.

428
0:25:15.960 --> 0:25:21.440
Oh, do we support other format?

429
0:25:21.440 --> 0:25:23.400
So just a little.

430
0:25:23.400 --> 0:25:23.920
Thank you.

431
0:25:27.000 --> 0:25:27.560
Time is up.

432
0:25:27.560 --> 0:25:29.560
But if you want, please reach me outside.

433
0:25:29.560 --> 0:25:46.000
Thank you.


1
0:00:00.000 --> 0:00:01.000
Welcome.

2
0:00:01.000 --> 0:00:02.000
Welcome everyone.

3
0:00:02.000 --> 0:00:13.760
We are going to talk about first the schematics checksums.

4
0:00:13.760 --> 0:00:24.320
So, who am I?

5
0:00:24.320 --> 0:00:29.240
I'm a long-time contributor to this of the projects.

6
0:00:29.240 --> 0:00:33.760
And I worked for way that more than nine years on obvious storage.

7
0:00:33.760 --> 0:00:39.260
Who knows obvious?

8
0:00:39.260 --> 0:00:44.320
And I focused on incremental backup, image transfer and anybody tools.

9
0:00:44.320 --> 0:00:46.720
And this project is continuous.

10
0:00:46.720 --> 0:00:52.840
They work on first the checksum in obvious that is available for all.

11
0:00:52.840 --> 0:00:57.960
So we're going to talk about why do we need this schematics checksums and why we cannot

12
0:00:57.960 --> 0:01:01.480
use the standard tools for these schematics.

13
0:01:01.480 --> 0:01:06.800
And we'll introduce the blocksum command which is optimized for these schematics.

14
0:01:06.800 --> 0:01:11.400
And the blockash library which is used by the blocksum command.

15
0:01:11.400 --> 0:01:14.540
And you can also use it in your program.

16
0:01:14.540 --> 0:01:20.400
And a good example of this usage is the new checksum command in QEMO image which is work

17
0:01:20.400 --> 0:01:23.960
in progress using the blockash library.

18
0:01:23.960 --> 0:01:28.280
And we see a live demo, we'll play with the tools.

19
0:01:28.280 --> 0:01:33.920
And finally the most important stuff you can contribute to this project.

20
0:01:33.920 --> 0:01:36.560
So what is the issue with disk images?

21
0:01:36.560 --> 0:01:41.000
Why the additional standard images?

22
0:01:41.000 --> 0:01:46.760
Let's say we want to upload a disk to, we have disk cube up to image.

23
0:01:46.760 --> 0:01:51.640
Usually it's compressed because it's the best format to publish images.

24
0:01:51.640 --> 0:01:55.400
We want to upload it to OVILT or maybe to OKD.

25
0:01:55.400 --> 0:01:57.280
Maybe Simon want to upload it to OKD.

26
0:01:57.280 --> 0:02:04.040
So what we have to do is get the data from the disk image.

27
0:02:04.040 --> 0:02:07.920
And we need to upload it to some server on the virtualization system.

28
0:02:07.920 --> 0:02:11.720
And this server will write in some disk.

29
0:02:11.720 --> 0:02:14.680
Now the disk can be many things.

30
0:02:14.680 --> 0:02:23.560
It can be just an if a server with, we'll have a file similar to the file we uploaded,

31
0:02:23.560 --> 0:02:24.640
but not the same.

32
0:02:24.640 --> 0:02:28.320
It can be all sparse image.

33
0:02:28.320 --> 0:02:29.880
It will not be compressed.

34
0:02:29.880 --> 0:02:32.560
While we have Q2 compressed image.

35
0:02:32.560 --> 0:02:36.080
Or it can be a small block device.

36
0:02:36.080 --> 0:02:39.080
If it's OVILT, it can be a small block device.

37
0:02:39.080 --> 0:02:44.600
Just large enough to fit the guess data that we uploaded.

38
0:02:44.600 --> 0:02:44.600
Some is C

39
0:02:46.600 --> 0:02:47.600
server.

40
0:02:47.600 --> 0:02:58.680
Or it can be a safe image stored in many nodes in a cluster in many disks.

41
0:02:58.680 --> 0:03:01.520
So we have very different shapes on the two sides.

42
0:03:01.520 --> 0:03:07.720
Like disk image on one side, something completely different on the other side, different formats,

43
0:03:07.720 --> 0:03:11.520
different way of storage.

44
0:03:11.520 --> 0:03:13.280
One thing must be the same.

45
0:03:13.280 --> 0:03:14.760
The bits must be the same.

46
0:03:14.760 --> 0:03:15.960
The guess data must be the same.

47
0:03:15.960 --> 0:03:20.360
So if we start the guess with the disk image or with the virtual disk, we must get the

48
0:03:20.360 --> 0:03:22.000
same bits.

49
0:03:22.000 --> 0:03:27.880
So we can verify this operation by creating the checksum of the disk image.

50
0:03:27.880 --> 0:03:30.760
The guess data inside the disk image.

51
0:03:30.760 --> 0:03:32.440
And the guess data inside the virtual disk.

52
0:03:32.440 --> 0:03:35.040
Whatever the format and shape.

53
0:03:35.040 --> 0:03:39.120
And the checksum must be the same.

54
0:03:39.120 --> 0:03:43.840
The nonic image is mostly the same problem.

55
0:03:43.840 --> 0:03:48.680
We have some shape of disk on the other side, some shape of disk on the other side, different

56
0:03:48.680 --> 0:03:49.680
formats.

57
0:03:49.680 --> 0:03:51.520
But the guess data must be the same.

58
0:03:51.520 --> 0:03:55.520
And the checksum must be the same.

59
0:03:55.520 --> 0:03:58.040
Another interesting problem is intermetal backup.

60
0:03:58.040 --> 0:04:04.440
In this case, the backup system will copy only changed blocks on each backup if it wants

61
0:04:04.440 --> 0:04:06.040
to be efficient.

62
0:04:06.040 --> 0:04:12.640
So let's say two days ago we did a full backup and we stored it on this full Q2.

63
0:04:12.640 --> 0:04:15.400
This is just one way that we can store backups.

64
0:04:15.400 --> 0:04:17.640
It can be many other things.

65
0:04:17.640 --> 0:04:23.000
And yesterday we did another backup and we stored it in one file which is sitting on

66
0:04:23.000 --> 0:04:25.680
top of the full Q2.

67
0:04:25.680 --> 0:04:28.320
And this is the backing file.

68
0:04:28.320 --> 0:04:29.720
So we created a chain.

69
0:04:29.720 --> 0:04:31.120
And today we did another backup.

70
0:04:31.120 --> 0:04:33.800
We copied more data from the virtual disk.

71
0:04:33.800 --> 0:04:36.520
We created another layer.

72
0:04:36.520 --> 0:04:41.920
So also in this case, the guess data inside the virtual disk must be the same as the guess

73
0:04:41.920 --> 0:04:43.880
data inside this entire chain.

74
0:04:43.880 --> 0:04:50.200
So if we know how to read the guess data from the entire chain like a guess does, we can

75
0:04:50.200 --> 0:04:53.120
create a checksum and we can compare it to the checksum with the virtual disk at the

76
0:04:53.120 --> 0:04:54.760
time of the backup.

77
0:04:54.760 --> 0:04:56.920
And we know if our backup is correct.

78
0:04:56.920 --> 0:05:04.920
So if we will restore this chain to another virtual disk, we'll get the same data.

79
0:05:04.920 --> 0:05:06.480
So what is the issue with the standard tools?

80
0:05:06.480 --> 0:05:14.760
Can we use Shasom to create checksum of this chain?

81
0:05:14.760 --> 0:05:16.800
So first we have the issue of image format.

82
0:05:16.800 --> 0:05:18.720
Standard tools do not understand image format.

83
0:05:18.720 --> 0:05:22.040
So if we have the whole image, everything is fine.

84
0:05:22.040 --> 0:05:28.560
But if we have Q-cap to image, which is identical, and here I compare the image of system QM which

85
0:05:28.560 --> 0:05:35.080
compare, which access the guess data and compare it bit by bit.

86
0:05:35.080 --> 0:05:41.760
So the images are identical, but we get this in checksum from Shasom.

87
0:05:41.760 --> 0:05:46.200
Image compression, even with the same format, both images are Q-calm.

88
0:05:46.200 --> 0:05:49.680
But one of them compressed, we'll get this in checksum.

89
0:05:49.680 --> 0:05:55.600
Because the host clusters are compressed and Shasom is looking at the host data, not at

90
0:05:55.600 --> 0:05:59.040
the guess data.

91
0:05:59.040 --> 0:06:02.960
Even if we have the same image format without compression, everything is the same, right?

92
0:06:02.960 --> 0:06:08.880
I just converted one image to the other image.

93
0:06:08.880 --> 0:06:12.280
Images are identical, but we get this in checksum.

94
0:06:12.280 --> 0:06:13.280
Why?

95
0:06:13.280 --> 0:06:18.280
I used the dash W flag and this allows on all the rights.

96
0:06:18.280 --> 0:06:21.720
So the order of the cluster on the host can be different.

97
0:06:21.720 --> 0:06:26.280
The guess data is the same.

98
0:06:26.280 --> 0:06:28.200
Finally the issue of spouseness.

99
0:06:28.200 --> 0:06:29.720
Standard tools do not understand spouseness.

100
0:06:29.720 --> 0:06:36.920
So here we have six gigabyte image, but only little more than one gigabyte of data.

101
0:06:36.920 --> 0:06:40.160
But Shasom must read the entire image.

102
0:06:40.160 --> 0:06:47.440
So it will read this much of the data, complete the hash from this one gigabyte, and then read

103
0:06:47.440 --> 0:06:49.720
almost five gigabyte of zeros.

104
0:06:49.720 --> 0:06:53.380
Because anything which is not allocated is read as zeros.

105
0:06:53.380 --> 0:06:58.400
So it must do a lot of work, which is pretty slow.

106
0:06:58.400 --> 0:07:04.280
For example, if we take a bigger image, here I created the 100 gigabyte image.

107
0:07:04.280 --> 0:07:05.840
But there is no data in this image.

108
0:07:05.840 --> 0:07:07.480
It's completely empty.

109
0:07:07.480 --> 0:07:09.200
Just a big one.

110
0:07:09.200 --> 0:07:13.440
And computing checksum took more than three minutes.

111
0:07:13.440 --> 0:07:18.000
So do we really want to use this for one terabyte image?

112
0:07:18.000 --> 0:07:23.720
It's not the best tool for this job.

113
0:07:23.720 --> 0:07:29.400
And let's introduce the bloxom command, which is optimized for this case.

114
0:07:29.400 --> 0:07:31.560
So first it looks just like the standard tools.

115
0:07:31.560 --> 0:07:35.680
If you want to use the standard tools, you know how to use it.

116
0:07:35.680 --> 0:07:39.200
Just run it and you get the checksum.

117
0:07:39.200 --> 0:07:40.680
It understands the image format.

118
0:07:40.680 --> 0:07:44.280
So if you use identical image, you will get the same checksum.

119
0:07:44.280 --> 0:07:46.400
Although the images are different.

120
0:07:46.400 --> 0:07:47.400
The size is different.

121
0:07:47.400 --> 0:07:51.680
They do not look the same on the host.

122
0:07:51.680 --> 0:07:56.640
Of course, it supports compressed Q-Cal because it reads the Q-Cal to image, which the compressor

123
0:07:56.640 --> 0:07:59.080
data and it gets the actual guess data.

124
0:07:59.080 --> 0:08:03.520
So we get the same checksum.

125
0:08:03.520 --> 0:08:04.800
And it also supports snapshot.

126
0:08:04.800 --> 0:08:09.480
So if I create a snapshot, here I created either the snapshot, this snapshot Q-Cal, on

127
0:08:09.480 --> 0:08:11.480
top of the SADOAS-LT5 image.

128
0:08:11.480 --> 0:08:16.640
SADOAS-LT5 is the backing file of your snapshot.

129
0:08:16.640 --> 0:08:22.640
And if I compute the checksum of the snapshot, I actually compute the snapshot against it.

130
0:08:22.640 --> 0:08:25.080
I installed it in a time chain.

131
0:08:25.080 --> 0:08:31.840
Note of the tiny snapshot file, which has no data yet.

132
0:08:31.840 --> 0:08:32.840
And we also support NBD-ORL.

133
0:08:32.840 --> 0:08:40.000
For example, if I start NBD server, this QM-NBD is NBD server.

134
0:08:40.000 --> 0:08:47.680
Here I started exposing this Q-Cal 2 file using this NBD-ORL.

135
0:08:47.680 --> 0:08:52.080
And if you compute a checksum with the ORL, the access to NBD will get the guess data

136
0:08:52.080 --> 0:08:54.120
and compute the checksum.

137
0:08:54.120 --> 0:08:59.160
And actually, this is the way we always access images.

138
0:08:59.160 --> 0:09:04.840
Here we always run QM-NBD and use NBD-ORL internally to access images.

139
0:09:04.840 --> 0:09:08.440
This is the reason it works.

140
0:09:08.440 --> 0:09:13.720
We also support reading for pipe, like the standard tools.

141
0:09:13.720 --> 0:09:18.120
But in this case, we cannot support any format, just raw format.

142
0:09:18.120 --> 0:09:21.560
And this is less efficient because we must read the entire image.

143
0:09:21.560 --> 0:09:25.040
In other cases, we can read only the data.

144
0:09:25.040 --> 0:09:28.200
But it works.

145
0:09:28.200 --> 0:09:35.560
So it's not enough to get tools to get correct snapshot checksums.

146
0:09:35.560 --> 0:09:41.080
You want it to be much faster than the standard tools because we are dealing with huge images,

147
0:09:41.080 --> 0:09:42.080
which are usually empty.

148
0:09:42.080 --> 0:09:45.440
Usually, when you start to use an image, it's completely empty.

149
0:09:45.440 --> 0:09:50.400
Then you install an operating system, add some files.

150
0:09:50.400 --> 0:09:52.600
Everything starts really empty.

151
0:09:52.600 --> 0:09:54.640
And then goes.

152
0:09:54.640 --> 0:10:01.760
So here we tested this 6 gigabyte image with about 1 gigabit of data.

153
0:10:01.760 --> 0:10:08.560
And in this case, blocks was about 16 times faster.

154
0:10:08.560 --> 0:10:12.880
And another example, can we compute the checksum for 8 terabyte image?

155
0:10:12.880 --> 0:10:14.480
Is it practical?

156
0:10:14.480 --> 0:10:15.880
It is.

157
0:10:15.880 --> 0:10:21.040
It took only 2.5 or 2.6 seconds.

158
0:10:21.040 --> 0:10:25.520
And if we do it with a stress room, it's not practical to actually do it.

159
0:10:25.520 --> 0:10:29.160
So I tested the 100 gigabyte image.

160
0:10:29.160 --> 0:10:31.280
It took about 200 seconds.

161
0:10:31.280 --> 0:10:35.680
So the estimated time is 4 hours and 29 minutes.

162
0:10:35.680 --> 0:10:41.560
It means in this case, we are 6,000 times faster.

163
0:10:41.560 --> 0:10:43.880
And of course, we get a different checksum.

164
0:10:43.880 --> 0:10:52.200
It's probably obvious, but any tool has its own checksum because they use different algorithms.

165
0:10:52.200 --> 0:10:59.080
So blocks room is using, under the hood, some cryptographic hash function, but it's a different

166
0:10:59.080 --> 0:11:00.080
construction.

167
0:11:00.080 --> 0:11:02.920
So we don't get the same checksum.

168
0:11:02.920 --> 0:11:10.120
Now, it's not available everywhere, anywhere.

169
0:11:10.120 --> 0:11:11.560
But I believe in copper.

170
0:11:11.560 --> 0:11:17.360
So if you have a Fedora or CentOS or well system, you can enable the copper repo and

171
0:11:17.360 --> 0:11:23.920
then you can install the package and play with the tool.

172
0:11:23.920 --> 0:11:28.280
So the block hash library.

173
0:11:28.280 --> 0:11:31.560
Basically blocks room is just using the library to compute the hash.

174
0:11:31.560 --> 0:11:37.200
So you can also use the library to integrate this functionality in your program.

175
0:11:37.200 --> 0:11:38.200
The library is very simple.

176
0:11:38.200 --> 0:11:40.960
This is the entire API.

177
0:11:40.960 --> 0:11:47.840
It gives you the standard interface to create a new hash, to update it, and to get the result,

178
0:11:47.840 --> 0:11:53.400
find an interface, and of course, to free the resources they used.

179
0:11:53.400 --> 0:12:03.120
So if you use any cryptographic hash libraries, maybe hashlib or OpenSSL, you know these interfaces.

180
0:12:03.120 --> 0:12:08.720
Now the important difference is that when you update, when you give it a buffer with

181
0:12:08.720 --> 0:12:13.320
this data, this API will detect zeros in the data.

182
0:12:13.320 --> 0:12:18.880
And if you find a zero block, we hash it much, much faster.

183
0:12:18.880 --> 0:12:29.160
So this increases the support by one order of magnitude or something like this.

184
0:12:29.160 --> 0:12:37.680
Even if you read from the file, you give it a buffer with zeros, we can hash it much faster.

185
0:12:37.680 --> 0:12:43.680
But the most important API is the zero API, which is new API that no other library supports.

186
0:12:43.680 --> 0:12:48.960
So if you know that the range in a file is not allocated, let's say empty 8 terabyte

187
0:12:48.960 --> 0:12:54.960
image, you check the file, you see that you have 8 terabyte whole.

188
0:12:54.960 --> 0:13:02.680
So you can just input this range to the library, and it will hash it really, really quickly.

189
0:13:02.680 --> 0:13:05.280
Much, much faster than any other way.

190
0:13:05.280 --> 0:13:08.800
And you don't have to read anything for this.

191
0:13:08.800 --> 0:13:11.960
So how fast is it?

192
0:13:11.960 --> 0:13:16.800
For that, we can process about 2 gigabytes of data.

193
0:13:16.800 --> 0:13:24.360
If you give it a buffer with zeros, we can process almost 50 gigabytes per second.

194
0:13:24.360 --> 0:13:30.000
And the real cache zero API can process almost 3 terabytes per second.

195
0:13:30.000 --> 0:13:39.080
And this is on this laptop, if you try on FLM1, and this is the first M1 from two years

196
0:13:39.080 --> 0:13:49.200
ago, it's almost 3 times faster for data, and almost 5 times faster for zero, up to

197
0:13:49.200 --> 0:13:52.120
13 terabytes per second.

198
0:13:52.120 --> 0:13:58.560
And I didn't try the newer M1s or M2.

199
0:13:58.560 --> 0:14:03.240
So if you want to use this library, we install the develop packages, we install the headers

200
0:14:03.240 --> 0:14:08.080
and the library package, the libs package, and your application will depend on the libs

201
0:14:08.080 --> 0:14:09.320
package.

202
0:14:09.320 --> 0:14:16.960
And everything should be automatic using RPM.

203
0:14:16.960 --> 0:14:20.880
Now the most important stuff is integrating this into your image, because this is the

204
0:14:20.880 --> 0:14:25.600
natural tool to consume this functionality.

205
0:14:25.600 --> 0:14:32.000
So I have patches in review for adding this new command.

206
0:14:32.000 --> 0:14:33.000
It's pretty simple.

207
0:14:33.000 --> 0:14:38.880
You give it the sign name, you have progress, you can control caching, and you can force

208
0:14:38.880 --> 0:14:41.600
the image format.

209
0:14:41.600 --> 0:14:46.240
And with this, you can compute the checksum of anything that your image can access.

210
0:14:46.240 --> 0:14:47.800
You get the same checksum.

211
0:14:47.800 --> 0:14:53.040
It uses the block cache library using the same configuration.

212
0:14:53.040 --> 0:14:55.920
So both tools are compatible.

213
0:14:55.920 --> 0:15:03.480
You can check my QM4 if you want to see the details.

214
0:15:03.480 --> 0:15:07.080
So what is the difference if you compare to blocksum?

215
0:15:07.080 --> 0:15:14.720
Usually it runs almost the same, a little faster, maybe 5% faster.

216
0:15:14.720 --> 0:15:21.240
In some cases, it can be 45% faster, like in this special case, image full of zeros.

217
0:15:21.240 --> 0:15:26.240
I think because QM4 image is closer to the data, it does not have to copy the data to

218
0:15:26.240 --> 0:15:32.760
QM-BD and then read it over the socket.

219
0:15:32.760 --> 0:15:37.840
So this is really the best place to use this technology.

220
0:15:37.840 --> 0:15:43.600
So let's see a small live demo.

221
0:15:43.600 --> 0:15:47.840
So I have several images.

222
0:15:47.840 --> 0:15:56.280
Let's try to look at 35 images.

223
0:15:56.280 --> 0:16:13.560
I think we have 6 gigabyte image, a little more than 1 gigabyte of data.

224
0:16:13.560 --> 0:16:20.680
And we have this QK2 image, again, similar size.

225
0:16:20.680 --> 0:16:40.040
And we can compare them.

226
0:16:40.040 --> 0:16:56.720
And of course, they are identical, and we can create checksum with Birkash, Birkashum.

227
0:16:56.720 --> 0:17:01.040
And we'll get the same checksum pretty quickly.

228
0:17:01.040 --> 0:17:03.160
So let's try a bigger image.

229
0:17:03.160 --> 0:17:10.760
This time, we'll use the pogus flag to make it more fun.

230
0:17:10.760 --> 0:17:15.920
This is 50 gigabyte file with 24 gigabyte of data.

231
0:17:15.920 --> 0:17:26.000
So it will take some time to compute it.

232
0:17:26.000 --> 0:17:32.720
You can see that the pogus jumps really quickly when we find a big hole.

233
0:17:32.720 --> 0:17:37.600
So it took 12 seconds, and we will not try to use Shasum now.

234
0:17:37.600 --> 0:17:45.600
And let's try the 8-terabyte image, which is really fast.

235
0:17:45.600 --> 0:17:58.320
And let's try the same use QM-BD image with the new checksum command.

236
0:17:58.320 --> 0:18:16.200
OK, takes more time to type than to compute it.

237
0:18:16.200 --> 0:18:19.720
OK, so this is all for the demo.

238
0:18:19.720 --> 0:18:23.760
And the last part is how you can contribute to the project.

239
0:18:23.760 --> 0:18:28.480
So the easiest stuff is just install it and play with it and test it, and if you find

240
0:18:28.480 --> 0:18:31.000
any issue, report it.

241
0:18:31.000 --> 0:18:37.520
If you have interesting machines, benchmark it and send the results to the project.

242
0:18:37.520 --> 0:18:40.600
We have some results in the readme now.

243
0:18:40.600 --> 0:18:43.200
Probably should be in a better place.

244
0:18:43.200 --> 0:18:46.240
To run the benchmarks, you need to build it on your system.

245
0:18:46.240 --> 0:18:50.520
It should be easy enough.

246
0:18:50.520 --> 0:18:54.960
The most important stuff is packaging and hardware.

247
0:18:54.960 --> 0:18:57.880
Packaging for Fedora and central central is mostly done.

248
0:18:57.880 --> 0:19:00.680
I just need to get this into Fedora.

249
0:19:00.680 --> 0:19:07.640
There is some review process that I probably need some help on this.

250
0:19:07.640 --> 0:19:13.560
Other Linux resource, if you want to package it for Debian or whatever, please do and contribute

251
0:19:13.560 --> 0:19:14.560
to the project.

252
0:19:14.560 --> 0:19:22.800
I like to keep all packaging upstream, so I will be very happy to add whatever you need

253
0:19:22.800 --> 0:19:26.200
to make it transparent.

254
0:19:26.200 --> 0:19:30.960
So it will not break when I change something upstream.

255
0:19:30.960 --> 0:19:37.720
Make OS and FreeBSD, I tested it on this platform without LibnBD because we don't have LibnBD

256
0:19:37.720 --> 0:19:38.720
there.

257
0:19:38.720 --> 0:19:46.080
We also cannot port it before we port LibnBD and package it.

258
0:19:46.080 --> 0:19:54.880
But we can package only the library part, which is really useful for QM.

259
0:19:54.880 --> 0:19:57.880
Missing features, there are a lot of stuff that can be added.

260
0:19:57.880 --> 0:19:58.880
You can look at the site.

261
0:19:58.880 --> 0:20:04.320
We have on the issue track a lot of issues that we can add, like supporting any image

262
0:20:04.320 --> 0:20:09.320
format because currently we support only Q2 and O.

263
0:20:09.320 --> 0:20:17.560
CheckSoom, multiple image, use the file to verify CheckSoom using what we recorded before

264
0:20:17.560 --> 0:20:18.560
and stuff like this.

265
0:20:18.560 --> 0:20:21.160
Improve the CI.

266
0:20:21.160 --> 0:20:26.720
And even more important, but of course much more work, integrate this into your system.

267
0:20:26.720 --> 0:20:32.600
So Oveot already supports CheckSoom API using all the implementation.

268
0:20:32.600 --> 0:20:38.920
This rest project uses this API to verify the back-ups.

269
0:20:38.920 --> 0:20:43.080
It can be upgraded to the new tool.

270
0:20:43.080 --> 0:20:45.280
Oveot can use it.

271
0:20:45.280 --> 0:20:53.600
For example, when you import image to using CDI importer or many for storage operation,

272
0:20:53.600 --> 0:20:58.680
Oveot can verify operation with this tool.

273
0:20:58.680 --> 0:21:06.480
And running a port connected to the disk and reading the image and measuring it.

274
0:21:06.480 --> 0:21:07.480
Maybe other systems.

275
0:21:07.480 --> 0:21:09.000
I don't know.

276
0:21:09.000 --> 0:21:16.240
If you like other systems and think that it can be useful, you can contact me to discuss

277
0:21:16.240 --> 0:21:17.240
it.

278
0:21:17.240 --> 0:21:23.080
If I want to see the project links, we have the project in GitLab.

279
0:21:23.080 --> 0:21:28.560
Also the issue track in the project and the copy of the project I showed before.

280
0:21:28.560 --> 0:21:30.560
So that's all.

281
0:21:30.560 --> 0:21:31.560
How much time?

282
0:21:31.560 --> 0:21:32.560
How much time do we have?

283
0:21:32.560 --> 0:21:33.560
Your question.

284
0:21:33.560 --> 0:21:34.560
Five minutes for question four.

285
0:21:34.560 --> 0:21:35.560
Okay.

286
0:21:35.560 --> 0:21:36.560
Yes.

287
0:21:36.560 --> 0:21:45.560
I have a question about the special case with block hash and block, I'm sorry, zero.

288
0:21:45.560 --> 0:21:55.560
How do you handle it under the hood?

289
0:21:55.560 --> 0:22:01.560
I have a specific one, but how is that done?

290
0:22:01.560 --> 0:22:03.440
How do we handle zeros?

291
0:22:03.440 --> 0:22:07.640
How do we do it efficiently?

292
0:22:07.640 --> 0:22:16.160
So I have a bonus section at the end of the slides that you can get from the site.

293
0:22:16.160 --> 0:22:23.920
Basically the idea is that we split the image to blocks using fixed size.

294
0:22:23.920 --> 0:22:27.720
The last block can be smaller, but it doesn't matter.

295
0:22:27.720 --> 0:22:31.920
Then we compute the hash for each block, but for zero blocks, we don't need to compute

296
0:22:31.920 --> 0:22:36.600
anything because we know that like we compute basically when you start operation, we compute

297
0:22:36.600 --> 0:22:39.520
the hash of the zero block based on the configuration.

298
0:22:39.520 --> 0:22:44.640
Then each time we see a zero block, we can use the per computed hash, so it's cost nothing.

299
0:22:44.640 --> 0:22:47.680
Then we compute the hash from the list of hashes.

300
0:22:47.680 --> 0:22:48.680
This is called a hash list.

301
0:22:48.680 --> 0:22:49.680
It's not really new.

302
0:22:49.680 --> 0:22:59.680
This cost something, you need to pay something for computing the hashes, but they are much,

303
0:22:59.680 --> 0:23:01.240
much smaller.

304
0:23:01.240 --> 0:23:06.480
Like whatever's magnitude smaller than the actual data.

305
0:23:06.480 --> 0:23:12.960
To make it even faster, we also use multiple threads.

306
0:23:12.960 --> 0:23:16.960
The previous slide show actually what's done in each worker.

307
0:23:16.960 --> 0:23:25.920
We split the blocks and we map them to multiple workers in the same time and send them to

308
0:23:25.920 --> 0:23:33.080
the worker queue and the workers go and compute this combined hash, this block hash.

309
0:23:33.080 --> 0:23:37.160
Finally we create the hash from the worker and hashes.

310
0:23:37.160 --> 0:23:38.160
Yes.

311
0:23:38.160 --> 0:23:49.320
I have a question, so how hard is it for you to add a new checksum algorithm instead of

312
0:23:49.320 --> 0:23:50.320
SHA-1?

313
0:23:50.320 --> 0:23:53.000
How hard is it to use?

314
0:23:53.000 --> 0:23:54.720
Can we use another checksum algorithm?

315
0:23:54.720 --> 0:23:58.560
Yes, in blocks, you have the parameter, you can specify another algorithm.

316
0:23:58.560 --> 0:24:06.040
You can use SHA-1 or MD5 or whatever, but anything that OpenSSL supports, it also supports.

317
0:24:06.040 --> 0:24:14.680
I'm not sure if this is the best option, maybe we limit it because SHA-1 is considered broken.

318
0:24:14.680 --> 0:24:16.620
But currently this is what we support.

319
0:24:16.620 --> 0:24:18.120
Anything that OpenSSL provides.

320
0:24:18.120 --> 0:24:19.120
Yes.

321
0:24:19.120 --> 0:24:21.960
How do you identify zero blocks?

322
0:24:21.960 --> 0:24:22.960
What?

323
0:24:22.960 --> 0:24:26.480
How do you identify zero blocks?

324
0:24:26.480 --> 0:24:28.400
How do we identify zero blocks?

325
0:24:28.400 --> 0:24:36.280
We use the very popular method that somebody ought to block about it, someone from the

326
0:24:36.280 --> 0:24:38.320
kernel a few years ago.

327
0:24:38.320 --> 0:24:45.000
You can use MenComp with an offset to compare the file against itself.

328
0:24:45.000 --> 0:24:53.120
You check the first 16 bytes and then you can just check the two pointers, the start

329
0:24:53.120 --> 0:24:59.680
of the image and the start of the image plus 16th and it can process up to 50 gigabytes

330
0:24:59.680 --> 0:25:03.360
per second on this machine.

331
0:25:03.360 --> 0:25:04.360
Very efficient.

332
0:25:04.360 --> 0:25:05.360
Yes.

333
0:25:05.360 --> 0:25:06.360
I have a short question.

334
0:25:06.360 --> 0:25:07.360
That's a question.

335
0:25:07.360 --> 0:25:08.360
Okay.

336
0:25:08.360 --> 0:25:09.360
I didn't get the question.

337
0:25:09.360 --> 0:25:10.360
Basically, you support the second algorithm.

338
0:25:10.360 --> 0:25:23.640
Yes.

339
0:25:23.640 --> 0:25:39.800
Did you try un-cryptographic algorithm?

340
0:25:39.800 --> 0:25:44.000
We didn't try because we tried to use something secure.

341
0:25:44.000 --> 0:25:50.040
We tried to get something which is secure with the original hash function.

342
0:25:50.040 --> 0:25:52.240
We can try other algorithms.

343
0:25:52.240 --> 0:25:55.960
It's interesting stuff that we can try.

344
0:25:55.960 --> 0:26:04.800
Thank you.

345
0:26:04.800 --> 0:26:11.800
You can mute the microphone.


1
0:00:00.000 --> 0:00:12.320
Now, we already spoke here a little bit about developers,

2
0:00:12.320 --> 0:00:16.640
and especially the front-end developers.

3
0:00:16.640 --> 0:00:19.080
One purpose of this talk for me is to

4
0:00:19.080 --> 0:00:22.280
really start with this bridge of the gap,

5
0:00:22.280 --> 0:00:24.400
which I often see between the people who

6
0:00:24.400 --> 0:00:26.720
really have a databases of

7
0:00:26.720 --> 0:00:30.640
a center of their at least professional life.

8
0:00:30.640 --> 0:00:33.480
Any people who are writing application and

9
0:00:33.480 --> 0:00:37.360
databases of them like a thing.

10
0:00:37.360 --> 0:00:41.280
It's like a toilet. You do your business anymore in your life.

11
0:00:41.280 --> 0:00:43.600
I mean something like that.

12
0:00:43.600 --> 0:00:49.160
For those people, the database is typically like a black box.

13
0:00:49.160 --> 0:00:52.080
There is this black box,

14
0:00:52.080 --> 0:00:55.000
and what I want is I

15
0:00:55.000 --> 0:00:58.640
connect to the service point which is provided to me.

16
0:00:58.640 --> 0:01:01.720
I connect it quickly, I run my queries,

17
0:01:01.720 --> 0:01:03.640
and that's all I care about.

18
0:01:03.640 --> 0:01:10.920
All that change buffer combia, never heard about it.

19
0:01:10.920 --> 0:01:13.520
What about queries?

20
0:01:13.520 --> 0:01:17.200
What would you as a developer think about queries?

21
0:01:17.200 --> 0:01:20.120
Well, these are actually pretty simple things.

22
0:01:20.120 --> 0:01:21.680
When you connect it to a service point,

23
0:01:21.680 --> 0:01:24.640
you add queries you want them to complete if no errors.

24
0:01:24.640 --> 0:01:29.080
You want them to provide you correct results set,

25
0:01:29.080 --> 0:01:30.520
because if you wouldn't,

26
0:01:30.520 --> 0:01:32.440
we could alter all the MySQL tables to

27
0:01:32.440 --> 0:01:35.440
black hole and get a fantastic performance.

28
0:01:35.440 --> 0:01:37.520
No errors too.

29
0:01:37.520 --> 0:01:41.200
Also, you want them to make sure that they complete in

30
0:01:41.200 --> 0:01:45.080
that response time what your application expects.

31
0:01:45.080 --> 0:01:48.320
I think that is a very important thing to understand.

32
0:01:48.320 --> 0:01:51.560
If you look at from the individual developer standpoint,

33
0:01:51.560 --> 0:01:53.120
like writing application, hey,

34
0:01:53.120 --> 0:01:58.720
performance response time for my queries is all I care about,

35
0:01:58.720 --> 0:02:01.480
and how that's internal database kitchen works,

36
0:02:01.480 --> 0:02:03.920
somebody else's problem.

37
0:02:05.120 --> 0:02:09.080
Now, if you think about response time from

38
0:02:09.080 --> 0:02:11.440
their database point of view,

39
0:02:11.440 --> 0:02:14.320
that is often seen like,

40
0:02:14.320 --> 0:02:17.480
well, I see that response time for a query

41
0:02:17.480 --> 0:02:20.240
is an average or whatever distribution.

42
0:02:20.240 --> 0:02:22.120
We'll talk about that later.

43
0:02:22.120 --> 0:02:27.280
But that is different from what business cares about.

44
0:02:27.280 --> 0:02:30.560
If you think about the business point of view,

45
0:02:30.560 --> 0:02:31.720
you think about, well,

46
0:02:31.720 --> 0:02:35.120
do my user have outstanding experience

47
0:02:35.120 --> 0:02:39.400
in terms of performance if all of the application interactions.

48
0:02:39.400 --> 0:02:42.160
That means like a search should work and place

49
0:02:42.160 --> 0:02:45.400
an order should work and whatever.

50
0:02:45.400 --> 0:02:47.640
Database is important part of that,

51
0:02:47.640 --> 0:02:51.600
of course, but not is there a complete part.

52
0:02:51.600 --> 0:02:54.520
What is interesting in this case is what as

53
0:02:54.520 --> 0:02:56.960
database engineers who often talk about

54
0:02:56.960 --> 0:03:02.680
those different events like a bad performance and the downtime.

55
0:03:02.680 --> 0:03:05.040
Say, well, no, no, no. We weren't down.

56
0:03:05.040 --> 0:03:10.560
It just was taking 50 minutes to run my very basic query.

57
0:03:10.560 --> 0:03:13.160
Well, from user standpoint,

58
0:03:13.160 --> 0:03:15.680
the bad performance,

59
0:03:15.680 --> 0:03:18.880
very bad performance isn't distinguishable from downtime.

60
0:03:18.880 --> 0:03:21.280
Because A, we don't have variance,

61
0:03:21.280 --> 0:03:23.080
but then even if people are very patient,

62
0:03:23.080 --> 0:03:25.840
then the browser write or some other time out will happen,

63
0:03:25.840 --> 0:03:27.800
and nobody gives a shit about that query which

64
0:03:27.800 --> 0:03:30.880
may still continue to be running.

65
0:03:30.880 --> 0:03:33.960
Another thing to understand about

66
0:03:33.960 --> 0:03:40.080
query performance is you do not want to focus on the averages.

67
0:03:40.080 --> 0:03:42.880
I like this one saying,

68
0:03:42.880 --> 0:03:45.800
but there was one silly demand who tried to cross

69
0:03:45.800 --> 0:03:49.760
the river in the average one meter deep.

70
0:03:49.760 --> 0:03:53.640
That is same applies to the query.

71
0:03:53.640 --> 0:03:56.560
If your average query time is x,

72
0:03:56.560 --> 0:03:59.200
well, that means pretty much nothing.

73
0:03:59.200 --> 0:04:04.960
You need to understand more about that.

74
0:04:04.960 --> 0:04:07.800
I like in this case to look at

75
0:04:07.800 --> 0:04:14.640
their percentiles and even more to make sure you can look at

76
0:04:14.640 --> 0:04:21.520
a specific distribution of a query response time.

77
0:04:21.520 --> 0:04:25.560
If you're that, that gives you a lot more insight.

78
0:04:25.560 --> 0:04:28.520
Now, one thing to understand about the percentile,

79
0:04:28.520 --> 0:04:30.160
you may be looking at it and saying,

80
0:04:30.160 --> 0:04:36.840
well, great, my queries have this decent 99 percentile.

81
0:04:36.840 --> 0:04:41.120
But that does not mean on a business side,

82
0:04:41.120 --> 0:04:43.920
what 99 percent of your users have a good or

83
0:04:43.920 --> 0:04:46.040
like acceptable experience. Why is that?

84
0:04:46.040 --> 0:04:47.360
Well, because guess what?

85
0:04:47.360 --> 0:04:49.520
The single user interaction can

86
0:04:49.520 --> 0:04:52.160
correspond to a lot of queries sequentially,

87
0:04:52.160 --> 0:04:56.040
which all adapt and typically through

88
0:04:56.040 --> 0:05:00.560
their joining user has a number of those interactions.

89
0:05:00.560 --> 0:05:04.520
So I would say even 99 percentile,

90
0:05:04.520 --> 0:05:08.520
that may all well depending on your application,

91
0:05:08.520 --> 0:05:12.440
only correspond to 50 percent of user session.

92
0:05:12.440 --> 0:05:15.440
So if you really see their complicated,

93
0:05:15.440 --> 0:05:20.280
larger environments, they are really focused on

94
0:05:20.280 --> 0:05:28.000
either relatively short SLA for rather high percentiles.

95
0:05:28.000 --> 0:05:30.880
Another thing that I would encourage to pay attention to

96
0:05:30.880 --> 0:05:35.440
is errors and make sure you

97
0:05:35.440 --> 0:05:38.920
are measuring response time for those as well.

98
0:05:38.920 --> 0:05:42.120
Because errors actually can be offered two kinds.

99
0:05:42.120 --> 0:05:44.080
Fast errors and slow errors.

100
0:05:44.080 --> 0:05:47.000
In certain cases, let's say if your table doesn't exist,

101
0:05:47.000 --> 0:05:50.760
you may be like get the response time straight away.

102
0:05:50.760 --> 0:05:53.600
If you put all your error queries

103
0:05:53.600 --> 0:05:56.760
and actually normal queries in the same bucket,

104
0:05:56.760 --> 0:05:58.080
you may say, oh my gosh,

105
0:05:58.080 --> 0:06:01.600
my response times are doing so well.

106
0:06:01.600 --> 0:06:05.080
But on the other hand, if your query is, for example,

107
0:06:05.080 --> 0:06:07.120
error is a lock-weight timeout,

108
0:06:07.120 --> 0:06:09.120
then that is a slow error.

109
0:06:09.120 --> 0:06:14.680
It actually will have a high response time than the normal cases.

110
0:06:14.680 --> 0:06:18.640
That is why I always suggest to make sure we

111
0:06:18.640 --> 0:06:22.040
measure response time for normal queries

112
0:06:22.040 --> 0:06:25.480
and for queries of problems differently.

113
0:06:25.480 --> 0:06:28.800
Another thing which is very important is looking at

114
0:06:28.800 --> 0:06:35.640
response time over time because traffic changes,

115
0:06:35.640 --> 0:06:38.160
a lot of things are going on in the system and just saying,

116
0:06:38.160 --> 0:06:42.600
hey, I'll have a response time of x over some long period of time.

117
0:06:42.600 --> 0:06:43.960
It's not very helpful.

118
0:06:43.960 --> 0:06:48.240
Also, what you would see in many cases,

119
0:06:48.240 --> 0:06:52.560
if you still start those like a small performance problems,

120
0:06:52.560 --> 0:06:58.400
like SLA violations which are if unfixed,

121
0:06:58.400 --> 0:07:01.200
they convert in the downtime.

122
0:07:01.200 --> 0:07:03.960
Like for example, in my SQL world,

123
0:07:03.960 --> 0:07:07.960
you may say, well, I have forgotten this runaway query.

124
0:07:07.960 --> 0:07:10.520
And my history accumulates.

125
0:07:10.520 --> 0:07:14.640
It will slowly increase and increase your response time.

126
0:07:14.640 --> 0:07:16.640
If you measure that over time and say, well,

127
0:07:16.640 --> 0:07:19.080
something is not trending in the right directions,

128
0:07:19.080 --> 0:07:21.880
you probably can fix it before that will

129
0:07:21.880 --> 0:07:25.680
be seen as a downtime by your users.

130
0:07:25.680 --> 0:07:32.120
If you are not, then not so much.

131
0:07:32.120 --> 0:07:35.840
This is example what we have here.

132
0:07:35.840 --> 0:07:39.400
You often may see something like this as well

133
0:07:39.400 --> 0:07:43.440
for where all the queries have like a spike in the response time,

134
0:07:43.440 --> 0:07:44.880
which you often make a response to

135
0:07:44.880 --> 0:07:48.080
something external happening in the environment.

136
0:07:48.080 --> 0:07:50.200
I think here is what is very interesting,

137
0:07:50.200 --> 0:07:52.280
especially for us running in the Cloud,

138
0:07:52.280 --> 0:07:55.960
we only have limited observability to environment.

139
0:07:55.960 --> 0:07:58.240
If there's some shit going on on

140
0:07:58.240 --> 0:08:00.920
an Amazon backend, they're not going to tell us that.

141
0:08:00.920 --> 0:08:04.760
You know what, we had let's say some free hard drives failed,

142
0:08:04.760 --> 0:08:10.920
which back our EBS and we had to some rebalance yada yada.

143
0:08:13.160 --> 0:08:17.240
The another question I would ask is where we want to

144
0:08:17.240 --> 0:08:20.080
measure response time from queries.

145
0:08:20.080 --> 0:08:23.800
In my opinion, both application view and database view

146
0:08:23.800 --> 0:08:26.040
in the combinations are very

147
0:08:26.040 --> 0:08:29.360
helpful because the application can see real thing.

148
0:08:29.360 --> 0:08:31.360
If your network, for example,

149
0:08:31.360 --> 0:08:34.400
is adding some latency or whatever,

150
0:08:34.400 --> 0:08:36.160
then you will see that from application,

151
0:08:36.160 --> 0:08:37.720
not so much from a database,

152
0:08:37.720 --> 0:08:39.680
because it's only sees from,

153
0:08:39.680 --> 0:08:46.160
hey, I got response to then it's sent the data back.

154
0:08:46.160 --> 0:08:49.840
But the database view allows you often to see

155
0:08:49.840 --> 0:08:53.520
a lot more insight about what had been going on inside,

156
0:08:53.520 --> 0:08:54.880
where from application side,

157
0:08:54.880 --> 0:08:59.880
we often can just capture the query time,

158
0:08:59.880 --> 0:09:04.640
maybe some very basic additional parameters. So,

159
0:09:04.640 --> 0:09:08.000
what is spoke from our business view?

160
0:09:08.000 --> 0:09:11.760
Well, we already said what that all users have

161
0:09:11.760 --> 0:09:13.800
outstanding performance experience of

162
0:09:13.800 --> 0:09:15.680
all the application interactions.

163
0:09:15.680 --> 0:09:19.120
Let's now try to break it down a little bit

164
0:09:19.120 --> 0:09:22.600
more to what that may mean.

165
0:09:22.600 --> 0:09:25.120
In this case, I want to introduce

166
0:09:25.120 --> 0:09:28.080
this little project of Laga from you.

167
0:09:28.080 --> 0:09:31.960
This is SQL Commendure project by Google,

168
0:09:32.520 --> 0:09:36.040
which is pretty cool in terms of what it's

169
0:09:36.040 --> 0:09:38.440
allows to pass you the metadata,

170
0:09:38.440 --> 0:09:43.080
which you understand as developer all the way to SQL query.

171
0:09:43.080 --> 0:09:45.480
They implemented that support

172
0:09:45.480 --> 0:09:48.520
from a number of frameworks,

173
0:09:48.520 --> 0:09:51.680
and it's also supported in

174
0:09:51.680 --> 0:09:55.960
their Google Cloud monitoring environment.

175
0:09:55.960 --> 0:10:00.320
I would very much see that developed more,

176
0:10:00.320 --> 0:10:04.600
and for at least ask them to some shared standards

177
0:10:04.600 --> 0:10:06.520
between the databases or whatever,

178
0:10:06.520 --> 0:10:11.800
how we can augment query information with tags,

179
0:10:11.800 --> 0:10:15.680
values which users care about.

180
0:10:15.680 --> 0:10:17.640
So, what are the possibilities which can be

181
0:10:17.640 --> 0:10:19.200
quite helpful in this regard?

182
0:10:19.200 --> 0:10:21.880
Well, finding, for example,

183
0:10:21.880 --> 0:10:23.920
who is our actual user attendant,

184
0:10:23.920 --> 0:10:26.680
who is query corresponds because we often may

185
0:10:26.680 --> 0:10:31.200
have different performance issues.

186
0:10:31.200 --> 0:10:33.040
Finding the application,

187
0:10:33.040 --> 0:10:36.040
like some subset of application functionality

188
0:10:36.040 --> 0:10:39.360
where many of them may be hitting the application.

189
0:10:39.360 --> 0:10:41.880
Version information, maybe information about

190
0:10:41.880 --> 0:10:46.720
their engineer of a team who is responsible.

191
0:10:46.720 --> 0:10:50.360
I often see DBAs or SRAs team having problem like,

192
0:10:50.360 --> 0:10:53.640
oh, I see this nasty query which was shipped yesterday.

193
0:10:53.640 --> 0:10:56.160
I know because it was shipped today

194
0:10:56.160 --> 0:10:58.120
because I know it wasn't fair yesterday,

195
0:10:58.120 --> 0:11:00.760
but now having to find out who

196
0:11:00.760 --> 0:11:03.560
a hell introduced that stupid query,

197
0:11:03.560 --> 0:11:06.360
maybe problematic in a large environment.

198
0:11:06.440 --> 0:11:10.680
Now, a lot of focus and I think the core of

199
0:11:10.680 --> 0:11:14.000
a query based observability may be about the query.

200
0:11:14.000 --> 0:11:18.360
By query, I mean obviously like a query with

201
0:11:18.360 --> 0:11:25.480
the same except different parameters.

202
0:11:25.480 --> 0:11:27.520
That is very helpful because well,

203
0:11:27.520 --> 0:11:29.320
obviously they have a different complexity,

204
0:11:29.320 --> 0:11:33.240
different expected SLA and so on and so forth.

205
0:11:33.240 --> 0:11:38.600
The next way also to break things down for me would be to

206
0:11:38.600 --> 0:11:42.960
look at the schema or database.

207
0:11:42.960 --> 0:11:45.960
Why is that interesting?

208
0:11:45.960 --> 0:11:51.240
I just noticed right now what it's been cut a bit.

209
0:11:51.240 --> 0:11:55.960
See? Well, anyway, life is life.

210
0:11:55.960 --> 0:12:02.600
I'm just not going to be lucky in this room right here.

211
0:12:02.600 --> 0:12:05.520
But well, we can blame our windows, right?

212
0:12:05.520 --> 0:12:09.760
On this conference, we can and should blame windows.

213
0:12:11.120 --> 0:12:15.600
Well, why schema and database are also good?

214
0:12:15.600 --> 0:12:19.560
Because often you would separate in

215
0:12:19.560 --> 0:12:23.640
a multi-tenant applications different tenants by schema.

216
0:12:24.640 --> 0:12:29.480
In that case, that gives us a good profiling for performance

217
0:12:29.480 --> 0:12:35.440
of different schemas like we can see here.

218
0:12:35.440 --> 0:12:40.160
An example of this PMM tool.

219
0:12:40.160 --> 0:12:44.120
Another thing what I found is very helpful to find

220
0:12:44.120 --> 0:12:46.320
a way to separate the data by different tables.

221
0:12:46.320 --> 0:12:48.800
In many cases, you want to say, hey, you know what?

222
0:12:48.800 --> 0:12:54.240
How queries hitting given table is affected,

223
0:12:54.240 --> 0:12:57.640
especially if it did some change which relates to a table.

224
0:12:57.640 --> 0:13:01.240
Hey, you know what? I changed the indexing on this table.

225
0:13:01.240 --> 0:13:05.920
Let me see how all the queries hitting this table is impacted.

226
0:13:05.920 --> 0:13:11.400
Very helpful because there may be some surprising differences.

227
0:13:11.400 --> 0:13:15.600
Database users, that is another thing which is quite

228
0:13:15.600 --> 0:13:18.200
helpful because that often allows us to

229
0:13:18.200 --> 0:13:20.120
identify the service application.

230
0:13:20.120 --> 0:13:22.120
If you're following good security practices,

231
0:13:22.120 --> 0:13:24.760
you would not let all your applications

232
0:13:24.760 --> 0:13:29.080
just use one username, not a good idea.

233
0:13:29.080 --> 0:13:31.640
Also find human troublemakers which are

234
0:13:31.640 --> 0:13:36.440
doing having direct access.

235
0:13:36.440 --> 0:13:40.360
So many times you'll find somebody running

236
0:13:40.360 --> 0:13:42.440
a query and say, okay, well, yeah,

237
0:13:42.440 --> 0:13:45.080
it's slow but wherever I'll go for lunch,

238
0:13:45.080 --> 0:13:48.440
I have time. Well, you may have time,

239
0:13:48.440 --> 0:13:52.000
but your database may not.

240
0:13:52.000 --> 0:13:57.680
Here's an example how we provide that.

241
0:13:57.680 --> 0:14:02.640
I also mentioned database host and indexes in

242
0:14:02.640 --> 0:14:06.320
many instances in many cases that is very helpful

243
0:14:06.320 --> 0:14:08.200
because even if you may think,

244
0:14:08.200 --> 0:14:11.880
oh, my different database instance should perform the same.

245
0:14:11.880 --> 0:14:15.960
Well, world is a messy place and world in the Cloud is even

246
0:14:15.960 --> 0:14:19.560
messy place, they may not exactly have

247
0:14:19.560 --> 0:14:21.960
the same performance due to

248
0:14:21.960 --> 0:14:24.880
some strange configuration differently,

249
0:14:24.880 --> 0:14:28.640
having a bad day or even maybe having a different load.

250
0:14:28.640 --> 0:14:31.120
That is a good to be able to break it down.

251
0:14:31.120 --> 0:14:33.840
Right then you see some of your queries are not

252
0:14:33.840 --> 0:14:39.400
performing very well. I would also look at

253
0:14:39.400 --> 0:14:42.480
the same stuff from a web server or application server instance.

254
0:14:42.480 --> 0:14:45.760
Because again, if you have maybe like a 100 nodes,

255
0:14:45.760 --> 0:14:48.720
you deploy this application, you may think, hey,

256
0:14:48.720 --> 0:14:51.880
we're all going to perform the same,

257
0:14:51.880 --> 0:14:53.240
hitting the database, well,

258
0:14:53.240 --> 0:14:54.720
that is not always the case.

259
0:14:54.720 --> 0:14:56.880
They have seen changes from people saying,

260
0:14:56.880 --> 0:14:59.360
one of them is misconfigured or for some reason

261
0:14:59.360 --> 0:15:00.720
cannot connect the cache.

262
0:15:00.720 --> 0:15:03.960
So it's hitting 10 times more queries

263
0:15:03.960 --> 0:15:05.720
right on the database than it should be,

264
0:15:05.720 --> 0:15:09.400
or the application rollout didn't go well,

265
0:15:09.400 --> 0:15:14.040
where you've eliminated nasty query on 99 of application instance,

266
0:15:14.040 --> 0:15:15.160
but not some others.

267
0:15:15.160 --> 0:15:18.760
It's very good to actually be able to validate that.

268
0:15:18.760 --> 0:15:20.320
Because what you would see,

269
0:15:20.320 --> 0:15:23.280
or like I gave from a DBA standpoint,

270
0:15:23.280 --> 0:15:26.720
developers, sysad means storage people,

271
0:15:26.720 --> 0:15:28.520
they are going to tell you shit,

272
0:15:28.520 --> 0:15:30.680
but they are going to lie.

273
0:15:30.680 --> 0:15:32.760
They are going to lie.

274
0:15:32.760 --> 0:15:35.000
Maybe not intentionally,

275
0:15:35.000 --> 0:15:38.320
maybe cause of a ignorance and limitation of fair tool,

276
0:15:38.320 --> 0:15:40.400
but as a DBA, a CD or something,

277
0:15:40.400 --> 0:15:43.520
you want to point them out to where you can say,

278
0:15:43.520 --> 0:15:45.960
look, this, I have evidence.

279
0:15:45.960 --> 0:15:49.000
Evidence is good.

280
0:15:49.000 --> 0:15:51.120
So clients cost.

281
0:15:51.120 --> 0:15:55.400
Custom tags is very helpful if you can extend.

282
0:15:55.400 --> 0:15:59.920
That is what we spoke about SQL commenters,

283
0:15:59.920 --> 0:16:04.400
something else, which I find very helpful,

284
0:16:04.400 --> 0:16:07.640
which we cannot quite easily get with MySQL,

285
0:16:07.640 --> 0:16:12.040
but being able to separate the query by the query plans.

286
0:16:12.040 --> 0:16:15.360
Often you may have a query which looks the same,

287
0:16:15.360 --> 0:16:19.200
but it may take different execution plans.

288
0:16:19.200 --> 0:16:23.080
And often that may be correlated to its performance.

289
0:16:23.080 --> 0:16:25.560
In certain cases, it is totally fine,

290
0:16:25.560 --> 0:16:27.440
very different situations.

291
0:16:27.440 --> 0:16:31.840
Sometimes MySQL optimizer may get a little bit crazy

292
0:16:31.840 --> 0:16:36.600
just and have that optimizer plan brief for no good reason,

293
0:16:36.600 --> 0:16:39.280
which may not be very easy to catch,

294
0:16:40.120 --> 0:16:42.520
and it would be helpful to do.

295
0:16:42.520 --> 0:16:46.560
What I also would like to highlight

296
0:16:46.560 --> 0:16:49.200
is when you find the specific query and say,

297
0:16:49.200 --> 0:16:52.960
hey, this query has nasty performance,

298
0:16:52.960 --> 0:16:55.000
you often want to understand

299
0:16:55.000 --> 0:16:58.320
where that query response time comes from.

300
0:16:58.320 --> 0:17:03.320
And that is some of the things where it can come from.

301
0:17:03.640 --> 0:17:08.640
Surin-FM are relatively easy to find out.

302
0:17:10.600 --> 0:17:12.480
Surin are not very well.

303
0:17:12.480 --> 0:17:16.720
For example, wherever query has waited on available CPU

304
0:17:16.720 --> 0:17:19.240
because system was overly saturated,

305
0:17:19.240 --> 0:17:21.720
well, you can't really see on per query basics.

306
0:17:21.720 --> 0:17:24.120
You can only see those things, well,

307
0:17:24.120 --> 0:17:27.000
my CPU was kind of like a super packed

308
0:17:27.000 --> 0:17:29.040
right on a period of time.

309
0:17:29.040 --> 0:17:32.840
Okay, here are a couple of other things

310
0:17:32.840 --> 0:17:34.880
to consider when you're looking at the queries.

311
0:17:34.880 --> 0:17:39.080
One, you want to really look separately at the bad queries

312
0:17:39.080 --> 0:17:41.680
versus victims, because sometimes you will see,

313
0:17:41.680 --> 0:17:43.600
oh, queries are getting slower,

314
0:17:43.600 --> 0:17:45.280
but it's not because of them.

315
0:17:45.280 --> 0:17:48.360
It's about some other nasty queries.

316
0:17:48.360 --> 0:17:51.360
Maybe that is your Java developer who thought,

317
0:17:51.360 --> 0:17:53.000
well, to solve my problems,

318
0:17:53.000 --> 0:17:58.000
I will just launch with stuff with 200 threads,

319
0:18:00.520 --> 0:18:02.000
and make sure I am good,

320
0:18:02.000 --> 0:18:05.800
but everything else is kind of slowed down.

321
0:18:05.800 --> 0:18:09.440
And that's maybe tricky.

322
0:18:09.440 --> 0:18:11.800
One thing is what you should not forget

323
0:18:11.800 --> 0:18:13.240
the currently running queries.

324
0:18:13.240 --> 0:18:16.520
In many cases, like if you look in performance schema queries

325
0:18:16.520 --> 0:18:18.960
by digest, that gives you what happened in the past.

326
0:18:18.960 --> 0:18:22.960
But believe me, if you started 50 instances

327
0:18:22.960 --> 0:18:27.320
of some very bad query, which continues to run,

328
0:18:27.320 --> 0:18:30.880
well, that may be the reason of your problem, not the past.

329
0:18:30.880 --> 0:18:33.560
And to connect to that, I think it is less problem

330
0:18:33.560 --> 0:18:37.240
in my school right now if you're using query timeouts,

331
0:18:37.240 --> 0:18:38.680
which is a very good practice,

332
0:18:38.680 --> 0:18:40.120
because if you say, hey, you know what,

333
0:18:40.120 --> 0:18:42.040
for all my interactive queries, by default,

334
0:18:42.040 --> 0:18:44.880
I set the timeout of, let's say, 15 seconds,

335
0:18:44.880 --> 0:18:47.920
then you should not care too much about your past queries,

336
0:18:47.920 --> 0:18:50.000
because, well, you know what,

337
0:18:50.000 --> 0:18:53.680
everything gets killed after 15 minutes.

338
0:18:53.680 --> 0:18:55.280
Also, 50 seconds, right?

339
0:18:55.280 --> 0:18:57.960
You should not ignore the stuff which is invisible

340
0:18:57.960 --> 0:18:59.760
from a query standpoint, right?

341
0:18:59.760 --> 0:19:04.760
Databases do a lot of shit in the background.

342
0:19:04.800 --> 0:19:07.440
You may also do things, or your operation teams,

343
0:19:07.440 --> 0:19:11.000
like, well, backups, or provisioning

344
0:19:11.000 --> 0:19:13.200
another node for cloning, right?

345
0:19:13.200 --> 0:19:16.880
Or the clouds, or wherever your VM system

346
0:19:16.880 --> 0:19:18.760
need to do something in the background,

347
0:19:18.760 --> 0:19:20.400
it may not be directly visible,

348
0:19:20.400 --> 0:19:22.640
but that can impact your query performance, right?

349
0:19:22.640 --> 0:19:25.840
So sometimes, well, when you observe a query impact,

350
0:19:25.840 --> 0:19:28.880
and you can't really see what is causing that,

351
0:19:29.720 --> 0:19:31.520
it's possible.

352
0:19:31.520 --> 0:19:34.680
I also would encourage to avoid

353
0:19:34.680 --> 0:19:36.800
what I would call a biased something.

354
0:19:36.800 --> 0:19:38.680
I see people sometimes would say, hey, you know what,

355
0:19:38.680 --> 0:19:41.480
we will set long query time to one second,

356
0:19:41.480 --> 0:19:42.880
and only look at the queries

357
0:19:42.880 --> 0:19:44.440
which are more than one second in length.

358
0:19:44.440 --> 0:19:48.400
Well, you may be only focusing on the outliers, right?

359
0:19:48.400 --> 0:19:51.800
And missing the possibility to optimize other queries, right?

360
0:19:51.800 --> 0:19:56.560
Or actually even focusing on the queries

361
0:19:56.560 --> 0:20:01.560
which a response of providing that experience, right,

362
0:20:01.760 --> 0:20:05.280
for your users.

363
0:20:05.280 --> 0:20:07.640
Okay, we find another thing,

364
0:20:07.640 --> 0:20:10.920
like a last minute I have, or something.

365
0:20:10.920 --> 0:20:14.040
I wanted to say, hey, what I would like to see

366
0:20:14.040 --> 0:20:16.120
from my school to do better.

367
0:20:16.120 --> 0:20:17.560
Who is Kenny?

368
0:20:17.560 --> 0:20:18.400
No Kenny?

369
0:20:20.800 --> 0:20:22.720
Yes, he's always hiding, right?

370
0:20:22.720 --> 0:20:25.640
He probably wanted to get another sandwich, damn it.

371
0:20:26.880 --> 0:20:29.880
Okay, so here are some things that I would like to see.

372
0:20:29.880 --> 0:20:33.160
One is better support of prepared statements, right?

373
0:20:33.160 --> 0:20:36.200
And right now, right, it's kind of,

374
0:20:37.560 --> 0:20:39.160
not done in the same way, right?

375
0:20:39.160 --> 0:20:44.160
Which is, I think is a problem, right?

376
0:20:45.320 --> 0:20:48.640
Now, I would say consider grouping data by time.

377
0:20:48.640 --> 0:20:50.640
In certain cases right now, you get like

378
0:20:51.640 --> 0:20:54.000
all the statements in one table, right?

379
0:20:54.000 --> 0:20:56.000
And you have a lot of statement variety,

380
0:20:56.000 --> 0:20:58.480
that table tends to overflow, right?

381
0:20:58.480 --> 0:21:01.200
Which is not really helpful, right?

382
0:21:01.200 --> 0:21:06.040
And if you have to kind of reset your queries all the time,

383
0:21:06.040 --> 0:21:11.040
that is not very good practice in my opinion.

384
0:21:12.160 --> 0:21:16.320
Provide list of tables query touches, right?

385
0:21:16.320 --> 0:21:18.520
That is very helpful because, well,

386
0:21:18.520 --> 0:21:21.640
my school parser already knows it, right?

387
0:21:21.640 --> 0:21:23.720
It knows tables query touches,

388
0:21:23.720 --> 0:21:26.120
but it's very hard to parse it out from a query,

389
0:21:26.120 --> 0:21:30.200
especially if you consider views, right?

390
0:21:30.200 --> 0:21:32.800
I don't know by looking at the query alone,

391
0:21:32.800 --> 0:21:34.840
wherever something is a table or a view, right?

392
0:21:34.840 --> 0:21:38.840
So in this case, information about plan ID, right?

393
0:21:38.840 --> 0:21:42.720
I would like to see for the query, right?

394
0:21:42.720 --> 0:21:45.480
Some sort of plan hash or something so I know

395
0:21:47.040 --> 0:21:49.160
then query is using something like that.

396
0:21:49.160 --> 0:21:52.280
And also what I would call like a top weight summary, right?

397
0:21:52.280 --> 0:21:54.880
Right now we have information about the weights

398
0:21:54.880 --> 0:21:57.940
in MySQL performance query and about query,

399
0:21:57.940 --> 0:22:02.320
but I cannot see and say, oh, that query was slow

400
0:22:02.320 --> 0:22:06.280
because it spent XYZ amount of weight on something

401
0:22:06.280 --> 0:22:07.700
or whatever, right?

402
0:22:07.700 --> 0:22:12.480
Or at least kind of like a small class of queries, right?

403
0:22:12.480 --> 0:22:14.040
I don't think that's convenient.

404
0:22:14.040 --> 0:22:19.040
Well, with that, that's all I had to say.

405
0:22:19.120 --> 0:22:22.960
Hope that will help you to avoid tuning your indexes

406
0:22:22.960 --> 0:22:26.200
by the credit card.

407
0:22:27.960 --> 0:22:29.280
And yes.

408
0:22:29.280 --> 0:22:32.200
Oh, I have a time for questions.

409
0:22:32.200 --> 0:22:34.280
You told me like Peter, five minutes.

410
0:22:36.520 --> 0:22:38.220
Oh, to answer I have a time for questions.

411
0:22:38.220 --> 0:22:39.840
Yes, any questions?

412
0:22:43.240 --> 0:22:44.960
No, oh yeah.

413
0:22:44.960 --> 0:22:46.840
What's the difference or advantages

414
0:22:46.840 --> 0:22:48.360
of this SQL command of things

415
0:22:48.360 --> 0:22:50.240
compared to what open tracing standard

416
0:22:50.240 --> 0:22:53.040
as because task of tracing the whole thing?

417
0:22:53.040 --> 0:22:55.520
What's the difference of SQL command?

418
0:22:55.520 --> 0:22:58.280
Well, what I would say in this case, yes.

419
0:22:58.280 --> 0:23:01.600
I mean, there is obviously open tracing framework, right?

420
0:23:01.600 --> 0:23:03.480
Which you can use.

421
0:23:03.480 --> 0:23:07.120
This gets specifically to the database

422
0:23:07.120 --> 0:23:12.120
and specifically in every query, right?

423
0:23:13.440 --> 0:23:15.880
If you look at the open tracing framework,

424
0:23:15.880 --> 0:23:20.180
I think, you know, getting every query, right?

425
0:23:20.180 --> 0:23:24.560
Maybe a lot of volume out there, right?

426
0:23:24.560 --> 0:23:28.920
And again, I also think, well, the good thing

427
0:23:28.920 --> 0:23:31.480
if also SQL command, right, is what that does

428
0:23:31.480 --> 0:23:34.360
it automatically, if you will, right?

429
0:23:34.360 --> 0:23:39.360
That does not require to take an extra integration.

430
0:23:42.560 --> 0:23:43.560
Okay, anybody else?

431
0:23:45.200 --> 0:23:50.200
The PMN tool, is it like, it works also with MariaDB?

432
0:23:50.200 --> 0:23:54.360
Yeah, I mean, it works with MariaDB as well.

433
0:23:58.960 --> 0:24:00.120
Yes?

434
0:24:00.120 --> 0:24:02.560
Are there some good practices you can do

435
0:24:02.560 --> 0:24:05.480
to avoid your query just randomly going

436
0:24:05.480 --> 0:24:06.600
down a different plan?

437
0:24:08.280 --> 0:24:12.380
Well, there are practices, there are no good practices.

438
0:24:14.480 --> 0:24:17.680
Like, you can, there is a lot of optimizer hints

439
0:24:17.680 --> 0:24:18.520
you can use, right?

440
0:24:18.520 --> 0:24:20.600
So you can actually force the query to go

441
0:24:20.600 --> 0:24:23.280
like this particular stuff, right?

442
0:24:23.280 --> 0:24:26.960
But that also prevents optimizer choosing different plan

443
0:24:26.960 --> 0:24:28.600
if better plan becomes available.

444
0:24:30.800 --> 0:24:32.320
Yeah?

445
0:24:32.320 --> 0:24:36.600
Never use forced index, always use ignore index

446
0:24:36.600 --> 0:24:41.600
and you will mostly avoid what Peter just warned you about.

447
0:24:41.600 --> 0:24:42.440
Okay.

448
0:24:44.200 --> 0:24:47.400
Okay, well, then thank you folks.

449
0:24:47.400 --> 0:24:48.840
Thank you.

450
0:24:48.840 --> 0:25:17.800
Thank you.


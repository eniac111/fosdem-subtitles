1
0:00:00.000 --> 0:00:23.680
I'm going to talk a little bit about Guy and Zig.

2
0:00:23.680 --> 0:00:26.540
So I prepared two talks.

3
0:00:26.540 --> 0:00:29.780
One talk you can download online.

4
0:00:29.780 --> 0:00:36.120
There was kind of an overview of why I made these choices and why we're doing this.

5
0:00:36.120 --> 0:00:45.680
But I think it's better just to hit the command line or a shell.

6
0:00:45.680 --> 0:00:48.040
So many people will recognize this Emacs.

7
0:00:48.040 --> 0:00:53.800
The letters fall off on the side, but it shouldn't matter too much.

8
0:00:53.800 --> 0:01:05.000
And then I'm going to run in a shell.

9
0:01:05.000 --> 0:01:09.600
So I don't know if everyone is aware, but a GIG shell is a proper container.

10
0:01:09.600 --> 0:01:15.320
So only the tools are pulled in that we define.

11
0:01:15.320 --> 0:01:18.120
This is done in the GIG.scheme file.

12
0:01:18.120 --> 0:01:29.720
Oh man.

13
0:01:29.720 --> 0:01:34.320
In the GIG.scheme file we define the dependency we want.

14
0:01:34.320 --> 0:01:37.120
So Guile is there and Zig is there.

15
0:01:37.120 --> 0:01:43.640
So in the file we find Zig version.

16
0:01:43.640 --> 0:01:49.000
So that's in the container and then Guile minus V is also there.

17
0:01:49.000 --> 0:01:51.240
But VI, for example, is not.

18
0:01:51.240 --> 0:02:04.080
And if this was properly running on Debian it would be visible.

19
0:02:04.080 --> 0:02:08.520
So what I'm going to do is I'm going to run Zig to build my library.

20
0:02:08.520 --> 0:02:13.920
It's a dynamic library.

21
0:02:13.920 --> 0:02:23.400
And then I use package config to pick up the Guile compile switches.

22
0:02:23.400 --> 0:02:26.440
I'm going to compile it against a little C library.

23
0:02:26.440 --> 0:02:30.040
Sorry, yeah, C file.

24
0:02:30.040 --> 0:02:32.840
Uh oh.

25
0:02:32.840 --> 0:02:38.840
Yeah, um.

26
0:02:38.840 --> 0:02:52.440
Right, yeah, I missed the second line I see, yeah.

27
0:02:52.440 --> 0:02:57.600
Right.

28
0:02:57.600 --> 0:03:07.560
So Guile is almost designed for linking against C. Right, so I wrote a little C program to

29
0:03:07.560 --> 0:03:09.840
show you that.

30
0:03:09.840 --> 0:03:13.560
And it can, it calls Guile functions.

31
0:03:13.560 --> 0:03:15.840
So scheme from int is a Guile function.

32
0:03:15.840 --> 0:03:22.160
So it switches, it turns test into a Guile integer essentially.

33
0:03:22.160 --> 0:03:23.160
And then a boolean.

34
0:03:23.160 --> 0:03:27.320
And then I call this function here in C. Right, my increment and function.

35
0:03:27.320 --> 0:03:31.320
You can see that it uses Guile objects to pass into the function.

36
0:03:31.320 --> 0:03:33.520
And there's also a Guile object returned.

37
0:03:33.520 --> 0:03:34.520
Right.

38
0:03:34.520 --> 0:03:37.960
So it's very minimalistic code.

39
0:03:37.960 --> 0:03:49.600
Now I just need to get a compile it.

40
0:03:49.600 --> 0:03:53.000
Now it did compile.

41
0:03:53.000 --> 0:03:54.200
But now it doesn't find the library.

42
0:03:54.200 --> 0:03:55.760
So I need to add the library path.

43
0:03:55.760 --> 0:03:59.200
So I'm just doing this raw so you can see what is happening.

44
0:03:59.200 --> 0:04:03.960
You know, I mean if you had a proper build script you can account for all this.

45
0:04:03.960 --> 0:04:07.440
But you can see it says hello world from three to four.

46
0:04:07.440 --> 0:04:13.440
Right, so that's what the C function does.

47
0:04:13.440 --> 0:04:15.040
Now I want to do the same thing in Zig.

48
0:04:15.040 --> 0:04:22.840
Right, so I created, actually what I want to do is I want to call Zig from, you know,

49
0:04:22.840 --> 0:04:24.800
the same library that I'm using.

50
0:04:24.800 --> 0:04:29.360
I want to call it from Guile.

51
0:04:29.360 --> 0:04:32.280
Right.

52
0:04:32.280 --> 0:04:38.320
So let's try that.

53
0:04:38.320 --> 0:04:47.560
So I'm in Guile now and I added the local search path for the library.

54
0:04:47.560 --> 0:04:49.280
Right.

55
0:04:49.280 --> 0:04:55.440
So here we load the shared library libmy.so.

56
0:04:55.440 --> 0:04:58.920
Right, it loads into Guile.

57
0:04:58.920 --> 0:05:08.920
I want to try something like, and it says it doesn't find the procedure because I haven't

58
0:05:08.920 --> 0:05:09.920
defined it.

59
0:05:09.920 --> 0:05:13.520
So that doesn't work very well.

60
0:05:13.520 --> 0:05:15.920
Nope.

61
0:05:15.920 --> 0:05:35.120
Let me see where we are.

62
0:05:35.120 --> 0:05:51.200
Yes, I call it thing Zig.

63
0:05:51.200 --> 0:05:52.200
With an underscore.

64
0:05:52.200 --> 0:05:53.200
All right.

65
0:05:53.200 --> 0:05:55.200
It's not very Guile-like.

66
0:05:55.200 --> 0:06:04.680
Yeah, so that's some conventions and I already ignored it.

67
0:06:04.680 --> 0:06:09.360
So Guile has a wide range of C functions in the library.

68
0:06:09.360 --> 0:06:13.840
And these can be called, you know, so if you look for the C function, which one did we

69
0:06:13.840 --> 0:06:15.840
use before?

70
0:06:15.840 --> 0:06:27.560
Yeah, or Scheme from Int you can see here, right?

71
0:06:27.560 --> 0:06:30.560
Scheme from Int.

72
0:06:30.560 --> 0:06:41.880
So in the Guile reference manual.

73
0:06:41.880 --> 0:06:46.120
You see in the reference manual almost on every page you see the sort of the C functions

74
0:06:46.120 --> 0:06:50.160
that you could also call as Lisp functions.

75
0:06:50.160 --> 0:06:52.240
You know, and the Scheme from Int should be there.

76
0:06:52.240 --> 0:06:54.400
It's a long list, but that's the idea.

77
0:06:54.400 --> 0:07:00.880
So when you actually use the Guile manual, you will see the C interface to the C A B

78
0:07:00.880 --> 0:07:01.880
I.

79
0:07:01.880 --> 0:07:09.760
Now, the interesting thing about Zig is that it faithfully, you know, uses the C A B I.

80
0:07:09.760 --> 0:07:17.520
So, you know, anything you can define in Zig, you can essentially access from Guile.

81
0:07:17.520 --> 0:07:26.000
So let's look at my Zig file and I say ping.

82
0:07:26.000 --> 0:07:31.000
Yeah, so this is the, you know, sort of the equivalent C function, sorry, Zig Vinc function

83
0:07:31.000 --> 0:07:32.960
that we had defined in C earlier.

84
0:07:32.960 --> 0:07:35.540
Yeah, you have a ping Zig.

85
0:07:35.540 --> 0:07:39.320
It takes a Scheme object as an input and it returns a Scheme object, right?

86
0:07:39.320 --> 0:07:43.560
And it just pings it back.

87
0:07:43.560 --> 0:07:47.840
So how come I can see the Scheme object as it is defined now?

88
0:07:47.840 --> 0:07:58.200
And as a matter of fact, Zig can export, sorry, can import C include files.

89
0:07:58.200 --> 0:08:06.160
Yeah, it's actually one command.

90
0:08:06.160 --> 0:08:14.920
Yeah, so you say Zig translate C, right?

91
0:08:14.920 --> 0:08:19.920
Then the path to the include file, then the include file itself and it turns into, you

92
0:08:19.920 --> 0:08:22.520
know, it turns into a proper Zig file.

93
0:08:22.520 --> 0:08:25.600
And this Zig file you can just import and it will work.

94
0:08:25.600 --> 0:08:31.760
So all the functions that are defined by Guile that are exported for, that you could use

95
0:08:31.760 --> 0:08:36.720
from C in principle are now available in Zig, including the objects.

96
0:08:36.720 --> 0:08:44.920
Yeah, so if you look at this Zig file, it doesn't look very nice, right?

97
0:08:44.920 --> 0:08:47.120
But it's all there and it actually just worked in one go.

98
0:08:47.120 --> 0:08:52.240
I didn't have, I had to delete one line in it.

99
0:08:52.240 --> 0:09:00.200
All right, so yeah, the other thing of course that is that I'm using ping Zig 1 right now.

100
0:09:00.200 --> 0:09:07.600
Okay, so let's try hello.

101
0:09:07.600 --> 0:09:08.920
And it pings back hello, right?

102
0:09:08.920 --> 0:09:12.560
I mean, that's what we see in the Zig function here.

103
0:09:12.560 --> 0:09:18.440
And Guile is not a strictly typed language.

104
0:09:18.440 --> 0:09:23.880
I mean, it's typed, but it's not in the sense that here we have a variable that you can,

105
0:09:23.880 --> 0:09:29.400
you know, in the one case I'm using an integer, in the next case I'm using a string.

106
0:09:29.400 --> 0:09:32.680
And this makes for, apart from the fact that I'm using a grapple where I'm actually talking

107
0:09:32.680 --> 0:09:37.480
to the, you know, to the Zig back end, it also gives me a lot of flexibility in what,

108
0:09:37.480 --> 0:09:43.640
you know, how I define these functions and these variables that get passed.

109
0:09:43.640 --> 0:09:56.880
Okay, so let's do something a little bit more complex.

110
0:09:56.880 --> 0:10:02.880
So the, you know, this exploration that I had with Zig and Z and Guile, it's also all

111
0:10:02.880 --> 0:10:03.880
online.

112
0:10:03.880 --> 0:10:04.880
You can just read it.

113
0:10:04.880 --> 0:10:07.880
It's in a GitLab repository.

114
0:10:07.880 --> 0:10:21.000
Yeah, so if you define a function in Zig, you know, just naively like ping Zig here,

115
0:10:21.000 --> 0:10:23.560
it won't be immediately visible to Guile.

116
0:10:23.560 --> 0:10:25.920
You need to create a mapping for that.

117
0:10:25.920 --> 0:10:28.680
Yeah, and this is in the Guile documentation.

118
0:10:28.680 --> 0:10:31.720
It's exactly the same thing in C. See if I can find it.

119
0:10:31.720 --> 0:10:33.000
Yeah, here it is.

120
0:10:33.000 --> 0:10:37.840
So when you initialise the module, which means when you load the shared library, right, it

121
0:10:37.840 --> 0:10:46.000
will call this function and you will define a sub, sorry, it will, yeah, define the function

122
0:10:46.000 --> 0:10:47.000
call here.

123
0:10:47.000 --> 0:10:48.760
So in Grand Zig here is ping Zig, right?

124
0:10:48.760 --> 0:10:50.680
Ping Zig and it has one argument.

125
0:10:50.680 --> 0:10:52.060
All right?

126
0:10:52.060 --> 0:10:58.720
You need to do that to make the symbol visible to the Guile interpreter.

127
0:10:58.720 --> 0:11:00.200
That's basically what you have to do.

128
0:11:00.200 --> 0:11:04.320
There's nothing more to it.

129
0:11:04.320 --> 0:11:10.720
Which is kind of boring.

130
0:11:10.720 --> 0:11:15.960
So yeah, I'm of the opinion that, you know, that we need multiple programming languages.

131
0:11:15.960 --> 0:11:21.080
You know, when you talk about Zig, there's often, or even C++, you know, there's often

132
0:11:21.080 --> 0:11:22.080
the elephant in the room.

133
0:11:22.080 --> 0:11:23.840
I'm not going to name it.

134
0:11:23.840 --> 0:11:27.000
But this is a language that tries to be everything.

135
0:11:27.000 --> 0:11:31.680
You know, and you end up with a very complex language.

136
0:11:31.680 --> 0:11:34.200
Also the compiler is dog slow.

137
0:11:34.200 --> 0:11:40.280
I don't know if anyone is using the unnamed language.

138
0:11:40.280 --> 0:11:45.120
And then it has, you know, it has a borrow checker which acts like, you know, a nagging

139
0:11:45.120 --> 0:11:46.120
wife.

140
0:11:46.120 --> 0:11:48.080
You know, it keeps talking to you.

141
0:11:48.080 --> 0:11:52.800
And I tried it, and I tried to love it because it's a functional language, a functional programming

142
0:11:52.800 --> 0:11:53.800
language.

143
0:11:53.800 --> 0:11:56.600
But it kept talking to me and it kept going me out of my flow.

144
0:11:56.600 --> 0:11:59.080
I just couldn't keep moving.

145
0:11:59.080 --> 0:12:06.080
So I think it's probably wiser to have a language like C, which is, you know, you have to realize

146
0:12:06.080 --> 0:12:10.080
that most of the code in the world today is written in C++ still.

147
0:12:10.080 --> 0:12:16.320
If you want a type of performance, you will end up with a strictly typed language, which

148
0:12:16.320 --> 0:12:21.080
is imperative to some degree because CPUs are imperative.

149
0:12:21.080 --> 0:12:25.920
We don't have functional programming CPUs.

150
0:12:25.920 --> 0:12:29.960
So to optimize that stuff, you end up with the type of language that has to cater for

151
0:12:29.960 --> 0:12:33.080
that.

152
0:12:33.080 --> 0:12:38.480
But nobody loves programming in C++, and C programming is also hard to shoot yourself

153
0:12:38.480 --> 0:12:42.840
in the food language, I call it.

154
0:12:42.840 --> 0:12:47.000
So it's nice if you can have a language that has somewhat stronger guarantees, but it's

155
0:12:47.000 --> 0:12:50.920
still blazingly fast and still kind of imperative.

156
0:12:50.920 --> 0:12:55.960
And then have something like guile, which actually allows you to be productive, right?

157
0:12:55.960 --> 0:12:57.480
And do functional programming when you want to.

158
0:12:57.480 --> 0:12:59.760
So you end up with this type of mixture.

159
0:12:59.760 --> 0:13:04.560
Have I got five minutes?

160
0:13:04.560 --> 0:13:06.840
Five minutes to questions.

161
0:13:06.840 --> 0:13:14.120
So one additional thing I would like to show you.

162
0:13:14.120 --> 0:13:23.160
Sorry, that's mine.

163
0:13:23.160 --> 0:13:29.320
So you can, I mean, using the guile libraries, you can essentially build up lists, which

164
0:13:29.320 --> 0:13:39.600
is the fundamental for many lists like programming efforts, but when you talk about performance,

165
0:13:39.600 --> 0:13:41.960
you'd like to deal with arrays of data.

166
0:13:41.960 --> 0:13:49.000
So continuous blocks of memory where you have integers in a row or doubles in a row, and

167
0:13:49.000 --> 0:13:53.160
you're able to address these integers and doubles.

168
0:13:53.160 --> 0:13:58.040
Of course, you can do that from guile, but if you write high performance code like we

169
0:13:58.040 --> 0:14:03.040
do, you want to be able to use it as a vector in Zig.

170
0:14:03.040 --> 0:14:06.960
So you have an index, the base pointer to the vector, and then you have an index, and

171
0:14:06.960 --> 0:14:11.600
you should be able to fetch out the data object that you want.

172
0:14:11.600 --> 0:14:16.200
So just wrote a little example here.

173
0:14:16.200 --> 0:14:17.200
So this is the list example.

174
0:14:17.200 --> 0:14:25.360
Let me see if I can find the vector array.

175
0:14:25.360 --> 0:14:32.800
So you have, I wrote a little, let me move that down.

176
0:14:32.800 --> 0:14:39.040
A little Zig function, which says my increment in floating points 64 bits vector Zig.

177
0:14:39.040 --> 0:14:41.920
I'm very good at naming, apparently.

178
0:14:41.920 --> 0:14:46.840
You pass in a guile vector, which is again a scheme object.

179
0:14:46.840 --> 0:14:50.200
It returns a scheme object, which is again a vector, right?

180
0:14:50.200 --> 0:14:57.040
And then it calls this guile function, scheme F64, that's where the naming came from.

181
0:14:57.040 --> 0:14:59.040
Came from guile.

182
0:14:59.040 --> 0:15:12.320
So I said X, so I said in the vector, I set at position one, so index one, I set the value

183
0:15:12.320 --> 0:15:13.920
3.7.

184
0:15:13.920 --> 0:15:18.800
So this is kind of happening in guile-ish C code.

185
0:15:18.800 --> 0:15:23.080
So it's calling essentially guile C functions.

186
0:15:23.080 --> 0:15:24.720
And I proved that it works.

187
0:15:24.720 --> 0:15:31.160
You can look it up.

188
0:15:31.160 --> 0:15:33.440
But here, I'm using a proper index.

189
0:15:33.440 --> 0:15:35.520
I think, let me see.

190
0:15:35.520 --> 0:15:36.520
Yeah.

191
0:15:36.520 --> 0:15:42.160
So you increment the F64 vector, right?

192
0:15:42.160 --> 0:15:44.160
This is the old version.

193
0:15:44.160 --> 0:15:49.160
Here I get a handle on the array.

194
0:15:49.160 --> 0:15:52.800
And then I get data.

195
0:15:52.800 --> 0:15:53.800
So I get a vector here.

196
0:15:53.800 --> 0:15:59.920
If our data is a vector, of the elements of the vector array, right?

197
0:15:59.920 --> 0:16:06.080
And then I index the data points based on the vector of the floating point and show

198
0:16:06.080 --> 0:16:10.680
zero, one, and number two.

199
0:16:10.680 --> 0:16:11.680
And that's what it shows.

200
0:16:11.680 --> 0:16:16.120
So I'm not going to do that live, but that's the idea.

201
0:16:16.120 --> 0:16:20.920
Yeah, I'm done.

202
0:16:20.920 --> 0:16:25.120
Yeah, so it's in a nutshell.

203
0:16:25.120 --> 0:16:30.680
The code and the slides are online, so you can have a look, have a go.

204
0:16:30.680 --> 0:16:33.680
Any questions?

205
0:16:33.680 --> 0:16:36.680
Yes.

206
0:16:36.680 --> 0:16:46.440
I'm trying to learn the same language that we cannot name right now.

207
0:16:46.440 --> 0:16:53.520
And I was wondering, how long did you try to log the board?

208
0:16:53.520 --> 0:16:54.520
I checked the computer.

209
0:16:54.520 --> 0:16:55.520
I tried quite long, actually.

210
0:16:55.520 --> 0:16:57.880
So I read five books.

211
0:16:57.880 --> 0:17:03.560
I probably took two months and wrote a thousand lines of code or so to decide it wasn't for

212
0:17:03.560 --> 0:17:04.560
me.

213
0:17:04.560 --> 0:17:10.240
But yeah, I hear quite a few stories like this, which are very similar.

214
0:17:10.240 --> 0:17:15.120
I think it's a language for masochists.

215
0:17:15.120 --> 0:17:16.120
A language for masochists.

216
0:17:16.120 --> 0:17:18.680
You have to be a brilliant person.

217
0:17:18.680 --> 0:17:19.680
A brilliant masochist.

218
0:17:19.680 --> 0:17:20.680
Let's put it that way.

219
0:17:20.680 --> 0:17:23.760
You have to be brilliant to keep that all in your head.

220
0:17:23.760 --> 0:17:30.280
You're going to get garbage collectors soon again, they say.

221
0:17:30.280 --> 0:17:31.280
Yeah, so see.

222
0:17:31.280 --> 0:17:40.440
Yeah, I'm not complaining about it because people who program in Rust, they do better

223
0:17:40.440 --> 0:17:41.800
than in C++.

224
0:17:41.800 --> 0:17:43.360
So the compiler does help a lot.

225
0:17:43.360 --> 0:17:45.480
I think it does lead to better code.

226
0:17:45.480 --> 0:17:52.960
I've given students work in Rust and they do write better code because the compiler

227
0:17:52.960 --> 0:17:53.960
actually helps you.

228
0:17:53.960 --> 0:17:59.880
But it also takes them a long time to get something done.

229
0:17:59.880 --> 0:18:01.480
So it depends on what your goals are.

230
0:18:01.480 --> 0:18:07.520
If you have to write perfect software to launch your rocket, you might want to do it that

231
0:18:07.520 --> 0:18:08.840
way.

232
0:18:08.840 --> 0:18:13.680
But if it's just like me, in my job we write mostly throwaway code.

233
0:18:13.680 --> 0:18:15.680
It doesn't pay.

234
0:18:15.680 --> 0:18:19.520
What kind of applications do you want for it?

235
0:18:19.520 --> 0:18:20.520
Bioinformatics.

236
0:18:20.520 --> 0:18:21.520
I'm in science.

237
0:18:21.520 --> 0:18:25.400
Yeah, we do have long-lived code, but it's usually by accident.

238
0:18:25.400 --> 0:18:28.400
So you write something.

239
0:18:28.400 --> 0:18:33.320
People start using it and then 10 years later it becomes mainstream.

240
0:18:33.320 --> 0:18:38.400
It actually happens to one of our projects.

241
0:18:38.400 --> 0:18:41.400
And then it's too late to do better.

242
0:18:41.400 --> 0:18:49.400
So at one point you showed us how to convert the Zig file to C, right?

243
0:18:49.400 --> 0:19:01.400
And it wasn't really necessary in order to call the style stuff from within Zig?

244
0:19:01.400 --> 0:19:03.400
No.

245
0:19:03.400 --> 0:19:05.640
The guy that adheres to the C ABI, right?

246
0:19:05.640 --> 0:19:08.760
So it has a C calling interface.

247
0:19:08.760 --> 0:19:10.560
But I use the scheme object.

248
0:19:10.560 --> 0:19:12.520
So that came from there.

249
0:19:12.520 --> 0:19:15.400
But actually the scheme object is really simple when you look at it.

250
0:19:15.400 --> 0:19:20.400
So it could be that you can just roll your own.

251
0:19:20.400 --> 0:19:21.400
Yeah?

252
0:19:21.400 --> 0:19:24.400
So you created the language from scratch.

253
0:19:24.400 --> 0:19:31.400
So why did you decide to use the semicolons and curly braces in it?

254
0:19:31.400 --> 0:19:32.400
Well, I didn't design Zig.

255
0:19:32.400 --> 0:19:33.400
I should have been clearer.

256
0:19:33.400 --> 0:19:34.400
Sorry.

257
0:19:34.400 --> 0:19:39.400
Nor have I any input on Guile.

258
0:19:39.400 --> 0:19:41.400
Unlike other people here.

259
0:19:41.400 --> 0:19:47.400
But yeah, I dabble in languages.

260
0:19:47.400 --> 0:19:52.400
I use people who often ask me what is the language of the year.

261
0:19:52.400 --> 0:19:54.400
I think at that point it was Scala.

262
0:19:54.400 --> 0:19:57.400
I'm embarrassed to say.

263
0:19:57.400 --> 0:20:03.400
But I think Zig does appeal to me.

264
0:20:03.400 --> 0:20:18.400
Yeah?

265
0:20:18.400 --> 0:20:25.400
So Fortran is a bit difficult because the very different languages Fortran and Julia.

266
0:20:25.400 --> 0:20:29.400
But I think Zig tries to be in the space of C.

267
0:20:29.400 --> 0:20:30.400
Yeah.

268
0:20:30.400 --> 0:20:38.400
Yeah, it's a general purpose, systems programming and uncompromising speed.

269
0:20:38.400 --> 0:20:40.400
And it is fast.

270
0:20:40.400 --> 0:20:47.400
The compiler itself compiles itself in 10 minutes on a standard machine.

271
0:20:47.400 --> 0:20:52.400
But I think, for example, it doesn't have exception handling.

272
0:20:52.400 --> 0:20:57.400
Yeah, it uses a different approach, which is more like a maybe monad.

273
0:20:57.400 --> 0:21:03.400
And even C++, typically you'll have exception handling, which every time you call a function,

274
0:21:03.400 --> 0:21:07.400
it has to carry state with it to be able to unroll the stack.

275
0:21:07.400 --> 0:21:09.400
And this causes overheads.

276
0:21:09.400 --> 0:21:11.400
That's one thing.

277
0:21:11.400 --> 0:21:17.400
With C++, the other thing is that in the background there's often a lot of memory allocation going on.

278
0:21:17.400 --> 0:21:22.400
Especially when it's kind of unavoidable to use SCL these days as best practice.

279
0:21:22.400 --> 0:21:28.400
And I find that in Zig, because it's closer to the C philosophy, it's actually much faster.

280
0:21:28.400 --> 0:21:32.400
So, oh hey.

281
0:21:32.400 --> 0:21:38.400
Are you planning to write a tutorial in the guide manual for how to do this?

282
0:21:38.400 --> 0:21:40.400
Yeah, we should.

283
0:21:40.400 --> 0:21:43.400
I think the next speaker needs to go on.

284
0:21:43.400 --> 0:21:44.400
No?

285
0:21:44.400 --> 0:21:46.400
How much time do you have?

286
0:21:46.400 --> 0:21:47.400
Two minutes to go on, one and a half.

287
0:21:47.400 --> 0:21:48.400
Yeah, you can.

288
0:21:48.400 --> 0:21:58.400
It's good to switch.

289
0:21:58.400 --> 0:22:27.400
Straight on.


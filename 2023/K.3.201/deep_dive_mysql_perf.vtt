WEBVTT

00:00.000 --> 00:12.320
Now, we already spoke here a little bit about developers,

00:12.320 --> 00:16.640
and especially the front-end developers.

00:16.640 --> 00:19.080
One purpose of this talk for me is to

00:19.080 --> 00:22.280
really start with this bridge of the gap,

00:22.280 --> 00:24.400
which I often see between the people who

00:24.400 --> 00:26.720
really have a databases of

00:26.720 --> 00:30.640
a center of their at least professional life.

00:30.640 --> 00:33.480
Any people who are writing application and

00:33.480 --> 00:37.360
databases of them like a thing.

00:37.360 --> 00:41.280
It's like a toilet. You do your business anymore in your life.

00:41.280 --> 00:43.600
I mean something like that.

00:43.600 --> 00:49.160
For those people, the database is typically like a black box.

00:49.160 --> 00:52.080
There is this black box,

00:52.080 --> 00:55.000
and what I want is I

00:55.000 --> 00:58.640
connect to the service point which is provided to me.

00:58.640 --> 01:01.720
I connect it quickly, I run my queries,

01:01.720 --> 01:03.640
and that's all I care about.

01:03.640 --> 01:10.920
All that change buffer combia, never heard about it.

01:10.920 --> 01:13.520
What about queries?

01:13.520 --> 01:17.200
What would you as a developer think about queries?

01:17.200 --> 01:20.120
Well, these are actually pretty simple things.

01:20.120 --> 01:21.680
When you connect it to a service point,

01:21.680 --> 01:24.640
you add queries you want them to complete if no errors.

01:24.640 --> 01:29.080
You want them to provide you correct results set,

01:29.080 --> 01:30.520
because if you wouldn't,

01:30.520 --> 01:32.440
we could alter all the MySQL tables to

01:32.440 --> 01:35.440
black hole and get a fantastic performance.

01:35.440 --> 01:37.520
No errors too.

01:37.520 --> 01:41.200
Also, you want them to make sure that they complete in

01:41.200 --> 01:45.080
that response time what your application expects.

01:45.080 --> 01:48.320
I think that is a very important thing to understand.

01:48.320 --> 01:51.560
If you look at from the individual developer standpoint,

01:51.560 --> 01:53.120
like writing application, hey,

01:53.120 --> 01:58.720
performance response time for my queries is all I care about,

01:58.720 --> 02:01.480
and how that's internal database kitchen works,

02:01.480 --> 02:03.920
somebody else's problem.

02:05.120 --> 02:09.080
Now, if you think about response time from

02:09.080 --> 02:11.440
their database point of view,

02:11.440 --> 02:14.320
that is often seen like,

02:14.320 --> 02:17.480
well, I see that response time for a query

02:17.480 --> 02:20.240
is an average or whatever distribution.

02:20.240 --> 02:22.120
We'll talk about that later.

02:22.120 --> 02:27.280
But that is different from what business cares about.

02:27.280 --> 02:30.560
If you think about the business point of view,

02:30.560 --> 02:31.720
you think about, well,

02:31.720 --> 02:35.120
do my user have outstanding experience

02:35.120 --> 02:39.400
in terms of performance if all of the application interactions.

02:39.400 --> 02:42.160
That means like a search should work and place

02:42.160 --> 02:45.400
an order should work and whatever.

02:45.400 --> 02:47.640
Database is important part of that,

02:47.640 --> 02:51.600
of course, but not is there a complete part.

02:51.600 --> 02:54.520
What is interesting in this case is what as

02:54.520 --> 02:56.960
database engineers who often talk about

02:56.960 --> 03:02.680
those different events like a bad performance and the downtime.

03:02.680 --> 03:05.040
Say, well, no, no, no. We weren't down.

03:05.040 --> 03:10.560
It just was taking 50 minutes to run my very basic query.

03:10.560 --> 03:13.160
Well, from user standpoint,

03:13.160 --> 03:15.680
the bad performance,

03:15.680 --> 03:18.880
very bad performance isn't distinguishable from downtime.

03:18.880 --> 03:21.280
Because A, we don't have variance,

03:21.280 --> 03:23.080
but then even if people are very patient,

03:23.080 --> 03:25.840
then the browser write or some other time out will happen,

03:25.840 --> 03:27.800
and nobody gives a shit about that query which

03:27.800 --> 03:30.880
may still continue to be running.

03:30.880 --> 03:33.960
Another thing to understand about

03:33.960 --> 03:40.080
query performance is you do not want to focus on the averages.

03:40.080 --> 03:42.880
I like this one saying,

03:42.880 --> 03:45.800
but there was one silly demand who tried to cross

03:45.800 --> 03:49.760
the river in the average one meter deep.

03:49.760 --> 03:53.640
That is same applies to the query.

03:53.640 --> 03:56.560
If your average query time is x,

03:56.560 --> 03:59.200
well, that means pretty much nothing.

03:59.200 --> 04:04.960
You need to understand more about that.

04:04.960 --> 04:07.800
I like in this case to look at

04:07.800 --> 04:14.640
their percentiles and even more to make sure you can look at

04:14.640 --> 04:21.520
a specific distribution of a query response time.

04:21.520 --> 04:25.560
If you're that, that gives you a lot more insight.

04:25.560 --> 04:28.520
Now, one thing to understand about the percentile,

04:28.520 --> 04:30.160
you may be looking at it and saying,

04:30.160 --> 04:36.840
well, great, my queries have this decent 99 percentile.

04:36.840 --> 04:41.120
But that does not mean on a business side,

04:41.120 --> 04:43.920
what 99 percent of your users have a good or

04:43.920 --> 04:46.040
like acceptable experience. Why is that?

04:46.040 --> 04:47.360
Well, because guess what?

04:47.360 --> 04:49.520
The single user interaction can

04:49.520 --> 04:52.160
correspond to a lot of queries sequentially,

04:52.160 --> 04:56.040
which all adapt and typically through

04:56.040 --> 05:00.560
their joining user has a number of those interactions.

05:00.560 --> 05:04.520
So I would say even 99 percentile,

05:04.520 --> 05:08.520
that may all well depending on your application,

05:08.520 --> 05:12.440
only correspond to 50 percent of user session.

05:12.440 --> 05:15.440
So if you really see their complicated,

05:15.440 --> 05:20.280
larger environments, they are really focused on

05:20.280 --> 05:28.000
either relatively short SLA for rather high percentiles.

05:28.000 --> 05:30.880
Another thing that I would encourage to pay attention to

05:30.880 --> 05:35.440
is errors and make sure you

05:35.440 --> 05:38.920
are measuring response time for those as well.

05:38.920 --> 05:42.120
Because errors actually can be offered two kinds.

05:42.120 --> 05:44.080
Fast errors and slow errors.

05:44.080 --> 05:47.000
In certain cases, let's say if your table doesn't exist,

05:47.000 --> 05:50.760
you may be like get the response time straight away.

05:50.760 --> 05:53.600
If you put all your error queries

05:53.600 --> 05:56.760
and actually normal queries in the same bucket,

05:56.760 --> 05:58.080
you may say, oh my gosh,

05:58.080 --> 06:01.600
my response times are doing so well.

06:01.600 --> 06:05.080
But on the other hand, if your query is, for example,

06:05.080 --> 06:07.120
error is a lock-weight timeout,

06:07.120 --> 06:09.120
then that is a slow error.

06:09.120 --> 06:14.680
It actually will have a high response time than the normal cases.

06:14.680 --> 06:18.640
That is why I always suggest to make sure we

06:18.640 --> 06:22.040
measure response time for normal queries

06:22.040 --> 06:25.480
and for queries of problems differently.

06:25.480 --> 06:28.800
Another thing which is very important is looking at

06:28.800 --> 06:35.640
response time over time because traffic changes,

06:35.640 --> 06:38.160
a lot of things are going on in the system and just saying,

06:38.160 --> 06:42.600
hey, I'll have a response time of x over some long period of time.

06:42.600 --> 06:43.960
It's not very helpful.

06:43.960 --> 06:48.240
Also, what you would see in many cases,

06:48.240 --> 06:52.560
if you still start those like a small performance problems,

06:52.560 --> 06:58.400
like SLA violations which are if unfixed,

06:58.400 --> 07:01.200
they convert in the downtime.

07:01.200 --> 07:03.960
Like for example, in my SQL world,

07:03.960 --> 07:07.960
you may say, well, I have forgotten this runaway query.

07:07.960 --> 07:10.520
And my history accumulates.

07:10.520 --> 07:14.640
It will slowly increase and increase your response time.

07:14.640 --> 07:16.640
If you measure that over time and say, well,

07:16.640 --> 07:19.080
something is not trending in the right directions,

07:19.080 --> 07:21.880
you probably can fix it before that will

07:21.880 --> 07:25.680
be seen as a downtime by your users.

07:25.680 --> 07:32.120
If you are not, then not so much.

07:32.120 --> 07:35.840
This is example what we have here.

07:35.840 --> 07:39.400
You often may see something like this as well

07:39.400 --> 07:43.440
for where all the queries have like a spike in the response time,

07:43.440 --> 07:44.880
which you often make a response to

07:44.880 --> 07:48.080
something external happening in the environment.

07:48.080 --> 07:50.200
I think here is what is very interesting,

07:50.200 --> 07:52.280
especially for us running in the Cloud,

07:52.280 --> 07:55.960
we only have limited observability to environment.

07:55.960 --> 07:58.240
If there's some shit going on on

07:58.240 --> 08:00.920
an Amazon backend, they're not going to tell us that.

08:00.920 --> 08:04.760
You know what, we had let's say some free hard drives failed,

08:04.760 --> 08:10.920
which back our EBS and we had to some rebalance yada yada.

08:13.160 --> 08:17.240
The another question I would ask is where we want to

08:17.240 --> 08:20.080
measure response time from queries.

08:20.080 --> 08:23.800
In my opinion, both application view and database view

08:23.800 --> 08:26.040
in the combinations are very

08:26.040 --> 08:29.360
helpful because the application can see real thing.

08:29.360 --> 08:31.360
If your network, for example,

08:31.360 --> 08:34.400
is adding some latency or whatever,

08:34.400 --> 08:36.160
then you will see that from application,

08:36.160 --> 08:37.720
not so much from a database,

08:37.720 --> 08:39.680
because it's only sees from,

08:39.680 --> 08:46.160
hey, I got response to then it's sent the data back.

08:46.160 --> 08:49.840
But the database view allows you often to see

08:49.840 --> 08:53.520
a lot more insight about what had been going on inside,

08:53.520 --> 08:54.880
where from application side,

08:54.880 --> 08:59.880
we often can just capture the query time,

08:59.880 --> 09:04.640
maybe some very basic additional parameters. So,

09:04.640 --> 09:08.000
what is spoke from our business view?

09:08.000 --> 09:11.760
Well, we already said what that all users have

09:11.760 --> 09:13.800
outstanding performance experience of

09:13.800 --> 09:15.680
all the application interactions.

09:15.680 --> 09:19.120
Let's now try to break it down a little bit

09:19.120 --> 09:22.600
more to what that may mean.

09:22.600 --> 09:25.120
In this case, I want to introduce

09:25.120 --> 09:28.080
this little project of Laga from you.

09:28.080 --> 09:31.960
This is SQL Commendure project by Google,

09:32.520 --> 09:36.040
which is pretty cool in terms of what it's

09:36.040 --> 09:38.440
allows to pass you the metadata,

09:38.440 --> 09:43.080
which you understand as developer all the way to SQL query.

09:43.080 --> 09:45.480
They implemented that support

09:45.480 --> 09:48.520
from a number of frameworks,

09:48.520 --> 09:51.680
and it's also supported in

09:51.680 --> 09:55.960
their Google Cloud monitoring environment.

09:55.960 --> 10:00.320
I would very much see that developed more,

10:00.320 --> 10:04.600
and for at least ask them to some shared standards

10:04.600 --> 10:06.520
between the databases or whatever,

10:06.520 --> 10:11.800
how we can augment query information with tags,

10:11.800 --> 10:15.680
values which users care about.

10:15.680 --> 10:17.640
So, what are the possibilities which can be

10:17.640 --> 10:19.200
quite helpful in this regard?

10:19.200 --> 10:21.880
Well, finding, for example,

10:21.880 --> 10:23.920
who is our actual user attendant,

10:23.920 --> 10:26.680
who is query corresponds because we often may

10:26.680 --> 10:31.200
have different performance issues.

10:31.200 --> 10:33.040
Finding the application,

10:33.040 --> 10:36.040
like some subset of application functionality

10:36.040 --> 10:39.360
where many of them may be hitting the application.

10:39.360 --> 10:41.880
Version information, maybe information about

10:41.880 --> 10:46.720
their engineer of a team who is responsible.

10:46.720 --> 10:50.360
I often see DBAs or SRAs team having problem like,

10:50.360 --> 10:53.640
oh, I see this nasty query which was shipped yesterday.

10:53.640 --> 10:56.160
I know because it was shipped today

10:56.160 --> 10:58.120
because I know it wasn't fair yesterday,

10:58.120 --> 11:00.760
but now having to find out who

11:00.760 --> 11:03.560
a hell introduced that stupid query,

11:03.560 --> 11:06.360
maybe problematic in a large environment.

11:06.440 --> 11:10.680
Now, a lot of focus and I think the core of

11:10.680 --> 11:14.000
a query based observability may be about the query.

11:14.000 --> 11:18.360
By query, I mean obviously like a query with

11:18.360 --> 11:25.480
the same except different parameters.

11:25.480 --> 11:27.520
That is very helpful because well,

11:27.520 --> 11:29.320
obviously they have a different complexity,

11:29.320 --> 11:33.240
different expected SLA and so on and so forth.

11:33.240 --> 11:38.600
The next way also to break things down for me would be to

11:38.600 --> 11:42.960
look at the schema or database.

11:42.960 --> 11:45.960
Why is that interesting?

11:45.960 --> 11:51.240
I just noticed right now what it's been cut a bit.

11:51.240 --> 11:55.960
See? Well, anyway, life is life.

11:55.960 --> 12:02.600
I'm just not going to be lucky in this room right here.

12:02.600 --> 12:05.520
But well, we can blame our windows, right?

12:05.520 --> 12:09.760
On this conference, we can and should blame windows.

12:11.120 --> 12:15.600
Well, why schema and database are also good?

12:15.600 --> 12:19.560
Because often you would separate in

12:19.560 --> 12:23.640
a multi-tenant applications different tenants by schema.

12:24.640 --> 12:29.480
In that case, that gives us a good profiling for performance

12:29.480 --> 12:35.440
of different schemas like we can see here.

12:35.440 --> 12:40.160
An example of this PMM tool.

12:40.160 --> 12:44.120
Another thing what I found is very helpful to find

12:44.120 --> 12:46.320
a way to separate the data by different tables.

12:46.320 --> 12:48.800
In many cases, you want to say, hey, you know what?

12:48.800 --> 12:54.240
How queries hitting given table is affected,

12:54.240 --> 12:57.640
especially if it did some change which relates to a table.

12:57.640 --> 13:01.240
Hey, you know what? I changed the indexing on this table.

13:01.240 --> 13:05.920
Let me see how all the queries hitting this table is impacted.

13:05.920 --> 13:11.400
Very helpful because there may be some surprising differences.

13:11.400 --> 13:15.600
Database users, that is another thing which is quite

13:15.600 --> 13:18.200
helpful because that often allows us to

13:18.200 --> 13:20.120
identify the service application.

13:20.120 --> 13:22.120
If you're following good security practices,

13:22.120 --> 13:24.760
you would not let all your applications

13:24.760 --> 13:29.080
just use one username, not a good idea.

13:29.080 --> 13:31.640
Also find human troublemakers which are

13:31.640 --> 13:36.440
doing having direct access.

13:36.440 --> 13:40.360
So many times you'll find somebody running

13:40.360 --> 13:42.440
a query and say, okay, well, yeah,

13:42.440 --> 13:45.080
it's slow but wherever I'll go for lunch,

13:45.080 --> 13:48.440
I have time. Well, you may have time,

13:48.440 --> 13:52.000
but your database may not.

13:52.000 --> 13:57.680
Here's an example how we provide that.

13:57.680 --> 14:02.640
I also mentioned database host and indexes in

14:02.640 --> 14:06.320
many instances in many cases that is very helpful

14:06.320 --> 14:08.200
because even if you may think,

14:08.200 --> 14:11.880
oh, my different database instance should perform the same.

14:11.880 --> 14:15.960
Well, world is a messy place and world in the Cloud is even

14:15.960 --> 14:19.560
messy place, they may not exactly have

14:19.560 --> 14:21.960
the same performance due to

14:21.960 --> 14:24.880
some strange configuration differently,

14:24.880 --> 14:28.640
having a bad day or even maybe having a different load.

14:28.640 --> 14:31.120
That is a good to be able to break it down.

14:31.120 --> 14:33.840
Right then you see some of your queries are not

14:33.840 --> 14:39.400
performing very well. I would also look at

14:39.400 --> 14:42.480
the same stuff from a web server or application server instance.

14:42.480 --> 14:45.760
Because again, if you have maybe like a 100 nodes,

14:45.760 --> 14:48.720
you deploy this application, you may think, hey,

14:48.720 --> 14:51.880
we're all going to perform the same,

14:51.880 --> 14:53.240
hitting the database, well,

14:53.240 --> 14:54.720
that is not always the case.

14:54.720 --> 14:56.880
They have seen changes from people saying,

14:56.880 --> 14:59.360
one of them is misconfigured or for some reason

14:59.360 --> 15:00.720
cannot connect the cache.

15:00.720 --> 15:03.960
So it's hitting 10 times more queries

15:03.960 --> 15:05.720
right on the database than it should be,

15:05.720 --> 15:09.400
or the application rollout didn't go well,

15:09.400 --> 15:14.040
where you've eliminated nasty query on 99 of application instance,

15:14.040 --> 15:15.160
but not some others.

15:15.160 --> 15:18.760
It's very good to actually be able to validate that.

15:18.760 --> 15:20.320
Because what you would see,

15:20.320 --> 15:23.280
or like I gave from a DBA standpoint,

15:23.280 --> 15:26.720
developers, sysad means storage people,

15:26.720 --> 15:28.520
they are going to tell you shit,

15:28.520 --> 15:30.680
but they are going to lie.

15:30.680 --> 15:32.760
They are going to lie.

15:32.760 --> 15:35.000
Maybe not intentionally,

15:35.000 --> 15:38.320
maybe cause of a ignorance and limitation of fair tool,

15:38.320 --> 15:40.400
but as a DBA, a CD or something,

15:40.400 --> 15:43.520
you want to point them out to where you can say,

15:43.520 --> 15:45.960
look, this, I have evidence.

15:45.960 --> 15:49.000
Evidence is good.

15:49.000 --> 15:51.120
So clients cost.

15:51.120 --> 15:55.400
Custom tags is very helpful if you can extend.

15:55.400 --> 15:59.920
That is what we spoke about SQL commenters,

15:59.920 --> 16:04.400
something else, which I find very helpful,

16:04.400 --> 16:07.640
which we cannot quite easily get with MySQL,

16:07.640 --> 16:12.040
but being able to separate the query by the query plans.

16:12.040 --> 16:15.360
Often you may have a query which looks the same,

16:15.360 --> 16:19.200
but it may take different execution plans.

16:19.200 --> 16:23.080
And often that may be correlated to its performance.

16:23.080 --> 16:25.560
In certain cases, it is totally fine,

16:25.560 --> 16:27.440
very different situations.

16:27.440 --> 16:31.840
Sometimes MySQL optimizer may get a little bit crazy

16:31.840 --> 16:36.600
just and have that optimizer plan brief for no good reason,

16:36.600 --> 16:39.280
which may not be very easy to catch,

16:40.120 --> 16:42.520
and it would be helpful to do.

16:42.520 --> 16:46.560
What I also would like to highlight

16:46.560 --> 16:49.200
is when you find the specific query and say,

16:49.200 --> 16:52.960
hey, this query has nasty performance,

16:52.960 --> 16:55.000
you often want to understand

16:55.000 --> 16:58.320
where that query response time comes from.

16:58.320 --> 17:03.320
And that is some of the things where it can come from.

17:03.640 --> 17:08.640
Surin-FM are relatively easy to find out.

17:10.600 --> 17:12.480
Surin are not very well.

17:12.480 --> 17:16.720
For example, wherever query has waited on available CPU

17:16.720 --> 17:19.240
because system was overly saturated,

17:19.240 --> 17:21.720
well, you can't really see on per query basics.

17:21.720 --> 17:24.120
You can only see those things, well,

17:24.120 --> 17:27.000
my CPU was kind of like a super packed

17:27.000 --> 17:29.040
right on a period of time.

17:29.040 --> 17:32.840
Okay, here are a couple of other things

17:32.840 --> 17:34.880
to consider when you're looking at the queries.

17:34.880 --> 17:39.080
One, you want to really look separately at the bad queries

17:39.080 --> 17:41.680
versus victims, because sometimes you will see,

17:41.680 --> 17:43.600
oh, queries are getting slower,

17:43.600 --> 17:45.280
but it's not because of them.

17:45.280 --> 17:48.360
It's about some other nasty queries.

17:48.360 --> 17:51.360
Maybe that is your Java developer who thought,

17:51.360 --> 17:53.000
well, to solve my problems,

17:53.000 --> 17:58.000
I will just launch with stuff with 200 threads,

18:00.520 --> 18:02.000
and make sure I am good,

18:02.000 --> 18:05.800
but everything else is kind of slowed down.

18:05.800 --> 18:09.440
And that's maybe tricky.

18:09.440 --> 18:11.800
One thing is what you should not forget

18:11.800 --> 18:13.240
the currently running queries.

18:13.240 --> 18:16.520
In many cases, like if you look in performance schema queries

18:16.520 --> 18:18.960
by digest, that gives you what happened in the past.

18:18.960 --> 18:22.960
But believe me, if you started 50 instances

18:22.960 --> 18:27.320
of some very bad query, which continues to run,

18:27.320 --> 18:30.880
well, that may be the reason of your problem, not the past.

18:30.880 --> 18:33.560
And to connect to that, I think it is less problem

18:33.560 --> 18:37.240
in my school right now if you're using query timeouts,

18:37.240 --> 18:38.680
which is a very good practice,

18:38.680 --> 18:40.120
because if you say, hey, you know what,

18:40.120 --> 18:42.040
for all my interactive queries, by default,

18:42.040 --> 18:44.880
I set the timeout of, let's say, 15 seconds,

18:44.880 --> 18:47.920
then you should not care too much about your past queries,

18:47.920 --> 18:50.000
because, well, you know what,

18:50.000 --> 18:53.680
everything gets killed after 15 minutes.

18:53.680 --> 18:55.280
Also, 50 seconds, right?

18:55.280 --> 18:57.960
You should not ignore the stuff which is invisible

18:57.960 --> 18:59.760
from a query standpoint, right?

18:59.760 --> 19:04.760
Databases do a lot of shit in the background.

19:04.800 --> 19:07.440
You may also do things, or your operation teams,

19:07.440 --> 19:11.000
like, well, backups, or provisioning

19:11.000 --> 19:13.200
another node for cloning, right?

19:13.200 --> 19:16.880
Or the clouds, or wherever your VM system

19:16.880 --> 19:18.760
need to do something in the background,

19:18.760 --> 19:20.400
it may not be directly visible,

19:20.400 --> 19:22.640
but that can impact your query performance, right?

19:22.640 --> 19:25.840
So sometimes, well, when you observe a query impact,

19:25.840 --> 19:28.880
and you can't really see what is causing that,

19:29.720 --> 19:31.520
it's possible.

19:31.520 --> 19:34.680
I also would encourage to avoid

19:34.680 --> 19:36.800
what I would call a biased something.

19:36.800 --> 19:38.680
I see people sometimes would say, hey, you know what,

19:38.680 --> 19:41.480
we will set long query time to one second,

19:41.480 --> 19:42.880
and only look at the queries

19:42.880 --> 19:44.440
which are more than one second in length.

19:44.440 --> 19:48.400
Well, you may be only focusing on the outliers, right?

19:48.400 --> 19:51.800
And missing the possibility to optimize other queries, right?

19:51.800 --> 19:56.560
Or actually even focusing on the queries

19:56.560 --> 20:01.560
which a response of providing that experience, right,

20:01.760 --> 20:05.280
for your users.

20:05.280 --> 20:07.640
Okay, we find another thing,

20:07.640 --> 20:10.920
like a last minute I have, or something.

20:10.920 --> 20:14.040
I wanted to say, hey, what I would like to see

20:14.040 --> 20:16.120
from my school to do better.

20:16.120 --> 20:17.560
Who is Kenny?

20:17.560 --> 20:18.400
No Kenny?

20:20.800 --> 20:22.720
Yes, he's always hiding, right?

20:22.720 --> 20:25.640
He probably wanted to get another sandwich, damn it.

20:26.880 --> 20:29.880
Okay, so here are some things that I would like to see.

20:29.880 --> 20:33.160
One is better support of prepared statements, right?

20:33.160 --> 20:36.200
And right now, right, it's kind of,

20:37.560 --> 20:39.160
not done in the same way, right?

20:39.160 --> 20:44.160
Which is, I think is a problem, right?

20:45.320 --> 20:48.640
Now, I would say consider grouping data by time.

20:48.640 --> 20:50.640
In certain cases right now, you get like

20:51.640 --> 20:54.000
all the statements in one table, right?

20:54.000 --> 20:56.000
And you have a lot of statement variety,

20:56.000 --> 20:58.480
that table tends to overflow, right?

20:58.480 --> 21:01.200
Which is not really helpful, right?

21:01.200 --> 21:06.040
And if you have to kind of reset your queries all the time,

21:06.040 --> 21:11.040
that is not very good practice in my opinion.

21:12.160 --> 21:16.320
Provide list of tables query touches, right?

21:16.320 --> 21:18.520
That is very helpful because, well,

21:18.520 --> 21:21.640
my school parser already knows it, right?

21:21.640 --> 21:23.720
It knows tables query touches,

21:23.720 --> 21:26.120
but it's very hard to parse it out from a query,

21:26.120 --> 21:30.200
especially if you consider views, right?

21:30.200 --> 21:32.800
I don't know by looking at the query alone,

21:32.800 --> 21:34.840
wherever something is a table or a view, right?

21:34.840 --> 21:38.840
So in this case, information about plan ID, right?

21:38.840 --> 21:42.720
I would like to see for the query, right?

21:42.720 --> 21:45.480
Some sort of plan hash or something so I know

21:47.040 --> 21:49.160
then query is using something like that.

21:49.160 --> 21:52.280
And also what I would call like a top weight summary, right?

21:52.280 --> 21:54.880
Right now we have information about the weights

21:54.880 --> 21:57.940
in MySQL performance query and about query,

21:57.940 --> 22:02.320
but I cannot see and say, oh, that query was slow

22:02.320 --> 22:06.280
because it spent XYZ amount of weight on something

22:06.280 --> 22:07.700
or whatever, right?

22:07.700 --> 22:12.480
Or at least kind of like a small class of queries, right?

22:12.480 --> 22:14.040
I don't think that's convenient.

22:14.040 --> 22:19.040
Well, with that, that's all I had to say.

22:19.120 --> 22:22.960
Hope that will help you to avoid tuning your indexes

22:22.960 --> 22:26.200
by the credit card.

22:27.960 --> 22:29.280
And yes.

22:29.280 --> 22:32.200
Oh, I have a time for questions.

22:32.200 --> 22:34.280
You told me like Peter, five minutes.

22:36.520 --> 22:38.220
Oh, to answer I have a time for questions.

22:38.220 --> 22:39.840
Yes, any questions?

22:43.240 --> 22:44.960
No, oh yeah.

22:44.960 --> 22:46.840
What's the difference or advantages

22:46.840 --> 22:48.360
of this SQL command of things

22:48.360 --> 22:50.240
compared to what open tracing standard

22:50.240 --> 22:53.040
as because task of tracing the whole thing?

22:53.040 --> 22:55.520
What's the difference of SQL command?

22:55.520 --> 22:58.280
Well, what I would say in this case, yes.

22:58.280 --> 23:01.600
I mean, there is obviously open tracing framework, right?

23:01.600 --> 23:03.480
Which you can use.

23:03.480 --> 23:07.120
This gets specifically to the database

23:07.120 --> 23:12.120
and specifically in every query, right?

23:13.440 --> 23:15.880
If you look at the open tracing framework,

23:15.880 --> 23:20.180
I think, you know, getting every query, right?

23:20.180 --> 23:24.560
Maybe a lot of volume out there, right?

23:24.560 --> 23:28.920
And again, I also think, well, the good thing

23:28.920 --> 23:31.480
if also SQL command, right, is what that does

23:31.480 --> 23:34.360
it automatically, if you will, right?

23:34.360 --> 23:39.360
That does not require to take an extra integration.

23:42.560 --> 23:43.560
Okay, anybody else?

23:45.200 --> 23:50.200
The PMN tool, is it like, it works also with MariaDB?

23:50.200 --> 23:54.360
Yeah, I mean, it works with MariaDB as well.

23:58.960 --> 24:00.120
Yes?

24:00.120 --> 24:02.560
Are there some good practices you can do

24:02.560 --> 24:05.480
to avoid your query just randomly going

24:05.480 --> 24:06.600
down a different plan?

24:08.280 --> 24:12.380
Well, there are practices, there are no good practices.

24:14.480 --> 24:17.680
Like, you can, there is a lot of optimizer hints

24:17.680 --> 24:18.520
you can use, right?

24:18.520 --> 24:20.600
So you can actually force the query to go

24:20.600 --> 24:23.280
like this particular stuff, right?

24:23.280 --> 24:26.960
But that also prevents optimizer choosing different plan

24:26.960 --> 24:28.600
if better plan becomes available.

24:30.800 --> 24:32.320
Yeah?

24:32.320 --> 24:36.600
Never use forced index, always use ignore index

24:36.600 --> 24:41.600
and you will mostly avoid what Peter just warned you about.

24:41.600 --> 24:42.440
Okay.

24:44.200 --> 24:47.400
Okay, well, then thank you folks.

24:47.400 --> 24:48.840
Thank you.

24:48.840 --> 25:17.800
Thank you.

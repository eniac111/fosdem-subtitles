WEBVTT

00:00.000 --> 00:12.200
Welcome to the virtualization room.

00:12.200 --> 00:15.920
Similarly, we'll talk about OPD virtualization.

00:15.920 --> 00:17.120
Enjoy.

00:17.120 --> 00:19.840
So, hi-hole.

00:22.480 --> 00:25.840
Nice to see you here.

00:25.840 --> 00:29.480
Today, we're going to talk about OPD virtualization.

00:29.480 --> 00:32.320
We're going to have just a quick intro

00:32.320 --> 00:35.680
for who doesn't really know what OPD virtualization is,

00:35.680 --> 00:38.040
just to get a bit of context.

00:38.040 --> 00:42.540
Then, we are going to see how you can use

00:42.540 --> 00:47.000
a CSC to play with OPD virtualization at home

00:47.000 --> 00:51.360
in a really small footprint just if you want to try it,

00:51.360 --> 00:56.120
or if you want to start developing on OPD virtualization.

00:56.120 --> 00:59.320
We're going to see a couple of new features.

00:59.320 --> 01:02.120
I chose this one because they are cloud-native.

01:02.120 --> 01:06.160
I think that they are a bit different from what you use

01:06.160 --> 01:10.000
to see in a related kind of products.

01:10.000 --> 01:14.480
And then, we are going to see next challenges for us.

01:14.480 --> 01:16.160
So, let's start from OPD.

01:16.160 --> 01:17.480
What OPD is?

01:17.480 --> 01:21.680
OPD is a distribution of Kubernetes.

01:21.680 --> 01:28.360
It's a sibling distribution of OpenShift container platform,

01:28.360 --> 01:31.720
which is the data distribution of Kubernetes.

01:31.720 --> 01:38.480
OPD is the community of the upstream release of a VET.

01:38.480 --> 01:44.600
It's based on physical machines that can be virtual or virtual

01:44.600 --> 01:46.320
machines on a hyperscaler.

01:46.320 --> 01:48.880
In our case, it would be better to use

01:48.880 --> 01:51.160
virtualized nodes just because we are talking

01:51.160 --> 01:54.280
about a virtualization solution.

01:54.280 --> 01:57.200
Then, we are going to have hosts there.

01:57.200 --> 02:00.880
But nowadays, based on Fedora, Kuberos,

02:00.880 --> 02:04.800
but then we are going to see that this is going to change.

02:04.800 --> 02:07.200
Then, we have all the Kubernetes stack.

02:07.200 --> 02:12.040
And you can use it to start your application.

02:12.040 --> 02:14.320
Now, what is kubectl?

02:14.320 --> 02:19.880
Kubernetl is a set of virtualization APIs

02:19.880 --> 02:21.200
for Kubernetes.

02:21.200 --> 02:23.600
So, you can extend the Kubernetes

02:23.600 --> 02:27.160
in order to be able to run virtual machines that

02:27.160 --> 02:31.840
are in containers on your Kubernetes infrastructure.

02:31.840 --> 02:35.560
At the end, it's still using the KVM hypervisor.

02:35.560 --> 02:39.000
It's able to schedule and manage virtual machines

02:39.000 --> 02:42.160
as if they are native Kubernetes objects.

02:46.600 --> 02:51.520
What is its main advantage is that it's cloud-native.

02:51.520 --> 02:56.160
It means that you can use all the Kubernetes stack.

02:56.160 --> 03:00.280
So, the container networking interface for the network,

03:00.280 --> 03:02.520
the container storage interface that you are already

03:02.520 --> 03:04.840
using a Kubernetes for the storage,

03:04.840 --> 03:07.840
it's based on customer source definition and customer

03:07.840 --> 03:12.440
source that are a way to extend Kubernetes with a new API.

03:12.440 --> 03:16.160
It can schedule virtual machine as a native Kubernetes object.

03:16.160 --> 03:21.040
Then, you can manage them to talk with what you already

03:21.040 --> 03:23.320
developed as a microservice.

03:23.320 --> 03:28.000
So, in an ideal world, you are going

03:28.000 --> 03:30.800
to rewrite your application from scratch,

03:30.800 --> 03:33.600
completely splitted into microservices.

03:33.600 --> 03:37.560
In the real world, probably you have a bit of legacy code

03:37.560 --> 03:41.040
or something that is already running in a virtual machine.

03:41.040 --> 03:43.000
When are you supposed to schedule it

03:43.000 --> 03:47.280
on an external hypervisor or on the same infrastructure

03:47.280 --> 03:51.920
that you're using for your microservices with the capability

03:51.920 --> 03:55.800
to have them talking natively to your virtual machines?

03:55.800 --> 04:00.320
Kubernetes is the response for this challenge.

04:00.320 --> 04:04.320
Now, how can you test it at home?

04:04.320 --> 04:06.800
You can easily try it with CSC.

04:06.800 --> 04:11.440
CSC is a really quick way to start playing, debugging,

04:11.440 --> 04:16.080
hacking on OpenShift in general.

04:16.080 --> 04:22.520
CSC is a microdistribution of OpenShift that runs in a virtual

04:22.520 --> 04:25.840
machine that can be executed on your laptop.

04:25.840 --> 04:30.360
It's absolutely not intended for production usage.

04:30.360 --> 04:33.880
It's going to be executed in a virtual machine.

04:33.880 --> 04:36.800
So, it's a single-node cluster.

04:36.800 --> 04:38.480
It's not going to scale out.

04:38.480 --> 04:40.280
It's not going to support upgrades.

04:40.280 --> 04:43.720
It's just a test platform.

04:43.720 --> 04:47.160
In order, here, just a few instructions

04:47.160 --> 04:49.320
if you want to try it at home.

04:49.320 --> 04:54.760
Since we are talking about virtualization product

04:54.760 --> 05:00.840
and you are running it in CSC, which is a virtual machine

05:00.840 --> 05:03.280
as well, you need to enable nested virtualization

05:03.280 --> 05:07.960
on your laptop in order to be able to start virtual machines

05:07.960 --> 05:11.960
inside the CSC one.

05:11.960 --> 05:14.560
Then you can tune the configuration.

05:14.560 --> 05:17.840
Normally, CSC comes with a real-time configuration.

05:17.840 --> 05:20.360
If I'm not wrong, it's about 9 gigs of RAM,

05:20.360 --> 05:22.840
which is not that small, but it's just enough

05:22.840 --> 05:25.640
to run the OKD by itself.

05:25.640 --> 05:28.400
If you want to think about playing with a couple

05:28.400 --> 05:30.400
of virtual machines and so on, it's

05:30.400 --> 05:34.480
better to extend the memory up to at least 20 gigs

05:34.480 --> 05:39.560
in order to be able to do something realistic.

05:39.560 --> 05:43.600
It's also nice that CSC already comes with a kubeviato

05:43.600 --> 05:49.040
host path provision, which is a way to dynamically provision

05:49.040 --> 05:51.600
persistent volumes for your virtual machines.

05:51.600 --> 05:54.600
Because as you can imagine, a pod is something

05:54.600 --> 05:56.240
a female while your virtual machine

05:56.240 --> 05:58.040
needs a persistent volume.

05:58.040 --> 06:01.560
You need a way to provide persistent volumes

06:01.560 --> 06:03.400
for your virtual machines.

06:03.400 --> 06:05.560
CSC is just a virtual machine where

06:05.560 --> 06:08.040
you can run other virtual machines inside,

06:08.040 --> 06:10.840
but you still need a mechanism to provide

06:10.840 --> 06:12.640
persistent volumes for that.

06:12.640 --> 06:15.360
It's already integrated in CSC, but you

06:15.360 --> 06:18.720
have to extend its disk in order to have a bit of space

06:18.720 --> 06:22.200
to create disks.

06:22.200 --> 06:25.560
At the end, you have just to execute a couple of commands,

06:25.560 --> 06:28.320
CSC setup and CSC start.

06:28.320 --> 06:31.280
After a few minutes, you are going

06:31.280 --> 06:35.720
to gain the access to your environment.

06:35.720 --> 06:39.000
You can connect, of course, you can do everything

06:39.000 --> 06:40.160
also from the command line.

06:40.160 --> 06:45.640
Probably much of you are going to prefer using the command

06:45.640 --> 06:48.840
line here using a touch of the screen shot

06:48.840 --> 06:52.480
to the presentation just because they are nicer.

06:52.480 --> 06:55.800
So you can connect to the user interface,

06:55.800 --> 07:00.920
to the admin user interface where you have the operator

07:00.920 --> 07:01.640
AB page.

07:01.640 --> 07:03.560
In the operator AB page, you are going

07:03.560 --> 07:05.840
to find already there because it's

07:05.840 --> 07:09.920
a distributed via the operator AB mechanism.

07:09.920 --> 07:11.960
You are going to find the cube of your type

07:11.960 --> 07:15.640
that converts the cluster operator.

07:15.640 --> 07:18.800
As I mentioned, you don't need to configure the storage.

07:18.800 --> 07:21.960
So you only support it to install the operator

07:21.960 --> 07:23.960
and create a CR to trigger the operator,

07:23.960 --> 07:27.720
but the storage is already pre-configured.

07:27.720 --> 07:31.000
After a while, you will be asked to create the first CR

07:31.000 --> 07:34.200
for the operator in order to configure it.

07:34.200 --> 07:36.400
Here, you can fine tune the configuration

07:36.400 --> 07:40.880
of OKD virtualization for your specific cluster.

07:40.880 --> 07:44.800
In particular, we have a stance called the feature gates

07:44.800 --> 07:49.120
where you can enable optional features.

07:49.120 --> 07:51.600
In the here, we are going to talk about two features.

07:51.600 --> 07:54.360
One of them is already enabled by default,

07:54.360 --> 07:58.880
which is enable common boot image input.

07:58.880 --> 08:03.480
And the other is deploy tech-tone task resources.

08:03.480 --> 08:05.760
This one is not enabled by default.

08:05.760 --> 08:09.360
But if you want to do a tome of what you are going to see now,

08:09.360 --> 08:11.680
you have to enable it.

08:11.680 --> 08:15.520
You can enable it also today, too.

08:15.520 --> 08:19.160
So after a few minutes, the operator is installed.

08:19.160 --> 08:23.760
It's going to also extend the UI with a new tab

08:23.760 --> 08:29.160
where you can see what you can do with your virtual machines.

08:29.160 --> 08:35.800
So now, let's start talking about one of the,

08:35.800 --> 08:38.120
in the last year, we introduced a lot of features.

08:38.120 --> 08:40.840
But today, I want to talk about two of them.

08:40.840 --> 08:43.280
The first one is golden images.

08:43.280 --> 08:43.760
Why?

08:43.760 --> 08:47.320
I think that it's interesting.

08:47.320 --> 08:51.960
Nowadays, if you think to any public round environment

08:51.960 --> 08:56.520
on a public hyperscaler, you are going to find,

08:56.520 --> 08:58.080
it's really used to use them.

08:58.080 --> 08:58.560
Why?

08:58.560 --> 09:02.880
Because you can find their images

09:02.880 --> 09:05.160
for your third operative system.

09:05.160 --> 09:06.680
So they are enabled.

09:06.680 --> 09:09.320
You have just to select one of them, click.

09:09.320 --> 09:10.800
And in a matter of minutes, you are

09:10.800 --> 09:14.080
going to get a virtual machine that it's running.

09:14.080 --> 09:15.920
You don't need to upload your disk.

09:15.920 --> 09:18.880
You don't need to upload eventually an easel.

09:18.880 --> 09:20.960
Start defining virtual machine and so on.

09:20.960 --> 09:22.920
They are really convenient.

09:22.920 --> 09:30.080
We want to have the same experience also in CubeVirt.

09:30.080 --> 09:33.920
So we introduced this feature.

09:33.920 --> 09:36.760
The whole idea is that we are going to have,

09:36.760 --> 09:41.160
or we, sorry, we already have a container registry, which

09:41.160 --> 09:47.600
contains some images with the disk image for virtual machines

09:47.600 --> 09:51.440
that are going to be periodically refreshed

09:51.440 --> 09:55.400
to include a new feature of their operative systems

09:55.400 --> 09:58.160
or security fixes.

09:58.160 --> 10:01.720
Then we have this new object called the data import

10:01.720 --> 10:06.200
persona, which is going to say that you want to periodically

10:06.200 --> 10:11.200
pull an image from that container registry

10:11.200 --> 10:15.600
with a schedule and import it in your cluster.

10:15.600 --> 10:18.680
There is some mechanism in order to configure

10:18.680 --> 10:23.680
the gathered collecting, the attention policy.

10:23.680 --> 10:26.520
But at the end, the idea is that you

10:26.520 --> 10:31.760
are going to find images for popular operative systems

10:31.760 --> 10:35.600
out of the box already available in your cluster.

10:35.600 --> 10:38.080
And they are going to be refreshed over the time.

10:38.080 --> 10:42.400
So each time you, now let's see.

10:42.400 --> 10:46.720
This is the catalog in order to create virtual machines

10:46.720 --> 10:49.840
in the user interface of OKD virtualization.

10:49.840 --> 10:52.080
We have a catalog with objects.

10:52.080 --> 10:54.520
The whole feature is here.

10:54.520 --> 10:57.880
As you can see, for popular operative systems,

10:57.880 --> 11:02.760
we already have a nice label saying that the source is

11:02.760 --> 11:04.120
already available.

11:04.120 --> 11:08.520
It means that this new feature automatically imported

11:08.520 --> 11:12.080
for you a golden image of that operative system.

11:12.080 --> 11:17.440
And it's going to continuously keep it up to date.

11:17.440 --> 11:21.160
The benefit is that when you want to start a virtual machine,

11:21.160 --> 11:23.880
you will be able to do it with a single click.

11:23.880 --> 11:25.440
You can customize the name.

11:25.440 --> 11:28.560
You can say in which namespace it's going to be executed.

11:28.560 --> 11:30.160
But everything is already ready.

11:30.160 --> 11:34.120
With one click, you are going to start your virtual machine.

11:34.120 --> 11:37.000
What is going to happen on the storage side?

11:37.000 --> 11:42.160
We see that we have some existing persistent volume claims

11:42.160 --> 11:45.000
for the disk that got automatically imported.

11:45.000 --> 11:47.160
One of them is going to be cloned

11:47.160 --> 11:49.720
to be your virtual machine.

11:49.720 --> 11:51.960
Depending on the CSI implementation,

11:51.960 --> 11:56.280
this can be even completely flow added to the CSI provider.

11:56.280 --> 11:58.880
It can be really fast.

11:58.880 --> 12:02.320
After a few minutes, your virtual machine is there.

12:02.320 --> 12:06.520
And as you can see, through CloudInit or SysPipe

12:06.520 --> 12:08.800
or whatever, it can be also customized

12:08.800 --> 12:10.520
to use a custom name and so on.

12:15.000 --> 12:18.280
So our data import kernel looks like.

12:21.560 --> 12:25.120
We are saying that we want to have a data source named

12:25.120 --> 12:28.920
Fedora with a schedule with the usual context.

12:28.920 --> 12:30.960
We want to periodically consume images

12:30.960 --> 12:35.160
that are available on Quay, which is a Docker register.

12:35.160 --> 12:37.840
Here, you can see the status and the image is up to date,

12:37.840 --> 12:42.200
meaning that the most fresh version of Fedora

12:42.200 --> 12:45.640
got automatically imported in your cluster.

12:45.640 --> 12:47.920
The important thing is that if you look here,

12:47.920 --> 12:52.200
you see that Fedora, the tag for the Fedora image, is the latest.

12:52.200 --> 12:54.760
It means then when the next release of Fedora

12:54.760 --> 12:57.400
is going to come out, it's going to be automatically

12:57.400 --> 13:01.120
available in your cluster.

13:01.120 --> 13:05.480
Of course, we are providing images for Fedora for centers,

13:05.480 --> 13:07.840
but you can use the same mechanism

13:07.840 --> 13:11.440
and the same infrastructure to import on your cluster

13:11.440 --> 13:14.480
your own images.

13:14.480 --> 13:18.520
You can create custom data source, sorry,

13:18.520 --> 13:22.320
custom data import kernels.

13:22.320 --> 13:26.520
Now I want to talk about an additional really nice feature,

13:26.520 --> 13:30.600
which is Kubernetes Effect on task pipelines.

13:30.600 --> 13:32.520
In the previous section, we see that we

13:32.520 --> 13:37.800
are able to import images for popular operative system,

13:37.800 --> 13:41.040
but maybe there is some other operative system

13:41.040 --> 13:43.840
that requires to create a virtual machine starting

13:43.840 --> 13:47.160
a terminizer and installing it.

13:47.160 --> 13:50.640
So how can we automate it?

13:50.640 --> 13:54.240
We cannot expect that the provider of all the operative

13:54.240 --> 13:57.240
systems in the world are going to use this mechanism

13:57.240 --> 13:58.960
and publish images for us.

13:58.960 --> 14:01.200
We need a way to be able to automate

14:01.200 --> 14:06.640
the creation of the images for other operative systems.

14:06.640 --> 14:09.720
In this case, we are going to use a Tekton pipeline

14:09.720 --> 14:12.000
to automate this.

14:12.000 --> 14:14.600
What Tekton is?

14:14.600 --> 14:19.360
Tekton, also known as OpenShift pipelines,

14:19.360 --> 14:24.280
is a cloud-native continuous integration, continuous

14:24.280 --> 14:27.000
delivery solution.

14:27.000 --> 14:29.240
It's also cloud-native, and it's fully

14:29.240 --> 14:32.240
based on Kubernetes resources.

14:32.240 --> 14:35.840
It uses what are called Tekton blocks

14:35.840 --> 14:40.600
to automate tasks, a structuring the infrastructures.

14:40.600 --> 14:45.280
In the Tekton world, we have tasks.

14:45.280 --> 14:48.840
A task is something that defines a set of a build step,

14:48.840 --> 14:51.440
like compiling a code, and tests,

14:51.440 --> 14:52.960
or building and deploying images.

14:52.960 --> 14:56.600
In our case, we are now interested in deploying

14:56.600 --> 14:58.400
images, but as you can imagine, you

14:58.400 --> 15:01.200
can combine it with other tasks.

15:01.200 --> 15:02.880
Then you can define a pipeline.

15:02.880 --> 15:07.120
A pipeline is a set of orchestrated tasks.

15:07.120 --> 15:09.880
And then you can use a pipeline source, which

15:09.880 --> 15:11.680
is a set of inputs that are going

15:11.680 --> 15:15.760
to be injected into the execution of your pipeline, which

15:15.760 --> 15:17.240
is a pipeline run.

15:20.040 --> 15:23.560
On kubewitt Tekton Task Operator,

15:23.560 --> 15:28.200
we introduced some specific tasks

15:28.200 --> 15:33.000
to create, update, and manage the specific kubewitt

15:33.000 --> 15:36.640
sources, so virtual machines, data volumes, data sources,

15:36.640 --> 15:38.160
templates, and so on.

15:38.160 --> 15:40.320
You are able to populate these images,

15:40.320 --> 15:44.280
even with the libgestfs to inject files, and so on.

15:44.280 --> 15:49.040
You are able to execute scripts, bash, or PowerShell,

15:49.040 --> 15:51.720
and whatever.

15:51.720 --> 15:54.200
We have a set of tasks I don't want to give you,

15:54.200 --> 15:57.440
but some are already available.

15:57.440 --> 15:59.480
We are extending one.

15:59.480 --> 16:02.120
And we have an operator that is going

16:02.120 --> 16:05.840
to populate the task for you on the end of your cluster.

16:05.840 --> 16:09.520
Now we want to see an example pipeline.

16:09.520 --> 16:12.000
This pipeline is going to, we have

16:12.000 --> 16:14.880
two pipelines that are going to be injected by the Tekton Task

16:14.880 --> 16:15.440
Operator.

16:15.440 --> 16:18.560
The first one is called the Windows 10 installer.

16:18.560 --> 16:23.040
It's going to populate a golden image for Windows 10

16:23.040 --> 16:26.280
according to some input that you are going to provide.

16:26.280 --> 16:29.520
The idea is that it's going to copy a template.

16:29.520 --> 16:31.600
It's going to modify a template.

16:31.600 --> 16:37.640
And it's going to start installing Windows from the ISO.

16:37.640 --> 16:41.280
And it's going to create a virtual machine for you.

16:41.280 --> 17:00.080
We can see a small demo.

17:00.080 --> 17:02.760
So here is the pipeline.

17:02.760 --> 17:06.120
We have to provide a few inputs in particular.

17:06.120 --> 17:08.720
We have to provide the ease of the Windows

17:08.720 --> 17:15.720
that we want to install.

17:15.720 --> 17:18.240
And it's the first, yes, there, perfect.

17:22.680 --> 17:24.440
Here we see the pipeline.

17:24.440 --> 17:26.400
The pipeline is going to copy the template.

17:26.400 --> 17:27.880
It's going to modify it.

17:27.880 --> 17:29.720
It's going to create a first VM that

17:29.720 --> 17:32.120
is used in order to install Windows

17:32.120 --> 17:43.520
and then create the Windows image from that VM.

17:43.520 --> 17:46.960
Here is a, now we are simply going to see what is happening.

17:46.960 --> 17:48.440
But everything is fully automated.

17:48.440 --> 17:50.640
You don't really have to watch it.

17:50.640 --> 17:55.120
But if you like, you can also see it live.

17:55.120 --> 17:56.560
Here it's our virtual machine.

17:56.560 --> 17:59.280
And as you can see, it's starting, it's booting.

17:59.280 --> 18:04.080
And it's going to install Windows.

18:04.080 --> 18:07.520
We have also a second pipeline.

18:07.520 --> 18:09.320
I have a demo for that.

18:09.320 --> 18:11.040
It's called Windows Customize.

18:11.040 --> 18:14.000
Probably we are a bit already over time.

18:14.000 --> 18:16.080
The idea of the second pipeline is

18:16.080 --> 18:20.400
that you can customize the image,

18:20.400 --> 18:25.000
running additional steps like installing the software

18:25.000 --> 18:28.040
that you need, modifying the image that it's

18:28.040 --> 18:30.160
going to be one of the golden images

18:30.160 --> 18:31.960
that you are going to provide in your cluster.

18:31.960 --> 18:45.960
So let's move back.

19:01.960 --> 19:05.120
This is the second one.

19:05.120 --> 19:06.320
I'm going to skip the demo.

19:06.320 --> 19:09.720
But if you have any questions, please reach me.

19:09.720 --> 19:14.360
The idea is that we can use this pipeline in this case

19:14.360 --> 19:16.800
to install SQL Server and so on.

19:20.720 --> 19:23.720
What's next?

19:23.720 --> 19:27.000
OKD is going to change.

19:27.000 --> 19:31.320
Now in the beginning, I told you that now it's OKD.

19:31.320 --> 19:34.800
It's based on Fedora CoreOS.

19:34.800 --> 19:37.400
We are going to have a big change there, which

19:37.400 --> 19:41.240
is called OKD centralized streams, which

19:41.240 --> 19:43.440
means that the nodes of OKD are going

19:43.440 --> 19:45.600
to be based on center stream.

19:45.600 --> 19:51.640
And so it's going to be a really upstream for OpenShift Container

19:51.640 --> 19:57.680
Platform, where the nodes are based on Redat CoreOS.

19:57.680 --> 20:01.560
Center stream is the upstream of Redat CoreOS.

20:01.560 --> 20:04.080
Everything on center stream is going

20:04.080 --> 20:07.760
to be built as well using Tekton pipelines,

20:07.760 --> 20:11.160
just because we really believe in that project.

20:11.160 --> 20:12.840
On OKD visualization side, we are

20:12.840 --> 20:15.200
going to introduce many features.

20:15.200 --> 20:18.680
We are going to add more pipelines, more automation.

20:18.680 --> 20:20.520
We are working on our support.

20:20.520 --> 20:23.640
We are working on better the capacity APIs.

20:23.640 --> 20:28.800
We are working to reduce the privileges of the parts

20:28.800 --> 20:31.080
that really execute the virtual machines.

20:31.080 --> 20:33.480
We are working on the real-time area.

20:36.160 --> 20:41.160
And here, a few links if you want to reach us.

20:41.160 --> 20:42.160
Thank you.

20:42.160 --> 20:54.120
Thank you.

20:54.120 --> 20:57.960
There's already OpenStack and Kata containers.

20:57.960 --> 21:04.080
And I wonder how does OKD compares or integrates

21:04.080 --> 21:09.160
or overlaps with these two projects?

21:09.160 --> 21:13.560
So the question is, we already have other projects

21:13.560 --> 21:15.960
like OpenStack, Kata containers.

21:15.960 --> 21:20.840
I want to understand how kube-vert compares to them.

21:20.840 --> 21:24.480
So the first idea is that in kube-vert,

21:24.480 --> 21:30.920
we are managing virtual machines as first-class citizens

21:30.920 --> 21:33.840
on Kubernetes.

21:33.840 --> 21:39.480
You can define a virtual machine with a customer source

21:39.480 --> 21:41.920
because Kubernetes provide a mechanism called

21:41.920 --> 21:44.680
the customer source definition to provide

21:44.680 --> 21:46.560
customer new APIs.

21:46.560 --> 21:48.840
You can use them to define a virtual machine

21:48.840 --> 21:50.560
as a really native object that is

21:50.560 --> 21:53.960
going to be scheduled by the Kubernetes orchestral

21:53.960 --> 21:56.520
alongside the ports and other sources.

21:56.520 --> 21:59.920
The main benefit is that you can expose,

21:59.920 --> 22:03.040
you can use the same storage that you are using for your ports.

22:03.040 --> 22:07.680
You can have your ports talking at a network level

22:07.680 --> 22:09.560
with the virtual machine, natively,

22:09.560 --> 22:12.280
without the need to configure TANs and so on,

22:12.280 --> 22:16.360
because virtual machines are running on the lower stack,

22:16.360 --> 22:20.320
like if you have OpenStack and Kubernetes.

22:20.320 --> 22:22.920
The virtual machine is going to be a first-class citizen

22:22.920 --> 22:26.120
of this infrastructure.

22:26.120 --> 22:29.360
So you think it breaks with OpenStack?

22:29.360 --> 22:31.880
So not really integrated.

22:31.880 --> 22:43.840
If we go here, OK.

22:43.840 --> 22:48.160
Here the idea is that we have something here, which

22:48.160 --> 22:50.760
in our case probably is going to be the metanodes,

22:50.760 --> 22:52.720
but it can be also another hyperscaler.

22:52.720 --> 22:54.920
But in that case, you need nested virtualization,

22:54.920 --> 22:58.000
which is not always the best idea.

22:58.000 --> 23:01.160
Then you have Linux host nodes.

23:01.160 --> 23:03.600
Now we've federated the device, but in the future,

23:03.600 --> 23:04.920
we've sent those streams.

23:04.920 --> 23:07.720
And here you have the Kubernetes stack.

23:07.720 --> 23:11.600
Kubernetes is going to schedule ports as containers

23:11.600 --> 23:15.240
on those nodes and virtual machines there.

23:15.240 --> 23:22.520
So you don't really care of what you have on the last level.

23:22.520 --> 23:26.080
Yeah, you showed how to install Windows and prepare

23:26.080 --> 23:28.080
image decisions from pipelines.

23:28.080 --> 23:30.400
Isn't it easier to use simple doctor file

23:30.400 --> 23:33.280
and if it's possible to use just a doctor file?

23:33.280 --> 23:36.200
Enjoy that on the way that children understand

23:36.200 --> 23:38.440
their own decisions.

23:38.440 --> 23:41.520
OK, so he asked the question, is you

23:41.520 --> 23:44.440
showed how to use a pipeline in order

23:44.440 --> 23:47.880
to prepare an image for Windows?

23:47.880 --> 23:51.400
Isn't it simpler to direct the user doctor file

23:51.400 --> 23:53.040
to create a container?

23:53.040 --> 23:54.640
So in theory, it is.

23:54.640 --> 23:58.280
But you have to start from another running virtual machine

23:58.280 --> 24:02.520
and take the disk because Microsoft is providing

24:02.520 --> 24:07.520
an ISO with a tool that you have to execute.

24:07.520 --> 24:11.040
But you can use the same built-in test and guess

24:11.040 --> 24:15.040
which tools to install Windows inside the doctor file.

24:15.040 --> 24:16.400
But you have to execute it.

24:16.400 --> 24:19.040
I mean, you have to execute the binary of the installer.

24:19.040 --> 24:24.880
So you have to, at the end, you are manually running something

24:24.880 --> 24:27.360
that it's going to install Windows.

24:27.360 --> 24:30.360
And at the end, you need to take a snapshot, which

24:30.360 --> 24:33.400
is going to be your image.

24:33.400 --> 24:34.600
You want to automate it.

24:34.600 --> 24:37.320
You want to continuously execute it

24:37.320 --> 24:40.760
in order to fetch up data.

24:40.760 --> 24:43.760
How we solved this, we automated it with a pipeline

24:43.760 --> 24:45.240
because we have a set of tasks.

24:45.240 --> 24:49.760
And so the pipeline is the most smart way

24:49.760 --> 24:58.760
to execute and monitor them.

24:58.760 --> 24:59.760
Sure.

24:59.760 --> 25:00.640
Last one.

25:00.640 --> 25:06.640
Which format are the golden image disks using?

25:06.640 --> 25:13.720
Which format are the user for the operative system disks?

25:13.720 --> 25:15.960
No.

25:15.960 --> 25:21.440
Oh, do we support other format?

25:21.440 --> 25:23.400
So just a little.

25:23.400 --> 25:23.920
Thank you.

25:27.000 --> 25:27.560
Time is up.

25:27.560 --> 25:29.560
But if you want, please reach me outside.

25:29.560 --> 25:46.000
Thank you.

WEBVTT

00:00.000 --> 00:07.000
What is something you want to do?

00:07.000 --> 00:11.080
Okay, I think we can start.

00:11.080 --> 00:13.720
Let's see if this works.

00:13.720 --> 00:14.720
Yes.

00:14.720 --> 00:18.520
So, yeah, where am I?

00:18.520 --> 00:19.520
I am Frederi Descartes.

00:19.520 --> 00:20.520
I'm local.

00:20.520 --> 00:21.520
I'm from Belgium.

00:21.520 --> 00:24.240
So, this is why I'm often here.

00:24.240 --> 00:27.240
You can follow me on Twitter as Le Fred.

00:27.240 --> 00:30.600
So, if you have any questions, just ask me.

00:30.600 --> 00:33.160
I'm quite old using MySQL.

00:33.160 --> 00:35.600
I started with MySQL 3.20.

00:35.600 --> 00:38.800
I was thinking it was 3.23, but it was 3.20.

00:38.800 --> 00:41.960
I found the CD at home.

00:41.960 --> 00:45.000
Yes, a CD for people who don't know what it is.

00:45.000 --> 00:48.320
Before there was a program in it, and before that was floppy.

00:48.320 --> 00:49.600
I also knew the floppy.

00:49.600 --> 00:53.880
So, as I said, I live in Belgium, and I have a blog where you can find a lot of information

00:53.880 --> 00:56.520
mostly related to MySQL.

00:56.520 --> 01:01.200
So, today I'm going to talk about the component infrastructure.

01:01.200 --> 01:02.200
I'm very sorry.

01:02.200 --> 01:08.520
Usually, we are in a very dark room where, and I changed my slide to be dark slides,

01:08.520 --> 01:12.400
to make it to see them very well, but it seems not okay.

01:12.400 --> 01:22.560
So, we will see that if you want to modify MySQL, you have different ways, creating

01:22.560 --> 01:24.040
a storage engine.

01:24.040 --> 01:26.360
That's one way to modify MySQL.

01:26.360 --> 01:30.760
I want to have my own storage engine to store the data like I want.

01:30.760 --> 01:32.880
I want to create a plugin.

01:32.880 --> 01:34.840
Next session is about that.

01:34.840 --> 01:35.840
Right?

01:35.840 --> 01:36.840
Vinesis.

01:36.840 --> 01:42.000
And, or by creating a component.

01:42.000 --> 01:48.200
We at MySQL, we encourage you to use this component infrastructure if you want to extend

01:48.200 --> 01:53.640
MySQL over the plugin, for example.

01:53.640 --> 01:56.640
That's very, very not easy to read for you.

01:56.640 --> 01:57.640
Sorry.

01:57.640 --> 02:00.840
So, what is this MySQL component infrastructure?

02:00.840 --> 02:08.760
So, it's a modular design for the MySQL server that will allow the developers to extend the

02:08.760 --> 02:12.800
server like I said earlier, right, in a different way.

02:12.800 --> 02:20.960
And such adding a support for new function, new performance schema table, new status variable,

02:20.960 --> 02:26.520
new system variable, all that kind of stuff that you want to extend to MySQL, you will

02:26.520 --> 02:30.760
be able to use the component infrastructure to do that.

02:30.760 --> 02:32.400
And so, what does it mean?

02:32.400 --> 02:39.480
It means that the server will provide you services that you can use to extend MySQL.

02:39.480 --> 02:46.240
And there is, yeah, you don't see it very well here, but there is a component service

02:46.240 --> 02:48.120
inventory page.

02:48.120 --> 02:49.320
The URL is here.

02:49.320 --> 02:56.920
Yes, you will have the slide online so you can read them and copy the URL.

02:56.920 --> 03:03.280
And something very nice is that this component infrastructure is, or you say that, enhancing

03:03.280 --> 03:04.280
all the time.

03:04.280 --> 03:05.280
All right.

03:05.280 --> 03:12.920
So, for example, in MySQL 8.28, we had 137 services defined that you could use.

03:12.920 --> 03:17.920
And in 8.32, it's already 162 services.

03:17.920 --> 03:23.400
So if there is something you would like to do and you don't know how to do it, it's

03:23.400 --> 03:24.680
something you can ask us.

03:24.680 --> 03:29.640
I don't say it's guaranteed that you will have it in the next version, but it's something

03:29.640 --> 03:30.640
we are doing.

03:30.640 --> 03:32.520
We try to improve.

03:32.520 --> 03:33.880
And internally, it's the same.

03:33.880 --> 03:40.520
So when one of the team needs something extra, one of the team creates now services that

03:40.520 --> 03:44.800
we can use to make it more modular like that.

03:44.800 --> 03:50.160
So why do we need to use this MySQL component?

03:50.160 --> 04:01.040
It's because the subsystem of these components is designed to, because there are some issues

04:01.040 --> 04:02.760
with the plugins.

04:02.760 --> 04:09.800
So like, for example, the plugin can only talk to the server and not with other plugins.

04:09.800 --> 04:14.600
Here with components, you could have some components talking to other components.

04:14.600 --> 04:18.120
But something possible.

04:18.120 --> 04:24.720
The plugins have access to the server symbols and they can call them directly, but not really

04:24.720 --> 04:26.160
in consolation.

04:26.160 --> 04:31.720
And there are some, we were discussing that, that it is even possible maybe to create a

04:31.720 --> 04:36.480
component and compile it and then load it for another version of it.

04:36.480 --> 04:44.480
But yeah, it is not something I would recommend to do, but it's possible, right?

04:44.480 --> 04:52.280
You can also create these dependencies between the components, which is very nice.

04:52.280 --> 04:55.080
So we're going to create a component together.

04:55.080 --> 04:59.240
I will do it, but so you can see how it works, right?

04:59.240 --> 05:01.220
And try to see.

05:01.220 --> 05:06.040
My plan is to show you that it's not complicated and that you will be able to create your own

05:06.040 --> 05:07.040
component.

05:07.040 --> 05:11.680
So first thing, and this is for me, I think one of the most difficult part when we want

05:11.680 --> 05:18.000
to extend MySQL is, oh cool, I want to extend it, but what will I do?

05:18.000 --> 05:25.200
And sometimes on Slack or forums, people say, oh, I'm a young developer, I would like to

05:25.200 --> 05:27.200
help the MySQL community.

05:27.200 --> 05:28.200
Yes.

05:28.200 --> 05:29.200
What?

05:29.200 --> 05:32.160
Yes, I would say yes.

05:32.160 --> 05:34.000
Yeah, but why not?

05:34.000 --> 05:35.000
But I will do so.

05:35.000 --> 05:40.560
But people say, oh, I am learning C++ or I want to be in the MySQL community.

05:40.560 --> 05:45.760
I want to create something and what could I do?

05:45.760 --> 05:46.760
That's the plan.

05:46.760 --> 05:54.880
It's to, you know, like Colin was telling earlier, we don't have like a list of features

05:54.880 --> 05:56.480
that we ask community to do.

05:56.480 --> 06:01.800
It's more that the community wants to enhance something, fix something, they will do it,

06:01.800 --> 06:02.800
right?

06:02.800 --> 06:05.960
And so here, the most complicated, what will I do?

06:05.960 --> 06:09.240
How would I extend to your needs?

06:09.240 --> 06:11.200
So this is what we're going to define.

06:11.200 --> 06:15.880
So the first thing is that to be able to use what we're going to use, I want to have a

06:15.880 --> 06:17.560
specific privilege.

06:17.560 --> 06:21.520
So not everybody will be able to use the extension we're going to do.

06:21.520 --> 06:28.060
And I decided to use the sensitive variables observer privilege that was added in 802.29.

06:28.060 --> 06:34.120
So you can also, if you want, create a new privilege for what you are doing.

06:34.120 --> 06:43.040
I've made, I don't know if you have seen, I create a component in 13 blog posts which

06:43.040 --> 06:45.040
was covering a lot of things to do it.

06:45.040 --> 06:48.720
And one of them was to create a privilege and use that privilege.

06:48.720 --> 06:57.440
Then we're going to read a value of some predefined variables on the server and let's say extract

06:57.440 --> 07:04.160
the path of it and then create a performance schema table with the path that we extracted

07:04.160 --> 07:10.240
from this variable and see if there is free space and how many space has been used on

07:10.240 --> 07:14.480
this storage that related to the path.

07:14.480 --> 07:21.040
So it's simple, but it can be very useful that you don't need to have access as a DBA

07:21.040 --> 07:25.000
to the file system to check that.

07:25.000 --> 07:32.600
So to be able to do this, we will need, of course, to use several services that are to

07:32.600 --> 07:39.000
get the information from the privileges, so the security of the threads, to need to have

07:39.000 --> 07:43.400
access to the performance schema table, to create one, to create different fields.

07:43.400 --> 07:48.960
Like here we're going to use the table, but we want to have some big end and stuff like

07:48.960 --> 07:49.960
that.

07:49.960 --> 07:53.880
We also need to have a log built in to create error messages.

07:53.880 --> 07:58.600
We need to send message to the user, for example, oh, you don't have privilege to access this

07:58.600 --> 08:05.880
table, so we need to subscribe and to use all these services to do that.

08:05.880 --> 08:06.880
Yes?

08:06.880 --> 08:12.080
Are these predefined functions that we can use?

08:12.080 --> 08:15.800
These are services, and I will show you how to do that.

08:15.800 --> 08:20.240
So you use these services and then you call them and you get the answer.

08:20.240 --> 08:24.400
It's much easier than on the plugin, for example.

08:24.400 --> 08:26.920
Is there a list in the implementation of services?

08:26.920 --> 08:27.920
Yes.

08:27.920 --> 08:31.760
So the URL I was showing you earlier, it's the list of all the components that you can

08:31.760 --> 08:38.360
use and how to use them.

08:38.360 --> 08:40.280
So which variable are we going to check?

08:40.280 --> 08:48.840
So if you're a MySQL DBA, you need how many variables define a pass that you need to check?

08:48.840 --> 08:50.600
Do you have an ID?

08:50.600 --> 08:57.080
One, two, three, more, less?

08:57.080 --> 08:59.560
It's a quiz.

08:59.560 --> 09:01.120
It's a lot, and more and more.

09:01.120 --> 09:04.400
So for example, we have log bin base name.

09:04.400 --> 09:08.240
We should put the binary logs, we can put them somewhere.

09:08.240 --> 09:13.080
The data there, hopefully you know what it means, it is where the data will be.

09:13.080 --> 09:24.680
So all these can be different paths at a different part that we can store data.

09:24.680 --> 09:30.880
So I will use here a vector of the string and I will put all these variables in it.

09:30.880 --> 09:37.960
This is predefined because I know that this can be, if there is some value in these variables,

09:37.960 --> 09:39.440
I will check that.

09:39.440 --> 09:44.440
Of course, if you want, you can extend that and create, for example, a variable where

09:44.440 --> 09:47.120
you will put the name of the variables to list.

09:47.120 --> 09:48.120
It's possible.

09:48.120 --> 09:50.160
It's just depending what you want to do that.

09:50.160 --> 09:56.220
And this is, for example, all you call, you want to register a new variable.

09:56.220 --> 10:00.160
For example, this variable to parse, I called, right?

10:00.160 --> 10:04.280
This is how you call the MySQL service component, this variable register.

10:04.280 --> 10:07.920
And you register your variable.

10:07.920 --> 10:10.480
Okay.

10:10.480 --> 10:14.800
So let's go to, we are in a conference, right?

10:14.800 --> 10:17.180
So our component will look like this.

10:17.180 --> 10:25.040
So we will, in the MySQL server source directory, there is a component folder.

10:25.040 --> 10:29.880
And in that folder, I will create my disk size component.

10:29.880 --> 10:30.880
So it's another folder.

10:30.880 --> 10:33.600
I will have a CMake list.

10:33.600 --> 10:39.360
And then a disk size cc, disk size.eather, and a disk size pfs, where I put the stuff

10:39.360 --> 10:43.580
for a performance schema.

10:43.580 --> 10:47.720
If we have time, and I think we may have, I will just show you the content of the file.

10:47.720 --> 10:56.000
But before, I will show you what we have in this, some part of it, how to use it.

10:56.000 --> 11:03.600
So for example, if you want to write in the error lock, all our component needs to have

11:03.600 --> 11:04.600
a tag.

11:04.600 --> 11:07.440
So I don't know if this will work.

11:07.440 --> 11:08.440
Seems not.

11:08.440 --> 11:09.440
Oops.

11:09.440 --> 11:10.440
Where is it?

11:10.440 --> 11:11.440
Oh.

11:11.440 --> 11:12.440
Yeah.

11:12.440 --> 11:13.440
It's with the, yeah.

11:13.440 --> 11:18.360
Man, yeah, need to be very slow.

11:18.360 --> 11:20.360
Very slow.

11:20.360 --> 11:21.880
Yeah.

11:21.880 --> 11:22.880
You see here?

11:22.880 --> 11:25.720
Yeah, it's not that useful.

11:25.720 --> 11:29.680
You can, you say lock component tag, and it's disk size.

11:29.680 --> 11:38.120
So every error message that I will create will have this disk size tag in it.

11:38.120 --> 11:40.320
So I will require service place.

11:40.320 --> 11:46.400
So I need to use the lock built-ins, lock built-in strings, because I want to send strings, right?

11:46.400 --> 11:51.560
And this is the service type I will gonna use, and I'm defining here.

11:51.560 --> 12:00.440
And then, for example, when I will initialize my component, right, I will here call this

12:00.440 --> 12:05.520
and initialize the lock objects.

12:05.520 --> 12:13.160
And when I just do lock component error, which type of error it is, can you be a warning?

12:13.160 --> 12:17.560
Here it's information level, print message, initializing.

12:17.560 --> 12:22.080
So every time I will load the component, I will have this.

12:22.080 --> 12:23.440
So this is how we do it.

12:23.440 --> 12:24.760
It's very easy.

12:24.760 --> 12:28.040
So this is some code that you will reuse all the time.

12:28.040 --> 12:35.280
And then in your component, this is the message if you want to print an error message.

12:35.280 --> 12:41.120
So usually it's much more easy than in a plugin.

12:41.120 --> 12:46.180
To check a privilege, so I create here a function have required privilege, right?

12:46.180 --> 12:52.760
And I will send the THD, and also to get the context, to get the security context of THD,

12:52.760 --> 12:54.960
all that, our services.

12:54.960 --> 13:00.640
And then we check, okay, do we have access to this privilege?

13:00.640 --> 13:03.120
And if not, I will say I will print an error.

13:03.120 --> 13:05.560
If it's okay, we can continue.

13:05.560 --> 13:08.160
So here we check the privilege.

13:08.160 --> 13:14.740
So this is how we do it, and it's quite very easy to do all that kind of stuff like this.

13:14.740 --> 13:20.400
And for example, if you want to access a global variable, it's also again,

13:20.400 --> 13:26.280
get the variable from this variable register, get the variable, put the name of the variable,

13:26.280 --> 13:30.040
and you will get the data out of it.

13:30.040 --> 13:34.520
So this is how it works, and it's quite very easy.

13:34.520 --> 13:42.280
And you can extend that, like I said, there is 161 services to create performance schema

13:42.280 --> 13:47.400
table to get information for plenty of stuff.

13:47.400 --> 13:49.260
So it is very, very easy.

13:49.260 --> 13:52.560
So how does it look like when we run this component, right?

13:52.560 --> 13:58.840
So the first thing we do, if you can read it, is we install the component.

13:58.840 --> 14:03.680
So we do install component and then file component disk size.

14:03.680 --> 14:08.160
By default the components, they start with the name component underscore, but

14:08.160 --> 14:10.440
you can change that if you want.

14:10.440 --> 14:14.960
And as you can see, it's okay, it means it has been loaded, right?

14:14.960 --> 14:18.800
If we check in the error lock, because remember we were printing,

14:18.800 --> 14:23.560
initializing when we were loading the component, we will see,

14:23.560 --> 14:27.720
because in Mexico A, the error lock is also part of performance schema table,

14:27.720 --> 14:30.440
so you don't need to go tail file.

14:30.440 --> 14:37.020
We can see that, okay, component disk size reported initializing,

14:37.020 --> 14:42.240
component disk size reported performance schema table has been registered successfully.

14:42.240 --> 14:45.080
So all that information comes from the component and

14:45.080 --> 14:47.560
you can find it in the error lock.

14:47.560 --> 14:51.680
So that's the first thing, we were happy because we were able to load the component

14:51.680 --> 14:54.560
and we see that in error lock the component is written.

14:56.120 --> 15:00.280
And then we can see also here to use it really.

15:00.280 --> 15:03.720
So we do select star from performance schema disk size,

15:03.720 --> 15:06.800
which is the table, the performance schema table we created.

15:06.800 --> 15:13.080
And it gives us all the data, the directory or the path,

15:13.080 --> 15:16.240
from which variable it comes from, right?

15:16.240 --> 15:21.800
And the free size and the total size invites from it.

15:21.800 --> 15:25.320
This is quite very useful, so you can check without having to,

15:26.600 --> 15:28.640
after you can do whatever you want with this information.

15:28.640 --> 15:34.200
But it was to show something relevant and not just a hello world to you guys.

15:34.200 --> 15:37.960
I think this is more useful.

15:37.960 --> 15:40.520
And for example, yeah, you can display or

15:40.520 --> 15:45.160
you can play with a new function like the format bytes and stuff.

15:45.160 --> 15:47.880
And we can see here the free size, total size,

15:47.880 --> 15:53.320
how many percent are used on the disk depending where you want to check.

15:54.360 --> 15:59.200
What do you see here is that everything points on the same SSD on my laptop.

15:59.200 --> 16:01.400
And this is why you have always the same numbers.

16:01.400 --> 16:04.960
Because at the end, it's only the same disk.

16:04.960 --> 16:09.000
But if you use different disks, you will have different values here.

16:11.800 --> 16:17.000
The error, like I said earlier, I was using, we were using this specific

16:19.800 --> 16:20.720
privilege.

16:20.720 --> 16:24.120
So here I'm using another user, which is called resto.

16:24.120 --> 16:26.920
I was for docstore, we were discussing about docstore earlier.

16:28.040 --> 16:31.200
So I want to check in the performance schema table with that user.

16:31.200 --> 16:35.320
And you can see that user doesn't have the privilege we want.

16:35.320 --> 16:39.960
He says, okay, this select is denied because the user cannot, so you don't,

16:39.960 --> 16:43.920
I don't give access to the performance schema table to everybody,

16:43.920 --> 16:45.200
just some specific user.

16:46.280 --> 16:51.760
So some information about the MySQL components, right?

16:51.760 --> 16:56.560
It is, you can see which are the components that are loaded.

16:56.560 --> 16:59.880
So you do select star from MySQL component.

16:59.880 --> 17:02.760
So there is a system table called component.

17:02.760 --> 17:07.520
And you can see which are the component loaded.

17:07.520 --> 17:09.920
And sometimes a component can be part of a group and

17:09.920 --> 17:17.640
then you will see it if they're on the same group or not, which is not the case here.

17:17.640 --> 17:21.440
But you can see here, I have several, so the query attribute is a component,

17:21.440 --> 17:22.360
for example.

17:22.360 --> 17:25.880
And then other component that I'm playing with on my system,

17:25.880 --> 17:30.760
like UUID, V7, and stuff like that, that you can create if you want.

17:33.680 --> 17:38.240
Where are this component on the disk?

17:38.240 --> 17:41.240
It's on the plugin there, same as the plugin.

17:41.240 --> 17:43.560
So you will see where the plugins are.

17:43.560 --> 17:49.440
You have also the components there, and by default, the names start with component.

17:49.440 --> 17:54.360
So the disk size we just created, it's here, component disk size, right?

17:54.360 --> 18:01.320
But, and you can see there are several components already in MySQL by default.

18:02.920 --> 18:07.760
Because we are also using our own infrastructure in MySQL.

18:10.560 --> 18:15.640
So some question that I've heard about the component is that

18:15.640 --> 18:19.920
when we load a component after a restart of the server, what happened with that

18:19.920 --> 18:20.760
component?

18:20.760 --> 18:24.800
So all the component will be reloaded again, in fact.

18:24.800 --> 18:28.080
So if you install the component, when you restart, it will be installed.

18:28.080 --> 18:30.280
So there is no configuration in my CNF.

18:30.280 --> 18:34.160
You need to load it first, and then it will stay loaded.

18:34.160 --> 18:39.360
Meaning that if I remove the component that was installed,

18:39.360 --> 18:43.680
because I like to suffer, right, and what will happen?

18:43.680 --> 18:47.800
In fact, you will have a message that say, this component, for example,

18:47.800 --> 18:50.160
cannot be open, and there is an issue.

18:50.160 --> 18:51.040
But that's the only thing.

18:51.040 --> 18:53.560
It won't block the server, it won't crash.

18:53.560 --> 18:58.240
It will just tell you, okay, this is not there, and it won't be available for you.

18:58.240 --> 19:00.480
So if you are interested, for

19:00.480 --> 19:06.240
example, to see the full code of the component, it's on GitHub.

19:06.240 --> 19:11.840
So on my GitHub, MySQL component disk size, so you can find it.

19:11.840 --> 19:15.000
And also now, it's your turn.

19:15.000 --> 19:17.720
Please show me what you can do and what you can invent and

19:17.720 --> 19:22.800
what you can bring to MySQL, because I think the component infrastructure is

19:22.800 --> 19:31.120
very something cool that you can use to add features to MySQL.

19:31.120 --> 19:35.880
And I hope that finishes you will change your next talk to a component for

19:35.880 --> 19:39.280
the next year, and not as a plugin, right?

19:39.280 --> 19:41.480
So thank you very much for this.

19:41.480 --> 19:44.080
Share your love to MySQL on the social media.

19:44.080 --> 19:47.000
Join us on the community Slack.

19:47.000 --> 19:51.240
So where plenty of people are there to answer questions from development,

19:51.240 --> 19:56.280
consulting, plenty of people from around the world, not working for

19:56.280 --> 19:59.840
MySQL, but in the MySQL community, are also there to answer you.

19:59.840 --> 20:15.840
Do you have questions?

WEBVTT

00:00.000 --> 00:11.840
Hi, everyone. Thank you for joining. Thank you for liking BSD. And hopefully, I will

00:11.840 --> 00:19.560
try to encourage you to help developing BSD. So let's get started. So the program for

00:19.560 --> 00:26.520
my discussion, for which I have 15 minutes, is to go through 45 slides. So hang tight.

00:26.520 --> 00:32.720
Just kidding. But I will start with a bit of background information, compare some device

00:32.720 --> 00:38.160
driver codes so we can have an idea how it looks between the different BSDs, call for

00:38.160 --> 00:48.520
our help, and try to send a few ideas out about how we can work together on BSD drivers.

00:48.520 --> 00:54.800
Speaking of which, what about BSD drivers? Well, sadly, the lighting doesn't allow me

00:54.800 --> 01:02.640
really to show much. So basically, I'm gathering the list of different drivers for different

01:02.640 --> 01:09.360
hardware, showing how, for instance, on FreeBSD for sound cards, you have SoundHDA. On OpenBSD,

01:09.360 --> 01:16.000
you have SLEAR, then HD audio on NetBSD now. And so you have sometimes a driver missing

01:16.000 --> 01:22.600
in one BSD, not in the other. They have different names. Sometimes history, which mergers, goes

01:22.600 --> 01:30.080
somewhere, then patches come back, go. Some areas are more developed in one BSD over another,

01:30.080 --> 01:37.120
like TV capture or sometimes Wi-Fi. So it's a bit frustrating in a way that we have this

01:37.120 --> 01:42.640
awesome hardware support, and at the same time, not every BSD benefits always from the

01:42.640 --> 01:46.440
other BSDs and the progress they make, or one bug is fixed in one and not in the other.

01:46.440 --> 01:56.240
So to summarize, and good morning, it's a bit of a mess. Drivers everywhere, but feels

01:56.240 --> 02:00.480
a bit sometimes like a rabbit hole, I would say. So we have a collection of drivers with

02:00.480 --> 02:06.520
different history, some in common, some with different names. Evolution is not consistent

02:06.520 --> 02:12.200
across the different BSDs. But thankfully, there is documentation. Let's have a look

02:12.200 --> 02:19.080
at the differences between the different systems. So this is the manual page for driver on free

02:19.080 --> 02:25.080
BSD. So as you can see, you have a few system headers, kernel headers in this case, some

02:25.080 --> 02:29.720
functions which should always be implemented, probing, attaching, detaching, some throbbing

02:29.720 --> 02:37.440
and twiddling, whatever that means. Some data structures with references to the methods

02:37.440 --> 02:43.760
for attaching, probing and so on. And then a declaration for the driver for the kernel

02:43.760 --> 02:50.280
to find it, another macro here, gathering, putting everything together. So looks pretty

02:50.280 --> 02:57.880
nice and clear to me. But then if you look on netBSD, it's a bit simpler, actually, one

02:57.880 --> 03:04.720
less header, fewer functions which are documented here, or mentioned here at least, then just

03:04.720 --> 03:10.480
a single macro to attach all the bits together and declare it for the system. Then you have

03:10.480 --> 03:18.480
openBSD. Oops. There's no manual page for driver on openBSD. So, hi, Stefan. You want

03:18.480 --> 03:27.880
to volunteer? He said read the code. Yeah, gladly. You couldn't be more on queue. We're

03:27.880 --> 03:34.680
going to look at UMB, which comes from openBSD actually. So this is the manual page from

03:34.680 --> 03:45.320
openBSD for UMB. Well, documentation is usually very good. So that was just a joke. So basically,

03:45.320 --> 03:53.120
the UMB driver is about a USB network card which does LTE slash 4G support on the USB

03:53.120 --> 04:00.440
bus using the MBM protocol. So it's actually a standard protocol for mini cards across

04:00.440 --> 04:09.240
vendors to support for cards from Dell, Ericsson, CR wireless, quite a few, and so on. And I

04:09.240 --> 04:17.460
actually happened to have ported the code from openBSD to netBSD where I heard it works.

04:17.460 --> 04:23.320
And then I also did it for freeBSD. And this is actually a side-by-side comparison of the

04:23.320 --> 04:29.800
freeBSD code on the left and the netBSD code on the right. I didn't put openBSD here because

04:29.800 --> 04:36.480
it's actually very, very close to the netBSD code, which is good news for the Java Harmony.

04:36.480 --> 04:48.480
So just keep in mind that it's also an openBSD. But anyway, to prove my point, the netBSD port

04:48.480 --> 04:56.560
is actually also quite close to the freeBSD one, but there are some differences. So again,

04:56.560 --> 05:05.160
sorry if it's not super readable here in the room. Probably on... Sorry? Actually on the

05:05.160 --> 05:10.560
stream then it looks less good. And I prefer to show my face than the code. No, I'm just

05:10.560 --> 05:19.280
kidding. We wish we had planned better. No, actually we spent some time figuring different

05:19.280 --> 05:25.880
options, but right now it's the best compromise. But to summarize, of course, the license text

05:25.880 --> 05:31.920
stays the same. The system headers are quite similar. Some are in common. Some are necessary

05:31.920 --> 05:38.960
in one over the other. Then if we keep scrolling down, basically the black part are identical.

05:38.960 --> 05:46.200
The purple are changes. So then except for some debugging variables here, it's very similar.

05:46.200 --> 05:53.280
At the top of the driver is like the variables. And then we reach the message descriptions,

05:53.280 --> 05:59.640
the prototypes. They're actually very similar except on netBSD. Or actually in the original

05:59.640 --> 06:06.640
openBSD driver there was a redefinition of static. So I followed the coding style that

06:06.640 --> 06:13.600
I found in the original driver or in freeBSD in this case. So that's really the only major

06:13.600 --> 06:20.200
difference in most prototypes. And it goes on and on. Then on freeBSD you have one big

06:20.200 --> 06:27.160
difference on the USB stack where the definitions for the transfers are in a variable. So you

06:27.160 --> 06:36.040
have the bulk ones in and out, like transmission and reception. Then we continue the function

06:36.040 --> 06:42.960
for probing fits in one screen. So here as we saw in the manual page it's called probe

06:42.960 --> 06:48.920
and netBSD is called match. Otherwise it does mostly the same. There's a few differences

06:48.920 --> 06:54.800
in the USB stack. So get interface descriptor, find iDesk, but it's actually more or less

06:54.800 --> 07:02.480
the same. Then that's the code to attach. It's a bit more involved. But of course some variables

07:02.480 --> 07:08.400
are in common because it's the same code originally. Then quite a few changes, but it's actually

07:08.400 --> 07:17.480
the same thing that is being done looking up USB device IDs on both sides. Some setup,

07:17.480 --> 07:24.360
the printing for the console. So the USB stack is quite similar but also different. So here

07:24.360 --> 07:30.520
you have get interface descriptor. Here you have something else which is the same. Yeah,

07:30.520 --> 07:40.160
get interface descriptor again. The naming conventions are a bit different, but overall

07:40.160 --> 07:47.920
it's very similar. So I can keep scrolling. I hope you get the idea. Basically we wish

07:47.920 --> 07:56.480
the detaching code. Same thing again. Here we are. The driver of course is the part where

07:56.480 --> 08:03.480
there's the most similarity because it doesn't have to be specific for each BSD. So there's

08:03.480 --> 08:10.280
a lot more black as a consequence. We keep going. I'm not going to show the whole driver

08:10.280 --> 08:15.760
of course. Don't worry. Another thing which is an important thing to have in mind is that

08:15.760 --> 08:20.120
for instance even when the code is the same and USB stack behaves the same way, there

08:20.120 --> 08:25.000
are minor differences. Like on free BSD I had to hold the mutex and a net BSD for a

08:25.000 --> 08:32.280
similar call at task. I didn't have to. So you have to be wary of each specific requirement

08:32.280 --> 08:38.160
of the underlying stack that you're using on each BSD. Some functions can be called

08:38.160 --> 08:44.840
in interrupt context. Some cannot. Some require mutex. Some don't. So basically it's what's

08:44.840 --> 08:53.480
going on. So my dream is to have one driver API for every BSD so that we can share all

08:53.480 --> 08:59.200
the code. But in reality I don't know if there is any chance to get to that. However, it

08:59.200 --> 09:06.480
would be great I think if we could go towards this and have more convergence. Take steps

09:06.480 --> 09:12.520
to get closer. Maybe both on the community level as much as on the programming level

09:12.520 --> 09:19.800
with the driver code. So I'm showing some ideas here today what can be done. In most

09:19.800 --> 09:25.760
BSDs the drivers fit in one file usually for the more complex ones. There's sometimes a

09:25.760 --> 09:31.920
few more files. But if we would change this convention we could have separate files maybe

09:31.920 --> 09:36.960
put variables which would be then the same between the different BSDs in separate files.

09:36.960 --> 09:43.000
So we can easily merge that when there are changes in one or the other. We could separate

09:43.000 --> 09:48.040
the BSD specific code like free BSD specific, open BSD specific, NetBSD specific from the

09:48.040 --> 09:54.520
driver specific code. Maybe another idea. We could go towards abstraction layers which

09:54.520 --> 10:00.080
is not always great but maybe some prototypes, some variable types could be extracted the

10:00.080 --> 10:05.560
same way. We could change names. One great thing about BSDs is that the systems are developed

10:05.560 --> 10:11.240
as one consistent role and there are usually fixed releases for the whole system. So this

10:11.240 --> 10:18.080
is maybe easier to do that in the BSD world than in the Linux world for instance and so

10:18.080 --> 10:23.560
on and so forth. Outside of the driver code itself we have the system databases which

10:23.560 --> 10:28.680
could be unified a bit more like the PCI and USB IDs which are sometimes different between

10:28.680 --> 10:34.320
the different BSDs. Mostly the same but some names change including for register values

10:34.320 --> 10:42.200
in some drivers. The driver names also are sometimes different for the same driver or

10:42.200 --> 10:50.500
at least historically or sometimes not. So just showing ideas. We could also share git

10:50.500 --> 11:00.640
commits if we would have a bigger closer convergence and if we would all switch to git. There are

11:00.640 --> 11:09.160
mirrors too or there is gut. You can stay for Stefan's talk to learn more about that.

11:09.160 --> 11:17.840
So basically I'm trying to set up a new exchange space for this initiative which are called

11:17.840 --> 11:24.160
BSD drivers or BSD driver harmony. So I created a mailing list if you want to join where we

11:24.160 --> 11:31.000
could discuss if the mailing list is the best thing to have. We are in 2023 so we could

11:31.000 --> 11:37.120
also have a discord or something like that. Whatever the cool kids do nowadays. Or anyway

11:37.120 --> 11:41.200
I set up some archives if you want to have discussions on the mailing lists. Maybe we

11:41.200 --> 11:47.080
could set up an RAC channel. Maybe we could set up a wiki somewhere to specifically document

11:47.080 --> 11:54.200
how to best write portable code across the different BSDs. Maybe we could discuss funding.

11:54.200 --> 12:03.480
That would be very welcome. And basically to wrap up now of course each BSD has its

12:03.480 --> 12:10.120
own community but maybe we could try to get closer even though we have the major conferences

12:10.120 --> 12:15.360
and here the common dev room would be great maybe outside of the conferences to create

12:15.360 --> 12:21.880
a space for this. So as mentioned, kind of drivers can be challenging. They are quite

12:21.880 --> 12:27.880
close, similar but also different. So anyway I hope this is worth the effort and that you

12:27.880 --> 12:35.280
will join, participate and that we can write BSD codes together. You can reach me at this

12:35.280 --> 12:40.360
address. I'm at NetBSD actually. I'm also on the NetBSD financials board so it's easy

12:40.360 --> 12:45.840
for me also to forward ideas in the higher spheres across the different committees we

12:45.840 --> 12:52.700
have. We have many committees. And then thanks for listening. I will welcome your questions

12:52.700 --> 13:01.080
also online. And hope it resonates for you.

13:01.080 --> 13:30.360
Great. My question you can pick up fact sheets.

13:30.360 --> 13:32.280
or I guess how difficult it is to make

13:32.280 --> 13:35.400
an abstraction layer which would work on all three BSDs.

13:35.400 --> 13:38.740
Then Taylor said then you have a force interface,

13:38.740 --> 13:40.700
which is kind of true.

13:40.700 --> 13:42.360
We all remember the XKCD.

13:42.360 --> 13:43.960
I will just create a new standard

13:43.960 --> 13:45.920
because there's too many standards.

13:45.920 --> 13:49.480
Well, I don't think it's so difficult necessarily because,

13:49.480 --> 13:52.080
as mentioned, a lot of drivers are actually very similar.

13:52.080 --> 13:54.240
The subsystems are very similar.

13:54.240 --> 13:59.640
I just learned this morning that in some cases,

13:59.640 --> 14:01.600
there are already abstraction layers which are

14:01.600 --> 14:05.560
coming like in free BSD from Juniper, if I'm correct.

14:05.560 --> 14:08.480
So maybe this is something which could be used also across

14:08.480 --> 14:12.160
the other BSDs converting code for that.

14:12.160 --> 14:13.800
What did you say about Juniper?

14:13.800 --> 14:16.280
That they are now pushing a new abstraction layer in

14:16.280 --> 14:19.680
free BSD for the network drivers and it's worked out.

14:19.680 --> 14:22.840
Someone already came up with my idea.

14:22.840 --> 14:26.680
I think they're not really having the other BSDs in mind,

14:26.680 --> 14:31.400
but this is something which would maybe help the free BSD drivers,

14:31.400 --> 14:35.400
which would be then converted to be converted in turn to the other BSDs.

14:35.400 --> 14:39.320
So maybe it's going to happen, the factor.

14:39.320 --> 14:41.560
It's one direction we can push for.

14:41.560 --> 14:45.560
That's why I want to talk to developers across the different BSD projects.

14:45.560 --> 14:49.640
I contacted people on the open BSD and free BSD side already.

14:49.640 --> 14:53.240
They are really receptive to the idea.

14:53.240 --> 14:59.720
The issue is to spend the time and probably to make it happen.

14:59.720 --> 15:01.080
Yeah.

15:01.080 --> 15:02.680
Yeah.

15:02.680 --> 15:06.200
More than the uniting the API,

15:06.200 --> 15:09.000
it's more important to know when there's a subtle difference.

15:09.000 --> 15:13.080
You need a new fix for this function and one BSD on for another.

15:13.080 --> 15:15.480
If you port it natively,

15:15.480 --> 15:18.600
you're going to trip over and call.

15:18.600 --> 15:22.720
So you're not really asking a question,

15:22.720 --> 15:27.480
but reminding us basically that some drivers or some subsystems

15:27.480 --> 15:30.840
have very specific constraints on different BSDs.

15:30.840 --> 15:34.280
So the assertion layer will have to keep this in mind really carefully.

15:34.280 --> 15:35.840
Like what I mentioned,

15:35.840 --> 15:38.160
sometimes you need a mutex, sometimes you need,

15:38.160 --> 15:40.880
you can do something in a top context, sometimes not.

15:40.880 --> 15:43.080
So yeah, for sure.

15:43.080 --> 15:45.920
Time is up. Also for questions.

15:45.920 --> 15:48.680
Can we squeeze one more or?

15:48.680 --> 15:50.320
Sure.

15:50.320 --> 15:51.240
Christophe.

15:51.240 --> 15:54.680
Maybe we could start with something like vectoring out common code,

15:54.680 --> 15:58.280
like what Matt Reinde did with the USBNet code,

15:58.280 --> 16:00.880
and push that around as a starter.

16:00.880 --> 16:04.880
Yeah. So you were just saying that for the stream,

16:04.880 --> 16:08.400
we could push for, can you repeat?

16:08.400 --> 16:10.760
The USBNet, what Matt Reinde did was

16:10.760 --> 16:13.480
the common code for all the USBNet working drivers,

16:13.480 --> 16:17.280
factor that out into library and use that in all the others,

16:17.280 --> 16:19.960
about drivers and fix a lot of bugs by the way.

16:19.960 --> 16:23.280
We deleted half the code, next half the bugs.

16:23.280 --> 16:27.040
Yeah. So in that BSD, we've been pushing for USBNet,

16:27.040 --> 16:32.440
unifying drivers on the USB network category to make them more,

16:32.440 --> 16:37.160
the same, we found many bugs and it helped get them all closer together.

16:37.160 --> 16:41.000
Yeah. Okay. I guess we'll stop here for now.

16:41.000 --> 16:41.480
Yeah.

16:41.480 --> 16:50.760
And let the next speaker speak in three minutes. Thank you.

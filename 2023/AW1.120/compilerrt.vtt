WEBVTT

00:00.000 --> 00:10.000
Good afternoon, everyone. I'm Mamda.

00:10.000 --> 00:14.120
I work as a software engineer at Leica GeoSystems,

00:14.120 --> 00:17.480
and I work mostly in embedded domain.

00:17.480 --> 00:22.240
So this is the outline of my talk.

00:22.240 --> 00:31.800
So just to keep everyone on the same page,

00:31.800 --> 00:35.640
I'll be giving a brief introduction about LLVM and Clang,

00:35.640 --> 00:39.760
and so that the terminology is next I'm using are clear.

00:39.760 --> 00:43.240
Then I'll talk about compiler RT sanitizers,

00:43.240 --> 00:45.960
what they are, how you can build them,

00:45.960 --> 00:48.560
and how exactly they work,

00:48.560 --> 00:54.080
and then my final thoughts about sanitizers.

00:54.080 --> 00:57.240
So this is a typical compiler pipeline,

00:57.240 --> 00:59.520
which most of you are aware of,

00:59.520 --> 01:03.400
and they call it as a textbook diagram as well.

01:03.400 --> 01:08.240
So whenever you write a source or a code in any language

01:08.240 --> 01:11.880
to produce a binary executable for your machine,

01:11.880 --> 01:15.440
it has to go through multiple stages.

01:15.440 --> 01:18.560
So mostly, most important ones are the front end,

01:18.560 --> 01:20.400
middle end, and the back end.

01:20.400 --> 01:26.760
And the front end actually does all the lexical analysis,

01:26.760 --> 01:29.720
semantic analysis, it checks the syntax,

01:29.720 --> 01:33.680
and then it generates an intermediate representation.

01:33.680 --> 01:35.400
Then it is passed to the middle end,

01:35.400 --> 01:40.080
which does optimizations independent of the target.

01:40.080 --> 01:42.240
And then it is passed to the back end,

01:42.240 --> 01:45.760
which generates much executable,

01:45.760 --> 01:50.200
and it has more optimizations depending on the target

01:50.200 --> 01:52.160
you are building it for.

01:52.160 --> 01:55.560
And sometimes if there are multiple object files,

01:55.560 --> 01:59.560
then comes in the picture linker.

01:59.560 --> 02:03.680
So how does LLVM fits in our pipeline?

02:03.680 --> 02:08.600
So basically, the same, it's LLVM,

02:08.600 --> 02:12.520
it's a modular and reusable compiler framework,

02:12.520 --> 02:16.320
and it provides front end, back end, and LLVM core,

02:16.320 --> 02:18.800
which is the LLVM optimizer.

02:18.800 --> 02:23.160
So if we map it to our compiling pipeline,

02:23.160 --> 02:27.200
so for depending on the language you are trying to build

02:27.200 --> 02:29.920
or use this compiling tool chain,

02:29.920 --> 02:33.080
you have LLVM front end,

02:33.080 --> 02:37.360
that is the Clang for C languages and Rust,

02:37.360 --> 02:38.920
Rust C for Rust,

02:38.920 --> 02:41.720
and then depending upon the target,

02:41.720 --> 02:48.720
it will use the target as x86, 32-bit or 64.

02:50.080 --> 02:53.320
And the main part, which is most reusable

02:53.320 --> 02:55.360
from the LLVM perspective,

02:55.360 --> 02:58.000
it's the LLVM optimizer and the core.

02:58.000 --> 03:02.240
So if I have to develop a new compiler tool chain,

03:02.240 --> 03:05.000
I can easily reuse LLVM.

03:05.000 --> 03:07.640
I just have to write my own front end,

03:07.640 --> 03:12.000
and if there is a new hardware, back end maybe.

03:12.000 --> 03:16.160
So in short, I can say LLVM is like a Lego

03:16.160 --> 03:19.560
of compiler tool chains.

03:19.560 --> 03:24.560
Next, focusing a bit more on one of the LLVM front end Clang,

03:24.960 --> 03:29.080
which is built for targeting mostly C, C++,

03:29.080 --> 03:31.120
and C-like languages.

03:31.120 --> 03:35.560
And here, whenever you provide your source code,

03:35.560 --> 03:38.160
it performs some lexical analysis,

03:38.160 --> 03:40.600
it generates tokens for parsing,

03:41.440 --> 03:43.440
then it does semantic analysis

03:43.440 --> 03:46.080
and generates abstract syntax tree,

03:46.080 --> 03:50.000
and the end goal should be LLVM intermediate representation.

03:51.560 --> 03:56.480
So just to summarize, LLVM is a collection of all modular

03:56.480 --> 03:58.920
and reusable compiler technologies,

03:58.920 --> 04:02.360
and there is much more to it because it provides now

04:02.360 --> 04:06.640
with static analyzers, sanitizers, and more libraries.

04:06.640 --> 04:10.960
So it comes under an umbrella project as LLVM.org.

04:10.960 --> 04:14.320
And Clang is a compiler front end,

04:14.320 --> 04:18.960
which is mostly for C, C++ and C-like languages.

04:18.960 --> 04:22.560
But when we say Clang executable,

04:22.560 --> 04:25.040
it's more than a front end.

04:25.040 --> 04:29.520
So when you build LLVM, you have Clang executable as well.

04:29.520 --> 04:31.720
And it's like a compiler driver.

04:31.720 --> 04:35.680
So for example, if you have a static compiler,

04:35.680 --> 04:40.680
and we have to tell it which directives to use

04:40.680 --> 04:44.360
or to use this hyphen I option,

04:44.360 --> 04:46.320
where is the standard library path,

04:46.320 --> 04:49.440
for example, for C, C++.

04:49.440 --> 04:53.240
So Clang as a driver does most of the housekeeping

04:53.240 --> 04:57.720
for all this task, and it helps this compiling pipeline

04:57.720 --> 05:00.760
to tell you where to look for the libraries

05:00.760 --> 05:04.760
and also provide some OS related features

05:04.760 --> 05:07.960
and how your OS is.

05:09.280 --> 05:13.680
So that was just a brief introduction about Clang and LLVM.

05:13.680 --> 05:17.520
So now I'll talk about compiler RT sanitizers.

05:17.520 --> 05:20.840
It's one of the sub projects in LLVM.

05:20.840 --> 05:25.840
But before that, I'll highlight about the run times.

05:25.880 --> 05:28.880
So LLVM comes with compiler RT run times.

05:28.880 --> 05:33.880
It's pretty much equivalent of lib GCC for LLVM pipeline.

05:33.880 --> 05:37.560
And it provides target specific support

05:37.560 --> 05:39.480
for some low level functionalities,

05:39.480 --> 05:42.280
which hardware itself cannot do.

05:42.280 --> 05:45.400
So it consists of three main components,

05:45.400 --> 05:49.040
built-ins, sanitizer, run times and profilers.

05:49.040 --> 05:52.480
So built-ins provide implementation

05:52.480 --> 05:57.440
for target specific hooks, which hardware itself cannot do.

05:57.440 --> 05:59.920
So just to simplify it a bit more,

05:59.920 --> 06:04.920
for example, if the 32 bit system cannot do 64 bit division.

06:08.120 --> 06:10.840
So here you can see a code snippet.

06:10.840 --> 06:14.920
And if I try to compile it using Clang,

06:14.920 --> 06:19.840
so first we do a normal compilation on x86 machine,

06:19.840 --> 06:21.520
which is a 64 bit.

06:21.520 --> 06:26.520
And here on left, you can see it directly calls this diff Q,

06:28.160 --> 06:31.280
which means it performs the division itself.

06:31.280 --> 06:35.120
But when I use hyphen M32,

06:35.120 --> 06:38.740
which is I'm forcing it to compile for 32 bit machine,

06:39.920 --> 06:41.600
it depends on another call.

06:41.600 --> 06:44.880
It actually calls this U-diff I3,

06:44.880 --> 06:49.120
which is basically a built-in implementation in compiler RT.

06:49.120 --> 06:54.120
So this is an overall picture of compiler RT run times.

06:55.300 --> 06:57.760
So talking about the sanitizers,

06:57.760 --> 07:00.440
sanitizers are like runtime checks,

07:00.440 --> 07:04.400
which it's like adding a code probe in your code

07:05.320 --> 07:08.720
to verify if there are any memory bugs

07:08.720 --> 07:13.080
or to sanitize the code or to find any security flaws.

07:13.080 --> 07:18.080
So in case of LLVM, it's provided by compiler RT,

07:18.080 --> 07:21.440
compiler RT and called as compiler RT sanitizers.

07:22.380 --> 07:25.400
And there are multiple kind of sanitizers available.

07:26.280 --> 07:27.880
First is address sanitizer,

07:27.880 --> 07:32.400
which you can use to detect use after free buffer overflow

07:32.400 --> 07:34.660
and memory leaks as well.

07:34.660 --> 07:37.360
Then you have undefined behavior sanitizers,

07:37.360 --> 07:39.440
memory sanitizers to identify

07:39.440 --> 07:42.500
if there is some uninitialized memory.

07:42.500 --> 07:46.000
And threat sanitizer to detect some race conditions

07:46.000 --> 07:47.760
and deadlocks.

07:47.760 --> 07:52.420
So here it's just an example of how sanitizer looks.

07:52.420 --> 07:54.800
So here is a very simple code

07:54.800 --> 07:58.540
where I'm allocating some memory in heap.

07:58.540 --> 08:02.360
And then I'm trying to, I'm freeing it

08:02.360 --> 08:05.000
and then I'm trying to access it after free.

08:05.000 --> 08:09.380
So if you build this code with your sanitizer flag on

08:09.380 --> 08:12.480
and try to run it, immediately it will complain

08:12.480 --> 08:16.760
that you are trying to access a memory after free.

08:16.760 --> 08:18.840
So that's how it looks like

08:18.840 --> 08:21.380
when it's built with address sanitizer.

08:22.440 --> 08:23.920
And I will talk in more detail

08:23.920 --> 08:27.280
about what goes behind the scene.

08:27.280 --> 08:31.760
But before that, how to build compiler RT sanitizers.

08:31.760 --> 08:34.760
So there are a lot of documentation around as well.

08:34.760 --> 08:37.080
And it's very easy to follow as well,

08:37.080 --> 08:39.320
but sometimes it works, sometimes it doesn't.

08:39.320 --> 08:44.320
So you can build first compiler RT with LLVM, it's easy.

08:46.240 --> 08:50.560
You can directly enable it with LLVM enabled projects

08:50.560 --> 08:55.480
when you're building your complete LLVM tool chain.

08:55.480 --> 08:57.800
And you can do a separate build as well

08:57.800 --> 09:00.200
if you have your LLVM config

09:00.200 --> 09:02.740
and use generator of your choice.

09:04.560 --> 09:06.320
To enable the sanitizers,

09:06.320 --> 09:10.760
so if I'm doing a build along with the complete LLVM tool

09:10.760 --> 09:14.680
chain, I just have to use this flag,

09:14.680 --> 09:17.880
compiler RT build sanitizers to on.

09:17.880 --> 09:21.920
And when you do this, and here I'm using Ninja

09:21.920 --> 09:26.920
as a generator, you can see we get a config out of CMake

09:27.720 --> 09:31.360
and you can see it is enabling different sanitizers

09:31.360 --> 09:34.760
as address sanitizer, leak sanitizers,

09:34.760 --> 09:37.800
memory sanitizer, thread and undefined behavior.

09:39.480 --> 09:42.360
And same you can do for, and after, sorry,

09:42.360 --> 09:44.120
after the installation and build,

09:44.120 --> 09:46.760
you can get these set of libraries.

09:48.700 --> 09:51.520
You can do the same for the standalone build as well

09:51.520 --> 09:53.800
with the similar flag.

09:53.800 --> 09:55.760
And this is the config generated

09:55.760 --> 09:58.740
when I'm doing a compiler RT standalone build.

09:59.960 --> 10:04.600
And then it's also possible to cross compile RT sanitizers.

10:04.600 --> 10:06.880
You have to provide a lot of flags

10:06.880 --> 10:10.200
and you need to have your arms as well.

10:11.040 --> 10:13.760
And I personally don't prefer this way,

10:13.760 --> 10:16.440
but there is a talk today in the end from Peter

10:17.280 --> 10:21.240
about building embedded tool chain using LLVM.

10:22.560 --> 10:27.560
So to make it a bit easier for all the embedded developers,

10:28.660 --> 10:30.740
there is a, in Yocto project,

10:30.740 --> 10:34.400
there is an open embedded layer called meta-clang.

10:34.400 --> 10:37.560
It makes it a bit easy because it provides everything

10:37.560 --> 10:39.440
for building your tool chain

10:39.440 --> 10:42.320
and you just have to include this layer

10:43.840 --> 10:47.440
if people are aware of Yocto builds.

10:47.440 --> 10:50.080
And just few configurations are needed.

10:50.080 --> 10:53.280
Like you have to enable the SDK,

10:53.280 --> 10:55.920
you have to use LLVM run times

10:55.920 --> 10:58.860
and then either you can write in your package groups

10:58.860 --> 11:01.960
or in local conf to include compiler RT

11:01.960 --> 11:04.160
and compiler RT sanitizers.

11:04.160 --> 11:07.560
And this actually generates a SDK

11:07.560 --> 11:10.800
and it's very easy to distribute this SDK

11:10.800 --> 11:14.560
to other developers or like in our case,

11:14.560 --> 11:18.640
I used to send it to the application team

11:18.640 --> 11:20.760
so that they can use this

11:20.760 --> 11:24.000
and the people who are developing C++ code,

11:24.000 --> 11:25.840
they can run their code,

11:25.840 --> 11:29.760
they can compile their code and run sanitizers on it.

11:29.760 --> 11:33.960
So this was actually while contributing to meta-clang,

11:33.960 --> 11:38.960
I became more aware about compiler RT sanitizers

11:39.040 --> 11:43.640
and also now it's available for ARM32 bit

11:43.640 --> 11:47.120
and ARM64 bit and x86 of course.

11:47.120 --> 11:52.120
And you can easily test it also on KMU ARM as well,

11:52.760 --> 11:57.440
just specifying your sysroot and running your test code

11:57.440 --> 12:00.760
to see how it behaves on your actual target.

12:00.760 --> 12:05.760
So that was all about what is compiler RT sanitizers,

12:06.720 --> 12:11.240
how we build it, but what exactly goes behind the scene.

12:12.520 --> 12:17.520
So here I'm using an example of address sanitizer to use

12:18.960 --> 12:21.360
and here is a very basic code

12:21.360 --> 12:24.480
where we are taking some arguments

12:24.480 --> 12:27.040
and converting into integer.

12:27.040 --> 12:31.760
But here you can see we are using argument counter

12:31.760 --> 12:36.760
and the value for this can be very large as well.

12:37.000 --> 12:41.880
So first time when I try to compile it with clang,

12:41.880 --> 12:46.240
it compiles and when you run it,

12:46.240 --> 12:48.640
after like as you can see easily

12:48.640 --> 12:50.600
and it's very easy to spot here,

12:50.600 --> 12:53.780
I have defined the size of buffer to be just two.

12:53.780 --> 12:58.540
And if I provide input more than two,

12:58.540 --> 13:01.540
it should fail actually, that's the case.

13:01.540 --> 13:05.500
But it's very, the crooks here is like, it's difficult

13:05.500 --> 13:08.420
for some machine it will fail for three

13:08.420 --> 13:12.900
and for some machine it will fail with the four input

13:12.900 --> 13:15.340
and leads to the segmentation fault

13:15.340 --> 13:18.480
and we don't know what happened exactly behind the scene.

13:18.480 --> 13:22.920
Second, when you try to build it

13:22.920 --> 13:26.040
with address sanitizer enabled

13:26.040 --> 13:28.020
or link it with compiler RT

13:28.020 --> 13:31.380
and with your address sanitizer flag as well.

13:33.160 --> 13:35.440
And the output is actually a bit large,

13:35.440 --> 13:37.680
this is the first part of it.

13:37.680 --> 13:42.680
So it can easily spot that there was a stack overflow,

13:43.160 --> 13:46.240
stack buffer overflow and it also points out

13:46.240 --> 13:49.200
if you build it with hyphen G option,

13:49.200 --> 13:52.160
it also points out at what line it is failing.

13:55.560 --> 14:00.560
But what exactly led to generation of this kind of error.

14:00.800 --> 14:05.200
So in very simple term, when address sanitizers,

14:05.200 --> 14:08.080
adding sanitizer is like adding an additional code

14:08.080 --> 14:11.280
to your actual code to just check

14:11.280 --> 14:13.920
when it is going to fail and report the error.

14:13.920 --> 14:15.520
So here it looks very easy.

14:15.520 --> 14:19.000
Okay, if my buffer size is more than two

14:19.000 --> 14:22.600
or sorry, if the input size for the buffer is more than two,

14:22.600 --> 14:25.000
just notify it's an error.

14:25.000 --> 14:27.740
But behind the scene for address sanitizer,

14:27.740 --> 14:31.400
it's much more and it can adopt multiple strategies

14:31.400 --> 14:32.560
to implement it.

14:33.400 --> 14:38.320
So here address sanitizer uses memory mapping.

14:39.520 --> 14:42.600
So memory that should not be accessed

14:42.600 --> 14:44.960
is called as poisoned memory.

14:44.960 --> 14:47.960
So behind the scene, it's implemented like to check

14:47.960 --> 14:51.160
whether this is getting poisoned or not.

14:51.160 --> 14:53.980
So here poisoned means either it is referring

14:53.980 --> 14:58.980
to some deallocated memory or some already allocated memory

15:00.240 --> 15:03.760
or there is getting some overflow or not

15:03.760 --> 15:05.140
and just report the error.

15:06.080 --> 15:10.440
But there is much more how this memory is mapped.

15:10.440 --> 15:15.440
So for any code, any application that you build,

15:16.480 --> 15:19.480
the virtual address space is divided

15:19.480 --> 15:21.000
into two kind of memories.

15:21.000 --> 15:24.960
One is shadow memory and one is application memory.

15:24.960 --> 15:29.000
So for address sanitizer, it is more important

15:29.000 --> 15:32.720
to implement this is poisoned and report error

15:32.720 --> 15:34.780
in a very compact and fast way.

15:35.720 --> 15:39.720
Then talking about shadow memory and the application memory.

15:39.720 --> 15:44.400
So application memory is the main memory of the code

15:44.400 --> 15:48.240
and shadow memory is a copy of application memory,

15:48.240 --> 15:52.680
but here eight bytes of your application map memory

15:52.680 --> 15:55.960
is mapped as one byte in shadow memory.

15:55.960 --> 15:59.280
And when the sanitizer checks,

15:59.280 --> 16:02.040
whether this memory is poisoned or not,

16:02.040 --> 16:04.760
it is mapped to either zero or one.

16:04.760 --> 16:08.440
So here it's a small portion of shadow memory

16:08.440 --> 16:10.880
above of our example.

16:10.880 --> 16:14.760
And you can see the memory which is accessible

16:14.760 --> 16:18.600
and which is in good condition is marked as zero.

16:18.600 --> 16:23.600
But here when we are checking the buffer here,

16:25.680 --> 16:29.680
you can see after it's marked as the memory

16:29.680 --> 16:34.000
which is like more when we are trying to access more

16:34.000 --> 16:37.680
than the allocated buffer size, it's marked as one.

16:37.680 --> 16:41.400
And these, and here you can see in the square brackets,

16:41.400 --> 16:45.040
it is it's marking that hello,

16:45.040 --> 16:48.080
this here you are supposed not to access this,

16:48.080 --> 16:50.680
it's getting out of the range of the buffer.

16:50.680 --> 16:53.680
So that's how this application memory

16:53.680 --> 16:55.080
and shadow memory is used.

16:55.080 --> 17:00.080
And then you can see here we restrict it as the red zones.

17:01.460 --> 17:05.520
So if you have anything greater than these,

17:05.520 --> 17:07.380
than the allocated one.

17:07.380 --> 17:09.660
So that one gets marked as one

17:09.660 --> 17:11.800
and you can see F1, F3 around.

17:11.800 --> 17:16.600
And so that's how the address sanitizer works

17:16.600 --> 17:19.960
by using this shadow memory and application memory

17:19.960 --> 17:24.200
and knowing about your shadow memory.

17:24.200 --> 17:26.480
And whenever it spots it's one,

17:26.480 --> 17:29.280
then it says, okay, there is a problem.

17:29.280 --> 17:33.280
So that's all about the address sanitizer and how it works.

17:33.280 --> 17:38.280
So here are my final thoughts about using sanitizers.

17:39.860 --> 17:44.540
It's a very great tool to find bugs and memory issues

17:44.540 --> 17:49.360
and in a very run in runtime for complex applications.

17:49.360 --> 17:53.460
So by using sanitizers, you can improve your development

17:53.460 --> 17:56.340
and you can spot the errors very quickly.

17:57.180 --> 17:59.460
And since we had a very simple example,

17:59.460 --> 18:01.840
but when the code gets more complex,

18:01.840 --> 18:06.740
it's more difficult to find what is the problem.

18:08.180 --> 18:10.860
And though with the sanitizers,

18:10.860 --> 18:12.660
it's more like a tool to check

18:12.660 --> 18:15.360
not to be used in your production.

18:15.360 --> 18:16.900
It increases the code size,

18:16.900 --> 18:20.860
but the sanitizers are comparatively more faster

18:20.860 --> 18:22.800
than Valcrant, the existing one.

18:23.700 --> 18:26.780
And still there are not all the architectures

18:26.780 --> 18:28.580
are supported uniformly.

18:28.580 --> 18:33.100
Like for example, for ARM32, we don't have threat sanitizer

18:33.100 --> 18:35.380
completely implemented.

18:35.380 --> 18:39.660
So I hope we see a better implementation later

18:39.660 --> 18:41.780
and it supports threat sanitization

18:41.780 --> 18:43.860
on 32-bit machines as well.

18:46.060 --> 18:46.980
Questions?

18:46.980 --> 18:53.980
Yes, sorry, the question here is like,

19:08.140 --> 19:11.300
I'm using the optimization flag

19:11.300 --> 19:16.300
for building with address sanitizer enabled.

19:16.300 --> 19:19.020
Yes, it can be enabled to up to three as well

19:19.020 --> 19:21.460
and you get a similar kind of log.

19:36.580 --> 19:40.420
So the question is, where I'm placing the instrumentation

19:40.420 --> 19:44.740
to identify whether my buffer is overflowing or not,

19:44.740 --> 19:46.780
to use assertion here.

19:48.740 --> 19:51.060
I'm not sure I can answer that well,

19:51.060 --> 19:54.900
but it's more, the strategy of this one is using more

19:54.900 --> 19:57.940
with this memory mapping one.

19:57.940 --> 20:01.380
And also here, since this buffer size is very small,

20:01.380 --> 20:17.420
so maybe assertion might work here.

20:17.420 --> 20:24.420
Okay, thanks.

20:40.860 --> 20:43.020
This I'm also not much aware of.

20:43.020 --> 20:45.660
So the question is like, if I can sanitize it

20:45.660 --> 20:48.940
for a very specific portion of the code, right?

20:51.940 --> 20:54.860
Yeah, you can, no, I'm sorry, I'm not much aware of.

20:54.860 --> 20:59.580
You can reverse it, you can prevent some specific code

20:59.580 --> 21:03.260
from being instrumented, either by annotating the code

21:03.260 --> 21:05.940
or by using the blacklist.

21:05.940 --> 21:08.860
Hi, yeah, there is this blacklist address sanitizer options

21:08.860 --> 21:11.060
as well, yeah.

21:11.060 --> 21:13.900
Have you, you say that sanitizers are primarily

21:13.900 --> 21:16.420
a development tool, and yes, they mostly are,

21:16.420 --> 21:19.220
but have you ever looked into using some of them

21:19.220 --> 21:22.860
for actual production executables for hardening?

21:22.860 --> 21:26.940
For example, UBSan has a fairly minimal overhead,

21:26.940 --> 21:29.020
so it can be used in production,

21:29.020 --> 21:30.820
especially if you make it a trap,

21:30.820 --> 21:35.060
or if you make it, if you use the minimal runtime,

21:35.060 --> 21:37.540
or also there's GWB-asan,

21:37.540 --> 21:40.180
which is like a lightweight sampling version

21:40.180 --> 21:43.580
of other sanitizers, which can be used in runtime.

21:43.580 --> 21:46.020
I think Android is using it actually easily.

21:46.020 --> 21:49.860
Okay, so does it support some of the embedded platforms

21:49.860 --> 21:52.340
as well, like ARM32 or 64?

21:52.340 --> 21:55.140
It supports, I believe it does,

21:55.140 --> 21:58.900
well, UBSan works pretty much everywhere, almost everywhere.

21:58.900 --> 22:02.700
GWB-asan works, I think, almost everywhere,

22:02.700 --> 22:07.700
but it's also dependent on external function

22:07.700 --> 22:12.700
for unwinding, so it might not be great in all scenarios.

22:13.300 --> 22:14.580
It's really dependent.

22:14.580 --> 22:15.420
Okay.

22:15.420 --> 22:17.020
But we have to show the first preview.

22:17.020 --> 22:18.860
Yes.

22:18.860 --> 22:23.340
I was wondering if you can use this for kernel

22:23.340 --> 22:25.340
and ring zero code as well.

22:25.340 --> 22:27.860
Yeah, you can, but like there's like,

22:27.860 --> 22:29.020
But there's a,

22:29.020 --> 22:32.380
Why there are, if you provide it in the kernel,

22:32.380 --> 22:37.380
you don't have like the runtime is not in the MPM,

22:37.860 --> 22:41.540
it's actually open by the kernel and it's in binary.

22:41.540 --> 22:43.100
You insert the checks,

22:43.100 --> 22:45.980
but the hooks themselves are implemented in the kernel.

22:45.980 --> 22:50.460
Well, some sanitizers don't require any runtime, so.

22:50.460 --> 22:53.100
So, for instance, you need this implementation.

22:53.100 --> 22:55.620
Yeah, but there's a KA center.

22:55.620 --> 22:59.540
Yeah, you can use kernel address sanitizer for it, maybe.

22:59.540 --> 23:02.980
But like, it's on the phone for it, like the,

23:02.980 --> 23:05.260
it's on best point, like the,

23:05.260 --> 23:08.580
I think it's just a level implementation of the stuff.

23:08.580 --> 23:12.060
There's other sanitizers in kernel which are implemented

23:12.060 --> 23:14.700
this way, I think that it's KCFI and,

23:17.020 --> 23:17.860
yeah.

23:19.940 --> 23:20.780
Yes.

23:20.780 --> 23:21.620
All right.

23:21.620 --> 23:24.500
Do you know where the code lives currently

23:24.500 --> 23:26.780
that does the hooking to malloc and free,

23:26.780 --> 23:28.460
like the C library?

23:28.460 --> 23:32.300
Like how does the interaction with the C library work?

23:32.300 --> 23:33.140
Do you know?

23:33.140 --> 23:35.020
Because like I could have, for example,

23:35.020 --> 23:37.620
have a muscle instead of a chili C library

23:37.620 --> 23:40.300
and I guess the code has to be adapted somehow

23:40.300 --> 23:43.060
or there must be some book infrastructure.

23:43.060 --> 23:45.220
So do you know how that works and where the code lives

23:45.220 --> 23:48.300
that books malloc and free, for example?

23:49.180 --> 23:51.140
Is it in this compiler RT library?

23:51.140 --> 23:53.900
It's in compiler RT built-ins, if I'm right.

23:55.060 --> 23:56.420
It's a great point.

23:56.420 --> 24:00.980
So if you change the version of library you have,

24:00.980 --> 24:02.980
you need a different kind of sanitizer

24:02.980 --> 24:05.380
to support all of these things.

24:05.380 --> 24:06.220
It's horrible.

24:06.220 --> 24:07.580
It's essentially a shared library.

24:07.580 --> 24:10.660
So it's basically just intercepting using.

24:10.660 --> 24:12.540
Yeah, the FM runtime, I have to input

24:12.540 --> 24:14.300
that for malloc and free.

24:14.300 --> 24:17.100
Okay, that's just so it acts outside of the C library.

24:17.100 --> 24:17.940
Yeah.

24:17.940 --> 24:19.220
So I could write my own C of library

24:19.220 --> 24:20.460
and it would still work.

24:20.460 --> 24:21.620
As long as it's dynamically,

24:21.620 --> 24:22.740
I mean this is one of the problems

24:22.740 --> 24:24.740
that sanitizers have at the moment.

24:24.740 --> 24:27.220
Well, for ASAN, yes, but for example,

24:27.220 --> 24:29.460
for L-san, for leak sanitizer,

24:29.460 --> 24:31.300
which is enabled by ASAN,

24:31.300 --> 24:33.980
you need to actually, you need to be aware of things

24:33.980 --> 24:35.900
like the TLS layout and so on,

24:35.900 --> 24:38.580
which needs to have some support.

24:38.580 --> 24:40.980
But the runtime in LLVM definitely

24:40.980 --> 24:42.860
implements both GLF2 and malloc.

24:42.860 --> 24:43.700
Oh, good.

24:44.940 --> 24:46.060
Yes.

24:46.060 --> 24:50.620
Are the sanitizers shared between GCC and LLVM

24:50.620 --> 24:53.220
or does it have its own implementation?

24:53.220 --> 24:54.060
They are.

24:54.060 --> 24:54.900
They have.

24:54.900 --> 24:55.900
They are shared.

24:55.900 --> 24:56.740
Sorry.

24:56.740 --> 24:57.580
Sorry.

24:57.580 --> 25:00.580
Yeah, they're shared, yes.

25:00.580 --> 25:03.860
I noticed that one shadow byte corresponds

25:03.860 --> 25:05.460
to eight actual bytes.

25:05.460 --> 25:08.420
However, considering that there are special values for it,

25:08.420 --> 25:10.420
does it mean that there could be situations

25:10.420 --> 25:11.580
where there could be some byte

25:11.580 --> 25:14.220
which are not protected necessarily by this?

25:14.220 --> 25:16.140
Yeah, there can be some cases

25:16.140 --> 25:19.180
where you can call it as a false, positive kind of thing

25:19.180 --> 25:22.940
or sometimes it is checking very much in the end.

25:22.940 --> 25:25.060
So it was a very small example,

25:25.060 --> 25:30.060
but it can happen that you get these square brackets

25:30.620 --> 25:33.820
at the very end and it's an overrun case.

25:33.820 --> 25:35.660
So that can happen, yes.

25:35.660 --> 25:38.260
Okay, so there are the situations

25:38.260 --> 25:40.300
where the address sanitizer is just getting it wrong

25:40.300 --> 25:42.900
because of the fact is actually valid code,

25:42.900 --> 25:45.860
but there are just limitations to the parallel byte system.

25:45.860 --> 25:46.700
Yes.

25:46.700 --> 25:47.540
Good, okay.

25:47.540 --> 25:48.380
Thanks.

25:49.300 --> 25:50.140
Yes.

25:50.140 --> 25:54.220
So could you get a false negative in some sense

25:54.220 --> 25:59.220
in the sense that if you have two almost adjacent blocks

25:59.820 --> 26:02.500
of allocated application memory

26:03.620 --> 26:05.980
and you access a pointer from one to the other,

26:05.980 --> 26:09.020
could you get a false negative in this sense?

26:09.020 --> 26:10.980
So because that would not be a point

26:10.980 --> 26:12.740
and it would still be part of the application,

26:12.740 --> 26:17.740
but for example, what an address sanitizer has there?

26:17.740 --> 26:22.740
Yeah, it can be, like it can be a false positive case,

26:24.620 --> 26:25.460
maybe.

26:25.460 --> 26:28.060
I think the valid negative is like if A-Fam

26:28.060 --> 26:29.900
will not catch it.

26:29.900 --> 26:31.580
The other case puts red zone.

26:31.580 --> 26:32.420
Yes.

26:32.420 --> 26:34.580
It makes it harder to dig up.

26:34.580 --> 26:35.420
Okay.

26:38.700 --> 26:39.900
Yeah, it's one question,

26:39.900 --> 26:42.020
I think it was already partially answered before,

26:42.020 --> 26:44.100
but I'm not sure, so I'm just gonna ask it.

26:44.100 --> 26:46.500
So for example, I'm also working on embeddits

26:46.500 --> 26:48.780
in an embedded scenario and we don't use,

26:48.780 --> 26:51.540
I think we don't use gilets or muscle,

26:51.540 --> 26:54.620
like we have our own set of proteins for malochic free.

26:54.620 --> 26:55.460
Yes.

26:55.460 --> 26:56.620
Would it also work in that case

26:56.620 --> 26:59.780
or is that then something that you would need to,

26:59.780 --> 27:01.620
are there any more requirements

27:01.620 --> 27:04.220
before you can use these sanitizers on both devices?

27:05.780 --> 27:06.820
For my experience,

27:06.820 --> 27:10.620
I have been just using this meta clang layer included.

27:10.620 --> 27:15.380
And for testing with like for just doing on the SDKs

27:15.380 --> 27:18.740
and emulator, it was perfectly fine.

27:18.740 --> 27:20.820
So not on the actual devices

27:20.820 --> 27:23.580
because it's just meant for testing.

27:23.580 --> 27:24.980
Because you need virtual memory

27:24.980 --> 27:26.980
at the moment to set up the shuttle.

27:26.980 --> 27:30.780
So you can in theory do a bit of fixed offset,

27:30.780 --> 27:32.780
but not in a full point.

27:35.260 --> 27:36.980
Is the kernel address the driver

27:36.980 --> 27:38.980
that hard codes to you?

27:38.980 --> 27:40.820
I don't know.

27:40.820 --> 27:42.820
You have to write your own

27:42.820 --> 27:45.820
set of memory allocation.

28:02.820 --> 28:04.140
All right.

28:04.140 --> 28:04.980
Thank you, Manja.

28:04.980 --> 28:05.820
Thank you.

28:05.820 --> 28:12.820
Thank you.

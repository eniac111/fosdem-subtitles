1
0:00:00.000 --> 0:00:09.160
Hello, can you see my slides?

2
0:00:09.160 --> 0:00:11.560
Yeah, I have only white background,

3
0:00:11.560 --> 0:00:14.800
so the light at the top shouldn't be a big issue.

4
0:00:17.640 --> 0:00:20.000
Yeah, we're good to go.

5
0:00:20.000 --> 0:00:21.760
Okay. Hi, I'm Stefan.

6
0:00:21.760 --> 0:00:25.520
I work on generally open source stuff as a freelancer,

7
0:00:25.520 --> 0:00:27.480
and I'm here to present

8
0:00:27.480 --> 0:00:29.760
something I've been working on as a side project.

9
0:00:29.760 --> 0:00:32.120
In the last few months,

10
0:00:32.120 --> 0:00:36.040
this is part of the Game of Trees project,

11
0:00:36.040 --> 0:00:41.600
which I started in November 2017 at an OpenBSD hackathon in Berlin.

12
0:00:41.600 --> 0:00:45.580
It's compatible with Git repositories and the Git Network protocol,

13
0:00:45.580 --> 0:00:47.360
but apart from that,

14
0:00:47.360 --> 0:00:50.900
it's not trying to replicate Git specifically,

15
0:00:50.900 --> 0:00:52.960
but it's just the idea to

16
0:00:52.960 --> 0:00:56.640
reuse these formats because they're very widely used.

17
0:00:56.640 --> 0:01:01.160
They're fairly okay and well-designed,

18
0:01:01.160 --> 0:01:04.760
so we can just keep using them and not make up our own.

19
0:01:05.760 --> 0:01:08.080
Because it's written on OpenBSD,

20
0:01:08.080 --> 0:01:11.240
it uses a lot of OpenBSD specific APIs.

21
0:01:11.240 --> 0:01:16.040
There's actually a portable version that's maintained by Thomas Adam,

22
0:01:16.040 --> 0:01:21.400
who also does the T-Mux terminal multiplexer portable version,

23
0:01:21.400 --> 0:01:25.440
and you can install this on various systems.

24
0:01:25.440 --> 0:01:30.200
I think Thomas always likes to also explore more options for other systems.

25
0:01:30.200 --> 0:01:31.920
If you're interested, if yours is not listed,

26
0:01:31.920 --> 0:01:33.280
you can talk to him.

27
0:01:33.280 --> 0:01:37.200
Yes, ISC licensed because it aims to be basically

28
0:01:37.200 --> 0:01:39.440
as pleasing to OpenBSD developers as possible.

29
0:01:39.440 --> 0:01:42.000
That's the whole idea.

30
0:01:42.000 --> 0:01:47.920
Now, what we currently have is what's working really well is the client side.

31
0:01:47.920 --> 0:01:52.120
This is basically feature complete at this point.

32
0:01:52.120 --> 0:01:54.680
You might want to have some more convenience things,

33
0:01:54.680 --> 0:01:56.800
but all the basics are there.

34
0:01:56.800 --> 0:01:58.560
Everything is working.

35
0:01:58.560 --> 0:02:03.040
You have several front ends which I'll present in the following slides.

36
0:02:03.040 --> 0:02:06.080
You have a lot of code that's shared by these front ends,

37
0:02:06.080 --> 0:02:10.160
which I've labeled library here because it's in the lib directory of the source tree.

38
0:02:10.160 --> 0:02:15.400
One thing that this program does which is very specific is that it will not touch

39
0:02:15.400 --> 0:02:22.400
repository data outside of programs that are separate and are called libexec helpers.

40
0:02:22.400 --> 0:02:26.160
From the programs point of view,

41
0:02:26.160 --> 0:02:27.720
if you use the library, you don't see this.

42
0:02:27.720 --> 0:02:31.440
You just say open a repository and fetch me some objects and so on.

43
0:02:31.440 --> 0:02:35.160
But internally, it will actually start other programs that restricts

44
0:02:35.160 --> 0:02:39.040
themselves a lot using pledge and unveil and so on.

45
0:02:39.040 --> 0:02:42.360
Those will actually parse the repository data.

46
0:02:43.120 --> 0:02:48.240
This is the current list of commands and I'm quite happy with this set actually.

47
0:02:48.240 --> 0:02:52.280
I've been working with this set for the last five years or so.

48
0:02:52.280 --> 0:02:54.120
They've slowly been added over time,

49
0:02:54.120 --> 0:02:59.240
but I feel very productive with these and I don't miss anything.

50
0:02:59.240 --> 0:03:02.040
I know that some people would like some additional things,

51
0:03:02.040 --> 0:03:04.800
but at this point, we mostly like fine tuning.

52
0:03:04.800 --> 0:03:08.080
You can read the manual page on this URL if you like.

53
0:03:08.080 --> 0:03:11.800
You can actually read it from start to finish in order to get a good idea of how

54
0:03:11.800 --> 0:03:15.080
the system works and how it's supposed to be used.

55
0:03:15.400 --> 0:03:19.680
There's also a got admin utility which mirrors CVS admin or

56
0:03:19.680 --> 0:03:23.400
SVM admin in the sense that if you're doing something that only requires

57
0:03:23.400 --> 0:03:27.920
specific things where you do something with a repository specifically,

58
0:03:27.920 --> 0:03:30.080
you would use that command.

59
0:03:30.080 --> 0:03:31.560
This isn't complete.

60
0:03:31.560 --> 0:03:34.040
There are some things that I would still like to add here,

61
0:03:34.040 --> 0:03:35.400
which we'll go into later,

62
0:03:35.400 --> 0:03:40.960
but it's already prepared a lot of code for the server that I'll talk about.

63
0:03:40.960 --> 0:03:42.840
Because for example, dealing with pack files is

64
0:03:42.840 --> 0:03:45.920
necessary for the server as well as this tool.

65
0:03:45.920 --> 0:03:52.480
We have a curses command line, base terminal browser thing.

66
0:03:52.480 --> 0:03:57.480
You can read commits with that and look at this and blame files and so on.

67
0:03:57.480 --> 0:04:00.960
It's working really well and most recently,

68
0:04:00.960 --> 0:04:04.280
there's a developer Mark Jensack who added a lot of convenience to this,

69
0:04:04.280 --> 0:04:05.440
like vertical scrolling,

70
0:04:05.440 --> 0:04:07.880
diff stat display and all sorts of nice things.

71
0:04:07.880 --> 0:04:12.920
It doesn't work quite well on repositories that have a lot of merge commits.

72
0:04:12.920 --> 0:04:17.160
I found that some repositories are hard to browse if they use a lot of merges,

73
0:04:17.160 --> 0:04:20.280
but for simple repositories is really good.

74
0:04:20.280 --> 0:04:23.600
If something is missing and you feel like you would like to use this

75
0:04:23.600 --> 0:04:25.920
on a repository with lots of merges,

76
0:04:25.920 --> 0:04:29.400
you can please make suggestions as to what we could improve there.

77
0:04:29.400 --> 0:04:35.400
You also have a web front-end which is like CVS web or VUVC.

78
0:04:35.400 --> 0:04:39.280
It's also using the God code internally to show you

79
0:04:39.280 --> 0:04:42.400
files on a web browser and commits and logs and so on.

80
0:04:42.400 --> 0:04:45.760
That's written by Tracy Emery and most recently,

81
0:04:45.760 --> 0:04:49.720
Omar Polo has been doing a lot of refactoring there and added

82
0:04:49.720 --> 0:04:53.120
a templating mechanism for example to deal with generating the HTML,

83
0:04:53.120 --> 0:04:58.080
not from printf but with something more generic and it's quite nice.

84
0:04:58.080 --> 0:05:02.080
It also has RSS feeds for tags which is probably severely outdated,

85
0:05:02.080 --> 0:05:03.280
but I think it's nice.

86
0:05:03.280 --> 0:05:07.040
You can be notified of new releases that way.

87
0:05:07.040 --> 0:05:11.320
Okay, so about the server.

88
0:05:12.920 --> 0:05:17.520
The goal of one of the major milestones for any version control system

89
0:05:17.520 --> 0:05:21.720
that's ever been developed is that eventually you want to be self-hosting.

90
0:05:21.720 --> 0:05:27.000
So far we've been using a Git alight setup for this project and that's working well,

91
0:05:27.000 --> 0:05:32.320
but I would really like to be able to run this on an open BSD server using my own code.

92
0:05:32.320 --> 0:05:36.320
So after putting this off for a long time because I

93
0:05:36.320 --> 0:05:37.760
always thought it would be a lot of work,

94
0:05:37.760 --> 0:05:41.160
I finally ran out of things to do on the client side and said,

95
0:05:41.160 --> 0:05:45.560
okay, I'm going to look into server things now and started talking to people at

96
0:05:45.560 --> 0:05:51.760
hackathons in September and summer last year basically and started working in September.

97
0:05:51.760 --> 0:05:55.160
By now you can install it on OpenBSD current.

98
0:05:55.160 --> 0:05:57.880
It's not yet in the portable version.

99
0:05:57.880 --> 0:06:01.520
Thomas and Omar were going to look at that,

100
0:06:01.520 --> 0:06:03.520
but it might take some time still,

101
0:06:03.520 --> 0:06:05.640
but eventually it should arrive there.

102
0:06:05.640 --> 0:06:14.480
Now, the main use cases I want to support with this are exactly two.

103
0:06:14.480 --> 0:06:16.680
One is of course I want to be self-hosting for

104
0:06:16.680 --> 0:06:19.920
my own source projects and maybe also private repositories.

105
0:06:19.920 --> 0:06:24.800
The other is I want to enable what OpenBSD is using now with CVS,

106
0:06:24.800 --> 0:06:28.280
which is anonymous distribution of source code over SSH,

107
0:06:28.280 --> 0:06:31.640
where you know that the server you talk to is genuine and

108
0:06:31.640 --> 0:06:34.240
has should have the right source code for you,

109
0:06:34.240 --> 0:06:36.800
but the client doesn't need to authenticate.

110
0:06:36.800 --> 0:06:43.600
Every time I want to get source code from a platform like GitHub or GitLab

111
0:06:43.600 --> 0:06:47.080
or other forages that exists with God,

112
0:06:47.080 --> 0:06:51.120
I have to upload an SSH key because they will not accept my SSH connection.

113
0:06:51.120 --> 0:06:52.720
Because God only uses SSH,

114
0:06:52.720 --> 0:06:55.480
it doesn't implement HTTP support.

115
0:06:55.480 --> 0:07:01.360
This is really annoying and it's not really a technical problem to do this.

116
0:07:01.360 --> 0:07:03.960
It's just basically that in their software,

117
0:07:03.960 --> 0:07:05.840
they didn't foresee this use case,

118
0:07:05.840 --> 0:07:08.000
but I think it's very nice.

119
0:07:08.000 --> 0:07:11.360
You can actually go and try this now if you like.

120
0:07:11.360 --> 0:07:18.360
This is the code that I'm talking about running on a server and it's serving God code and God portable.

121
0:07:18.360 --> 0:07:21.040
You have the Horsky fingerprints,

122
0:07:21.040 --> 0:07:24.160
which you can not take a photo of or whatever,

123
0:07:24.160 --> 0:07:26.200
it's also on the website.

124
0:07:26.200 --> 0:07:31.000
If all of you, all at the same time would now go and trigger this,

125
0:07:31.000 --> 0:07:35.400
you'd probably trap my SSH rate limiter,

126
0:07:35.400 --> 0:07:38.760
especially if Fostem is behind that, which I hope not.

127
0:07:38.760 --> 0:07:41.720
But be gentle.

128
0:07:41.720 --> 0:07:43.880
Maybe if you want to clone from this repo,

129
0:07:43.880 --> 0:07:47.640
pick a slide member in your head from between 10 and 37,

130
0:07:47.640 --> 0:07:51.200
and when the slide comes up, you start your clone, then we'll be fine.

131
0:07:54.520 --> 0:08:00.320
I'd like to explain a bit what the Git protocol is doing because without knowing this,

132
0:08:00.320 --> 0:08:03.880
you will not understand what a server should be doing.

133
0:08:06.800 --> 0:08:12.040
And it turns out that if you leave out HTTP and all this stuff and just concentrate on the plain Git protocol,

134
0:08:12.040 --> 0:08:14.520
it's actually really quite simple.

135
0:08:14.520 --> 0:08:18.480
If you don't, if you also ignore some protocol extensions, which we haven't implemented yet,

136
0:08:18.480 --> 0:08:24.480
so this is like really a bare-bone clone that we will go through, it's not very complicated.

137
0:08:24.480 --> 0:08:27.120
The main thing to understand is that when you're using SSH,

138
0:08:27.120 --> 0:08:34.520
the Git client will actually go and run the login shell of the user and then give that a command to run.

139
0:08:34.520 --> 0:08:38.360
And Git basically hard-coded the names of these executables in its protocol.

140
0:08:38.360 --> 0:08:46.600
So you cannot be a Git protocol without calling Git upload pack on the server when you log in.

141
0:08:46.600 --> 0:08:54.240
Also, there's Git receive pack for the other side when you're sending something.

142
0:08:54.240 --> 0:09:00.480
Anyway, if you run GotClone with the dash V flag, you will see a trace that is very similar to what I'm showing now.

143
0:09:00.480 --> 0:09:04.760
I've left out a few bits.

144
0:09:04.760 --> 0:09:10.200
But initially, so this is only Git protocol version 0 slash 1.

145
0:09:10.200 --> 0:09:15.560
Git protocol version 2 changed a bit some things in a good way.

146
0:09:15.560 --> 0:09:20.200
But I haven't implemented that, so we're seeing a version 1 trace.

147
0:09:20.200 --> 0:09:29.000
Initially, the server just sends one message which says, one of the branches I have has this commit hash and this name.

148
0:09:29.000 --> 0:09:31.440
And oh, I also have some capabilities.

149
0:09:31.440 --> 0:09:38.720
You can see in the trace, these are hidden behind a null byte because I suppose very old versions of Git clients

150
0:09:38.720 --> 0:09:44.680
didn't really understand the capabilities yet, and the null byte made them not read that part of the message.

151
0:09:44.680 --> 0:09:49.720
And also for version 2, they did the same thing, hiding a version announcements behind two null bytes

152
0:09:49.720 --> 0:09:56.040
because then the next kind, this is a bit hacky, but seems to work.

153
0:09:56.040 --> 0:09:58.160
Don't worry about the capabilities.

154
0:09:58.160 --> 0:10:00.400
It's not important what they are.

155
0:10:00.400 --> 0:10:05.760
What's important to understand also is that each message is wrapped in a packet line, they call it.

156
0:10:05.760 --> 0:10:14.200
And that's simply a length plus data framing format for these messages.

157
0:10:14.200 --> 0:10:18.240
So then the server keeps sending messages for every branch it has, and here's one more.

158
0:10:18.240 --> 0:10:25.120
It's main branch happens to be the same as head because head is a similar to main, but not important.

159
0:10:25.120 --> 0:10:28.160
And the client just keeps storing these.

160
0:10:28.160 --> 0:10:34.560
And eventually, the server sends a flush packet which is just a zero length packet and says, OK, I'm done.

161
0:10:34.560 --> 0:10:38.720
And in response to which the client will tell the server what it wants.

162
0:10:38.720 --> 0:10:43.760
So the client sends similar messages, also includes its capabilities in the first message it's sending,

163
0:10:43.760 --> 0:10:47.520
and basically says, oh, yeah, I want this commit and this commit and this commit.

164
0:10:47.520 --> 0:10:53.280
And eventually, it also sends a flush packet to terminate that list.

165
0:10:53.280 --> 0:10:55.080
Now, if we're doing a clone, right?

166
0:10:55.080 --> 0:10:56.160
So we have nothing.

167
0:10:56.160 --> 0:11:02.880
But if we already had commits, we could now tell the server what we have by sending half lines,

168
0:11:02.880 --> 0:11:06.600
which look just the same as the want lines with more commit IDs.

169
0:11:06.600 --> 0:11:12.640
And the server then builds a second set of commits in its memory to say, like, OK, the client has all of these already.

170
0:11:12.640 --> 0:11:17.520
I don't need to send those and don't need to send any objects that are hanging off these commits.

171
0:11:17.520 --> 0:11:22.160
It's basically just an optimization to keep the pack file small that will be sent next.

172
0:11:22.160 --> 0:11:25.280
So you're not doing a full clone every time you do a full clone initially.

173
0:11:25.280 --> 0:11:28.080
And then once you have something, you tell the server what you already have.

174
0:11:28.080 --> 0:11:30.440
So you only fetch the new stuff.

175
0:11:30.440 --> 0:11:35.640
And yeah, because we're doing a clone, we're just setting the server we're done.

176
0:11:35.640 --> 0:11:38.400
And now the client's protocols already finished.

177
0:11:38.400 --> 0:11:42.880
So this is basically the last message the client will ever send.

178
0:11:42.880 --> 0:11:47.200
And the server sends one more message in response, which is, in this case, a NAC.

179
0:11:47.200 --> 0:11:48.200
Not acknowledged.

180
0:11:48.200 --> 0:11:50.560
I don't know why they chose these words.

181
0:11:50.560 --> 0:11:51.200
ACK and NACK.

182
0:11:51.200 --> 0:11:59.080
But essentially, what these do is for a NACK, the server keeps sending NACKs while the clients are sending half lines to say,

183
0:11:59.080 --> 0:12:00.800
like, I haven't found a common ancestor yet.

184
0:12:00.800 --> 0:12:02.440
Please send me more.

185
0:12:02.440 --> 0:12:08.040
Because without a common ancestor, the server cannot determine a subset of the commit graph

186
0:12:08.040 --> 0:12:10.600
to use for the PAC file.

187
0:12:10.600 --> 0:12:15.200
Because if the client sends totally unrelated commit hashes, the server doesn't know.

188
0:12:15.200 --> 0:12:18.260
Then the server cannot use this to optimize the PAC file.

189
0:12:18.260 --> 0:12:20.240
So it keeps sending NACK.

190
0:12:20.240 --> 0:12:26.120
And in another case where you would have a common ancestor, the server would send an ACK and a commit hash.

191
0:12:26.120 --> 0:12:31.840
And the client would then stop sending half lines for this branch.

192
0:12:31.840 --> 0:12:36.760
The exact details of this part of the protocol are a bit complicated.

193
0:12:36.760 --> 0:12:40.560
And they kept adding extensions to this behavior.

194
0:12:40.560 --> 0:12:45.880
So the actual NACK and ACK processing depends on various options that you can set in the

195
0:12:45.880 --> 0:12:50.000
protocol, which are all documented in the Git docs.

196
0:12:50.000 --> 0:12:51.840
But it's not important for us here now.

197
0:12:51.840 --> 0:12:55.800
Basically, the server just tells us, well, I have no common ancestor because you don't

198
0:12:55.800 --> 0:12:56.800
have any commits.

199
0:12:56.800 --> 0:12:59.080
That's fine.

200
0:12:59.080 --> 0:13:05.640
And then the server starts calculating the set of objects it wants to put in the PAC file.

201
0:13:05.640 --> 0:13:09.960
And what's shown here is colored Git calls to something else.

202
0:13:09.960 --> 0:13:11.600
It calls it counting and enumerate.

203
0:13:11.600 --> 0:13:14.600
I don't know which step does what.

204
0:13:14.600 --> 0:13:17.400
But what we do is we have the whole graph.

205
0:13:17.400 --> 0:13:19.000
And we keep coloring nodes in the graph.

206
0:13:19.000 --> 0:13:22.240
It's kind of like mine or theirs or something like this.

207
0:13:22.240 --> 0:13:27.400
And then eventually we have a subsection, which in this case would be all of it, of

208
0:13:27.400 --> 0:13:29.200
all the commits first.

209
0:13:29.200 --> 0:13:32.800
And then you go through these commits and traverse all the trees and collect all the

210
0:13:32.800 --> 0:13:36.880
trees and blobs that you need to include for the client.

211
0:13:36.880 --> 0:13:39.200
And then you have a lot of objects.

212
0:13:39.200 --> 0:13:42.200
And you sort them in a certain way.

213
0:13:42.200 --> 0:13:47.160
And you go through and check whether you already have a delta for any of these objects and

214
0:13:47.160 --> 0:13:51.440
whether the delta base will also be included in the PAC you're sending so that you can

215
0:13:51.440 --> 0:13:53.200
avoid creating a delta for this object.

216
0:13:53.200 --> 0:13:57.200
You just reuse the delta that you already have somewhere, which is an optimization for

217
0:13:57.200 --> 0:13:58.480
performance and very important.

218
0:13:58.480 --> 0:14:01.840
If you don't do that, your server is going to be super slow.

219
0:14:01.840 --> 0:14:06.080
And then you delta fi some of the rest of the objects and you're good to go.

220
0:14:06.080 --> 0:14:11.480
Now you know what you need to know to start generating a PAC file stream.

221
0:14:11.480 --> 0:14:16.160
And you start sending this out to the client and the client downloads it.

222
0:14:16.160 --> 0:14:21.680
Once it has everything, it indexes the PAC, which is a step where you have the PAC file

223
0:14:21.680 --> 0:14:24.880
which is full of compressed and delta fi objects.

224
0:14:24.880 --> 0:14:29.600
You don't know what's in it because the server didn't tell you anything about the objects.

225
0:14:29.600 --> 0:14:30.960
You just told the server, sent me this.

226
0:14:30.960 --> 0:14:32.160
The server sends you something.

227
0:14:32.160 --> 0:14:34.280
Now you don't know what's in there.

228
0:14:34.280 --> 0:14:39.160
And to use the PAC file, you always need to have an index for it, which tells you which

229
0:14:39.160 --> 0:14:42.040
object ID is at which offset in the PAC file.

230
0:14:42.040 --> 0:14:44.920
So you just read the whole thing.

231
0:14:44.920 --> 0:14:50.360
And because Git uses intrinsic object identifiers, you can calculate the IDs yourself based on

232
0:14:50.360 --> 0:14:56.080
the contents of the blobs and the trees and the commits and so on.

233
0:14:56.080 --> 0:14:57.160
So you build that up.

234
0:14:57.160 --> 0:15:01.440
And then for any of the delta fi objects, you also need to make sure that you can actually

235
0:15:01.440 --> 0:15:04.280
combine all the deltas to get the right content.

236
0:15:04.280 --> 0:15:06.360
And that's the last step.

237
0:15:06.360 --> 0:15:07.480
That takes quite a while.

238
0:15:07.480 --> 0:15:11.140
And then once you're done with that, and a big PAC anyway, it takes a long time.

239
0:15:11.140 --> 0:15:15.880
And then once you have that, you know, okay, I have this PAC, the commit I wanted is in

240
0:15:15.880 --> 0:15:16.880
there.

241
0:15:16.880 --> 0:15:21.240
All the objects that are hanging off of it are, you know, by nature of the hashing structure

242
0:15:21.240 --> 0:15:22.880
that Git is using are there.

243
0:15:22.880 --> 0:15:23.880
So that's fine.

244
0:15:23.880 --> 0:15:24.880
We're going to use this.

245
0:15:24.880 --> 0:15:29.920
And then you just create a reference for the client to or for the Git client to find its

246
0:15:29.920 --> 0:15:34.920
initial commit and you can use the repository.

247
0:15:34.920 --> 0:15:38.560
In the push case, it works slightly differently.

248
0:15:38.560 --> 0:15:43.000
You still have this reference list announcement at the beginning.

249
0:15:43.000 --> 0:15:48.280
And instead of saying what it wants, the client proposes reference updates to say, oh, I would

250
0:15:48.280 --> 0:15:50.480
like to change the main branch to point to this commit.

251
0:15:50.480 --> 0:15:54.920
I would like to change or add this tag or something like this.

252
0:15:54.920 --> 0:15:59.920
And then it just sends a PAC file and then the server has to index this and figure out

253
0:15:59.920 --> 0:16:04.960
that everything is fine and whether it wants to change these references or not and give

254
0:16:04.960 --> 0:16:09.120
feedback to the client to say, like, yes, okay, you have changed this branch or you've

255
0:16:09.120 --> 0:16:11.820
added this tag and so on.

256
0:16:11.820 --> 0:16:14.560
So that's it for the protocol overview.

257
0:16:14.560 --> 0:16:19.860
You can find a lot of documentation in Git's source tree about this.

258
0:16:19.860 --> 0:16:20.860
They moved the files recently.

259
0:16:20.860 --> 0:16:27.960
So if you have an older Git source checkout, it might still be in documentation slash technical.

260
0:16:27.960 --> 0:16:33.440
But in the current version, it's in documentation slash Git protocol dash PACT attack system

261
0:16:33.440 --> 0:16:34.840
is the main one for this.

262
0:16:34.840 --> 0:16:39.200
But there are also other similarly named files which you can also read if you want to know

263
0:16:39.200 --> 0:16:40.840
more.

264
0:16:40.840 --> 0:16:42.520
Okay.

265
0:16:42.520 --> 0:16:49.000
Another thing we need to talk about because this is important to understand why we would

266
0:16:49.000 --> 0:16:53.320
need to write our own server in the first place because there are already several server

267
0:16:53.320 --> 0:16:54.320
implementations, right?

268
0:16:54.320 --> 0:16:56.880
Why do we want our own?

269
0:16:56.880 --> 0:17:02.160
Well, when you write server software, especially in openBSD, there are a few design patterns

270
0:17:02.160 --> 0:17:06.400
that we use that are not commonly used elsewhere, I would say.

271
0:17:06.400 --> 0:17:09.600
I mean, I've never really seen them used widely outside this project.

272
0:17:09.600 --> 0:17:14.560
So it's a bit unique in that way and the way it does things.

273
0:17:14.560 --> 0:17:16.920
But these things are important to us.

274
0:17:16.920 --> 0:17:21.240
So for example, you know that SSH recently had a release where they had a double free

275
0:17:21.240 --> 0:17:25.960
and advisory project like yesterday, I think, or two days ago, said like, oh, this is not

276
0:17:25.960 --> 0:17:27.800
believed to be exploitable.

277
0:17:27.800 --> 0:17:29.280
That is because of this.

278
0:17:29.280 --> 0:17:32.760
It's not because SSH code is generally great or something.

279
0:17:32.760 --> 0:17:35.420
It's because of the design patterns.

280
0:17:35.420 --> 0:17:40.480
And so we want these design patterns to be used.

281
0:17:40.480 --> 0:17:44.720
And so one of the things you do is that you split your program into several processes

282
0:17:44.720 --> 0:17:47.080
that have different tasks.

283
0:17:47.080 --> 0:17:53.800
And for each task, you decide what kind of system calls does this task need?

284
0:17:53.800 --> 0:18:02.040
And how can I make sure that a process that has network access isn't also able to start

285
0:18:02.040 --> 0:18:05.000
new programs or open files and so on?

286
0:18:05.000 --> 0:18:09.360
There's unveil which restricts view of the file system and allows you to completely hide

287
0:18:09.360 --> 0:18:13.120
like your dot SSH directory, for example, and other things.

288
0:18:13.120 --> 0:18:16.920
It says the program, for example, the God client says I need the repository, I need

289
0:18:16.920 --> 0:18:21.160
the work tree, I need slash temp, that's all I need to see and I don't need to see anything

290
0:18:21.160 --> 0:18:22.640
else.

291
0:18:22.640 --> 0:18:27.400
When you start new programs, you always fork an exec, which means that when you do the

292
0:18:27.400 --> 0:18:32.520
exec, the program will be restarted from scratch and open BST's memory randomization will kick

293
0:18:32.520 --> 0:18:36.600
in and load all the code segments and text segments and stuff in different locations

294
0:18:36.600 --> 0:18:42.360
again, which you do for every request so that when somebody learns information about the

295
0:18:42.360 --> 0:18:47.080
outer space from an info league, they cannot use it on the next request.

296
0:18:47.080 --> 0:18:52.080
You have messages over pipes to communicate between these programs and of course you will

297
0:18:52.080 --> 0:18:55.540
have to have access to files and networks somehow, right?

298
0:18:55.540 --> 0:18:59.160
Especially in isolated contexts and there what you do is you pass file descriptors over

299
0:18:59.160 --> 0:19:05.320
these pipes so that one process opens resources and the other less privileged one is using

300
0:19:05.320 --> 0:19:06.320
them.

301
0:19:06.320 --> 0:19:11.560
So these are the patterns we use.

302
0:19:11.560 --> 0:19:13.840
And so basically this is what this is.

303
0:19:13.840 --> 0:19:18.080
It's a Git server that runs this kind of multi-process program.

304
0:19:18.080 --> 0:19:20.880
It only supports SSH.

305
0:19:20.880 --> 0:19:24.980
Git user account I mapped to regular shell accounts because I didn't want to re-implement

306
0:19:24.980 --> 0:19:26.640
user management.

307
0:19:26.640 --> 0:19:31.280
You can have a special purpose login shell for these users to restrict them if you want

308
0:19:31.280 --> 0:19:33.760
and access permissions are set per repository.

309
0:19:33.760 --> 0:19:36.760
I don't want to go very complicated and make it like per branch or something.

310
0:19:36.760 --> 0:19:40.520
It's just like, no, if you have access to the repo, you have access, which is good enough,

311
0:19:40.520 --> 0:19:46.600
for example, for olden BSD model where you get an account and you can commit anywhere.

312
0:19:46.600 --> 0:19:49.800
When you configure this thing, this is basically what you need to do.

313
0:19:49.800 --> 0:19:53.520
You create your repositories, make sure they're owned by the right user that you run the daemon

314
0:19:53.520 --> 0:20:00.320
as and you have at least one repository in your configuration file which has a path where

315
0:20:00.320 --> 0:20:04.760
the Git repository is and access permissions for either, in this case, the example would

316
0:20:04.760 --> 0:20:10.960
be a group of developers which you have an ETC groups and an anonymous user who can only

317
0:20:10.960 --> 0:20:14.040
read.

318
0:20:14.040 --> 0:20:17.480
My initial implementation of this looked something like this.

319
0:20:17.480 --> 0:20:24.640
It was functional and I could write a test suite for it which was the main part.

320
0:20:24.640 --> 0:20:32.760
This could actually be used to fetch and push changes, but the design wasn't very good in

321
0:20:32.760 --> 0:20:38.280
terms of this multiprocess aspect because the parent started, then it started a reader

322
0:20:38.280 --> 0:20:41.200
process and a write-up process and that was it.

323
0:20:41.200 --> 0:20:45.360
Then all these processes were always used for every connection.

324
0:20:45.360 --> 0:20:49.080
It did allow us to at least get this up and running though.

325
0:20:49.080 --> 0:20:51.360
I don't know.

326
0:20:51.360 --> 0:20:55.120
I asked for a bit of review and got shocked responses to say, no, you're doing this all

327
0:20:55.120 --> 0:20:56.120
wrong.

328
0:20:56.120 --> 0:20:59.840
Fork and exit needs to be done per request and so on.

329
0:20:59.840 --> 0:21:04.920
But at least functionally it was already quite okay.

330
0:21:04.920 --> 0:21:08.760
The repository code there is reusing a lot of the code that I already had for like God

331
0:21:08.760 --> 0:21:11.080
Admin and so on.

332
0:21:11.080 --> 0:21:16.280
I mostly had to rewrite a lot of code for the parent process from scratch which was

333
0:21:16.280 --> 0:21:23.080
all of this.

334
0:21:23.080 --> 0:21:24.560
This is what it looks now.

335
0:21:24.560 --> 0:21:28.920
The parent basically encompasses or used to encompass all of this functionality and will

336
0:21:28.920 --> 0:21:32.240
go through each one by one.

337
0:21:32.240 --> 0:21:36.440
Right now in this current implementation, you have the parent when it starts up must

338
0:21:36.440 --> 0:21:43.520
start this route in order to be able to do certain things like start the listener process

339
0:21:43.520 --> 0:21:48.440
as a route for example.

340
0:21:48.440 --> 0:21:53.360
It uses pledges, standard IO proc exec, which means basically standard IO is you always

341
0:21:53.360 --> 0:21:54.360
want that.

342
0:21:54.360 --> 0:21:55.920
It's like printf and stuff like this.

343
0:21:55.920 --> 0:22:00.560
Then you have proc exec which allows you to fork and execute programs.

344
0:22:00.560 --> 0:22:02.960
You can also send and receive file descriptors.

345
0:22:02.960 --> 0:22:04.720
That's it.

346
0:22:04.720 --> 0:22:09.840
It also currently does an unveil on itself with an X permission so it can re-execute

347
0:22:09.840 --> 0:22:14.560
itself with different option flags to start other versions of itself basically that we

348
0:22:14.560 --> 0:22:16.720
will start later.

349
0:22:16.720 --> 0:22:22.160
I'm not sure if this is really sound because it used to be said that unveil would inherit

350
0:22:22.160 --> 0:22:26.560
to child processes and I'm not sure what happened to this.

351
0:22:26.560 --> 0:22:27.560
Currently it does not.

352
0:22:27.560 --> 0:22:32.560
It does not inherit so I can do this and not lose access to, for example, the slash temp

353
0:22:32.560 --> 0:22:35.600
directory in the processes I'm starting next.

354
0:22:35.600 --> 0:22:40.960
If that ever changes, we would have to adapt this but it's not a big deal.

355
0:22:40.960 --> 0:22:46.760
You start a listener process which opens the actual unique socket that this daemon accepts

356
0:22:46.760 --> 0:22:47.760
connections on.

357
0:22:47.760 --> 0:22:51.600
Basically, if you're a local user on the system, you can always access it through the socket

358
0:22:51.600 --> 0:22:56.920
but you would normally run this shell that we have to which does this for you and speaks

359
0:22:56.920 --> 0:22:59.440
the appropriate protocol.

360
0:22:59.440 --> 0:23:05.640
It then drops privileges and the listener process runs as just standard IOS and FD Unix.

361
0:23:05.640 --> 0:23:09.360
Unix is needed to operate on the Unix socket.

362
0:23:09.360 --> 0:23:16.120
It also doesn't unveil because the Unix pledge allows you to bind other sockets and bind

363
0:23:16.120 --> 0:23:21.040
would create other sockets for you somewhere and we wanted to prevent that.

364
0:23:21.040 --> 0:23:26.520
By unveiling everything, basically hiding everything with unveil, there's no way to

365
0:23:26.520 --> 0:23:33.120
create additional Unix sockets for this process.

366
0:23:33.120 --> 0:23:39.360
In this process also as an initial kind of DOS prevention mechanism, this enforces a

367
0:23:39.360 --> 0:23:44.160
connection limit per UID so that not one user can just connect to the socket and spam it

368
0:23:44.160 --> 0:23:48.400
and prevent access for everyone else.

369
0:23:48.400 --> 0:23:53.960
Now the shell is one of the most sensitive parts because this is where users log in and

370
0:23:53.960 --> 0:23:58.440
you actually confine them to this program so you want this to be reasonably secure.

371
0:23:58.440 --> 0:24:03.840
It starts out with standard IOS, receive FD and Unix to be able to connect to the Unix

372
0:24:03.840 --> 0:24:07.720
socket but once it's connected, it drops that capability so it can no longer open new ones

373
0:24:07.720 --> 0:24:10.040
or do other things related to that.

374
0:24:10.040 --> 0:24:14.560
It only has a file descriptor it can talk on and that's it.

375
0:24:14.560 --> 0:24:19.400
Then it starts translating these packet lines that we saw to messages that are internal

376
0:24:19.400 --> 0:24:26.360
to the program and go over the pipe to the parent.

377
0:24:26.360 --> 0:24:34.880
The parent will then start an authorization process which only runs once and what this

378
0:24:34.880 --> 0:24:44.080
does is it gives itself access to the password database of the system using the SCAD PW syscall

379
0:24:44.080 --> 0:24:49.240
and also hides all the file system.

380
0:24:49.240 --> 0:24:54.040
I think this shows something very nice about Pledge and Unveil when used in combination

381
0:24:54.040 --> 0:25:01.560
because I'm actually reading ETC password and ETC group files but as per Unveil I shouldn't

382
0:25:01.560 --> 0:25:07.320
be able to access those but because I declared that I want to use the password database,

383
0:25:07.320 --> 0:25:13.000
the kernel knows that this process is okay for this process to access those files so

384
0:25:13.000 --> 0:25:17.520
it bypasses Unveil in that specific case which means I don't have to worry about how the

385
0:25:17.520 --> 0:25:19.080
security mechanism is implemented.

386
0:25:19.080 --> 0:25:24.160
I don't have to go and say oh, is my libc when I ask for users going to open this file?

387
0:25:24.160 --> 0:25:27.760
Well, maybe I should add an exception for that or is it going to do this and such and

388
0:25:27.760 --> 0:25:29.600
such syscall?

389
0:25:29.600 --> 0:25:30.600
I don't have to worry.

390
0:25:30.600 --> 0:25:34.640
I just say like Pledge I will do that and Unveil I will do that and they take care of

391
0:25:34.640 --> 0:25:36.120
it which is great for a programmer.

392
0:25:36.120 --> 0:25:39.200
It's really nice to program against this.

393
0:25:39.200 --> 0:25:44.360
So what this process then does of course is matches the users that are logged in against

394
0:25:44.360 --> 0:25:48.720
the access rules in the config file you saw earlier and reports the result to the parent

395
0:25:48.720 --> 0:25:50.880
and just exits because that's all it needs to do.

396
0:25:50.880 --> 0:25:54.120
It's just a one shot thing.

397
0:25:54.120 --> 0:26:01.920
Now the parent starts two processes if authorization has succeeded and the shell is kind of waiting

398
0:26:01.920 --> 0:26:05.200
because it's like hey, I sent a message but you haven't responded yet but yeah, we're

399
0:26:05.200 --> 0:26:07.800
busy, we're setting up.

400
0:26:07.800 --> 0:26:15.440
So we start two things right now, a session process and a repository read or write process.

401
0:26:15.440 --> 0:26:17.420
Currently the naming of this is horribly bad.

402
0:26:17.420 --> 0:26:23.660
It just was the best I could come up with and it kind of grew organically from the initial

403
0:26:23.660 --> 0:26:26.800
setup with those three processes you saw earlier.

404
0:26:26.800 --> 0:26:30.400
But for example, the repository write process is not actually writing to the repository

405
0:26:30.400 --> 0:26:31.400
which you'll see later.

406
0:26:31.400 --> 0:26:36.960
So I'm not very happy about this but and also the session process is basically the most

407
0:26:36.960 --> 0:26:40.680
powerful component of the system right now.

408
0:26:40.680 --> 0:26:45.640
It's the only one that can actually read, write, the repository and create files in

409
0:26:45.640 --> 0:26:46.640
there.

410
0:26:46.640 --> 0:26:50.680
It can also do the same as slash temp and for that it needs all these pledges with like

411
0:26:50.680 --> 0:26:55.480
read path, write path, create path and it also needs file attributes and file locking

412
0:26:55.480 --> 0:26:59.320
because when it changes references for clients it needs to make sure that they get locked

413
0:26:59.320 --> 0:27:04.080
so that you don't have file system races where two clients commit at the same time and then

414
0:27:04.080 --> 0:27:08.600
you end up with a reference that's been overwritten.

415
0:27:08.600 --> 0:27:13.840
It also creates temporary files which the repository process needs and gives it the

416
0:27:13.840 --> 0:27:15.480
file descriptors.

417
0:27:15.480 --> 0:27:20.680
It handles installing of the pack files and so on and it has the git protocol state machine

418
0:27:20.680 --> 0:27:21.680
in it.

419
0:27:21.680 --> 0:27:29.440
So that's a bit, I would like to continue work there to split this up more but because

420
0:27:29.440 --> 0:27:33.120
I had to have a functional implementation and I had to like, I wanted to have something

421
0:27:33.120 --> 0:27:38.440
functional to clone from which is there now, which is on the internet, it's fine but going

422
0:27:38.440 --> 0:27:44.400
forward this needs to be revisited for sure.

423
0:27:44.400 --> 0:27:47.840
The repository read and write process is apart from the name for repo write.

424
0:27:47.840 --> 0:27:51.740
I'm okay with how that's worked out.

425
0:27:51.740 --> 0:27:59.000
Both of them can only read from the repository and what the reader does is it is responsible

426
0:27:59.000 --> 0:28:04.000
for creating a pack file and streaming the result to the guard shell over a pipe that

427
0:28:04.000 --> 0:28:12.360
is created by the session process and handed to both the shell and the reader.

428
0:28:12.360 --> 0:28:18.320
The writer is responsible for receiving a pack file and indexing it.

429
0:28:18.320 --> 0:28:20.320
So the indexing is almost done.

430
0:28:20.320 --> 0:28:24.400
So the indexing is done there.

431
0:28:24.400 --> 0:28:25.400
Okay.

432
0:28:25.400 --> 0:28:30.680
I have one minute left, one minute and a half, I quickly go through some implementation improvements.

433
0:28:30.680 --> 0:28:32.180
It's still like to do.

434
0:28:32.180 --> 0:28:34.440
So we should verify what the client has uploaded.

435
0:28:34.440 --> 0:28:36.840
Currently we trust it what to do.

436
0:28:36.840 --> 0:28:40.400
The config file is parsed every time a process starts which isn't ideal, which works but

437
0:28:40.400 --> 0:28:43.840
it's bad if you're changing the file while the process is running.

438
0:28:43.840 --> 0:28:48.720
Yeah, session I already mentioned and the state machines have some funny bugs so these

439
0:28:48.720 --> 0:28:49.720
really need to be rewritten.

440
0:28:49.720 --> 0:28:53.840
They're basically like switch statements and if and so on and I'd like to properly separate

441
0:28:53.840 --> 0:28:57.280
that out with tables and state transition functions and so on.

442
0:28:57.280 --> 0:29:01.520
But it was just a quick way of getting things working but we already saw like thousands

443
0:29:01.520 --> 0:29:06.520
of flash packets flying through this process because an end of file on a socket triggered

444
0:29:06.520 --> 0:29:10.600
a flash packet and that was kind of stupid.

445
0:29:10.600 --> 0:29:14.600
This has been fixed but there will still be other bugs like that.

446
0:29:14.600 --> 0:29:21.440
We should have some built-in checks so that commits can be verified according to project

447
0:29:21.440 --> 0:29:26.640
policies and things like denying merge commits if you don't want them or binary files and

448
0:29:26.640 --> 0:29:31.160
so on preventing a force push.

449
0:29:31.160 --> 0:29:35.300
I'd like to have commit notifications where you for example send an email or you can send

450
0:29:35.300 --> 0:29:39.360
an arbitrary HTTP request so that if you really want to have a post commit hook script you

451
0:29:39.360 --> 0:29:44.320
run it somewhere else and we'll give you information and trigger it.

452
0:29:44.320 --> 0:29:50.680
Yeah, also it should really keep track of what this space it has when it accepts pack

453
0:29:50.680 --> 0:29:53.880
files and not fill the disk and fail.

454
0:29:53.880 --> 0:29:58.200
We should be able to remove redundant pack files that have accumulated over time.

455
0:29:58.200 --> 0:30:05.080
I'd like to add SHA-2 support and enable it by default once that works so that we use

456
0:30:05.080 --> 0:30:09.240
the SHA-2 because we have zero production deployments right now and not unlike it so

457
0:30:09.240 --> 0:30:13.000
we can just use the new format they've already defined.

458
0:30:13.000 --> 0:30:15.200
And yeah, service at rebasing is another thing.

459
0:30:15.200 --> 0:30:18.160
I'm out of time so I'm not going to go into that.

460
0:30:18.160 --> 0:30:21.600
But yeah, I think this is it.

461
0:30:21.600 --> 0:30:24.600
Sorry for the quick part of the answer.

462
0:30:24.600 --> 0:30:26.600
Thank you very much.

463
0:30:26.600 --> 0:30:35.600
I encourage you to ask a question about your own way.

464
0:30:35.600 --> 0:30:36.600
Okay.

465
0:30:36.600 --> 0:30:52.880
Alright, good thank you.


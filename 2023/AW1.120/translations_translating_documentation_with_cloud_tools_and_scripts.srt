1
0:00:00.000 --> 0:00:09.340
Okay, so good afternoon.

2
0:00:09.340 --> 0:00:13.440
I'm Nilo Menes and I would like to share some scripts.

3
0:00:13.440 --> 0:00:17.860
And after all these presentations we had this afternoon,

4
0:00:17.860 --> 0:00:22.440
quick hacks that I need to

5
0:00:22.440 --> 0:00:31.200
use to implement while translating a name document.

6
0:00:31.200 --> 0:00:37.360
How Python developers could use name on the wiki.

7
0:00:37.360 --> 0:00:40.320
Okay, so I will explain it better later on.

8
0:00:40.320 --> 0:00:44.240
So translation documentation with cloud tools and scripts.

9
0:00:44.240 --> 0:00:47.160
So how it started, we had

10
0:00:47.160 --> 0:00:50.160
a document called the name for Python programmers.

11
0:00:50.160 --> 0:00:54.640
That was written in English and Spanish by the same author.

12
0:00:54.640 --> 0:01:03.520
And this document is simply a translation table from Python to name.

13
0:01:03.520 --> 0:01:06.360
So if you already know how to write Python programs,

14
0:01:06.360 --> 0:01:09.120
you can read this document and it will explain,

15
0:01:09.120 --> 0:01:13.520
okay, this is a structure you have to write that way and so on and so on.

16
0:01:13.520 --> 0:01:19.360
But it was written by the same developer in English and Spanish,

17
0:01:19.360 --> 0:01:24.920
in a wiki format using the markdown and it's the wiki of GitHub.

18
0:01:24.920 --> 0:01:28.840
So in the Brazilian name group,

19
0:01:28.840 --> 0:01:30.640
when people started to say, hey,

20
0:01:30.640 --> 0:01:35.640
it would be useful to get more users to the name language.

21
0:01:35.640 --> 0:01:37.720
If we had this document,

22
0:01:37.720 --> 0:01:41.520
the name for Python programmers also translated in Brazilian Portuguese.

23
0:01:41.520 --> 0:01:42.820
And then I said, okay,

24
0:01:42.820 --> 0:01:46.160
that I did some translations before,

25
0:01:46.160 --> 0:01:48.040
I think I can help on this.

26
0:01:48.040 --> 0:01:52.040
So I started checking how I could do the contribution.

27
0:01:52.040 --> 0:01:53.800
So I went to the GitHub Wiki,

28
0:01:53.800 --> 0:01:58.760
I saw that the source code was in markdown format.

29
0:01:58.840 --> 0:02:04.240
I just check it out on Git and I started translating.

30
0:02:04.240 --> 0:02:06.200
Just after the table of contents,

31
0:02:06.200 --> 0:02:09.000
I say this will not end very well.

32
0:02:09.000 --> 0:02:12.320
I will have lots of problems later on because this document will be changed,

33
0:02:12.320 --> 0:02:16.400
it will be updated. Nobody will tell me that the original was updated.

34
0:02:16.400 --> 0:02:18.880
And in a document,

35
0:02:18.880 --> 0:02:21.560
you can also move the sections and do different things.

36
0:02:21.560 --> 0:02:24.080
So I said, this is not a good start.

37
0:02:24.360 --> 0:02:27.840
So the idea was,

38
0:02:27.840 --> 0:02:31.840
how can I help translating but also building

39
0:02:31.840 --> 0:02:34.360
an initial infrastructure to help

40
0:02:34.360 --> 0:02:37.200
translating this document to other languages?

41
0:02:37.200 --> 0:02:41.360
So how they were doing,

42
0:02:41.360 --> 0:02:44.780
they just cloned the English page and they started writing,

43
0:02:44.780 --> 0:02:48.360
overwriting the text in their native language.

44
0:02:48.760 --> 0:02:51.560
If you are the same author, it's fine.

45
0:02:51.560 --> 0:02:53.160
So he wrote the English version,

46
0:02:53.160 --> 0:02:55.640
he also translated to Spanish.

47
0:02:55.640 --> 0:02:58.680
Three or four languages, I think it's still walkable.

48
0:02:58.680 --> 0:03:03.760
But if you start to have as many languages as we saw in very big projects,

49
0:03:03.760 --> 0:03:06.840
you know that it's impossible to keep up to date.

50
0:03:06.840 --> 0:03:11.800
So I started to think about how can I update this?

51
0:03:11.800 --> 0:03:17.080
And I had the previous experience of working with translations in PO5,

52
0:03:17.080 --> 0:03:19.400
using PO5 for Link City,

53
0:03:19.400 --> 0:03:23.240
and also translations like December how to,

54
0:03:23.240 --> 0:03:27.840
and very other document formats where we really have to translate,

55
0:03:27.840 --> 0:03:30.120
copy and translate.

56
0:03:30.120 --> 0:03:36.200
But the PO format started to be very interesting because I say,

57
0:03:36.200 --> 0:03:40.600
if I manage to convert this markdown to PO and create

58
0:03:40.600 --> 0:03:42.520
a process around it,

59
0:03:42.520 --> 0:03:47.160
then we'll be back to the standard translation process where we can use PO edit,

60
0:03:47.160 --> 0:03:49.980
for example, to do the translation and move on.

61
0:03:49.980 --> 0:03:56.360
So I will report what I did and the tools I selected for doing this job.

62
0:03:57.360 --> 0:04:01.200
As I said, it looked very much like an old problem.

63
0:04:01.200 --> 0:04:03.800
So how to translate software to another language.

64
0:04:03.800 --> 0:04:07.360
The PO and get text combinations is very, very good.

65
0:04:07.360 --> 0:04:09.080
It's easy to use.

66
0:04:09.080 --> 0:04:14.440
Even if it's the first time you are translating software to just tag

67
0:04:14.440 --> 0:04:20.440
the text you want to be translated using get text is relatively easy.

68
0:04:20.440 --> 0:04:22.680
But I wasn't working with source code.

69
0:04:22.680 --> 0:04:24.480
I was working with markdown.

70
0:04:24.480 --> 0:04:28.200
And the markdown, you also have

71
0:04:28.200 --> 0:04:33.220
some extra markers regarding the text formatting,

72
0:04:33.220 --> 0:04:37.460
and very specific items that I didn't want to spend time

73
0:04:37.460 --> 0:04:41.440
creating a converter from markdown to the PO file format.

74
0:04:41.440 --> 0:04:43.160
Of course, I started searching.

75
0:04:43.160 --> 0:04:45.160
I found some tools.

76
0:04:45.160 --> 0:04:52.320
But not all tools support the same kind of markdown as the GitHub markdown.

77
0:04:52.320 --> 0:04:57.040
And also, they create PO files with different qualities.

78
0:04:57.040 --> 0:04:59.920
So I spent some time tweaking.

79
0:04:59.920 --> 0:05:02.400
So if you never worked with the PO file,

80
0:05:02.400 --> 0:05:03.800
it looks like this.

81
0:05:03.800 --> 0:05:07.480
You have a message ID that is usually the original string.

82
0:05:07.480 --> 0:05:10.440
And you have the message string that is the translated one.

83
0:05:10.440 --> 0:05:14.520
And you create a new file for each language you are working on.

84
0:05:14.520 --> 0:05:18.000
So usually, English is the base language.

85
0:05:18.000 --> 0:05:21.420
And then you create a PO file for Portuguese, another for Spanish,

86
0:05:21.420 --> 0:05:24.920
and so on.

87
0:05:24.920 --> 0:05:25.800
Pretty standard.

88
0:05:25.800 --> 0:05:29.520
I think most of the afternoon, we heard about PO.

89
0:05:29.520 --> 0:05:33.280
So I think it was a good idea to keep this format.

90
0:05:33.280 --> 0:05:40.560
So this was the process if we were translating standard source code.

91
0:05:40.560 --> 0:05:41.680
So we have the source file.

92
0:05:41.680 --> 0:05:44.360
We extracted the PO file.

93
0:05:44.360 --> 0:05:49.960
Using the PO file, we use a translation tool, or an editor,

94
0:05:49.960 --> 0:05:54.440
to do the translation manually, string by string.

95
0:05:54.440 --> 0:05:56.480
After that, we compile the MO file.

96
0:05:56.480 --> 0:06:00.120
And the executables or the script can use the MO file

97
0:06:00.120 --> 0:06:03.240
and present the text translated to the end user.

98
0:06:03.240 --> 0:06:06.240
So I just needed to adapt this for markdown.

99
0:06:06.240 --> 0:06:09.040
And there is also a very special point

100
0:06:09.040 --> 0:06:15.320
regarding how the wiki is kept on GitHub that I will explain later.

101
0:06:15.320 --> 0:06:21.240
So how to convert markdown, this is specific for GitHub's markdown

102
0:06:21.240 --> 0:06:22.880
to the PO file.

103
0:06:22.880 --> 0:06:28.000
And also, I started to test multiple packages.

104
0:06:28.000 --> 0:06:30.520
Because as I said, if you Google, you'll

105
0:06:30.520 --> 0:06:34.160
find many converters from markdown to PO file.

106
0:06:34.160 --> 0:06:36.200
I think I tested two or three.

107
0:06:36.200 --> 0:06:39.120
I didn't roll down each one.

108
0:06:39.120 --> 0:06:42.160
But the final one is MDA PO.

109
0:06:42.160 --> 0:06:46.000
There is a library, a series of Python scripts.

110
0:06:46.000 --> 0:06:52.240
So it is much more easier for me to use packages

111
0:06:52.240 --> 0:06:53.160
in the same language.

112
0:06:53.160 --> 0:06:55.400
Because I could just write a Py project

113
0:06:55.400 --> 0:07:01.040
and put all these libraries in the same Py project.

114
0:07:01.040 --> 0:07:03.600
The previous one was in JavaScript.

115
0:07:03.600 --> 0:07:06.000
And if you want to run something in JavaScript,

116
0:07:06.000 --> 0:07:07.760
especially if you are not using Linux,

117
0:07:07.760 --> 0:07:10.800
you need to install a lot of other software.

118
0:07:10.800 --> 0:07:13.760
So this would enable the translation from markdown

119
0:07:13.760 --> 0:07:15.120
to PO and vice versa.

120
0:07:15.120 --> 0:07:17.160
Because this is the hardest part.

121
0:07:17.160 --> 0:07:22.160
Once you transform the markdown file into a PO file,

122
0:07:22.160 --> 0:07:23.560
you do the translation.

123
0:07:23.560 --> 0:07:26.200
But the end, the main objective is

124
0:07:26.200 --> 0:07:29.520
to get a translated markdown file back.

125
0:07:29.520 --> 0:07:32.320
So you can use it in GitHub and present the page

126
0:07:32.320 --> 0:07:35.440
in your native language with all the formatting

127
0:07:35.440 --> 0:07:37.960
that the original auto did before.

128
0:07:41.320 --> 0:07:45.040
And I also started to think, OK, maybe I

129
0:07:45.040 --> 0:07:50.720
can write another script that will manipulate the PO file

130
0:07:50.720 --> 0:07:53.680
and help me do the initial translation.

131
0:07:53.680 --> 0:07:55.600
Why?

132
0:07:55.600 --> 0:08:00.520
We have a series of tools for automatic translation.

133
0:08:00.520 --> 0:08:05.080
But of course, this was something I just started.

134
0:08:05.080 --> 0:08:08.400
I didn't have the integrations or anything like this.

135
0:08:08.400 --> 0:08:11.880
But I also didn't want to mess with the PO file itself.

136
0:08:11.880 --> 0:08:16.200
So I found a Python library called POlib

137
0:08:16.200 --> 0:08:17.600
that does exactly this.

138
0:08:17.600 --> 0:08:19.640
I can open a PO file.

139
0:08:19.640 --> 0:08:22.360
I can, for example, do some filtering, like OK,

140
0:08:22.360 --> 0:08:25.800
give me just the strings that are not yet translated.

141
0:08:25.800 --> 0:08:29.360
And so it's very, very easy to build and manipulate

142
0:08:29.360 --> 0:08:32.960
the PO files with it.

143
0:08:32.960 --> 0:08:36.480
So this is the example program.

144
0:08:36.480 --> 0:08:37.920
You simply open the file.

145
0:08:37.920 --> 0:08:39.680
We start the translation.

146
0:08:39.680 --> 0:08:42.200
And with the help with AWS Translate

147
0:08:42.200 --> 0:08:46.880
that I was using, because most of the time I work with AWS,

148
0:08:46.880 --> 0:08:51.240
I could easily send string by string to the cloud

149
0:08:51.240 --> 0:08:54.600
and get an initial translation that I would just

150
0:08:54.600 --> 0:08:57.440
review later on, because you can never

151
0:08:57.440 --> 0:08:59.840
trust the automatic translation, especially

152
0:08:59.840 --> 0:09:03.600
if you are working phrase by phrase.

153
0:09:03.600 --> 0:09:06.520
It's very easy to miss your target.

154
0:09:06.520 --> 0:09:08.520
But it's very good nowadays.

155
0:09:08.520 --> 0:09:11.520
So I would say at least 80% of everything

156
0:09:11.520 --> 0:09:14.080
you do in the automatic translation,

157
0:09:14.080 --> 0:09:18.520
you can keep as it is, but you still have to fix the 20%.

158
0:09:18.520 --> 0:09:21.080
And most of the times, the 20% is quite embarrassing.

159
0:09:21.080 --> 0:09:23.800
So you really need to review and double check

160
0:09:23.800 --> 0:09:25.520
before you publish anything.

161
0:09:25.520 --> 0:09:29.440
And as it's a paid service, as many translation services,

162
0:09:29.440 --> 0:09:33.600
and as our colleague, I didn't know the delivery translator

163
0:09:33.600 --> 0:09:36.880
as that was presented this afternoon,

164
0:09:36.880 --> 0:09:39.960
you don't want to pay every time you do this.

165
0:09:39.960 --> 0:09:45.960
So I used the previous script to create a list of the strings

166
0:09:45.960 --> 0:09:47.280
that were never translated.

167
0:09:47.280 --> 0:09:49.160
They were still empty.

168
0:09:49.160 --> 0:09:51.960
So I know that if I run it multiple times,

169
0:09:51.960 --> 0:09:53.920
I will not be bugging AWS Translate

170
0:09:53.920 --> 0:09:56.680
and paying for the translation of strings

171
0:09:56.680 --> 0:10:00.800
that are already translated or reviewed.

172
0:10:00.800 --> 0:10:03.080
And as you can see, the script is very simple.

173
0:10:03.080 --> 0:10:08.720
You open the PO file, you send the text to the cloud,

174
0:10:08.720 --> 0:10:11.600
in this case, AWS Translate.

175
0:10:11.600 --> 0:10:13.080
You save, you replace the string,

176
0:10:13.080 --> 0:10:14.880
and you save it in a new PO file.

177
0:10:14.880 --> 0:10:16.640
It's done.

178
0:10:16.640 --> 0:10:19.640
So the script is almost out of this.

179
0:10:19.640 --> 0:10:22.400
You have it complete on GitHub.

180
0:10:26.120 --> 0:10:29.120
And this is the main job.

181
0:10:29.120 --> 0:10:30.920
Another advantage of these tools is

182
0:10:30.920 --> 0:10:33.920
that you can create a list of words that

183
0:10:33.920 --> 0:10:36.520
should not be translated.

184
0:10:36.520 --> 0:10:39.800
And this helps a lot, especially if you have a product

185
0:10:39.800 --> 0:10:44.000
or a document with a common name that you don't want

186
0:10:44.000 --> 0:10:46.200
to be translated.

187
0:10:46.200 --> 0:10:48.600
So you can pass this special list.

188
0:10:48.600 --> 0:10:51.800
You can create some exceptions.

189
0:10:51.800 --> 0:10:55.480
But as was explaining in the previous presentation,

190
0:10:55.480 --> 0:10:56.240
it's also a problem.

191
0:10:56.240 --> 0:10:59.800
Because most of the time, we select English

192
0:10:59.800 --> 0:11:03.920
as the main or the source translation language.

193
0:11:03.920 --> 0:11:08.720
You cannot create exclusion lists using programming

194
0:11:08.720 --> 0:11:11.120
languages, keywords.

195
0:11:11.120 --> 0:11:18.280
So in this document, Python, name for Python programmers,

196
0:11:18.280 --> 0:11:20.640
of course, there are lots of source code.

197
0:11:20.640 --> 0:11:23.080
And when I translate it to Portuguese, for example,

198
0:11:23.080 --> 0:11:27.720
keywords like for, in, we're all translated to Portuguese.

199
0:11:27.720 --> 0:11:32.640
So by using the automatic translation engine,

200
0:11:32.640 --> 0:11:36.000
you have to review and revet this translation.

201
0:11:36.000 --> 0:11:39.600
So the translated program will continue to be valid.

202
0:11:39.600 --> 0:11:42.560
And you have to pay very close attention.

203
0:11:42.560 --> 0:11:43.740
Because, of course, you will also

204
0:11:43.740 --> 0:11:46.120
translate variable names if you have source code

205
0:11:46.120 --> 0:11:47.360
in the document.

206
0:11:47.360 --> 0:11:50.600
So you need to pay attention that the output's still

207
0:11:50.600 --> 0:11:52.600
coherent.

208
0:11:52.600 --> 0:11:55.040
And, of course, as you need to do this manual work,

209
0:11:55.040 --> 0:11:59.360
you can use a PO edit tool or any other tool

210
0:11:59.360 --> 0:12:03.360
that you are used to use to work with PO files.

211
0:12:03.360 --> 0:12:05.640
So here we have the English version.

212
0:12:05.640 --> 0:12:08.240
And there we have the Brazilian Portuguese version.

213
0:12:08.240 --> 0:12:13.600
I could just step item by item and reveal these translations

214
0:12:13.600 --> 0:12:17.760
until I was satisfied with the result.

215
0:12:17.760 --> 0:12:21.640
And then you can simply generate the markdown file

216
0:12:21.640 --> 0:12:24.000
from the PO file.

217
0:12:24.000 --> 0:12:26.520
So we started with the markdown source code.

218
0:12:26.520 --> 0:12:31.640
We tracked using MADPO to create the initial PO file.

219
0:12:31.640 --> 0:12:35.320
I run the script that sends the untranslated strings

220
0:12:35.320 --> 0:12:36.840
to AWS Translate.

221
0:12:36.840 --> 0:12:39.560
But you can use any provider you want.

222
0:12:39.560 --> 0:12:41.160
You review with PO edit.

223
0:12:41.160 --> 0:12:45.040
And you do the opposite conversion from PO file

224
0:12:45.040 --> 0:12:47.800
to markdown and publish the wiki.

225
0:12:47.800 --> 0:12:51.280
So this is the workflow I tried to implement

226
0:12:51.280 --> 0:12:54.400
using my collection of scripts or hacks.

227
0:12:54.400 --> 0:12:57.840
It is not really a tool.

228
0:12:57.840 --> 0:13:03.120
But with the intention to facilitate a single markdown

229
0:13:03.120 --> 0:13:05.400
file translation.

230
0:13:05.400 --> 0:13:07.000
So the document looks like this.

231
0:13:07.000 --> 0:13:10.320
This is the English version.

232
0:13:10.320 --> 0:13:12.920
Yes, I put the English.

233
0:13:12.920 --> 0:13:15.240
This is the Portuguese one.

234
0:13:15.240 --> 0:13:19.680
So in the end, I could publish this document in GitHub.

235
0:13:19.680 --> 0:13:22.680
It's not yet fully integrated if the GitHub wiki,

236
0:13:22.680 --> 0:13:26.920
because ideally I should put the GitHub wiki

237
0:13:26.920 --> 0:13:31.320
of this documentation as a sub-module of my project.

238
0:13:31.320 --> 0:13:33.600
So when I updated it, I will also

239
0:13:33.600 --> 0:13:36.360
get the newest version of the markdown.

240
0:13:36.360 --> 0:13:39.440
And if I do this kind of integration using GitHub,

241
0:13:39.440 --> 0:13:43.440
I will be able to publish the markdown file also using Git.

242
0:13:43.440 --> 0:13:46.760
For this initial version, I just went to the editor.

243
0:13:46.760 --> 0:13:48.120
And I paste the markdown file.

244
0:13:48.120 --> 0:13:49.920
But it's possible to do the integration.

245
0:13:49.920 --> 0:13:52.680
It's a next step that I still have to do.

246
0:13:55.280 --> 0:13:58.080
So I published the scripts in this GitHub.

247
0:13:58.080 --> 0:14:00.120
So it's an info Python programmers.

248
0:14:00.120 --> 0:14:03.280
It's useful for any markdown file you

249
0:14:03.280 --> 0:14:08.240
may want to apply the same workflow.

250
0:14:08.240 --> 0:14:11.160
And the page isn't better, because I

251
0:14:11.160 --> 0:14:14.760
ask that all the translators, all the people that

252
0:14:14.760 --> 0:14:18.160
can read Brazilian Portuguese to check if everything is fine.

253
0:14:18.160 --> 0:14:20.480
Because the main goal to have a process

254
0:14:20.480 --> 0:14:25.600
is that usually you never do the translation a single time.

255
0:14:25.600 --> 0:14:29.280
The translation is something that you need to keep alive.

256
0:14:29.280 --> 0:14:33.160
As soon as the English version is extended, translated,

257
0:14:33.160 --> 0:14:36.320
updated, you have to do the same thing in Portuguese.

258
0:14:36.320 --> 0:14:38.680
If you don't have an automatic process able to use

259
0:14:38.680 --> 0:14:42.280
license this document and present a subset of changes,

260
0:14:42.280 --> 0:14:45.800
you'll be obliged to review a full document.

261
0:14:45.800 --> 0:14:48.720
And this can be very, very cumbersome over time

262
0:14:48.720 --> 0:14:51.080
if the document has 15, 20 pages.

263
0:14:51.080 --> 0:14:53.680
So it's not ideal.

264
0:14:53.680 --> 0:14:57.080
And another advantage is that the tool

265
0:14:57.080 --> 0:15:02.280
is smart enough to detect repetitions of the same string.

266
0:15:02.280 --> 0:15:04.520
So you also don't have the boring work

267
0:15:04.520 --> 0:15:08.440
to retranslate the same text multiple times.

268
0:15:08.440 --> 0:15:09.880
This also saves a lot of time.

269
0:15:09.880 --> 0:15:14.280
Yes.

270
0:15:14.280 --> 0:15:17.960
So these are the main findings and the main problems

271
0:15:17.960 --> 0:15:19.720
I try to solve.

272
0:15:19.720 --> 0:15:21.840
And that's it if you have any questions.

273
0:15:23.840 --> 0:15:24.800
You can sit.

274
0:15:24.800 --> 0:15:41.320
If you have a big taste like you want a paragraph, it breaks each phrase.

275
0:15:41.320 --> 0:15:43.080
So it's much easier.

276
0:15:43.080 --> 0:15:45.800
And especially if your text has source code,

277
0:15:45.800 --> 0:15:48.160
because the challenge was the source code.

278
0:15:48.160 --> 0:15:50.760
And sometimes you have to keep the indentation and so on

279
0:15:50.760 --> 0:15:51.840
and so on.

280
0:15:51.840 --> 0:15:53.720
You don't want to pass the indentation

281
0:15:53.720 --> 0:15:56.640
mass to the translator.

282
0:15:56.640 --> 0:15:59.880
So if you use a tool like this, it will structure just the part

283
0:15:59.880 --> 0:16:02.000
of the program with text.

284
0:16:02.000 --> 0:16:07.320
And it will keep the white space, which is very important in Python.

285
0:16:07.320 --> 0:16:08.320
So you can translate.

286
0:16:08.320 --> 0:16:10.520
But you still have to pay attention because

287
0:16:10.520 --> 0:16:12.920
of the automatic translation to translate everything

288
0:16:12.920 --> 0:16:14.520
to the target language.

289
0:16:14.520 --> 0:16:19.440
So you have to revert the keywords.

290
0:16:19.440 --> 0:16:21.680
But at least the generation is quite strong.

291
0:16:21.680 --> 0:16:24.280
So when you have generated this, the program is still

292
0:16:24.280 --> 0:16:25.840
a correct program in the end.

293
0:16:25.840 --> 0:16:26.440
So it's good.

294
0:16:35.560 --> 0:16:36.160
OK.

295
0:16:36.160 --> 0:16:38.520
It's the last one.

296
0:16:38.520 --> 0:16:39.040
OK.

297
0:16:39.040 --> 0:16:40.400
Thank you.

298
0:16:40.400 --> 0:16:51.920
Thank you.


1
0:00:00.000 --> 0:00:08.240
So let's dive right into it.

2
0:00:08.240 --> 0:00:13.320
Liberty Translate is a software that's a bit like Google Translate, but open source.

3
0:00:13.320 --> 0:00:16.880
It is a GPL3 license, so it's strongly open source.

4
0:00:16.880 --> 0:00:23.120
In fact, we're going to keep it that way forever, and it lets you do natural language translation.

5
0:00:23.120 --> 0:00:25.760
It runs on your computer.

6
0:00:25.760 --> 0:00:27.480
This is one of the goals of the project.

7
0:00:27.480 --> 0:00:33.120
There are several other projects in the open source realm that have aimed to provide natural

8
0:00:33.120 --> 0:00:39.600
language translation, except sometimes they require very large servers or a lot of memory.

9
0:00:39.600 --> 0:00:43.880
Our goal is to have this running on something as low as a Raspberry Pi, so that is very

10
0:00:43.880 --> 0:00:46.040
important to the project.

11
0:00:46.040 --> 0:00:49.520
The program has lots of clients and integrations.

12
0:00:49.520 --> 0:00:53.960
We'll cover some of those in the upcoming slides.

13
0:00:53.960 --> 0:00:58.560
Like many projects, it's available on GitHub, so you can go and check it out.

14
0:00:58.560 --> 0:01:04.960
We're going to give you today a brief overview of how to get started and start using it today.

15
0:01:04.960 --> 0:01:08.240
Let's talk briefly about why we decided to create it.

16
0:01:08.240 --> 0:01:10.820
There was a need for the project to exist.

17
0:01:10.820 --> 0:01:17.000
We could not find a project that had all the variables that Liberty Translate can offer.

18
0:01:17.000 --> 0:01:22.160
These are a simple and open REST API that you can use to programmatically do translations,

19
0:01:22.160 --> 0:01:28.360
so help automate part of the translation work that we need for the work.

20
0:01:28.360 --> 0:01:33.400
It offers pre-trained and openly licensed language models.

21
0:01:33.400 --> 0:01:38.040
There are other projects that do machine translation, but again, sometimes they do not make the

22
0:01:38.040 --> 0:01:43.200
models, the AI models for the translation, openly available, and we have that.

23
0:01:43.200 --> 0:01:48.160
Finally, it runs again on commodity hardware, so it does not require server scale power

24
0:01:48.160 --> 0:01:50.520
to make the software work.

25
0:01:50.520 --> 0:01:55.120
Finally, it is very easy to get started, as you will see.

26
0:01:55.120 --> 0:01:59.440
Talking about getting started, there are primarily two ways that you can get Liberty Translate

27
0:01:59.440 --> 0:02:01.200
to work on your computer.

28
0:02:01.200 --> 0:02:07.280
The first one is if you have Python, you can simply run a pip install command, Liberty

29
0:02:07.280 --> 0:02:10.840
Translate, and afterwards you run the program.

30
0:02:10.840 --> 0:02:11.840
That's it.

31
0:02:11.840 --> 0:02:16.600
If you have Docker, which many developers like to use, we also have an option for that.

32
0:02:16.600 --> 0:02:22.000
We pre-build images for Liberty Translate that you can use, and we have a convenient script

33
0:02:22.000 --> 0:02:27.760
that will run it for you and take care of a few details that let you have things like

34
0:02:27.760 --> 0:02:32.160
persistent volumes for downloading language models and some technical stuff.

35
0:02:32.160 --> 0:02:38.480
To get started, all you need to do is go on GitHub, get a copy of our source code, and

36
0:02:38.480 --> 0:02:39.700
press run.

37
0:02:39.700 --> 0:02:45.320
We also have scripts for Windows and macOS and Linux, so we try to support all major

38
0:02:45.320 --> 0:02:46.700
platforms.

39
0:02:46.700 --> 0:02:53.080
We're hoping to get other platforms in there as well, so things like FreeBSD and others

40
0:02:53.080 --> 0:02:54.080
are on the to-do list.

41
0:02:54.080 --> 0:02:57.040
We'll get there.

42
0:02:57.040 --> 0:02:58.960
Let's actually try to run it.

43
0:02:58.960 --> 0:03:04.200
I'm always a little scared of doing live demos, but bear with me, we're going to try it.

44
0:03:04.200 --> 0:03:07.640
What could go wrong?

45
0:03:07.640 --> 0:03:08.840
Here is a console.

46
0:03:08.840 --> 0:03:14.960
I'm going to quickly activate a Python environment where I have Liberty Translate already installed.

47
0:03:14.960 --> 0:03:17.360
I'm going to try to run it.

48
0:03:17.360 --> 0:03:21.000
On macOS, I have to specify a different port than the default 5000.

49
0:03:21.000 --> 0:03:23.280
I'm going to try to run it.

50
0:03:23.280 --> 0:03:25.800
Okay, it seems to be working.

51
0:03:25.800 --> 0:03:30.760
I'm going to jump back right into Chrome.

52
0:03:30.760 --> 0:03:35.480
If I refresh the page, you will be presented with a friendly user interface that you can

53
0:03:35.480 --> 0:03:39.320
use to test the system and even use it.

54
0:03:39.320 --> 0:03:45.280
It allows programmatic access to the software via an API, but you can also use it as an

55
0:03:45.280 --> 0:03:47.560
alternative to Google Translate if you want to.

56
0:03:47.560 --> 0:03:52.200
We're going to try to say something.

57
0:03:52.200 --> 0:03:55.720
Obviously, English to English is not going to be helpful.

58
0:03:55.720 --> 0:03:59.560
How about French?

59
0:03:59.560 --> 0:04:05.840
We translated Hello World, Bonjour, Bonjour, Le Monde, and it worked.

60
0:04:05.840 --> 0:04:07.920
But that's not too impressive, right?

61
0:04:07.920 --> 0:04:17.600
Like, okay, Hello World, let's try to look at something a little more realistic.

62
0:04:17.600 --> 0:04:23.080
Before looking at something more realistic, you can also, of course, use it from an API.

63
0:04:23.080 --> 0:04:29.560
In this case, I can invoke a Kuru command and ask Liberty Translate to perform a translation.

64
0:04:29.560 --> 0:04:35.200
I wanted to automatically detect the language where the translation is coming from.

65
0:04:35.200 --> 0:04:43.440
Finally, I want to translate into something, the target language.

66
0:04:43.440 --> 0:04:45.100
I get a JSON response.

67
0:04:45.100 --> 0:04:47.720
Everything in the API is JSON-based.

68
0:04:47.720 --> 0:04:51.080
So that would be familiar with many developers.

69
0:04:51.080 --> 0:04:53.520
But let's look at a more realistic example.

70
0:04:53.520 --> 0:04:59.520
In this case, we have a longer piece of text, and it also contains HTML.

71
0:04:59.520 --> 0:05:04.280
The software is capable of translating the parts that need translation while leaving

72
0:05:04.280 --> 0:05:06.080
the HTML part intact.

73
0:05:06.080 --> 0:05:14.200
So things like hyperlinks do not get mistakenly translated, which would be really bad.

74
0:05:14.200 --> 0:05:21.880
And this code that we saw here roughly gets represented as this piece of HTML in a browser,

75
0:05:21.880 --> 0:05:25.920
and the translation is pretty good.

76
0:05:25.920 --> 0:05:26.920
Kind of.

77
0:05:26.920 --> 0:05:29.600
This word should have been fille die.

78
0:05:29.600 --> 0:05:33.520
It decided to keep the translation in French.

79
0:05:33.520 --> 0:05:36.680
We'll improve that with time.

80
0:05:36.680 --> 0:05:41.960
But otherwise, the context and the meaning of the sentence is pretty darn good.

81
0:05:41.960 --> 0:05:46.160
We will look at accuracy in the upcoming slides.

82
0:05:46.160 --> 0:05:51.040
So as an overview of the list of features, it can do text translation.

83
0:05:51.040 --> 0:05:53.080
It can do markup translation.

84
0:05:53.080 --> 0:05:57.760
That includes HTML, XML, and other formats that use markup.

85
0:05:57.760 --> 0:06:04.920
It can do several formats for file translation, so you can upload things like Open Office,

86
0:06:04.920 --> 0:06:13.720
LibreOffice, Word documents, and PowerPoint slides, and able to translate those as well.

87
0:06:13.720 --> 0:06:19.420
It can perform language detection, so you give it a piece of text, and it will give

88
0:06:19.420 --> 0:06:24.520
you an estimate of which language the program thinks it is.

89
0:06:24.520 --> 0:06:28.660
It also has a built-in system for doing rate limiting.

90
0:06:28.660 --> 0:06:31.880
If you're planning to host this on a public server, you will find out that it's a very

91
0:06:31.880 --> 0:06:41.140
useful feature because people really like free resources, and it's difficult to give

92
0:06:41.140 --> 0:06:43.720
everything for free without some limits.

93
0:06:43.720 --> 0:06:49.520
So if your translation instance up in the cloud gets really popular, having some sort

94
0:06:49.520 --> 0:06:55.180
of limit by saying do a maximum of 60 translation per minute will come really handy, and it's

95
0:06:55.180 --> 0:06:57.020
all built in into the software.

96
0:06:57.020 --> 0:07:02.520
You can further issue API keys to give to people that can change those limits.

97
0:07:02.520 --> 0:07:07.400
So you can set up the system in a way where you allow anonymous users to translate up

98
0:07:07.400 --> 0:07:13.720
to 20 translations per minute, and you can allow a subset of people that you've issued

99
0:07:13.720 --> 0:07:17.240
API keys to to have however many they want.

100
0:07:17.240 --> 0:07:19.200
You decide those limits.

101
0:07:19.200 --> 0:07:21.920
It also has a localized UI.

102
0:07:21.920 --> 0:07:26.640
We're using WebLate to do that, which is awesome.

103
0:07:26.640 --> 0:07:31.840
It has been currently translated into four languages, and we're looking to verify and

104
0:07:31.840 --> 0:07:32.840
add more.

105
0:07:32.840 --> 0:07:40.800
One cool neat feature is that Libre Translator has an ability to translate itself, roughly.

106
0:07:40.800 --> 0:07:46.820
So we have done that, of course, but we haven't displayed all the languages that it has tried

107
0:07:46.820 --> 0:07:48.420
to translate itself.

108
0:07:48.420 --> 0:07:54.320
We are waiting for a native speaker to review the actual translation and correct it.

109
0:07:54.320 --> 0:07:57.280
But if you're running in debug mode, you will see all the work that it has done, which is

110
0:07:57.280 --> 0:07:58.440
kind of neat.

111
0:07:58.440 --> 0:08:01.200
So it translates itself, kind of.

112
0:08:01.200 --> 0:08:02.640
Or at least it helps.

113
0:08:02.640 --> 0:08:04.780
It finally has the ability to monitor itself.

114
0:08:04.780 --> 0:08:12.320
So it can generate usage metrics so you can monitor the usage of the server using Prometheus

115
0:08:12.320 --> 0:08:13.580
and Grafana.

116
0:08:13.580 --> 0:08:18.840
These are tools to do monitoring that are very popular.

117
0:08:18.840 --> 0:08:24.400
Inside the software, there is really just a few packages, so it's very lightweight.

118
0:08:24.400 --> 0:08:30.080
Most of the translation work is done by another package called Argos Translate.

119
0:08:30.080 --> 0:08:35.640
This is really the core engine that performs the hard work in the translation, which is

120
0:08:35.640 --> 0:08:37.360
an awesome project.

121
0:08:37.360 --> 0:08:41.260
And we collaborate with them on Libre Translate.

122
0:08:41.260 --> 0:08:46.600
Inside Argos Translate, there is also other software which is built on the shoulder of

123
0:08:46.600 --> 0:08:47.600
giants.

124
0:08:47.600 --> 0:08:52.900
CTranslate, which is an inference engine that does a neural translation using transformers

125
0:08:52.900 --> 0:08:54.760
models, which is a state of the art.

126
0:08:54.760 --> 0:08:59.600
It's the same type of architecture that ChatGPT3 uses.

127
0:08:59.600 --> 0:09:05.520
There is a sentence piece, which is a piece of code from Google that does Word tokenization.

128
0:09:05.520 --> 0:09:10.680
And Stanza, which comes out of Stanford, which does sentence analysis.

129
0:09:10.680 --> 0:09:15.160
And Argos Translate uses all these three to perform the translation work.

130
0:09:15.160 --> 0:09:17.280
Now, that's not all it does.

131
0:09:17.280 --> 0:09:23.560
Argos Translate also takes care of the very important Argos package manager index.

132
0:09:23.560 --> 0:09:28.720
This is where all the language models are handled, installed, and distributed.

133
0:09:28.720 --> 0:09:34.460
So the first time that you run Libre Translate, Argos Translate will take care of querying

134
0:09:34.460 --> 0:09:39.640
the Argos package management index and will download the languages that you need.

135
0:09:39.640 --> 0:09:45.720
This allows us to also create instances where, say, you only need to translate between French

136
0:09:45.720 --> 0:09:46.880
and English.

137
0:09:46.880 --> 0:09:51.760
You do not need to download the entire 26 gigabytes of models.

138
0:09:51.760 --> 0:09:54.860
You can simply say, I just need those two models.

139
0:09:54.860 --> 0:09:59.320
And the program will download simply those two models.

140
0:09:59.320 --> 0:10:04.200
We also have a small module that does the file translation, which connects, again, to

141
0:10:04.200 --> 0:10:05.560
Argos Translate.

142
0:10:05.560 --> 0:10:10.280
That's the Argos Translate files package, and then some common Python packages that

143
0:10:10.280 --> 0:10:15.960
allow us to put the web interface and coordinate the application as a whole.

144
0:10:15.960 --> 0:10:21.760
So it's really an ecosystem that's built with other open source software.

145
0:10:21.760 --> 0:10:28.280
And together, it creates this complete translation solution.

146
0:10:28.280 --> 0:10:31.560
Talking about language models, we have 58 of them.

147
0:10:31.560 --> 0:10:34.880
That gives you translation support for about 30 languages.

148
0:10:34.880 --> 0:10:39.120
And it does automatic pivot via English.

149
0:10:39.120 --> 0:10:43.880
We are currently looking to transition to using multi-language models.

150
0:10:43.880 --> 0:10:48.920
But for the moment, when you translate, say, from Italian to French, the program will automatically

151
0:10:48.920 --> 0:10:51.320
do the pivoting via English.

152
0:10:51.320 --> 0:10:56.020
So it will translate Italian to English and English to French.

153
0:10:56.020 --> 0:11:03.800
If there is language missing, there is a very cool repository under the Argos Open Tech

154
0:11:03.800 --> 0:11:08.160
organization which builds Argos Translate called Argostrain.

155
0:11:08.160 --> 0:11:13.120
And that is a repository that has very good instructions on how you can train your own

156
0:11:13.120 --> 0:11:14.120
models.

157
0:11:14.120 --> 0:11:18.400
So if a language is missing, go check it out.

158
0:11:18.400 --> 0:11:23.800
It has very clear instructions, and you could contribute a language that is missing, and

159
0:11:23.800 --> 0:11:27.880
you want to see integrated into the software.

160
0:11:27.880 --> 0:11:34.960
Speaking of the models, when a model is downloaded, it has a Argos model extension.

161
0:11:34.960 --> 0:11:37.280
And these are simply zip files.

162
0:11:37.280 --> 0:11:42.840
Each zip file inside has a little bit of metadata.

163
0:11:42.840 --> 0:11:46.880
It has a folder that contains the CTranslate model.

164
0:11:46.880 --> 0:11:50.080
It has the sentence piece model, and finally the stanza model.

165
0:11:50.080 --> 0:11:54.080
So it has the information for all the three packages that we discussed earlier to perform

166
0:11:54.080 --> 0:11:55.760
the translation.

167
0:11:55.760 --> 0:11:58.840
It's very interesting to check it out.

168
0:11:58.840 --> 0:12:00.600
Let's talk a little bit of accuracy, right?

169
0:12:00.600 --> 0:12:06.120
Like the question, like, okay, it's translation, sorry, but how good is it, really?

170
0:12:06.120 --> 0:12:13.000
And for that, there is a metric that can be used to assess roughly the accuracy of the

171
0:12:13.000 --> 0:12:14.000
translation.

172
0:12:14.000 --> 0:12:19.080
And it's called a Blue Score acronym for bilingual evaluation understudy.

173
0:12:19.080 --> 0:12:25.920
And it measures the similarity of text to a reference corpus.

174
0:12:25.920 --> 0:12:30.160
And it has values that go from zero to one, or if you express it as a percentage from

175
0:12:30.160 --> 0:12:32.280
zero to 100.

176
0:12:32.280 --> 0:12:38.320
The best translators in the world, human translators, do not get a score of 100 ever.

177
0:12:38.320 --> 0:12:45.460
So anything that is above a 40 is considered understandable to good.

178
0:12:45.460 --> 0:12:49.520
And something that is above 50 tends to be really high, very high quality.

179
0:12:49.520 --> 0:12:56.440
Sorry, up to 50 is high quality, and above 60 is very high.

180
0:12:56.440 --> 0:13:03.760
And we had a community contributor actually go, and a few weeks ago he ran the evaluation

181
0:13:03.760 --> 0:13:06.400
on our different models.

182
0:13:06.400 --> 0:13:14.120
And we found that 83% of the models currently in Liberty Translate are scoring above 40%.

183
0:13:14.120 --> 0:13:17.520
So 83 of them are good.

184
0:13:17.520 --> 0:13:23.320
Now to make it into perspective, when people ask me directly how good is Liberty Translate,

185
0:13:23.320 --> 0:13:28.960
I like to tell them that it's roughly as good as Google Translate was four years ago.

186
0:13:28.960 --> 0:13:33.000
So I want to make the expectations clear at this stage in the project that it is not as

187
0:13:33.000 --> 0:13:36.800
good as some of the proprietary alternatives.

188
0:13:36.800 --> 0:13:41.640
But we are improving, and we will continue to improve.

189
0:13:41.640 --> 0:13:47.560
And the way to improve it lies into mostly getting better training data.

190
0:13:47.560 --> 0:13:52.720
So as we find more and more sources of open data that can be used for translation, we

191
0:13:52.720 --> 0:13:58.920
include those into the training of the models, and that results into better models.

192
0:13:58.920 --> 0:14:06.120
This is also an interesting point to note, is that because the project is open source,

193
0:14:06.120 --> 0:14:11.880
and we have a way to train models, you can also train models that are specific to a certain

194
0:14:11.880 --> 0:14:12.880
domain.

195
0:14:12.880 --> 0:14:17.400
For example, in the context of software translation, you could imagine the case where instead of

196
0:14:17.400 --> 0:14:25.720
training the data on a general purpose like Wikipedia or the EU Parliament translation

197
0:14:25.720 --> 0:14:31.440
documents, you could train a model that is specific to software.

198
0:14:31.440 --> 0:14:38.400
For example, you could take a set of existing translations from existing software that has

199
0:14:38.400 --> 0:14:45.720
licensed the translation work under an open permissible license and train a model onto

200
0:14:45.720 --> 0:14:47.640
those existing translations.

201
0:14:47.640 --> 0:14:52.160
Because we have to acknowledge a lot of software has commonalities in terms.

202
0:14:52.160 --> 0:14:56.520
When you have a file menu, it's always called file, and then edit.

203
0:14:56.520 --> 0:15:00.440
So those menus could be, are specific to a context.

204
0:15:00.440 --> 0:15:07.360
And by training models that are specific to a context, you could get a, for example, software

205
0:15:07.360 --> 0:15:13.520
translation model that is more accurate in the context of software rather than, say,

206
0:15:13.520 --> 0:15:14.520
poetry.

207
0:15:14.520 --> 0:15:19.720
So it's a very interesting thing to think about.

208
0:15:19.720 --> 0:15:23.920
One more thing about accuracy, we do have the occasional rare quirk.

209
0:15:23.920 --> 0:15:27.940
This is something that we are aware of, and we are working to fix it.

210
0:15:27.940 --> 0:15:32.480
We like to call it the salad issue.

211
0:15:32.480 --> 0:15:36.720
And we joke, I will demonstrate this slide because it always sparks a little bit of a

212
0:15:36.720 --> 0:15:39.000
giggle.

213
0:15:39.000 --> 0:15:43.480
And it's a little bit rare, but it happens.

214
0:15:43.480 --> 0:15:47.140
So in Spanish, the word for salad is en salada.

215
0:15:47.140 --> 0:15:50.920
Now let's try to translate the word for salads, plural.

216
0:15:50.920 --> 0:15:55.000
So I'm going to type en saladas.

217
0:15:55.000 --> 0:15:58.000
Okay, so in French, that's saladas.

218
0:15:58.000 --> 0:15:59.000
Is that correct?

219
0:15:59.000 --> 0:16:01.000
Any French people in the room?

220
0:16:01.000 --> 0:16:02.000
Fantastic.

221
0:16:02.000 --> 0:16:05.480
Okay, now let's try the singular form.

222
0:16:05.480 --> 0:16:10.880
I'm going to remove the S, and it crunches for a little bit.

223
0:16:10.880 --> 0:16:16.040
And in a second.

224
0:16:16.040 --> 0:16:18.200
So it really likes salad.

225
0:16:18.200 --> 0:16:21.480
Salad, salad, salad, salad, salad.

226
0:16:21.480 --> 0:16:23.640
This is a quirk.

227
0:16:23.640 --> 0:16:24.760
We are aware of it.

228
0:16:24.760 --> 0:16:30.080
It's very rare, but we've found a few reports here and there, and we're working to fix it.

229
0:16:30.080 --> 0:16:31.440
Just something to be aware of.

230
0:16:31.440 --> 0:16:35.880
But yes, we really like salad.

231
0:16:35.880 --> 0:16:36.880
Me too.

232
0:16:36.880 --> 0:16:40.600
Let's talk a little bit about integrations.

233
0:16:40.600 --> 0:16:44.400
You can find client libraries for about 11 programming languages.

234
0:16:44.400 --> 0:16:50.120
That includes the most common ones, like Java, Python, whatever your favorite language is,

235
0:16:50.120 --> 0:16:52.720
it's probably in the list of bindings.

236
0:16:52.720 --> 0:16:57.840
And if it's not there, adding new bindings for Libre Translate is fairly easy.

237
0:16:57.840 --> 0:17:00.600
So we welcome contributions, of course.

238
0:17:00.600 --> 0:17:05.800
As far as software, Libre Translate has found adoption in several existing open source softwares

239
0:17:05.800 --> 0:17:07.920
that you may recognize.

240
0:17:07.920 --> 0:17:12.200
Mastodon recently added support for translating topics using Libre Translate.

241
0:17:12.200 --> 0:17:18.000
WebLate has the ability to use Libre Translate to suggest and help translators perform translations

242
0:17:18.000 --> 0:17:21.600
as an alternative to using proprietary software.

243
0:17:21.600 --> 0:17:27.760
The forum software discourse has a plugin that lets you make your forum software accessible

244
0:17:27.760 --> 0:17:35.120
from different locales and lets you translate posts on the fly.

245
0:17:35.120 --> 0:17:36.640
LibreOffice, I found, has an extension.

246
0:17:36.640 --> 0:17:40.040
I didn't know this until a week ago when I was looking who has integrated stuff with

247
0:17:40.040 --> 0:17:41.480
Libre Translate.

248
0:17:41.480 --> 0:17:44.480
Somebody wrote an extension to LibreOffice where you can translate documents on the fly

249
0:17:44.480 --> 0:17:46.480
using Libre Translate.

250
0:17:46.480 --> 0:17:49.840
There is an add-on for the multimedia software codey.

251
0:17:49.840 --> 0:17:52.400
There is an add-on also for Firefox.

252
0:17:52.400 --> 0:17:55.800
And there's probably a lot of other things that I haven't found myself.

253
0:17:55.800 --> 0:18:00.520
But a lot of people seem to be finding the API useful in their doing integration work,

254
0:18:00.520 --> 0:18:02.120
which is fantastic.

255
0:18:02.120 --> 0:18:07.320
And there's finally client applications that you can use Libre Translate with without using

256
0:18:07.320 --> 0:18:09.000
the web UI.

257
0:18:09.000 --> 0:18:12.800
And we found we have clients for Android, iOS, and desktop.

258
0:18:12.800 --> 0:18:17.620
And there's more being built by the week.

259
0:18:17.620 --> 0:18:24.720
As far as comparison to proprietary alternatives, you can see that there is a clear monetary

260
0:18:24.720 --> 0:18:31.120
advantage aside from the philosophical reason for why you might want to use open source

261
0:18:31.120 --> 0:18:32.600
software of course.

262
0:18:32.600 --> 0:18:37.860
But it's also could be a really sustainable way to perform translations.

263
0:18:37.860 --> 0:18:41.880
In that people often ask me, why should I use Libre Translate?

264
0:18:41.880 --> 0:18:43.480
I can use Google Translate for free.

265
0:18:43.480 --> 0:18:46.940
I just go on translate.google.com and it doesn't charge me anything.

266
0:18:46.940 --> 0:18:49.040
So why should I care?

267
0:18:49.040 --> 0:18:52.400
Google Translate is free so long as you're using it by hand.

268
0:18:52.400 --> 0:18:56.480
If you want to do any automation work and you have to tap into their API, you're going

269
0:18:56.480 --> 0:18:58.280
to pay dearly.

270
0:18:58.280 --> 0:19:00.640
And you can see here a list of the prices.

271
0:19:00.640 --> 0:19:05.560
And I can assure you that 1 million character seem like a lot, that's six zeros, but they

272
0:19:05.560 --> 0:19:10.360
actually run pretty fast.

273
0:19:10.360 --> 0:19:13.200
And so could the bill on your credit card.

274
0:19:13.200 --> 0:19:18.800
So if you have a lot of text to translate, Libre Translate could really help in that

275
0:19:18.800 --> 0:19:20.880
regard.

276
0:19:20.880 --> 0:19:26.920
As far as funding goes, the project is on the path to become fully self-funded.

277
0:19:26.920 --> 0:19:31.520
And we really care about this because we want the project to continue living on.

278
0:19:31.520 --> 0:19:37.440
We of course accept sponsorships and donations, but honestly, we would rather prefer that

279
0:19:37.440 --> 0:19:41.480
you get something back if you decide to contribute financially to the project.

280
0:19:41.480 --> 0:19:47.080
This is why if you are in the position where you say, I have some finances to spare and

281
0:19:47.080 --> 0:19:49.680
help support the project, you also get something back.

282
0:19:49.680 --> 0:19:58.320
And we do that in the form of offering you an API key to use a hosted instance at LibreTranslate.com.

283
0:19:58.320 --> 0:20:02.960
So you are free to run the infrastructure on your own server, on your Raspberry Pis,

284
0:20:02.960 --> 0:20:05.080
on any machine that you'd like.

285
0:20:05.080 --> 0:20:10.120
If you don't want to handle that, you can just get an API key.

286
0:20:10.120 --> 0:20:12.480
And you can support the project at the same time.

287
0:20:12.480 --> 0:20:15.840
So it's really a good way to contribute back.

288
0:20:15.840 --> 0:20:21.080
And we found that that model has been helping us grow and sustain the project.

289
0:20:21.080 --> 0:20:24.640
So we hope to continue growing as much next year.

290
0:20:24.640 --> 0:20:30.240
Again, to get involved, I'll give you a few quick numbers.

291
0:20:30.240 --> 0:20:34.240
We've had about 70 people contribute to the code base over the last few years.

292
0:20:34.240 --> 0:20:37.960
The project is still very young, but it has really received a lot of attention.

293
0:20:37.960 --> 0:20:41.080
So we're very excited about that.

294
0:20:41.080 --> 0:20:42.200
You can help with code.

295
0:20:42.200 --> 0:20:47.080
If you're a Python programmer, if you know HTML, CSS, any of the technologies that we

296
0:20:47.080 --> 0:20:48.880
use, you're welcome to contribute.

297
0:20:48.880 --> 0:20:52.000
We are open to everybody and all ideas.

298
0:20:52.000 --> 0:20:54.720
You can also help us translate.

299
0:20:54.720 --> 0:21:01.640
If you understand English and you don't see your language in the list of languages that

300
0:21:01.640 --> 0:21:05.280
we currently support for your user interface, you are welcome to contribute.

301
0:21:05.280 --> 0:21:06.400
It's on a web late.

302
0:21:06.400 --> 0:21:12.440
You can simply translate and it will get included into the project every 24 hours.

303
0:21:12.440 --> 0:21:15.040
So that is really amazing.

304
0:21:15.040 --> 0:21:18.200
You can also help us train more language models.

305
0:21:18.200 --> 0:21:21.840
If your language is not available or a language that you care about is not available, you

306
0:21:21.840 --> 0:21:28.520
can yourself create a new model for a language and add that into the list.

307
0:21:28.520 --> 0:21:31.080
So that is also another way that people can help.

308
0:21:31.080 --> 0:21:33.080
You can report bugs, of course.

309
0:21:33.080 --> 0:21:34.080
Salad.

310
0:21:34.080 --> 0:21:37.680
Don't report salad, we're aware of it.

311
0:21:37.680 --> 0:21:38.840
Or just come say hi.

312
0:21:38.840 --> 0:21:43.040
We have a community forum that is quickly growing and we love to hear what you're building

313
0:21:43.040 --> 0:21:46.480
with it, what you're using, or if you have any questions.

314
0:21:46.480 --> 0:21:51.880
So we're very open and we're excited to hear what you will do with it.

315
0:21:51.880 --> 0:21:54.200
That said, this was the last slide.

316
0:21:54.200 --> 0:21:57.240
I think we have some time left over, right?

317
0:21:57.240 --> 0:21:58.240
So I will...

318
0:21:58.240 --> 0:22:03.840
So thank you very much.

319
0:22:03.840 --> 0:22:06.120
I will open the floor for questions and discussion.

320
0:22:06.120 --> 0:22:07.120
So yes.

321
0:22:07.120 --> 0:22:08.120
Hi.

322
0:22:08.120 --> 0:22:09.120
Alex, this is Teogas.

323
0:22:09.120 --> 0:22:14.120
My best friend, Mr. and the vice president of the Austrian Society for artificial intelligence,

324
0:22:14.120 --> 0:22:22.120
said we could force them to find volunteers and do exactly what they're doing.

325
0:22:22.120 --> 0:22:23.120
In a conversation.

326
0:22:23.120 --> 0:22:24.120
Thank you.

327
0:22:24.120 --> 0:22:27.880
We're glad we could help.

328
0:22:27.880 --> 0:22:28.880
You're welcome.

329
0:22:28.880 --> 0:22:35.880
How do we find, well, I just named the thing, open language model training army, how do

330
0:22:35.880 --> 0:22:38.880
we find more volunteers?

331
0:22:38.880 --> 0:22:46.880
Maybe unemployed people, maybe have the government fund people who are unemployed to train models,

332
0:22:46.880 --> 0:22:52.880
maybe suggest that to all politicians, everybody to their member of parliament.

333
0:22:52.880 --> 0:22:55.880
How many people do we have here?

334
0:22:55.880 --> 0:22:56.880
70.

335
0:22:56.880 --> 0:22:58.880
So if you multiply this, it can go viral.

336
0:22:58.880 --> 0:22:59.880
Thank you very much.

337
0:22:59.880 --> 0:23:00.880
This is awesome work.

338
0:23:00.880 --> 0:23:01.880
Thank you.

339
0:23:01.880 --> 0:23:02.880
I appreciate it.

340
0:23:02.880 --> 0:23:03.880
Yes.

341
0:23:03.880 --> 0:23:09.880
So, but you speak about language that have the same link, the same structure of the language,

342
0:23:09.880 --> 0:23:16.880
we have French, English, Spanish, Portuguese, maybe Russian and Ukrainian, I don't know,

343
0:23:16.880 --> 0:23:21.880
have the same structure, but the language not far away from here.

344
0:23:21.880 --> 0:23:22.880
Dutch is a difference.

345
0:23:22.880 --> 0:23:23.880
German also, kind of...

346
0:23:23.880 --> 0:23:24.880
Correct.

347
0:23:24.880 --> 0:23:32.720
It's not easy for one translator or automatic translator.

348
0:23:32.720 --> 0:23:33.720
It is not.

349
0:23:33.720 --> 0:23:36.720
There's also maybe a proctor with Chinese or Japanese.

350
0:23:36.720 --> 0:23:37.720
Correct.

351
0:23:37.720 --> 0:23:38.720
There are other problems.

352
0:23:38.720 --> 0:23:39.720
I find there's a thing I want to say.

353
0:23:39.720 --> 0:23:40.720
It's a dictionary in line or in the program to have the good world because it's not translated

354
0:23:40.720 --> 0:23:41.720
every time the good world.

355
0:23:41.720 --> 0:23:42.720
And so I thought also the most efficient, privileged language, the most efficient language, the most

356
0:23:42.720 --> 0:23:43.720
efficient language.

357
0:23:43.720 --> 0:23:54.720
It's not English.

358
0:23:54.720 --> 0:23:58.720
Oh, that is very interesting.

359
0:23:58.720 --> 0:23:59.720
Yes.

360
0:23:59.720 --> 0:24:00.720
Okay.

361
0:24:00.720 --> 0:24:01.720
That's a great insight.

362
0:24:01.720 --> 0:24:04.920
Yeah, thank you for sharing that.

363
0:24:04.920 --> 0:24:06.060
And you're completely right.

364
0:24:06.060 --> 0:24:09.840
Some languages don't share the same semantical structure.

365
0:24:09.840 --> 0:24:13.680
And Dutch, for example, currently doesn't score super high.

366
0:24:13.680 --> 0:24:17.160
It's actually one of the bottom 17% of the language models.

367
0:24:17.160 --> 0:24:20.760
In the blue score, Dutch scored around 38%.

368
0:24:20.760 --> 0:24:27.720
So it's almost good, but we've had some Dutch-speaking people come to us and say, you know, it's

369
0:24:27.720 --> 0:24:28.960
like equal use improvement.

370
0:24:28.960 --> 0:24:31.760
So Dutch, yes, it is a language that needs improvement.

371
0:24:31.760 --> 0:24:40.320
And I talked to the maintainer of Argus Translate about the languages that need improvement.

372
0:24:40.320 --> 0:24:46.420
And he pretty much suggested that better training data will help greatly.

373
0:24:46.420 --> 0:24:51.800
So it is mainly a problem not of the architecture of the AI.

374
0:24:51.800 --> 0:24:57.240
It's a matter that we don't have sufficient quality, high quality data between, say, English

375
0:24:57.240 --> 0:25:01.880
and Dutch to get above 38% currently.

376
0:25:01.880 --> 0:25:05.000
But again, nobody has really focused on Dutch as a language.

377
0:25:05.000 --> 0:25:10.400
If anybody has an interest in improving Dutch, we can do better.

378
0:25:10.400 --> 0:25:11.400
Surprisingly.

379
0:25:11.400 --> 0:25:13.560
You're speaking English.

380
0:25:13.560 --> 0:25:14.560
Fantastic.

381
0:25:14.560 --> 0:25:21.000
But as far as, for example, languages like German, Libratranslate currently does very

382
0:25:21.000 --> 0:25:22.000
well with German.

383
0:25:22.000 --> 0:25:24.000
It's above 50, if I remember correctly.

384
0:25:24.000 --> 0:25:27.360
It's French because German has a similar language.

385
0:25:27.360 --> 0:25:28.360
It is.

386
0:25:28.360 --> 0:25:34.200
That is because I believe, and I think PJ, that's the name of the maintainer of Argus

387
0:25:34.200 --> 0:25:41.200
Translate, because German has a larger, the German model has had a larger amount of training

388
0:25:41.200 --> 0:25:42.200
data.

389
0:25:42.200 --> 0:25:44.200
And so it tends to perform better.

390
0:25:44.200 --> 0:25:45.200
Yes.

391
0:25:45.200 --> 0:25:56.760
Yeah, just a quick question around the translation process, I suppose, touched on structure,

392
0:25:56.760 --> 0:25:57.760
but how does it cope with different dialects?

393
0:25:57.760 --> 0:25:58.760
If you write in dialect, do you write in slang?

394
0:25:58.760 --> 0:25:59.760
That's a very good question.

395
0:25:59.760 --> 0:26:05.560
Dialects would probably, and that's my guess, because I've never inquired this myself, but

396
0:26:05.560 --> 0:26:12.600
I believe that a dialect to perform good as a target or source language for translation

397
0:26:12.600 --> 0:26:16.520
would also need its fair amount of training data.

398
0:26:16.520 --> 0:26:18.040
And that is the problem with dialects.

399
0:26:18.040 --> 0:26:24.040
I actually speak a local Italian dialect, that is my first language, and I wanted to

400
0:26:24.040 --> 0:26:26.320
make a model for my dialect.

401
0:26:26.320 --> 0:26:30.600
And I started looking online for references of data that I could use to create a model

402
0:26:30.600 --> 0:26:33.840
for my dialect, because it would be cool.

403
0:26:33.840 --> 0:26:36.080
And it was really challenging.

404
0:26:36.080 --> 0:26:40.920
Not being an official language, it really lacks the status of official languages, and

405
0:26:40.920 --> 0:26:44.960
finding training data is extremely difficult.

406
0:26:44.960 --> 0:26:47.000
But it could be possible, right?

407
0:26:47.000 --> 0:26:54.040
If you gather enough people that can create a ground truth data set of examples in the

408
0:26:54.040 --> 0:26:58.140
dialect with sufficient samples, you could get good results, I believe.

409
0:26:58.140 --> 0:27:01.320
So it's a matter, again, of training data.

410
0:27:01.320 --> 0:27:02.320
Yes.

411
0:27:02.320 --> 0:27:06.500
How much does it cost to get the model to a good level?

412
0:27:06.500 --> 0:27:11.920
In terms of computing power or in terms- Yeah, computing power.

413
0:27:11.920 --> 0:27:12.920
Computing power.

414
0:27:12.920 --> 0:27:20.200
So if I remember correctly what PJ told me about the cost of training the models, it

415
0:27:20.200 --> 0:27:26.840
costs maybe a few, between 12 and 30 dollars.

416
0:27:26.840 --> 0:27:29.560
You can rent instances on several cloud providers.

417
0:27:29.560 --> 0:27:34.120
You do need a GPU to train these models, and it might take a few days for it to crunch

418
0:27:34.120 --> 0:27:38.240
and get sufficient number of iterations to train the model.

419
0:27:38.240 --> 0:27:40.720
But it's absolutely affordable.

420
0:27:40.720 --> 0:27:45.080
Anybody can do it, and if you are willing to wait, and you just have a gaming laptop

421
0:27:45.080 --> 0:27:50.000
sitting at home, if you're okay waiting 20 days for it to finish, it will train the model

422
0:27:50.000 --> 0:27:51.000
for you.

423
0:27:51.000 --> 0:27:56.120
So I guess it could be free to you if you're willing to wait a sufficient amount of time,

424
0:27:56.120 --> 0:27:59.000
and if you have a gaming laptop laying around.

425
0:27:59.000 --> 0:28:00.000
Yes.

426
0:28:00.000 --> 0:28:07.000
So you mentioned the need of a data availability for doing the model, right?

427
0:28:07.000 --> 0:28:15.000
Do you need the data to be available under certain license, or what's your problem?

428
0:28:15.000 --> 0:28:18.560
Because there's like the world's full of- It is.

429
0:28:18.560 --> 0:28:19.560
I'm thinking, right?

430
0:28:19.560 --> 0:28:20.560
So like- Yes.

431
0:28:20.560 --> 0:28:21.560
What's the requirement you have?

432
0:28:21.560 --> 0:28:26.800
Like you want it to be public domain or- It has to be freely available.

433
0:28:26.800 --> 0:28:30.160
It has to be licensed under a permissive license.

434
0:28:30.160 --> 0:28:37.920
So Creative Commons that also includes commercial use.

435
0:28:37.920 --> 0:28:42.980
We give references and we give attribution to all the sources that we use.

436
0:28:42.980 --> 0:28:50.660
If you go into the Argos Packaged Manager repository, where all the models are hosted,

437
0:28:50.660 --> 0:28:53.940
we do give the appropriate licensing credits to all those.

438
0:28:53.940 --> 0:28:59.600
But yes, we cannot go on, say, the Internet and start scraping results.

439
0:28:59.600 --> 0:29:05.040
Because everything- You just have to assume that everything is covered by copyright until

440
0:29:05.040 --> 0:29:06.780
they tell you that you can use it freely.

441
0:29:06.780 --> 0:29:12.160
So it's only trained on openly available and freely licensed sources.

442
0:29:12.160 --> 0:29:17.700
Do you need it to be translated as well, or just a singular language?

443
0:29:17.700 --> 0:29:19.460
It has to be translated.

444
0:29:19.460 --> 0:29:27.240
So very briefly, the format of the input that goes into the training is a file that has

445
0:29:27.240 --> 0:29:33.160
the say the English sentences and a separate file that has the translation on the same

446
0:29:33.160 --> 0:29:34.160
line.

447
0:29:34.160 --> 0:29:35.160
So it's very basic.

448
0:29:35.160 --> 0:29:36.320
It throws it down a little.

449
0:29:36.320 --> 0:29:37.320
Yeah.

450
0:29:37.320 --> 0:29:39.000
And somebody could do the work by hand, right?

451
0:29:39.000 --> 0:29:43.440
You start from the English translation and you start doing the translation.

452
0:29:43.440 --> 0:29:46.760
So it will take a lot of work, but it's doable, especially in a crowd form-

453
0:29:46.760 --> 0:29:51.200
I take the Internet and- Are we out of time?

454
0:29:51.200 --> 0:29:52.200
Yeah.

455
0:29:52.200 --> 0:29:53.200
Okay.

456
0:29:53.200 --> 0:29:54.200
I'll be around if you have other questions.

457
0:29:54.200 --> 0:29:55.200
Our time is up, unfortunately.

458
0:29:55.200 --> 0:29:57.040
They're kicking me out.

459
0:29:57.040 --> 0:30:00.320
But the next speaker will deliver something awesome as well next talk.

460
0:30:00.320 --> 0:30:01.320
So thank you again.

461
0:30:01.320 --> 0:30:17.840
All right, thank you.


WEBVTT

00:00.000 --> 00:07.520
a tool called Parkoach and how they've been using

00:07.520 --> 00:12.440
a logarithm for one time and they've kept it well.

00:12.440 --> 00:13.440
I think.

00:13.440 --> 00:15.800
Yeah. We'll see.

00:15.800 --> 00:17.160
All right. Up to you, Philippe.

00:17.160 --> 00:18.600
Thank you very much. So yes,

00:18.600 --> 00:20.820
my name is Philippe. I work at Tenerife in France.

00:20.820 --> 00:25.160
And so the talk today is not so much about Parkoach itself.

00:25.160 --> 00:26.480
I'm sorry for the wrong title,

00:26.480 --> 00:27.640
but naming is hard,

00:27.640 --> 00:29.600
so I had to put something.

00:29.600 --> 00:32.720
But today I want to talk to you about

00:32.720 --> 00:35.000
my experience with dealing with out of

00:35.000 --> 00:37.400
three plug-in and tools for LLVM.

00:37.400 --> 00:41.640
Parkoach is just one example and I will give some others.

00:41.640 --> 00:46.440
So first of all, I will try to explain you why and for whom

00:46.440 --> 00:49.680
am I doing this talk so that you know the audience.

00:49.680 --> 00:52.080
I'm going to talk about three different things.

00:52.080 --> 00:54.040
The first one is keeping up with LLVM.

00:54.040 --> 00:55.400
So we will see some code,

00:55.400 --> 00:57.600
CMake, C++ and stuff.

00:57.600 --> 01:00.280
The other point, the second point is usability,

01:00.280 --> 01:04.560
both from a developer to developer point of view and the user point of view.

01:04.560 --> 01:07.040
And the final point will be dealing with

01:07.040 --> 01:11.720
packaging when you're actually targeting some system.

01:11.720 --> 01:14.640
So why am I doing this talk?

01:14.640 --> 01:17.800
First of all, it's to provide some feedback

01:17.800 --> 01:23.200
and maybe provide you with some stuff I wish I knew beforehand,

01:23.200 --> 01:28.040
before coming into this.

01:28.040 --> 01:31.640
I'm doing this also because I've learned a couple of out of three projects

01:31.640 --> 01:33.560
and I faced the same issues.

01:33.560 --> 01:37.200
So maybe you've faced them too and it will be helpful.

01:37.200 --> 01:40.880
So it's not so much about the tool Parkoach itself,

01:40.880 --> 01:43.040
it's rather about the approach.

01:43.040 --> 01:47.400
And for whom it's basically anyone with a vote or who is involved in

01:47.400 --> 01:50.280
an out of three project for LLVM.

01:50.280 --> 01:53.840
This is my own point of view on this topic.

01:53.840 --> 01:55.480
If you have IDs, comments,

01:55.480 --> 01:59.960
improvements that you think may be helpful to me, don't hesitate.

01:59.960 --> 02:02.040
I will welcome them.

02:02.040 --> 02:06.680
So Parkoach is a tool for HPC application.

02:06.680 --> 02:10.760
It's basically an instrumentation analysis and instrumentation tool

02:10.760 --> 02:13.240
for OpenMP and MPI application.

02:13.240 --> 02:16.280
Basically checks that the user is using

02:16.280 --> 02:21.160
the APIs appropriately that there are no deadlock or data racism.

02:21.160 --> 02:23.880
The developers, this is where it gets interesting

02:23.880 --> 02:25.840
because they are not LLVM engineers, right?

02:25.840 --> 02:30.480
They are interns, students, PhD students, researchers.

02:30.480 --> 02:35.120
They have a whole job which is not LLVM.

02:35.120 --> 02:37.080
The users of the tool,

02:37.080 --> 02:39.000
they are scientific application developers.

02:39.000 --> 02:42.360
So you cannot ask them to compile LLVM from source.

02:42.360 --> 02:45.640
It's not going to work. They are not going to use your tool.

02:45.640 --> 02:49.600
The last part which is interesting with this project,

02:49.600 --> 02:53.640
it started like a long time ago when it was LLVM 3.7,

02:53.640 --> 02:55.840
and now it's based on LLVM 15.

02:55.840 --> 02:59.080
So there has been a lot of history in the tool.

02:59.080 --> 03:00.920
I'm working on it right now.

03:00.920 --> 03:04.360
It's my main job. So they have an LLVM engineer now,

03:04.360 --> 03:05.960
and I can do stuff.

03:05.960 --> 03:09.040
I provided the link for reference if you want to take a look.

03:09.040 --> 03:12.360
There are two other motivating projects that I can talk about.

03:12.360 --> 03:14.280
One, I'm actually not going to talk about

03:14.280 --> 03:15.920
much because it's not free.

03:15.920 --> 03:19.200
It's a commercial compiler which is based on LLVM,

03:19.200 --> 03:23.160
and basically the developers are LLVM engineers.

03:23.160 --> 03:27.120
So we have more flexibility when doing developments,

03:27.120 --> 03:29.560
and the users are clients who are paying for the compiler.

03:29.560 --> 03:33.920
So we needed to provide something good.

03:34.760 --> 03:38.800
The other point is a student LLVM exercises.

03:38.800 --> 03:43.080
I do LLVM courses for security students,

03:43.080 --> 03:45.040
and I want them to be able to do

03:45.040 --> 03:47.160
some code transformation with LLVM.

03:47.160 --> 03:49.840
So the developers are just a friend of mine and me,

03:49.840 --> 03:52.280
and the users are students.

03:52.280 --> 03:55.480
We are expecting them to code into the project.

03:55.480 --> 03:58.760
So we need to make it easy for them to get into,

03:58.760 --> 04:03.280
and we have 16 hours to this project,

04:03.280 --> 04:06.880
and they cannot spend two hours installing LLVM.

04:06.880 --> 04:08.800
It's not going to work either.

04:09.000 --> 04:11.520
So in all this projects,

04:11.520 --> 04:13.320
I'm going to talk pretty much the same issues.

04:13.320 --> 04:15.040
So I'm going to talk about them now.

04:15.040 --> 04:17.480
The first one is keeping up with LLVM.

04:17.480 --> 04:19.680
So I'm not sure if it was intentional in the schedule,

04:19.680 --> 04:22.800
but having a talk for you about CMake and stuff,

04:22.800 --> 04:24.440
it's quite helpful because I don't have to

04:24.440 --> 04:26.200
go too deep in the details.

04:26.200 --> 04:27.640
You already know them.

04:27.640 --> 04:33.720
So let's go back like maybe eight years ago.

04:33.720 --> 04:36.320
You wanted to do some LLVM tools,

04:36.320 --> 04:38.200
as there was no CMake integration.

04:38.200 --> 04:41.160
The first approach that you had as a developer was

04:41.160 --> 04:43.640
either do stuff manually,

04:43.640 --> 04:45.920
maybe using LLVM config to get

04:45.920 --> 04:48.600
the flags and the libraries and so on.

04:48.600 --> 04:50.320
But basically, you had no easy way to

04:50.320 --> 04:52.560
integrate with LLVM. It was quite manual.

04:52.560 --> 04:56.520
Then came CMake, and you could use

04:56.520 --> 04:59.600
the standard add library, target link libraries,

04:59.600 --> 05:04.120
but you had to know what to feed these macros with.

05:04.880 --> 05:08.760
Some stuff I've encountered in this project is

05:08.760 --> 05:13.960
some people who were developing this project,

05:13.960 --> 05:16.720
were not comfortable with CMake,

05:16.720 --> 05:19.560
and they would perform some changes where they would

05:19.560 --> 05:21.920
actually do CMake integration with

05:21.920 --> 05:25.800
our coded passes in the CMake, so it would be a quad.

05:26.080 --> 05:28.840
Basically, now it's, I think,

05:28.840 --> 05:34.040
at least from the examples we have, it's way better.

05:34.040 --> 05:37.000
So using the LLVM CMake integration

05:37.000 --> 05:38.720
simplifies a lot of stuff.

05:38.720 --> 05:43.320
You just have basically to know which component of LLVM you want to use,

05:43.320 --> 05:45.720
how you want to build your library,

05:45.720 --> 05:47.880
like is it static or shared basically,

05:47.880 --> 05:50.760
and you have dedicated macros to just construct

05:50.760 --> 05:55.000
whatever stuff you want to construct for LLVM.

05:55.000 --> 05:57.400
So let's take an example code.

05:57.400 --> 05:59.440
So you don't have to understand everything.

05:59.440 --> 06:02.640
It's just to give an example of how it works.

06:02.640 --> 06:04.440
You basically say, okay,

06:04.440 --> 06:08.800
I want to find LLVM, provide a version, sometimes,

06:08.800 --> 06:11.960
include the LLVM CMake helper,

06:11.960 --> 06:14.200
and include some definition,

06:14.200 --> 06:17.200
and then this is interesting part because you can say, okay,

06:17.200 --> 06:20.080
I want these components in my tool.

06:20.080 --> 06:26.440
Call the CMake helper with your plugin source, and that's it.

06:26.440 --> 06:30.800
I mean, the CMake helper will take care of saying, okay,

06:30.800 --> 06:33.240
depending on how LLVM is installed,

06:33.240 --> 06:38.560
like is it just the big dial-up or are there individual libraries?

06:38.560 --> 06:41.360
It will set up the target link libraries

06:41.360 --> 06:43.360
appropriately and you don't have to think about it.

06:43.360 --> 06:45.320
It's just automatic.

06:45.320 --> 06:49.240
If you want to do some tools or pass plugin,

06:49.240 --> 06:51.440
there are macros to do these two.

06:51.440 --> 06:55.360
So basically, you just have to figure out which kind of build you want,

06:55.360 --> 06:59.680
and CMake LLVM will configure everything for you.

06:59.680 --> 07:02.240
There are some useful examples.

07:02.240 --> 07:05.320
For pass plugins, there is a by example,

07:05.320 --> 07:07.360
which is basically a new pass plugin,

07:07.360 --> 07:09.840
very simple, it's a kind of a hello world.

07:09.840 --> 07:14.440
LLVM tutorials are some out of three passes to get you started with,

07:14.440 --> 07:18.560
and actually quite helpful if you are looking into this.

07:22.320 --> 07:25.840
Now, let's talk about some code.

07:25.840 --> 07:28.640
So let's say you're new to LLVM,

07:28.640 --> 07:30.680
pretty new to C++.

07:30.680 --> 07:32.840
Your students, for instance,

07:32.840 --> 07:36.560
and you want to perform some LLVM transformation.

07:36.560 --> 07:42.000
So you go on your search engine and you look for,

07:42.000 --> 07:46.880
how do I iterate over instructions of LLVM function?

07:46.880 --> 07:50.600
Pretty much all of your resources like StackOverflow or even

07:50.600 --> 07:53.960
some presentations that will give you the code on the left.

07:53.960 --> 07:56.440
So it's fine, it works. I mean, you are iterating over

07:56.440 --> 07:59.080
all the iteration instruction of the function.

07:59.080 --> 08:01.400
But if you know a bit better C++,

08:01.400 --> 08:04.400
you know that you can put runge instead of row iterators.

08:04.400 --> 08:08.440
If you know the instruction iterators from LLVM,

08:08.440 --> 08:12.720
you know that you can use instruction of F to just get all the instruction of F.

08:12.720 --> 08:15.840
All the code works, but arguably,

08:15.840 --> 08:20.320
the codes on the right are easier to read and in the end,

08:20.320 --> 08:24.720
easier to maintain especially if you consider that there are a lot of examples like this in the code.

08:24.720 --> 08:30.280
It adds up and so simplifying stuff is nice sometimes.

08:30.280 --> 08:34.640
So it's not a problem of StackOverflow or anything.

08:34.640 --> 08:40.600
It's just that the answer in StackOverflow on the slides are old like from 2015.

08:40.600 --> 08:43.840
Like if you would update the answer,

08:43.840 --> 08:47.760
it would just be the option on the right.

08:47.760 --> 08:53.640
Another thing I want to talk about and that I've seen a lot in

08:53.640 --> 08:56.680
Parkout is iterating over something,

08:56.680 --> 08:59.600
but putting a predicate like I want to iterate through this stuff,

08:59.600 --> 09:03.440
but only if this stuff is true for some predicate.

09:03.440 --> 09:05.280
So you can do stuff like that,

09:05.280 --> 09:08.400
early continues or nested if.

09:08.400 --> 09:12.320
But if you know the STL extra from LLVM,

09:12.320 --> 09:17.240
you know that you can create filtered range for any range actually.

09:17.240 --> 09:18.840
So you pass a range,

09:18.840 --> 09:21.240
you pass a predicate and inside the loop,

09:21.240 --> 09:25.280
you just get the object you're looking for.

09:25.280 --> 09:27.920
Again, it's a simple predicate,

09:27.920 --> 09:29.480
so it doesn't matter much as is,

09:29.480 --> 09:31.640
but if you add some more stuff,

09:31.640 --> 09:35.680
it starts growing up and maintenance became a bit harder,

09:35.680 --> 09:37.800
readability is impacted too.

09:37.800 --> 09:40.520
So this is something to consider.

09:40.520 --> 09:43.520
Now, something more like a critical,

09:43.520 --> 09:45.840
it's advanced data types.

09:45.840 --> 09:47.880
There are a lot of data types in LLVM.

09:47.880 --> 09:50.480
If you are not familiar with LLVM,

09:50.480 --> 09:52.000
and I've seen a lot of color exists,

09:52.000 --> 09:57.880
you will just use whatever data types is available in the STL,

09:57.880 --> 10:00.000
and you will get a map for instance,

10:00.000 --> 10:04.800
use some helper, and the actual issue starts when input,

10:04.800 --> 10:06.320
the map of instruction,

10:06.320 --> 10:09.000
you want to map an instruction to something.

10:09.000 --> 10:13.200
If you go through the input and

10:13.200 --> 10:16.300
change an instruction like if you delete it,

10:16.300 --> 10:19.200
or if you replace all the uses with some other value,

10:19.200 --> 10:21.800
what happens to the instruction in the map?

10:21.800 --> 10:25.960
So with row map from the STL,

10:25.960 --> 10:28.080
there is no mechanism,

10:28.080 --> 10:30.480
so nothing happened and you end up iterating

10:30.480 --> 10:34.080
of trying to find something which is not valid anymore.

10:34.080 --> 10:38.720
Whereas if you are aware of the data types from LLVM,

10:38.720 --> 10:41.740
you are able to use some kind of value map which has

10:41.740 --> 10:44.240
specific handle to remove the value or

10:44.240 --> 10:49.760
update the value if it is changed during the life of the value.

10:49.760 --> 10:54.720
So some other helpers that are quite nice,

10:54.720 --> 10:56.640
I mean it's not a big deal,

10:56.640 --> 10:59.440
but for instance, instead of using std-fanif,

10:59.440 --> 11:01.680
you can use LLVM-fanif and just put a range

11:01.680 --> 11:04.680
instead of just the individual character.

11:04.680 --> 11:06.920
In this case, it's not a big deal,

11:06.920 --> 11:08.960
but it's actually quite nice.

11:08.960 --> 11:11.400
But basically, every stuff like that,

11:11.400 --> 11:15.800
I've encountered this for a lot of code where

11:15.800 --> 11:20.040
you would be able to replace most of

11:20.040 --> 11:22.640
the occurrences with any vector from

11:22.640 --> 11:28.600
the LLVM advanced data types or a array for string graph.

11:28.600 --> 11:32.160
There are a lot of stuff in LLVM that you may not be aware of,

11:32.160 --> 11:37.040
and that makes your code quite nicer if you use them.

11:37.040 --> 11:41.960
So yeah, dealing with it.

11:41.960 --> 11:43.280
So you may think, okay,

11:43.280 --> 11:44.720
this guy is just being picky with

11:44.720 --> 11:47.640
people who are writing the code. It may be true.

11:47.640 --> 11:49.280
I would argue that it depends on

11:49.280 --> 11:51.720
actually who makes the contribution because you cannot

11:51.720 --> 11:53.720
expect the same level of contribution from

11:53.720 --> 11:56.880
a student or from an LLVM engineer.

11:56.880 --> 11:59.200
Especially when you're a PhD student,

11:59.200 --> 12:00.600
you have a, I don't know, a deadline,

12:00.600 --> 12:02.880
you just want a tool who does something.

12:02.880 --> 12:07.880
You're not going to spend times and times on how you do stuff,

12:07.880 --> 12:09.280
as long as it works.

12:09.280 --> 12:13.400
At least that's my experience dealing with that.

12:13.400 --> 12:17.040
But in my opinion, the accumulation of small details matters,

12:17.040 --> 12:20.840
and it was very explicit in the case of

12:20.840 --> 12:24.080
Barcoach because I came after maybe five,

12:24.080 --> 12:29.200
six years where the accumulation of researchers and PhD students

12:29.200 --> 12:33.640
led to a lot of technical depth.

12:35.080 --> 12:40.320
If there was some advice that were given

12:40.320 --> 12:43.960
to the PhD students or the researcher,

12:43.960 --> 12:47.640
it would have been a way nicer code to read or to maintain.

12:49.640 --> 12:53.680
It's quite obvious, but doing code reviews helps a lot.

12:53.680 --> 12:56.880
Sometimes you cannot do them if there is no one

12:56.880 --> 13:00.440
able to actually provide some useful feedback on this.

13:00.440 --> 13:03.440
Like in the case when people don't know LLVM,

13:03.440 --> 13:05.320
you cannot expect them to review code and

13:05.320 --> 13:08.080
provide some a lot of feedback.

13:08.080 --> 13:11.480
But what I do know is I

13:11.480 --> 13:14.400
redirect every time to the LLVM programmers manual.

13:14.400 --> 13:16.320
It's not like the first thing you do.

13:16.320 --> 13:19.560
Usually, you just go to a search engine and search for what you want.

13:19.560 --> 13:21.360
But I will argue that actually reading

13:21.360 --> 13:25.480
the programmer manual is more helpful in that specific case.

13:25.480 --> 13:27.840
Some things that I know people don't want to

13:27.840 --> 13:29.800
do when they are starting LLVM is just

13:29.800 --> 13:31.600
read the code from the past using LLVM.

13:31.600 --> 13:33.800
There are a lot of good stuff in there.

13:33.800 --> 13:37.240
Obviously, if you're not familiar with C++ and LLVM,

13:37.240 --> 13:39.120
it's not the easiest,

13:39.120 --> 13:41.760
but I think it's still worth it.

13:42.800 --> 13:48.320
So the next topic is updating the LLVM versions.

13:48.720 --> 13:52.740
So far when I've developed out of two tools,

13:52.740 --> 13:56.520
I've always set the version to one specific number.

13:56.520 --> 13:58.600
Let's say LLVM 9.

13:58.600 --> 14:01.480
Then when LLVM 10 comes out,

14:01.480 --> 14:06.560
you rebase your plugin and check if any API broke.

14:06.560 --> 14:09.120
Either was some changes in the IR.

14:09.120 --> 14:12.040
Most recently, I am thinking about Opac pointers.

14:12.040 --> 14:18.200
It was quite a big change when updating the LLVM version.

14:18.200 --> 14:22.000
Something to consider when doing this is that it may be time consuming.

14:22.000 --> 14:24.520
A lot of time can be spent in,

14:24.520 --> 14:29.280
it may be just a day if there were no changes in the API.

14:29.280 --> 14:31.360
But it could also be very time consuming.

14:31.360 --> 14:34.160
For instance, if you have to change all your passes because it's been

14:34.160 --> 14:38.320
three years that the new pass manager was out and you still didn't do the migration,

14:38.320 --> 14:40.760
and now suddenly it's deprecated and it's going to be removed.

14:40.760 --> 14:42.760
So you need to migrate your passes.

14:42.760 --> 14:44.640
So you have to do it.

14:44.640 --> 14:46.840
In my experience, it's quite obvious too,

14:46.840 --> 14:50.200
but skipping versions makes it worse.

14:50.200 --> 14:54.600
Sorry. Something that I've seen,

14:54.600 --> 14:57.120
and I know sometimes it cannot be avoided,

14:57.120 --> 15:01.360
but in that case it was avoidable.

15:01.360 --> 15:05.400
But basically trying to support multiple LLVM versions at once.

15:05.400 --> 15:08.040
Like say support from LLVM 9 through 12,

15:08.040 --> 15:10.280
it's actually what was done.

15:10.280 --> 15:13.200
Don't do it. If you can, just don't do it.

15:13.200 --> 15:16.520
It's a pick a version and stay like this because otherwise,

15:16.520 --> 15:18.960
it's just multiple if-def and everyone

15:18.960 --> 15:22.880
is going to code and it's a unmaintainable, I think.

15:23.920 --> 15:27.680
So now, let's talk about passes.

15:27.680 --> 15:33.560
If you look for a Hello World pass on the Internet,

15:33.560 --> 15:36.880
you will get a Hello World pass which is a transformation pass.

15:36.880 --> 15:39.800
So in LLVM, you have two kinds of passes.

15:39.800 --> 15:43.240
One was the first kind is analysis,

15:43.240 --> 15:45.520
and basically they don't touch the IR.

15:45.520 --> 15:49.160
You just look at the IR and maybe provide some result,

15:49.160 --> 15:51.280
which is a result of the analysis and that can be

15:51.280 --> 15:54.920
used by transformation passes or other analysis.

15:54.920 --> 15:57.000
There are the transformation passes

15:57.000 --> 15:59.920
which may or may not change the IR.

16:00.520 --> 16:03.520
Obviously, when you get your Hello World pass,

16:03.520 --> 16:05.760
you want to do everything in it.

16:05.840 --> 16:08.920
I'm not talking about LLVM developers,

16:08.920 --> 16:11.240
but I'm talking about students and researchers that have

16:11.240 --> 16:13.440
the pass and they put everything in it.

16:13.440 --> 16:18.000
So it's fine when it's just

16:18.000 --> 16:20.160
one shot or something like that,

16:20.160 --> 16:22.720
but in the time at some point,

16:22.720 --> 16:25.160
both the analysis and the transformations

16:25.160 --> 16:29.200
are semantically different and LLVM has some mechanism

16:29.200 --> 16:31.920
to make it easy for you to have

16:31.920 --> 16:34.800
the analysis run only when it's needed.

16:34.800 --> 16:36.520
There is a caching mechanism.

16:36.520 --> 16:39.800
You can say, okay, I want this analysis for this object,

16:39.800 --> 16:43.560
and if it exists, it will give it back to you.

16:43.560 --> 16:48.080
Also, it avoids the passing structure around

16:48.080 --> 16:50.000
because when you are in a transformation pass,

16:50.000 --> 16:52.120
you can request any analysis from basically anywhere

16:52.120 --> 16:54.960
as long as you have the analysis manager.

16:55.240 --> 17:01.200
So this is something that have cost me quite some time,

17:01.200 --> 17:05.200
like just untangling the analysis code from the transformation code,

17:05.200 --> 17:09.080
and overall, it's improved the performances

17:09.080 --> 17:14.720
because some analysis were requested more than once for the same object.

17:17.560 --> 17:20.120
So yes, it leads me to

17:20.120 --> 17:24.240
investigating performance issues because it was something too.

17:24.560 --> 17:28.880
So what happens when you don't know LLVM and you want to debug your code?

17:28.880 --> 17:31.760
You put LLVM errors everywhere and you

17:31.760 --> 17:33.920
come on them out when your code is ready.

17:33.920 --> 17:35.840
Okay. So it's a nightmare.

17:35.840 --> 17:40.840
I mean, it works, but you're not supposed to do it like this.

17:41.800 --> 17:49.040
So specifically for like a printf-like debug stuff,

17:49.040 --> 17:50.560
you have some LLVM helper.

17:50.560 --> 17:51.600
It's actually quite handy.

17:51.600 --> 17:54.840
You just put a debug type somewhere and you dot CPP.

17:54.840 --> 18:00.040
You wrap everything in LLVM debug because it does all the thing for you.

18:00.040 --> 18:02.640
If you don't include the debug information,

18:02.640 --> 18:05.080
it doesn't even appear in the binary.

18:05.080 --> 18:07.600
When you're running your path with ops,

18:07.600 --> 18:09.600
you can say, okay, I want to show

18:09.600 --> 18:12.200
the big information for this kind of path.

18:12.200 --> 18:17.640
Basically, provide the same feature and you don't have to come out LLVM errors.

18:17.640 --> 18:21.880
The other thing is timing your code,

18:21.880 --> 18:23.080
being able to tell, okay,

18:23.080 --> 18:26.360
this part of the transformation is costing me time.

18:26.360 --> 18:31.240
So what I've seen was some manual attempt to do timers,

18:31.240 --> 18:33.200
and basically, you declare all the timers,

18:33.200 --> 18:37.040
you start them manually and it start being a mess really quick.

18:37.040 --> 18:40.520
Hopefully, now we have a time trace scope.

18:40.520 --> 18:46.640
It was, I think it's what's used when you use F-time trace when starting Clang.

18:46.640 --> 18:48.320
So basically, it's just one line.

18:48.320 --> 18:52.040
You put one variable and when it's constructed,

18:52.040 --> 18:55.320
it starts a scope and it starts a timer and when it's disrupted,

18:55.320 --> 18:58.160
it stops the timer.

18:58.160 --> 19:03.840
LLVM has a whole system for this and it emits a GZON.

19:03.840 --> 19:08.040
If you put this GZON in a speed scope,

19:08.040 --> 19:09.240
you get something like that.

19:09.240 --> 19:14.440
You can see basically everything in your code without having to do anything.

19:14.440 --> 19:16.720
You get the entry points,

19:16.720 --> 19:21.440
you get the analysis, and here it was quite obvious for us,

19:21.440 --> 19:23.480
was the changes, what the changes were,

19:23.480 --> 19:27.760
because this analysis for instance was called multiple times.

19:27.760 --> 19:29.480
But it was for the same objects.

19:29.480 --> 19:32.160
So for instance, it would appear here too.

19:32.160 --> 19:34.880
But because of the caching mechanism and the untangling,

19:34.880 --> 19:37.920
it basically just was just called once.

19:37.920 --> 19:41.600
So this is something nice that you get basically for free.

19:41.600 --> 19:47.640
So now, some conclusion on the tool developments.

19:47.640 --> 19:50.640
So it's a fairly basic conclusion.

19:50.640 --> 19:52.240
Try to invest in maintenance.

19:52.240 --> 19:53.760
I know it's not always possible,

19:53.760 --> 20:00.720
especially in a scientific project, but it's worth it.

20:00.720 --> 20:03.640
Don't remember the wheel. If you want to do something in LLVM,

20:03.640 --> 20:07.960
it likely has already something in LLVM for this.

20:07.960 --> 20:09.560
Keep the dish minimal.

20:09.560 --> 20:12.160
One of the main weakness of Power Coach right now is that we

20:12.160 --> 20:16.440
use some passes which exist already in LLVM.

20:16.440 --> 20:18.680
I'm thinking about memory SSA, for instance,

20:18.680 --> 20:22.720
we use some copy of this and from a maintenance point of view,

20:22.720 --> 20:25.880
it's not quite nice so we need to migrate this away.

20:25.880 --> 20:28.680
If your passes can be useful to others,

20:28.680 --> 20:30.480
just try to upstream them.

20:30.480 --> 20:34.560
If you don't use them, you don't have to pay for them.

20:34.560 --> 20:37.760
Then let's talk a bit about usability,

20:37.760 --> 20:40.160
because it's quite a big deal for a tool,

20:40.160 --> 20:42.120
because you want it to be usable.

20:42.120 --> 20:44.760
So first, from a developer point of view,

20:44.760 --> 20:50.240
if your developers are going to be non-LVM folks,

20:50.240 --> 20:53.720
you don't want them to go into the LLVM install and stuff.

20:53.720 --> 20:57.840
So I've had good experience with using Docker

20:57.840 --> 21:01.440
and basically provide a Docker image with

21:01.440 --> 21:04.160
the LLVM compiled install somewhere

21:04.160 --> 21:08.440
or just install using the app repositories.

21:09.720 --> 21:13.280
Have some clear CI like how to build your tool,

21:13.280 --> 21:16.680
like just looking at the CI should be enough to know how to

21:16.680 --> 21:18.960
build your tool from a developer point of view.

21:18.960 --> 21:22.240
The other great thing is when you use LLVM,

21:22.240 --> 21:24.240
you get LLVM tools with it.

21:24.240 --> 21:26.200
So you get the lead and fight check.

21:26.200 --> 21:30.080
So instead of going through some manual testing and stuff,

21:30.080 --> 21:33.520
you can just use them and it's actually quite nice.

21:33.520 --> 21:37.280
Yes, of course, I could talk about coding standards,

21:37.280 --> 21:40.640
but basically since you're making a plug-in or a tool for LLVM,

21:40.640 --> 21:42.600
it makes sense to follow the same standard and you have

21:42.600 --> 21:46.680
already clung format and clung tidy configuration for this.

21:46.680 --> 21:49.520
Now as a user,

21:49.520 --> 21:51.840
you obviously don't want

21:51.840 --> 21:56.200
scientific application developer to compile your code from source.

21:56.200 --> 22:01.720
You want them to just have the plug-in and use it or have the tool and use it.

22:01.720 --> 22:05.080
If you look at Hello World passes,

22:05.080 --> 22:08.320
you see a lot of times that you have to first get the IR.

22:08.320 --> 22:11.640
So in our case, it's either from clung or from flung.

22:13.040 --> 22:15.080
You have to call up,

22:15.080 --> 22:18.360
load the path manually and call the path manually.

22:18.360 --> 22:27.000
So I would argue this is not nice enough for researchers and students.

22:27.000 --> 22:30.320
Since Barcoach is a verification tool,

22:30.320 --> 22:34.920
we cannot expect users to call it on every single file.

22:34.920 --> 22:40.600
So we actually had to do some more tooling to create some wrapper,

22:40.600 --> 22:44.520
which takes original compiler invocation,

22:44.520 --> 22:46.880
runs the original compiler invocation,

22:46.880 --> 22:50.120
generates a temporary IR and then runs a tool over it.

22:50.120 --> 22:56.280
It makes it much more easy for the users to just integrate with the other tools or to make.

22:57.640 --> 23:03.720
So that makes the tool more user friendly than I would say is unusual.

23:03.720 --> 23:07.000
The other part is how do you get the tool?

23:07.000 --> 23:12.080
So again, I've had good experience with Docker,

23:12.080 --> 23:17.200
especially for students because it's easy for them.

23:17.520 --> 23:24.000
Sometimes, obviously, we also provide some package for major distributions,

23:24.000 --> 23:29.280
but you actually have to worry about how is LLVM packaged on the target system,

23:29.280 --> 23:31.360
because depending on what is available,

23:31.360 --> 23:34.720
how easy chair libraries, dialyman stuff,

23:34.720 --> 23:37.680
it's not the same thing.

23:37.680 --> 23:42.880
And yeah, Docker, it's not something you can quite use on shared HPC clusters.

23:42.880 --> 23:44.960
You're more looking at stuff like Geeks,

23:44.960 --> 23:49.280
for instance, when targeting such platforms.

23:49.280 --> 23:53.080
So for this, you need some packaging.

23:53.080 --> 23:56.600
And packaging is my last pointer.

23:56.600 --> 24:03.040
So obviously, we used to do it yourself approach,

24:03.040 --> 24:06.000
basically just create a shared library and hope for the best.

24:06.000 --> 24:11.920
It doesn't work because you depend on how opt is installed and compiled,

24:11.920 --> 24:14.400
because you're loading dynamically a library into opt.

24:14.400 --> 24:17.840
So if you have not used the same like C++ libraries,

24:17.840 --> 24:19.440
you're going to run into issues.

24:19.440 --> 24:23.280
You don't know for sure which path manager is enabled by default in opt.

24:23.280 --> 24:24.880
So there's also this.

24:26.160 --> 24:32.080
So we've moved to doing some proper packages for APT,

24:32.080 --> 24:36.080
the dev and for Geeks and for Red Hat too,

24:36.080 --> 24:39.840
because we have some users using some custom version of Red Hat.

24:41.840 --> 24:44.240
And for this, we actually have quite an interesting issue,

24:44.240 --> 24:51.920
because we are sure that the LL version in their image is not available.

24:51.920 --> 24:57.600
So we made the choice of shipping just one single static tool.

24:57.600 --> 25:04.240
And for this, it was actually quite easy, because as I said when I talked about CMake,

25:04.240 --> 25:10.320
you just say, okay, I want this to be statically or as a shared library and

25:10.320 --> 25:14.160
the LLVM CMake handles it for you.

25:14.160 --> 25:17.760
And it was quite a nice experience for us to package for so

25:17.760 --> 25:21.760
many distribution without having to worry too much about CMake option and stuff.

25:21.760 --> 25:26.560
So some takeaways for the whole talk.

25:27.440 --> 25:31.520
In my opinion, the LLVM integration has evolved a lot and in a good direction.

25:31.520 --> 25:35.760
It's way easier to integrate with LLVM now than it was 10 years ago.

25:35.760 --> 25:42.400
It's nice, but it's nice to say it because when nice stuff happens, you have to say it too.

25:43.440 --> 25:44.480
Be prepared for maintenance.

25:44.480 --> 25:52.080
If you want to create a note of tool, you have to invest in maintenance both for LLVM rebases,

25:52.080 --> 25:55.920
basically reviews and make sure that your contributors,

25:56.720 --> 26:01.360
if you are able to provide some LLVM guidance to your contributors, do it and it's worth it.

26:03.600 --> 26:05.840
Investing in CI is worth it, obviously.

26:05.840 --> 26:11.760
And LLVM documentation, I would definitely every day recommend

26:11.760 --> 26:17.920
going to the LLVM documentation rather than Google for understanding what is available in LLVM.

26:20.640 --> 26:27.200
And yeah, I'm encouraged by students to read the LLVM source code, but it's sometimes a bit hard.

26:28.880 --> 26:34.240
So if you have questions or comments, feel free and I will be happy to answer them.

26:35.280 --> 26:35.780
Yeah.

26:35.780 --> 26:39.780
Yes.

26:52.580 --> 26:58.660
So the question is for the wrapper we created, what do we use to create this wrapper, right?

26:58.660 --> 27:05.540
So basically it's a very, very small LLVM tool.

27:05.540 --> 27:07.780
Maybe you are familiar with not in LLVM.

27:07.780 --> 27:14.020
There is a very small utility in LLVM which just does not on the return of a program.

27:14.020 --> 27:16.580
And it's a very small LLVM tool based on LLVM.

27:17.220 --> 27:19.860
And we use a similar approach.

27:20.420 --> 27:27.460
Basically we say, okay, I created basically an empty main where I just use the LLVM support

27:27.460 --> 27:32.500
library to get the benefit from like argument parsing and the data types and so on.

27:33.060 --> 27:42.100
And I just pass the command line and call successfully clone the original compiler line.

27:42.100 --> 27:50.660
And then I just generate the intermediate representation for it by adding the appropriate

27:50.660 --> 27:54.580
flag and filtering out the other object generation flags.

27:54.580 --> 27:56.900
And then I just run the tool over it.

27:59.780 --> 28:00.580
Yes.

28:00.580 --> 28:07.140
Yes, because you can just, for instance, with CMake you can use the CMake C launcher.

28:07.140 --> 28:11.540
Basically just like C cache work for LLVM, you just change the launcher and you can use

28:11.540 --> 28:13.460
the tool to launch the compiler.

28:13.460 --> 28:19.060
And for all two tools you can actually, actually in our project we use MPICC,

28:19.060 --> 28:25.060
but we are able to change the compiler used for MPICC and say, okay, use instead of

28:25.060 --> 28:26.900
a package clone instead of GDC, for instance.

28:27.540 --> 28:30.100
And the first point was,

28:41.540 --> 28:46.020
so the question is, when you ship your tool, do you link statically or dynamically?

28:46.020 --> 28:49.140
Basically, yeah. So both, actually both.

28:50.100 --> 28:56.260
When shipping for Radatz, because we don't have a control over what package are in their custom

28:56.820 --> 29:00.900
image, we ship statically because we are not sure which LLVM we are going to have.

29:00.900 --> 29:04.980
So we just, the binary is 100 megabytes, but we don't have a much choice.

29:04.980 --> 29:15.540
And when shipping for system like Ubuntu or Debian, we just ship that with the dependence on the shared libraries.

29:15.540 --> 29:36.980
Yes?

29:36.980 --> 29:42.900
So the question is, when we're basing the tool from one LL version to the next one,

29:42.900 --> 29:47.700
do you use the change log developers put their love into?

29:47.700 --> 29:50.740
And if yes, is it helpful?

29:52.340 --> 29:54.100
Unfortunately, the answer is no.

29:56.580 --> 30:02.900
But that's because I look at the LLVM weakles, so I kind of know what happens.

30:02.900 --> 30:04.820
This is just my way of doing stuff.

30:04.820 --> 30:13.300
Yeah, so no, but if I would look into the change log, I would find helpful information, I'm sure.

30:24.980 --> 30:31.380
So the question is, am I trying to rebase as LLVM progresses,

30:31.380 --> 30:36.580
or am I just rebasing every version when it's released? And it's only when a release

30:37.620 --> 30:44.420
comes out, I do the rebase. It's easier because otherwise, you know, some, yeah, I mean,

30:44.420 --> 30:50.180
you know the stuff, depending on what kind of target you ship for, it's hard.

30:51.060 --> 30:56.580
And it's just simpler to say, okay, we know and then, like, we know we need to rebase a version, and it's fine.

30:56.580 --> 31:01.620
Thank you.

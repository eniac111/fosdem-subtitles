WEBVTT

00:00.000 --> 00:09.340
Okay, so good afternoon.

00:09.340 --> 00:13.440
I'm Nilo Menes and I would like to share some scripts.

00:13.440 --> 00:17.860
And after all these presentations we had this afternoon,

00:17.860 --> 00:22.440
quick hacks that I need to

00:22.440 --> 00:31.200
use to implement while translating a name document.

00:31.200 --> 00:37.360
How Python developers could use name on the wiki.

00:37.360 --> 00:40.320
Okay, so I will explain it better later on.

00:40.320 --> 00:44.240
So translation documentation with cloud tools and scripts.

00:44.240 --> 00:47.160
So how it started, we had

00:47.160 --> 00:50.160
a document called the name for Python programmers.

00:50.160 --> 00:54.640
That was written in English and Spanish by the same author.

00:54.640 --> 01:03.520
And this document is simply a translation table from Python to name.

01:03.520 --> 01:06.360
So if you already know how to write Python programs,

01:06.360 --> 01:09.120
you can read this document and it will explain,

01:09.120 --> 01:13.520
okay, this is a structure you have to write that way and so on and so on.

01:13.520 --> 01:19.360
But it was written by the same developer in English and Spanish,

01:19.360 --> 01:24.920
in a wiki format using the markdown and it's the wiki of GitHub.

01:24.920 --> 01:28.840
So in the Brazilian name group,

01:28.840 --> 01:30.640
when people started to say, hey,

01:30.640 --> 01:35.640
it would be useful to get more users to the name language.

01:35.640 --> 01:37.720
If we had this document,

01:37.720 --> 01:41.520
the name for Python programmers also translated in Brazilian Portuguese.

01:41.520 --> 01:42.820
And then I said, okay,

01:42.820 --> 01:46.160
that I did some translations before,

01:46.160 --> 01:48.040
I think I can help on this.

01:48.040 --> 01:52.040
So I started checking how I could do the contribution.

01:52.040 --> 01:53.800
So I went to the GitHub Wiki,

01:53.800 --> 01:58.760
I saw that the source code was in markdown format.

01:58.840 --> 02:04.240
I just check it out on Git and I started translating.

02:04.240 --> 02:06.200
Just after the table of contents,

02:06.200 --> 02:09.000
I say this will not end very well.

02:09.000 --> 02:12.320
I will have lots of problems later on because this document will be changed,

02:12.320 --> 02:16.400
it will be updated. Nobody will tell me that the original was updated.

02:16.400 --> 02:18.880
And in a document,

02:18.880 --> 02:21.560
you can also move the sections and do different things.

02:21.560 --> 02:24.080
So I said, this is not a good start.

02:24.360 --> 02:27.840
So the idea was,

02:27.840 --> 02:31.840
how can I help translating but also building

02:31.840 --> 02:34.360
an initial infrastructure to help

02:34.360 --> 02:37.200
translating this document to other languages?

02:37.200 --> 02:41.360
So how they were doing,

02:41.360 --> 02:44.780
they just cloned the English page and they started writing,

02:44.780 --> 02:48.360
overwriting the text in their native language.

02:48.760 --> 02:51.560
If you are the same author, it's fine.

02:51.560 --> 02:53.160
So he wrote the English version,

02:53.160 --> 02:55.640
he also translated to Spanish.

02:55.640 --> 02:58.680
Three or four languages, I think it's still walkable.

02:58.680 --> 03:03.760
But if you start to have as many languages as we saw in very big projects,

03:03.760 --> 03:06.840
you know that it's impossible to keep up to date.

03:06.840 --> 03:11.800
So I started to think about how can I update this?

03:11.800 --> 03:17.080
And I had the previous experience of working with translations in PO5,

03:17.080 --> 03:19.400
using PO5 for Link City,

03:19.400 --> 03:23.240
and also translations like December how to,

03:23.240 --> 03:27.840
and very other document formats where we really have to translate,

03:27.840 --> 03:30.120
copy and translate.

03:30.120 --> 03:36.200
But the PO format started to be very interesting because I say,

03:36.200 --> 03:40.600
if I manage to convert this markdown to PO and create

03:40.600 --> 03:42.520
a process around it,

03:42.520 --> 03:47.160
then we'll be back to the standard translation process where we can use PO edit,

03:47.160 --> 03:49.980
for example, to do the translation and move on.

03:49.980 --> 03:56.360
So I will report what I did and the tools I selected for doing this job.

03:57.360 --> 04:01.200
As I said, it looked very much like an old problem.

04:01.200 --> 04:03.800
So how to translate software to another language.

04:03.800 --> 04:07.360
The PO and get text combinations is very, very good.

04:07.360 --> 04:09.080
It's easy to use.

04:09.080 --> 04:14.440
Even if it's the first time you are translating software to just tag

04:14.440 --> 04:20.440
the text you want to be translated using get text is relatively easy.

04:20.440 --> 04:22.680
But I wasn't working with source code.

04:22.680 --> 04:24.480
I was working with markdown.

04:24.480 --> 04:28.200
And the markdown, you also have

04:28.200 --> 04:33.220
some extra markers regarding the text formatting,

04:33.220 --> 04:37.460
and very specific items that I didn't want to spend time

04:37.460 --> 04:41.440
creating a converter from markdown to the PO file format.

04:41.440 --> 04:43.160
Of course, I started searching.

04:43.160 --> 04:45.160
I found some tools.

04:45.160 --> 04:52.320
But not all tools support the same kind of markdown as the GitHub markdown.

04:52.320 --> 04:57.040
And also, they create PO files with different qualities.

04:57.040 --> 04:59.920
So I spent some time tweaking.

04:59.920 --> 05:02.400
So if you never worked with the PO file,

05:02.400 --> 05:03.800
it looks like this.

05:03.800 --> 05:07.480
You have a message ID that is usually the original string.

05:07.480 --> 05:10.440
And you have the message string that is the translated one.

05:10.440 --> 05:14.520
And you create a new file for each language you are working on.

05:14.520 --> 05:18.000
So usually, English is the base language.

05:18.000 --> 05:21.420
And then you create a PO file for Portuguese, another for Spanish,

05:21.420 --> 05:24.920
and so on.

05:24.920 --> 05:25.800
Pretty standard.

05:25.800 --> 05:29.520
I think most of the afternoon, we heard about PO.

05:29.520 --> 05:33.280
So I think it was a good idea to keep this format.

05:33.280 --> 05:40.560
So this was the process if we were translating standard source code.

05:40.560 --> 05:41.680
So we have the source file.

05:41.680 --> 05:44.360
We extracted the PO file.

05:44.360 --> 05:49.960
Using the PO file, we use a translation tool, or an editor,

05:49.960 --> 05:54.440
to do the translation manually, string by string.

05:54.440 --> 05:56.480
After that, we compile the MO file.

05:56.480 --> 06:00.120
And the executables or the script can use the MO file

06:00.120 --> 06:03.240
and present the text translated to the end user.

06:03.240 --> 06:06.240
So I just needed to adapt this for markdown.

06:06.240 --> 06:09.040
And there is also a very special point

06:09.040 --> 06:15.320
regarding how the wiki is kept on GitHub that I will explain later.

06:15.320 --> 06:21.240
So how to convert markdown, this is specific for GitHub's markdown

06:21.240 --> 06:22.880
to the PO file.

06:22.880 --> 06:28.000
And also, I started to test multiple packages.

06:28.000 --> 06:30.520
Because as I said, if you Google, you'll

06:30.520 --> 06:34.160
find many converters from markdown to PO file.

06:34.160 --> 06:36.200
I think I tested two or three.

06:36.200 --> 06:39.120
I didn't roll down each one.

06:39.120 --> 06:42.160
But the final one is MDA PO.

06:42.160 --> 06:46.000
There is a library, a series of Python scripts.

06:46.000 --> 06:52.240
So it is much more easier for me to use packages

06:52.240 --> 06:53.160
in the same language.

06:53.160 --> 06:55.400
Because I could just write a Py project

06:55.400 --> 07:01.040
and put all these libraries in the same Py project.

07:01.040 --> 07:03.600
The previous one was in JavaScript.

07:03.600 --> 07:06.000
And if you want to run something in JavaScript,

07:06.000 --> 07:07.760
especially if you are not using Linux,

07:07.760 --> 07:10.800
you need to install a lot of other software.

07:10.800 --> 07:13.760
So this would enable the translation from markdown

07:13.760 --> 07:15.120
to PO and vice versa.

07:15.120 --> 07:17.160
Because this is the hardest part.

07:17.160 --> 07:22.160
Once you transform the markdown file into a PO file,

07:22.160 --> 07:23.560
you do the translation.

07:23.560 --> 07:26.200
But the end, the main objective is

07:26.200 --> 07:29.520
to get a translated markdown file back.

07:29.520 --> 07:32.320
So you can use it in GitHub and present the page

07:32.320 --> 07:35.440
in your native language with all the formatting

07:35.440 --> 07:37.960
that the original auto did before.

07:41.320 --> 07:45.040
And I also started to think, OK, maybe I

07:45.040 --> 07:50.720
can write another script that will manipulate the PO file

07:50.720 --> 07:53.680
and help me do the initial translation.

07:53.680 --> 07:55.600
Why?

07:55.600 --> 08:00.520
We have a series of tools for automatic translation.

08:00.520 --> 08:05.080
But of course, this was something I just started.

08:05.080 --> 08:08.400
I didn't have the integrations or anything like this.

08:08.400 --> 08:11.880
But I also didn't want to mess with the PO file itself.

08:11.880 --> 08:16.200
So I found a Python library called POlib

08:16.200 --> 08:17.600
that does exactly this.

08:17.600 --> 08:19.640
I can open a PO file.

08:19.640 --> 08:22.360
I can, for example, do some filtering, like OK,

08:22.360 --> 08:25.800
give me just the strings that are not yet translated.

08:25.800 --> 08:29.360
And so it's very, very easy to build and manipulate

08:29.360 --> 08:32.960
the PO files with it.

08:32.960 --> 08:36.480
So this is the example program.

08:36.480 --> 08:37.920
You simply open the file.

08:37.920 --> 08:39.680
We start the translation.

08:39.680 --> 08:42.200
And with the help with AWS Translate

08:42.200 --> 08:46.880
that I was using, because most of the time I work with AWS,

08:46.880 --> 08:51.240
I could easily send string by string to the cloud

08:51.240 --> 08:54.600
and get an initial translation that I would just

08:54.600 --> 08:57.440
review later on, because you can never

08:57.440 --> 08:59.840
trust the automatic translation, especially

08:59.840 --> 09:03.600
if you are working phrase by phrase.

09:03.600 --> 09:06.520
It's very easy to miss your target.

09:06.520 --> 09:08.520
But it's very good nowadays.

09:08.520 --> 09:11.520
So I would say at least 80% of everything

09:11.520 --> 09:14.080
you do in the automatic translation,

09:14.080 --> 09:18.520
you can keep as it is, but you still have to fix the 20%.

09:18.520 --> 09:21.080
And most of the times, the 20% is quite embarrassing.

09:21.080 --> 09:23.800
So you really need to review and double check

09:23.800 --> 09:25.520
before you publish anything.

09:25.520 --> 09:29.440
And as it's a paid service, as many translation services,

09:29.440 --> 09:33.600
and as our colleague, I didn't know the delivery translator

09:33.600 --> 09:36.880
as that was presented this afternoon,

09:36.880 --> 09:39.960
you don't want to pay every time you do this.

09:39.960 --> 09:45.960
So I used the previous script to create a list of the strings

09:45.960 --> 09:47.280
that were never translated.

09:47.280 --> 09:49.160
They were still empty.

09:49.160 --> 09:51.960
So I know that if I run it multiple times,

09:51.960 --> 09:53.920
I will not be bugging AWS Translate

09:53.920 --> 09:56.680
and paying for the translation of strings

09:56.680 --> 10:00.800
that are already translated or reviewed.

10:00.800 --> 10:03.080
And as you can see, the script is very simple.

10:03.080 --> 10:08.720
You open the PO file, you send the text to the cloud,

10:08.720 --> 10:11.600
in this case, AWS Translate.

10:11.600 --> 10:13.080
You save, you replace the string,

10:13.080 --> 10:14.880
and you save it in a new PO file.

10:14.880 --> 10:16.640
It's done.

10:16.640 --> 10:19.640
So the script is almost out of this.

10:19.640 --> 10:22.400
You have it complete on GitHub.

10:26.120 --> 10:29.120
And this is the main job.

10:29.120 --> 10:30.920
Another advantage of these tools is

10:30.920 --> 10:33.920
that you can create a list of words that

10:33.920 --> 10:36.520
should not be translated.

10:36.520 --> 10:39.800
And this helps a lot, especially if you have a product

10:39.800 --> 10:44.000
or a document with a common name that you don't want

10:44.000 --> 10:46.200
to be translated.

10:46.200 --> 10:48.600
So you can pass this special list.

10:48.600 --> 10:51.800
You can create some exceptions.

10:51.800 --> 10:55.480
But as was explaining in the previous presentation,

10:55.480 --> 10:56.240
it's also a problem.

10:56.240 --> 10:59.800
Because most of the time, we select English

10:59.800 --> 11:03.920
as the main or the source translation language.

11:03.920 --> 11:08.720
You cannot create exclusion lists using programming

11:08.720 --> 11:11.120
languages, keywords.

11:11.120 --> 11:18.280
So in this document, Python, name for Python programmers,

11:18.280 --> 11:20.640
of course, there are lots of source code.

11:20.640 --> 11:23.080
And when I translate it to Portuguese, for example,

11:23.080 --> 11:27.720
keywords like for, in, we're all translated to Portuguese.

11:27.720 --> 11:32.640
So by using the automatic translation engine,

11:32.640 --> 11:36.000
you have to review and revet this translation.

11:36.000 --> 11:39.600
So the translated program will continue to be valid.

11:39.600 --> 11:42.560
And you have to pay very close attention.

11:42.560 --> 11:43.740
Because, of course, you will also

11:43.740 --> 11:46.120
translate variable names if you have source code

11:46.120 --> 11:47.360
in the document.

11:47.360 --> 11:50.600
So you need to pay attention that the output's still

11:50.600 --> 11:52.600
coherent.

11:52.600 --> 11:55.040
And, of course, as you need to do this manual work,

11:55.040 --> 11:59.360
you can use a PO edit tool or any other tool

11:59.360 --> 12:03.360
that you are used to use to work with PO files.

12:03.360 --> 12:05.640
So here we have the English version.

12:05.640 --> 12:08.240
And there we have the Brazilian Portuguese version.

12:08.240 --> 12:13.600
I could just step item by item and reveal these translations

12:13.600 --> 12:17.760
until I was satisfied with the result.

12:17.760 --> 12:21.640
And then you can simply generate the markdown file

12:21.640 --> 12:24.000
from the PO file.

12:24.000 --> 12:26.520
So we started with the markdown source code.

12:26.520 --> 12:31.640
We tracked using MADPO to create the initial PO file.

12:31.640 --> 12:35.320
I run the script that sends the untranslated strings

12:35.320 --> 12:36.840
to AWS Translate.

12:36.840 --> 12:39.560
But you can use any provider you want.

12:39.560 --> 12:41.160
You review with PO edit.

12:41.160 --> 12:45.040
And you do the opposite conversion from PO file

12:45.040 --> 12:47.800
to markdown and publish the wiki.

12:47.800 --> 12:51.280
So this is the workflow I tried to implement

12:51.280 --> 12:54.400
using my collection of scripts or hacks.

12:54.400 --> 12:57.840
It is not really a tool.

12:57.840 --> 13:03.120
But with the intention to facilitate a single markdown

13:03.120 --> 13:05.400
file translation.

13:05.400 --> 13:07.000
So the document looks like this.

13:07.000 --> 13:10.320
This is the English version.

13:10.320 --> 13:12.920
Yes, I put the English.

13:12.920 --> 13:15.240
This is the Portuguese one.

13:15.240 --> 13:19.680
So in the end, I could publish this document in GitHub.

13:19.680 --> 13:22.680
It's not yet fully integrated if the GitHub wiki,

13:22.680 --> 13:26.920
because ideally I should put the GitHub wiki

13:26.920 --> 13:31.320
of this documentation as a sub-module of my project.

13:31.320 --> 13:33.600
So when I updated it, I will also

13:33.600 --> 13:36.360
get the newest version of the markdown.

13:36.360 --> 13:39.440
And if I do this kind of integration using GitHub,

13:39.440 --> 13:43.440
I will be able to publish the markdown file also using Git.

13:43.440 --> 13:46.760
For this initial version, I just went to the editor.

13:46.760 --> 13:48.120
And I paste the markdown file.

13:48.120 --> 13:49.920
But it's possible to do the integration.

13:49.920 --> 13:52.680
It's a next step that I still have to do.

13:55.280 --> 13:58.080
So I published the scripts in this GitHub.

13:58.080 --> 14:00.120
So it's an info Python programmers.

14:00.120 --> 14:03.280
It's useful for any markdown file you

14:03.280 --> 14:08.240
may want to apply the same workflow.

14:08.240 --> 14:11.160
And the page isn't better, because I

14:11.160 --> 14:14.760
ask that all the translators, all the people that

14:14.760 --> 14:18.160
can read Brazilian Portuguese to check if everything is fine.

14:18.160 --> 14:20.480
Because the main goal to have a process

14:20.480 --> 14:25.600
is that usually you never do the translation a single time.

14:25.600 --> 14:29.280
The translation is something that you need to keep alive.

14:29.280 --> 14:33.160
As soon as the English version is extended, translated,

14:33.160 --> 14:36.320
updated, you have to do the same thing in Portuguese.

14:36.320 --> 14:38.680
If you don't have an automatic process able to use

14:38.680 --> 14:42.280
license this document and present a subset of changes,

14:42.280 --> 14:45.800
you'll be obliged to review a full document.

14:45.800 --> 14:48.720
And this can be very, very cumbersome over time

14:48.720 --> 14:51.080
if the document has 15, 20 pages.

14:51.080 --> 14:53.680
So it's not ideal.

14:53.680 --> 14:57.080
And another advantage is that the tool

14:57.080 --> 15:02.280
is smart enough to detect repetitions of the same string.

15:02.280 --> 15:04.520
So you also don't have the boring work

15:04.520 --> 15:08.440
to retranslate the same text multiple times.

15:08.440 --> 15:09.880
This also saves a lot of time.

15:09.880 --> 15:14.280
Yes.

15:14.280 --> 15:17.960
So these are the main findings and the main problems

15:17.960 --> 15:19.720
I try to solve.

15:19.720 --> 15:21.840
And that's it if you have any questions.

15:23.840 --> 15:24.800
You can sit.

15:24.800 --> 15:41.320
If you have a big taste like you want a paragraph, it breaks each phrase.

15:41.320 --> 15:43.080
So it's much easier.

15:43.080 --> 15:45.800
And especially if your text has source code,

15:45.800 --> 15:48.160
because the challenge was the source code.

15:48.160 --> 15:50.760
And sometimes you have to keep the indentation and so on

15:50.760 --> 15:51.840
and so on.

15:51.840 --> 15:53.720
You don't want to pass the indentation

15:53.720 --> 15:56.640
mass to the translator.

15:56.640 --> 15:59.880
So if you use a tool like this, it will structure just the part

15:59.880 --> 16:02.000
of the program with text.

16:02.000 --> 16:07.320
And it will keep the white space, which is very important in Python.

16:07.320 --> 16:08.320
So you can translate.

16:08.320 --> 16:10.520
But you still have to pay attention because

16:10.520 --> 16:12.920
of the automatic translation to translate everything

16:12.920 --> 16:14.520
to the target language.

16:14.520 --> 16:19.440
So you have to revert the keywords.

16:19.440 --> 16:21.680
But at least the generation is quite strong.

16:21.680 --> 16:24.280
So when you have generated this, the program is still

16:24.280 --> 16:25.840
a correct program in the end.

16:25.840 --> 16:26.440
So it's good.

16:35.560 --> 16:36.160
OK.

16:36.160 --> 16:38.520
It's the last one.

16:38.520 --> 16:39.040
OK.

16:39.040 --> 16:40.400
Thank you.

16:40.400 --> 16:51.920
Thank you.
